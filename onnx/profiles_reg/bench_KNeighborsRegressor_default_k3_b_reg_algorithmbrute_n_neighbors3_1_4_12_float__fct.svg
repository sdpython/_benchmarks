<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="902" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="885.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="885.00"> </text><g id="frames"><g><title>&lt;module&gt; (onnx/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="292" width="1" height="15" fill="rgb(233,83,9)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="308" width="1" height="15" fill="rgb(236,206,53)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="324" width="1" height="15" fill="rgb(228,105,5)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="340" width="1" height="15" fill="rgb(214,169,21)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="10" y="356" width="1" height="15" fill="rgb(251,186,30)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="372" width="1" height="15" fill="rgb(220,211,18)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (3 samples, 0.11%)</title><rect x="10" y="388" width="1" height="15" fill="rgb(213,40,51)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="404" width="1" height="15" fill="rgb(228,96,47)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="420" width="1" height="15" fill="rgb(235,147,7)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="436" width="1" height="15" fill="rgb(247,228,34)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="10" y="452" width="1" height="15" fill="rgb(222,196,35)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="468" width="1" height="15" fill="rgb(247,49,28)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (3 samples, 0.11%)</title><rect x="10" y="484" width="1" height="15" fill="rgb(206,178,20)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="500" width="1" height="15" fill="rgb(225,3,3)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="516" width="1" height="15" fill="rgb(219,196,23)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="532" width="1" height="15" fill="rgb(205,91,31)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="10" y="548" width="1" height="15" fill="rgb(239,198,50)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="564" width="1" height="15" fill="rgb(244,172,40)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (3 samples, 0.11%)</title><rect x="10" y="580" width="1" height="15" fill="rgb(227,153,33)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="596" width="1" height="15" fill="rgb(233,142,22)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="612" width="1" height="15" fill="rgb(213,165,48)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="628" width="1" height="15" fill="rgb(220,143,11)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="644" width="1" height="15" fill="rgb(218,100,31)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="660" width="1" height="15" fill="rgb(235,51,17)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="676" width="1" height="15" fill="rgb(237,57,44)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="10" y="692" width="1" height="15" fill="rgb(236,220,53)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="708" width="1" height="15" fill="rgb(235,82,37)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="724" width="1" height="15" fill="rgb(214,69,27)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="740" width="1" height="15" fill="rgb(239,21,52)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="756" width="1" height="15" fill="rgb(237,32,25)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="772" width="1" height="15" fill="rgb(239,139,35)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="10" y="788" width="1" height="15" fill="rgb(230,77,51)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="10" y="804" width="1" height="15" fill="rgb(225,60,32)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="820" width="1" height="15" fill="rgb(206,30,40)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="836" width="1" height="15" fill="rgb(254,183,51)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(242,42,41)"/><text x="13.00" y="862.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="10" y="196" width="1" height="15" fill="rgb(221,188,34)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="10" y="212" width="1" height="15" fill="rgb(250,216,38)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="10" y="228" width="1" height="15" fill="rgb(234,18,48)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="10" y="244" width="1" height="15" fill="rgb(250,101,35)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.14%)</title><rect x="10" y="260" width="1" height="15" fill="rgb(226,145,46)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="10" y="276" width="1" height="15" fill="rgb(214,18,50)"/><text x="13.00" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.25%)</title><rect x="10" y="180" width="2" height="15" fill="rgb(251,169,2)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="11" y="196" width="1" height="15" fill="rgb(206,160,42)"/><text x="14.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="11" y="212" width="1" height="15" fill="rgb(239,160,15)"/><text x="14.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="11" y="228" width="1" height="15" fill="rgb(223,116,36)"/><text x="14.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (3 samples, 0.11%)</title><rect x="11" y="244" width="1" height="15" fill="rgb(214,102,23)"/><text x="14.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="11" y="260" width="1" height="15" fill="rgb(239,97,37)"/><text x="14.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="11" y="276" width="1" height="15" fill="rgb(219,36,8)"/><text x="14.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="11" y="292" width="1" height="15" fill="rgb(207,121,54)"/><text x="14.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="11" y="308" width="1" height="15" fill="rgb(229,160,41)"/><text x="14.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="11" y="324" width="1" height="15" fill="rgb(228,199,6)"/><text x="14.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.11%)</title><rect x="11" y="340" width="1" height="15" fill="rgb(243,127,40)"/><text x="14.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="11" y="356" width="1" height="15" fill="rgb(205,28,43)"/><text x="14.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="11" y="372" width="1" height="15" fill="rgb(241,159,40)"/><text x="14.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="11" y="388" width="1" height="15" fill="rgb(235,109,36)"/><text x="14.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="11" y="404" width="1" height="15" fill="rgb(218,5,17)"/><text x="14.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="11" y="420" width="1" height="15" fill="rgb(229,193,39)"/><text x="14.00" y="430.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.28%)</title><rect x="10" y="68" width="3" height="15" fill="rgb(253,138,36)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.28%)</title><rect x="10" y="84" width="3" height="15" fill="rgb(229,52,24)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.28%)</title><rect x="10" y="100" width="3" height="15" fill="rgb(238,169,15)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.28%)</title><rect x="10" y="116" width="3" height="15" fill="rgb(231,53,25)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.28%)</title><rect x="10" y="132" width="3" height="15" fill="rgb(224,207,31)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py) (8 samples, 0.28%)</title><rect x="10" y="148" width="3" height="15" fill="rgb(226,10,18)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.28%)</title><rect x="10" y="164" width="3" height="15" fill="rgb(253,202,38)"/><text x="13.00" y="174.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="20" y="388" width="2" height="15" fill="rgb(209,78,48)"/><text x="23.00" y="398.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="22" y="388" width="2" height="15" fill="rgb(222,197,42)"/><text x="25.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="22" y="404" width="2" height="15" fill="rgb(242,79,2)"/><text x="25.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="29" y="468" width="1" height="15" fill="rgb(231,103,29)"/><text x="32.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="29" y="452" width="2" height="15" fill="rgb(227,175,53)"/><text x="32.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.32%)</title><rect x="31" y="452" width="4" height="15" fill="rgb(241,71,14)"/><text x="34.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="33" y="468" width="2" height="15" fill="rgb(232,19,17)"/><text x="36.00" y="478.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="34" y="484" width="1" height="15" fill="rgb(235,222,4)"/><text x="37.00" y="494.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 0.81%)</title><rect x="26" y="436" width="10" height="15" fill="rgb(211,92,20)"/><text x="29.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::Merge (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="39" y="516" width="1" height="15" fill="rgb(239,186,12)"/><text x="42.00" y="526.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="37" y="484" width="4" height="15" fill="rgb(238,68,33)"/><text x="40.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="37" y="500" width="4" height="15" fill="rgb(254,119,12)"/><text x="40.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.46%)</title><rect x="36" y="436" width="5" height="15" fill="rgb(235,226,52)"/><text x="39.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.42%)</title><rect x="36" y="452" width="5" height="15" fill="rgb(235,78,41)"/><text x="39.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.42%)</title><rect x="36" y="468" width="5" height="15" fill="rgb(231,20,20)"/><text x="39.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.46%)</title><rect x="42" y="436" width="6" height="15" fill="rgb(233,107,1)"/><text x="45.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.46%)</title><rect x="42" y="452" width="6" height="15" fill="rgb(221,31,44)"/><text x="45.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.42%)</title><rect x="43" y="468" width="5" height="15" fill="rgb(208,39,25)"/><text x="46.00" y="478.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="45" y="484" width="3" height="15" fill="rgb(247,9,18)"/><text x="48.00" y="494.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="46" y="500" width="2" height="15" fill="rgb(234,115,7)"/><text x="49.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="48" y="436" width="1" height="15" fill="rgb(206,121,26)"/><text x="51.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.25%)</title><rect x="49" y="436" width="3" height="15" fill="rgb(214,168,26)"/><text x="52.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="51" y="452" width="1" height="15" fill="rgb(208,121,28)"/><text x="54.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="59" y="468" width="1" height="15" fill="rgb(247,174,5)"/><text x="62.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.25%)</title><rect x="60" y="468" width="3" height="15" fill="rgb(252,137,28)"/><text x="63.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.25%)</title><rect x="60" y="484" width="3" height="15" fill="rgb(228,127,3)"/><text x="63.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="60" y="500" width="3" height="15" fill="rgb(206,220,1)"/><text x="63.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="60" y="516" width="3" height="15" fill="rgb(216,72,31)"/><text x="63.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="60" y="532" width="3" height="15" fill="rgb(227,187,22)"/><text x="63.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="60" y="548" width="3" height="15" fill="rgb(222,73,54)"/><text x="63.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="61" y="564" width="2" height="15" fill="rgb(214,128,30)"/><text x="64.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="62" y="580" width="1" height="15" fill="rgb(250,66,23)"/><text x="65.00" y="590.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="62" y="596" width="1" height="15" fill="rgb(252,57,1)"/><text x="65.00" y="606.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="64" y="468" width="1" height="15" fill="rgb(219,32,36)"/><text x="67.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 1.33%)</title><rect x="53" y="436" width="15" height="15" fill="rgb(234,136,21)"/><text x="56.00" y="446.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (33 samples, 1.16%)</title><rect x="55" y="452" width="13" height="15" fill="rgb(230,188,22)"/><text x="58.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.25%)</title><rect x="65" y="468" width="3" height="15" fill="rgb(225,227,44)"/><text x="68.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (6 samples, 0.21%)</title><rect x="66" y="484" width="2" height="15" fill="rgb(241,18,12)"/><text x="69.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.21%)</title><rect x="66" y="500" width="2" height="15" fill="rgb(240,123,13)"/><text x="69.00" y="510.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="71" y="468" width="1" height="15" fill="rgb(217,16,36)"/><text x="74.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="72" y="468" width="3" height="15" fill="rgb(206,27,28)"/><text x="75.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2248] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="75" y="468" width="1" height="15" fill="rgb(240,128,7)"/><text x="78.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="77" y="564" width="1" height="15" fill="rgb(224,218,12)"/><text x="80.00" y="574.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.25%)</title><rect x="76" y="468" width="3" height="15" fill="rgb(221,107,40)"/><text x="79.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.25%)</title><rect x="76" y="484" width="3" height="15" fill="rgb(230,32,5)"/><text x="79.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.25%)</title><rect x="76" y="500" width="3" height="15" fill="rgb(207,120,33)"/><text x="79.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="76" y="516" width="3" height="15" fill="rgb(206,118,8)"/><text x="79.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="76" y="532" width="3" height="15" fill="rgb(216,226,40)"/><text x="79.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="76" y="548" width="3" height="15" fill="rgb(239,125,49)"/><text x="79.00" y="558.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.25%)</title><rect x="81" y="500" width="3" height="15" fill="rgb(225,166,2)"/><text x="84.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (6 samples, 0.21%)</title><rect x="82" y="516" width="2" height="15" fill="rgb(210,172,43)"/><text x="85.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.21%)</title><rect x="82" y="532" width="2" height="15" fill="rgb(238,151,2)"/><text x="85.00" y="542.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (161 samples, 5.65%)</title><rect x="18" y="356" width="67" height="15" fill="rgb(211,162,29)"/><text x="21.00" y="366.50">onnxrun..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (161 samples, 5.65%)</title><rect x="18" y="372" width="67" height="15" fill="rgb(224,45,6)"/><text x="21.00" y="382.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (146 samples, 5.13%)</title><rect x="24" y="388" width="61" height="15" fill="rgb(254,174,11)"/><text x="27.00" y="398.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (146 samples, 5.13%)</title><rect x="24" y="404" width="61" height="15" fill="rgb(246,213,24)"/><text x="27.00" y="414.50">onnxru..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (145 samples, 5.09%)</title><rect x="25" y="420" width="60" height="15" fill="rgb(252,13,7)"/><text x="28.00" y="430.50">onnxru..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (40 samples, 1.40%)</title><rect x="68" y="436" width="17" height="15" fill="rgb(209,137,30)"/><text x="71.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (37 samples, 1.30%)</title><rect x="70" y="452" width="15" height="15" fill="rgb(225,100,20)"/><text x="73.00" y="462.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.53%)</title><rect x="79" y="468" width="6" height="15" fill="rgb(248,118,8)"/><text x="82.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.53%)</title><rect x="79" y="484" width="6" height="15" fill="rgb(241,143,48)"/><text x="82.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (163 samples, 5.72%)</title><rect x="18" y="340" width="67" height="15" fill="rgb(240,166,36)"/><text x="21.00" y="350.50">onnxrun..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 5.90%)</title><rect x="16" y="260" width="70" height="15" fill="rgb(232,66,20)"/><text x="19.00" y="270.50">onnxrun..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 5.90%)</title><rect x="16" y="276" width="70" height="15" fill="rgb(251,99,20)"/><text x="19.00" y="286.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 5.90%)</title><rect x="16" y="292" width="70" height="15" fill="rgb(238,16,7)"/><text x="19.00" y="302.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 5.90%)</title><rect x="16" y="308" width="70" height="15" fill="rgb(208,148,48)"/><text x="19.00" y="318.50">onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 5.90%)</title><rect x="16" y="324" width="70" height="15" fill="rgb(239,53,22)"/><text x="19.00" y="334.50">onnxrun..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (169 samples, 5.93%)</title><rect x="16" y="244" width="70" height="15" fill="rgb(219,57,50)"/><text x="19.00" y="254.50">onnxrun..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (177 samples, 6.21%)</title><rect x="13" y="68" width="74" height="15" fill="rgb(242,185,27)"/><text x="16.00" y="78.50">profile_..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (177 samples, 6.21%)</title><rect x="13" y="84" width="74" height="15" fill="rgb(230,134,32)"/><text x="16.00" y="94.50">setup_pr..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (177 samples, 6.21%)</title><rect x="13" y="100" width="74" height="15" fill="rgb(213,117,7)"/><text x="16.00" y="110.50">profile ..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (177 samples, 6.21%)</title><rect x="13" y="116" width="74" height="15" fill="rgb(221,182,33)"/><text x="16.00" y="126.50">time_pre..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (177 samples, 6.21%)</title><rect x="13" y="132" width="74" height="15" fill="rgb(253,170,1)"/><text x="16.00" y="142.50">&lt;lambda&gt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (177 samples, 6.21%)</title><rect x="13" y="148" width="74" height="15" fill="rgb(233,93,31)"/><text x="16.00" y="158.50">run (mlp..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (175 samples, 6.14%)</title><rect x="14" y="164" width="73" height="15" fill="rgb(214,191,30)"/><text x="17.00" y="174.50">_run_who..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (173 samples, 6.07%)</title><rect x="15" y="180" width="72" height="15" fill="rgb(243,106,27)"/><text x="18.00" y="190.50">run (mlp..</text></g><g><title>run (onnxruntime/capi/session.py) (172 samples, 6.04%)</title><rect x="15" y="196" width="72" height="15" fill="rgb(227,186,38)"/><text x="18.00" y="206.50">run (onn..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (171 samples, 6.00%)</title><rect x="16" y="212" width="71" height="15" fill="rgb(243,187,53)"/><text x="19.00" y="222.50">pybind11..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (170 samples, 5.97%)</title><rect x="16" y="228" width="71" height="15" fill="rgb(229,95,1)"/><text x="19.00" y="238.50">void pyb..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (3 samples, 0.11%)</title><rect x="97" y="196" width="1" height="15" fill="rgb(219,96,18)"/><text x="100.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (4 samples, 0.14%)</title><rect x="101" y="212" width="1" height="15" fill="rgb(216,142,41)"/><text x="104.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (3 samples, 0.11%)</title><rect x="101" y="228" width="1" height="15" fill="rgb(218,16,25)"/><text x="104.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (3 samples, 0.11%)</title><rect x="102" y="212" width="2" height="15" fill="rgb(233,210,29)"/><text x="105.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (3 samples, 0.11%)</title><rect x="102" y="228" width="2" height="15" fill="rgb(226,37,44)"/><text x="105.00" y="238.50"></text></g><g><title>gentype_generic_method (scalartypes.c.src) (3 samples, 0.11%)</title><rect x="104" y="228" width="1" height="15" fill="rgb(229,166,36)"/><text x="107.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (9 samples, 0.32%)</title><rect x="104" y="212" width="3" height="15" fill="rgb(253,195,52)"/><text x="107.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;) (6 samples, 0.21%)</title><rect x="105" y="228" width="2" height="15" fill="rgb(249,136,46)"/><text x="108.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.21%)</title><rect x="105" y="244" width="2" height="15" fill="rgb(206,87,45)"/><text x="108.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py) (6 samples, 0.21%)</title><rect x="105" y="260" width="2" height="15" fill="rgb(251,73,20)"/><text x="108.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (6 samples, 0.21%)</title><rect x="105" y="276" width="2" height="15" fill="rgb(227,30,19)"/><text x="108.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (5 samples, 0.18%)</title><rect x="105" y="292" width="2" height="15" fill="rgb(223,198,46)"/><text x="108.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 0.14%)</title><rect x="106" y="308" width="1" height="15" fill="rgb(209,71,48)"/><text x="109.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (8 samples, 0.28%)</title><rect x="192" y="228" width="4" height="15" fill="rgb(223,2,2)"/><text x="195.00" y="238.50"></text></g><g><title>_common_run_shape (mlprodict/onnxrt/ops_cpu/op_scan.py) (3 samples, 0.11%)</title><rect x="196" y="228" width="1" height="15" fill="rgb(229,224,32)"/><text x="199.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (8 samples, 0.28%)</title><rect x="197" y="228" width="3" height="15" fill="rgb(238,64,42)"/><text x="200.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (6 samples, 0.21%)</title><rect x="198" y="244" width="2" height="15" fill="rgb(209,147,44)"/><text x="201.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (6 samples, 0.21%)</title><rect x="198" y="260" width="2" height="15" fill="rgb(253,54,2)"/><text x="201.00" y="270.50"></text></g><g><title>array_alloc (arrayobject.c) (3 samples, 0.11%)</title><rect x="205" y="292" width="2" height="15" fill="rgb(213,192,41)"/><text x="208.00" y="302.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (10 samples, 0.35%)</title><rect x="203" y="260" width="4" height="15" fill="rgb(209,160,12)"/><text x="206.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (10 samples, 0.35%)</title><rect x="203" y="276" width="4" height="15" fill="rgb(211,202,30)"/><text x="206.00" y="286.50"></text></g><g><title>get_view_from_index (mapping.c) (14 samples, 0.49%)</title><rect x="202" y="244" width="6" height="15" fill="rgb(208,46,4)"/><text x="205.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (29 samples, 1.02%)</title><rect x="200" y="228" width="12" height="15" fill="rgb(233,109,32)"/><text x="203.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (11 samples, 0.39%)</title><rect x="208" y="244" width="4" height="15" fill="rgb(231,54,13)"/><text x="211.00" y="254.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py) (5 samples, 0.18%)</title><rect x="225" y="244" width="2" height="15" fill="rgb(245,59,34)"/><text x="228.00" y="254.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (3 samples, 0.11%)</title><rect x="264" y="276" width="2" height="15" fill="rgb(205,191,48)"/><text x="267.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (5 samples, 0.18%)</title><rect x="271" y="292" width="2" height="15" fill="rgb(219,149,7)"/><text x="274.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (10 samples, 0.35%)</title><rect x="276" y="308" width="4" height="15" fill="rgb(211,32,4)"/><text x="279.00" y="318.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (4 samples, 0.14%)</title><rect x="278" y="324" width="2" height="15" fill="rgb(220,82,26)"/><text x="281.00" y="334.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (4 samples, 0.14%)</title><rect x="278" y="340" width="2" height="15" fill="rgb(229,94,28)"/><text x="281.00" y="350.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (19 samples, 0.67%)</title><rect x="273" y="292" width="8" height="15" fill="rgb(246,152,52)"/><text x="276.00" y="302.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (5 samples, 0.18%)</title><rect x="282" y="340" width="2" height="15" fill="rgb(209,160,48)"/><text x="285.00" y="350.50"></text></g><g><title>array_alloc (arrayobject.c) (6 samples, 0.21%)</title><rect x="284" y="340" width="3" height="15" fill="rgb(223,40,6)"/><text x="287.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (12 samples, 0.42%)</title><rect x="282" y="324" width="5" height="15" fill="rgb(214,16,50)"/><text x="285.00" y="334.50"></text></g><g><title>array_reshape (methods.c) (55 samples, 1.93%)</title><rect x="266" y="276" width="22" height="15" fill="rgb(212,162,18)"/><text x="269.00" y="286.50">a..</text></g><g><title>npy_free_cache_dim_obj (alloc.h) (18 samples, 0.63%)</title><rect x="281" y="292" width="7" height="15" fill="rgb(228,196,0)"/><text x="284.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (17 samples, 0.60%)</title><rect x="281" y="308" width="7" height="15" fill="rgb(223,151,12)"/><text x="284.00" y="318.50"></text></g><g><title>_fix_unknown_dimension (shape.c) (3 samples, 0.11%)</title><rect x="287" y="324" width="1" height="15" fill="rgb(221,11,33)"/><text x="290.00" y="334.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (171 samples, 6.00%)</title><rect x="232" y="260" width="70" height="15" fill="rgb(252,177,53)"/><text x="235.00" y="270.50">expand_..</text></g><g><title>asanyarray (numpy/core/_asarray.py) (34 samples, 1.19%)</title><rect x="288" y="276" width="14" height="15" fill="rgb(247,229,1)"/><text x="291.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 0.14%)</title><rect x="301" y="292" width="1" height="15" fill="rgb(215,62,50)"/><text x="304.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (223 samples, 7.83%)</title><rect x="212" y="228" width="93" height="15" fill="rgb(239,28,47)"/><text x="215.00" y="238.50">expand_dims..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (188 samples, 6.60%)</title><rect x="227" y="244" width="78" height="15" fill="rgb(217,124,34)"/><text x="230.00" y="254.50">array_imp..</text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (5 samples, 0.18%)</title><rect x="302" y="260" width="3" height="15" fill="rgb(242,130,18)"/><text x="305.00" y="270.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (33 samples, 1.16%)</title><rect x="400" y="260" width="14" height="15" fill="rgb(241,5,15)"/><text x="403.00" y="270.50"></text></g><g><title>unicode_eq (python3.7) (3 samples, 0.11%)</title><rect x="413" y="276" width="1" height="15" fill="rgb(226,6,4)"/><text x="416.00" y="286.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (30 samples, 1.05%)</title><rect x="643" y="276" width="12" height="15" fill="rgb(218,122,6)"/><text x="646.00" y="286.50"></text></g><g><title>array_descr_get (getset.c) (4 samples, 0.14%)</title><rect x="692" y="292" width="2" height="15" fill="rgb(246,228,17)"/><text x="695.00" y="302.50"></text></g><g><title>PyArray_DESCR (ndarraytypes.h) (4 samples, 0.14%)</title><rect x="692" y="308" width="2" height="15" fill="rgb(241,134,27)"/><text x="695.00" y="318.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (10 samples, 0.35%)</title><rect x="694" y="292" width="4" height="15" fill="rgb(206,211,36)"/><text x="697.00" y="302.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (5 samples, 0.18%)</title><rect x="696" y="308" width="2" height="15" fill="rgb(222,61,4)"/><text x="699.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (6 samples, 0.21%)</title><rect x="733" y="340" width="2" height="15" fill="rgb(250,65,25)"/><text x="736.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (6 samples, 0.21%)</title><rect x="733" y="356" width="2" height="15" fill="rgb(244,21,4)"/><text x="736.00" y="366.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (3 samples, 0.11%)</title><rect x="734" y="372" width="1" height="15" fill="rgb(242,83,5)"/><text x="737.00" y="382.50"></text></g><g><title>promote_types (convert_datatype.c) (3 samples, 0.11%)</title><rect x="742" y="404" width="1" height="15" fill="rgb(240,144,39)"/><text x="745.00" y="414.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (3 samples, 0.11%)</title><rect x="742" y="420" width="1" height="15" fill="rgb(252,186,27)"/><text x="745.00" y="430.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (11 samples, 0.39%)</title><rect x="740" y="388" width="5" height="15" fill="rgb(213,100,26)"/><text x="743.00" y="398.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (3 samples, 0.11%)</title><rect x="743" y="404" width="2" height="15" fill="rgb(228,83,36)"/><text x="746.00" y="414.50"></text></g><g><title>dtype_kind_to_simplified_ordering (convert_datatype.c) (3 samples, 0.11%)</title><rect x="743" y="420" width="2" height="15" fill="rgb(235,32,17)"/><text x="746.00" y="430.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (16 samples, 0.56%)</title><rect x="739" y="356" width="7" height="15" fill="rgb(250,116,49)"/><text x="742.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (14 samples, 0.49%)</title><rect x="740" y="372" width="6" height="15" fill="rgb(222,94,19)"/><text x="743.00" y="382.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (3 samples, 0.11%)</title><rect x="745" y="388" width="1" height="15" fill="rgb(224,24,16)"/><text x="748.00" y="398.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (4 samples, 0.14%)</title><rect x="750" y="388" width="2" height="15" fill="rgb(213,206,30)"/><text x="753.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (3 samples, 0.11%)</title><rect x="751" y="404" width="1" height="15" fill="rgb(222,111,4)"/><text x="754.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.11%)</title><rect x="756" y="404" width="1" height="15" fill="rgb(214,58,37)"/><text x="759.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (10 samples, 0.35%)</title><rect x="760" y="420" width="4" height="15" fill="rgb(246,151,29)"/><text x="763.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (8 samples, 0.28%)</title><rect x="761" y="436" width="3" height="15" fill="rgb(227,157,28)"/><text x="764.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (8 samples, 0.28%)</title><rect x="761" y="452" width="3" height="15" fill="rgb(226,148,11)"/><text x="764.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (17 samples, 0.60%)</title><rect x="757" y="404" width="7" height="15" fill="rgb(248,78,6)"/><text x="760.00" y="414.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c) (4 samples, 0.14%)</title><rect x="767" y="404" width="2" height="15" fill="rgb(216,133,6)"/><text x="770.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (9 samples, 0.32%)</title><rect x="769" y="404" width="3" height="15" fill="rgb(244,69,35)"/><text x="772.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (52 samples, 1.83%)</title><rect x="752" y="388" width="22" height="15" fill="rgb(251,69,33)"/><text x="755.00" y="398.50">N..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (3 samples, 0.11%)</title><rect x="772" y="404" width="2" height="15" fill="rgb(213,177,10)"/><text x="775.00" y="414.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (3 samples, 0.11%)</title><rect x="772" y="420" width="2" height="15" fill="rgb(234,57,50)"/><text x="775.00" y="430.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (9 samples, 0.32%)</title><rect x="774" y="388" width="3" height="15" fill="rgb(224,31,22)"/><text x="777.00" y="398.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.11%)</title><rect x="776" y="404" width="1" height="15" fill="rgb(246,129,15)"/><text x="779.00" y="414.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (8 samples, 0.28%)</title><rect x="780" y="404" width="3" height="15" fill="rgb(211,169,39)"/><text x="783.00" y="414.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (12 samples, 0.42%)</title><rect x="779" y="388" width="5" height="15" fill="rgb(248,139,13)"/><text x="782.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (90 samples, 3.16%)</title><rect x="748" y="356" width="37" height="15" fill="rgb(252,158,19)"/><text x="751.00" y="366.50">exe..</text></g><g><title>iterator_loop (ufunc_object.c) (86 samples, 3.02%)</title><rect x="749" y="372" width="36" height="15" fill="rgb(254,135,3)"/><text x="752.00" y="382.50">ite..</text></g><g><title>get_ufunc_arguments (ufunc_object.c) (9 samples, 0.32%)</title><rect x="785" y="356" width="4" height="15" fill="rgb(237,183,2)"/><text x="788.00" y="366.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (5 samples, 0.18%)</title><rect x="789" y="356" width="2" height="15" fill="rgb(237,195,26)"/><text x="792.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (139 samples, 4.88%)</title><rect x="735" y="340" width="58" height="15" fill="rgb(249,178,35)"/><text x="738.00" y="350.50">PyUFun..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (5 samples, 0.18%)</title><rect x="791" y="356" width="2" height="15" fill="rgb(236,28,8)"/><text x="794.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (5 samples, 0.18%)</title><rect x="791" y="372" width="2" height="15" fill="rgb(240,150,9)"/><text x="794.00" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (4 samples, 0.14%)</title><rect x="791" y="388" width="2" height="15" fill="rgb(208,23,28)"/><text x="794.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (190 samples, 6.67%)</title><rect x="717" y="308" width="78" height="15" fill="rgb(228,16,5)"/><text x="720.00" y="318.50">_run (mlp..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (154 samples, 5.41%)</title><rect x="732" y="324" width="63" height="15" fill="rgb(249,95,53)"/><text x="735.00" y="334.50">ufunc_..</text></g><g><title>_find_array_wrap (ufunc_object.c) (4 samples, 0.14%)</title><rect x="794" y="340" width="1" height="15" fill="rgb(228,204,3)"/><text x="797.00" y="350.50"></text></g><g><title>_find_array_method (ufunc_object.c) (3 samples, 0.11%)</title><rect x="794" y="356" width="1" height="15" fill="rgb(243,60,37)"/><text x="797.00" y="366.50"></text></g><g><title>arrays_overlap (array_assign.c) (5 samples, 0.18%)</title><rect x="815" y="372" width="2" height="15" fill="rgb(234,33,33)"/><text x="818.00" y="382.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (4 samples, 0.14%)</title><rect x="815" y="388" width="2" height="15" fill="rgb(238,0,17)"/><text x="818.00" y="398.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (6 samples, 0.21%)</title><rect x="823" y="388" width="3" height="15" fill="rgb(214,21,38)"/><text x="826.00" y="398.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (12 samples, 0.42%)</title><rect x="826" y="388" width="5" height="15" fill="rgb(213,204,25)"/><text x="829.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (4 samples, 0.14%)</title><rect x="829" y="404" width="2" height="15" fill="rgb(211,153,45)"/><text x="832.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.11%)</title><rect x="829" y="420" width="2" height="15" fill="rgb(237,115,5)"/><text x="832.00" y="430.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (3 samples, 0.11%)</title><rect x="833" y="388" width="1" height="15" fill="rgb(250,166,20)"/><text x="836.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (55 samples, 1.93%)</title><rect x="812" y="356" width="23" height="15" fill="rgb(241,228,1)"/><text x="815.00" y="366.50">P..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (43 samples, 1.51%)</title><rect x="817" y="372" width="18" height="15" fill="rgb(238,226,49)"/><text x="820.00" y="382.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (6 samples, 0.21%)</title><rect x="837" y="420" width="3" height="15" fill="rgb(219,64,40)"/><text x="840.00" y="430.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (5 samples, 0.18%)</title><rect x="838" y="436" width="2" height="15" fill="rgb(223,205,54)"/><text x="841.00" y="446.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (110 samples, 3.86%)</title><rect x="795" y="308" width="46" height="15" fill="rgb(248,172,35)"/><text x="798.00" y="318.50">_run..</text></g><g><title>array_copy (methods.c) (77 samples, 2.70%)</title><rect x="809" y="324" width="32" height="15" fill="rgb(207,132,40)"/><text x="812.00" y="334.50">ar..</text></g><g><title>PyArray_NewCopy (convert.c) (70 samples, 2.46%)</title><rect x="812" y="340" width="29" height="15" fill="rgb(246,214,49)"/><text x="815.00" y="350.50">Py..</text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (14 samples, 0.49%)</title><rect x="835" y="356" width="6" height="15" fill="rgb(219,112,38)"/><text x="838.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (13 samples, 0.46%)</title><rect x="836" y="372" width="5" height="15" fill="rgb(242,73,31)"/><text x="839.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (13 samples, 0.46%)</title><rect x="836" y="388" width="5" height="15" fill="rgb(253,194,44)"/><text x="839.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (13 samples, 0.46%)</title><rect x="836" y="404" width="5" height="15" fill="rgb(249,38,16)"/><text x="839.00" y="414.50"></text></g><g><title>0x7fe9398b4120 (libc-2.29.so) (4 samples, 0.14%)</title><rect x="861" y="324" width="2" height="15" fill="rgb(231,25,12)"/><text x="864.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (11 samples, 0.39%)</title><rect x="864" y="340" width="4" height="15" fill="rgb(251,115,24)"/><text x="867.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (11 samples, 0.39%)</title><rect x="864" y="356" width="4" height="15" fill="rgb(236,149,47)"/><text x="867.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c) (15 samples, 0.53%)</title><rect x="863" y="324" width="6" height="15" fill="rgb(225,116,38)"/><text x="866.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py) (7 samples, 0.25%)</title><rect x="879" y="340" width="3" height="15" fill="rgb(235,221,53)"/><text x="882.00" y="350.50"></text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (3 samples, 0.11%)</title><rect x="889" y="356" width="1" height="15" fill="rgb(207,204,38)"/><text x="892.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (33 samples, 1.16%)</title><rect x="942" y="388" width="13" height="15" fill="rgb(251,98,36)"/><text x="945.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (23 samples, 0.81%)</title><rect x="956" y="404" width="9" height="15" fill="rgb(223,180,7)"/><text x="959.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (22 samples, 0.77%)</title><rect x="956" y="420" width="9" height="15" fill="rgb(237,12,14)"/><text x="959.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (17 samples, 0.60%)</title><rect x="958" y="436" width="7" height="15" fill="rgb(223,53,44)"/><text x="961.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (4 samples, 0.14%)</title><rect x="964" y="452" width="1" height="15" fill="rgb(241,193,32)"/><text x="967.00" y="462.50"></text></g><g><title>PyArray_FromAny (ctors.c) (4 samples, 0.14%)</title><rect x="982" y="420" width="2" height="15" fill="rgb(242,133,17)"/><text x="985.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (13 samples, 0.46%)</title><rect x="984" y="420" width="5" height="15" fill="rgb(219,229,5)"/><text x="987.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (11 samples, 0.39%)</title><rect x="985" y="436" width="4" height="15" fill="rgb(228,79,10)"/><text x="988.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (11 samples, 0.39%)</title><rect x="985" y="452" width="4" height="15" fill="rgb(246,127,16)"/><text x="988.00" y="462.50"></text></g><g><title>0x7fe9398b4120 (libc-2.29.so) (4 samples, 0.14%)</title><rect x="996" y="468" width="2" height="15" fill="rgb(217,204,34)"/><text x="999.00" y="478.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c) (3 samples, 0.11%)</title><rect x="1001" y="468" width="1" height="15" fill="rgb(233,127,3)"/><text x="1004.00" y="478.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (7 samples, 0.25%)</title><rect x="1002" y="468" width="3" height="15" fill="rgb(223,155,17)"/><text x="1005.00" y="478.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (7 samples, 0.25%)</title><rect x="1005" y="468" width="3" height="15" fill="rgb(236,217,40)"/><text x="1008.00" y="478.50"></text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c) (3 samples, 0.11%)</title><rect x="1008" y="468" width="1" height="15" fill="rgb(217,72,42)"/><text x="1011.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (45 samples, 1.58%)</title><rect x="993" y="452" width="19" height="15" fill="rgb(231,157,11)"/><text x="996.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (7 samples, 0.25%)</title><rect x="1009" y="468" width="3" height="15" fill="rgb(226,49,46)"/><text x="1012.00" y="478.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (3 samples, 0.11%)</title><rect x="1011" y="484" width="1" height="15" fill="rgb(222,188,48)"/><text x="1014.00" y="494.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (5 samples, 0.18%)</title><rect x="1012" y="452" width="2" height="15" fill="rgb(230,197,6)"/><text x="1015.00" y="462.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (3 samples, 0.11%)</title><rect x="1016" y="516" width="1" height="15" fill="rgb(230,134,27)"/><text x="1019.00" y="526.50"></text></g><g><title>npy_alloc_cache (alloc.c) (10 samples, 0.35%)</title><rect x="1018" y="516" width="4" height="15" fill="rgb(230,176,44)"/><text x="1021.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (10 samples, 0.35%)</title><rect x="1018" y="532" width="4" height="15" fill="rgb(230,199,7)"/><text x="1021.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (7 samples, 0.25%)</title><rect x="1019" y="548" width="3" height="15" fill="rgb(254,120,48)"/><text x="1022.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.25%)</title><rect x="1019" y="564" width="3" height="15" fill="rgb(247,195,24)"/><text x="1022.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (23 samples, 0.81%)</title><rect x="1015" y="484" width="10" height="15" fill="rgb(220,149,7)"/><text x="1018.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (22 samples, 0.77%)</title><rect x="1016" y="500" width="9" height="15" fill="rgb(217,39,19)"/><text x="1019.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (8 samples, 0.28%)</title><rect x="1022" y="516" width="3" height="15" fill="rgb(234,75,30)"/><text x="1025.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (8 samples, 0.28%)</title><rect x="1022" y="532" width="3" height="15" fill="rgb(249,29,33)"/><text x="1025.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.25%)</title><rect x="1022" y="548" width="3" height="15" fill="rgb(244,127,14)"/><text x="1025.00" y="558.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (40 samples, 1.40%)</title><rect x="1015" y="452" width="16" height="15" fill="rgb(211,190,54)"/><text x="1018.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (40 samples, 1.40%)</title><rect x="1015" y="468" width="16" height="15" fill="rgb(235,201,11)"/><text x="1018.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (13 samples, 0.46%)</title><rect x="1026" y="484" width="5" height="15" fill="rgb(233,193,26)"/><text x="1029.00" y="494.50"></text></g><g><title>free (libc-2.29.so) (5 samples, 0.18%)</title><rect x="1029" y="500" width="2" height="15" fill="rgb(238,82,27)"/><text x="1032.00" y="510.50"></text></g><g><title>_aligned_cast_longlong_to_float (lowlevel_strided_loops.c.src) (3 samples, 0.11%)</title><rect x="1036" y="500" width="1" height="15" fill="rgb(237,57,1)"/><text x="1039.00" y="510.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (6 samples, 0.21%)</title><rect x="1037" y="500" width="3" height="15" fill="rgb(212,206,42)"/><text x="1040.00" y="510.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (6 samples, 0.21%)</title><rect x="1037" y="516" width="3" height="15" fill="rgb(218,87,47)"/><text x="1040.00" y="526.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (23 samples, 0.81%)</title><rect x="1031" y="452" width="10" height="15" fill="rgb(217,91,51)"/><text x="1034.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (21 samples, 0.74%)</title><rect x="1032" y="468" width="9" height="15" fill="rgb(227,205,31)"/><text x="1035.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (18 samples, 0.63%)</title><rect x="1033" y="484" width="8" height="15" fill="rgb(250,143,24)"/><text x="1036.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (132 samples, 4.63%)</title><rect x="989" y="436" width="55" height="15" fill="rgb(250,189,2)"/><text x="992.00" y="446.50">PyUFu..</text></g><g><title>reduce_loop (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1043" y="452" width="1" height="15" fill="rgb(241,141,35)"/><text x="1046.00" y="462.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (3 samples, 0.11%)</title><rect x="1052" y="484" width="1" height="15" fill="rgb(231,7,37)"/><text x="1055.00" y="494.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (156 samples, 5.48%)</title><rect x="989" y="420" width="65" height="15" fill="rgb(213,99,7)"/><text x="992.00" y="430.50">PyUFunc..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (22 samples, 0.77%)</title><rect x="1045" y="436" width="9" height="15" fill="rgb(230,107,2)"/><text x="1048.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (15 samples, 0.53%)</title><rect x="1048" y="452" width="6" height="15" fill="rgb(235,104,38)"/><text x="1051.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (13 samples, 0.46%)</title><rect x="1049" y="468" width="5" height="15" fill="rgb(213,118,33)"/><text x="1052.00" y="478.50"></text></g><g><title>unicode_eq (python3.7) (3 samples, 0.11%)</title><rect x="1055" y="420" width="1" height="15" fill="rgb(214,177,44)"/><text x="1058.00" y="430.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (452 samples, 15.87%)</title><rect x="869" y="324" width="188" height="15" fill="rgb(207,184,10)"/><text x="872.00" y="334.50">sum (&lt;__array_function__..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (421 samples, 14.78%)</title><rect x="882" y="340" width="175" height="15" fill="rgb(250,150,34)"/><text x="885.00" y="350.50">array_implement_array_..</text></g><g><title>sum (numpy/core/fromnumeric.py) (401 samples, 14.08%)</title><rect x="890" y="356" width="167" height="15" fill="rgb(228,82,46)"/><text x="893.00" y="366.50">sum (numpy/core/fromn..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (333 samples, 11.69%)</title><rect x="919" y="372" width="138" height="15" fill="rgb(248,157,53)"/><text x="922.00" y="382.50">_wrapreduction (n..</text></g><g><title>ufunc_reduce (ufunc_object.c) (244 samples, 8.57%)</title><rect x="955" y="388" width="102" height="15" fill="rgb(205,37,22)"/><text x="958.00" y="398.50">ufunc_reduce..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (220 samples, 7.72%)</title><rect x="965" y="404" width="92" height="15" fill="rgb(207,182,23)"/><text x="968.00" y="414.50">PyUFunc_Ge..</text></g><g><title>PyArray_NewFromDescr (ctors.c) (25 samples, 0.88%)</title><rect x="1061" y="372" width="10" height="15" fill="rgb(242,12,15)"/><text x="1064.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (25 samples, 0.88%)</title><rect x="1061" y="388" width="10" height="15" fill="rgb(205,159,25)"/><text x="1064.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (17 samples, 0.60%)</title><rect x="1064" y="404" width="7" height="15" fill="rgb(209,198,3)"/><text x="1067.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (15 samples, 0.53%)</title><rect x="1065" y="420" width="6" height="15" fill="rgb(232,8,49)"/><text x="1068.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (13 samples, 0.46%)</title><rect x="1066" y="436" width="5" height="15" fill="rgb(208,104,47)"/><text x="1069.00" y="446.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (6 samples, 0.21%)</title><rect x="1071" y="372" width="3" height="15" fill="rgb(234,223,19)"/><text x="1074.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (43 samples, 1.51%)</title><rect x="1060" y="356" width="18" height="15" fill="rgb(209,189,50)"/><text x="1063.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (10 samples, 0.35%)</title><rect x="1074" y="372" width="4" height="15" fill="rgb(226,178,47)"/><text x="1077.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (5 samples, 0.18%)</title><rect x="1076" y="388" width="2" height="15" fill="rgb(221,180,0)"/><text x="1079.00" y="398.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1078" y="356" width="1" height="15" fill="rgb(219,106,38)"/><text x="1081.00" y="366.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (3 samples, 0.11%)</title><rect x="1086" y="372" width="1" height="15" fill="rgb(250,126,19)"/><text x="1089.00" y="382.50"></text></g><g><title>PyArray_CanCastTo (convert_datatype.c) (6 samples, 0.21%)</title><rect x="1089" y="420" width="3" height="15" fill="rgb(252,176,2)"/><text x="1092.00" y="430.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (16 samples, 0.56%)</title><rect x="1088" y="388" width="6" height="15" fill="rgb(211,55,47)"/><text x="1091.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (14 samples, 0.49%)</title><rect x="1088" y="404" width="6" height="15" fill="rgb(243,93,19)"/><text x="1091.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (6 samples, 0.21%)</title><rect x="1092" y="420" width="2" height="15" fill="rgb(208,84,30)"/><text x="1095.00" y="430.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (5 samples, 0.18%)</title><rect x="1092" y="436" width="2" height="15" fill="rgb(218,119,4)"/><text x="1095.00" y="446.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (38 samples, 1.33%)</title><rect x="1079" y="356" width="16" height="15" fill="rgb(210,180,19)"/><text x="1082.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (20 samples, 0.70%)</title><rect x="1087" y="372" width="8" height="15" fill="rgb(234,228,18)"/><text x="1090.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (95 samples, 3.34%)</title><rect x="1058" y="340" width="40" height="15" fill="rgb(223,57,51)"/><text x="1061.00" y="350.50">PyU..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (6 samples, 0.21%)</title><rect x="1095" y="356" width="3" height="15" fill="rgb(235,135,22)"/><text x="1098.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (620 samples, 21.77%)</title><rect x="841" y="308" width="257" height="15" fill="rgb(228,0,36)"/><text x="844.00" y="318.50">_run (mlprodict/onnxrt/ops_cpu/op_..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (100 samples, 3.51%)</title><rect x="1057" y="324" width="41" height="15" fill="rgb(236,175,8)"/><text x="1060.00" y="334.50">ufu..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,653 samples, 58.04%)</title><rect x="414" y="260" width="685" height="15" fill="rgb(223,108,54)"/><text x="417.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,071 samples, 37.61%)</title><rect x="655" y="276" width="444" height="15" fill="rgb(228,119,19)"/><text x="658.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (968 samples, 33.99%)</title><rect x="698" y="292" width="401" height="15" fill="rgb(205,37,40)"/><text x="701.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,872 samples, 65.73%)</title><rect x="324" y="244" width="775" height="15" fill="rgb(234,194,1)"/><text x="327.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (7 samples, 0.25%)</title><rect x="1100" y="260" width="2" height="15" fill="rgb(235,216,20)"/><text x="1103.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (6 samples, 0.21%)</title><rect x="1100" y="276" width="2" height="15" fill="rgb(220,74,47)"/><text x="1103.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,928 samples, 67.70%)</title><rect x="305" y="228" width="799" height="15" fill="rgb(250,23,31)"/><text x="308.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (11 samples, 0.39%)</title><rect x="1099" y="244" width="5" height="15" fill="rgb(237,38,1)"/><text x="1102.00" y="254.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (16 samples, 0.56%)</title><rect x="1108" y="324" width="7" height="15" fill="rgb(232,145,48)"/><text x="1111.00" y="334.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (3 samples, 0.11%)</title><rect x="1114" y="340" width="1" height="15" fill="rgb(216,191,42)"/><text x="1117.00" y="350.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (25 samples, 0.88%)</title><rect x="1105" y="276" width="10" height="15" fill="rgb(221,217,42)"/><text x="1108.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (25 samples, 0.88%)</title><rect x="1105" y="292" width="10" height="15" fill="rgb(221,61,24)"/><text x="1108.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (25 samples, 0.88%)</title><rect x="1105" y="308" width="10" height="15" fill="rgb(220,80,13)"/><text x="1108.00" y="318.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (8 samples, 0.28%)</title><rect x="1116" y="356" width="3" height="15" fill="rgb(250,86,8)"/><text x="1119.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (7 samples, 0.25%)</title><rect x="1117" y="372" width="2" height="15" fill="rgb(254,89,27)"/><text x="1120.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (2,443 samples, 85.78%)</title><rect x="108" y="212" width="1012" height="15" fill="rgb(252,54,36)"/><text x="111.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (40 samples, 1.40%)</title><rect x="1104" y="228" width="16" height="15" fill="rgb(250,84,39)"/><text x="1107.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (39 samples, 1.37%)</title><rect x="1104" y="244" width="16" height="15" fill="rgb(217,20,30)"/><text x="1107.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (39 samples, 1.37%)</title><rect x="1104" y="260" width="16" height="15" fill="rgb(253,147,36)"/><text x="1107.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (12 samples, 0.42%)</title><rect x="1115" y="276" width="5" height="15" fill="rgb(250,68,4)"/><text x="1118.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (12 samples, 0.42%)</title><rect x="1115" y="292" width="5" height="15" fill="rgb(231,29,54)"/><text x="1118.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (12 samples, 0.42%)</title><rect x="1115" y="308" width="5" height="15" fill="rgb(233,213,24)"/><text x="1118.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (11 samples, 0.39%)</title><rect x="1116" y="324" width="4" height="15" fill="rgb(243,7,48)"/><text x="1119.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (11 samples, 0.39%)</title><rect x="1116" y="340" width="4" height="15" fill="rgb(210,136,2)"/><text x="1119.00" y="350.50"></text></g><g><title>PyArray_IterAllButAxis (iterators.c) (6 samples, 0.21%)</title><rect x="1122" y="372" width="2" height="15" fill="rgb(229,3,35)"/><text x="1125.00" y="382.50"></text></g><g><title>PyArray_IterNew (iterators.c) (6 samples, 0.21%)</title><rect x="1122" y="388" width="2" height="15" fill="rgb(236,215,22)"/><text x="1125.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.21%)</title><rect x="1122" y="404" width="2" height="15" fill="rgb(226,108,4)"/><text x="1125.00" y="414.50"></text></g><g><title>0x7fe939895028 (libc-2.29.so) (5 samples, 0.18%)</title><rect x="1122" y="420" width="2" height="15" fill="rgb(231,38,21)"/><text x="1125.00" y="430.50"></text></g><g><title>_new_argsortlike (item_selection.c) (7 samples, 0.25%)</title><rect x="1122" y="356" width="3" height="15" fill="rgb(242,127,21)"/><text x="1125.00" y="366.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (9 samples, 0.32%)</title><rect x="1122" y="340" width="4" height="15" fill="rgb(232,138,16)"/><text x="1125.00" y="350.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (12 samples, 0.42%)</title><rect x="1121" y="260" width="5" height="15" fill="rgb(216,177,12)"/><text x="1124.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (12 samples, 0.42%)</title><rect x="1121" y="276" width="5" height="15" fill="rgb(211,64,5)"/><text x="1124.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (12 samples, 0.42%)</title><rect x="1121" y="292" width="5" height="15" fill="rgb(227,217,7)"/><text x="1124.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (11 samples, 0.39%)</title><rect x="1122" y="308" width="4" height="15" fill="rgb(244,58,25)"/><text x="1125.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (11 samples, 0.39%)</title><rect x="1122" y="324" width="4" height="15" fill="rgb(251,139,29)"/><text x="1125.00" y="334.50"></text></g><g><title>array_arange (multiarraymodule.c) (3 samples, 0.11%)</title><rect x="1127" y="260" width="1" height="15" fill="rgb(241,190,34)"/><text x="1130.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (21 samples, 0.74%)</title><rect x="1121" y="212" width="8" height="15" fill="rgb(212,145,34)"/><text x="1124.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (21 samples, 0.74%)</title><rect x="1121" y="228" width="8" height="15" fill="rgb(252,83,45)"/><text x="1124.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (20 samples, 0.70%)</title><rect x="1121" y="244" width="8" height="15" fill="rgb(206,192,25)"/><text x="1124.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (3 samples, 0.11%)</title><rect x="1128" y="260" width="1" height="15" fill="rgb(245,143,19)"/><text x="1131.00" y="270.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (3 samples, 0.11%)</title><rect x="1128" y="276" width="1" height="15" fill="rgb(219,161,30)"/><text x="1131.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c) (6 samples, 0.21%)</title><rect x="1129" y="212" width="3" height="15" fill="rgb(247,128,23)"/><text x="1132.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.11%)</title><rect x="1131" y="228" width="1" height="15" fill="rgb(221,78,46)"/><text x="1134.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1134" y="308" width="1" height="15" fill="rgb(237,28,44)"/><text x="1137.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1134" y="324" width="1" height="15" fill="rgb(234,99,2)"/><text x="1137.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py) (11 samples, 0.39%)</title><rect x="1132" y="228" width="5" height="15" fill="rgb(218,30,37)"/><text x="1135.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;) (10 samples, 0.35%)</title><rect x="1133" y="244" width="4" height="15" fill="rgb(234,117,30)"/><text x="1136.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (10 samples, 0.35%)</title><rect x="1133" y="260" width="4" height="15" fill="rgb(244,15,43)"/><text x="1136.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (10 samples, 0.35%)</title><rect x="1133" y="276" width="4" height="15" fill="rgb(227,76,41)"/><text x="1136.00" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py) (8 samples, 0.28%)</title><rect x="1134" y="292" width="3" height="15" fill="rgb(246,101,6)"/><text x="1137.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (4 samples, 0.14%)</title><rect x="1135" y="308" width="2" height="15" fill="rgb(228,223,27)"/><text x="1138.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1136" y="324" width="1" height="15" fill="rgb(224,76,46)"/><text x="1139.00" y="334.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (2,536 samples, 89.04%)</title><rect x="88" y="132" width="1051" height="15" fill="rgb(212,221,16)"/><text x="91.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (2,536 samples, 89.04%)</title><rect x="88" y="148" width="1051" height="15" fill="rgb(215,164,41)"/><text x="91.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (2,536 samples, 89.04%)</title><rect x="88" y="164" width="1051" height="15" fill="rgb(232,96,35)"/><text x="91.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (2,527 samples, 88.73%)</title><rect x="92" y="180" width="1047" height="15" fill="rgb(231,159,31)"/><text x="95.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (2,511 samples, 88.17%)</title><rect x="98" y="196" width="1041" height="15" fill="rgb(233,9,19)"/><text x="101.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (16 samples, 0.56%)</title><rect x="1132" y="212" width="7" height="15" fill="rgb(220,44,27)"/><text x="1135.00" y="222.50"></text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (2,540 samples, 89.19%)</title><rect x="87" y="100" width="1052" height="15" fill="rgb(238,220,54)"/><text x="90.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (2,539 samples, 89.15%)</title><rect x="87" y="116" width="1052" height="15" fill="rgb(227,93,15)"/><text x="90.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (2,541 samples, 89.22%)</title><rect x="87" y="68" width="1052" height="15" fill="rgb(214,13,10)"/><text x="90.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (2,541 samples, 89.22%)</title><rect x="87" y="84" width="1052" height="15" fill="rgb(235,79,17)"/><text x="90.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py)</text></g><g><title>check_array (sklearn/utils/validation.py) (13 samples, 0.46%)</title><rect x="1142" y="164" width="5" height="15" fill="rgb(244,5,9)"/><text x="1145.00" y="174.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py) (3 samples, 0.11%)</title><rect x="1146" y="180" width="1" height="15" fill="rgb(211,161,53)"/><text x="1149.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (14 samples, 0.49%)</title><rect x="1148" y="180" width="6" height="15" fill="rgb(210,73,34)"/><text x="1151.00" y="190.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (3 samples, 0.11%)</title><rect x="1154" y="180" width="1" height="15" fill="rgb(229,184,6)"/><text x="1157.00" y="190.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (4 samples, 0.14%)</title><rect x="1159" y="212" width="1" height="15" fill="rgb(212,164,43)"/><text x="1162.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.11%)</title><rect x="1159" y="228" width="1" height="15" fill="rgb(212,197,20)"/><text x="1162.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (3 samples, 0.11%)</title><rect x="1159" y="244" width="1" height="15" fill="rgb(241,77,6)"/><text x="1162.00" y="254.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (3 samples, 0.11%)</title><rect x="1160" y="212" width="2" height="15" fill="rgb(219,64,34)"/><text x="1163.00" y="222.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py) (14 samples, 0.49%)</title><rect x="1158" y="196" width="6" height="15" fill="rgb(206,9,35)"/><text x="1161.00" y="206.50"></text></g><g><title>array_subscript (mapping.c) (4 samples, 0.14%)</title><rect x="1163" y="212" width="1" height="15" fill="rgb(235,210,24)"/><text x="1166.00" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (4 samples, 0.14%)</title><rect x="1164" y="196" width="2" height="15" fill="rgb(213,9,24)"/><text x="1167.00" y="206.50"></text></g><g><title>effective_n_jobs (joblib/_parallel_backends.py) (3 samples, 0.11%)</title><rect x="1168" y="244" width="2" height="15" fill="rgb(214,80,29)"/><text x="1171.00" y="254.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py) (5 samples, 0.18%)</title><rect x="1168" y="228" width="2" height="15" fill="rgb(216,4,29)"/><text x="1171.00" y="238.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py) (17 samples, 0.60%)</title><rect x="1171" y="244" width="7" height="15" fill="rgb(250,90,54)"/><text x="1174.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (15 samples, 0.53%)</title><rect x="1172" y="260" width="6" height="15" fill="rgb(231,7,6)"/><text x="1175.00" y="270.50"></text></g><g><title>simplefilter (warnings.py) (5 samples, 0.18%)</title><rect x="1176" y="276" width="2" height="15" fill="rgb(212,227,9)"/><text x="1179.00" y="286.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py) (8 samples, 0.28%)</title><rect x="1178" y="244" width="4" height="15" fill="rgb(220,195,32)"/><text x="1181.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;) (7 samples, 0.25%)</title><rect x="1179" y="260" width="3" height="15" fill="rgb(212,173,5)"/><text x="1182.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.21%)</title><rect x="1179" y="276" width="3" height="15" fill="rgb(239,191,0)"/><text x="1182.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py) (4 samples, 0.14%)</title><rect x="1180" y="292" width="2" height="15" fill="rgb(249,72,47)"/><text x="1183.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c) (4 samples, 0.14%)</title><rect x="1180" y="308" width="2" height="15" fill="rgb(231,160,40)"/><text x="1183.00" y="318.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py) (64 samples, 2.25%)</title><rect x="1156" y="180" width="26" height="15" fill="rgb(205,115,11)"/><text x="1159.00" y="190.50">p..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py) (35 samples, 1.23%)</title><rect x="1168" y="196" width="14" height="15" fill="rgb(222,121,46)"/><text x="1171.00" y="206.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py) (35 samples, 1.23%)</title><rect x="1168" y="212" width="14" height="15" fill="rgb(216,59,32)"/><text x="1171.00" y="222.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py) (28 samples, 0.98%)</title><rect x="1170" y="228" width="12" height="15" fill="rgb(254,147,52)"/><text x="1173.00" y="238.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (87 samples, 3.05%)</title><rect x="1147" y="164" width="36" height="15" fill="rgb(231,57,34)"/><text x="1150.00" y="174.50">kne..</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (3 samples, 0.11%)</title><rect x="1182" y="180" width="1" height="15" fill="rgb(217,131,53)"/><text x="1185.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1185" y="228" width="2" height="15" fill="rgb(241,176,19)"/><text x="1188.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1185" y="244" width="2" height="15" fill="rgb(218,229,42)"/><text x="1188.00" y="254.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (3 samples, 0.11%)</title><rect x="1187" y="244" width="1" height="15" fill="rgb(221,139,51)"/><text x="1190.00" y="254.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (3 samples, 0.11%)</title><rect x="1187" y="260" width="1" height="15" fill="rgb(249,3,53)"/><text x="1190.00" y="270.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (3 samples, 0.11%)</title><rect x="1187" y="276" width="1" height="15" fill="rgb(253,55,3)"/><text x="1190.00" y="286.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (3 samples, 0.11%)</title><rect x="1187" y="292" width="1" height="15" fill="rgb(227,64,41)"/><text x="1190.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (3 samples, 0.11%)</title><rect x="1188" y="276" width="1" height="15" fill="rgb(248,208,25)"/><text x="1191.00" y="286.50"></text></g><g><title>all (2,848 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(253,88,41)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (2,848 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(236,195,13)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (121 samples, 4.25%)</title><rect x="1139" y="68" width="51" height="15" fill="rgb(211,207,38)"/><text x="1142.00" y="78.50">profi..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (121 samples, 4.25%)</title><rect x="1139" y="84" width="51" height="15" fill="rgb(205,148,51)"/><text x="1142.00" y="94.50">setup..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (121 samples, 4.25%)</title><rect x="1139" y="100" width="51" height="15" fill="rgb(245,207,39)"/><text x="1142.00" y="110.50">profi..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (121 samples, 4.25%)</title><rect x="1139" y="116" width="51" height="15" fill="rgb(222,185,38)"/><text x="1142.00" y="126.50">time_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (121 samples, 4.25%)</title><rect x="1139" y="132" width="51" height="15" fill="rgb(252,53,24)"/><text x="1142.00" y="142.50">&lt;lamb..</text></g><g><title>predict (sklearn/neighbors/_regression.py) (121 samples, 4.25%)</title><rect x="1139" y="148" width="51" height="15" fill="rgb(211,126,35)"/><text x="1142.00" y="158.50">predi..</text></g><g><title>mean (&lt;__array_function__ internals&gt;) (15 samples, 0.53%)</title><rect x="1183" y="164" width="7" height="15" fill="rgb(233,98,39)"/><text x="1186.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (15 samples, 0.53%)</title><rect x="1183" y="180" width="7" height="15" fill="rgb(221,219,22)"/><text x="1186.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (14 samples, 0.49%)</title><rect x="1184" y="196" width="6" height="15" fill="rgb(231,29,7)"/><text x="1187.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py) (11 samples, 0.39%)</title><rect x="1185" y="212" width="5" height="15" fill="rgb(224,77,16)"/><text x="1188.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (7 samples, 0.25%)</title><rect x="1187" y="228" width="3" height="15" fill="rgb(241,74,12)"/><text x="1190.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 0.14%)</title><rect x="1188" y="244" width="2" height="15" fill="rgb(206,158,9)"/><text x="1191.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (4 samples, 0.14%)</title><rect x="1188" y="260" width="2" height="15" fill="rgb(236,18,2)"/><text x="1191.00" y="270.50"></text></g></g></svg>