<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1750" onload="init(evt)" viewBox="0 0 1200 1750" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1750" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1733.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1733.00"> </text><g id="frames"><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(233,4,7)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(243,11,20)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(233,190,20)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="10" y="916" width="1" height="15" fill="rgb(249,77,54)"/><text x="13.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="10" y="932" width="1" height="15" fill="rgb(218,70,1)"/><text x="13.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="10" y="948" width="1" height="15" fill="rgb(219,88,9)"/><text x="13.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="10" y="964" width="1" height="15" fill="rgb(211,27,18)"/><text x="13.00" y="974.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="10" y="980" width="1" height="15" fill="rgb(236,161,26)"/><text x="13.00" y="990.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.12%)</title><rect x="10" y="996" width="1" height="15" fill="rgb(240,8,7)"/><text x="13.00" y="1006.50"></text></g><g><title>__xstat (libc-2.29.so) (1 samples, 0.12%)</title><rect x="10" y="1012" width="1" height="15" fill="rgb(250,172,45)"/><text x="13.00" y="1022.50"></text></g><g><title>_build_master (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="11" y="868" width="1" height="15" fill="rgb(205,32,2)"/><text x="14.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="11" y="884" width="1" height="15" fill="rgb(239,1,5)"/><text x="14.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="11" y="900" width="1" height="15" fill="rgb(241,34,36)"/><text x="14.00" y="910.50"></text></g><g><title>add (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="11" y="916" width="1" height="15" fill="rgb(239,217,0)"/><text x="14.00" y="926.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (3 samples, 0.36%)</title><rect x="10" y="292" width="4" height="15" fill="rgb(234,75,51)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="308" width="4" height="15" fill="rgb(227,224,3)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="324" width="4" height="15" fill="rgb(212,176,45)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="340" width="4" height="15" fill="rgb(238,142,14)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="10" y="356" width="4" height="15" fill="rgb(249,7,33)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="372" width="4" height="15" fill="rgb(209,201,8)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (3 samples, 0.36%)</title><rect x="10" y="388" width="4" height="15" fill="rgb(235,128,29)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="404" width="4" height="15" fill="rgb(245,90,36)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="420" width="4" height="15" fill="rgb(233,145,37)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="436" width="4" height="15" fill="rgb(249,172,36)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="10" y="452" width="4" height="15" fill="rgb(251,121,18)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="468" width="4" height="15" fill="rgb(245,148,29)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (3 samples, 0.36%)</title><rect x="10" y="484" width="4" height="15" fill="rgb(212,156,22)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="500" width="4" height="15" fill="rgb(245,172,51)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="516" width="4" height="15" fill="rgb(222,80,42)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="532" width="4" height="15" fill="rgb(218,140,34)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="10" y="548" width="4" height="15" fill="rgb(214,17,52)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="564" width="4" height="15" fill="rgb(221,204,5)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (3 samples, 0.36%)</title><rect x="10" y="580" width="4" height="15" fill="rgb(226,160,21)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="596" width="4" height="15" fill="rgb(226,132,51)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="612" width="4" height="15" fill="rgb(252,208,44)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="628" width="4" height="15" fill="rgb(215,159,12)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="644" width="4" height="15" fill="rgb(244,6,16)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="660" width="4" height="15" fill="rgb(243,209,39)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="676" width="4" height="15" fill="rgb(213,75,15)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="10" y="692" width="4" height="15" fill="rgb(244,12,42)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="708" width="4" height="15" fill="rgb(215,182,19)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (3 samples, 0.36%)</title><rect x="10" y="724" width="4" height="15" fill="rgb(240,172,35)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="740" width="4" height="15" fill="rgb(222,11,46)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="756" width="4" height="15" fill="rgb(221,142,49)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="772" width="4" height="15" fill="rgb(208,214,34)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="10" y="788" width="4" height="15" fill="rgb(220,106,36)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="10" y="804" width="4" height="15" fill="rgb(234,151,45)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (3 samples, 0.36%)</title><rect x="10" y="820" width="4" height="15" fill="rgb(211,227,11)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (3 samples, 0.36%)</title><rect x="10" y="836" width="4" height="15" fill="rgb(250,6,50)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (3 samples, 0.36%)</title><rect x="10" y="852" width="4" height="15" fill="rgb(221,123,53)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="12" y="868" width="2" height="15" fill="rgb(251,128,28)"/><text x="15.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="12" y="884" width="2" height="15" fill="rgb(235,35,36)"/><text x="15.00" y="894.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="12" y="900" width="2" height="15" fill="rgb(234,60,20)"/><text x="15.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="12" y="916" width="2" height="15" fill="rgb(206,62,53)"/><text x="15.00" y="926.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (1 samples, 0.12%)</title><rect x="12" y="932" width="2" height="15" fill="rgb(212,130,51)"/><text x="15.00" y="942.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.12%)</title><rect x="12" y="948" width="2" height="15" fill="rgb(246,53,36)"/><text x="15.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.12%)</title><rect x="12" y="964" width="2" height="15" fill="rgb(220,63,33)"/><text x="15.00" y="974.50"></text></g><g><title>_legacy_cmpkey (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.12%)</title><rect x="12" y="980" width="2" height="15" fill="rgb(215,53,16)"/><text x="15.00" y="990.50"></text></g><g><title>_parse_version_parts (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.12%)</title><rect x="12" y="996" width="2" height="15" fill="rgb(235,128,18)"/><text x="15.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="10" y="196" width="5" height="15" fill="rgb(210,93,40)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="10" y="212" width="5" height="15" fill="rgb(205,87,52)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="10" y="228" width="5" height="15" fill="rgb(240,197,5)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="10" y="244" width="5" height="15" fill="rgb(209,63,39)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.48%)</title><rect x="10" y="260" width="5" height="15" fill="rgb(246,70,29)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="10" y="276" width="5" height="15" fill="rgb(228,165,8)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (1 samples, 0.12%)</title><rect x="14" y="292" width="1" height="15" fill="rgb(228,146,33)"/><text x="17.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="308" width="1" height="15" fill="rgb(216,76,11)"/><text x="17.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="324" width="1" height="15" fill="rgb(225,155,54)"/><text x="17.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="340" width="1" height="15" fill="rgb(246,200,7)"/><text x="17.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="14" y="356" width="1" height="15" fill="rgb(234,168,30)"/><text x="17.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="372" width="1" height="15" fill="rgb(208,220,47)"/><text x="17.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (1 samples, 0.12%)</title><rect x="14" y="388" width="1" height="15" fill="rgb(252,143,54)"/><text x="17.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="404" width="1" height="15" fill="rgb(231,60,31)"/><text x="17.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="420" width="1" height="15" fill="rgb(232,91,47)"/><text x="17.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="436" width="1" height="15" fill="rgb(251,151,41)"/><text x="17.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="14" y="452" width="1" height="15" fill="rgb(207,117,14)"/><text x="17.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="468" width="1" height="15" fill="rgb(222,73,15)"/><text x="17.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (1 samples, 0.12%)</title><rect x="14" y="484" width="1" height="15" fill="rgb(226,80,48)"/><text x="17.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="500" width="1" height="15" fill="rgb(235,30,47)"/><text x="17.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="516" width="1" height="15" fill="rgb(205,3,0)"/><text x="17.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="532" width="1" height="15" fill="rgb(247,97,45)"/><text x="17.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="14" y="548" width="1" height="15" fill="rgb(210,127,3)"/><text x="17.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="564" width="1" height="15" fill="rgb(248,85,31)"/><text x="17.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (1 samples, 0.12%)</title><rect x="14" y="580" width="1" height="15" fill="rgb(233,204,4)"/><text x="17.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="596" width="1" height="15" fill="rgb(253,190,21)"/><text x="17.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="612" width="1" height="15" fill="rgb(241,136,15)"/><text x="17.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="628" width="1" height="15" fill="rgb(252,202,15)"/><text x="17.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="14" y="644" width="1" height="15" fill="rgb(232,101,39)"/><text x="17.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="660" width="1" height="15" fill="rgb(210,121,12)"/><text x="17.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (1 samples, 0.12%)</title><rect x="14" y="676" width="1" height="15" fill="rgb(249,170,51)"/><text x="17.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="692" width="1" height="15" fill="rgb(223,134,52)"/><text x="17.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="708" width="1" height="15" fill="rgb(233,203,9)"/><text x="17.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="724" width="1" height="15" fill="rgb(222,44,7)"/><text x="17.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="14" y="740" width="1" height="15" fill="rgb(232,76,15)"/><text x="17.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="756" width="1" height="15" fill="rgb(246,168,52)"/><text x="17.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (1 samples, 0.12%)</title><rect x="14" y="772" width="1" height="15" fill="rgb(215,89,23)"/><text x="17.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="788" width="1" height="15" fill="rgb(252,66,48)"/><text x="17.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="804" width="1" height="15" fill="rgb(208,131,42)"/><text x="17.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="820" width="1" height="15" fill="rgb(218,89,38)"/><text x="17.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="836" width="1" height="15" fill="rgb(220,1,21)"/><text x="17.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="852" width="1" height="15" fill="rgb(254,226,48)"/><text x="17.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="14" y="868" width="1" height="15" fill="rgb(230,183,4)"/><text x="17.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="884" width="1" height="15" fill="rgb(254,77,26)"/><text x="17.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (1 samples, 0.12%)</title><rect x="14" y="900" width="1" height="15" fill="rgb(240,2,9)"/><text x="17.00" y="910.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="916" width="1" height="15" fill="rgb(235,63,44)"/><text x="17.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="932" width="1" height="15" fill="rgb(235,48,4)"/><text x="17.00" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="948" width="1" height="15" fill="rgb(211,80,37)"/><text x="17.00" y="958.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="964" width="1" height="15" fill="rgb(227,27,25)"/><text x="17.00" y="974.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="980" width="1" height="15" fill="rgb(250,174,20)"/><text x="17.00" y="990.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="14" y="996" width="1" height="15" fill="rgb(238,96,40)"/><text x="17.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="14" y="1012" width="1" height="15" fill="rgb(234,86,47)"/><text x="17.00" y="1022.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_continuous_distns.py) (1 samples, 0.12%)</title><rect x="14" y="1028" width="1" height="15" fill="rgb(243,173,15)"/><text x="17.00" y="1038.50"></text></g><g><title>__init__ (scipy/stats/_distn_infrastructure.py) (1 samples, 0.12%)</title><rect x="14" y="1044" width="1" height="15" fill="rgb(233,5,50)"/><text x="17.00" y="1054.50"></text></g><g><title>_construct_doc (scipy/stats/_distn_infrastructure.py) (1 samples, 0.12%)</title><rect x="14" y="1060" width="1" height="15" fill="rgb(228,176,35)"/><text x="17.00" y="1070.50"></text></g><g><title>docformat (scipy/_lib/doccer.py) (1 samples, 0.12%)</title><rect x="14" y="1076" width="1" height="15" fill="rgb(246,27,30)"/><text x="17.00" y="1086.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.12%)</title><rect x="14" y="1092" width="1" height="15" fill="rgb(229,216,37)"/><text x="17.00" y="1102.50"></text></g><g><title>getattr (jinja2/environment.py) (1 samples, 0.12%)</title><rect x="15" y="1588" width="2" height="15" fill="rgb(236,22,32)"/><text x="18.00" y="1598.50"></text></g><g><title>_Attribute_default_value (onnx/defs/__init__.py) (1 samples, 0.12%)</title><rect x="15" y="1604" width="2" height="15" fill="rgb(233,132,38)"/><text x="18.00" y="1614.50"></text></g><g><title>0x7f901b72e94d (?) (1 samples, 0.12%)</title><rect x="15" y="1620" width="2" height="15" fill="rgb(241,88,33)"/><text x="18.00" y="1630.50"></text></g><g><title>0x7f901b7ef6bb (?) (1 samples, 0.12%)</title><rect x="15" y="1636" width="2" height="15" fill="rgb(226,64,27)"/><text x="18.00" y="1646.50"></text></g><g><title>0x7f901b7ee9d1 (?) (1 samples, 0.12%)</title><rect x="15" y="1652" width="2" height="15" fill="rgb(237,228,38)"/><text x="18.00" y="1662.50"></text></g><g><title>0x7f901b76b1f6 (?) (1 samples, 0.12%)</title><rect x="15" y="1668" width="2" height="15" fill="rgb(224,142,42)"/><text x="18.00" y="1678.50"></text></g><g><title>0x7f901b768863 (?) (1 samples, 0.12%)</title><rect x="15" y="1684" width="2" height="15" fill="rgb(211,0,34)"/><text x="18.00" y="1694.50"></text></g><g><title>0x7f901b7687d6 (?) (1 samples, 0.12%)</title><rect x="15" y="1700" width="2" height="15" fill="rgb(222,135,42)"/><text x="18.00" y="1710.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="484" width="6" height="15" fill="rgb(205,81,18)"/><text x="18.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="500" width="6" height="15" fill="rgb(240,204,22)"/><text x="18.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="516" width="6" height="15" fill="rgb(233,145,42)"/><text x="18.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="532" width="6" height="15" fill="rgb(245,45,10)"/><text x="18.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.48%)</title><rect x="15" y="548" width="6" height="15" fill="rgb(244,87,33)"/><text x="18.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="564" width="6" height="15" fill="rgb(234,105,28)"/><text x="18.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (4 samples, 0.48%)</title><rect x="15" y="580" width="6" height="15" fill="rgb(226,202,40)"/><text x="18.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="596" width="6" height="15" fill="rgb(214,118,13)"/><text x="18.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="612" width="6" height="15" fill="rgb(245,132,45)"/><text x="18.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="628" width="6" height="15" fill="rgb(210,99,41)"/><text x="18.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.48%)</title><rect x="15" y="644" width="6" height="15" fill="rgb(248,198,43)"/><text x="18.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="660" width="6" height="15" fill="rgb(227,90,49)"/><text x="18.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (4 samples, 0.48%)</title><rect x="15" y="676" width="6" height="15" fill="rgb(208,203,37)"/><text x="18.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="692" width="6" height="15" fill="rgb(217,27,5)"/><text x="18.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="708" width="6" height="15" fill="rgb(234,158,18)"/><text x="18.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="724" width="6" height="15" fill="rgb(218,181,43)"/><text x="18.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.48%)</title><rect x="15" y="740" width="6" height="15" fill="rgb(252,207,32)"/><text x="18.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="756" width="6" height="15" fill="rgb(235,147,52)"/><text x="18.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (4 samples, 0.48%)</title><rect x="15" y="772" width="6" height="15" fill="rgb(220,38,14)"/><text x="18.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="788" width="6" height="15" fill="rgb(244,94,7)"/><text x="18.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="804" width="6" height="15" fill="rgb(226,34,48)"/><text x="18.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="820" width="6" height="15" fill="rgb(252,89,32)"/><text x="18.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.48%)</title><rect x="15" y="836" width="6" height="15" fill="rgb(211,99,8)"/><text x="18.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="852" width="6" height="15" fill="rgb(225,117,1)"/><text x="18.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (4 samples, 0.48%)</title><rect x="15" y="868" width="6" height="15" fill="rgb(251,22,47)"/><text x="18.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="884" width="6" height="15" fill="rgb(229,167,40)"/><text x="18.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="900" width="6" height="15" fill="rgb(222,2,26)"/><text x="18.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="916" width="6" height="15" fill="rgb(213,96,54)"/><text x="18.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="932" width="6" height="15" fill="rgb(224,212,33)"/><text x="18.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="948" width="6" height="15" fill="rgb(232,71,32)"/><text x="18.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="964" width="6" height="15" fill="rgb(221,85,3)"/><text x="18.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.48%)</title><rect x="15" y="980" width="6" height="15" fill="rgb(209,168,8)"/><text x="18.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="996" width="6" height="15" fill="rgb(209,145,45)"/><text x="18.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (4 samples, 0.48%)</title><rect x="15" y="1012" width="6" height="15" fill="rgb(232,47,44)"/><text x="18.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1028" width="6" height="15" fill="rgb(232,50,31)"/><text x="18.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1044" width="6" height="15" fill="rgb(208,42,7)"/><text x="18.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1060" width="6" height="15" fill="rgb(205,88,37)"/><text x="18.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.48%)</title><rect x="15" y="1076" width="6" height="15" fill="rgb(231,128,34)"/><text x="18.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1092" width="6" height="15" fill="rgb(217,174,3)"/><text x="18.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (4 samples, 0.48%)</title><rect x="15" y="1108" width="6" height="15" fill="rgb(208,17,16)"/><text x="18.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1124" width="6" height="15" fill="rgb(246,115,12)"/><text x="18.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1140" width="6" height="15" fill="rgb(241,70,35)"/><text x="18.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1156" width="6" height="15" fill="rgb(250,196,22)"/><text x="18.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1172" width="6" height="15" fill="rgb(253,158,19)"/><text x="18.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1188" width="6" height="15" fill="rgb(217,192,12)"/><text x="18.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.48%)</title><rect x="15" y="1204" width="6" height="15" fill="rgb(252,195,35)"/><text x="18.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1220" width="6" height="15" fill="rgb(216,94,24)"/><text x="18.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (4 samples, 0.48%)</title><rect x="15" y="1236" width="6" height="15" fill="rgb(244,96,44)"/><text x="18.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1252" width="6" height="15" fill="rgb(234,137,38)"/><text x="18.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1268" width="6" height="15" fill="rgb(252,196,48)"/><text x="18.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1284" width="6" height="15" fill="rgb(211,128,27)"/><text x="18.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1300" width="6" height="15" fill="rgb(212,201,22)"/><text x="18.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1316" width="6" height="15" fill="rgb(248,172,1)"/><text x="18.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.48%)</title><rect x="15" y="1332" width="6" height="15" fill="rgb(248,145,36)"/><text x="18.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1348" width="6" height="15" fill="rgb(205,140,14)"/><text x="18.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (4 samples, 0.48%)</title><rect x="15" y="1364" width="6" height="15" fill="rgb(229,219,53)"/><text x="18.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1380" width="6" height="15" fill="rgb(243,205,16)"/><text x="18.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1396" width="6" height="15" fill="rgb(222,63,16)"/><text x="18.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1412" width="6" height="15" fill="rgb(254,72,21)"/><text x="18.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.48%)</title><rect x="15" y="1428" width="6" height="15" fill="rgb(254,102,2)"/><text x="18.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.48%)</title><rect x="15" y="1444" width="6" height="15" fill="rgb(246,223,9)"/><text x="18.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.48%)</title><rect x="15" y="1460" width="6" height="15" fill="rgb(220,119,13)"/><text x="18.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.48%)</title><rect x="15" y="1476" width="6" height="15" fill="rgb(252,157,1)"/><text x="18.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.48%)</title><rect x="15" y="1492" width="6" height="15" fill="rgb(219,45,14)"/><text x="18.00" y="1502.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py) (4 samples, 0.48%)</title><rect x="15" y="1508" width="6" height="15" fill="rgb(242,139,23)"/><text x="18.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py) (4 samples, 0.48%)</title><rect x="15" y="1524" width="6" height="15" fill="rgb(215,206,5)"/><text x="18.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py) (4 samples, 0.48%)</title><rect x="15" y="1540" width="6" height="15" fill="rgb(235,177,44)"/><text x="18.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (4 samples, 0.48%)</title><rect x="15" y="1556" width="6" height="15" fill="rgb(218,219,33)"/><text x="18.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;) (4 samples, 0.48%)</title><rect x="15" y="1572" width="6" height="15" fill="rgb(210,87,51)"/><text x="18.00" y="1582.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.36%)</title><rect x="17" y="1588" width="4" height="15" fill="rgb(247,190,50)"/><text x="20.00" y="1598.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::detail::enum_base::init(bool, bool)::{lambda(pybind11::object, pybind11::object)#18}, bool, pybind11::object, pybind11::object, pybind11::is_method&gt;(pybind11::detail::enum_base::init(bool, bool)::{lambda(pybind11::object&amp;&amp;, pybind11::object)#18}, bool (*)(pybind11::object, pybind11::object), pybind11::is_method const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.36%)</title><rect x="17" y="1604" width="4" height="15" fill="rgb(216,54,26)"/><text x="20.00" y="1614.50"></text></g><g><title>pybind11::detail::enum_base::init(bool, bool)::{lambda(pybind11::object, pybind11::object)#18}::operator() const (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.36%)</title><rect x="17" y="1620" width="4" height="15" fill="rgb(207,172,26)"/><text x="20.00" y="1630.50"></text></g><g><title>pybind11::int_::int_ (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.36%)</title><rect x="17" y="1636" width="4" height="15" fill="rgb(228,18,42)"/><text x="20.00" y="1646.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="19" y="1652" width="2" height="15" fill="rgb(249,94,24)"/><text x="22.00" y="1662.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::enum_&lt;onnx::OpSchema::SupportType&gt;::enum_&lt;&gt;(char const*, const&amp;)::{lambda(onnx::OpSchema::SupportType)#2}, unsigned char, onnx::OpSchema::SupportType, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::enum_&lt;onnx::OpSchema::SupportType&gt;::enum_&lt;&gt;(char const*, const&amp;)::{lambda(onnx::OpSchema::SupportType&amp;&amp;)#2}, unsigned char (*)(onnx::OpSchema::SupportType), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="19" y="1668" width="2" height="15" fill="rgb(246,150,36)"/><text x="22.00" y="1678.50"></text></g><g><title>pybind11::detail::type_caster_generic::load_impl&lt;pybind11::detail::type_caster_generic&gt; (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="19" y="1684" width="2" height="15" fill="rgb(242,116,32)"/><text x="22.00" y="1694.50"></text></g><g><title>pybind11::detail::instance::get_value_and_holder (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="19" y="1700" width="2" height="15" fill="rgb(252,45,2)"/><text x="22.00" y="1710.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (7 samples, 0.83%)</title><rect x="15" y="436" width="10" height="15" fill="rgb(243,208,23)"/><text x="18.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.83%)</title><rect x="15" y="452" width="10" height="15" fill="rgb(217,102,14)"/><text x="18.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.83%)</title><rect x="15" y="468" width="10" height="15" fill="rgb(211,17,10)"/><text x="18.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="484" width="4" height="15" fill="rgb(208,24,29)"/><text x="24.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="500" width="4" height="15" fill="rgb(225,226,20)"/><text x="24.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="516" width="4" height="15" fill="rgb(242,41,53)"/><text x="24.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.36%)</title><rect x="21" y="532" width="4" height="15" fill="rgb(248,179,20)"/><text x="24.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="548" width="4" height="15" fill="rgb(210,75,13)"/><text x="24.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="564" width="4" height="15" fill="rgb(245,133,8)"/><text x="24.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="580" width="4" height="15" fill="rgb(254,105,11)"/><text x="24.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="596" width="4" height="15" fill="rgb(205,7,1)"/><text x="24.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="612" width="4" height="15" fill="rgb(219,70,39)"/><text x="24.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (3 samples, 0.36%)</title><rect x="21" y="628" width="4" height="15" fill="rgb(239,44,21)"/><text x="24.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="644" width="4" height="15" fill="rgb(214,34,53)"/><text x="24.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="660" width="4" height="15" fill="rgb(232,128,5)"/><text x="24.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="676" width="4" height="15" fill="rgb(246,140,31)"/><text x="24.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="692" width="4" height="15" fill="rgb(211,1,27)"/><text x="24.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="708" width="4" height="15" fill="rgb(245,172,8)"/><text x="24.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (3 samples, 0.36%)</title><rect x="21" y="724" width="4" height="15" fill="rgb(240,229,51)"/><text x="24.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="740" width="4" height="15" fill="rgb(217,202,14)"/><text x="24.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="756" width="4" height="15" fill="rgb(209,141,6)"/><text x="24.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="772" width="4" height="15" fill="rgb(224,152,18)"/><text x="24.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="788" width="4" height="15" fill="rgb(247,108,34)"/><text x="24.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="804" width="4" height="15" fill="rgb(208,71,0)"/><text x="24.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (3 samples, 0.36%)</title><rect x="21" y="820" width="4" height="15" fill="rgb(240,72,29)"/><text x="24.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="836" width="4" height="15" fill="rgb(246,27,50)"/><text x="24.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="852" width="4" height="15" fill="rgb(252,78,28)"/><text x="24.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="868" width="4" height="15" fill="rgb(250,104,40)"/><text x="24.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="884" width="4" height="15" fill="rgb(253,147,1)"/><text x="24.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="900" width="4" height="15" fill="rgb(252,74,11)"/><text x="24.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (3 samples, 0.36%)</title><rect x="21" y="916" width="4" height="15" fill="rgb(235,31,29)"/><text x="24.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="932" width="4" height="15" fill="rgb(208,66,4)"/><text x="24.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="948" width="4" height="15" fill="rgb(218,118,52)"/><text x="24.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="964" width="4" height="15" fill="rgb(206,220,53)"/><text x="24.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="980" width="4" height="15" fill="rgb(210,179,12)"/><text x="24.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="996" width="4" height="15" fill="rgb(211,102,5)"/><text x="24.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (3 samples, 0.36%)</title><rect x="21" y="1012" width="4" height="15" fill="rgb(230,138,1)"/><text x="24.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1028" width="4" height="15" fill="rgb(251,47,11)"/><text x="24.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1044" width="4" height="15" fill="rgb(246,16,0)"/><text x="24.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1060" width="4" height="15" fill="rgb(246,142,10)"/><text x="24.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="1076" width="4" height="15" fill="rgb(229,173,39)"/><text x="24.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1092" width="4" height="15" fill="rgb(231,31,30)"/><text x="24.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/generic.py) (3 samples, 0.36%)</title><rect x="21" y="1108" width="4" height="15" fill="rgb(216,225,34)"/><text x="24.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1124" width="4" height="15" fill="rgb(223,217,23)"/><text x="24.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1140" width="4" height="15" fill="rgb(221,129,38)"/><text x="24.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1156" width="4" height="15" fill="rgb(249,39,49)"/><text x="24.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="1172" width="4" height="15" fill="rgb(208,198,30)"/><text x="24.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1188" width="4" height="15" fill="rgb(226,151,7)"/><text x="24.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/core/index.py) (3 samples, 0.36%)</title><rect x="21" y="1204" width="4" height="15" fill="rgb(252,220,40)"/><text x="24.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1220" width="4" height="15" fill="rgb(219,185,51)"/><text x="24.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1236" width="4" height="15" fill="rgb(234,204,51)"/><text x="24.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1252" width="4" height="15" fill="rgb(220,89,18)"/><text x="24.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="1268" width="4" height="15" fill="rgb(251,31,25)"/><text x="24.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1284" width="4" height="15" fill="rgb(230,155,19)"/><text x="24.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/api.py) (3 samples, 0.36%)</title><rect x="21" y="1300" width="4" height="15" fill="rgb(246,33,49)"/><text x="24.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1316" width="4" height="15" fill="rgb(211,69,23)"/><text x="24.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1332" width="4" height="15" fill="rgb(221,98,23)"/><text x="24.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1348" width="4" height="15" fill="rgb(236,19,20)"/><text x="24.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="1364" width="4" height="15" fill="rgb(207,82,21)"/><text x="24.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1380" width="4" height="15" fill="rgb(247,189,30)"/><text x="24.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/interval.py) (3 samples, 0.36%)</title><rect x="21" y="1396" width="4" height="15" fill="rgb(223,202,44)"/><text x="24.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1412" width="4" height="15" fill="rgb(220,143,49)"/><text x="24.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1428" width="4" height="15" fill="rgb(208,194,22)"/><text x="24.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.36%)</title><rect x="21" y="1444" width="4" height="15" fill="rgb(224,161,52)"/><text x="24.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="1460" width="4" height="15" fill="rgb(224,5,52)"/><text x="24.00" y="1470.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="1476" width="4" height="15" fill="rgb(251,102,52)"/><text x="24.00" y="1486.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.36%)</title><rect x="21" y="1492" width="4" height="15" fill="rgb(212,159,49)"/><text x="24.00" y="1502.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (8 samples, 0.95%)</title><rect x="15" y="340" width="11" height="15" fill="rgb(236,225,20)"/><text x="18.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.95%)</title><rect x="15" y="356" width="11" height="15" fill="rgb(252,87,10)"/><text x="18.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.95%)</title><rect x="15" y="372" width="11" height="15" fill="rgb(210,110,8)"/><text x="18.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.95%)</title><rect x="15" y="388" width="11" height="15" fill="rgb(214,123,6)"/><text x="18.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.95%)</title><rect x="15" y="404" width="11" height="15" fill="rgb(220,14,5)"/><text x="18.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.95%)</title><rect x="15" y="420" width="11" height="15" fill="rgb(211,226,23)"/><text x="18.00" y="430.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/__init__.py) (1 samples, 0.12%)</title><rect x="25" y="436" width="1" height="15" fill="rgb(217,92,29)"/><text x="28.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="452" width="1" height="15" fill="rgb(226,94,45)"/><text x="28.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="468" width="1" height="15" fill="rgb(229,65,16)"/><text x="28.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="484" width="1" height="15" fill="rgb(212,81,53)"/><text x="28.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="25" y="500" width="1" height="15" fill="rgb(218,162,7)"/><text x="28.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="516" width="1" height="15" fill="rgb(220,173,36)"/><text x="28.00" y="526.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/_base.py) (1 samples, 0.12%)</title><rect x="25" y="532" width="1" height="15" fill="rgb(225,55,48)"/><text x="28.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="548" width="1" height="15" fill="rgb(236,23,9)"/><text x="28.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="564" width="1" height="15" fill="rgb(245,180,14)"/><text x="28.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="580" width="1" height="15" fill="rgb(236,199,27)"/><text x="28.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="25" y="596" width="1" height="15" fill="rgb(251,181,46)"/><text x="28.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="612" width="1" height="15" fill="rgb(229,206,26)"/><text x="28.00" y="622.50"></text></g><g><title>&lt;module&gt; (urllib/request.py) (1 samples, 0.12%)</title><rect x="25" y="628" width="1" height="15" fill="rgb(232,80,15)"/><text x="28.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="644" width="1" height="15" fill="rgb(243,83,46)"/><text x="28.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="660" width="1" height="15" fill="rgb(209,178,52)"/><text x="28.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="676" width="1" height="15" fill="rgb(237,150,34)"/><text x="28.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="25" y="692" width="1" height="15" fill="rgb(221,165,38)"/><text x="28.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="708" width="1" height="15" fill="rgb(210,123,37)"/><text x="28.00" y="718.50"></text></g><g><title>&lt;module&gt; (http/client.py) (1 samples, 0.12%)</title><rect x="25" y="724" width="1" height="15" fill="rgb(234,87,7)"/><text x="28.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="740" width="1" height="15" fill="rgb(248,223,9)"/><text x="28.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="756" width="1" height="15" fill="rgb(210,212,12)"/><text x="28.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="772" width="1" height="15" fill="rgb(209,130,21)"/><text x="28.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="25" y="788" width="1" height="15" fill="rgb(246,182,21)"/><text x="28.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="25" y="804" width="1" height="15" fill="rgb(237,2,4)"/><text x="28.00" y="814.50"></text></g><g><title>&lt;module&gt; (ssl.py) (1 samples, 0.12%)</title><rect x="25" y="820" width="1" height="15" fill="rgb(216,65,15)"/><text x="28.00" y="830.50"></text></g><g><title>_convert (enum.py) (1 samples, 0.12%)</title><rect x="25" y="836" width="1" height="15" fill="rgb(227,51,27)"/><text x="28.00" y="846.50"></text></g><g><title>__call__ (enum.py) (1 samples, 0.12%)</title><rect x="25" y="852" width="1" height="15" fill="rgb(230,213,5)"/><text x="28.00" y="862.50"></text></g><g><title>_create_ (enum.py) (1 samples, 0.12%)</title><rect x="25" y="868" width="1" height="15" fill="rgb(224,117,24)"/><text x="28.00" y="878.50"></text></g><g><title>__new__ (enum.py) (1 samples, 0.12%)</title><rect x="25" y="884" width="1" height="15" fill="rgb(253,20,2)"/><text x="28.00" y="894.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/code_helper.py) (1 samples, 0.12%)</title><rect x="26" y="580" width="2" height="15" fill="rgb(238,221,32)"/><text x="29.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="26" y="596" width="2" height="15" fill="rgb(230,187,26)"/><text x="29.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="26" y="612" width="2" height="15" fill="rgb(251,112,48)"/><text x="29.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="26" y="628" width="2" height="15" fill="rgb(221,24,0)"/><text x="29.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="26" y="644" width="2" height="15" fill="rgb(226,180,22)"/><text x="29.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="26" y="660" width="2" height="15" fill="rgb(221,50,10)"/><text x="29.00" y="670.50"></text></g><g><title>&lt;module&gt; (autopep8.py) (1 samples, 0.12%)</title><rect x="26" y="676" width="2" height="15" fill="rgb(205,84,48)"/><text x="29.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="26" y="692" width="2" height="15" fill="rgb(250,2,29)"/><text x="29.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="26" y="708" width="2" height="15" fill="rgb(205,131,1)"/><text x="29.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="26" y="724" width="2" height="15" fill="rgb(223,137,26)"/><text x="29.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="26" y="740" width="2" height="15" fill="rgb(230,12,6)"/><text x="29.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="26" y="756" width="2" height="15" fill="rgb(222,198,43)"/><text x="29.00" y="766.50"></text></g><g><title>&lt;module&gt; (pycodestyle.py) (1 samples, 0.12%)</title><rect x="26" y="772" width="2" height="15" fill="rgb(226,142,19)"/><text x="29.00" y="782.50"></text></g><g><title>compile (re.py) (1 samples, 0.12%)</title><rect x="26" y="788" width="2" height="15" fill="rgb(234,149,41)"/><text x="29.00" y="798.50"></text></g><g><title>_compile (re.py) (1 samples, 0.12%)</title><rect x="26" y="804" width="2" height="15" fill="rgb(242,207,38)"/><text x="29.00" y="814.50"></text></g><g><title>compile (sre_compile.py) (1 samples, 0.12%)</title><rect x="26" y="820" width="2" height="15" fill="rgb(223,120,51)"/><text x="29.00" y="830.50"></text></g><g><title>parse (sre_parse.py) (1 samples, 0.12%)</title><rect x="26" y="836" width="2" height="15" fill="rgb(227,62,15)"/><text x="29.00" y="846.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.12%)</title><rect x="26" y="852" width="2" height="15" fill="rgb(235,164,53)"/><text x="29.00" y="862.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.12%)</title><rect x="26" y="868" width="2" height="15" fill="rgb(208,156,38)"/><text x="29.00" y="878.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.12%)</title><rect x="26" y="884" width="2" height="15" fill="rgb(225,29,46)"/><text x="29.00" y="894.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.12%)</title><rect x="26" y="900" width="2" height="15" fill="rgb(212,164,29)"/><text x="29.00" y="910.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (10 samples, 1.19%)</title><rect x="15" y="244" width="14" height="15" fill="rgb(215,163,24)"/><text x="18.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.19%)</title><rect x="15" y="260" width="14" height="15" fill="rgb(236,190,41)"/><text x="18.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.19%)</title><rect x="15" y="276" width="14" height="15" fill="rgb(248,140,13)"/><text x="18.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.19%)</title><rect x="15" y="292" width="14" height="15" fill="rgb(217,132,6)"/><text x="18.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (10 samples, 1.19%)</title><rect x="15" y="308" width="14" height="15" fill="rgb(210,222,8)"/><text x="18.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.19%)</title><rect x="15" y="324" width="14" height="15" fill="rgb(240,90,1)"/><text x="18.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py) (2 samples, 0.24%)</title><rect x="26" y="340" width="3" height="15" fill="rgb(236,114,42)"/><text x="29.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="26" y="356" width="3" height="15" fill="rgb(253,144,16)"/><text x="29.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="26" y="372" width="3" height="15" fill="rgb(218,65,53)"/><text x="29.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="26" y="388" width="3" height="15" fill="rgb(215,12,40)"/><text x="29.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="26" y="404" width="3" height="15" fill="rgb(229,203,25)"/><text x="29.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="26" y="420" width="3" height="15" fill="rgb(231,27,23)"/><text x="29.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="26" y="436" width="3" height="15" fill="rgb(205,41,22)"/><text x="29.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.24%)</title><rect x="26" y="452" width="3" height="15" fill="rgb(238,106,38)"/><text x="29.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="26" y="468" width="3" height="15" fill="rgb(237,106,24)"/><text x="29.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py) (2 samples, 0.24%)</title><rect x="26" y="484" width="3" height="15" fill="rgb(215,57,30)"/><text x="29.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="26" y="500" width="3" height="15" fill="rgb(252,178,10)"/><text x="29.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="26" y="516" width="3" height="15" fill="rgb(230,205,20)"/><text x="29.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="26" y="532" width="3" height="15" fill="rgb(224,223,23)"/><text x="29.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.24%)</title><rect x="26" y="548" width="3" height="15" fill="rgb(217,122,27)"/><text x="29.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="26" y="564" width="3" height="15" fill="rgb(209,66,50)"/><text x="29.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py) (1 samples, 0.12%)</title><rect x="28" y="580" width="1" height="15" fill="rgb(251,11,45)"/><text x="31.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="596" width="1" height="15" fill="rgb(207,14,25)"/><text x="31.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="612" width="1" height="15" fill="rgb(253,203,15)"/><text x="31.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="628" width="1" height="15" fill="rgb(249,173,11)"/><text x="31.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="28" y="644" width="1" height="15" fill="rgb(236,198,32)"/><text x="31.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="660" width="1" height="15" fill="rgb(215,180,38)"/><text x="31.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py) (1 samples, 0.12%)</title><rect x="28" y="676" width="1" height="15" fill="rgb(229,222,5)"/><text x="31.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="692" width="1" height="15" fill="rgb(231,123,13)"/><text x="31.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="708" width="1" height="15" fill="rgb(222,120,4)"/><text x="31.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="724" width="1" height="15" fill="rgb(214,79,36)"/><text x="31.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="28" y="740" width="1" height="15" fill="rgb(232,29,0)"/><text x="31.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="756" width="1" height="15" fill="rgb(239,131,37)"/><text x="31.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py) (1 samples, 0.12%)</title><rect x="28" y="772" width="1" height="15" fill="rgb(205,127,10)"/><text x="31.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="788" width="1" height="15" fill="rgb(216,20,27)"/><text x="31.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="804" width="1" height="15" fill="rgb(248,69,8)"/><text x="31.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="820" width="1" height="15" fill="rgb(214,188,1)"/><text x="31.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="836" width="1" height="15" fill="rgb(214,199,35)"/><text x="31.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="852" width="1" height="15" fill="rgb(234,137,9)"/><text x="31.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="28" y="868" width="1" height="15" fill="rgb(224,99,12)"/><text x="31.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="884" width="1" height="15" fill="rgb(219,10,17)"/><text x="31.00" y="894.50"></text></g><g><title>&lt;module&gt; (urllib3/contrib/pyopenssl.py) (1 samples, 0.12%)</title><rect x="28" y="900" width="1" height="15" fill="rgb(243,141,27)"/><text x="31.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="916" width="1" height="15" fill="rgb(234,95,47)"/><text x="31.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="932" width="1" height="15" fill="rgb(224,108,1)"/><text x="31.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="948" width="1" height="15" fill="rgb(243,221,3)"/><text x="31.00" y="958.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="964" width="1" height="15" fill="rgb(225,53,22)"/><text x="31.00" y="974.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="980" width="1" height="15" fill="rgb(208,32,54)"/><text x="31.00" y="990.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="996" width="1" height="15" fill="rgb(224,226,45)"/><text x="31.00" y="1006.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="28" y="1012" width="1" height="15" fill="rgb(211,149,28)"/><text x="31.00" y="1022.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1028" width="1" height="15" fill="rgb(246,39,49)"/><text x="31.00" y="1038.50"></text></g><g><title>&lt;module&gt; (OpenSSL/__init__.py) (1 samples, 0.12%)</title><rect x="28" y="1044" width="1" height="15" fill="rgb(245,58,14)"/><text x="31.00" y="1054.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1060" width="1" height="15" fill="rgb(223,74,43)"/><text x="31.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1076" width="1" height="15" fill="rgb(211,174,47)"/><text x="31.00" y="1086.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1092" width="1" height="15" fill="rgb(211,17,16)"/><text x="31.00" y="1102.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1108" width="1" height="15" fill="rgb(249,155,0)"/><text x="31.00" y="1118.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1124" width="1" height="15" fill="rgb(228,1,5)"/><text x="31.00" y="1134.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="28" y="1140" width="1" height="15" fill="rgb(221,108,22)"/><text x="31.00" y="1150.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1156" width="1" height="15" fill="rgb(252,3,16)"/><text x="31.00" y="1166.50"></text></g><g><title>&lt;module&gt; (OpenSSL/crypto.py) (1 samples, 0.12%)</title><rect x="28" y="1172" width="1" height="15" fill="rgb(236,93,31)"/><text x="31.00" y="1182.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1188" width="1" height="15" fill="rgb(252,109,40)"/><text x="31.00" y="1198.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1204" width="1" height="15" fill="rgb(215,139,22)"/><text x="31.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1220" width="1" height="15" fill="rgb(222,121,49)"/><text x="31.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1236" width="1" height="15" fill="rgb(240,195,8)"/><text x="31.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1252" width="1" height="15" fill="rgb(208,214,38)"/><text x="31.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="28" y="1268" width="1" height="15" fill="rgb(219,178,46)"/><text x="31.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1284" width="1" height="15" fill="rgb(251,75,14)"/><text x="31.00" y="1294.50"></text></g><g><title>&lt;module&gt; (cryptography/x509/__init__.py) (1 samples, 0.12%)</title><rect x="28" y="1300" width="1" height="15" fill="rgb(210,176,22)"/><text x="31.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1316" width="1" height="15" fill="rgb(248,107,45)"/><text x="31.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1332" width="1" height="15" fill="rgb(254,160,12)"/><text x="31.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1348" width="1" height="15" fill="rgb(248,172,21)"/><text x="31.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="28" y="1364" width="1" height="15" fill="rgb(213,119,25)"/><text x="31.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1380" width="1" height="15" fill="rgb(213,27,54)"/><text x="31.00" y="1390.50"></text></g><g><title>&lt;module&gt; (cryptography/x509/base.py) (1 samples, 0.12%)</title><rect x="28" y="1396" width="1" height="15" fill="rgb(233,24,32)"/><text x="31.00" y="1406.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1412" width="1" height="15" fill="rgb(235,28,34)"/><text x="31.00" y="1422.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1428" width="1" height="15" fill="rgb(209,106,42)"/><text x="31.00" y="1438.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1444" width="1" height="15" fill="rgb(206,127,49)"/><text x="31.00" y="1454.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1460" width="1" height="15" fill="rgb(217,9,7)"/><text x="31.00" y="1470.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1476" width="1" height="15" fill="rgb(245,155,45)"/><text x="31.00" y="1486.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="28" y="1492" width="1" height="15" fill="rgb(225,136,30)"/><text x="31.00" y="1502.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1508" width="1" height="15" fill="rgb(215,83,45)"/><text x="31.00" y="1518.50"></text></g><g><title>&lt;module&gt; (cryptography/hazmat/primitives/asymmetric/ed25519.py) (1 samples, 0.12%)</title><rect x="28" y="1524" width="1" height="15" fill="rgb(246,7,43)"/><text x="31.00" y="1534.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1540" width="1" height="15" fill="rgb(228,48,30)"/><text x="31.00" y="1550.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1556" width="1" height="15" fill="rgb(252,140,30)"/><text x="31.00" y="1566.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1572" width="1" height="15" fill="rgb(234,95,38)"/><text x="31.00" y="1582.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="28" y="1588" width="1" height="15" fill="rgb(244,1,46)"/><text x="31.00" y="1598.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="28" y="1604" width="1" height="15" fill="rgb(223,64,10)"/><text x="31.00" y="1614.50"></text></g><g><title>&lt;module&gt; (cryptography/exceptions.py) (1 samples, 0.12%)</title><rect x="28" y="1620" width="1" height="15" fill="rgb(235,214,8)"/><text x="31.00" y="1630.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (15 samples, 1.79%)</title><rect x="10" y="68" width="21" height="15" fill="rgb(208,84,16)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 1.79%)</title><rect x="10" y="84" width="21" height="15" fill="rgb(226,124,21)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 1.79%)</title><rect x="10" y="100" width="21" height="15" fill="rgb(243,223,35)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (15 samples, 1.79%)</title><rect x="10" y="116" width="21" height="15" fill="rgb(226,175,39)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (15 samples, 1.79%)</title><rect x="10" y="132" width="21" height="15" fill="rgb(226,132,42)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_64_n_estimators5.py) (15 samples, 1.79%)</title><rect x="10" y="148" width="21" height="15" fill="rgb(210,103,16)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (15 samples, 1.79%)</title><rect x="10" y="164" width="21" height="15" fill="rgb(209,39,37)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 1.79%)</title><rect x="10" y="180" width="21" height="15" fill="rgb(239,194,29)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 1.31%)</title><rect x="15" y="196" width="16" height="15" fill="rgb(242,143,2)"/><text x="18.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (11 samples, 1.31%)</title><rect x="15" y="212" width="16" height="15" fill="rgb(210,163,12)"/><text x="18.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 1.31%)</title><rect x="15" y="228" width="16" height="15" fill="rgb(246,122,17)"/><text x="18.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py) (1 samples, 0.12%)</title><rect x="29" y="244" width="2" height="15" fill="rgb(205,112,26)"/><text x="32.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="260" width="2" height="15" fill="rgb(248,17,30)"/><text x="32.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="276" width="2" height="15" fill="rgb(252,30,29)"/><text x="32.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="292" width="2" height="15" fill="rgb(224,0,7)"/><text x="32.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="308" width="2" height="15" fill="rgb(206,198,18)"/><text x="32.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="324" width="2" height="15" fill="rgb(232,204,41)"/><text x="32.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="29" y="340" width="2" height="15" fill="rgb(246,132,40)"/><text x="32.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="356" width="2" height="15" fill="rgb(237,167,48)"/><text x="32.00" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/core/__init__.py) (1 samples, 0.12%)</title><rect x="29" y="372" width="2" height="15" fill="rgb(228,151,54)"/><text x="32.00" y="382.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="388" width="2" height="15" fill="rgb(230,84,43)"/><text x="32.00" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="404" width="2" height="15" fill="rgb(220,30,34)"/><text x="32.00" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="420" width="2" height="15" fill="rgb(252,129,6)"/><text x="32.00" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="436" width="2" height="15" fill="rgb(232,65,7)"/><text x="32.00" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="452" width="2" height="15" fill="rgb(206,169,1)"/><text x="32.00" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.12%)</title><rect x="29" y="468" width="2" height="15" fill="rgb(224,15,1)"/><text x="32.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="29" y="484" width="2" height="15" fill="rgb(227,27,1)"/><text x="32.00" y="494.50"></text></g><g><title>&lt;module&gt; (numpy/core/multiarray.py) (1 samples, 0.12%)</title><rect x="29" y="500" width="2" height="15" fill="rgb(251,40,29)"/><text x="32.00" y="510.50"></text></g><g><title>decorator (numpy/core/overrides.py) (1 samples, 0.12%)</title><rect x="29" y="516" width="2" height="15" fill="rgb(233,20,21)"/><text x="32.00" y="526.50"></text></g><g><title>decorator (numpy/core/overrides.py) (1 samples, 0.12%)</title><rect x="29" y="532" width="2" height="15" fill="rgb(245,80,41)"/><text x="32.00" y="542.50"></text></g><g><title>dedent (textwrap.py) (1 samples, 0.12%)</title><rect x="29" y="548" width="2" height="15" fill="rgb(229,128,42)"/><text x="32.00" y="558.50"></text></g><g><title>sub (re.py) (1 samples, 0.12%)</title><rect x="29" y="564" width="2" height="15" fill="rgb(229,121,5)"/><text x="32.00" y="574.50"></text></g><g><title>_compile (re.py) (1 samples, 0.12%)</title><rect x="29" y="580" width="2" height="15" fill="rgb(211,142,45)"/><text x="32.00" y="590.50"></text></g><g><title>profile0_skl (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (1 samples, 0.12%)</title><rect x="31" y="68" width="1" height="15" fill="rgb(249,177,10)"/><text x="34.00" y="78.50"></text></g><g><title>setup_profile0 (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (1 samples, 0.12%)</title><rect x="31" y="84" width="1" height="15" fill="rgb(236,155,45)"/><text x="34.00" y="94.50"></text></g><g><title>profile0 (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (1 samples, 0.12%)</title><rect x="31" y="100" width="1" height="15" fill="rgb(220,215,49)"/><text x="34.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.12%)</title><rect x="31" y="116" width="1" height="15" fill="rgb(246,22,5)"/><text x="34.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.12%)</title><rect x="31" y="132" width="1" height="15" fill="rgb(248,19,50)"/><text x="34.00" y="142.50"></text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.12%)</title><rect x="31" y="148" width="1" height="15" fill="rgb(215,200,36)"/><text x="34.00" y="158.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.12%)</title><rect x="31" y="164" width="1" height="15" fill="rgb(241,167,5)"/><text x="34.00" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.12%)</title><rect x="31" y="180" width="1" height="15" fill="rgb(207,14,20)"/><text x="34.00" y="190.50"></text></g><g><title>predict (sklearn/tree/_classes.py) (1 samples, 0.12%)</title><rect x="31" y="196" width="1" height="15" fill="rgb(250,2,40)"/><text x="34.00" y="206.50"></text></g><g><title>0x7f9006e1fd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="31" y="212" width="1" height="15" fill="rgb(225,169,20)"/><text x="34.00" y="222.50"></text></g><g><title>0x7f9006e1efa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="31" y="228" width="1" height="15" fill="rgb(239,85,0)"/><text x="34.00" y="238.50"></text></g><g><title>0x7f9006e2e405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="31" y="244" width="1" height="15" fill="rgb(246,153,34)"/><text x="34.00" y="254.50"></text></g><g><title>0x7f9006e2d6e2 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="31" y="260" width="1" height="15" fill="rgb(217,187,49)"/><text x="34.00" y="270.50"></text></g><g><title>0x7f8fed419ff9 (?) (1 samples, 0.12%)</title><rect x="32" y="212" width="1" height="15" fill="rgb(213,30,36)"/><text x="35.00" y="222.50"></text></g><g><title>0x7f8fed414ef6 (?) (1 samples, 0.12%)</title><rect x="32" y="228" width="1" height="15" fill="rgb(212,80,12)"/><text x="35.00" y="238.50"></text></g><g><title>0x7f8fed409962 (?) (1 samples, 0.12%)</title><rect x="32" y="244" width="1" height="15" fill="rgb(221,45,38)"/><text x="35.00" y="254.50"></text></g><g><title>0x7f8fed43d7a7 (?) (1 samples, 0.12%)</title><rect x="32" y="260" width="1" height="15" fill="rgb(217,106,37)"/><text x="35.00" y="270.50"></text></g><g><title>0x7f8fed43d379 (?) (1 samples, 0.12%)</title><rect x="32" y="276" width="1" height="15" fill="rgb(243,176,46)"/><text x="35.00" y="286.50"></text></g><g><title>0x7f8fed89b8b8 (?) (1 samples, 0.12%)</title><rect x="32" y="292" width="1" height="15" fill="rgb(243,124,26)"/><text x="35.00" y="302.50"></text></g><g><title>0x7f8fed899c7f (?) (1 samples, 0.12%)</title><rect x="32" y="308" width="1" height="15" fill="rgb(214,5,33)"/><text x="35.00" y="318.50"></text></g><g><title>0x7f8fed8ac99c (?) (1 samples, 0.12%)</title><rect x="32" y="324" width="1" height="15" fill="rgb(209,69,30)"/><text x="35.00" y="334.50"></text></g><g><title>0x7f8fed564e79 (?) (1 samples, 0.12%)</title><rect x="32" y="340" width="1" height="15" fill="rgb(223,224,49)"/><text x="35.00" y="350.50"></text></g><g><title>0x7f8fed56360d (?) (1 samples, 0.12%)</title><rect x="32" y="356" width="1" height="15" fill="rgb(248,105,19)"/><text x="35.00" y="366.50"></text></g><g><title>0x7f8fed5600ff (?) (1 samples, 0.12%)</title><rect x="32" y="372" width="1" height="15" fill="rgb(205,164,12)"/><text x="35.00" y="382.50"></text></g><g><title>0x7f8fed55ec72 (?) (1 samples, 0.12%)</title><rect x="32" y="388" width="1" height="15" fill="rgb(210,81,18)"/><text x="35.00" y="398.50"></text></g><g><title>0x7f902d3dba38 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="32" y="404" width="1" height="15" fill="rgb(228,188,44)"/><text x="35.00" y="414.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py) (1 samples, 0.12%)</title><rect x="33" y="212" width="2" height="15" fill="rgb(233,213,53)"/><text x="36.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="33" y="228" width="2" height="15" fill="rgb(218,94,46)"/><text x="36.00" y="238.50"></text></g><g><title>onnxruntime::FeedsFetchesInfo::FeedsFetchesInfo (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="36" y="292" width="2" height="15" fill="rgb(252,68,21)"/><text x="39.00" y="302.50"></text></g><g><title>onnxruntime::FeedsFetchesInfo::SetMLValueIdxs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="36" y="308" width="2" height="15" fill="rgb(242,163,37)"/><text x="39.00" y="318.50"></text></g><g><title>onnxruntime::FeedsFetchesInfo::MapNamesToMLValueIdxs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="36" y="324" width="2" height="15" fill="rgb(246,229,43)"/><text x="39.00" y="334.50"></text></g><g><title>onnxruntime::ArgMin&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.60%)</title><rect x="38" y="340" width="7" height="15" fill="rgb(240,150,33)"/><text x="41.00" y="350.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.36%)</title><rect x="40" y="356" width="5" height="15" fill="rgb(209,211,2)"/><text x="43.00" y="366.50"></text></g><g><title>0x7f902d3fbdbf (libc-2.29.so) (1 samples, 0.12%)</title><rect x="49" y="372" width="1" height="15" fill="rgb(223,89,23)"/><text x="52.00" y="382.50"></text></g><g><title>0x7f902d3fbdc3 (libc-2.29.so) (2 samples, 0.24%)</title><rect x="50" y="372" width="3" height="15" fill="rgb(224,173,26)"/><text x="53.00" y="382.50"></text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.95%)</title><rect x="45" y="356" width="11" height="15" fill="rgb(242,2,48)"/><text x="48.00" y="366.50"></text></g><g><title>0x7f902d3fbdc9 (libc-2.29.so) (2 samples, 0.24%)</title><rect x="53" y="372" width="3" height="15" fill="rgb(224,76,40)"/><text x="56.00" y="382.50"></text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.07%)</title><rect x="45" y="340" width="12" height="15" fill="rgb(237,8,43)"/><text x="48.00" y="350.50"></text></g><g><title>onnxruntime::ConcatBase::PrepareForCompute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="56" y="356" width="1" height="15" fill="rgb(216,220,28)"/><text x="59.00" y="366.50"></text></g><g><title>operator delete (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="56" y="372" width="1" height="15" fill="rgb(254,52,54)"/><text x="59.00" y="382.50"></text></g><g><title>(anonymous namespace)::CopySlices&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="57" y="356" width="2" height="15" fill="rgb(230,157,8)"/><text x="60.00" y="366.50"></text></g><g><title>(anonymous namespace)::SumSlices&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.95%)</title><rect x="59" y="356" width="11" height="15" fill="rgb(246,175,13)"/><text x="62.00" y="366.50"></text></g><g><title>onnxruntime::CumSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 1.19%)</title><rect x="57" y="340" width="14" height="15" fill="rgb(244,77,23)"/><text x="60.00" y="350.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector [clone .constprop.161] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="70" y="356" width="1" height="15" fill="rgb(245,121,31)"/><text x="73.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="70" y="372" width="1" height="15" fill="rgb(241,162,14)"/><text x="73.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="70" y="388" width="1" height="15" fill="rgb(241,44,0)"/><text x="73.00" y="398.50"></text></g><g><title>0x7f902d3dd2f8 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="70" y="404" width="1" height="15" fill="rgb(224,199,7)"/><text x="73.00" y="414.50"></text></g><g><title>0x7f902d3fbdbf (libc-2.29.so) (1 samples, 0.12%)</title><rect x="74" y="356" width="2" height="15" fill="rgb(209,193,8)"/><text x="77.00" y="366.50"></text></g><g><title>onnxruntime::GatherElements::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.60%)</title><rect x="71" y="340" width="7" height="15" fill="rgb(215,75,18)"/><text x="74.00" y="350.50"></text></g><g><title>onnxruntime::parse_and_validate_indices_tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="76" y="356" width="2" height="15" fill="rgb(222,126,44)"/><text x="79.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="78" y="340" width="2" height="15" fill="rgb(214,85,6)"/><text x="81.00" y="350.50"></text></g><g><title>onnxruntime::Less&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="80" y="340" width="3" height="15" fill="rgb(234,8,33)"/><text x="83.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, bool, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="80" y="356" width="3" height="15" fill="rgb(208,53,48)"/><text x="83.00" y="366.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="81" y="372" width="2" height="15" fill="rgb(222,200,11)"/><text x="84.00" y="382.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.71%)</title><rect x="83" y="372" width="8" height="15" fill="rgb(234,155,2)"/><text x="86.00" y="382.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.36%)</title><rect x="87" y="388" width="4" height="15" fill="rgb(233,136,6)"/><text x="90.00" y="398.50"></text></g><g><title>onnxruntime::Mul&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.83%)</title><rect x="83" y="340" width="9" height="15" fill="rgb(224,109,1)"/><text x="86.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.83%)</title><rect x="83" y="356" width="9" height="15" fill="rgb(249,201,2)"/><text x="86.00" y="366.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="91" y="372" width="1" height="15" fill="rgb(243,135,27)"/><text x="94.00" y="382.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="91" y="388" width="1" height="15" fill="rgb(213,48,4)"/><text x="94.00" y="398.50"></text></g><g><title>0x7f902d5ade25 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="116" y="388" width="2" height="15" fill="rgb(226,88,22)"/><text x="119.00" y="398.50"></text></g><g><title>0x7f902d5ade61 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="118" y="388" width="1" height="15" fill="rgb(207,80,9)"/><text x="121.00" y="398.50"></text></g><g><title>0x7f902d5adef6 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="119" y="388" width="1" height="15" fill="rgb(215,10,22)"/><text x="122.00" y="398.50"></text></g><g><title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, long, std::pair&lt;float, long&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::GreaterValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.95%)</title><rect x="120" y="388" width="12" height="15" fill="rgb(212,174,38)"/><text x="123.00" y="398.50"></text></g><g><title>0x7f902d3db945 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="151" y="404" width="2" height="15" fill="rgb(252,192,20)"/><text x="154.00" y="414.50"></text></g><g><title>0x7f902d3dba4c (libc-2.29.so) (1 samples, 0.12%)</title><rect x="153" y="404" width="1" height="15" fill="rgb(225,207,23)"/><text x="156.00" y="414.50"></text></g><g><title>0x7f902d3dbbd4 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="154" y="404" width="2" height="15" fill="rgb(205,38,53)"/><text x="157.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.12%)</title><rect x="156" y="404" width="1" height="15" fill="rgb(205,163,16)"/><text x="159.00" y="414.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (55 samples, 6.55%)</title><rect x="92" y="340" width="78" height="15" fill="rgb(240,180,53)"/><text x="95.00" y="350.50">onnxrunti..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (55 samples, 6.55%)</title><rect x="92" y="356" width="78" height="15" fill="rgb(227,104,25)"/><text x="95.00" y="366.50">onnxrunti..</text></g><g><title>onnxruntime::extract_top_k_elements&lt;true, true, onnxruntime::GreaterValueCmp&lt;float&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (55 samples, 6.55%)</title><rect x="92" y="372" width="78" height="15" fill="rgb(236,74,35)"/><text x="95.00" y="382.50">onnxrunti..</text></g><g><title>std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt;::_M_emplace_back_aux&lt;std::pair&lt;float, long&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 3.21%)</title><rect x="132" y="388" width="38" height="15" fill="rgb(229,88,51)"/><text x="135.00" y="398.50">std..</text></g><g><title>operator new (libstdc++.so.6.0.28) (9 samples, 1.07%)</title><rect x="157" y="404" width="13" height="15" fill="rgb(247,35,35)"/><text x="160.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.83%)</title><rect x="160" y="420" width="10" height="15" fill="rgb(238,139,50)"/><text x="163.00" y="430.50"></text></g><g><title>onnxruntime::ml::ArrayFeatureExtractorOp&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="170" y="340" width="2" height="15" fill="rgb(214,178,32)"/><text x="173.00" y="350.50"></text></g><g><title>0x7f901cea87a0 (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="192" y="356" width="2" height="15" fill="rgb(228,43,45)"/><text x="195.00" y="366.50"></text></g><g><title>0x7f902d3db900 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="194" y="356" width="1" height="15" fill="rgb(208,105,40)"/><text x="197.00" y="366.50"></text></g><g><title>0x7f902d3db904 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="195" y="356" width="1" height="15" fill="rgb(238,210,35)"/><text x="198.00" y="366.50"></text></g><g><title>0x7f902d3db906 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="196" y="356" width="2" height="15" fill="rgb(232,157,39)"/><text x="199.00" y="366.50"></text></g><g><title>0x7f902d3db91c (libc-2.29.so) (1 samples, 0.12%)</title><rect x="198" y="356" width="1" height="15" fill="rgb(242,110,39)"/><text x="201.00" y="366.50"></text></g><g><title>0x7f902d3db929 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="199" y="356" width="2" height="15" fill="rgb(253,50,15)"/><text x="202.00" y="366.50"></text></g><g><title>0x7f902d3db92f (libc-2.29.so) (1 samples, 0.12%)</title><rect x="201" y="356" width="1" height="15" fill="rgb(219,121,4)"/><text x="204.00" y="366.50"></text></g><g><title>0x7f902d3db945 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="202" y="356" width="1" height="15" fill="rgb(219,202,16)"/><text x="205.00" y="366.50"></text></g><g><title>0x7f902d3db95e (libc-2.29.so) (1 samples, 0.12%)</title><rect x="203" y="356" width="2" height="15" fill="rgb(214,114,31)"/><text x="206.00" y="366.50"></text></g><g><title>0x7f902d3db965 (libc-2.29.so) (4 samples, 0.48%)</title><rect x="205" y="356" width="5" height="15" fill="rgb(237,69,15)"/><text x="208.00" y="366.50"></text></g><g><title>0x7f902d3db96a (libc-2.29.so) (1 samples, 0.12%)</title><rect x="210" y="356" width="2" height="15" fill="rgb(250,127,22)"/><text x="213.00" y="366.50"></text></g><g><title>0x7f902d3db97c (libc-2.29.so) (1 samples, 0.12%)</title><rect x="212" y="356" width="1" height="15" fill="rgb(234,161,50)"/><text x="215.00" y="366.50"></text></g><g><title>0x7f902d3db982 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="213" y="356" width="2" height="15" fill="rgb(246,163,22)"/><text x="216.00" y="366.50"></text></g><g><title>0x7f902d3db991 (libc-2.29.so) (4 samples, 0.48%)</title><rect x="215" y="356" width="5" height="15" fill="rgb(230,89,26)"/><text x="218.00" y="366.50"></text></g><g><title>0x7f902d3db998 (libc-2.29.so) (4 samples, 0.48%)</title><rect x="220" y="356" width="6" height="15" fill="rgb(239,142,31)"/><text x="223.00" y="366.50"></text></g><g><title>0x7f902d3dba41 (libc-2.29.so) (2 samples, 0.24%)</title><rect x="226" y="356" width="3" height="15" fill="rgb(232,71,39)"/><text x="229.00" y="366.50"></text></g><g><title>0x7f902d3dba4c (libc-2.29.so) (1 samples, 0.12%)</title><rect x="229" y="356" width="1" height="15" fill="rgb(207,189,42)"/><text x="232.00" y="366.50"></text></g><g><title>0x7f902d3dba4d (libc-2.29.so) (1 samples, 0.12%)</title><rect x="230" y="356" width="1" height="15" fill="rgb(224,122,13)"/><text x="233.00" y="366.50"></text></g><g><title>0x7f902d3dba55 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="231" y="356" width="2" height="15" fill="rgb(220,38,2)"/><text x="234.00" y="366.50"></text></g><g><title>0x7f902d3dbbc0 (libc-2.29.so) (3 samples, 0.36%)</title><rect x="233" y="356" width="4" height="15" fill="rgb(243,169,19)"/><text x="236.00" y="366.50"></text></g><g><title>0x7f902d3dbbd8 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="237" y="356" width="1" height="15" fill="rgb(252,121,27)"/><text x="240.00" y="366.50"></text></g><g><title>0x7f902d3dbbe4 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="238" y="356" width="2" height="15" fill="rgb(233,162,35)"/><text x="241.00" y="366.50"></text></g><g><title>0x7f902d3dbbe8 (libc-2.29.so) (4 samples, 0.48%)</title><rect x="240" y="356" width="5" height="15" fill="rgb(224,33,44)"/><text x="243.00" y="366.50"></text></g><g><title>0x7f902d3fc12f (libc-2.29.so) (2 samples, 0.24%)</title><rect x="245" y="356" width="3" height="15" fill="rgb(219,200,46)"/><text x="248.00" y="366.50"></text></g><g><title>free (libc-2.29.so) (7 samples, 0.83%)</title><rect x="248" y="356" width="10" height="15" fill="rgb(240,78,54)"/><text x="251.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="258" y="356" width="3" height="15" fill="rgb(205,23,7)"/><text x="261.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="258" y="372" width="3" height="15" fill="rgb(214,213,50)"/><text x="261.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="258" y="388" width="3" height="15" fill="rgb(211,83,52)"/><text x="261.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="258" y="404" width="3" height="15" fill="rgb(205,229,53)"/><text x="261.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="258" y="420" width="3" height="15" fill="rgb(240,43,7)"/><text x="261.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="258" y="436" width="3" height="15" fill="rgb(252,206,27)"/><text x="261.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="260" y="452" width="1" height="15" fill="rgb(253,74,2)"/><text x="263.00" y="462.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="260" y="468" width="1" height="15" fill="rgb(231,164,44)"/><text x="263.00" y="478.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="260" y="484" width="1" height="15" fill="rgb(220,109,18)"/><text x="263.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::operator= (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="260" y="500" width="1" height="15" fill="rgb(232,68,14)"/><text x="263.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="260" y="516" width="1" height="15" fill="rgb(206,190,22)"/><text x="263.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="260" y="532" width="1" height="15" fill="rgb(239,54,9)"/><text x="263.00" y="542.50"></text></g><g><title>0x7f901cea7d50 (libstdc++.so.6.0.28) (2 samples, 0.24%)</title><rect x="375" y="404" width="3" height="15" fill="rgb(229,72,3)"/><text x="378.00" y="414.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (7 samples, 0.83%)</title><rect x="373" y="388" width="10" height="15" fill="rgb(236,166,1)"/><text x="376.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.48%)</title><rect x="378" y="404" width="5" height="15" fill="rgb(235,77,12)"/><text x="381.00" y="414.50"></text></g><g><title>0x7f902d3fc120 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="397" y="420" width="2" height="15" fill="rgb(247,151,30)"/><text x="400.00" y="430.50"></text></g><g><title>0x7f901cea7d50 (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="400" y="436" width="1" height="15" fill="rgb(230,162,49)"/><text x="403.00" y="446.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.07%)</title><rect x="392" y="404" width="12" height="15" fill="rgb(206,57,19)"/><text x="395.00" y="414.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.48%)</title><rect x="399" y="420" width="5" height="15" fill="rgb(253,229,33)"/><text x="402.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.24%)</title><rect x="401" y="436" width="3" height="15" fill="rgb(215,165,26)"/><text x="404.00" y="446.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 18.45%)</title><rect x="261" y="356" width="218" height="15" fill="rgb(242,141,32)"/><text x="264.00" y="366.50">onnxruntime::ml::TreeEnsembl..</text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;long, std::tuple&lt;float, float, float&gt; &gt;&amp;&gt; [clone .isra.301] (onnxruntime/capi/onnxruntime_pybind11_state.so) (84 samples, 10.00%)</title><rect x="361" y="372" width="118" height="15" fill="rgb(208,130,33)"/><text x="364.00" y="382.50">std::_Hashtabl..</text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 8.10%)</title><rect x="383" y="388" width="96" height="15" fill="rgb(228,24,37)"/><text x="386.00" y="398.50">std::_Hasht..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (libstdc++.so.6.0.28) (53 samples, 6.31%)</title><rect x="404" y="404" width="75" height="15" fill="rgb(207,159,40)"/><text x="407.00" y="414.50">std::__d..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (libstdc++.so.6.0.28) (29 samples, 3.45%)</title><rect x="438" y="420" width="41" height="15" fill="rgb(209,214,8)"/><text x="441.00" y="430.50">std..</text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.60%)</title><rect x="479" y="356" width="7" height="15" fill="rgb(248,26,36)"/><text x="482.00" y="366.50"></text></g><g><title>0x7f902d3fbdc9 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="484" y="372" width="2" height="15" fill="rgb(242,158,37)"/><text x="487.00" y="382.50"></text></g><g><title>std::__detail::_Map_base&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 2.02%)</title><rect x="486" y="356" width="24" height="15" fill="rgb(242,11,20)"/><text x="489.00" y="366.50">s..</text></g><g><title>0x7f901cea7d50 (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="515" y="388" width="2" height="15" fill="rgb(242,38,47)"/><text x="518.00" y="398.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (345 samples, 41.07%)</title><rect x="36" y="260" width="485" height="15" fill="rgb(221,35,34)"/><text x="39.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_p..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (345 samples, 41.07%)</title><rect x="36" y="276" width="485" height="15" fill="rgb(254,32,30)"/><text x="39.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_p..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (344 samples, 40.95%)</title><rect x="38" y="292" width="483" height="15" fill="rgb(242,25,33)"/><text x="41.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pyb..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (344 samples, 40.95%)</title><rect x="38" y="308" width="483" height="15" fill="rgb(250,3,47)"/><text x="41.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (344 samples, 40.95%)</title><rect x="38" y="324" width="483" height="15" fill="rgb(230,205,11)"/><text x="41.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxrun..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (248 samples, 29.52%)</title><rect x="172" y="340" width="349" height="15" fill="rgb(221,84,15)"/><text x="175.00" y="350.50">onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.95%)</title><rect x="510" y="356" width="11" height="15" fill="rgb(207,35,7)"/><text x="513.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (5 samples, 0.60%)</title><rect x="514" y="372" width="7" height="15" fill="rgb(205,157,43)"/><text x="517.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.36%)</title><rect x="517" y="388" width="4" height="15" fill="rgb(249,219,4)"/><text x="520.00" y="398.50"></text></g><g><title>profile_ort (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (349 samples, 41.55%)</title><rect x="32" y="68" width="490" height="15" fill="rgb(231,190,48)"/><text x="35.00" y="78.50">profile_ort (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (349 samples, 41.55%)</title><rect x="32" y="84" width="490" height="15" fill="rgb(254,65,11)"/><text x="35.00" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimator..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (349 samples, 41.55%)</title><rect x="32" y="100" width="490" height="15" fill="rgb(216,24,17)"/><text x="35.00" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_100..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (349 samples, 41.55%)</title><rect x="32" y="116" width="490" height="15" fill="rgb(232,116,48)"/><text x="35.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (349 samples, 41.55%)</title><rect x="32" y="132" width="490" height="15" fill="rgb(226,119,17)"/><text x="35.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (349 samples, 41.55%)</title><rect x="32" y="148" width="490" height="15" fill="rgb(230,126,44)"/><text x="35.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (349 samples, 41.55%)</title><rect x="32" y="164" width="490" height="15" fill="rgb(232,117,7)"/><text x="35.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (349 samples, 41.55%)</title><rect x="32" y="180" width="490" height="15" fill="rgb(246,23,10)"/><text x="35.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (349 samples, 41.55%)</title><rect x="32" y="196" width="490" height="15" fill="rgb(222,5,9)"/><text x="35.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (347 samples, 41.31%)</title><rect x="35" y="212" width="487" height="15" fill="rgb(232,76,7)"/><text x="38.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_p..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (347 samples, 41.31%)</title><rect x="35" y="228" width="487" height="15" fill="rgb(246,156,24)"/><text x="38.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addOb..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (346 samples, 41.19%)</title><rect x="36" y="244" width="486" height="15" fill="rgb(229,65,17)"/><text x="39.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="521" y="260" width="1" height="15" fill="rgb(239,207,6)"/><text x="524.00" y="270.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="521" y="276" width="1" height="15" fill="rgb(218,143,18)"/><text x="524.00" y="286.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.24%)</title><rect x="533" y="180" width="3" height="15" fill="rgb(221,110,27)"/><text x="536.00" y="190.50"></text></g><g><title>LONG_getitem (arraytypes.c.src) (4 samples, 0.48%)</title><rect x="566" y="260" width="5" height="15" fill="rgb(244,9,23)"/><text x="569.00" y="270.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="571" y="260" width="2" height="15" fill="rgb(251,149,8)"/><text x="574.00" y="270.50"></text></g><g><title>0x7f902d3fc103 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="571" y="276" width="2" height="15" fill="rgb(220,49,43)"/><text x="574.00" y="286.50"></text></g><g><title>PyArray_ToList (convert.c) (8 samples, 0.95%)</title><rect x="566" y="228" width="11" height="15" fill="rgb(211,56,4)"/><text x="569.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c) (8 samples, 0.95%)</title><rect x="566" y="244" width="11" height="15" fill="rgb(224,210,48)"/><text x="569.00" y="254.50"></text></g><g><title>recursive_tolist (convert.c) (3 samples, 0.36%)</title><rect x="573" y="260" width="4" height="15" fill="rgb(222,84,51)"/><text x="576.00" y="270.50"></text></g><g><title>PyArray_GETITEM (ndarraytypes.h) (1 samples, 0.12%)</title><rect x="576" y="276" width="1" height="15" fill="rgb(230,225,18)"/><text x="579.00" y="286.50"></text></g><g><title>array_reshape (methods.c) (1 samples, 0.12%)</title><rect x="577" y="228" width="1" height="15" fill="rgb(208,35,52)"/><text x="580.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c) (1 samples, 0.12%)</title><rect x="578" y="244" width="2" height="15" fill="rgb(222,119,38)"/><text x="581.00" y="254.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.12%)</title><rect x="581" y="260" width="2" height="15" fill="rgb(215,104,22)"/><text x="584.00" y="270.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (3 samples, 0.36%)</title><rect x="580" y="244" width="4" height="15" fill="rgb(249,88,13)"/><text x="583.00" y="254.50"></text></g><g><title>check_and_adjust_index (common.h) (1 samples, 0.12%)</title><rect x="583" y="260" width="1" height="15" fill="rgb(253,73,32)"/><text x="586.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (29 samples, 3.45%)</title><rect x="584" y="276" width="41" height="15" fill="rgb(244,206,3)"/><text x="587.00" y="286.50">PyA..</text></g><g><title>setArrayFromSequence (ctors.c) (29 samples, 3.45%)</title><rect x="584" y="292" width="41" height="15" fill="rgb(239,181,8)"/><text x="587.00" y="302.50">set..</text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (26 samples, 3.10%)</title><rect x="588" y="308" width="37" height="15" fill="rgb(229,68,50)"/><text x="591.00" y="318.50">PyA..</text></g><g><title>LONG_setitem (arraytypes.c.src) (26 samples, 3.10%)</title><rect x="588" y="324" width="37" height="15" fill="rgb(229,71,27)"/><text x="591.00" y="334.50">LON..</text></g><g><title>MyPyLong_AsLong (arraytypes.c.src) (19 samples, 2.26%)</title><rect x="598" y="340" width="27" height="15" fill="rgb(248,49,9)"/><text x="601.00" y="350.50">M..</text></g><g><title>0x7f902c5fd600 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="623" y="356" width="2" height="15" fill="rgb(241,105,20)"/><text x="626.00" y="366.50"></text></g><g><title>0x7f902c5fe0a0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="637" y="340" width="2" height="15" fill="rgb(233,133,8)"/><text x="640.00" y="350.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (2 samples, 0.24%)</title><rect x="639" y="340" width="3" height="15" fill="rgb(235,190,28)"/><text x="642.00" y="350.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (4 samples, 0.48%)</title><rect x="673" y="356" width="5" height="15" fill="rgb(214,68,54)"/><text x="676.00" y="366.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (39 samples, 4.64%)</title><rect x="626" y="292" width="55" height="15" fill="rgb(228,70,8)"/><text x="629.00" y="302.50">PyArr..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (39 samples, 4.64%)</title><rect x="626" y="308" width="55" height="15" fill="rgb(247,168,10)"/><text x="629.00" y="318.50">PyArr..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (38 samples, 4.52%)</title><rect x="628" y="324" width="53" height="15" fill="rgb(215,193,4)"/><text x="631.00" y="334.50">PyArr..</text></g><g><title>_array_find_python_scalar_type (common.c) (28 samples, 3.33%)</title><rect x="642" y="340" width="39" height="15" fill="rgb(215,205,11)"/><text x="645.00" y="350.50">_ar..</text></g><g><title>PyInt_Check (npy_3kcompat.h) (2 samples, 0.24%)</title><rect x="678" y="356" width="3" height="15" fill="rgb(210,138,30)"/><text x="681.00" y="366.50"></text></g><g><title>_array_find_python_scalar_type (common.c) (2 samples, 0.24%)</title><rect x="681" y="292" width="3" height="15" fill="rgb(218,23,23)"/><text x="684.00" y="302.50"></text></g><g><title>PyInt_Check (npy_3kcompat.h) (1 samples, 0.12%)</title><rect x="682" y="308" width="2" height="15" fill="rgb(229,0,4)"/><text x="685.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (117 samples, 13.93%)</title><rect x="563" y="212" width="164" height="15" fill="rgb(240,215,6)"/><text x="566.00" y="222.50">_run (mlprodict/onnxr..</text></g><g><title>array_subscript (mapping.c) (106 samples, 12.62%)</title><rect x="578" y="228" width="149" height="15" fill="rgb(245,2,10)"/><text x="581.00" y="238.50">array_subscript (ma..</text></g><g><title>prepare_index (mapping.c) (102 samples, 12.14%)</title><rect x="584" y="244" width="143" height="15" fill="rgb(233,66,26)"/><text x="587.00" y="254.50">prepare_index (map..</text></g><g><title>PyArray_FromAny (ctors.c) (102 samples, 12.14%)</title><rect x="584" y="260" width="143" height="15" fill="rgb(246,2,53)"/><text x="587.00" y="270.50">PyArray_FromAny (c..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (73 samples, 8.69%)</title><rect x="625" y="276" width="102" height="15" fill="rgb(244,16,23)"/><text x="628.00" y="286.50">PyArray_GetA..</text></g><g><title>discover_dimensions (ctors.c) (31 samples, 3.69%)</title><rect x="684" y="292" width="43" height="15" fill="rgb(241,222,8)"/><text x="687.00" y="302.50">disc..</text></g><g><title>discover_dimensions (ctors.c) (27 samples, 3.21%)</title><rect x="689" y="308" width="38" height="15" fill="rgb(211,38,0)"/><text x="692.00" y="318.50">dis..</text></g><g><title>0x7f902c5fea40 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.24%)</title><rect x="725" y="324" width="2" height="15" fill="rgb(246,226,21)"/><text x="728.00" y="334.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.12%)</title><rect x="727" y="260" width="2" height="15" fill="rgb(222,209,20)"/><text x="730.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.12%)</title><rect x="727" y="276" width="2" height="15" fill="rgb(254,75,30)"/><text x="730.00" y="286.50"></text></g><g><title>_aligned_contig_cast_bool_to_float (lowlevel_strided_loops.c.src) (1 samples, 0.12%)</title><rect x="727" y="292" width="2" height="15" fill="rgb(227,156,32)"/><text x="730.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (3 samples, 0.36%)</title><rect x="727" y="212" width="5" height="15" fill="rgb(252,48,13)"/><text x="730.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (3 samples, 0.36%)</title><rect x="727" y="228" width="5" height="15" fill="rgb(229,91,37)"/><text x="730.00" y="238.50"></text></g><g><title>array_astype (methods.c) (3 samples, 0.36%)</title><rect x="727" y="244" width="5" height="15" fill="rgb(236,106,9)"/><text x="730.00" y="254.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (2 samples, 0.24%)</title><rect x="729" y="260" width="3" height="15" fill="rgb(241,52,1)"/><text x="732.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.12%)</title><rect x="730" y="276" width="2" height="15" fill="rgb(251,165,10)"/><text x="733.00" y="286.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.12%)</title><rect x="730" y="292" width="2" height="15" fill="rgb(214,136,32)"/><text x="733.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.12%)</title><rect x="730" y="308" width="2" height="15" fill="rgb(223,99,38)"/><text x="733.00" y="318.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.12%)</title><rect x="730" y="324" width="2" height="15" fill="rgb(237,11,0)"/><text x="733.00" y="334.50"></text></g><g><title>FLOAT_add (loops.c.src) (3 samples, 0.36%)</title><rect x="739" y="388" width="4" height="15" fill="rgb(217,75,43)"/><text x="742.00" y="398.50"></text></g><g><title>run_binary_simd_add_FLOAT (simd.inc.src) (2 samples, 0.24%)</title><rect x="740" y="404" width="3" height="15" fill="rgb(252,127,6)"/><text x="743.00" y="414.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cum_sum.py) (9 samples, 1.07%)</title><rect x="732" y="212" width="12" height="15" fill="rgb(240,24,25)"/><text x="735.00" y="222.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;) (8 samples, 0.95%)</title><rect x="733" y="228" width="11" height="15" fill="rgb(215,59,12)"/><text x="736.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 0.95%)</title><rect x="733" y="244" width="11" height="15" fill="rgb(228,156,14)"/><text x="736.00" y="254.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py) (8 samples, 0.95%)</title><rect x="733" y="260" width="11" height="15" fill="rgb(240,137,6)"/><text x="736.00" y="270.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (8 samples, 0.95%)</title><rect x="733" y="276" width="11" height="15" fill="rgb(205,26,14)"/><text x="736.00" y="286.50"></text></g><g><title>array_cumsum (methods.c) (8 samples, 0.95%)</title><rect x="733" y="292" width="11" height="15" fill="rgb(215,101,48)"/><text x="736.00" y="302.50"></text></g><g><title>PyArray_CumSum (calculation.c) (8 samples, 0.95%)</title><rect x="733" y="308" width="11" height="15" fill="rgb(249,71,8)"/><text x="736.00" y="318.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c) (8 samples, 0.95%)</title><rect x="733" y="324" width="11" height="15" fill="rgb(223,2,11)"/><text x="736.00" y="334.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c) (8 samples, 0.95%)</title><rect x="733" y="340" width="11" height="15" fill="rgb(243,157,16)"/><text x="736.00" y="350.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (8 samples, 0.95%)</title><rect x="733" y="356" width="11" height="15" fill="rgb(227,38,8)"/><text x="736.00" y="366.50"></text></g><g><title>PyUFunc_Accumulate (ufunc_object.c) (8 samples, 0.95%)</title><rect x="733" y="372" width="11" height="15" fill="rgb(245,195,47)"/><text x="736.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.12%)</title><rect x="743" y="388" width="1" height="15" fill="rgb(208,1,25)"/><text x="746.00" y="398.50"></text></g><g><title>npyiter_apply_forced_iteration_order (nditer_constr.c) (1 samples, 0.12%)</title><rect x="743" y="404" width="1" height="15" fill="rgb(240,200,34)"/><text x="746.00" y="414.50"></text></g><g><title>_choose_dispatcher (numpy/core/fromnumeric.py) (1 samples, 0.12%)</title><rect x="744" y="260" width="2" height="15" fill="rgb(231,59,9)"/><text x="747.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.12%)</title><rect x="746" y="260" width="1" height="15" fill="rgb(228,159,44)"/><text x="749.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.12%)</title><rect x="746" y="276" width="1" height="15" fill="rgb(210,167,42)"/><text x="749.00" y="286.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.12%)</title><rect x="746" y="292" width="1" height="15" fill="rgb(226,119,30)"/><text x="749.00" y="302.50"></text></g><g><title>0x7f902d3fbdb3 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="762" y="324" width="2" height="15" fill="rgb(245,61,1)"/><text x="765.00" y="334.50"></text></g><g><title>0x7f902d3fbdc3 (libc-2.29.so) (2 samples, 0.24%)</title><rect x="764" y="324" width="3" height="15" fill="rgb(241,52,51)"/><text x="767.00" y="334.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.12%)</title><rect x="767" y="388" width="1" height="15" fill="rgb(220,36,23)"/><text x="770.00" y="398.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c) (1 samples, 0.12%)</title><rect x="767" y="404" width="1" height="15" fill="rgb(226,102,17)"/><text x="770.00" y="414.50"></text></g><g><title>PyArray_GetStridedCopyFn (lowlevel_strided_loops.c.src) (1 samples, 0.12%)</title><rect x="767" y="420" width="1" height="15" fill="rgb(206,83,32)"/><text x="770.00" y="430.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (1 samples, 0.12%)</title><rect x="768" y="388" width="1" height="15" fill="rgb(219,147,29)"/><text x="771.00" y="398.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.12%)</title><rect x="769" y="388" width="2" height="15" fill="rgb(245,130,20)"/><text x="772.00" y="398.50"></text></g><g><title>_aligned_strided_to_contig_size4 (lowlevel_strided_loops.c.src) (1 samples, 0.12%)</title><rect x="771" y="388" width="1" height="15" fill="rgb(226,34,19)"/><text x="774.00" y="398.50"></text></g><g><title>PyArray_NewCopy (convert.c) (5 samples, 0.60%)</title><rect x="767" y="340" width="7" height="15" fill="rgb(253,149,42)"/><text x="770.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (5 samples, 0.60%)</title><rect x="767" y="356" width="7" height="15" fill="rgb(239,52,41)"/><text x="770.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (5 samples, 0.60%)</title><rect x="767" y="372" width="7" height="15" fill="rgb(210,11,46)"/><text x="770.00" y="382.50"></text></g><g><title>_aligned_strided_to_contig_size8 (lowlevel_strided_loops.c.src) (1 samples, 0.12%)</title><rect x="772" y="388" width="2" height="15" fill="rgb(221,109,43)"/><text x="775.00" y="398.50"></text></g><g><title>PyArray_ConvertToCommonType (convert_datatype.c) (6 samples, 0.71%)</title><rect x="767" y="324" width="8" height="15" fill="rgb(218,13,12)"/><text x="770.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.12%)</title><rect x="774" y="340" width="1" height="15" fill="rgb(240,179,45)"/><text x="777.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.12%)</title><rect x="774" y="356" width="1" height="15" fill="rgb(213,142,11)"/><text x="777.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.12%)</title><rect x="774" y="372" width="1" height="15" fill="rgb(239,34,54)"/><text x="777.00" y="382.50"></text></g><g><title>PyArray_MultiIterFromObjects (iterators.c) (2 samples, 0.24%)</title><rect x="775" y="324" width="3" height="15" fill="rgb(221,11,15)"/><text x="778.00" y="334.50"></text></g><g><title>multiiter_new_impl (iterators.c) (2 samples, 0.24%)</title><rect x="775" y="340" width="3" height="15" fill="rgb(208,26,36)"/><text x="778.00" y="350.50"></text></g><g><title>PyArray_Broadcast (iterators.c) (1 samples, 0.12%)</title><rect x="776" y="356" width="2" height="15" fill="rgb(210,206,32)"/><text x="779.00" y="366.50"></text></g><g><title>choose (&lt;__array_function__ internals&gt;) (26 samples, 3.10%)</title><rect x="744" y="228" width="37" height="15" fill="rgb(252,113,16)"/><text x="747.00" y="238.50">cho..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (26 samples, 3.10%)</title><rect x="744" y="244" width="37" height="15" fill="rgb(248,88,23)"/><text x="747.00" y="254.50">arr..</text></g><g><title>choose (numpy/core/fromnumeric.py) (24 samples, 2.86%)</title><rect x="747" y="260" width="34" height="15" fill="rgb(221,18,3)"/><text x="750.00" y="270.50">ch..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (24 samples, 2.86%)</title><rect x="747" y="276" width="34" height="15" fill="rgb(224,3,35)"/><text x="750.00" y="286.50">_w..</text></g><g><title>array_choose (methods.c) (24 samples, 2.86%)</title><rect x="747" y="292" width="34" height="15" fill="rgb(239,216,44)"/><text x="750.00" y="302.50">ar..</text></g><g><title>PyArray_Choose (item_selection.c) (24 samples, 2.86%)</title><rect x="747" y="308" width="34" height="15" fill="rgb(226,58,31)"/><text x="750.00" y="318.50">Py..</text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.24%)</title><rect x="778" y="324" width="3" height="15" fill="rgb(223,161,33)"/><text x="781.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.24%)</title><rect x="778" y="340" width="3" height="15" fill="rgb(232,143,50)"/><text x="781.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.24%)</title><rect x="778" y="356" width="3" height="15" fill="rgb(234,55,37)"/><text x="781.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_gather_elements.py) (27 samples, 3.21%)</title><rect x="744" y="212" width="38" height="15" fill="rgb(235,63,48)"/><text x="747.00" y="222.50">_ru..</text></g><g><title>swapaxes (&lt;__array_function__ internals&gt;) (1 samples, 0.12%)</title><rect x="781" y="228" width="1" height="15" fill="rgb(230,209,32)"/><text x="784.00" y="238.50"></text></g><g><title>FLOAT_less (loops.c.src) (1 samples, 0.12%)</title><rect x="782" y="292" width="2" height="15" fill="rgb(247,169,33)"/><text x="785.00" y="302.50"></text></g><g><title>run_binary_simd_less_FLOAT (simd.inc.src) (1 samples, 0.12%)</title><rect x="782" y="308" width="2" height="15" fill="rgb(206,212,21)"/><text x="785.00" y="318.50"></text></g><g><title>sse2_binary_less_FLOAT (simd.inc.src) (1 samples, 0.12%)</title><rect x="782" y="324" width="2" height="15" fill="rgb(248,87,18)"/><text x="785.00" y="334.50"></text></g><g><title>sse2_compress4_to_byte_FLOAT (simd.inc.src) (1 samples, 0.12%)</title><rect x="782" y="340" width="2" height="15" fill="rgb(236,2,17)"/><text x="785.00" y="350.50"></text></g><g><title>_mm_storeu_si128 (emmintrin.h) (1 samples, 0.12%)</title><rect x="782" y="356" width="2" height="15" fill="rgb(246,142,50)"/><text x="785.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_less.py) (3 samples, 0.36%)</title><rect x="782" y="212" width="4" height="15" fill="rgb(229,187,50)"/><text x="785.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.36%)</title><rect x="782" y="228" width="4" height="15" fill="rgb(209,178,34)"/><text x="785.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.36%)</title><rect x="782" y="244" width="4" height="15" fill="rgb(219,176,7)"/><text x="785.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.36%)</title><rect x="782" y="260" width="4" height="15" fill="rgb(213,55,12)"/><text x="785.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.36%)</title><rect x="782" y="276" width="4" height="15" fill="rgb(223,179,36)"/><text x="785.00" y="286.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (2 samples, 0.24%)</title><rect x="784" y="292" width="2" height="15" fill="rgb(254,158,0)"/><text x="787.00" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (2 samples, 0.24%)</title><rect x="784" y="308" width="2" height="15" fill="rgb(232,71,36)"/><text x="787.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (2 samples, 0.24%)</title><rect x="784" y="324" width="2" height="15" fill="rgb(231,20,4)"/><text x="787.00" y="334.50"></text></g><g><title>_aligned_strided_to_contig_size4_srcstride0 (lowlevel_strided_loops.c.src) (1 samples, 0.12%)</title><rect x="785" y="340" width="1" height="15" fill="rgb(216,10,51)"/><text x="788.00" y="350.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (8 samples, 0.95%)</title><rect x="791" y="340" width="11" height="15" fill="rgb(241,177,14)"/><text x="794.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (8 samples, 0.95%)</title><rect x="791" y="356" width="11" height="15" fill="rgb(220,196,28)"/><text x="794.00" y="366.50"></text></g><g><title>aintroselect_float (selection.c.src) (3 samples, 0.36%)</title><rect x="798" y="372" width="4" height="15" fill="rgb(250,203,5)"/><text x="801.00" y="382.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (1 samples, 0.12%)</title><rect x="800" y="388" width="2" height="15" fill="rgb(227,42,6)"/><text x="803.00" y="398.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (12 samples, 1.43%)</title><rect x="786" y="260" width="17" height="15" fill="rgb(245,10,28)"/><text x="789.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (11 samples, 1.31%)</title><rect x="788" y="276" width="15" height="15" fill="rgb(219,92,48)"/><text x="791.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (11 samples, 1.31%)</title><rect x="788" y="292" width="15" height="15" fill="rgb(223,214,32)"/><text x="791.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (10 samples, 1.19%)</title><rect x="789" y="308" width="14" height="15" fill="rgb(211,33,10)"/><text x="792.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (9 samples, 1.07%)</title><rect x="791" y="324" width="12" height="15" fill="rgb(214,63,13)"/><text x="794.00" y="334.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.12%)</title><rect x="802" y="340" width="1" height="15" fill="rgb(251,77,1)"/><text x="805.00" y="350.50"></text></g><g><title>PyArray_FromScalar (scalarapi.c) (1 samples, 0.12%)</title><rect x="802" y="356" width="1" height="15" fill="rgb(211,42,54)"/><text x="805.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.12%)</title><rect x="802" y="372" width="1" height="15" fill="rgb(223,47,53)"/><text x="805.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.12%)</title><rect x="802" y="388" width="1" height="15" fill="rgb(211,20,5)"/><text x="805.00" y="398.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.12%)</title><rect x="802" y="404" width="1" height="15" fill="rgb(224,163,41)"/><text x="805.00" y="414.50"></text></g><g><title>IsAligned (array_assign.c) (1 samples, 0.12%)</title><rect x="802" y="420" width="1" height="15" fill="rgb(213,90,11)"/><text x="805.00" y="430.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (1 samples, 0.12%)</title><rect x="802" y="436" width="1" height="15" fill="rgb(218,42,0)"/><text x="805.00" y="446.50"></text></g><g><title>npy_is_aligned (common.h) (1 samples, 0.12%)</title><rect x="802" y="452" width="1" height="15" fill="rgb(244,141,14)"/><text x="805.00" y="462.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (13 samples, 1.55%)</title><rect x="806" y="340" width="18" height="15" fill="rgb(222,90,11)"/><text x="809.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (13 samples, 1.55%)</title><rect x="806" y="356" width="18" height="15" fill="rgb(246,126,37)"/><text x="809.00" y="366.50"></text></g><g><title>aquicksort_float (quicksort.c.src) (7 samples, 0.83%)</title><rect x="814" y="372" width="10" height="15" fill="rgb(241,187,3)"/><text x="817.00" y="382.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (4 samples, 0.48%)</title><rect x="819" y="388" width="5" height="15" fill="rgb(239,210,13)"/><text x="822.00" y="398.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (16 samples, 1.90%)</title><rect x="803" y="260" width="23" height="15" fill="rgb(212,137,30)"/><text x="806.00" y="270.50">a..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (15 samples, 1.79%)</title><rect x="805" y="276" width="21" height="15" fill="rgb(239,204,46)"/><text x="808.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (15 samples, 1.79%)</title><rect x="805" y="292" width="21" height="15" fill="rgb(234,196,26)"/><text x="808.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (15 samples, 1.79%)</title><rect x="805" y="308" width="21" height="15" fill="rgb(226,182,51)"/><text x="808.00" y="318.50"></text></g><g><title>array_argsort (methods.c) (14 samples, 1.67%)</title><rect x="806" y="324" width="20" height="15" fill="rgb(229,63,1)"/><text x="809.00" y="334.50"></text></g><g><title>PyArray_SortkindConverter (conversion_utils.c) (1 samples, 0.12%)</title><rect x="824" y="340" width="2" height="15" fill="rgb(218,208,48)"/><text x="827.00" y="350.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (7 samples, 0.83%)</title><rect x="826" y="276" width="9" height="15" fill="rgb(229,103,54)"/><text x="829.00" y="286.50"></text></g><g><title>check_and_adjust_index (common.h) (4 samples, 0.48%)</title><rect x="830" y="292" width="5" height="15" fill="rgb(207,86,20)"/><text x="833.00" y="302.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (7 samples, 0.83%)</title><rect x="835" y="292" width="10" height="15" fill="rgb(250,198,16)"/><text x="838.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (7 samples, 0.83%)</title><rect x="835" y="308" width="10" height="15" fill="rgb(246,133,50)"/><text x="838.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (7 samples, 0.83%)</title><rect x="835" y="324" width="10" height="15" fill="rgb(240,10,2)"/><text x="838.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (7 samples, 0.83%)</title><rect x="835" y="340" width="10" height="15" fill="rgb(243,153,53)"/><text x="838.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (5 samples, 0.60%)</title><rect x="838" y="356" width="7" height="15" fill="rgb(250,95,52)"/><text x="841.00" y="366.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (9 samples, 1.07%)</title><rect x="835" y="276" width="13" height="15" fill="rgb(217,139,1)"/><text x="838.00" y="286.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (2 samples, 0.24%)</title><rect x="845" y="292" width="3" height="15" fill="rgb(228,56,1)"/><text x="848.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.24%)</title><rect x="845" y="308" width="3" height="15" fill="rgb(243,151,46)"/><text x="848.00" y="318.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (2 samples, 0.24%)</title><rect x="845" y="324" width="3" height="15" fill="rgb(228,220,7)"/><text x="848.00" y="334.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (1 samples, 0.12%)</title><rect x="847" y="340" width="1" height="15" fill="rgb(210,175,51)"/><text x="850.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.12%)</title><rect x="847" y="356" width="1" height="15" fill="rgb(254,60,44)"/><text x="850.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.12%)</title><rect x="847" y="372" width="1" height="15" fill="rgb(232,132,32)"/><text x="850.00" y="382.50"></text></g><g><title>npy_mul_with_overflow_intp (templ_common.h.src) (1 samples, 0.12%)</title><rect x="847" y="388" width="1" height="15" fill="rgb(251,170,28)"/><text x="850.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (68 samples, 8.10%)</title><rect x="786" y="212" width="96" height="15" fill="rgb(235,93,47)"/><text x="789.00" y="222.50">_run (mlpro..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (68 samples, 8.10%)</title><rect x="786" y="228" width="96" height="15" fill="rgb(241,17,9)"/><text x="789.00" y="238.50">_common_run..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (68 samples, 8.10%)</title><rect x="786" y="244" width="96" height="15" fill="rgb(235,153,22)"/><text x="789.00" y="254.50">topk_sorted..</text></g><g><title>array_subscript (mapping.c) (40 samples, 4.76%)</title><rect x="826" y="260" width="56" height="15" fill="rgb(251,53,54)"/><text x="829.00" y="270.50">array..</text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (24 samples, 2.86%)</title><rect x="848" y="276" width="34" height="15" fill="rgb(221,185,16)"/><text x="851.00" y="286.50">ma..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.12%)</title><rect x="885" y="308" width="1" height="15" fill="rgb(235,216,16)"/><text x="888.00" y="318.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.12%)</title><rect x="885" y="324" width="1" height="15" fill="rgb(224,42,20)"/><text x="888.00" y="334.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (1 samples, 0.12%)</title><rect x="885" y="340" width="1" height="15" fill="rgb(229,57,2)"/><text x="888.00" y="350.50"></text></g><g><title>PyArray_DESCR (ndarraytypes.h) (1 samples, 0.12%)</title><rect x="885" y="356" width="1" height="15" fill="rgb(254,179,4)"/><text x="888.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (3 samples, 0.36%)</title><rect x="883" y="228" width="4" height="15" fill="rgb(234,201,5)"/><text x="886.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.24%)</title><rect x="885" y="244" width="2" height="15" fill="rgb(221,152,17)"/><text x="888.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.24%)</title><rect x="885" y="260" width="2" height="15" fill="rgb(240,33,17)"/><text x="888.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.24%)</title><rect x="885" y="276" width="2" height="15" fill="rgb(228,168,12)"/><text x="888.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c) (2 samples, 0.24%)</title><rect x="885" y="292" width="2" height="15" fill="rgb(244,21,6)"/><text x="888.00" y="302.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.12%)</title><rect x="886" y="308" width="1" height="15" fill="rgb(253,11,7)"/><text x="889.00" y="318.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.12%)</title><rect x="886" y="324" width="1" height="15" fill="rgb(248,94,5)"/><text x="889.00" y="334.50"></text></g><g><title>argmin (&lt;__array_function__ internals&gt;) (2 samples, 0.24%)</title><rect x="887" y="276" width="3" height="15" fill="rgb(247,96,50)"/><text x="890.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.24%)</title><rect x="887" y="292" width="3" height="15" fill="rgb(232,200,44)"/><text x="890.00" y="302.50"></text></g><g><title>argmin (numpy/core/fromnumeric.py) (2 samples, 0.24%)</title><rect x="887" y="308" width="3" height="15" fill="rgb(233,97,2)"/><text x="890.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (2 samples, 0.24%)</title><rect x="887" y="324" width="3" height="15" fill="rgb(219,27,15)"/><text x="890.00" y="334.50"></text></g><g><title>array_argmin (methods.c) (2 samples, 0.24%)</title><rect x="887" y="340" width="3" height="15" fill="rgb(224,101,4)"/><text x="890.00" y="350.50"></text></g><g><title>PyArray_ArgMin (calculation.c) (2 samples, 0.24%)</title><rect x="887" y="356" width="3" height="15" fill="rgb(235,146,49)"/><text x="890.00" y="366.50"></text></g><g><title>FLOAT_argmin (arraytypes.c.src) (2 samples, 0.24%)</title><rect x="887" y="372" width="3" height="15" fill="rgb(246,3,4)"/><text x="890.00" y="382.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.12%)</title><rect x="890" y="292" width="2" height="15" fill="rgb(226,209,51)"/><text x="893.00" y="302.50"></text></g><g><title>array_astype (methods.c) (2 samples, 0.24%)</title><rect x="890" y="276" width="3" height="15" fill="rgb(230,54,36)"/><text x="893.00" y="286.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (1 samples, 0.12%)</title><rect x="892" y="292" width="1" height="15" fill="rgb(215,12,12)"/><text x="895.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.12%)</title><rect x="892" y="308" width="1" height="15" fill="rgb(244,76,3)"/><text x="895.00" y="318.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.12%)</title><rect x="892" y="324" width="1" height="15" fill="rgb(250,68,44)"/><text x="895.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.12%)</title><rect x="892" y="340" width="1" height="15" fill="rgb(234,47,41)"/><text x="895.00" y="350.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.12%)</title><rect x="892" y="356" width="1" height="15" fill="rgb(212,47,32)"/><text x="895.00" y="366.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.12%)</title><rect x="892" y="372" width="1" height="15" fill="rgb(225,149,19)"/><text x="895.00" y="382.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.12%)</title><rect x="892" y="388" width="1" height="15" fill="rgb(205,57,53)"/><text x="895.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="892" y="404" width="1" height="15" fill="rgb(213,149,36)"/><text x="895.00" y="414.50"></text></g><g><title>0x7f902d3dd6df (libc-2.29.so) (1 samples, 0.12%)</title><rect x="892" y="420" width="1" height="15" fill="rgb(206,129,50)"/><text x="895.00" y="430.50"></text></g><g><title>_argmin (mlprodict/onnxrt/ops_cpu/op_argmin.py) (7 samples, 0.83%)</title><rect x="887" y="260" width="10" height="15" fill="rgb(254,143,49)"/><text x="890.00" y="270.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (3 samples, 0.36%)</title><rect x="893" y="276" width="4" height="15" fill="rgb(236,55,2)"/><text x="896.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.36%)</title><rect x="893" y="292" width="4" height="15" fill="rgb(213,86,53)"/><text x="896.00" y="302.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (2 samples, 0.24%)</title><rect x="894" y="308" width="3" height="15" fill="rgb(239,8,39)"/><text x="897.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (1 samples, 0.12%)</title><rect x="896" y="324" width="1" height="15" fill="rgb(219,35,35)"/><text x="899.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py) (8 samples, 0.95%)</title><rect x="887" y="228" width="12" height="15" fill="rgb(231,214,0)"/><text x="890.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py) (8 samples, 0.95%)</title><rect x="887" y="244" width="12" height="15" fill="rgb(232,146,19)"/><text x="890.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.12%)</title><rect x="897" y="260" width="2" height="15" fill="rgb(205,178,31)"/><text x="900.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.12%)</title><rect x="897" y="276" width="2" height="15" fill="rgb(235,38,33)"/><text x="900.00" y="286.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.12%)</title><rect x="897" y="292" width="2" height="15" fill="rgb(236,134,34)"/><text x="900.00" y="302.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.12%)</title><rect x="897" y="308" width="2" height="15" fill="rgb(239,197,21)"/><text x="900.00" y="318.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.12%)</title><rect x="897" y="324" width="2" height="15" fill="rgb(213,217,6)"/><text x="900.00" y="334.50"></text></g><g><title>0x7f902d3db902 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="897" y="340" width="2" height="15" fill="rgb(213,192,27)"/><text x="900.00" y="350.50"></text></g><g><title>0x7f8fede7454f (?) (1 samples, 0.12%)</title><rect x="899" y="244" width="1" height="15" fill="rgb(217,3,35)"/><text x="902.00" y="254.50"></text></g><g><title>0x7f8fede7a65e (?) (1 samples, 0.12%)</title><rect x="899" y="260" width="1" height="15" fill="rgb(252,212,15)"/><text x="902.00" y="270.50"></text></g><g><title>0x7f8fede7a50f (?) (1 samples, 0.12%)</title><rect x="899" y="276" width="1" height="15" fill="rgb(244,99,47)"/><text x="902.00" y="286.50"></text></g><g><title>0x7f8fede80d6c (?) (1 samples, 0.12%)</title><rect x="899" y="292" width="1" height="15" fill="rgb(211,9,1)"/><text x="902.00" y="302.50"></text></g><g><title>0x7f8ff73d7cfa (?) (1 samples, 0.12%)</title><rect x="899" y="308" width="1" height="15" fill="rgb(227,35,46)"/><text x="902.00" y="318.50"></text></g><g><title>0x7f8ff73e0f5f (?) (1 samples, 0.12%)</title><rect x="899" y="324" width="1" height="15" fill="rgb(234,51,52)"/><text x="902.00" y="334.50"></text></g><g><title>0x7f8ff73d95b0 (?) (1 samples, 0.12%)</title><rect x="899" y="340" width="1" height="15" fill="rgb(232,168,40)"/><text x="902.00" y="350.50"></text></g><g><title>0x7f8ff73e2ea0 (libgomp.so.1.0.0) (3 samples, 0.36%)</title><rect x="900" y="484" width="4" height="15" fill="rgb(211,139,1)"/><text x="903.00" y="494.50"></text></g><g><title>0x7f8ff73e2ea9 (libgomp.so.1.0.0) (10 samples, 1.19%)</title><rect x="904" y="484" width="14" height="15" fill="rgb(213,53,6)"/><text x="907.00" y="494.50"></text></g><g><title>0x7f8ff73e2eab (libgomp.so.1.0.0) (10 samples, 1.19%)</title><rect x="918" y="484" width="14" height="15" fill="rgb(214,78,3)"/><text x="921.00" y="494.50"></text></g><g><title>0x7f8ff73e2ead (libgomp.so.1.0.0) (6 samples, 0.71%)</title><rect x="932" y="484" width="9" height="15" fill="rgb(222,34,21)"/><text x="935.00" y="494.50"></text></g><g><title>0x7f8ff73e1ab9 (libgomp.so.1.0.0) (30 samples, 3.57%)</title><rect x="900" y="468" width="42" height="15" fill="rgb(247,124,18)"/><text x="903.00" y="478.50">0x7..</text></g><g><title>0x7f8ff73e2ee1 (libgomp.so.1.0.0) (1 samples, 0.12%)</title><rect x="941" y="484" width="1" height="15" fill="rgb(248,103,39)"/><text x="944.00" y="494.50"></text></g><g><title>0x7f8ff73e0daa (libgomp.so.1.0.0) (2 samples, 0.24%)</title><rect x="942" y="484" width="3" height="15" fill="rgb(226,47,1)"/><text x="945.00" y="494.50"></text></g><g><title>0x7f8ff73e2cf0 (libgomp.so.1.0.0) (2 samples, 0.24%)</title><rect x="942" y="500" width="3" height="15" fill="rgb(215,162,47)"/><text x="945.00" y="510.50"></text></g><g><title>pybind11::array::size (numpy.h) (35 samples, 4.17%)</title><rect x="900" y="436" width="49" height="15" fill="rgb(227,109,13)"/><text x="903.00" y="446.50">pybi..</text></g><g><title>std::accumulate&lt;long const*, long, std::multiplies&lt;long&gt; &gt; (stl_numeric.h) (35 samples, 4.17%)</title><rect x="900" y="452" width="49" height="15" fill="rgb(230,214,38)"/><text x="903.00" y="462.50">std:..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (5 samples, 0.60%)</title><rect x="942" y="468" width="7" height="15" fill="rgb(254,31,28)"/><text x="945.00" y="478.50"></text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute_gil_free [clone ._omp_fn.2] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (3 samples, 0.36%)</title><rect x="945" y="484" width="4" height="15" fill="rgb(219,87,30)"/><text x="948.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::size (stl_vector.h) (3 samples, 0.36%)</title><rect x="945" y="500" width="4" height="15" fill="rgb(251,117,1)"/><text x="948.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (3 samples, 0.36%)</title><rect x="945" y="516" width="4" height="15" fill="rgb(251,194,46)"/><text x="948.00" y="526.50"></text></g><g><title>std::unordered_map&lt;long, unsigned long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt; &gt;::find (unordered_map.h) (1 samples, 0.12%)</title><rect x="948" y="532" width="1" height="15" fill="rgb(212,217,44)"/><text x="951.00" y="542.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (hashtable.h) (1 samples, 0.12%)</title><rect x="948" y="548" width="1" height="15" fill="rgb(243,29,13)"/><text x="951.00" y="558.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (hashtable.h) (1 samples, 0.12%)</title><rect x="948" y="564" width="1" height="15" fill="rgb(222,85,31)"/><text x="951.00" y="574.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (hashtable.h) (1 samples, 0.12%)</title><rect x="948" y="580" width="1" height="15" fill="rgb(230,140,2)"/><text x="951.00" y="590.50"></text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (305 samples, 36.31%)</title><rect x="522" y="100" width="429" height="15" fill="rgb(239,189,12)"/><text x="525.00" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_64_n_estima..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (303 samples, 36.07%)</title><rect x="525" y="116" width="426" height="15" fill="rgb(229,38,3)"/><text x="528.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (303 samples, 36.07%)</title><rect x="525" y="132" width="426" height="15" fill="rgb(253,40,8)"/><text x="528.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (303 samples, 36.07%)</title><rect x="525" y="148" width="426" height="15" fill="rgb(254,206,6)"/><text x="528.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (301 samples, 35.83%)</title><rect x="528" y="164" width="423" height="15" fill="rgb(211,178,41)"/><text x="531.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (295 samples, 35.12%)</title><rect x="536" y="180" width="415" height="15" fill="rgb(249,58,39)"/><text x="539.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (283 samples, 33.69%)</title><rect x="553" y="196" width="398" height="15" fill="rgb(228,61,4)"/><text x="556.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (49 samples, 5.83%)</title><rect x="882" y="212" width="69" height="15" fill="rgb(206,84,17)"/><text x="885.00" y="222.50">run (ml..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py) (37 samples, 4.40%)</title><rect x="899" y="228" width="52" height="15" fill="rgb(249,217,45)"/><text x="902.00" y="238.50">_run ..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (36 samples, 4.29%)</title><rect x="900" y="244" width="51" height="15" fill="rgb(217,62,54)"/><text x="903.00" y="254.50">pybin..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (36 samples, 4.29%)</title><rect x="900" y="260" width="51" height="15" fill="rgb(214,65,52)"/><text x="903.00" y="270.50">void ..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (36 samples, 4.29%)</title><rect x="900" y="276" width="51" height="15" fill="rgb(245,97,38)"/><text x="903.00" y="286.50">void ..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (36 samples, 4.29%)</title><rect x="900" y="292" width="51" height="15" fill="rgb(219,118,53)"/><text x="903.00" y="302.50">pybin..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (36 samples, 4.29%)</title><rect x="900" y="308" width="51" height="15" fill="rgb(210,46,49)"/><text x="903.00" y="318.50">pybin..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (36 samples, 4.29%)</title><rect x="900" y="324" width="51" height="15" fill="rgb(210,153,29)"/><text x="903.00" y="334.50">pybin..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (36 samples, 4.29%)</title><rect x="900" y="340" width="51" height="15" fill="rgb(234,159,44)"/><text x="903.00" y="350.50">pybin..</text></g><g><title>pybind11::array::~array (numpy.h) (36 samples, 4.29%)</title><rect x="900" y="356" width="51" height="15" fill="rgb(208,24,45)"/><text x="903.00" y="366.50">pybin..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (36 samples, 4.29%)</title><rect x="900" y="372" width="51" height="15" fill="rgb(252,229,23)"/><text x="903.00" y="382.50">pybin..</text></g><g><title>pybind11::object::~object (pytypes.h) (36 samples, 4.29%)</title><rect x="900" y="388" width="51" height="15" fill="rgb(240,9,4)"/><text x="903.00" y="398.50">pybin..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (36 samples, 4.29%)</title><rect x="900" y="404" width="51" height="15" fill="rgb(226,217,37)"/><text x="903.00" y="414.50">pybin..</text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (36 samples, 4.29%)</title><rect x="900" y="420" width="51" height="15" fill="rgb(236,50,23)"/><text x="903.00" y="430.50">Runti..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::size (stl_vector.h) (1 samples, 0.12%)</title><rect x="949" y="436" width="2" height="15" fill="rgb(223,159,37)"/><text x="952.00" y="446.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_default_append (vector.tcc) (1 samples, 0.12%)</title><rect x="949" y="452" width="2" height="15" fill="rgb(205,125,54)"/><text x="952.00" y="462.50"></text></g><g><title>std::_Vector_base&lt;long, std::allocator&lt;long&gt; &gt;::_M_deallocate (stl_vector.h) (1 samples, 0.12%)</title><rect x="949" y="468" width="2" height="15" fill="rgb(215,6,36)"/><text x="952.00" y="478.50"></text></g><g><title>0x7f902d3fc120 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="949" y="484" width="2" height="15" fill="rgb(223,184,24)"/><text x="952.00" y="494.50"></text></g><g><title>profile_pyrt (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (307 samples, 36.55%)</title><rect x="522" y="68" width="431" height="15" fill="rgb(235,176,45)"/><text x="525.00" y="78.50">profile_pyrt (bench_AdaBoostRegressor_default_b_reg_64_n_e..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (307 samples, 36.55%)</title><rect x="522" y="84" width="431" height="15" fill="rgb(231,133,35)"/><text x="525.00" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.24%)</title><rect x="951" y="100" width="2" height="15" fill="rgb(235,128,1)"/><text x="954.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.24%)</title><rect x="951" y="116" width="2" height="15" fill="rgb(246,50,16)"/><text x="954.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.24%)</title><rect x="951" y="132" width="2" height="15" fill="rgb(227,27,49)"/><text x="954.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.24%)</title><rect x="951" y="148" width="2" height="15" fill="rgb(219,98,43)"/><text x="954.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.24%)</title><rect x="951" y="164" width="2" height="15" fill="rgb(253,173,34)"/><text x="954.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (2 samples, 0.24%)</title><rect x="951" y="180" width="2" height="15" fill="rgb(243,46,24)"/><text x="954.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (2 samples, 0.24%)</title><rect x="951" y="196" width="2" height="15" fill="rgb(251,217,19)"/><text x="954.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="212" width="2" height="15" fill="rgb(223,159,27)"/><text x="954.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="228" width="2" height="15" fill="rgb(205,114,4)"/><text x="954.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="244" width="2" height="15" fill="rgb(249,107,51)"/><text x="954.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.24%)</title><rect x="951" y="260" width="2" height="15" fill="rgb(240,91,14)"/><text x="954.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="276" width="2" height="15" fill="rgb(221,156,24)"/><text x="954.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (2 samples, 0.24%)</title><rect x="951" y="292" width="2" height="15" fill="rgb(212,30,12)"/><text x="954.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="308" width="2" height="15" fill="rgb(230,182,42)"/><text x="954.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="324" width="2" height="15" fill="rgb(247,2,31)"/><text x="954.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="340" width="2" height="15" fill="rgb(245,142,41)"/><text x="954.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.24%)</title><rect x="951" y="356" width="2" height="15" fill="rgb(234,60,11)"/><text x="954.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="372" width="2" height="15" fill="rgb(207,124,8)"/><text x="954.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (2 samples, 0.24%)</title><rect x="951" y="388" width="2" height="15" fill="rgb(209,200,4)"/><text x="954.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="404" width="2" height="15" fill="rgb(238,203,23)"/><text x="954.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="420" width="2" height="15" fill="rgb(211,199,1)"/><text x="954.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="436" width="2" height="15" fill="rgb(242,66,32)"/><text x="954.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.24%)</title><rect x="951" y="452" width="2" height="15" fill="rgb(240,177,20)"/><text x="954.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="951" y="468" width="2" height="15" fill="rgb(229,179,1)"/><text x="954.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/doc/doc_helper.py) (2 samples, 0.24%)</title><rect x="951" y="484" width="2" height="15" fill="rgb(243,148,22)"/><text x="954.00" y="494.50"></text></g><g><title>_get_doc_template (mlprodict/onnxrt/doc/doc_helper.py) (2 samples, 0.24%)</title><rect x="951" y="500" width="2" height="15" fill="rgb(221,2,3)"/><text x="954.00" y="510.50"></text></g><g><title>__new__ (jinja2/environment.py) (2 samples, 0.24%)</title><rect x="951" y="516" width="2" height="15" fill="rgb(209,113,48)"/><text x="954.00" y="526.50"></text></g><g><title>from_string (jinja2/environment.py) (2 samples, 0.24%)</title><rect x="951" y="532" width="2" height="15" fill="rgb(230,96,40)"/><text x="954.00" y="542.50"></text></g><g><title>compile (jinja2/environment.py) (2 samples, 0.24%)</title><rect x="951" y="548" width="2" height="15" fill="rgb(228,37,44)"/><text x="954.00" y="558.50"></text></g><g><title>_generate (jinja2/environment.py) (2 samples, 0.24%)</title><rect x="951" y="564" width="2" height="15" fill="rgb(252,198,30)"/><text x="954.00" y="574.50"></text></g><g><title>generate (jinja2/compiler.py) (2 samples, 0.24%)</title><rect x="951" y="580" width="2" height="15" fill="rgb(250,196,29)"/><text x="954.00" y="590.50"></text></g><g><title>visit (jinja2/visitor.py) (2 samples, 0.24%)</title><rect x="951" y="596" width="2" height="15" fill="rgb(244,160,13)"/><text x="954.00" y="606.50"></text></g><g><title>visit_Template (jinja2/compiler.py) (2 samples, 0.24%)</title><rect x="951" y="612" width="2" height="15" fill="rgb(230,4,0)"/><text x="954.00" y="622.50"></text></g><g><title>blockvisit (jinja2/compiler.py) (2 samples, 0.24%)</title><rect x="951" y="628" width="2" height="15" fill="rgb(240,42,38)"/><text x="954.00" y="638.50"></text></g><g><title>visit (jinja2/visitor.py) (2 samples, 0.24%)</title><rect x="951" y="644" width="2" height="15" fill="rgb(233,207,34)"/><text x="954.00" y="654.50"></text></g><g><title>visit_For (jinja2/compiler.py) (2 samples, 0.24%)</title><rect x="951" y="660" width="2" height="15" fill="rgb(213,176,36)"/><text x="954.00" y="670.50"></text></g><g><title>find_undeclared (jinja2/compiler.py) (2 samples, 0.24%)</title><rect x="951" y="676" width="2" height="15" fill="rgb(212,140,43)"/><text x="954.00" y="686.50"></text></g><g><title>visit (jinja2/visitor.py) (2 samples, 0.24%)</title><rect x="951" y="692" width="2" height="15" fill="rgb(207,227,37)"/><text x="954.00" y="702.50"></text></g><g><title>generic_visit (jinja2/visitor.py) (2 samples, 0.24%)</title><rect x="951" y="708" width="2" height="15" fill="rgb(229,180,45)"/><text x="954.00" y="718.50"></text></g><g><title>visit (jinja2/visitor.py) (2 samples, 0.24%)</title><rect x="951" y="724" width="2" height="15" fill="rgb(213,211,48)"/><text x="954.00" y="734.50"></text></g><g><title>generic_visit (jinja2/visitor.py) (2 samples, 0.24%)</title><rect x="951" y="740" width="2" height="15" fill="rgb(224,182,28)"/><text x="954.00" y="750.50"></text></g><g><title>visit (jinja2/visitor.py) (2 samples, 0.24%)</title><rect x="951" y="756" width="2" height="15" fill="rgb(231,218,16)"/><text x="954.00" y="766.50"></text></g><g><title>generic_visit (jinja2/visitor.py) (2 samples, 0.24%)</title><rect x="951" y="772" width="2" height="15" fill="rgb(243,199,35)"/><text x="954.00" y="782.50"></text></g><g><title>visit (jinja2/visitor.py) (2 samples, 0.24%)</title><rect x="951" y="788" width="2" height="15" fill="rgb(205,49,21)"/><text x="954.00" y="798.50"></text></g><g><title>get_visitor (jinja2/visitor.py) (1 samples, 0.12%)</title><rect x="952" y="804" width="1" height="15" fill="rgb(209,218,6)"/><text x="955.00" y="814.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.12%)</title><rect x="959" y="196" width="2" height="15" fill="rgb(252,129,20)"/><text x="962.00" y="206.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.12%)</title><rect x="959" y="212" width="2" height="15" fill="rgb(228,56,41)"/><text x="962.00" y="222.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.12%)</title><rect x="959" y="228" width="2" height="15" fill="rgb(223,214,25)"/><text x="962.00" y="238.50"></text></g><g><title>0x7f9006e2d225 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="961" y="260" width="1" height="15" fill="rgb(207,68,11)"/><text x="964.00" y="270.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (1 samples, 0.12%)</title><rect x="961" y="276" width="1" height="15" fill="rgb(238,0,22)"/><text x="964.00" y="286.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.12%)</title><rect x="961" y="292" width="1" height="15" fill="rgb(245,89,23)"/><text x="964.00" y="302.50"></text></g><g><title>0x7f9006e0710c (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="962" y="308" width="1" height="15" fill="rgb(221,28,45)"/><text x="965.00" y="318.50"></text></g><g><title>0x7f9006e2d2df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.24%)</title><rect x="962" y="260" width="3" height="15" fill="rgb(249,196,31)"/><text x="965.00" y="270.50"></text></g><g><title>0x7f9006e11d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.24%)</title><rect x="962" y="276" width="3" height="15" fill="rgb(216,184,24)"/><text x="965.00" y="286.50"></text></g><g><title>0x7f9006e11666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.24%)</title><rect x="962" y="292" width="3" height="15" fill="rgb(209,73,35)"/><text x="965.00" y="302.50"></text></g><g><title>0x7f9006e072fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="963" y="308" width="2" height="15" fill="rgb(244,50,15)"/><text x="966.00" y="318.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.12%)</title><rect x="963" y="324" width="2" height="15" fill="rgb(223,52,20)"/><text x="966.00" y="334.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.12%)</title><rect x="963" y="340" width="2" height="15" fill="rgb(218,203,29)"/><text x="966.00" y="350.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.12%)</title><rect x="963" y="356" width="2" height="15" fill="rgb(221,214,18)"/><text x="966.00" y="366.50"></text></g><g><title>_buffer_format_string (buffer.c) (1 samples, 0.12%)</title><rect x="963" y="372" width="2" height="15" fill="rgb(217,123,31)"/><text x="966.00" y="382.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.12%)</title><rect x="965" y="292" width="1" height="15" fill="rgb(211,122,51)"/><text x="968.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.12%)</title><rect x="965" y="308" width="1" height="15" fill="rgb(243,47,45)"/><text x="968.00" y="318.50"></text></g><g><title>0x7f9006e2d592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.24%)</title><rect x="965" y="260" width="3" height="15" fill="rgb(228,92,12)"/><text x="968.00" y="270.50"></text></g><g><title>array_zeros (multiarraymodule.c) (2 samples, 0.24%)</title><rect x="965" y="276" width="3" height="15" fill="rgb(228,82,30)"/><text x="968.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.12%)</title><rect x="966" y="292" width="2" height="15" fill="rgb(243,119,1)"/><text x="969.00" y="302.50"></text></g><g><title>PyArray_Zeros (ctors.c) (1 samples, 0.12%)</title><rect x="966" y="308" width="2" height="15" fill="rgb(210,225,8)"/><text x="969.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.12%)</title><rect x="966" y="324" width="2" height="15" fill="rgb(253,124,50)"/><text x="969.00" y="334.50"></text></g><g><title>0x7f9006e2d687 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="968" y="260" width="1" height="15" fill="rgb(237,22,54)"/><text x="971.00" y="270.50"></text></g><g><title>0x7f9006e2d69b (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="969" y="260" width="1" height="15" fill="rgb(235,28,17)"/><text x="972.00" y="270.50"></text></g><g><title>0x7f9006e2d6aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.83%)</title><rect x="970" y="260" width="10" height="15" fill="rgb(230,212,49)"/><text x="973.00" y="270.50"></text></g><g><title>0x7f9006e2d6ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.24%)</title><rect x="980" y="260" width="3" height="15" fill="rgb(249,60,46)"/><text x="983.00" y="270.50"></text></g><g><title>0x7f9006e2d6b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.24%)</title><rect x="983" y="260" width="3" height="15" fill="rgb(250,93,14)"/><text x="986.00" y="270.50"></text></g><g><title>0x7f9006e2d6b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.24%)</title><rect x="986" y="260" width="3" height="15" fill="rgb(250,157,42)"/><text x="989.00" y="270.50"></text></g><g><title>0x7f9006e2d731 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="989" y="260" width="1" height="15" fill="rgb(225,187,43)"/><text x="992.00" y="270.50"></text></g><g><title>0x7f9006e2d8c3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="990" y="260" width="1" height="15" fill="rgb(220,171,8)"/><text x="993.00" y="270.50"></text></g><g><title>0x7f9006e1efa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (23 samples, 2.74%)</title><rect x="961" y="228" width="32" height="15" fill="rgb(243,170,35)"/><text x="964.00" y="238.50">0x..</text></g><g><title>0x7f9006e2e405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (23 samples, 2.74%)</title><rect x="961" y="244" width="32" height="15" fill="rgb(247,182,30)"/><text x="964.00" y="254.50">0x..</text></g><g><title>0x7f9006e2dc27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="991" y="260" width="2" height="15" fill="rgb(232,140,48)"/><text x="994.00" y="270.50"></text></g><g><title>0x7f9006e05529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="991" y="276" width="2" height="15" fill="rgb(212,5,34)"/><text x="994.00" y="286.50"></text></g><g><title>0x7f9006e1efbc (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="993" y="228" width="1" height="15" fill="rgb(247,55,30)"/><text x="996.00" y="238.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (3 samples, 0.36%)</title><rect x="997" y="276" width="4" height="15" fill="rgb(234,227,30)"/><text x="1000.00" y="286.50"></text></g><g><title>0x7f9006e1f05a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.71%)</title><rect x="994" y="228" width="9" height="15" fill="rgb(226,156,13)"/><text x="997.00" y="238.50"></text></g><g><title>array_take (methods.c) (6 samples, 0.71%)</title><rect x="994" y="244" width="9" height="15" fill="rgb(217,190,52)"/><text x="997.00" y="254.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c) (5 samples, 0.60%)</title><rect x="996" y="260" width="7" height="15" fill="rgb(223,202,1)"/><text x="999.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.12%)</title><rect x="1001" y="276" width="2" height="15" fill="rgb(209,175,25)"/><text x="1004.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.12%)</title><rect x="1001" y="292" width="2" height="15" fill="rgb(225,65,23)"/><text x="1004.00" y="302.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.12%)</title><rect x="1001" y="308" width="2" height="15" fill="rgb(207,4,10)"/><text x="1004.00" y="318.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.12%)</title><rect x="1001" y="324" width="2" height="15" fill="rgb(217,7,12)"/><text x="1004.00" y="334.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.12%)</title><rect x="1001" y="340" width="2" height="15" fill="rgb(219,181,5)"/><text x="1004.00" y="350.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1001" y="356" width="2" height="15" fill="rgb(210,153,9)"/><text x="1004.00" y="366.50"></text></g><g><title>0x7f9006e1f13a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="1003" y="228" width="1" height="15" fill="rgb(223,211,20)"/><text x="1006.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.12%)</title><rect x="1003" y="244" width="1" height="15" fill="rgb(220,188,22)"/><text x="1006.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.12%)</title><rect x="1003" y="260" width="1" height="15" fill="rgb(223,95,40)"/><text x="1006.00" y="270.50"></text></g><g><title>0x7f9006e1f14f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.36%)</title><rect x="1004" y="228" width="4" height="15" fill="rgb(243,140,12)"/><text x="1007.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.36%)</title><rect x="1004" y="244" width="4" height="15" fill="rgb(224,227,15)"/><text x="1007.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (3 samples, 0.36%)</title><rect x="1004" y="260" width="4" height="15" fill="rgb(250,107,28)"/><text x="1007.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (3 samples, 0.36%)</title><rect x="1004" y="276" width="4" height="15" fill="rgb(228,47,40)"/><text x="1007.00" y="286.50"></text></g><g><title>0x7f902d3dba4d (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1007" y="292" width="1" height="15" fill="rgb(219,189,29)"/><text x="1010.00" y="302.50"></text></g><g><title>0x7f9006e1fd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (35 samples, 4.17%)</title><rect x="961" y="212" width="49" height="15" fill="rgb(231,132,52)"/><text x="964.00" y="222.50">0x7f..</text></g><g><title>0x7f9006e1f328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="1008" y="228" width="2" height="15" fill="rgb(225,3,10)"/><text x="1011.00" y="238.50"></text></g><g><title>array_reshape (methods.c) (1 samples, 0.12%)</title><rect x="1008" y="244" width="2" height="15" fill="rgb(243,227,51)"/><text x="1011.00" y="254.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.12%)</title><rect x="1008" y="260" width="2" height="15" fill="rgb(235,74,19)"/><text x="1011.00" y="270.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.12%)</title><rect x="1008" y="276" width="2" height="15" fill="rgb(234,29,13)"/><text x="1011.00" y="286.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.12%)</title><rect x="1011" y="228" width="1" height="15" fill="rgb(234,209,45)"/><text x="1014.00" y="238.50"></text></g><g><title>__enter__ (warnings.py) (1 samples, 0.12%)</title><rect x="1028" y="244" width="1" height="15" fill="rgb(223,84,18)"/><text x="1031.00" y="254.50"></text></g><g><title>__init__ (warnings.py) (2 samples, 0.24%)</title><rect x="1029" y="244" width="3" height="15" fill="rgb(238,4,23)"/><text x="1032.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.24%)</title><rect x="1038" y="260" width="3" height="15" fill="rgb(207,122,33)"/><text x="1041.00" y="270.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (7 samples, 0.83%)</title><rect x="1032" y="244" width="10" height="15" fill="rgb(215,36,50)"/><text x="1035.00" y="254.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.12%)</title><rect x="1041" y="260" width="1" height="15" fill="rgb(233,98,53)"/><text x="1044.00" y="270.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (5 samples, 0.60%)</title><rect x="1042" y="244" width="7" height="15" fill="rgb(235,88,39)"/><text x="1045.00" y="254.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (2 samples, 0.24%)</title><rect x="1049" y="244" width="3" height="15" fill="rgb(247,121,6)"/><text x="1052.00" y="254.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (1 samples, 0.12%)</title><rect x="1050" y="260" width="2" height="15" fill="rgb(233,70,36)"/><text x="1053.00" y="270.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (34 samples, 4.05%)</title><rect x="1010" y="212" width="47" height="15" fill="rgb(250,92,6)"/><text x="1013.00" y="222.50">_val..</text></g><g><title>check_array (sklearn/utils/validation.py) (32 samples, 3.81%)</title><rect x="1012" y="228" width="45" height="15" fill="rgb(235,223,5)"/><text x="1015.00" y="238.50">chec..</text></g><g><title>simplefilter (warnings.py) (4 samples, 0.48%)</title><rect x="1052" y="244" width="5" height="15" fill="rgb(251,18,16)"/><text x="1055.00" y="254.50"></text></g><g><title>_add_filter (warnings.py) (3 samples, 0.36%)</title><rect x="1053" y="260" width="4" height="15" fill="rgb(251,76,33)"/><text x="1056.00" y="270.50"></text></g><g><title>0x7f902d3f1eb5 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1056" y="276" width="1" height="15" fill="rgb(207,23,28)"/><text x="1059.00" y="286.50"></text></g><g><title>unicode_endswith (python3.7) (2 samples, 0.24%)</title><rect x="1064" y="244" width="3" height="15" fill="rgb(216,90,31)"/><text x="1067.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (10 samples, 1.19%)</title><rect x="1057" y="228" width="15" height="15" fill="rgb(224,76,37)"/><text x="1060.00" y="238.50"></text></g><g><title>unicode_startswith (python3.7) (3 samples, 0.36%)</title><rect x="1067" y="244" width="5" height="15" fill="rgb(237,114,16)"/><text x="1070.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_weight_boosting.py) (82 samples, 9.76%)</title><rect x="959" y="180" width="115" height="15" fill="rgb(249,148,22)"/><text x="962.00" y="190.50">&lt;listcomp&gt; (sk..</text></g><g><title>predict (sklearn/tree/_classes.py) (81 samples, 9.64%)</title><rect x="961" y="196" width="113" height="15" fill="rgb(245,93,18)"/><text x="964.00" y="206.50">predict (skle..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (12 samples, 1.43%)</title><rect x="1057" y="212" width="17" height="15" fill="rgb(250,208,14)"/><text x="1060.00" y="222.50"></text></g><g><title>isclass (inspect.py) (2 samples, 0.24%)</title><rect x="1072" y="228" width="2" height="15" fill="rgb(220,185,36)"/><text x="1075.00" y="238.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (1 samples, 0.12%)</title><rect x="1074" y="228" width="2" height="15" fill="rgb(217,194,16)"/><text x="1077.00" y="238.50"></text></g><g><title>setArrayFromSequence (ctors.c) (1 samples, 0.12%)</title><rect x="1074" y="244" width="2" height="15" fill="rgb(208,216,52)"/><text x="1077.00" y="254.50"></text></g><g><title>setArrayFromSequence (ctors.c) (1 samples, 0.12%)</title><rect x="1074" y="260" width="2" height="15" fill="rgb(210,190,38)"/><text x="1077.00" y="270.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.12%)</title><rect x="1074" y="276" width="2" height="15" fill="rgb(211,207,13)"/><text x="1077.00" y="286.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.12%)</title><rect x="1074" y="292" width="2" height="15" fill="rgb(246,158,35)"/><text x="1077.00" y="302.50"></text></g><g><title>0x7f902d3fbd94 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1074" y="308" width="2" height="15" fill="rgb(219,87,33)"/><text x="1077.00" y="318.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.24%)</title><rect x="1074" y="180" width="3" height="15" fill="rgb(252,166,7)"/><text x="1077.00" y="190.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (2 samples, 0.24%)</title><rect x="1074" y="196" width="3" height="15" fill="rgb(230,116,48)"/><text x="1077.00" y="206.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.24%)</title><rect x="1074" y="212" width="3" height="15" fill="rgb(212,17,30)"/><text x="1077.00" y="222.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (1 samples, 0.12%)</title><rect x="1076" y="228" width="1" height="15" fill="rgb(207,158,27)"/><text x="1079.00" y="238.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (5 samples, 0.60%)</title><rect x="1077" y="180" width="7" height="15" fill="rgb(233,222,38)"/><text x="1080.00" y="190.50"></text></g><g><title>__instancecheck__ (abc.py) (2 samples, 0.24%)</title><rect x="1081" y="196" width="3" height="15" fill="rgb(246,148,39)"/><text x="1084.00" y="206.50"></text></g><g><title>DOUBLE_copyswapn (arraytypes.c.src) (2 samples, 0.24%)</title><rect x="1090" y="292" width="3" height="15" fill="rgb(253,76,27)"/><text x="1093.00" y="302.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (8 samples, 0.95%)</title><rect x="1084" y="180" width="11" height="15" fill="rgb(234,176,9)"/><text x="1087.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 0.95%)</title><rect x="1084" y="196" width="11" height="15" fill="rgb(247,86,43)"/><text x="1087.00" y="206.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (8 samples, 0.95%)</title><rect x="1084" y="212" width="11" height="15" fill="rgb(219,59,54)"/><text x="1087.00" y="222.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (8 samples, 0.95%)</title><rect x="1084" y="228" width="11" height="15" fill="rgb(235,39,44)"/><text x="1087.00" y="238.50"></text></g><g><title>array_argsort (methods.c) (7 samples, 0.83%)</title><rect x="1086" y="244" width="9" height="15" fill="rgb(246,207,21)"/><text x="1089.00" y="254.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (7 samples, 0.83%)</title><rect x="1086" y="260" width="9" height="15" fill="rgb(207,28,10)"/><text x="1089.00" y="270.50"></text></g><g><title>_new_argsortlike (item_selection.c) (7 samples, 0.83%)</title><rect x="1086" y="276" width="9" height="15" fill="rgb(208,108,41)"/><text x="1089.00" y="286.50"></text></g><g><title>aquicksort_double (quicksort.c.src) (2 samples, 0.24%)</title><rect x="1093" y="292" width="2" height="15" fill="rgb(237,90,47)"/><text x="1096.00" y="302.50"></text></g><g><title>npy_get_msb (npy_sort.h.src) (1 samples, 0.12%)</title><rect x="1094" y="308" width="1" height="15" fill="rgb(221,155,40)"/><text x="1097.00" y="318.50"></text></g><g><title>0x7f902d3f1e50 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1095" y="196" width="2" height="15" fill="rgb(218,64,7)"/><text x="1098.00" y="206.50"></text></g><g><title>array_argmax (methods.c) (3 samples, 0.36%)</title><rect x="1095" y="180" width="5" height="15" fill="rgb(224,137,25)"/><text x="1098.00" y="190.50"></text></g><g><title>PyArray_ArgMax (calculation.c) (2 samples, 0.24%)</title><rect x="1097" y="196" width="3" height="15" fill="rgb(210,142,54)"/><text x="1100.00" y="206.50"></text></g><g><title>BOOL_argmax (arraytypes.c.src) (1 samples, 0.12%)</title><rect x="1098" y="212" width="2" height="15" fill="rgb(229,194,7)"/><text x="1101.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.24%)</title><rect x="1100" y="180" width="2" height="15" fill="rgb(230,143,9)"/><text x="1103.00" y="190.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.12%)</title><rect x="1101" y="196" width="1" height="15" fill="rgb(220,126,22)"/><text x="1104.00" y="206.50"></text></g><g><title>DOUBLE_multiply (loops.c.src) (1 samples, 0.12%)</title><rect x="1102" y="260" width="2" height="15" fill="rgb(227,205,31)"/><text x="1105.00" y="270.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.12%)</title><rect x="1104" y="276" width="1" height="15" fill="rgb(235,160,4)"/><text x="1107.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.24%)</title><rect x="1104" y="260" width="3" height="15" fill="rgb(244,33,42)"/><text x="1107.00" y="270.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (1 samples, 0.12%)</title><rect x="1105" y="276" width="2" height="15" fill="rgb(248,111,20)"/><text x="1108.00" y="286.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.12%)</title><rect x="1105" y="292" width="2" height="15" fill="rgb(229,63,30)"/><text x="1108.00" y="302.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c) (1 samples, 0.12%)</title><rect x="1105" y="308" width="2" height="15" fill="rgb(237,71,54)"/><text x="1108.00" y="318.50"></text></g><g><title>PyArray_GetStridedCopyFn (lowlevel_strided_loops.c.src) (1 samples, 0.12%)</title><rect x="1105" y="324" width="2" height="15" fill="rgb(249,228,38)"/><text x="1108.00" y="334.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.48%)</title><rect x="1102" y="228" width="6" height="15" fill="rgb(206,77,0)"/><text x="1105.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (4 samples, 0.48%)</title><rect x="1102" y="244" width="6" height="15" fill="rgb(205,101,50)"/><text x="1105.00" y="254.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.12%)</title><rect x="1107" y="260" width="1" height="15" fill="rgb(217,83,10)"/><text x="1110.00" y="270.50"></text></g><g><title>0x7f902d3dbf69 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1107" y="276" width="1" height="15" fill="rgb(242,83,12)"/><text x="1110.00" y="286.50"></text></g><g><title>array_multiply (number.c) (5 samples, 0.60%)</title><rect x="1102" y="180" width="7" height="15" fill="rgb(219,219,10)"/><text x="1105.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.60%)</title><rect x="1102" y="196" width="7" height="15" fill="rgb(211,143,53)"/><text x="1105.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.60%)</title><rect x="1102" y="212" width="7" height="15" fill="rgb(221,155,5)"/><text x="1105.00" y="222.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.12%)</title><rect x="1108" y="228" width="1" height="15" fill="rgb(222,108,9)"/><text x="1111.00" y="238.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.12%)</title><rect x="1109" y="276" width="2" height="15" fill="rgb(249,7,42)"/><text x="1112.00" y="286.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (1 samples, 0.12%)</title><rect x="1109" y="292" width="2" height="15" fill="rgb(212,86,17)"/><text x="1112.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.12%)</title><rect x="1109" y="308" width="2" height="15" fill="rgb(212,131,6)"/><text x="1112.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.12%)</title><rect x="1109" y="324" width="2" height="15" fill="rgb(224,26,40)"/><text x="1112.00" y="334.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.12%)</title><rect x="1109" y="340" width="2" height="15" fill="rgb(225,43,21)"/><text x="1112.00" y="350.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.12%)</title><rect x="1109" y="356" width="2" height="15" fill="rgb(231,37,40)"/><text x="1112.00" y="366.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.12%)</title><rect x="1109" y="372" width="2" height="15" fill="rgb(236,26,4)"/><text x="1112.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1109" y="388" width="2" height="15" fill="rgb(209,145,26)"/><text x="1112.00" y="398.50"></text></g><g><title>0x7f902d3dd6df (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1109" y="404" width="2" height="15" fill="rgb(221,48,10)"/><text x="1112.00" y="414.50"></text></g><g><title>array_richcompare (arrayobject.c) (2 samples, 0.24%)</title><rect x="1109" y="180" width="3" height="15" fill="rgb(206,101,11)"/><text x="1112.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1109" y="196" width="3" height="15" fill="rgb(245,107,46)"/><text x="1112.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1109" y="212" width="3" height="15" fill="rgb(223,208,0)"/><text x="1112.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1109" y="228" width="3" height="15" fill="rgb(207,80,44)"/><text x="1112.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1109" y="244" width="3" height="15" fill="rgb(227,20,6)"/><text x="1112.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.24%)</title><rect x="1109" y="260" width="3" height="15" fill="rgb(210,167,22)"/><text x="1112.00" y="270.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.12%)</title><rect x="1111" y="276" width="1" height="15" fill="rgb(252,165,34)"/><text x="1114.00" y="286.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (1 samples, 0.12%)</title><rect x="1114" y="196" width="1" height="15" fill="rgb(250,131,37)"/><text x="1117.00" y="206.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1115" y="244" width="1" height="15" fill="rgb(209,65,30)"/><text x="1118.00" y="254.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (2 samples, 0.24%)</title><rect x="1115" y="196" width="3" height="15" fill="rgb(214,84,17)"/><text x="1118.00" y="206.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (2 samples, 0.24%)</title><rect x="1115" y="212" width="3" height="15" fill="rgb(208,145,50)"/><text x="1118.00" y="222.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.24%)</title><rect x="1115" y="228" width="3" height="15" fill="rgb(209,76,23)"/><text x="1118.00" y="238.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.12%)</title><rect x="1116" y="244" width="2" height="15" fill="rgb(247,43,17)"/><text x="1119.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (5 samples, 0.60%)</title><rect x="1112" y="180" width="7" height="15" fill="rgb(220,143,52)"/><text x="1115.00" y="190.50"></text></g><g><title>mapiter_trivial_get (lowlevel_strided_loops.c.src) (1 samples, 0.12%)</title><rect x="1118" y="196" width="1" height="15" fill="rgb(238,151,31)"/><text x="1121.00" y="206.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.12%)</title><rect x="1126" y="308" width="2" height="15" fill="rgb(228,4,7)"/><text x="1129.00" y="318.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.12%)</title><rect x="1126" y="324" width="2" height="15" fill="rgb(228,93,9)"/><text x="1129.00" y="334.50"></text></g><g><title>_is_basic_python_type (get_attr_string.h) (1 samples, 0.12%)</title><rect x="1126" y="340" width="2" height="15" fill="rgb(221,69,41)"/><text x="1129.00" y="350.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.24%)</title><rect x="1126" y="276" width="3" height="15" fill="rgb(243,182,25)"/><text x="1129.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.24%)</title><rect x="1126" y="292" width="3" height="15" fill="rgb(243,73,49)"/><text x="1129.00" y="302.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (1 samples, 0.12%)</title><rect x="1128" y="308" width="1" height="15" fill="rgb(230,125,38)"/><text x="1131.00" y="318.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.12%)</title><rect x="1128" y="324" width="1" height="15" fill="rgb(212,25,29)"/><text x="1131.00" y="334.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;) (6 samples, 0.71%)</title><rect x="1123" y="196" width="9" height="15" fill="rgb(213,218,50)"/><text x="1126.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.71%)</title><rect x="1123" y="212" width="9" height="15" fill="rgb(218,116,12)"/><text x="1126.00" y="222.50"></text></g><g><title>all (numpy/core/fromnumeric.py) (6 samples, 0.71%)</title><rect x="1123" y="228" width="9" height="15" fill="rgb(249,187,42)"/><text x="1126.00" y="238.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (5 samples, 0.60%)</title><rect x="1125" y="244" width="7" height="15" fill="rgb(217,152,11)"/><text x="1128.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (4 samples, 0.48%)</title><rect x="1126" y="260" width="6" height="15" fill="rgb(237,181,37)"/><text x="1129.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1129" y="276" width="3" height="15" fill="rgb(252,98,28)"/><text x="1132.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1129" y="292" width="3" height="15" fill="rgb(219,228,13)"/><text x="1132.00" y="302.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1129" y="308" width="3" height="15" fill="rgb(231,125,32)"/><text x="1132.00" y="318.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c) (1 samples, 0.12%)</title><rect x="1131" y="324" width="1" height="15" fill="rgb(228,79,12)"/><text x="1134.00" y="334.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.12%)</title><rect x="1131" y="340" width="1" height="15" fill="rgb(220,210,7)"/><text x="1134.00" y="350.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (1 samples, 0.12%)</title><rect x="1131" y="356" width="1" height="15" fill="rgb(225,79,35)"/><text x="1134.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.12%)</title><rect x="1132" y="196" width="1" height="15" fill="rgb(206,70,53)"/><text x="1135.00" y="206.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (1 samples, 0.12%)</title><rect x="1133" y="228" width="2" height="15" fill="rgb(246,189,25)"/><text x="1136.00" y="238.50"></text></g><g><title>array_take (methods.c) (2 samples, 0.24%)</title><rect x="1133" y="196" width="3" height="15" fill="rgb(205,27,54)"/><text x="1136.00" y="206.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c) (2 samples, 0.24%)</title><rect x="1133" y="212" width="3" height="15" fill="rgb(234,121,48)"/><text x="1136.00" y="222.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.12%)</title><rect x="1135" y="228" width="1" height="15" fill="rgb(221,145,7)"/><text x="1138.00" y="238.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.12%)</title><rect x="1135" y="244" width="1" height="15" fill="rgb(226,180,7)"/><text x="1138.00" y="254.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.12%)</title><rect x="1135" y="260" width="1" height="15" fill="rgb(236,4,30)"/><text x="1138.00" y="270.50"></text></g><g><title>0x7f902c5fe2b0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="1138" y="356" width="1" height="15" fill="rgb(241,24,8)"/><text x="1141.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src) (2 samples, 0.24%)</title><rect x="1139" y="356" width="3" height="15" fill="rgb(236,4,49)"/><text x="1142.00" y="366.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (1 samples, 0.12%)</title><rect x="1140" y="372" width="2" height="15" fill="rgb(241,21,6)"/><text x="1143.00" y="382.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;) (5 samples, 0.60%)</title><rect x="1136" y="196" width="7" height="15" fill="rgb(219,19,1)"/><text x="1139.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 0.60%)</title><rect x="1136" y="212" width="7" height="15" fill="rgb(210,47,53)"/><text x="1139.00" y="222.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py) (5 samples, 0.60%)</title><rect x="1136" y="228" width="7" height="15" fill="rgb(208,169,40)"/><text x="1139.00" y="238.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (5 samples, 0.60%)</title><rect x="1136" y="244" width="7" height="15" fill="rgb(250,45,48)"/><text x="1139.00" y="254.50"></text></g><g><title>array_cumsum (methods.c) (5 samples, 0.60%)</title><rect x="1136" y="260" width="7" height="15" fill="rgb(213,127,8)"/><text x="1139.00" y="270.50"></text></g><g><title>PyArray_CumSum (calculation.c) (5 samples, 0.60%)</title><rect x="1136" y="276" width="7" height="15" fill="rgb(254,121,5)"/><text x="1139.00" y="286.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c) (5 samples, 0.60%)</title><rect x="1136" y="292" width="7" height="15" fill="rgb(231,56,2)"/><text x="1139.00" y="302.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c) (5 samples, 0.60%)</title><rect x="1136" y="308" width="7" height="15" fill="rgb(213,199,0)"/><text x="1139.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (5 samples, 0.60%)</title><rect x="1136" y="324" width="7" height="15" fill="rgb(244,45,28)"/><text x="1139.00" y="334.50"></text></g><g><title>PyUFunc_Accumulate (ufunc_object.c) (4 samples, 0.48%)</title><rect x="1138" y="340" width="5" height="15" fill="rgb(213,21,23)"/><text x="1141.00" y="350.50"></text></g><g><title>NpyIter_GetIterNext (nditer_templ.c.src) (1 samples, 0.12%)</title><rect x="1142" y="356" width="1" height="15" fill="rgb(235,145,22)"/><text x="1145.00" y="366.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.12%)</title><rect x="1150" y="324" width="2" height="15" fill="rgb(207,148,52)"/><text x="1153.00" y="334.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.12%)</title><rect x="1150" y="340" width="2" height="15" fill="rgb(211,136,5)"/><text x="1153.00" y="350.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (1 samples, 0.12%)</title><rect x="1150" y="356" width="2" height="15" fill="rgb(207,204,0)"/><text x="1153.00" y="366.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (1 samples, 0.12%)</title><rect x="1153" y="356" width="1" height="15" fill="rgb(211,29,12)"/><text x="1156.00" y="366.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (1 samples, 0.12%)</title><rect x="1153" y="372" width="1" height="15" fill="rgb(252,106,53)"/><text x="1156.00" y="382.50"></text></g><g><title>allocate_reduce_result (reduction.c) (1 samples, 0.12%)</title><rect x="1153" y="388" width="1" height="15" fill="rgb(209,15,4)"/><text x="1156.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.12%)</title><rect x="1153" y="404" width="1" height="15" fill="rgb(246,174,30)"/><text x="1156.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.12%)</title><rect x="1153" y="420" width="1" height="15" fill="rgb(236,202,32)"/><text x="1156.00" y="430.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;) (7 samples, 0.83%)</title><rect x="1146" y="244" width="10" height="15" fill="rgb(220,183,10)"/><text x="1149.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.71%)</title><rect x="1147" y="260" width="9" height="15" fill="rgb(222,15,6)"/><text x="1150.00" y="270.50"></text></g><g><title>all (numpy/core/fromnumeric.py) (5 samples, 0.60%)</title><rect x="1149" y="276" width="7" height="15" fill="rgb(211,103,28)"/><text x="1152.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (4 samples, 0.48%)</title><rect x="1150" y="292" width="6" height="15" fill="rgb(237,199,52)"/><text x="1153.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (4 samples, 0.48%)</title><rect x="1150" y="308" width="6" height="15" fill="rgb(210,139,35)"/><text x="1153.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.36%)</title><rect x="1152" y="324" width="4" height="15" fill="rgb(216,150,27)"/><text x="1155.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1153" y="340" width="3" height="15" fill="rgb(210,208,54)"/><text x="1156.00" y="350.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (1 samples, 0.12%)</title><rect x="1154" y="356" width="2" height="15" fill="rgb(244,209,42)"/><text x="1157.00" y="366.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c) (1 samples, 0.12%)</title><rect x="1154" y="372" width="2" height="15" fill="rgb(213,176,11)"/><text x="1157.00" y="382.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.12%)</title><rect x="1154" y="388" width="2" height="15" fill="rgb(248,80,12)"/><text x="1157.00" y="398.50"></text></g><g><title>result_type (&lt;__array_function__ internals&gt;) (2 samples, 0.24%)</title><rect x="1156" y="244" width="3" height="15" fill="rgb(238,170,5)"/><text x="1159.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.24%)</title><rect x="1156" y="260" width="3" height="15" fill="rgb(251,89,22)"/><text x="1159.00" y="270.50"></text></g><g><title>array_result_type (multiarraymodule.c) (2 samples, 0.24%)</title><rect x="1156" y="276" width="3" height="15" fill="rgb(253,118,28)"/><text x="1159.00" y="286.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.12%)</title><rect x="1157" y="292" width="2" height="15" fill="rgb(243,173,25)"/><text x="1160.00" y="302.50"></text></g><g><title>geterr (numpy/core/_ufunc_config.py) (1 samples, 0.12%)</title><rect x="1160" y="292" width="1" height="15" fill="rgb(225,24,44)"/><text x="1163.00" y="302.50"></text></g><g><title>__exit__ (numpy/core/_ufunc_config.py) (2 samples, 0.24%)</title><rect x="1160" y="260" width="3" height="15" fill="rgb(239,1,54)"/><text x="1163.00" y="270.50"></text></g><g><title>seterr (numpy/core/_ufunc_config.py) (2 samples, 0.24%)</title><rect x="1160" y="276" width="3" height="15" fill="rgb(248,83,36)"/><text x="1163.00" y="286.50"></text></g><g><title>ufunc_seterr (ufunc_object.c) (1 samples, 0.12%)</title><rect x="1161" y="292" width="2" height="15" fill="rgb(222,103,26)"/><text x="1164.00" y="302.50"></text></g><g><title>ufunc_update_use_defaults (extobj.c) (1 samples, 0.12%)</title><rect x="1161" y="308" width="2" height="15" fill="rgb(218,50,14)"/><text x="1164.00" y="318.50"></text></g><g><title>PyUFunc_GetPyValues (ufunc_object.c) (1 samples, 0.12%)</title><rect x="1161" y="324" width="2" height="15" fill="rgb(248,81,10)"/><text x="1164.00" y="334.50"></text></g><g><title>__init__ (numpy/core/_ufunc_config.py) (1 samples, 0.12%)</title><rect x="1163" y="260" width="1" height="15" fill="rgb(252,22,24)"/><text x="1166.00" y="270.50"></text></g><g><title>DOUBLE_add (loops.c.src) (1 samples, 0.12%)</title><rect x="1164" y="340" width="2" height="15" fill="rgb(252,213,31)"/><text x="1167.00" y="350.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (1 samples, 0.12%)</title><rect x="1164" y="356" width="2" height="15" fill="rgb(244,222,11)"/><text x="1167.00" y="366.50"></text></g><g><title>sse2_binary_scalar1_add_DOUBLE (simd.inc.src) (1 samples, 0.12%)</title><rect x="1164" y="372" width="2" height="15" fill="rgb(249,147,47)"/><text x="1167.00" y="382.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (1 samples, 0.12%)</title><rect x="1164" y="388" width="2" height="15" fill="rgb(213,10,16)"/><text x="1167.00" y="398.50"></text></g><g><title>array_add (number.c) (2 samples, 0.24%)</title><rect x="1164" y="260" width="3" height="15" fill="rgb(207,199,16)"/><text x="1167.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1164" y="276" width="3" height="15" fill="rgb(219,145,46)"/><text x="1167.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1164" y="292" width="3" height="15" fill="rgb(219,44,7)"/><text x="1167.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1164" y="308" width="3" height="15" fill="rgb(224,133,54)"/><text x="1167.00" y="318.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1164" y="324" width="3" height="15" fill="rgb(235,111,39)"/><text x="1167.00" y="334.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.12%)</title><rect x="1166" y="340" width="1" height="15" fill="rgb(237,191,37)"/><text x="1169.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.12%)</title><rect x="1167" y="292" width="1" height="15" fill="rgb(225,216,51)"/><text x="1170.00" y="302.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.12%)</title><rect x="1167" y="308" width="1" height="15" fill="rgb(237,109,52)"/><text x="1170.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.12%)</title><rect x="1167" y="324" width="1" height="15" fill="rgb(212,43,52)"/><text x="1170.00" y="334.50"></text></g><g><title>isclose (&lt;__array_function__ internals&gt;) (19 samples, 2.26%)</title><rect x="1143" y="196" width="27" height="15" fill="rgb(247,193,43)"/><text x="1146.00" y="206.50">i..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (19 samples, 2.26%)</title><rect x="1143" y="212" width="27" height="15" fill="rgb(224,54,29)"/><text x="1146.00" y="222.50">a..</text></g><g><title>isclose (numpy/core/numeric.py) (19 samples, 2.26%)</title><rect x="1143" y="228" width="27" height="15" fill="rgb(210,160,7)"/><text x="1146.00" y="238.50">i..</text></g><g><title>within_tol (numpy/core/numeric.py) (8 samples, 0.95%)</title><rect x="1159" y="244" width="11" height="15" fill="rgb(208,101,20)"/><text x="1162.00" y="254.50"></text></g><g><title>array_multiply (number.c) (2 samples, 0.24%)</title><rect x="1167" y="260" width="3" height="15" fill="rgb(242,53,42)"/><text x="1170.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.24%)</title><rect x="1167" y="276" width="3" height="15" fill="rgb(242,119,10)"/><text x="1170.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.12%)</title><rect x="1168" y="292" width="2" height="15" fill="rgb(252,61,16)"/><text x="1171.00" y="302.50"></text></g><g><title>0x7f902c5fde10 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="1168" y="308" width="2" height="15" fill="rgb(237,153,42)"/><text x="1171.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.12%)</title><rect x="1173" y="276" width="1" height="15" fill="rgb(220,101,10)"/><text x="1176.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.12%)</title><rect x="1173" y="292" width="1" height="15" fill="rgb(227,99,40)"/><text x="1176.00" y="302.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.12%)</title><rect x="1173" y="308" width="1" height="15" fill="rgb(214,200,25)"/><text x="1176.00" y="318.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.12%)</title><rect x="1173" y="324" width="1" height="15" fill="rgb(222,126,36)"/><text x="1176.00" y="334.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.12%)</title><rect x="1173" y="340" width="1" height="15" fill="rgb(220,166,49)"/><text x="1176.00" y="350.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py) (160 samples, 19.05%)</title><rect x="955" y="164" width="225" height="15" fill="rgb(223,130,23)"/><text x="958.00" y="174.50">_get_median_predict (sklearn/..</text></g><g><title>stable_cumsum (sklearn/utils/extmath.py) (43 samples, 5.12%)</title><rect x="1119" y="180" width="61" height="15" fill="rgb(218,145,18)"/><text x="1122.00" y="190.50">stable..</text></g><g><title>sum (&lt;__array_function__ internals&gt;) (7 samples, 0.83%)</title><rect x="1170" y="196" width="10" height="15" fill="rgb(213,95,18)"/><text x="1173.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 0.83%)</title><rect x="1170" y="212" width="10" height="15" fill="rgb(229,185,18)"/><text x="1173.00" y="222.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (7 samples, 0.83%)</title><rect x="1170" y="228" width="10" height="15" fill="rgb(242,172,50)"/><text x="1173.00" y="238.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (6 samples, 0.71%)</title><rect x="1171" y="244" width="9" height="15" fill="rgb(233,55,34)"/><text x="1174.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (5 samples, 0.60%)</title><rect x="1173" y="260" width="7" height="15" fill="rgb(240,70,11)"/><text x="1176.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 0.48%)</title><rect x="1174" y="276" width="6" height="15" fill="rgb(205,59,31)"/><text x="1177.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (4 samples, 0.48%)</title><rect x="1174" y="292" width="6" height="15" fill="rgb(209,107,19)"/><text x="1177.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (4 samples, 0.48%)</title><rect x="1174" y="308" width="6" height="15" fill="rgb(206,197,7)"/><text x="1177.00" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c) (4 samples, 0.48%)</title><rect x="1174" y="324" width="6" height="15" fill="rgb(240,96,8)"/><text x="1177.00" y="334.50"></text></g><g><title>DOUBLE_add (loops.c.src) (4 samples, 0.48%)</title><rect x="1174" y="340" width="6" height="15" fill="rgb(235,139,51)"/><text x="1177.00" y="350.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (2 samples, 0.24%)</title><rect x="1177" y="356" width="3" height="15" fill="rgb(214,134,6)"/><text x="1180.00" y="366.50"></text></g><g><title>_validate_data (sklearn/ensemble/_weight_boosting.py) (3 samples, 0.36%)</title><rect x="1180" y="164" width="4" height="15" fill="rgb(232,95,22)"/><text x="1183.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (2 samples, 0.24%)</title><rect x="1181" y="180" width="3" height="15" fill="rgb(248,28,48)"/><text x="1184.00" y="190.50"></text></g><g><title>simplefilter (warnings.py) (1 samples, 0.12%)</title><rect x="1182" y="196" width="2" height="15" fill="rgb(217,151,2)"/><text x="1185.00" y="206.50"></text></g><g><title>_add_filter (warnings.py) (1 samples, 0.12%)</title><rect x="1182" y="212" width="2" height="15" fill="rgb(207,125,14)"/><text x="1185.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (165 samples, 19.64%)</title><rect x="955" y="132" width="232" height="15" fill="rgb(252,188,13)"/><text x="958.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchm..</text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py) (165 samples, 19.64%)</title><rect x="955" y="148" width="232" height="15" fill="rgb(232,159,37)"/><text x="958.00" y="158.50">predict (sklearn/ensemble/_wei..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (2 samples, 0.24%)</title><rect x="1184" y="164" width="3" height="15" fill="rgb(251,217,31)"/><text x="1187.00" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (1 samples, 0.12%)</title><rect x="1185" y="180" width="2" height="15" fill="rgb(241,204,15)"/><text x="1188.00" y="190.50"></text></g><g><title>profile_skl (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (167 samples, 19.88%)</title><rect x="953" y="68" width="235" height="15" fill="rgb(236,86,43)"/><text x="956.00" y="78.50">profile_skl (bench_AdaBoostRegr..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (167 samples, 19.88%)</title><rect x="953" y="84" width="235" height="15" fill="rgb(249,143,11)"/><text x="956.00" y="94.50">setup_profile (bench_AdaBoostRe..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (167 samples, 19.88%)</title><rect x="953" y="100" width="235" height="15" fill="rgb(210,50,7)"/><text x="956.00" y="110.50">profile (bench_AdaBoostRegresso..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (167 samples, 19.88%)</title><rect x="953" y="116" width="235" height="15" fill="rgb(251,7,16)"/><text x="956.00" y="126.50">time_predict (mlprodict/asv_ben..</text></g><g><title>unicode_hash (python3.7) (1 samples, 0.12%)</title><rect x="1187" y="132" width="1" height="15" fill="rgb(219,211,35)"/><text x="1190.00" y="142.50"></text></g><g><title>all (840 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(216,107,1)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (840 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(254,63,27)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py)</text></g><g><title>start (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (1 samples, 0.12%)</title><rect x="1188" y="68" width="2" height="15" fill="rgb(235,143,10)"/><text x="1191.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_64_n_estimators5.py) (1 samples, 0.12%)</title><rect x="1188" y="84" width="2" height="15" fill="rgb(251,133,37)"/><text x="1191.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.12%)</title><rect x="1188" y="100" width="2" height="15" fill="rgb(254,222,0)"/><text x="1191.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.12%)</title><rect x="1188" y="116" width="2" height="15" fill="rgb(210,152,13)"/><text x="1191.00" y="126.50"></text></g><g><title>fit (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.12%)</title><rect x="1188" y="132" width="2" height="15" fill="rgb(242,90,24)"/><text x="1191.00" y="142.50"></text></g><g><title>_boost (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.12%)</title><rect x="1188" y="148" width="2" height="15" fill="rgb(246,229,45)"/><text x="1191.00" y="158.50"></text></g><g><title>_make_estimator (sklearn/ensemble/_base.py) (1 samples, 0.12%)</title><rect x="1188" y="164" width="2" height="15" fill="rgb(249,151,23)"/><text x="1191.00" y="174.50"></text></g><g><title>clone (sklearn/base.py) (1 samples, 0.12%)</title><rect x="1188" y="180" width="2" height="15" fill="rgb(251,191,7)"/><text x="1191.00" y="190.50"></text></g><g><title>get_params (sklearn/base.py) (1 samples, 0.12%)</title><rect x="1188" y="196" width="2" height="15" fill="rgb(245,103,29)"/><text x="1191.00" y="206.50"></text></g><g><title>_get_param_names (sklearn/base.py) (1 samples, 0.12%)</title><rect x="1188" y="212" width="2" height="15" fill="rgb(222,117,17)"/><text x="1191.00" y="222.50"></text></g><g><title>signature (inspect.py) (1 samples, 0.12%)</title><rect x="1188" y="228" width="2" height="15" fill="rgb(207,157,27)"/><text x="1191.00" y="238.50"></text></g><g><title>from_callable (inspect.py) (1 samples, 0.12%)</title><rect x="1188" y="244" width="2" height="15" fill="rgb(218,137,50)"/><text x="1191.00" y="254.50"></text></g><g><title>_signature_from_callable (inspect.py) (1 samples, 0.12%)</title><rect x="1188" y="260" width="2" height="15" fill="rgb(244,73,8)"/><text x="1191.00" y="270.50"></text></g><g><title>_signature_from_function (inspect.py) (1 samples, 0.12%)</title><rect x="1188" y="276" width="2" height="15" fill="rgb(234,62,3)"/><text x="1191.00" y="286.50"></text></g></g></svg>