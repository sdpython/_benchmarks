<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1686" onload="init(evt)" viewBox="0 0 1200 1686" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1686" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1669.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1669.00"> </text><g id="frames"><g><title>DistInfoDistribution (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="10" y="836" width="2" height="15" fill="rgb(216,109,9)"/><text x="13.00" y="846.50"></text></g><g><title>compile (re.py) (1 samples, 0.22%)</title><rect x="10" y="852" width="2" height="15" fill="rgb(225,50,16)"/><text x="13.00" y="862.50"></text></g><g><title>_compile (re.py) (1 samples, 0.22%)</title><rect x="10" y="868" width="2" height="15" fill="rgb(221,76,40)"/><text x="13.00" y="878.50"></text></g><g><title>compile (sre_compile.py) (1 samples, 0.22%)</title><rect x="10" y="884" width="2" height="15" fill="rgb(223,188,49)"/><text x="13.00" y="894.50"></text></g><g><title>parse (sre_parse.py) (1 samples, 0.22%)</title><rect x="10" y="900" width="2" height="15" fill="rgb(215,219,15)"/><text x="13.00" y="910.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.22%)</title><rect x="10" y="916" width="2" height="15" fill="rgb(220,34,44)"/><text x="13.00" y="926.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="12" y="868" width="3" height="15" fill="rgb(244,205,4)"/><text x="15.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="12" y="884" width="3" height="15" fill="rgb(249,46,28)"/><text x="15.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="12" y="900" width="3" height="15" fill="rgb(238,106,50)"/><text x="15.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="12" y="916" width="3" height="15" fill="rgb(243,152,31)"/><text x="15.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="932" width="3" height="15" fill="rgb(206,3,34)"/><text x="15.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="948" width="3" height="15" fill="rgb(212,152,30)"/><text x="15.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="964" width="3" height="15" fill="rgb(233,153,16)"/><text x="15.00" y="974.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="980" width="3" height="15" fill="rgb(228,215,46)"/><text x="15.00" y="990.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="996" width="3" height="15" fill="rgb(241,31,28)"/><text x="15.00" y="1006.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="1012" width="3" height="15" fill="rgb(211,195,36)"/><text x="15.00" y="1022.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.22%)</title><rect x="12" y="1028" width="3" height="15" fill="rgb(231,41,23)"/><text x="15.00" y="1038.50"></text></g><g><title>unicode_decode_locale (python3.7) (1 samples, 0.22%)</title><rect x="12" y="1044" width="3" height="15" fill="rgb(211,85,47)"/><text x="15.00" y="1054.50"></text></g><g><title>mbstowcs (libc-2.29.so) (1 samples, 0.22%)</title><rect x="12" y="1060" width="3" height="15" fill="rgb(243,50,26)"/><text x="15.00" y="1070.50"></text></g><g><title>mbsrtowcs (libc-2.29.so) (1 samples, 0.22%)</title><rect x="12" y="1076" width="3" height="15" fill="rgb(207,215,23)"/><text x="15.00" y="1086.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="596" width="7" height="15" fill="rgb(213,53,28)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="612" width="7" height="15" fill="rgb(211,52,14)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="628" width="7" height="15" fill="rgb(243,169,49)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="644" width="7" height="15" fill="rgb(236,218,54)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="660" width="7" height="15" fill="rgb(252,152,3)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="676" width="7" height="15" fill="rgb(216,137,19)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="10" y="692" width="7" height="15" fill="rgb(254,204,2)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="708" width="7" height="15" fill="rgb(237,20,29)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (3 samples, 0.65%)</title><rect x="10" y="724" width="7" height="15" fill="rgb(212,6,25)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="740" width="7" height="15" fill="rgb(207,39,47)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="756" width="7" height="15" fill="rgb(211,131,38)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="772" width="7" height="15" fill="rgb(249,29,10)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="10" y="788" width="7" height="15" fill="rgb(209,157,11)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="804" width="7" height="15" fill="rgb(241,165,32)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (3 samples, 0.65%)</title><rect x="10" y="820" width="7" height="15" fill="rgb(208,32,1)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="12" y="836" width="5" height="15" fill="rgb(238,137,50)"/><text x="15.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="12" y="852" width="5" height="15" fill="rgb(235,10,20)"/><text x="15.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="868" width="2" height="15" fill="rgb(213,121,42)"/><text x="18.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="884" width="2" height="15" fill="rgb(239,93,0)"/><text x="18.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="900" width="2" height="15" fill="rgb(222,26,43)"/><text x="18.00" y="910.50"></text></g><g><title>from_location (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="916" width="2" height="15" fill="rgb(214,221,22)"/><text x="18.00" y="926.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="932" width="2" height="15" fill="rgb(228,47,0)"/><text x="18.00" y="942.50"></text></g><g><title>safe_version (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="948" width="2" height="15" fill="rgb(207,94,24)"/><text x="18.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.22%)</title><rect x="15" y="964" width="2" height="15" fill="rgb(254,202,3)"/><text x="18.00" y="974.50"></text></g><g><title>_sre_SRE_Pattern_search (python3.7) (1 samples, 0.22%)</title><rect x="15" y="980" width="2" height="15" fill="rgb(240,27,31)"/><text x="18.00" y="990.50"></text></g><g><title>sre_search.cold.44 (python3.7) (1 samples, 0.22%)</title><rect x="15" y="996" width="2" height="15" fill="rgb(212,27,24)"/><text x="18.00" y="1006.50"></text></g><g><title>sre_ucs1_match (python3.7) (1 samples, 0.22%)</title><rect x="15" y="1012" width="2" height="15" fill="rgb(206,220,21)"/><text x="18.00" y="1022.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (4 samples, 0.87%)</title><rect x="10" y="292" width="10" height="15" fill="rgb(247,72,44)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="308" width="10" height="15" fill="rgb(225,188,12)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="324" width="10" height="15" fill="rgb(211,110,54)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="340" width="10" height="15" fill="rgb(215,34,45)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.87%)</title><rect x="10" y="356" width="10" height="15" fill="rgb(233,124,27)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="372" width="10" height="15" fill="rgb(253,151,39)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (4 samples, 0.87%)</title><rect x="10" y="388" width="10" height="15" fill="rgb(213,28,26)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="404" width="10" height="15" fill="rgb(225,203,23)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="420" width="10" height="15" fill="rgb(245,48,16)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="436" width="10" height="15" fill="rgb(240,26,15)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.87%)</title><rect x="10" y="452" width="10" height="15" fill="rgb(240,177,38)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="468" width="10" height="15" fill="rgb(244,204,27)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (4 samples, 0.87%)</title><rect x="10" y="484" width="10" height="15" fill="rgb(254,155,53)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="500" width="10" height="15" fill="rgb(251,101,4)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="516" width="10" height="15" fill="rgb(253,144,37)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="532" width="10" height="15" fill="rgb(235,167,12)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.87%)</title><rect x="10" y="548" width="10" height="15" fill="rgb(248,43,4)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="564" width="10" height="15" fill="rgb(223,160,20)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (4 samples, 0.87%)</title><rect x="10" y="580" width="10" height="15" fill="rgb(251,87,29)"/><text x="13.00" y="590.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="596" width="3" height="15" fill="rgb(222,168,51)"/><text x="20.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="612" width="3" height="15" fill="rgb(244,126,8)"/><text x="20.00" y="622.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="628" width="3" height="15" fill="rgb(218,83,37)"/><text x="20.00" y="638.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="644" width="3" height="15" fill="rgb(206,151,26)"/><text x="20.00" y="654.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="660" width="3" height="15" fill="rgb(245,170,34)"/><text x="20.00" y="670.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="676" width="3" height="15" fill="rgb(221,140,9)"/><text x="20.00" y="686.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="692" width="3" height="15" fill="rgb(229,211,44)"/><text x="20.00" y="702.50"></text></g><g><title>&lt;module&gt; (protobuf/descriptor.py) (1 samples, 0.22%)</title><rect x="17" y="708" width="3" height="15" fill="rgb(226,71,9)"/><text x="20.00" y="718.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="724" width="3" height="15" fill="rgb(253,223,43)"/><text x="20.00" y="734.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="740" width="3" height="15" fill="rgb(226,77,37)"/><text x="20.00" y="750.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="756" width="3" height="15" fill="rgb(228,96,25)"/><text x="20.00" y="766.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="772" width="3" height="15" fill="rgb(217,146,17)"/><text x="20.00" y="782.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="788" width="3" height="15" fill="rgb(222,206,50)"/><text x="20.00" y="798.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="804" width="3" height="15" fill="rgb(221,190,19)"/><text x="20.00" y="814.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="820" width="3" height="15" fill="rgb(205,146,10)"/><text x="20.00" y="830.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="836" width="3" height="15" fill="rgb(224,77,27)"/><text x="20.00" y="846.50"></text></g><g><title>0x7f9063b02652 (?) (1 samples, 0.22%)</title><rect x="17" y="852" width="3" height="15" fill="rgb(217,162,32)"/><text x="20.00" y="862.50"></text></g><g><title>0x7f9063b07ef3 (?) (1 samples, 0.22%)</title><rect x="17" y="868" width="3" height="15" fill="rgb(223,95,36)"/><text x="20.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="884" width="3" height="15" fill="rgb(228,220,48)"/><text x="20.00" y="894.50"></text></g><g><title>__enter__ (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="900" width="3" height="15" fill="rgb(248,89,8)"/><text x="20.00" y="910.50"></text></g><g><title>_get_module_lock (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="916" width="3" height="15" fill="rgb(210,217,38)"/><text x="20.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="10" y="196" width="12" height="15" fill="rgb(222,206,30)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="10" y="212" width="12" height="15" fill="rgb(220,89,19)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="10" y="228" width="12" height="15" fill="rgb(207,200,49)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="10" y="244" width="12" height="15" fill="rgb(205,97,28)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="10" y="260" width="12" height="15" fill="rgb(248,37,9)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="10" y="276" width="12" height="15" fill="rgb(228,219,20)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (1 samples, 0.22%)</title><rect x="20" y="292" width="2" height="15" fill="rgb(212,177,38)"/><text x="23.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="308" width="2" height="15" fill="rgb(214,199,40)"/><text x="23.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="324" width="2" height="15" fill="rgb(228,126,4)"/><text x="23.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="340" width="2" height="15" fill="rgb(215,223,51)"/><text x="23.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="356" width="2" height="15" fill="rgb(215,229,11)"/><text x="23.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="372" width="2" height="15" fill="rgb(224,17,52)"/><text x="23.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (1 samples, 0.22%)</title><rect x="20" y="388" width="2" height="15" fill="rgb(229,53,16)"/><text x="23.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="404" width="2" height="15" fill="rgb(228,226,52)"/><text x="23.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="420" width="2" height="15" fill="rgb(229,100,51)"/><text x="23.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="436" width="2" height="15" fill="rgb(247,26,22)"/><text x="23.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="452" width="2" height="15" fill="rgb(213,132,12)"/><text x="23.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="468" width="2" height="15" fill="rgb(214,172,14)"/><text x="23.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (1 samples, 0.22%)</title><rect x="20" y="484" width="2" height="15" fill="rgb(250,67,21)"/><text x="23.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="500" width="2" height="15" fill="rgb(207,97,12)"/><text x="23.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="516" width="2" height="15" fill="rgb(240,77,11)"/><text x="23.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="532" width="2" height="15" fill="rgb(212,46,22)"/><text x="23.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="548" width="2" height="15" fill="rgb(225,46,18)"/><text x="23.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="564" width="2" height="15" fill="rgb(218,41,3)"/><text x="23.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (1 samples, 0.22%)</title><rect x="20" y="580" width="2" height="15" fill="rgb(250,193,5)"/><text x="23.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="596" width="2" height="15" fill="rgb(233,177,32)"/><text x="23.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="612" width="2" height="15" fill="rgb(233,1,25)"/><text x="23.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="628" width="2" height="15" fill="rgb(232,165,47)"/><text x="23.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="644" width="2" height="15" fill="rgb(212,77,31)"/><text x="23.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="660" width="2" height="15" fill="rgb(233,34,33)"/><text x="23.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (1 samples, 0.22%)</title><rect x="20" y="676" width="2" height="15" fill="rgb(248,89,16)"/><text x="23.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="692" width="2" height="15" fill="rgb(224,109,0)"/><text x="23.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="708" width="2" height="15" fill="rgb(225,15,53)"/><text x="23.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="724" width="2" height="15" fill="rgb(236,59,47)"/><text x="23.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="740" width="2" height="15" fill="rgb(247,213,41)"/><text x="23.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="756" width="2" height="15" fill="rgb(252,147,1)"/><text x="23.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (1 samples, 0.22%)</title><rect x="20" y="772" width="2" height="15" fill="rgb(239,178,11)"/><text x="23.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="788" width="2" height="15" fill="rgb(222,133,6)"/><text x="23.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="804" width="2" height="15" fill="rgb(222,212,27)"/><text x="23.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="820" width="2" height="15" fill="rgb(219,98,11)"/><text x="23.00" y="830.50"></text></g><g><title>__enter__ (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="836" width="2" height="15" fill="rgb(250,204,25)"/><text x="23.00" y="846.50"></text></g><g><title>_get_module_lock (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="852" width="2" height="15" fill="rgb(210,144,42)"/><text x="23.00" y="862.50"></text></g><g><title>__init__ (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="868" width="2" height="15" fill="rgb(228,153,48)"/><text x="23.00" y="878.50"></text></g><g><title>&lt;module&gt; (skl2onnx/_parse.py) (1 samples, 0.22%)</title><rect x="22" y="1204" width="3" height="15" fill="rgb(233,57,18)"/><text x="25.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1220" width="3" height="15" fill="rgb(207,174,4)"/><text x="25.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1236" width="3" height="15" fill="rgb(241,64,3)"/><text x="25.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1252" width="3" height="15" fill="rgb(220,171,19)"/><text x="25.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1268" width="3" height="15" fill="rgb(253,134,18)"/><text x="25.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1284" width="3" height="15" fill="rgb(249,22,15)"/><text x="25.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/_supported_operators.py) (1 samples, 0.22%)</title><rect x="22" y="1300" width="3" height="15" fill="rgb(225,149,28)"/><text x="25.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1316" width="3" height="15" fill="rgb(243,26,27)"/><text x="25.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1332" width="3" height="15" fill="rgb(234,217,49)"/><text x="25.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1348" width="3" height="15" fill="rgb(230,197,46)"/><text x="25.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1364" width="3" height="15" fill="rgb(238,102,31)"/><text x="25.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1380" width="3" height="15" fill="rgb(242,190,49)"/><text x="25.00" y="1390.50"></text></g><g><title>&lt;module&gt; (sklearn/discriminant_analysis.py) (1 samples, 0.22%)</title><rect x="22" y="1396" width="3" height="15" fill="rgb(247,204,23)"/><text x="25.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1412" width="3" height="15" fill="rgb(233,79,45)"/><text x="25.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1428" width="3" height="15" fill="rgb(246,112,12)"/><text x="25.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1444" width="3" height="15" fill="rgb(250,65,11)"/><text x="25.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1460" width="3" height="15" fill="rgb(213,67,24)"/><text x="25.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1476" width="3" height="15" fill="rgb(223,24,29)"/><text x="25.00" y="1486.50"></text></g><g><title>&lt;module&gt; (sklearn/covariance/__init__.py) (1 samples, 0.22%)</title><rect x="22" y="1492" width="3" height="15" fill="rgb(219,185,50)"/><text x="25.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1508" width="3" height="15" fill="rgb(230,176,14)"/><text x="25.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1524" width="3" height="15" fill="rgb(246,37,52)"/><text x="25.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1540" width="3" height="15" fill="rgb(216,68,12)"/><text x="25.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1556" width="3" height="15" fill="rgb(252,136,8)"/><text x="25.00" y="1566.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1572" width="3" height="15" fill="rgb(218,21,42)"/><text x="25.00" y="1582.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1588" width="3" height="15" fill="rgb(250,122,4)"/><text x="25.00" y="1598.50"></text></g><g><title>0x7f90757d9167 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="25" y="1396" width="2" height="15" fill="rgb(243,69,32)"/><text x="28.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="1124" width="8" height="15" fill="rgb(213,67,17)"/><text x="25.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="1140" width="8" height="15" fill="rgb(252,29,18)"/><text x="25.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="1156" width="8" height="15" fill="rgb(251,67,12)"/><text x="25.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="22" y="1172" width="8" height="15" fill="rgb(210,7,7)"/><text x="25.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="1188" width="8" height="15" fill="rgb(229,223,3)"/><text x="25.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py) (2 samples, 0.43%)</title><rect x="25" y="1204" width="5" height="15" fill="rgb(246,173,9)"/><text x="28.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1220" width="5" height="15" fill="rgb(224,38,2)"/><text x="28.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1236" width="5" height="15" fill="rgb(207,193,1)"/><text x="28.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1252" width="5" height="15" fill="rgb(214,125,46)"/><text x="28.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="25" y="1268" width="5" height="15" fill="rgb(216,20,38)"/><text x="28.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1284" width="5" height="15" fill="rgb(242,30,45)"/><text x="28.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_container.py) (2 samples, 0.43%)</title><rect x="25" y="1300" width="5" height="15" fill="rgb(232,184,34)"/><text x="28.00" y="1310.50"></text></g><g><title>_get_operation_list (skl2onnx/common/_container.py) (2 samples, 0.43%)</title><rect x="25" y="1316" width="5" height="15" fill="rgb(221,5,44)"/><text x="28.00" y="1326.50"></text></g><g><title>getsource (inspect.py) (2 samples, 0.43%)</title><rect x="25" y="1332" width="5" height="15" fill="rgb(250,69,15)"/><text x="28.00" y="1342.50"></text></g><g><title>getsourcelines (inspect.py) (2 samples, 0.43%)</title><rect x="25" y="1348" width="5" height="15" fill="rgb(244,156,49)"/><text x="28.00" y="1358.50"></text></g><g><title>getblock (inspect.py) (2 samples, 0.43%)</title><rect x="25" y="1364" width="5" height="15" fill="rgb(234,216,18)"/><text x="28.00" y="1374.50"></text></g><g><title>_tokenize (tokenize.py) (2 samples, 0.43%)</title><rect x="25" y="1380" width="5" height="15" fill="rgb(219,95,46)"/><text x="28.00" y="1390.50"></text></g><g><title>_compile (tokenize.py) (1 samples, 0.22%)</title><rect x="27" y="1396" width="3" height="15" fill="rgb(238,93,19)"/><text x="30.00" y="1406.50"></text></g><g><title>compile (re.py) (1 samples, 0.22%)</title><rect x="27" y="1412" width="3" height="15" fill="rgb(228,217,2)"/><text x="30.00" y="1422.50"></text></g><g><title>_compile (re.py) (1 samples, 0.22%)</title><rect x="27" y="1428" width="3" height="15" fill="rgb(211,16,41)"/><text x="30.00" y="1438.50"></text></g><g><title>compile (sre_compile.py) (1 samples, 0.22%)</title><rect x="27" y="1444" width="3" height="15" fill="rgb(236,73,23)"/><text x="30.00" y="1454.50"></text></g><g><title>parse (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1460" width="3" height="15" fill="rgb(236,223,42)"/><text x="30.00" y="1470.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1476" width="3" height="15" fill="rgb(250,194,32)"/><text x="30.00" y="1486.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1492" width="3" height="15" fill="rgb(253,99,54)"/><text x="30.00" y="1502.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1508" width="3" height="15" fill="rgb(223,159,45)"/><text x="30.00" y="1518.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1524" width="3" height="15" fill="rgb(246,121,31)"/><text x="30.00" y="1534.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1540" width="3" height="15" fill="rgb(245,145,36)"/><text x="30.00" y="1550.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1556" width="3" height="15" fill="rgb(224,65,38)"/><text x="30.00" y="1566.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1572" width="3" height="15" fill="rgb(239,118,35)"/><text x="30.00" y="1582.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1588" width="3" height="15" fill="rgb(243,193,38)"/><text x="30.00" y="1598.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1604" width="3" height="15" fill="rgb(232,210,20)"/><text x="30.00" y="1614.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1620" width="3" height="15" fill="rgb(213,154,10)"/><text x="30.00" y="1630.50"></text></g><g><title>tell (sre_parse.py) (1 samples, 0.22%)</title><rect x="27" y="1636" width="3" height="15" fill="rgb(241,33,31)"/><text x="30.00" y="1646.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (5 samples, 1.08%)</title><rect x="22" y="436" width="13" height="15" fill="rgb(214,118,53)"/><text x="25.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="452" width="13" height="15" fill="rgb(208,214,24)"/><text x="25.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="468" width="13" height="15" fill="rgb(237,71,53)"/><text x="25.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="484" width="13" height="15" fill="rgb(254,223,5)"/><text x="25.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="500" width="13" height="15" fill="rgb(214,118,31)"/><text x="25.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="516" width="13" height="15" fill="rgb(228,128,39)"/><text x="25.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="532" width="13" height="15" fill="rgb(216,227,30)"/><text x="25.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="22" y="548" width="13" height="15" fill="rgb(230,17,4)"/><text x="25.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="564" width="13" height="15" fill="rgb(205,192,38)"/><text x="25.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (5 samples, 1.08%)</title><rect x="22" y="580" width="13" height="15" fill="rgb(227,187,5)"/><text x="25.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="596" width="13" height="15" fill="rgb(237,59,45)"/><text x="25.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="612" width="13" height="15" fill="rgb(229,161,16)"/><text x="25.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="628" width="13" height="15" fill="rgb(229,228,16)"/><text x="25.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="22" y="644" width="13" height="15" fill="rgb(243,223,46)"/><text x="25.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="660" width="13" height="15" fill="rgb(240,92,28)"/><text x="25.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (5 samples, 1.08%)</title><rect x="22" y="676" width="13" height="15" fill="rgb(212,159,46)"/><text x="25.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="692" width="13" height="15" fill="rgb(216,31,13)"/><text x="25.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="708" width="13" height="15" fill="rgb(226,81,23)"/><text x="25.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="724" width="13" height="15" fill="rgb(241,150,13)"/><text x="25.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="22" y="740" width="13" height="15" fill="rgb(253,226,53)"/><text x="25.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="756" width="13" height="15" fill="rgb(237,160,43)"/><text x="25.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (5 samples, 1.08%)</title><rect x="22" y="772" width="13" height="15" fill="rgb(222,117,26)"/><text x="25.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="788" width="13" height="15" fill="rgb(228,216,40)"/><text x="25.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="804" width="13" height="15" fill="rgb(226,109,25)"/><text x="25.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="820" width="13" height="15" fill="rgb(241,224,41)"/><text x="25.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="22" y="836" width="13" height="15" fill="rgb(216,87,23)"/><text x="25.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="852" width="13" height="15" fill="rgb(249,109,45)"/><text x="25.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (5 samples, 1.08%)</title><rect x="22" y="868" width="13" height="15" fill="rgb(223,3,42)"/><text x="25.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="884" width="13" height="15" fill="rgb(232,49,14)"/><text x="25.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="900" width="13" height="15" fill="rgb(219,59,16)"/><text x="25.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="916" width="13" height="15" fill="rgb(252,24,41)"/><text x="25.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="932" width="13" height="15" fill="rgb(212,180,50)"/><text x="25.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="948" width="13" height="15" fill="rgb(243,51,50)"/><text x="25.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="964" width="13" height="15" fill="rgb(217,115,22)"/><text x="25.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="22" y="980" width="13" height="15" fill="rgb(219,187,32)"/><text x="25.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="996" width="13" height="15" fill="rgb(249,172,26)"/><text x="25.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (5 samples, 1.08%)</title><rect x="22" y="1012" width="13" height="15" fill="rgb(224,55,33)"/><text x="25.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="1028" width="13" height="15" fill="rgb(244,199,31)"/><text x="25.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="1044" width="13" height="15" fill="rgb(226,125,47)"/><text x="25.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="1060" width="13" height="15" fill="rgb(252,183,3)"/><text x="25.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="22" y="1076" width="13" height="15" fill="rgb(239,197,1)"/><text x="25.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="22" y="1092" width="13" height="15" fill="rgb(247,190,8)"/><text x="25.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (5 samples, 1.08%)</title><rect x="22" y="1108" width="13" height="15" fill="rgb(210,57,50)"/><text x="25.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1124" width="5" height="15" fill="rgb(206,64,16)"/><text x="33.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1140" width="5" height="15" fill="rgb(246,224,25)"/><text x="33.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1156" width="5" height="15" fill="rgb(231,45,48)"/><text x="33.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1172" width="5" height="15" fill="rgb(233,134,32)"/><text x="33.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1188" width="5" height="15" fill="rgb(242,172,2)"/><text x="33.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="30" y="1204" width="5" height="15" fill="rgb(213,63,12)"/><text x="33.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1220" width="5" height="15" fill="rgb(219,220,3)"/><text x="33.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (2 samples, 0.43%)</title><rect x="30" y="1236" width="5" height="15" fill="rgb(220,94,42)"/><text x="33.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1252" width="5" height="15" fill="rgb(239,17,44)"/><text x="33.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1268" width="5" height="15" fill="rgb(242,134,9)"/><text x="33.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1284" width="5" height="15" fill="rgb(235,76,18)"/><text x="33.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1300" width="5" height="15" fill="rgb(252,2,22)"/><text x="33.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1316" width="5" height="15" fill="rgb(227,88,48)"/><text x="33.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="30" y="1332" width="5" height="15" fill="rgb(230,79,13)"/><text x="33.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1348" width="5" height="15" fill="rgb(229,61,40)"/><text x="33.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (2 samples, 0.43%)</title><rect x="30" y="1364" width="5" height="15" fill="rgb(216,59,7)"/><text x="33.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1380" width="5" height="15" fill="rgb(239,8,14)"/><text x="33.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1396" width="5" height="15" fill="rgb(205,161,37)"/><text x="33.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1412" width="5" height="15" fill="rgb(240,65,7)"/><text x="33.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="30" y="1428" width="5" height="15" fill="rgb(228,109,34)"/><text x="33.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1444" width="5" height="15" fill="rgb(220,28,1)"/><text x="33.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (2 samples, 0.43%)</title><rect x="30" y="1460" width="5" height="15" fill="rgb(238,137,14)"/><text x="33.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (2 samples, 0.43%)</title><rect x="30" y="1476" width="5" height="15" fill="rgb(230,159,27)"/><text x="33.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (2 samples, 0.43%)</title><rect x="30" y="1492" width="5" height="15" fill="rgb(215,186,4)"/><text x="33.00" y="1502.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py) (1 samples, 0.22%)</title><rect x="32" y="1508" width="3" height="15" fill="rgb(252,137,53)"/><text x="35.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py) (1 samples, 0.22%)</title><rect x="32" y="1524" width="3" height="15" fill="rgb(252,66,45)"/><text x="35.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py) (1 samples, 0.22%)</title><rect x="32" y="1540" width="3" height="15" fill="rgb(215,195,27)"/><text x="35.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.22%)</title><rect x="32" y="1556" width="3" height="15" fill="rgb(237,129,29)"/><text x="35.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;) (1 samples, 0.22%)</title><rect x="32" y="1572" width="3" height="15" fill="rgb(230,2,37)"/><text x="35.00" y="1582.50"></text></g><g><title>call (jinja2/runtime.py) (1 samples, 0.22%)</title><rect x="32" y="1588" width="3" height="15" fill="rgb(206,89,4)"/><text x="35.00" y="1598.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (6 samples, 1.30%)</title><rect x="22" y="244" width="16" height="15" fill="rgb(236,205,3)"/><text x="25.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="260" width="16" height="15" fill="rgb(215,186,25)"/><text x="25.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="276" width="16" height="15" fill="rgb(222,168,6)"/><text x="25.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="292" width="16" height="15" fill="rgb(209,220,37)"/><text x="25.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.30%)</title><rect x="22" y="308" width="16" height="15" fill="rgb(241,129,15)"/><text x="25.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="324" width="16" height="15" fill="rgb(250,94,33)"/><text x="25.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (6 samples, 1.30%)</title><rect x="22" y="340" width="16" height="15" fill="rgb(211,45,27)"/><text x="25.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="356" width="16" height="15" fill="rgb(233,83,4)"/><text x="25.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="372" width="16" height="15" fill="rgb(243,180,45)"/><text x="25.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="388" width="16" height="15" fill="rgb(225,226,23)"/><text x="25.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.30%)</title><rect x="22" y="404" width="16" height="15" fill="rgb(242,71,23)"/><text x="25.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="420" width="16" height="15" fill="rgb(240,136,1)"/><text x="25.00" y="430.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/__init__.py) (1 samples, 0.22%)</title><rect x="35" y="436" width="3" height="15" fill="rgb(226,125,21)"/><text x="38.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="452" width="3" height="15" fill="rgb(240,198,6)"/><text x="38.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="468" width="3" height="15" fill="rgb(224,31,33)"/><text x="38.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="484" width="3" height="15" fill="rgb(222,92,11)"/><text x="38.00" y="494.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="500" width="3" height="15" fill="rgb(224,181,30)"/><text x="38.00" y="510.50"></text></g><g><title>_init_module_attrs (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="516" width="3" height="15" fill="rgb(236,0,17)"/><text x="38.00" y="526.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="532" width="3" height="15" fill="rgb(217,202,32)"/><text x="38.00" y="542.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py) (1 samples, 0.22%)</title><rect x="38" y="244" width="2" height="15" fill="rgb(227,198,26)"/><text x="41.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="260" width="2" height="15" fill="rgb(220,163,38)"/><text x="41.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="276" width="2" height="15" fill="rgb(243,67,8)"/><text x="41.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="292" width="2" height="15" fill="rgb(246,38,21)"/><text x="41.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="308" width="2" height="15" fill="rgb(237,107,8)"/><text x="41.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="324" width="2" height="15" fill="rgb(241,21,37)"/><text x="41.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="38" y="340" width="2" height="15" fill="rgb(227,95,48)"/><text x="41.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="356" width="2" height="15" fill="rgb(249,75,14)"/><text x="41.00" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/lib/__init__.py) (1 samples, 0.22%)</title><rect x="38" y="372" width="2" height="15" fill="rgb(242,80,17)"/><text x="41.00" y="382.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="388" width="2" height="15" fill="rgb(230,62,4)"/><text x="41.00" y="398.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="404" width="2" height="15" fill="rgb(227,112,48)"/><text x="41.00" y="414.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="420" width="2" height="15" fill="rgb(245,177,20)"/><text x="41.00" y="430.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="38" y="436" width="2" height="15" fill="rgb(246,17,30)"/><text x="41.00" y="446.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="452" width="2" height="15" fill="rgb(218,112,21)"/><text x="41.00" y="462.50"></text></g><g><title>&lt;module&gt; (numpy/lib/index_tricks.py) (1 samples, 0.22%)</title><rect x="38" y="468" width="2" height="15" fill="rgb(247,209,11)"/><text x="41.00" y="478.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="484" width="2" height="15" fill="rgb(223,121,3)"/><text x="41.00" y="494.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="500" width="2" height="15" fill="rgb(211,53,34)"/><text x="41.00" y="510.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="516" width="2" height="15" fill="rgb(232,198,43)"/><text x="41.00" y="526.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="38" y="532" width="2" height="15" fill="rgb(214,21,2)"/><text x="41.00" y="542.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="548" width="2" height="15" fill="rgb(252,122,22)"/><text x="41.00" y="558.50"></text></g><g><title>&lt;module&gt; (numpy/matrixlib/__init__.py) (1 samples, 0.22%)</title><rect x="38" y="564" width="2" height="15" fill="rgb(251,155,22)"/><text x="41.00" y="574.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="580" width="2" height="15" fill="rgb(217,52,43)"/><text x="41.00" y="590.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="596" width="2" height="15" fill="rgb(215,12,37)"/><text x="41.00" y="606.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="612" width="2" height="15" fill="rgb(234,149,39)"/><text x="41.00" y="622.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="38" y="628" width="2" height="15" fill="rgb(228,57,34)"/><text x="41.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="68" width="33" height="15" fill="rgb(208,124,6)"/><text x="13.00" y="78.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="84" width="33" height="15" fill="rgb(250,184,3)"/><text x="13.00" y="94.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="100" width="33" height="15" fill="rgb(253,142,7)"/><text x="13.00" y="110.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (13 samples, 2.81%)</title><rect x="10" y="116" width="33" height="15" fill="rgb(231,130,31)"/><text x="13.00" y="126.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="132" width="33" height="15" fill="rgb(227,92,44)"/><text x="13.00" y="142.50">_c..</text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_64_n_estimators5.py) (13 samples, 2.81%)</title><rect x="10" y="148" width="33" height="15" fill="rgb(214,145,14)"/><text x="13.00" y="158.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="164" width="33" height="15" fill="rgb(218,137,32)"/><text x="13.00" y="174.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="180" width="33" height="15" fill="rgb(233,56,30)"/><text x="13.00" y="190.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.73%)</title><rect x="22" y="196" width="21" height="15" fill="rgb(250,75,37)"/><text x="25.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.73%)</title><rect x="22" y="212" width="21" height="15" fill="rgb(219,154,8)"/><text x="25.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.73%)</title><rect x="22" y="228" width="21" height="15" fill="rgb(254,50,18)"/><text x="25.00" y="238.50"></text></g><g><title>&lt;module&gt; (sklearn/ensemble/__init__.py) (1 samples, 0.22%)</title><rect x="40" y="244" width="3" height="15" fill="rgb(236,183,14)"/><text x="43.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="260" width="3" height="15" fill="rgb(240,116,15)"/><text x="43.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="276" width="3" height="15" fill="rgb(245,29,49)"/><text x="43.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="292" width="3" height="15" fill="rgb(218,179,34)"/><text x="43.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="308" width="3" height="15" fill="rgb(235,8,49)"/><text x="43.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="324" width="3" height="15" fill="rgb(208,53,48)"/><text x="43.00" y="334.50"></text></g><g><title>&lt;module&gt; (sklearn/ensemble/_forest.py) (1 samples, 0.22%)</title><rect x="40" y="340" width="3" height="15" fill="rgb(244,87,28)"/><text x="43.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="356" width="3" height="15" fill="rgb(236,208,31)"/><text x="43.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="372" width="3" height="15" fill="rgb(243,229,9)"/><text x="43.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="388" width="3" height="15" fill="rgb(253,103,28)"/><text x="43.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="404" width="3" height="15" fill="rgb(224,68,9)"/><text x="43.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="420" width="3" height="15" fill="rgb(222,229,25)"/><text x="43.00" y="430.50"></text></g><g><title>&lt;module&gt; (sklearn/tree/__init__.py) (1 samples, 0.22%)</title><rect x="40" y="436" width="3" height="15" fill="rgb(205,113,42)"/><text x="43.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="452" width="3" height="15" fill="rgb(241,71,22)"/><text x="43.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="468" width="3" height="15" fill="rgb(238,54,30)"/><text x="43.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="484" width="3" height="15" fill="rgb(215,111,32)"/><text x="43.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="500" width="3" height="15" fill="rgb(250,58,30)"/><text x="43.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="516" width="3" height="15" fill="rgb(207,128,33)"/><text x="43.00" y="526.50"></text></g><g><title>&lt;module&gt; (sklearn/tree/_classes.py) (1 samples, 0.22%)</title><rect x="40" y="532" width="3" height="15" fill="rgb(232,42,8)"/><text x="43.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="548" width="3" height="15" fill="rgb(221,103,8)"/><text x="43.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="564" width="3" height="15" fill="rgb(209,114,46)"/><text x="43.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="580" width="3" height="15" fill="rgb(229,109,19)"/><text x="43.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="596" width="3" height="15" fill="rgb(239,205,42)"/><text x="43.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="612" width="3" height="15" fill="rgb(215,160,26)"/><text x="43.00" y="622.50"></text></g><g><title>0x7f904f67f373 (?) (1 samples, 0.22%)</title><rect x="40" y="628" width="3" height="15" fill="rgb(211,213,33)"/><text x="43.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="644" width="3" height="15" fill="rgb(236,84,17)"/><text x="43.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="660" width="3" height="15" fill="rgb(230,99,31)"/><text x="43.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="676" width="3" height="15" fill="rgb(254,134,6)"/><text x="43.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="692" width="3" height="15" fill="rgb(244,90,37)"/><text x="43.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="708" width="3" height="15" fill="rgb(210,61,46)"/><text x="43.00" y="718.50"></text></g><g><title>0x7f904f442eea (?) (1 samples, 0.22%)</title><rect x="40" y="724" width="3" height="15" fill="rgb(231,183,46)"/><text x="43.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="740" width="3" height="15" fill="rgb(254,9,47)"/><text x="43.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="756" width="3" height="15" fill="rgb(215,190,20)"/><text x="43.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="772" width="3" height="15" fill="rgb(242,99,13)"/><text x="43.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="788" width="3" height="15" fill="rgb(207,12,48)"/><text x="43.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="804" width="3" height="15" fill="rgb(220,190,2)"/><text x="43.00" y="814.50"></text></g><g><title>0x7f904f1db887 (?) (1 samples, 0.22%)</title><rect x="40" y="820" width="3" height="15" fill="rgb(249,101,17)"/><text x="43.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="836" width="3" height="15" fill="rgb(206,197,22)"/><text x="43.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="852" width="3" height="15" fill="rgb(226,3,51)"/><text x="43.00" y="862.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="868" width="3" height="15" fill="rgb(205,23,32)"/><text x="43.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="884" width="3" height="15" fill="rgb(250,21,15)"/><text x="43.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="900" width="3" height="15" fill="rgb(214,212,24)"/><text x="43.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="916" width="3" height="15" fill="rgb(248,8,8)"/><text x="43.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="932" width="3" height="15" fill="rgb(247,65,41)"/><text x="43.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="948" width="3" height="15" fill="rgb(210,70,2)"/><text x="43.00" y="958.50"></text></g><g><title>&lt;module&gt; (sklearn/neighbors/__init__.py) (1 samples, 0.22%)</title><rect x="40" y="964" width="3" height="15" fill="rgb(208,175,30)"/><text x="43.00" y="974.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="980" width="3" height="15" fill="rgb(209,70,44)"/><text x="43.00" y="990.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="996" width="3" height="15" fill="rgb(234,211,37)"/><text x="43.00" y="1006.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1012" width="3" height="15" fill="rgb(237,72,53)"/><text x="43.00" y="1022.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="1028" width="3" height="15" fill="rgb(222,206,34)"/><text x="43.00" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1044" width="3" height="15" fill="rgb(205,62,12)"/><text x="43.00" y="1054.50"></text></g><g><title>&lt;module&gt; (sklearn/neighbors/_nca.py) (1 samples, 0.22%)</title><rect x="40" y="1060" width="3" height="15" fill="rgb(221,227,37)"/><text x="43.00" y="1070.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1076" width="3" height="15" fill="rgb(210,103,53)"/><text x="43.00" y="1086.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1092" width="3" height="15" fill="rgb(213,213,33)"/><text x="43.00" y="1102.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1108" width="3" height="15" fill="rgb(228,201,22)"/><text x="43.00" y="1118.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="1124" width="3" height="15" fill="rgb(210,26,16)"/><text x="43.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1140" width="3" height="15" fill="rgb(229,11,40)"/><text x="43.00" y="1150.50"></text></g><g><title>&lt;module&gt; (sklearn/decomposition/__init__.py) (1 samples, 0.22%)</title><rect x="40" y="1156" width="3" height="15" fill="rgb(249,22,36)"/><text x="43.00" y="1166.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1172" width="3" height="15" fill="rgb(211,139,42)"/><text x="43.00" y="1182.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1188" width="3" height="15" fill="rgb(217,143,47)"/><text x="43.00" y="1198.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1204" width="3" height="15" fill="rgb(239,96,23)"/><text x="43.00" y="1214.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="1220" width="3" height="15" fill="rgb(214,12,25)"/><text x="43.00" y="1230.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1236" width="3" height="15" fill="rgb(224,78,22)"/><text x="43.00" y="1246.50"></text></g><g><title>&lt;module&gt; (sklearn/decomposition/_sparse_pca.py) (1 samples, 0.22%)</title><rect x="40" y="1252" width="3" height="15" fill="rgb(244,222,13)"/><text x="43.00" y="1262.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1268" width="3" height="15" fill="rgb(252,65,17)"/><text x="43.00" y="1278.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1284" width="3" height="15" fill="rgb(241,193,2)"/><text x="43.00" y="1294.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1300" width="3" height="15" fill="rgb(243,205,12)"/><text x="43.00" y="1310.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="1316" width="3" height="15" fill="rgb(216,153,11)"/><text x="43.00" y="1326.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1332" width="3" height="15" fill="rgb(230,73,20)"/><text x="43.00" y="1342.50"></text></g><g><title>&lt;module&gt; (sklearn/linear_model/__init__.py) (1 samples, 0.22%)</title><rect x="40" y="1348" width="3" height="15" fill="rgb(247,117,48)"/><text x="43.00" y="1358.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1364" width="3" height="15" fill="rgb(249,167,54)"/><text x="43.00" y="1374.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1380" width="3" height="15" fill="rgb(214,121,20)"/><text x="43.00" y="1390.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="1396" width="3" height="15" fill="rgb(210,208,52)"/><text x="43.00" y="1406.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="1412" width="3" height="15" fill="rgb(220,172,27)"/><text x="43.00" y="1422.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="1428" width="3" height="15" fill="rgb(254,8,28)"/><text x="43.00" y="1438.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="1444" width="3" height="15" fill="rgb(217,27,48)"/><text x="43.00" y="1454.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.22%)</title><rect x="43" y="180" width="2" height="15" fill="rgb(238,208,0)"/><text x="46.00" y="190.50"></text></g><g><title>predict (sklearn/tree/_classes.py) (1 samples, 0.22%)</title><rect x="43" y="196" width="2" height="15" fill="rgb(217,71,15)"/><text x="46.00" y="206.50"></text></g><g><title>0x7f904f1fcd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="43" y="212" width="2" height="15" fill="rgb(229,166,31)"/><text x="46.00" y="222.50"></text></g><g><title>0x7f904f1fc328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="43" y="228" width="2" height="15" fill="rgb(232,15,17)"/><text x="46.00" y="238.50"></text></g><g><title>array_reshape (methods.c) (1 samples, 0.22%)</title><rect x="43" y="244" width="2" height="15" fill="rgb(238,180,38)"/><text x="46.00" y="254.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.22%)</title><rect x="43" y="260" width="2" height="15" fill="rgb(227,195,20)"/><text x="46.00" y="270.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.22%)</title><rect x="43" y="276" width="2" height="15" fill="rgb(246,185,32)"/><text x="46.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.22%)</title><rect x="43" y="292" width="2" height="15" fill="rgb(229,148,39)"/><text x="46.00" y="302.50"></text></g><g><title>profile0_skl (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (2 samples, 0.43%)</title><rect x="43" y="68" width="5" height="15" fill="rgb(223,138,6)"/><text x="46.00" y="78.50"></text></g><g><title>setup_profile0 (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (2 samples, 0.43%)</title><rect x="43" y="84" width="5" height="15" fill="rgb(243,197,41)"/><text x="46.00" y="94.50"></text></g><g><title>profile0 (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (2 samples, 0.43%)</title><rect x="43" y="100" width="5" height="15" fill="rgb(231,70,40)"/><text x="46.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.43%)</title><rect x="43" y="116" width="5" height="15" fill="rgb(209,217,2)"/><text x="46.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.43%)</title><rect x="43" y="132" width="5" height="15" fill="rgb(229,158,10)"/><text x="46.00" y="142.50"></text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py) (2 samples, 0.43%)</title><rect x="43" y="148" width="5" height="15" fill="rgb(218,22,41)"/><text x="46.00" y="158.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py) (2 samples, 0.43%)</title><rect x="43" y="164" width="5" height="15" fill="rgb(246,186,8)"/><text x="46.00" y="174.50"></text></g><g><title>stable_cumsum (sklearn/utils/extmath.py) (1 samples, 0.22%)</title><rect x="45" y="180" width="3" height="15" fill="rgb(221,227,40)"/><text x="48.00" y="190.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (1 samples, 0.22%)</title><rect x="45" y="196" width="3" height="15" fill="rgb(208,189,53)"/><text x="48.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.22%)</title><rect x="45" y="212" width="3" height="15" fill="rgb(230,228,37)"/><text x="48.00" y="222.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="45" y="228" width="3" height="15" fill="rgb(250,90,51)"/><text x="48.00" y="238.50"></text></g><g><title>0x7f90357f6ff9 (?) (1 samples, 0.22%)</title><rect x="48" y="212" width="2" height="15" fill="rgb(252,160,6)"/><text x="51.00" y="222.50"></text></g><g><title>0x7f90357f1ef6 (?) (1 samples, 0.22%)</title><rect x="48" y="228" width="2" height="15" fill="rgb(235,7,3)"/><text x="51.00" y="238.50"></text></g><g><title>0x7f90357e6962 (?) (1 samples, 0.22%)</title><rect x="48" y="244" width="2" height="15" fill="rgb(243,168,48)"/><text x="51.00" y="254.50"></text></g><g><title>0x7f903581a7a7 (?) (1 samples, 0.22%)</title><rect x="48" y="260" width="2" height="15" fill="rgb(216,61,26)"/><text x="51.00" y="270.50"></text></g><g><title>0x7f903581a379 (?) (1 samples, 0.22%)</title><rect x="48" y="276" width="2" height="15" fill="rgb(209,116,2)"/><text x="51.00" y="286.50"></text></g><g><title>0x7f9035c788b8 (?) (1 samples, 0.22%)</title><rect x="48" y="292" width="2" height="15" fill="rgb(223,162,21)"/><text x="51.00" y="302.50"></text></g><g><title>0x7f9035c76c7f (?) (1 samples, 0.22%)</title><rect x="48" y="308" width="2" height="15" fill="rgb(230,215,3)"/><text x="51.00" y="318.50"></text></g><g><title>0x7f9035c8999c (?) (1 samples, 0.22%)</title><rect x="48" y="324" width="2" height="15" fill="rgb(228,25,17)"/><text x="51.00" y="334.50"></text></g><g><title>0x7f90359b137e (?) (1 samples, 0.22%)</title><rect x="48" y="340" width="2" height="15" fill="rgb(242,73,29)"/><text x="51.00" y="350.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.22%)</title><rect x="48" y="356" width="2" height="15" fill="rgb(219,64,16)"/><text x="51.00" y="366.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (1 samples, 0.22%)</title><rect x="50" y="260" width="3" height="15" fill="rgb(240,66,13)"/><text x="53.00" y="270.50"></text></g><g><title>onnxruntime::ArgMin&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 1.30%)</title><rect x="53" y="340" width="15" height="15" fill="rgb(226,200,34)"/><text x="56.00" y="350.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.08%)</title><rect x="55" y="356" width="13" height="15" fill="rgb(235,157,52)"/><text x="58.00" y="366.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="66" y="372" width="2" height="15" fill="rgb(241,32,37)"/><text x="69.00" y="382.50"></text></g><g><title>onnxruntime::Cast&lt;bool&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.43%)</title><rect x="68" y="340" width="5" height="15" fill="rgb(252,109,10)"/><text x="71.00" y="350.50"></text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.87%)</title><rect x="73" y="340" width="11" height="15" fill="rgb(251,183,38)"/><text x="76.00" y="350.50"></text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.87%)</title><rect x="73" y="356" width="11" height="15" fill="rgb(228,26,10)"/><text x="76.00" y="366.50"></text></g><g><title>0x7f90757d8dc9 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="81" y="372" width="3" height="15" fill="rgb(225,0,53)"/><text x="84.00" y="382.50"></text></g><g><title>onnxruntime::CumSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.08%)</title><rect x="84" y="340" width="12" height="15" fill="rgb(225,128,25)"/><text x="87.00" y="350.50"></text></g><g><title>(anonymous namespace)::SumSlices&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.08%)</title><rect x="84" y="356" width="12" height="15" fill="rgb(207,219,24)"/><text x="87.00" y="366.50"></text></g><g><title>0x7f90757d8dae (libc-2.29.so) (1 samples, 0.22%)</title><rect x="104" y="356" width="3" height="15" fill="rgb(249,101,32)"/><text x="107.00" y="366.50"></text></g><g><title>onnxruntime::GatherElements::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.08%)</title><rect x="96" y="340" width="13" height="15" fill="rgb(244,215,31)"/><text x="99.00" y="350.50"></text></g><g><title>onnxruntime::parse_and_validate_indices_tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="107" y="356" width="2" height="15" fill="rgb(226,3,22)"/><text x="110.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="109" y="340" width="3" height="15" fill="rgb(254,106,26)"/><text x="112.00" y="350.50"></text></g><g><title>onnxruntime::Less&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="112" y="340" width="2" height="15" fill="rgb(236,169,4)"/><text x="115.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, bool, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="112" y="356" width="2" height="15" fill="rgb(250,163,53)"/><text x="115.00" y="366.50"></text></g><g><title>0x7f907598add0 (libm-2.29.so) (1 samples, 0.22%)</title><rect x="140" y="388" width="2" height="15" fill="rgb(248,220,2)"/><text x="143.00" y="398.50"></text></g><g><title>0x7f907598ae40 (libm-2.29.so) (1 samples, 0.22%)</title><rect x="142" y="388" width="3" height="15" fill="rgb(220,95,18)"/><text x="145.00" y="398.50"></text></g><g><title>0x7f907598ae61 (libm-2.29.so) (1 samples, 0.22%)</title><rect x="145" y="388" width="2" height="15" fill="rgb(221,161,38)"/><text x="148.00" y="398.50"></text></g><g><title>0x7f907598aeb6 (libm-2.29.so) (1 samples, 0.22%)</title><rect x="147" y="388" width="3" height="15" fill="rgb(225,143,20)"/><text x="150.00" y="398.50"></text></g><g><title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, long, std::pair&lt;float, long&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::GreaterValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="150" y="388" width="3" height="15" fill="rgb(217,203,40)"/><text x="153.00" y="398.50"></text></g><g><title>0x7f90757b8991 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="165" y="404" width="3" height="15" fill="rgb(230,29,10)"/><text x="168.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.65%)</title><rect x="168" y="404" width="8" height="15" fill="rgb(205,69,8)"/><text x="171.00" y="414.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 5.63%)</title><rect x="114" y="340" width="67" height="15" fill="rgb(238,58,31)"/><text x="117.00" y="350.50">onnxrun..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 5.63%)</title><rect x="114" y="356" width="67" height="15" fill="rgb(226,214,28)"/><text x="117.00" y="366.50">onnxrun..</text></g><g><title>onnxruntime::extract_top_k_elements&lt;true, true, onnxruntime::GreaterValueCmp&lt;float&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 5.63%)</title><rect x="114" y="372" width="67" height="15" fill="rgb(224,56,29)"/><text x="117.00" y="382.50">onnxrun..</text></g><g><title>std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt;::_M_emplace_back_aux&lt;std::pair&lt;float, long&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 2.38%)</title><rect x="153" y="388" width="28" height="15" fill="rgb(207,16,26)"/><text x="156.00" y="398.50">s..</text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.43%)</title><rect x="176" y="404" width="5" height="15" fill="rgb(231,70,13)"/><text x="179.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.43%)</title><rect x="176" y="420" width="5" height="15" fill="rgb(254,147,28)"/><text x="179.00" y="430.50"></text></g><g><title>0x7f90357be0f0 (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.43%)</title><rect x="211" y="356" width="5" height="15" fill="rgb(219,208,26)"/><text x="214.00" y="366.50"></text></g><g><title>0x7f90757b890e (libc-2.29.so) (1 samples, 0.22%)</title><rect x="216" y="356" width="3" height="15" fill="rgb(233,27,1)"/><text x="219.00" y="366.50"></text></g><g><title>0x7f90757b8922 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="219" y="356" width="2" height="15" fill="rgb(242,220,2)"/><text x="222.00" y="366.50"></text></g><g><title>0x7f90757b893b (libc-2.29.so) (1 samples, 0.22%)</title><rect x="221" y="356" width="3" height="15" fill="rgb(236,87,1)"/><text x="224.00" y="366.50"></text></g><g><title>0x7f90757b8961 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="224" y="356" width="3" height="15" fill="rgb(208,96,29)"/><text x="227.00" y="366.50"></text></g><g><title>0x7f90757b8965 (libc-2.29.so) (3 samples, 0.65%)</title><rect x="227" y="356" width="7" height="15" fill="rgb(233,189,41)"/><text x="230.00" y="366.50"></text></g><g><title>0x7f90757b896a (libc-2.29.so) (1 samples, 0.22%)</title><rect x="234" y="356" width="3" height="15" fill="rgb(205,76,32)"/><text x="237.00" y="366.50"></text></g><g><title>0x7f90757b8971 (libc-2.29.so) (2 samples, 0.43%)</title><rect x="237" y="356" width="5" height="15" fill="rgb(209,54,37)"/><text x="240.00" y="366.50"></text></g><g><title>0x7f90757b8991 (libc-2.29.so) (2 samples, 0.43%)</title><rect x="242" y="356" width="5" height="15" fill="rgb(208,204,38)"/><text x="245.00" y="366.50"></text></g><g><title>0x7f90757b8a4d (libc-2.29.so) (1 samples, 0.22%)</title><rect x="247" y="356" width="3" height="15" fill="rgb(225,22,54)"/><text x="250.00" y="366.50"></text></g><g><title>0x7f90757b8a53 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="250" y="356" width="2" height="15" fill="rgb(243,133,41)"/><text x="253.00" y="366.50"></text></g><g><title>0x7f90757b8a55 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="252" y="356" width="3" height="15" fill="rgb(254,43,20)"/><text x="255.00" y="366.50"></text></g><g><title>0x7f90757b8bc0 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="255" y="356" width="2" height="15" fill="rgb(254,117,12)"/><text x="258.00" y="366.50"></text></g><g><title>0x7f90757b8bd8 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="257" y="356" width="3" height="15" fill="rgb(208,3,20)"/><text x="260.00" y="366.50"></text></g><g><title>0x7f90757b8be8 (libc-2.29.so) (3 samples, 0.65%)</title><rect x="260" y="356" width="7" height="15" fill="rgb(218,86,50)"/><text x="263.00" y="366.50"></text></g><g><title>0x7f90757d912b (libc-2.29.so) (1 samples, 0.22%)</title><rect x="267" y="356" width="3" height="15" fill="rgb(214,50,4)"/><text x="270.00" y="366.50"></text></g><g><title>free (libc-2.29.so) (2 samples, 0.43%)</title><rect x="270" y="356" width="5" height="15" fill="rgb(239,32,25)"/><text x="273.00" y="366.50"></text></g><g><title>0x7f9065284d50 (libstdc++.so.6.0.28) (1 samples, 0.22%)</title><rect x="410" y="404" width="3" height="15" fill="rgb(240,166,5)"/><text x="413.00" y="414.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.65%)</title><rect x="410" y="388" width="8" height="15" fill="rgb(243,219,9)"/><text x="413.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.43%)</title><rect x="413" y="404" width="5" height="15" fill="rgb(247,197,38)"/><text x="416.00" y="414.50"></text></g><g><title>0x7f90757d914a (libc-2.29.so) (1 samples, 0.22%)</title><rect x="428" y="420" width="3" height="15" fill="rgb(218,119,19)"/><text x="431.00" y="430.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.65%)</title><rect x="426" y="404" width="7" height="15" fill="rgb(252,206,24)"/><text x="429.00" y="414.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.22%)</title><rect x="431" y="420" width="2" height="15" fill="rgb(245,214,29)"/><text x="434.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="431" y="436" width="2" height="15" fill="rgb(226,130,51)"/><text x="434.00" y="446.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (80 samples, 17.32%)</title><rect x="275" y="356" width="204" height="15" fill="rgb(219,7,52)"/><text x="278.00" y="366.50">onnxruntime::ml::TreeEnsem..</text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;long, std::tuple&lt;float, float, float&gt; &gt;&amp;&gt; [clone .isra.301] (onnxruntime/capi/onnxruntime_pybind11_state.so) (34 samples, 7.36%)</title><rect x="393" y="372" width="86" height="15" fill="rgb(221,48,28)"/><text x="396.00" y="382.50">std::_Hash..</text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (onnxruntime/capi/onnxruntime_pybind11_state.so) (24 samples, 5.19%)</title><rect x="418" y="388" width="61" height="15" fill="rgb(210,219,33)"/><text x="421.00" y="398.50">std::_..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (libstdc++.so.6.0.28) (18 samples, 3.90%)</title><rect x="433" y="404" width="46" height="15" fill="rgb(228,55,53)"/><text x="436.00" y="414.50">std:..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (libstdc++.so.6.0.28) (7 samples, 1.52%)</title><rect x="462" y="420" width="17" height="15" fill="rgb(250,126,23)"/><text x="465.00" y="430.50"></text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.08%)</title><rect x="479" y="356" width="13" height="15" fill="rgb(254,156,28)"/><text x="482.00" y="366.50"></text></g><g><title>operator delete (libstdc++.so.6.0.28) (1 samples, 0.22%)</title><rect x="492" y="356" width="3" height="15" fill="rgb(230,180,21)"/><text x="495.00" y="366.50"></text></g><g><title>std::__detail::_Map_base&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 1.52%)</title><rect x="495" y="356" width="18" height="15" fill="rgb(250,224,3)"/><text x="498.00" y="366.50"></text></g><g><title>0x7f9065284d50 (libstdc++.so.6.0.28) (1 samples, 0.22%)</title><rect x="528" y="388" width="3" height="15" fill="rgb(247,176,39)"/><text x="531.00" y="398.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (191 samples, 41.34%)</title><rect x="53" y="260" width="488" height="15" fill="rgb(236,175,7)"/><text x="56.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_p..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (191 samples, 41.34%)</title><rect x="53" y="276" width="488" height="15" fill="rgb(242,149,19)"/><text x="56.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_p..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (191 samples, 41.34%)</title><rect x="53" y="292" width="488" height="15" fill="rgb(249,146,48)"/><text x="56.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pyb..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (191 samples, 41.34%)</title><rect x="53" y="308" width="488" height="15" fill="rgb(212,38,2)"/><text x="56.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (191 samples, 41.34%)</title><rect x="53" y="324" width="488" height="15" fill="rgb(219,158,19)"/><text x="56.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxrun..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (141 samples, 30.52%)</title><rect x="181" y="340" width="360" height="15" fill="rgb(213,133,37)"/><text x="184.00" y="350.50">onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::C..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 2.38%)</title><rect x="513" y="356" width="28" height="15" fill="rgb(234,3,31)"/><text x="516.00" y="366.50">s..</text></g><g><title>operator new (libstdc++.so.6.0.28) (8 samples, 1.73%)</title><rect x="520" y="372" width="21" height="15" fill="rgb(212,194,2)"/><text x="523.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.87%)</title><rect x="531" y="388" width="10" height="15" fill="rgb(232,153,21)"/><text x="534.00" y="398.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (193 samples, 41.77%)</title><rect x="50" y="244" width="493" height="15" fill="rgb(242,143,16)"/><text x="53.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(o..</text></g><g><title>onnxruntime::python::GetPyObjFromTensor [clone .constprop.374] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="541" y="260" width="2" height="15" fill="rgb(225,134,8)"/><text x="544.00" y="270.50"></text></g><g><title>0x7f90357bd850 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="541" y="276" width="2" height="15" fill="rgb(207,60,21)"/><text x="544.00" y="286.50"></text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (195 samples, 42.21%)</title><rect x="48" y="100" width="498" height="15" fill="rgb(226,104,27)"/><text x="51.00" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (195 samples, 42.21%)</title><rect x="48" y="116" width="498" height="15" fill="rgb(251,145,42)"/><text x="51.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (195 samples, 42.21%)</title><rect x="48" y="132" width="498" height="15" fill="rgb(242,148,8)"/><text x="51.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (195 samples, 42.21%)</title><rect x="48" y="148" width="498" height="15" fill="rgb(211,24,35)"/><text x="51.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (195 samples, 42.21%)</title><rect x="48" y="164" width="498" height="15" fill="rgb(248,67,27)"/><text x="51.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (195 samples, 42.21%)</title><rect x="48" y="180" width="498" height="15" fill="rgb(238,11,0)"/><text x="51.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (195 samples, 42.21%)</title><rect x="48" y="196" width="498" height="15" fill="rgb(218,184,50)"/><text x="51.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (194 samples, 41.99%)</title><rect x="50" y="212" width="496" height="15" fill="rgb(228,17,19)"/><text x="53.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pyb..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (194 samples, 41.99%)</title><rect x="50" y="228" width="496" height="15" fill="rgb(215,86,1)"/><text x="53.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObje..</text></g><g><title>std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;::~vector [clone .lto_priv.576] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="543" y="244" width="3" height="15" fill="rgb(238,30,18)"/><text x="546.00" y="254.50"></text></g><g><title>profile_ort (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (196 samples, 42.42%)</title><rect x="48" y="68" width="500" height="15" fill="rgb(247,79,25)"/><text x="51.00" y="78.50">profile_ort (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (196 samples, 42.42%)</title><rect x="48" y="84" width="500" height="15" fill="rgb(233,200,9)"/><text x="51.00" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="546" y="100" width="2" height="15" fill="rgb(241,225,52)"/><text x="549.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="546" y="116" width="2" height="15" fill="rgb(211,174,43)"/><text x="549.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="546" y="132" width="2" height="15" fill="rgb(240,54,12)"/><text x="549.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (1 samples, 0.22%)</title><rect x="546" y="148" width="2" height="15" fill="rgb(230,196,32)"/><text x="549.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (1 samples, 0.22%)</title><rect x="546" y="164" width="2" height="15" fill="rgb(254,207,16)"/><text x="549.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (1 samples, 0.22%)</title><rect x="546" y="180" width="2" height="15" fill="rgb(222,101,21)"/><text x="549.00" y="190.50"></text></g><g><title>convert_sklearn_decision_tree_regressor (mlprodict/onnx_conv/sklconv/tree_converters.py) (1 samples, 0.22%)</title><rect x="546" y="196" width="2" height="15" fill="rgb(210,177,11)"/><text x="549.00" y="206.50"></text></g><g><title>add_tree_to_attribute_pairs (skl2onnx/common/tree_ensemble.py) (1 samples, 0.22%)</title><rect x="546" y="212" width="2" height="15" fill="rgb(218,32,8)"/><text x="549.00" y="222.50"></text></g><g><title>add_node (skl2onnx/common/tree_ensemble.py) (1 samples, 0.22%)</title><rect x="546" y="228" width="2" height="15" fill="rgb(227,106,13)"/><text x="549.00" y="238.50"></text></g><g><title>&lt;listcomp&gt; (skl2onnx/common/tree_ensemble.py) (1 samples, 0.22%)</title><rect x="546" y="244" width="2" height="15" fill="rgb(226,216,14)"/><text x="549.00" y="254.50"></text></g><g><title>array_item (mapping.c) (1 samples, 0.22%)</title><rect x="546" y="260" width="2" height="15" fill="rgb(228,138,6)"/><text x="549.00" y="270.50"></text></g><g><title>LONG_getitem (arraytypes.c.src) (5 samples, 1.08%)</title><rect x="574" y="260" width="13" height="15" fill="rgb(244,83,25)"/><text x="577.00" y="270.50"></text></g><g><title>0x7f90749db800 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="584" y="276" width="3" height="15" fill="rgb(253,223,13)"/><text x="587.00" y="286.50"></text></g><g><title>PyArray_ToList (convert.c) (8 samples, 1.73%)</title><rect x="571" y="228" width="21" height="15" fill="rgb(228,103,30)"/><text x="574.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c) (8 samples, 1.73%)</title><rect x="571" y="244" width="21" height="15" fill="rgb(238,192,50)"/><text x="574.00" y="254.50"></text></g><g><title>recursive_tolist (convert.c) (2 samples, 0.43%)</title><rect x="587" y="260" width="5" height="15" fill="rgb(219,161,53)"/><text x="590.00" y="270.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (4 samples, 0.87%)</title><rect x="592" y="244" width="10" height="15" fill="rgb(220,110,18)"/><text x="595.00" y="254.50"></text></g><g><title>0x7f90749da7c0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="620" y="340" width="2" height="15" fill="rgb(254,146,8)"/><text x="623.00" y="350.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (13 samples, 2.81%)</title><rect x="602" y="276" width="33" height="15" fill="rgb(250,155,32)"/><text x="605.00" y="286.50">Py..</text></g><g><title>setArrayFromSequence (ctors.c) (13 samples, 2.81%)</title><rect x="602" y="292" width="33" height="15" fill="rgb(234,57,6)"/><text x="605.00" y="302.50">se..</text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (9 samples, 1.95%)</title><rect x="612" y="308" width="23" height="15" fill="rgb(212,144,22)"/><text x="615.00" y="318.50">P..</text></g><g><title>LONG_setitem (arraytypes.c.src) (9 samples, 1.95%)</title><rect x="612" y="324" width="23" height="15" fill="rgb(250,10,48)"/><text x="615.00" y="334.50">L..</text></g><g><title>MyPyLong_AsLong (arraytypes.c.src) (5 samples, 1.08%)</title><rect x="622" y="340" width="13" height="15" fill="rgb(206,215,35)"/><text x="625.00" y="350.50"></text></g><g><title>0x7f90749db0a0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="671" y="340" width="3" height="15" fill="rgb(232,39,13)"/><text x="674.00" y="350.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (4 samples, 0.87%)</title><rect x="674" y="340" width="10" height="15" fill="rgb(227,51,36)"/><text x="677.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (33 samples, 7.14%)</title><rect x="635" y="292" width="85" height="15" fill="rgb(244,84,5)"/><text x="638.00" y="302.50">PyArray_DT..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (33 samples, 7.14%)</title><rect x="635" y="308" width="85" height="15" fill="rgb(205,150,52)"/><text x="638.00" y="318.50">PyArray_DT..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (33 samples, 7.14%)</title><rect x="635" y="324" width="85" height="15" fill="rgb(212,179,43)"/><text x="638.00" y="334.50">PyArray_DT..</text></g><g><title>_array_find_python_scalar_type (common.c) (14 samples, 3.03%)</title><rect x="684" y="340" width="36" height="15" fill="rgb(225,159,9)"/><text x="687.00" y="350.50">_ar..</text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (2 samples, 0.43%)</title><rect x="714" y="356" width="6" height="15" fill="rgb(249,134,49)"/><text x="717.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (71 samples, 15.37%)</title><rect x="571" y="212" width="182" height="15" fill="rgb(245,62,2)"/><text x="574.00" y="222.50">_run (mlprodict/onnxrt/..</text></g><g><title>array_subscript (mapping.c) (63 samples, 13.64%)</title><rect x="592" y="228" width="161" height="15" fill="rgb(234,121,38)"/><text x="595.00" y="238.50">array_subscript (map..</text></g><g><title>prepare_index (mapping.c) (59 samples, 12.77%)</title><rect x="602" y="244" width="151" height="15" fill="rgb(251,180,26)"/><text x="605.00" y="254.50">prepare_index (mapp..</text></g><g><title>PyArray_FromAny (ctors.c) (59 samples, 12.77%)</title><rect x="602" y="260" width="151" height="15" fill="rgb(235,44,2)"/><text x="605.00" y="270.50">PyArray_FromAny (ct..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (46 samples, 9.96%)</title><rect x="635" y="276" width="118" height="15" fill="rgb(239,188,8)"/><text x="638.00" y="286.50">PyArray_GetArr..</text></g><g><title>discover_dimensions (ctors.c) (13 samples, 2.81%)</title><rect x="720" y="292" width="33" height="15" fill="rgb(207,8,2)"/><text x="723.00" y="302.50">di..</text></g><g><title>discover_dimensions (ctors.c) (8 samples, 1.73%)</title><rect x="732" y="308" width="21" height="15" fill="rgb(253,148,6)"/><text x="735.00" y="318.50"></text></g><g><title>0x7f90757d8dc3 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="755" y="388" width="3" height="15" fill="rgb(213,119,4)"/><text x="758.00" y="398.50"></text></g><g><title>FLOAT_add (loops.c.src) (2 samples, 0.43%)</title><rect x="758" y="388" width="5" height="15" fill="rgb(227,201,40)"/><text x="761.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cum_sum.py) (5 samples, 1.08%)</title><rect x="753" y="212" width="13" height="15" fill="rgb(252,167,1)"/><text x="756.00" y="222.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;) (5 samples, 1.08%)</title><rect x="753" y="228" width="13" height="15" fill="rgb(237,22,40)"/><text x="756.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 1.08%)</title><rect x="753" y="244" width="13" height="15" fill="rgb(210,92,4)"/><text x="756.00" y="254.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py) (5 samples, 1.08%)</title><rect x="753" y="260" width="13" height="15" fill="rgb(232,191,11)"/><text x="756.00" y="270.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (5 samples, 1.08%)</title><rect x="753" y="276" width="13" height="15" fill="rgb(205,64,37)"/><text x="756.00" y="286.50"></text></g><g><title>array_cumsum (methods.c) (5 samples, 1.08%)</title><rect x="753" y="292" width="13" height="15" fill="rgb(228,189,6)"/><text x="756.00" y="302.50"></text></g><g><title>PyArray_CumSum (calculation.c) (5 samples, 1.08%)</title><rect x="753" y="308" width="13" height="15" fill="rgb(224,215,30)"/><text x="756.00" y="318.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c) (5 samples, 1.08%)</title><rect x="753" y="324" width="13" height="15" fill="rgb(246,35,5)"/><text x="756.00" y="334.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c) (5 samples, 1.08%)</title><rect x="753" y="340" width="13" height="15" fill="rgb(236,153,17)"/><text x="756.00" y="350.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (5 samples, 1.08%)</title><rect x="753" y="356" width="13" height="15" fill="rgb(218,18,51)"/><text x="756.00" y="366.50"></text></g><g><title>PyUFunc_Accumulate (ufunc_object.c) (4 samples, 0.87%)</title><rect x="755" y="372" width="11" height="15" fill="rgb(253,136,14)"/><text x="758.00" y="382.50"></text></g><g><title>npyiter_iternext_itflags0_dims1_iters2 (nditer_templ.c.src) (1 samples, 0.22%)</title><rect x="763" y="388" width="3" height="15" fill="rgb(243,0,13)"/><text x="766.00" y="398.50"></text></g><g><title>_choose_dispatcher (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="766" y="260" width="2" height="15" fill="rgb(245,107,50)"/><text x="769.00" y="270.50"></text></g><g><title>0x7f90757d8dbf (libc-2.29.so) (1 samples, 0.22%)</title><rect x="783" y="324" width="3" height="15" fill="rgb(245,208,3)"/><text x="786.00" y="334.50"></text></g><g><title>choose (&lt;__array_function__ internals&gt;) (9 samples, 1.95%)</title><rect x="766" y="228" width="23" height="15" fill="rgb(244,145,41)"/><text x="769.00" y="238.50">c..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 1.95%)</title><rect x="766" y="244" width="23" height="15" fill="rgb(224,70,6)"/><text x="769.00" y="254.50">a..</text></g><g><title>choose (numpy/core/fromnumeric.py) (8 samples, 1.73%)</title><rect x="768" y="260" width="21" height="15" fill="rgb(253,21,18)"/><text x="771.00" y="270.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (7 samples, 1.52%)</title><rect x="771" y="276" width="18" height="15" fill="rgb(254,60,26)"/><text x="774.00" y="286.50"></text></g><g><title>array_choose (methods.c) (7 samples, 1.52%)</title><rect x="771" y="292" width="18" height="15" fill="rgb(242,96,6)"/><text x="774.00" y="302.50"></text></g><g><title>PyArray_Choose (item_selection.c) (7 samples, 1.52%)</title><rect x="771" y="308" width="18" height="15" fill="rgb(233,50,8)"/><text x="774.00" y="318.50"></text></g><g><title>arraymultiter_dealloc (iterators.c) (1 samples, 0.22%)</title><rect x="786" y="324" width="3" height="15" fill="rgb(224,102,42)"/><text x="789.00" y="334.50"></text></g><g><title>0x7f90757b8e64 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="786" y="340" width="3" height="15" fill="rgb(235,209,42)"/><text x="789.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_gather_elements.py) (11 samples, 2.38%)</title><rect x="766" y="212" width="28" height="15" fill="rgb(231,228,27)"/><text x="769.00" y="222.50">_..</text></g><g><title>swapaxes (&lt;__array_function__ internals&gt;) (2 samples, 0.43%)</title><rect x="789" y="228" width="5" height="15" fill="rgb(254,187,39)"/><text x="792.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.22%)</title><rect x="791" y="244" width="3" height="15" fill="rgb(208,101,3)"/><text x="794.00" y="254.50"></text></g><g><title>swapaxes (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="791" y="260" width="3" height="15" fill="rgb(206,206,45)"/><text x="794.00" y="270.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="791" y="276" width="3" height="15" fill="rgb(249,4,20)"/><text x="794.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_less.py) (1 samples, 0.22%)</title><rect x="794" y="212" width="2" height="15" fill="rgb(231,90,39)"/><text x="797.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.22%)</title><rect x="794" y="228" width="2" height="15" fill="rgb(225,4,52)"/><text x="797.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.22%)</title><rect x="794" y="244" width="2" height="15" fill="rgb(230,38,6)"/><text x="797.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.22%)</title><rect x="794" y="260" width="2" height="15" fill="rgb(225,54,33)"/><text x="797.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (1 samples, 0.22%)</title><rect x="794" y="276" width="2" height="15" fill="rgb(212,213,21)"/><text x="797.00" y="286.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (1 samples, 0.22%)</title><rect x="794" y="292" width="2" height="15" fill="rgb(253,7,50)"/><text x="797.00" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.22%)</title><rect x="794" y="308" width="2" height="15" fill="rgb(246,88,40)"/><text x="797.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (1 samples, 0.22%)</title><rect x="794" y="324" width="2" height="15" fill="rgb(236,172,21)"/><text x="797.00" y="334.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (8 samples, 1.73%)</title><rect x="796" y="260" width="21" height="15" fill="rgb(222,174,29)"/><text x="799.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 1.73%)</title><rect x="796" y="276" width="21" height="15" fill="rgb(222,37,24)"/><text x="799.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (8 samples, 1.73%)</title><rect x="796" y="292" width="21" height="15" fill="rgb(243,133,6)"/><text x="799.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (8 samples, 1.73%)</title><rect x="796" y="308" width="21" height="15" fill="rgb(230,92,20)"/><text x="799.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (7 samples, 1.52%)</title><rect x="799" y="324" width="18" height="15" fill="rgb(237,84,27)"/><text x="802.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (7 samples, 1.52%)</title><rect x="799" y="340" width="18" height="15" fill="rgb(252,65,30)"/><text x="802.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (7 samples, 1.52%)</title><rect x="799" y="356" width="18" height="15" fill="rgb(209,147,6)"/><text x="802.00" y="366.50"></text></g><g><title>aintroselect_float (selection.c.src) (1 samples, 0.22%)</title><rect x="814" y="372" width="3" height="15" fill="rgb(224,178,0)"/><text x="817.00" y="382.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (1 samples, 0.22%)</title><rect x="814" y="388" width="3" height="15" fill="rgb(210,81,8)"/><text x="817.00" y="398.50"></text></g><g><title>PyArray_IterAllButAxis (iterators.c) (1 samples, 0.22%)</title><rect x="832" y="372" width="2" height="15" fill="rgb(205,91,35)"/><text x="835.00" y="382.50"></text></g><g><title>PyArray_IterNew (iterators.c) (1 samples, 0.22%)</title><rect x="832" y="388" width="2" height="15" fill="rgb(231,136,16)"/><text x="835.00" y="398.50"></text></g><g><title>array_iter_base_init (iterators.c) (1 samples, 0.22%)</title><rect x="832" y="404" width="2" height="15" fill="rgb(217,78,19)"/><text x="835.00" y="414.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (9 samples, 1.95%)</title><rect x="817" y="260" width="23" height="15" fill="rgb(241,219,27)"/><text x="820.00" y="270.50">a..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 1.95%)</title><rect x="817" y="276" width="23" height="15" fill="rgb(230,198,25)"/><text x="820.00" y="286.50">a..</text></g><g><title>argsort (numpy/core/fromnumeric.py) (9 samples, 1.95%)</title><rect x="817" y="292" width="23" height="15" fill="rgb(233,48,16)"/><text x="820.00" y="302.50">a..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (9 samples, 1.95%)</title><rect x="817" y="308" width="23" height="15" fill="rgb(212,77,18)"/><text x="820.00" y="318.50">_..</text></g><g><title>array_argsort (methods.c) (9 samples, 1.95%)</title><rect x="817" y="324" width="23" height="15" fill="rgb(207,220,51)"/><text x="820.00" y="334.50">a..</text></g><g><title>PyArray_ArgSort (item_selection.c) (9 samples, 1.95%)</title><rect x="817" y="340" width="23" height="15" fill="rgb(205,14,48)"/><text x="820.00" y="350.50">P..</text></g><g><title>_new_argsortlike (item_selection.c) (9 samples, 1.95%)</title><rect x="817" y="356" width="23" height="15" fill="rgb(225,142,48)"/><text x="820.00" y="366.50">_..</text></g><g><title>aquicksort_float (quicksort.c.src) (2 samples, 0.43%)</title><rect x="834" y="372" width="6" height="15" fill="rgb(216,175,42)"/><text x="837.00" y="382.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (1 samples, 0.22%)</title><rect x="837" y="388" width="3" height="15" fill="rgb(228,145,50)"/><text x="840.00" y="398.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="840" y="260" width="2" height="15" fill="rgb(253,96,34)"/><text x="843.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="840" y="276" width="2" height="15" fill="rgb(213,26,53)"/><text x="843.00" y="286.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.22%)</title><rect x="840" y="292" width="2" height="15" fill="rgb(207,136,52)"/><text x="843.00" y="302.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.22%)</title><rect x="840" y="308" width="2" height="15" fill="rgb(231,122,28)"/><text x="843.00" y="318.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.22%)</title><rect x="840" y="324" width="2" height="15" fill="rgb(230,226,5)"/><text x="843.00" y="334.50"></text></g><g><title>0x7f90757b8dfb (libc-2.29.so) (1 samples, 0.22%)</title><rect x="840" y="340" width="2" height="15" fill="rgb(215,46,41)"/><text x="843.00" y="350.50"></text></g><g><title>0x7f90757b7acd (libc-2.29.so) (1 samples, 0.22%)</title><rect x="840" y="356" width="2" height="15" fill="rgb(229,22,48)"/><text x="843.00" y="366.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (3 samples, 0.65%)</title><rect x="842" y="276" width="8" height="15" fill="rgb(214,181,41)"/><text x="845.00" y="286.50"></text></g><g><title>check_and_adjust_index (common.h) (2 samples, 0.43%)</title><rect x="845" y="292" width="5" height="15" fill="rgb(218,8,19)"/><text x="848.00" y="302.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (4 samples, 0.87%)</title><rect x="850" y="276" width="10" height="15" fill="rgb(205,100,42)"/><text x="853.00" y="286.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (4 samples, 0.87%)</title><rect x="850" y="292" width="10" height="15" fill="rgb(237,26,26)"/><text x="853.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (4 samples, 0.87%)</title><rect x="850" y="308" width="10" height="15" fill="rgb(207,81,52)"/><text x="853.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (4 samples, 0.87%)</title><rect x="850" y="324" width="10" height="15" fill="rgb(242,44,54)"/><text x="853.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (4 samples, 0.87%)</title><rect x="850" y="340" width="10" height="15" fill="rgb(243,80,15)"/><text x="853.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (3 samples, 0.65%)</title><rect x="852" y="356" width="8" height="15" fill="rgb(225,166,5)"/><text x="855.00" y="366.50"></text></g><g><title>arraymapiter_dealloc (mapping.c) (1 samples, 0.22%)</title><rect x="860" y="276" width="3" height="15" fill="rgb(215,11,45)"/><text x="863.00" y="286.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.22%)</title><rect x="860" y="292" width="3" height="15" fill="rgb(249,101,6)"/><text x="863.00" y="302.50"></text></g><g><title>array_subscript (mapping.c) (13 samples, 2.81%)</title><rect x="842" y="260" width="33" height="15" fill="rgb(249,39,4)"/><text x="845.00" y="270.50">ar..</text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (5 samples, 1.08%)</title><rect x="863" y="276" width="12" height="15" fill="rgb(251,5,35)"/><text x="866.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (32 samples, 6.93%)</title><rect x="796" y="212" width="82" height="15" fill="rgb(229,49,49)"/><text x="799.00" y="222.50">_run (mlp..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (32 samples, 6.93%)</title><rect x="796" y="228" width="82" height="15" fill="rgb(214,90,32)"/><text x="799.00" y="238.50">_common_r..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (32 samples, 6.93%)</title><rect x="796" y="244" width="82" height="15" fill="rgb(247,196,28)"/><text x="799.00" y="254.50">topk_sort..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.22%)</title><rect x="875" y="260" width="3" height="15" fill="rgb(236,190,41)"/><text x="878.00" y="270.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.22%)</title><rect x="875" y="276" width="3" height="15" fill="rgb(242,34,38)"/><text x="878.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.22%)</title><rect x="875" y="292" width="3" height="15" fill="rgb(207,45,5)"/><text x="878.00" y="302.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (1 samples, 0.22%)</title><rect x="875" y="308" width="3" height="15" fill="rgb(216,72,0)"/><text x="878.00" y="318.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="878" y="212" width="2" height="15" fill="rgb(234,110,37)"/><text x="881.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.22%)</title><rect x="878" y="228" width="2" height="15" fill="rgb(254,205,5)"/><text x="881.00" y="238.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.22%)</title><rect x="878" y="244" width="2" height="15" fill="rgb(222,78,14)"/><text x="881.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (2 samples, 0.43%)</title><rect x="880" y="228" width="6" height="15" fill="rgb(235,27,15)"/><text x="883.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.43%)</title><rect x="880" y="244" width="6" height="15" fill="rgb(224,90,38)"/><text x="883.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.22%)</title><rect x="883" y="260" width="3" height="15" fill="rgb(216,112,37)"/><text x="886.00" y="270.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.22%)</title><rect x="883" y="276" width="3" height="15" fill="rgb(229,208,29)"/><text x="886.00" y="286.50"></text></g><g><title>PyArray_ArgMin (calculation.c) (3 samples, 0.65%)</title><rect x="891" y="356" width="7" height="15" fill="rgb(213,129,24)"/><text x="894.00" y="366.50"></text></g><g><title>FLOAT_argmin (arraytypes.c.src) (3 samples, 0.65%)</title><rect x="891" y="372" width="7" height="15" fill="rgb(218,91,6)"/><text x="894.00" y="382.50"></text></g><g><title>argmin (&lt;__array_function__ internals&gt;) (5 samples, 1.08%)</title><rect x="888" y="276" width="13" height="15" fill="rgb(210,189,22)"/><text x="891.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 1.08%)</title><rect x="888" y="292" width="13" height="15" fill="rgb(211,6,27)"/><text x="891.00" y="302.50"></text></g><g><title>argmin (numpy/core/fromnumeric.py) (5 samples, 1.08%)</title><rect x="888" y="308" width="13" height="15" fill="rgb(209,215,39)"/><text x="891.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (5 samples, 1.08%)</title><rect x="888" y="324" width="13" height="15" fill="rgb(251,222,41)"/><text x="891.00" y="334.50"></text></g><g><title>array_argmin (methods.c) (5 samples, 1.08%)</title><rect x="888" y="340" width="13" height="15" fill="rgb(219,101,14)"/><text x="891.00" y="350.50"></text></g><g><title>unicode_eq (python3.7) (1 samples, 0.22%)</title><rect x="898" y="356" width="3" height="15" fill="rgb(216,174,28)"/><text x="901.00" y="366.50"></text></g><g><title>0x7f9075896d21 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="898" y="372" width="3" height="15" fill="rgb(207,46,40)"/><text x="901.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py) (7 samples, 1.52%)</title><rect x="886" y="228" width="17" height="15" fill="rgb(224,194,26)"/><text x="889.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py) (6 samples, 1.30%)</title><rect x="888" y="244" width="15" height="15" fill="rgb(231,158,6)"/><text x="891.00" y="254.50"></text></g><g><title>_argmin (mlprodict/onnxrt/ops_cpu/op_argmin.py) (6 samples, 1.30%)</title><rect x="888" y="260" width="15" height="15" fill="rgb(251,29,44)"/><text x="891.00" y="270.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (1 samples, 0.22%)</title><rect x="901" y="276" width="2" height="15" fill="rgb(215,70,22)"/><text x="904.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.22%)</title><rect x="901" y="292" width="2" height="15" fill="rgb(217,85,12)"/><text x="904.00" y="302.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (1 samples, 0.22%)</title><rect x="901" y="308" width="2" height="15" fill="rgb(210,181,8)"/><text x="904.00" y="318.50"></text></g><g><title>0x7f903625154f (?) (1 samples, 0.22%)</title><rect x="903" y="244" width="3" height="15" fill="rgb(214,64,53)"/><text x="906.00" y="254.50"></text></g><g><title>0x7f903625765e (?) (1 samples, 0.22%)</title><rect x="903" y="260" width="3" height="15" fill="rgb(241,198,2)"/><text x="906.00" y="270.50"></text></g><g><title>0x7f903625750f (?) (1 samples, 0.22%)</title><rect x="903" y="276" width="3" height="15" fill="rgb(237,167,31)"/><text x="906.00" y="286.50"></text></g><g><title>0x7f903625dd6c (?) (1 samples, 0.22%)</title><rect x="903" y="292" width="3" height="15" fill="rgb(251,32,16)"/><text x="906.00" y="302.50"></text></g><g><title>0x7f903f7beab9 (?) (1 samples, 0.22%)</title><rect x="903" y="308" width="3" height="15" fill="rgb(214,98,23)"/><text x="906.00" y="318.50"></text></g><g><title>0x7f903f7bfeab (?) (1 samples, 0.22%)</title><rect x="903" y="324" width="3" height="15" fill="rgb(232,110,32)"/><text x="906.00" y="334.50"></text></g><g><title>0x7f903f7bfea9 (libgomp.so.1.0.0) (8 samples, 1.73%)</title><rect x="906" y="484" width="20" height="15" fill="rgb(247,197,4)"/><text x="909.00" y="494.50"></text></g><g><title>0x7f903f7bfeab (libgomp.so.1.0.0) (3 samples, 0.65%)</title><rect x="926" y="484" width="8" height="15" fill="rgb(221,165,35)"/><text x="929.00" y="494.50"></text></g><g><title>0x7f903f7beab9 (libgomp.so.1.0.0) (14 samples, 3.03%)</title><rect x="906" y="468" width="36" height="15" fill="rgb(254,189,34)"/><text x="909.00" y="478.50">0x7..</text></g><g><title>0x7f903f7bfead (libgomp.so.1.0.0) (3 samples, 0.65%)</title><rect x="934" y="484" width="8" height="15" fill="rgb(231,120,13)"/><text x="937.00" y="494.50"></text></g><g><title>0x7f903f7bfcfb (libgomp.so.1.0.0) (1 samples, 0.22%)</title><rect x="942" y="500" width="2" height="15" fill="rgb(223,190,5)"/><text x="945.00" y="510.50"></text></g><g><title>0x7f903f7bfcfd (libgomp.so.1.0.0) (1 samples, 0.22%)</title><rect x="944" y="500" width="3" height="15" fill="rgb(244,68,5)"/><text x="947.00" y="510.50"></text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (17 samples, 3.68%)</title><rect x="906" y="292" width="43" height="15" fill="rgb(216,176,2)"/><text x="909.00" y="302.50">pybi..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (17 samples, 3.68%)</title><rect x="906" y="308" width="43" height="15" fill="rgb(213,123,28)"/><text x="909.00" y="318.50">pybi..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (17 samples, 3.68%)</title><rect x="906" y="324" width="43" height="15" fill="rgb(231,226,6)"/><text x="909.00" y="334.50">pybi..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (17 samples, 3.68%)</title><rect x="906" y="340" width="43" height="15" fill="rgb(229,222,35)"/><text x="909.00" y="350.50">pybi..</text></g><g><title>pybind11::array::~array (numpy.h) (17 samples, 3.68%)</title><rect x="906" y="356" width="43" height="15" fill="rgb(251,222,8)"/><text x="909.00" y="366.50">pybi..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (17 samples, 3.68%)</title><rect x="906" y="372" width="43" height="15" fill="rgb(226,125,39)"/><text x="909.00" y="382.50">pybi..</text></g><g><title>pybind11::object::~object (pytypes.h) (17 samples, 3.68%)</title><rect x="906" y="388" width="43" height="15" fill="rgb(232,53,42)"/><text x="909.00" y="398.50">pybi..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (17 samples, 3.68%)</title><rect x="906" y="404" width="43" height="15" fill="rgb(254,137,20)"/><text x="909.00" y="414.50">pybi..</text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (17 samples, 3.68%)</title><rect x="906" y="420" width="43" height="15" fill="rgb(211,178,34)"/><text x="909.00" y="430.50">Runt..</text></g><g><title>pybind11::array::size (numpy.h) (17 samples, 3.68%)</title><rect x="906" y="436" width="43" height="15" fill="rgb(249,103,22)"/><text x="909.00" y="446.50">pybi..</text></g><g><title>std::accumulate&lt;long const*, long, std::multiplies&lt;long&gt; &gt; (stl_numeric.h) (17 samples, 3.68%)</title><rect x="906" y="452" width="43" height="15" fill="rgb(252,21,50)"/><text x="909.00" y="462.50">std:..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (3 samples, 0.65%)</title><rect x="942" y="468" width="7" height="15" fill="rgb(208,183,33)"/><text x="945.00" y="478.50"></text></g><g><title>0x7f903f7bddaa (libgomp.so.1.0.0) (3 samples, 0.65%)</title><rect x="942" y="484" width="7" height="15" fill="rgb(225,83,24)"/><text x="945.00" y="494.50"></text></g><g><title>0x7f903f7bfd6d (libgomp.so.1.0.0) (1 samples, 0.22%)</title><rect x="947" y="500" width="2" height="15" fill="rgb(227,195,15)"/><text x="950.00" y="510.50"></text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (158 samples, 34.20%)</title><rect x="548" y="100" width="404" height="15" fill="rgb(223,181,42)"/><text x="551.00" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_64_n_est..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (157 samples, 33.98%)</title><rect x="551" y="116" width="401" height="15" fill="rgb(234,19,38)"/><text x="554.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.p..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (156 samples, 33.77%)</title><rect x="554" y="132" width="398" height="15" fill="rgb(251,49,30)"/><text x="557.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (156 samples, 33.77%)</title><rect x="554" y="148" width="398" height="15" fill="rgb(205,70,44)"/><text x="557.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (155 samples, 33.55%)</title><rect x="556" y="164" width="396" height="15" fill="rgb(247,191,53)"/><text x="559.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inferenc..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (153 samples, 33.12%)</title><rect x="561" y="180" width="391" height="15" fill="rgb(250,0,26)"/><text x="564.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (151 samples, 32.68%)</title><rect x="566" y="196" width="386" height="15" fill="rgb(235,87,39)"/><text x="569.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (28 samples, 6.06%)</title><rect x="880" y="212" width="72" height="15" fill="rgb(254,157,22)"/><text x="883.00" y="222.50">run (mlp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py) (19 samples, 4.11%)</title><rect x="903" y="228" width="49" height="15" fill="rgb(219,37,7)"/><text x="906.00" y="238.50">_run..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (18 samples, 3.90%)</title><rect x="906" y="244" width="46" height="15" fill="rgb(221,180,14)"/><text x="909.00" y="254.50">pybi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (18 samples, 3.90%)</title><rect x="906" y="260" width="46" height="15" fill="rgb(226,198,35)"/><text x="909.00" y="270.50">void..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (18 samples, 3.90%)</title><rect x="906" y="276" width="46" height="15" fill="rgb(237,226,32)"/><text x="909.00" y="286.50">void..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::load_args (cast.h) (1 samples, 0.22%)</title><rect x="949" y="292" width="3" height="15" fill="rgb(218,49,37)"/><text x="952.00" y="302.50"></text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::load_impl_sequence&lt;(unsigned long)0, (unsigned long)1&gt; (cast.h) (1 samples, 0.22%)</title><rect x="949" y="308" width="3" height="15" fill="rgb(222,177,19)"/><text x="952.00" y="318.50"></text></g><g><title>std::_Bit_reference::operator bool (stl_bvector.h) (1 samples, 0.22%)</title><rect x="949" y="324" width="3" height="15" fill="rgb(206,0,18)"/><text x="952.00" y="334.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic (cast.h) (1 samples, 0.22%)</title><rect x="949" y="340" width="3" height="15" fill="rgb(240,138,15)"/><text x="952.00" y="350.50"></text></g><g><title>pybind11::detail::get_type_info (cast.h) (1 samples, 0.22%)</title><rect x="949" y="356" width="3" height="15" fill="rgb(222,221,28)"/><text x="952.00" y="366.50"></text></g><g><title>pybind11::detail::get_global_type_info (cast.h) (1 samples, 0.22%)</title><rect x="949" y="372" width="3" height="15" fill="rgb(207,189,31)"/><text x="952.00" y="382.50"></text></g><g><title>std::unordered_map&lt;std::type_index, pybind11::detail::type_info*, std::hash&lt;std::type_index&gt;, std::equal_to&lt;std::type_index&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt; &gt;::find (unordered_map.h) (1 samples, 0.22%)</title><rect x="949" y="388" width="3" height="15" fill="rgb(233,97,7)"/><text x="952.00" y="398.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (hashtable.h) (1 samples, 0.22%)</title><rect x="949" y="404" width="3" height="15" fill="rgb(233,56,38)"/><text x="952.00" y="414.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (hashtable.h) (1 samples, 0.22%)</title><rect x="949" y="420" width="3" height="15" fill="rgb(229,78,19)"/><text x="952.00" y="430.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (hashtable.h) (1 samples, 0.22%)</title><rect x="949" y="436" width="3" height="15" fill="rgb(244,78,34)"/><text x="952.00" y="446.50"></text></g><g><title>profile_pyrt (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (159 samples, 34.42%)</title><rect x="548" y="68" width="407" height="15" fill="rgb(213,200,37)"/><text x="551.00" y="78.50">profile_pyrt (bench_AdaBoostRegressor_default_b_reg_64_..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (159 samples, 34.42%)</title><rect x="548" y="84" width="407" height="15" fill="rgb(221,98,9)"/><text x="551.00" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_64..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="952" y="100" width="3" height="15" fill="rgb(251,168,6)"/><text x="955.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="952" y="116" width="3" height="15" fill="rgb(246,93,23)"/><text x="955.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="952" y="132" width="3" height="15" fill="rgb(241,183,44)"/><text x="955.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.22%)</title><rect x="952" y="148" width="3" height="15" fill="rgb(226,80,2)"/><text x="955.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.22%)</title><rect x="952" y="164" width="3" height="15" fill="rgb(253,53,12)"/><text x="955.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (1 samples, 0.22%)</title><rect x="952" y="180" width="3" height="15" fill="rgb(243,106,38)"/><text x="955.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (1 samples, 0.22%)</title><rect x="952" y="196" width="3" height="15" fill="rgb(214,98,7)"/><text x="955.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="212" width="3" height="15" fill="rgb(243,12,54)"/><text x="955.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="228" width="3" height="15" fill="rgb(209,48,40)"/><text x="955.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="244" width="3" height="15" fill="rgb(219,134,34)"/><text x="955.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="952" y="260" width="3" height="15" fill="rgb(219,99,5)"/><text x="955.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="276" width="3" height="15" fill="rgb(206,85,27)"/><text x="955.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (1 samples, 0.22%)</title><rect x="952" y="292" width="3" height="15" fill="rgb(226,112,1)"/><text x="955.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="308" width="3" height="15" fill="rgb(224,134,44)"/><text x="955.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="324" width="3" height="15" fill="rgb(206,158,35)"/><text x="955.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="340" width="3" height="15" fill="rgb(214,212,41)"/><text x="955.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="952" y="356" width="3" height="15" fill="rgb(253,181,19)"/><text x="955.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="372" width="3" height="15" fill="rgb(224,203,23)"/><text x="955.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (1 samples, 0.22%)</title><rect x="952" y="388" width="3" height="15" fill="rgb(250,97,15)"/><text x="955.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="404" width="3" height="15" fill="rgb(239,114,26)"/><text x="955.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="420" width="3" height="15" fill="rgb(249,105,27)"/><text x="955.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="436" width="3" height="15" fill="rgb(228,90,22)"/><text x="955.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="952" y="452" width="3" height="15" fill="rgb(242,70,29)"/><text x="955.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="952" y="468" width="3" height="15" fill="rgb(240,47,20)"/><text x="955.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.22%)</title><rect x="952" y="484" width="3" height="15" fill="rgb(247,76,0)"/><text x="955.00" y="494.50"></text></g><g><title>_get_doc_template (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.22%)</title><rect x="952" y="500" width="3" height="15" fill="rgb(208,212,37)"/><text x="955.00" y="510.50"></text></g><g><title>__new__ (jinja2/environment.py) (1 samples, 0.22%)</title><rect x="952" y="516" width="3" height="15" fill="rgb(238,123,43)"/><text x="955.00" y="526.50"></text></g><g><title>from_string (jinja2/environment.py) (1 samples, 0.22%)</title><rect x="952" y="532" width="3" height="15" fill="rgb(219,148,53)"/><text x="955.00" y="542.50"></text></g><g><title>compile (jinja2/environment.py) (1 samples, 0.22%)</title><rect x="952" y="548" width="3" height="15" fill="rgb(219,76,8)"/><text x="955.00" y="558.50"></text></g><g><title>_parse (jinja2/environment.py) (1 samples, 0.22%)</title><rect x="952" y="564" width="3" height="15" fill="rgb(217,76,37)"/><text x="955.00" y="574.50"></text></g><g><title>parse (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="580" width="3" height="15" fill="rgb(253,146,47)"/><text x="955.00" y="590.50"></text></g><g><title>subparse (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="596" width="3" height="15" fill="rgb(227,61,2)"/><text x="955.00" y="606.50"></text></g><g><title>parse_statement (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="612" width="3" height="15" fill="rgb(248,133,28)"/><text x="955.00" y="622.50"></text></g><g><title>parse_for (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="628" width="3" height="15" fill="rgb(254,57,37)"/><text x="955.00" y="638.50"></text></g><g><title>parse_statements (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="644" width="3" height="15" fill="rgb(208,134,52)"/><text x="955.00" y="654.50"></text></g><g><title>subparse (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="660" width="3" height="15" fill="rgb(219,24,11)"/><text x="955.00" y="670.50"></text></g><g><title>parse_statement (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="676" width="3" height="15" fill="rgb(238,54,30)"/><text x="955.00" y="686.50"></text></g><g><title>parse_if (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="692" width="3" height="15" fill="rgb(215,195,49)"/><text x="955.00" y="702.50"></text></g><g><title>parse_statements (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="708" width="3" height="15" fill="rgb(236,94,32)"/><text x="955.00" y="718.50"></text></g><g><title>subparse (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="724" width="3" height="15" fill="rgb(232,78,32)"/><text x="955.00" y="734.50"></text></g><g><title>parse_statement (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="740" width="3" height="15" fill="rgb(254,209,34)"/><text x="955.00" y="750.50"></text></g><g><title>parse_for (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="952" y="756" width="3" height="15" fill="rgb(229,170,15)"/><text x="955.00" y="766.50"></text></g><g><title>expect (jinja2/lexer.py) (1 samples, 0.22%)</title><rect x="952" y="772" width="3" height="15" fill="rgb(247,211,12)"/><text x="955.00" y="782.50"></text></g><g><title>test (jinja2/lexer.py) (1 samples, 0.22%)</title><rect x="952" y="788" width="3" height="15" fill="rgb(212,19,31)"/><text x="955.00" y="798.50"></text></g><g><title>unicode_split (python3.7) (1 samples, 0.22%)</title><rect x="952" y="804" width="3" height="15" fill="rgb(218,30,47)"/><text x="955.00" y="814.50"></text></g><g><title>0x7f904f20a225 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="960" y="260" width="2" height="15" fill="rgb(226,107,22)"/><text x="963.00" y="270.50"></text></g><g><title>0x7f904f20a693 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="962" y="260" width="3" height="15" fill="rgb(230,110,51)"/><text x="965.00" y="270.50"></text></g><g><title>0x7f904f20a6aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="965" y="260" width="5" height="15" fill="rgb(224,143,39)"/><text x="968.00" y="270.50"></text></g><g><title>0x7f904f20a6b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="970" y="260" width="2" height="15" fill="rgb(209,112,23)"/><text x="973.00" y="270.50"></text></g><g><title>0x7f904f20a7ac (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="972" y="260" width="3" height="15" fill="rgb(249,220,49)"/><text x="975.00" y="270.50"></text></g><g><title>0x7f904f20a92f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="975" y="260" width="3" height="15" fill="rgb(242,205,44)"/><text x="978.00" y="270.50"></text></g><g><title>0x7f904f1df8a1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="975" y="276" width="3" height="15" fill="rgb(230,23,8)"/><text x="978.00" y="286.50"></text></g><g><title>0x7f904f1fbfa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 1.73%)</title><rect x="960" y="228" width="20" height="15" fill="rgb(216,217,29)"/><text x="963.00" y="238.50"></text></g><g><title>0x7f904f20b405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 1.73%)</title><rect x="960" y="244" width="20" height="15" fill="rgb(216,196,0)"/><text x="963.00" y="254.50"></text></g><g><title>0x7f904f20ac27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="978" y="260" width="2" height="15" fill="rgb(224,135,29)"/><text x="981.00" y="270.50"></text></g><g><title>0x7f904f1e2529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="978" y="276" width="2" height="15" fill="rgb(241,150,54)"/><text x="981.00" y="286.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.22%)</title><rect x="978" y="292" width="2" height="15" fill="rgb(233,166,12)"/><text x="981.00" y="302.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.22%)</title><rect x="978" y="308" width="2" height="15" fill="rgb(236,82,26)"/><text x="981.00" y="318.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.22%)</title><rect x="978" y="324" width="2" height="15" fill="rgb(253,9,14)"/><text x="981.00" y="334.50"></text></g><g><title>_buffer_format_string (buffer.c) (1 samples, 0.22%)</title><rect x="978" y="340" width="2" height="15" fill="rgb(223,60,6)"/><text x="981.00" y="350.50"></text></g><g><title>_append_char (buffer.c) (1 samples, 0.22%)</title><rect x="978" y="356" width="2" height="15" fill="rgb(207,174,25)"/><text x="981.00" y="366.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c) (1 samples, 0.22%)</title><rect x="980" y="260" width="3" height="15" fill="rgb(253,192,54)"/><text x="983.00" y="270.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (1 samples, 0.22%)</title><rect x="980" y="276" width="3" height="15" fill="rgb(239,218,0)"/><text x="983.00" y="286.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.22%)</title><rect x="980" y="292" width="3" height="15" fill="rgb(214,185,17)"/><text x="983.00" y="302.50"></text></g><g><title>0x7f904f1fc05a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="980" y="228" width="5" height="15" fill="rgb(227,118,15)"/><text x="983.00" y="238.50"></text></g><g><title>array_take (methods.c) (2 samples, 0.43%)</title><rect x="980" y="244" width="5" height="15" fill="rgb(227,218,24)"/><text x="983.00" y="254.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.22%)</title><rect x="983" y="260" width="2" height="15" fill="rgb(209,194,40)"/><text x="986.00" y="270.50"></text></g><g><title>0x7f904f1fc13a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="985" y="228" width="5" height="15" fill="rgb(216,64,24)"/><text x="988.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="988" y="244" width="2" height="15" fill="rgb(252,149,5)"/><text x="991.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.22%)</title><rect x="988" y="260" width="2" height="15" fill="rgb(226,146,13)"/><text x="991.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.22%)</title><rect x="988" y="276" width="2" height="15" fill="rgb(234,36,51)"/><text x="991.00" y="286.50"></text></g><g><title>0x7f904f1fcd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 2.81%)</title><rect x="960" y="212" width="33" height="15" fill="rgb(228,7,53)"/><text x="963.00" y="222.50">0x..</text></g><g><title>0x7f904f1fc328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="990" y="228" width="3" height="15" fill="rgb(247,36,20)"/><text x="993.00" y="238.50"></text></g><g><title>array_reshape (methods.c) (1 samples, 0.22%)</title><rect x="990" y="244" width="3" height="15" fill="rgb(239,22,45)"/><text x="993.00" y="254.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (1 samples, 0.22%)</title><rect x="990" y="260" width="3" height="15" fill="rgb(219,211,32)"/><text x="993.00" y="270.50"></text></g><g><title>0x7f90757ce730 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="990" y="276" width="3" height="15" fill="rgb(244,113,18)"/><text x="993.00" y="286.50"></text></g><g><title>__enter__ (warnings.py) (2 samples, 0.43%)</title><rect x="1013" y="244" width="5" height="15" fill="rgb(251,161,5)"/><text x="1016.00" y="254.50"></text></g><g><title>__init__ (warnings.py) (2 samples, 0.43%)</title><rect x="1018" y="244" width="5" height="15" fill="rgb(235,21,25)"/><text x="1021.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="1026" y="260" width="3" height="15" fill="rgb(214,204,38)"/><text x="1029.00" y="270.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (3 samples, 0.65%)</title><rect x="1023" y="244" width="8" height="15" fill="rgb(254,110,7)"/><text x="1026.00" y="254.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="1029" y="260" width="2" height="15" fill="rgb(227,19,36)"/><text x="1032.00" y="270.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (6 samples, 1.30%)</title><rect x="1031" y="244" width="15" height="15" fill="rgb(252,206,7)"/><text x="1034.00" y="254.50"></text></g><g><title>__instancecheck__ (abc.py) (1 samples, 0.22%)</title><rect x="1044" y="260" width="2" height="15" fill="rgb(243,20,20)"/><text x="1047.00" y="270.50"></text></g><g><title>arraydescr_new (descriptor.c) (1 samples, 0.22%)</title><rect x="1046" y="244" width="3" height="15" fill="rgb(211,207,48)"/><text x="1049.00" y="254.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.22%)</title><rect x="1046" y="260" width="3" height="15" fill="rgb(207,153,2)"/><text x="1049.00" y="270.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (1 samples, 0.22%)</title><rect x="1046" y="276" width="3" height="15" fill="rgb(228,133,47)"/><text x="1049.00" y="286.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.22%)</title><rect x="1046" y="292" width="3" height="15" fill="rgb(212,144,24)"/><text x="1049.00" y="302.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (1 samples, 0.22%)</title><rect x="1049" y="244" width="3" height="15" fill="rgb(234,96,16)"/><text x="1052.00" y="254.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (26 samples, 5.63%)</title><rect x="993" y="212" width="66" height="15" fill="rgb(237,125,0)"/><text x="996.00" y="222.50">_valida..</text></g><g><title>check_array (sklearn/utils/validation.py) (26 samples, 5.63%)</title><rect x="993" y="228" width="66" height="15" fill="rgb(216,13,43)"/><text x="996.00" y="238.50">check_a..</text></g><g><title>simplefilter (warnings.py) (3 samples, 0.65%)</title><rect x="1052" y="244" width="7" height="15" fill="rgb(249,192,9)"/><text x="1055.00" y="254.50"></text></g><g><title>_add_filter (warnings.py) (1 samples, 0.22%)</title><rect x="1057" y="260" width="2" height="15" fill="rgb(226,21,41)"/><text x="1060.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_weight_boosting.py) (42 samples, 9.09%)</title><rect x="957" y="180" width="107" height="15" fill="rgb(211,103,17)"/><text x="960.00" y="190.50">&lt;listcomp&gt; (s..</text></g><g><title>predict (sklearn/tree/_classes.py) (42 samples, 9.09%)</title><rect x="957" y="196" width="107" height="15" fill="rgb(216,127,8)"/><text x="960.00" y="206.50">predict (skle..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (2 samples, 0.43%)</title><rect x="1059" y="212" width="5" height="15" fill="rgb(240,40,30)"/><text x="1062.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (1 samples, 0.22%)</title><rect x="1062" y="228" width="2" height="15" fill="rgb(243,201,20)"/><text x="1065.00" y="238.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (1 samples, 0.22%)</title><rect x="1064" y="228" width="3" height="15" fill="rgb(243,109,28)"/><text x="1067.00" y="238.50"></text></g><g><title>setArrayFromSequence (ctors.c) (1 samples, 0.22%)</title><rect x="1064" y="244" width="3" height="15" fill="rgb(221,209,43)"/><text x="1067.00" y="254.50"></text></g><g><title>setArrayFromSequence (ctors.c) (1 samples, 0.22%)</title><rect x="1064" y="260" width="3" height="15" fill="rgb(246,217,47)"/><text x="1067.00" y="270.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.22%)</title><rect x="1064" y="276" width="3" height="15" fill="rgb(241,161,44)"/><text x="1067.00" y="286.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.22%)</title><rect x="1064" y="292" width="3" height="15" fill="rgb(209,168,15)"/><text x="1067.00" y="302.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.22%)</title><rect x="1064" y="308" width="3" height="15" fill="rgb(212,12,46)"/><text x="1067.00" y="318.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.43%)</title><rect x="1064" y="180" width="5" height="15" fill="rgb(233,146,22)"/><text x="1067.00" y="190.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (2 samples, 0.43%)</title><rect x="1064" y="196" width="5" height="15" fill="rgb(217,115,12)"/><text x="1067.00" y="206.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.43%)</title><rect x="1064" y="212" width="5" height="15" fill="rgb(211,74,28)"/><text x="1067.00" y="222.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (1 samples, 0.22%)</title><rect x="1067" y="228" width="2" height="15" fill="rgb(226,117,26)"/><text x="1070.00" y="238.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (1 samples, 0.22%)</title><rect x="1069" y="180" width="3" height="15" fill="rgb(242,25,16)"/><text x="1072.00" y="190.50"></text></g><g><title>DOUBLE_copyswapn (arraytypes.c.src) (3 samples, 0.65%)</title><rect x="1075" y="292" width="7" height="15" fill="rgb(228,185,10)"/><text x="1078.00" y="302.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c) (3 samples, 0.65%)</title><rect x="1075" y="308" width="7" height="15" fill="rgb(226,159,0)"/><text x="1078.00" y="318.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (5 samples, 1.08%)</title><rect x="1072" y="180" width="13" height="15" fill="rgb(229,19,25)"/><text x="1075.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 1.08%)</title><rect x="1072" y="196" width="13" height="15" fill="rgb(238,16,50)"/><text x="1075.00" y="206.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (5 samples, 1.08%)</title><rect x="1072" y="212" width="13" height="15" fill="rgb(240,183,43)"/><text x="1075.00" y="222.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (5 samples, 1.08%)</title><rect x="1072" y="228" width="13" height="15" fill="rgb(246,143,29)"/><text x="1075.00" y="238.50"></text></g><g><title>array_argsort (methods.c) (5 samples, 1.08%)</title><rect x="1072" y="244" width="13" height="15" fill="rgb(245,217,7)"/><text x="1075.00" y="254.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (5 samples, 1.08%)</title><rect x="1072" y="260" width="13" height="15" fill="rgb(208,222,31)"/><text x="1075.00" y="270.50"></text></g><g><title>_new_argsortlike (item_selection.c) (5 samples, 1.08%)</title><rect x="1072" y="276" width="13" height="15" fill="rgb(214,82,13)"/><text x="1075.00" y="286.50"></text></g><g><title>aquicksort_double (quicksort.c.src) (1 samples, 0.22%)</title><rect x="1082" y="292" width="3" height="15" fill="rgb(249,184,5)"/><text x="1085.00" y="302.50"></text></g><g><title>array_arange (multiarraymodule.c) (3 samples, 0.65%)</title><rect x="1085" y="180" width="7" height="15" fill="rgb(205,96,36)"/><text x="1088.00" y="190.50"></text></g><g><title>PyArray_ArangeObj (ctors.c) (3 samples, 0.65%)</title><rect x="1085" y="196" width="7" height="15" fill="rgb(236,59,45)"/><text x="1088.00" y="206.50"></text></g><g><title>_calc_length (ctors.c) (2 samples, 0.43%)</title><rect x="1087" y="212" width="5" height="15" fill="rgb(212,141,43)"/><text x="1090.00" y="222.50"></text></g><g><title>array_argmax (methods.c) (2 samples, 0.43%)</title><rect x="1092" y="180" width="6" height="15" fill="rgb(227,204,2)"/><text x="1095.00" y="190.50"></text></g><g><title>PyArray_ArgMax (calculation.c) (1 samples, 0.22%)</title><rect x="1095" y="196" width="3" height="15" fill="rgb(218,192,42)"/><text x="1098.00" y="206.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.22%)</title><rect x="1095" y="212" width="3" height="15" fill="rgb(229,99,24)"/><text x="1098.00" y="222.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.22%)</title><rect x="1095" y="228" width="3" height="15" fill="rgb(219,149,3)"/><text x="1098.00" y="238.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.22%)</title><rect x="1095" y="244" width="3" height="15" fill="rgb(205,150,26)"/><text x="1098.00" y="254.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.22%)</title><rect x="1095" y="260" width="3" height="15" fill="rgb(205,145,41)"/><text x="1098.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.22%)</title><rect x="1098" y="196" width="2" height="15" fill="rgb(214,66,16)"/><text x="1101.00" y="206.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.22%)</title><rect x="1098" y="212" width="2" height="15" fill="rgb(241,198,10)"/><text x="1101.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.43%)</title><rect x="1098" y="180" width="5" height="15" fill="rgb(205,41,19)"/><text x="1101.00" y="190.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.22%)</title><rect x="1100" y="196" width="3" height="15" fill="rgb(222,102,30)"/><text x="1103.00" y="206.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.22%)</title><rect x="1100" y="212" width="3" height="15" fill="rgb(213,152,13)"/><text x="1103.00" y="222.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.22%)</title><rect x="1100" y="228" width="3" height="15" fill="rgb(240,13,43)"/><text x="1103.00" y="238.50"></text></g><g><title>0x7f90757b8a51 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="1100" y="244" width="3" height="15" fill="rgb(206,144,11)"/><text x="1103.00" y="254.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1103" y="228" width="2" height="15" fill="rgb(245,66,35)"/><text x="1106.00" y="238.50"></text></g><g><title>DOUBLE_greater_equal (loops.c.src) (1 samples, 0.22%)</title><rect x="1105" y="260" width="3" height="15" fill="rgb(233,64,13)"/><text x="1108.00" y="270.50"></text></g><g><title>run_binary_simd_greater_equal_DOUBLE (simd.inc.src) (1 samples, 0.22%)</title><rect x="1105" y="276" width="3" height="15" fill="rgb(240,38,30)"/><text x="1108.00" y="286.50"></text></g><g><title>sse2_binary_greater_equal_DOUBLE (simd.inc.src) (1 samples, 0.22%)</title><rect x="1105" y="292" width="3" height="15" fill="rgb(229,145,38)"/><text x="1108.00" y="302.50"></text></g><g><title>sse2_compress4_to_byte_DOUBLE (simd.inc.src) (1 samples, 0.22%)</title><rect x="1105" y="308" width="3" height="15" fill="rgb(213,143,28)"/><text x="1108.00" y="318.50"></text></g><g><title>_mm_storel_epi64 (emmintrin.h) (1 samples, 0.22%)</title><rect x="1105" y="324" width="3" height="15" fill="rgb(236,38,4)"/><text x="1108.00" y="334.50"></text></g><g><title>array_richcompare (arrayobject.c) (3 samples, 0.65%)</title><rect x="1103" y="180" width="7" height="15" fill="rgb(223,160,12)"/><text x="1106.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.65%)</title><rect x="1103" y="196" width="7" height="15" fill="rgb(223,225,5)"/><text x="1106.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.65%)</title><rect x="1103" y="212" width="7" height="15" fill="rgb(243,219,35)"/><text x="1106.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.43%)</title><rect x="1105" y="228" width="5" height="15" fill="rgb(237,197,8)"/><text x="1108.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (2 samples, 0.43%)</title><rect x="1105" y="244" width="5" height="15" fill="rgb(214,206,37)"/><text x="1108.00" y="254.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (1 samples, 0.22%)</title><rect x="1108" y="260" width="2" height="15" fill="rgb(222,77,46)"/><text x="1111.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.22%)</title><rect x="1108" y="276" width="2" height="15" fill="rgb(240,115,54)"/><text x="1111.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (1 samples, 0.22%)</title><rect x="1108" y="292" width="2" height="15" fill="rgb(218,148,21)"/><text x="1111.00" y="302.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (1 samples, 0.22%)</title><rect x="1110" y="196" width="3" height="15" fill="rgb(229,191,42)"/><text x="1113.00" y="206.50"></text></g><g><title>check_and_adjust_index (common.h) (1 samples, 0.22%)</title><rect x="1110" y="212" width="3" height="15" fill="rgb(251,138,2)"/><text x="1113.00" y="222.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (1 samples, 0.22%)</title><rect x="1113" y="212" width="2" height="15" fill="rgb(210,145,32)"/><text x="1116.00" y="222.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (1 samples, 0.22%)</title><rect x="1113" y="228" width="2" height="15" fill="rgb(241,202,2)"/><text x="1116.00" y="238.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.22%)</title><rect x="1113" y="244" width="2" height="15" fill="rgb(228,76,36)"/><text x="1116.00" y="254.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (2 samples, 0.43%)</title><rect x="1113" y="196" width="5" height="15" fill="rgb(224,223,7)"/><text x="1116.00" y="206.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (1 samples, 0.22%)</title><rect x="1115" y="212" width="3" height="15" fill="rgb(236,60,43)"/><text x="1118.00" y="222.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.22%)</title><rect x="1115" y="228" width="3" height="15" fill="rgb(231,169,52)"/><text x="1118.00" y="238.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.22%)</title><rect x="1115" y="244" width="3" height="15" fill="rgb(250,214,7)"/><text x="1118.00" y="254.50"></text></g><g><title>IsUintAligned (array_assign.c) (1 samples, 0.22%)</title><rect x="1115" y="260" width="3" height="15" fill="rgb(239,99,34)"/><text x="1118.00" y="270.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (4 samples, 0.87%)</title><rect x="1118" y="196" width="10" height="15" fill="rgb(251,60,50)"/><text x="1121.00" y="206.50"></text></g><g><title>IsUintAligned (array_assign.c) (1 samples, 0.22%)</title><rect x="1126" y="212" width="2" height="15" fill="rgb(242,19,32)"/><text x="1129.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (8 samples, 1.73%)</title><rect x="1110" y="180" width="21" height="15" fill="rgb(226,99,43)"/><text x="1113.00" y="190.50"></text></g><g><title>mapiter_trivial_get (lowlevel_strided_loops.c.src) (1 samples, 0.22%)</title><rect x="1128" y="196" width="3" height="15" fill="rgb(210,99,1)"/><text x="1131.00" y="206.50"></text></g><g><title>check_and_adjust_index (common.h) (1 samples, 0.22%)</title><rect x="1128" y="212" width="3" height="15" fill="rgb(235,160,47)"/><text x="1131.00" y="222.50"></text></g><g><title>array_take (methods.c) (1 samples, 0.22%)</title><rect x="1131" y="196" width="2" height="15" fill="rgb(249,44,28)"/><text x="1134.00" y="206.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c) (1 samples, 0.22%)</title><rect x="1131" y="212" width="2" height="15" fill="rgb(237,25,54)"/><text x="1134.00" y="222.50"></text></g><g><title>DOUBLE_add (loops.c.src) (3 samples, 0.65%)</title><rect x="1136" y="356" width="8" height="15" fill="rgb(232,52,9)"/><text x="1139.00" y="366.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (1 samples, 0.22%)</title><rect x="1141" y="372" width="3" height="15" fill="rgb(243,60,52)"/><text x="1144.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.22%)</title><rect x="1144" y="356" width="2" height="15" fill="rgb(236,129,44)"/><text x="1147.00" y="366.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.22%)</title><rect x="1146" y="356" width="3" height="15" fill="rgb(226,151,5)"/><text x="1149.00" y="366.50"></text></g><g><title>NpyIter_RemoveAxis (nditer_api.c) (1 samples, 0.22%)</title><rect x="1149" y="356" width="2" height="15" fill="rgb(234,33,19)"/><text x="1152.00" y="366.50"></text></g><g><title>npyiter_goto_iterindex (nditer_api.c) (1 samples, 0.22%)</title><rect x="1149" y="372" width="2" height="15" fill="rgb(210,178,37)"/><text x="1152.00" y="382.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;) (8 samples, 1.73%)</title><rect x="1133" y="196" width="21" height="15" fill="rgb(249,93,48)"/><text x="1136.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 1.73%)</title><rect x="1133" y="212" width="21" height="15" fill="rgb(251,161,17)"/><text x="1136.00" y="222.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py) (8 samples, 1.73%)</title><rect x="1133" y="228" width="21" height="15" fill="rgb(210,172,31)"/><text x="1136.00" y="238.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (8 samples, 1.73%)</title><rect x="1133" y="244" width="21" height="15" fill="rgb(248,8,16)"/><text x="1136.00" y="254.50"></text></g><g><title>array_cumsum (methods.c) (8 samples, 1.73%)</title><rect x="1133" y="260" width="21" height="15" fill="rgb(251,126,27)"/><text x="1136.00" y="270.50"></text></g><g><title>PyArray_CumSum (calculation.c) (8 samples, 1.73%)</title><rect x="1133" y="276" width="21" height="15" fill="rgb(235,98,33)"/><text x="1136.00" y="286.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c) (8 samples, 1.73%)</title><rect x="1133" y="292" width="21" height="15" fill="rgb(249,98,20)"/><text x="1136.00" y="302.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c) (8 samples, 1.73%)</title><rect x="1133" y="308" width="21" height="15" fill="rgb(211,212,1)"/><text x="1136.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (8 samples, 1.73%)</title><rect x="1133" y="324" width="21" height="15" fill="rgb(237,124,8)"/><text x="1136.00" y="334.50"></text></g><g><title>PyUFunc_Accumulate (ufunc_object.c) (8 samples, 1.73%)</title><rect x="1133" y="340" width="21" height="15" fill="rgb(231,58,28)"/><text x="1136.00" y="350.50"></text></g><g><title>NpyIter_RemoveMultiIndex (nditer_api.c) (1 samples, 0.22%)</title><rect x="1151" y="356" width="3" height="15" fill="rgb(246,98,17)"/><text x="1154.00" y="366.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (1 samples, 0.22%)</title><rect x="1151" y="372" width="3" height="15" fill="rgb(246,170,8)"/><text x="1154.00" y="382.50"></text></g><g><title>npyiter_goto_iterindex (nditer_api.c) (1 samples, 0.22%)</title><rect x="1151" y="388" width="3" height="15" fill="rgb(220,73,38)"/><text x="1154.00" y="398.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;) (2 samples, 0.43%)</title><rect x="1154" y="244" width="5" height="15" fill="rgb(208,125,53)"/><text x="1157.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.43%)</title><rect x="1154" y="260" width="5" height="15" fill="rgb(207,114,3)"/><text x="1157.00" y="270.50"></text></g><g><title>all (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="1156" y="276" width="3" height="15" fill="rgb(240,62,30)"/><text x="1159.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="1156" y="292" width="3" height="15" fill="rgb(237,48,26)"/><text x="1159.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1156" y="308" width="3" height="15" fill="rgb(224,215,39)"/><text x="1159.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1156" y="324" width="3" height="15" fill="rgb(245,210,34)"/><text x="1159.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1156" y="340" width="3" height="15" fill="rgb(244,150,50)"/><text x="1159.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (1 samples, 0.22%)</title><rect x="1156" y="356" width="3" height="15" fill="rgb(253,199,25)"/><text x="1159.00" y="366.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (1 samples, 0.22%)</title><rect x="1156" y="372" width="3" height="15" fill="rgb(234,166,43)"/><text x="1159.00" y="382.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.22%)</title><rect x="1156" y="388" width="3" height="15" fill="rgb(252,225,42)"/><text x="1159.00" y="398.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.22%)</title><rect x="1156" y="404" width="3" height="15" fill="rgb(244,128,10)"/><text x="1159.00" y="414.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.22%)</title><rect x="1156" y="420" width="3" height="15" fill="rgb(241,57,18)"/><text x="1159.00" y="430.50"></text></g><g><title>isclose (&lt;__array_function__ internals&gt;) (3 samples, 0.65%)</title><rect x="1154" y="196" width="7" height="15" fill="rgb(223,140,3)"/><text x="1157.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.65%)</title><rect x="1154" y="212" width="7" height="15" fill="rgb(228,85,42)"/><text x="1157.00" y="222.50"></text></g><g><title>isclose (numpy/core/numeric.py) (3 samples, 0.65%)</title><rect x="1154" y="228" width="7" height="15" fill="rgb(234,175,4)"/><text x="1157.00" y="238.50"></text></g><g><title>within_tol (numpy/core/numeric.py) (1 samples, 0.22%)</title><rect x="1159" y="244" width="2" height="15" fill="rgb(211,86,9)"/><text x="1162.00" y="254.50"></text></g><g><title>__exit__ (numpy/core/_ufunc_config.py) (1 samples, 0.22%)</title><rect x="1159" y="260" width="2" height="15" fill="rgb(234,19,27)"/><text x="1162.00" y="270.50"></text></g><g><title>seterr (numpy/core/_ufunc_config.py) (1 samples, 0.22%)</title><rect x="1159" y="276" width="2" height="15" fill="rgb(224,141,4)"/><text x="1162.00" y="286.50"></text></g><g><title>ufunc_seterr (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1159" y="292" width="2" height="15" fill="rgb(232,185,32)"/><text x="1162.00" y="302.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (1 samples, 0.22%)</title><rect x="1167" y="260" width="2" height="15" fill="rgb(213,214,28)"/><text x="1170.00" y="270.50"></text></g><g><title>_check_ufunc_fperr (extobj.c) (1 samples, 0.22%)</title><rect x="1169" y="324" width="3" height="15" fill="rgb(236,128,22)"/><text x="1172.00" y="334.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py) (87 samples, 18.83%)</title><rect x="957" y="164" width="222" height="15" fill="rgb(230,185,54)"/><text x="960.00" y="174.50">_get_median_predict (sklearn/..</text></g><g><title>stable_cumsum (sklearn/utils/extmath.py) (19 samples, 4.11%)</title><rect x="1131" y="180" width="48" height="15" fill="rgb(222,72,30)"/><text x="1134.00" y="190.50">stab..</text></g><g><title>sum (&lt;__array_function__ internals&gt;) (7 samples, 1.52%)</title><rect x="1161" y="196" width="18" height="15" fill="rgb(251,183,16)"/><text x="1164.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 1.30%)</title><rect x="1164" y="212" width="15" height="15" fill="rgb(230,32,28)"/><text x="1167.00" y="222.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (6 samples, 1.30%)</title><rect x="1164" y="228" width="15" height="15" fill="rgb(237,146,6)"/><text x="1167.00" y="238.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (6 samples, 1.30%)</title><rect x="1164" y="244" width="15" height="15" fill="rgb(246,87,26)"/><text x="1167.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (4 samples, 0.87%)</title><rect x="1169" y="260" width="10" height="15" fill="rgb(245,7,32)"/><text x="1172.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 0.87%)</title><rect x="1169" y="276" width="10" height="15" fill="rgb(241,64,49)"/><text x="1172.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (4 samples, 0.87%)</title><rect x="1169" y="292" width="10" height="15" fill="rgb(213,32,51)"/><text x="1172.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (4 samples, 0.87%)</title><rect x="1169" y="308" width="10" height="15" fill="rgb(253,141,35)"/><text x="1172.00" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c) (3 samples, 0.65%)</title><rect x="1172" y="324" width="7" height="15" fill="rgb(228,71,48)"/><text x="1175.00" y="334.50"></text></g><g><title>DOUBLE_add (loops.c.src) (3 samples, 0.65%)</title><rect x="1172" y="340" width="7" height="15" fill="rgb(218,155,23)"/><text x="1175.00" y="350.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (1 samples, 0.22%)</title><rect x="1177" y="356" width="2" height="15" fill="rgb(239,184,14)"/><text x="1180.00" y="366.50"></text></g><g><title>__enter__ (warnings.py) (1 samples, 0.22%)</title><rect x="1182" y="196" width="2" height="15" fill="rgb(248,97,27)"/><text x="1185.00" y="206.50"></text></g><g><title>profile_skl (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (91 samples, 19.70%)</title><rect x="955" y="68" width="232" height="15" fill="rgb(251,107,28)"/><text x="958.00" y="78.50">profile_skl (bench_AdaBoostReg..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (91 samples, 19.70%)</title><rect x="955" y="84" width="232" height="15" fill="rgb(205,9,23)"/><text x="958.00" y="94.50">setup_profile (bench_AdaBoostR..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (91 samples, 19.70%)</title><rect x="955" y="100" width="232" height="15" fill="rgb(237,119,34)"/><text x="958.00" y="110.50">profile (bench_AdaBoostRegress..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (91 samples, 19.70%)</title><rect x="955" y="116" width="232" height="15" fill="rgb(205,140,28)"/><text x="958.00" y="126.50">time_predict (mlprodict/asv_be..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (91 samples, 19.70%)</title><rect x="955" y="132" width="232" height="15" fill="rgb(222,5,11)"/><text x="958.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchm..</text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py) (91 samples, 19.70%)</title><rect x="955" y="148" width="232" height="15" fill="rgb(213,222,51)"/><text x="958.00" y="158.50">predict (sklearn/ensemble/_wei..</text></g><g><title>_validate_data (sklearn/ensemble/_weight_boosting.py) (3 samples, 0.65%)</title><rect x="1179" y="164" width="8" height="15" fill="rgb(236,4,18)"/><text x="1182.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (2 samples, 0.43%)</title><rect x="1182" y="180" width="5" height="15" fill="rgb(208,141,15)"/><text x="1185.00" y="190.50"></text></g><g><title>__exit__ (warnings.py) (1 samples, 0.22%)</title><rect x="1184" y="196" width="3" height="15" fill="rgb(214,221,0)"/><text x="1187.00" y="206.50"></text></g><g><title>all (462 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(224,112,35)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (462 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(217,208,44)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py)</text></g><g><title>start (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_50_12_float_.py) (1 samples, 0.22%)</title><rect x="1187" y="68" width="3" height="15" fill="rgb(250,225,13)"/><text x="1190.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_64_n_estimators5.py) (1 samples, 0.22%)</title><rect x="1187" y="84" width="3" height="15" fill="rgb(251,179,6)"/><text x="1190.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="1187" y="100" width="3" height="15" fill="rgb(222,52,47)"/><text x="1190.00" y="110.50"></text></g><g><title>_get_dataset (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="1187" y="116" width="3" height="15" fill="rgb(206,112,50)"/><text x="1190.00" y="126.50"></text></g><g><title>_get_xdtype (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="1187" y="132" width="3" height="15" fill="rgb(214,18,41)"/><text x="1190.00" y="142.50"></text></g></g></svg>