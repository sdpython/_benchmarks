<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1926" onload="init(evt)" viewBox="0 0 1200 1926" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1926" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1909.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1909.00"> </text><g id="frames"><g><title>declare_namespace (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(220,98,28)"/><text x="13.00" y="910.50"></text></g><g><title>__iter__ (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="10" y="916" width="1" height="15" fill="rgb(237,131,12)"/><text x="13.00" y="926.50"></text></g><g><title>_recalculate (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="10" y="932" width="1" height="15" fill="rgb(226,198,54)"/><text x="13.00" y="942.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="10" y="948" width="1" height="15" fill="rgb(247,64,11)"/><text x="13.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="10" y="964" width="1" height="15" fill="rgb(251,203,33)"/><text x="13.00" y="974.50"></text></g><g><title>_path_join (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="10" y="980" width="1" height="15" fill="rgb(239,28,49)"/><text x="13.00" y="990.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="11" y="980" width="1" height="15" fill="rgb(248,38,24)"/><text x="14.00" y="990.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="11" y="996" width="1" height="15" fill="rgb(238,94,46)"/><text x="14.00" y="1006.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="11" y="1012" width="1" height="15" fill="rgb(248,36,0)"/><text x="14.00" y="1022.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.09%)</title><rect x="11" y="1028" width="1" height="15" fill="rgb(211,165,38)"/><text x="14.00" y="1038.50"></text></g><g><title>0x7fa9748b2ec9 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="11" y="1044" width="1" height="15" fill="rgb(237,202,23)"/><text x="14.00" y="1054.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (3 samples, 0.28%)</title><rect x="10" y="868" width="3" height="15" fill="rgb(228,26,20)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (3 samples, 0.28%)</title><rect x="10" y="884" width="3" height="15" fill="rgb(218,45,29)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (2 samples, 0.19%)</title><rect x="11" y="900" width="2" height="15" fill="rgb(216,12,15)"/><text x="14.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (2 samples, 0.19%)</title><rect x="11" y="916" width="2" height="15" fill="rgb(210,63,18)"/><text x="14.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="11" y="932" width="2" height="15" fill="rgb(252,73,15)"/><text x="14.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="11" y="948" width="2" height="15" fill="rgb(235,117,20)"/><text x="14.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="11" y="964" width="2" height="15" fill="rgb(220,114,30)"/><text x="14.00" y="974.50"></text></g><g><title>_path_join (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="12" y="980" width="1" height="15" fill="rgb(216,213,36)"/><text x="15.00" y="990.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="13" y="932" width="1" height="15" fill="rgb(226,74,11)"/><text x="16.00" y="942.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="13" y="948" width="1" height="15" fill="rgb(250,161,41)"/><text x="16.00" y="958.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="13" y="964" width="1" height="15" fill="rgb(241,160,0)"/><text x="16.00" y="974.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.09%)</title><rect x="13" y="980" width="1" height="15" fill="rgb(215,179,21)"/><text x="16.00" y="990.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.09%)</title><rect x="13" y="996" width="1" height="15" fill="rgb(250,50,7)"/><text x="16.00" y="1006.50"></text></g><g><title>_parse_letter_version (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.09%)</title><rect x="13" y="1012" width="1" height="15" fill="rgb(241,73,46)"/><text x="16.00" y="1022.50"></text></g><g><title>_build_master (pkg_resources/__init__.py) (2 samples, 0.19%)</title><rect x="13" y="868" width="2" height="15" fill="rgb(234,107,35)"/><text x="16.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (2 samples, 0.19%)</title><rect x="13" y="884" width="2" height="15" fill="rgb(242,118,52)"/><text x="16.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (2 samples, 0.19%)</title><rect x="13" y="900" width="2" height="15" fill="rgb(207,125,52)"/><text x="16.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.19%)</title><rect x="13" y="916" width="2" height="15" fill="rgb(246,71,29)"/><text x="16.00" y="926.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="14" y="932" width="1" height="15" fill="rgb(212,224,28)"/><text x="17.00" y="942.50"></text></g><g><title>from_location (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="14" y="948" width="1" height="15" fill="rgb(224,36,54)"/><text x="17.00" y="958.50"></text></g><g><title>_sre_SRE_Pattern_match (python3.7) (1 samples, 0.09%)</title><rect x="14" y="964" width="1" height="15" fill="rgb(250,145,10)"/><text x="17.00" y="974.50"></text></g><g><title>sre_ucs1_match (python3.7) (1 samples, 0.09%)</title><rect x="14" y="980" width="1" height="15" fill="rgb(215,11,3)"/><text x="17.00" y="990.50"></text></g><g><title>add (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="15" y="884" width="1" height="15" fill="rgb(220,44,43)"/><text x="18.00" y="894.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="16" y="900" width="1" height="15" fill="rgb(217,116,15)"/><text x="19.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="16" y="916" width="1" height="15" fill="rgb(214,168,19)"/><text x="19.00" y="926.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="16" y="932" width="1" height="15" fill="rgb(236,195,46)"/><text x="19.00" y="942.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.09%)</title><rect x="16" y="948" width="1" height="15" fill="rgb(254,118,7)"/><text x="19.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.09%)</title><rect x="16" y="964" width="1" height="15" fill="rgb(248,96,47)"/><text x="19.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="196" width="8" height="15" fill="rgb(249,148,36)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="212" width="8" height="15" fill="rgb(210,85,8)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="228" width="8" height="15" fill="rgb(253,112,5)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="244" width="8" height="15" fill="rgb(231,24,0)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.75%)</title><rect x="10" y="260" width="8" height="15" fill="rgb(244,213,16)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="276" width="8" height="15" fill="rgb(208,104,24)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (8 samples, 0.75%)</title><rect x="10" y="292" width="8" height="15" fill="rgb(254,17,20)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="308" width="8" height="15" fill="rgb(215,168,1)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="324" width="8" height="15" fill="rgb(209,20,1)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="340" width="8" height="15" fill="rgb(243,212,48)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.75%)</title><rect x="10" y="356" width="8" height="15" fill="rgb(232,151,37)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="372" width="8" height="15" fill="rgb(232,166,0)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (8 samples, 0.75%)</title><rect x="10" y="388" width="8" height="15" fill="rgb(212,171,33)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="404" width="8" height="15" fill="rgb(248,166,37)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="420" width="8" height="15" fill="rgb(254,63,47)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="436" width="8" height="15" fill="rgb(216,40,7)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.75%)</title><rect x="10" y="452" width="8" height="15" fill="rgb(238,207,24)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="468" width="8" height="15" fill="rgb(209,158,2)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (8 samples, 0.75%)</title><rect x="10" y="484" width="8" height="15" fill="rgb(218,89,43)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="500" width="8" height="15" fill="rgb(237,55,23)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="516" width="8" height="15" fill="rgb(254,124,9)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="532" width="8" height="15" fill="rgb(236,121,53)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.75%)</title><rect x="10" y="548" width="8" height="15" fill="rgb(222,161,45)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="564" width="8" height="15" fill="rgb(223,89,36)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (8 samples, 0.75%)</title><rect x="10" y="580" width="8" height="15" fill="rgb(253,42,50)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="596" width="8" height="15" fill="rgb(226,153,25)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="612" width="8" height="15" fill="rgb(250,32,30)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="628" width="8" height="15" fill="rgb(229,10,30)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="644" width="8" height="15" fill="rgb(236,126,47)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="660" width="8" height="15" fill="rgb(239,134,16)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="676" width="8" height="15" fill="rgb(239,160,4)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.75%)</title><rect x="10" y="692" width="8" height="15" fill="rgb(250,155,11)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="708" width="8" height="15" fill="rgb(229,35,4)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (8 samples, 0.75%)</title><rect x="10" y="724" width="8" height="15" fill="rgb(242,101,38)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="740" width="8" height="15" fill="rgb(208,49,14)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="756" width="8" height="15" fill="rgb(249,155,53)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="772" width="8" height="15" fill="rgb(237,38,16)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.75%)</title><rect x="10" y="788" width="8" height="15" fill="rgb(246,167,13)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="10" y="804" width="8" height="15" fill="rgb(244,54,15)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (8 samples, 0.75%)</title><rect x="10" y="820" width="8" height="15" fill="rgb(234,27,33)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (8 samples, 0.75%)</title><rect x="10" y="836" width="8" height="15" fill="rgb(219,65,54)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (8 samples, 0.75%)</title><rect x="10" y="852" width="8" height="15" fill="rgb(205,110,36)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (3 samples, 0.28%)</title><rect x="15" y="868" width="3" height="15" fill="rgb(229,206,0)"/><text x="18.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.19%)</title><rect x="16" y="884" width="2" height="15" fill="rgb(212,111,6)"/><text x="19.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="17" y="900" width="1" height="15" fill="rgb(246,100,25)"/><text x="20.00" y="910.50"></text></g><g><title>from_location (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="17" y="916" width="1" height="15" fill="rgb(207,205,28)"/><text x="20.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="18" y="1124" width="1" height="15" fill="rgb(215,91,32)"/><text x="21.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="18" y="1140" width="1" height="15" fill="rgb(247,214,2)"/><text x="21.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="18" y="1156" width="1" height="15" fill="rgb(231,59,11)"/><text x="21.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="18" y="1172" width="1" height="15" fill="rgb(221,85,50)"/><text x="21.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="18" y="1188" width="1" height="15" fill="rgb(208,81,16)"/><text x="21.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py) (1 samples, 0.09%)</title><rect x="18" y="1204" width="1" height="15" fill="rgb(207,163,16)"/><text x="21.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="18" y="1220" width="1" height="15" fill="rgb(235,123,13)"/><text x="21.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="18" y="1236" width="1" height="15" fill="rgb(224,164,10)"/><text x="21.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="18" y="1252" width="1" height="15" fill="rgb(210,99,40)"/><text x="21.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="18" y="1268" width="1" height="15" fill="rgb(249,61,21)"/><text x="21.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="18" y="1284" width="1" height="15" fill="rgb(209,3,48)"/><text x="21.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_container.py) (1 samples, 0.09%)</title><rect x="18" y="1300" width="1" height="15" fill="rgb(224,183,20)"/><text x="21.00" y="1310.50"></text></g><g><title>_get_operation_list (skl2onnx/common/_container.py) (1 samples, 0.09%)</title><rect x="18" y="1316" width="1" height="15" fill="rgb(228,218,43)"/><text x="21.00" y="1326.50"></text></g><g><title>getsource (inspect.py) (1 samples, 0.09%)</title><rect x="18" y="1332" width="1" height="15" fill="rgb(237,48,9)"/><text x="21.00" y="1342.50"></text></g><g><title>getsourcelines (inspect.py) (1 samples, 0.09%)</title><rect x="18" y="1348" width="1" height="15" fill="rgb(220,148,22)"/><text x="21.00" y="1358.50"></text></g><g><title>getblock (inspect.py) (1 samples, 0.09%)</title><rect x="18" y="1364" width="1" height="15" fill="rgb(230,198,12)"/><text x="21.00" y="1374.50"></text></g><g><title>tokeneater (inspect.py) (1 samples, 0.09%)</title><rect x="18" y="1380" width="1" height="15" fill="rgb(220,113,1)"/><text x="21.00" y="1390.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="484" width="3" height="15" fill="rgb(242,72,39)"/><text x="21.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="500" width="3" height="15" fill="rgb(245,148,48)"/><text x="21.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="516" width="3" height="15" fill="rgb(243,133,9)"/><text x="21.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="532" width="3" height="15" fill="rgb(227,103,27)"/><text x="21.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="18" y="548" width="3" height="15" fill="rgb(218,47,29)"/><text x="21.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="564" width="3" height="15" fill="rgb(226,168,30)"/><text x="21.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (2 samples, 0.19%)</title><rect x="18" y="580" width="3" height="15" fill="rgb(217,85,1)"/><text x="21.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="596" width="3" height="15" fill="rgb(232,51,12)"/><text x="21.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="612" width="3" height="15" fill="rgb(239,2,6)"/><text x="21.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="628" width="3" height="15" fill="rgb(248,29,41)"/><text x="21.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="18" y="644" width="3" height="15" fill="rgb(218,69,8)"/><text x="21.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="660" width="3" height="15" fill="rgb(239,18,32)"/><text x="21.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (2 samples, 0.19%)</title><rect x="18" y="676" width="3" height="15" fill="rgb(216,143,20)"/><text x="21.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="692" width="3" height="15" fill="rgb(222,63,31)"/><text x="21.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="708" width="3" height="15" fill="rgb(248,203,19)"/><text x="21.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="724" width="3" height="15" fill="rgb(223,61,30)"/><text x="21.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="18" y="740" width="3" height="15" fill="rgb(227,125,42)"/><text x="21.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="756" width="3" height="15" fill="rgb(230,101,14)"/><text x="21.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (2 samples, 0.19%)</title><rect x="18" y="772" width="3" height="15" fill="rgb(231,155,3)"/><text x="21.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="788" width="3" height="15" fill="rgb(220,45,4)"/><text x="21.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="804" width="3" height="15" fill="rgb(226,38,10)"/><text x="21.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="820" width="3" height="15" fill="rgb(235,147,35)"/><text x="21.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="18" y="836" width="3" height="15" fill="rgb(241,8,43)"/><text x="21.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="852" width="3" height="15" fill="rgb(240,42,54)"/><text x="21.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (2 samples, 0.19%)</title><rect x="18" y="868" width="3" height="15" fill="rgb(241,124,25)"/><text x="21.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="884" width="3" height="15" fill="rgb(205,188,27)"/><text x="21.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="900" width="3" height="15" fill="rgb(250,97,33)"/><text x="21.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="916" width="3" height="15" fill="rgb(244,138,26)"/><text x="21.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="932" width="3" height="15" fill="rgb(221,15,6)"/><text x="21.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="948" width="3" height="15" fill="rgb(230,42,51)"/><text x="21.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="964" width="3" height="15" fill="rgb(228,154,2)"/><text x="21.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="18" y="980" width="3" height="15" fill="rgb(210,190,14)"/><text x="21.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="996" width="3" height="15" fill="rgb(206,119,14)"/><text x="21.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (2 samples, 0.19%)</title><rect x="18" y="1012" width="3" height="15" fill="rgb(251,87,2)"/><text x="21.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="1028" width="3" height="15" fill="rgb(245,186,34)"/><text x="21.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="1044" width="3" height="15" fill="rgb(239,84,16)"/><text x="21.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="1060" width="3" height="15" fill="rgb(226,123,27)"/><text x="21.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="18" y="1076" width="3" height="15" fill="rgb(244,27,17)"/><text x="21.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="1092" width="3" height="15" fill="rgb(233,217,35)"/><text x="21.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (2 samples, 0.19%)</title><rect x="18" y="1108" width="3" height="15" fill="rgb(227,229,50)"/><text x="21.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1124" width="2" height="15" fill="rgb(246,92,50)"/><text x="22.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1140" width="2" height="15" fill="rgb(236,39,6)"/><text x="22.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1156" width="2" height="15" fill="rgb(221,185,49)"/><text x="22.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1172" width="2" height="15" fill="rgb(251,33,10)"/><text x="22.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1188" width="2" height="15" fill="rgb(220,86,32)"/><text x="22.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="19" y="1204" width="2" height="15" fill="rgb(248,76,40)"/><text x="22.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1220" width="2" height="15" fill="rgb(244,168,10)"/><text x="22.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (1 samples, 0.09%)</title><rect x="19" y="1236" width="2" height="15" fill="rgb(222,95,41)"/><text x="22.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1252" width="2" height="15" fill="rgb(231,40,1)"/><text x="22.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1268" width="2" height="15" fill="rgb(232,56,41)"/><text x="22.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1284" width="2" height="15" fill="rgb(233,125,24)"/><text x="22.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1300" width="2" height="15" fill="rgb(253,227,6)"/><text x="22.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1316" width="2" height="15" fill="rgb(232,179,35)"/><text x="22.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="19" y="1332" width="2" height="15" fill="rgb(239,202,46)"/><text x="22.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1348" width="2" height="15" fill="rgb(215,87,7)"/><text x="22.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (1 samples, 0.09%)</title><rect x="19" y="1364" width="2" height="15" fill="rgb(208,9,43)"/><text x="22.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1380" width="2" height="15" fill="rgb(235,137,17)"/><text x="22.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1396" width="2" height="15" fill="rgb(213,120,13)"/><text x="22.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1412" width="2" height="15" fill="rgb(225,124,18)"/><text x="22.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="19" y="1428" width="2" height="15" fill="rgb(232,132,19)"/><text x="22.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1444" width="2" height="15" fill="rgb(209,170,43)"/><text x="22.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.09%)</title><rect x="19" y="1460" width="2" height="15" fill="rgb(232,123,39)"/><text x="22.00" y="1470.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1476" width="2" height="15" fill="rgb(213,169,40)"/><text x="22.00" y="1486.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1492" width="2" height="15" fill="rgb(235,15,15)"/><text x="22.00" y="1502.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1508" width="2" height="15" fill="rgb(253,141,52)"/><text x="22.00" y="1518.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="19" y="1524" width="2" height="15" fill="rgb(215,76,18)"/><text x="22.00" y="1534.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1540" width="2" height="15" fill="rgb(205,177,29)"/><text x="22.00" y="1550.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/automation.py) (1 samples, 0.09%)</title><rect x="19" y="1556" width="2" height="15" fill="rgb(231,190,14)"/><text x="22.00" y="1566.50"></text></g><g><title>_get_doc_template (skl2onnx/algebra/automation.py) (1 samples, 0.09%)</title><rect x="19" y="1572" width="2" height="15" fill="rgb(224,181,4)"/><text x="22.00" y="1582.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1588" width="2" height="15" fill="rgb(215,5,50)"/><text x="22.00" y="1598.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1604" width="2" height="15" fill="rgb(208,130,42)"/><text x="22.00" y="1614.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1620" width="2" height="15" fill="rgb(235,113,43)"/><text x="22.00" y="1630.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="19" y="1636" width="2" height="15" fill="rgb(224,122,44)"/><text x="22.00" y="1646.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1652" width="2" height="15" fill="rgb(227,116,53)"/><text x="22.00" y="1662.50"></text></g><g><title>&lt;module&gt; (jinja2/__init__.py) (1 samples, 0.09%)</title><rect x="19" y="1668" width="2" height="15" fill="rgb(221,103,18)"/><text x="22.00" y="1678.50"></text></g><g><title>_patch_async (jinja2/__init__.py) (1 samples, 0.09%)</title><rect x="19" y="1684" width="2" height="15" fill="rgb(239,224,1)"/><text x="22.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1700" width="2" height="15" fill="rgb(231,34,49)"/><text x="22.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1716" width="2" height="15" fill="rgb(233,19,42)"/><text x="22.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1732" width="2" height="15" fill="rgb(235,17,54)"/><text x="22.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="19" y="1748" width="2" height="15" fill="rgb(237,123,18)"/><text x="22.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1764" width="2" height="15" fill="rgb(235,179,28)"/><text x="22.00" y="1774.50"></text></g><g><title>&lt;module&gt; (jinja2/asyncsupport.py) (1 samples, 0.09%)</title><rect x="19" y="1780" width="2" height="15" fill="rgb(211,49,53)"/><text x="22.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1796" width="2" height="15" fill="rgb(211,177,5)"/><text x="22.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1812" width="2" height="15" fill="rgb(249,192,26)"/><text x="22.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1828" width="2" height="15" fill="rgb(230,131,39)"/><text x="22.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="19" y="1844" width="2" height="15" fill="rgb(217,15,48)"/><text x="22.00" y="1854.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="19" y="1860" width="2" height="15" fill="rgb(234,171,1)"/><text x="22.00" y="1870.50"></text></g><g><title>cache_from_source (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="19" y="1876" width="2" height="15" fill="rgb(252,14,52)"/><text x="22.00" y="1886.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (11 samples, 1.03%)</title><rect x="10" y="68" width="12" height="15" fill="rgb(239,188,50)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 1.03%)</title><rect x="10" y="84" width="12" height="15" fill="rgb(245,198,34)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 1.03%)</title><rect x="10" y="100" width="12" height="15" fill="rgb(234,97,45)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (11 samples, 1.03%)</title><rect x="10" y="116" width="12" height="15" fill="rgb(209,106,41)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 1.03%)</title><rect x="10" y="132" width="12" height="15" fill="rgb(233,153,23)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_64_n_estimators5.py) (11 samples, 1.03%)</title><rect x="10" y="148" width="12" height="15" fill="rgb(225,24,51)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (11 samples, 1.03%)</title><rect x="10" y="164" width="12" height="15" fill="rgb(218,43,46)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 1.03%)</title><rect x="10" y="180" width="12" height="15" fill="rgb(249,168,33)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="196" width="4" height="15" fill="rgb(243,213,27)"/><text x="21.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.28%)</title><rect x="18" y="212" width="4" height="15" fill="rgb(222,26,40)"/><text x="21.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="228" width="4" height="15" fill="rgb(214,100,51)"/><text x="21.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (3 samples, 0.28%)</title><rect x="18" y="244" width="4" height="15" fill="rgb(248,222,4)"/><text x="21.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="260" width="4" height="15" fill="rgb(248,115,49)"/><text x="21.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="276" width="4" height="15" fill="rgb(232,57,37)"/><text x="21.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="292" width="4" height="15" fill="rgb(234,54,46)"/><text x="21.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.28%)</title><rect x="18" y="308" width="4" height="15" fill="rgb(221,54,43)"/><text x="21.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="324" width="4" height="15" fill="rgb(219,35,38)"/><text x="21.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.28%)</title><rect x="18" y="340" width="4" height="15" fill="rgb(213,126,48)"/><text x="21.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="356" width="4" height="15" fill="rgb(231,28,9)"/><text x="21.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="372" width="4" height="15" fill="rgb(250,116,37)"/><text x="21.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="388" width="4" height="15" fill="rgb(218,131,30)"/><text x="21.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.28%)</title><rect x="18" y="404" width="4" height="15" fill="rgb(217,116,2)"/><text x="21.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="420" width="4" height="15" fill="rgb(236,40,38)"/><text x="21.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (3 samples, 0.28%)</title><rect x="18" y="436" width="4" height="15" fill="rgb(220,100,13)"/><text x="21.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="452" width="4" height="15" fill="rgb(248,184,15)"/><text x="21.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="18" y="468" width="4" height="15" fill="rgb(231,70,28)"/><text x="21.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="484" width="1" height="15" fill="rgb(219,129,4)"/><text x="24.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="500" width="1" height="15" fill="rgb(213,181,36)"/><text x="24.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="516" width="1" height="15" fill="rgb(251,221,54)"/><text x="24.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.09%)</title><rect x="21" y="532" width="1" height="15" fill="rgb(217,222,40)"/><text x="24.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="548" width="1" height="15" fill="rgb(230,97,0)"/><text x="24.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="564" width="1" height="15" fill="rgb(244,69,24)"/><text x="24.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="580" width="1" height="15" fill="rgb(240,89,17)"/><text x="24.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="596" width="1" height="15" fill="rgb(248,217,2)"/><text x="24.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="612" width="1" height="15" fill="rgb(209,152,4)"/><text x="24.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (1 samples, 0.09%)</title><rect x="21" y="628" width="1" height="15" fill="rgb(209,169,50)"/><text x="24.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="644" width="1" height="15" fill="rgb(252,109,47)"/><text x="24.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="660" width="1" height="15" fill="rgb(252,84,50)"/><text x="24.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="676" width="1" height="15" fill="rgb(213,186,51)"/><text x="24.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="692" width="1" height="15" fill="rgb(208,23,24)"/><text x="24.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="708" width="1" height="15" fill="rgb(206,185,17)"/><text x="24.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (1 samples, 0.09%)</title><rect x="21" y="724" width="1" height="15" fill="rgb(238,191,48)"/><text x="24.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="740" width="1" height="15" fill="rgb(244,182,54)"/><text x="24.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="756" width="1" height="15" fill="rgb(213,156,41)"/><text x="24.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="772" width="1" height="15" fill="rgb(243,116,13)"/><text x="24.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="788" width="1" height="15" fill="rgb(250,8,53)"/><text x="24.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="804" width="1" height="15" fill="rgb(249,142,33)"/><text x="24.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (1 samples, 0.09%)</title><rect x="21" y="820" width="1" height="15" fill="rgb(212,164,54)"/><text x="24.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="836" width="1" height="15" fill="rgb(218,62,18)"/><text x="24.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="852" width="1" height="15" fill="rgb(205,29,23)"/><text x="24.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="868" width="1" height="15" fill="rgb(214,98,34)"/><text x="24.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="884" width="1" height="15" fill="rgb(248,38,42)"/><text x="24.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="900" width="1" height="15" fill="rgb(231,163,5)"/><text x="24.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (1 samples, 0.09%)</title><rect x="21" y="916" width="1" height="15" fill="rgb(224,70,46)"/><text x="24.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="932" width="1" height="15" fill="rgb(239,116,44)"/><text x="24.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="948" width="1" height="15" fill="rgb(238,23,30)"/><text x="24.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="964" width="1" height="15" fill="rgb(232,40,43)"/><text x="24.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="980" width="1" height="15" fill="rgb(240,183,28)"/><text x="24.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="996" width="1" height="15" fill="rgb(215,9,31)"/><text x="24.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (1 samples, 0.09%)</title><rect x="21" y="1012" width="1" height="15" fill="rgb(238,6,33)"/><text x="24.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1028" width="1" height="15" fill="rgb(254,171,9)"/><text x="24.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1044" width="1" height="15" fill="rgb(238,212,14)"/><text x="24.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1060" width="1" height="15" fill="rgb(211,51,42)"/><text x="24.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="1076" width="1" height="15" fill="rgb(224,173,28)"/><text x="24.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1092" width="1" height="15" fill="rgb(233,59,14)"/><text x="24.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (1 samples, 0.09%)</title><rect x="21" y="1108" width="1" height="15" fill="rgb(242,99,13)"/><text x="24.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1124" width="1" height="15" fill="rgb(242,90,19)"/><text x="24.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1140" width="1" height="15" fill="rgb(225,102,45)"/><text x="24.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1156" width="1" height="15" fill="rgb(252,72,16)"/><text x="24.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="1172" width="1" height="15" fill="rgb(246,217,0)"/><text x="24.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1188" width="1" height="15" fill="rgb(216,115,33)"/><text x="24.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (1 samples, 0.09%)</title><rect x="21" y="1204" width="1" height="15" fill="rgb(208,164,22)"/><text x="24.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1220" width="1" height="15" fill="rgb(206,220,7)"/><text x="24.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1236" width="1" height="15" fill="rgb(205,195,13)"/><text x="24.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1252" width="1" height="15" fill="rgb(247,176,17)"/><text x="24.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="1268" width="1" height="15" fill="rgb(227,29,45)"/><text x="24.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1284" width="1" height="15" fill="rgb(207,126,3)"/><text x="24.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (1 samples, 0.09%)</title><rect x="21" y="1300" width="1" height="15" fill="rgb(251,82,21)"/><text x="24.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1316" width="1" height="15" fill="rgb(220,176,31)"/><text x="24.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1332" width="1" height="15" fill="rgb(217,180,53)"/><text x="24.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1348" width="1" height="15" fill="rgb(238,180,12)"/><text x="24.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="1364" width="1" height="15" fill="rgb(228,141,9)"/><text x="24.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1380" width="1" height="15" fill="rgb(212,44,44)"/><text x="24.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (1 samples, 0.09%)</title><rect x="21" y="1396" width="1" height="15" fill="rgb(243,42,34)"/><text x="24.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1412" width="1" height="15" fill="rgb(214,100,31)"/><text x="24.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1428" width="1" height="15" fill="rgb(242,34,46)"/><text x="24.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1444" width="1" height="15" fill="rgb(231,74,42)"/><text x="24.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="1460" width="1" height="15" fill="rgb(209,52,40)"/><text x="24.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1476" width="1" height="15" fill="rgb(237,68,20)"/><text x="24.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (1 samples, 0.09%)</title><rect x="21" y="1492" width="1" height="15" fill="rgb(209,60,19)"/><text x="24.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1508" width="1" height="15" fill="rgb(210,63,50)"/><text x="24.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1524" width="1" height="15" fill="rgb(216,4,42)"/><text x="24.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1540" width="1" height="15" fill="rgb(224,143,33)"/><text x="24.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="1556" width="1" height="15" fill="rgb(215,176,7)"/><text x="24.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1572" width="1" height="15" fill="rgb(206,157,13)"/><text x="24.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py) (1 samples, 0.09%)</title><rect x="21" y="1588" width="1" height="15" fill="rgb(217,150,38)"/><text x="24.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1604" width="1" height="15" fill="rgb(214,146,49)"/><text x="24.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1620" width="1" height="15" fill="rgb(216,196,50)"/><text x="24.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1636" width="1" height="15" fill="rgb(251,219,34)"/><text x="24.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="1652" width="1" height="15" fill="rgb(219,107,53)"/><text x="24.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1668" width="1" height="15" fill="rgb(244,191,43)"/><text x="24.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/style.py) (1 samples, 0.09%)</title><rect x="21" y="1684" width="1" height="15" fill="rgb(224,26,33)"/><text x="24.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1700" width="1" height="15" fill="rgb(236,172,53)"/><text x="24.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1716" width="1" height="15" fill="rgb(227,4,33)"/><text x="24.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1732" width="1" height="15" fill="rgb(245,51,12)"/><text x="24.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="21" y="1748" width="1" height="15" fill="rgb(232,149,12)"/><text x="24.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="21" y="1764" width="1" height="15" fill="rgb(216,88,23)"/><text x="24.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/cm.py) (1 samples, 0.09%)</title><rect x="21" y="1780" width="1" height="15" fill="rgb(228,223,7)"/><text x="24.00" y="1790.50"></text></g><g><title>_generate_cmap (matplotlib/cm.py) (1 samples, 0.09%)</title><rect x="21" y="1796" width="1" height="15" fill="rgb(222,213,1)"/><text x="24.00" y="1806.50"></text></g><g><title>from_list (matplotlib/colors.py) (1 samples, 0.09%)</title><rect x="21" y="1812" width="1" height="15" fill="rgb(242,0,2)"/><text x="24.00" y="1822.50"></text></g><g><title>linspace (&lt;__array_function__ internals&gt;) (1 samples, 0.09%)</title><rect x="21" y="1828" width="1" height="15" fill="rgb(243,25,23)"/><text x="24.00" y="1838.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.09%)</title><rect x="21" y="1844" width="1" height="15" fill="rgb(244,18,34)"/><text x="24.00" y="1854.50"></text></g><g><title>linspace (numpy/core/function_base.py) (1 samples, 0.09%)</title><rect x="21" y="1860" width="1" height="15" fill="rgb(228,132,33)"/><text x="24.00" y="1870.50"></text></g><g><title>0x7fa9348daff9 (?) (1 samples, 0.09%)</title><rect x="26" y="212" width="1" height="15" fill="rgb(212,186,32)"/><text x="29.00" y="222.50"></text></g><g><title>0x7fa9348d5ef6 (?) (1 samples, 0.09%)</title><rect x="26" y="228" width="1" height="15" fill="rgb(224,21,21)"/><text x="29.00" y="238.50"></text></g><g><title>0x7fa9348ca962 (?) (1 samples, 0.09%)</title><rect x="26" y="244" width="1" height="15" fill="rgb(251,6,38)"/><text x="29.00" y="254.50"></text></g><g><title>0x7fa9348fe7a7 (?) (1 samples, 0.09%)</title><rect x="26" y="260" width="1" height="15" fill="rgb(245,28,50)"/><text x="29.00" y="270.50"></text></g><g><title>0x7fa9348fe379 (?) (1 samples, 0.09%)</title><rect x="26" y="276" width="1" height="15" fill="rgb(222,186,27)"/><text x="29.00" y="286.50"></text></g><g><title>0x7fa934d5c8b8 (?) (1 samples, 0.09%)</title><rect x="26" y="292" width="1" height="15" fill="rgb(249,69,46)"/><text x="29.00" y="302.50"></text></g><g><title>0x7fa934d5ac7f (?) (1 samples, 0.09%)</title><rect x="26" y="308" width="1" height="15" fill="rgb(213,45,29)"/><text x="29.00" y="318.50"></text></g><g><title>0x7fa934d6d99c (?) (1 samples, 0.09%)</title><rect x="26" y="324" width="1" height="15" fill="rgb(208,79,9)"/><text x="29.00" y="334.50"></text></g><g><title>0x7fa934a952ec (?) (1 samples, 0.09%)</title><rect x="26" y="340" width="1" height="15" fill="rgb(220,127,5)"/><text x="29.00" y="350.50"></text></g><g><title>0x7fa934a70fa8 (?) (1 samples, 0.09%)</title><rect x="26" y="356" width="1" height="15" fill="rgb(233,48,13)"/><text x="29.00" y="366.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py) (1 samples, 0.09%)</title><rect x="27" y="212" width="1" height="15" fill="rgb(214,170,6)"/><text x="30.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="27" y="228" width="1" height="15" fill="rgb(242,154,25)"/><text x="30.00" y="238.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.09%)</title><rect x="27" y="244" width="1" height="15" fill="rgb(211,178,11)"/><text x="30.00" y="254.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="27" y="260" width="1" height="15" fill="rgb(250,82,20)"/><text x="30.00" y="270.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.09%)</title><rect x="28" y="260" width="1" height="15" fill="rgb(229,90,7)"/><text x="31.00" y="270.50"></text></g><g><title>onnxruntime::ArgMin&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 1.40%)</title><rect x="29" y="340" width="17" height="15" fill="rgb(215,151,7)"/><text x="32.00" y="350.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.65%)</title><rect x="38" y="356" width="8" height="15" fill="rgb(208,2,22)"/><text x="41.00" y="366.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="45" y="372" width="1" height="15" fill="rgb(225,82,46)"/><text x="48.00" y="382.50"></text></g><g><title>onnxruntime::Cast&lt;bool&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="46" y="340" width="1" height="15" fill="rgb(237,123,0)"/><text x="49.00" y="350.50"></text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.84%)</title><rect x="47" y="340" width="10" height="15" fill="rgb(228,207,37)"/><text x="50.00" y="350.50"></text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.84%)</title><rect x="47" y="356" width="10" height="15" fill="rgb(242,111,13)"/><text x="50.00" y="366.50"></text></g><g><title>0x7fa9748bcdc9 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="56" y="372" width="1" height="15" fill="rgb(207,22,52)"/><text x="59.00" y="382.50"></text></g><g><title>(anonymous namespace)::CopySlices&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="57" y="356" width="1" height="15" fill="rgb(218,155,3)"/><text x="60.00" y="366.50"></text></g><g><title>(anonymous namespace)::SumSlices&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.93%)</title><rect x="58" y="356" width="11" height="15" fill="rgb(220,163,47)"/><text x="61.00" y="366.50"></text></g><g><title>onnxruntime::CumSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 1.12%)</title><rect x="57" y="340" width="13" height="15" fill="rgb(253,221,0)"/><text x="60.00" y="350.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector [clone .constprop.161] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="69" y="356" width="1" height="15" fill="rgb(232,81,48)"/><text x="72.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.09%)</title><rect x="69" y="372" width="1" height="15" fill="rgb(210,53,31)"/><text x="72.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="69" y="388" width="1" height="15" fill="rgb(248,126,27)"/><text x="72.00" y="398.50"></text></g><g><title>0x7fa9748bcdb6 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="76" y="356" width="1" height="15" fill="rgb(210,163,39)"/><text x="79.00" y="366.50"></text></g><g><title>onnxruntime::GatherElements::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.75%)</title><rect x="70" y="340" width="9" height="15" fill="rgb(237,10,27)"/><text x="73.00" y="350.50"></text></g><g><title>onnxruntime::parse_and_validate_indices_tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="77" y="356" width="2" height="15" fill="rgb(226,85,41)"/><text x="80.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="79" y="340" width="1" height="15" fill="rgb(235,2,54)"/><text x="82.00" y="350.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="79" y="356" width="1" height="15" fill="rgb(245,209,43)"/><text x="82.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="79" y="372" width="1" height="15" fill="rgb(235,87,5)"/><text x="82.00" y="382.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="79" y="388" width="1" height="15" fill="rgb(237,121,43)"/><text x="82.00" y="398.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="79" y="404" width="1" height="15" fill="rgb(206,68,51)"/><text x="82.00" y="414.50"></text></g><g><title>onnxruntime::Less&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.37%)</title><rect x="80" y="340" width="4" height="15" fill="rgb(236,181,54)"/><text x="83.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, bool, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.37%)</title><rect x="80" y="356" width="4" height="15" fill="rgb(240,0,49)"/><text x="83.00" y="366.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="83" y="372" width="1" height="15" fill="rgb(206,165,21)"/><text x="86.00" y="382.50"></text></g><g><title>onnxruntime::Mul&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="84" y="340" width="3" height="15" fill="rgb(231,100,10)"/><text x="87.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="84" y="356" width="3" height="15" fill="rgb(244,203,18)"/><text x="87.00" y="366.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="84" y="372" width="3" height="15" fill="rgb(217,44,44)"/><text x="87.00" y="382.50"></text></g><g><title>0x7fa97489c92c (libc-2.29.so) (1 samples, 0.09%)</title><rect x="124" y="388" width="1" height="15" fill="rgb(222,139,44)"/><text x="127.00" y="398.50"></text></g><g><title>0x7fa97489c961 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="125" y="388" width="1" height="15" fill="rgb(207,144,20)"/><text x="128.00" y="398.50"></text></g><g><title>0x7fa974a6ee88 (libm-2.29.so) (1 samples, 0.09%)</title><rect x="126" y="388" width="1" height="15" fill="rgb(205,68,28)"/><text x="129.00" y="398.50"></text></g><g><title>0x7fa974a6eeb6 (libm-2.29.so) (1 samples, 0.09%)</title><rect x="127" y="388" width="2" height="15" fill="rgb(205,216,1)"/><text x="130.00" y="398.50"></text></g><g><title>0x7fa974a6eece (libm-2.29.so) (1 samples, 0.09%)</title><rect x="129" y="388" width="1" height="15" fill="rgb(234,114,45)"/><text x="132.00" y="398.50"></text></g><g><title>0x7fa974a6eed2 (libm-2.29.so) (1 samples, 0.09%)</title><rect x="130" y="388" width="1" height="15" fill="rgb(242,142,44)"/><text x="133.00" y="398.50"></text></g><g><title>0x7fa974a6eeee (libm-2.29.so) (1 samples, 0.09%)</title><rect x="131" y="388" width="1" height="15" fill="rgb(241,109,24)"/><text x="134.00" y="398.50"></text></g><g><title>0x7fa974a6eef6 (libm-2.29.so) (1 samples, 0.09%)</title><rect x="132" y="388" width="1" height="15" fill="rgb(246,184,43)"/><text x="135.00" y="398.50"></text></g><g><title>0x7fa974a6eefa (libm-2.29.so) (2 samples, 0.19%)</title><rect x="133" y="388" width="2" height="15" fill="rgb(218,54,19)"/><text x="136.00" y="398.50"></text></g><g><title>logf32x (libm-2.29.so) (1 samples, 0.09%)</title><rect x="135" y="388" width="1" height="15" fill="rgb(230,204,40)"/><text x="138.00" y="398.50"></text></g><g><title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, long, std::pair&lt;float, long&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::GreaterValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.37%)</title><rect x="136" y="388" width="5" height="15" fill="rgb(230,217,31)"/><text x="139.00" y="398.50"></text></g><g><title>0x7fa97489c906 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="153" y="404" width="1" height="15" fill="rgb(206,149,44)"/><text x="156.00" y="414.50"></text></g><g><title>0x7fa97489c998 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="154" y="404" width="1" height="15" fill="rgb(228,91,53)"/><text x="157.00" y="414.50"></text></g><g><title>0x7fa97489c99b (libc-2.29.so) (1 samples, 0.09%)</title><rect x="155" y="404" width="1" height="15" fill="rgb(246,173,11)"/><text x="158.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (2 samples, 0.19%)</title><rect x="156" y="404" width="2" height="15" fill="rgb(221,69,54)"/><text x="159.00" y="414.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (72 samples, 6.73%)</title><rect x="87" y="340" width="79" height="15" fill="rgb(239,26,30)"/><text x="90.00" y="350.50">onnxrunti..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (72 samples, 6.73%)</title><rect x="87" y="356" width="79" height="15" fill="rgb(246,192,44)"/><text x="90.00" y="366.50">onnxrunti..</text></g><g><title>onnxruntime::extract_top_k_elements&lt;true, true, onnxruntime::GreaterValueCmp&lt;float&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (72 samples, 6.73%)</title><rect x="87" y="372" width="79" height="15" fill="rgb(217,191,4)"/><text x="90.00" y="382.50">onnxrunti..</text></g><g><title>std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt;::_M_emplace_back_aux&lt;std::pair&lt;float, long&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 2.15%)</title><rect x="141" y="388" width="25" height="15" fill="rgb(235,42,33)"/><text x="144.00" y="398.50">s..</text></g><g><title>operator new (libstdc++.so.6.0.28) (7 samples, 0.65%)</title><rect x="158" y="404" width="8" height="15" fill="rgb(236,222,20)"/><text x="161.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.56%)</title><rect x="159" y="420" width="7" height="15" fill="rgb(253,180,11)"/><text x="162.00" y="430.50"></text></g><g><title>onnxruntime::ml::ArrayFeatureExtractorOp&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="166" y="340" width="2" height="15" fill="rgb(217,212,23)"/><text x="169.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.09%)</title><rect x="167" y="356" width="1" height="15" fill="rgb(220,121,22)"/><text x="170.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="167" y="372" width="1" height="15" fill="rgb(248,160,17)"/><text x="170.00" y="382.50"></text></g><g><title>0x7fa9348a20f0 (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="216" y="356" width="2" height="15" fill="rgb(231,166,53)"/><text x="219.00" y="366.50"></text></g><g><title>0x7fa9643697a0 (libstdc++.so.6.0.28) (2 samples, 0.19%)</title><rect x="218" y="356" width="2" height="15" fill="rgb(244,113,45)"/><text x="221.00" y="366.50"></text></g><g><title>0x7fa97489c906 (libc-2.29.so) (3 samples, 0.28%)</title><rect x="220" y="356" width="3" height="15" fill="rgb(228,43,35)"/><text x="223.00" y="366.50"></text></g><g><title>0x7fa97489c90e (libc-2.29.so) (1 samples, 0.09%)</title><rect x="223" y="356" width="2" height="15" fill="rgb(236,11,30)"/><text x="226.00" y="366.50"></text></g><g><title>0x7fa97489c91c (libc-2.29.so) (1 samples, 0.09%)</title><rect x="225" y="356" width="1" height="15" fill="rgb(241,85,32)"/><text x="228.00" y="366.50"></text></g><g><title>0x7fa97489c91e (libc-2.29.so) (1 samples, 0.09%)</title><rect x="226" y="356" width="1" height="15" fill="rgb(240,211,2)"/><text x="229.00" y="366.50"></text></g><g><title>0x7fa97489c92c (libc-2.29.so) (3 samples, 0.28%)</title><rect x="227" y="356" width="3" height="15" fill="rgb(251,164,14)"/><text x="230.00" y="366.50"></text></g><g><title>0x7fa97489c92f (libc-2.29.so) (1 samples, 0.09%)</title><rect x="230" y="356" width="1" height="15" fill="rgb(213,127,32)"/><text x="233.00" y="366.50"></text></g><g><title>0x7fa97489c93b (libc-2.29.so) (1 samples, 0.09%)</title><rect x="231" y="356" width="1" height="15" fill="rgb(224,31,3)"/><text x="234.00" y="366.50"></text></g><g><title>0x7fa97489c945 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="232" y="356" width="1" height="15" fill="rgb(205,59,12)"/><text x="235.00" y="366.50"></text></g><g><title>0x7fa97489c965 (libc-2.29.so) (2 samples, 0.19%)</title><rect x="233" y="356" width="3" height="15" fill="rgb(231,193,51)"/><text x="236.00" y="366.50"></text></g><g><title>0x7fa97489c971 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="236" y="356" width="1" height="15" fill="rgb(218,73,20)"/><text x="239.00" y="366.50"></text></g><g><title>0x7fa97489c97c (libc-2.29.so) (3 samples, 0.28%)</title><rect x="237" y="356" width="3" height="15" fill="rgb(208,38,19)"/><text x="240.00" y="366.50"></text></g><g><title>0x7fa97489c991 (libc-2.29.so) (7 samples, 0.65%)</title><rect x="240" y="356" width="8" height="15" fill="rgb(242,46,41)"/><text x="243.00" y="366.50"></text></g><g><title>0x7fa97489c998 (libc-2.29.so) (7 samples, 0.65%)</title><rect x="248" y="356" width="7" height="15" fill="rgb(244,149,33)"/><text x="251.00" y="366.50"></text></g><g><title>0x7fa97489ca55 (libc-2.29.so) (2 samples, 0.19%)</title><rect x="255" y="356" width="3" height="15" fill="rgb(252,61,13)"/><text x="258.00" y="366.50"></text></g><g><title>0x7fa97489cbc0 (libc-2.29.so) (2 samples, 0.19%)</title><rect x="258" y="356" width="2" height="15" fill="rgb(222,128,52)"/><text x="261.00" y="366.50"></text></g><g><title>0x7fa97489cbd8 (libc-2.29.so) (2 samples, 0.19%)</title><rect x="260" y="356" width="2" height="15" fill="rgb(209,199,36)"/><text x="263.00" y="366.50"></text></g><g><title>0x7fa97489cbe8 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="262" y="356" width="1" height="15" fill="rgb(217,73,44)"/><text x="265.00" y="366.50"></text></g><g><title>0x7fa9748bd14a (libc-2.29.so) (1 samples, 0.09%)</title><rect x="263" y="356" width="1" height="15" fill="rgb(236,206,9)"/><text x="266.00" y="366.50"></text></g><g><title>free (libc-2.29.so) (14 samples, 1.31%)</title><rect x="264" y="356" width="16" height="15" fill="rgb(206,124,29)"/><text x="267.00" y="366.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="281" y="452" width="1" height="15" fill="rgb(216,61,39)"/><text x="284.00" y="462.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="281" y="468" width="1" height="15" fill="rgb(213,116,8)"/><text x="284.00" y="478.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="281" y="484" width="1" height="15" fill="rgb(222,39,16)"/><text x="284.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::operator= (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="281" y="500" width="1" height="15" fill="rgb(212,137,14)"/><text x="284.00" y="510.50"></text></g><g><title>0x7fa9348a1960 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="281" y="516" width="1" height="15" fill="rgb(218,137,29)"/><text x="284.00" y="526.50"></text></g><g><title>onnxruntime::IExecutionProvider::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="282" y="484" width="1" height="15" fill="rgb(205,181,30)"/><text x="285.00" y="494.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.37%)</title><rect x="280" y="356" width="4" height="15" fill="rgb(248,218,30)"/><text x="283.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.37%)</title><rect x="280" y="372" width="4" height="15" fill="rgb(215,147,43)"/><text x="283.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.37%)</title><rect x="280" y="388" width="4" height="15" fill="rgb(220,13,0)"/><text x="283.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.28%)</title><rect x="281" y="404" width="3" height="15" fill="rgb(218,29,26)"/><text x="284.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.28%)</title><rect x="281" y="420" width="3" height="15" fill="rgb(251,137,5)"/><text x="284.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.28%)</title><rect x="281" y="436" width="3" height="15" fill="rgb(230,145,34)"/><text x="284.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="282" y="452" width="2" height="15" fill="rgb(247,188,13)"/><text x="285.00" y="462.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="282" y="468" width="2" height="15" fill="rgb(236,105,9)"/><text x="285.00" y="478.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="283" y="484" width="1" height="15" fill="rgb(248,159,4)"/><text x="286.00" y="494.50"></text></g><g><title>0x7fa9748ab6d6 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="283" y="500" width="1" height="15" fill="rgb(228,100,25)"/><text x="286.00" y="510.50"></text></g><g><title>0x7fa9348a1930 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="397" y="388" width="1" height="15" fill="rgb(230,211,9)"/><text x="400.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (11 samples, 1.03%)</title><rect x="398" y="388" width="12" height="15" fill="rgb(215,52,47)"/><text x="401.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (10 samples, 0.93%)</title><rect x="399" y="404" width="11" height="15" fill="rgb(240,182,31)"/><text x="402.00" y="414.50"></text></g><g><title>0x7fa9748bd120 (libc-2.29.so) (2 samples, 0.19%)</title><rect x="421" y="420" width="2" height="15" fill="rgb(252,23,13)"/><text x="424.00" y="430.50"></text></g><g><title>0x7fa9748bd12f (libc-2.29.so) (1 samples, 0.09%)</title><rect x="423" y="420" width="1" height="15" fill="rgb(234,49,4)"/><text x="426.00" y="430.50"></text></g><g><title>0x7fa9748bd14a (libc-2.29.so) (2 samples, 0.19%)</title><rect x="424" y="420" width="2" height="15" fill="rgb(208,23,54)"/><text x="427.00" y="430.50"></text></g><g><title>0x7fa964368d50 (libstdc++.so.6.0.28) (1 samples, 0.09%)</title><rect x="426" y="436" width="1" height="15" fill="rgb(208,16,52)"/><text x="429.00" y="446.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 1.50%)</title><rect x="419" y="404" width="17" height="15" fill="rgb(217,72,34)"/><text x="422.00" y="414.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (9 samples, 0.84%)</title><rect x="426" y="420" width="10" height="15" fill="rgb(223,71,48)"/><text x="429.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (8 samples, 0.75%)</title><rect x="427" y="436" width="9" height="15" fill="rgb(215,45,42)"/><text x="430.00" y="446.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (173 samples, 16.17%)</title><rect x="284" y="356" width="191" height="15" fill="rgb(241,196,24)"/><text x="287.00" y="366.50">onnxruntime::ml::TreeEns..</text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;long, std::tuple&lt;float, float, float&gt; &gt;&amp;&gt; [clone .isra.301] (onnxruntime/capi/onnxruntime_pybind11_state.so) (81 samples, 7.57%)</title><rect x="386" y="372" width="89" height="15" fill="rgb(241,31,46)"/><text x="389.00" y="382.50">std::_Hash..</text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (onnxruntime/capi/onnxruntime_pybind11_state.so) (59 samples, 5.51%)</title><rect x="410" y="388" width="65" height="15" fill="rgb(220,120,40)"/><text x="413.00" y="398.50">std::_H..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (libstdc++.so.6.0.28) (35 samples, 3.27%)</title><rect x="436" y="404" width="39" height="15" fill="rgb(241,86,17)"/><text x="439.00" y="414.50">std..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (libstdc++.so.6.0.28) (18 samples, 1.68%)</title><rect x="455" y="420" width="20" height="15" fill="rgb(210,179,15)"/><text x="458.00" y="430.50"></text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 1.31%)</title><rect x="475" y="356" width="15" height="15" fill="rgb(218,87,41)"/><text x="478.00" y="366.50"></text></g><g><title>0x7fa9748bcdcb (libc-2.29.so) (2 samples, 0.19%)</title><rect x="488" y="372" width="2" height="15" fill="rgb(222,151,23)"/><text x="491.00" y="382.50"></text></g><g><title>operator delete (libstdc++.so.6.0.28) (6 samples, 0.56%)</title><rect x="490" y="356" width="7" height="15" fill="rgb(221,100,1)"/><text x="493.00" y="366.50"></text></g><g><title>std::__detail::_Map_base&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 1.50%)</title><rect x="497" y="356" width="18" height="15" fill="rgb(250,11,21)"/><text x="500.00" y="366.50"></text></g><g><title>0x7fa964368d50 (libstdc++.so.6.0.28) (1 samples, 0.09%)</title><rect x="526" y="388" width="1" height="15" fill="rgb(220,75,28)"/><text x="529.00" y="398.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (458 samples, 42.80%)</title><rect x="29" y="260" width="505" height="15" fill="rgb(239,34,42)"/><text x="32.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybi..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (458 samples, 42.80%)</title><rect x="29" y="276" width="505" height="15" fill="rgb(209,20,26)"/><text x="32.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybi..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (458 samples, 42.80%)</title><rect x="29" y="292" width="505" height="15" fill="rgb(236,75,35)"/><text x="32.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (458 samples, 42.80%)</title><rect x="29" y="308" width="505" height="15" fill="rgb(205,35,22)"/><text x="32.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_py..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (458 samples, 42.80%)</title><rect x="29" y="324" width="505" height="15" fill="rgb(247,61,37)"/><text x="32.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntim..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (332 samples, 31.03%)</title><rect x="168" y="340" width="366" height="15" fill="rgb(253,42,14)"/><text x="171.00" y="350.50">onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Co..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 1.68%)</title><rect x="515" y="356" width="19" height="15" fill="rgb(235,163,14)"/><text x="518.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (9 samples, 0.84%)</title><rect x="525" y="372" width="9" height="15" fill="rgb(224,149,6)"/><text x="528.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.65%)</title><rect x="527" y="388" width="7" height="15" fill="rgb(210,123,0)"/><text x="530.00" y="398.50"></text></g><g><title>onnxruntime::python::CreateGenericMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="534" y="260" width="2" height="15" fill="rgb(230,20,24)"/><text x="537.00" y="270.50"></text></g><g><title>onnxruntime::python::CreateTensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="534" y="276" width="2" height="15" fill="rgb(240,84,24)"/><text x="537.00" y="286.50"></text></g><g><title>profile_ort (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py) (467 samples, 43.64%)</title><rect x="22" y="68" width="515" height="15" fill="rgb(224,215,38)"/><text x="25.00" y="78.50">profile_ort (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_10..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py) (467 samples, 43.64%)</title><rect x="22" y="84" width="515" height="15" fill="rgb(254,194,20)"/><text x="25.00" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py) (467 samples, 43.64%)</title><rect x="22" y="100" width="515" height="15" fill="rgb(219,144,54)"/><text x="25.00" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (467 samples, 43.64%)</title><rect x="22" y="116" width="515" height="15" fill="rgb(243,121,47)"/><text x="25.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (466 samples, 43.55%)</title><rect x="23" y="132" width="514" height="15" fill="rgb(235,51,37)"/><text x="26.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (466 samples, 43.55%)</title><rect x="23" y="148" width="514" height="15" fill="rgb(211,25,50)"/><text x="26.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (465 samples, 43.46%)</title><rect x="24" y="164" width="513" height="15" fill="rgb(206,119,37)"/><text x="27.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (464 samples, 43.36%)</title><rect x="25" y="180" width="512" height="15" fill="rgb(226,128,25)"/><text x="28.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (464 samples, 43.36%)</title><rect x="25" y="196" width="512" height="15" fill="rgb(245,128,33)"/><text x="28.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (461 samples, 43.08%)</title><rect x="28" y="212" width="509" height="15" fill="rgb(207,25,0)"/><text x="31.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (461 samples, 43.08%)</title><rect x="28" y="228" width="509" height="15" fill="rgb(226,2,9)"/><text x="31.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjec..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (461 samples, 43.08%)</title><rect x="28" y="244" width="509" height="15" fill="rgb(209,128,13)"/><text x="31.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onn..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="536" y="260" width="1" height="15" fill="rgb(240,188,46)"/><text x="539.00" y="270.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="536" y="276" width="1" height="15" fill="rgb(206,126,5)"/><text x="539.00" y="286.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="536" y="292" width="1" height="15" fill="rgb(227,194,6)"/><text x="539.00" y="302.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="536" y="308" width="1" height="15" fill="rgb(251,99,21)"/><text x="539.00" y="318.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="536" y="324" width="1" height="15" fill="rgb(228,34,20)"/><text x="539.00" y="334.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="536" y="340" width="1" height="15" fill="rgb(252,85,28)"/><text x="539.00" y="350.50"></text></g><g><title>onnxruntime::BFCArena::InsertFreeChunkIntoBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="536" y="356" width="1" height="15" fill="rgb(252,99,45)"/><text x="539.00" y="366.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::_M_insert_unique&lt;unsigned long const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="536" y="372" width="1" height="15" fill="rgb(212,108,21)"/><text x="539.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.09%)</title><rect x="536" y="388" width="1" height="15" fill="rgb(228,153,28)"/><text x="539.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="536" y="404" width="1" height="15" fill="rgb(244,82,48)"/><text x="539.00" y="414.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (1 samples, 0.09%)</title><rect x="555" y="196" width="1" height="15" fill="rgb(225,26,51)"/><text x="558.00" y="206.50"></text></g><g><title>LONG_getitem (arraytypes.c.src) (4 samples, 0.37%)</title><rect x="563" y="260" width="5" height="15" fill="rgb(225,172,16)"/><text x="566.00" y="270.50"></text></g><g><title>0x7fa973abf800 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="566" y="276" width="2" height="15" fill="rgb(248,36,39)"/><text x="569.00" y="286.50"></text></g><g><title>PyArray_ToList (convert.c) (12 samples, 1.12%)</title><rect x="562" y="228" width="13" height="15" fill="rgb(213,86,51)"/><text x="565.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c) (12 samples, 1.12%)</title><rect x="562" y="244" width="13" height="15" fill="rgb(252,200,14)"/><text x="565.00" y="254.50"></text></g><g><title>recursive_tolist (convert.c) (7 samples, 0.65%)</title><rect x="568" y="260" width="7" height="15" fill="rgb(246,147,42)"/><text x="571.00" y="270.50"></text></g><g><title>array_reshape (methods.c) (1 samples, 0.09%)</title><rect x="575" y="228" width="1" height="15" fill="rgb(224,68,46)"/><text x="578.00" y="238.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.09%)</title><rect x="575" y="244" width="1" height="15" fill="rgb(237,0,54)"/><text x="578.00" y="254.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.09%)</title><rect x="575" y="260" width="1" height="15" fill="rgb(249,61,38)"/><text x="578.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="575" y="276" width="1" height="15" fill="rgb(218,23,30)"/><text x="578.00" y="286.50"></text></g><g><title>PyArray_SetBaseObject (arrayobject.c) (1 samples, 0.09%)</title><rect x="575" y="292" width="1" height="15" fill="rgb(214,126,1)"/><text x="578.00" y="302.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="576" y="260" width="1" height="15" fill="rgb(222,27,28)"/><text x="579.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="576" y="276" width="1" height="15" fill="rgb(245,49,19)"/><text x="579.00" y="286.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.09%)</title><rect x="576" y="292" width="1" height="15" fill="rgb(231,178,20)"/><text x="579.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.09%)</title><rect x="577" y="260" width="2" height="15" fill="rgb(208,224,52)"/><text x="580.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="577" y="276" width="2" height="15" fill="rgb(238,76,16)"/><text x="580.00" y="286.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.09%)</title><rect x="577" y="292" width="2" height="15" fill="rgb(233,99,19)"/><text x="580.00" y="302.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.09%)</title><rect x="577" y="308" width="2" height="15" fill="rgb(219,26,39)"/><text x="580.00" y="318.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.09%)</title><rect x="577" y="324" width="2" height="15" fill="rgb(252,29,23)"/><text x="580.00" y="334.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="577" y="340" width="2" height="15" fill="rgb(227,63,8)"/><text x="580.00" y="350.50"></text></g><g><title>0x7fa97489db12 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="579" y="276" width="1" height="15" fill="rgb(227,63,6)"/><text x="582.00" y="286.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (4 samples, 0.37%)</title><rect x="576" y="244" width="5" height="15" fill="rgb(252,9,9)"/><text x="579.00" y="254.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.19%)</title><rect x="579" y="260" width="2" height="15" fill="rgb(222,160,7)"/><text x="582.00" y="270.50"></text></g><g><title>0x7fa97489e1aa (libc-2.29.so) (1 samples, 0.09%)</title><rect x="580" y="276" width="1" height="15" fill="rgb(249,160,40)"/><text x="583.00" y="286.50"></text></g><g><title>PyArray_MapIterSwapAxes (mapping.c) (1 samples, 0.09%)</title><rect x="581" y="244" width="1" height="15" fill="rgb(222,97,39)"/><text x="584.00" y="254.50"></text></g><g><title>PyArray_Transpose (shape.c) (1 samples, 0.09%)</title><rect x="581" y="260" width="1" height="15" fill="rgb(253,181,54)"/><text x="584.00" y="270.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.09%)</title><rect x="581" y="276" width="1" height="15" fill="rgb(239,117,36)"/><text x="584.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="581" y="292" width="1" height="15" fill="rgb(207,110,18)"/><text x="584.00" y="302.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.09%)</title><rect x="581" y="308" width="1" height="15" fill="rgb(205,78,42)"/><text x="584.00" y="318.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.09%)</title><rect x="581" y="324" width="1" height="15" fill="rgb(229,41,17)"/><text x="584.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.19%)</title><rect x="582" y="244" width="2" height="15" fill="rgb(232,214,3)"/><text x="585.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.19%)</title><rect x="582" y="260" width="2" height="15" fill="rgb(239,73,49)"/><text x="585.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.19%)</title><rect x="582" y="276" width="2" height="15" fill="rgb(239,217,24)"/><text x="585.00" y="286.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (3 samples, 0.28%)</title><rect x="584" y="244" width="3" height="15" fill="rgb(224,154,26)"/><text x="587.00" y="254.50"></text></g><g><title>check_and_adjust_index (common.h) (1 samples, 0.09%)</title><rect x="586" y="260" width="1" height="15" fill="rgb(233,171,39)"/><text x="589.00" y="270.50"></text></g><g><title>0x7fa973abf0a0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="608" y="340" width="1" height="15" fill="rgb(245,76,11)"/><text x="611.00" y="350.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (30 samples, 2.80%)</title><rect x="588" y="276" width="34" height="15" fill="rgb(213,145,43)"/><text x="591.00" y="286.50">Py..</text></g><g><title>setArrayFromSequence (ctors.c) (30 samples, 2.80%)</title><rect x="588" y="292" width="34" height="15" fill="rgb(233,224,10)"/><text x="591.00" y="302.50">se..</text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (23 samples, 2.15%)</title><rect x="596" y="308" width="26" height="15" fill="rgb(234,137,8)"/><text x="599.00" y="318.50">P..</text></g><g><title>LONG_setitem (arraytypes.c.src) (23 samples, 2.15%)</title><rect x="596" y="324" width="26" height="15" fill="rgb(232,161,22)"/><text x="599.00" y="334.50">L..</text></g><g><title>MyPyLong_AsLong (arraytypes.c.src) (11 samples, 1.03%)</title><rect x="609" y="340" width="13" height="15" fill="rgb(220,112,17)"/><text x="612.00" y="350.50"></text></g><g><title>0x7fa973abf0a0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="666" y="340" width="1" height="15" fill="rgb(243,106,14)"/><text x="669.00" y="350.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (10 samples, 0.93%)</title><rect x="667" y="340" width="11" height="15" fill="rgb(216,26,38)"/><text x="670.00" y="350.50"></text></g><g><title>ensure_dtype_nbo (convert_datatype.c) (2 samples, 0.19%)</title><rect x="676" y="356" width="2" height="15" fill="rgb(237,57,26)"/><text x="679.00" y="366.50"></text></g><g><title>0x7fa973abe950 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="701" y="356" width="1" height="15" fill="rgb(231,102,12)"/><text x="704.00" y="366.50"></text></g><g><title>0x7fa973abf0a0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="702" y="356" width="1" height="15" fill="rgb(231,93,30)"/><text x="705.00" y="366.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.09%)</title><rect x="703" y="356" width="1" height="15" fill="rgb(234,86,29)"/><text x="706.00" y="366.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (67 samples, 6.26%)</title><rect x="631" y="324" width="74" height="15" fill="rgb(249,2,53)"/><text x="634.00" y="334.50">PyArray_..</text></g><g><title>_array_find_python_scalar_type (common.c) (25 samples, 2.34%)</title><rect x="678" y="340" width="27" height="15" fill="rgb(240,71,5)"/><text x="681.00" y="350.50">_..</text></g><g><title>PyInt_Check (npy_3kcompat.h) (1 samples, 0.09%)</title><rect x="704" y="356" width="1" height="15" fill="rgb(249,159,33)"/><text x="707.00" y="366.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (77 samples, 7.20%)</title><rect x="622" y="292" width="84" height="15" fill="rgb(228,121,36)"/><text x="625.00" y="302.50">PyArray_D..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (77 samples, 7.20%)</title><rect x="622" y="308" width="84" height="15" fill="rgb(238,175,8)"/><text x="625.00" y="318.50">PyArray_D..</text></g><g><title>PyArray_LookupSpecial_OnInstance (get_attr_string.h) (1 samples, 0.09%)</title><rect x="705" y="324" width="1" height="15" fill="rgb(213,8,16)"/><text x="708.00" y="334.50"></text></g><g><title>_is_basic_python_type (get_attr_string.h) (1 samples, 0.09%)</title><rect x="705" y="340" width="1" height="15" fill="rgb(230,69,36)"/><text x="708.00" y="350.50"></text></g><g><title>PyArray_FromAny (ctors.c) (144 samples, 13.46%)</title><rect x="588" y="260" width="159" height="15" fill="rgb(241,65,18)"/><text x="591.00" y="270.50">PyArray_FromAny (cto..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (114 samples, 10.65%)</title><rect x="622" y="276" width="125" height="15" fill="rgb(214,86,48)"/><text x="625.00" y="286.50">PyArray_GetArra..</text></g><g><title>discover_dimensions (ctors.c) (37 samples, 3.46%)</title><rect x="706" y="292" width="41" height="15" fill="rgb(218,114,21)"/><text x="709.00" y="302.50">dis..</text></g><g><title>discover_dimensions (ctors.c) (29 samples, 2.71%)</title><rect x="715" y="308" width="32" height="15" fill="rgb(223,207,27)"/><text x="718.00" y="318.50">di..</text></g><g><title>0x7fa973abf3f0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.28%)</title><rect x="744" y="324" width="3" height="15" fill="rgb(249,228,45)"/><text x="747.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (170 samples, 15.89%)</title><rect x="561" y="212" width="187" height="15" fill="rgb(213,170,21)"/><text x="564.00" y="222.50">_run (mlprodict/onnxrt/o..</text></g><g><title>array_subscript (mapping.c) (156 samples, 14.58%)</title><rect x="576" y="228" width="172" height="15" fill="rgb(214,125,27)"/><text x="579.00" y="238.50">array_subscript (mappi..</text></g><g><title>prepare_index (mapping.c) (146 samples, 13.64%)</title><rect x="587" y="244" width="161" height="15" fill="rgb(230,50,53)"/><text x="590.00" y="254.50">prepare_index (mappi..</text></g><g><title>unicode_dealloc (python3.7) (1 samples, 0.09%)</title><rect x="747" y="260" width="1" height="15" fill="rgb(222,60,35)"/><text x="750.00" y="270.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (1 samples, 0.09%)</title><rect x="748" y="292" width="1" height="15" fill="rgb(231,154,12)"/><text x="751.00" y="302.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.19%)</title><rect x="748" y="260" width="3" height="15" fill="rgb(217,190,11)"/><text x="751.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.19%)</title><rect x="748" y="276" width="3" height="15" fill="rgb(247,181,32)"/><text x="751.00" y="286.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (1 samples, 0.09%)</title><rect x="749" y="292" width="2" height="15" fill="rgb(245,8,39)"/><text x="752.00" y="302.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (1 samples, 0.09%)</title><rect x="749" y="308" width="2" height="15" fill="rgb(224,156,29)"/><text x="752.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (3 samples, 0.28%)</title><rect x="748" y="212" width="4" height="15" fill="rgb(252,6,29)"/><text x="751.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (3 samples, 0.28%)</title><rect x="748" y="228" width="4" height="15" fill="rgb(246,229,53)"/><text x="751.00" y="238.50"></text></g><g><title>array_astype (methods.c) (3 samples, 0.28%)</title><rect x="748" y="244" width="4" height="15" fill="rgb(231,29,32)"/><text x="751.00" y="254.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.09%)</title><rect x="751" y="260" width="1" height="15" fill="rgb(214,116,22)"/><text x="754.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cum_sum.py) (8 samples, 0.75%)</title><rect x="752" y="212" width="9" height="15" fill="rgb(212,183,5)"/><text x="755.00" y="222.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;) (8 samples, 0.75%)</title><rect x="752" y="228" width="9" height="15" fill="rgb(221,5,46)"/><text x="755.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 0.75%)</title><rect x="752" y="244" width="9" height="15" fill="rgb(215,220,5)"/><text x="755.00" y="254.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py) (8 samples, 0.75%)</title><rect x="752" y="260" width="9" height="15" fill="rgb(237,80,31)"/><text x="755.00" y="270.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (8 samples, 0.75%)</title><rect x="752" y="276" width="9" height="15" fill="rgb(229,60,3)"/><text x="755.00" y="286.50"></text></g><g><title>array_cumsum (methods.c) (8 samples, 0.75%)</title><rect x="752" y="292" width="9" height="15" fill="rgb(230,60,47)"/><text x="755.00" y="302.50"></text></g><g><title>PyArray_CumSum (calculation.c) (8 samples, 0.75%)</title><rect x="752" y="308" width="9" height="15" fill="rgb(205,220,39)"/><text x="755.00" y="318.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c) (8 samples, 0.75%)</title><rect x="752" y="324" width="9" height="15" fill="rgb(208,168,25)"/><text x="755.00" y="334.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c) (8 samples, 0.75%)</title><rect x="752" y="340" width="9" height="15" fill="rgb(205,49,16)"/><text x="755.00" y="350.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (8 samples, 0.75%)</title><rect x="752" y="356" width="9" height="15" fill="rgb(230,209,27)"/><text x="755.00" y="366.50"></text></g><g><title>PyUFunc_Accumulate (ufunc_object.c) (8 samples, 0.75%)</title><rect x="752" y="372" width="9" height="15" fill="rgb(239,85,20)"/><text x="755.00" y="382.50"></text></g><g><title>FLOAT_add (loops.c.src) (7 samples, 0.65%)</title><rect x="753" y="388" width="8" height="15" fill="rgb(209,6,41)"/><text x="756.00" y="398.50"></text></g><g><title>run_binary_simd_add_FLOAT (simd.inc.src) (1 samples, 0.09%)</title><rect x="759" y="404" width="2" height="15" fill="rgb(243,78,21)"/><text x="762.00" y="414.50"></text></g><g><title>abs_ptrdiff (simd.inc.src) (1 samples, 0.09%)</title><rect x="759" y="420" width="2" height="15" fill="rgb(214,36,38)"/><text x="762.00" y="430.50"></text></g><g><title>_choose_dispatcher (numpy/core/fromnumeric.py) (4 samples, 0.37%)</title><rect x="766" y="260" width="4" height="15" fill="rgb(243,60,6)"/><text x="769.00" y="270.50"></text></g><g><title>array_item (mapping.c) (3 samples, 0.28%)</title><rect x="767" y="276" width="3" height="15" fill="rgb(237,160,41)"/><text x="770.00" y="286.50"></text></g><g><title>array_item_asarray (mapping.c) (3 samples, 0.28%)</title><rect x="767" y="292" width="3" height="15" fill="rgb(249,115,19)"/><text x="770.00" y="302.50"></text></g><g><title>get_view_from_index (mapping.c) (3 samples, 0.28%)</title><rect x="767" y="308" width="3" height="15" fill="rgb(206,176,24)"/><text x="770.00" y="318.50"></text></g><g><title>sprintf (libc-2.29.so) (2 samples, 0.19%)</title><rect x="768" y="324" width="2" height="15" fill="rgb(233,221,51)"/><text x="771.00" y="334.50"></text></g><g><title>0x7fa97488dab0 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="769" y="340" width="1" height="15" fill="rgb(251,107,54)"/><text x="772.00" y="350.50"></text></g><g><title>0x7fa974880b71 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="769" y="356" width="1" height="15" fill="rgb(249,121,21)"/><text x="772.00" y="366.50"></text></g><g><title>_IO_default_xsputn (libc-2.29.so) (1 samples, 0.09%)</title><rect x="769" y="372" width="1" height="15" fill="rgb(213,14,45)"/><text x="772.00" y="382.50"></text></g><g><title>0x7fa9748bcdb3 (libc-2.29.so) (2 samples, 0.19%)</title><rect x="794" y="324" width="2" height="15" fill="rgb(244,187,53)"/><text x="797.00" y="334.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.09%)</title><rect x="797" y="388" width="1" height="15" fill="rgb(214,42,50)"/><text x="800.00" y="398.50"></text></g><g><title>PyArray_ConvertToCommonType (convert_datatype.c) (3 samples, 0.28%)</title><rect x="796" y="324" width="3" height="15" fill="rgb(227,19,52)"/><text x="799.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c) (2 samples, 0.19%)</title><rect x="797" y="340" width="2" height="15" fill="rgb(225,28,24)"/><text x="800.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.19%)</title><rect x="797" y="356" width="2" height="15" fill="rgb(225,180,32)"/><text x="800.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.19%)</title><rect x="797" y="372" width="2" height="15" fill="rgb(213,55,35)"/><text x="800.00" y="382.50"></text></g><g><title>_aligned_strided_to_contig_size8 (lowlevel_strided_loops.c.src) (1 samples, 0.09%)</title><rect x="798" y="388" width="1" height="15" fill="rgb(232,59,52)"/><text x="801.00" y="398.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.09%)</title><rect x="799" y="324" width="1" height="15" fill="rgb(249,119,15)"/><text x="802.00" y="334.50"></text></g><g><title>PyArray_AdaptFlexibleDType (convert_datatype.c) (1 samples, 0.09%)</title><rect x="799" y="340" width="1" height="15" fill="rgb(218,147,38)"/><text x="802.00" y="350.50"></text></g><g><title>PyArray_MultiIterFromObjects (iterators.c) (1 samples, 0.09%)</title><rect x="800" y="324" width="1" height="15" fill="rgb(246,73,13)"/><text x="803.00" y="334.50"></text></g><g><title>multiiter_new_impl (iterators.c) (1 samples, 0.09%)</title><rect x="800" y="340" width="1" height="15" fill="rgb(225,155,48)"/><text x="803.00" y="350.50"></text></g><g><title>PyArray_IterNew (iterators.c) (1 samples, 0.09%)</title><rect x="800" y="356" width="1" height="15" fill="rgb(238,131,34)"/><text x="803.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="800" y="372" width="1" height="15" fill="rgb(208,163,50)"/><text x="803.00" y="382.50"></text></g><g><title>choose (&lt;__array_function__ internals&gt;) (34 samples, 3.18%)</title><rect x="765" y="228" width="37" height="15" fill="rgb(214,3,34)"/><text x="768.00" y="238.50">cho..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (34 samples, 3.18%)</title><rect x="765" y="244" width="37" height="15" fill="rgb(242,168,7)"/><text x="768.00" y="254.50">arr..</text></g><g><title>choose (numpy/core/fromnumeric.py) (29 samples, 2.71%)</title><rect x="770" y="260" width="32" height="15" fill="rgb(215,91,9)"/><text x="773.00" y="270.50">ch..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (29 samples, 2.71%)</title><rect x="770" y="276" width="32" height="15" fill="rgb(222,135,10)"/><text x="773.00" y="286.50">_w..</text></g><g><title>array_choose (methods.c) (29 samples, 2.71%)</title><rect x="770" y="292" width="32" height="15" fill="rgb(230,135,25)"/><text x="773.00" y="302.50">ar..</text></g><g><title>PyArray_Choose (item_selection.c) (29 samples, 2.71%)</title><rect x="770" y="308" width="32" height="15" fill="rgb(218,50,44)"/><text x="773.00" y="318.50">Py..</text></g><g><title>arraymultiter_dealloc (iterators.c) (1 samples, 0.09%)</title><rect x="801" y="324" width="1" height="15" fill="rgb(225,174,29)"/><text x="804.00" y="334.50"></text></g><g><title>0x7fa97489cdfb (libc-2.29.so) (1 samples, 0.09%)</title><rect x="801" y="340" width="1" height="15" fill="rgb(216,120,32)"/><text x="804.00" y="350.50"></text></g><g><title>0x7fa97489babd (libc-2.29.so) (1 samples, 0.09%)</title><rect x="801" y="356" width="1" height="15" fill="rgb(233,170,12)"/><text x="804.00" y="366.50"></text></g><g><title>_swapaxes_dispatcher (numpy/core/fromnumeric.py) (1 samples, 0.09%)</title><rect x="802" y="244" width="2" height="15" fill="rgb(243,135,6)"/><text x="805.00" y="254.50"></text></g><g><title>0x7fa9748bd12b (libc-2.29.so) (1 samples, 0.09%)</title><rect x="802" y="260" width="2" height="15" fill="rgb(215,200,13)"/><text x="805.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_gather_elements.py) (41 samples, 3.83%)</title><rect x="761" y="212" width="45" height="15" fill="rgb(236,53,34)"/><text x="764.00" y="222.50">_run..</text></g><g><title>swapaxes (&lt;__array_function__ internals&gt;) (3 samples, 0.28%)</title><rect x="802" y="228" width="4" height="15" fill="rgb(208,176,33)"/><text x="805.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.19%)</title><rect x="804" y="244" width="2" height="15" fill="rgb(221,58,23)"/><text x="807.00" y="254.50"></text></g><g><title>swapaxes (numpy/core/fromnumeric.py) (2 samples, 0.19%)</title><rect x="804" y="260" width="2" height="15" fill="rgb(211,49,26)"/><text x="807.00" y="270.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (1 samples, 0.09%)</title><rect x="805" y="276" width="1" height="15" fill="rgb(234,63,39)"/><text x="808.00" y="286.50"></text></g><g><title>array_swapaxes (methods.c) (1 samples, 0.09%)</title><rect x="805" y="292" width="1" height="15" fill="rgb(243,63,43)"/><text x="808.00" y="302.50"></text></g><g><title>PyArray_SwapAxes (shape.c) (1 samples, 0.09%)</title><rect x="805" y="308" width="1" height="15" fill="rgb(225,170,35)"/><text x="808.00" y="318.50"></text></g><g><title>PyArray_Transpose (shape.c) (1 samples, 0.09%)</title><rect x="805" y="324" width="1" height="15" fill="rgb(247,16,49)"/><text x="808.00" y="334.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.09%)</title><rect x="805" y="340" width="1" height="15" fill="rgb(253,52,49)"/><text x="808.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="805" y="356" width="1" height="15" fill="rgb(243,69,11)"/><text x="808.00" y="366.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.09%)</title><rect x="805" y="372" width="1" height="15" fill="rgb(245,72,3)"/><text x="808.00" y="382.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.09%)</title><rect x="805" y="388" width="1" height="15" fill="rgb(214,149,0)"/><text x="808.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="805" y="404" width="1" height="15" fill="rgb(242,216,26)"/><text x="808.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="806" y="292" width="1" height="15" fill="rgb(237,22,14)"/><text x="809.00" y="302.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.09%)</title><rect x="806" y="308" width="1" height="15" fill="rgb(248,151,7)"/><text x="809.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_less.py) (3 samples, 0.28%)</title><rect x="806" y="212" width="3" height="15" fill="rgb(212,191,48)"/><text x="809.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.28%)</title><rect x="806" y="228" width="3" height="15" fill="rgb(245,61,50)"/><text x="809.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.28%)</title><rect x="806" y="244" width="3" height="15" fill="rgb(208,119,50)"/><text x="809.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.28%)</title><rect x="806" y="260" width="3" height="15" fill="rgb(210,186,47)"/><text x="809.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.28%)</title><rect x="806" y="276" width="3" height="15" fill="rgb(243,79,24)"/><text x="809.00" y="286.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (2 samples, 0.19%)</title><rect x="807" y="292" width="2" height="15" fill="rgb(252,98,5)"/><text x="810.00" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (2 samples, 0.19%)</title><rect x="807" y="308" width="2" height="15" fill="rgb(233,18,7)"/><text x="810.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (2 samples, 0.19%)</title><rect x="807" y="324" width="2" height="15" fill="rgb(235,219,26)"/><text x="810.00" y="334.50"></text></g><g><title>_aligned_strided_to_contig_size4_srcstride0 (lowlevel_strided_loops.c.src) (2 samples, 0.19%)</title><rect x="807" y="340" width="2" height="15" fill="rgb(248,8,51)"/><text x="810.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="811" y="244" width="1" height="15" fill="rgb(233,202,27)"/><text x="814.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="811" y="260" width="1" height="15" fill="rgb(239,67,44)"/><text x="814.00" y="270.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="811" y="276" width="1" height="15" fill="rgb(243,161,31)"/><text x="814.00" y="286.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="811" y="292" width="1" height="15" fill="rgb(236,65,14)"/><text x="814.00" y="302.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.09%)</title><rect x="811" y="308" width="1" height="15" fill="rgb(222,71,7)"/><text x="814.00" y="318.50"></text></g><g><title>0x7fa97489ccb0 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="811" y="324" width="1" height="15" fill="rgb(235,11,20)"/><text x="814.00" y="334.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (10 samples, 0.93%)</title><rect x="815" y="260" width="11" height="15" fill="rgb(249,79,22)"/><text x="818.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (10 samples, 0.93%)</title><rect x="815" y="276" width="11" height="15" fill="rgb(241,129,31)"/><text x="818.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (10 samples, 0.93%)</title><rect x="815" y="292" width="11" height="15" fill="rgb(246,185,37)"/><text x="818.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (10 samples, 0.93%)</title><rect x="815" y="308" width="11" height="15" fill="rgb(205,44,52)"/><text x="818.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (10 samples, 0.93%)</title><rect x="815" y="324" width="11" height="15" fill="rgb(222,48,9)"/><text x="818.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (9 samples, 0.84%)</title><rect x="816" y="340" width="10" height="15" fill="rgb(209,16,54)"/><text x="819.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (9 samples, 0.84%)</title><rect x="816" y="356" width="10" height="15" fill="rgb(215,48,9)"/><text x="819.00" y="366.50"></text></g><g><title>aintroselect_float (selection.c.src) (3 samples, 0.28%)</title><rect x="822" y="372" width="4" height="15" fill="rgb(227,113,14)"/><text x="825.00" y="382.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (1 samples, 0.09%)</title><rect x="824" y="388" width="2" height="15" fill="rgb(212,186,22)"/><text x="827.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (1 samples, 0.09%)</title><rect x="837" y="388" width="1" height="15" fill="rgb(208,53,2)"/><text x="840.00" y="398.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (11 samples, 1.03%)</title><rect x="827" y="340" width="12" height="15" fill="rgb(237,12,40)"/><text x="830.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (11 samples, 1.03%)</title><rect x="827" y="356" width="12" height="15" fill="rgb(223,43,51)"/><text x="830.00" y="366.50"></text></g><g><title>aquicksort_float (quicksort.c.src) (5 samples, 0.47%)</title><rect x="833" y="372" width="6" height="15" fill="rgb(222,47,54)"/><text x="836.00" y="382.50"></text></g><g><title>npy_get_msb (npy_sort.h.src) (1 samples, 0.09%)</title><rect x="838" y="388" width="1" height="15" fill="rgb(230,88,34)"/><text x="841.00" y="398.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (13 samples, 1.21%)</title><rect x="826" y="260" width="14" height="15" fill="rgb(240,91,5)"/><text x="829.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (13 samples, 1.21%)</title><rect x="826" y="276" width="14" height="15" fill="rgb(225,112,27)"/><text x="829.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (12 samples, 1.12%)</title><rect x="827" y="292" width="13" height="15" fill="rgb(243,143,11)"/><text x="830.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (12 samples, 1.12%)</title><rect x="827" y="308" width="13" height="15" fill="rgb(207,42,50)"/><text x="830.00" y="318.50"></text></g><g><title>array_argsort (methods.c) (12 samples, 1.12%)</title><rect x="827" y="324" width="13" height="15" fill="rgb(235,26,25)"/><text x="830.00" y="334.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.09%)</title><rect x="839" y="340" width="1" height="15" fill="rgb(205,146,25)"/><text x="842.00" y="350.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (12 samples, 1.12%)</title><rect x="840" y="276" width="13" height="15" fill="rgb(222,16,47)"/><text x="843.00" y="286.50"></text></g><g><title>check_and_adjust_index (common.h) (5 samples, 0.47%)</title><rect x="848" y="292" width="5" height="15" fill="rgb(222,189,44)"/><text x="851.00" y="302.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (5 samples, 0.47%)</title><rect x="853" y="292" width="6" height="15" fill="rgb(227,222,49)"/><text x="856.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (5 samples, 0.47%)</title><rect x="853" y="308" width="6" height="15" fill="rgb(224,36,51)"/><text x="856.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (5 samples, 0.47%)</title><rect x="853" y="324" width="6" height="15" fill="rgb(222,70,36)"/><text x="856.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (5 samples, 0.47%)</title><rect x="853" y="340" width="6" height="15" fill="rgb(242,130,17)"/><text x="856.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (5 samples, 0.47%)</title><rect x="853" y="356" width="6" height="15" fill="rgb(251,88,22)"/><text x="856.00" y="366.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (6 samples, 0.56%)</title><rect x="853" y="276" width="7" height="15" fill="rgb(212,196,8)"/><text x="856.00" y="286.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="859" y="292" width="1" height="15" fill="rgb(234,153,34)"/><text x="862.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="859" y="308" width="1" height="15" fill="rgb(224,173,39)"/><text x="862.00" y="318.50"></text></g><g><title>arraymapiter_dealloc (mapping.c) (1 samples, 0.09%)</title><rect x="860" y="276" width="1" height="15" fill="rgb(222,82,25)"/><text x="863.00" y="286.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.09%)</title><rect x="860" y="292" width="1" height="15" fill="rgb(232,165,21)"/><text x="863.00" y="302.50"></text></g><g><title>0x7fa97489cace (libc-2.29.so) (1 samples, 0.09%)</title><rect x="860" y="308" width="1" height="15" fill="rgb(216,169,8)"/><text x="863.00" y="318.50"></text></g><g><title>array_subscript (mapping.c) (39 samples, 3.64%)</title><rect x="840" y="260" width="43" height="15" fill="rgb(249,85,32)"/><text x="843.00" y="270.50">arra..</text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (20 samples, 1.87%)</title><rect x="861" y="276" width="22" height="15" fill="rgb(213,222,42)"/><text x="864.00" y="286.50">m..</text></g><g><title>IsUintAligned (array_assign.c) (1 samples, 0.09%)</title><rect x="882" y="292" width="1" height="15" fill="rgb(229,99,19)"/><text x="885.00" y="302.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (1 samples, 0.09%)</title><rect x="882" y="308" width="1" height="15" fill="rgb(252,186,45)"/><text x="885.00" y="318.50"></text></g><g><title>long_subtract (scalarmath.c.src) (1 samples, 0.09%)</title><rect x="883" y="260" width="1" height="15" fill="rgb(205,98,32)"/><text x="886.00" y="270.50"></text></g><g><title>_long_convert2_to_ctypes (scalarmath.c.src) (1 samples, 0.09%)</title><rect x="883" y="276" width="1" height="15" fill="rgb(214,59,25)"/><text x="886.00" y="286.50"></text></g><g><title>_long_convert_to_ctype (scalarmath.c.src) (1 samples, 0.09%)</title><rect x="883" y="292" width="1" height="15" fill="rgb(253,183,47)"/><text x="886.00" y="302.50"></text></g><g><title>PyArray_ScalarFromObject (scalarapi.c) (1 samples, 0.09%)</title><rect x="883" y="308" width="1" height="15" fill="rgb(226,34,10)"/><text x="886.00" y="318.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (1 samples, 0.09%)</title><rect x="884" y="292" width="1" height="15" fill="rgb(228,213,25)"/><text x="887.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (70 samples, 6.54%)</title><rect x="809" y="212" width="77" height="15" fill="rgb(246,180,7)"/><text x="812.00" y="222.50">_run (ml..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (69 samples, 6.45%)</title><rect x="810" y="228" width="76" height="15" fill="rgb(230,197,6)"/><text x="813.00" y="238.50">_common_..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (67 samples, 6.26%)</title><rect x="812" y="244" width="74" height="15" fill="rgb(209,152,37)"/><text x="815.00" y="254.50">topk_sor..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.19%)</title><rect x="884" y="260" width="2" height="15" fill="rgb(247,82,5)"/><text x="887.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.19%)</title><rect x="884" y="276" width="2" height="15" fill="rgb(220,145,0)"/><text x="887.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="885" y="292" width="1" height="15" fill="rgb(217,191,40)"/><text x="888.00" y="302.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="885" y="308" width="1" height="15" fill="rgb(224,42,10)"/><text x="888.00" y="318.50"></text></g><g><title>FLOAT_negative (loops.c.src) (1 samples, 0.09%)</title><rect x="885" y="324" width="1" height="15" fill="rgb(242,113,28)"/><text x="888.00" y="334.50"></text></g><g><title>run_unary_simd_negative_FLOAT (simd.inc.src) (1 samples, 0.09%)</title><rect x="885" y="340" width="1" height="15" fill="rgb(252,124,7)"/><text x="888.00" y="350.50"></text></g><g><title>sse2_negative_FLOAT (simd.inc.src) (1 samples, 0.09%)</title><rect x="885" y="356" width="1" height="15" fill="rgb(212,122,40)"/><text x="888.00" y="366.50"></text></g><g><title>_mm_xor_ps (xmmintrin.h) (1 samples, 0.09%)</title><rect x="885" y="372" width="1" height="15" fill="rgb(226,150,23)"/><text x="888.00" y="382.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (1 samples, 0.09%)</title><rect x="886" y="212" width="1" height="15" fill="rgb(241,224,17)"/><text x="889.00" y="222.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.09%)</title><rect x="886" y="228" width="1" height="15" fill="rgb(205,162,32)"/><text x="889.00" y="238.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (1 samples, 0.09%)</title><rect x="886" y="244" width="1" height="15" fill="rgb(239,163,9)"/><text x="889.00" y="254.50"></text></g><g><title>_typenum_fromtypeobj (scalartypes.c.src) (1 samples, 0.09%)</title><rect x="886" y="260" width="1" height="15" fill="rgb(217,7,22)"/><text x="889.00" y="270.50"></text></g><g><title>get_typeobj_idx (scalartypes.c.src) (1 samples, 0.09%)</title><rect x="886" y="276" width="1" height="15" fill="rgb(238,129,51)"/><text x="889.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (1 samples, 0.09%)</title><rect x="888" y="228" width="2" height="15" fill="rgb(236,120,23)"/><text x="891.00" y="238.50"></text></g><g><title>argmin (&lt;__array_function__ internals&gt;) (1 samples, 0.09%)</title><rect x="891" y="276" width="1" height="15" fill="rgb(214,67,5)"/><text x="894.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.09%)</title><rect x="891" y="292" width="1" height="15" fill="rgb(246,171,37)"/><text x="894.00" y="302.50"></text></g><g><title>argmin (numpy/core/fromnumeric.py) (1 samples, 0.09%)</title><rect x="891" y="308" width="1" height="15" fill="rgb(215,86,47)"/><text x="894.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (1 samples, 0.09%)</title><rect x="891" y="324" width="1" height="15" fill="rgb(216,193,30)"/><text x="894.00" y="334.50"></text></g><g><title>array_argmin (methods.c) (1 samples, 0.09%)</title><rect x="891" y="340" width="1" height="15" fill="rgb(231,127,38)"/><text x="894.00" y="350.50"></text></g><g><title>PyArray_ArgMin (calculation.c) (1 samples, 0.09%)</title><rect x="891" y="356" width="1" height="15" fill="rgb(232,74,1)"/><text x="894.00" y="366.50"></text></g><g><title>FLOAT_argmin (arraytypes.c.src) (1 samples, 0.09%)</title><rect x="891" y="372" width="1" height="15" fill="rgb(222,86,26)"/><text x="894.00" y="382.50"></text></g><g><title>array_reshape (methods.c) (1 samples, 0.09%)</title><rect x="892" y="324" width="1" height="15" fill="rgb(230,14,15)"/><text x="895.00" y="334.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.09%)</title><rect x="892" y="340" width="1" height="15" fill="rgb(241,180,51)"/><text x="895.00" y="350.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.09%)</title><rect x="892" y="356" width="1" height="15" fill="rgb(206,43,23)"/><text x="895.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="892" y="372" width="1" height="15" fill="rgb(251,107,8)"/><text x="895.00" y="382.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.09%)</title><rect x="892" y="388" width="1" height="15" fill="rgb(251,204,2)"/><text x="895.00" y="398.50"></text></g><g><title>IsAligned (array_assign.c) (1 samples, 0.09%)</title><rect x="892" y="404" width="1" height="15" fill="rgb(229,37,38)"/><text x="895.00" y="414.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (1 samples, 0.09%)</title><rect x="892" y="420" width="1" height="15" fill="rgb(213,148,15)"/><text x="895.00" y="430.50"></text></g><g><title>_argmin (mlprodict/onnxrt/ops_cpu/op_argmin.py) (4 samples, 0.37%)</title><rect x="890" y="260" width="4" height="15" fill="rgb(250,167,49)"/><text x="893.00" y="270.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (2 samples, 0.19%)</title><rect x="892" y="276" width="2" height="15" fill="rgb(233,205,10)"/><text x="895.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.19%)</title><rect x="892" y="292" width="2" height="15" fill="rgb(230,155,33)"/><text x="895.00" y="302.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (2 samples, 0.19%)</title><rect x="892" y="308" width="2" height="15" fill="rgb(220,126,30)"/><text x="895.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (1 samples, 0.09%)</title><rect x="893" y="324" width="1" height="15" fill="rgb(219,61,35)"/><text x="896.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py) (5 samples, 0.47%)</title><rect x="890" y="228" width="5" height="15" fill="rgb(250,164,52)"/><text x="893.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py) (5 samples, 0.47%)</title><rect x="890" y="244" width="5" height="15" fill="rgb(205,214,40)"/><text x="893.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="894" y="260" width="1" height="15" fill="rgb(222,146,27)"/><text x="897.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="894" y="276" width="1" height="15" fill="rgb(213,24,9)"/><text x="897.00" y="286.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="894" y="292" width="1" height="15" fill="rgb(248,68,2)"/><text x="897.00" y="302.50"></text></g><g><title>0x7fa93533493e (?) (1 samples, 0.09%)</title><rect x="895" y="244" width="1" height="15" fill="rgb(244,102,40)"/><text x="898.00" y="254.50"></text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (1 samples, 0.09%)</title><rect x="897" y="436" width="1" height="15" fill="rgb(227,181,20)"/><text x="900.00" y="446.50"></text></g><g><title>pybind11::array_t&lt;float, 16&gt;::data&lt;int&gt; (numpy.h) (1 samples, 0.09%)</title><rect x="897" y="452" width="1" height="15" fill="rgb(233,200,52)"/><text x="900.00" y="462.50"></text></g><g><title>pybind11::array::data&lt;int&gt; (numpy.h) (1 samples, 0.09%)</title><rect x="897" y="468" width="1" height="15" fill="rgb(224,91,50)"/><text x="900.00" y="478.50"></text></g><g><title>pybind11::array::offset_at&lt;int&gt; (numpy.h) (1 samples, 0.09%)</title><rect x="897" y="484" width="1" height="15" fill="rgb(206,83,42)"/><text x="900.00" y="494.50"></text></g><g><title>0x7fa93e8a3ea0 (libgomp.so.1.0.0) (4 samples, 0.37%)</title><rect x="898" y="484" width="5" height="15" fill="rgb(206,92,50)"/><text x="901.00" y="494.50"></text></g><g><title>0x7fa93e8a3ea9 (libgomp.so.1.0.0) (15 samples, 1.40%)</title><rect x="903" y="484" width="16" height="15" fill="rgb(207,30,47)"/><text x="906.00" y="494.50"></text></g><g><title>0x7fa93e8a3eab (libgomp.so.1.0.0) (10 samples, 0.93%)</title><rect x="919" y="484" width="11" height="15" fill="rgb(240,44,1)"/><text x="922.00" y="494.50"></text></g><g><title>0x7fa93e8a2ab9 (libgomp.so.1.0.0) (46 samples, 4.30%)</title><rect x="898" y="468" width="51" height="15" fill="rgb(236,219,12)"/><text x="901.00" y="478.50">0x7fa..</text></g><g><title>0x7fa93e8a3ead (libgomp.so.1.0.0) (17 samples, 1.59%)</title><rect x="930" y="484" width="19" height="15" fill="rgb(217,16,14)"/><text x="933.00" y="494.50"></text></g><g><title>0x7fa93e8a3cf9 (libgomp.so.1.0.0) (1 samples, 0.09%)</title><rect x="949" y="500" width="1" height="15" fill="rgb(230,73,15)"/><text x="952.00" y="510.50"></text></g><g><title>0x7fa93e8a3cfb (libgomp.so.1.0.0) (1 samples, 0.09%)</title><rect x="950" y="500" width="1" height="15" fill="rgb(225,151,53)"/><text x="953.00" y="510.50"></text></g><g><title>0x7fa93e8a3cfd (libgomp.so.1.0.0) (1 samples, 0.09%)</title><rect x="951" y="500" width="1" height="15" fill="rgb(232,115,2)"/><text x="954.00" y="510.50"></text></g><g><title>0x7fa93e8a1daa (libgomp.so.1.0.0) (4 samples, 0.37%)</title><rect x="949" y="484" width="4" height="15" fill="rgb(240,39,41)"/><text x="952.00" y="494.50"></text></g><g><title>0x7fa93e8a3d6d (libgomp.so.1.0.0) (1 samples, 0.09%)</title><rect x="952" y="500" width="1" height="15" fill="rgb(246,51,38)"/><text x="955.00" y="510.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (380 samples, 35.51%)</title><rect x="539" y="164" width="419" height="15" fill="rgb(218,42,43)"/><text x="542.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (377 samples, 35.23%)</title><rect x="542" y="180" width="416" height="15" fill="rgb(216,133,40)"/><text x="545.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (364 samples, 34.02%)</title><rect x="556" y="196" width="402" height="15" fill="rgb(244,74,9)"/><text x="559.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (64 samples, 5.98%)</title><rect x="887" y="212" width="71" height="15" fill="rgb(241,107,31)"/><text x="890.00" y="222.50">run (mlp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py) (57 samples, 5.33%)</title><rect x="895" y="228" width="63" height="15" fill="rgb(221,12,41)"/><text x="898.00" y="238.50">_run (..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (56 samples, 5.23%)</title><rect x="896" y="244" width="62" height="15" fill="rgb(251,4,37)"/><text x="899.00" y="254.50">pybind..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (55 samples, 5.14%)</title><rect x="897" y="260" width="61" height="15" fill="rgb(241,194,25)"/><text x="900.00" y="270.50">void p..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (55 samples, 5.14%)</title><rect x="897" y="276" width="61" height="15" fill="rgb(228,111,41)"/><text x="900.00" y="286.50">void p..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (55 samples, 5.14%)</title><rect x="897" y="292" width="61" height="15" fill="rgb(223,153,14)"/><text x="900.00" y="302.50">pybind..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (55 samples, 5.14%)</title><rect x="897" y="308" width="61" height="15" fill="rgb(230,142,33)"/><text x="900.00" y="318.50">pybind..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (55 samples, 5.14%)</title><rect x="897" y="324" width="61" height="15" fill="rgb(223,11,10)"/><text x="900.00" y="334.50">pybind..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (55 samples, 5.14%)</title><rect x="897" y="340" width="61" height="15" fill="rgb(221,15,45)"/><text x="900.00" y="350.50">pybind..</text></g><g><title>pybind11::array::~array (numpy.h) (55 samples, 5.14%)</title><rect x="897" y="356" width="61" height="15" fill="rgb(214,140,14)"/><text x="900.00" y="366.50">pybind..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (55 samples, 5.14%)</title><rect x="897" y="372" width="61" height="15" fill="rgb(237,93,14)"/><text x="900.00" y="382.50">pybind..</text></g><g><title>pybind11::object::~object (pytypes.h) (55 samples, 5.14%)</title><rect x="897" y="388" width="61" height="15" fill="rgb(250,113,41)"/><text x="900.00" y="398.50">pybind..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (55 samples, 5.14%)</title><rect x="897" y="404" width="61" height="15" fill="rgb(245,198,16)"/><text x="900.00" y="414.50">pybind..</text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (55 samples, 5.14%)</title><rect x="897" y="420" width="61" height="15" fill="rgb(236,182,13)"/><text x="900.00" y="430.50">Runtim..</text></g><g><title>pybind11::array::size (numpy.h) (54 samples, 5.05%)</title><rect x="898" y="436" width="60" height="15" fill="rgb(217,87,9)"/><text x="901.00" y="446.50">pybind..</text></g><g><title>std::accumulate&lt;long const*, long, std::multiplies&lt;long&gt; &gt; (stl_numeric.h) (54 samples, 5.05%)</title><rect x="898" y="452" width="60" height="15" fill="rgb(231,32,40)"/><text x="901.00" y="462.50">std::a..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (8 samples, 0.75%)</title><rect x="949" y="468" width="9" height="15" fill="rgb(221,178,12)"/><text x="952.00" y="478.50"></text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute_gil_free [clone ._omp_fn.2] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (4 samples, 0.37%)</title><rect x="953" y="484" width="5" height="15" fill="rgb(207,168,6)"/><text x="956.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::size (stl_vector.h) (3 samples, 0.28%)</title><rect x="955" y="500" width="3" height="15" fill="rgb(207,99,0)"/><text x="958.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (3 samples, 0.28%)</title><rect x="955" y="516" width="3" height="15" fill="rgb(210,154,19)"/><text x="958.00" y="526.50"></text></g><g><title>std::unordered_map&lt;long, unsigned long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt; &gt;::find (unordered_map.h) (1 samples, 0.09%)</title><rect x="957" y="532" width="1" height="15" fill="rgb(224,62,29)"/><text x="960.00" y="542.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (hashtable.h) (1 samples, 0.09%)</title><rect x="957" y="548" width="1" height="15" fill="rgb(232,79,40)"/><text x="960.00" y="558.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (hashtable.h) (1 samples, 0.09%)</title><rect x="957" y="564" width="1" height="15" fill="rgb(241,47,30)"/><text x="960.00" y="574.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (hashtable.h) (1 samples, 0.09%)</title><rect x="957" y="580" width="1" height="15" fill="rgb(218,219,51)"/><text x="960.00" y="590.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.09%)</title><rect x="958" y="180" width="1" height="15" fill="rgb(234,213,22)"/><text x="961.00" y="190.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.09%)</title><rect x="959" y="180" width="1" height="15" fill="rgb(245,70,40)"/><text x="962.00" y="190.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.09%)</title><rect x="959" y="196" width="1" height="15" fill="rgb(240,197,1)"/><text x="962.00" y="206.50"></text></g><g><title>profile_pyrt (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py) (385 samples, 35.98%)</title><rect x="537" y="68" width="424" height="15" fill="rgb(242,42,3)"/><text x="540.00" y="78.50">profile_pyrt (bench_AdaBoostRegressor_default_b_reg_64_n_..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py) (385 samples, 35.98%)</title><rect x="537" y="84" width="424" height="15" fill="rgb(250,142,5)"/><text x="540.00" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py) (385 samples, 35.98%)</title><rect x="537" y="100" width="424" height="15" fill="rgb(205,7,16)"/><text x="540.00" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_64_n_estim..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (385 samples, 35.98%)</title><rect x="537" y="116" width="424" height="15" fill="rgb(244,123,22)"/><text x="540.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (385 samples, 35.98%)</title><rect x="537" y="132" width="424" height="15" fill="rgb(208,169,2)"/><text x="540.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (384 samples, 35.89%)</title><rect x="538" y="148" width="423" height="15" fill="rgb(210,19,48)"/><text x="541.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.28%)</title><rect x="958" y="164" width="3" height="15" fill="rgb(222,119,38)"/><text x="961.00" y="174.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="960" y="180" width="1" height="15" fill="rgb(235,229,43)"/><text x="963.00" y="190.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="960" y="196" width="1" height="15" fill="rgb(212,220,5)"/><text x="963.00" y="206.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.09%)</title><rect x="960" y="212" width="1" height="15" fill="rgb(228,28,54)"/><text x="963.00" y="222.50"></text></g><g><title>0x7fa97489ceb0 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="960" y="228" width="1" height="15" fill="rgb(211,177,38)"/><text x="963.00" y="238.50"></text></g><g><title>0x7fa97489bc1c (libc-2.29.so) (1 samples, 0.09%)</title><rect x="960" y="244" width="1" height="15" fill="rgb(237,186,24)"/><text x="963.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="961" y="116" width="1" height="15" fill="rgb(219,6,14)"/><text x="964.00" y="126.50"></text></g><g><title>0x7fa94e2e0d2e (?) (1 samples, 0.09%)</title><rect x="972" y="212" width="1" height="15" fill="rgb(229,14,11)"/><text x="975.00" y="222.50"></text></g><g><title>0x7fa94e2dffa6 (?) (1 samples, 0.09%)</title><rect x="972" y="228" width="1" height="15" fill="rgb(249,202,39)"/><text x="975.00" y="238.50"></text></g><g><title>0x7fa94e2ef405 (?) (1 samples, 0.09%)</title><rect x="972" y="244" width="1" height="15" fill="rgb(251,152,36)"/><text x="975.00" y="254.50"></text></g><g><title>0x7fa94e2eec27 (?) (1 samples, 0.09%)</title><rect x="972" y="260" width="1" height="15" fill="rgb(217,15,34)"/><text x="975.00" y="270.50"></text></g><g><title>0x7fa94e2c6529 (?) (1 samples, 0.09%)</title><rect x="972" y="276" width="1" height="15" fill="rgb(249,218,34)"/><text x="975.00" y="286.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.09%)</title><rect x="972" y="292" width="1" height="15" fill="rgb(218,141,31)"/><text x="975.00" y="302.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.09%)</title><rect x="972" y="308" width="1" height="15" fill="rgb(243,184,23)"/><text x="975.00" y="318.50"></text></g><g><title>0x7fa94e2ef272 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="973" y="244" width="1" height="15" fill="rgb(223,189,23)"/><text x="976.00" y="254.50"></text></g><g><title>0x7fa94e2ee225 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.19%)</title><rect x="974" y="260" width="3" height="15" fill="rgb(212,226,1)"/><text x="977.00" y="270.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (1 samples, 0.09%)</title><rect x="976" y="276" width="1" height="15" fill="rgb(230,180,4)"/><text x="979.00" y="286.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.09%)</title><rect x="976" y="292" width="1" height="15" fill="rgb(237,20,6)"/><text x="979.00" y="302.50"></text></g><g><title>0x7fa94e2c810c (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="977" y="308" width="1" height="15" fill="rgb(210,185,26)"/><text x="980.00" y="318.50"></text></g><g><title>0x7fa94e2c8277 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="978" y="308" width="1" height="15" fill="rgb(207,178,27)"/><text x="981.00" y="318.50"></text></g><g><title>0x7fa94e2ee2df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.56%)</title><rect x="977" y="260" width="6" height="15" fill="rgb(252,132,44)"/><text x="980.00" y="270.50"></text></g><g><title>0x7fa94e2d2d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.56%)</title><rect x="977" y="276" width="6" height="15" fill="rgb(242,182,21)"/><text x="980.00" y="286.50"></text></g><g><title>0x7fa94e2d2666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.56%)</title><rect x="977" y="292" width="6" height="15" fill="rgb(233,92,53)"/><text x="980.00" y="302.50"></text></g><g><title>0x7fa94e2c82fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.37%)</title><rect x="979" y="308" width="4" height="15" fill="rgb(226,23,39)"/><text x="982.00" y="318.50"></text></g><g><title>array_getbuffer (buffer.c) (4 samples, 0.37%)</title><rect x="979" y="324" width="4" height="15" fill="rgb(250,95,0)"/><text x="982.00" y="334.50"></text></g><g><title>_buffer_get_info (buffer.c) (3 samples, 0.28%)</title><rect x="980" y="340" width="3" height="15" fill="rgb(220,18,32)"/><text x="983.00" y="350.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.09%)</title><rect x="982" y="356" width="1" height="15" fill="rgb(250,220,38)"/><text x="985.00" y="366.50"></text></g><g><title>_buffer_format_string (buffer.c) (1 samples, 0.09%)</title><rect x="982" y="372" width="1" height="15" fill="rgb(222,229,48)"/><text x="985.00" y="382.50"></text></g><g><title>_append_char (buffer.c) (1 samples, 0.09%)</title><rect x="982" y="388" width="1" height="15" fill="rgb(209,172,53)"/><text x="985.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="982" y="404" width="1" height="15" fill="rgb(250,51,36)"/><text x="985.00" y="414.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.09%)</title><rect x="983" y="292" width="1" height="15" fill="rgb(237,157,1)"/><text x="986.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.09%)</title><rect x="983" y="308" width="1" height="15" fill="rgb(245,45,30)"/><text x="986.00" y="318.50"></text></g><g><title>0x7fa97489e238 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="984" y="388" width="1" height="15" fill="rgb(214,165,12)"/><text x="987.00" y="398.50"></text></g><g><title>0x7fa94e2ee592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.28%)</title><rect x="983" y="260" width="4" height="15" fill="rgb(250,55,6)"/><text x="986.00" y="270.50"></text></g><g><title>array_zeros (multiarraymodule.c) (3 samples, 0.28%)</title><rect x="983" y="276" width="4" height="15" fill="rgb(239,114,16)"/><text x="986.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (2 samples, 0.19%)</title><rect x="984" y="292" width="3" height="15" fill="rgb(222,32,1)"/><text x="987.00" y="302.50"></text></g><g><title>PyArray_Zeros (ctors.c) (2 samples, 0.19%)</title><rect x="984" y="308" width="3" height="15" fill="rgb(245,83,39)"/><text x="987.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.19%)</title><rect x="984" y="324" width="3" height="15" fill="rgb(241,160,24)"/><text x="987.00" y="334.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c) (2 samples, 0.19%)</title><rect x="984" y="340" width="3" height="15" fill="rgb(239,6,20)"/><text x="987.00" y="350.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c) (2 samples, 0.19%)</title><rect x="984" y="356" width="3" height="15" fill="rgb(230,118,2)"/><text x="987.00" y="366.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (2 samples, 0.19%)</title><rect x="984" y="372" width="3" height="15" fill="rgb(243,34,31)"/><text x="987.00" y="382.50"></text></g><g><title>0x7fa97489e9a6 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="985" y="388" width="2" height="15" fill="rgb(231,127,45)"/><text x="988.00" y="398.50"></text></g><g><title>0x7fa94e2ee687 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="987" y="260" width="1" height="15" fill="rgb(244,74,35)"/><text x="990.00" y="270.50"></text></g><g><title>0x7fa94e2ee693 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="988" y="260" width="1" height="15" fill="rgb(209,91,1)"/><text x="991.00" y="270.50"></text></g><g><title>0x7fa94e2ee698 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="989" y="260" width="1" height="15" fill="rgb(243,121,50)"/><text x="992.00" y="270.50"></text></g><g><title>0x7fa94e2ee6aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.28%)</title><rect x="990" y="260" width="3" height="15" fill="rgb(250,25,4)"/><text x="993.00" y="270.50"></text></g><g><title>0x7fa94e2ee6ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.37%)</title><rect x="993" y="260" width="5" height="15" fill="rgb(243,14,43)"/><text x="996.00" y="270.50"></text></g><g><title>0x7fa94e2ee6b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="998" y="260" width="1" height="15" fill="rgb(247,32,5)"/><text x="1001.00" y="270.50"></text></g><g><title>0x7fa94e2ee6b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="999" y="260" width="1" height="15" fill="rgb(248,186,15)"/><text x="1002.00" y="270.50"></text></g><g><title>0x7fa94e2ee6d7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1000" y="260" width="1" height="15" fill="rgb(218,229,13)"/><text x="1003.00" y="270.50"></text></g><g><title>0x7fa94e2ee6e2 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1001" y="260" width="1" height="15" fill="rgb(214,153,29)"/><text x="1004.00" y="270.50"></text></g><g><title>0x7fa94e2ee6e6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1002" y="260" width="1" height="15" fill="rgb(226,205,34)"/><text x="1005.00" y="270.50"></text></g><g><title>0x7fa94e2ee7a0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1003" y="260" width="1" height="15" fill="rgb(242,152,26)"/><text x="1006.00" y="270.50"></text></g><g><title>0x7fa94e2ef405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (28 samples, 2.62%)</title><rect x="974" y="244" width="31" height="15" fill="rgb(242,81,25)"/><text x="977.00" y="254.50">0x..</text></g><g><title>0x7fa94e2ee7b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1004" y="260" width="1" height="15" fill="rgb(246,114,52)"/><text x="1007.00" y="270.50"></text></g><g><title>0x7fa94e2c41ed (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1005" y="260" width="1" height="15" fill="rgb(205,190,15)"/><text x="1008.00" y="270.50"></text></g><g><title>0x7fa94e2dffa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (31 samples, 2.90%)</title><rect x="973" y="228" width="35" height="15" fill="rgb(218,49,23)"/><text x="976.00" y="238.50">0x..</text></g><g><title>0x7fa94e2ef540 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.19%)</title><rect x="1005" y="244" width="3" height="15" fill="rgb(205,59,47)"/><text x="1008.00" y="254.50"></text></g><g><title>0x7fa94e2c42f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1006" y="260" width="2" height="15" fill="rgb(221,92,5)"/><text x="1009.00" y="270.50"></text></g><g><title>0x7fa94e2c3530 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1006" y="276" width="2" height="15" fill="rgb(206,201,8)"/><text x="1009.00" y="286.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.09%)</title><rect x="1006" y="292" width="2" height="15" fill="rgb(206,53,8)"/><text x="1009.00" y="302.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (4 samples, 0.37%)</title><rect x="1008" y="276" width="4" height="15" fill="rgb(213,90,15)"/><text x="1011.00" y="286.50"></text></g><g><title>PyArray_CheckAxis (ctors.c) (2 samples, 0.19%)</title><rect x="1012" y="276" width="2" height="15" fill="rgb(243,119,37)"/><text x="1015.00" y="286.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (2 samples, 0.19%)</title><rect x="1012" y="292" width="2" height="15" fill="rgb(229,207,48)"/><text x="1015.00" y="302.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.19%)</title><rect x="1012" y="308" width="2" height="15" fill="rgb(225,69,10)"/><text x="1015.00" y="318.50"></text></g><g><title>PyArray_FromArray (ctors.c) (2 samples, 0.19%)</title><rect x="1012" y="324" width="2" height="15" fill="rgb(217,23,43)"/><text x="1015.00" y="334.50"></text></g><g><title>0x7fa94e2e005a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.65%)</title><rect x="1008" y="228" width="7" height="15" fill="rgb(239,157,16)"/><text x="1011.00" y="238.50"></text></g><g><title>array_take (methods.c) (7 samples, 0.65%)</title><rect x="1008" y="244" width="7" height="15" fill="rgb(247,194,43)"/><text x="1011.00" y="254.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c) (7 samples, 0.65%)</title><rect x="1008" y="260" width="7" height="15" fill="rgb(247,159,11)"/><text x="1011.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.09%)</title><rect x="1014" y="276" width="1" height="15" fill="rgb(238,119,3)"/><text x="1017.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="1014" y="292" width="1" height="15" fill="rgb(240,195,24)"/><text x="1017.00" y="302.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1014" y="308" width="1" height="15" fill="rgb(222,113,27)"/><text x="1017.00" y="318.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1014" y="324" width="1" height="15" fill="rgb(213,163,44)"/><text x="1017.00" y="334.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.09%)</title><rect x="1014" y="340" width="1" height="15" fill="rgb(208,201,10)"/><text x="1017.00" y="350.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1014" y="356" width="1" height="15" fill="rgb(246,31,10)"/><text x="1017.00" y="366.50"></text></g><g><title>0x7fa94e2e018f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1015" y="228" width="1" height="15" fill="rgb(221,158,10)"/><text x="1018.00" y="238.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (2 samples, 0.19%)</title><rect x="1016" y="260" width="3" height="15" fill="rgb(250,224,39)"/><text x="1019.00" y="270.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.09%)</title><rect x="1017" y="276" width="2" height="15" fill="rgb(222,57,47)"/><text x="1020.00" y="286.50"></text></g><g><title>0x7fa94e2e0328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.28%)</title><rect x="1016" y="228" width="4" height="15" fill="rgb(252,91,15)"/><text x="1019.00" y="238.50"></text></g><g><title>array_reshape (methods.c) (3 samples, 0.28%)</title><rect x="1016" y="244" width="4" height="15" fill="rgb(244,195,51)"/><text x="1019.00" y="254.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.09%)</title><rect x="1019" y="260" width="1" height="15" fill="rgb(214,229,50)"/><text x="1022.00" y="270.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.09%)</title><rect x="1019" y="276" width="1" height="15" fill="rgb(225,196,23)"/><text x="1022.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="1019" y="292" width="1" height="15" fill="rgb(213,228,46)"/><text x="1022.00" y="302.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.09%)</title><rect x="1019" y="308" width="1" height="15" fill="rgb(222,196,15)"/><text x="1022.00" y="318.50"></text></g><g><title>IsAligned (array_assign.c) (1 samples, 0.09%)</title><rect x="1019" y="324" width="1" height="15" fill="rgb(224,70,24)"/><text x="1022.00" y="334.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (1 samples, 0.09%)</title><rect x="1019" y="340" width="1" height="15" fill="rgb(223,135,40)"/><text x="1022.00" y="350.50"></text></g><g><title>0x7fa94e2e0d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (43 samples, 4.02%)</title><rect x="973" y="212" width="48" height="15" fill="rgb(219,53,21)"/><text x="976.00" y="222.50">0x7f..</text></g><g><title>0x7fa94e2e08c9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1020" y="228" width="1" height="15" fill="rgb(247,22,35)"/><text x="1023.00" y="238.50"></text></g><g><title>__enter__ (warnings.py) (7 samples, 0.65%)</title><rect x="1037" y="244" width="8" height="15" fill="rgb(251,223,53)"/><text x="1040.00" y="254.50"></text></g><g><title>__exit__ (warnings.py) (1 samples, 0.09%)</title><rect x="1045" y="244" width="1" height="15" fill="rgb(241,24,17)"/><text x="1048.00" y="254.50"></text></g><g><title>__init__ (warnings.py) (1 samples, 0.09%)</title><rect x="1046" y="244" width="1" height="15" fill="rgb(240,13,30)"/><text x="1049.00" y="254.50"></text></g><g><title>get_config (sklearn/_config.py) (1 samples, 0.09%)</title><rect x="1048" y="260" width="1" height="15" fill="rgb(213,213,20)"/><text x="1051.00" y="270.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (3 samples, 0.28%)</title><rect x="1047" y="244" width="4" height="15" fill="rgb(234,45,41)"/><text x="1050.00" y="254.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="1049" y="260" width="2" height="15" fill="rgb(228,54,14)"/><text x="1052.00" y="270.50"></text></g><g><title>_ensure_no_complex_data (sklearn/utils/validation.py) (1 samples, 0.09%)</title><rect x="1051" y="244" width="1" height="15" fill="rgb(221,49,13)"/><text x="1054.00" y="254.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (9 samples, 0.84%)</title><rect x="1052" y="244" width="10" height="15" fill="rgb(235,149,15)"/><text x="1055.00" y="254.50"></text></g><g><title>__instancecheck__ (abc.py) (1 samples, 0.09%)</title><rect x="1060" y="260" width="2" height="15" fill="rgb(240,6,9)"/><text x="1063.00" y="270.50"></text></g><g><title>arraydescr_new (descriptor.c) (2 samples, 0.19%)</title><rect x="1062" y="244" width="2" height="15" fill="rgb(219,1,30)"/><text x="1065.00" y="254.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (3 samples, 0.28%)</title><rect x="1064" y="244" width="3" height="15" fill="rgb(214,168,22)"/><text x="1067.00" y="254.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (3 samples, 0.28%)</title><rect x="1064" y="260" width="3" height="15" fill="rgb(209,210,20)"/><text x="1067.00" y="270.50"></text></g><g><title>unicode_eq (python3.7) (1 samples, 0.09%)</title><rect x="1066" y="276" width="1" height="15" fill="rgb(224,223,8)"/><text x="1069.00" y="286.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.09%)</title><rect x="1067" y="244" width="1" height="15" fill="rgb(246,20,38)"/><text x="1070.00" y="254.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (49 samples, 4.58%)</title><rect x="1021" y="212" width="54" height="15" fill="rgb(238,180,54)"/><text x="1024.00" y="222.50">_vali..</text></g><g><title>check_array (sklearn/utils/validation.py) (45 samples, 4.21%)</title><rect x="1025" y="228" width="50" height="15" fill="rgb(229,55,10)"/><text x="1028.00" y="238.50">check..</text></g><g><title>simplefilter (warnings.py) (6 samples, 0.56%)</title><rect x="1068" y="244" width="7" height="15" fill="rgb(225,167,37)"/><text x="1071.00" y="254.50"></text></g><g><title>_add_filter (warnings.py) (4 samples, 0.37%)</title><rect x="1070" y="260" width="5" height="15" fill="rgb(246,194,0)"/><text x="1073.00" y="270.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (8 samples, 0.75%)</title><rect x="1075" y="212" width="9" height="15" fill="rgb(246,13,43)"/><text x="1078.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (7 samples, 0.65%)</title><rect x="1076" y="228" width="8" height="15" fill="rgb(215,113,8)"/><text x="1079.00" y="238.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.09%)</title><rect x="1083" y="244" width="1" height="15" fill="rgb(224,196,2)"/><text x="1086.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_weight_boosting.py) (104 samples, 9.72%)</title><rect x="970" y="180" width="115" height="15" fill="rgb(226,192,41)"/><text x="973.00" y="190.50">&lt;listcomp&gt; (sk..</text></g><g><title>predict (sklearn/tree/_classes.py) (104 samples, 9.72%)</title><rect x="970" y="196" width="115" height="15" fill="rgb(242,208,36)"/><text x="973.00" y="206.50">predict (sklea..</text></g><g><title>is_classifier (sklearn/base.py) (1 samples, 0.09%)</title><rect x="1084" y="212" width="1" height="15" fill="rgb(226,12,46)"/><text x="1087.00" y="222.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (1 samples, 0.09%)</title><rect x="1085" y="228" width="1" height="15" fill="rgb(207,96,33)"/><text x="1088.00" y="238.50"></text></g><g><title>setArrayFromSequence (ctors.c) (1 samples, 0.09%)</title><rect x="1085" y="244" width="1" height="15" fill="rgb(249,105,17)"/><text x="1088.00" y="254.50"></text></g><g><title>setArrayFromSequence (ctors.c) (1 samples, 0.09%)</title><rect x="1085" y="260" width="1" height="15" fill="rgb(246,160,18)"/><text x="1088.00" y="270.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.09%)</title><rect x="1085" y="276" width="1" height="15" fill="rgb(230,103,37)"/><text x="1088.00" y="286.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.09%)</title><rect x="1085" y="292" width="1" height="15" fill="rgb(253,159,7)"/><text x="1088.00" y="302.50"></text></g><g><title>0x7fa9748bcd94 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1085" y="308" width="1" height="15" fill="rgb(207,213,53)"/><text x="1088.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (2 samples, 0.19%)</title><rect x="1086" y="244" width="2" height="15" fill="rgb(212,75,51)"/><text x="1089.00" y="254.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (2 samples, 0.19%)</title><rect x="1086" y="260" width="2" height="15" fill="rgb(223,70,38)"/><text x="1089.00" y="270.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 0.37%)</title><rect x="1085" y="180" width="4" height="15" fill="rgb(214,46,25)"/><text x="1088.00" y="190.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (4 samples, 0.37%)</title><rect x="1085" y="196" width="4" height="15" fill="rgb(225,77,30)"/><text x="1088.00" y="206.50"></text></g><g><title>PyArray_FromAny (ctors.c) (4 samples, 0.37%)</title><rect x="1085" y="212" width="4" height="15" fill="rgb(243,187,5)"/><text x="1088.00" y="222.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (3 samples, 0.28%)</title><rect x="1086" y="228" width="3" height="15" fill="rgb(237,194,6)"/><text x="1089.00" y="238.50"></text></g><g><title>discover_dimensions (ctors.c) (1 samples, 0.09%)</title><rect x="1088" y="244" width="1" height="15" fill="rgb(209,3,51)"/><text x="1091.00" y="254.50"></text></g><g><title>discover_dimensions (ctors.c) (1 samples, 0.09%)</title><rect x="1088" y="260" width="1" height="15" fill="rgb(229,168,29)"/><text x="1091.00" y="270.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (4 samples, 0.37%)</title><rect x="1089" y="180" width="5" height="15" fill="rgb(221,175,38)"/><text x="1092.00" y="190.50"></text></g><g><title>__instancecheck__ (abc.py) (1 samples, 0.09%)</title><rect x="1092" y="196" width="2" height="15" fill="rgb(238,0,22)"/><text x="1095.00" y="206.50"></text></g><g><title>DOUBLE_copyswapn (arraytypes.c.src) (3 samples, 0.28%)</title><rect x="1101" y="292" width="4" height="15" fill="rgb(252,228,21)"/><text x="1104.00" y="302.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c) (3 samples, 0.28%)</title><rect x="1101" y="308" width="4" height="15" fill="rgb(233,104,11)"/><text x="1104.00" y="318.50"></text></g><g><title>PyArray_IterAllButAxis (iterators.c) (1 samples, 0.09%)</title><rect x="1105" y="292" width="1" height="15" fill="rgb(237,46,5)"/><text x="1108.00" y="302.50"></text></g><g><title>PyArray_IterNew (iterators.c) (1 samples, 0.09%)</title><rect x="1105" y="308" width="1" height="15" fill="rgb(237,44,6)"/><text x="1108.00" y="318.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1105" y="324" width="1" height="15" fill="rgb(212,69,46)"/><text x="1108.00" y="334.50"></text></g><g><title>0x7fa97489e514 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1105" y="340" width="1" height="15" fill="rgb(211,143,0)"/><text x="1108.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.09%)</title><rect x="1106" y="292" width="1" height="15" fill="rgb(209,136,7)"/><text x="1109.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="1106" y="308" width="1" height="15" fill="rgb(243,4,49)"/><text x="1109.00" y="318.50"></text></g><g><title>_array_fill_strides (ctors.c) (1 samples, 0.09%)</title><rect x="1106" y="324" width="1" height="15" fill="rgb(239,139,32)"/><text x="1109.00" y="334.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (17 samples, 1.59%)</title><rect x="1094" y="180" width="18" height="15" fill="rgb(237,144,51)"/><text x="1097.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (16 samples, 1.50%)</title><rect x="1095" y="196" width="17" height="15" fill="rgb(249,108,10)"/><text x="1098.00" y="206.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (16 samples, 1.50%)</title><rect x="1095" y="212" width="17" height="15" fill="rgb(213,104,19)"/><text x="1098.00" y="222.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (15 samples, 1.40%)</title><rect x="1096" y="228" width="16" height="15" fill="rgb(219,174,29)"/><text x="1099.00" y="238.50"></text></g><g><title>array_argsort (methods.c) (15 samples, 1.40%)</title><rect x="1096" y="244" width="16" height="15" fill="rgb(249,181,52)"/><text x="1099.00" y="254.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (15 samples, 1.40%)</title><rect x="1096" y="260" width="16" height="15" fill="rgb(238,216,41)"/><text x="1099.00" y="270.50"></text></g><g><title>_new_argsortlike (item_selection.c) (15 samples, 1.40%)</title><rect x="1096" y="276" width="16" height="15" fill="rgb(214,226,23)"/><text x="1099.00" y="286.50"></text></g><g><title>aquicksort_double (quicksort.c.src) (5 samples, 0.47%)</title><rect x="1107" y="292" width="5" height="15" fill="rgb(205,17,43)"/><text x="1110.00" y="302.50"></text></g><g><title>DOUBLE_LT (npysort_common.h) (3 samples, 0.28%)</title><rect x="1109" y="308" width="3" height="15" fill="rgb(216,35,2)"/><text x="1112.00" y="318.50"></text></g><g><title>array_arange (multiarraymodule.c) (2 samples, 0.19%)</title><rect x="1112" y="180" width="3" height="15" fill="rgb(237,25,45)"/><text x="1115.00" y="190.50"></text></g><g><title>PyArray_ArangeObj (ctors.c) (1 samples, 0.09%)</title><rect x="1113" y="196" width="2" height="15" fill="rgb(206,94,29)"/><text x="1116.00" y="206.50"></text></g><g><title>_calc_length (ctors.c) (1 samples, 0.09%)</title><rect x="1113" y="212" width="2" height="15" fill="rgb(210,124,9)"/><text x="1116.00" y="222.50"></text></g><g><title>_arange_safe_ceil_to_intp (ctors.c) (1 samples, 0.09%)</title><rect x="1113" y="228" width="2" height="15" fill="rgb(213,17,18)"/><text x="1116.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="1115" y="180" width="1" height="15" fill="rgb(224,84,48)"/><text x="1118.00" y="190.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="1115" y="196" width="1" height="15" fill="rgb(218,110,1)"/><text x="1118.00" y="206.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1115" y="212" width="1" height="15" fill="rgb(227,229,19)"/><text x="1118.00" y="222.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1115" y="228" width="1" height="15" fill="rgb(226,8,39)"/><text x="1118.00" y="238.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.09%)</title><rect x="1115" y="244" width="1" height="15" fill="rgb(216,114,49)"/><text x="1118.00" y="254.50"></text></g><g><title>0x7fa97489cb80 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1115" y="260" width="1" height="15" fill="rgb(241,135,30)"/><text x="1118.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1116" y="228" width="1" height="15" fill="rgb(213,91,28)"/><text x="1119.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1116" y="244" width="1" height="15" fill="rgb(232,11,52)"/><text x="1119.00" y="254.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1116" y="260" width="1" height="15" fill="rgb(209,11,19)"/><text x="1119.00" y="270.50"></text></g><g><title>array_multiply (number.c) (2 samples, 0.19%)</title><rect x="1116" y="180" width="2" height="15" fill="rgb(215,170,6)"/><text x="1119.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1116" y="196" width="2" height="15" fill="rgb(246,6,15)"/><text x="1119.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1116" y="212" width="2" height="15" fill="rgb(214,56,20)"/><text x="1119.00" y="222.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1117" y="228" width="1" height="15" fill="rgb(249,191,53)"/><text x="1120.00" y="238.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.09%)</title><rect x="1117" y="244" width="1" height="15" fill="rgb(210,144,32)"/><text x="1120.00" y="254.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="1117" y="260" width="1" height="15" fill="rgb(249,220,7)"/><text x="1120.00" y="270.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.09%)</title><rect x="1117" y="276" width="1" height="15" fill="rgb(220,174,8)"/><text x="1120.00" y="286.50"></text></g><g><title>IsAligned (array_assign.c) (1 samples, 0.09%)</title><rect x="1117" y="292" width="1" height="15" fill="rgb(230,201,37)"/><text x="1120.00" y="302.50"></text></g><g><title>PyArray_STRIDES (ndarraytypes.h) (1 samples, 0.09%)</title><rect x="1117" y="308" width="1" height="15" fill="rgb(236,194,41)"/><text x="1120.00" y="318.50"></text></g><g><title>_check_ufunc_fperr (extobj.c) (1 samples, 0.09%)</title><rect x="1118" y="228" width="1" height="15" fill="rgb(235,42,39)"/><text x="1121.00" y="238.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.09%)</title><rect x="1118" y="244" width="1" height="15" fill="rgb(234,191,3)"/><text x="1121.00" y="254.50"></text></g><g><title>0x7fa973abee80 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1118" y="260" width="1" height="15" fill="rgb(231,201,7)"/><text x="1121.00" y="270.50"></text></g><g><title>DOUBLE_greater_equal (loops.c.src) (1 samples, 0.09%)</title><rect x="1119" y="260" width="1" height="15" fill="rgb(215,162,51)"/><text x="1122.00" y="270.50"></text></g><g><title>run_binary_simd_greater_equal_DOUBLE (simd.inc.src) (1 samples, 0.09%)</title><rect x="1119" y="276" width="1" height="15" fill="rgb(249,68,2)"/><text x="1122.00" y="286.50"></text></g><g><title>sse2_binary_greater_equal_DOUBLE (simd.inc.src) (1 samples, 0.09%)</title><rect x="1119" y="292" width="1" height="15" fill="rgb(235,70,22)"/><text x="1122.00" y="302.50"></text></g><g><title>_mm_loadu_pd (emmintrin.h) (1 samples, 0.09%)</title><rect x="1119" y="308" width="1" height="15" fill="rgb(230,45,54)"/><text x="1122.00" y="318.50"></text></g><g><title>array_richcompare (arrayobject.c) (5 samples, 0.47%)</title><rect x="1118" y="180" width="5" height="15" fill="rgb(222,9,12)"/><text x="1121.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.47%)</title><rect x="1118" y="196" width="5" height="15" fill="rgb(252,97,52)"/><text x="1121.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.47%)</title><rect x="1118" y="212" width="5" height="15" fill="rgb(241,213,44)"/><text x="1121.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.37%)</title><rect x="1119" y="228" width="4" height="15" fill="rgb(254,18,9)"/><text x="1122.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (4 samples, 0.37%)</title><rect x="1119" y="244" width="4" height="15" fill="rgb(252,111,41)"/><text x="1122.00" y="254.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (3 samples, 0.28%)</title><rect x="1120" y="260" width="3" height="15" fill="rgb(220,12,3)"/><text x="1123.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (3 samples, 0.28%)</title><rect x="1120" y="276" width="3" height="15" fill="rgb(206,211,21)"/><text x="1123.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (3 samples, 0.28%)</title><rect x="1120" y="292" width="3" height="15" fill="rgb(221,108,40)"/><text x="1123.00" y="302.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (1 samples, 0.09%)</title><rect x="1122" y="308" width="1" height="15" fill="rgb(211,11,46)"/><text x="1125.00" y="318.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (1 samples, 0.09%)</title><rect x="1123" y="196" width="1" height="15" fill="rgb(247,227,8)"/><text x="1126.00" y="206.50"></text></g><g><title>check_and_adjust_index (common.h) (1 samples, 0.09%)</title><rect x="1123" y="212" width="1" height="15" fill="rgb(205,80,3)"/><text x="1126.00" y="222.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (2 samples, 0.19%)</title><rect x="1124" y="196" width="3" height="15" fill="rgb(244,13,19)"/><text x="1127.00" y="206.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (2 samples, 0.19%)</title><rect x="1124" y="212" width="3" height="15" fill="rgb(210,88,23)"/><text x="1127.00" y="222.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.19%)</title><rect x="1124" y="228" width="3" height="15" fill="rgb(247,133,53)"/><text x="1127.00" y="238.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (2 samples, 0.19%)</title><rect x="1124" y="244" width="3" height="15" fill="rgb(230,3,29)"/><text x="1127.00" y="254.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1126" y="260" width="1" height="15" fill="rgb(251,22,21)"/><text x="1129.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.09%)</title><rect x="1126" y="276" width="1" height="15" fill="rgb(227,39,6)"/><text x="1129.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="1126" y="292" width="1" height="15" fill="rgb(213,91,0)"/><text x="1129.00" y="302.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.09%)</title><rect x="1126" y="308" width="1" height="15" fill="rgb(245,10,36)"/><text x="1129.00" y="318.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (1 samples, 0.09%)</title><rect x="1126" y="324" width="1" height="15" fill="rgb(214,61,28)"/><text x="1129.00" y="334.50"></text></g><g><title>PyArray_ENABLEFLAGS (ndarraytypes.h) (1 samples, 0.09%)</title><rect x="1126" y="340" width="1" height="15" fill="rgb(242,171,12)"/><text x="1129.00" y="350.50"></text></g><g><title>arraymapiter_dealloc (mapping.c) (1 samples, 0.09%)</title><rect x="1127" y="196" width="1" height="15" fill="rgb(245,211,52)"/><text x="1130.00" y="206.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1127" y="212" width="1" height="15" fill="rgb(211,221,5)"/><text x="1130.00" y="222.50"></text></g><g><title>mapiter_trivial_get (lowlevel_strided_loops.c.src) (1 samples, 0.09%)</title><rect x="1128" y="196" width="1" height="15" fill="rgb(241,170,36)"/><text x="1131.00" y="206.50"></text></g><g><title>check_and_adjust_index (common.h) (1 samples, 0.09%)</title><rect x="1128" y="212" width="1" height="15" fill="rgb(254,186,52)"/><text x="1131.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (6 samples, 0.56%)</title><rect x="1123" y="180" width="7" height="15" fill="rgb(228,70,12)"/><text x="1126.00" y="190.50"></text></g><g><title>prepare_index (mapping.c) (1 samples, 0.09%)</title><rect x="1129" y="196" width="1" height="15" fill="rgb(249,137,23)"/><text x="1132.00" y="206.50"></text></g><g><title>multi_DECREF (mapping.c) (1 samples, 0.09%)</title><rect x="1129" y="212" width="1" height="15" fill="rgb(220,76,49)"/><text x="1132.00" y="222.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (1 samples, 0.09%)</title><rect x="1135" y="260" width="2" height="15" fill="rgb(249,181,31)"/><text x="1138.00" y="270.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;) (4 samples, 0.37%)</title><rect x="1133" y="196" width="5" height="15" fill="rgb(238,122,11)"/><text x="1136.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.37%)</title><rect x="1133" y="212" width="5" height="15" fill="rgb(249,215,39)"/><text x="1136.00" y="222.50"></text></g><g><title>all (numpy/core/fromnumeric.py) (3 samples, 0.28%)</title><rect x="1134" y="228" width="4" height="15" fill="rgb(210,143,44)"/><text x="1137.00" y="238.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (2 samples, 0.19%)</title><rect x="1135" y="244" width="3" height="15" fill="rgb(249,187,45)"/><text x="1138.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1137" y="260" width="1" height="15" fill="rgb(218,184,27)"/><text x="1140.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1137" y="276" width="1" height="15" fill="rgb(220,86,18)"/><text x="1140.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1137" y="292" width="1" height="15" fill="rgb(253,76,40)"/><text x="1140.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (1 samples, 0.09%)</title><rect x="1137" y="308" width="1" height="15" fill="rgb(231,65,4)"/><text x="1140.00" y="318.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1137" y="324" width="1" height="15" fill="rgb(240,20,16)"/><text x="1140.00" y="334.50"></text></g><g><title>npyiter_compute_index_strides (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1137" y="340" width="1" height="15" fill="rgb(240,214,53)"/><text x="1140.00" y="350.50"></text></g><g><title>_get_keywords (number.c) (1 samples, 0.09%)</title><rect x="1140" y="308" width="1" height="15" fill="rgb(224,25,17)"/><text x="1143.00" y="318.50"></text></g><g><title>DOUBLE_add (loops.c.src) (1 samples, 0.09%)</title><rect x="1141" y="356" width="1" height="15" fill="rgb(221,1,42)"/><text x="1144.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1142" y="356" width="1" height="15" fill="rgb(246,188,15)"/><text x="1145.00" y="366.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1142" y="372" width="1" height="15" fill="rgb(223,18,43)"/><text x="1145.00" y="382.50"></text></g><g><title>PyArray_CumSum (calculation.c) (4 samples, 0.37%)</title><rect x="1140" y="276" width="4" height="15" fill="rgb(218,100,4)"/><text x="1143.00" y="286.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c) (4 samples, 0.37%)</title><rect x="1140" y="292" width="4" height="15" fill="rgb(247,97,44)"/><text x="1143.00" y="302.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c) (3 samples, 0.28%)</title><rect x="1141" y="308" width="3" height="15" fill="rgb(228,162,2)"/><text x="1144.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.28%)</title><rect x="1141" y="324" width="3" height="15" fill="rgb(252,98,28)"/><text x="1144.00" y="334.50"></text></g><g><title>PyUFunc_Accumulate (ufunc_object.c) (3 samples, 0.28%)</title><rect x="1141" y="340" width="3" height="15" fill="rgb(246,194,46)"/><text x="1144.00" y="350.50"></text></g><g><title>get_binary_op_function (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1143" y="356" width="1" height="15" fill="rgb(245,124,50)"/><text x="1146.00" y="366.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;) (7 samples, 0.65%)</title><rect x="1138" y="196" width="7" height="15" fill="rgb(225,120,36)"/><text x="1141.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 0.65%)</title><rect x="1138" y="212" width="7" height="15" fill="rgb(237,20,43)"/><text x="1141.00" y="222.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py) (7 samples, 0.65%)</title><rect x="1138" y="228" width="7" height="15" fill="rgb(247,108,52)"/><text x="1141.00" y="238.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (7 samples, 0.65%)</title><rect x="1138" y="244" width="7" height="15" fill="rgb(214,180,48)"/><text x="1141.00" y="254.50"></text></g><g><title>array_cumsum (methods.c) (7 samples, 0.65%)</title><rect x="1138" y="260" width="7" height="15" fill="rgb(213,129,10)"/><text x="1141.00" y="270.50"></text></g><g><title>PyArray_DescrConverter2 (descriptor.c) (1 samples, 0.09%)</title><rect x="1144" y="276" width="1" height="15" fill="rgb(206,41,20)"/><text x="1147.00" y="286.50"></text></g><g><title>PyArray_Return (scalarapi.c) (1 samples, 0.09%)</title><rect x="1146" y="340" width="2" height="15" fill="rgb(205,172,36)"/><text x="1149.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="1146" y="356" width="2" height="15" fill="rgb(241,125,34)"/><text x="1149.00" y="366.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.09%)</title><rect x="1146" y="372" width="2" height="15" fill="rgb(205,5,48)"/><text x="1149.00" y="382.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.09%)</title><rect x="1146" y="388" width="2" height="15" fill="rgb(253,179,28)"/><text x="1149.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1148" y="372" width="1" height="15" fill="rgb(216,85,28)"/><text x="1151.00" y="382.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;) (4 samples, 0.37%)</title><rect x="1145" y="244" width="5" height="15" fill="rgb(254,142,22)"/><text x="1148.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.28%)</title><rect x="1146" y="260" width="4" height="15" fill="rgb(232,222,30)"/><text x="1149.00" y="270.50"></text></g><g><title>all (numpy/core/fromnumeric.py) (3 samples, 0.28%)</title><rect x="1146" y="276" width="4" height="15" fill="rgb(211,100,3)"/><text x="1149.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (3 samples, 0.28%)</title><rect x="1146" y="292" width="4" height="15" fill="rgb(250,11,6)"/><text x="1149.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 0.28%)</title><rect x="1146" y="308" width="4" height="15" fill="rgb(244,127,18)"/><text x="1149.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.28%)</title><rect x="1146" y="324" width="4" height="15" fill="rgb(247,130,40)"/><text x="1149.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1148" y="340" width="2" height="15" fill="rgb(222,159,32)"/><text x="1151.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (2 samples, 0.19%)</title><rect x="1148" y="356" width="2" height="15" fill="rgb(213,80,12)"/><text x="1151.00" y="366.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (1 samples, 0.09%)</title><rect x="1149" y="372" width="1" height="15" fill="rgb(244,13,45)"/><text x="1152.00" y="382.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.09%)</title><rect x="1149" y="388" width="1" height="15" fill="rgb(206,207,13)"/><text x="1152.00" y="398.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.09%)</title><rect x="1149" y="404" width="1" height="15" fill="rgb(247,216,54)"/><text x="1152.00" y="414.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.09%)</title><rect x="1149" y="420" width="1" height="15" fill="rgb(233,2,19)"/><text x="1152.00" y="430.50"></text></g><g><title>_mm_andnot_pd (emmintrin.h) (1 samples, 0.09%)</title><rect x="1150" y="356" width="1" height="15" fill="rgb(245,220,46)"/><text x="1153.00" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1150" y="244" width="2" height="15" fill="rgb(252,27,24)"/><text x="1153.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1150" y="260" width="2" height="15" fill="rgb(225,65,6)"/><text x="1153.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1150" y="276" width="2" height="15" fill="rgb(243,176,10)"/><text x="1153.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1150" y="292" width="2" height="15" fill="rgb(233,148,51)"/><text x="1153.00" y="302.50"></text></g><g><title>DOUBLE_isfinite (loops.c.src) (2 samples, 0.19%)</title><rect x="1150" y="308" width="2" height="15" fill="rgb(240,120,52)"/><text x="1153.00" y="318.50"></text></g><g><title>run_isfinite_simd_DOUBLE (simd.inc.src) (2 samples, 0.19%)</title><rect x="1150" y="324" width="2" height="15" fill="rgb(218,107,14)"/><text x="1153.00" y="334.50"></text></g><g><title>sse2_isfinite_DOUBLE (simd.inc.src) (2 samples, 0.19%)</title><rect x="1150" y="340" width="2" height="15" fill="rgb(206,118,15)"/><text x="1153.00" y="350.50"></text></g><g><title>sse2_compress4_to_byte_DOUBLE (simd.inc.src) (1 samples, 0.09%)</title><rect x="1151" y="356" width="1" height="15" fill="rgb(208,24,44)"/><text x="1154.00" y="366.50"></text></g><g><title>_mm_packs_epi16 (emmintrin.h) (1 samples, 0.09%)</title><rect x="1151" y="372" width="1" height="15" fill="rgb(248,68,27)"/><text x="1154.00" y="382.50"></text></g><g><title>__enter__ (numpy/core/_ufunc_config.py) (1 samples, 0.09%)</title><rect x="1154" y="260" width="1" height="15" fill="rgb(250,36,24)"/><text x="1157.00" y="270.50"></text></g><g><title>seterr (numpy/core/_ufunc_config.py) (1 samples, 0.09%)</title><rect x="1154" y="276" width="1" height="15" fill="rgb(253,41,14)"/><text x="1157.00" y="286.50"></text></g><g><title>__exit__ (numpy/core/_ufunc_config.py) (1 samples, 0.09%)</title><rect x="1155" y="260" width="1" height="15" fill="rgb(209,203,12)"/><text x="1158.00" y="270.50"></text></g><g><title>__init__ (numpy/core/_ufunc_config.py) (5 samples, 0.47%)</title><rect x="1156" y="260" width="6" height="15" fill="rgb(244,71,16)"/><text x="1159.00" y="270.50"></text></g><g><title>array_add (number.c) (1 samples, 0.09%)</title><rect x="1162" y="260" width="1" height="15" fill="rgb(205,7,25)"/><text x="1165.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1162" y="276" width="1" height="15" fill="rgb(213,208,19)"/><text x="1165.00" y="286.50"></text></g><g><title>_find_array_wrap (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1162" y="292" width="1" height="15" fill="rgb(221,119,39)"/><text x="1165.00" y="302.50"></text></g><g><title>_find_array_method (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1162" y="308" width="1" height="15" fill="rgb(224,31,39)"/><text x="1165.00" y="318.50"></text></g><g><title>array_subtract (number.c) (1 samples, 0.09%)</title><rect x="1163" y="260" width="1" height="15" fill="rgb(225,52,14)"/><text x="1166.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1163" y="276" width="1" height="15" fill="rgb(226,228,24)"/><text x="1166.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1163" y="292" width="1" height="15" fill="rgb(212,42,35)"/><text x="1166.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1163" y="308" width="1" height="15" fill="rgb(227,184,48)"/><text x="1166.00" y="318.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1163" y="324" width="1" height="15" fill="rgb(248,180,28)"/><text x="1166.00" y="334.50"></text></g><g><title>DOUBLE_subtract (loops.c.src) (1 samples, 0.09%)</title><rect x="1163" y="340" width="1" height="15" fill="rgb(231,198,26)"/><text x="1166.00" y="350.50"></text></g><g><title>run_binary_simd_subtract_DOUBLE (simd.inc.src) (1 samples, 0.09%)</title><rect x="1163" y="356" width="1" height="15" fill="rgb(212,138,39)"/><text x="1166.00" y="366.50"></text></g><g><title>sse2_binary_subtract_DOUBLE (simd.inc.src) (1 samples, 0.09%)</title><rect x="1163" y="372" width="1" height="15" fill="rgb(230,33,34)"/><text x="1166.00" y="382.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (1 samples, 0.09%)</title><rect x="1163" y="388" width="1" height="15" fill="rgb(254,35,46)"/><text x="1166.00" y="398.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1164" y="308" width="1" height="15" fill="rgb(243,110,9)"/><text x="1167.00" y="318.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.09%)</title><rect x="1164" y="324" width="1" height="15" fill="rgb(219,193,7)"/><text x="1167.00" y="334.50"></text></g><g><title>isclose (&lt;__array_function__ internals&gt;) (19 samples, 1.78%)</title><rect x="1145" y="196" width="21" height="15" fill="rgb(243,228,5)"/><text x="1148.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (19 samples, 1.78%)</title><rect x="1145" y="212" width="21" height="15" fill="rgb(219,141,8)"/><text x="1148.00" y="222.50"></text></g><g><title>isclose (numpy/core/numeric.py) (19 samples, 1.78%)</title><rect x="1145" y="228" width="21" height="15" fill="rgb(206,192,29)"/><text x="1148.00" y="238.50"></text></g><g><title>within_tol (numpy/core/numeric.py) (13 samples, 1.21%)</title><rect x="1152" y="244" width="14" height="15" fill="rgb(218,183,27)"/><text x="1155.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1164" y="260" width="2" height="15" fill="rgb(247,191,10)"/><text x="1167.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1164" y="276" width="2" height="15" fill="rgb(252,103,8)"/><text x="1167.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1164" y="292" width="2" height="15" fill="rgb(234,168,13)"/><text x="1167.00" y="302.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1165" y="308" width="1" height="15" fill="rgb(221,62,13)"/><text x="1168.00" y="318.50"></text></g><g><title>DOUBLE_absolute (loops.c.src) (1 samples, 0.09%)</title><rect x="1165" y="324" width="1" height="15" fill="rgb(216,158,39)"/><text x="1168.00" y="334.50"></text></g><g><title>run_unary_simd_absolute_DOUBLE (simd.inc.src) (1 samples, 0.09%)</title><rect x="1165" y="340" width="1" height="15" fill="rgb(231,109,4)"/><text x="1168.00" y="350.50"></text></g><g><title>sse2_absolute_DOUBLE (simd.inc.src) (1 samples, 0.09%)</title><rect x="1165" y="356" width="1" height="15" fill="rgb(214,198,22)"/><text x="1168.00" y="366.50"></text></g><g><title>_mm_andnot_pd (emmintrin.h) (1 samples, 0.09%)</title><rect x="1165" y="372" width="1" height="15" fill="rgb(228,67,44)"/><text x="1168.00" y="382.50"></text></g><g><title>NpyIter_GetInnerStrideArray (nditer_api.c) (1 samples, 0.09%)</title><rect x="1169" y="324" width="1" height="15" fill="rgb(239,69,19)"/><text x="1172.00" y="334.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (1 samples, 0.09%)</title><rect x="1170" y="324" width="1" height="15" fill="rgb(235,141,2)"/><text x="1173.00" y="334.50"></text></g><g><title>allocate_reduce_result (reduction.c) (1 samples, 0.09%)</title><rect x="1170" y="340" width="1" height="15" fill="rgb(237,70,25)"/><text x="1173.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.09%)</title><rect x="1170" y="356" width="1" height="15" fill="rgb(235,80,52)"/><text x="1173.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="1170" y="372" width="1" height="15" fill="rgb(241,79,11)"/><text x="1173.00" y="382.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.09%)</title><rect x="1170" y="388" width="1" height="15" fill="rgb(213,194,44)"/><text x="1173.00" y="398.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (1 samples, 0.09%)</title><rect x="1170" y="404" width="1" height="15" fill="rgb(211,39,17)"/><text x="1173.00" y="414.50"></text></g><g><title>DOUBLE_add (loops.c.src) (4 samples, 0.37%)</title><rect x="1172" y="340" width="4" height="15" fill="rgb(229,86,43)"/><text x="1175.00" y="350.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (2 samples, 0.19%)</title><rect x="1174" y="356" width="2" height="15" fill="rgb(223,69,12)"/><text x="1177.00" y="366.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py) (193 samples, 18.04%)</title><rect x="966" y="164" width="212" height="15" fill="rgb(251,103,13)"/><text x="969.00" y="174.50">_get_median_predict (sklear..</text></g><g><title>stable_cumsum (sklearn/utils/extmath.py) (44 samples, 4.11%)</title><rect x="1130" y="180" width="48" height="15" fill="rgb(247,149,3)"/><text x="1133.00" y="190.50">stab..</text></g><g><title>sum (&lt;__array_function__ internals&gt;) (11 samples, 1.03%)</title><rect x="1166" y="196" width="12" height="15" fill="rgb(208,159,22)"/><text x="1169.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (10 samples, 0.93%)</title><rect x="1167" y="212" width="11" height="15" fill="rgb(209,202,43)"/><text x="1170.00" y="222.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (10 samples, 0.93%)</title><rect x="1167" y="228" width="11" height="15" fill="rgb(224,167,47)"/><text x="1170.00" y="238.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (9 samples, 0.84%)</title><rect x="1169" y="244" width="9" height="15" fill="rgb(253,70,37)"/><text x="1172.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (9 samples, 0.84%)</title><rect x="1169" y="260" width="9" height="15" fill="rgb(241,3,26)"/><text x="1172.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (9 samples, 0.84%)</title><rect x="1169" y="276" width="9" height="15" fill="rgb(218,85,4)"/><text x="1172.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (9 samples, 0.84%)</title><rect x="1169" y="292" width="9" height="15" fill="rgb(219,218,11)"/><text x="1172.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (9 samples, 0.84%)</title><rect x="1169" y="308" width="9" height="15" fill="rgb(238,148,32)"/><text x="1172.00" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c) (7 samples, 0.65%)</title><rect x="1171" y="324" width="7" height="15" fill="rgb(240,3,10)"/><text x="1174.00" y="334.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (2 samples, 0.19%)</title><rect x="1176" y="340" width="2" height="15" fill="rgb(252,125,1)"/><text x="1179.00" y="350.50"></text></g><g><title>_ensure_no_complex_data (sklearn/utils/validation.py) (1 samples, 0.09%)</title><rect x="1182" y="196" width="1" height="15" fill="rgb(229,202,29)"/><text x="1185.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (1 samples, 0.09%)</title><rect x="1183" y="196" width="1" height="15" fill="rgb(232,25,54)"/><text x="1186.00" y="206.50"></text></g><g><title>_validate_data (sklearn/ensemble/_weight_boosting.py) (6 samples, 0.56%)</title><rect x="1178" y="164" width="7" height="15" fill="rgb(207,55,6)"/><text x="1181.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (6 samples, 0.56%)</title><rect x="1178" y="180" width="7" height="15" fill="rgb(205,45,48)"/><text x="1181.00" y="190.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.09%)</title><rect x="1184" y="196" width="1" height="15" fill="rgb(229,153,35)"/><text x="1187.00" y="206.50"></text></g><g><title>profile_skl (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py) (206 samples, 19.25%)</title><rect x="961" y="68" width="227" height="15" fill="rgb(220,127,3)"/><text x="964.00" y="78.50">profile_skl (bench_AdaBoostReg..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py) (206 samples, 19.25%)</title><rect x="961" y="84" width="227" height="15" fill="rgb(205,62,21)"/><text x="964.00" y="94.50">setup_profile (bench_AdaBoostR..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py) (206 samples, 19.25%)</title><rect x="961" y="100" width="227" height="15" fill="rgb(252,16,1)"/><text x="964.00" y="110.50">profile (bench_AdaBoostRegress..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (205 samples, 19.16%)</title><rect x="962" y="116" width="226" height="15" fill="rgb(222,182,46)"/><text x="965.00" y="126.50">time_predict (mlprodict/asv_b..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (203 samples, 18.97%)</title><rect x="965" y="132" width="223" height="15" fill="rgb(242,41,28)"/><text x="968.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_bench..</text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py) (203 samples, 18.97%)</title><rect x="965" y="148" width="223" height="15" fill="rgb(253,211,11)"/><text x="968.00" y="158.50">predict (sklearn/ensemble/_we..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (3 samples, 0.28%)</title><rect x="1185" y="164" width="3" height="15" fill="rgb(214,119,11)"/><text x="1188.00" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (1 samples, 0.09%)</title><rect x="1187" y="180" width="1" height="15" fill="rgb(223,54,23)"/><text x="1190.00" y="190.50"></text></g><g><title>all (1,070 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(239,97,46)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py) (1,070 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(253,173,29)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py)</text></g><g><title>start (bench_AdaBoostRegressor_default_b_reg_64_n_estimators5_1000_4_12_float_.py) (1 samples, 0.09%)</title><rect x="1188" y="68" width="2" height="15" fill="rgb(225,69,16)"/><text x="1191.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_64_n_estimators5.py) (1 samples, 0.09%)</title><rect x="1188" y="84" width="2" height="15" fill="rgb(215,132,51)"/><text x="1191.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.09%)</title><rect x="1188" y="100" width="2" height="15" fill="rgb(229,65,17)"/><text x="1191.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.09%)</title><rect x="1188" y="116" width="2" height="15" fill="rgb(254,52,33)"/><text x="1191.00" y="126.50"></text></g><g><title>fit (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.09%)</title><rect x="1188" y="132" width="2" height="15" fill="rgb(217,33,7)"/><text x="1191.00" y="142.50"></text></g><g><title>_boost (sklearn/ensemble/_weight_boosting.py) (1 samples, 0.09%)</title><rect x="1188" y="148" width="2" height="15" fill="rgb(253,38,35)"/><text x="1191.00" y="158.50"></text></g><g><title>_make_estimator (sklearn/ensemble/_base.py) (1 samples, 0.09%)</title><rect x="1188" y="164" width="2" height="15" fill="rgb(213,229,13)"/><text x="1191.00" y="174.50"></text></g><g><title>_set_random_states (sklearn/ensemble/_base.py) (1 samples, 0.09%)</title><rect x="1188" y="180" width="2" height="15" fill="rgb(236,12,27)"/><text x="1191.00" y="190.50"></text></g><g><title>set_params (sklearn/base.py) (1 samples, 0.09%)</title><rect x="1188" y="196" width="2" height="15" fill="rgb(218,143,36)"/><text x="1191.00" y="206.50"></text></g><g><title>get_params (sklearn/base.py) (1 samples, 0.09%)</title><rect x="1188" y="212" width="2" height="15" fill="rgb(228,42,1)"/><text x="1191.00" y="222.50"></text></g><g><title>_get_param_names (sklearn/base.py) (1 samples, 0.09%)</title><rect x="1188" y="228" width="2" height="15" fill="rgb(235,216,16)"/><text x="1191.00" y="238.50"></text></g><g><title>signature (inspect.py) (1 samples, 0.09%)</title><rect x="1188" y="244" width="2" height="15" fill="rgb(243,67,10)"/><text x="1191.00" y="254.50"></text></g><g><title>from_callable (inspect.py) (1 samples, 0.09%)</title><rect x="1188" y="260" width="2" height="15" fill="rgb(205,26,43)"/><text x="1191.00" y="270.50"></text></g><g><title>_signature_from_callable (inspect.py) (1 samples, 0.09%)</title><rect x="1188" y="276" width="2" height="15" fill="rgb(229,162,22)"/><text x="1191.00" y="286.50"></text></g><g><title>_signature_from_function (inspect.py) (1 samples, 0.09%)</title><rect x="1188" y="292" width="2" height="15" fill="rgb(246,146,49)"/><text x="1191.00" y="302.50"></text></g><g><title>__init__ (inspect.py) (1 samples, 0.09%)</title><rect x="1188" y="308" width="2" height="15" fill="rgb(247,121,32)"/><text x="1191.00" y="318.50"></text></g><g><title>__call__ (enum.py) (1 samples, 0.09%)</title><rect x="1188" y="324" width="2" height="15" fill="rgb(221,179,47)"/><text x="1191.00" y="334.50"></text></g></g></svg>