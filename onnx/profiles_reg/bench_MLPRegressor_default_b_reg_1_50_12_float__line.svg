<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1494" onload="init(evt)" viewBox="0 0 1200 1494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1494" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1477.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1477.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (5 samples, 1.45%)</title><rect x="0.0000%" y="820" width="1.4493%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (5 samples, 1.45%)</title><rect x="0.0000%" y="836" width="1.4493%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (4 samples, 1.16%)</title><rect x="0.2899%" y="852" width="1.1594%" height="15" fill="rgb(221,193,54)"/><text x="0.5399%" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (4 samples, 1.16%)</title><rect x="0.2899%" y="868" width="1.1594%" height="15" fill="rgb(248,212,6)"/><text x="0.5399%" y="878.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPRegressor/bench_MLPRegressor_default_b_reg.py:2) (6 samples, 1.74%)</title><rect x="0.0000%" y="148" width="1.7391%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.74%)</title><rect x="0.0000%" y="164" width="1.7391%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (6 samples, 1.74%)</title><rect x="0.0000%" y="180" width="1.7391%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.74%)</title><rect x="0.0000%" y="196" width="1.7391%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.74%)</title><rect x="0.0000%" y="212" width="1.7391%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.74%)</title><rect x="0.0000%" y="228" width="1.7391%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.74%)</title><rect x="0.0000%" y="244" width="1.7391%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.74%)</title><rect x="0.0000%" y="260" width="1.7391%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.74%)</title><rect x="0.0000%" y="276" width="1.7391%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (6 samples, 1.74%)</title><rect x="0.0000%" y="292" width="1.7391%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.74%)</title><rect x="0.0000%" y="308" width="1.7391%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.74%)</title><rect x="0.0000%" y="324" width="1.7391%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.74%)</title><rect x="0.0000%" y="340" width="1.7391%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.74%)</title><rect x="0.0000%" y="356" width="1.7391%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.74%)</title><rect x="0.0000%" y="372" width="1.7391%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (6 samples, 1.74%)</title><rect x="0.0000%" y="388" width="1.7391%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.74%)</title><rect x="0.0000%" y="404" width="1.7391%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.74%)</title><rect x="0.0000%" y="420" width="1.7391%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.74%)</title><rect x="0.0000%" y="436" width="1.7391%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.74%)</title><rect x="0.0000%" y="452" width="1.7391%" height="15" fill="rgb(247,18,42)"/><text x="0.2500%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.74%)</title><rect x="0.0000%" y="468" width="1.7391%" height="15" fill="rgb(241,131,45)"/><text x="0.2500%" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (6 samples, 1.74%)</title><rect x="0.0000%" y="484" width="1.7391%" height="15" fill="rgb(249,31,29)"/><text x="0.2500%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.74%)</title><rect x="0.0000%" y="500" width="1.7391%" height="15" fill="rgb(225,111,53)"/><text x="0.2500%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.74%)</title><rect x="0.0000%" y="516" width="1.7391%" height="15" fill="rgb(238,160,17)"/><text x="0.2500%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.74%)</title><rect x="0.0000%" y="532" width="1.7391%" height="15" fill="rgb(214,148,48)"/><text x="0.2500%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.74%)</title><rect x="0.0000%" y="548" width="1.7391%" height="15" fill="rgb(232,36,49)"/><text x="0.2500%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.74%)</title><rect x="0.0000%" y="564" width="1.7391%" height="15" fill="rgb(209,103,24)"/><text x="0.2500%" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (6 samples, 1.74%)</title><rect x="0.0000%" y="580" width="1.7391%" height="15" fill="rgb(229,88,8)"/><text x="0.2500%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.74%)</title><rect x="0.0000%" y="596" width="1.7391%" height="15" fill="rgb(213,181,19)"/><text x="0.2500%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (6 samples, 1.74%)</title><rect x="0.0000%" y="612" width="1.7391%" height="15" fill="rgb(254,191,54)"/><text x="0.2500%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.74%)</title><rect x="0.0000%" y="628" width="1.7391%" height="15" fill="rgb(241,83,37)"/><text x="0.2500%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.74%)</title><rect x="0.0000%" y="644" width="1.7391%" height="15" fill="rgb(233,36,39)"/><text x="0.2500%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.74%)</title><rect x="0.0000%" y="660" width="1.7391%" height="15" fill="rgb(226,3,54)"/><text x="0.2500%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.74%)</title><rect x="0.0000%" y="676" width="1.7391%" height="15" fill="rgb(245,192,40)"/><text x="0.2500%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.74%)</title><rect x="0.0000%" y="692" width="1.7391%" height="15" fill="rgb(238,167,29)"/><text x="0.2500%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.74%)</title><rect x="0.0000%" y="708" width="1.7391%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (6 samples, 1.74%)</title><rect x="0.0000%" y="724" width="1.7391%" height="15" fill="rgb(231,60,39)"/><text x="0.2500%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.74%)</title><rect x="0.0000%" y="740" width="1.7391%" height="15" fill="rgb(208,69,12)"/><text x="0.2500%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.74%)</title><rect x="0.0000%" y="756" width="1.7391%" height="15" fill="rgb(235,93,37)"/><text x="0.2500%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.74%)</title><rect x="0.0000%" y="772" width="1.7391%" height="15" fill="rgb(213,116,39)"/><text x="0.2500%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.74%)</title><rect x="0.0000%" y="788" width="1.7391%" height="15" fill="rgb(222,207,29)"/><text x="0.2500%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.74%)</title><rect x="0.0000%" y="804" width="1.7391%" height="15" fill="rgb(206,96,30)"/><text x="0.2500%" y="814.50"></text></g><g><title>&lt;module&gt; (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:4) (14 samples, 4.06%)</title><rect x="0.0000%" y="52" width="4.0580%" height="15" fill="rgb(218,138,4)"/><text x="0.2500%" y="62.50">&lt;mod..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (14 samples, 4.06%)</title><rect x="0.0000%" y="68" width="4.0580%" height="15" fill="rgb(250,191,14)"/><text x="0.2500%" y="78.50">_fin..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (14 samples, 4.06%)</title><rect x="0.0000%" y="84" width="4.0580%" height="15" fill="rgb(239,60,40)"/><text x="0.2500%" y="94.50">_fin..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (14 samples, 4.06%)</title><rect x="0.0000%" y="100" width="4.0580%" height="15" fill="rgb(206,27,48)"/><text x="0.2500%" y="110.50">_loa..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (14 samples, 4.06%)</title><rect x="0.0000%" y="116" width="4.0580%" height="15" fill="rgb(225,35,8)"/><text x="0.2500%" y="126.50">exec..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (14 samples, 4.06%)</title><rect x="0.0000%" y="132" width="4.0580%" height="15" fill="rgb(250,213,24)"/><text x="0.2500%" y="142.50">_cal..</text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPRegressor/bench_MLPRegressor_default_b_reg.py:7) (7 samples, 2.03%)</title><rect x="2.0290%" y="148" width="2.0290%" height="15" fill="rgb(247,123,22)"/><text x="2.2790%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 2.03%)</title><rect x="2.0290%" y="164" width="2.0290%" height="15" fill="rgb(231,138,38)"/><text x="2.2790%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 2.03%)</title><rect x="2.0290%" y="180" width="2.0290%" height="15" fill="rgb(231,145,46)"/><text x="2.2790%" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 2.03%)</title><rect x="2.0290%" y="196" width="2.0290%" height="15" fill="rgb(251,118,11)"/><text x="2.2790%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 2.03%)</title><rect x="2.0290%" y="212" width="2.0290%" height="15" fill="rgb(217,147,25)"/><text x="2.2790%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 2.03%)</title><rect x="2.0290%" y="228" width="2.0290%" height="15" fill="rgb(247,81,37)"/><text x="2.2790%" y="238.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (6 samples, 1.74%)</title><rect x="2.3188%" y="244" width="1.7391%" height="15" fill="rgb(209,12,38)"/><text x="2.5688%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.74%)</title><rect x="2.3188%" y="260" width="1.7391%" height="15" fill="rgb(227,1,9)"/><text x="2.5688%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.74%)</title><rect x="2.3188%" y="276" width="1.7391%" height="15" fill="rgb(248,47,43)"/><text x="2.5688%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.74%)</title><rect x="2.3188%" y="292" width="1.7391%" height="15" fill="rgb(221,10,30)"/><text x="2.5688%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.74%)</title><rect x="2.3188%" y="308" width="1.7391%" height="15" fill="rgb(210,229,1)"/><text x="2.5688%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.74%)</title><rect x="2.3188%" y="324" width="1.7391%" height="15" fill="rgb(222,148,37)"/><text x="2.5688%" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:27) (6 samples, 1.74%)</title><rect x="2.3188%" y="340" width="1.7391%" height="15" fill="rgb(234,67,33)"/><text x="2.5688%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.74%)</title><rect x="2.3188%" y="356" width="1.7391%" height="15" fill="rgb(247,98,35)"/><text x="2.5688%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.74%)</title><rect x="2.3188%" y="372" width="1.7391%" height="15" fill="rgb(247,138,52)"/><text x="2.5688%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.74%)</title><rect x="2.3188%" y="388" width="1.7391%" height="15" fill="rgb(213,79,30)"/><text x="2.5688%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.74%)</title><rect x="2.3188%" y="404" width="1.7391%" height="15" fill="rgb(246,177,23)"/><text x="2.5688%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.74%)</title><rect x="2.3188%" y="420" width="1.7391%" height="15" fill="rgb(230,62,27)"/><text x="2.5688%" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (5 samples, 1.45%)</title><rect x="2.6087%" y="436" width="1.4493%" height="15" fill="rgb(216,154,8)"/><text x="2.8587%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.45%)</title><rect x="2.6087%" y="452" width="1.4493%" height="15" fill="rgb(244,35,45)"/><text x="2.8587%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.45%)</title><rect x="2.6087%" y="468" width="1.4493%" height="15" fill="rgb(251,115,12)"/><text x="2.8587%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.45%)</title><rect x="2.6087%" y="484" width="1.4493%" height="15" fill="rgb(240,54,50)"/><text x="2.8587%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.45%)</title><rect x="2.6087%" y="500" width="1.4493%" height="15" fill="rgb(233,84,52)"/><text x="2.8587%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.45%)</title><rect x="2.6087%" y="516" width="1.4493%" height="15" fill="rgb(207,117,47)"/><text x="2.8587%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.45%)</title><rect x="2.6087%" y="532" width="1.4493%" height="15" fill="rgb(249,43,39)"/><text x="2.8587%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.45%)</title><rect x="2.6087%" y="548" width="1.4493%" height="15" fill="rgb(209,38,44)"/><text x="2.8587%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.45%)</title><rect x="2.6087%" y="564" width="1.4493%" height="15" fill="rgb(236,212,23)"/><text x="2.8587%" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (5 samples, 1.45%)</title><rect x="2.6087%" y="580" width="1.4493%" height="15" fill="rgb(242,79,21)"/><text x="2.8587%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.45%)</title><rect x="2.6087%" y="596" width="1.4493%" height="15" fill="rgb(211,96,35)"/><text x="2.8587%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.45%)</title><rect x="2.6087%" y="612" width="1.4493%" height="15" fill="rgb(253,215,40)"/><text x="2.8587%" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.45%)</title><rect x="2.6087%" y="628" width="1.4493%" height="15" fill="rgb(211,81,21)"/><text x="2.8587%" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.45%)</title><rect x="2.6087%" y="644" width="1.4493%" height="15" fill="rgb(208,190,38)"/><text x="2.8587%" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.45%)</title><rect x="2.6087%" y="660" width="1.4493%" height="15" fill="rgb(235,213,38)"/><text x="2.8587%" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (5 samples, 1.45%)</title><rect x="2.6087%" y="676" width="1.4493%" height="15" fill="rgb(237,122,38)"/><text x="2.8587%" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.45%)</title><rect x="2.6087%" y="692" width="1.4493%" height="15" fill="rgb(244,218,35)"/><text x="2.8587%" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.45%)</title><rect x="2.6087%" y="708" width="1.4493%" height="15" fill="rgb(240,68,47)"/><text x="2.8587%" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.45%)</title><rect x="2.6087%" y="724" width="1.4493%" height="15" fill="rgb(210,16,53)"/><text x="2.8587%" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.45%)</title><rect x="2.6087%" y="740" width="1.4493%" height="15" fill="rgb(235,124,12)"/><text x="2.8587%" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.45%)</title><rect x="2.6087%" y="756" width="1.4493%" height="15" fill="rgb(224,169,11)"/><text x="2.8587%" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (5 samples, 1.45%)</title><rect x="2.6087%" y="772" width="1.4493%" height="15" fill="rgb(250,166,2)"/><text x="2.8587%" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.45%)</title><rect x="2.6087%" y="788" width="1.4493%" height="15" fill="rgb(242,216,29)"/><text x="2.8587%" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.45%)</title><rect x="2.6087%" y="804" width="1.4493%" height="15" fill="rgb(230,116,27)"/><text x="2.8587%" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.45%)</title><rect x="2.6087%" y="820" width="1.4493%" height="15" fill="rgb(228,99,48)"/><text x="2.8587%" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.45%)</title><rect x="2.6087%" y="836" width="1.4493%" height="15" fill="rgb(253,11,6)"/><text x="2.8587%" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.45%)</title><rect x="2.6087%" y="852" width="1.4493%" height="15" fill="rgb(247,143,39)"/><text x="2.8587%" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (5 samples, 1.45%)</title><rect x="2.6087%" y="868" width="1.4493%" height="15" fill="rgb(236,97,10)"/><text x="2.8587%" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.45%)</title><rect x="2.6087%" y="884" width="1.4493%" height="15" fill="rgb(233,208,19)"/><text x="2.8587%" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.45%)</title><rect x="2.6087%" y="900" width="1.4493%" height="15" fill="rgb(216,164,2)"/><text x="2.8587%" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.45%)</title><rect x="2.6087%" y="916" width="1.4493%" height="15" fill="rgb(220,129,5)"/><text x="2.8587%" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.45%)</title><rect x="2.6087%" y="932" width="1.4493%" height="15" fill="rgb(242,17,10)"/><text x="2.8587%" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.45%)</title><rect x="2.6087%" y="948" width="1.4493%" height="15" fill="rgb(242,107,0)"/><text x="2.8587%" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.45%)</title><rect x="2.6087%" y="964" width="1.4493%" height="15" fill="rgb(251,28,31)"/><text x="2.8587%" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.45%)</title><rect x="2.6087%" y="980" width="1.4493%" height="15" fill="rgb(233,223,10)"/><text x="2.8587%" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.45%)</title><rect x="2.6087%" y="996" width="1.4493%" height="15" fill="rgb(215,21,27)"/><text x="2.8587%" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (5 samples, 1.45%)</title><rect x="2.6087%" y="1012" width="1.4493%" height="15" fill="rgb(232,23,21)"/><text x="2.8587%" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.45%)</title><rect x="2.6087%" y="1028" width="1.4493%" height="15" fill="rgb(244,5,23)"/><text x="2.8587%" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.45%)</title><rect x="2.6087%" y="1044" width="1.4493%" height="15" fill="rgb(226,81,46)"/><text x="2.8587%" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.45%)</title><rect x="2.6087%" y="1060" width="1.4493%" height="15" fill="rgb(247,70,30)"/><text x="2.8587%" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.45%)</title><rect x="2.6087%" y="1076" width="1.4493%" height="15" fill="rgb(212,68,19)"/><text x="2.8587%" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.45%)</title><rect x="2.6087%" y="1092" width="1.4493%" height="15" fill="rgb(240,187,13)"/><text x="2.8587%" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (4 samples, 1.16%)</title><rect x="2.8986%" y="1108" width="1.1594%" height="15" fill="rgb(223,113,26)"/><text x="3.1486%" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 1.16%)</title><rect x="2.8986%" y="1124" width="1.1594%" height="15" fill="rgb(206,192,2)"/><text x="3.1486%" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.16%)</title><rect x="2.8986%" y="1140" width="1.1594%" height="15" fill="rgb(241,108,4)"/><text x="3.1486%" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.16%)</title><rect x="2.8986%" y="1156" width="1.1594%" height="15" fill="rgb(247,173,49)"/><text x="3.1486%" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.16%)</title><rect x="2.8986%" y="1172" width="1.1594%" height="15" fill="rgb(224,114,35)"/><text x="3.1486%" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.16%)</title><rect x="2.8986%" y="1188" width="1.1594%" height="15" fill="rgb(245,159,27)"/><text x="3.1486%" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.16%)</title><rect x="2.8986%" y="1204" width="1.1594%" height="15" fill="rgb(245,172,44)"/><text x="3.1486%" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.16%)</title><rect x="2.8986%" y="1220" width="1.1594%" height="15" fill="rgb(236,23,11)"/><text x="3.1486%" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (4 samples, 1.16%)</title><rect x="2.8986%" y="1236" width="1.1594%" height="15" fill="rgb(205,117,38)"/><text x="3.1486%" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 1.16%)</title><rect x="2.8986%" y="1252" width="1.1594%" height="15" fill="rgb(237,72,25)"/><text x="3.1486%" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.16%)</title><rect x="2.8986%" y="1268" width="1.1594%" height="15" fill="rgb(244,70,9)"/><text x="3.1486%" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.16%)</title><rect x="2.8986%" y="1284" width="1.1594%" height="15" fill="rgb(217,125,39)"/><text x="3.1486%" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.16%)</title><rect x="2.8986%" y="1300" width="1.1594%" height="15" fill="rgb(235,36,10)"/><text x="3.1486%" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.16%)</title><rect x="2.8986%" y="1316" width="1.1594%" height="15" fill="rgb(251,123,47)"/><text x="3.1486%" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.16%)</title><rect x="2.8986%" y="1332" width="1.1594%" height="15" fill="rgb(221,13,13)"/><text x="3.1486%" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.16%)</title><rect x="2.8986%" y="1348" width="1.1594%" height="15" fill="rgb(238,131,9)"/><text x="3.1486%" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (4 samples, 1.16%)</title><rect x="2.8986%" y="1364" width="1.1594%" height="15" fill="rgb(211,50,8)"/><text x="3.1486%" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.16%)</title><rect x="2.8986%" y="1380" width="1.1594%" height="15" fill="rgb(245,182,24)"/><text x="3.1486%" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.16%)</title><rect x="2.8986%" y="1396" width="1.1594%" height="15" fill="rgb(242,14,37)"/><text x="3.1486%" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.16%)</title><rect x="2.8986%" y="1412" width="1.1594%" height="15" fill="rgb(246,228,12)"/><text x="3.1486%" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.16%)</title><rect x="2.8986%" y="1428" width="1.1594%" height="15" fill="rgb(213,55,15)"/><text x="3.1486%" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.16%)</title><rect x="2.8986%" y="1444" width="1.1594%" height="15" fill="rgb(209,9,3)"/><text x="3.1486%" y="1454.50"></text></g><g><title>predict (sklearn/neural_network/_multilayer_perceptron.py:1332) (16 samples, 4.64%)</title><rect x="6.3768%" y="148" width="4.6377%" height="15" fill="rgb(230,59,30)"/><text x="6.6268%" y="158.50">predi..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:963) (14 samples, 4.06%)</title><rect x="6.9565%" y="164" width="4.0580%" height="15" fill="rgb(209,121,21)"/><text x="7.2065%" y="174.50">chec..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:964) (11 samples, 3.19%)</title><rect x="7.8261%" y="180" width="3.1884%" height="15" fill="rgb(220,109,13)"/><text x="8.0761%" y="190.50">&lt;li..</text></g><g><title>check_array (sklearn/utils/validation.py:518) (7 samples, 2.03%)</title><rect x="13.9130%" y="180" width="2.0290%" height="15" fill="rgb(232,18,1)"/><text x="14.1630%" y="190.50">c..</text></g><g><title>check_array (sklearn/utils/validation.py:520) (7 samples, 2.03%)</title><rect x="15.9420%" y="180" width="2.0290%" height="15" fill="rgb(215,41,42)"/><text x="16.1920%" y="190.50">c..</text></g><g><title>simplefilter (warnings.py:179) (4 samples, 1.16%)</title><rect x="16.8116%" y="196" width="1.1594%" height="15" fill="rgb(224,123,36)"/><text x="17.0616%" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:559) (4 samples, 1.16%)</title><rect x="19.4203%" y="180" width="1.1594%" height="15" fill="rgb(240,125,3)"/><text x="19.6703%" y="190.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (8 samples, 2.32%)</title><rect x="20.5797%" y="196" width="2.3188%" height="15" fill="rgb(205,98,50)"/><text x="20.8297%" y="206.50">_..</text></g><g><title>check_array (sklearn/utils/validation.py:578) (10 samples, 2.90%)</title><rect x="20.5797%" y="180" width="2.8986%" height="15" fill="rgb(205,185,37)"/><text x="20.8297%" y="190.50">ch..</text></g><g><title>check_array (sklearn/utils/validation.py:581) (15 samples, 4.35%)</title><rect x="23.4783%" y="180" width="4.3478%" height="15" fill="rgb(238,207,15)"/><text x="23.7283%" y="190.50">check..</text></g><g><title>_num_samples (sklearn/utils/validation.py:155) (10 samples, 2.90%)</title><rect x="24.9275%" y="196" width="2.8986%" height="15" fill="rgb(213,199,42)"/><text x="25.1775%" y="206.50">_n..</text></g><g><title>__instancecheck__ (abc.py:139) (5 samples, 1.45%)</title><rect x="26.3768%" y="212" width="1.4493%" height="15" fill="rgb(235,201,11)"/><text x="26.6268%" y="222.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:667) (57 samples, 16.52%)</title><rect x="11.5942%" y="164" width="16.5217%" height="15" fill="rgb(207,46,11)"/><text x="11.8442%" y="174.50">_predict (sklearn/neural_n..</text></g><g><title>dgemv_n_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 1.45%)</title><rect x="31.0145%" y="212" width="1.4493%" height="15" fill="rgb(241,35,35)"/><text x="31.2645%" y="222.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2871) (4 samples, 1.16%)</title><rect x="33.3333%" y="244" width="1.1594%" height="15" fill="rgb(243,32,47)"/><text x="33.5833%" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (13 samples, 3.77%)</title><rect x="32.4638%" y="228" width="3.7681%" height="15" fill="rgb(247,202,23)"/><text x="32.7138%" y="238.50">PyUF..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (14 samples, 4.06%)</title><rect x="32.4638%" y="212" width="4.0580%" height="15" fill="rgb(219,102,11)"/><text x="32.7138%" y="222.50">ufun..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (21 samples, 6.09%)</title><rect x="30.7246%" y="196" width="6.0870%" height="15" fill="rgb(243,110,44)"/><text x="30.9746%" y="206.50">safe_spa..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:104) (29 samples, 8.41%)</title><rect x="29.5652%" y="180" width="8.4058%" height="15" fill="rgb(222,74,54)"/><text x="29.8152%" y="190.50">_forward_pas..</text></g><g><title>iterator_loop (ufunc_object.c:1520) (4 samples, 1.16%)</title><rect x="39.7101%" y="244" width="1.1594%" height="15" fill="rgb(216,99,12)"/><text x="39.9601%" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 2.32%)</title><rect x="39.1304%" y="196" width="2.3188%" height="15" fill="rgb(226,22,26)"/><text x="39.3804%" y="206.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 1.74%)</title><rect x="39.7101%" y="212" width="1.7391%" height="15" fill="rgb(217,163,10)"/><text x="39.9601%" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (6 samples, 1.74%)</title><rect x="39.7101%" y="228" width="1.7391%" height="15" fill="rgb(213,25,53)"/><text x="39.9601%" y="238.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:105) (14 samples, 4.06%)</title><rect x="37.9710%" y="180" width="4.0580%" height="15" fill="rgb(252,105,26)"/><text x="38.2210%" y="190.50">_for..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:66) (11 samples, 3.19%)</title><rect x="47.2464%" y="324" width="3.1884%" height="15" fill="rgb(220,39,43)"/><text x="47.4964%" y="334.50">_cl..</text></g><g><title>ndim (&lt;__array_function__ internals&gt;:6) (10 samples, 2.90%)</title><rect x="47.5362%" y="340" width="2.8986%" height="15" fill="rgb(229,68,48)"/><text x="47.7862%" y="350.50">nd..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (10 samples, 2.90%)</title><rect x="47.5362%" y="356" width="2.8986%" height="15" fill="rgb(252,8,32)"/><text x="47.7862%" y="366.50">ar..</text></g><g><title>ndim (numpy/core/fromnumeric.py:3021) (6 samples, 1.74%)</title><rect x="48.6957%" y="372" width="1.7391%" height="15" fill="rgb(223,20,43)"/><text x="48.9457%" y="382.50"></text></g><g><title>asarray (numpy/core/_asarray.py:85) (5 samples, 1.45%)</title><rect x="48.9855%" y="388" width="1.4493%" height="15" fill="rgb(229,81,49)"/><text x="49.2355%" y="398.50"></text></g><g><title>_clip (numpy/core/_methods.py:106) (18 samples, 5.22%)</title><rect x="46.3768%" y="308" width="5.2174%" height="15" fill="rgb(236,28,36)"/><text x="46.6268%" y="318.50">_clip ..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:69) (4 samples, 1.16%)</title><rect x="50.4348%" y="324" width="1.1594%" height="15" fill="rgb(249,185,26)"/><text x="50.6848%" y="334.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:66) (6 samples, 1.74%)</title><rect x="52.4638%" y="324" width="1.7391%" height="15" fill="rgb(249,174,33)"/><text x="52.7138%" y="334.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;:6) (4 samples, 1.16%)</title><rect x="53.0435%" y="340" width="1.1594%" height="15" fill="rgb(233,201,37)"/><text x="53.2935%" y="350.50"></text></g><g><title>_clip (numpy/core/_methods.py:109) (14 samples, 4.06%)</title><rect x="51.5942%" y="308" width="4.0580%" height="15" fill="rgb(221,78,26)"/><text x="51.8442%" y="318.50">_cli..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:69) (5 samples, 1.45%)</title><rect x="54.2029%" y="324" width="1.4493%" height="15" fill="rgb(250,127,30)"/><text x="54.4529%" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.16%)</title><rect x="54.4928%" y="340" width="1.1594%" height="15" fill="rgb(230,49,44)"/><text x="54.7428%" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1097) (4 samples, 1.16%)</title><rect x="57.6812%" y="372" width="1.1594%" height="15" fill="rgb(229,67,23)"/><text x="57.9312%" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (5 samples, 1.45%)</title><rect x="57.6812%" y="356" width="1.4493%" height="15" fill="rgb(249,83,47)"/><text x="57.9312%" y="366.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:109) (67 samples, 19.42%)</title><rect x="42.3188%" y="180" width="19.4203%" height="15" fill="rgb(215,43,3)"/><text x="42.5688%" y="190.50">_forward_pass (sklearn/neural_..</text></g><g><title>relu (sklearn/neural_network/_base.py:75) (66 samples, 19.13%)</title><rect x="42.6087%" y="196" width="19.1304%" height="15" fill="rgb(238,154,13)"/><text x="42.8587%" y="206.50">relu (sklearn/neural_network/_..</text></g><g><title>clip (&lt;__array_function__ internals&gt;:6) (59 samples, 17.10%)</title><rect x="44.6377%" y="212" width="17.1014%" height="15" fill="rgb(219,56,2)"/><text x="44.8877%" y="222.50">clip (&lt;__array_function__ ..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (56 samples, 16.23%)</title><rect x="45.5072%" y="228" width="16.2319%" height="15" fill="rgb(233,0,4)"/><text x="45.7572%" y="238.50">array_implement_array_fun..</text></g><g><title>clip (numpy/core/fromnumeric.py:2037) (56 samples, 16.23%)</title><rect x="45.5072%" y="244" width="16.2319%" height="15" fill="rgb(235,30,7)"/><text x="45.7572%" y="254.50">clip (numpy/core/fromnume..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (54 samples, 15.65%)</title><rect x="46.0870%" y="260" width="15.6522%" height="15" fill="rgb(250,79,13)"/><text x="46.3370%" y="270.50">_wrapfunc (numpy/core/fr..</text></g><g><title>array_clip (methods.c:2381) (53 samples, 15.36%)</title><rect x="46.3768%" y="276" width="15.3623%" height="15" fill="rgb(211,146,34)"/><text x="46.6268%" y="286.50">array_clip (methods.c:23..</text></g><g><title>forward_ndarray_method (methods.c:108) (53 samples, 15.36%)</title><rect x="46.3768%" y="292" width="15.3623%" height="15" fill="rgb(228,22,38)"/><text x="46.6268%" y="302.50">forward_ndarray_method (..</text></g><g><title>_clip (numpy/core/_methods.py:132) (21 samples, 6.09%)</title><rect x="55.6522%" y="308" width="6.0870%" height="15" fill="rgb(235,168,5)"/><text x="55.9022%" y="318.50">_clip (n..</text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:85) (17 samples, 4.93%)</title><rect x="56.8116%" y="324" width="4.9275%" height="15" fill="rgb(221,155,16)"/><text x="57.0616%" y="334.50">_clip_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (14 samples, 4.06%)</title><rect x="57.6812%" y="340" width="4.0580%" height="15" fill="rgb(215,215,53)"/><text x="57.9312%" y="350.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 1.74%)</title><rect x="60.0000%" y="356" width="1.7391%" height="15" fill="rgb(223,4,10)"/><text x="60.2500%" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (6 samples, 1.74%)</title><rect x="60.0000%" y="372" width="1.7391%" height="15" fill="rgb(234,103,6)"/><text x="60.2500%" y="382.50"></text></g><g><title>predict (sklearn/neural_network/_multilayer_perceptron.py:1333) (176 samples, 51.01%)</title><rect x="11.0145%" y="148" width="51.0145%" height="15" fill="rgb(227,97,0)"/><text x="11.2645%" y="158.50">predict (sklearn/neural_network/_multilayer_perceptron.py:1333)</text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:685) (114 samples, 33.04%)</title><rect x="28.9855%" y="164" width="33.0435%" height="15" fill="rgb(234,150,53)"/><text x="29.2355%" y="174.50">_predict (sklearn/neural_network/_multilayer_perceptro..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:375) (195 samples, 56.52%)</title><rect x="6.0870%" y="132" width="56.5217%" height="15" fill="rgb(228,201,54)"/><text x="6.3370%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:375)</text></g><g><title>&lt;module&gt; (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:54) (202 samples, 58.55%)</title><rect x="4.6377%" y="52" width="58.5507%" height="15" fill="rgb(222,22,37)"/><text x="4.8877%" y="62.50">&lt;module&gt; (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:54)</text></g><g><title>profile_skl (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:53) (202 samples, 58.55%)</title><rect x="4.6377%" y="68" width="58.5507%" height="15" fill="rgb(237,53,32)"/><text x="4.8877%" y="78.50">profile_skl (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:53)</text></g><g><title>setup_profile (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:37) (202 samples, 58.55%)</title><rect x="4.6377%" y="84" width="58.5507%" height="15" fill="rgb(233,25,53)"/><text x="4.8877%" y="94.50">setup_profile (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:37)</text></g><g><title>profile (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:31) (202 samples, 58.55%)</title><rect x="4.6377%" y="100" width="58.5507%" height="15" fill="rgb(210,40,34)"/><text x="4.8877%" y="110.50">profile (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (202 samples, 58.55%)</title><rect x="4.6377%" y="116" width="58.5507%" height="15" fill="rgb(241,220,44)"/><text x="4.8877%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182)</text></g><g><title>compiled_run (&lt;string&gt;:10) (12 samples, 3.48%)</title><rect x="66.0870%" y="180" width="3.4783%" height="15" fill="rgb(235,28,35)"/><text x="66.3370%" y="190.50">com..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (11 samples, 3.19%)</title><rect x="66.3768%" y="196" width="3.1884%" height="15" fill="rgb(210,56,17)"/><text x="66.6268%" y="206.50">_ru..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (8 samples, 2.32%)</title><rect x="67.2464%" y="212" width="2.3188%" height="15" fill="rgb(224,130,29)"/><text x="67.4964%" y="222.50">n..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (4 samples, 1.16%)</title><rect x="68.4058%" y="228" width="1.1594%" height="15" fill="rgb(235,212,8)"/><text x="68.6558%" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 1.16%)</title><rect x="68.4058%" y="244" width="1.1594%" height="15" fill="rgb(223,33,50)"/><text x="68.6558%" y="254.50"></text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (4 samples, 1.16%)</title><rect x="68.4058%" y="260" width="1.1594%" height="15" fill="rgb(219,149,13)"/><text x="68.6558%" y="270.50"></text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (4 samples, 1.16%)</title><rect x="68.4058%" y="276" width="1.1594%" height="15" fill="rgb(250,156,29)"/><text x="68.6558%" y="286.50"></text></g><g><title>cblas_matrixproduct (cblasfuncs.c:594) (4 samples, 1.16%)</title><rect x="68.4058%" y="292" width="1.1594%" height="15" fill="rgb(216,193,19)"/><text x="68.6558%" y="302.50"></text></g><g><title>gemv (cblasfuncs.c:86) (4 samples, 1.16%)</title><rect x="68.4058%" y="308" width="1.1594%" height="15" fill="rgb(216,135,14)"/><text x="68.6558%" y="318.50"></text></g><g><title>cblas_sgemv (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 1.16%)</title><rect x="68.4058%" y="324" width="1.1594%" height="15" fill="rgb(241,47,5)"/><text x="68.6558%" y="334.50"></text></g><g><title>sgemv_n_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 1.16%)</title><rect x="68.4058%" y="340" width="1.1594%" height="15" fill="rgb(233,42,35)"/><text x="68.6558%" y="350.50"></text></g><g><title>compiled_run (&lt;string&gt;:12) (4 samples, 1.16%)</title><rect x="70.1449%" y="180" width="1.1594%" height="15" fill="rgb(231,13,6)"/><text x="70.3949%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py:20) (4 samples, 1.16%)</title><rect x="70.1449%" y="196" width="1.1594%" height="15" fill="rgb(207,181,40)"/><text x="70.3949%" y="206.50"></text></g><g><title>compiled_run (&lt;string&gt;:13) (4 samples, 1.16%)</title><rect x="71.3043%" y="180" width="1.1594%" height="15" fill="rgb(254,173,49)"/><text x="71.5543%" y="190.50"></text></g><g><title>compiled_run (&lt;string&gt;:16) (5 samples, 1.45%)</title><rect x="73.6232%" y="180" width="1.4493%" height="15" fill="rgb(221,1,38)"/><text x="73.8732%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reshape.py:17) (4 samples, 1.16%)</title><rect x="73.9130%" y="196" width="1.1594%" height="15" fill="rgb(206,124,46)"/><text x="74.1630%" y="206.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:379) (42 samples, 12.17%)</title><rect x="64.6377%" y="132" width="12.1739%" height="15" fill="rgb(249,21,11)"/><text x="64.8877%" y="142.50">&lt;lambda&gt; (mlprodic..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (39 samples, 11.30%)</title><rect x="65.5072%" y="148" width="11.3043%" height="15" fill="rgb(222,201,40)"/><text x="65.7572%" y="158.50">run (mlprodict/on..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (39 samples, 11.30%)</title><rect x="65.5072%" y="164" width="11.3043%" height="15" fill="rgb(235,61,29)"/><text x="65.7572%" y="174.50">_run_sequence_run..</text></g><g><title>compiled_run (&lt;string&gt;:9) (5 samples, 1.45%)</title><rect x="75.3623%" y="180" width="1.4493%" height="15" fill="rgb(219,207,3)"/><text x="75.6123%" y="190.50"></text></g><g><title>&lt;module&gt; (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:61) (49 samples, 14.20%)</title><rect x="63.1884%" y="52" width="14.2029%" height="15" fill="rgb(222,56,46)"/><text x="63.4384%" y="62.50">&lt;module&gt; (bench_MLPReg..</text></g><g><title>profile_pyrtc (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:60) (49 samples, 14.20%)</title><rect x="63.1884%" y="68" width="14.2029%" height="15" fill="rgb(239,76,54)"/><text x="63.4384%" y="78.50">profile_pyrtc (bench_M..</text></g><g><title>setup_profile (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:37) (49 samples, 14.20%)</title><rect x="63.1884%" y="84" width="14.2029%" height="15" fill="rgb(231,124,27)"/><text x="63.4384%" y="94.50">setup_profile (bench_M..</text></g><g><title>profile (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:31) (49 samples, 14.20%)</title><rect x="63.1884%" y="100" width="14.2029%" height="15" fill="rgb(249,195,6)"/><text x="63.4384%" y="110.50">profile (bench_MLPRegr..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (47 samples, 13.62%)</title><rect x="63.7681%" y="116" width="13.6232%" height="15" fill="rgb(237,174,47)"/><text x="64.0181%" y="126.50">time_predict (mlprodi..</text></g><g><title>dnnl_primitive_execute (onnxruntime/capi/libdnnl.so.1) (59 samples, 17.10%)</title><rect x="81.4493%" y="372" width="17.1014%" height="15" fill="rgb(206,201,31)"/><text x="81.6993%" y="382.50">dnnl_primitive_execute (on..</text></g><g><title>dnnl_primitive::execute (onnxruntime/capi/libdnnl.so.1) (59 samples, 17.10%)</title><rect x="81.4493%" y="388" width="17.1014%" height="15" fill="rgb(231,57,52)"/><text x="81.6993%" y="398.50">dnnl_primitive::execute (o..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute (onnxruntime/capi/libdnnl.so.1) (59 samples, 17.10%)</title><rect x="81.4493%" y="404" width="17.1014%" height="15" fill="rgb(248,177,22)"/><text x="81.6993%" y="414.50">dnnl::impl::cpu::jit_uni_e..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute_forward (onnxruntime/capi/libdnnl.so.1) (59 samples, 17.10%)</title><rect x="81.4493%" y="420" width="17.1014%" height="15" fill="rgb(215,211,37)"/><text x="81.6993%" y="430.50">dnnl::impl::cpu::jit_uni_e..</text></g><g><title>GOMP_parallel@GOMP_4.0 (libiomp5.so) (59 samples, 17.10%)</title><rect x="81.4493%" y="436" width="17.1014%" height="15" fill="rgb(241,128,51)"/><text x="81.6993%" y="446.50">GOMP_parallel@GOMP_4.0 (li..</text></g><g><title>__kmp_join_call (libiomp5.so) (59 samples, 17.10%)</title><rect x="81.4493%" y="452" width="17.1014%" height="15" fill="rgb(227,165,31)"/><text x="81.6993%" y="462.50">__kmp_join_call (libiomp5...</text></g><g><title>__kmp_internal_join (libiomp5.so) (59 samples, 17.10%)</title><rect x="81.4493%" y="468" width="17.1014%" height="15" fill="rgb(228,167,24)"/><text x="81.6993%" y="478.50">__kmp_internal_join (libio..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (59 samples, 17.10%)</title><rect x="81.4493%" y="484" width="17.1014%" height="15" fill="rgb(228,143,12)"/><text x="81.6993%" y="494.50">__kmp_join_barrier (libiom..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (59 samples, 17.10%)</title><rect x="81.4493%" y="500" width="17.1014%" height="15" fill="rgb(249,149,8)"/><text x="81.6993%" y="510.50">_INTERNAL_25_______src_kmp..</text></g><g><title>sched_yield (libc-2.29.so) (8 samples, 2.32%)</title><rect x="96.2319%" y="516" width="2.3188%" height="15" fill="rgb(243,35,44)"/><text x="96.4819%" y="526.50">s..</text></g><g><title>onnxruntime::FunctionKernel::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 17.68%)</title><rect x="81.1594%" y="324" width="17.6812%" height="15" fill="rgb(246,89,9)"/><text x="81.4094%" y="334.50">onnxruntime::FunctionKernel..</text></g><g><title>std::_Function_handler&lt;onnxruntime::common::Status(void*, OrtApi const*, OrtKernelContext*), onnxruntime::DNNLExecutionProvider::Compile(std::vector&lt;onnxruntime::Node*, std::allocator&lt;onnxruntime::Node*&gt; &gt; const&amp;, std::vector&lt;onnxruntime::NodeComputeInfo, std::allocator&lt;onnxruntime::NodeComputeInfo&gt; &gt;&amp;)::{lambda(void*, OrtApi const*, OrtKernelContext*)#3}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 17.68%)</title><rect x="81.1594%" y="340" width="17.6812%" height="15" fill="rgb(233,213,13)"/><text x="81.4094%" y="350.50">std::_Function_handler&lt;onnx..</text></g><g><title>onnxruntime::ort_dnnl::DnnlFuncKernel&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 17.68%)</title><rect x="81.1594%" y="356" width="17.6812%" height="15" fill="rgb(233,141,41)"/><text x="81.4094%" y="366.50">onnxruntime::ort_dnnl::Dnnl..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (71 samples, 20.58%)</title><rect x="79.1304%" y="260" width="20.5797%" height="15" fill="rgb(239,167,4)"/><text x="79.3804%" y="270.50">onnxruntime::InferenceSession::R..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 19.71%)</title><rect x="80.0000%" y="276" width="19.7101%" height="15" fill="rgb(209,217,16)"/><text x="80.2500%" y="286.50">onnxruntime::utils::ExecuteGrap..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 19.71%)</title><rect x="80.0000%" y="292" width="19.7101%" height="15" fill="rgb(219,88,35)"/><text x="80.2500%" y="302.50">onnxruntime::utils::ExecuteGrap..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 19.71%)</title><rect x="80.0000%" y="308" width="19.7101%" height="15" fill="rgb(220,193,23)"/><text x="80.2500%" y="318.50">onnxruntime::SequentialExecutor..</text></g><g><title>all (345 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(230,90,52)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:68) (78 samples, 22.61%)</title><rect x="77.3913%" y="52" width="22.6087%" height="15" fill="rgb(252,106,19)"/><text x="77.6413%" y="62.50">&lt;module&gt; (bench_MLPRegressor_default..</text></g><g><title>profile_ort (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:67) (78 samples, 22.61%)</title><rect x="77.3913%" y="68" width="22.6087%" height="15" fill="rgb(206,74,20)"/><text x="77.6413%" y="78.50">profile_ort (bench_MLPRegressor_defa..</text></g><g><title>setup_profile (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:37) (78 samples, 22.61%)</title><rect x="77.3913%" y="84" width="22.6087%" height="15" fill="rgb(230,138,44)"/><text x="77.6413%" y="94.50">setup_profile (bench_MLPRegressor_de..</text></g><g><title>profile (bench_MLPRegressor_default_b_reg_1_50_12_float_.py:31) (78 samples, 22.61%)</title><rect x="77.3913%" y="100" width="22.6087%" height="15" fill="rgb(235,182,43)"/><text x="77.6413%" y="110.50">profile (bench_MLPRegressor_default_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (78 samples, 22.61%)</title><rect x="77.3913%" y="116" width="22.6087%" height="15" fill="rgb(242,16,51)"/><text x="77.6413%" y="126.50">time_predict (mlprodict/asv_benchmar..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:379) (78 samples, 22.61%)</title><rect x="77.3913%" y="132" width="22.6087%" height="15" fill="rgb(248,9,4)"/><text x="77.6413%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/co..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (76 samples, 22.03%)</title><rect x="77.9710%" y="148" width="22.0290%" height="15" fill="rgb(210,31,22)"/><text x="78.2210%" y="158.50">run (mlprodict/onnxrt/onnx_inferenc..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (76 samples, 22.03%)</title><rect x="77.9710%" y="164" width="22.0290%" height="15" fill="rgb(239,54,39)"/><text x="78.2210%" y="174.50">_run_whole_runtime (mlprodict/onnxr..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (76 samples, 22.03%)</title><rect x="77.9710%" y="180" width="22.0290%" height="15" fill="rgb(230,99,41)"/><text x="78.2210%" y="190.50">run (mlprodict/onnxrt/ops_whole/ses..</text></g><g><title>run (onnxruntime/capi/session.py:142) (73 samples, 21.16%)</title><rect x="78.8406%" y="196" width="21.1594%" height="15" fill="rgb(253,106,12)"/><text x="79.0906%" y="206.50">run (onnxruntime/capi/session.py:..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (72 samples, 20.87%)</title><rect x="79.1304%" y="212" width="20.8696%" height="15" fill="rgb(213,46,41)"/><text x="79.3804%" y="222.50">pybind11::cpp_function::dispatche..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (72 samples, 20.87%)</title><rect x="79.1304%" y="228" width="20.8696%" height="15" fill="rgb(215,133,35)"/><text x="79.3804%" y="238.50">void pybind11::cpp_function::init..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (72 samples, 20.87%)</title><rect x="79.1304%" y="244" width="20.8696%" height="15" fill="rgb(213,28,5)"/><text x="79.3804%" y="254.50">onnxruntime::InferenceSession::Ru..</text></g></svg></svg>