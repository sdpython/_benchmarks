<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="934" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="917.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="917.00"> </text><g id="frames"><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py:2) (4 samples, 0.10%)</title><rect x="10" y="148" width="1" height="15" fill="rgb(229,112,30)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.10%)</title><rect x="10" y="164" width="1" height="15" fill="rgb(213,98,18)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.10%)</title><rect x="10" y="180" width="1" height="15" fill="rgb(210,29,5)"/><text x="13.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.10%)</title><rect x="10" y="196" width="1" height="15" fill="rgb(212,16,3)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.10%)</title><rect x="10" y="212" width="1" height="15" fill="rgb(205,126,22)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.10%)</title><rect x="10" y="228" width="1" height="15" fill="rgb(231,229,41)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.10%)</title><rect x="10" y="244" width="1" height="15" fill="rgb(240,205,19)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.10%)</title><rect x="10" y="260" width="1" height="15" fill="rgb(225,59,31)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.10%)</title><rect x="10" y="276" width="1" height="15" fill="rgb(223,100,15)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (4 samples, 0.10%)</title><rect x="10" y="292" width="1" height="15" fill="rgb(245,214,48)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.10%)</title><rect x="10" y="308" width="1" height="15" fill="rgb(246,125,43)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.10%)</title><rect x="10" y="324" width="1" height="15" fill="rgb(243,76,50)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.10%)</title><rect x="10" y="340" width="1" height="15" fill="rgb(207,34,49)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.10%)</title><rect x="10" y="356" width="1" height="15" fill="rgb(219,42,48)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.10%)</title><rect x="10" y="372" width="1" height="15" fill="rgb(205,84,26)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (4 samples, 0.10%)</title><rect x="10" y="388" width="1" height="15" fill="rgb(212,156,39)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.10%)</title><rect x="10" y="404" width="1" height="15" fill="rgb(244,16,1)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.10%)</title><rect x="10" y="420" width="1" height="15" fill="rgb(220,110,25)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.10%)</title><rect x="10" y="436" width="1" height="15" fill="rgb(205,15,11)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.10%)</title><rect x="10" y="452" width="1" height="15" fill="rgb(231,210,41)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.10%)</title><rect x="10" y="468" width="1" height="15" fill="rgb(208,161,0)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (4 samples, 0.10%)</title><rect x="10" y="484" width="1" height="15" fill="rgb(245,44,25)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.10%)</title><rect x="10" y="500" width="1" height="15" fill="rgb(208,39,23)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.10%)</title><rect x="10" y="516" width="1" height="15" fill="rgb(248,169,4)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.10%)</title><rect x="10" y="532" width="1" height="15" fill="rgb(247,6,32)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.10%)</title><rect x="10" y="548" width="1" height="15" fill="rgb(253,52,7)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.10%)</title><rect x="10" y="564" width="1" height="15" fill="rgb(232,102,9)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (4 samples, 0.10%)</title><rect x="10" y="580" width="1" height="15" fill="rgb(219,14,49)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.10%)</title><rect x="10" y="596" width="1" height="15" fill="rgb(246,48,32)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.10%)</title><rect x="10" y="612" width="1" height="15" fill="rgb(251,58,27)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.10%)</title><rect x="10" y="628" width="1" height="15" fill="rgb(235,0,48)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.10%)</title><rect x="10" y="644" width="1" height="15" fill="rgb(245,107,9)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.10%)</title><rect x="10" y="660" width="1" height="15" fill="rgb(223,34,34)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.10%)</title><rect x="10" y="676" width="1" height="15" fill="rgb(222,155,7)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.10%)</title><rect x="10" y="692" width="1" height="15" fill="rgb(218,49,54)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.10%)</title><rect x="10" y="708" width="1" height="15" fill="rgb(215,197,11)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (4 samples, 0.10%)</title><rect x="10" y="724" width="1" height="15" fill="rgb(227,110,6)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.10%)</title><rect x="10" y="740" width="1" height="15" fill="rgb(254,115,36)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.10%)</title><rect x="10" y="756" width="1" height="15" fill="rgb(228,27,14)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.10%)</title><rect x="10" y="772" width="1" height="15" fill="rgb(224,192,30)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.10%)</title><rect x="10" y="788" width="1" height="15" fill="rgb(246,53,34)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.10%)</title><rect x="10" y="804" width="1" height="15" fill="rgb(221,47,25)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (4 samples, 0.10%)</title><rect x="10" y="820" width="1" height="15" fill="rgb(241,160,26)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (4 samples, 0.10%)</title><rect x="10" y="836" width="1" height="15" fill="rgb(224,13,46)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (4 samples, 0.10%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(236,140,43)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (4 samples, 0.10%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(219,124,29)"/><text x="13.00" y="878.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py:4) (7 samples, 0.17%)</title><rect x="11" y="148" width="2" height="15" fill="rgb(234,34,12)"/><text x="14.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.17%)</title><rect x="11" y="164" width="2" height="15" fill="rgb(245,133,36)"/><text x="14.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 0.17%)</title><rect x="11" y="180" width="2" height="15" fill="rgb(231,56,3)"/><text x="14.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.17%)</title><rect x="11" y="196" width="2" height="15" fill="rgb(223,74,33)"/><text x="14.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.17%)</title><rect x="11" y="212" width="2" height="15" fill="rgb(253,177,6)"/><text x="14.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.17%)</title><rect x="11" y="228" width="2" height="15" fill="rgb(222,160,10)"/><text x="14.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.17%)</title><rect x="11" y="244" width="2" height="15" fill="rgb(229,5,3)"/><text x="14.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.17%)</title><rect x="11" y="260" width="2" height="15" fill="rgb(225,228,29)"/><text x="14.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.17%)</title><rect x="11" y="276" width="2" height="15" fill="rgb(234,28,2)"/><text x="14.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (7 samples, 0.17%)</title><rect x="11" y="292" width="2" height="15" fill="rgb(208,112,43)"/><text x="14.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.17%)</title><rect x="11" y="308" width="2" height="15" fill="rgb(237,26,50)"/><text x="14.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.17%)</title><rect x="11" y="324" width="2" height="15" fill="rgb(254,89,39)"/><text x="14.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.17%)</title><rect x="11" y="340" width="2" height="15" fill="rgb(219,92,3)"/><text x="14.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.17%)</title><rect x="11" y="356" width="2" height="15" fill="rgb(225,132,41)"/><text x="14.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.17%)</title><rect x="11" y="372" width="2" height="15" fill="rgb(226,51,21)"/><text x="14.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (7 samples, 0.17%)</title><rect x="11" y="388" width="2" height="15" fill="rgb(210,81,52)"/><text x="14.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.17%)</title><rect x="11" y="404" width="2" height="15" fill="rgb(230,180,35)"/><text x="14.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.17%)</title><rect x="11" y="420" width="2" height="15" fill="rgb(227,51,6)"/><text x="14.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.17%)</title><rect x="11" y="436" width="2" height="15" fill="rgb(241,169,16)"/><text x="14.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.17%)</title><rect x="11" y="452" width="2" height="15" fill="rgb(247,220,30)"/><text x="14.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.17%)</title><rect x="11" y="468" width="2" height="15" fill="rgb(209,69,20)"/><text x="14.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:25) (5 samples, 0.12%)</title><rect x="12" y="484" width="1" height="15" fill="rgb(243,85,53)"/><text x="15.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.12%)</title><rect x="12" y="500" width="1" height="15" fill="rgb(212,86,35)"/><text x="15.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.12%)</title><rect x="12" y="516" width="1" height="15" fill="rgb(213,161,28)"/><text x="15.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.12%)</title><rect x="12" y="532" width="1" height="15" fill="rgb(205,157,20)"/><text x="15.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.12%)</title><rect x="12" y="548" width="1" height="15" fill="rgb(231,158,7)"/><text x="15.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.12%)</title><rect x="12" y="564" width="1" height="15" fill="rgb(248,81,6)"/><text x="15.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (5 samples, 0.12%)</title><rect x="12" y="580" width="1" height="15" fill="rgb(216,121,25)"/><text x="15.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.12%)</title><rect x="12" y="596" width="1" height="15" fill="rgb(246,67,4)"/><text x="15.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.12%)</title><rect x="12" y="612" width="1" height="15" fill="rgb(250,193,10)"/><text x="15.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.12%)</title><rect x="12" y="628" width="1" height="15" fill="rgb(244,223,42)"/><text x="15.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.12%)</title><rect x="12" y="644" width="1" height="15" fill="rgb(242,126,10)"/><text x="15.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.12%)</title><rect x="12" y="660" width="1" height="15" fill="rgb(239,206,48)"/><text x="15.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:379) (5 samples, 0.12%)</title><rect x="12" y="676" width="1" height="15" fill="rgb(241,157,6)"/><text x="15.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.12%)</title><rect x="12" y="692" width="1" height="15" fill="rgb(222,24,35)"/><text x="15.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.12%)</title><rect x="12" y="708" width="1" height="15" fill="rgb(241,15,9)"/><text x="15.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.12%)</title><rect x="12" y="724" width="1" height="15" fill="rgb(243,128,5)"/><text x="15.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.12%)</title><rect x="12" y="740" width="1" height="15" fill="rgb(251,85,13)"/><text x="15.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.12%)</title><rect x="12" y="756" width="1" height="15" fill="rgb(223,178,1)"/><text x="15.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py:182) (5 samples, 0.12%)</title><rect x="12" y="772" width="1" height="15" fill="rgb(228,113,0)"/><text x="15.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (5 samples, 0.12%)</title><rect x="12" y="788" width="1" height="15" fill="rgb(234,86,33)"/><text x="15.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.12%)</title><rect x="12" y="804" width="1" height="15" fill="rgb(250,131,32)"/><text x="15.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.12%)</title><rect x="12" y="820" width="1" height="15" fill="rgb(253,37,17)"/><text x="15.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.12%)</title><rect x="12" y="836" width="1" height="15" fill="rgb(210,125,27)"/><text x="15.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.12%)</title><rect x="12" y="852" width="1" height="15" fill="rgb(220,223,31)"/><text x="15.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.12%)</title><rect x="12" y="868" width="1" height="15" fill="rgb(232,178,43)"/><text x="15.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.12%)</title><rect x="12" y="884" width="1" height="15" fill="rgb(241,103,42)"/><text x="15.00" y="894.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (4 samples, 0.10%)</title><rect x="14" y="436" width="1" height="15" fill="rgb(236,59,39)"/><text x="17.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.10%)</title><rect x="14" y="452" width="1" height="15" fill="rgb(248,130,10)"/><text x="17.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.10%)</title><rect x="14" y="468" width="1" height="15" fill="rgb(250,114,37)"/><text x="17.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.10%)</title><rect x="14" y="484" width="1" height="15" fill="rgb(250,65,5)"/><text x="17.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.10%)</title><rect x="14" y="500" width="1" height="15" fill="rgb(233,24,46)"/><text x="17.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.10%)</title><rect x="14" y="516" width="1" height="15" fill="rgb(227,214,39)"/><text x="17.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (4 samples, 0.10%)</title><rect x="14" y="532" width="1" height="15" fill="rgb(253,0,34)"/><text x="17.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.10%)</title><rect x="14" y="548" width="1" height="15" fill="rgb(246,217,46)"/><text x="17.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.10%)</title><rect x="14" y="564" width="1" height="15" fill="rgb(251,208,43)"/><text x="17.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.10%)</title><rect x="14" y="580" width="1" height="15" fill="rgb(210,200,34)"/><text x="17.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.10%)</title><rect x="14" y="596" width="1" height="15" fill="rgb(221,131,45)"/><text x="17.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.10%)</title><rect x="14" y="612" width="1" height="15" fill="rgb(219,149,12)"/><text x="17.00" y="622.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:4) (20 samples, 0.50%)</title><rect x="10" y="52" width="5" height="15" fill="rgb(246,65,12)"/><text x="13.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (20 samples, 0.50%)</title><rect x="10" y="68" width="5" height="15" fill="rgb(235,142,21)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (20 samples, 0.50%)</title><rect x="10" y="84" width="5" height="15" fill="rgb(254,169,5)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (20 samples, 0.50%)</title><rect x="10" y="100" width="5" height="15" fill="rgb(244,58,14)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (20 samples, 0.50%)</title><rect x="10" y="116" width="5" height="15" fill="rgb(239,60,1)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (20 samples, 0.50%)</title><rect x="10" y="132" width="5" height="15" fill="rgb(212,148,17)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py:7) (8 samples, 0.20%)</title><rect x="13" y="148" width="2" height="15" fill="rgb(235,9,29)"/><text x="16.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.20%)</title><rect x="13" y="164" width="2" height="15" fill="rgb(250,191,36)"/><text x="16.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.20%)</title><rect x="13" y="180" width="2" height="15" fill="rgb(251,189,34)"/><text x="16.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.20%)</title><rect x="13" y="196" width="2" height="15" fill="rgb(227,1,46)"/><text x="16.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.20%)</title><rect x="13" y="212" width="2" height="15" fill="rgb(211,40,37)"/><text x="16.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.20%)</title><rect x="13" y="228" width="2" height="15" fill="rgb(241,5,17)"/><text x="16.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (7 samples, 0.17%)</title><rect x="13" y="244" width="2" height="15" fill="rgb(246,18,11)"/><text x="16.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.17%)</title><rect x="13" y="260" width="2" height="15" fill="rgb(253,226,3)"/><text x="16.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.17%)</title><rect x="13" y="276" width="2" height="15" fill="rgb(248,172,32)"/><text x="16.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.17%)</title><rect x="13" y="292" width="2" height="15" fill="rgb(219,109,49)"/><text x="16.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.17%)</title><rect x="13" y="308" width="2" height="15" fill="rgb(207,202,0)"/><text x="16.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.17%)</title><rect x="13" y="324" width="2" height="15" fill="rgb(253,176,49)"/><text x="16.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (6 samples, 0.15%)</title><rect x="14" y="340" width="1" height="15" fill="rgb(219,65,52)"/><text x="17.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.15%)</title><rect x="14" y="356" width="1" height="15" fill="rgb(206,97,46)"/><text x="17.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.15%)</title><rect x="14" y="372" width="1" height="15" fill="rgb(231,82,36)"/><text x="17.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.15%)</title><rect x="14" y="388" width="1" height="15" fill="rgb(229,135,2)"/><text x="17.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.15%)</title><rect x="14" y="404" width="1" height="15" fill="rgb(206,100,54)"/><text x="17.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.15%)</title><rect x="14" y="420" width="1" height="15" fill="rgb(218,144,48)"/><text x="17.00" y="430.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:172) (4 samples, 0.10%)</title><rect x="16" y="148" width="1" height="15" fill="rgb(244,25,5)"/><text x="19.00" y="158.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:141) (5 samples, 0.12%)</title><rect x="19" y="244" width="2" height="15" fill="rgb(254,64,31)"/><text x="22.00" y="254.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:262) (7 samples, 0.17%)</title><rect x="19" y="228" width="2" height="15" fill="rgb(250,84,47)"/><text x="22.00" y="238.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:279) (7 samples, 0.17%)</title><rect x="21" y="228" width="2" height="15" fill="rgb(209,201,10)"/><text x="24.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (6 samples, 0.15%)</title><rect x="22" y="244" width="1" height="15" fill="rgb(220,177,19)"/><text x="25.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;:6) (6 samples, 0.15%)</title><rect x="22" y="260" width="1" height="15" fill="rgb(230,91,5)"/><text x="25.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.15%)</title><rect x="22" y="276" width="1" height="15" fill="rgb(251,131,15)"/><text x="25.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py:1356) (6 samples, 0.15%)</title><rect x="22" y="292" width="1" height="15" fill="rgb(207,98,10)"/><text x="25.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c:2693) (6 samples, 0.15%)</title><rect x="22" y="308" width="1" height="15" fill="rgb(250,103,9)"/><text x="25.00" y="318.50"></text></g><g><title>PyArray_EinsteinSum (einsum.c.src:2803) (5 samples, 0.12%)</title><rect x="22" y="324" width="1" height="15" fill="rgb(250,17,49)"/><text x="25.00" y="334.50"></text></g><g><title>unbuffered_loop_nop2_ndim2 (einsum.c.src:2392) (5 samples, 0.12%)</title><rect x="22" y="340" width="1" height="15" fill="rgb(216,10,36)"/><text x="25.00" y="350.50"></text></g><g><title>array_multiply (number.c:350) (5 samples, 0.12%)</title><rect x="24" y="244" width="1" height="15" fill="rgb(225,128,10)"/><text x="27.00" y="254.50"></text></g><g><title>try_binary_elide (temp_elide.c:350) (5 samples, 0.12%)</title><rect x="24" y="260" width="1" height="15" fill="rgb(236,164,50)"/><text x="27.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.12%)</title><rect x="24" y="276" width="1" height="15" fill="rgb(210,33,46)"/><text x="27.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 0.12%)</title><rect x="24" y="292" width="1" height="15" fill="rgb(219,119,14)"/><text x="27.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (5 samples, 0.12%)</title><rect x="24" y="308" width="1" height="15" fill="rgb(248,225,22)"/><text x="27.00" y="318.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (5 samples, 0.12%)</title><rect x="24" y="324" width="1" height="15" fill="rgb(218,126,9)"/><text x="27.00" y="334.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (15 samples, 0.38%)</title><rect x="25" y="260" width="5" height="15" fill="rgb(248,157,50)"/><text x="28.00" y="270.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.12%)</title><rect x="30" y="388" width="1" height="15" fill="rgb(241,5,25)"/><text x="33.00" y="398.50"></text></g><g><title>sched_yield (libc-2.29.so) (5 samples, 0.12%)</title><rect x="30" y="404" width="1" height="15" fill="rgb(240,196,0)"/><text x="33.00" y="414.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:303) (27 samples, 0.68%)</title><rect x="24" y="228" width="8" height="15" fill="rgb(220,34,47)"/><text x="27.00" y="238.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (22 samples, 0.55%)</title><rect x="25" y="244" width="7" height="15" fill="rgb(225,177,24)"/><text x="28.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 0.15%)</title><rect x="30" y="260" width="2" height="15" fill="rgb(228,124,22)"/><text x="33.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (6 samples, 0.15%)</title><rect x="30" y="276" width="2" height="15" fill="rgb(218,188,45)"/><text x="33.00" y="286.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (6 samples, 0.15%)</title><rect x="30" y="292" width="2" height="15" fill="rgb(210,229,47)"/><text x="33.00" y="302.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (6 samples, 0.15%)</title><rect x="30" y="308" width="2" height="15" fill="rgb(235,216,39)"/><text x="33.00" y="318.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (6 samples, 0.15%)</title><rect x="30" y="324" width="2" height="15" fill="rgb(251,180,7)"/><text x="33.00" y="334.50"></text></g><g><title>dgemm_thread_tn (libopenblasp-r0-34a18dc3.3.7.so) (6 samples, 0.15%)</title><rect x="30" y="340" width="2" height="15" fill="rgb(216,93,19)"/><text x="33.00" y="350.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (6 samples, 0.15%)</title><rect x="30" y="356" width="2" height="15" fill="rgb(234,94,7)"/><text x="33.00" y="366.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (6 samples, 0.15%)</title><rect x="30" y="372" width="2" height="15" fill="rgb(254,74,35)"/><text x="33.00" y="382.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:304) (5 samples, 0.12%)</title><rect x="32" y="228" width="1" height="15" fill="rgb(247,38,39)"/><text x="35.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.12%)</title><rect x="32" y="244" width="1" height="15" fill="rgb(237,6,45)"/><text x="35.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 0.12%)</title><rect x="32" y="260" width="1" height="15" fill="rgb(221,72,5)"/><text x="35.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 0.12%)</title><rect x="32" y="276" width="1" height="15" fill="rgb(224,191,13)"/><text x="35.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (5 samples, 0.12%)</title><rect x="32" y="292" width="1" height="15" fill="rgb(226,37,46)"/><text x="35.00" y="302.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (4 samples, 0.10%)</title><rect x="32" y="308" width="1" height="15" fill="rgb(205,65,46)"/><text x="35.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (4 samples, 0.10%)</title><rect x="32" y="324" width="1" height="15" fill="rgb(223,178,5)"/><text x="35.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (4 samples, 0.10%)</title><rect x="32" y="340" width="1" height="15" fill="rgb(215,111,16)"/><text x="35.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:228) (4 samples, 0.10%)</title><rect x="32" y="356" width="1" height="15" fill="rgb(241,213,23)"/><text x="35.00" y="366.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:305) (6 samples, 0.15%)</title><rect x="33" y="228" width="2" height="15" fill="rgb(211,156,12)"/><text x="36.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 0.15%)</title><rect x="33" y="244" width="2" height="15" fill="rgb(209,72,52)"/><text x="36.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 0.15%)</title><rect x="33" y="260" width="2" height="15" fill="rgb(232,106,42)"/><text x="36.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (6 samples, 0.15%)</title><rect x="33" y="276" width="2" height="15" fill="rgb(213,44,32)"/><text x="36.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (6 samples, 0.15%)</title><rect x="33" y="292" width="2" height="15" fill="rgb(229,9,46)"/><text x="36.00" y="302.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (6 samples, 0.15%)</title><rect x="33" y="308" width="2" height="15" fill="rgb(206,34,27)"/><text x="36.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (6 samples, 0.15%)</title><rect x="33" y="324" width="2" height="15" fill="rgb(212,56,53)"/><text x="36.00" y="334.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1867) (4 samples, 0.10%)</title><rect x="35" y="308" width="2" height="15" fill="rgb(233,52,44)"/><text x="38.00" y="318.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1869) (6 samples, 0.15%)</title><rect x="37" y="308" width="2" height="15" fill="rgb(252,192,42)"/><text x="40.00" y="318.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1592) (73 samples, 1.82%)</title><rect x="19" y="180" width="21" height="15" fill="rgb(230,98,35)"/><text x="22.00" y="190.50"></text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py:1749) (73 samples, 1.82%)</title><rect x="19" y="196" width="21" height="15" fill="rgb(240,229,47)"/><text x="22.00" y="206.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1348) (71 samples, 1.77%)</title><rect x="19" y="212" width="21" height="15" fill="rgb(251,69,54)"/><text x="22.00" y="222.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:306) (18 samples, 0.45%)</title><rect x="35" y="228" width="5" height="15" fill="rgb(253,3,24)"/><text x="38.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (17 samples, 0.42%)</title><rect x="35" y="244" width="5" height="15" fill="rgb(243,112,24)"/><text x="38.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (16 samples, 0.40%)</title><rect x="35" y="260" width="5" height="15" fill="rgb(253,15,49)"/><text x="38.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (16 samples, 0.40%)</title><rect x="35" y="276" width="5" height="15" fill="rgb(210,165,34)"/><text x="38.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (16 samples, 0.40%)</title><rect x="35" y="292" width="5" height="15" fill="rgb(227,16,18)"/><text x="38.00" y="302.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1871) (4 samples, 0.10%)</title><rect x="39" y="308" width="1" height="15" fill="rgb(210,183,44)"/><text x="42.00" y="318.50"></text></g><g><title>_new_argsortlike (item_selection.c:1057) (5 samples, 0.12%)</title><rect x="40" y="308" width="2" height="15" fill="rgb(211,22,23)"/><text x="43.00" y="318.50"></text></g><g><title>adumb_select_double (selection.c.src:257) (10 samples, 0.25%)</title><rect x="42" y="340" width="3" height="15" fill="rgb(215,121,43)"/><text x="45.00" y="350.50"></text></g><g><title>aintroselect_double (selection.c.src:322) (44 samples, 1.10%)</title><rect x="42" y="324" width="13" height="15" fill="rgb(239,16,41)"/><text x="45.00" y="334.50"></text></g><g><title>adumb_select_double (selection.c.src:258) (34 samples, 0.85%)</title><rect x="45" y="340" width="10" height="15" fill="rgb(218,172,36)"/><text x="48.00" y="350.50"></text></g><g><title>DOUBLE_LT (npysort_common.h:130) (32 samples, 0.80%)</title><rect x="45" y="356" width="10" height="15" fill="rgb(237,156,6)"/><text x="48.00" y="366.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (46 samples, 1.15%)</title><rect x="42" y="308" width="13" height="15" fill="rgb(248,229,9)"/><text x="45.00" y="318.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:517) (55 samples, 1.38%)</title><rect x="40" y="196" width="16" height="15" fill="rgb(229,108,40)"/><text x="43.00" y="206.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (55 samples, 1.38%)</title><rect x="40" y="212" width="16" height="15" fill="rgb(220,122,16)"/><text x="43.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (55 samples, 1.38%)</title><rect x="40" y="228" width="16" height="15" fill="rgb(230,137,4)"/><text x="43.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (55 samples, 1.38%)</title><rect x="40" y="244" width="16" height="15" fill="rgb(211,169,25)"/><text x="43.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (55 samples, 1.38%)</title><rect x="40" y="260" width="16" height="15" fill="rgb(235,89,43)"/><text x="43.00" y="270.50"></text></g><g><title>array_argpartition (methods.c:1454) (55 samples, 1.38%)</title><rect x="40" y="276" width="16" height="15" fill="rgb(216,159,13)"/><text x="43.00" y="286.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (55 samples, 1.38%)</title><rect x="40" y="292" width="16" height="15" fill="rgb(230,148,54)"/><text x="43.00" y="302.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (6 samples, 0.15%)</title><rect x="56" y="212" width="2" height="15" fill="rgb(236,52,30)"/><text x="59.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.12%)</title><rect x="57" y="228" width="1" height="15" fill="rgb(246,166,10)"/><text x="60.00" y="238.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (5 samples, 0.12%)</title><rect x="57" y="244" width="1" height="15" fill="rgb(237,114,51)"/><text x="60.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (5 samples, 0.12%)</title><rect x="57" y="260" width="1" height="15" fill="rgb(212,62,3)"/><text x="60.00" y="270.50"></text></g><g><title>array_argsort (methods.c:1395) (5 samples, 0.12%)</title><rect x="57" y="276" width="1" height="15" fill="rgb(207,200,4)"/><text x="60.00" y="286.50"></text></g><g><title>PyArray_ArgSort (item_selection.c:1322) (5 samples, 0.12%)</title><rect x="57" y="292" width="1" height="15" fill="rgb(217,73,40)"/><text x="60.00" y="302.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:521) (12 samples, 0.30%)</title><rect x="56" y="196" width="4" height="15" fill="rgb(252,83,46)"/><text x="59.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:642) (150 samples, 3.75%)</title><rect x="18" y="164" width="45" height="15" fill="rgb(230,51,8)"/><text x="21.00" y="174.50">knei..</text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1601) (76 samples, 1.90%)</title><rect x="40" y="180" width="23" height="15" fill="rgb(205,63,37)"/><text x="43.00" y="190.50">p..</text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:524) (9 samples, 0.23%)</title><rect x="60" y="196" width="3" height="15" fill="rgb(233,223,5)"/><text x="63.00" y="206.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:174) (154 samples, 3.85%)</title><rect x="17" y="148" width="46" height="15" fill="rgb(212,53,4)"/><text x="20.00" y="158.50">pred..</text></g><g><title>_mean (numpy/core/_methods.py:151) (5 samples, 0.12%)</title><rect x="63" y="212" width="2" height="15" fill="rgb(215,16,21)"/><text x="66.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (5 samples, 0.12%)</title><rect x="63" y="228" width="2" height="15" fill="rgb(254,51,33)"/><text x="66.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (5 samples, 0.12%)</title><rect x="63" y="244" width="2" height="15" fill="rgb(246,19,24)"/><text x="66.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (5 samples, 0.12%)</title><rect x="63" y="260" width="2" height="15" fill="rgb(214,37,0)"/><text x="66.00" y="270.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:54) (166 samples, 4.15%)</title><rect x="16" y="52" width="49" height="15" fill="rgb(242,90,13)"/><text x="19.00" y="62.50">&lt;mod..</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:53) (166 samples, 4.15%)</title><rect x="16" y="68" width="49" height="15" fill="rgb(232,121,0)"/><text x="19.00" y="78.50">prof..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:37) (166 samples, 4.15%)</title><rect x="16" y="84" width="49" height="15" fill="rgb(219,186,1)"/><text x="19.00" y="94.50">setu..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:31) (166 samples, 4.15%)</title><rect x="16" y="100" width="49" height="15" fill="rgb(248,101,4)"/><text x="19.00" y="110.50">prof..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (166 samples, 4.15%)</title><rect x="16" y="116" width="49" height="15" fill="rgb(238,106,5)"/><text x="19.00" y="126.50">time..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (166 samples, 4.15%)</title><rect x="16" y="132" width="49" height="15" fill="rgb(249,68,38)"/><text x="19.00" y="142.50">&lt;lam..</text></g><g><title>predict (sklearn/neighbors/_regression.py:183) (8 samples, 0.20%)</title><rect x="63" y="148" width="2" height="15" fill="rgb(240,98,12)"/><text x="66.00" y="158.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (6 samples, 0.15%)</title><rect x="63" y="164" width="2" height="15" fill="rgb(217,47,50)"/><text x="66.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.15%)</title><rect x="63" y="180" width="2" height="15" fill="rgb(230,40,4)"/><text x="66.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (6 samples, 0.15%)</title><rect x="63" y="196" width="2" height="15" fill="rgb(210,68,40)"/><text x="66.00" y="206.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (7 samples, 0.17%)</title><rect x="68" y="276" width="2" height="15" fill="rgb(211,91,32)"/><text x="71.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (7 samples, 0.17%)</title><rect x="68" y="292" width="2" height="15" fill="rgb(235,184,1)"/><text x="71.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (6 samples, 0.15%)</title><rect x="68" y="308" width="2" height="15" fill="rgb(246,73,35)"/><text x="71.00" y="318.50"></text></g><g><title>discover_dimensions (ctors.c:884) (4 samples, 0.10%)</title><rect x="70" y="292" width="1" height="15" fill="rgb(207,45,0)"/><text x="73.00" y="302.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (14 samples, 0.35%)</title><rect x="68" y="260" width="4" height="15" fill="rgb(209,3,8)"/><text x="71.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (7 samples, 0.17%)</title><rect x="70" y="276" width="2" height="15" fill="rgb(221,223,53)"/><text x="73.00" y="286.50"></text></g><g><title>array_subscript (mapping.c:1539) (18 samples, 0.45%)</title><rect x="68" y="228" width="5" height="15" fill="rgb(241,96,22)"/><text x="71.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:516) (18 samples, 0.45%)</title><rect x="68" y="244" width="5" height="15" fill="rgb(212,95,5)"/><text x="71.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c:1938) (4 samples, 0.10%)</title><rect x="72" y="260" width="1" height="15" fill="rgb(252,210,35)"/><text x="75.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (4 samples, 0.10%)</title><rect x="72" y="276" width="1" height="15" fill="rgb(226,222,34)"/><text x="75.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (20 samples, 0.50%)</title><rect x="68" y="212" width="6" height="15" fill="rgb(220,20,10)"/><text x="71.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (4 samples, 0.10%)</title><rect x="74" y="228" width="2" height="15" fill="rgb(247,78,44)"/><text x="77.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (6 samples, 0.15%)</title><rect x="74" y="212" width="2" height="15" fill="rgb(223,129,20)"/><text x="77.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (6 samples, 0.15%)</title><rect x="76" y="212" width="2" height="15" fill="rgb(250,81,26)"/><text x="79.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (9 samples, 0.23%)</title><rect x="79" y="212" width="2" height="15" fill="rgb(216,224,22)"/><text x="82.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1584) (6 samples, 0.15%)</title><rect x="80" y="228" width="1" height="15" fill="rgb(242,26,35)"/><text x="83.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (4 samples, 0.10%)</title><rect x="80" y="244" width="1" height="15" fill="rgb(253,69,10)"/><text x="83.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (4 samples, 0.10%)</title><rect x="80" y="260" width="1" height="15" fill="rgb(241,157,39)"/><text x="83.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (5 samples, 0.12%)</title><rect x="85" y="228" width="1" height="15" fill="rgb(229,102,42)"/><text x="88.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (5 samples, 0.12%)</title><rect x="89" y="244" width="2" height="15" fill="rgb(249,87,28)"/><text x="92.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (7 samples, 0.17%)</title><rect x="91" y="244" width="2" height="15" fill="rgb(232,79,12)"/><text x="94.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (4 samples, 0.10%)</title><rect x="93" y="244" width="1" height="15" fill="rgb(251,60,35)"/><text x="96.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (7 samples, 0.17%)</title><rect x="95" y="244" width="2" height="15" fill="rgb(227,87,24)"/><text x="98.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (4 samples, 0.10%)</title><rect x="104" y="260" width="2" height="15" fill="rgb(246,201,10)"/><text x="107.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (54 samples, 1.35%)</title><rect x="106" y="260" width="16" height="15" fill="rgb(237,105,3)"/><text x="109.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (8 samples, 0.20%)</title><rect x="119" y="276" width="3" height="15" fill="rgb(237,13,36)"/><text x="122.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (4 samples, 0.10%)</title><rect x="134" y="308" width="1" height="15" fill="rgb(235,27,30)"/><text x="137.00" y="318.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (4 samples, 0.10%)</title><rect x="137" y="436" width="1" height="15" fill="rgb(236,37,30)"/><text x="140.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (4 samples, 0.10%)</title><rect x="137" y="452" width="1" height="15" fill="rgb(246,150,7)"/><text x="140.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.10%)</title><rect x="137" y="468" width="1" height="15" fill="rgb(210,127,6)"/><text x="140.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (5 samples, 0.12%)</title><rect x="137" y="404" width="2" height="15" fill="rgb(238,67,11)"/><text x="140.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (5 samples, 0.12%)</title><rect x="137" y="420" width="2" height="15" fill="rgb(237,164,51)"/><text x="140.00" y="430.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (11 samples, 0.28%)</title><rect x="136" y="340" width="4" height="15" fill="rgb(217,145,53)"/><text x="139.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (9 samples, 0.23%)</title><rect x="137" y="356" width="3" height="15" fill="rgb(205,150,19)"/><text x="140.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (8 samples, 0.20%)</title><rect x="137" y="372" width="3" height="15" fill="rgb(232,169,27)"/><text x="140.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (8 samples, 0.20%)</title><rect x="137" y="388" width="3" height="15" fill="rgb(217,142,1)"/><text x="140.00" y="398.50"></text></g><g><title>0x7fedf1e52d94 (libc-2.29.so) (91 samples, 2.27%)</title><rect x="140" y="388" width="27" height="15" fill="rgb(252,159,14)"/><text x="143.00" y="398.50">0..</text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (92 samples, 2.30%)</title><rect x="140" y="372" width="28" height="15" fill="rgb(243,165,19)"/><text x="143.00" y="382.50">r..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (118 samples, 2.95%)</title><rect x="135" y="308" width="35" height="15" fill="rgb(223,157,7)"/><text x="138.00" y="318.50">_r..</text></g><g><title>array_copy (methods.c:1133) (115 samples, 2.88%)</title><rect x="136" y="324" width="34" height="15" fill="rgb(219,139,3)"/><text x="139.00" y="334.50">ar..</text></g><g><title>PyArray_NewCopy (convert.c:560) (104 samples, 2.60%)</title><rect x="140" y="340" width="30" height="15" fill="rgb(250,157,47)"/><text x="143.00" y="350.50">Py..</text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (104 samples, 2.60%)</title><rect x="140" y="356" width="30" height="15" fill="rgb(229,116,9)"/><text x="143.00" y="366.50">Py..</text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (5 samples, 0.12%)</title><rect x="169" y="372" width="1" height="15" fill="rgb(238,205,41)"/><text x="172.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (7 samples, 0.17%)</title><rect x="174" y="340" width="2" height="15" fill="rgb(211,41,46)"/><text x="177.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (4 samples, 0.10%)</title><rect x="175" y="356" width="1" height="15" fill="rgb(209,182,16)"/><text x="178.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (5 samples, 0.12%)</title><rect x="177" y="388" width="2" height="15" fill="rgb(246,208,4)"/><text x="180.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (5 samples, 0.12%)</title><rect x="177" y="404" width="2" height="15" fill="rgb(210,110,54)"/><text x="180.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (5 samples, 0.12%)</title><rect x="177" y="420" width="2" height="15" fill="rgb(246,62,36)"/><text x="180.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.10%)</title><rect x="178" y="436" width="1" height="15" fill="rgb(210,117,7)"/><text x="181.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (4 samples, 0.10%)</title><rect x="179" y="388" width="1" height="15" fill="rgb(209,5,15)"/><text x="182.00" y="398.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (4 samples, 0.10%)</title><rect x="179" y="404" width="1" height="15" fill="rgb(222,47,3)"/><text x="182.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (10 samples, 0.25%)</title><rect x="177" y="356" width="3" height="15" fill="rgb(225,93,42)"/><text x="180.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (10 samples, 0.25%)</title><rect x="177" y="372" width="3" height="15" fill="rgb(222,93,36)"/><text x="180.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:593) (14 samples, 0.35%)</title><rect x="181" y="388" width="4" height="15" fill="rgb(234,30,18)"/><text x="184.00" y="398.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:595) (66 samples, 1.65%)</title><rect x="185" y="388" width="19" height="15" fill="rgb(238,26,25)"/><text x="188.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h:169) (66 samples, 1.65%)</title><rect x="185" y="404" width="19" height="15" fill="rgb(251,85,8)"/><text x="188.00" y="414.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (141 samples, 3.52%)</title><rect x="180" y="372" width="42" height="15" fill="rgb(253,228,3)"/><text x="183.00" y="382.50">tri..</text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:596) (60 samples, 1.50%)</title><rect x="204" y="388" width="18" height="15" fill="rgb(236,228,20)"/><text x="207.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (60 samples, 1.50%)</title><rect x="204" y="404" width="18" height="15" fill="rgb(235,191,48)"/><text x="207.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (146 samples, 3.65%)</title><rect x="180" y="356" width="43" height="15" fill="rgb(226,53,13)"/><text x="183.00" y="366.50">exec..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1355) (5 samples, 0.12%)</title><rect x="222" y="372" width="1" height="15" fill="rgb(209,201,47)"/><text x="225.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (157 samples, 3.92%)</title><rect x="177" y="340" width="47" height="15" fill="rgb(213,10,25)"/><text x="180.00" y="350.50">PyUF..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (171 samples, 4.28%)</title><rect x="174" y="324" width="50" height="15" fill="rgb(211,44,44)"/><text x="177.00" y="334.50">ufunc..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (184 samples, 4.60%)</title><rect x="170" y="308" width="55" height="15" fill="rgb(221,26,30)"/><text x="173.00" y="318.50">_run ..</text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (5 samples, 0.12%)</title><rect x="232" y="356" width="1" height="15" fill="rgb(230,114,16)"/><text x="235.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (10 samples, 0.25%)</title><rect x="237" y="372" width="3" height="15" fill="rgb(231,60,30)"/><text x="240.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (4 samples, 0.10%)</title><rect x="242" y="420" width="1" height="15" fill="rgb(254,88,11)"/><text x="245.00" y="430.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (6 samples, 0.15%)</title><rect x="242" y="388" width="1" height="15" fill="rgb(251,194,20)"/><text x="245.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (6 samples, 0.15%)</title><rect x="242" y="404" width="1" height="15" fill="rgb(222,6,51)"/><text x="245.00" y="414.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (8 samples, 0.20%)</title><rect x="243" y="404" width="3" height="15" fill="rgb(213,88,27)"/><text x="246.00" y="414.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (18 samples, 0.45%)</title><rect x="248" y="436" width="5" height="15" fill="rgb(242,35,12)"/><text x="251.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (18 samples, 0.45%)</title><rect x="248" y="452" width="5" height="15" fill="rgb(223,11,8)"/><text x="251.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (14 samples, 0.35%)</title><rect x="249" y="468" width="4" height="15" fill="rgb(217,209,17)"/><text x="252.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (13 samples, 0.33%)</title><rect x="250" y="484" width="3" height="15" fill="rgb(232,225,1)"/><text x="253.00" y="494.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:255) (5 samples, 0.12%)</title><rect x="256" y="468" width="1" height="15" fill="rgb(227,67,34)"/><text x="259.00" y="478.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c:3799) (4 samples, 0.10%)</title><rect x="256" y="484" width="1" height="15" fill="rgb(215,161,7)"/><text x="259.00" y="494.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (6 samples, 0.15%)</title><rect x="257" y="468" width="2" height="15" fill="rgb(212,30,16)"/><text x="260.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (19 samples, 0.47%)</title><rect x="253" y="436" width="6" height="15" fill="rgb(254,135,22)"/><text x="256.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (14 samples, 0.35%)</title><rect x="255" y="452" width="4" height="15" fill="rgb(248,51,0)"/><text x="258.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (15 samples, 0.38%)</title><rect x="259" y="436" width="4" height="15" fill="rgb(241,121,37)"/><text x="262.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3534) (7 samples, 0.17%)</title><rect x="265" y="452" width="2" height="15" fill="rgb(214,56,33)"/><text x="268.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3540) (7 samples, 0.17%)</title><rect x="268" y="452" width="2" height="15" fill="rgb(251,220,42)"/><text x="271.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1741) (6 samples, 0.15%)</title><rect x="271" y="468" width="2" height="15" fill="rgb(245,30,21)"/><text x="274.00" y="478.50"></text></g><g><title>FLOAT_add (loops.c.src:1742) (12 samples, 0.30%)</title><rect x="273" y="468" width="3" height="15" fill="rgb(246,53,24)"/><text x="276.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1662) (8 samples, 0.20%)</title><rect x="279" y="484" width="2" height="15" fill="rgb(246,15,19)"/><text x="282.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1686) (4 samples, 0.10%)</title><rect x="283" y="484" width="1" height="15" fill="rgb(238,29,48)"/><text x="286.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1690) (18 samples, 0.45%)</title><rect x="284" y="484" width="5" height="15" fill="rgb(234,72,48)"/><text x="287.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1693) (6 samples, 0.15%)</title><rect x="290" y="484" width="2" height="15" fill="rgb(237,30,45)"/><text x="293.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1694) (13 samples, 0.33%)</title><rect x="292" y="484" width="4" height="15" fill="rgb(216,115,2)"/><text x="295.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1695) (10 samples, 0.25%)</title><rect x="296" y="484" width="3" height="15" fill="rgb(207,104,6)"/><text x="299.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1696) (20 samples, 0.50%)</title><rect x="299" y="484" width="6" height="15" fill="rgb(229,37,35)"/><text x="302.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1698) (20 samples, 0.50%)</title><rect x="305" y="484" width="6" height="15" fill="rgb(253,89,48)"/><text x="308.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1699) (7 samples, 0.17%)</title><rect x="311" y="484" width="2" height="15" fill="rgb(218,6,17)"/><text x="314.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1700) (17 samples, 0.42%)</title><rect x="313" y="484" width="5" height="15" fill="rgb(254,36,21)"/><text x="316.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1704) (9 samples, 0.23%)</title><rect x="318" y="484" width="2" height="15" fill="rgb(217,140,42)"/><text x="321.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1705) (10 samples, 0.25%)</title><rect x="320" y="484" width="3" height="15" fill="rgb(217,100,39)"/><text x="323.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1708) (13 samples, 0.33%)</title><rect x="323" y="484" width="4" height="15" fill="rgb(214,65,26)"/><text x="326.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (194 samples, 4.85%)</title><rect x="276" y="468" width="58" height="15" fill="rgb(247,89,43)"/><text x="279.00" y="478.50">FLOAT_..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1709) (22 samples, 0.55%)</title><rect x="327" y="484" width="7" height="15" fill="rgb(218,181,36)"/><text x="330.00" y="494.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:194) (7 samples, 0.17%)</title><rect x="334" y="468" width="2" height="15" fill="rgb(245,135,51)"/><text x="337.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:229) (5 samples, 0.12%)</title><rect x="336" y="468" width="2" height="15" fill="rgb(213,11,42)"/><text x="339.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:244) (4 samples, 0.10%)</title><rect x="339" y="468" width="1" height="15" fill="rgb(207,119,3)"/><text x="342.00" y="478.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (245 samples, 6.12%)</title><rect x="270" y="452" width="72" height="15" fill="rgb(215,174,42)"/><text x="273.00" y="462.50">reduce_l..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:268) (5 samples, 0.12%)</title><rect x="341" y="468" width="1" height="15" fill="rgb(217,214,28)"/><text x="344.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (265 samples, 6.62%)</title><rect x="264" y="436" width="79" height="15" fill="rgb(213,177,36)"/><text x="267.00" y="446.50">PyUFunc_R..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (387 samples, 9.68%)</title><rect x="230" y="340" width="114" height="15" fill="rgb(232,140,35)"/><text x="233.00" y="350.50">array_implemen..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (373 samples, 9.32%)</title><rect x="234" y="356" width="110" height="15" fill="rgb(238,221,49)"/><text x="237.00" y="366.50">sum (numpy/co..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (351 samples, 8.78%)</title><rect x="240" y="372" width="104" height="15" fill="rgb(248,206,34)"/><text x="243.00" y="382.50">_wrapreducti..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (341 samples, 8.53%)</title><rect x="243" y="388" width="101" height="15" fill="rgb(251,142,49)"/><text x="246.00" y="398.50">ufunc_reduce..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (329 samples, 8.22%)</title><rect x="247" y="404" width="97" height="15" fill="rgb(217,137,15)"/><text x="250.00" y="414.50">PyUFunc_Gen..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (325 samples, 8.12%)</title><rect x="248" y="420" width="96" height="15" fill="rgb(233,127,38)"/><text x="251.00" y="430.50">PyUFunc_Red..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (733 samples, 18.32%)</title><rect x="128" y="276" width="216" height="15" fill="rgb(226,172,40)"/><text x="131.00" y="286.50">run (mlprodict/onnxrt/ops_cp..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (725 samples, 18.12%)</title><rect x="130" y="292" width="214" height="15" fill="rgb(218,176,14)"/><text x="133.00" y="302.50">run (mlprodict/onnxrt/ops_cp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (406 samples, 10.15%)</title><rect x="225" y="308" width="119" height="15" fill="rgb(232,1,42)"/><text x="228.00" y="318.50">_run (mlprodic..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (392 samples, 9.80%)</title><rect x="229" y="324" width="115" height="15" fill="rgb(223,204,27)"/><text x="232.00" y="334.50">sum (&lt;__array_..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (8 samples, 0.20%)</title><rect x="344" y="276" width="3" height="15" fill="rgb(225,205,10)"/><text x="347.00" y="286.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (4 samples, 0.10%)</title><rect x="353" y="372" width="2" height="15" fill="rgb(216,193,10)"/><text x="356.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (5 samples, 0.12%)</title><rect x="353" y="340" width="2" height="15" fill="rgb(219,71,4)"/><text x="356.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (5 samples, 0.12%)</title><rect x="353" y="356" width="2" height="15" fill="rgb(222,54,12)"/><text x="356.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (7 samples, 0.17%)</title><rect x="359" y="388" width="2" height="15" fill="rgb(231,106,20)"/><text x="362.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (22 samples, 0.55%)</title><rect x="356" y="372" width="6" height="15" fill="rgb(248,127,4)"/><text x="359.00" y="382.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (23 samples, 0.57%)</title><rect x="364" y="420" width="7" height="15" fill="rgb(225,26,45)"/><text x="367.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (29 samples, 0.72%)</title><rect x="362" y="372" width="9" height="15" fill="rgb(244,12,34)"/><text x="365.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (27 samples, 0.68%)</title><rect x="363" y="388" width="8" height="15" fill="rgb(249,196,11)"/><text x="366.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (26 samples, 0.65%)</title><rect x="363" y="404" width="8" height="15" fill="rgb(248,29,24)"/><text x="366.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:600) (8 samples, 0.20%)</title><rect x="372" y="420" width="3" height="15" fill="rgb(213,34,31)"/><text x="375.00" y="430.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:603) (92 samples, 2.30%)</title><rect x="375" y="420" width="27" height="15" fill="rgb(233,37,39)"/><text x="378.00" y="430.50">s..</text></g><g><title>_mm_sub_ps (xmmintrin.h:163) (92 samples, 2.30%)</title><rect x="375" y="436" width="27" height="15" fill="rgb(253,71,19)"/><text x="378.00" y="446.50">_..</text></g><g><title>FLOAT_subtract (loops.c.src:1755) (165 samples, 4.12%)</title><rect x="372" y="388" width="49" height="15" fill="rgb(225,100,40)"/><text x="375.00" y="398.50">FLOA..</text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (165 samples, 4.12%)</title><rect x="372" y="404" width="49" height="15" fill="rgb(229,164,15)"/><text x="375.00" y="414.50">run_..</text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:604) (65 samples, 1.62%)</title><rect x="402" y="420" width="19" height="15" fill="rgb(220,23,11)"/><text x="405.00" y="430.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (65 samples, 1.62%)</title><rect x="402" y="436" width="19" height="15" fill="rgb(245,48,10)"/><text x="405.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (6 samples, 0.15%)</title><rect x="423" y="420" width="2" height="15" fill="rgb(209,93,4)"/><text x="426.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (8 samples, 0.20%)</title><rect x="425" y="420" width="3" height="15" fill="rgb(239,135,12)"/><text x="428.00" y="430.50"></text></g><g><title>0x7fedf1e52f23 (libc-2.29.so) (4 samples, 0.10%)</title><rect x="433" y="436" width="2" height="15" fill="rgb(223,168,30)"/><text x="436.00" y="446.50"></text></g><g><title>0x7fedf1e52f36 (libc-2.29.so) (9 samples, 0.23%)</title><rect x="435" y="436" width="3" height="15" fill="rgb(239,162,31)"/><text x="438.00" y="446.50"></text></g><g><title>0x7fedf1e52f3a (libc-2.29.so) (5 samples, 0.12%)</title><rect x="438" y="436" width="1" height="15" fill="rgb(207,153,33)"/><text x="441.00" y="446.50"></text></g><g><title>0x7fedf1e52f3e (libc-2.29.so) (4 samples, 0.10%)</title><rect x="439" y="436" width="1" height="15" fill="rgb(252,67,36)"/><text x="442.00" y="446.50"></text></g><g><title>0x7fedf1e52f58 (libc-2.29.so) (6 samples, 0.15%)</title><rect x="443" y="436" width="2" height="15" fill="rgb(212,18,6)"/><text x="446.00" y="446.50"></text></g><g><title>0x7fedf1e52f6a (libc-2.29.so) (5 samples, 0.12%)</title><rect x="446" y="436" width="1" height="15" fill="rgb(228,199,4)"/><text x="449.00" y="446.50"></text></g><g><title>0x7fedf1e52f6e (libc-2.29.so) (4 samples, 0.10%)</title><rect x="447" y="436" width="1" height="15" fill="rgb(227,77,42)"/><text x="450.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (79 samples, 1.98%)</title><rect x="428" y="420" width="23" height="15" fill="rgb(245,81,52)"/><text x="431.00" y="430.50">P..</text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src:330) (4 samples, 0.10%)</title><rect x="450" y="436" width="1" height="15" fill="rgb(215,72,48)"/><text x="453.00" y="446.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (99 samples, 2.48%)</title><rect x="423" y="404" width="30" height="15" fill="rgb(243,30,47)"/><text x="426.00" y="414.50">np..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (273 samples, 6.83%)</title><rect x="372" y="372" width="81" height="15" fill="rgb(236,146,44)"/><text x="375.00" y="382.50">iterator_..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (103 samples, 2.58%)</title><rect x="423" y="388" width="30" height="15" fill="rgb(243,226,36)"/><text x="426.00" y="398.50">np..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (334 samples, 8.35%)</title><rect x="356" y="356" width="98" height="15" fill="rgb(214,165,20)"/><text x="359.00" y="366.50">execute_leg..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (4 samples, 0.10%)</title><rect x="453" y="372" width="1" height="15" fill="rgb(209,2,54)"/><text x="456.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (336 samples, 8.40%)</title><rect x="356" y="340" width="99" height="15" fill="rgb(232,105,48)"/><text x="359.00" y="350.50">PyUFunc_Gen..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (351 samples, 8.78%)</title><rect x="352" y="324" width="104" height="15" fill="rgb(214,48,45)"/><text x="355.00" y="334.50">ufunc_generi..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (365 samples, 9.12%)</title><rect x="349" y="292" width="107" height="15" fill="rgb(214,159,10)"/><text x="352.00" y="302.50">run (mlprodic..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (359 samples, 8.97%)</title><rect x="351" y="308" width="105" height="15" fill="rgb(250,128,35)"/><text x="354.00" y="318.50">_run (mlprod..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (374 samples, 9.35%)</title><rect x="347" y="276" width="110" height="15" fill="rgb(250,145,27)"/><text x="350.00" y="286.50">run (mlprodic..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,144 samples, 28.60%)</title><rect x="122" y="260" width="337" height="15" fill="rgb(234,205,40)"/><text x="125.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (7 samples, 0.17%)</title><rect x="457" y="276" width="2" height="15" fill="rgb(241,157,51)"/><text x="460.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (9 samples, 0.23%)</title><rect x="459" y="260" width="3" height="15" fill="rgb(232,201,2)"/><text x="462.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (12 samples, 0.30%)</title><rect x="462" y="260" width="3" height="15" fill="rgb(248,42,16)"/><text x="465.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (23 samples, 0.57%)</title><rect x="466" y="260" width="7" height="15" fill="rgb(221,224,23)"/><text x="469.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,280 samples, 32.00%)</title><rect x="97" y="244" width="377" height="15" fill="rgb(224,95,7)"/><text x="100.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_infere..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (6 samples, 0.15%)</title><rect x="473" y="260" width="1" height="15" fill="rgb(225,127,0)"/><text x="476.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (10 samples, 0.25%)</title><rect x="474" y="244" width="3" height="15" fill="rgb(241,96,7)"/><text x="477.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (5 samples, 0.12%)</title><rect x="476" y="260" width="1" height="15" fill="rgb(247,115,9)"/><text x="479.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (1,343 samples, 33.58%)</title><rect x="81" y="212" width="397" height="15" fill="rgb(238,94,49)"/><text x="84.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,325 samples, 33.12%)</title><rect x="87" y="228" width="391" height="15" fill="rgb(228,190,42)"/><text x="90.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (9 samples, 0.23%)</title><rect x="478" y="212" width="2" height="15" fill="rgb(253,209,8)"/><text x="481.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (6 samples, 0.15%)</title><rect x="479" y="228" width="1" height="15" fill="rgb(234,216,26)"/><text x="482.00" y="238.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (7 samples, 0.17%)</title><rect x="485" y="260" width="2" height="15" fill="rgb(237,91,10)"/><text x="488.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (15 samples, 0.38%)</title><rect x="487" y="260" width="4" height="15" fill="rgb(243,228,17)"/><text x="490.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (11 samples, 0.28%)</title><rect x="488" y="276" width="3" height="15" fill="rgb(207,128,38)"/><text x="491.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (49 samples, 1.23%)</title><rect x="484" y="244" width="14" height="15" fill="rgb(243,152,27)"/><text x="487.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (18 samples, 0.45%)</title><rect x="493" y="260" width="5" height="15" fill="rgb(252,82,18)"/><text x="496.00" y="270.50"></text></g><g><title>array_reshape (methods.c:210) (7 samples, 0.17%)</title><rect x="496" y="276" width="2" height="15" fill="rgb(242,180,25)"/><text x="499.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (7 samples, 0.17%)</title><rect x="496" y="292" width="2" height="15" fill="rgb(214,151,32)"/><text x="499.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (6 samples, 0.15%)</title><rect x="497" y="308" width="1" height="15" fill="rgb(225,51,42)"/><text x="500.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (61 samples, 1.52%)</title><rect x="481" y="212" width="18" height="15" fill="rgb(238,223,18)"/><text x="484.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (53 samples, 1.32%)</title><rect x="483" y="228" width="16" height="15" fill="rgb(210,175,1)"/><text x="486.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (6 samples, 0.15%)</title><rect x="499" y="212" width="1" height="15" fill="rgb(243,223,17)"/><text x="502.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (6 samples, 0.15%)</title><rect x="499" y="228" width="1" height="15" fill="rgb(214,149,48)"/><text x="502.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.15%)</title><rect x="499" y="244" width="1" height="15" fill="rgb(242,196,50)"/><text x="502.00" y="254.50"></text></g><g><title>_new_argsortlike (item_selection.c:1048) (10 samples, 0.25%)</title><rect x="502" y="356" width="3" height="15" fill="rgb(215,95,29)"/><text x="505.00" y="366.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src:1915) (10 samples, 0.25%)</title><rect x="502" y="372" width="3" height="15" fill="rgb(241,130,22)"/><text x="505.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c:319) (10 samples, 0.25%)</title><rect x="502" y="388" width="3" height="15" fill="rgb(206,170,32)"/><text x="505.00" y="398.50"></text></g><g><title>adumb_select_float (selection.c.src:257) (8 samples, 0.20%)</title><rect x="507" y="388" width="2" height="15" fill="rgb(216,78,28)"/><text x="510.00" y="398.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (57 samples, 1.43%)</title><rect x="502" y="244" width="17" height="15" fill="rgb(241,32,36)"/><text x="505.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (57 samples, 1.43%)</title><rect x="502" y="260" width="17" height="15" fill="rgb(247,224,37)"/><text x="505.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (57 samples, 1.43%)</title><rect x="502" y="276" width="17" height="15" fill="rgb(240,57,23)"/><text x="505.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (57 samples, 1.43%)</title><rect x="502" y="292" width="17" height="15" fill="rgb(238,220,13)"/><text x="505.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (57 samples, 1.43%)</title><rect x="502" y="308" width="17" height="15" fill="rgb(241,3,11)"/><text x="505.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (57 samples, 1.43%)</title><rect x="502" y="324" width="17" height="15" fill="rgb(215,108,54)"/><text x="505.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (57 samples, 1.43%)</title><rect x="502" y="340" width="17" height="15" fill="rgb(246,71,24)"/><text x="505.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (41 samples, 1.02%)</title><rect x="507" y="356" width="12" height="15" fill="rgb(240,161,10)"/><text x="510.00" y="366.50"></text></g><g><title>aintroselect_float (selection.c.src:322) (41 samples, 1.02%)</title><rect x="507" y="372" width="12" height="15" fill="rgb(251,82,45)"/><text x="510.00" y="382.50"></text></g><g><title>adumb_select_float (selection.c.src:258) (33 samples, 0.82%)</title><rect x="509" y="388" width="10" height="15" fill="rgb(219,130,54)"/><text x="512.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (30 samples, 0.75%)</title><rect x="510" y="404" width="9" height="15" fill="rgb(235,55,35)"/><text x="513.00" y="414.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (4 samples, 0.10%)</title><rect x="519" y="260" width="1" height="15" fill="rgb(208,135,30)"/><text x="522.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.10%)</title><rect x="519" y="276" width="1" height="15" fill="rgb(221,75,7)"/><text x="522.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (4 samples, 0.10%)</title><rect x="519" y="292" width="1" height="15" fill="rgb(244,82,49)"/><text x="522.00" y="302.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (9 samples, 0.23%)</title><rect x="519" y="244" width="3" height="15" fill="rgb(250,41,8)"/><text x="522.00" y="254.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (71 samples, 1.77%)</title><rect x="501" y="228" width="21" height="15" fill="rgb(228,141,4)"/><text x="504.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (72 samples, 1.80%)</title><rect x="501" y="212" width="22" height="15" fill="rgb(206,134,14)"/><text x="504.00" y="222.50">_..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (1,552 samples, 38.80%)</title><rect x="66" y="196" width="458" height="15" fill="rgb(226,0,45)"/><text x="69.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py:29) (4 samples, 0.10%)</title><rect x="525" y="228" width="1" height="15" fill="rgb(225,46,21)"/><text x="528.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py:19) (9 samples, 0.23%)</title><rect x="526" y="228" width="2" height="15" fill="rgb(254,137,52)"/><text x="529.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (9 samples, 0.23%)</title><rect x="526" y="244" width="2" height="15" fill="rgb(207,68,35)"/><text x="529.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (9 samples, 0.23%)</title><rect x="526" y="260" width="2" height="15" fill="rgb(237,181,19)"/><text x="529.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (9 samples, 0.23%)</title><rect x="526" y="276" width="2" height="15" fill="rgb(238,87,49)"/><text x="529.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (9 samples, 0.23%)</title><rect x="526" y="292" width="2" height="15" fill="rgb(240,98,6)"/><text x="529.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src:1584) (9 samples, 0.23%)</title><rect x="526" y="308" width="2" height="15" fill="rgb(247,52,22)"/><text x="529.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src:195) (9 samples, 0.23%)</title><rect x="526" y="324" width="2" height="15" fill="rgb(252,26,31)"/><text x="529.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src:1005) (9 samples, 0.23%)</title><rect x="526" y="340" width="2" height="15" fill="rgb(228,74,24)"/><text x="529.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (9 samples, 0.23%)</title><rect x="526" y="356" width="2" height="15" fill="rgb(238,38,38)"/><text x="529.00" y="366.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,568 samples, 39.20%)</title><rect x="66" y="180" width="463" height="15" fill="rgb(229,26,48)"/><text x="69.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (15 samples, 0.38%)</title><rect x="524" y="196" width="5" height="15" fill="rgb(247,166,34)"/><text x="527.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (15 samples, 0.38%)</title><rect x="524" y="212" width="5" height="15" fill="rgb(231,103,47)"/><text x="527.00" y="222.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,572 samples, 39.30%)</title><rect x="66" y="164" width="463" height="15" fill="rgb(226,223,11)"/><text x="69.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:61) (1,574 samples, 39.35%)</title><rect x="65" y="52" width="465" height="15" fill="rgb(224,34,41)"/><text x="68.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmb..</text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:60) (1,574 samples, 39.35%)</title><rect x="65" y="68" width="465" height="15" fill="rgb(239,41,8)"/><text x="68.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algori..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:37) (1,574 samples, 39.35%)</title><rect x="65" y="84" width="465" height="15" fill="rgb(235,225,38)"/><text x="68.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algor..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:31) (1,574 samples, 39.35%)</title><rect x="65" y="100" width="465" height="15" fill="rgb(236,3,42)"/><text x="68.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbr..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (1,574 samples, 39.35%)</title><rect x="65" y="116" width="465" height="15" fill="rgb(251,99,33)"/><text x="68.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (1,574 samples, 39.35%)</title><rect x="65" y="132" width="465" height="15" fill="rgb(216,6,54)"/><text x="68.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,574 samples, 39.35%)</title><rect x="65" y="148" width="465" height="15" fill="rgb(253,101,49)"/><text x="68.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.10%)</title><rect x="533" y="452" width="2" height="15" fill="rgb(234,86,37)"/><text x="536.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.10%)</title><rect x="533" y="468" width="2" height="15" fill="rgb(209,72,45)"/><text x="536.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.12%)</title><rect x="535" y="452" width="2" height="15" fill="rgb(220,185,38)"/><text x="538.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.12%)</title><rect x="535" y="468" width="2" height="15" fill="rgb(216,217,32)"/><text x="538.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.30%)</title><rect x="533" y="436" width="4" height="15" fill="rgb(223,77,16)"/><text x="536.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.10%)</title><rect x="537" y="436" width="1" height="15" fill="rgb(223,91,47)"/><text x="540.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.10%)</title><rect x="537" y="452" width="1" height="15" fill="rgb(212,15,12)"/><text x="540.00" y="462.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (116 samples, 2.90%)</title><rect x="540" y="436" width="34" height="15" fill="rgb(248,84,34)"/><text x="543.00" y="446.50">on..</text></g><g><title>0x7fedf1e52d94 (libc-2.29.so) (116 samples, 2.90%)</title><rect x="540" y="452" width="34" height="15" fill="rgb(213,199,39)"/><text x="543.00" y="462.50">0x..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (63 samples, 1.57%)</title><rect x="1048" y="468" width="19" height="15" fill="rgb(205,64,28)"/><text x="1051.00" y="478.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,588 samples, 39.70%)</title><rect x="599" y="452" width="469" height="15" fill="rgb(231,118,0)"/><text x="602.00" y="462.50">onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxrunti..</text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,672 samples, 41.80%)</title><rect x="575" y="436" width="493" height="15" fill="rgb(218,187,38)"/><text x="578.00" y="446.50">onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnx..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (218 samples, 5.45%)</title><rect x="1068" y="468" width="65" height="15" fill="rgb(207,144,41)"/><text x="1071.00" y="478.50">onnxrun..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (42 samples, 1.05%)</title><rect x="1120" y="484" width="13" height="15" fill="rgb(216,19,35)"/><text x="1123.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.12%)</title><rect x="1135" y="500" width="2" height="15" fill="rgb(242,218,48)"/><text x="1138.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (5 samples, 0.12%)</title><rect x="1135" y="516" width="2" height="15" fill="rgb(210,224,8)"/><text x="1138.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.10%)</title><rect x="1136" y="532" width="1" height="15" fill="rgb(232,56,37)"/><text x="1139.00" y="542.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.28%)</title><rect x="1134" y="468" width="3" height="15" fill="rgb(229,86,52)"/><text x="1137.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.28%)</title><rect x="1134" y="484" width="3" height="15" fill="rgb(246,109,48)"/><text x="1137.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,056 samples, 51.40%)</title><rect x="531" y="340" width="607" height="15" fill="rgb(231,141,1)"/><text x="534.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,056 samples, 51.40%)</title><rect x="531" y="356" width="607" height="15" fill="rgb(253,124,40)"/><text x="534.00" y="366.50">onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,055 samples, 51.38%)</title><rect x="531" y="372" width="607" height="15" fill="rgb(232,175,25)"/><text x="534.00" y="382.50">onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_s..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,050 samples, 51.25%)</title><rect x="533" y="388" width="605" height="15" fill="rgb(219,177,22)"/><text x="536.00" y="398.50">onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,050 samples, 51.25%)</title><rect x="533" y="404" width="605" height="15" fill="rgb(252,77,0)"/><text x="536.00" y="414.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.s..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,049 samples, 51.23%)</title><rect x="533" y="420" width="605" height="15" fill="rgb(239,142,12)"/><text x="536.00" y="430.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_sta..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (235 samples, 5.88%)</title><rect x="1068" y="436" width="70" height="15" fill="rgb(220,32,12)"/><text x="1071.00" y="446.50">onnxrun..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (235 samples, 5.88%)</title><rect x="1068" y="452" width="70" height="15" fill="rgb(224,149,2)"/><text x="1071.00" y="462.50">onnxrun..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.15%)</title><rect x="1138" y="340" width="1" height="15" fill="rgb(248,189,20)"/><text x="1141.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (6 samples, 0.15%)</title><rect x="1170" y="372" width="2" height="15" fill="rgb(243,188,25)"/><text x="1173.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.15%)</title><rect x="1170" y="388" width="2" height="15" fill="rgb(254,185,2)"/><text x="1173.00" y="398.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (115 samples, 2.88%)</title><rect x="1139" y="340" width="34" height="15" fill="rgb(247,145,40)"/><text x="1142.00" y="350.50">on..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (115 samples, 2.88%)</title><rect x="1139" y="356" width="34" height="15" fill="rgb(210,43,41)"/><text x="1142.00" y="366.50">on..</text></g><g><title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.10%)</title><rect x="1172" y="372" width="1" height="15" fill="rgb(237,137,16)"/><text x="1175.00" y="382.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (2,234 samples, 55.85%)</title><rect x="530" y="132" width="659" height="15" fill="rgb(241,210,31)"/><text x="533.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,234 samples, 55.85%)</title><rect x="530" y="148" width="659" height="15" fill="rgb(225,79,53)"/><text x="533.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (2,234 samples, 55.85%)</title><rect x="530" y="164" width="659" height="15" fill="rgb(211,161,2)"/><text x="533.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (2,234 samples, 55.85%)</title><rect x="530" y="180" width="659" height="15" fill="rgb(253,158,16)"/><text x="533.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:136) (2,234 samples, 55.85%)</title><rect x="530" y="196" width="659" height="15" fill="rgb(216,77,48)"/><text x="533.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,233 samples, 55.83%)</title><rect x="530" y="212" width="659" height="15" fill="rgb(242,220,6)"/><text x="533.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,233 samples, 55.83%)</title><rect x="530" y="228" width="659" height="15" fill="rgb(207,9,20)"/><text x="533.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::mod..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,233 samples, 55.83%)</title><rect x="530" y="244" width="659" height="15" fill="rgb(245,224,38)"/><text x="533.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSes..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,233 samples, 55.83%)</title><rect x="530" y="260" width="659" height="15" fill="rgb(242,155,52)"/><text x="533.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,233 samples, 55.83%)</title><rect x="530" y="276" width="659" height="15" fill="rgb(247,13,52)"/><text x="533.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,231 samples, 55.77%)</title><rect x="531" y="292" width="658" height="15" fill="rgb(225,77,50)"/><text x="534.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,231 samples, 55.77%)</title><rect x="531" y="308" width="658" height="15" fill="rgb(250,159,51)"/><text x="534.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,231 samples, 55.77%)</title><rect x="531" y="324" width="658" height="15" fill="rgb(252,151,42)"/><text x="534.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (54 samples, 1.35%)</title><rect x="1173" y="340" width="16" height="15" fill="rgb(214,123,48)"/><text x="1176.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (54 samples, 1.35%)</title><rect x="1173" y="356" width="16" height="15" fill="rgb(235,178,49)"/><text x="1176.00" y="366.50"></text></g><g><title>all (4,000 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(229,155,38)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:68) (2,237 samples, 55.92%)</title><rect x="530" y="52" width="660" height="15" fill="rgb(251,218,32)"/><text x="533.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:67) (2,237 samples, 55.92%)</title><rect x="530" y="68" width="660" height="15" fill="rgb(232,43,44)"/><text x="533.00" y="78.50">profile_ort (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:37) (2,236 samples, 55.90%)</title><rect x="530" y="84" width="660" height="15" fill="rgb(226,131,6)"/><text x="533.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:31) (2,236 samples, 55.90%)</title><rect x="530" y="100" width="660" height="15" fill="rgb(245,170,49)"/><text x="533.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (2,236 samples, 55.90%)</title><rect x="530" y="116" width="660" height="15" fill="rgb(242,153,26)"/><text x="533.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g></g></svg>