<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1574" onload="init(evt)" viewBox="0 0 1200 1574" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1574" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1557.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1557.00"> </text><g id="frames"><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (2 samples, 0.13%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(212,15,17)"/><text x="13.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (2 samples, 0.13%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(224,94,23)"/><text x="13.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (2 samples, 0.13%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(238,228,0)"/><text x="13.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (2 samples, 0.13%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(247,1,25)"/><text x="13.00" y="910.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (4 samples, 0.26%)</title><rect x="10" y="820" width="3" height="15" fill="rgb(247,151,2)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (4 samples, 0.26%)</title><rect x="10" y="836" width="3" height="15" fill="rgb(207,137,16)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (2 samples, 0.13%)</title><rect x="11" y="852" width="2" height="15" fill="rgb(226,196,13)"/><text x="14.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (2 samples, 0.13%)</title><rect x="11" y="868" width="2" height="15" fill="rgb(212,28,11)"/><text x="14.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2061) (2 samples, 0.13%)</title><rect x="11" y="884" width="2" height="15" fill="rgb(222,173,5)"/><text x="14.00" y="894.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py:2034) (2 samples, 0.13%)</title><rect x="11" y="900" width="2" height="15" fill="rgb(209,34,41)"/><text x="14.00" y="910.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py:2) (5 samples, 0.33%)</title><rect x="10" y="148" width="3" height="15" fill="rgb(208,69,28)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.33%)</title><rect x="10" y="164" width="3" height="15" fill="rgb(213,99,9)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.33%)</title><rect x="10" y="180" width="3" height="15" fill="rgb(228,80,28)"/><text x="13.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.33%)</title><rect x="10" y="196" width="3" height="15" fill="rgb(213,100,15)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.33%)</title><rect x="10" y="212" width="3" height="15" fill="rgb(208,117,15)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.33%)</title><rect x="10" y="228" width="3" height="15" fill="rgb(227,205,7)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.33%)</title><rect x="10" y="244" width="3" height="15" fill="rgb(211,32,29)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.33%)</title><rect x="10" y="260" width="3" height="15" fill="rgb(236,151,8)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.33%)</title><rect x="10" y="276" width="3" height="15" fill="rgb(225,82,20)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (5 samples, 0.33%)</title><rect x="10" y="292" width="3" height="15" fill="rgb(221,10,52)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.33%)</title><rect x="10" y="308" width="3" height="15" fill="rgb(223,64,46)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.33%)</title><rect x="10" y="324" width="3" height="15" fill="rgb(214,0,48)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.33%)</title><rect x="10" y="340" width="3" height="15" fill="rgb(246,62,32)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.33%)</title><rect x="10" y="356" width="3" height="15" fill="rgb(235,177,11)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.33%)</title><rect x="10" y="372" width="3" height="15" fill="rgb(231,109,28)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (5 samples, 0.33%)</title><rect x="10" y="388" width="3" height="15" fill="rgb(250,67,35)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.33%)</title><rect x="10" y="404" width="3" height="15" fill="rgb(248,221,34)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.33%)</title><rect x="10" y="420" width="3" height="15" fill="rgb(209,101,7)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.33%)</title><rect x="10" y="436" width="3" height="15" fill="rgb(230,129,17)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.33%)</title><rect x="10" y="452" width="3" height="15" fill="rgb(246,36,1)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.33%)</title><rect x="10" y="468" width="3" height="15" fill="rgb(237,93,6)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (5 samples, 0.33%)</title><rect x="10" y="484" width="3" height="15" fill="rgb(213,196,40)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.33%)</title><rect x="10" y="500" width="3" height="15" fill="rgb(227,75,10)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.33%)</title><rect x="10" y="516" width="3" height="15" fill="rgb(213,203,0)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.33%)</title><rect x="10" y="532" width="3" height="15" fill="rgb(251,31,3)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.33%)</title><rect x="10" y="548" width="3" height="15" fill="rgb(213,102,48)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.33%)</title><rect x="10" y="564" width="3" height="15" fill="rgb(240,145,23)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (5 samples, 0.33%)</title><rect x="10" y="580" width="3" height="15" fill="rgb(232,151,20)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.33%)</title><rect x="10" y="596" width="3" height="15" fill="rgb(214,39,54)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.33%)</title><rect x="10" y="612" width="3" height="15" fill="rgb(235,176,23)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.33%)</title><rect x="10" y="628" width="3" height="15" fill="rgb(233,68,16)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.33%)</title><rect x="10" y="644" width="3" height="15" fill="rgb(221,28,0)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.33%)</title><rect x="10" y="660" width="3" height="15" fill="rgb(254,109,22)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.33%)</title><rect x="10" y="676" width="3" height="15" fill="rgb(249,20,29)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.33%)</title><rect x="10" y="692" width="3" height="15" fill="rgb(224,217,38)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.33%)</title><rect x="10" y="708" width="3" height="15" fill="rgb(236,114,26)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (5 samples, 0.33%)</title><rect x="10" y="724" width="3" height="15" fill="rgb(236,128,29)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.33%)</title><rect x="10" y="740" width="3" height="15" fill="rgb(227,51,10)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.33%)</title><rect x="10" y="756" width="3" height="15" fill="rgb(208,214,51)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.33%)</title><rect x="10" y="772" width="3" height="15" fill="rgb(243,15,3)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.33%)</title><rect x="10" y="788" width="3" height="15" fill="rgb(218,128,25)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.33%)</title><rect x="10" y="804" width="3" height="15" fill="rgb(224,212,23)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py:4) (2 samples, 0.13%)</title><rect x="13" y="148" width="2" height="15" fill="rgb(214,158,15)"/><text x="16.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.13%)</title><rect x="13" y="164" width="2" height="15" fill="rgb(233,205,18)"/><text x="16.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.13%)</title><rect x="13" y="180" width="2" height="15" fill="rgb(241,35,16)"/><text x="16.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.13%)</title><rect x="13" y="196" width="2" height="15" fill="rgb(241,139,40)"/><text x="16.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.13%)</title><rect x="13" y="212" width="2" height="15" fill="rgb(240,190,39)"/><text x="16.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.13%)</title><rect x="13" y="228" width="2" height="15" fill="rgb(252,222,5)"/><text x="16.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (2 samples, 0.13%)</title><rect x="15" y="244" width="1" height="15" fill="rgb(208,31,1)"/><text x="18.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.13%)</title><rect x="15" y="260" width="1" height="15" fill="rgb(213,68,39)"/><text x="18.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.13%)</title><rect x="15" y="276" width="1" height="15" fill="rgb(217,130,7)"/><text x="18.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.13%)</title><rect x="15" y="292" width="1" height="15" fill="rgb(236,24,41)"/><text x="18.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.13%)</title><rect x="15" y="308" width="1" height="15" fill="rgb(238,222,7)"/><text x="18.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.13%)</title><rect x="15" y="324" width="1" height="15" fill="rgb(222,130,9)"/><text x="18.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (2 samples, 0.13%)</title><rect x="15" y="340" width="1" height="15" fill="rgb(247,108,10)"/><text x="18.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.13%)</title><rect x="15" y="356" width="1" height="15" fill="rgb(236,129,28)"/><text x="18.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.13%)</title><rect x="15" y="372" width="1" height="15" fill="rgb(248,191,29)"/><text x="18.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.13%)</title><rect x="15" y="388" width="1" height="15" fill="rgb(248,163,49)"/><text x="18.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.13%)</title><rect x="15" y="404" width="1" height="15" fill="rgb(222,26,12)"/><text x="18.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.13%)</title><rect x="15" y="420" width="1" height="15" fill="rgb(239,147,6)"/><text x="18.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.13%)</title><rect x="15" y="436" width="1" height="15" fill="rgb(238,19,30)"/><text x="18.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.13%)</title><rect x="15" y="452" width="1" height="15" fill="rgb(216,37,13)"/><text x="18.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.13%)</title><rect x="15" y="468" width="1" height="15" fill="rgb(250,187,32)"/><text x="18.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (3 samples, 0.20%)</title><rect x="16" y="436" width="3" height="15" fill="rgb(222,168,7)"/><text x="19.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.20%)</title><rect x="16" y="452" width="3" height="15" fill="rgb(223,70,50)"/><text x="19.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.20%)</title><rect x="16" y="468" width="3" height="15" fill="rgb(216,158,30)"/><text x="19.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.20%)</title><rect x="16" y="484" width="3" height="15" fill="rgb(234,204,5)"/><text x="19.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.20%)</title><rect x="16" y="500" width="3" height="15" fill="rgb(239,25,39)"/><text x="19.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.20%)</title><rect x="16" y="516" width="3" height="15" fill="rgb(242,124,30)"/><text x="19.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (3 samples, 0.20%)</title><rect x="16" y="532" width="3" height="15" fill="rgb(254,13,5)"/><text x="19.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.20%)</title><rect x="16" y="548" width="3" height="15" fill="rgb(243,70,17)"/><text x="19.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.20%)</title><rect x="16" y="564" width="3" height="15" fill="rgb(233,4,35)"/><text x="19.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.20%)</title><rect x="16" y="580" width="3" height="15" fill="rgb(221,208,38)"/><text x="19.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.20%)</title><rect x="16" y="596" width="3" height="15" fill="rgb(246,138,49)"/><text x="19.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.20%)</title><rect x="16" y="612" width="3" height="15" fill="rgb(220,75,15)"/><text x="19.00" y="622.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:10) (2 samples, 0.13%)</title><rect x="19" y="1108" width="1" height="15" fill="rgb(239,160,44)"/><text x="22.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.13%)</title><rect x="19" y="1124" width="1" height="15" fill="rgb(221,207,25)"/><text x="22.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.13%)</title><rect x="19" y="1140" width="1" height="15" fill="rgb(240,109,29)"/><text x="22.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.13%)</title><rect x="19" y="1156" width="1" height="15" fill="rgb(229,72,10)"/><text x="22.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.13%)</title><rect x="19" y="1172" width="1" height="15" fill="rgb(228,156,39)"/><text x="22.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.13%)</title><rect x="19" y="1188" width="1" height="15" fill="rgb(218,185,40)"/><text x="22.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py:27) (2 samples, 0.13%)</title><rect x="19" y="1204" width="1" height="15" fill="rgb(236,52,19)"/><text x="22.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.13%)</title><rect x="19" y="1220" width="1" height="15" fill="rgb(228,113,25)"/><text x="22.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.13%)</title><rect x="19" y="1236" width="1" height="15" fill="rgb(220,9,2)"/><text x="22.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.13%)</title><rect x="19" y="1252" width="1" height="15" fill="rgb(240,104,10)"/><text x="22.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.13%)</title><rect x="19" y="1268" width="1" height="15" fill="rgb(245,5,20)"/><text x="22.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.13%)</title><rect x="19" y="1284" width="1" height="15" fill="rgb(248,112,30)"/><text x="22.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_container.py:70) (2 samples, 0.13%)</title><rect x="19" y="1300" width="1" height="15" fill="rgb(241,126,45)"/><text x="22.00" y="1310.50"></text></g><g><title>_get_operation_list (skl2onnx/common/_container.py:49) (2 samples, 0.13%)</title><rect x="19" y="1316" width="1" height="15" fill="rgb(238,12,49)"/><text x="22.00" y="1326.50"></text></g><g><title>getsource (inspect.py:973) (2 samples, 0.13%)</title><rect x="19" y="1332" width="1" height="15" fill="rgb(247,39,4)"/><text x="22.00" y="1342.50"></text></g><g><title>getsourcelines (inspect.py:965) (2 samples, 0.13%)</title><rect x="19" y="1348" width="1" height="15" fill="rgb(217,54,17)"/><text x="22.00" y="1358.50"></text></g><g><title>getblock (inspect.py:940) (2 samples, 0.13%)</title><rect x="19" y="1364" width="1" height="15" fill="rgb(205,55,49)"/><text x="22.00" y="1374.50"></text></g><g><title>_tokenize (tokenize.py:583) (2 samples, 0.13%)</title><rect x="19" y="1380" width="1" height="15" fill="rgb(221,7,29)"/><text x="22.00" y="1390.50"></text></g><g><title>_compile (tokenize.py:148) (2 samples, 0.13%)</title><rect x="19" y="1396" width="1" height="15" fill="rgb(209,183,48)"/><text x="22.00" y="1406.50"></text></g><g><title>compile (re.py:234) (2 samples, 0.13%)</title><rect x="19" y="1412" width="1" height="15" fill="rgb(244,27,5)"/><text x="22.00" y="1422.50"></text></g><g><title>_compile (re.py:286) (2 samples, 0.13%)</title><rect x="19" y="1428" width="1" height="15" fill="rgb(224,71,6)"/><text x="22.00" y="1438.50"></text></g><g><title>compile (sre_compile.py:768) (2 samples, 0.13%)</title><rect x="19" y="1444" width="1" height="15" fill="rgb(210,24,6)"/><text x="22.00" y="1454.50"></text></g><g><title>_code (sre_compile.py:607) (2 samples, 0.13%)</title><rect x="19" y="1460" width="1" height="15" fill="rgb(210,203,32)"/><text x="22.00" y="1470.50"></text></g><g><title>_compile (sre_compile.py:168) (2 samples, 0.13%)</title><rect x="19" y="1476" width="1" height="15" fill="rgb(218,41,34)"/><text x="22.00" y="1486.50"></text></g><g><title>_compile (sre_compile.py:209) (2 samples, 0.13%)</title><rect x="19" y="1492" width="1" height="15" fill="rgb(250,19,4)"/><text x="22.00" y="1502.50"></text></g><g><title>_compile (sre_compile.py:168) (2 samples, 0.13%)</title><rect x="19" y="1508" width="1" height="15" fill="rgb(234,140,10)"/><text x="22.00" y="1518.50"></text></g><g><title>_compile (sre_compile.py:209) (2 samples, 0.13%)</title><rect x="19" y="1524" width="1" height="15" fill="rgb(239,86,29)"/><text x="22.00" y="1534.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:4) (15 samples, 0.98%)</title><rect x="10" y="52" width="11" height="15" fill="rgb(234,159,30)"/><text x="13.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (15 samples, 0.98%)</title><rect x="10" y="68" width="11" height="15" fill="rgb(237,211,17)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (15 samples, 0.98%)</title><rect x="10" y="84" width="11" height="15" fill="rgb(240,18,36)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (15 samples, 0.98%)</title><rect x="10" y="100" width="11" height="15" fill="rgb(223,143,9)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (15 samples, 0.98%)</title><rect x="10" y="116" width="11" height="15" fill="rgb(231,12,49)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (15 samples, 0.98%)</title><rect x="10" y="132" width="11" height="15" fill="rgb(235,163,40)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py:7) (8 samples, 0.52%)</title><rect x="15" y="148" width="6" height="15" fill="rgb(229,147,8)"/><text x="18.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.52%)</title><rect x="15" y="164" width="6" height="15" fill="rgb(232,31,7)"/><text x="18.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.52%)</title><rect x="15" y="180" width="6" height="15" fill="rgb(221,155,0)"/><text x="18.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.52%)</title><rect x="15" y="196" width="6" height="15" fill="rgb(246,130,1)"/><text x="18.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.52%)</title><rect x="15" y="212" width="6" height="15" fill="rgb(214,193,52)"/><text x="18.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.52%)</title><rect x="15" y="228" width="6" height="15" fill="rgb(236,57,13)"/><text x="18.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (6 samples, 0.39%)</title><rect x="16" y="244" width="5" height="15" fill="rgb(217,140,18)"/><text x="19.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.39%)</title><rect x="16" y="260" width="5" height="15" fill="rgb(218,159,9)"/><text x="19.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.39%)</title><rect x="16" y="276" width="5" height="15" fill="rgb(207,55,12)"/><text x="19.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.39%)</title><rect x="16" y="292" width="5" height="15" fill="rgb(251,213,44)"/><text x="19.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.39%)</title><rect x="16" y="308" width="5" height="15" fill="rgb(234,129,22)"/><text x="19.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.39%)</title><rect x="16" y="324" width="5" height="15" fill="rgb(239,143,32)"/><text x="19.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (6 samples, 0.39%)</title><rect x="16" y="340" width="5" height="15" fill="rgb(250,21,8)"/><text x="19.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.39%)</title><rect x="16" y="356" width="5" height="15" fill="rgb(209,95,12)"/><text x="19.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.39%)</title><rect x="16" y="372" width="5" height="15" fill="rgb(228,180,13)"/><text x="19.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.39%)</title><rect x="16" y="388" width="5" height="15" fill="rgb(242,116,8)"/><text x="19.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.39%)</title><rect x="16" y="404" width="5" height="15" fill="rgb(208,169,42)"/><text x="19.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.39%)</title><rect x="16" y="420" width="5" height="15" fill="rgb(235,32,11)"/><text x="19.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (3 samples, 0.20%)</title><rect x="19" y="436" width="2" height="15" fill="rgb(215,164,53)"/><text x="22.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.20%)</title><rect x="19" y="452" width="2" height="15" fill="rgb(220,171,14)"/><text x="22.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.20%)</title><rect x="19" y="468" width="2" height="15" fill="rgb(218,121,28)"/><text x="22.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.20%)</title><rect x="19" y="484" width="2" height="15" fill="rgb(247,26,0)"/><text x="22.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.20%)</title><rect x="19" y="500" width="2" height="15" fill="rgb(240,71,29)"/><text x="22.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.20%)</title><rect x="19" y="516" width="2" height="15" fill="rgb(235,93,41)"/><text x="22.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.20%)</title><rect x="19" y="532" width="2" height="15" fill="rgb(231,59,29)"/><text x="22.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.20%)</title><rect x="19" y="548" width="2" height="15" fill="rgb(219,31,46)"/><text x="22.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.20%)</title><rect x="19" y="564" width="2" height="15" fill="rgb(215,32,42)"/><text x="22.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (3 samples, 0.20%)</title><rect x="19" y="580" width="2" height="15" fill="rgb(253,96,16)"/><text x="22.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.20%)</title><rect x="19" y="596" width="2" height="15" fill="rgb(247,54,50)"/><text x="22.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.20%)</title><rect x="19" y="612" width="2" height="15" fill="rgb(227,148,14)"/><text x="22.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.20%)</title><rect x="19" y="628" width="2" height="15" fill="rgb(223,7,54)"/><text x="22.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.20%)</title><rect x="19" y="644" width="2" height="15" fill="rgb(208,201,44)"/><text x="22.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.20%)</title><rect x="19" y="660" width="2" height="15" fill="rgb(207,223,21)"/><text x="22.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (3 samples, 0.20%)</title><rect x="19" y="676" width="2" height="15" fill="rgb(212,33,11)"/><text x="22.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.20%)</title><rect x="19" y="692" width="2" height="15" fill="rgb(208,192,9)"/><text x="22.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.20%)</title><rect x="19" y="708" width="2" height="15" fill="rgb(240,30,44)"/><text x="22.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.20%)</title><rect x="19" y="724" width="2" height="15" fill="rgb(214,130,22)"/><text x="22.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.20%)</title><rect x="19" y="740" width="2" height="15" fill="rgb(207,27,2)"/><text x="22.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.20%)</title><rect x="19" y="756" width="2" height="15" fill="rgb(222,219,11)"/><text x="22.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (3 samples, 0.20%)</title><rect x="19" y="772" width="2" height="15" fill="rgb(228,78,24)"/><text x="22.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.20%)</title><rect x="19" y="788" width="2" height="15" fill="rgb(208,38,3)"/><text x="22.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.20%)</title><rect x="19" y="804" width="2" height="15" fill="rgb(241,202,35)"/><text x="22.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.20%)</title><rect x="19" y="820" width="2" height="15" fill="rgb(250,110,7)"/><text x="22.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.20%)</title><rect x="19" y="836" width="2" height="15" fill="rgb(249,29,0)"/><text x="22.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.20%)</title><rect x="19" y="852" width="2" height="15" fill="rgb(217,195,44)"/><text x="22.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (3 samples, 0.20%)</title><rect x="19" y="868" width="2" height="15" fill="rgb(246,211,8)"/><text x="22.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.20%)</title><rect x="19" y="884" width="2" height="15" fill="rgb(238,181,22)"/><text x="22.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.20%)</title><rect x="19" y="900" width="2" height="15" fill="rgb(212,182,27)"/><text x="22.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.20%)</title><rect x="19" y="916" width="2" height="15" fill="rgb(250,143,7)"/><text x="22.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.20%)</title><rect x="19" y="932" width="2" height="15" fill="rgb(238,80,19)"/><text x="22.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.20%)</title><rect x="19" y="948" width="2" height="15" fill="rgb(235,56,16)"/><text x="22.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.20%)</title><rect x="19" y="964" width="2" height="15" fill="rgb(247,76,41)"/><text x="22.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.20%)</title><rect x="19" y="980" width="2" height="15" fill="rgb(221,55,8)"/><text x="22.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.20%)</title><rect x="19" y="996" width="2" height="15" fill="rgb(251,140,40)"/><text x="22.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (3 samples, 0.20%)</title><rect x="19" y="1012" width="2" height="15" fill="rgb(216,149,5)"/><text x="22.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.20%)</title><rect x="19" y="1028" width="2" height="15" fill="rgb(249,134,21)"/><text x="22.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.20%)</title><rect x="19" y="1044" width="2" height="15" fill="rgb(239,122,20)"/><text x="22.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.20%)</title><rect x="19" y="1060" width="2" height="15" fill="rgb(244,29,0)"/><text x="22.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.20%)</title><rect x="19" y="1076" width="2" height="15" fill="rgb(249,142,14)"/><text x="22.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.20%)</title><rect x="19" y="1092" width="2" height="15" fill="rgb(215,188,38)"/><text x="22.00" y="1102.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1592) (4 samples, 0.26%)</title><rect x="22" y="180" width="3" height="15" fill="rgb(211,173,31)"/><text x="25.00" y="190.50"></text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py:1749) (4 samples, 0.26%)</title><rect x="22" y="196" width="3" height="15" fill="rgb(234,158,28)"/><text x="25.00" y="206.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1348) (4 samples, 0.26%)</title><rect x="22" y="212" width="3" height="15" fill="rgb(218,108,34)"/><text x="25.00" y="222.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:304) (3 samples, 0.20%)</title><rect x="23" y="228" width="2" height="15" fill="rgb(233,117,7)"/><text x="26.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.20%)</title><rect x="23" y="244" width="2" height="15" fill="rgb(210,137,9)"/><text x="26.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.20%)</title><rect x="23" y="260" width="2" height="15" fill="rgb(217,152,9)"/><text x="26.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 0.20%)</title><rect x="23" y="276" width="2" height="15" fill="rgb(228,169,33)"/><text x="26.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (3 samples, 0.20%)</title><rect x="23" y="292" width="2" height="15" fill="rgb(210,209,6)"/><text x="26.00" y="302.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (3 samples, 0.20%)</title><rect x="23" y="308" width="2" height="15" fill="rgb(251,85,53)"/><text x="26.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (3 samples, 0.20%)</title><rect x="23" y="324" width="2" height="15" fill="rgb(218,169,17)"/><text x="26.00" y="334.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:604) (3 samples, 0.20%)</title><rect x="23" y="340" width="2" height="15" fill="rgb(212,203,47)"/><text x="26.00" y="350.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (3 samples, 0.20%)</title><rect x="23" y="356" width="2" height="15" fill="rgb(235,193,32)"/><text x="26.00" y="366.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:47) (7 samples, 0.46%)</title><rect x="21" y="52" width="5" height="15" fill="rgb(207,215,8)"/><text x="24.00" y="62.50"></text></g><g><title>profile0_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:46) (7 samples, 0.46%)</title><rect x="21" y="68" width="5" height="15" fill="rgb(239,138,30)"/><text x="24.00" y="78.50"></text></g><g><title>setup_profile0 (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:26) (6 samples, 0.39%)</title><rect x="22" y="84" width="4" height="15" fill="rgb(228,125,43)"/><text x="25.00" y="94.50"></text></g><g><title>profile0 (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:18) (6 samples, 0.39%)</title><rect x="22" y="100" width="4" height="15" fill="rgb(251,15,10)"/><text x="25.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (6 samples, 0.39%)</title><rect x="22" y="116" width="4" height="15" fill="rgb(250,117,27)"/><text x="25.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (6 samples, 0.39%)</title><rect x="22" y="132" width="4" height="15" fill="rgb(226,195,37)"/><text x="25.00" y="142.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:174) (6 samples, 0.39%)</title><rect x="22" y="148" width="4" height="15" fill="rgb(238,63,11)"/><text x="25.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:642) (6 samples, 0.39%)</title><rect x="22" y="164" width="4" height="15" fill="rgb(222,10,12)"/><text x="25.00" y="174.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1601) (2 samples, 0.13%)</title><rect x="25" y="180" width="1" height="15" fill="rgb(214,96,36)"/><text x="28.00" y="190.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:517) (2 samples, 0.13%)</title><rect x="25" y="196" width="1" height="15" fill="rgb(241,52,49)"/><text x="28.00" y="206.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (2 samples, 0.13%)</title><rect x="25" y="212" width="1" height="15" fill="rgb(242,79,29)"/><text x="28.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.13%)</title><rect x="25" y="228" width="1" height="15" fill="rgb(235,65,4)"/><text x="28.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (2 samples, 0.13%)</title><rect x="25" y="244" width="1" height="15" fill="rgb(208,72,17)"/><text x="28.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (2 samples, 0.13%)</title><rect x="25" y="260" width="1" height="15" fill="rgb(230,24,40)"/><text x="28.00" y="270.50"></text></g><g><title>array_argpartition (methods.c:1454) (2 samples, 0.13%)</title><rect x="25" y="276" width="1" height="15" fill="rgb(238,123,47)"/><text x="28.00" y="286.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (2 samples, 0.13%)</title><rect x="25" y="292" width="1" height="15" fill="rgb(248,183,8)"/><text x="28.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (2 samples, 0.13%)</title><rect x="25" y="308" width="1" height="15" fill="rgb(228,76,44)"/><text x="28.00" y="318.50"></text></g><g><title>aintroselect_double (selection.c.src:322) (2 samples, 0.13%)</title><rect x="25" y="324" width="1" height="15" fill="rgb(205,38,42)"/><text x="28.00" y="334.50"></text></g><g><title>adumb_select_double (selection.c.src:258) (2 samples, 0.13%)</title><rect x="25" y="340" width="1" height="15" fill="rgb(208,180,16)"/><text x="28.00" y="350.50"></text></g><g><title>DOUBLE_LT (npysort_common.h:130) (2 samples, 0.13%)</title><rect x="25" y="356" width="1" height="15" fill="rgb(247,1,38)"/><text x="28.00" y="366.50"></text></g><g><title>check_array (sklearn/utils/validation.py:504) (4 samples, 0.26%)</title><rect x="28" y="164" width="3" height="15" fill="rgb(218,191,29)"/><text x="31.00" y="174.50"></text></g><g><title>simplefilter (warnings.py:179) (3 samples, 0.20%)</title><rect x="29" y="180" width="2" height="15" fill="rgb(254,163,7)"/><text x="32.00" y="190.50"></text></g><g><title>_add_filter (warnings.py:186) (3 samples, 0.20%)</title><rect x="29" y="196" width="2" height="15" fill="rgb(218,80,28)"/><text x="32.00" y="206.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:172) (7 samples, 0.46%)</title><rect x="26" y="148" width="6" height="15" fill="rgb(247,75,42)"/><text x="29.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (3 samples, 0.20%)</title><rect x="32" y="164" width="2" height="15" fill="rgb(222,192,34)"/><text x="35.00" y="174.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1347) (2 samples, 0.13%)</title><rect x="35" y="212" width="1" height="15" fill="rgb(221,132,23)"/><text x="38.00" y="222.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:141) (2 samples, 0.13%)</title><rect x="36" y="244" width="2" height="15" fill="rgb(226,105,43)"/><text x="39.00" y="254.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:262) (4 samples, 0.26%)</title><rect x="36" y="228" width="3" height="15" fill="rgb(244,141,18)"/><text x="39.00" y="238.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:144) (2 samples, 0.13%)</title><rect x="38" y="244" width="1" height="15" fill="rgb(226,29,50)"/><text x="41.00" y="254.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:279) (4 samples, 0.26%)</title><rect x="39" y="228" width="4" height="15" fill="rgb(245,1,6)"/><text x="42.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (4 samples, 0.26%)</title><rect x="39" y="244" width="4" height="15" fill="rgb(216,176,18)"/><text x="42.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;:6) (4 samples, 0.26%)</title><rect x="39" y="260" width="4" height="15" fill="rgb(246,105,11)"/><text x="42.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.26%)</title><rect x="39" y="276" width="4" height="15" fill="rgb(244,105,21)"/><text x="42.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py:1356) (4 samples, 0.26%)</title><rect x="39" y="292" width="4" height="15" fill="rgb(244,20,18)"/><text x="42.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c:2693) (4 samples, 0.26%)</title><rect x="39" y="308" width="4" height="15" fill="rgb(236,114,33)"/><text x="42.00" y="318.50"></text></g><g><title>PyArray_EinsteinSum (einsum.c.src:2803) (2 samples, 0.13%)</title><rect x="41" y="324" width="2" height="15" fill="rgb(243,137,30)"/><text x="44.00" y="334.50"></text></g><g><title>unbuffered_loop_nop2_ndim2 (einsum.c.src:2392) (2 samples, 0.13%)</title><rect x="41" y="340" width="2" height="15" fill="rgb(213,91,53)"/><text x="44.00" y="350.50"></text></g><g><title>double_sum_of_products_contig_contig_outstride0_two (einsum.c.src:595) (2 samples, 0.13%)</title><rect x="41" y="356" width="2" height="15" fill="rgb(207,210,13)"/><text x="44.00" y="366.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.13%)</title><rect x="44" y="260" width="2" height="15" fill="rgb(240,47,3)"/><text x="47.00" y="270.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (3 samples, 0.20%)</title><rect x="46" y="388" width="2" height="15" fill="rgb(240,101,46)"/><text x="49.00" y="398.50"></text></g><g><title>sched_yield (libc-2.29.so) (3 samples, 0.20%)</title><rect x="46" y="404" width="2" height="15" fill="rgb(228,128,23)"/><text x="49.00" y="414.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:303) (9 samples, 0.59%)</title><rect x="43" y="228" width="6" height="15" fill="rgb(227,130,11)"/><text x="46.00" y="238.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (8 samples, 0.52%)</title><rect x="43" y="244" width="6" height="15" fill="rgb(235,107,32)"/><text x="46.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.33%)</title><rect x="46" y="260" width="3" height="15" fill="rgb(223,74,44)"/><text x="49.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (5 samples, 0.33%)</title><rect x="46" y="276" width="3" height="15" fill="rgb(254,68,21)"/><text x="49.00" y="286.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (5 samples, 0.33%)</title><rect x="46" y="292" width="3" height="15" fill="rgb(221,181,18)"/><text x="49.00" y="302.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (5 samples, 0.33%)</title><rect x="46" y="308" width="3" height="15" fill="rgb(209,30,24)"/><text x="49.00" y="318.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.33%)</title><rect x="46" y="324" width="3" height="15" fill="rgb(248,184,33)"/><text x="49.00" y="334.50"></text></g><g><title>dgemm_thread_tn (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.33%)</title><rect x="46" y="340" width="3" height="15" fill="rgb(216,117,2)"/><text x="49.00" y="350.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.33%)</title><rect x="46" y="356" width="3" height="15" fill="rgb(243,86,45)"/><text x="49.00" y="366.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.33%)</title><rect x="46" y="372" width="3" height="15" fill="rgb(229,69,7)"/><text x="49.00" y="382.50"></text></g><g><title>inner_thread (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.13%)</title><rect x="48" y="388" width="1" height="15" fill="rgb(221,221,11)"/><text x="51.00" y="398.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:603) (3 samples, 0.20%)</title><rect x="49" y="340" width="3" height="15" fill="rgb(222,68,52)"/><text x="52.00" y="350.50"></text></g><g><title>_mm_add_pd (emmintrin.h:229) (3 samples, 0.20%)</title><rect x="49" y="356" width="3" height="15" fill="rgb(214,179,26)"/><text x="52.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (5 samples, 0.33%)</title><rect x="49" y="308" width="4" height="15" fill="rgb(251,16,32)"/><text x="52.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (5 samples, 0.33%)</title><rect x="49" y="324" width="4" height="15" fill="rgb(231,226,16)"/><text x="52.00" y="334.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:604) (2 samples, 0.13%)</title><rect x="52" y="340" width="1" height="15" fill="rgb(249,14,48)"/><text x="55.00" y="350.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (2 samples, 0.13%)</title><rect x="52" y="356" width="1" height="15" fill="rgb(222,99,33)"/><text x="55.00" y="366.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (4 samples, 0.26%)</title><rect x="53" y="340" width="3" height="15" fill="rgb(241,78,48)"/><text x="56.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:228) (4 samples, 0.26%)</title><rect x="53" y="356" width="3" height="15" fill="rgb(237,4,6)"/><text x="56.00" y="366.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:304) (10 samples, 0.65%)</title><rect x="49" y="228" width="8" height="15" fill="rgb(229,70,47)"/><text x="52.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 0.65%)</title><rect x="49" y="244" width="8" height="15" fill="rgb(242,0,34)"/><text x="52.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (10 samples, 0.65%)</title><rect x="49" y="260" width="8" height="15" fill="rgb(221,214,42)"/><text x="52.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (10 samples, 0.65%)</title><rect x="49" y="276" width="8" height="15" fill="rgb(240,110,42)"/><text x="52.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (10 samples, 0.65%)</title><rect x="49" y="292" width="8" height="15" fill="rgb(243,121,34)"/><text x="52.00" y="302.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (5 samples, 0.33%)</title><rect x="53" y="308" width="4" height="15" fill="rgb(247,191,36)"/><text x="56.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (5 samples, 0.33%)</title><rect x="53" y="324" width="4" height="15" fill="rgb(227,204,45)"/><text x="56.00" y="334.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:603) (2 samples, 0.13%)</title><rect x="59" y="340" width="1" height="15" fill="rgb(219,153,18)"/><text x="62.00" y="350.50"></text></g><g><title>_mm_add_pd (emmintrin.h:229) (2 samples, 0.13%)</title><rect x="59" y="356" width="1" height="15" fill="rgb(216,215,37)"/><text x="62.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (7 samples, 0.46%)</title><rect x="59" y="308" width="5" height="15" fill="rgb(218,229,52)"/><text x="62.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (7 samples, 0.46%)</title><rect x="59" y="324" width="5" height="15" fill="rgb(209,4,37)"/><text x="62.00" y="334.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:604) (5 samples, 0.33%)</title><rect x="60" y="340" width="4" height="15" fill="rgb(231,0,19)"/><text x="63.00" y="350.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (5 samples, 0.33%)</title><rect x="60" y="356" width="4" height="15" fill="rgb(213,109,22)"/><text x="63.00" y="366.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:305) (12 samples, 0.78%)</title><rect x="57" y="228" width="9" height="15" fill="rgb(252,73,18)"/><text x="60.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (11 samples, 0.72%)</title><rect x="58" y="244" width="8" height="15" fill="rgb(235,218,8)"/><text x="61.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (11 samples, 0.72%)</title><rect x="58" y="260" width="8" height="15" fill="rgb(213,175,6)"/><text x="61.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (11 samples, 0.72%)</title><rect x="58" y="276" width="8" height="15" fill="rgb(239,147,30)"/><text x="61.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (10 samples, 0.65%)</title><rect x="59" y="292" width="7" height="15" fill="rgb(206,155,23)"/><text x="62.00" y="302.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (3 samples, 0.20%)</title><rect x="64" y="308" width="2" height="15" fill="rgb(205,63,26)"/><text x="67.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (3 samples, 0.20%)</title><rect x="64" y="324" width="2" height="15" fill="rgb(221,98,49)"/><text x="67.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (3 samples, 0.20%)</title><rect x="64" y="340" width="2" height="15" fill="rgb(235,212,44)"/><text x="67.00" y="350.50"></text></g><g><title>0x7f3ff5bfdf53 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="65" y="356" width="1" height="15" fill="rgb(248,18,30)"/><text x="68.00" y="366.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1867) (5 samples, 0.33%)</title><rect x="69" y="308" width="3" height="15" fill="rgb(208,113,1)"/><text x="72.00" y="318.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1871) (2 samples, 0.13%)</title><rect x="73" y="308" width="2" height="15" fill="rgb(221,96,11)"/><text x="76.00" y="318.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1592) (53 samples, 3.45%)</title><rect x="35" y="180" width="41" height="15" fill="rgb(217,211,50)"/><text x="38.00" y="190.50">pai..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py:1749) (53 samples, 3.45%)</title><rect x="35" y="196" width="41" height="15" fill="rgb(210,77,33)"/><text x="38.00" y="206.50">pai..</text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1348) (51 samples, 3.32%)</title><rect x="36" y="212" width="40" height="15" fill="rgb(232,216,42)"/><text x="39.00" y="222.50">_pa..</text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:306) (12 samples, 0.78%)</title><rect x="66" y="228" width="10" height="15" fill="rgb(243,18,9)"/><text x="69.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (12 samples, 0.78%)</title><rect x="66" y="244" width="10" height="15" fill="rgb(217,145,1)"/><text x="69.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (10 samples, 0.65%)</title><rect x="68" y="260" width="8" height="15" fill="rgb(242,96,42)"/><text x="71.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (9 samples, 0.59%)</title><rect x="69" y="276" width="7" height="15" fill="rgb(222,152,6)"/><text x="72.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (9 samples, 0.59%)</title><rect x="69" y="292" width="7" height="15" fill="rgb(249,61,6)"/><text x="72.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c:1057) (6 samples, 0.39%)</title><rect x="78" y="308" width="4" height="15" fill="rgb(241,40,32)"/><text x="81.00" y="318.50"></text></g><g><title>adumb_select_double (selection.c.src:257) (8 samples, 0.52%)</title><rect x="83" y="340" width="6" height="15" fill="rgb(208,185,23)"/><text x="86.00" y="350.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:517) (56 samples, 3.64%)</title><rect x="77" y="196" width="43" height="15" fill="rgb(248,161,7)"/><text x="80.00" y="206.50">_kne..</text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (56 samples, 3.64%)</title><rect x="77" y="212" width="43" height="15" fill="rgb(236,2,18)"/><text x="80.00" y="222.50">argp..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (56 samples, 3.64%)</title><rect x="77" y="228" width="43" height="15" fill="rgb(214,126,50)"/><text x="80.00" y="238.50">arra..</text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (56 samples, 3.64%)</title><rect x="77" y="244" width="43" height="15" fill="rgb(213,99,8)"/><text x="80.00" y="254.50">argp..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (56 samples, 3.64%)</title><rect x="77" y="260" width="43" height="15" fill="rgb(250,210,32)"/><text x="80.00" y="270.50">_wra..</text></g><g><title>array_argpartition (methods.c:1454) (55 samples, 3.58%)</title><rect x="78" y="276" width="42" height="15" fill="rgb(237,80,38)"/><text x="81.00" y="286.50">arr..</text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (55 samples, 3.58%)</title><rect x="78" y="292" width="42" height="15" fill="rgb(206,217,49)"/><text x="81.00" y="302.50">PyA..</text></g><g><title>_new_argsortlike (item_selection.c:1084) (49 samples, 3.19%)</title><rect x="82" y="308" width="38" height="15" fill="rgb(238,161,49)"/><text x="85.00" y="318.50">_ne..</text></g><g><title>aintroselect_double (selection.c.src:322) (48 samples, 3.12%)</title><rect x="83" y="324" width="37" height="15" fill="rgb(253,186,19)"/><text x="86.00" y="334.50">ain..</text></g><g><title>adumb_select_double (selection.c.src:258) (40 samples, 2.60%)</title><rect x="89" y="340" width="31" height="15" fill="rgb(221,182,37)"/><text x="92.00" y="350.50">ad..</text></g><g><title>DOUBLE_LT (npysort_common.h:130) (36 samples, 2.34%)</title><rect x="92" y="356" width="28" height="15" fill="rgb(206,37,23)"/><text x="95.00" y="366.50">D..</text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.20%)</title><rect x="121" y="212" width="2" height="15" fill="rgb(217,19,43)"/><text x="124.00" y="222.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2964) (3 samples, 0.20%)</title><rect x="121" y="228" width="2" height="15" fill="rgb(224,115,14)"/><text x="124.00" y="238.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c:229) (3 samples, 0.20%)</title><rect x="121" y="244" width="2" height="15" fill="rgb(224,17,47)"/><text x="124.00" y="254.50"></text></g><g><title>NpyIter_Reset (nditer_api.c:281) (3 samples, 0.20%)</title><rect x="121" y="260" width="2" height="15" fill="rgb(207,132,48)"/><text x="124.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (3 samples, 0.20%)</title><rect x="121" y="276" width="2" height="15" fill="rgb(211,9,6)"/><text x="124.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (2 samples, 0.13%)</title><rect x="122" y="292" width="1" height="15" fill="rgb(228,76,47)"/><text x="125.00" y="302.50"></text></g><g><title>array_subscript (mapping.c:1666) (3 samples, 0.20%)</title><rect x="123" y="212" width="2" height="15" fill="rgb(224,216,47)"/><text x="126.00" y="222.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:521) (10 samples, 0.65%)</title><rect x="120" y="196" width="8" height="15" fill="rgb(215,151,39)"/><text x="123.00" y="206.50"></text></g><g><title>array_subscript (mapping.c:1676) (3 samples, 0.20%)</title><rect x="125" y="212" width="3" height="15" fill="rgb(247,26,14)"/><text x="128.00" y="222.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1601) (70 samples, 4.55%)</title><rect x="76" y="180" width="53" height="15" fill="rgb(222,3,28)"/><text x="79.00" y="190.50">pairw..</text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:524) (2 samples, 0.13%)</title><rect x="128" y="196" width="1" height="15" fill="rgb(249,126,0)"/><text x="131.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:642) (127 samples, 8.26%)</title><rect x="34" y="164" width="98" height="15" fill="rgb(232,81,26)"/><text x="37.00" y="174.50">kneighbors ..</text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1602) (3 samples, 0.20%)</title><rect x="129" y="180" width="3" height="15" fill="rgb(251,108,22)"/><text x="132.00" y="190.50"></text></g><g><title>_check_chunk_size (sklearn/metrics/pairwise.py:1419) (2 samples, 0.13%)</title><rect x="130" y="196" width="2" height="15" fill="rgb(225,155,25)"/><text x="133.00" y="206.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/metrics/pairwise.py:1419) (2 samples, 0.13%)</title><rect x="130" y="212" width="2" height="15" fill="rgb(251,42,30)"/><text x="133.00" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:138) (2 samples, 0.13%)</title><rect x="130" y="228" width="2" height="15" fill="rgb(236,228,17)"/><text x="133.00" y="238.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:174) (131 samples, 8.52%)</title><rect x="32" y="148" width="100" height="15" fill="rgb(237,170,35)"/><text x="35.00" y="158.50">predict (skl..</text></g><g><title>predict (sklearn/neighbors/_regression.py:176) (2 samples, 0.13%)</title><rect x="132" y="148" width="2" height="15" fill="rgb(233,218,24)"/><text x="135.00" y="158.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (2 samples, 0.13%)</title><rect x="136" y="276" width="2" height="15" fill="rgb(221,99,39)"/><text x="139.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (2 samples, 0.13%)</title><rect x="136" y="292" width="2" height="15" fill="rgb(217,53,0)"/><text x="139.00" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (2 samples, 0.13%)</title><rect x="136" y="308" width="2" height="15" fill="rgb(240,228,33)"/><text x="139.00" y="318.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:54) (147 samples, 9.56%)</title><rect x="26" y="52" width="113" height="15" fill="rgb(216,118,21)"/><text x="29.00" y="62.50">&lt;module&gt; (ben..</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:53) (147 samples, 9.56%)</title><rect x="26" y="68" width="113" height="15" fill="rgb(207,192,49)"/><text x="29.00" y="78.50">profile_skl (..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:37) (147 samples, 9.56%)</title><rect x="26" y="84" width="113" height="15" fill="rgb(210,57,31)"/><text x="29.00" y="94.50">setup_profile..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:31) (147 samples, 9.56%)</title><rect x="26" y="100" width="113" height="15" fill="rgb(226,52,30)"/><text x="29.00" y="110.50">profile (benc..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (147 samples, 9.56%)</title><rect x="26" y="116" width="113" height="15" fill="rgb(210,78,23)"/><text x="29.00" y="126.50">time_predict ..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (147 samples, 9.56%)</title><rect x="26" y="132" width="113" height="15" fill="rgb(226,91,54)"/><text x="29.00" y="142.50">&lt;lambda&gt; (mlp..</text></g><g><title>predict (sklearn/neighbors/_regression.py:183) (7 samples, 0.46%)</title><rect x="134" y="148" width="5" height="15" fill="rgb(239,90,17)"/><text x="137.00" y="158.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (5 samples, 0.33%)</title><rect x="135" y="164" width="4" height="15" fill="rgb(205,218,53)"/><text x="138.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.33%)</title><rect x="135" y="180" width="4" height="15" fill="rgb(249,168,48)"/><text x="138.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (4 samples, 0.26%)</title><rect x="136" y="196" width="3" height="15" fill="rgb(227,100,3)"/><text x="139.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py:151) (4 samples, 0.26%)</title><rect x="136" y="212" width="3" height="15" fill="rgb(243,25,36)"/><text x="139.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 0.26%)</title><rect x="136" y="228" width="3" height="15" fill="rgb(206,17,34)"/><text x="139.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (4 samples, 0.26%)</title><rect x="136" y="244" width="3" height="15" fill="rgb(242,190,14)"/><text x="139.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (4 samples, 0.26%)</title><rect x="136" y="260" width="3" height="15" fill="rgb(217,102,53)"/><text x="139.00" y="270.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (2 samples, 0.13%)</title><rect x="138" y="276" width="1" height="15" fill="rgb(229,6,27)"/><text x="141.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (4 samples, 0.26%)</title><rect x="146" y="324" width="3" height="15" fill="rgb(215,105,48)"/><text x="149.00" y="334.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (8 samples, 0.52%)</title><rect x="144" y="276" width="6" height="15" fill="rgb(246,6,18)"/><text x="147.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (8 samples, 0.52%)</title><rect x="144" y="292" width="6" height="15" fill="rgb(232,29,47)"/><text x="147.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (6 samples, 0.39%)</title><rect x="145" y="308" width="5" height="15" fill="rgb(240,106,28)"/><text x="148.00" y="318.50"></text></g><g><title>discover_dimensions (ctors.c:884) (5 samples, 0.33%)</title><rect x="150" y="292" width="4" height="15" fill="rgb(245,109,12)"/><text x="153.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c:703) (3 samples, 0.20%)</title><rect x="152" y="308" width="2" height="15" fill="rgb(209,123,45)"/><text x="155.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (14 samples, 0.91%)</title><rect x="144" y="260" width="11" height="15" fill="rgb(238,72,17)"/><text x="147.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (6 samples, 0.39%)</title><rect x="150" y="276" width="5" height="15" fill="rgb(221,116,17)"/><text x="153.00" y="286.50"></text></g><g><title>array_subscript (mapping.c:1539) (20 samples, 1.30%)</title><rect x="144" y="228" width="15" height="15" fill="rgb(247,19,0)"/><text x="147.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:516) (20 samples, 1.30%)</title><rect x="144" y="244" width="15" height="15" fill="rgb(216,21,17)"/><text x="147.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c:1938) (6 samples, 0.39%)</title><rect x="155" y="260" width="4" height="15" fill="rgb(211,89,7)"/><text x="158.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (6 samples, 0.39%)</title><rect x="155" y="276" width="4" height="15" fill="rgb(232,21,29)"/><text x="158.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c:550) (5 samples, 0.33%)</title><rect x="155" y="292" width="4" height="15" fill="rgb(228,207,53)"/><text x="158.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (5 samples, 0.33%)</title><rect x="155" y="308" width="4" height="15" fill="rgb(225,149,0)"/><text x="158.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:216) (2 samples, 0.13%)</title><rect x="158" y="324" width="1" height="15" fill="rgb(227,7,4)"/><text x="161.00" y="334.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src:119) (2 samples, 0.13%)</title><rect x="158" y="340" width="1" height="15" fill="rgb(230,170,40)"/><text x="161.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (22 samples, 1.43%)</title><rect x="144" y="212" width="17" height="15" fill="rgb(234,159,25)"/><text x="147.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:84) (3 samples, 0.20%)</title><rect x="161" y="212" width="2" height="15" fill="rgb(252,14,30)"/><text x="164.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (2 samples, 0.13%)</title><rect x="165" y="228" width="2" height="15" fill="rgb(246,109,13)"/><text x="168.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (7 samples, 0.46%)</title><rect x="163" y="212" width="5" height="15" fill="rgb(223,106,16)"/><text x="166.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:537) (2 samples, 0.13%)</title><rect x="167" y="228" width="1" height="15" fill="rgb(235,223,41)"/><text x="170.00" y="238.50"></text></g><g><title>npy_free_cache (alloc.c:147) (2 samples, 0.13%)</title><rect x="167" y="244" width="1" height="15" fill="rgb(241,177,2)"/><text x="170.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c:112) (2 samples, 0.13%)</title><rect x="167" y="260" width="1" height="15" fill="rgb(246,79,17)"/><text x="170.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (7 samples, 0.46%)</title><rect x="168" y="212" width="6" height="15" fill="rgb(231,72,17)"/><text x="171.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:87) (2 samples, 0.13%)</title><rect x="174" y="212" width="1" height="15" fill="rgb(233,108,30)"/><text x="177.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (5 samples, 0.33%)</title><rect x="175" y="212" width="4" height="15" fill="rgb(218,6,22)"/><text x="178.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (7 samples, 0.46%)</title><rect x="179" y="212" width="6" height="15" fill="rgb(253,164,53)"/><text x="182.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1584) (6 samples, 0.39%)</title><rect x="180" y="228" width="5" height="15" fill="rgb(207,40,7)"/><text x="183.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (3 samples, 0.20%)</title><rect x="182" y="244" width="3" height="15" fill="rgb(215,206,26)"/><text x="185.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (3 samples, 0.20%)</title><rect x="182" y="260" width="3" height="15" fill="rgb(241,62,13)"/><text x="185.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (7 samples, 0.46%)</title><rect x="190" y="228" width="5" height="15" fill="rgb(233,104,29)"/><text x="193.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:426) (2 samples, 0.13%)</title><rect x="203" y="244" width="2" height="15" fill="rgb(231,99,21)"/><text x="206.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (4 samples, 0.26%)</title><rect x="205" y="244" width="3" height="15" fill="rgb(242,36,40)"/><text x="208.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (7 samples, 0.46%)</title><rect x="208" y="244" width="5" height="15" fill="rgb(243,62,43)"/><text x="211.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (6 samples, 0.39%)</title><rect x="213" y="244" width="5" height="15" fill="rgb(213,211,20)"/><text x="216.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (4 samples, 0.26%)</title><rect x="218" y="244" width="3" height="15" fill="rgb(243,217,21)"/><text x="221.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (2 samples, 0.13%)</title><rect x="231" y="260" width="1" height="15" fill="rgb(212,192,10)"/><text x="234.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (45 samples, 2.93%)</title><rect x="232" y="260" width="35" height="15" fill="rgb(239,27,19)"/><text x="235.00" y="270.50">ru..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (13 samples, 0.85%)</title><rect x="257" y="276" width="10" height="15" fill="rgb(217,199,34)"/><text x="260.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (7 samples, 0.46%)</title><rect x="297" y="308" width="6" height="15" fill="rgb(242,226,4)"/><text x="300.00" y="318.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (2 samples, 0.13%)</title><rect x="304" y="436" width="2" height="15" fill="rgb(240,111,11)"/><text x="307.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (2 samples, 0.13%)</title><rect x="304" y="452" width="2" height="15" fill="rgb(238,15,28)"/><text x="307.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="304" y="468" width="2" height="15" fill="rgb(244,85,26)"/><text x="307.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (3 samples, 0.20%)</title><rect x="304" y="404" width="3" height="15" fill="rgb(220,41,23)"/><text x="307.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (3 samples, 0.20%)</title><rect x="304" y="420" width="3" height="15" fill="rgb(253,198,26)"/><text x="307.00" y="430.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (5 samples, 0.33%)</title><rect x="304" y="340" width="3" height="15" fill="rgb(238,124,38)"/><text x="307.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (5 samples, 0.33%)</title><rect x="304" y="356" width="3" height="15" fill="rgb(229,46,3)"/><text x="307.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (5 samples, 0.33%)</title><rect x="304" y="372" width="3" height="15" fill="rgb(214,214,3)"/><text x="307.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (5 samples, 0.33%)</title><rect x="304" y="388" width="3" height="15" fill="rgb(249,36,44)"/><text x="307.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:333) (2 samples, 0.13%)</title><rect x="308" y="356" width="2" height="15" fill="rgb(230,69,52)"/><text x="311.00" y="366.50"></text></g><g><title>arrays_overlap (array_assign.c:158) (2 samples, 0.13%)</title><rect x="308" y="372" width="2" height="15" fill="rgb(237,114,13)"/><text x="311.00" y="382.50"></text></g><g><title>__GI___pthread_mutex_unlock (libpthread-2.29.so) (2 samples, 0.13%)</title><rect x="311" y="388" width="2" height="15" fill="rgb(232,116,34)"/><text x="314.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (4 samples, 0.26%)</title><rect x="310" y="372" width="4" height="15" fill="rgb(208,62,25)"/><text x="313.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (7 samples, 0.46%)</title><rect x="314" y="372" width="6" height="15" fill="rgb(211,8,7)"/><text x="317.00" y="382.50"></text></g><g><title>0x7f3ff5bfdd94 (libc-2.29.so) (7 samples, 0.46%)</title><rect x="314" y="388" width="6" height="15" fill="rgb(207,83,43)"/><text x="317.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (2 samples, 0.13%)</title><rect x="320" y="372" width="1" height="15" fill="rgb(236,80,16)"/><text x="323.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (25 samples, 1.63%)</title><rect x="303" y="308" width="19" height="15" fill="rgb(250,163,41)"/><text x="306.00" y="318.50"></text></g><g><title>array_copy (methods.c:1133) (24 samples, 1.56%)</title><rect x="304" y="324" width="18" height="15" fill="rgb(248,26,3)"/><text x="307.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c:560) (19 samples, 1.24%)</title><rect x="307" y="340" width="15" height="15" fill="rgb(238,144,7)"/><text x="310.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (16 samples, 1.04%)</title><rect x="310" y="356" width="12" height="15" fill="rgb(205,187,50)"/><text x="313.00" y="366.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:1970) (2 samples, 0.13%)</title><rect x="329" y="356" width="1" height="15" fill="rgb(234,199,8)"/><text x="332.00" y="366.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2006) (2 samples, 0.13%)</title><rect x="332" y="356" width="1" height="15" fill="rgb(243,142,17)"/><text x="335.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (3 samples, 0.20%)</title><rect x="335" y="372" width="2" height="15" fill="rgb(249,225,21)"/><text x="338.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (2 samples, 0.13%)</title><rect x="336" y="388" width="1" height="15" fill="rgb(220,157,39)"/><text x="339.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:757) (2 samples, 0.13%)</title><rect x="336" y="404" width="1" height="15" fill="rgb(248,30,12)"/><text x="339.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (12 samples, 0.78%)</title><rect x="329" y="340" width="9" height="15" fill="rgb(250,87,0)"/><text x="332.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (6 samples, 0.39%)</title><rect x="333" y="356" width="5" height="15" fill="rgb(225,139,1)"/><text x="336.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (2 samples, 0.13%)</title><rect x="339" y="388" width="1" height="15" fill="rgb(232,204,42)"/><text x="342.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (2 samples, 0.13%)</title><rect x="339" y="404" width="1" height="15" fill="rgb(216,131,26)"/><text x="342.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (2 samples, 0.13%)</title><rect x="339" y="420" width="1" height="15" fill="rgb(220,21,0)"/><text x="342.00" y="430.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (5 samples, 0.33%)</title><rect x="339" y="356" width="4" height="15" fill="rgb(236,76,1)"/><text x="342.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (5 samples, 0.33%)</title><rect x="339" y="372" width="4" height="15" fill="rgb(228,86,31)"/><text x="342.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (2 samples, 0.13%)</title><rect x="341" y="388" width="2" height="15" fill="rgb(206,220,36)"/><text x="344.00" y="398.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (2 samples, 0.13%)</title><rect x="341" y="404" width="2" height="15" fill="rgb(212,180,9)"/><text x="344.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (2 samples, 0.13%)</title><rect x="341" y="420" width="2" height="15" fill="rgb(217,114,50)"/><text x="344.00" y="430.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (2 samples, 0.13%)</title><rect x="341" y="436" width="2" height="15" fill="rgb(224,145,31)"/><text x="344.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="341" y="452" width="2" height="15" fill="rgb(223,213,45)"/><text x="344.00" y="462.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (4 samples, 0.26%)</title><rect x="344" y="372" width="3" height="15" fill="rgb(245,138,17)"/><text x="347.00" y="382.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (27 samples, 1.76%)</title><rect x="328" y="324" width="21" height="15" fill="rgb(229,154,21)"/><text x="331.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (13 samples, 0.85%)</title><rect x="339" y="340" width="10" height="15" fill="rgb(249,178,38)"/><text x="342.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (8 samples, 0.52%)</title><rect x="343" y="356" width="6" height="15" fill="rgb(241,98,11)"/><text x="346.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1355) (2 samples, 0.13%)</title><rect x="347" y="372" width="2" height="15" fill="rgb(207,6,28)"/><text x="350.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (36 samples, 2.34%)</title><rect x="322" y="308" width="28" height="15" fill="rgb(238,11,14)"/><text x="325.00" y="318.50">_..</text></g><g><title>_buffer_clear_info (buffer.c:723) (2 samples, 0.13%)</title><rect x="354" y="356" width="2" height="15" fill="rgb(241,127,4)"/><text x="357.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (2 samples, 0.13%)</title><rect x="356" y="356" width="1" height="15" fill="rgb(224,28,7)"/><text x="359.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (5 samples, 0.33%)</title><rect x="354" y="324" width="4" height="15" fill="rgb(247,133,3)"/><text x="357.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (5 samples, 0.33%)</title><rect x="354" y="340" width="4" height="15" fill="rgb(235,181,14)"/><text x="357.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c:537) (2 samples, 0.13%)</title><rect x="358" y="324" width="2" height="15" fill="rgb(211,193,39)"/><text x="361.00" y="334.50"></text></g><g><title>npy_free_cache (alloc.c:147) (2 samples, 0.13%)</title><rect x="358" y="340" width="2" height="15" fill="rgb(226,150,20)"/><text x="361.00" y="350.50"></text></g><g><title>_npy_free_cache (alloc.c:112) (2 samples, 0.13%)</title><rect x="358" y="356" width="2" height="15" fill="rgb(242,69,31)"/><text x="361.00" y="366.50"></text></g><g><title>PyDataMem_FREE (alloc.c:274) (2 samples, 0.13%)</title><rect x="358" y="372" width="2" height="15" fill="rgb(213,48,51)"/><text x="361.00" y="382.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.13%)</title><rect x="360" y="324" width="1" height="15" fill="rgb(233,168,43)"/><text x="363.00" y="334.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (2 samples, 0.13%)</title><rect x="360" y="340" width="1" height="15" fill="rgb(222,18,35)"/><text x="363.00" y="350.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (6 samples, 0.39%)</title><rect x="361" y="324" width="5" height="15" fill="rgb(216,162,1)"/><text x="364.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:234) (2 samples, 0.13%)</title><rect x="369" y="340" width="1" height="15" fill="rgb(212,181,33)"/><text x="372.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (6 samples, 0.39%)</title><rect x="373" y="356" width="4" height="15" fill="rgb(220,101,17)"/><text x="376.00" y="366.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (2 samples, 0.13%)</title><rect x="377" y="356" width="2" height="15" fill="rgb(212,59,54)"/><text x="380.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (2 samples, 0.13%)</title><rect x="397" y="388" width="2" height="15" fill="rgb(215,218,13)"/><text x="400.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (18 samples, 1.17%)</title><rect x="389" y="372" width="14" height="15" fill="rgb(238,62,42)"/><text x="392.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (5 samples, 0.33%)</title><rect x="399" y="388" width="4" height="15" fill="rgb(252,55,11)"/><text x="402.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (6 samples, 0.39%)</title><rect x="403" y="372" width="4" height="15" fill="rgb(248,14,2)"/><text x="406.00" y="382.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5514) (2 samples, 0.13%)</title><rect x="415" y="388" width="1" height="15" fill="rgb(252,166,15)"/><text x="418.00" y="398.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (3 samples, 0.20%)</title><rect x="416" y="388" width="3" height="15" fill="rgb(235,196,10)"/><text x="419.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (3 samples, 0.20%)</title><rect x="416" y="404" width="3" height="15" fill="rgb(241,224,36)"/><text x="419.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (3 samples, 0.20%)</title><rect x="416" y="420" width="3" height="15" fill="rgb(209,44,8)"/><text x="419.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (3 samples, 0.20%)</title><rect x="416" y="436" width="3" height="15" fill="rgb(238,115,43)"/><text x="419.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (2 samples, 0.13%)</title><rect x="417" y="452" width="2" height="15" fill="rgb(246,214,16)"/><text x="420.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (10 samples, 0.65%)</title><rect x="419" y="404" width="7" height="15" fill="rgb(209,46,5)"/><text x="422.00" y="414.50"></text></g><g><title>unicode_eq (python3.7) (2 samples, 0.13%)</title><rect x="425" y="420" width="1" height="15" fill="rgb(226,119,20)"/><text x="428.00" y="430.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (4 samples, 0.26%)</title><rect x="428" y="420" width="3" height="15" fill="rgb(215,225,40)"/><text x="431.00" y="430.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (4 samples, 0.26%)</title><rect x="428" y="436" width="3" height="15" fill="rgb(220,142,33)"/><text x="431.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (3 samples, 0.20%)</title><rect x="429" y="452" width="2" height="15" fill="rgb(238,226,30)"/><text x="432.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (2 samples, 0.13%)</title><rect x="433" y="500" width="1" height="15" fill="rgb(232,141,36)"/><text x="436.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (2 samples, 0.13%)</title><rect x="433" y="516" width="1" height="15" fill="rgb(252,102,32)"/><text x="436.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (2 samples, 0.13%)</title><rect x="433" y="532" width="1" height="15" fill="rgb(205,226,34)"/><text x="436.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (2 samples, 0.13%)</title><rect x="433" y="548" width="1" height="15" fill="rgb(225,223,11)"/><text x="436.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="433" y="564" width="1" height="15" fill="rgb(251,228,7)"/><text x="436.00" y="574.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (5 samples, 0.33%)</title><rect x="431" y="436" width="4" height="15" fill="rgb(236,47,12)"/><text x="434.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (5 samples, 0.33%)</title><rect x="431" y="452" width="4" height="15" fill="rgb(230,229,4)"/><text x="434.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (4 samples, 0.26%)</title><rect x="432" y="468" width="3" height="15" fill="rgb(217,31,53)"/><text x="435.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (4 samples, 0.26%)</title><rect x="432" y="484" width="3" height="15" fill="rgb(247,130,16)"/><text x="435.00" y="494.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c:3799) (2 samples, 0.13%)</title><rect x="436" y="484" width="1" height="15" fill="rgb(235,229,26)"/><text x="439.00" y="494.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:255) (4 samples, 0.26%)</title><rect x="435" y="468" width="3" height="15" fill="rgb(229,160,40)"/><text x="438.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:57) (2 samples, 0.13%)</title><rect x="438" y="484" width="1" height="15" fill="rgb(228,160,49)"/><text x="441.00" y="494.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c:3869) (2 samples, 0.13%)</title><rect x="438" y="500" width="1" height="15" fill="rgb(205,11,43)"/><text x="441.00" y="510.50"></text></g><g><title>qsort_r (libc-2.29.so) (2 samples, 0.13%)</title><rect x="438" y="516" width="1" height="15" fill="rgb(224,27,1)"/><text x="441.00" y="526.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (2 samples, 0.13%)</title><rect x="441" y="500" width="1" height="15" fill="rgb(252,204,9)"/><text x="444.00" y="510.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (12 samples, 0.78%)</title><rect x="435" y="436" width="9" height="15" fill="rgb(252,26,26)"/><text x="438.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (12 samples, 0.78%)</title><rect x="435" y="452" width="9" height="15" fill="rgb(253,184,15)"/><text x="438.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (8 samples, 0.52%)</title><rect x="438" y="468" width="6" height="15" fill="rgb(253,133,28)"/><text x="441.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:92) (4 samples, 0.26%)</title><rect x="441" y="484" width="3" height="15" fill="rgb(253,202,26)"/><text x="444.00" y="494.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (2 samples, 0.13%)</title><rect x="445" y="452" width="1" height="15" fill="rgb(231,99,12)"/><text x="448.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:471) (3 samples, 0.20%)</title><rect x="449" y="452" width="3" height="15" fill="rgb(233,69,36)"/><text x="452.00" y="462.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1720) (3 samples, 0.20%)</title><rect x="449" y="468" width="3" height="15" fill="rgb(213,30,52)"/><text x="452.00" y="478.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.20%)</title><rect x="449" y="484" width="3" height="15" fill="rgb(228,76,46)"/><text x="452.00" y="494.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2131) (2 samples, 0.13%)</title><rect x="452" y="468" width="1" height="15" fill="rgb(205,132,21)"/><text x="455.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (16 samples, 1.04%)</title><rect x="444" y="436" width="12" height="15" fill="rgb(253,210,52)"/><text x="447.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (6 samples, 0.39%)</title><rect x="452" y="452" width="4" height="15" fill="rgb(221,221,49)"/><text x="455.00" y="462.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2525) (2 samples, 0.13%)</title><rect x="455" y="468" width="1" height="15" fill="rgb(217,228,37)"/><text x="458.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:550) (2 samples, 0.13%)</title><rect x="456" y="436" width="2" height="15" fill="rgb(206,105,31)"/><text x="459.00" y="446.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (2 samples, 0.13%)</title><rect x="456" y="452" width="2" height="15" fill="rgb(221,133,10)"/><text x="459.00" y="462.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (2 samples, 0.13%)</title><rect x="456" y="468" width="2" height="15" fill="rgb(214,87,18)"/><text x="459.00" y="478.50"></text></g><g><title>fetestexcept (libm-2.29.so) (2 samples, 0.13%)</title><rect x="456" y="484" width="2" height="15" fill="rgb(206,131,21)"/><text x="459.00" y="494.50"></text></g><g><title>reduce_loop (ufunc_object.c:3486) (2 samples, 0.13%)</title><rect x="458" y="452" width="1" height="15" fill="rgb(249,17,19)"/><text x="461.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3533) (7 samples, 0.46%)</title><rect x="460" y="452" width="6" height="15" fill="rgb(212,223,36)"/><text x="463.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3534) (2 samples, 0.13%)</title><rect x="466" y="452" width="1" height="15" fill="rgb(244,148,35)"/><text x="469.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3536) (2 samples, 0.13%)</title><rect x="468" y="452" width="1" height="15" fill="rgb(210,183,10)"/><text x="471.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3537) (2 samples, 0.13%)</title><rect x="469" y="452" width="2" height="15" fill="rgb(232,132,41)"/><text x="472.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3541) (6 samples, 0.39%)</title><rect x="472" y="452" width="5" height="15" fill="rgb(237,20,36)"/><text x="475.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1741) (10 samples, 0.65%)</title><rect x="478" y="468" width="7" height="15" fill="rgb(222,187,27)"/><text x="481.00" y="478.50"></text></g><g><title>FLOAT_add (loops.c.src:1742) (12 samples, 0.78%)</title><rect x="485" y="468" width="10" height="15" fill="rgb(215,13,25)"/><text x="488.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1662) (5 samples, 0.33%)</title><rect x="505" y="484" width="4" height="15" fill="rgb(236,88,32)"/><text x="508.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1667) (35 samples, 2.28%)</title><rect x="509" y="484" width="27" height="15" fill="rgb(229,213,35)"/><text x="512.00" y="494.50">p..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1668) (3 samples, 0.20%)</title><rect x="536" y="484" width="2" height="15" fill="rgb(224,12,37)"/><text x="539.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (64 samples, 4.16%)</title><rect x="495" y="468" width="49" height="15" fill="rgb(232,27,13)"/><text x="498.00" y="478.50">FLOA..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1721) (7 samples, 0.46%)</title><rect x="538" y="484" width="6" height="15" fill="rgb(251,211,32)"/><text x="541.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1762) (3 samples, 0.20%)</title><rect x="544" y="468" width="2" height="15" fill="rgb(219,84,17)"/><text x="547.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:194) (5 samples, 0.33%)</title><rect x="546" y="468" width="4" height="15" fill="rgb(254,106,21)"/><text x="549.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:229) (2 samples, 0.13%)</title><rect x="550" y="468" width="2" height="15" fill="rgb(234,188,46)"/><text x="553.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:235) (5 samples, 0.33%)</title><rect x="552" y="468" width="3" height="15" fill="rgb(248,225,29)"/><text x="555.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:239) (2 samples, 0.13%)</title><rect x="555" y="468" width="2" height="15" fill="rgb(248,90,27)"/><text x="558.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (6 samples, 0.39%)</title><rect x="558" y="468" width="4" height="15" fill="rgb(249,20,30)"/><text x="561.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:243) (5 samples, 0.33%)</title><rect x="562" y="468" width="4" height="15" fill="rgb(208,92,48)"/><text x="565.00" y="478.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (120 samples, 7.81%)</title><rect x="477" y="452" width="92" height="15" fill="rgb(217,128,41)"/><text x="480.00" y="462.50">reduce_loo..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:268) (2 samples, 0.13%)</title><rect x="568" y="468" width="1" height="15" fill="rgb(229,140,39)"/><text x="571.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (147 samples, 9.56%)</title><rect x="458" y="436" width="113" height="15" fill="rgb(236,143,54)"/><text x="461.00" y="446.50">PyUFunc_Reduc..</text></g><g><title>reduce_loop (ufunc_object.c:3574) (2 samples, 0.13%)</title><rect x="569" y="452" width="2" height="15" fill="rgb(207,220,51)"/><text x="572.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:583) (2 samples, 0.13%)</title><rect x="571" y="436" width="1" height="15" fill="rgb(207,122,46)"/><text x="574.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (2 samples, 0.13%)</title><rect x="572" y="436" width="2" height="15" fill="rgb(217,97,38)"/><text x="575.00" y="446.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (2 samples, 0.13%)</title><rect x="572" y="452" width="2" height="15" fill="rgb(252,57,22)"/><text x="575.00" y="462.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (376 samples, 24.46%)</title><rect x="287" y="276" width="288" height="15" fill="rgb(232,155,20)"/><text x="290.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py:3..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (368 samples, 23.94%)</title><rect x="293" y="292" width="282" height="15" fill="rgb(243,212,42)"/><text x="296.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py:..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (294 samples, 19.13%)</title><rect x="350" y="308" width="225" height="15" fill="rgb(223,76,41)"/><text x="353.00" y="318.50">_run (mlprodict/onnxrt/ops_cp..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (272 samples, 17.70%)</title><rect x="366" y="324" width="209" height="15" fill="rgb(210,75,1)"/><text x="369.00" y="334.50">sum (&lt;__array_function__ in..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (267 samples, 17.37%)</title><rect x="370" y="340" width="205" height="15" fill="rgb(213,176,22)"/><text x="373.00" y="350.50">array_implement_array_func..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (256 samples, 16.66%)</title><rect x="379" y="356" width="196" height="15" fill="rgb(209,109,24)"/><text x="382.00" y="366.50">sum (numpy/core/fromnumer..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (219 samples, 14.25%)</title><rect x="407" y="372" width="168" height="15" fill="rgb(254,92,0)"/><text x="410.00" y="382.50">_wrapreduction (numpy..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (204 samples, 13.27%)</title><rect x="419" y="388" width="156" height="15" fill="rgb(235,195,5)"/><text x="422.00" y="398.50">ufunc_reduce (ufunc_..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (193 samples, 12.56%)</title><rect x="427" y="404" width="148" height="15" fill="rgb(227,209,29)"/><text x="430.00" y="414.50">PyUFunc_GenericRed..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (188 samples, 12.23%)</title><rect x="431" y="420" width="144" height="15" fill="rgb(233,156,31)"/><text x="434.00" y="430.50">PyUFunc_Reduce (uf..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:595) (2 samples, 0.13%)</title><rect x="574" y="436" width="1" height="15" fill="rgb(240,8,17)"/><text x="577.00" y="446.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c:66) (2 samples, 0.13%)</title><rect x="574" y="452" width="1" height="15" fill="rgb(241,70,32)"/><text x="577.00" y="462.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (13 samples, 0.85%)</title><rect x="575" y="276" width="10" height="15" fill="rgb(227,182,27)"/><text x="578.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (2 samples, 0.13%)</title><rect x="587" y="292" width="1" height="15" fill="rgb(210,35,25)"/><text x="590.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:519) (2 samples, 0.13%)</title><rect x="591" y="308" width="2" height="15" fill="rgb(230,201,32)"/><text x="594.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:527) (2 samples, 0.13%)</title><rect x="593" y="308" width="2" height="15" fill="rgb(225,14,25)"/><text x="596.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (2 samples, 0.13%)</title><rect x="598" y="324" width="1" height="15" fill="rgb(252,116,34)"/><text x="601.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (2 samples, 0.13%)</title><rect x="598" y="340" width="1" height="15" fill="rgb(236,112,53)"/><text x="601.00" y="350.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (2 samples, 0.13%)</title><rect x="599" y="372" width="2" height="15" fill="rgb(224,105,45)"/><text x="602.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (3 samples, 0.20%)</title><rect x="599" y="340" width="2" height="15" fill="rgb(213,36,19)"/><text x="602.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (3 samples, 0.20%)</title><rect x="599" y="356" width="2" height="15" fill="rgb(235,139,36)"/><text x="602.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (3 samples, 0.20%)</title><rect x="604" y="340" width="2" height="15" fill="rgb(233,211,21)"/><text x="607.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (4 samples, 0.26%)</title><rect x="609" y="388" width="3" height="15" fill="rgb(216,90,0)"/><text x="612.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.26%)</title><rect x="609" y="404" width="3" height="15" fill="rgb(239,14,12)"/><text x="612.00" y="414.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1182) (2 samples, 0.13%)</title><rect x="612" y="404" width="2" height="15" fill="rgb(254,69,17)"/><text x="615.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (5 samples, 0.33%)</title><rect x="612" y="388" width="4" height="15" fill="rgb(254,57,39)"/><text x="615.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (2 samples, 0.13%)</title><rect x="614" y="404" width="2" height="15" fill="rgb(238,217,30)"/><text x="617.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (2 samples, 0.13%)</title><rect x="620" y="452" width="1" height="15" fill="rgb(227,205,41)"/><text x="623.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (2 samples, 0.13%)</title><rect x="620" y="468" width="1" height="15" fill="rgb(214,16,23)"/><text x="623.00" y="478.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (2 samples, 0.13%)</title><rect x="620" y="484" width="1" height="15" fill="rgb(229,55,0)"/><text x="623.00" y="494.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (2 samples, 0.13%)</title><rect x="620" y="500" width="1" height="15" fill="rgb(250,19,11)"/><text x="623.00" y="510.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="620" y="516" width="1" height="15" fill="rgb(224,200,2)"/><text x="623.00" y="526.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (3 samples, 0.20%)</title><rect x="620" y="420" width="2" height="15" fill="rgb(244,205,39)"/><text x="623.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (3 samples, 0.20%)</title><rect x="620" y="436" width="2" height="15" fill="rgb(229,164,53)"/><text x="623.00" y="446.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (5 samples, 0.33%)</title><rect x="620" y="404" width="4" height="15" fill="rgb(223,126,27)"/><text x="623.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (10 samples, 0.65%)</title><rect x="619" y="388" width="8" height="15" fill="rgb(245,17,21)"/><text x="622.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (2 samples, 0.13%)</title><rect x="627" y="388" width="1" height="15" fill="rgb(205,10,42)"/><text x="630.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (28 samples, 1.82%)</title><rect x="608" y="372" width="21" height="15" fill="rgb(222,42,26)"/><text x="611.00" y="382.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (17 samples, 1.11%)</title><rect x="631" y="420" width="13" height="15" fill="rgb(220,72,8)"/><text x="634.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1014) (2 samples, 0.13%)</title><rect x="644" y="420" width="1" height="15" fill="rgb(225,182,26)"/><text x="647.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (4 samples, 0.26%)</title><rect x="645" y="420" width="3" height="15" fill="rgb(205,206,22)"/><text x="648.00" y="430.50"></text></g><g><title>0x7f3ff5bfdd5f (libc-2.29.so) (2 samples, 0.13%)</title><rect x="649" y="436" width="2" height="15" fill="rgb(213,78,13)"/><text x="652.00" y="446.50"></text></g><g><title>0x7f3ff5bfdd67 (libc-2.29.so) (6 samples, 0.39%)</title><rect x="651" y="436" width="5" height="15" fill="rgb(248,3,27)"/><text x="654.00" y="446.50"></text></g><g><title>0x7f3ff5bfdd6f (libc-2.29.so) (3 samples, 0.20%)</title><rect x="657" y="436" width="2" height="15" fill="rgb(233,177,26)"/><text x="660.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (18 samples, 1.17%)</title><rect x="648" y="420" width="14" height="15" fill="rgb(247,179,9)"/><text x="651.00" y="430.50"></text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src:330) (4 samples, 0.26%)</title><rect x="659" y="436" width="3" height="15" fill="rgb(251,78,10)"/><text x="662.00" y="446.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (43 samples, 2.80%)</title><rect x="630" y="372" width="33" height="15" fill="rgb(207,135,24)"/><text x="633.00" y="382.50">it..</text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (43 samples, 2.80%)</title><rect x="630" y="388" width="33" height="15" fill="rgb(246,132,6)"/><text x="633.00" y="398.50">Np..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (42 samples, 2.73%)</title><rect x="631" y="404" width="32" height="15" fill="rgb(219,47,47)"/><text x="634.00" y="414.50">np..</text></g><g><title>iterator_loop (ufunc_object.c:1576) (2 samples, 0.13%)</title><rect x="664" y="372" width="1" height="15" fill="rgb(236,213,2)"/><text x="667.00" y="382.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:603) (3 samples, 0.20%)</title><rect x="665" y="420" width="2" height="15" fill="rgb(217,29,23)"/><text x="668.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h:163) (3 samples, 0.20%)</title><rect x="665" y="436" width="2" height="15" fill="rgb(230,200,52)"/><text x="668.00" y="446.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (10 samples, 0.65%)</title><rect x="665" y="372" width="8" height="15" fill="rgb(238,58,4)"/><text x="668.00" y="382.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (10 samples, 0.65%)</title><rect x="665" y="388" width="8" height="15" fill="rgb(247,223,18)"/><text x="668.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (10 samples, 0.65%)</title><rect x="665" y="404" width="8" height="15" fill="rgb(250,75,4)"/><text x="668.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:604) (7 samples, 0.46%)</title><rect x="667" y="420" width="6" height="15" fill="rgb(238,44,52)"/><text x="670.00" y="430.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (7 samples, 0.46%)</title><rect x="667" y="436" width="6" height="15" fill="rgb(210,12,42)"/><text x="670.00" y="446.50"></text></g><g><title>0x7f3ff5bdd902 (libc-2.29.so) (3 samples, 0.20%)</title><rect x="673" y="404" width="2" height="15" fill="rgb(238,147,27)"/><text x="676.00" y="414.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (7 samples, 0.46%)</title><rect x="673" y="388" width="5" height="15" fill="rgb(209,126,54)"/><text x="676.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (95 samples, 6.18%)</title><rect x="607" y="356" width="73" height="15" fill="rgb(223,23,27)"/><text x="610.00" y="366.50">execute_..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (9 samples, 0.59%)</title><rect x="673" y="372" width="7" height="15" fill="rgb(210,11,54)"/><text x="676.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (2 samples, 0.13%)</title><rect x="678" y="388" width="2" height="15" fill="rgb(207,222,10)"/><text x="681.00" y="398.50"></text></g><g><title>free (libc-2.29.so) (2 samples, 0.13%)</title><rect x="678" y="404" width="2" height="15" fill="rgb(209,224,54)"/><text x="681.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (98 samples, 6.38%)</title><rect x="606" y="340" width="75" height="15" fill="rgb(244,68,22)"/><text x="609.00" y="350.50">PyUFunc_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (108 samples, 7.03%)</title><rect x="599" y="324" width="83" height="15" fill="rgb(241,213,36)"/><text x="602.00" y="334.50">ufunc_gen..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (129 samples, 8.39%)</title><rect x="585" y="276" width="99" height="15" fill="rgb(205,197,0)"/><text x="588.00" y="286.50">run (mlprod..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (125 samples, 8.13%)</title><rect x="588" y="292" width="96" height="15" fill="rgb(218,110,44)"/><text x="591.00" y="302.50">run (mlprod..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (117 samples, 7.61%)</title><rect x="595" y="308" width="89" height="15" fill="rgb(235,153,35)"/><text x="598.00" y="318.50">_run (mlpr..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (545 samples, 35.46%)</title><rect x="267" y="260" width="418" height="15" fill="rgb(247,95,26)"/><text x="270.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (9 samples, 0.59%)</title><rect x="685" y="260" width="7" height="15" fill="rgb(239,23,26)"/><text x="688.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (10 samples, 0.65%)</title><rect x="692" y="260" width="8" height="15" fill="rgb(224,56,48)"/><text x="695.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (5 samples, 0.33%)</title><rect x="700" y="260" width="4" height="15" fill="rgb(212,48,32)"/><text x="703.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (22 samples, 1.43%)</title><rect x="704" y="260" width="16" height="15" fill="rgb(209,195,51)"/><text x="707.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (653 samples, 42.49%)</title><rect x="221" y="244" width="502" height="15" fill="rgb(243,99,36)"/><text x="224.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (3 samples, 0.20%)</title><rect x="720" y="260" width="3" height="15" fill="rgb(207,63,53)"/><text x="723.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (25 samples, 1.63%)</title><rect x="723" y="244" width="19" height="15" fill="rgb(221,122,30)"/><text x="726.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (10 samples, 0.65%)</title><rect x="734" y="260" width="8" height="15" fill="rgb(227,19,22)"/><text x="737.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (728 samples, 47.36%)</title><rect x="185" y="212" width="558" height="15" fill="rgb(210,123,33)"/><text x="188.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (713 samples, 46.39%)</title><rect x="196" y="228" width="547" height="15" fill="rgb(219,64,4)"/><text x="199.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (9 samples, 0.59%)</title><rect x="743" y="212" width="7" height="15" fill="rgb(251,161,12)"/><text x="746.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (2 samples, 0.13%)</title><rect x="749" y="228" width="1" height="15" fill="rgb(220,43,39)"/><text x="752.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (4 samples, 0.26%)</title><rect x="750" y="212" width="3" height="15" fill="rgb(206,93,6)"/><text x="753.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (9 samples, 0.59%)</title><rect x="764" y="228" width="7" height="15" fill="rgb(224,165,40)"/><text x="767.00" y="238.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py:509) (3 samples, 0.20%)</title><rect x="769" y="244" width="2" height="15" fill="rgb(233,67,8)"/><text x="772.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (3 samples, 0.20%)</title><rect x="776" y="260" width="2" height="15" fill="rgb(247,29,29)"/><text x="779.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (5 samples, 0.33%)</title><rect x="778" y="260" width="4" height="15" fill="rgb(253,159,39)"/><text x="781.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (4 samples, 0.26%)</title><rect x="779" y="276" width="3" height="15" fill="rgb(243,94,19)"/><text x="782.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:576) (3 samples, 0.20%)</title><rect x="782" y="260" width="2" height="15" fill="rgb(240,60,33)"/><text x="785.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (5 samples, 0.33%)</title><rect x="784" y="260" width="4" height="15" fill="rgb(232,120,17)"/><text x="787.00" y="270.50"></text></g><g><title>array_reshape (methods.c:195) (7 samples, 0.46%)</title><rect x="792" y="276" width="5" height="15" fill="rgb(212,184,21)"/><text x="795.00" y="286.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (4 samples, 0.26%)</title><rect x="797" y="308" width="3" height="15" fill="rgb(251,40,32)"/><text x="800.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (2 samples, 0.13%)</title><rect x="799" y="324" width="1" height="15" fill="rgb(224,196,43)"/><text x="802.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (62 samples, 4.03%)</title><rect x="753" y="212" width="48" height="15" fill="rgb(236,28,42)"/><text x="756.00" y="222.50">_run..</text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (39 samples, 2.54%)</title><rect x="771" y="228" width="30" height="15" fill="rgb(236,213,5)"/><text x="774.00" y="238.50">ex..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (37 samples, 2.41%)</title><rect x="773" y="244" width="28" height="15" fill="rgb(251,135,19)"/><text x="776.00" y="254.50">a..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (16 samples, 1.04%)</title><rect x="789" y="260" width="12" height="15" fill="rgb(237,85,47)"/><text x="792.00" y="270.50"></text></g><g><title>array_reshape (methods.c:210) (5 samples, 0.33%)</title><rect x="797" y="276" width="4" height="15" fill="rgb(233,211,26)"/><text x="800.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (5 samples, 0.33%)</title><rect x="797" y="292" width="4" height="15" fill="rgb(223,190,51)"/><text x="800.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (2 samples, 0.13%)</title><rect x="803" y="308" width="1" height="15" fill="rgb(240,117,5)"/><text x="806.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (2 samples, 0.13%)</title><rect x="803" y="324" width="1" height="15" fill="rgb(249,126,20)"/><text x="806.00" y="334.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (4 samples, 0.26%)</title><rect x="802" y="260" width="3" height="15" fill="rgb(249,219,8)"/><text x="805.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (4 samples, 0.26%)</title><rect x="802" y="276" width="3" height="15" fill="rgb(220,75,14)"/><text x="805.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.26%)</title><rect x="802" y="292" width="3" height="15" fill="rgb(218,76,42)"/><text x="805.00" y="302.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (3 samples, 0.20%)</title><rect x="808" y="372" width="2" height="15" fill="rgb(230,92,13)"/><text x="811.00" y="382.50"></text></g><g><title>0x7f3ff5bfdd94 (libc-2.29.so) (3 samples, 0.20%)</title><rect x="808" y="388" width="2" height="15" fill="rgb(243,152,25)"/><text x="811.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (13 samples, 0.85%)</title><rect x="801" y="212" width="10" height="15" fill="rgb(219,131,20)"/><text x="804.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (13 samples, 0.85%)</title><rect x="801" y="228" width="10" height="15" fill="rgb(238,3,33)"/><text x="804.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (12 samples, 0.78%)</title><rect x="802" y="244" width="9" height="15" fill="rgb(250,77,5)"/><text x="805.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (8 samples, 0.52%)</title><rect x="805" y="260" width="6" height="15" fill="rgb(229,94,45)"/><text x="808.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (8 samples, 0.52%)</title><rect x="805" y="276" width="6" height="15" fill="rgb(222,108,15)"/><text x="808.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 0.52%)</title><rect x="805" y="292" width="6" height="15" fill="rgb(210,112,35)"/><text x="808.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (8 samples, 0.52%)</title><rect x="805" y="308" width="6" height="15" fill="rgb(238,4,30)"/><text x="808.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (7 samples, 0.46%)</title><rect x="806" y="324" width="5" height="15" fill="rgb(212,36,44)"/><text x="809.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (6 samples, 0.39%)</title><rect x="806" y="340" width="5" height="15" fill="rgb(250,94,16)"/><text x="809.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (6 samples, 0.39%)</title><rect x="806" y="356" width="5" height="15" fill="rgb(206,88,27)"/><text x="809.00" y="366.50"></text></g><g><title>_new_argsortlike (item_selection.c:1048) (7 samples, 0.46%)</title><rect x="813" y="356" width="5" height="15" fill="rgb(205,175,11)"/><text x="816.00" y="366.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src:1915) (7 samples, 0.46%)</title><rect x="813" y="372" width="5" height="15" fill="rgb(239,204,37)"/><text x="816.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c:319) (7 samples, 0.46%)</title><rect x="813" y="388" width="5" height="15" fill="rgb(235,16,0)"/><text x="816.00" y="398.50"></text></g><g><title>_new_argsortlike (item_selection.c:1057) (2 samples, 0.13%)</title><rect x="818" y="356" width="1" height="15" fill="rgb(250,153,0)"/><text x="821.00" y="366.50"></text></g><g><title>adumb_select_float (selection.c.src:257) (6 samples, 0.39%)</title><rect x="820" y="388" width="5" height="15" fill="rgb(210,201,5)"/><text x="823.00" y="398.50"></text></g><g><title>adumb_select_float (selection.c.src:258) (43 samples, 2.80%)</title><rect x="825" y="388" width="33" height="15" fill="rgb(207,150,4)"/><text x="828.00" y="398.50">ad..</text></g><g><title>FLOAT_LT (npysort_common.h:123) (39 samples, 2.54%)</title><rect x="828" y="404" width="30" height="15" fill="rgb(237,207,3)"/><text x="831.00" y="414.50">FL..</text></g><g><title>aintroselect_float (selection.c.src:322) (51 samples, 3.32%)</title><rect x="819" y="372" width="40" height="15" fill="rgb(215,193,8)"/><text x="822.00" y="382.50">ain..</text></g><g><title>_new_argsortlike (item_selection.c:1084) (52 samples, 3.38%)</title><rect x="819" y="356" width="40" height="15" fill="rgb(249,102,27)"/><text x="822.00" y="366.50">_ne..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (64 samples, 4.16%)</title><rect x="811" y="244" width="49" height="15" fill="rgb(213,135,16)"/><text x="814.00" y="254.50">topk..</text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (64 samples, 4.16%)</title><rect x="811" y="260" width="49" height="15" fill="rgb(247,15,4)"/><text x="814.00" y="270.50">argp..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (64 samples, 4.16%)</title><rect x="811" y="276" width="49" height="15" fill="rgb(210,224,48)"/><text x="814.00" y="286.50">arra..</text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (64 samples, 4.16%)</title><rect x="811" y="292" width="49" height="15" fill="rgb(248,204,48)"/><text x="814.00" y="302.50">argp..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (63 samples, 4.10%)</title><rect x="812" y="308" width="48" height="15" fill="rgb(232,0,45)"/><text x="815.00" y="318.50">_wra..</text></g><g><title>array_argpartition (methods.c:1454) (62 samples, 4.03%)</title><rect x="813" y="324" width="47" height="15" fill="rgb(219,169,40)"/><text x="816.00" y="334.50">arra..</text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (62 samples, 4.03%)</title><rect x="813" y="340" width="47" height="15" fill="rgb(225,59,45)"/><text x="816.00" y="350.50">PyAr..</text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.20%)</title><rect x="861" y="260" width="2" height="15" fill="rgb(229,41,43)"/><text x="864.00" y="270.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2964) (2 samples, 0.13%)</title><rect x="862" y="276" width="1" height="15" fill="rgb(251,134,40)"/><text x="865.00" y="286.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c:229) (2 samples, 0.13%)</title><rect x="862" y="292" width="1" height="15" fill="rgb(231,141,0)"/><text x="865.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c:281) (2 samples, 0.13%)</title><rect x="862" y="308" width="1" height="15" fill="rgb(220,127,13)"/><text x="865.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (2 samples, 0.13%)</title><rect x="862" y="324" width="1" height="15" fill="rgb(235,81,7)"/><text x="865.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (2 samples, 0.13%)</title><rect x="862" y="340" width="1" height="15" fill="rgb(214,71,37)"/><text x="865.00" y="350.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1566) (2 samples, 0.13%)</title><rect x="864" y="276" width="2" height="15" fill="rgb(223,72,46)"/><text x="867.00" y="286.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (8 samples, 0.52%)</title><rect x="860" y="244" width="6" height="15" fill="rgb(246,182,43)"/><text x="863.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (4 samples, 0.26%)</title><rect x="863" y="260" width="3" height="15" fill="rgb(229,117,22)"/><text x="866.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (76 samples, 4.94%)</title><rect x="811" y="212" width="58" height="15" fill="rgb(210,78,32)"/><text x="814.00" y="222.50">_run (..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (76 samples, 4.94%)</title><rect x="811" y="228" width="58" height="15" fill="rgb(254,47,32)"/><text x="814.00" y="238.50">_commo..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:39) (4 samples, 0.26%)</title><rect x="866" y="244" width="3" height="15" fill="rgb(220,146,2)"/><text x="869.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (2 samples, 0.13%)</title><rect x="868" y="260" width="1" height="15" fill="rgb(233,141,12)"/><text x="871.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (2 samples, 0.13%)</title><rect x="869" y="212" width="2" height="15" fill="rgb(250,67,27)"/><text x="872.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (2 samples, 0.13%)</title><rect x="869" y="228" width="2" height="15" fill="rgb(212,202,38)"/><text x="872.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (949 samples, 61.74%)</title><rect x="143" y="196" width="729" height="15" fill="rgb(249,3,8)"/><text x="146.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (2 samples, 0.13%)</title><rect x="872" y="196" width="1" height="15" fill="rgb(236,217,40)"/><text x="875.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py:24) (2 samples, 0.13%)</title><rect x="872" y="212" width="1" height="15" fill="rgb(253,188,54)"/><text x="875.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py:29) (4 samples, 0.26%)</title><rect x="873" y="228" width="3" height="15" fill="rgb(207,53,8)"/><text x="876.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (4 samples, 0.26%)</title><rect x="873" y="244" width="3" height="15" fill="rgb(220,35,18)"/><text x="876.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.20%)</title><rect x="874" y="260" width="2" height="15" fill="rgb(249,226,21)"/><text x="877.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (3 samples, 0.20%)</title><rect x="874" y="276" width="2" height="15" fill="rgb(249,40,24)"/><text x="877.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (963 samples, 62.65%)</title><rect x="141" y="180" width="739" height="15" fill="rgb(254,176,33)"/><text x="144.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (9 samples, 0.59%)</title><rect x="873" y="196" width="7" height="15" fill="rgb(239,100,41)"/><text x="876.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (9 samples, 0.59%)</title><rect x="873" y="212" width="7" height="15" fill="rgb(209,28,44)"/><text x="876.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py:19) (5 samples, 0.33%)</title><rect x="876" y="228" width="4" height="15" fill="rgb(234,57,11)"/><text x="879.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.33%)</title><rect x="876" y="244" width="4" height="15" fill="rgb(229,170,11)"/><text x="879.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 0.33%)</title><rect x="876" y="260" width="4" height="15" fill="rgb(226,63,10)"/><text x="879.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (5 samples, 0.33%)</title><rect x="876" y="276" width="4" height="15" fill="rgb(226,144,9)"/><text x="879.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (5 samples, 0.33%)</title><rect x="876" y="292" width="4" height="15" fill="rgb(253,75,52)"/><text x="879.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src:1584) (5 samples, 0.33%)</title><rect x="876" y="308" width="4" height="15" fill="rgb(221,223,50)"/><text x="879.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src:195) (5 samples, 0.33%)</title><rect x="876" y="324" width="4" height="15" fill="rgb(247,218,28)"/><text x="879.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src:1005) (5 samples, 0.33%)</title><rect x="876" y="340" width="4" height="15" fill="rgb(218,159,37)"/><text x="879.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (5 samples, 0.33%)</title><rect x="876" y="356" width="4" height="15" fill="rgb(242,144,43)"/><text x="879.00" y="366.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (966 samples, 62.85%)</title><rect x="140" y="164" width="742" height="15" fill="rgb(236,16,0)"/><text x="143.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:61) (968 samples, 62.98%)</title><rect x="139" y="52" width="743" height="15" fill="rgb(220,82,11)"/><text x="142.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:6..</text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:60) (968 samples, 62.98%)</title><rect x="139" y="68" width="743" height="15" fill="rgb(219,36,7)"/><text x="142.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_...</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:37) (968 samples, 62.98%)</title><rect x="139" y="84" width="743" height="15" fill="rgb(254,145,33)"/><text x="142.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:31) (968 samples, 62.98%)</title><rect x="139" y="100" width="743" height="15" fill="rgb(222,9,35)"/><text x="142.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (968 samples, 62.98%)</title><rect x="139" y="116" width="743" height="15" fill="rgb(251,31,27)"/><text x="142.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (968 samples, 62.98%)</title><rect x="139" y="132" width="743" height="15" fill="rgb(218,22,25)"/><text x="142.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (968 samples, 62.98%)</title><rect x="139" y="148" width="743" height="15" fill="rgb(220,146,10)"/><text x="142.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="885" y="388" width="1" height="15" fill="rgb(243,105,7)"/><text x="888.00" y="398.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="886" y="388" width="2" height="15" fill="rgb(209,58,46)"/><text x="889.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="886" y="404" width="2" height="15" fill="rgb(243,165,30)"/><text x="889.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.20%)</title><rect x="891" y="452" width="2" height="15" fill="rgb(207,160,54)"/><text x="894.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.20%)</title><rect x="891" y="468" width="2" height="15" fill="rgb(226,67,26)"/><text x="894.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.39%)</title><rect x="891" y="436" width="4" height="15" fill="rgb(224,118,8)"/><text x="894.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.26%)</title><rect x="895" y="436" width="4" height="15" fill="rgb(221,134,50)"/><text x="898.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.26%)</title><rect x="895" y="452" width="4" height="15" fill="rgb(231,20,18)"/><text x="898.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="897" y="468" width="2" height="15" fill="rgb(233,190,49)"/><text x="900.00" y="478.50"></text></g><g><title>0x7f3ff5bfdd94 (libc-2.29.so) (7 samples, 0.46%)</title><rect x="900" y="452" width="5" height="15" fill="rgb(223,172,54)"/><text x="903.00" y="462.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.59%)</title><rect x="900" y="436" width="7" height="15" fill="rgb(209,156,49)"/><text x="903.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="905" y="452" width="2" height="15" fill="rgb(231,81,7)"/><text x="908.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="905" y="468" width="2" height="15" fill="rgb(237,116,49)"/><text x="908.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="905" y="484" width="2" height="15" fill="rgb(206,185,32)"/><text x="908.00" y="494.50"></text></g><g><title>0x7f3ff5cbbcf6 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="905" y="500" width="2" height="15" fill="rgb(231,218,7)"/><text x="908.00" y="510.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="984" y="468" width="1" height="15" fill="rgb(235,71,10)"/><text x="987.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="984" y="484" width="1" height="15" fill="rgb(253,112,37)"/><text x="987.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="984" y="500" width="1" height="15" fill="rgb(216,219,2)"/><text x="987.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="984" y="516" width="1" height="15" fill="rgb(237,203,46)"/><text x="987.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="984" y="532" width="1" height="15" fill="rgb(216,139,34)"/><text x="987.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="984" y="548" width="1" height="15" fill="rgb(254,39,5)"/><text x="987.00" y="558.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.46%)</title><rect x="986" y="468" width="5" height="15" fill="rgb(239,221,31)"/><text x="989.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.13%)</title><rect x="990" y="484" width="1" height="15" fill="rgb(231,33,28)"/><text x="993.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="990" y="500" width="1" height="15" fill="rgb(232,29,44)"/><text x="993.00" y="510.50"></text></g><g><title>0x7f3ff5bdf028 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="990" y="516" width="1" height="15" fill="rgb(205,163,25)"/><text x="993.00" y="526.50"></text></g><g><title>0x7f3ff5bdcb9b (libc-2.29.so) (2 samples, 0.13%)</title><rect x="990" y="532" width="1" height="15" fill="rgb(251,182,39)"/><text x="993.00" y="542.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (104 samples, 6.77%)</title><rect x="913" y="452" width="80" height="15" fill="rgb(212,86,24)"/><text x="916.00" y="462.50">onnxrunti..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="991" y="468" width="2" height="15" fill="rgb(223,120,10)"/><text x="994.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.13%)</title><rect x="991" y="484" width="2" height="15" fill="rgb(246,186,38)"/><text x="994.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="991" y="500" width="2" height="15" fill="rgb(226,188,33)"/><text x="994.00" y="510.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (115 samples, 7.48%)</title><rect x="907" y="436" width="88" height="15" fill="rgb(253,32,31)"/><text x="910.00" y="446.50">onnxruntim..</text></g><g><title>onnxruntime::Tensor::MutableData&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.20%)</title><rect x="993" y="452" width="2" height="15" fill="rgb(254,152,49)"/><text x="996.00" y="462.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (93 samples, 6.05%)</title><rect x="996" y="468" width="71" height="15" fill="rgb(224,159,9)"/><text x="999.00" y="478.50">onnxrunt..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (28 samples, 1.82%)</title><rect x="1046" y="484" width="21" height="15" fill="rgb(239,62,50)"/><text x="1049.00" y="494.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="1068" y="468" width="2" height="15" fill="rgb(235,90,33)"/><text x="1071.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="1068" y="484" width="2" height="15" fill="rgb(229,103,13)"/><text x="1071.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (243 samples, 15.81%)</title><rect x="884" y="340" width="187" height="15" fill="rgb(214,105,29)"/><text x="887.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Co..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (243 samples, 15.81%)</title><rect x="884" y="356" width="187" height="15" fill="rgb(247,225,46)"/><text x="887.00" y="366.50">onnxruntime::ScanImpl::E..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (243 samples, 15.81%)</title><rect x="884" y="372" width="187" height="15" fill="rgb(232,142,16)"/><text x="887.00" y="382.50">onnxruntime::scan::detai..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (237 samples, 15.42%)</title><rect x="889" y="388" width="182" height="15" fill="rgb(249,196,22)"/><text x="892.00" y="398.50">onnxruntime::utils::Exe..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (237 samples, 15.42%)</title><rect x="889" y="404" width="182" height="15" fill="rgb(240,55,30)"/><text x="892.00" y="414.50">onnxruntime::utils::Exe..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (236 samples, 15.35%)</title><rect x="889" y="420" width="182" height="15" fill="rgb(241,24,54)"/><text x="892.00" y="430.50">onnxruntime::Sequential..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (98 samples, 6.38%)</title><rect x="995" y="436" width="76" height="15" fill="rgb(240,131,49)"/><text x="998.00" y="446.50">onnxrunt..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (97 samples, 6.31%)</title><rect x="996" y="452" width="75" height="15" fill="rgb(205,13,15)"/><text x="999.00" y="462.50">onnxrunt..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.52%)</title><rect x="1071" y="340" width="6" height="15" fill="rgb(239,112,42)"/><text x="1074.00" y="350.50"></text></g><g><title>0x7f3ff5dafe91 (libm-2.29.so) (3 samples, 0.20%)</title><rect x="1139" y="372" width="2" height="15" fill="rgb(228,143,17)"/><text x="1142.00" y="382.50"></text></g><g><title>free (libc-2.29.so) (2 samples, 0.13%)</title><rect x="1141" y="372" width="2" height="15" fill="rgb(223,81,0)"/><text x="1144.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (5 samples, 0.33%)</title><rect x="1143" y="372" width="4" height="15" fill="rgb(239,219,30)"/><text x="1146.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.26%)</title><rect x="1143" y="388" width="4" height="15" fill="rgb(218,115,46)"/><text x="1146.00" y="398.50"></text></g><g><title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.26%)</title><rect x="1147" y="372" width="3" height="15" fill="rgb(235,151,27)"/><text x="1150.00" y="382.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (100 samples, 6.51%)</title><rect x="1077" y="340" width="76" height="15" fill="rgb(241,188,38)"/><text x="1080.00" y="350.50">onnxrunt..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (100 samples, 6.51%)</title><rect x="1077" y="356" width="76" height="15" fill="rgb(205,128,42)"/><text x="1080.00" y="366.50">onnxrunt..</text></g><g><title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.33%)</title><rect x="1150" y="372" width="3" height="15" fill="rgb(254,184,45)"/><text x="1153.00" y="382.50"></text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (399 samples, 25.96%)</title><rect x="882" y="164" width="307" height="15" fill="rgb(250,149,24)"/><text x="885.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (399 samples, 25.96%)</title><rect x="882" y="180" width="307" height="15" fill="rgb(221,66,2)"/><text x="885.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.p..</text></g><g><title>run (onnxruntime/capi/session.py:136) (399 samples, 25.96%)</title><rect x="882" y="196" width="307" height="15" fill="rgb(244,69,49)"/><text x="885.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (398 samples, 25.89%)</title><rect x="883" y="212" width="306" height="15" fill="rgb(234,41,34)"/><text x="886.00" y="222.50">pybind11::cpp_function::dispatcher (onnxr..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (398 samples, 25.89%)</title><rect x="883" y="228" width="306" height="15" fill="rgb(231,32,43)"/><text x="886.00" y="238.50">void pybind11::cpp_function::initialize&lt;o..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (398 samples, 25.89%)</title><rect x="883" y="244" width="306" height="15" fill="rgb(220,126,25)"/><text x="886.00" y="254.50">onnxruntime::python::addObjectMethods(pyb..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (398 samples, 25.89%)</title><rect x="883" y="260" width="306" height="15" fill="rgb(246,21,28)"/><text x="886.00" y="270.50">onnxruntime::InferenceSession::Run (onnxr..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (398 samples, 25.89%)</title><rect x="883" y="276" width="306" height="15" fill="rgb(243,163,27)"/><text x="886.00" y="286.50">onnxruntime::InferenceSession::Run (onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (398 samples, 25.89%)</title><rect x="883" y="292" width="306" height="15" fill="rgb(221,188,45)"/><text x="886.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (398 samples, 25.89%)</title><rect x="883" y="308" width="306" height="15" fill="rgb(254,124,6)"/><text x="886.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onn..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (398 samples, 25.89%)</title><rect x="883" y="324" width="306" height="15" fill="rgb(237,169,35)"/><text x="886.00" y="334.50">onnxruntime::SequentialExecutor::Execute ..</text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (46 samples, 2.99%)</title><rect x="1153" y="340" width="36" height="15" fill="rgb(205,140,14)"/><text x="1156.00" y="350.50">onn..</text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (46 samples, 2.99%)</title><rect x="1153" y="356" width="36" height="15" fill="rgb(208,39,34)"/><text x="1156.00" y="366.50">onn..</text></g><g><title>all (1,537 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(220,73,53)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:68) (400 samples, 26.02%)</title><rect x="882" y="52" width="308" height="15" fill="rgb(211,59,25)"/><text x="885.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_defau..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:67) (400 samples, 26.02%)</title><rect x="882" y="68" width="308" height="15" fill="rgb(214,166,51)"/><text x="885.00" y="78.50">profile_ort (bench_KNeighborsRegressor_de..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:37) (400 samples, 26.02%)</title><rect x="882" y="84" width="308" height="15" fill="rgb(245,199,16)"/><text x="885.00" y="94.50">setup_profile (bench_KNeighborsRegressor_..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:31) (400 samples, 26.02%)</title><rect x="882" y="100" width="308" height="15" fill="rgb(232,40,38)"/><text x="885.00" y="110.50">profile (bench_KNeighborsRegressor_defaul..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (400 samples, 26.02%)</title><rect x="882" y="116" width="308" height="15" fill="rgb(236,198,16)"/><text x="885.00" y="126.50">time_predict (mlprodict/asv_benchmark/com..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (400 samples, 26.02%)</title><rect x="882" y="132" width="308" height="15" fill="rgb(239,3,28)"/><text x="885.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (400 samples, 26.02%)</title><rect x="882" y="148" width="308" height="15" fill="rgb(249,81,22)"/><text x="885.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:4..</text></g></g></svg>