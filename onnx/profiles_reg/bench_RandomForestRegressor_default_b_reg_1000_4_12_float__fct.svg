<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2022" onload="init(evt)" viewBox="0 0 1200 2022" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="2022" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="2005.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="2005.00"> </text><g id="frames"><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="10" y="868" width="5" height="15" fill="rgb(244,92,37)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="10" y="884" width="5" height="15" fill="rgb(234,69,41)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="10" y="900" width="5" height="15" fill="rgb(229,221,13)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (2 samples, 0.43%)</title><rect x="10" y="916" width="5" height="15" fill="rgb(243,4,27)"/><text x="13.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="10" y="932" width="5" height="15" fill="rgb(250,147,15)"/><text x="13.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="948" width="3" height="15" fill="rgb(230,122,36)"/><text x="15.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="964" width="3" height="15" fill="rgb(222,105,43)"/><text x="15.00" y="974.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="980" width="3" height="15" fill="rgb(218,31,18)"/><text x="15.00" y="990.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="996" width="3" height="15" fill="rgb(216,41,19)"/><text x="15.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="468" width="7" height="15" fill="rgb(252,100,16)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (3 samples, 0.65%)</title><rect x="10" y="484" width="7" height="15" fill="rgb(213,200,24)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="500" width="7" height="15" fill="rgb(215,81,54)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="516" width="7" height="15" fill="rgb(250,0,17)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="532" width="7" height="15" fill="rgb(240,168,4)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="10" y="548" width="7" height="15" fill="rgb(212,29,23)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="564" width="7" height="15" fill="rgb(231,160,18)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (3 samples, 0.65%)</title><rect x="10" y="580" width="7" height="15" fill="rgb(223,181,40)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="596" width="7" height="15" fill="rgb(208,225,44)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="612" width="7" height="15" fill="rgb(242,66,28)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="628" width="7" height="15" fill="rgb(239,148,22)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="644" width="7" height="15" fill="rgb(211,46,19)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="660" width="7" height="15" fill="rgb(221,198,7)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="676" width="7" height="15" fill="rgb(228,178,6)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="10" y="692" width="7" height="15" fill="rgb(246,63,25)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="708" width="7" height="15" fill="rgb(229,192,21)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (3 samples, 0.65%)</title><rect x="10" y="724" width="7" height="15" fill="rgb(224,77,35)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="740" width="7" height="15" fill="rgb(222,28,28)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="756" width="7" height="15" fill="rgb(243,155,44)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="772" width="7" height="15" fill="rgb(228,168,40)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="10" y="788" width="7" height="15" fill="rgb(228,78,12)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="804" width="7" height="15" fill="rgb(249,123,23)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (3 samples, 0.65%)</title><rect x="10" y="820" width="7" height="15" fill="rgb(235,212,27)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (3 samples, 0.65%)</title><rect x="10" y="836" width="7" height="15" fill="rgb(254,158,41)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (3 samples, 0.65%)</title><rect x="10" y="852" width="7" height="15" fill="rgb(249,108,10)"/><text x="13.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="868" width="2" height="15" fill="rgb(254,207,32)"/><text x="18.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="884" width="2" height="15" fill="rgb(220,196,47)"/><text x="18.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="900" width="2" height="15" fill="rgb(210,189,41)"/><text x="18.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="916" width="2" height="15" fill="rgb(241,212,16)"/><text x="18.00" y="926.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="932" width="2" height="15" fill="rgb(218,74,2)"/><text x="18.00" y="942.50"></text></g><g><title>os_listdir (python3.7) (1 samples, 0.22%)</title><rect x="15" y="948" width="2" height="15" fill="rgb(238,80,23)"/><text x="18.00" y="958.50"></text></g><g><title>readdir64 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="15" y="964" width="2" height="15" fill="rgb(242,221,24)"/><text x="18.00" y="974.50"></text></g><g><title>0x7f58ddfb2237 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="15" y="980" width="2" height="15" fill="rgb(247,180,3)"/><text x="18.00" y="990.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (4 samples, 0.87%)</title><rect x="10" y="292" width="10" height="15" fill="rgb(226,50,18)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="308" width="10" height="15" fill="rgb(233,47,54)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="324" width="10" height="15" fill="rgb(246,181,2)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="340" width="10" height="15" fill="rgb(223,105,11)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.87%)</title><rect x="10" y="356" width="10" height="15" fill="rgb(239,147,12)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="372" width="10" height="15" fill="rgb(243,80,1)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (4 samples, 0.87%)</title><rect x="10" y="388" width="10" height="15" fill="rgb(224,165,28)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="404" width="10" height="15" fill="rgb(224,218,2)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="420" width="10" height="15" fill="rgb(228,50,3)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="10" y="436" width="10" height="15" fill="rgb(243,58,19)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.87%)</title><rect x="10" y="452" width="10" height="15" fill="rgb(223,177,40)"/><text x="13.00" y="462.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="468" width="3" height="15" fill="rgb(228,140,19)"/><text x="20.00" y="478.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="484" width="3" height="15" fill="rgb(226,121,4)"/><text x="20.00" y="494.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="10" y="196" width="12" height="15" fill="rgb(238,152,12)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="10" y="212" width="12" height="15" fill="rgb(208,217,42)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="10" y="228" width="12" height="15" fill="rgb(212,177,48)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="10" y="244" width="12" height="15" fill="rgb(205,176,14)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="10" y="260" width="12" height="15" fill="rgb(230,50,38)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="10" y="276" width="12" height="15" fill="rgb(207,212,10)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (1 samples, 0.22%)</title><rect x="20" y="292" width="2" height="15" fill="rgb(252,193,32)"/><text x="23.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="308" width="2" height="15" fill="rgb(214,164,53)"/><text x="23.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="324" width="2" height="15" fill="rgb(216,176,49)"/><text x="23.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="340" width="2" height="15" fill="rgb(241,177,42)"/><text x="23.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="356" width="2" height="15" fill="rgb(224,142,37)"/><text x="23.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="372" width="2" height="15" fill="rgb(211,93,36)"/><text x="23.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (1 samples, 0.22%)</title><rect x="20" y="388" width="2" height="15" fill="rgb(231,93,2)"/><text x="23.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="404" width="2" height="15" fill="rgb(252,7,51)"/><text x="23.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="420" width="2" height="15" fill="rgb(247,2,53)"/><text x="23.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="436" width="2" height="15" fill="rgb(215,16,31)"/><text x="23.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="452" width="2" height="15" fill="rgb(221,165,48)"/><text x="23.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="468" width="2" height="15" fill="rgb(210,42,12)"/><text x="23.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (1 samples, 0.22%)</title><rect x="20" y="484" width="2" height="15" fill="rgb(222,113,34)"/><text x="23.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="500" width="2" height="15" fill="rgb(249,24,39)"/><text x="23.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="516" width="2" height="15" fill="rgb(231,190,30)"/><text x="23.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="532" width="2" height="15" fill="rgb(240,29,41)"/><text x="23.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="548" width="2" height="15" fill="rgb(218,34,40)"/><text x="23.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="564" width="2" height="15" fill="rgb(245,186,8)"/><text x="23.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (1 samples, 0.22%)</title><rect x="20" y="580" width="2" height="15" fill="rgb(241,89,26)"/><text x="23.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="596" width="2" height="15" fill="rgb(245,176,15)"/><text x="23.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="612" width="2" height="15" fill="rgb(207,79,18)"/><text x="23.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="628" width="2" height="15" fill="rgb(239,52,28)"/><text x="23.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="644" width="2" height="15" fill="rgb(232,183,17)"/><text x="23.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="660" width="2" height="15" fill="rgb(213,114,34)"/><text x="23.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (1 samples, 0.22%)</title><rect x="20" y="676" width="2" height="15" fill="rgb(243,199,31)"/><text x="23.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="692" width="2" height="15" fill="rgb(241,83,39)"/><text x="23.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="708" width="2" height="15" fill="rgb(227,212,24)"/><text x="23.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="724" width="2" height="15" fill="rgb(226,150,37)"/><text x="23.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="740" width="2" height="15" fill="rgb(208,183,27)"/><text x="23.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="756" width="2" height="15" fill="rgb(242,214,18)"/><text x="23.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (1 samples, 0.22%)</title><rect x="20" y="772" width="2" height="15" fill="rgb(235,3,10)"/><text x="23.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="788" width="2" height="15" fill="rgb(231,66,27)"/><text x="23.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="804" width="2" height="15" fill="rgb(211,217,49)"/><text x="23.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="820" width="2" height="15" fill="rgb(214,121,18)"/><text x="23.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="836" width="2" height="15" fill="rgb(220,85,17)"/><text x="23.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="852" width="2" height="15" fill="rgb(227,123,8)"/><text x="23.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="868" width="2" height="15" fill="rgb(249,142,21)"/><text x="23.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="884" width="2" height="15" fill="rgb(205,166,50)"/><text x="23.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (1 samples, 0.22%)</title><rect x="20" y="900" width="2" height="15" fill="rgb(247,202,21)"/><text x="23.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="916" width="2" height="15" fill="rgb(222,135,42)"/><text x="23.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="932" width="2" height="15" fill="rgb(232,183,22)"/><text x="23.00" y="942.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="948" width="2" height="15" fill="rgb(253,41,16)"/><text x="23.00" y="958.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="964" width="2" height="15" fill="rgb(245,89,36)"/><text x="23.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="980" width="2" height="15" fill="rgb(228,195,36)"/><text x="23.00" y="990.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_distn_infrastructure.py) (1 samples, 0.22%)</title><rect x="20" y="996" width="2" height="15" fill="rgb(247,147,16)"/><text x="23.00" y="1006.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1012" width="2" height="15" fill="rgb(240,117,32)"/><text x="23.00" y="1022.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1028" width="2" height="15" fill="rgb(213,84,6)"/><text x="23.00" y="1038.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1044" width="2" height="15" fill="rgb(215,105,20)"/><text x="23.00" y="1054.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1060" width="2" height="15" fill="rgb(207,27,44)"/><text x="23.00" y="1070.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1076" width="2" height="15" fill="rgb(246,106,45)"/><text x="23.00" y="1086.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1092" width="2" height="15" fill="rgb(215,88,15)"/><text x="23.00" y="1102.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1108" width="2" height="15" fill="rgb(221,81,15)"/><text x="23.00" y="1118.50"></text></g><g><title>&lt;module&gt; (scipy/optimize/__init__.py) (1 samples, 0.22%)</title><rect x="20" y="1124" width="2" height="15" fill="rgb(225,205,45)"/><text x="23.00" y="1134.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1140" width="2" height="15" fill="rgb(238,50,52)"/><text x="23.00" y="1150.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1156" width="2" height="15" fill="rgb(208,188,19)"/><text x="23.00" y="1166.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1172" width="2" height="15" fill="rgb(222,30,43)"/><text x="23.00" y="1182.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1188" width="2" height="15" fill="rgb(253,206,36)"/><text x="23.00" y="1198.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1204" width="2" height="15" fill="rgb(218,67,37)"/><text x="23.00" y="1214.50"></text></g><g><title>&lt;module&gt; (scipy/optimize/_minimize.py) (1 samples, 0.22%)</title><rect x="20" y="1220" width="2" height="15" fill="rgb(226,40,53)"/><text x="23.00" y="1230.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1236" width="2" height="15" fill="rgb(249,59,45)"/><text x="23.00" y="1246.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1252" width="2" height="15" fill="rgb(233,40,6)"/><text x="23.00" y="1262.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1268" width="2" height="15" fill="rgb(228,104,32)"/><text x="23.00" y="1278.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1284" width="2" height="15" fill="rgb(212,13,2)"/><text x="23.00" y="1294.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1300" width="2" height="15" fill="rgb(222,188,30)"/><text x="23.00" y="1310.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1316" width="2" height="15" fill="rgb(238,155,15)"/><text x="23.00" y="1326.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1332" width="2" height="15" fill="rgb(251,109,28)"/><text x="23.00" y="1342.50"></text></g><g><title>spec_from_file_location (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1348" width="2" height="15" fill="rgb(207,72,14)"/><text x="23.00" y="1358.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="484" width="3" height="15" fill="rgb(212,144,29)"/><text x="25.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="500" width="3" height="15" fill="rgb(230,146,53)"/><text x="25.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="516" width="3" height="15" fill="rgb(239,223,29)"/><text x="25.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="532" width="3" height="15" fill="rgb(248,196,24)"/><text x="25.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="548" width="3" height="15" fill="rgb(253,122,36)"/><text x="25.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="564" width="3" height="15" fill="rgb(207,109,37)"/><text x="25.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (1 samples, 0.22%)</title><rect x="22" y="580" width="3" height="15" fill="rgb(247,75,31)"/><text x="25.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="596" width="3" height="15" fill="rgb(244,153,8)"/><text x="25.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="612" width="3" height="15" fill="rgb(224,67,37)"/><text x="25.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="628" width="3" height="15" fill="rgb(246,1,2)"/><text x="25.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="644" width="3" height="15" fill="rgb(241,164,53)"/><text x="25.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="660" width="3" height="15" fill="rgb(221,102,0)"/><text x="25.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (1 samples, 0.22%)</title><rect x="22" y="676" width="3" height="15" fill="rgb(209,192,1)"/><text x="25.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="692" width="3" height="15" fill="rgb(206,18,38)"/><text x="25.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="708" width="3" height="15" fill="rgb(207,31,15)"/><text x="25.00" y="718.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="724" width="3" height="15" fill="rgb(238,116,47)"/><text x="25.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="740" width="3" height="15" fill="rgb(241,173,46)"/><text x="25.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="756" width="3" height="15" fill="rgb(223,159,30)"/><text x="25.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="772" width="3" height="15" fill="rgb(231,173,35)"/><text x="25.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="788" width="3" height="15" fill="rgb(213,69,6)"/><text x="25.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="804" width="3" height="15" fill="rgb(223,28,33)"/><text x="25.00" y="814.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/optim/__init__.py) (1 samples, 0.22%)</title><rect x="22" y="820" width="3" height="15" fill="rgb(232,18,5)"/><text x="25.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="836" width="3" height="15" fill="rgb(226,127,24)"/><text x="25.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="852" width="3" height="15" fill="rgb(212,45,42)"/><text x="25.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="868" width="3" height="15" fill="rgb(215,223,30)"/><text x="25.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="884" width="3" height="15" fill="rgb(238,110,41)"/><text x="25.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="900" width="3" height="15" fill="rgb(245,49,40)"/><text x="25.00" y="910.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/optim/onnx_helper.py) (1 samples, 0.22%)</title><rect x="22" y="916" width="3" height="15" fill="rgb(219,159,10)"/><text x="25.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="932" width="3" height="15" fill="rgb(235,76,35)"/><text x="25.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="948" width="3" height="15" fill="rgb(233,164,46)"/><text x="25.00" y="958.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="964" width="3" height="15" fill="rgb(216,182,33)"/><text x="25.00" y="974.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="980" width="3" height="15" fill="rgb(242,15,1)"/><text x="25.00" y="990.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="996" width="3" height="15" fill="rgb(227,102,25)"/><text x="25.00" y="1006.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1012" width="3" height="15" fill="rgb(214,149,1)"/><text x="25.00" y="1022.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1028" width="3" height="15" fill="rgb(251,158,45)"/><text x="25.00" y="1038.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1044" width="3" height="15" fill="rgb(240,221,4)"/><text x="25.00" y="1054.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1060" width="3" height="15" fill="rgb(239,203,54)"/><text x="25.00" y="1070.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.22%)</title><rect x="22" y="1076" width="3" height="15" fill="rgb(213,140,2)"/><text x="25.00" y="1086.50"></text></g><g><title>__xstat (libc-2.29.so) (1 samples, 0.22%)</title><rect x="22" y="1092" width="3" height="15" fill="rgb(245,118,27)"/><text x="25.00" y="1102.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="772" width="2" height="15" fill="rgb(243,150,20)"/><text x="28.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="788" width="2" height="15" fill="rgb(212,38,43)"/><text x="28.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="804" width="2" height="15" fill="rgb(210,117,37)"/><text x="28.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="820" width="2" height="15" fill="rgb(242,141,28)"/><text x="28.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="25" y="836" width="2" height="15" fill="rgb(209,217,35)"/><text x="28.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="852" width="2" height="15" fill="rgb(212,11,33)"/><text x="28.00" y="862.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/__init__.py) (1 samples, 0.22%)</title><rect x="25" y="868" width="2" height="15" fill="rgb(246,5,51)"/><text x="28.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="884" width="2" height="15" fill="rgb(241,175,44)"/><text x="28.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="900" width="2" height="15" fill="rgb(254,171,15)"/><text x="28.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="916" width="2" height="15" fill="rgb(205,90,30)"/><text x="28.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="25" y="932" width="2" height="15" fill="rgb(250,73,1)"/><text x="28.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="948" width="2" height="15" fill="rgb(246,16,30)"/><text x="28.00" y="958.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/datetimes.py) (1 samples, 0.22%)</title><rect x="25" y="964" width="2" height="15" fill="rgb(242,27,1)"/><text x="28.00" y="974.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="980" width="2" height="15" fill="rgb(219,83,2)"/><text x="28.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="996" width="2" height="15" fill="rgb(212,228,49)"/><text x="28.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1012" width="2" height="15" fill="rgb(209,45,29)"/><text x="28.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1028" width="2" height="15" fill="rgb(238,122,29)"/><text x="28.00" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1044" width="2" height="15" fill="rgb(205,31,49)"/><text x="28.00" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="25" y="1060" width="2" height="15" fill="rgb(249,67,27)"/><text x="28.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1076" width="2" height="15" fill="rgb(250,23,1)"/><text x="28.00" y="1086.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/datetimelike.py) (1 samples, 0.22%)</title><rect x="25" y="1092" width="2" height="15" fill="rgb(206,142,37)"/><text x="28.00" y="1102.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1108" width="2" height="15" fill="rgb(215,203,0)"/><text x="28.00" y="1118.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1124" width="2" height="15" fill="rgb(247,136,12)"/><text x="28.00" y="1134.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1140" width="2" height="15" fill="rgb(239,192,16)"/><text x="28.00" y="1150.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1156" width="2" height="15" fill="rgb(222,110,33)"/><text x="28.00" y="1166.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1172" width="2" height="15" fill="rgb(248,10,54)"/><text x="28.00" y="1182.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="25" y="1188" width="2" height="15" fill="rgb(237,46,39)"/><text x="28.00" y="1198.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1204" width="2" height="15" fill="rgb(227,58,54)"/><text x="28.00" y="1214.50"></text></g><g><title>&lt;module&gt; (pandas/tseries/frequencies.py) (1 samples, 0.22%)</title><rect x="25" y="1220" width="2" height="15" fill="rgb(254,35,48)"/><text x="28.00" y="1230.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1236" width="2" height="15" fill="rgb(237,130,23)"/><text x="28.00" y="1246.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1252" width="2" height="15" fill="rgb(209,161,5)"/><text x="28.00" y="1262.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="25" y="1268" width="2" height="15" fill="rgb(248,84,42)"/><text x="28.00" y="1278.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="25" y="1284" width="2" height="15" fill="rgb(214,90,5)"/><text x="28.00" y="1294.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="25" y="1300" width="2" height="15" fill="rgb(243,17,33)"/><text x="28.00" y="1310.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="25" y="1316" width="2" height="15" fill="rgb(236,25,18)"/><text x="28.00" y="1326.50"></text></g><g><title>&lt;module&gt; (pandas/core/generic.py) (1 samples, 0.22%)</title><rect x="27" y="1108" width="3" height="15" fill="rgb(219,105,52)"/><text x="30.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1124" width="3" height="15" fill="rgb(217,198,53)"/><text x="30.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1140" width="3" height="15" fill="rgb(229,73,25)"/><text x="30.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1156" width="3" height="15" fill="rgb(219,189,4)"/><text x="30.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="27" y="1172" width="3" height="15" fill="rgb(252,23,3)"/><text x="30.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1188" width="3" height="15" fill="rgb(245,62,33)"/><text x="30.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/core/index.py) (1 samples, 0.22%)</title><rect x="27" y="1204" width="3" height="15" fill="rgb(232,221,8)"/><text x="30.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1220" width="3" height="15" fill="rgb(215,221,33)"/><text x="30.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1236" width="3" height="15" fill="rgb(225,117,50)"/><text x="30.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1252" width="3" height="15" fill="rgb(235,126,0)"/><text x="30.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="27" y="1268" width="3" height="15" fill="rgb(231,210,34)"/><text x="30.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1284" width="3" height="15" fill="rgb(250,219,35)"/><text x="30.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/api.py) (1 samples, 0.22%)</title><rect x="27" y="1300" width="3" height="15" fill="rgb(249,175,6)"/><text x="30.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1316" width="3" height="15" fill="rgb(250,189,35)"/><text x="30.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1332" width="3" height="15" fill="rgb(246,201,33)"/><text x="30.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1348" width="3" height="15" fill="rgb(211,101,7)"/><text x="30.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="27" y="1364" width="3" height="15" fill="rgb(223,156,46)"/><text x="30.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1380" width="3" height="15" fill="rgb(230,173,48)"/><text x="30.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/interval.py) (1 samples, 0.22%)</title><rect x="27" y="1396" width="3" height="15" fill="rgb(220,166,17)"/><text x="30.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1412" width="3" height="15" fill="rgb(236,141,51)"/><text x="30.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1428" width="3" height="15" fill="rgb(229,187,37)"/><text x="30.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="27" y="1444" width="3" height="15" fill="rgb(211,162,48)"/><text x="30.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="27" y="1460" width="3" height="15" fill="rgb(245,133,11)"/><text x="30.00" y="1470.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="27" y="1476" width="3" height="15" fill="rgb(234,6,18)"/><text x="30.00" y="1486.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="27" y="1492" width="3" height="15" fill="rgb(223,181,4)"/><text x="30.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="30" y="1796" width="2" height="15" fill="rgb(214,1,13)"/><text x="33.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="30" y="1812" width="2" height="15" fill="rgb(222,113,16)"/><text x="33.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="30" y="1828" width="2" height="15" fill="rgb(207,111,33)"/><text x="33.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="30" y="1844" width="2" height="15" fill="rgb(223,153,54)"/><text x="33.00" y="1854.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="30" y="1860" width="2" height="15" fill="rgb(231,226,49)"/><text x="33.00" y="1870.50"></text></g><g><title>get_data (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="30" y="1876" width="2" height="15" fill="rgb(215,114,29)"/><text x="33.00" y="1886.50"></text></g><g><title>read (libpthread-2.29.so) (1 samples, 0.22%)</title><rect x="30" y="1892" width="2" height="15" fill="rgb(207,66,2)"/><text x="33.00" y="1902.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/style.py) (2 samples, 0.43%)</title><rect x="30" y="1684" width="5" height="15" fill="rgb(217,48,45)"/><text x="33.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1700" width="5" height="15" fill="rgb(222,76,1)"/><text x="33.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1716" width="5" height="15" fill="rgb(248,152,34)"/><text x="33.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1732" width="5" height="15" fill="rgb(244,74,41)"/><text x="33.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="30" y="1748" width="5" height="15" fill="rgb(226,91,27)"/><text x="33.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="30" y="1764" width="5" height="15" fill="rgb(246,181,19)"/><text x="33.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/cm.py) (2 samples, 0.43%)</title><rect x="30" y="1780" width="5" height="15" fill="rgb(206,208,42)"/><text x="33.00" y="1790.50"></text></g><g><title>_generate_cmap (matplotlib/cm.py) (1 samples, 0.22%)</title><rect x="32" y="1796" width="3" height="15" fill="rgb(211,215,24)"/><text x="35.00" y="1806.50"></text></g><g><title>from_list (matplotlib/colors.py) (1 samples, 0.22%)</title><rect x="32" y="1812" width="3" height="15" fill="rgb(224,47,27)"/><text x="35.00" y="1822.50"></text></g><g><title>to_rgba (matplotlib/colors.py) (1 samples, 0.22%)</title><rect x="32" y="1828" width="3" height="15" fill="rgb(208,32,53)"/><text x="35.00" y="1838.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (6 samples, 1.30%)</title><rect x="22" y="244" width="16" height="15" fill="rgb(233,67,19)"/><text x="25.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="260" width="16" height="15" fill="rgb(210,108,44)"/><text x="25.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="276" width="16" height="15" fill="rgb(243,5,16)"/><text x="25.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="292" width="16" height="15" fill="rgb(235,171,34)"/><text x="25.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.30%)</title><rect x="22" y="308" width="16" height="15" fill="rgb(205,86,47)"/><text x="25.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="324" width="16" height="15" fill="rgb(253,3,10)"/><text x="25.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (6 samples, 1.30%)</title><rect x="22" y="340" width="16" height="15" fill="rgb(216,51,29)"/><text x="25.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="356" width="16" height="15" fill="rgb(232,140,23)"/><text x="25.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="372" width="16" height="15" fill="rgb(249,184,8)"/><text x="25.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="388" width="16" height="15" fill="rgb(230,36,24)"/><text x="25.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.30%)</title><rect x="22" y="404" width="16" height="15" fill="rgb(238,100,12)"/><text x="25.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="420" width="16" height="15" fill="rgb(222,228,2)"/><text x="25.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (6 samples, 1.30%)</title><rect x="22" y="436" width="16" height="15" fill="rgb(237,197,24)"/><text x="25.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="452" width="16" height="15" fill="rgb(225,0,53)"/><text x="25.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.30%)</title><rect x="22" y="468" width="16" height="15" fill="rgb(233,57,30)"/><text x="25.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="484" width="13" height="15" fill="rgb(222,174,49)"/><text x="28.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="25" y="500" width="13" height="15" fill="rgb(225,48,41)"/><text x="28.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="516" width="13" height="15" fill="rgb(221,133,18)"/><text x="28.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (5 samples, 1.08%)</title><rect x="25" y="532" width="13" height="15" fill="rgb(212,134,45)"/><text x="28.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="548" width="13" height="15" fill="rgb(254,181,31)"/><text x="28.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="564" width="13" height="15" fill="rgb(221,225,17)"/><text x="28.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="580" width="13" height="15" fill="rgb(219,60,6)"/><text x="28.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="25" y="596" width="13" height="15" fill="rgb(224,110,3)"/><text x="28.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="612" width="13" height="15" fill="rgb(206,128,6)"/><text x="28.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (5 samples, 1.08%)</title><rect x="25" y="628" width="13" height="15" fill="rgb(214,95,22)"/><text x="28.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="644" width="13" height="15" fill="rgb(244,114,3)"/><text x="28.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="660" width="13" height="15" fill="rgb(235,129,26)"/><text x="28.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="676" width="13" height="15" fill="rgb(234,76,19)"/><text x="28.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="25" y="692" width="13" height="15" fill="rgb(213,74,6)"/><text x="28.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="708" width="13" height="15" fill="rgb(224,129,45)"/><text x="28.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (5 samples, 1.08%)</title><rect x="25" y="724" width="13" height="15" fill="rgb(214,223,25)"/><text x="28.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="740" width="13" height="15" fill="rgb(226,10,23)"/><text x="28.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="25" y="756" width="13" height="15" fill="rgb(236,77,3)"/><text x="28.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="772" width="11" height="15" fill="rgb(208,187,53)"/><text x="30.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.87%)</title><rect x="27" y="788" width="11" height="15" fill="rgb(231,49,4)"/><text x="30.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="804" width="11" height="15" fill="rgb(250,204,40)"/><text x="30.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (4 samples, 0.87%)</title><rect x="27" y="820" width="11" height="15" fill="rgb(213,19,36)"/><text x="30.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="836" width="11" height="15" fill="rgb(242,165,39)"/><text x="30.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="852" width="11" height="15" fill="rgb(211,209,48)"/><text x="30.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="868" width="11" height="15" fill="rgb(206,110,21)"/><text x="30.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.87%)</title><rect x="27" y="884" width="11" height="15" fill="rgb(223,170,45)"/><text x="30.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="900" width="11" height="15" fill="rgb(240,212,36)"/><text x="30.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (4 samples, 0.87%)</title><rect x="27" y="916" width="11" height="15" fill="rgb(217,40,21)"/><text x="30.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="932" width="11" height="15" fill="rgb(213,67,33)"/><text x="30.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="948" width="11" height="15" fill="rgb(230,31,23)"/><text x="30.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="964" width="11" height="15" fill="rgb(215,210,36)"/><text x="30.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.87%)</title><rect x="27" y="980" width="11" height="15" fill="rgb(241,141,47)"/><text x="30.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="996" width="11" height="15" fill="rgb(225,103,6)"/><text x="30.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (4 samples, 0.87%)</title><rect x="27" y="1012" width="11" height="15" fill="rgb(226,0,47)"/><text x="30.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="1028" width="11" height="15" fill="rgb(246,132,43)"/><text x="30.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="1044" width="11" height="15" fill="rgb(228,147,50)"/><text x="30.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="1060" width="11" height="15" fill="rgb(231,66,13)"/><text x="30.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.87%)</title><rect x="27" y="1076" width="11" height="15" fill="rgb(232,62,48)"/><text x="30.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.87%)</title><rect x="27" y="1092" width="11" height="15" fill="rgb(224,220,42)"/><text x="30.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (3 samples, 0.65%)</title><rect x="30" y="1108" width="8" height="15" fill="rgb(230,100,45)"/><text x="33.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1124" width="8" height="15" fill="rgb(220,120,8)"/><text x="33.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1140" width="8" height="15" fill="rgb(247,146,11)"/><text x="33.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1156" width="8" height="15" fill="rgb(234,201,15)"/><text x="33.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="30" y="1172" width="8" height="15" fill="rgb(244,183,46)"/><text x="33.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1188" width="8" height="15" fill="rgb(214,225,17)"/><text x="33.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (3 samples, 0.65%)</title><rect x="30" y="1204" width="8" height="15" fill="rgb(237,220,23)"/><text x="33.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1220" width="8" height="15" fill="rgb(215,102,3)"/><text x="33.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1236" width="8" height="15" fill="rgb(210,189,53)"/><text x="33.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1252" width="8" height="15" fill="rgb(246,92,20)"/><text x="33.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="30" y="1268" width="8" height="15" fill="rgb(214,98,52)"/><text x="33.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1284" width="8" height="15" fill="rgb(219,148,54)"/><text x="33.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (3 samples, 0.65%)</title><rect x="30" y="1300" width="8" height="15" fill="rgb(223,206,51)"/><text x="33.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1316" width="8" height="15" fill="rgb(205,95,39)"/><text x="33.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1332" width="8" height="15" fill="rgb(205,40,49)"/><text x="33.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1348" width="8" height="15" fill="rgb(208,119,54)"/><text x="33.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="30" y="1364" width="8" height="15" fill="rgb(253,123,44)"/><text x="33.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1380" width="8" height="15" fill="rgb(247,227,10)"/><text x="33.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (3 samples, 0.65%)</title><rect x="30" y="1396" width="8" height="15" fill="rgb(208,132,6)"/><text x="33.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1412" width="8" height="15" fill="rgb(248,137,1)"/><text x="33.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1428" width="8" height="15" fill="rgb(238,111,42)"/><text x="33.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1444" width="8" height="15" fill="rgb(209,213,53)"/><text x="33.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="30" y="1460" width="8" height="15" fill="rgb(240,207,22)"/><text x="33.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1476" width="8" height="15" fill="rgb(206,76,50)"/><text x="33.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (3 samples, 0.65%)</title><rect x="30" y="1492" width="8" height="15" fill="rgb(218,146,29)"/><text x="33.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1508" width="8" height="15" fill="rgb(249,30,35)"/><text x="33.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1524" width="8" height="15" fill="rgb(245,157,6)"/><text x="33.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1540" width="8" height="15" fill="rgb(232,27,29)"/><text x="33.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="30" y="1556" width="8" height="15" fill="rgb(252,12,10)"/><text x="33.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1572" width="8" height="15" fill="rgb(250,27,26)"/><text x="33.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py) (3 samples, 0.65%)</title><rect x="30" y="1588" width="8" height="15" fill="rgb(226,212,3)"/><text x="33.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1604" width="8" height="15" fill="rgb(249,105,26)"/><text x="33.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1620" width="8" height="15" fill="rgb(214,157,54)"/><text x="33.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1636" width="8" height="15" fill="rgb(248,152,22)"/><text x="33.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="30" y="1652" width="8" height="15" fill="rgb(241,13,36)"/><text x="33.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="30" y="1668" width="8" height="15" fill="rgb(248,202,24)"/><text x="33.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/tools.py) (1 samples, 0.22%)</title><rect x="35" y="1684" width="3" height="15" fill="rgb(237,74,18)"/><text x="38.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="1700" width="3" height="15" fill="rgb(214,14,17)"/><text x="38.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="1716" width="3" height="15" fill="rgb(235,7,10)"/><text x="38.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="1732" width="3" height="15" fill="rgb(235,177,52)"/><text x="38.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="35" y="1748" width="3" height="15" fill="rgb(229,192,44)"/><text x="38.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="1764" width="3" height="15" fill="rgb(247,156,47)"/><text x="38.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/table.py) (1 samples, 0.22%)</title><rect x="35" y="1780" width="3" height="15" fill="rgb(222,27,21)"/><text x="38.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="1796" width="3" height="15" fill="rgb(253,125,39)"/><text x="38.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="1812" width="3" height="15" fill="rgb(253,173,49)"/><text x="38.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="1828" width="3" height="15" fill="rgb(225,122,42)"/><text x="38.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="35" y="1844" width="3" height="15" fill="rgb(236,70,20)"/><text x="38.00" y="1854.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="35" y="1860" width="3" height="15" fill="rgb(243,223,43)"/><text x="38.00" y="1870.50"></text></g><g><title>&lt;module&gt; (matplotlib/patches.py) (1 samples, 0.22%)</title><rect x="35" y="1876" width="3" height="15" fill="rgb(239,144,37)"/><text x="38.00" y="1886.50"></text></g><g><title>ArrowStyle (matplotlib/patches.py) (1 samples, 0.22%)</title><rect x="35" y="1892" width="3" height="15" fill="rgb(234,43,30)"/><text x="38.00" y="1902.50"></text></g><g><title>_pprint_styles (matplotlib/patches.py) (1 samples, 0.22%)</title><rect x="35" y="1908" width="3" height="15" fill="rgb(230,83,18)"/><text x="38.00" y="1918.50"></text></g><g><title>getfullargspec (inspect.py) (1 samples, 0.22%)</title><rect x="35" y="1924" width="3" height="15" fill="rgb(224,172,24)"/><text x="38.00" y="1934.50"></text></g><g><title>_signature_from_callable (inspect.py) (1 samples, 0.22%)</title><rect x="35" y="1940" width="3" height="15" fill="rgb(226,155,7)"/><text x="38.00" y="1950.50"></text></g><g><title>_signature_from_function (inspect.py) (1 samples, 0.22%)</title><rect x="35" y="1956" width="3" height="15" fill="rgb(220,19,42)"/><text x="38.00" y="1966.50"></text></g><g><title>__init__ (inspect.py) (1 samples, 0.22%)</title><rect x="35" y="1972" width="3" height="15" fill="rgb(231,185,36)"/><text x="38.00" y="1982.50"></text></g><g><title>&lt;module&gt; (numpy/core/__init__.py) (1 samples, 0.22%)</title><rect x="38" y="372" width="2" height="15" fill="rgb(227,39,27)"/><text x="41.00" y="382.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="388" width="2" height="15" fill="rgb(244,131,36)"/><text x="41.00" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="404" width="2" height="15" fill="rgb(209,12,40)"/><text x="41.00" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="420" width="2" height="15" fill="rgb(232,89,13)"/><text x="41.00" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="436" width="2" height="15" fill="rgb(246,52,12)"/><text x="41.00" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="38" y="452" width="2" height="15" fill="rgb(252,137,48)"/><text x="41.00" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="38" y="468" width="2" height="15" fill="rgb(244,221,44)"/><text x="41.00" y="478.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="38" y="484" width="2" height="15" fill="rgb(251,204,27)"/><text x="41.00" y="494.50"></text></g><g><title>get_data (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="38" y="500" width="2" height="15" fill="rgb(249,173,20)"/><text x="41.00" y="510.50"></text></g><g><title>read (libpthread-2.29.so) (1 samples, 0.22%)</title><rect x="38" y="516" width="2" height="15" fill="rgb(235,163,49)"/><text x="41.00" y="526.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="68" width="33" height="15" fill="rgb(213,142,52)"/><text x="13.00" y="78.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="84" width="33" height="15" fill="rgb(207,20,49)"/><text x="13.00" y="94.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="100" width="33" height="15" fill="rgb(245,72,13)"/><text x="13.00" y="110.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (13 samples, 2.81%)</title><rect x="10" y="116" width="33" height="15" fill="rgb(250,78,34)"/><text x="13.00" y="126.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="132" width="33" height="15" fill="rgb(243,176,24)"/><text x="13.00" y="142.50">_c..</text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestRegressor/bench_RandomForestRegressor_default_b_reg.py) (13 samples, 2.81%)</title><rect x="10" y="148" width="33" height="15" fill="rgb(219,128,18)"/><text x="13.00" y="158.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="164" width="33" height="15" fill="rgb(238,28,18)"/><text x="13.00" y="174.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.81%)</title><rect x="10" y="180" width="33" height="15" fill="rgb(250,108,24)"/><text x="13.00" y="190.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.73%)</title><rect x="22" y="196" width="21" height="15" fill="rgb(239,133,50)"/><text x="25.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.73%)</title><rect x="22" y="212" width="21" height="15" fill="rgb(212,82,44)"/><text x="25.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.73%)</title><rect x="22" y="228" width="21" height="15" fill="rgb(225,194,46)"/><text x="25.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py) (2 samples, 0.43%)</title><rect x="38" y="244" width="5" height="15" fill="rgb(229,220,36)"/><text x="41.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="38" y="260" width="5" height="15" fill="rgb(240,35,54)"/><text x="41.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="38" y="276" width="5" height="15" fill="rgb(217,61,35)"/><text x="41.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="38" y="292" width="5" height="15" fill="rgb(220,146,2)"/><text x="41.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="38" y="308" width="5" height="15" fill="rgb(235,119,13)"/><text x="41.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="38" y="324" width="5" height="15" fill="rgb(210,83,46)"/><text x="41.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="38" y="340" width="5" height="15" fill="rgb(252,162,34)"/><text x="41.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="38" y="356" width="5" height="15" fill="rgb(254,18,7)"/><text x="41.00" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/lib/__init__.py) (1 samples, 0.22%)</title><rect x="40" y="372" width="3" height="15" fill="rgb(229,73,54)"/><text x="43.00" y="382.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="388" width="3" height="15" fill="rgb(223,40,29)"/><text x="43.00" y="398.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="404" width="3" height="15" fill="rgb(208,43,43)"/><text x="43.00" y="414.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="420" width="3" height="15" fill="rgb(214,53,42)"/><text x="43.00" y="430.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="40" y="436" width="3" height="15" fill="rgb(221,105,42)"/><text x="43.00" y="446.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="40" y="452" width="3" height="15" fill="rgb(222,198,32)"/><text x="43.00" y="462.50"></text></g><g><title>&lt;module&gt; (numpy/lib/nanfunctions.py) (1 samples, 0.22%)</title><rect x="40" y="468" width="3" height="15" fill="rgb(246,60,33)"/><text x="43.00" y="478.50"></text></g><g><title>decorator (numpy/core/overrides.py) (1 samples, 0.22%)</title><rect x="40" y="484" width="3" height="15" fill="rgb(250,212,47)"/><text x="43.00" y="494.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py) (1 samples, 0.22%)</title><rect x="43" y="196" width="2" height="15" fill="rgb(249,98,5)"/><text x="46.00" y="206.50"></text></g><g><title>delayed_function (joblib/parallel.py) (1 samples, 0.22%)</title><rect x="43" y="212" width="2" height="15" fill="rgb(242,93,5)"/><text x="46.00" y="222.50"></text></g><g><title>profile0_skl (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (3 samples, 0.65%)</title><rect x="43" y="68" width="7" height="15" fill="rgb(235,167,13)"/><text x="46.00" y="78.50"></text></g><g><title>setup_profile0 (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (3 samples, 0.65%)</title><rect x="43" y="84" width="7" height="15" fill="rgb(221,197,17)"/><text x="46.00" y="94.50"></text></g><g><title>profile0 (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (3 samples, 0.65%)</title><rect x="43" y="100" width="7" height="15" fill="rgb(239,67,3)"/><text x="46.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.65%)</title><rect x="43" y="116" width="7" height="15" fill="rgb(211,61,3)"/><text x="46.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.65%)</title><rect x="43" y="132" width="7" height="15" fill="rgb(232,192,33)"/><text x="46.00" y="142.50"></text></g><g><title>predict (sklearn/ensemble/_forest.py) (3 samples, 0.65%)</title><rect x="43" y="148" width="7" height="15" fill="rgb(211,22,47)"/><text x="46.00" y="158.50"></text></g><g><title>__call__ (joblib/parallel.py) (3 samples, 0.65%)</title><rect x="43" y="164" width="7" height="15" fill="rgb(227,173,41)"/><text x="46.00" y="174.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (3 samples, 0.65%)</title><rect x="43" y="180" width="7" height="15" fill="rgb(237,11,26)"/><text x="46.00" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py) (2 samples, 0.43%)</title><rect x="45" y="196" width="5" height="15" fill="rgb(235,58,2)"/><text x="48.00" y="206.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (1 samples, 0.22%)</title><rect x="48" y="212" width="2" height="15" fill="rgb(245,94,29)"/><text x="51.00" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (1 samples, 0.22%)</title><rect x="48" y="228" width="2" height="15" fill="rgb(206,162,6)"/><text x="51.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py) (1 samples, 0.22%)</title><rect x="48" y="244" width="2" height="15" fill="rgb(210,48,3)"/><text x="51.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (1 samples, 0.22%)</title><rect x="48" y="260" width="2" height="15" fill="rgb(242,142,5)"/><text x="51.00" y="270.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py) (1 samples, 0.22%)</title><rect x="48" y="276" width="2" height="15" fill="rgb(231,184,39)"/><text x="51.00" y="286.50"></text></g><g><title>predict (sklearn/tree/_classes.py) (1 samples, 0.22%)</title><rect x="48" y="292" width="2" height="15" fill="rgb(245,11,14)"/><text x="51.00" y="302.50"></text></g><g><title>0x7f58b79b6d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="48" y="308" width="2" height="15" fill="rgb(218,131,29)"/><text x="51.00" y="318.50"></text></g><g><title>0x7f58b79b5fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="48" y="324" width="2" height="15" fill="rgb(254,41,41)"/><text x="51.00" y="334.50"></text></g><g><title>0x7f58b79c5405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="48" y="340" width="2" height="15" fill="rgb(214,65,27)"/><text x="51.00" y="350.50"></text></g><g><title>0x7f58b79c42df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="48" y="356" width="2" height="15" fill="rgb(206,112,41)"/><text x="51.00" y="366.50"></text></g><g><title>0x7f58b79a8db4 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="48" y="372" width="2" height="15" fill="rgb(231,202,18)"/><text x="51.00" y="382.50"></text></g><g><title>0x7f589dfb0ff9 (?) (1 samples, 0.22%)</title><rect x="50" y="212" width="3" height="15" fill="rgb(231,36,43)"/><text x="53.00" y="222.50"></text></g><g><title>0x7f589dfabef6 (?) (1 samples, 0.22%)</title><rect x="50" y="228" width="3" height="15" fill="rgb(211,136,16)"/><text x="53.00" y="238.50"></text></g><g><title>0x7f589dfa0962 (?) (1 samples, 0.22%)</title><rect x="50" y="244" width="3" height="15" fill="rgb(241,101,19)"/><text x="53.00" y="254.50"></text></g><g><title>0x7f589dfd47a7 (?) (1 samples, 0.22%)</title><rect x="50" y="260" width="3" height="15" fill="rgb(231,13,49)"/><text x="53.00" y="270.50"></text></g><g><title>0x7f589dfd4379 (?) (1 samples, 0.22%)</title><rect x="50" y="276" width="3" height="15" fill="rgb(223,91,41)"/><text x="53.00" y="286.50"></text></g><g><title>0x7f589e4328b8 (?) (1 samples, 0.22%)</title><rect x="50" y="292" width="3" height="15" fill="rgb(214,99,17)"/><text x="53.00" y="302.50"></text></g><g><title>0x7f589e430c7f (?) (1 samples, 0.22%)</title><rect x="50" y="308" width="3" height="15" fill="rgb(233,149,52)"/><text x="53.00" y="318.50"></text></g><g><title>0x7f589e44399c (?) (1 samples, 0.22%)</title><rect x="50" y="324" width="3" height="15" fill="rgb(205,170,45)"/><text x="53.00" y="334.50"></text></g><g><title>0x7f589e16adc2 (?) (1 samples, 0.22%)</title><rect x="50" y="340" width="3" height="15" fill="rgb(248,189,26)"/><text x="53.00" y="350.50"></text></g><g><title>0x7f589e16a407 (?) (1 samples, 0.22%)</title><rect x="50" y="356" width="3" height="15" fill="rgb(205,179,2)"/><text x="53.00" y="366.50"></text></g><g><title>0x7f58ddf7291e (libc-2.29.so) (1 samples, 0.22%)</title><rect x="63" y="356" width="3" height="15" fill="rgb(243,102,5)"/><text x="66.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.22%)</title><rect x="502" y="388" width="3" height="15" fill="rgb(233,129,54)"/><text x="505.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="502" y="404" width="3" height="15" fill="rgb(223,15,25)"/><text x="505.00" y="414.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="505" y="404" width="3" height="15" fill="rgb(235,167,42)"/><text x="508.00" y="414.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.22%)</title><rect x="505" y="420" width="3" height="15" fill="rgb(221,225,54)"/><text x="508.00" y="430.50"></text></g><g><title>profile_ort (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (181 samples, 39.18%)</title><rect x="50" y="68" width="463" height="15" fill="rgb(249,90,51)"/><text x="53.00" y="78.50">profile_ort (bench_RandomForestRegressor_default_b_reg_1000_4_1..</text></g><g><title>setup_profile (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (181 samples, 39.18%)</title><rect x="50" y="84" width="463" height="15" fill="rgb(226,84,47)"/><text x="53.00" y="94.50">setup_profile (bench_RandomForestRegressor_default_b_reg_1000_4..</text></g><g><title>profile (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (181 samples, 39.18%)</title><rect x="50" y="100" width="463" height="15" fill="rgb(241,52,3)"/><text x="53.00" y="110.50">profile (bench_RandomForestRegressor_default_b_reg_1000_4_12_fl..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (181 samples, 39.18%)</title><rect x="50" y="116" width="463" height="15" fill="rgb(233,102,34)"/><text x="53.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (181 samples, 39.18%)</title><rect x="50" y="132" width="463" height="15" fill="rgb(214,49,43)"/><text x="53.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (181 samples, 39.18%)</title><rect x="50" y="148" width="463" height="15" fill="rgb(240,66,26)"/><text x="53.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (181 samples, 39.18%)</title><rect x="50" y="164" width="463" height="15" fill="rgb(244,116,9)"/><text x="53.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (181 samples, 39.18%)</title><rect x="50" y="180" width="463" height="15" fill="rgb(206,47,54)"/><text x="53.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (181 samples, 39.18%)</title><rect x="50" y="196" width="463" height="15" fill="rgb(237,196,22)"/><text x="53.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 38.96%)</title><rect x="53" y="212" width="460" height="15" fill="rgb(245,226,7)"/><text x="56.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxrunti..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 38.96%)</title><rect x="53" y="228" width="460" height="15" fill="rgb(236,17,9)"/><text x="56.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::a..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 38.96%)</title><rect x="53" y="244" width="460" height="15" fill="rgb(230,12,1)"/><text x="56.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lam..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 38.96%)</title><rect x="53" y="260" width="460" height="15" fill="rgb(231,193,35)"/><text x="56.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxrunti..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 38.96%)</title><rect x="53" y="276" width="460" height="15" fill="rgb(213,120,47)"/><text x="56.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 38.96%)</title><rect x="53" y="292" width="460" height="15" fill="rgb(239,182,20)"/><text x="56.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 38.96%)</title><rect x="53" y="308" width="460" height="15" fill="rgb(235,92,33)"/><text x="56.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 38.96%)</title><rect x="53" y="324" width="460" height="15" fill="rgb(244,56,31)"/><text x="56.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onn..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 38.96%)</title><rect x="53" y="340" width="460" height="15" fill="rgb(241,186,22)"/><text x="56.00" y="350.50">onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Compute (onnxru..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (175 samples, 37.88%)</title><rect x="66" y="356" width="447" height="15" fill="rgb(206,219,14)"/><text x="69.00" y="366.50">onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::ProcessTreeNod..</text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;long, std::tuple&lt;float, float, float&gt; &gt;&amp;&gt; [clone .isra.301] (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.87%)</title><rect x="502" y="372" width="11" height="15" fill="rgb(234,124,33)"/><text x="505.00" y="382.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.65%)</title><rect x="505" y="388" width="8" height="15" fill="rgb(248,95,47)"/><text x="508.00" y="398.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (libstdc++.so.6.0.28) (2 samples, 0.43%)</title><rect x="508" y="404" width="5" height="15" fill="rgb(246,58,44)"/><text x="511.00" y="414.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (libstdc++.so.6.0.28) (2 samples, 0.43%)</title><rect x="508" y="420" width="5" height="15" fill="rgb(207,170,17)"/><text x="511.00" y="430.50"></text></g><g><title>0x7f589ea0b54f (?) (1 samples, 0.22%)</title><rect x="513" y="244" width="2" height="15" fill="rgb(246,160,4)"/><text x="516.00" y="254.50"></text></g><g><title>0x7f589ea1165e (?) (1 samples, 0.22%)</title><rect x="513" y="260" width="2" height="15" fill="rgb(237,56,14)"/><text x="516.00" y="270.50"></text></g><g><title>0x7f589ea1150f (?) (1 samples, 0.22%)</title><rect x="513" y="276" width="2" height="15" fill="rgb(230,171,15)"/><text x="516.00" y="286.50"></text></g><g><title>0x7f589ea17d6c (?) (1 samples, 0.22%)</title><rect x="513" y="292" width="2" height="15" fill="rgb(242,225,32)"/><text x="516.00" y="302.50"></text></g><g><title>0x7f58a7f2ecff (?) (1 samples, 0.22%)</title><rect x="513" y="308" width="2" height="15" fill="rgb(221,97,14)"/><text x="516.00" y="318.50"></text></g><g><title>0x7f589e9fc27c (?) (1 samples, 0.22%)</title><rect x="513" y="324" width="2" height="15" fill="rgb(253,71,26)"/><text x="516.00" y="334.50"></text></g><g><title>0x7f589e9fb5b3 (?) (1 samples, 0.22%)</title><rect x="513" y="340" width="2" height="15" fill="rgb(211,103,50)"/><text x="516.00" y="350.50"></text></g><g><title>0x7f58a7f39ea9 (libgomp.so.1.0.0) (1 samples, 0.22%)</title><rect x="515" y="484" width="3" height="15" fill="rgb(214,143,21)"/><text x="518.00" y="494.50"></text></g><g><title>0x7f58a7f39eab (libgomp.so.1.0.0) (1 samples, 0.22%)</title><rect x="518" y="484" width="2" height="15" fill="rgb(232,98,6)"/><text x="521.00" y="494.50"></text></g><g><title>0x7f58a7f38ab9 (libgomp.so.1.0.0) (3 samples, 0.65%)</title><rect x="515" y="468" width="8" height="15" fill="rgb(221,202,15)"/><text x="518.00" y="478.50"></text></g><g><title>0x7f58a7f39ead (libgomp.so.1.0.0) (1 samples, 0.22%)</title><rect x="520" y="484" width="3" height="15" fill="rgb(235,50,42)"/><text x="523.00" y="494.50"></text></g><g><title>profile (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (15 samples, 3.25%)</title><rect x="513" y="100" width="38" height="15" fill="rgb(213,146,33)"/><text x="516.00" y="110.50">pro..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (15 samples, 3.25%)</title><rect x="513" y="116" width="38" height="15" fill="rgb(229,176,50)"/><text x="516.00" y="126.50">tim..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (15 samples, 3.25%)</title><rect x="513" y="132" width="38" height="15" fill="rgb(253,30,31)"/><text x="516.00" y="142.50">&lt;la..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (15 samples, 3.25%)</title><rect x="513" y="148" width="38" height="15" fill="rgb(205,226,24)"/><text x="516.00" y="158.50">run..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (15 samples, 3.25%)</title><rect x="513" y="164" width="38" height="15" fill="rgb(226,176,25)"/><text x="516.00" y="174.50">_ru..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (15 samples, 3.25%)</title><rect x="513" y="180" width="38" height="15" fill="rgb(229,92,41)"/><text x="516.00" y="190.50">run..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (15 samples, 3.25%)</title><rect x="513" y="196" width="38" height="15" fill="rgb(231,36,35)"/><text x="516.00" y="206.50">run..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (15 samples, 3.25%)</title><rect x="513" y="212" width="38" height="15" fill="rgb(215,1,42)"/><text x="516.00" y="222.50">run..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py) (15 samples, 3.25%)</title><rect x="513" y="228" width="38" height="15" fill="rgb(245,58,8)"/><text x="516.00" y="238.50">_ru..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (14 samples, 3.03%)</title><rect x="515" y="244" width="36" height="15" fill="rgb(238,226,38)"/><text x="518.00" y="254.50">pyb..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (14 samples, 3.03%)</title><rect x="515" y="260" width="36" height="15" fill="rgb(242,119,41)"/><text x="518.00" y="270.50">voi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (14 samples, 3.03%)</title><rect x="515" y="276" width="36" height="15" fill="rgb(249,55,41)"/><text x="518.00" y="286.50">voi..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (14 samples, 3.03%)</title><rect x="515" y="292" width="36" height="15" fill="rgb(241,20,17)"/><text x="518.00" y="302.50">pyb..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (14 samples, 3.03%)</title><rect x="515" y="308" width="36" height="15" fill="rgb(217,85,37)"/><text x="518.00" y="318.50">pyb..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (14 samples, 3.03%)</title><rect x="515" y="324" width="36" height="15" fill="rgb(222,118,38)"/><text x="518.00" y="334.50">pyb..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (14 samples, 3.03%)</title><rect x="515" y="340" width="36" height="15" fill="rgb(216,97,17)"/><text x="518.00" y="350.50">pyb..</text></g><g><title>pybind11::array::~array (numpy.h) (14 samples, 3.03%)</title><rect x="515" y="356" width="36" height="15" fill="rgb(229,130,49)"/><text x="518.00" y="366.50">pyb..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (14 samples, 3.03%)</title><rect x="515" y="372" width="36" height="15" fill="rgb(234,210,22)"/><text x="518.00" y="382.50">pyb..</text></g><g><title>pybind11::object::~object (pytypes.h) (14 samples, 3.03%)</title><rect x="515" y="388" width="36" height="15" fill="rgb(220,11,10)"/><text x="518.00" y="398.50">pyb..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (14 samples, 3.03%)</title><rect x="515" y="404" width="36" height="15" fill="rgb(237,89,15)"/><text x="518.00" y="414.50">pyb..</text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (14 samples, 3.03%)</title><rect x="515" y="420" width="36" height="15" fill="rgb(244,42,50)"/><text x="518.00" y="430.50">Run..</text></g><g><title>pybind11::array::size (numpy.h) (14 samples, 3.03%)</title><rect x="515" y="436" width="36" height="15" fill="rgb(236,73,24)"/><text x="518.00" y="446.50">pyb..</text></g><g><title>std::accumulate&lt;long const*, long, std::multiplies&lt;long&gt; &gt; (stl_numeric.h) (14 samples, 3.03%)</title><rect x="515" y="452" width="36" height="15" fill="rgb(214,149,34)"/><text x="518.00" y="462.50">std..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (11 samples, 2.38%)</title><rect x="523" y="468" width="28" height="15" fill="rgb(228,209,43)"/><text x="526.00" y="478.50">G..</text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute_gil_free [clone ._omp_fn.2] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (11 samples, 2.38%)</title><rect x="523" y="484" width="28" height="15" fill="rgb(214,142,22)"/><text x="526.00" y="494.50">R..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::size (stl_vector.h) (11 samples, 2.38%)</title><rect x="523" y="500" width="28" height="15" fill="rgb(221,51,44)"/><text x="526.00" y="510.50">s..</text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (11 samples, 2.38%)</title><rect x="523" y="516" width="28" height="15" fill="rgb(205,98,3)"/><text x="526.00" y="526.50">R..</text></g><g><title>std::unordered_map&lt;long, unsigned long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt; &gt;::find (unordered_map.h) (5 samples, 1.08%)</title><rect x="538" y="532" width="13" height="15" fill="rgb(215,171,2)"/><text x="541.00" y="542.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (hashtable.h) (5 samples, 1.08%)</title><rect x="538" y="548" width="13" height="15" fill="rgb(221,3,31)"/><text x="541.00" y="558.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (hashtable.h) (5 samples, 1.08%)</title><rect x="538" y="564" width="13" height="15" fill="rgb(253,179,20)"/><text x="541.00" y="574.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (hashtable.h) (5 samples, 1.08%)</title><rect x="538" y="580" width="13" height="15" fill="rgb(230,50,12)"/><text x="541.00" y="590.50"></text></g><g><title>profile_pyrt (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (16 samples, 3.46%)</title><rect x="513" y="68" width="41" height="15" fill="rgb(224,68,25)"/><text x="516.00" y="78.50">pro..</text></g><g><title>setup_profile (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (16 samples, 3.46%)</title><rect x="513" y="84" width="41" height="15" fill="rgb(248,172,54)"/><text x="516.00" y="94.50">set..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="551" y="100" width="3" height="15" fill="rgb(229,76,37)"/><text x="554.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="551" y="116" width="3" height="15" fill="rgb(252,16,35)"/><text x="554.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.22%)</title><rect x="551" y="132" width="3" height="15" fill="rgb(217,17,4)"/><text x="554.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.22%)</title><rect x="551" y="148" width="3" height="15" fill="rgb(238,94,43)"/><text x="554.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.22%)</title><rect x="551" y="164" width="3" height="15" fill="rgb(251,47,40)"/><text x="554.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (1 samples, 0.22%)</title><rect x="551" y="180" width="3" height="15" fill="rgb(231,131,5)"/><text x="554.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (1 samples, 0.22%)</title><rect x="551" y="196" width="3" height="15" fill="rgb(223,29,47)"/><text x="554.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="212" width="3" height="15" fill="rgb(236,181,39)"/><text x="554.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="228" width="3" height="15" fill="rgb(212,218,53)"/><text x="554.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="244" width="3" height="15" fill="rgb(211,21,15)"/><text x="554.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="551" y="260" width="3" height="15" fill="rgb(209,93,24)"/><text x="554.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="276" width="3" height="15" fill="rgb(230,128,22)"/><text x="554.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (1 samples, 0.22%)</title><rect x="551" y="292" width="3" height="15" fill="rgb(227,185,12)"/><text x="554.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="308" width="3" height="15" fill="rgb(206,139,9)"/><text x="554.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="324" width="3" height="15" fill="rgb(245,172,6)"/><text x="554.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="340" width="3" height="15" fill="rgb(233,27,25)"/><text x="554.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="551" y="356" width="3" height="15" fill="rgb(210,12,54)"/><text x="554.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="372" width="3" height="15" fill="rgb(241,214,43)"/><text x="554.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (1 samples, 0.22%)</title><rect x="551" y="388" width="3" height="15" fill="rgb(227,83,7)"/><text x="554.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="404" width="3" height="15" fill="rgb(223,51,23)"/><text x="554.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="420" width="3" height="15" fill="rgb(252,19,40)"/><text x="554.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="436" width="3" height="15" fill="rgb(243,187,24)"/><text x="554.00" y="446.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="452" width="3" height="15" fill="rgb(224,92,14)"/><text x="554.00" y="462.50"></text></g><g><title>_init_module_attrs (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="468" width="3" height="15" fill="rgb(214,188,39)"/><text x="554.00" y="478.50"></text></g><g><title>cached (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="551" y="484" width="3" height="15" fill="rgb(217,208,47)"/><text x="554.00" y="494.50"></text></g><g><title>_get_cached (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="551" y="500" width="3" height="15" fill="rgb(225,66,35)"/><text x="554.00" y="510.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py) (17 samples, 3.68%)</title><rect x="605" y="196" width="43" height="15" fill="rgb(217,9,24)"/><text x="608.00" y="206.50">&lt;gen..</text></g><g><title>delayed (joblib/parallel.py) (16 samples, 3.46%)</title><rect x="607" y="212" width="41" height="15" fill="rgb(254,7,20)"/><text x="610.00" y="222.50">del..</text></g><g><title>update_wrapper (functools.py) (12 samples, 2.60%)</title><rect x="617" y="228" width="31" height="15" fill="rgb(218,214,53)"/><text x="620.00" y="238.50">up..</text></g><g><title>__init__ (joblib/parallel.py) (2 samples, 0.43%)</title><rect x="648" y="196" width="5" height="15" fill="rgb(232,102,5)"/><text x="651.00" y="206.50"></text></g><g><title>0x7fff291c1a01 ([vdso]) (1 samples, 0.22%)</title><rect x="663" y="212" width="3" height="15" fill="rgb(245,117,33)"/><text x="666.00" y="222.50"></text></g><g><title>__init__ (joblib/parallel.py) (2 samples, 0.43%)</title><rect x="666" y="212" width="5" height="15" fill="rgb(223,61,22)"/><text x="669.00" y="222.50"></text></g><g><title>PyThread_get_thread_ident (python3.7) (1 samples, 0.22%)</title><rect x="679" y="244" width="2" height="15" fill="rgb(247,115,25)"/><text x="682.00" y="254.50"></text></g><g><title>pthread_self@GLIBC_2.2.5 (libpthread-2.29.so) (1 samples, 0.22%)</title><rect x="679" y="260" width="2" height="15" fill="rgb(234,108,45)"/><text x="682.00" y="270.50"></text></g><g><title>__call__ (joblib/parallel.py) (4 samples, 0.87%)</title><rect x="674" y="228" width="10" height="15" fill="rgb(229,142,21)"/><text x="677.00" y="238.50"></text></g><g><title>batch_completed (joblib/_parallel_backends.py) (1 samples, 0.22%)</title><rect x="681" y="244" width="3" height="15" fill="rgb(217,61,24)"/><text x="684.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="730" y="292" width="2" height="15" fill="rgb(210,48,25)"/><text x="733.00" y="302.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.22%)</title><rect x="730" y="308" width="2" height="15" fill="rgb(225,146,46)"/><text x="733.00" y="318.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.22%)</title><rect x="730" y="324" width="2" height="15" fill="rgb(231,56,52)"/><text x="733.00" y="334.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (2 samples, 0.43%)</title><rect x="732" y="292" width="5" height="15" fill="rgb(231,154,23)"/><text x="735.00" y="302.50"></text></g><g><title>PyThread_acquire_lock_timed (python3.7) (2 samples, 0.43%)</title><rect x="732" y="308" width="5" height="15" fill="rgb(229,24,13)"/><text x="735.00" y="318.50"></text></g><g><title>sem_trywait@@GLIBC_2.2.5 (libpthread-2.29.so) (2 samples, 0.43%)</title><rect x="732" y="324" width="5" height="15" fill="rgb(229,198,52)"/><text x="735.00" y="334.50"></text></g><g><title>0x7f58b79a5cd1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="750" y="340" width="3" height="15" fill="rgb(233,97,13)"/><text x="753.00" y="350.50"></text></g><g><title>0x7f58b79b5f55 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="750" y="324" width="5" height="15" fill="rgb(240,71,41)"/><text x="753.00" y="334.50"></text></g><g><title>0x7f58b79a5d33 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="753" y="340" width="2" height="15" fill="rgb(252,154,40)"/><text x="756.00" y="350.50"></text></g><g><title>PyArray_New (ctors.c) (1 samples, 0.22%)</title><rect x="753" y="356" width="2" height="15" fill="rgb(229,93,34)"/><text x="756.00" y="366.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.22%)</title><rect x="753" y="372" width="2" height="15" fill="rgb(250,104,26)"/><text x="756.00" y="382.50"></text></g><g><title>0x7f58b79a85d8 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="755" y="388" width="3" height="15" fill="rgb(218,126,0)"/><text x="758.00" y="398.50"></text></g><g><title>PyArray_FailUnlessWriteable (arrayobject.c) (1 samples, 0.22%)</title><rect x="758" y="436" width="2" height="15" fill="rgb(240,187,54)"/><text x="761.00" y="446.50"></text></g><g><title>0x7f58b79c42df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 1.52%)</title><rect x="755" y="356" width="18" height="15" fill="rgb(249,127,21)"/><text x="758.00" y="366.50"></text></g><g><title>0x7f58b79a8d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 1.52%)</title><rect x="755" y="372" width="18" height="15" fill="rgb(217,195,4)"/><text x="758.00" y="382.50"></text></g><g><title>0x7f58b79a8666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 1.30%)</title><rect x="758" y="388" width="15" height="15" fill="rgb(207,111,15)"/><text x="761.00" y="398.50"></text></g><g><title>0x7f58b799e2fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 1.30%)</title><rect x="758" y="404" width="15" height="15" fill="rgb(249,58,42)"/><text x="761.00" y="414.50"></text></g><g><title>array_getbuffer (buffer.c) (6 samples, 1.30%)</title><rect x="758" y="420" width="15" height="15" fill="rgb(237,222,10)"/><text x="761.00" y="430.50"></text></g><g><title>_buffer_get_info (buffer.c) (5 samples, 1.08%)</title><rect x="760" y="436" width="13" height="15" fill="rgb(209,228,48)"/><text x="763.00" y="446.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.22%)</title><rect x="771" y="452" width="2" height="15" fill="rgb(248,114,24)"/><text x="774.00" y="462.50"></text></g><g><title>_buffer_format_string (buffer.c) (1 samples, 0.22%)</title><rect x="771" y="468" width="2" height="15" fill="rgb(219,73,16)"/><text x="774.00" y="478.50"></text></g><g><title>0x7f58b79c4364 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="773" y="356" width="5" height="15" fill="rgb(237,9,18)"/><text x="776.00" y="366.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.22%)</title><rect x="776" y="372" width="2" height="15" fill="rgb(229,93,36)"/><text x="779.00" y="382.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.22%)</title><rect x="781" y="388" width="2" height="15" fill="rgb(243,43,14)"/><text x="784.00" y="398.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.22%)</title><rect x="783" y="388" width="3" height="15" fill="rgb(234,220,52)"/><text x="786.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.22%)</title><rect x="783" y="404" width="3" height="15" fill="rgb(206,140,28)"/><text x="786.00" y="414.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.22%)</title><rect x="786" y="468" width="3" height="15" fill="rgb(221,48,17)"/><text x="789.00" y="478.50"></text></g><g><title>__GI___pthread_mutex_unlock (libpthread-2.29.so) (1 samples, 0.22%)</title><rect x="789" y="468" width="2" height="15" fill="rgb(236,57,41)"/><text x="792.00" y="478.50"></text></g><g><title>0x7f58ddf73db0 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="794" y="484" width="2" height="15" fill="rgb(241,64,4)"/><text x="797.00" y="494.50"></text></g><g><title>0x7f58ddf73dd6 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="796" y="484" width="3" height="15" fill="rgb(245,156,15)"/><text x="799.00" y="494.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (6 samples, 1.30%)</title><rect x="786" y="388" width="15" height="15" fill="rgb(236,222,29)"/><text x="789.00" y="398.50"></text></g><g><title>PyArray_Zeros (ctors.c) (6 samples, 1.30%)</title><rect x="786" y="404" width="15" height="15" fill="rgb(216,1,41)"/><text x="789.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (6 samples, 1.30%)</title><rect x="786" y="420" width="15" height="15" fill="rgb(223,93,17)"/><text x="789.00" y="430.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c) (6 samples, 1.30%)</title><rect x="786" y="436" width="15" height="15" fill="rgb(237,126,26)"/><text x="789.00" y="446.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c) (6 samples, 1.30%)</title><rect x="786" y="452" width="15" height="15" fill="rgb(248,41,9)"/><text x="789.00" y="462.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (4 samples, 0.87%)</title><rect x="791" y="468" width="10" height="15" fill="rgb(225,179,50)"/><text x="794.00" y="478.50"></text></g><g><title>0x7f58ddf93103 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="799" y="484" width="2" height="15" fill="rgb(233,38,53)"/><text x="802.00" y="494.50"></text></g><g><title>unicode_eq (python3.7) (2 samples, 0.43%)</title><rect x="801" y="388" width="5" height="15" fill="rgb(210,204,22)"/><text x="804.00" y="398.50"></text></g><g><title>0x7f58de050130 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="804" y="404" width="2" height="15" fill="rgb(230,107,12)"/><text x="807.00" y="414.50"></text></g><g><title>0x7f58b79c4592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 2.60%)</title><rect x="778" y="356" width="31" height="15" fill="rgb(236,55,15)"/><text x="781.00" y="366.50">0x..</text></g><g><title>array_zeros (multiarraymodule.c) (12 samples, 2.60%)</title><rect x="778" y="372" width="31" height="15" fill="rgb(248,82,31)"/><text x="781.00" y="382.50">ar..</text></g><g><title>unicode_hash (python3.7) (1 samples, 0.22%)</title><rect x="806" y="388" width="3" height="15" fill="rgb(247,201,25)"/><text x="809.00" y="398.50"></text></g><g><title>0x7f58b79c4684 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="809" y="356" width="2" height="15" fill="rgb(230,64,20)"/><text x="812.00" y="366.50"></text></g><g><title>0x7f58b79c4693 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="811" y="356" width="3" height="15" fill="rgb(227,181,38)"/><text x="814.00" y="366.50"></text></g><g><title>0x7f58b79c4698 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="814" y="356" width="5" height="15" fill="rgb(225,36,5)"/><text x="817.00" y="366.50"></text></g><g><title>0x7f58b79c46aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.65%)</title><rect x="819" y="356" width="8" height="15" fill="rgb(210,147,36)"/><text x="822.00" y="366.50"></text></g><g><title>0x7f58b79c46b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 1.30%)</title><rect x="827" y="356" width="15" height="15" fill="rgb(235,117,9)"/><text x="830.00" y="366.50"></text></g><g><title>0x7f58b79c46b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="842" y="356" width="5" height="15" fill="rgb(219,38,21)"/><text x="845.00" y="366.50"></text></g><g><title>0x7f58b79c46bf (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="847" y="356" width="3" height="15" fill="rgb(225,221,18)"/><text x="850.00" y="366.50"></text></g><g><title>0x7f58b79c46c9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="850" y="356" width="2" height="15" fill="rgb(224,45,32)"/><text x="853.00" y="366.50"></text></g><g><title>0x7f58b79c46d4 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="852" y="356" width="3" height="15" fill="rgb(233,111,33)"/><text x="855.00" y="366.50"></text></g><g><title>0x7f58b79c47b0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="855" y="356" width="2" height="15" fill="rgb(239,211,3)"/><text x="858.00" y="366.50"></text></g><g><title>0x7f58b79c5405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (42 samples, 9.09%)</title><rect x="755" y="340" width="108" height="15" fill="rgb(239,20,35)"/><text x="758.00" y="350.50">0x7f58b79c540..</text></g><g><title>0x7f58b79c47b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="857" y="356" width="6" height="15" fill="rgb(224,215,36)"/><text x="860.00" y="366.50"></text></g><g><title>0x7f58b79b5fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (44 samples, 9.52%)</title><rect x="755" y="324" width="113" height="15" fill="rgb(209,172,31)"/><text x="758.00" y="334.50">0x7f58b79b5fa..</text></g><g><title>0x7f58b79c5540 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="863" y="340" width="5" height="15" fill="rgb(205,9,1)"/><text x="866.00" y="350.50"></text></g><g><title>0x7f58b799a2f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="863" y="356" width="5" height="15" fill="rgb(249,126,28)"/><text x="866.00" y="366.50"></text></g><g><title>0x7f58b79994f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="863" y="372" width="5" height="15" fill="rgb(229,146,27)"/><text x="866.00" y="382.50"></text></g><g><title>0x7f58dd195dd0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="868" y="356" width="2" height="15" fill="rgb(226,69,39)"/><text x="871.00" y="366.50"></text></g><g><title>PyArray_AxisConverter (conversion_utils.c) (1 samples, 0.22%)</title><rect x="870" y="356" width="3" height="15" fill="rgb(214,58,32)"/><text x="873.00" y="366.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (1 samples, 0.22%)</title><rect x="870" y="372" width="3" height="15" fill="rgb(219,45,1)"/><text x="873.00" y="382.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (1 samples, 0.22%)</title><rect x="870" y="388" width="3" height="15" fill="rgb(206,104,47)"/><text x="873.00" y="398.50"></text></g><g><title>PyArray_ClipmodeConverter (conversion_utils.c) (1 samples, 0.22%)</title><rect x="873" y="356" width="2" height="15" fill="rgb(206,60,34)"/><text x="876.00" y="366.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (4 samples, 0.87%)</title><rect x="880" y="372" width="11" height="15" fill="rgb(229,226,34)"/><text x="883.00" y="382.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.22%)</title><rect x="888" y="388" width="3" height="15" fill="rgb(205,201,8)"/><text x="891.00" y="398.50"></text></g><g><title>0x7f58b79b605a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 2.16%)</title><rect x="868" y="324" width="25" height="15" fill="rgb(205,218,22)"/><text x="871.00" y="334.50">0..</text></g><g><title>array_take (methods.c) (10 samples, 2.16%)</title><rect x="868" y="340" width="25" height="15" fill="rgb(226,222,35)"/><text x="871.00" y="350.50">a..</text></g><g><title>PyArray_TakeFrom (item_selection.c) (7 samples, 1.52%)</title><rect x="875" y="356" width="18" height="15" fill="rgb(222,37,45)"/><text x="878.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.22%)</title><rect x="891" y="372" width="2" height="15" fill="rgb(231,158,19)"/><text x="894.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.22%)</title><rect x="891" y="388" width="2" height="15" fill="rgb(238,76,41)"/><text x="894.00" y="398.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.22%)</title><rect x="891" y="404" width="2" height="15" fill="rgb(249,160,11)"/><text x="894.00" y="414.50"></text></g><g><title>0x7f58b79b613a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="893" y="324" width="5" height="15" fill="rgb(206,141,4)"/><text x="896.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.22%)</title><rect x="898" y="356" width="3" height="15" fill="rgb(238,143,34)"/><text x="901.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.22%)</title><rect x="898" y="372" width="3" height="15" fill="rgb(208,59,9)"/><text x="901.00" y="382.50"></text></g><g><title>0x7f58b79b614f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="898" y="324" width="5" height="15" fill="rgb(228,73,14)"/><text x="901.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.43%)</title><rect x="898" y="340" width="5" height="15" fill="rgb(239,9,5)"/><text x="901.00" y="350.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.22%)</title><rect x="901" y="356" width="2" height="15" fill="rgb(221,79,21)"/><text x="904.00" y="366.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.22%)</title><rect x="901" y="372" width="2" height="15" fill="rgb(234,186,6)"/><text x="904.00" y="382.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.22%)</title><rect x="901" y="388" width="2" height="15" fill="rgb(234,210,19)"/><text x="904.00" y="398.50"></text></g><g><title>0x7f58dd194380 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="901" y="404" width="2" height="15" fill="rgb(254,88,24)"/><text x="904.00" y="414.50"></text></g><g><title>0x7f58b79b61bf (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="903" y="324" width="3" height="15" fill="rgb(210,198,45)"/><text x="906.00" y="334.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.22%)</title><rect x="903" y="340" width="3" height="15" fill="rgb(219,163,46)"/><text x="906.00" y="350.50"></text></g><g><title>0x7f58ddf9314e (libc-2.29.so) (1 samples, 0.22%)</title><rect x="903" y="356" width="3" height="15" fill="rgb(213,186,41)"/><text x="906.00" y="366.50"></text></g><g><title>0x7f58b79b623a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="906" y="324" width="3" height="15" fill="rgb(213,52,20)"/><text x="909.00" y="334.50"></text></g><g><title>0x7f58b79b6d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (64 samples, 13.85%)</title><rect x="750" y="308" width="164" height="15" fill="rgb(224,188,42)"/><text x="753.00" y="318.50">0x7f58b79b6d2e (sklea..</text></g><g><title>0x7f58b79b6328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.43%)</title><rect x="909" y="324" width="5" height="15" fill="rgb(232,26,25)"/><text x="912.00" y="334.50"></text></g><g><title>array_reshape (methods.c) (2 samples, 0.43%)</title><rect x="909" y="340" width="5" height="15" fill="rgb(222,136,54)"/><text x="912.00" y="350.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.22%)</title><rect x="911" y="356" width="3" height="15" fill="rgb(245,150,22)"/><text x="914.00" y="366.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.22%)</title><rect x="911" y="372" width="3" height="15" fill="rgb(219,120,48)"/><text x="914.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.22%)</title><rect x="911" y="388" width="3" height="15" fill="rgb(216,198,46)"/><text x="914.00" y="398.50"></text></g><g><title>get_view_from_index (mapping.c) (1 samples, 0.22%)</title><rect x="914" y="324" width="2" height="15" fill="rgb(237,44,25)"/><text x="917.00" y="334.50"></text></g><g><title>array_subscript (mapping.c) (4 samples, 0.87%)</title><rect x="914" y="308" width="10" height="15" fill="rgb(251,216,41)"/><text x="917.00" y="318.50"></text></g><g><title>prepare_index (mapping.c) (3 samples, 0.65%)</title><rect x="916" y="324" width="8" height="15" fill="rgb(237,18,11)"/><text x="919.00" y="334.50"></text></g><g><title>unicode_endswith (python3.7) (5 samples, 1.08%)</title><rect x="960" y="340" width="12" height="15" fill="rgb(248,127,50)"/><text x="963.00" y="350.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (23 samples, 4.98%)</title><rect x="924" y="308" width="59" height="15" fill="rgb(231,64,29)"/><text x="927.00" y="318.50">check_..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (19 samples, 4.11%)</title><rect x="934" y="324" width="49" height="15" fill="rgb(252,7,26)"/><text x="937.00" y="334.50">&lt;lis..</text></g><g><title>unicode_startswith (python3.7) (4 samples, 0.87%)</title><rect x="972" y="340" width="11" height="15" fill="rgb(215,56,53)"/><text x="975.00" y="350.50"></text></g><g><title>predict (sklearn/tree/_classes.py) (98 samples, 21.21%)</title><rect x="737" y="292" width="251" height="15" fill="rgb(238,73,30)"/><text x="740.00" y="302.50">predict (sklearn/tree/_classes.py)</text></g><g><title>is_classifier (sklearn/base.py) (2 samples, 0.43%)</title><rect x="983" y="308" width="5" height="15" fill="rgb(237,80,16)"/><text x="986.00" y="318.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (3 samples, 0.65%)</title><rect x="993" y="324" width="7" height="15" fill="rgb(211,179,13)"/><text x="996.00" y="334.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (2 samples, 0.43%)</title><rect x="995" y="340" width="5" height="15" fill="rgb(205,15,40)"/><text x="998.00" y="350.50"></text></g><g><title>diophantine_simplify (mem_overlap.c) (1 samples, 0.22%)</title><rect x="1003" y="372" width="3" height="15" fill="rgb(231,123,15)"/><text x="1006.00" y="382.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.22%)</title><rect x="1003" y="388" width="3" height="15" fill="rgb(227,12,39)"/><text x="1006.00" y="398.50"></text></g><g><title>0x7f58ddf2a7a5 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="1003" y="404" width="3" height="15" fill="rgb(231,83,17)"/><text x="1006.00" y="414.50"></text></g><g><title>0x7f58ddf2aa19 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="1003" y="420" width="3" height="15" fill="rgb(246,172,29)"/><text x="1006.00" y="430.50"></text></g><g><title>diophantine_sort_A (mem_overlap.c) (1 samples, 0.22%)</title><rect x="1003" y="436" width="3" height="15" fill="rgb(224,79,38)"/><text x="1006.00" y="446.50"></text></g><g><title>get_array_memory_extents (mem_overlap.c) (1 samples, 0.22%)</title><rect x="1006" y="372" width="2" height="15" fill="rgb(247,16,22)"/><text x="1009.00" y="382.50"></text></g><g><title>gt_128 (npy_extint128.h) (1 samples, 0.22%)</title><rect x="1008" y="404" width="3" height="15" fill="rgb(217,221,50)"/><text x="1011.00" y="414.50"></text></g><g><title>sub_128 (npy_extint128.h) (1 samples, 0.22%)</title><rect x="1011" y="404" width="2" height="15" fill="rgb(242,52,50)"/><text x="1014.00" y="414.50"></text></g><g><title>add_128 (npy_extint128.h) (1 samples, 0.22%)</title><rect x="1011" y="420" width="2" height="15" fill="rgb(251,110,45)"/><text x="1014.00" y="430.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (5 samples, 1.08%)</title><rect x="1003" y="340" width="13" height="15" fill="rgb(215,225,29)"/><text x="1006.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (5 samples, 1.08%)</title><rect x="1003" y="356" width="13" height="15" fill="rgb(244,140,50)"/><text x="1006.00" y="366.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (3 samples, 0.65%)</title><rect x="1008" y="372" width="8" height="15" fill="rgb(222,105,12)"/><text x="1011.00" y="382.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (3 samples, 0.65%)</title><rect x="1008" y="388" width="8" height="15" fill="rgb(233,38,30)"/><text x="1011.00" y="398.50"></text></g><g><title>to_64 (npy_extint128.h) (1 samples, 0.22%)</title><rect x="1013" y="404" width="3" height="15" fill="rgb(252,219,40)"/><text x="1016.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (7 samples, 1.52%)</title><rect x="1000" y="324" width="18" height="15" fill="rgb(224,172,34)"/><text x="1003.00" y="334.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1016" y="340" width="2" height="15" fill="rgb(219,40,38)"/><text x="1019.00" y="350.50"></text></g><g><title>DOUBLE_add (loops.c.src) (1 samples, 0.22%)</title><rect x="1016" y="356" width="2" height="15" fill="rgb(237,88,38)"/><text x="1019.00" y="366.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (1 samples, 0.22%)</title><rect x="1016" y="372" width="2" height="15" fill="rgb(217,103,21)"/><text x="1019.00" y="382.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (1 samples, 0.22%)</title><rect x="1016" y="388" width="2" height="15" fill="rgb(224,105,32)"/><text x="1019.00" y="398.50"></text></g><g><title>_mm_add_pd (emmintrin.h) (1 samples, 0.22%)</title><rect x="1016" y="404" width="2" height="15" fill="rgb(233,202,6)"/><text x="1019.00" y="414.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1018" y="324" width="3" height="15" fill="rgb(216,54,34)"/><text x="1021.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (13 samples, 2.81%)</title><rect x="990" y="308" width="33" height="15" fill="rgb(250,28,26)"/><text x="993.00" y="318.50">Py..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.22%)</title><rect x="1021" y="324" width="2" height="15" fill="rgb(216,183,42)"/><text x="1024.00" y="334.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.22%)</title><rect x="1021" y="340" width="2" height="15" fill="rgb(218,94,24)"/><text x="1024.00" y="350.50"></text></g><g><title>0x7f58dd194e80 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1021" y="356" width="2" height="15" fill="rgb(237,190,4)"/><text x="1024.00" y="366.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (126 samples, 27.27%)</title><rect x="704" y="260" width="322" height="15" fill="rgb(254,42,25)"/><text x="707.00" y="270.50">&lt;listcomp&gt; (joblib/parallel.py)</text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py) (124 samples, 26.84%)</title><rect x="709" y="276" width="317" height="15" fill="rgb(205,154,26)"/><text x="712.00" y="286.50">_accumulate_prediction (sklearn/ensemble/_..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (15 samples, 3.25%)</title><rect x="988" y="292" width="38" height="15" fill="rgb(208,123,6)"/><text x="991.00" y="302.50">ufu..</text></g><g><title>_find_array_wrap (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1023" y="308" width="3" height="15" fill="rgb(229,27,12)"/><text x="1026.00" y="318.50"></text></g><g><title>_get_output_array_method (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1023" y="324" width="3" height="15" fill="rgb(246,2,29)"/><text x="1026.00" y="334.50"></text></g><g><title>__exit__ (joblib/parallel.py) (7 samples, 1.52%)</title><rect x="1026" y="260" width="18" height="15" fill="rgb(241,54,11)"/><text x="1029.00" y="270.50"></text></g><g><title>unregister (joblib/parallel.py) (7 samples, 1.52%)</title><rect x="1026" y="276" width="18" height="15" fill="rgb(222,131,36)"/><text x="1029.00" y="286.50"></text></g><g><title>_dispatch (joblib/parallel.py) (157 samples, 33.98%)</title><rect x="653" y="196" width="401" height="15" fill="rgb(224,107,42)"/><text x="656.00" y="206.50">_dispatch (joblib/parallel.py)</text></g><g><title>apply_async (joblib/_parallel_backends.py) (150 samples, 32.47%)</title><rect x="671" y="212" width="383" height="15" fill="rgb(228,76,30)"/><text x="674.00" y="222.50">apply_async (joblib/_parallel_backends.py)</text></g><g><title>__init__ (joblib/_parallel_backends.py) (145 samples, 31.39%)</title><rect x="684" y="228" width="370" height="15" fill="rgb(250,105,27)"/><text x="687.00" y="238.50">__init__ (joblib/_parallel_backends.py)</text></g><g><title>__call__ (joblib/parallel.py) (143 samples, 30.95%)</title><rect x="689" y="244" width="365" height="15" fill="rgb(228,185,52)"/><text x="692.00" y="254.50">__call__ (joblib/parallel.py)</text></g><g><title>__init__ (joblib/parallel.py) (4 samples, 0.87%)</title><rect x="1044" y="260" width="10" height="15" fill="rgb(251,57,10)"/><text x="1047.00" y="270.50"></text></g><g><title>0x7f58ddf93124 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="1067" y="212" width="2" height="15" fill="rgb(231,159,29)"/><text x="1070.00" y="222.50"></text></g><g><title>__enter__ (threading.py) (2 samples, 0.43%)</title><rect x="1069" y="212" width="6" height="15" fill="rgb(222,185,50)"/><text x="1072.00" y="222.50"></text></g><g><title>_get (queue.py) (1 samples, 0.22%)</title><rect x="1075" y="212" width="2" height="15" fill="rgb(207,133,22)"/><text x="1078.00" y="222.50"></text></g><g><title>_qsize (queue.py) (1 samples, 0.22%)</title><rect x="1077" y="212" width="3" height="15" fill="rgb(227,171,6)"/><text x="1080.00" y="222.50"></text></g><g><title>get (queue.py) (11 samples, 2.38%)</title><rect x="1054" y="196" width="28" height="15" fill="rgb(216,74,40)"/><text x="1057.00" y="206.50">g..</text></g><g><title>notify (threading.py) (1 samples, 0.22%)</title><rect x="1080" y="212" width="2" height="15" fill="rgb(232,227,52)"/><text x="1083.00" y="222.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.52%)</title><rect x="1098" y="212" width="17" height="15" fill="rgb(214,78,37)"/><text x="1101.00" y="222.50"></text></g><g><title>0x7f58ddf88e7a (libc-2.29.so) (1 samples, 0.22%)</title><rect x="1113" y="228" width="2" height="15" fill="rgb(251,123,14)"/><text x="1116.00" y="238.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (10 samples, 2.16%)</title><rect x="1115" y="212" width="26" height="15" fill="rgb(222,170,42)"/><text x="1118.00" y="222.50">g..</text></g><g><title>__init__ (joblib/_parallel_backends.py) (3 samples, 0.65%)</title><rect x="1133" y="228" width="8" height="15" fill="rgb(222,73,25)"/><text x="1136.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (1 samples, 0.22%)</title><rect x="1138" y="244" width="3" height="15" fill="rgb(218,174,31)"/><text x="1141.00" y="254.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (25 samples, 5.41%)</title><rect x="1082" y="196" width="64" height="15" fill="rgb(252,218,41)"/><text x="1085.00" y="206.50">get_nes..</text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="1141" y="212" width="5" height="15" fill="rgb(253,1,31)"/><text x="1144.00" y="222.50"></text></g><g><title>__exit__ (threading.py) (1 samples, 0.22%)</title><rect x="1146" y="212" width="3" height="15" fill="rgb(233,8,32)"/><text x="1149.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (232 samples, 50.22%)</title><rect x="566" y="180" width="593" height="15" fill="rgb(231,59,35)"/><text x="569.00" y="190.50">dispatch_one_batch (joblib/parallel.py)</text></g><g><title>put (queue.py) (5 samples, 1.08%)</title><rect x="1146" y="196" width="13" height="15" fill="rgb(247,224,42)"/><text x="1149.00" y="206.50"></text></g><g><title>notify (threading.py) (4 samples, 0.87%)</title><rect x="1149" y="212" width="10" height="15" fill="rgb(253,218,38)"/><text x="1152.00" y="222.50"></text></g><g><title>_is_owned (threading.py) (1 samples, 0.22%)</title><rect x="1156" y="228" width="3" height="15" fill="rgb(217,66,33)"/><text x="1159.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py) (239 samples, 51.73%)</title><rect x="554" y="164" width="610" height="15" fill="rgb(228,51,49)"/><text x="557.00" y="174.50">__call__ (joblib/parallel.py)</text></g><g><title>retrieve (joblib/parallel.py) (2 samples, 0.43%)</title><rect x="1159" y="180" width="5" height="15" fill="rgb(245,120,5)"/><text x="1162.00" y="190.50"></text></g><g><title>profile (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (240 samples, 51.95%)</title><rect x="554" y="100" width="613" height="15" fill="rgb(250,76,19)"/><text x="557.00" y="110.50">profile (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (240 samples, 51.95%)</title><rect x="554" y="116" width="613" height="15" fill="rgb(208,174,51)"/><text x="557.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (240 samples, 51.95%)</title><rect x="554" y="132" width="613" height="15" fill="rgb(240,214,13)"/><text x="557.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict (sklearn/ensemble/_forest.py) (240 samples, 51.95%)</title><rect x="554" y="148" width="613" height="15" fill="rgb(215,131,7)"/><text x="557.00" y="158.50">predict (sklearn/ensemble/_forest.py)</text></g><g><title>_joblib_parallel_args (sklearn/utils/fixes.py) (1 samples, 0.22%)</title><rect x="1164" y="164" width="3" height="15" fill="rgb(249,59,41)"/><text x="1167.00" y="174.50"></text></g><g><title>__le__ (distutils/version.py) (1 samples, 0.22%)</title><rect x="1164" y="180" width="3" height="15" fill="rgb(237,2,13)"/><text x="1167.00" y="190.50"></text></g><g><title>_cmp (distutils/version.py) (1 samples, 0.22%)</title><rect x="1164" y="196" width="3" height="15" fill="rgb(252,101,39)"/><text x="1167.00" y="206.50"></text></g><g><title>__init__ (distutils/version.py) (1 samples, 0.22%)</title><rect x="1164" y="212" width="3" height="15" fill="rgb(228,13,13)"/><text x="1167.00" y="222.50"></text></g><g><title>parse (distutils/version.py) (1 samples, 0.22%)</title><rect x="1164" y="228" width="3" height="15" fill="rgb(252,72,2)"/><text x="1167.00" y="238.50"></text></g><g><title>add_node (skl2onnx/common/_container.py) (1 samples, 0.22%)</title><rect x="1167" y="212" width="2" height="15" fill="rgb(213,157,44)"/><text x="1170.00" y="222.50"></text></g><g><title>make_node (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.22%)</title><rect x="1167" y="228" width="2" height="15" fill="rgb(238,70,19)"/><text x="1170.00" y="238.50"></text></g><g><title>google::protobuf::python::repeated_composite_container::Extend (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1167" y="244" width="2" height="15" fill="rgb(232,80,52)"/><text x="1170.00" y="254.50"></text></g><g><title>&lt;genexpr&gt; (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.22%)</title><rect x="1167" y="260" width="2" height="15" fill="rgb(220,107,40)"/><text x="1170.00" y="270.50"></text></g><g><title>make_attribute (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.22%)</title><rect x="1167" y="276" width="2" height="15" fill="rgb(215,184,20)"/><text x="1170.00" y="286.50"></text></g><g><title>&lt;genexpr&gt; (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.22%)</title><rect x="1167" y="292" width="2" height="15" fill="rgb(233,73,26)"/><text x="1170.00" y="302.50"></text></g><g><title>0x7f58b79a50d2 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1169" y="228" width="3" height="15" fill="rgb(215,16,32)"/><text x="1172.00" y="238.50"></text></g><g><title>array_subscript (mapping.c) (1 samples, 0.22%)</title><rect x="1169" y="244" width="3" height="15" fill="rgb(212,219,35)"/><text x="1172.00" y="254.50"></text></g><g><title>profile_skl (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (244 samples, 52.81%)</title><rect x="554" y="68" width="623" height="15" fill="rgb(218,192,5)"/><text x="557.00" y="78.50">profile_skl (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py)</text></g><g><title>setup_profile (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (244 samples, 52.81%)</title><rect x="554" y="84" width="623" height="15" fill="rgb(248,8,45)"/><text x="557.00" y="94.50">setup_profile (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py)</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 0.87%)</title><rect x="1167" y="100" width="10" height="15" fill="rgb(223,107,2)"/><text x="1170.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 0.87%)</title><rect x="1167" y="116" width="10" height="15" fill="rgb(246,97,5)"/><text x="1170.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 0.87%)</title><rect x="1167" y="132" width="10" height="15" fill="rgb(236,186,18)"/><text x="1170.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (4 samples, 0.87%)</title><rect x="1167" y="148" width="10" height="15" fill="rgb(237,155,45)"/><text x="1170.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (4 samples, 0.87%)</title><rect x="1167" y="164" width="10" height="15" fill="rgb(213,78,39)"/><text x="1170.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (4 samples, 0.87%)</title><rect x="1167" y="180" width="10" height="15" fill="rgb(217,64,19)"/><text x="1170.00" y="190.50"></text></g><g><title>convert_sklearn_random_forest_regressor_converter (mlprodict/onnx_conv/sklconv/tree_converters.py) (4 samples, 0.87%)</title><rect x="1167" y="196" width="10" height="15" fill="rgb(245,80,34)"/><text x="1170.00" y="206.50"></text></g><g><title>add_tree_to_attribute_pairs (skl2onnx/common/tree_ensemble.py) (3 samples, 0.65%)</title><rect x="1169" y="212" width="8" height="15" fill="rgb(252,108,5)"/><text x="1172.00" y="222.50"></text></g><g><title>add_node (skl2onnx/common/tree_ensemble.py) (2 samples, 0.43%)</title><rect x="1172" y="228" width="5" height="15" fill="rgb(212,120,43)"/><text x="1175.00" y="238.50"></text></g><g><title>sklearn_threshold (skl2onnx/common/tree_ensemble.py) (1 samples, 0.22%)</title><rect x="1174" y="244" width="3" height="15" fill="rgb(244,169,11)"/><text x="1177.00" y="254.50"></text></g><g><title>float_richcompare (scalarmath.c.src) (1 samples, 0.22%)</title><rect x="1174" y="260" width="3" height="15" fill="rgb(248,8,40)"/><text x="1177.00" y="270.50"></text></g><g><title>gentype_richcompare (scalartypes.c.src) (1 samples, 0.22%)</title><rect x="1174" y="276" width="3" height="15" fill="rgb(223,99,11)"/><text x="1177.00" y="286.50"></text></g><g><title>array_richcompare (arrayobject.c) (1 samples, 0.22%)</title><rect x="1174" y="292" width="3" height="15" fill="rgb(227,198,13)"/><text x="1177.00" y="302.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1174" y="308" width="3" height="15" fill="rgb(221,149,23)"/><text x="1177.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.22%)</title><rect x="1174" y="324" width="3" height="15" fill="rgb(210,166,45)"/><text x="1177.00" y="334.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.22%)</title><rect x="1174" y="340" width="3" height="15" fill="rgb(246,105,18)"/><text x="1177.00" y="350.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.22%)</title><rect x="1174" y="356" width="3" height="15" fill="rgb(218,18,34)"/><text x="1177.00" y="366.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.22%)</title><rect x="1174" y="372" width="3" height="15" fill="rgb(205,70,22)"/><text x="1177.00" y="382.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.22%)</title><rect x="1174" y="388" width="3" height="15" fill="rgb(251,65,1)"/><text x="1177.00" y="398.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.22%)</title><rect x="1174" y="404" width="3" height="15" fill="rgb(242,209,12)"/><text x="1177.00" y="414.50"></text></g><g><title>_generate_sample_indices (sklearn/ensemble/_forest.py) (1 samples, 0.22%)</title><rect x="1177" y="260" width="2" height="15" fill="rgb(220,145,48)"/><text x="1180.00" y="270.50"></text></g><g><title>check_random_state (sklearn/utils/validation.py) (1 samples, 0.22%)</title><rect x="1177" y="276" width="2" height="15" fill="rgb(228,188,13)"/><text x="1180.00" y="286.50"></text></g><g><title>0x7f58d084da66 (?) (1 samples, 0.22%)</title><rect x="1177" y="292" width="2" height="15" fill="rgb(219,111,39)"/><text x="1180.00" y="302.50"></text></g><g><title>0x7f58d083f579 (?) (1 samples, 0.22%)</title><rect x="1177" y="308" width="2" height="15" fill="rgb(233,90,9)"/><text x="1180.00" y="318.50"></text></g><g><title>0x7f58d018045a (?) (1 samples, 0.22%)</title><rect x="1177" y="324" width="2" height="15" fill="rgb(221,192,14)"/><text x="1180.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="1177" y="340" width="2" height="15" fill="rgb(206,137,16)"/><text x="1180.00" y="350.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.22%)</title><rect x="1177" y="356" width="2" height="15" fill="rgb(239,139,35)"/><text x="1180.00" y="366.50"></text></g><g><title>0x7f58b7c07d8c (sklearn/tree/_splitter.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1179" y="324" width="3" height="15" fill="rgb(207,178,13)"/><text x="1182.00" y="334.50"></text></g><g><title>0x7f58b7c00d50 (sklearn/tree/_splitter.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1179" y="340" width="3" height="15" fill="rgb(218,179,47)"/><text x="1182.00" y="350.50"></text></g><g><title>0x7f58b7c00d50 (sklearn/tree/_splitter.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1179" y="356" width="3" height="15" fill="rgb(208,154,38)"/><text x="1182.00" y="366.50"></text></g><g><title>0x7f58b7c00d50 (sklearn/tree/_splitter.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1179" y="372" width="3" height="15" fill="rgb(251,50,17)"/><text x="1182.00" y="382.50"></text></g><g><title>0x7f58b7c00cfb (sklearn/tree/_splitter.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1179" y="388" width="3" height="15" fill="rgb(219,49,0)"/><text x="1182.00" y="398.50"></text></g><g><title>0x7f58b7c07e72 (sklearn/tree/_splitter.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1182" y="324" width="2" height="15" fill="rgb(227,33,14)"/><text x="1185.00" y="334.50"></text></g><g><title>0x7f58b7e3b2e3 (sklearn/tree/_criterion.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1182" y="340" width="2" height="15" fill="rgb(223,148,12)"/><text x="1185.00" y="350.50"></text></g><g><title>0x7f58b79aab11 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.65%)</title><rect x="1179" y="292" width="8" height="15" fill="rgb(245,125,0)"/><text x="1182.00" y="302.50"></text></g><g><title>0x7f58b79dc10a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.65%)</title><rect x="1179" y="308" width="8" height="15" fill="rgb(246,201,6)"/><text x="1182.00" y="318.50"></text></g><g><title>0x7f58b7c07e7b (sklearn/tree/_splitter.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="1184" y="324" width="3" height="15" fill="rgb(254,210,10)"/><text x="1187.00" y="334.50"></text></g><g><title>all (462 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(225,72,9)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (462 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(205,191,49)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py)</text></g><g><title>start (bench_RandomForestRegressor_default_b_reg_1000_4_12_float_.py) (5 samples, 1.08%)</title><rect x="1177" y="68" width="13" height="15" fill="rgb(245,136,20)"/><text x="1180.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/RandomForestRegressor/bench_RandomForestRegressor_default_b_reg.py) (5 samples, 1.08%)</title><rect x="1177" y="84" width="13" height="15" fill="rgb(238,9,23)"/><text x="1180.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (5 samples, 1.08%)</title><rect x="1177" y="100" width="13" height="15" fill="rgb(252,32,41)"/><text x="1180.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_forest.py) (5 samples, 1.08%)</title><rect x="1177" y="116" width="13" height="15" fill="rgb(250,158,43)"/><text x="1180.00" y="126.50"></text></g><g><title>__call__ (joblib/parallel.py) (5 samples, 1.08%)</title><rect x="1177" y="132" width="13" height="15" fill="rgb(251,229,47)"/><text x="1180.00" y="142.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (5 samples, 1.08%)</title><rect x="1177" y="148" width="13" height="15" fill="rgb(246,90,25)"/><text x="1180.00" y="158.50"></text></g><g><title>_dispatch (joblib/parallel.py) (5 samples, 1.08%)</title><rect x="1177" y="164" width="13" height="15" fill="rgb(230,41,4)"/><text x="1180.00" y="174.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (5 samples, 1.08%)</title><rect x="1177" y="180" width="13" height="15" fill="rgb(254,119,26)"/><text x="1180.00" y="190.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (5 samples, 1.08%)</title><rect x="1177" y="196" width="13" height="15" fill="rgb(220,224,22)"/><text x="1180.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py) (5 samples, 1.08%)</title><rect x="1177" y="212" width="13" height="15" fill="rgb(238,184,23)"/><text x="1180.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (5 samples, 1.08%)</title><rect x="1177" y="228" width="13" height="15" fill="rgb(214,85,12)"/><text x="1180.00" y="238.50"></text></g><g><title>_parallel_build_trees (sklearn/ensemble/_forest.py) (5 samples, 1.08%)</title><rect x="1177" y="244" width="13" height="15" fill="rgb(221,18,11)"/><text x="1180.00" y="254.50"></text></g><g><title>fit (sklearn/tree/_classes.py) (4 samples, 0.87%)</title><rect x="1179" y="260" width="11" height="15" fill="rgb(216,76,28)"/><text x="1182.00" y="270.50"></text></g><g><title>fit (sklearn/tree/_classes.py) (4 samples, 0.87%)</title><rect x="1179" y="276" width="11" height="15" fill="rgb(220,183,54)"/><text x="1182.00" y="286.50"></text></g><g><title>check_random_state (sklearn/utils/validation.py) (1 samples, 0.22%)</title><rect x="1187" y="292" width="3" height="15" fill="rgb(214,204,37)"/><text x="1190.00" y="302.50"></text></g><g><title>__init__ (mtrand.c) (1 samples, 0.22%)</title><rect x="1187" y="308" width="3" height="15" fill="rgb(222,136,37)"/><text x="1190.00" y="318.50"></text></g><g><title>RandomState___init__ (mtrand.c) (1 samples, 0.22%)</title><rect x="1187" y="324" width="3" height="15" fill="rgb(247,120,47)"/><text x="1190.00" y="334.50"></text></g><g><title>__Pyx_PyObject_CallNoArg (mtrand.c) (1 samples, 0.22%)</title><rect x="1187" y="340" width="3" height="15" fill="rgb(240,145,29)"/><text x="1190.00" y="350.50"></text></g><g><title>__init__ (mt19937.c) (1 samples, 0.22%)</title><rect x="1187" y="356" width="3" height="15" fill="rgb(238,178,30)"/><text x="1190.00" y="366.50"></text></g><g><title>MT19937___init__ (mt19937.c) (1 samples, 0.22%)</title><rect x="1187" y="372" width="3" height="15" fill="rgb(251,8,41)"/><text x="1190.00" y="382.50"></text></g><g><title>inner (contextlib.py) (1 samples, 0.22%)</title><rect x="1187" y="388" width="3" height="15" fill="rgb(245,120,19)"/><text x="1190.00" y="398.50"></text></g><g><title>__enter__ (numpy/core/_ufunc_config.py) (1 samples, 0.22%)</title><rect x="1187" y="404" width="3" height="15" fill="rgb(250,158,50)"/><text x="1190.00" y="414.50"></text></g><g><title>seterr (numpy/core/_ufunc_config.py) (1 samples, 0.22%)</title><rect x="1187" y="420" width="3" height="15" fill="rgb(246,172,0)"/><text x="1190.00" y="430.50"></text></g><g><title>ufunc_seterr (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1187" y="436" width="3" height="15" fill="rgb(222,161,11)"/><text x="1190.00" y="446.50"></text></g></g></svg>