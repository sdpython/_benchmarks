<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1654" onload="init(evt)" viewBox="0 0 1200 1654" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1654" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1637.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1637.00"> </text><g id="frames"><g><title>&lt;module&gt; (onnx/__init__.py) (4 samples, 0.24%)</title><rect x="10" y="292" width="2" height="15" fill="rgb(223,179,15)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="308" width="2" height="15" fill="rgb(246,133,29)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="324" width="2" height="15" fill="rgb(249,75,39)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="340" width="2" height="15" fill="rgb(220,140,52)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.24%)</title><rect x="10" y="356" width="2" height="15" fill="rgb(242,206,51)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="372" width="2" height="15" fill="rgb(215,194,33)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (4 samples, 0.24%)</title><rect x="10" y="388" width="2" height="15" fill="rgb(212,162,13)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="404" width="2" height="15" fill="rgb(233,114,35)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="420" width="2" height="15" fill="rgb(215,74,11)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="436" width="2" height="15" fill="rgb(214,190,52)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.24%)</title><rect x="10" y="452" width="2" height="15" fill="rgb(247,23,47)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="468" width="2" height="15" fill="rgb(209,82,25)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (4 samples, 0.24%)</title><rect x="10" y="484" width="2" height="15" fill="rgb(252,213,36)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="500" width="2" height="15" fill="rgb(205,222,54)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="516" width="2" height="15" fill="rgb(248,220,39)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="532" width="2" height="15" fill="rgb(226,222,16)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.24%)</title><rect x="10" y="548" width="2" height="15" fill="rgb(216,82,4)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="564" width="2" height="15" fill="rgb(229,225,21)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (4 samples, 0.24%)</title><rect x="10" y="580" width="2" height="15" fill="rgb(212,178,5)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="596" width="2" height="15" fill="rgb(219,55,19)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="612" width="2" height="15" fill="rgb(229,112,39)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="628" width="2" height="15" fill="rgb(230,160,1)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="644" width="2" height="15" fill="rgb(212,14,5)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="660" width="2" height="15" fill="rgb(214,209,46)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="676" width="2" height="15" fill="rgb(209,110,52)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.24%)</title><rect x="10" y="692" width="2" height="15" fill="rgb(241,43,19)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="708" width="2" height="15" fill="rgb(223,111,20)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (4 samples, 0.24%)</title><rect x="10" y="724" width="2" height="15" fill="rgb(246,39,32)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="740" width="2" height="15" fill="rgb(238,66,27)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="756" width="2" height="15" fill="rgb(230,198,41)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="772" width="2" height="15" fill="rgb(227,90,15)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.24%)</title><rect x="10" y="788" width="2" height="15" fill="rgb(235,93,21)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="10" y="804" width="2" height="15" fill="rgb(227,17,1)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (4 samples, 0.24%)</title><rect x="10" y="820" width="2" height="15" fill="rgb(229,142,22)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (4 samples, 0.24%)</title><rect x="10" y="836" width="2" height="15" fill="rgb(243,193,44)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (4 samples, 0.24%)</title><rect x="10" y="852" width="2" height="15" fill="rgb(215,76,20)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (2 samples, 0.12%)</title><rect x="11" y="868" width="1" height="15" fill="rgb(216,176,39)"/><text x="14.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.12%)</title><rect x="11" y="884" width="1" height="15" fill="rgb(221,142,33)"/><text x="14.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (2 samples, 0.12%)</title><rect x="11" y="900" width="1" height="15" fill="rgb(252,149,33)"/><text x="14.00" y="910.50"></text></g><g><title>from_location (pkg_resources/__init__.py) (2 samples, 0.12%)</title><rect x="11" y="916" width="1" height="15" fill="rgb(217,32,20)"/><text x="14.00" y="926.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (2 samples, 0.12%)</title><rect x="11" y="932" width="1" height="15" fill="rgb(239,206,43)"/><text x="14.00" y="942.50"></text></g><g><title>safe_version (pkg_resources/__init__.py) (2 samples, 0.12%)</title><rect x="11" y="948" width="1" height="15" fill="rgb(247,47,44)"/><text x="14.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (2 samples, 0.12%)</title><rect x="11" y="964" width="1" height="15" fill="rgb(213,10,12)"/><text x="14.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="10" y="196" width="4" height="15" fill="rgb(254,144,27)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="10" y="212" width="4" height="15" fill="rgb(225,213,6)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="10" y="228" width="4" height="15" fill="rgb(228,152,17)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="10" y="244" width="4" height="15" fill="rgb(244,190,7)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.36%)</title><rect x="10" y="260" width="4" height="15" fill="rgb(241,66,14)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="10" y="276" width="4" height="15" fill="rgb(251,136,3)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (2 samples, 0.12%)</title><rect x="12" y="292" width="2" height="15" fill="rgb(254,204,2)"/><text x="15.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="308" width="2" height="15" fill="rgb(242,85,16)"/><text x="15.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="324" width="2" height="15" fill="rgb(236,92,26)"/><text x="15.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="340" width="2" height="15" fill="rgb(230,217,15)"/><text x="15.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.12%)</title><rect x="12" y="356" width="2" height="15" fill="rgb(219,182,43)"/><text x="15.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="372" width="2" height="15" fill="rgb(208,47,24)"/><text x="15.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (2 samples, 0.12%)</title><rect x="12" y="388" width="2" height="15" fill="rgb(224,70,10)"/><text x="15.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="404" width="2" height="15" fill="rgb(228,44,54)"/><text x="15.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="420" width="2" height="15" fill="rgb(224,182,15)"/><text x="15.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="436" width="2" height="15" fill="rgb(248,118,37)"/><text x="15.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.12%)</title><rect x="12" y="452" width="2" height="15" fill="rgb(239,44,37)"/><text x="15.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="468" width="2" height="15" fill="rgb(209,170,25)"/><text x="15.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (2 samples, 0.12%)</title><rect x="12" y="484" width="2" height="15" fill="rgb(240,122,26)"/><text x="15.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="500" width="2" height="15" fill="rgb(214,49,47)"/><text x="15.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="516" width="2" height="15" fill="rgb(212,0,6)"/><text x="15.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="532" width="2" height="15" fill="rgb(212,122,46)"/><text x="15.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.12%)</title><rect x="12" y="548" width="2" height="15" fill="rgb(236,50,0)"/><text x="15.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="564" width="2" height="15" fill="rgb(214,178,42)"/><text x="15.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (2 samples, 0.12%)</title><rect x="12" y="580" width="2" height="15" fill="rgb(216,128,41)"/><text x="15.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="596" width="2" height="15" fill="rgb(227,210,6)"/><text x="15.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="612" width="2" height="15" fill="rgb(206,219,48)"/><text x="15.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="628" width="2" height="15" fill="rgb(232,52,18)"/><text x="15.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.12%)</title><rect x="12" y="644" width="2" height="15" fill="rgb(235,143,35)"/><text x="15.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="660" width="2" height="15" fill="rgb(235,93,1)"/><text x="15.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (2 samples, 0.12%)</title><rect x="12" y="676" width="2" height="15" fill="rgb(210,97,29)"/><text x="15.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="692" width="2" height="15" fill="rgb(234,22,41)"/><text x="15.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="708" width="2" height="15" fill="rgb(248,11,33)"/><text x="15.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="724" width="2" height="15" fill="rgb(225,86,48)"/><text x="15.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.12%)</title><rect x="12" y="740" width="2" height="15" fill="rgb(206,34,18)"/><text x="15.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="12" y="756" width="2" height="15" fill="rgb(252,48,51)"/><text x="15.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (2 samples, 0.12%)</title><rect x="12" y="772" width="2" height="15" fill="rgb(222,178,13)"/><text x="15.00" y="782.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py) (3 samples, 0.18%)</title><rect x="15" y="1508" width="2" height="15" fill="rgb(219,192,24)"/><text x="18.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py) (3 samples, 0.18%)</title><rect x="15" y="1524" width="2" height="15" fill="rgb(243,107,54)"/><text x="18.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py) (3 samples, 0.18%)</title><rect x="15" y="1540" width="2" height="15" fill="rgb(210,150,1)"/><text x="18.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (3 samples, 0.18%)</title><rect x="15" y="1556" width="2" height="15" fill="rgb(223,229,48)"/><text x="18.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;) (3 samples, 0.18%)</title><rect x="15" y="1572" width="2" height="15" fill="rgb(233,5,37)"/><text x="18.00" y="1582.50"></text></g><g><title>getattr (jinja2/environment.py) (2 samples, 0.12%)</title><rect x="16" y="1588" width="1" height="15" fill="rgb(244,36,48)"/><text x="19.00" y="1598.50"></text></g><g><title>_Attribute_default_value (onnx/defs/__init__.py) (2 samples, 0.12%)</title><rect x="16" y="1604" width="1" height="15" fill="rgb(230,109,36)"/><text x="19.00" y="1614.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (6 samples, 0.36%)</title><rect x="14" y="340" width="4" height="15" fill="rgb(229,34,2)"/><text x="17.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="356" width="4" height="15" fill="rgb(242,103,5)"/><text x="17.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="372" width="4" height="15" fill="rgb(210,188,54)"/><text x="17.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="388" width="4" height="15" fill="rgb(233,48,40)"/><text x="17.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.36%)</title><rect x="14" y="404" width="4" height="15" fill="rgb(220,36,51)"/><text x="17.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="420" width="4" height="15" fill="rgb(226,71,35)"/><text x="17.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (6 samples, 0.36%)</title><rect x="14" y="436" width="4" height="15" fill="rgb(237,106,37)"/><text x="17.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="452" width="4" height="15" fill="rgb(209,26,36)"/><text x="17.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="468" width="4" height="15" fill="rgb(251,147,27)"/><text x="17.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="484" width="4" height="15" fill="rgb(245,112,35)"/><text x="17.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="500" width="4" height="15" fill="rgb(217,210,19)"/><text x="17.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="516" width="4" height="15" fill="rgb(229,20,44)"/><text x="17.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="532" width="4" height="15" fill="rgb(233,153,50)"/><text x="17.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.36%)</title><rect x="14" y="548" width="4" height="15" fill="rgb(209,225,21)"/><text x="17.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="564" width="4" height="15" fill="rgb(236,57,3)"/><text x="17.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (6 samples, 0.36%)</title><rect x="14" y="580" width="4" height="15" fill="rgb(243,191,53)"/><text x="17.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="596" width="4" height="15" fill="rgb(239,59,0)"/><text x="17.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="612" width="4" height="15" fill="rgb(234,8,1)"/><text x="17.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="628" width="4" height="15" fill="rgb(229,152,41)"/><text x="17.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.36%)</title><rect x="14" y="644" width="4" height="15" fill="rgb(209,222,44)"/><text x="17.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="660" width="4" height="15" fill="rgb(226,167,53)"/><text x="17.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (6 samples, 0.36%)</title><rect x="14" y="676" width="4" height="15" fill="rgb(243,27,31)"/><text x="17.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="692" width="4" height="15" fill="rgb(215,222,11)"/><text x="17.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="708" width="4" height="15" fill="rgb(215,109,40)"/><text x="17.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="724" width="4" height="15" fill="rgb(217,38,35)"/><text x="17.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.36%)</title><rect x="14" y="740" width="4" height="15" fill="rgb(239,152,15)"/><text x="17.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="756" width="4" height="15" fill="rgb(226,155,1)"/><text x="17.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (6 samples, 0.36%)</title><rect x="14" y="772" width="4" height="15" fill="rgb(230,84,47)"/><text x="17.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="788" width="4" height="15" fill="rgb(244,118,45)"/><text x="17.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="804" width="4" height="15" fill="rgb(229,204,18)"/><text x="17.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="820" width="4" height="15" fill="rgb(221,160,17)"/><text x="17.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.36%)</title><rect x="14" y="836" width="4" height="15" fill="rgb(221,225,24)"/><text x="17.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="852" width="4" height="15" fill="rgb(227,29,34)"/><text x="17.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (6 samples, 0.36%)</title><rect x="14" y="868" width="4" height="15" fill="rgb(236,199,52)"/><text x="17.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="884" width="4" height="15" fill="rgb(227,114,20)"/><text x="17.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="900" width="4" height="15" fill="rgb(209,47,7)"/><text x="17.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="916" width="4" height="15" fill="rgb(221,31,13)"/><text x="17.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="932" width="4" height="15" fill="rgb(229,11,34)"/><text x="17.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="948" width="4" height="15" fill="rgb(242,10,31)"/><text x="17.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="964" width="4" height="15" fill="rgb(228,156,23)"/><text x="17.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.36%)</title><rect x="14" y="980" width="4" height="15" fill="rgb(212,87,34)"/><text x="17.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="996" width="4" height="15" fill="rgb(217,182,32)"/><text x="17.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (6 samples, 0.36%)</title><rect x="14" y="1012" width="4" height="15" fill="rgb(215,121,30)"/><text x="17.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="1028" width="4" height="15" fill="rgb(248,216,48)"/><text x="17.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="1044" width="4" height="15" fill="rgb(218,175,29)"/><text x="17.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="1060" width="4" height="15" fill="rgb(244,125,19)"/><text x="17.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.36%)</title><rect x="14" y="1076" width="4" height="15" fill="rgb(246,222,54)"/><text x="17.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.36%)</title><rect x="14" y="1092" width="4" height="15" fill="rgb(237,57,50)"/><text x="17.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (6 samples, 0.36%)</title><rect x="14" y="1108" width="4" height="15" fill="rgb(214,18,1)"/><text x="17.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1124" width="4" height="15" fill="rgb(242,117,6)"/><text x="17.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1140" width="4" height="15" fill="rgb(212,27,38)"/><text x="17.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1156" width="4" height="15" fill="rgb(247,58,6)"/><text x="17.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1172" width="4" height="15" fill="rgb(225,156,8)"/><text x="17.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1188" width="4" height="15" fill="rgb(227,111,45)"/><text x="17.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.30%)</title><rect x="14" y="1204" width="4" height="15" fill="rgb(225,14,16)"/><text x="17.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1220" width="4" height="15" fill="rgb(229,202,30)"/><text x="17.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (5 samples, 0.30%)</title><rect x="14" y="1236" width="4" height="15" fill="rgb(253,135,41)"/><text x="17.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1252" width="4" height="15" fill="rgb(219,39,23)"/><text x="17.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1268" width="4" height="15" fill="rgb(208,88,48)"/><text x="17.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1284" width="4" height="15" fill="rgb(222,207,28)"/><text x="17.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1300" width="4" height="15" fill="rgb(210,95,4)"/><text x="17.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1316" width="4" height="15" fill="rgb(252,183,22)"/><text x="17.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.30%)</title><rect x="14" y="1332" width="4" height="15" fill="rgb(248,122,6)"/><text x="17.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1348" width="4" height="15" fill="rgb(244,113,3)"/><text x="17.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (5 samples, 0.30%)</title><rect x="14" y="1364" width="4" height="15" fill="rgb(222,63,1)"/><text x="17.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1380" width="4" height="15" fill="rgb(236,70,13)"/><text x="17.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.30%)</title><rect x="14" y="1396" width="4" height="15" fill="rgb(253,120,43)"/><text x="17.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="15" y="1412" width="3" height="15" fill="rgb(205,28,37)"/><text x="18.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.24%)</title><rect x="15" y="1428" width="3" height="15" fill="rgb(232,49,50)"/><text x="18.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.24%)</title><rect x="15" y="1444" width="3" height="15" fill="rgb(246,120,19)"/><text x="18.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.24%)</title><rect x="15" y="1460" width="3" height="15" fill="rgb(210,210,6)"/><text x="18.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.24%)</title><rect x="15" y="1476" width="3" height="15" fill="rgb(211,175,41)"/><text x="18.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.24%)</title><rect x="15" y="1492" width="3" height="15" fill="rgb(234,83,16)"/><text x="18.00" y="1502.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.53%)</title><rect x="14" y="324" width="6" height="15" fill="rgb(212,37,6)"/><text x="17.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py) (3 samples, 0.18%)</title><rect x="18" y="340" width="2" height="15" fill="rgb(225,179,26)"/><text x="21.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.18%)</title><rect x="18" y="356" width="2" height="15" fill="rgb(234,79,13)"/><text x="21.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.18%)</title><rect x="18" y="372" width="2" height="15" fill="rgb(205,59,21)"/><text x="21.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.18%)</title><rect x="18" y="388" width="2" height="15" fill="rgb(227,227,39)"/><text x="21.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.18%)</title><rect x="18" y="404" width="2" height="15" fill="rgb(224,142,53)"/><text x="21.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.18%)</title><rect x="18" y="420" width="2" height="15" fill="rgb(211,131,15)"/><text x="21.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.18%)</title><rect x="18" y="436" width="2" height="15" fill="rgb(218,115,39)"/><text x="21.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.18%)</title><rect x="18" y="452" width="2" height="15" fill="rgb(248,138,46)"/><text x="21.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.18%)</title><rect x="18" y="468" width="2" height="15" fill="rgb(221,153,36)"/><text x="21.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py) (3 samples, 0.18%)</title><rect x="18" y="484" width="2" height="15" fill="rgb(238,172,21)"/><text x="21.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.18%)</title><rect x="18" y="500" width="2" height="15" fill="rgb(250,94,27)"/><text x="21.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.18%)</title><rect x="18" y="516" width="2" height="15" fill="rgb(221,197,0)"/><text x="21.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.18%)</title><rect x="18" y="532" width="2" height="15" fill="rgb(251,175,14)"/><text x="21.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.18%)</title><rect x="18" y="548" width="2" height="15" fill="rgb(224,213,40)"/><text x="21.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.18%)</title><rect x="18" y="564" width="2" height="15" fill="rgb(243,33,17)"/><text x="21.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py) (2 samples, 0.12%)</title><rect x="19" y="580" width="1" height="15" fill="rgb(205,133,33)"/><text x="22.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="19" y="596" width="1" height="15" fill="rgb(250,111,4)"/><text x="22.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="19" y="612" width="1" height="15" fill="rgb(238,114,30)"/><text x="22.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="19" y="628" width="1" height="15" fill="rgb(229,60,51)"/><text x="22.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.12%)</title><rect x="19" y="644" width="1" height="15" fill="rgb(244,117,34)"/><text x="22.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="19" y="660" width="1" height="15" fill="rgb(211,77,10)"/><text x="22.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py) (2 samples, 0.12%)</title><rect x="19" y="676" width="1" height="15" fill="rgb(248,115,5)"/><text x="22.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="19" y="692" width="1" height="15" fill="rgb(237,136,8)"/><text x="22.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="19" y="708" width="1" height="15" fill="rgb(237,97,22)"/><text x="22.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="19" y="724" width="1" height="15" fill="rgb(224,169,16)"/><text x="22.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.12%)</title><rect x="19" y="740" width="1" height="15" fill="rgb(221,122,46)"/><text x="22.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.12%)</title><rect x="19" y="756" width="1" height="15" fill="rgb(213,13,48)"/><text x="22.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py) (2 samples, 0.12%)</title><rect x="19" y="772" width="1" height="15" fill="rgb(227,94,43)"/><text x="22.00" y="782.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (10 samples, 0.59%)</title><rect x="14" y="244" width="7" height="15" fill="rgb(221,104,51)"/><text x="17.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (10 samples, 0.59%)</title><rect x="14" y="260" width="7" height="15" fill="rgb(207,201,46)"/><text x="17.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 0.59%)</title><rect x="14" y="276" width="7" height="15" fill="rgb(237,42,5)"/><text x="17.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 0.59%)</title><rect x="14" y="292" width="7" height="15" fill="rgb(226,129,36)"/><text x="17.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (10 samples, 0.59%)</title><rect x="14" y="308" width="7" height="15" fill="rgb(228,137,19)"/><text x="17.00" y="318.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (17 samples, 1.01%)</title><rect x="10" y="68" width="11" height="15" fill="rgb(214,43,3)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (17 samples, 1.01%)</title><rect x="10" y="84" width="11" height="15" fill="rgb(220,159,24)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (17 samples, 1.01%)</title><rect x="10" y="100" width="11" height="15" fill="rgb(221,146,40)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (17 samples, 1.01%)</title><rect x="10" y="116" width="11" height="15" fill="rgb(221,12,44)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (17 samples, 1.01%)</title><rect x="10" y="132" width="11" height="15" fill="rgb(236,8,54)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py) (17 samples, 1.01%)</title><rect x="10" y="148" width="11" height="15" fill="rgb(217,128,33)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (17 samples, 1.01%)</title><rect x="10" y="164" width="11" height="15" fill="rgb(219,76,39)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (17 samples, 1.01%)</title><rect x="10" y="180" width="11" height="15" fill="rgb(236,171,5)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.65%)</title><rect x="14" y="196" width="7" height="15" fill="rgb(241,164,25)"/><text x="17.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (11 samples, 0.65%)</title><rect x="14" y="212" width="7" height="15" fill="rgb(240,173,32)"/><text x="17.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.65%)</title><rect x="14" y="228" width="7" height="15" fill="rgb(215,213,23)"/><text x="17.00" y="238.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.30%)</title><rect x="29" y="388" width="4" height="15" fill="rgb(225,119,4)"/><text x="32.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.24%)</title><rect x="30" y="404" width="3" height="15" fill="rgb(205,196,6)"/><text x="33.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.18%)</title><rect x="31" y="420" width="2" height="15" fill="rgb(205,84,0)"/><text x="34.00" y="430.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="33" y="388" width="2" height="15" fill="rgb(245,221,6)"/><text x="36.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="33" y="404" width="2" height="15" fill="rgb(228,156,1)"/><text x="36.00" y="414.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (2 samples, 0.12%)</title><rect x="42" y="468" width="1" height="15" fill="rgb(245,196,7)"/><text x="45.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkIterFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.12%)</title><rect x="44" y="484" width="1" height="15" fill="rgb(222,9,1)"/><text x="47.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.36%)</title><rect x="42" y="452" width="4" height="15" fill="rgb(232,121,6)"/><text x="45.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.24%)</title><rect x="43" y="468" width="3" height="15" fill="rgb(245,177,45)"/><text x="46.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.48%)</title><rect x="46" y="452" width="6" height="15" fill="rgb(247,215,15)"/><text x="49.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.42%)</title><rect x="47" y="468" width="5" height="15" fill="rgb(244,31,17)"/><text x="50.00" y="478.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.12%)</title><rect x="50" y="484" width="2" height="15" fill="rgb(207,72,7)"/><text x="53.00" y="494.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 1.07%)</title><rect x="40" y="436" width="13" height="15" fill="rgb(239,201,35)"/><text x="43.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="54" y="468" width="2" height="15" fill="rgb(238,66,31)"/><text x="57.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.12%)</title><rect x="54" y="484" width="2" height="15" fill="rgb(231,83,12)"/><text x="57.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.12%)</title><rect x="54" y="500" width="2" height="15" fill="rgb(232,105,17)"/><text x="57.00" y="510.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.12%)</title><rect x="54" y="516" width="2" height="15" fill="rgb(239,30,14)"/><text x="57.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.30%)</title><rect x="53" y="436" width="3" height="15" fill="rgb(224,206,41)"/><text x="56.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.30%)</title><rect x="53" y="452" width="3" height="15" fill="rgb(249,111,3)"/><text x="56.00" y="462.50"></text></g><g><title>onnxruntime::GraphViewer::GetNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="56" y="436" width="3" height="15" fill="rgb(223,68,47)"/><text x="59.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOutputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="59" y="436" width="2" height="15" fill="rgb(232,229,8)"/><text x="62.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="61" y="436" width="2" height="15" fill="rgb(247,175,1)"/><text x="64.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="61" y="452" width="2" height="15" fill="rgb(215,163,5)"/><text x="64.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="61" y="468" width="2" height="15" fill="rgb(205,120,32)"/><text x="64.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.12%)</title><rect x="63" y="436" width="1" height="15" fill="rgb(238,52,50)"/><text x="66.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="66" y="452" width="2" height="15" fill="rgb(230,36,3)"/><text x="69.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="66" y="468" width="2" height="15" fill="rgb(253,43,41)"/><text x="69.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="66" y="484" width="2" height="15" fill="rgb(248,40,28)"/><text x="69.00" y="494.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.36%)</title><rect x="64" y="436" width="4" height="15" fill="rgb(240,82,0)"/><text x="67.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::OpKernelContext (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="68" y="436" width="2" height="15" fill="rgb(227,74,52)"/><text x="71.00" y="446.50"></text></g><g><title>0x7fa2a2cb9991 (libc-2.29.so) (2 samples, 0.12%)</title><rect x="83" y="468" width="2" height="15" fill="rgb(248,68,25)"/><text x="86.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.36%)</title><rect x="85" y="468" width="4" height="15" fill="rgb(228,197,16)"/><text x="88.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.36%)</title><rect x="85" y="484" width="4" height="15" fill="rgb(233,147,28)"/><text x="88.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.30%)</title><rect x="85" y="500" width="4" height="15" fill="rgb(232,206,38)"/><text x="88.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.24%)</title><rect x="86" y="516" width="3" height="15" fill="rgb(253,173,12)"/><text x="89.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="87" y="532" width="2" height="15" fill="rgb(253,9,10)"/><text x="90.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="87" y="548" width="2" height="15" fill="rgb(246,19,45)"/><text x="90.00" y="558.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="90" y="468" width="2" height="15" fill="rgb(253,227,42)"/><text x="93.00" y="478.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="92" y="468" width="2" height="15" fill="rgb(217,18,22)"/><text x="95.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.12%)</title><rect x="93" y="484" width="1" height="15" fill="rgb(213,135,45)"/><text x="96.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.12%)</title><rect x="93" y="500" width="1" height="15" fill="rgb(219,213,0)"/><text x="96.00" y="510.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (36 samples, 2.14%)</title><rect x="70" y="452" width="26" height="15" fill="rgb(234,13,22)"/><text x="73.00" y="462.50">o..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.12%)</title><rect x="94" y="468" width="2" height="15" fill="rgb(212,55,23)"/><text x="97.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.12%)</title><rect x="94" y="484" width="2" height="15" fill="rgb(243,204,49)"/><text x="97.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.12%)</title><rect x="94" y="500" width="2" height="15" fill="rgb(221,99,9)"/><text x="97.00" y="510.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (37 samples, 2.20%)</title><rect x="70" y="436" width="26" height="15" fill="rgb(241,203,13)"/><text x="73.00" y="446.50">o..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.12%)</title><rect x="96" y="468" width="2" height="15" fill="rgb(238,165,19)"/><text x="99.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.12%)</title><rect x="98" y="468" width="1" height="15" fill="rgb(238,2,54)"/><text x="101.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2247] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="99" y="468" width="2" height="15" fill="rgb(240,224,34)"/><text x="102.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="101" y="468" width="2" height="15" fill="rgb(210,176,46)"/><text x="104.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="101" y="484" width="2" height="15" fill="rgb(225,60,35)"/><text x="104.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="101" y="500" width="2" height="15" fill="rgb(223,66,42)"/><text x="104.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="101" y="516" width="2" height="15" fill="rgb(248,10,16)"/><text x="104.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="101" y="532" width="2" height="15" fill="rgb(216,42,5)"/><text x="104.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.18%)</title><rect x="101" y="548" width="2" height="15" fill="rgb(236,66,36)"/><text x="104.00" y="558.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.30%)</title><rect x="106" y="500" width="4" height="15" fill="rgb(209,196,43)"/><text x="109.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.12%)</title><rect x="108" y="516" width="2" height="15" fill="rgb(253,150,14)"/><text x="111.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.12%)</title><rect x="108" y="532" width="2" height="15" fill="rgb(221,93,52)"/><text x="111.00" y="542.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.59%)</title><rect x="103" y="484" width="7" height="15" fill="rgb(236,221,25)"/><text x="106.00" y="494.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.71%)</title><rect x="103" y="468" width="9" height="15" fill="rgb(241,135,11)"/><text x="106.00" y="478.50"></text></g><g><title>onnxruntime::Tensor::Data&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.12%)</title><rect x="110" y="484" width="2" height="15" fill="rgb(213,221,12)"/><text x="113.00" y="494.50"></text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (111 samples, 6.60%)</title><rect x="35" y="388" width="78" height="15" fill="rgb(227,92,19)"/><text x="38.00" y="398.50">onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (110 samples, 6.54%)</title><rect x="36" y="404" width="77" height="15" fill="rgb(252,189,9)"/><text x="39.00" y="414.50">onnxrunt..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (110 samples, 6.54%)</title><rect x="36" y="420" width="77" height="15" fill="rgb(213,105,20)"/><text x="39.00" y="430.50">onnxrunt..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (24 samples, 1.43%)</title><rect x="96" y="436" width="17" height="15" fill="rgb(206,183,38)"/><text x="99.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (24 samples, 1.43%)</title><rect x="96" y="452" width="17" height="15" fill="rgb(245,137,18)"/><text x="99.00" y="462.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (125 samples, 7.43%)</title><rect x="26" y="356" width="88" height="15" fill="rgb(219,72,6)"/><text x="29.00" y="366.50">onnxruntim..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (125 samples, 7.43%)</title><rect x="26" y="372" width="88" height="15" fill="rgb(235,172,29)"/><text x="29.00" y="382.50">onnxruntim..</text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (126 samples, 7.49%)</title><rect x="26" y="340" width="89" height="15" fill="rgb(230,36,9)"/><text x="29.00" y="350.50">onnxruntim..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (129 samples, 7.66%)</title><rect x="25" y="260" width="90" height="15" fill="rgb(217,65,20)"/><text x="28.00" y="270.50">onnxruntim..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (129 samples, 7.66%)</title><rect x="25" y="276" width="90" height="15" fill="rgb(217,195,22)"/><text x="28.00" y="286.50">onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (128 samples, 7.61%)</title><rect x="26" y="292" width="89" height="15" fill="rgb(239,120,28)"/><text x="29.00" y="302.50">onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (128 samples, 7.61%)</title><rect x="26" y="308" width="89" height="15" fill="rgb(240,196,46)"/><text x="29.00" y="318.50">onnxruntim..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (128 samples, 7.61%)</title><rect x="26" y="324" width="89" height="15" fill="rgb(235,103,23)"/><text x="29.00" y="334.50">onnxruntim..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (134 samples, 7.96%)</title><rect x="22" y="68" width="94" height="15" fill="rgb(240,30,51)"/><text x="25.00" y="78.50">profile_ort..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (134 samples, 7.96%)</title><rect x="22" y="84" width="94" height="15" fill="rgb(248,208,31)"/><text x="25.00" y="94.50">setup_profi..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (134 samples, 7.96%)</title><rect x="22" y="100" width="94" height="15" fill="rgb(239,61,17)"/><text x="25.00" y="110.50">profile (be..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (134 samples, 7.96%)</title><rect x="22" y="116" width="94" height="15" fill="rgb(246,145,40)"/><text x="25.00" y="126.50">time_predic..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (134 samples, 7.96%)</title><rect x="22" y="132" width="94" height="15" fill="rgb(206,185,29)"/><text x="25.00" y="142.50">&lt;lambda&gt; (m..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (134 samples, 7.96%)</title><rect x="22" y="148" width="94" height="15" fill="rgb(219,226,47)"/><text x="25.00" y="158.50">run (mlprod..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (133 samples, 7.90%)</title><rect x="23" y="164" width="93" height="15" fill="rgb(243,135,34)"/><text x="26.00" y="174.50">_run_whole_..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (133 samples, 7.90%)</title><rect x="23" y="180" width="93" height="15" fill="rgb(207,76,6)"/><text x="26.00" y="190.50">run (mlprod..</text></g><g><title>run (onnxruntime/capi/session.py) (132 samples, 7.84%)</title><rect x="24" y="196" width="92" height="15" fill="rgb(244,159,26)"/><text x="27.00" y="206.50">run (onnxr..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (130 samples, 7.72%)</title><rect x="25" y="212" width="91" height="15" fill="rgb(251,211,29)"/><text x="28.00" y="222.50">pybind11::..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (130 samples, 7.72%)</title><rect x="25" y="228" width="91" height="15" fill="rgb(240,186,30)"/><text x="28.00" y="238.50">void pybin..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (130 samples, 7.72%)</title><rect x="25" y="244" width="91" height="15" fill="rgb(238,71,54)"/><text x="28.00" y="254.50">onnxruntim..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (3 samples, 0.18%)</title><rect x="122" y="212" width="2" height="15" fill="rgb(247,179,40)"/><text x="125.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (2 samples, 0.12%)</title><rect x="122" y="228" width="2" height="15" fill="rgb(208,154,29)"/><text x="125.00" y="238.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (2 samples, 0.12%)</title><rect x="122" y="244" width="2" height="15" fill="rgb(235,199,15)"/><text x="125.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (5 samples, 0.30%)</title><rect x="124" y="212" width="3" height="15" fill="rgb(245,153,36)"/><text x="127.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;) (3 samples, 0.18%)</title><rect x="125" y="228" width="2" height="15" fill="rgb(252,10,7)"/><text x="128.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.18%)</title><rect x="125" y="244" width="2" height="15" fill="rgb(207,138,15)"/><text x="128.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py) (3 samples, 0.18%)</title><rect x="125" y="260" width="2" height="15" fill="rgb(248,97,21)"/><text x="128.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (3 samples, 0.18%)</title><rect x="125" y="276" width="2" height="15" fill="rgb(216,224,49)"/><text x="128.00" y="286.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (4 samples, 0.24%)</title><rect x="200" y="228" width="3" height="15" fill="rgb(251,30,12)"/><text x="203.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (7 samples, 0.42%)</title><rect x="204" y="228" width="5" height="15" fill="rgb(231,109,27)"/><text x="207.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (4 samples, 0.24%)</title><rect x="206" y="244" width="3" height="15" fill="rgb(229,64,23)"/><text x="209.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (4 samples, 0.24%)</title><rect x="206" y="260" width="3" height="15" fill="rgb(254,49,44)"/><text x="209.00" y="270.50"></text></g><g><title>get_view_from_index (mapping.c) (7 samples, 0.42%)</title><rect x="211" y="244" width="5" height="15" fill="rgb(235,156,39)"/><text x="214.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (4 samples, 0.24%)</title><rect x="213" y="260" width="3" height="15" fill="rgb(222,127,35)"/><text x="216.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.24%)</title><rect x="213" y="276" width="3" height="15" fill="rgb(205,156,26)"/><text x="216.00" y="286.50"></text></g><g><title>array_subscript (mapping.c) (15 samples, 0.89%)</title><rect x="209" y="228" width="11" height="15" fill="rgb(207,151,16)"/><text x="212.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (6 samples, 0.36%)</title><rect x="216" y="244" width="4" height="15" fill="rgb(238,158,8)"/><text x="219.00" y="254.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (3 samples, 0.18%)</title><rect x="265" y="276" width="3" height="15" fill="rgb(241,135,19)"/><text x="268.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (2 samples, 0.12%)</title><rect x="272" y="292" width="1" height="15" fill="rgb(228,204,13)"/><text x="275.00" y="302.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (7 samples, 0.42%)</title><rect x="273" y="292" width="5" height="15" fill="rgb(236,49,36)"/><text x="276.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (4 samples, 0.24%)</title><rect x="275" y="308" width="3" height="15" fill="rgb(205,153,48)"/><text x="278.00" y="318.50"></text></g><g><title>array_reshape (methods.c) (22 samples, 1.31%)</title><rect x="268" y="276" width="15" height="15" fill="rgb(211,227,27)"/><text x="271.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (6 samples, 0.36%)</title><rect x="279" y="292" width="4" height="15" fill="rgb(254,45,28)"/><text x="282.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (6 samples, 0.36%)</title><rect x="279" y="308" width="4" height="15" fill="rgb(254,91,53)"/><text x="282.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 0.30%)</title><rect x="279" y="324" width="4" height="15" fill="rgb(210,184,52)"/><text x="282.00" y="334.50"></text></g><g><title>array_alloc (arrayobject.c) (3 samples, 0.18%)</title><rect x="281" y="340" width="2" height="15" fill="rgb(248,14,22)"/><text x="284.00" y="350.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (86 samples, 5.11%)</title><rect x="232" y="260" width="60" height="15" fill="rgb(248,36,38)"/><text x="235.00" y="270.50">expand..</text></g><g><title>asanyarray (numpy/core/_asarray.py) (13 samples, 0.77%)</title><rect x="283" y="276" width="9" height="15" fill="rgb(235,42,49)"/><text x="286.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.12%)</title><rect x="291" y="292" width="1" height="15" fill="rgb(217,25,19)"/><text x="294.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (104 samples, 6.18%)</title><rect x="220" y="228" width="73" height="15" fill="rgb(216,137,31)"/><text x="223.00" y="238.50">expand_d..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (93 samples, 5.53%)</title><rect x="228" y="244" width="65" height="15" fill="rgb(224,126,12)"/><text x="231.00" y="254.50">array_i..</text></g><g><title>0x7fa2a2cda124 (libc-2.29.so) (2 samples, 0.12%)</title><rect x="383" y="260" width="1" height="15" fill="rgb(246,204,16)"/><text x="386.00" y="270.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (18 samples, 1.07%)</title><rect x="385" y="260" width="13" height="15" fill="rgb(213,170,32)"/><text x="388.00" y="270.50"></text></g><g><title>unicode_eq (python3.7) (2 samples, 0.12%)</title><rect x="397" y="276" width="1" height="15" fill="rgb(233,110,15)"/><text x="400.00" y="286.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (11 samples, 0.65%)</title><rect x="610" y="276" width="7" height="15" fill="rgb(213,40,51)"/><text x="613.00" y="286.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (8 samples, 0.48%)</title><rect x="662" y="292" width="5" height="15" fill="rgb(209,170,47)"/><text x="665.00" y="302.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (5 samples, 0.30%)</title><rect x="706" y="340" width="3" height="15" fill="rgb(250,182,23)"/><text x="709.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (3 samples, 0.18%)</title><rect x="707" y="356" width="2" height="15" fill="rgb(232,218,4)"/><text x="710.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (6 samples, 0.36%)</title><rect x="716" y="388" width="4" height="15" fill="rgb(248,152,54)"/><text x="719.00" y="398.50"></text></g><g><title>promote_types (convert_datatype.c) (3 samples, 0.18%)</title><rect x="718" y="404" width="2" height="15" fill="rgb(247,32,15)"/><text x="721.00" y="414.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (3 samples, 0.18%)</title><rect x="718" y="420" width="2" height="15" fill="rgb(251,108,14)"/><text x="721.00" y="430.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (10 samples, 0.59%)</title><rect x="714" y="356" width="7" height="15" fill="rgb(252,84,3)"/><text x="717.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (10 samples, 0.59%)</title><rect x="714" y="372" width="7" height="15" fill="rgb(251,136,32)"/><text x="717.00" y="382.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (2 samples, 0.12%)</title><rect x="722" y="356" width="1" height="15" fill="rgb(231,113,2)"/><text x="725.00" y="366.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (4 samples, 0.24%)</title><rect x="723" y="356" width="3" height="15" fill="rgb(227,103,35)"/><text x="726.00" y="366.50"></text></g><g><title>get_global_ext_obj (extobj.c) (2 samples, 0.12%)</title><rect x="725" y="372" width="1" height="15" fill="rgb(254,161,25)"/><text x="728.00" y="382.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (3 samples, 0.18%)</title><rect x="727" y="372" width="2" height="15" fill="rgb(235,129,10)"/><text x="730.00" y="382.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (3 samples, 0.18%)</title><rect x="730" y="388" width="2" height="15" fill="rgb(223,189,34)"/><text x="733.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (3 samples, 0.18%)</title><rect x="730" y="404" width="2" height="15" fill="rgb(246,190,30)"/><text x="733.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (3 samples, 0.18%)</title><rect x="730" y="420" width="2" height="15" fill="rgb(223,221,16)"/><text x="733.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.30%)</title><rect x="734" y="404" width="3" height="15" fill="rgb(205,217,53)"/><text x="737.00" y="414.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (2 samples, 0.12%)</title><rect x="744" y="468" width="1" height="15" fill="rgb(252,46,38)"/><text x="747.00" y="478.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (2 samples, 0.12%)</title><rect x="744" y="484" width="1" height="15" fill="rgb(228,228,6)"/><text x="747.00" y="494.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (13 samples, 0.77%)</title><rect x="737" y="404" width="9" height="15" fill="rgb(246,122,42)"/><text x="740.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (8 samples, 0.48%)</title><rect x="741" y="420" width="5" height="15" fill="rgb(210,104,4)"/><text x="744.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (7 samples, 0.42%)</title><rect x="741" y="436" width="5" height="15" fill="rgb(211,215,22)"/><text x="744.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (7 samples, 0.42%)</title><rect x="741" y="452" width="5" height="15" fill="rgb(231,182,33)"/><text x="744.00" y="462.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (5 samples, 0.30%)</title><rect x="748" y="404" width="4" height="15" fill="rgb(208,217,50)"/><text x="751.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (33 samples, 1.96%)</title><rect x="732" y="388" width="23" height="15" fill="rgb(252,85,44)"/><text x="735.00" y="398.50">N..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (4 samples, 0.24%)</title><rect x="752" y="404" width="3" height="15" fill="rgb(221,157,53)"/><text x="755.00" y="414.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (3 samples, 0.18%)</title><rect x="753" y="420" width="2" height="15" fill="rgb(215,227,22)"/><text x="756.00" y="430.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (5 samples, 0.30%)</title><rect x="755" y="388" width="3" height="15" fill="rgb(239,219,51)"/><text x="758.00" y="398.50"></text></g><g><title>free (libc-2.29.so) (2 samples, 0.12%)</title><rect x="757" y="404" width="1" height="15" fill="rgb(228,208,5)"/><text x="760.00" y="414.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (3 samples, 0.18%)</title><rect x="759" y="388" width="2" height="15" fill="rgb(226,105,19)"/><text x="762.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (2 samples, 0.12%)</title><rect x="760" y="404" width="1" height="15" fill="rgb(215,217,35)"/><text x="763.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (50 samples, 2.97%)</title><rect x="727" y="356" width="35" height="15" fill="rgb(218,204,44)"/><text x="730.00" y="366.50">ex..</text></g><g><title>iterator_loop (ufunc_object.c) (47 samples, 2.79%)</title><rect x="729" y="372" width="33" height="15" fill="rgb(247,107,26)"/><text x="732.00" y="382.50">it..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (5 samples, 0.30%)</title><rect x="763" y="356" width="3" height="15" fill="rgb(239,88,34)"/><text x="766.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (84 samples, 4.99%)</title><rect x="709" y="340" width="59" height="15" fill="rgb(222,127,21)"/><text x="712.00" y="350.50">PyUFun..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (3 samples, 0.18%)</title><rect x="766" y="356" width="2" height="15" fill="rgb(251,68,41)"/><text x="769.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (2 samples, 0.12%)</title><rect x="767" y="372" width="1" height="15" fill="rgb(242,44,54)"/><text x="770.00" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (2 samples, 0.12%)</title><rect x="767" y="388" width="1" height="15" fill="rgb(223,56,30)"/><text x="770.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (107 samples, 6.36%)</title><rect x="694" y="308" width="75" height="15" fill="rgb(237,124,32)"/><text x="697.00" y="318.50">_run (ml..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (91 samples, 5.41%)</title><rect x="705" y="324" width="64" height="15" fill="rgb(228,66,15)"/><text x="708.00" y="334.50">ufunc_g..</text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (4 samples, 0.24%)</title><rect x="795" y="388" width="3" height="15" fill="rgb(238,6,16)"/><text x="798.00" y="398.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (2 samples, 0.12%)</title><rect x="796" y="404" width="2" height="15" fill="rgb(253,118,19)"/><text x="799.00" y="414.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (4 samples, 0.24%)</title><rect x="798" y="388" width="2" height="15" fill="rgb(217,61,3)"/><text x="801.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.18%)</title><rect x="798" y="404" width="2" height="15" fill="rgb(212,69,7)"/><text x="801.00" y="414.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (2 samples, 0.12%)</title><rect x="802" y="388" width="1" height="15" fill="rgb(205,25,34)"/><text x="805.00" y="398.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (2 samples, 0.12%)</title><rect x="803" y="388" width="2" height="15" fill="rgb(251,69,52)"/><text x="806.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (28 samples, 1.66%)</title><rect x="787" y="356" width="20" height="15" fill="rgb(238,48,27)"/><text x="790.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (27 samples, 1.60%)</title><rect x="788" y="372" width="19" height="15" fill="rgb(237,92,39)"/><text x="791.00" y="382.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (2 samples, 0.12%)</title><rect x="805" y="388" width="2" height="15" fill="rgb(237,152,27)"/><text x="808.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (56 samples, 3.33%)</title><rect x="769" y="308" width="39" height="15" fill="rgb(242,59,16)"/><text x="772.00" y="318.50">_ru..</text></g><g><title>array_copy (methods.c) (33 samples, 1.96%)</title><rect x="785" y="324" width="23" height="15" fill="rgb(224,184,22)"/><text x="788.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c) (30 samples, 1.78%)</title><rect x="787" y="340" width="21" height="15" fill="rgb(213,182,22)"/><text x="790.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (2 samples, 0.12%)</title><rect x="807" y="356" width="1" height="15" fill="rgb(242,11,29)"/><text x="810.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.12%)</title><rect x="807" y="372" width="1" height="15" fill="rgb(247,111,53)"/><text x="810.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (2 samples, 0.12%)</title><rect x="807" y="388" width="1" height="15" fill="rgb(220,200,3)"/><text x="810.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.12%)</title><rect x="807" y="404" width="1" height="15" fill="rgb(252,97,44)"/><text x="810.00" y="414.50"></text></g><g><title>0x7fa2a2cda124 (libc-2.29.so) (2 samples, 0.12%)</title><rect x="834" y="324" width="1" height="15" fill="rgb(246,197,14)"/><text x="837.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (9 samples, 0.53%)</title><rect x="836" y="340" width="6" height="15" fill="rgb(240,182,9)"/><text x="839.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (8 samples, 0.48%)</title><rect x="837" y="356" width="5" height="15" fill="rgb(232,68,48)"/><text x="840.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c) (11 samples, 0.65%)</title><rect x="835" y="324" width="8" height="15" fill="rgb(210,70,37)"/><text x="838.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py) (3 samples, 0.18%)</title><rect x="856" y="340" width="2" height="15" fill="rgb(253,37,36)"/><text x="859.00" y="350.50"></text></g><g><title>0x7fa2a1edac40 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="861" y="356" width="1" height="15" fill="rgb(220,120,54)"/><text x="864.00" y="366.50"></text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (3 samples, 0.18%)</title><rect x="862" y="356" width="2" height="15" fill="rgb(238,213,25)"/><text x="865.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (18 samples, 1.07%)</title><rect x="916" y="388" width="13" height="15" fill="rgb(229,13,7)"/><text x="919.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (2 samples, 0.12%)</title><rect x="931" y="436" width="1" height="15" fill="rgb(217,202,29)"/><text x="934.00" y="446.50"></text></g><g><title>0x7fa2a2ccfe7a (libc-2.29.so) (2 samples, 0.12%)</title><rect x="934" y="452" width="2" height="15" fill="rgb(217,23,45)"/><text x="937.00" y="462.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (14 samples, 0.83%)</title><rect x="929" y="404" width="9" height="15" fill="rgb(254,59,1)"/><text x="932.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (13 samples, 0.77%)</title><rect x="929" y="420" width="9" height="15" fill="rgb(244,175,18)"/><text x="932.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (9 samples, 0.53%)</title><rect x="932" y="436" width="6" height="15" fill="rgb(205,119,27)"/><text x="935.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (4 samples, 0.24%)</title><rect x="936" y="452" width="2" height="15" fill="rgb(217,124,4)"/><text x="939.00" y="462.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (2 samples, 0.12%)</title><rect x="948" y="420" width="1" height="15" fill="rgb(210,227,43)"/><text x="951.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (7 samples, 0.42%)</title><rect x="950" y="420" width="5" height="15" fill="rgb(226,162,42)"/><text x="953.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (7 samples, 0.42%)</title><rect x="950" y="436" width="5" height="15" fill="rgb(247,197,2)"/><text x="953.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (7 samples, 0.42%)</title><rect x="950" y="452" width="5" height="15" fill="rgb(240,3,8)"/><text x="953.00" y="462.50"></text></g><g><title>0x7fa2a1edb600 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.12%)</title><rect x="953" y="468" width="2" height="15" fill="rgb(246,189,27)"/><text x="956.00" y="478.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (8 samples, 0.48%)</title><rect x="963" y="468" width="6" height="15" fill="rgb(228,6,17)"/><text x="966.00" y="478.50"></text></g><g><title>IsUintAligned (array_assign.c) (3 samples, 0.18%)</title><rect x="967" y="484" width="2" height="15" fill="rgb(206,183,46)"/><text x="970.00" y="494.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c) (2 samples, 0.12%)</title><rect x="970" y="468" width="1" height="15" fill="rgb(214,50,22)"/><text x="973.00" y="478.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (4 samples, 0.24%)</title><rect x="971" y="468" width="3" height="15" fill="rgb(207,16,51)"/><text x="974.00" y="478.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (6 samples, 0.36%)</title><rect x="974" y="468" width="4" height="15" fill="rgb(246,48,37)"/><text x="977.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (32 samples, 1.90%)</title><rect x="959" y="452" width="22" height="15" fill="rgb(232,223,20)"/><text x="962.00" y="462.50">N..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (4 samples, 0.24%)</title><rect x="978" y="468" width="3" height="15" fill="rgb(211,165,33)"/><text x="981.00" y="478.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (2 samples, 0.12%)</title><rect x="980" y="484" width="1" height="15" fill="rgb(210,153,10)"/><text x="983.00" y="494.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (3 samples, 0.18%)</title><rect x="981" y="452" width="2" height="15" fill="rgb(222,51,27)"/><text x="984.00" y="462.50"></text></g><g><title>NpyIter_GetInnerStrideArray (nditer_api.c) (2 samples, 0.12%)</title><rect x="984" y="452" width="1" height="15" fill="rgb(226,31,12)"/><text x="987.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c) (5 samples, 0.30%)</title><rect x="991" y="516" width="4" height="15" fill="rgb(225,187,50)"/><text x="994.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (5 samples, 0.30%)</title><rect x="991" y="532" width="4" height="15" fill="rgb(223,197,12)"/><text x="994.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (4 samples, 0.24%)</title><rect x="992" y="548" width="3" height="15" fill="rgb(220,71,51)"/><text x="995.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.24%)</title><rect x="992" y="564" width="3" height="15" fill="rgb(246,119,40)"/><text x="995.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (20 samples, 1.19%)</title><rect x="986" y="484" width="14" height="15" fill="rgb(251,174,28)"/><text x="989.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (20 samples, 1.19%)</title><rect x="986" y="500" width="14" height="15" fill="rgb(247,115,28)"/><text x="989.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (8 samples, 0.48%)</title><rect x="995" y="516" width="5" height="15" fill="rgb(238,74,5)"/><text x="998.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (7 samples, 0.42%)</title><rect x="995" y="532" width="5" height="15" fill="rgb(229,79,10)"/><text x="998.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.42%)</title><rect x="995" y="548" width="5" height="15" fill="rgb(249,49,8)"/><text x="998.00" y="558.50"></text></g><g><title>0x7fa2a2cd9d50 (libc-2.29.so) (2 samples, 0.12%)</title><rect x="1004" y="500" width="2" height="15" fill="rgb(233,142,45)"/><text x="1007.00" y="510.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (29 samples, 1.72%)</title><rect x="986" y="452" width="21" height="15" fill="rgb(223,49,22)"/><text x="989.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (29 samples, 1.72%)</title><rect x="986" y="468" width="21" height="15" fill="rgb(212,155,45)"/><text x="989.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (8 samples, 0.48%)</title><rect x="1001" y="484" width="6" height="15" fill="rgb(238,223,38)"/><text x="1004.00" y="494.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (2 samples, 0.12%)</title><rect x="1018" y="500" width="2" height="15" fill="rgb(236,175,29)"/><text x="1021.00" y="510.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c) (5 samples, 0.30%)</title><rect x="1020" y="500" width="3" height="15" fill="rgb(222,199,27)"/><text x="1023.00" y="510.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.18%)</title><rect x="1021" y="516" width="2" height="15" fill="rgb(234,58,30)"/><text x="1024.00" y="526.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (27 samples, 1.60%)</title><rect x="1007" y="452" width="18" height="15" fill="rgb(248,174,6)"/><text x="1010.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (17 samples, 1.01%)</title><rect x="1014" y="468" width="11" height="15" fill="rgb(211,61,32)"/><text x="1017.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (17 samples, 1.01%)</title><rect x="1014" y="484" width="11" height="15" fill="rgb(250,166,50)"/><text x="1017.00" y="494.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (2 samples, 0.12%)</title><rect x="1029" y="468" width="1" height="15" fill="rgb(216,24,5)"/><text x="1032.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (109 samples, 6.48%)</title><rect x="956" y="436" width="76" height="15" fill="rgb(236,133,45)"/><text x="959.00" y="446.50">PyUFunc_..</text></g><g><title>reduce_loop (ufunc_object.c) (7 samples, 0.42%)</title><rect x="1028" y="452" width="4" height="15" fill="rgb(238,88,8)"/><text x="1031.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (3 samples, 0.18%)</title><rect x="1030" y="468" width="2" height="15" fill="rgb(209,127,14)"/><text x="1033.00" y="478.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (3 samples, 0.18%)</title><rect x="1030" y="484" width="2" height="15" fill="rgb(237,191,30)"/><text x="1033.00" y="494.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (2 samples, 0.12%)</title><rect x="1037" y="484" width="1" height="15" fill="rgb(245,15,23)"/><text x="1040.00" y="494.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (3 samples, 0.18%)</title><rect x="1037" y="452" width="2" height="15" fill="rgb(235,67,26)"/><text x="1040.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (3 samples, 0.18%)</title><rect x="1037" y="468" width="2" height="15" fill="rgb(207,187,37)"/><text x="1040.00" y="478.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (121 samples, 7.19%)</title><rect x="955" y="420" width="84" height="15" fill="rgb(220,148,45)"/><text x="958.00" y="430.50">PyUFunc_R..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (8 samples, 0.48%)</title><rect x="1034" y="436" width="5" height="15" fill="rgb(224,167,13)"/><text x="1037.00" y="446.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (280 samples, 16.64%)</title><rect x="844" y="324" width="196" height="15" fill="rgb(226,220,12)"/><text x="847.00" y="334.50">sum (&lt;__array_function__ ..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (260 samples, 15.45%)</title><rect x="858" y="340" width="182" height="15" fill="rgb(223,187,39)"/><text x="861.00" y="350.50">array_implement_array_f..</text></g><g><title>sum (numpy/core/fromnumeric.py) (250 samples, 14.85%)</title><rect x="865" y="356" width="175" height="15" fill="rgb(217,9,22)"/><text x="868.00" y="366.50">sum (numpy/core/fromnu..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (208 samples, 12.36%)</title><rect x="894" y="372" width="146" height="15" fill="rgb(254,105,3)"/><text x="897.00" y="382.50">_wrapreduction (nu..</text></g><g><title>ufunc_reduce (ufunc_object.c) (159 samples, 9.45%)</title><rect x="929" y="388" width="111" height="15" fill="rgb(216,209,14)"/><text x="932.00" y="398.50">ufunc_reduce ..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (145 samples, 8.62%)</title><rect x="938" y="404" width="102" height="15" fill="rgb(214,175,15)"/><text x="941.00" y="414.50">PyUFunc_Gene..</text></g><g><title>check_for_trivial_loop (ufunc_object.c) (5 samples, 0.30%)</title><rect x="1049" y="356" width="3" height="15" fill="rgb(227,140,43)"/><text x="1052.00" y="366.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (2 samples, 0.12%)</title><rect x="1051" y="372" width="1" height="15" fill="rgb(239,155,50)"/><text x="1054.00" y="382.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (2 samples, 0.12%)</title><rect x="1054" y="404" width="2" height="15" fill="rgb(227,80,46)"/><text x="1057.00" y="414.50"></text></g><g><title>array_alloc (arrayobject.c) (2 samples, 0.12%)</title><rect x="1056" y="404" width="1" height="15" fill="rgb(213,194,20)"/><text x="1059.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (16 samples, 0.95%)</title><rect x="1052" y="372" width="11" height="15" fill="rgb(209,197,17)"/><text x="1055.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (16 samples, 0.95%)</title><rect x="1052" y="388" width="11" height="15" fill="rgb(214,121,16)"/><text x="1055.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (9 samples, 0.53%)</title><rect x="1057" y="404" width="6" height="15" fill="rgb(228,107,8)"/><text x="1060.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (9 samples, 0.53%)</title><rect x="1057" y="420" width="6" height="15" fill="rgb(242,201,7)"/><text x="1060.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (8 samples, 0.48%)</title><rect x="1058" y="436" width="5" height="15" fill="rgb(226,212,14)"/><text x="1061.00" y="446.50"></text></g><g><title>0x7fa2a2cbb700 (libc-2.29.so) (2 samples, 0.12%)</title><rect x="1062" y="452" width="1" height="15" fill="rgb(213,89,25)"/><text x="1065.00" y="462.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (21 samples, 1.25%)</title><rect x="1052" y="356" width="15" height="15" fill="rgb(251,155,6)"/><text x="1055.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (4 samples, 0.24%)</title><rect x="1064" y="372" width="3" height="15" fill="rgb(245,114,35)"/><text x="1067.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (2 samples, 0.12%)</title><rect x="1065" y="388" width="2" height="15" fill="rgb(243,223,48)"/><text x="1068.00" y="398.50"></text></g><g><title>_mm_load_ps (xmmintrin.h) (2 samples, 0.12%)</title><rect x="1065" y="404" width="2" height="15" fill="rgb(214,122,14)"/><text x="1068.00" y="414.50"></text></g><g><title>set_ufunc_loop_data_types (ufunc_type_resolution.c) (4 samples, 0.24%)</title><rect x="1075" y="372" width="2" height="15" fill="rgb(237,216,30)"/><text x="1078.00" y="382.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (2 samples, 0.12%)</title><rect x="1077" y="372" width="2" height="15" fill="rgb(248,27,23)"/><text x="1080.00" y="382.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (26 samples, 1.54%)</title><rect x="1068" y="356" width="18" height="15" fill="rgb(234,33,54)"/><text x="1071.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (10 samples, 0.59%)</title><rect x="1079" y="372" width="7" height="15" fill="rgb(213,209,23)"/><text x="1082.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (7 samples, 0.42%)</title><rect x="1081" y="388" width="5" height="15" fill="rgb(212,228,23)"/><text x="1084.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (6 samples, 0.36%)</title><rect x="1082" y="404" width="4" height="15" fill="rgb(220,164,19)"/><text x="1085.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (5 samples, 0.30%)</title><rect x="1082" y="420" width="4" height="15" fill="rgb(208,81,53)"/><text x="1085.00" y="430.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (5 samples, 0.30%)</title><rect x="1086" y="356" width="3" height="15" fill="rgb(242,226,26)"/><text x="1089.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (65 samples, 3.86%)</title><rect x="1044" y="340" width="46" height="15" fill="rgb(215,17,34)"/><text x="1047.00" y="350.50">PyUF..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (403 samples, 23.95%)</title><rect x="808" y="308" width="283" height="15" fill="rgb(241,176,29)"/><text x="811.00" y="318.50">_run (mlprodict/onnxrt/ops_cpu/op_red..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (72 samples, 4.28%)</title><rect x="1040" y="324" width="51" height="15" fill="rgb(228,64,51)"/><text x="1043.00" y="334.50">ufunc..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,111 samples, 66.01%)</title><rect x="312" y="244" width="779" height="15" fill="rgb(217,99,25)"/><text x="315.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (989 samples, 58.76%)</title><rect x="398" y="260" width="693" height="15" fill="rgb(249,172,8)"/><text x="401.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (676 samples, 40.17%)</title><rect x="617" y="276" width="474" height="15" fill="rgb(253,198,45)"/><text x="620.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (605 samples, 35.95%)</title><rect x="667" y="292" width="424" height="15" fill="rgb(212,78,37)"/><text x="670.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,143 samples, 67.91%)</title><rect x="293" y="228" width="801" height="15" fill="rgb(227,56,1)"/><text x="296.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (4 samples, 0.24%)</title><rect x="1091" y="244" width="3" height="15" fill="rgb(229,101,22)"/><text x="1094.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (4 samples, 0.24%)</title><rect x="1091" y="260" width="3" height="15" fill="rgb(223,79,51)"/><text x="1094.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (4 samples, 0.24%)</title><rect x="1091" y="276" width="3" height="15" fill="rgb(238,116,4)"/><text x="1094.00" y="286.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (12 samples, 0.71%)</title><rect x="1096" y="276" width="8" height="15" fill="rgb(229,123,29)"/><text x="1099.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (12 samples, 0.71%)</title><rect x="1096" y="292" width="8" height="15" fill="rgb(254,76,27)"/><text x="1099.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (12 samples, 0.71%)</title><rect x="1096" y="308" width="8" height="15" fill="rgb(205,37,11)"/><text x="1099.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (4 samples, 0.24%)</title><rect x="1101" y="324" width="3" height="15" fill="rgb(239,189,45)"/><text x="1104.00" y="334.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (3 samples, 0.18%)</title><rect x="1106" y="388" width="2" height="15" fill="rgb(208,27,5)"/><text x="1109.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.18%)</title><rect x="1106" y="404" width="2" height="15" fill="rgb(224,138,0)"/><text x="1109.00" y="414.50"></text></g><g><title>0x7fa2a2cd9d62 (libc-2.29.so) (2 samples, 0.12%)</title><rect x="1107" y="420" width="1" height="15" fill="rgb(220,194,28)"/><text x="1110.00" y="430.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (1,401 samples, 83.24%)</title><rect x="127" y="212" width="983" height="15" fill="rgb(247,0,40)"/><text x="130.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (22 samples, 1.31%)</title><rect x="1094" y="228" width="16" height="15" fill="rgb(235,3,16)"/><text x="1097.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (22 samples, 1.31%)</title><rect x="1094" y="244" width="16" height="15" fill="rgb(222,134,44)"/><text x="1097.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (20 samples, 1.19%)</title><rect x="1096" y="260" width="14" height="15" fill="rgb(222,65,28)"/><text x="1099.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (8 samples, 0.48%)</title><rect x="1104" y="276" width="6" height="15" fill="rgb(241,184,37)"/><text x="1107.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 0.48%)</title><rect x="1104" y="292" width="6" height="15" fill="rgb(214,53,52)"/><text x="1107.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (8 samples, 0.48%)</title><rect x="1104" y="308" width="6" height="15" fill="rgb(205,180,54)"/><text x="1107.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (8 samples, 0.48%)</title><rect x="1104" y="324" width="6" height="15" fill="rgb(220,101,28)"/><text x="1107.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (8 samples, 0.48%)</title><rect x="1104" y="340" width="6" height="15" fill="rgb(208,100,28)"/><text x="1107.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (8 samples, 0.48%)</title><rect x="1104" y="356" width="6" height="15" fill="rgb(206,6,32)"/><text x="1107.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (7 samples, 0.42%)</title><rect x="1105" y="372" width="5" height="15" fill="rgb(205,56,20)"/><text x="1108.00" y="382.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (2 samples, 0.12%)</title><rect x="1108" y="388" width="2" height="15" fill="rgb(243,136,42)"/><text x="1111.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_shape.py) (2 samples, 0.12%)</title><rect x="1110" y="212" width="1" height="15" fill="rgb(247,107,47)"/><text x="1113.00" y="222.50"></text></g><g><title>PyArray_IterAllButAxis (iterators.c) (2 samples, 0.12%)</title><rect x="1115" y="372" width="2" height="15" fill="rgb(245,9,24)"/><text x="1118.00" y="382.50"></text></g><g><title>PyArray_IterNew (iterators.c) (2 samples, 0.12%)</title><rect x="1115" y="388" width="2" height="15" fill="rgb(211,53,23)"/><text x="1118.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.12%)</title><rect x="1115" y="404" width="2" height="15" fill="rgb(230,170,45)"/><text x="1118.00" y="414.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (3 samples, 0.18%)</title><rect x="1115" y="260" width="2" height="15" fill="rgb(223,88,25)"/><text x="1118.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.18%)</title><rect x="1115" y="276" width="2" height="15" fill="rgb(205,183,39)"/><text x="1118.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (3 samples, 0.18%)</title><rect x="1115" y="292" width="2" height="15" fill="rgb(240,148,20)"/><text x="1118.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (3 samples, 0.18%)</title><rect x="1115" y="308" width="2" height="15" fill="rgb(208,25,24)"/><text x="1118.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (3 samples, 0.18%)</title><rect x="1115" y="324" width="2" height="15" fill="rgb(230,221,11)"/><text x="1118.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (3 samples, 0.18%)</title><rect x="1115" y="340" width="2" height="15" fill="rgb(246,82,25)"/><text x="1118.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (3 samples, 0.18%)</title><rect x="1115" y="356" width="2" height="15" fill="rgb(230,75,16)"/><text x="1118.00" y="366.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (2 samples, 0.12%)</title><rect x="1119" y="276" width="1" height="15" fill="rgb(226,51,36)"/><text x="1122.00" y="286.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (2 samples, 0.12%)</title><rect x="1119" y="292" width="1" height="15" fill="rgb(237,131,44)"/><text x="1122.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.12%)</title><rect x="1119" y="308" width="1" height="15" fill="rgb(221,125,13)"/><text x="1122.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (14 samples, 0.83%)</title><rect x="1111" y="212" width="10" height="15" fill="rgb(230,4,23)"/><text x="1114.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (13 samples, 0.77%)</title><rect x="1112" y="228" width="9" height="15" fill="rgb(234,13,9)"/><text x="1115.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (10 samples, 0.59%)</title><rect x="1114" y="244" width="7" height="15" fill="rgb(227,188,31)"/><text x="1117.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (4 samples, 0.24%)</title><rect x="1118" y="260" width="3" height="15" fill="rgb(243,222,20)"/><text x="1121.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (4 samples, 0.24%)</title><rect x="1121" y="212" width="3" height="15" fill="rgb(222,49,12)"/><text x="1124.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.18%)</title><rect x="1121" y="228" width="3" height="15" fill="rgb(227,183,51)"/><text x="1124.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.12%)</title><rect x="1122" y="244" width="2" height="15" fill="rgb(220,152,25)"/><text x="1125.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.12%)</title><rect x="1122" y="260" width="2" height="15" fill="rgb(217,41,9)"/><text x="1125.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.24%)</title><rect x="1125" y="308" width="3" height="15" fill="rgb(234,170,42)"/><text x="1128.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.12%)</title><rect x="1126" y="324" width="2" height="15" fill="rgb(246,75,33)"/><text x="1129.00" y="334.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (2 samples, 0.12%)</title><rect x="1126" y="340" width="2" height="15" fill="rgb(246,154,5)"/><text x="1129.00" y="350.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (2 samples, 0.12%)</title><rect x="1126" y="356" width="2" height="15" fill="rgb(253,45,28)"/><text x="1129.00" y="366.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (2 samples, 0.12%)</title><rect x="1126" y="372" width="2" height="15" fill="rgb(206,75,29)"/><text x="1129.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py) (7 samples, 0.42%)</title><rect x="1124" y="228" width="5" height="15" fill="rgb(224,214,33)"/><text x="1127.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;) (7 samples, 0.42%)</title><rect x="1124" y="244" width="5" height="15" fill="rgb(242,24,19)"/><text x="1127.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 0.42%)</title><rect x="1124" y="260" width="5" height="15" fill="rgb(221,153,22)"/><text x="1127.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (7 samples, 0.42%)</title><rect x="1124" y="276" width="5" height="15" fill="rgb(246,109,17)"/><text x="1127.00" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py) (7 samples, 0.42%)</title><rect x="1124" y="292" width="5" height="15" fill="rgb(223,199,21)"/><text x="1127.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (2 samples, 0.12%)</title><rect x="1128" y="308" width="1" height="15" fill="rgb(211,159,15)"/><text x="1131.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (2 samples, 0.12%)</title><rect x="1129" y="228" width="2" height="15" fill="rgb(230,77,15)"/><text x="1132.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.12%)</title><rect x="1129" y="244" width="2" height="15" fill="rgb(245,86,45)"/><text x="1132.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.12%)</title><rect x="1129" y="260" width="2" height="15" fill="rgb(242,217,29)"/><text x="1132.00" y="270.50"></text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (1,449 samples, 86.10%)</title><rect x="116" y="68" width="1016" height="15" fill="rgb(251,195,28)"/><text x="119.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (1,449 samples, 86.10%)</title><rect x="116" y="84" width="1016" height="15" fill="rgb(251,185,39)"/><text x="119.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py)</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (1,449 samples, 86.10%)</title><rect x="116" y="100" width="1016" height="15" fill="rgb(241,183,42)"/><text x="119.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (1,449 samples, 86.10%)</title><rect x="116" y="116" width="1016" height="15" fill="rgb(226,162,14)"/><text x="119.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (1,449 samples, 86.10%)</title><rect x="116" y="132" width="1016" height="15" fill="rgb(213,168,52)"/><text x="119.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,449 samples, 86.10%)</title><rect x="116" y="148" width="1016" height="15" fill="rgb(248,68,44)"/><text x="119.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,449 samples, 86.10%)</title><rect x="116" y="164" width="1016" height="15" fill="rgb(234,50,40)"/><text x="119.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,447 samples, 85.98%)</title><rect x="117" y="180" width="1015" height="15" fill="rgb(252,223,37)"/><text x="120.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,443 samples, 85.74%)</title><rect x="120" y="196" width="1012" height="15" fill="rgb(231,129,2)"/><text x="123.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (11 samples, 0.65%)</title><rect x="1124" y="212" width="8" height="15" fill="rgb(214,110,7)"/><text x="1127.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_transpose.py) (2 samples, 0.12%)</title><rect x="1131" y="228" width="1" height="15" fill="rgb(240,204,1)"/><text x="1134.00" y="238.50"></text></g><g><title>transpose (&lt;__array_function__ internals&gt;) (2 samples, 0.12%)</title><rect x="1131" y="244" width="1" height="15" fill="rgb(238,191,28)"/><text x="1134.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.12%)</title><rect x="1131" y="260" width="1" height="15" fill="rgb(226,131,29)"/><text x="1134.00" y="270.50"></text></g><g><title>transpose (numpy/core/fromnumeric.py) (2 samples, 0.12%)</title><rect x="1131" y="276" width="1" height="15" fill="rgb(225,70,13)"/><text x="1134.00" y="286.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (2 samples, 0.12%)</title><rect x="1131" y="292" width="1" height="15" fill="rgb(223,181,3)"/><text x="1134.00" y="302.50"></text></g><g><title>array_transpose (methods.c) (2 samples, 0.12%)</title><rect x="1131" y="308" width="1" height="15" fill="rgb(205,210,42)"/><text x="1134.00" y="318.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (2 samples, 0.12%)</title><rect x="1131" y="324" width="1" height="15" fill="rgb(253,81,29)"/><text x="1134.00" y="334.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (2 samples, 0.12%)</title><rect x="1131" y="340" width="1" height="15" fill="rgb(247,176,21)"/><text x="1134.00" y="350.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (2 samples, 0.12%)</title><rect x="1136" y="180" width="2" height="15" fill="rgb(241,166,5)"/><text x="1139.00" y="190.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py) (2 samples, 0.12%)</title><rect x="1140" y="180" width="1" height="15" fill="rgb(233,143,39)"/><text x="1143.00" y="190.50"></text></g><g><title>issubclass_ (numpy/core/numerictypes.py) (2 samples, 0.12%)</title><rect x="1140" y="196" width="1" height="15" fill="rgb(236,6,1)"/><text x="1143.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (9 samples, 0.53%)</title><rect x="1136" y="164" width="6" height="15" fill="rgb(205,54,12)"/><text x="1139.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (3 samples, 0.18%)</title><rect x="1144" y="180" width="2" height="15" fill="rgb(207,87,43)"/><text x="1147.00" y="190.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py) (3 samples, 0.18%)</title><rect x="1146" y="180" width="2" height="15" fill="rgb(218,137,43)"/><text x="1149.00" y="190.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (2 samples, 0.12%)</title><rect x="1147" y="196" width="1" height="15" fill="rgb(232,191,21)"/><text x="1150.00" y="206.50"></text></g><g><title>_check_chunk_size (sklearn/metrics/pairwise.py) (8 samples, 0.48%)</title><rect x="1150" y="196" width="5" height="15" fill="rgb(225,197,27)"/><text x="1153.00" y="206.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/metrics/pairwise.py) (6 samples, 0.36%)</title><rect x="1151" y="212" width="4" height="15" fill="rgb(247,151,32)"/><text x="1154.00" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (6 samples, 0.36%)</title><rect x="1151" y="228" width="4" height="15" fill="rgb(241,159,22)"/><text x="1154.00" y="238.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (2 samples, 0.12%)</title><rect x="1156" y="212" width="1" height="15" fill="rgb(251,218,37)"/><text x="1159.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (2 samples, 0.12%)</title><rect x="1157" y="212" width="2" height="15" fill="rgb(244,94,27)"/><text x="1160.00" y="222.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py) (6 samples, 0.36%)</title><rect x="1155" y="196" width="4" height="15" fill="rgb(225,22,22)"/><text x="1158.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (3 samples, 0.18%)</title><rect x="1159" y="196" width="2" height="15" fill="rgb(216,146,47)"/><text x="1162.00" y="206.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py) (3 samples, 0.18%)</title><rect x="1164" y="228" width="2" height="15" fill="rgb(215,108,51)"/><text x="1167.00" y="238.50"></text></g><g><title>effective_n_jobs (joblib/_parallel_backends.py) (3 samples, 0.18%)</title><rect x="1164" y="244" width="2" height="15" fill="rgb(239,2,44)"/><text x="1167.00" y="254.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (2 samples, 0.12%)</title><rect x="1171" y="276" width="2" height="15" fill="rgb(212,197,16)"/><text x="1174.00" y="286.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (2 samples, 0.12%)</title><rect x="1173" y="276" width="2" height="15" fill="rgb(228,11,30)"/><text x="1176.00" y="286.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py) (12 samples, 0.71%)</title><rect x="1168" y="244" width="8" height="15" fill="rgb(251,30,20)"/><text x="1171.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (11 samples, 0.65%)</title><rect x="1168" y="260" width="8" height="15" fill="rgb(228,5,2)"/><text x="1171.00" y="270.50"></text></g><g><title>simplefilter (warnings.py) (2 samples, 0.12%)</title><rect x="1175" y="276" width="1" height="15" fill="rgb(212,127,34)"/><text x="1178.00" y="286.50"></text></g><g><title>_add_filter (warnings.py) (2 samples, 0.12%)</title><rect x="1175" y="292" width="1" height="15" fill="rgb(243,88,35)"/><text x="1178.00" y="302.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (2 samples, 0.12%)</title><rect x="1178" y="356" width="1" height="15" fill="rgb(232,27,6)"/><text x="1181.00" y="366.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (2 samples, 0.12%)</title><rect x="1178" y="372" width="1" height="15" fill="rgb(230,118,9)"/><text x="1181.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.12%)</title><rect x="1178" y="388" width="1" height="15" fill="rgb(219,89,12)"/><text x="1181.00" y="398.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py) (5 samples, 0.30%)</title><rect x="1176" y="244" width="4" height="15" fill="rgb(206,159,36)"/><text x="1179.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;) (4 samples, 0.24%)</title><rect x="1177" y="260" width="3" height="15" fill="rgb(247,203,6)"/><text x="1180.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.24%)</title><rect x="1177" y="276" width="3" height="15" fill="rgb(246,218,27)"/><text x="1180.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py) (3 samples, 0.18%)</title><rect x="1178" y="292" width="2" height="15" fill="rgb(250,11,46)"/><text x="1181.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c) (3 samples, 0.18%)</title><rect x="1178" y="308" width="2" height="15" fill="rgb(250,47,32)"/><text x="1181.00" y="318.50"></text></g><g><title>PyArray_EinsteinSum (einsum.c.src) (3 samples, 0.18%)</title><rect x="1178" y="324" width="2" height="15" fill="rgb(242,193,46)"/><text x="1181.00" y="334.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.18%)</title><rect x="1178" y="340" width="2" height="15" fill="rgb(251,110,49)"/><text x="1181.00" y="350.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py) (46 samples, 2.73%)</title><rect x="1148" y="180" width="32" height="15" fill="rgb(244,21,22)"/><text x="1151.00" y="190.50">pa..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py) (26 samples, 1.54%)</title><rect x="1162" y="196" width="18" height="15" fill="rgb(247,154,27)"/><text x="1165.00" y="206.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py) (24 samples, 1.43%)</title><rect x="1164" y="212" width="16" height="15" fill="rgb(238,68,47)"/><text x="1167.00" y="222.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py) (21 samples, 1.25%)</title><rect x="1166" y="228" width="14" height="15" fill="rgb(244,113,11)"/><text x="1169.00" y="238.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (61 samples, 3.62%)</title><rect x="1142" y="164" width="43" height="15" fill="rgb(231,172,24)"/><text x="1145.00" y="174.50">knei..</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (6 samples, 0.36%)</title><rect x="1180" y="180" width="5" height="15" fill="rgb(254,217,10)"/><text x="1183.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 0.30%)</title><rect x="1181" y="196" width="4" height="15" fill="rgb(233,60,18)"/><text x="1184.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (5 samples, 0.30%)</title><rect x="1181" y="212" width="4" height="15" fill="rgb(230,19,16)"/><text x="1184.00" y="222.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (2 samples, 0.12%)</title><rect x="1183" y="228" width="2" height="15" fill="rgb(246,80,51)"/><text x="1186.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.12%)</title><rect x="1183" y="244" width="2" height="15" fill="rgb(221,29,31)"/><text x="1186.00" y="254.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (2 samples, 0.12%)</title><rect x="1183" y="260" width="2" height="15" fill="rgb(249,119,19)"/><text x="1186.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.12%)</title><rect x="1187" y="228" width="1" height="15" fill="rgb(221,210,2)"/><text x="1190.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.12%)</title><rect x="1187" y="244" width="1" height="15" fill="rgb(225,136,54)"/><text x="1190.00" y="254.50"></text></g><g><title>all (1,683 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(233,38,35)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (1,683 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(251,226,54)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (82 samples, 4.87%)</title><rect x="1132" y="68" width="58" height="15" fill="rgb(216,115,45)"/><text x="1135.00" y="78.50">profil..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (82 samples, 4.87%)</title><rect x="1132" y="84" width="58" height="15" fill="rgb(240,192,25)"/><text x="1135.00" y="94.50">setup_..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (82 samples, 4.87%)</title><rect x="1132" y="100" width="58" height="15" fill="rgb(242,225,50)"/><text x="1135.00" y="110.50">profil..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (81 samples, 4.81%)</title><rect x="1133" y="116" width="57" height="15" fill="rgb(215,66,35)"/><text x="1136.00" y="126.50">time_p..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (81 samples, 4.81%)</title><rect x="1133" y="132" width="57" height="15" fill="rgb(243,147,46)"/><text x="1136.00" y="142.50">&lt;lambd..</text></g><g><title>predict (sklearn/neighbors/_regression.py) (81 samples, 4.81%)</title><rect x="1133" y="148" width="57" height="15" fill="rgb(237,87,39)"/><text x="1136.00" y="158.50">predic..</text></g><g><title>mean (&lt;__array_function__ internals&gt;) (7 samples, 0.42%)</title><rect x="1185" y="164" width="5" height="15" fill="rgb(244,79,42)"/><text x="1188.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 0.42%)</title><rect x="1185" y="180" width="5" height="15" fill="rgb(245,96,53)"/><text x="1188.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (7 samples, 0.42%)</title><rect x="1185" y="196" width="5" height="15" fill="rgb(231,149,8)"/><text x="1188.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py) (7 samples, 0.42%)</title><rect x="1185" y="212" width="5" height="15" fill="rgb(209,198,30)"/><text x="1188.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (2 samples, 0.12%)</title><rect x="1188" y="228" width="2" height="15" fill="rgb(217,66,38)"/><text x="1191.00" y="238.50"></text></g></g></svg>