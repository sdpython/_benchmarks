<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="869.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="869.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (6 samples, 1.45%)</title><rect x="0.2410%" y="820" width="1.4458%" height="15" fill="rgb(227,0,7)"/><text x="0.4910%" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (6 samples, 1.45%)</title><rect x="0.2410%" y="836" width="1.4458%" height="15" fill="rgb(217,0,24)"/><text x="0.4910%" y="846.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_n_estimators5.py:2) (8 samples, 1.93%)</title><rect x="0.0000%" y="148" width="1.9277%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.93%)</title><rect x="0.0000%" y="164" width="1.9277%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (8 samples, 1.93%)</title><rect x="0.0000%" y="180" width="1.9277%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="190.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.93%)</title><rect x="0.0000%" y="196" width="1.9277%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="206.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.93%)</title><rect x="0.0000%" y="212" width="1.9277%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="222.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 1.93%)</title><rect x="0.0000%" y="228" width="1.9277%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="238.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 1.93%)</title><rect x="0.0000%" y="244" width="1.9277%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="254.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 1.93%)</title><rect x="0.0000%" y="260" width="1.9277%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="270.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.93%)</title><rect x="0.0000%" y="276" width="1.9277%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="286.50">_..</text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (7 samples, 1.69%)</title><rect x="0.2410%" y="292" width="1.6867%" height="15" fill="rgb(240,193,28)"/><text x="0.4910%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.69%)</title><rect x="0.2410%" y="308" width="1.6867%" height="15" fill="rgb(216,20,37)"/><text x="0.4910%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.69%)</title><rect x="0.2410%" y="324" width="1.6867%" height="15" fill="rgb(206,188,39)"/><text x="0.4910%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.69%)</title><rect x="0.2410%" y="340" width="1.6867%" height="15" fill="rgb(217,207,13)"/><text x="0.4910%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.69%)</title><rect x="0.2410%" y="356" width="1.6867%" height="15" fill="rgb(231,73,38)"/><text x="0.4910%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.69%)</title><rect x="0.2410%" y="372" width="1.6867%" height="15" fill="rgb(225,20,46)"/><text x="0.4910%" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (7 samples, 1.69%)</title><rect x="0.2410%" y="388" width="1.6867%" height="15" fill="rgb(210,31,41)"/><text x="0.4910%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.69%)</title><rect x="0.2410%" y="404" width="1.6867%" height="15" fill="rgb(221,200,47)"/><text x="0.4910%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.69%)</title><rect x="0.2410%" y="420" width="1.6867%" height="15" fill="rgb(226,26,5)"/><text x="0.4910%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.69%)</title><rect x="0.2410%" y="436" width="1.6867%" height="15" fill="rgb(249,33,26)"/><text x="0.4910%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.69%)</title><rect x="0.2410%" y="452" width="1.6867%" height="15" fill="rgb(235,183,28)"/><text x="0.4910%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.69%)</title><rect x="0.2410%" y="468" width="1.6867%" height="15" fill="rgb(221,5,38)"/><text x="0.4910%" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (7 samples, 1.69%)</title><rect x="0.2410%" y="484" width="1.6867%" height="15" fill="rgb(247,18,42)"/><text x="0.4910%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.69%)</title><rect x="0.2410%" y="500" width="1.6867%" height="15" fill="rgb(241,131,45)"/><text x="0.4910%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.69%)</title><rect x="0.2410%" y="516" width="1.6867%" height="15" fill="rgb(249,31,29)"/><text x="0.4910%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.69%)</title><rect x="0.2410%" y="532" width="1.6867%" height="15" fill="rgb(225,111,53)"/><text x="0.4910%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.69%)</title><rect x="0.2410%" y="548" width="1.6867%" height="15" fill="rgb(238,160,17)"/><text x="0.4910%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.69%)</title><rect x="0.2410%" y="564" width="1.6867%" height="15" fill="rgb(214,148,48)"/><text x="0.4910%" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (7 samples, 1.69%)</title><rect x="0.2410%" y="580" width="1.6867%" height="15" fill="rgb(232,36,49)"/><text x="0.4910%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.69%)</title><rect x="0.2410%" y="596" width="1.6867%" height="15" fill="rgb(209,103,24)"/><text x="0.4910%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 1.69%)</title><rect x="0.2410%" y="612" width="1.6867%" height="15" fill="rgb(229,88,8)"/><text x="0.4910%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.69%)</title><rect x="0.2410%" y="628" width="1.6867%" height="15" fill="rgb(213,181,19)"/><text x="0.4910%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.69%)</title><rect x="0.2410%" y="644" width="1.6867%" height="15" fill="rgb(254,191,54)"/><text x="0.4910%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.69%)</title><rect x="0.2410%" y="660" width="1.6867%" height="15" fill="rgb(241,83,37)"/><text x="0.4910%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.69%)</title><rect x="0.2410%" y="676" width="1.6867%" height="15" fill="rgb(233,36,39)"/><text x="0.4910%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.69%)</title><rect x="0.2410%" y="692" width="1.6867%" height="15" fill="rgb(226,3,54)"/><text x="0.4910%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.69%)</title><rect x="0.2410%" y="708" width="1.6867%" height="15" fill="rgb(245,192,40)"/><text x="0.4910%" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (7 samples, 1.69%)</title><rect x="0.2410%" y="724" width="1.6867%" height="15" fill="rgb(238,167,29)"/><text x="0.4910%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.69%)</title><rect x="0.2410%" y="740" width="1.6867%" height="15" fill="rgb(232,182,51)"/><text x="0.4910%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.69%)</title><rect x="0.2410%" y="756" width="1.6867%" height="15" fill="rgb(231,60,39)"/><text x="0.4910%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.69%)</title><rect x="0.2410%" y="772" width="1.6867%" height="15" fill="rgb(208,69,12)"/><text x="0.4910%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.69%)</title><rect x="0.2410%" y="788" width="1.6867%" height="15" fill="rgb(235,93,37)"/><text x="0.4910%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.69%)</title><rect x="0.2410%" y="804" width="1.6867%" height="15" fill="rgb(213,116,39)"/><text x="0.4910%" y="814.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (6 samples, 1.45%)</title><rect x="2.8916%" y="436" width="1.4458%" height="15" fill="rgb(222,207,29)"/><text x="3.1416%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.45%)</title><rect x="2.8916%" y="452" width="1.4458%" height="15" fill="rgb(206,96,30)"/><text x="3.1416%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.45%)</title><rect x="2.8916%" y="468" width="1.4458%" height="15" fill="rgb(218,138,4)"/><text x="3.1416%" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.45%)</title><rect x="2.8916%" y="484" width="1.4458%" height="15" fill="rgb(250,191,14)"/><text x="3.1416%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.45%)</title><rect x="2.8916%" y="500" width="1.4458%" height="15" fill="rgb(239,60,40)"/><text x="3.1416%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.45%)</title><rect x="2.8916%" y="516" width="1.4458%" height="15" fill="rgb(206,27,48)"/><text x="3.1416%" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:13) (6 samples, 1.45%)</title><rect x="2.8916%" y="532" width="1.4458%" height="15" fill="rgb(225,35,8)"/><text x="3.1416%" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.45%)</title><rect x="2.8916%" y="548" width="1.4458%" height="15" fill="rgb(250,213,24)"/><text x="3.1416%" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.45%)</title><rect x="2.8916%" y="564" width="1.4458%" height="15" fill="rgb(247,123,22)"/><text x="3.1416%" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.45%)</title><rect x="2.8916%" y="580" width="1.4458%" height="15" fill="rgb(231,138,38)"/><text x="3.1416%" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.45%)</title><rect x="2.8916%" y="596" width="1.4458%" height="15" fill="rgb(231,145,46)"/><text x="3.1416%" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.45%)</title><rect x="2.8916%" y="612" width="1.4458%" height="15" fill="rgb(251,118,11)"/><text x="3.1416%" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (5 samples, 1.20%)</title><rect x="3.1325%" y="628" width="1.2048%" height="15" fill="rgb(217,147,25)"/><text x="3.3825%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.20%)</title><rect x="3.1325%" y="644" width="1.2048%" height="15" fill="rgb(247,81,37)"/><text x="3.3825%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.20%)</title><rect x="3.1325%" y="660" width="1.2048%" height="15" fill="rgb(209,12,38)"/><text x="3.3825%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.20%)</title><rect x="3.1325%" y="676" width="1.2048%" height="15" fill="rgb(227,1,9)"/><text x="3.3825%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.20%)</title><rect x="3.1325%" y="692" width="1.2048%" height="15" fill="rgb(248,47,43)"/><text x="3.3825%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.20%)</title><rect x="3.1325%" y="708" width="1.2048%" height="15" fill="rgb(221,10,30)"/><text x="3.3825%" y="718.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:4) (22 samples, 5.30%)</title><rect x="0.0000%" y="52" width="5.3012%" height="15" fill="rgb(210,229,1)"/><text x="0.2500%" y="62.50">&lt;modul..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (22 samples, 5.30%)</title><rect x="0.0000%" y="68" width="5.3012%" height="15" fill="rgb(222,148,37)"/><text x="0.2500%" y="78.50">_find_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (22 samples, 5.30%)</title><rect x="0.0000%" y="84" width="5.3012%" height="15" fill="rgb(234,67,33)"/><text x="0.2500%" y="94.50">_find_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (22 samples, 5.30%)</title><rect x="0.0000%" y="100" width="5.3012%" height="15" fill="rgb(247,98,35)"/><text x="0.2500%" y="110.50">_load_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (22 samples, 5.30%)</title><rect x="0.0000%" y="116" width="5.3012%" height="15" fill="rgb(247,138,52)"/><text x="0.2500%" y="126.50">exec_m..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (22 samples, 5.30%)</title><rect x="0.0000%" y="132" width="5.3012%" height="15" fill="rgb(213,79,30)"/><text x="0.2500%" y="142.50">_call_..</text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_n_estimators5.py:7) (11 samples, 2.65%)</title><rect x="2.6506%" y="148" width="2.6506%" height="15" fill="rgb(246,177,23)"/><text x="2.9006%" y="158.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 2.65%)</title><rect x="2.6506%" y="164" width="2.6506%" height="15" fill="rgb(230,62,27)"/><text x="2.9006%" y="174.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 2.65%)</title><rect x="2.6506%" y="180" width="2.6506%" height="15" fill="rgb(216,154,8)"/><text x="2.9006%" y="190.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 2.65%)</title><rect x="2.6506%" y="196" width="2.6506%" height="15" fill="rgb(244,35,45)"/><text x="2.9006%" y="206.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 2.65%)</title><rect x="2.6506%" y="212" width="2.6506%" height="15" fill="rgb(251,115,12)"/><text x="2.9006%" y="222.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 2.65%)</title><rect x="2.6506%" y="228" width="2.6506%" height="15" fill="rgb(240,54,50)"/><text x="2.9006%" y="238.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (10 samples, 2.41%)</title><rect x="2.8916%" y="244" width="2.4096%" height="15" fill="rgb(233,84,52)"/><text x="3.1416%" y="254.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 2.41%)</title><rect x="2.8916%" y="260" width="2.4096%" height="15" fill="rgb(207,117,47)"/><text x="3.1416%" y="270.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 2.41%)</title><rect x="2.8916%" y="276" width="2.4096%" height="15" fill="rgb(249,43,39)"/><text x="3.1416%" y="286.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 2.41%)</title><rect x="2.8916%" y="292" width="2.4096%" height="15" fill="rgb(209,38,44)"/><text x="3.1416%" y="302.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 2.41%)</title><rect x="2.8916%" y="308" width="2.4096%" height="15" fill="rgb(236,212,23)"/><text x="3.1416%" y="318.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 2.41%)</title><rect x="2.8916%" y="324" width="2.4096%" height="15" fill="rgb(242,79,21)"/><text x="3.1416%" y="334.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:27) (10 samples, 2.41%)</title><rect x="2.8916%" y="340" width="2.4096%" height="15" fill="rgb(211,96,35)"/><text x="3.1416%" y="350.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 2.41%)</title><rect x="2.8916%" y="356" width="2.4096%" height="15" fill="rgb(253,215,40)"/><text x="3.1416%" y="366.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 2.41%)</title><rect x="2.8916%" y="372" width="2.4096%" height="15" fill="rgb(211,81,21)"/><text x="3.1416%" y="382.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 2.41%)</title><rect x="2.8916%" y="388" width="2.4096%" height="15" fill="rgb(208,190,38)"/><text x="3.1416%" y="398.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 2.41%)</title><rect x="2.8916%" y="404" width="2.4096%" height="15" fill="rgb(235,213,38)"/><text x="3.1416%" y="414.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 2.41%)</title><rect x="2.8916%" y="420" width="2.4096%" height="15" fill="rgb(237,122,38)"/><text x="3.1416%" y="430.50">_c..</text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py:1129) (8 samples, 1.93%)</title><rect x="7.4699%" y="148" width="1.9277%" height="15" fill="rgb(244,218,35)"/><text x="7.7199%" y="158.50">p..</text></g><g><title>_validate_data (sklearn/ensemble/_weight_boosting.py:84) (8 samples, 1.93%)</title><rect x="7.4699%" y="164" width="1.9277%" height="15" fill="rgb(240,68,47)"/><text x="7.7199%" y="174.50">_..</text></g><g><title>predict (sklearn/tree/_classes.py:418) (11 samples, 2.65%)</title><rect x="10.6024%" y="196" width="2.6506%" height="15" fill="rgb(210,16,53)"/><text x="10.8524%" y="206.50">pr..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:963) (9 samples, 2.17%)</title><rect x="11.0843%" y="212" width="2.1687%" height="15" fill="rgb(235,124,12)"/><text x="11.3343%" y="222.50">c..</text></g><g><title>check_array (sklearn/utils/validation.py:520) (6 samples, 1.45%)</title><rect x="13.9759%" y="228" width="1.4458%" height="15" fill="rgb(224,169,11)"/><text x="14.2259%" y="238.50"></text></g><g><title>simplefilter (warnings.py:179) (6 samples, 1.45%)</title><rect x="13.9759%" y="244" width="1.4458%" height="15" fill="rgb(250,166,2)"/><text x="14.2259%" y="254.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (5 samples, 1.20%)</title><rect x="16.6265%" y="244" width="1.2048%" height="15" fill="rgb(242,216,29)"/><text x="16.8765%" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:578) (8 samples, 1.93%)</title><rect x="16.6265%" y="228" width="1.9277%" height="15" fill="rgb(230,116,27)"/><text x="16.8765%" y="238.50">c..</text></g><g><title>predict (sklearn/tree/_classes.py:419) (29 samples, 6.99%)</title><rect x="13.2530%" y="196" width="6.9880%" height="15" fill="rgb(228,99,48)"/><text x="13.5030%" y="206.50">predict (..</text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py:380) (29 samples, 6.99%)</title><rect x="13.2530%" y="212" width="6.9880%" height="15" fill="rgb(253,11,6)"/><text x="13.5030%" y="222.50">_validate..</text></g><g><title>check_array (sklearn/utils/validation.py:581) (7 samples, 1.69%)</title><rect x="18.5542%" y="228" width="1.6867%" height="15" fill="rgb(247,143,39)"/><text x="18.8042%" y="238.50"></text></g><g><title>0x7f9ed0060405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (19 samples, 4.58%)</title><rect x="20.4819%" y="244" width="4.5783%" height="15" fill="rgb(236,97,10)"/><text x="20.7319%" y="254.50">0x7f9..</text></g><g><title>0x7f9ed0050fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (20 samples, 4.82%)</title><rect x="20.4819%" y="228" width="4.8193%" height="15" fill="rgb(233,208,19)"/><text x="20.7319%" y="238.50">0x7f9e..</text></g><g><title>0x7f9ed005105a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 1.20%)</title><rect x="25.5422%" y="228" width="1.2048%" height="15" fill="rgb(216,164,2)"/><text x="25.7922%" y="238.50"></text></g><g><title>predict (sklearn/tree/_classes.py:420) (31 samples, 7.47%)</title><rect x="20.2410%" y="196" width="7.4699%" height="15" fill="rgb(220,129,5)"/><text x="20.4910%" y="206.50">predict (s..</text></g><g><title>0x7f9ed0051d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (31 samples, 7.47%)</title><rect x="20.2410%" y="212" width="7.4699%" height="15" fill="rgb(242,17,10)"/><text x="20.4910%" y="222.50">0x7f9ed005..</text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_weight_boosting.py:1096) (81 samples, 19.52%)</title><rect x="9.6386%" y="180" width="19.5181%" height="15" fill="rgb(242,107,0)"/><text x="9.8886%" y="190.50">&lt;listcomp&gt; (sklearn/ensemble/_w..</text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1096) (84 samples, 20.24%)</title><rect x="9.6386%" y="164" width="20.2410%" height="15" fill="rgb(251,28,31)"/><text x="9.8886%" y="174.50">_get_median_predict (sklearn/ens..</text></g><g><title>aquicksort_double (quicksort.c.src:222) (6 samples, 1.45%)</title><rect x="30.8434%" y="292" width="1.4458%" height="15" fill="rgb(233,223,10)"/><text x="31.0934%" y="302.50"></text></g><g><title>DOUBLE_LT (npysort_common.h:130) (5 samples, 1.20%)</title><rect x="31.0843%" y="308" width="1.2048%" height="15" fill="rgb(215,21,27)"/><text x="31.3343%" y="318.50"></text></g><g><title>_new_argsortlike (item_selection.c:1064) (8 samples, 1.93%)</title><rect x="30.6024%" y="276" width="1.9277%" height="15" fill="rgb(232,23,21)"/><text x="30.8524%" y="286.50">_..</text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1099) (14 samples, 3.37%)</title><rect x="29.8795%" y="164" width="3.3735%" height="15" fill="rgb(244,5,23)"/><text x="30.1295%" y="174.50">_ge..</text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (14 samples, 3.37%)</title><rect x="29.8795%" y="180" width="3.3735%" height="15" fill="rgb(226,81,46)"/><text x="30.1295%" y="190.50">arg..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (14 samples, 3.37%)</title><rect x="29.8795%" y="196" width="3.3735%" height="15" fill="rgb(247,70,30)"/><text x="30.1295%" y="206.50">arr..</text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (14 samples, 3.37%)</title><rect x="29.8795%" y="212" width="3.3735%" height="15" fill="rgb(212,68,19)"/><text x="30.1295%" y="222.50">arg..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (13 samples, 3.13%)</title><rect x="30.1205%" y="228" width="3.1325%" height="15" fill="rgb(240,187,13)"/><text x="30.3705%" y="238.50">_wr..</text></g><g><title>array_argsort (methods.c:1395) (13 samples, 3.13%)</title><rect x="30.1205%" y="244" width="3.1325%" height="15" fill="rgb(223,113,26)"/><text x="30.3705%" y="254.50">arr..</text></g><g><title>PyArray_ArgSort (item_selection.c:1322) (13 samples, 3.13%)</title><rect x="30.1205%" y="260" width="3.1325%" height="15" fill="rgb(206,192,2)"/><text x="30.3705%" y="270.50">PyA..</text></g><g><title>stable_cumsum (sklearn/utils/extmath.py:826) (14 samples, 3.37%)</title><rect x="33.9759%" y="180" width="3.3735%" height="15" fill="rgb(241,108,4)"/><text x="34.2259%" y="190.50">sta..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (14 samples, 3.37%)</title><rect x="33.9759%" y="196" width="3.3735%" height="15" fill="rgb(247,173,49)"/><text x="34.2259%" y="206.50">sum..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (14 samples, 3.37%)</title><rect x="33.9759%" y="212" width="3.3735%" height="15" fill="rgb(224,114,35)"/><text x="34.2259%" y="222.50">arr..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (14 samples, 3.37%)</title><rect x="33.9759%" y="228" width="3.3735%" height="15" fill="rgb(245,159,27)"/><text x="34.2259%" y="238.50">sum..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (12 samples, 2.89%)</title><rect x="34.4578%" y="244" width="2.8916%" height="15" fill="rgb(245,172,44)"/><text x="34.7078%" y="254.50">_w..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (12 samples, 2.89%)</title><rect x="34.4578%" y="260" width="2.8916%" height="15" fill="rgb(236,23,11)"/><text x="34.7078%" y="270.50">uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (11 samples, 2.65%)</title><rect x="34.6988%" y="276" width="2.6506%" height="15" fill="rgb(205,117,38)"/><text x="34.9488%" y="286.50">Py..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (11 samples, 2.65%)</title><rect x="34.6988%" y="292" width="2.6506%" height="15" fill="rgb(237,72,25)"/><text x="34.9488%" y="302.50">Py..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (6 samples, 1.45%)</title><rect x="35.9036%" y="308" width="1.4458%" height="15" fill="rgb(244,70,9)"/><text x="36.1536%" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (6 samples, 1.45%)</title><rect x="35.9036%" y="324" width="1.4458%" height="15" fill="rgb(217,125,39)"/><text x="36.1536%" y="334.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;:6) (7 samples, 1.69%)</title><rect x="37.3494%" y="196" width="1.6867%" height="15" fill="rgb(235,36,10)"/><text x="37.5994%" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 1.69%)</title><rect x="37.3494%" y="212" width="1.6867%" height="15" fill="rgb(251,123,47)"/><text x="37.5994%" y="222.50"></text></g><g><title>all (numpy/core/fromnumeric.py:2351) (7 samples, 1.69%)</title><rect x="37.3494%" y="228" width="1.6867%" height="15" fill="rgb(221,13,13)"/><text x="37.5994%" y="238.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1102) (37 samples, 8.92%)</title><rect x="33.2530%" y="164" width="8.9157%" height="15" fill="rgb(238,131,9)"/><text x="33.5030%" y="174.50">_get_median_p..</text></g><g><title>stable_cumsum (sklearn/utils/extmath.py:828) (20 samples, 4.82%)</title><rect x="37.3494%" y="180" width="4.8193%" height="15" fill="rgb(211,50,8)"/><text x="37.5994%" y="190.50">stable..</text></g><g><title>isclose (&lt;__array_function__ internals&gt;:6) (13 samples, 3.13%)</title><rect x="39.0361%" y="196" width="3.1325%" height="15" fill="rgb(245,182,24)"/><text x="39.2861%" y="206.50">isc..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (13 samples, 3.13%)</title><rect x="39.0361%" y="212" width="3.1325%" height="15" fill="rgb(242,14,37)"/><text x="39.2861%" y="222.50">arr..</text></g><g><title>isclose (numpy/core/numeric.py:2272) (9 samples, 2.17%)</title><rect x="40.0000%" y="228" width="2.1687%" height="15" fill="rgb(246,228,12)"/><text x="40.2500%" y="238.50">i..</text></g><g><title>within_tol (numpy/core/numeric.py:2258) (7 samples, 1.69%)</title><rect x="40.4819%" y="244" width="1.6867%" height="15" fill="rgb(213,55,15)"/><text x="40.7319%" y="254.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1103) (9 samples, 2.17%)</title><rect x="42.1687%" y="164" width="2.1687%" height="15" fill="rgb(209,9,3)"/><text x="42.4187%" y="174.50">_..</text></g><g><title>array_richcompare (arrayobject.c:1509) (5 samples, 1.20%)</title><rect x="43.1325%" y="180" width="1.2048%" height="15" fill="rgb(230,59,30)"/><text x="43.3825%" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 1.20%)</title><rect x="43.1325%" y="196" width="1.2048%" height="15" fill="rgb(209,121,21)"/><text x="43.3825%" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 1.20%)</title><rect x="43.1325%" y="212" width="1.2048%" height="15" fill="rgb(220,109,13)"/><text x="43.3825%" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 1.20%)</title><rect x="43.1325%" y="228" width="1.2048%" height="15" fill="rgb(232,18,1)"/><text x="43.3825%" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (5 samples, 1.20%)</title><rect x="43.1325%" y="244" width="1.2048%" height="15" fill="rgb(215,41,42)"/><text x="43.3825%" y="254.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (5 samples, 1.20%)</title><rect x="43.1325%" y="260" width="1.2048%" height="15" fill="rgb(224,123,36)"/><text x="43.3825%" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (5 samples, 1.20%)</title><rect x="43.1325%" y="276" width="1.2048%" height="15" fill="rgb(240,125,3)"/><text x="43.3825%" y="286.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1106) (7 samples, 1.69%)</title><rect x="45.0602%" y="164" width="1.6867%" height="15" fill="rgb(205,98,50)"/><text x="45.3102%" y="174.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:54) (169 samples, 40.72%)</title><rect x="6.7470%" y="52" width="40.7229%" height="15" fill="rgb(205,185,37)"/><text x="6.9970%" y="62.50">&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_..</text></g><g><title>profile_skl (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:53) (169 samples, 40.72%)</title><rect x="6.7470%" y="68" width="40.7229%" height="15" fill="rgb(238,207,15)"/><text x="6.9970%" y="78.50">profile_skl (bench_AdaBoostRegressor_default_b_reg_n_estimators5_10..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:37) (169 samples, 40.72%)</title><rect x="6.7470%" y="84" width="40.7229%" height="15" fill="rgb(213,199,42)"/><text x="6.9970%" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:31) (169 samples, 40.72%)</title><rect x="6.7470%" y="100" width="40.7229%" height="15" fill="rgb(235,201,11)"/><text x="6.9970%" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_5..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (169 samples, 40.72%)</title><rect x="6.7470%" y="116" width="40.7229%" height="15" fill="rgb(207,46,11)"/><text x="6.9970%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:375) (167 samples, 40.24%)</title><rect x="7.2289%" y="132" width="40.2410%" height="15" fill="rgb(241,35,35)"/><text x="7.4789%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:375)</text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py:1131) (158 samples, 38.07%)</title><rect x="9.3976%" y="148" width="38.0723%" height="15" fill="rgb(243,32,47)"/><text x="9.6476%" y="158.50">predict (sklearn/ensemble/_weight_boosting.py:1131)</text></g><g><title>0x7f9ebdf1bea9 (libgomp.so.1.0.0) (6 samples, 1.45%)</title><rect x="49.3976%" y="436" width="1.4458%" height="15" fill="rgb(247,202,23)"/><text x="49.6476%" y="446.50"></text></g><g><title>0x7f9ebdf1beab (libgomp.so.1.0.0) (7 samples, 1.69%)</title><rect x="50.8434%" y="436" width="1.6867%" height="15" fill="rgb(219,102,11)"/><text x="51.0934%" y="446.50"></text></g><g><title>0x7f9ebdf1aab9 (libgomp.so.1.0.0) (19 samples, 4.58%)</title><rect x="48.6747%" y="420" width="4.5783%" height="15" fill="rgb(243,110,44)"/><text x="48.9247%" y="430.50">0x7f9..</text></g><g><title>compiled_run (&lt;string&gt;:11) (23 samples, 5.54%)</title><rect x="48.1928%" y="180" width="5.5422%" height="15" fill="rgb(222,74,54)"/><text x="48.4428%" y="190.50">compile..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py:78) (23 samples, 5.54%)</title><rect x="48.1928%" y="196" width="5.5422%" height="15" fill="rgb(216,99,12)"/><text x="48.4428%" y="206.50">_run (m..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (22 samples, 5.30%)</title><rect x="48.4337%" y="212" width="5.3012%" height="15" fill="rgb(226,22,26)"/><text x="48.6837%" y="222.50">pybind..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (22 samples, 5.30%)</title><rect x="48.4337%" y="228" width="5.3012%" height="15" fill="rgb(217,163,10)"/><text x="48.6837%" y="238.50">void p..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (21 samples, 5.06%)</title><rect x="48.6747%" y="244" width="5.0602%" height="15" fill="rgb(213,25,53)"/><text x="48.9247%" y="254.50">void p..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (21 samples, 5.06%)</title><rect x="48.6747%" y="260" width="5.0602%" height="15" fill="rgb(252,105,26)"/><text x="48.9247%" y="270.50">pybind..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (21 samples, 5.06%)</title><rect x="48.6747%" y="276" width="5.0602%" height="15" fill="rgb(220,39,43)"/><text x="48.9247%" y="286.50">pybind..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (21 samples, 5.06%)</title><rect x="48.6747%" y="292" width="5.0602%" height="15" fill="rgb(229,68,48)"/><text x="48.9247%" y="302.50">pybind..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (21 samples, 5.06%)</title><rect x="48.6747%" y="308" width="5.0602%" height="15" fill="rgb(252,8,32)"/><text x="48.9247%" y="318.50">pybind..</text></g><g><title>pybind11::array::~array (numpy.h:538) (21 samples, 5.06%)</title><rect x="48.6747%" y="324" width="5.0602%" height="15" fill="rgb(223,20,43)"/><text x="48.9247%" y="334.50">pybind..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (21 samples, 5.06%)</title><rect x="48.6747%" y="340" width="5.0602%" height="15" fill="rgb(229,81,49)"/><text x="48.9247%" y="350.50">pybind..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (21 samples, 5.06%)</title><rect x="48.6747%" y="356" width="5.0602%" height="15" fill="rgb(236,28,36)"/><text x="48.9247%" y="366.50">pybind..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (21 samples, 5.06%)</title><rect x="48.6747%" y="372" width="5.0602%" height="15" fill="rgb(249,185,26)"/><text x="48.9247%" y="382.50">pybind..</text></g><g><title>RuntimeTreeEnsembleRegressorP&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_p_.cpp:491) (21 samples, 5.06%)</title><rect x="48.6747%" y="388" width="5.0602%" height="15" fill="rgb(249,174,33)"/><text x="48.9247%" y="398.50">Runtim..</text></g><g><title>RuntimeTreeEnsembleRegressorP&lt;float&gt;::compute_gil_free&lt;_AggregatorSum&lt;float&gt; &gt; (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_p_.cpp:610) (21 samples, 5.06%)</title><rect x="48.6747%" y="404" width="5.0602%" height="15" fill="rgb(233,201,37)"/><text x="48.9247%" y="414.50">Runtim..</text></g><g><title>compiled_run (&lt;string&gt;:14) (5 samples, 1.20%)</title><rect x="55.1807%" y="180" width="1.2048%" height="15" fill="rgb(221,78,26)"/><text x="55.4307%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py:78) (5 samples, 1.20%)</title><rect x="55.1807%" y="196" width="1.2048%" height="15" fill="rgb(250,127,30)"/><text x="55.4307%" y="206.50"></text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (5 samples, 1.20%)</title><rect x="55.1807%" y="212" width="1.2048%" height="15" fill="rgb(230,49,44)"/><text x="55.4307%" y="222.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (5 samples, 1.20%)</title><rect x="55.1807%" y="228" width="1.2048%" height="15" fill="rgb(229,67,23)"/><text x="55.4307%" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (5 samples, 1.20%)</title><rect x="55.1807%" y="244" width="1.2048%" height="15" fill="rgb(249,83,47)"/><text x="55.4307%" y="254.50"></text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (5 samples, 1.20%)</title><rect x="55.1807%" y="260" width="1.2048%" height="15" fill="rgb(215,43,3)"/><text x="55.4307%" y="270.50"></text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (5 samples, 1.20%)</title><rect x="55.1807%" y="276" width="1.2048%" height="15" fill="rgb(238,154,13)"/><text x="55.4307%" y="286.50"></text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (5 samples, 1.20%)</title><rect x="55.1807%" y="292" width="1.2048%" height="15" fill="rgb(219,56,2)"/><text x="55.4307%" y="302.50"></text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (5 samples, 1.20%)</title><rect x="55.1807%" y="308" width="1.2048%" height="15" fill="rgb(233,0,4)"/><text x="55.4307%" y="318.50"></text></g><g><title>pybind11::array::~array (numpy.h:538) (5 samples, 1.20%)</title><rect x="55.1807%" y="324" width="1.2048%" height="15" fill="rgb(235,30,7)"/><text x="55.4307%" y="334.50"></text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (5 samples, 1.20%)</title><rect x="55.1807%" y="340" width="1.2048%" height="15" fill="rgb(250,79,13)"/><text x="55.4307%" y="350.50"></text></g><g><title>pybind11::object::~object (pytypes.h:240) (5 samples, 1.20%)</title><rect x="55.1807%" y="356" width="1.2048%" height="15" fill="rgb(211,146,34)"/><text x="55.4307%" y="366.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (5 samples, 1.20%)</title><rect x="55.1807%" y="372" width="1.2048%" height="15" fill="rgb(228,22,38)"/><text x="55.4307%" y="382.50"></text></g><g><title>RuntimeTreeEnsembleRegressorP&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_p_.cpp:491) (5 samples, 1.20%)</title><rect x="55.1807%" y="388" width="1.2048%" height="15" fill="rgb(235,168,5)"/><text x="55.4307%" y="398.50"></text></g><g><title>RuntimeTreeEnsembleRegressorP&lt;float&gt;::compute_gil_free&lt;_AggregatorSum&lt;float&gt; &gt; (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_p_.cpp:610) (5 samples, 1.20%)</title><rect x="55.1807%" y="404" width="1.2048%" height="15" fill="rgb(221,155,16)"/><text x="55.4307%" y="414.50"></text></g><g><title>0x7f9ebdf1aab9 (libgomp.so.1.0.0) (5 samples, 1.20%)</title><rect x="55.1807%" y="420" width="1.2048%" height="15" fill="rgb(215,215,53)"/><text x="55.4307%" y="430.50"></text></g><g><title>0x7f9ebdf1beab (libgomp.so.1.0.0) (6 samples, 1.45%)</title><rect x="57.8313%" y="532" width="1.4458%" height="15" fill="rgb(223,4,10)"/><text x="58.0813%" y="542.50"></text></g><g><title>compiled_run (&lt;string&gt;:18) (12 samples, 2.89%)</title><rect x="56.8675%" y="180" width="2.8916%" height="15" fill="rgb(234,103,6)"/><text x="57.1175%" y="190.50">co..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:181) (12 samples, 2.89%)</title><rect x="56.8675%" y="196" width="2.8916%" height="15" fill="rgb(227,97,0)"/><text x="57.1175%" y="206.50">_r..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:119) (12 samples, 2.89%)</title><rect x="56.8675%" y="212" width="2.8916%" height="15" fill="rgb(234,150,53)"/><text x="57.1175%" y="222.50">_c..</text></g><g><title>topk_sorted_implementation_cpp (mlprodict/onnxrt/ops_cpu/op_topk.py:82) (12 samples, 2.89%)</title><rect x="56.8675%" y="228" width="2.8916%" height="15" fill="rgb(228,201,54)"/><text x="57.1175%" y="238.50">to..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (12 samples, 2.89%)</title><rect x="56.8675%" y="244" width="2.8916%" height="15" fill="rgb(222,22,37)"/><text x="57.1175%" y="254.50">py..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::array_t&lt;long, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::array_t&lt;long, 16&gt;, pybind11::array_t&lt;float, 17&gt;, long, bool, pybind11::name, pybind11::scope, pybind11::sibling, char [183]&gt;(pybind11::array_t&lt;long, 16&gt; (*&amp;&amp;&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::array_t&lt;long, 16&gt; (*)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, char [183])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (12 samples, 2.89%)</title><rect x="56.8675%" y="260" width="2.8916%" height="15" fill="rgb(237,53,32)"/><text x="57.1175%" y="270.50">vo..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::array_t&lt;long, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::array_t&lt;long, 16&gt;, pybind11::array_t&lt;float, 17&gt;, long, bool, pybind11::name, pybind11::scope, pybind11::sibling, char [183]&gt;(pybind11::array_t&lt;long, 16&gt; (*&amp;&amp;&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::array_t&lt;long, 16&gt; (*)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, char [183])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (12 samples, 2.89%)</title><rect x="56.8675%" y="276" width="2.8916%" height="15" fill="rgb(233,25,53)"/><text x="57.1175%" y="286.50">vo..</text></g><g><title>pybind11::detail::argument_loader&lt;pybind11::array_t&lt;float, 17&gt;, long, bool&gt;::call&lt;pybind11::array_t&lt;long, 16&gt;, pybind11::detail::void_type, pybind11::array_t&lt;long, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool)&gt; &amp;&amp; (cast.h:1912) (12 samples, 2.89%)</title><rect x="56.8675%" y="292" width="2.8916%" height="15" fill="rgb(210,40,34)"/><text x="57.1175%" y="302.50">py..</text></g><g><title>pybind11::detail::argument_loader&lt;pybind11::array_t&lt;float, 17&gt;, long, bool&gt;::call_impl&lt;pybind11::array_t&lt;long, 16&gt;, pybind11::array_t&lt;long, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool), (unsigned long)0, (unsigned long)1, (unsigned long)2, pybind11::detail::void_type&gt; (cast.h:1935) (12 samples, 2.89%)</title><rect x="56.8675%" y="308" width="2.8916%" height="15" fill="rgb(241,220,44)"/><text x="57.1175%" y="318.50">py..</text></g><g><title>pybind11::array_t&lt;float, 17&gt;::~array_t (numpy.h:831) (12 samples, 2.89%)</title><rect x="56.8675%" y="324" width="2.8916%" height="15" fill="rgb(235,28,35)"/><text x="57.1175%" y="334.50">py..</text></g><g><title>pybind11::array::~array (numpy.h:538) (12 samples, 2.89%)</title><rect x="56.8675%" y="340" width="2.8916%" height="15" fill="rgb(210,56,17)"/><text x="57.1175%" y="350.50">py..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (12 samples, 2.89%)</title><rect x="56.8675%" y="356" width="2.8916%" height="15" fill="rgb(224,130,29)"/><text x="57.1175%" y="366.50">py..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (12 samples, 2.89%)</title><rect x="56.8675%" y="372" width="2.8916%" height="15" fill="rgb(235,212,8)"/><text x="57.1175%" y="382.50">py..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (12 samples, 2.89%)</title><rect x="56.8675%" y="388" width="2.8916%" height="15" fill="rgb(223,33,50)"/><text x="57.1175%" y="398.50">py..</text></g><g><title>topk_element_max_float (mlprodict/onnxrt/ops_cpu/_op_onnx_numpy.cpp:406) (12 samples, 2.89%)</title><rect x="56.8675%" y="404" width="2.8916%" height="15" fill="rgb(219,149,13)"/><text x="57.1175%" y="414.50">to..</text></g><g><title>pybind11::array_t&lt;float, 17&gt;::~array_t (numpy.h:831) (12 samples, 2.89%)</title><rect x="56.8675%" y="420" width="2.8916%" height="15" fill="rgb(250,156,29)"/><text x="57.1175%" y="430.50">py..</text></g><g><title>pybind11::array::~array (numpy.h:538) (12 samples, 2.89%)</title><rect x="56.8675%" y="436" width="2.8916%" height="15" fill="rgb(216,193,19)"/><text x="57.1175%" y="446.50">py..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (12 samples, 2.89%)</title><rect x="56.8675%" y="452" width="2.8916%" height="15" fill="rgb(216,135,14)"/><text x="57.1175%" y="462.50">py..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (12 samples, 2.89%)</title><rect x="56.8675%" y="468" width="2.8916%" height="15" fill="rgb(241,47,5)"/><text x="57.1175%" y="478.50">py..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (12 samples, 2.89%)</title><rect x="56.8675%" y="484" width="2.8916%" height="15" fill="rgb(233,42,35)"/><text x="57.1175%" y="494.50">py..</text></g><g><title>topk_element&lt;float, void (float const*, long, long, long*, bool)&gt; (mlprodict/onnxrt/ops_cpu/_op_onnx_numpy.cpp:331) (12 samples, 2.89%)</title><rect x="56.8675%" y="500" width="2.8916%" height="15" fill="rgb(231,13,6)"/><text x="57.1175%" y="510.50">to..</text></g><g><title>0x7f9ebdf1aab9 (libgomp.so.1.0.0) (12 samples, 2.89%)</title><rect x="56.8675%" y="516" width="2.8916%" height="15" fill="rgb(207,181,40)"/><text x="57.1175%" y="526.50">0x..</text></g><g><title>compiled_run (&lt;string&gt;:21) (7 samples, 1.69%)</title><rect x="59.7590%" y="180" width="1.6867%" height="15" fill="rgb(254,173,49)"/><text x="60.0090%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cum_sum.py:41) (6 samples, 1.45%)</title><rect x="60.0000%" y="196" width="1.4458%" height="15" fill="rgb(221,1,38)"/><text x="60.2500%" y="206.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;:6) (5 samples, 1.20%)</title><rect x="60.2410%" y="212" width="1.2048%" height="15" fill="rgb(206,124,46)"/><text x="60.4910%" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 1.20%)</title><rect x="60.2410%" y="228" width="1.2048%" height="15" fill="rgb(249,21,11)"/><text x="60.4910%" y="238.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py:2423) (5 samples, 1.20%)</title><rect x="60.2410%" y="244" width="1.2048%" height="15" fill="rgb(222,201,40)"/><text x="60.4910%" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (5 samples, 1.20%)</title><rect x="60.2410%" y="260" width="1.2048%" height="15" fill="rgb(235,61,29)"/><text x="60.4910%" y="270.50"></text></g><g><title>array_cumsum (methods.c:2239) (5 samples, 1.20%)</title><rect x="60.2410%" y="276" width="1.2048%" height="15" fill="rgb(219,207,3)"/><text x="60.4910%" y="286.50"></text></g><g><title>PyArray_CumSum (calculation.c:568) (5 samples, 1.20%)</title><rect x="60.2410%" y="292" width="1.2048%" height="15" fill="rgb(222,56,46)"/><text x="60.4910%" y="302.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c:262) (5 samples, 1.20%)</title><rect x="60.2410%" y="308" width="1.2048%" height="15" fill="rgb(239,76,54)"/><text x="60.4910%" y="318.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c:5537) (5 samples, 1.20%)</title><rect x="60.2410%" y="324" width="1.2048%" height="15" fill="rgb(231,124,27)"/><text x="60.4910%" y="334.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4646) (5 samples, 1.20%)</title><rect x="60.2410%" y="340" width="1.2048%" height="15" fill="rgb(249,195,6)"/><text x="60.4910%" y="350.50"></text></g><g><title>compiled_run (&lt;string&gt;:22) (5 samples, 1.20%)</title><rect x="61.4458%" y="180" width="1.2048%" height="15" fill="rgb(237,174,47)"/><text x="61.6958%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:75) (5 samples, 1.20%)</title><rect x="61.4458%" y="196" width="1.2048%" height="15" fill="rgb(206,201,31)"/><text x="61.6958%" y="206.50"></text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (5 samples, 1.20%)</title><rect x="61.4458%" y="212" width="1.2048%" height="15" fill="rgb(231,57,52)"/><text x="61.6958%" y="222.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::array_t&lt;float, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::array_t&lt;float, 16&gt;, pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;, pybind11::name, pybind11::scope, pybind11::sibling, char [114]&gt;(pybind11::array_t&lt;float, 16&gt; (*&amp;&amp;&amp;)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::array_t&lt;float, 16&gt; (*)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, char [114])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (5 samples, 1.20%)</title><rect x="61.4458%" y="228" width="1.2048%" height="15" fill="rgb(248,177,22)"/><text x="61.6958%" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::array_t&lt;float, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::array_t&lt;float, 16&gt;, pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;, pybind11::name, pybind11::scope, pybind11::sibling, char [114]&gt;(pybind11::array_t&lt;float, 16&gt; (*&amp;&amp;&amp;)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::array_t&lt;float, 16&gt; (*)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, char [114])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:160) (5 samples, 1.20%)</title><rect x="61.4458%" y="244" width="1.2048%" height="15" fill="rgb(215,211,37)"/><text x="61.6958%" y="254.50"></text></g><g><title>pybind11::detail::pyobject_caster&lt;pybind11::array_t&lt;float, 16&gt; &gt;::cast (numpy.h:992) (5 samples, 1.20%)</title><rect x="61.4458%" y="260" width="1.2048%" height="15" fill="rgb(241,128,51)"/><text x="61.6958%" y="270.50"></text></g><g><title>pybind11::handle::inc_ref &amp; (pytypes.h:190) (5 samples, 1.20%)</title><rect x="61.4458%" y="276" width="1.2048%" height="15" fill="rgb(227,165,31)"/><text x="61.6958%" y="286.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::array_t&lt;float, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (5 samples, 1.20%)</title><rect x="61.4458%" y="292" width="1.2048%" height="15" fill="rgb(228,167,24)"/><text x="61.6958%" y="302.50"></text></g><g><title>pybind11::array_t&lt;float, 17&gt;::~array_t (numpy.h:831) (5 samples, 1.20%)</title><rect x="61.4458%" y="308" width="1.2048%" height="15" fill="rgb(228,143,12)"/><text x="61.6958%" y="318.50"></text></g><g><title>pybind11::array::~array (numpy.h:538) (5 samples, 1.20%)</title><rect x="61.4458%" y="324" width="1.2048%" height="15" fill="rgb(249,149,8)"/><text x="61.6958%" y="334.50"></text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (5 samples, 1.20%)</title><rect x="61.4458%" y="340" width="1.2048%" height="15" fill="rgb(243,35,44)"/><text x="61.6958%" y="350.50"></text></g><g><title>pybind11::object::~object (pytypes.h:240) (5 samples, 1.20%)</title><rect x="61.4458%" y="356" width="1.2048%" height="15" fill="rgb(246,89,9)"/><text x="61.6958%" y="366.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (5 samples, 1.20%)</title><rect x="61.4458%" y="372" width="1.2048%" height="15" fill="rgb(233,213,13)"/><text x="61.6958%" y="382.50"></text></g><g><title>array_feature_extractor_float (mlprodict/onnxrt/ops_cpu/_op_onnx_numpy.cpp:103) (5 samples, 1.20%)</title><rect x="61.4458%" y="388" width="1.2048%" height="15" fill="rgb(233,141,41)"/><text x="61.6958%" y="398.50"></text></g><g><title>pybind11::array_t&lt;float, 17&gt;::~array_t (numpy.h:831) (5 samples, 1.20%)</title><rect x="61.4458%" y="404" width="1.2048%" height="15" fill="rgb(239,167,4)"/><text x="61.6958%" y="414.50"></text></g><g><title>pybind11::array::~array (numpy.h:538) (5 samples, 1.20%)</title><rect x="61.4458%" y="420" width="1.2048%" height="15" fill="rgb(209,217,16)"/><text x="61.6958%" y="430.50"></text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (5 samples, 1.20%)</title><rect x="61.4458%" y="436" width="1.2048%" height="15" fill="rgb(219,88,35)"/><text x="61.6958%" y="446.50"></text></g><g><title>pybind11::object::~object (pytypes.h:240) (5 samples, 1.20%)</title><rect x="61.4458%" y="452" width="1.2048%" height="15" fill="rgb(220,193,23)"/><text x="61.6958%" y="462.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (5 samples, 1.20%)</title><rect x="61.4458%" y="468" width="1.2048%" height="15" fill="rgb(230,90,52)"/><text x="61.6958%" y="478.50"></text></g><g><title>array_feature_extractor&lt;float&gt; (mlprodict/onnxrt/ops_cpu/_op_onnx_numpy.cpp:96) (5 samples, 1.20%)</title><rect x="61.4458%" y="484" width="1.2048%" height="15" fill="rgb(252,106,19)"/><text x="61.6958%" y="494.50"></text></g><g><title>pybind11::array::array (numpy.h:610) (5 samples, 1.20%)</title><rect x="61.4458%" y="500" width="1.2048%" height="15" fill="rgb(206,74,20)"/><text x="61.6958%" y="510.50"></text></g><g><title>compiled_run (&lt;string&gt;:24) (5 samples, 1.20%)</title><rect x="62.6506%" y="180" width="1.2048%" height="15" fill="rgb(230,138,44)"/><text x="62.9006%" y="190.50"></text></g><g><title>compiled_run (&lt;string&gt;:26) (7 samples, 1.69%)</title><rect x="64.0964%" y="180" width="1.6867%" height="15" fill="rgb(235,182,43)"/><text x="64.3464%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py:66) (6 samples, 1.45%)</title><rect x="64.3373%" y="196" width="1.4458%" height="15" fill="rgb(242,16,51)"/><text x="64.5873%" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py:38) (5 samples, 1.20%)</title><rect x="64.5783%" y="212" width="1.2048%" height="15" fill="rgb(248,9,4)"/><text x="64.8283%" y="222.50"></text></g><g><title>gather_numpy (mlprodict/onnxrt/ops_cpu/op_gather_elements.py:47) (11 samples, 2.65%)</title><rect x="66.7470%" y="212" width="2.6506%" height="15" fill="rgb(210,31,22)"/><text x="66.9970%" y="222.50">ga..</text></g><g><title>choose (&lt;__array_function__ internals&gt;:6) (11 samples, 2.65%)</title><rect x="66.7470%" y="228" width="2.6506%" height="15" fill="rgb(239,54,39)"/><text x="66.9970%" y="238.50">ch..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 2.65%)</title><rect x="66.7470%" y="244" width="2.6506%" height="15" fill="rgb(230,99,41)"/><text x="66.9970%" y="254.50">ar..</text></g><g><title>choose (numpy/core/fromnumeric.py:432) (11 samples, 2.65%)</title><rect x="66.7470%" y="260" width="2.6506%" height="15" fill="rgb(253,106,12)"/><text x="66.9970%" y="270.50">ch..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (10 samples, 2.41%)</title><rect x="66.9880%" y="276" width="2.4096%" height="15" fill="rgb(213,46,41)"/><text x="67.2380%" y="286.50">_w..</text></g><g><title>array_choose (methods.c:1224) (9 samples, 2.17%)</title><rect x="67.2289%" y="292" width="2.1687%" height="15" fill="rgb(215,133,35)"/><text x="67.4789%" y="302.50">a..</text></g><g><title>compiled_run (&lt;string&gt;:27) (17 samples, 4.10%)</title><rect x="65.7831%" y="180" width="4.0964%" height="15" fill="rgb(213,28,5)"/><text x="66.0331%" y="190.50">comp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_gather_elements.py:66) (17 samples, 4.10%)</title><rect x="65.7831%" y="196" width="4.0964%" height="15" fill="rgb(215,77,49)"/><text x="66.0331%" y="206.50">_run..</text></g><g><title>compiled_run (&lt;string&gt;:28) (15 samples, 3.61%)</title><rect x="69.8795%" y="180" width="3.6145%" height="15" fill="rgb(248,100,22)"/><text x="70.1295%" y="190.50">comp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_gather_elements.py:66) (15 samples, 3.61%)</title><rect x="69.8795%" y="196" width="3.6145%" height="15" fill="rgb(208,67,9)"/><text x="70.1295%" y="206.50">_run..</text></g><g><title>gather_numpy (mlprodict/onnxrt/ops_cpu/op_gather_elements.py:47) (12 samples, 2.89%)</title><rect x="70.6024%" y="212" width="2.8916%" height="15" fill="rgb(219,133,21)"/><text x="70.8524%" y="222.50">ga..</text></g><g><title>choose (&lt;__array_function__ internals&gt;:6) (11 samples, 2.65%)</title><rect x="70.8434%" y="228" width="2.6506%" height="15" fill="rgb(246,46,29)"/><text x="71.0934%" y="238.50">ch..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (10 samples, 2.41%)</title><rect x="71.0843%" y="244" width="2.4096%" height="15" fill="rgb(246,185,52)"/><text x="71.3343%" y="254.50">ar..</text></g><g><title>choose (numpy/core/fromnumeric.py:432) (10 samples, 2.41%)</title><rect x="71.0843%" y="260" width="2.4096%" height="15" fill="rgb(252,136,11)"/><text x="71.3343%" y="270.50">ch..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (9 samples, 2.17%)</title><rect x="71.3253%" y="276" width="2.1687%" height="15" fill="rgb(219,138,53)"/><text x="71.5753%" y="286.50">_..</text></g><g><title>array_choose (methods.c:1224) (9 samples, 2.17%)</title><rect x="71.3253%" y="292" width="2.1687%" height="15" fill="rgb(211,51,23)"/><text x="71.5753%" y="302.50">a..</text></g><g><title>PyArray_Choose (item_selection.c:788) (5 samples, 1.20%)</title><rect x="72.2892%" y="308" width="1.2048%" height="15" fill="rgb(247,221,28)"/><text x="72.5392%" y="318.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:61) (109 samples, 26.27%)</title><rect x="47.4699%" y="52" width="26.2651%" height="15" fill="rgb(251,222,45)"/><text x="47.7199%" y="62.50">&lt;module&gt; (bench_AdaBoostRegressor_default_..</text></g><g><title>profile_pyrtc (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:60) (109 samples, 26.27%)</title><rect x="47.4699%" y="68" width="26.2651%" height="15" fill="rgb(217,162,53)"/><text x="47.7199%" y="78.50">profile_pyrtc (bench_AdaBoostRegressor_def..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:37) (109 samples, 26.27%)</title><rect x="47.4699%" y="84" width="26.2651%" height="15" fill="rgb(229,93,14)"/><text x="47.7199%" y="94.50">setup_profile (bench_AdaBoostRegressor_def..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:31) (109 samples, 26.27%)</title><rect x="47.4699%" y="100" width="26.2651%" height="15" fill="rgb(209,67,49)"/><text x="47.7199%" y="110.50">profile (bench_AdaBoostRegressor_default_b..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (109 samples, 26.27%)</title><rect x="47.4699%" y="116" width="26.2651%" height="15" fill="rgb(213,87,29)"/><text x="47.7199%" y="126.50">time_predict (mlprodict/asv_benchmark/comm..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:379) (109 samples, 26.27%)</title><rect x="47.4699%" y="132" width="26.2651%" height="15" fill="rgb(205,151,52)"/><text x="47.7199%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_a..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (107 samples, 25.78%)</title><rect x="47.9518%" y="148" width="25.7831%" height="15" fill="rgb(253,215,39)"/><text x="48.2018%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:4..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (107 samples, 25.78%)</title><rect x="47.9518%" y="164" width="25.7831%" height="15" fill="rgb(221,220,41)"/><text x="48.2018%" y="174.50">_run_sequence_runtime_compiled (mlprodict..</text></g><g><title>onnxruntime::ArgMin&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 2.17%)</title><rect x="74.9398%" y="324" width="2.1687%" height="15" fill="rgb(218,133,21)"/><text x="75.1898%" y="334.50">o..</text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 2.17%)</title><rect x="77.3494%" y="324" width="2.1687%" height="15" fill="rgb(221,193,43)"/><text x="77.5994%" y="334.50">o..</text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 2.17%)</title><rect x="77.3494%" y="340" width="2.1687%" height="15" fill="rgb(240,128,52)"/><text x="77.5994%" y="350.50">o..</text></g><g><title>0x7f9eee1aeddb (libc-2.29.so) (5 samples, 1.20%)</title><rect x="78.3133%" y="356" width="1.2048%" height="15" fill="rgb(253,114,12)"/><text x="78.5633%" y="366.50"></text></g><g><title>onnxruntime::CumSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 1.45%)</title><rect x="79.5181%" y="324" width="1.4458%" height="15" fill="rgb(215,223,47)"/><text x="79.7681%" y="334.50"></text></g><g><title>onnxruntime::GatherElements::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 1.45%)</title><rect x="80.9639%" y="324" width="1.4458%" height="15" fill="rgb(248,225,23)"/><text x="81.2139%" y="334.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (42 samples, 10.12%)</title><rect x="83.6145%" y="324" width="10.1205%" height="15" fill="rgb(250,108,0)"/><text x="83.8645%" y="334.50">onnxruntime::To..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (42 samples, 10.12%)</title><rect x="83.6145%" y="340" width="10.1205%" height="15" fill="rgb(228,208,7)"/><text x="83.8645%" y="350.50">onnxruntime::To..</text></g><g><title>onnxruntime::extract_top_k_elements&lt;true, true, onnxruntime::GreaterValueCmp&lt;float&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (42 samples, 10.12%)</title><rect x="83.6145%" y="356" width="10.1205%" height="15" fill="rgb(244,45,10)"/><text x="83.8645%" y="366.50">onnxruntime::ex..</text></g><g><title>std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt;::_M_emplace_back_aux&lt;std::pair&lt;float, long&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 5.54%)</title><rect x="88.1928%" y="372" width="5.5422%" height="15" fill="rgb(207,125,25)"/><text x="88.4428%" y="382.50">std::ve..</text></g><g><title>operator new (libstdc++.so.6.0.28) (11 samples, 2.65%)</title><rect x="91.0843%" y="388" width="2.6506%" height="15" fill="rgb(210,195,18)"/><text x="91.3343%" y="398.50">op..</text></g><g><title>malloc (libc-2.29.so) (9 samples, 2.17%)</title><rect x="91.5663%" y="404" width="2.1687%" height="15" fill="rgb(249,80,12)"/><text x="91.8163%" y="414.50">m..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (105 samples, 25.30%)</title><rect x="74.4578%" y="164" width="25.3012%" height="15" fill="rgb(221,65,9)"/><text x="74.7078%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onn..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (105 samples, 25.30%)</title><rect x="74.4578%" y="180" width="25.3012%" height="15" fill="rgb(235,49,36)"/><text x="74.7078%" y="190.50">run (mlprodict/onnxrt/ops_whole/session...</text></g><g><title>run (onnxruntime/capi/session.py:142) (104 samples, 25.06%)</title><rect x="74.6988%" y="196" width="25.0602%" height="15" fill="rgb(225,32,20)"/><text x="74.9488%" y="206.50">run (onnxruntime/capi/session.py:142)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (103 samples, 24.82%)</title><rect x="74.9398%" y="212" width="24.8193%" height="15" fill="rgb(215,141,46)"/><text x="75.1898%" y="222.50">pybind11::cpp_function::dispatcher (onnx..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (103 samples, 24.82%)</title><rect x="74.9398%" y="228" width="24.8193%" height="15" fill="rgb(250,160,47)"/><text x="75.1898%" y="238.50">void pybind11::cpp_function::initialize&lt;..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (103 samples, 24.82%)</title><rect x="74.9398%" y="244" width="24.8193%" height="15" fill="rgb(216,222,40)"/><text x="75.1898%" y="254.50">onnxruntime::InferenceSession::Run (onnx..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (103 samples, 24.82%)</title><rect x="74.9398%" y="260" width="24.8193%" height="15" fill="rgb(234,217,39)"/><text x="75.1898%" y="270.50">onnxruntime::InferenceSession::Run (onnx..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (103 samples, 24.82%)</title><rect x="74.9398%" y="276" width="24.8193%" height="15" fill="rgb(207,178,40)"/><text x="75.1898%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (103 samples, 24.82%)</title><rect x="74.9398%" y="292" width="24.8193%" height="15" fill="rgb(221,136,13)"/><text x="75.1898%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (on..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (103 samples, 24.82%)</title><rect x="74.9398%" y="308" width="24.8193%" height="15" fill="rgb(249,199,10)"/><text x="75.1898%" y="318.50">onnxruntime::SequentialExecutor::Execute..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (24 samples, 5.78%)</title><rect x="93.9759%" y="324" width="5.7831%" height="15" fill="rgb(249,222,13)"/><text x="94.2259%" y="334.50">onnxrun..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 3.13%)</title><rect x="96.6265%" y="340" width="3.1325%" height="15" fill="rgb(244,185,38)"/><text x="96.8765%" y="350.50">onn..</text></g><g><title>all (415 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(236,202,9)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:68) (109 samples, 26.27%)</title><rect x="73.7349%" y="52" width="26.2651%" height="15" fill="rgb(250,229,37)"/><text x="73.9849%" y="62.50">&lt;module&gt; (bench_AdaBoostRegressor_default_..</text></g><g><title>profile_ort (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:67) (109 samples, 26.27%)</title><rect x="73.7349%" y="68" width="26.2651%" height="15" fill="rgb(206,174,23)"/><text x="73.9849%" y="78.50">profile_ort (bench_AdaBoostRegressor_defau..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:37) (109 samples, 26.27%)</title><rect x="73.7349%" y="84" width="26.2651%" height="15" fill="rgb(211,33,43)"/><text x="73.9849%" y="94.50">setup_profile (bench_AdaBoostRegressor_def..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_50_12_float_.py:31) (109 samples, 26.27%)</title><rect x="73.7349%" y="100" width="26.2651%" height="15" fill="rgb(245,58,50)"/><text x="73.9849%" y="110.50">profile (bench_AdaBoostRegressor_default_b..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (109 samples, 26.27%)</title><rect x="73.7349%" y="116" width="26.2651%" height="15" fill="rgb(244,68,36)"/><text x="73.9849%" y="126.50">time_predict (mlprodict/asv_benchmark/comm..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:379) (107 samples, 25.78%)</title><rect x="74.2169%" y="132" width="25.7831%" height="15" fill="rgb(232,229,15)"/><text x="74.4669%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (106 samples, 25.54%)</title><rect x="74.4578%" y="148" width="25.5422%" height="15" fill="rgb(254,30,23)"/><text x="74.7078%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:4..</text></g></svg></svg>