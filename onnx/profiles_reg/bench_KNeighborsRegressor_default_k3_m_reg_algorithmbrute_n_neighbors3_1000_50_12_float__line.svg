<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="886" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="869.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="869.00"> </text><g id="frames"><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:2) (8 samples, 0.22%)</title><rect x="10" y="148" width="2" height="15" fill="rgb(238,40,10)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.22%)</title><rect x="10" y="164" width="2" height="15" fill="rgb(220,90,49)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (8 samples, 0.22%)</title><rect x="10" y="180" width="2" height="15" fill="rgb(219,194,11)"/><text x="13.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.22%)</title><rect x="10" y="196" width="2" height="15" fill="rgb(251,10,7)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.22%)</title><rect x="10" y="212" width="2" height="15" fill="rgb(206,211,3)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.22%)</title><rect x="10" y="228" width="2" height="15" fill="rgb(217,140,15)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.22%)</title><rect x="10" y="244" width="2" height="15" fill="rgb(234,207,44)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.22%)</title><rect x="10" y="260" width="2" height="15" fill="rgb(244,162,48)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.22%)</title><rect x="10" y="276" width="2" height="15" fill="rgb(248,157,32)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (8 samples, 0.22%)</title><rect x="10" y="292" width="2" height="15" fill="rgb(207,114,35)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.22%)</title><rect x="10" y="308" width="2" height="15" fill="rgb(248,61,48)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.22%)</title><rect x="10" y="324" width="2" height="15" fill="rgb(236,7,6)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.22%)</title><rect x="10" y="340" width="2" height="15" fill="rgb(249,163,19)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.22%)</title><rect x="10" y="356" width="2" height="15" fill="rgb(226,89,17)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.22%)</title><rect x="10" y="372" width="2" height="15" fill="rgb(230,195,42)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (8 samples, 0.22%)</title><rect x="10" y="388" width="2" height="15" fill="rgb(212,45,52)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.22%)</title><rect x="10" y="404" width="2" height="15" fill="rgb(231,56,0)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.22%)</title><rect x="10" y="420" width="2" height="15" fill="rgb(212,86,11)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.22%)</title><rect x="10" y="436" width="2" height="15" fill="rgb(226,110,51)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.22%)</title><rect x="10" y="452" width="2" height="15" fill="rgb(254,166,16)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.22%)</title><rect x="10" y="468" width="2" height="15" fill="rgb(227,182,19)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (8 samples, 0.22%)</title><rect x="10" y="484" width="2" height="15" fill="rgb(244,36,3)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.22%)</title><rect x="10" y="500" width="2" height="15" fill="rgb(237,35,12)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.22%)</title><rect x="10" y="516" width="2" height="15" fill="rgb(233,25,22)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.22%)</title><rect x="10" y="532" width="2" height="15" fill="rgb(230,163,15)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.22%)</title><rect x="10" y="548" width="2" height="15" fill="rgb(233,185,52)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.22%)</title><rect x="10" y="564" width="2" height="15" fill="rgb(238,50,22)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (8 samples, 0.22%)</title><rect x="10" y="580" width="2" height="15" fill="rgb(243,51,52)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.22%)</title><rect x="10" y="596" width="2" height="15" fill="rgb(254,7,28)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (8 samples, 0.22%)</title><rect x="10" y="612" width="2" height="15" fill="rgb(213,132,5)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.22%)</title><rect x="10" y="628" width="2" height="15" fill="rgb(249,175,38)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.22%)</title><rect x="10" y="644" width="2" height="15" fill="rgb(254,106,33)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.22%)</title><rect x="10" y="660" width="2" height="15" fill="rgb(229,182,21)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.22%)</title><rect x="10" y="676" width="2" height="15" fill="rgb(241,205,31)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.22%)</title><rect x="10" y="692" width="2" height="15" fill="rgb(242,176,33)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.22%)</title><rect x="10" y="708" width="2" height="15" fill="rgb(210,94,9)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (8 samples, 0.22%)</title><rect x="10" y="724" width="2" height="15" fill="rgb(231,69,36)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.22%)</title><rect x="10" y="740" width="2" height="15" fill="rgb(222,87,8)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.22%)</title><rect x="10" y="756" width="2" height="15" fill="rgb(210,52,37)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.22%)</title><rect x="10" y="772" width="2" height="15" fill="rgb(205,131,5)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.22%)</title><rect x="10" y="788" width="2" height="15" fill="rgb(245,201,26)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.22%)</title><rect x="10" y="804" width="2" height="15" fill="rgb(207,176,44)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (7 samples, 0.19%)</title><rect x="10" y="820" width="2" height="15" fill="rgb(235,209,12)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (7 samples, 0.19%)</title><rect x="10" y="836" width="2" height="15" fill="rgb(240,92,26)"/><text x="13.00" y="846.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:4) (4 samples, 0.11%)</title><rect x="12" y="148" width="2" height="15" fill="rgb(210,27,12)"/><text x="15.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.11%)</title><rect x="12" y="164" width="2" height="15" fill="rgb(248,176,46)"/><text x="15.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.11%)</title><rect x="12" y="180" width="2" height="15" fill="rgb(230,55,43)"/><text x="15.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.11%)</title><rect x="12" y="196" width="2" height="15" fill="rgb(228,73,5)"/><text x="15.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.11%)</title><rect x="12" y="212" width="2" height="15" fill="rgb(248,70,0)"/><text x="15.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.11%)</title><rect x="12" y="228" width="2" height="15" fill="rgb(248,190,50)"/><text x="15.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.11%)</title><rect x="12" y="244" width="2" height="15" fill="rgb(253,225,42)"/><text x="15.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.11%)</title><rect x="12" y="260" width="2" height="15" fill="rgb(237,0,16)"/><text x="15.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.11%)</title><rect x="12" y="276" width="2" height="15" fill="rgb(213,42,50)"/><text x="15.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (4 samples, 0.11%)</title><rect x="12" y="292" width="2" height="15" fill="rgb(250,119,21)"/><text x="15.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.11%)</title><rect x="12" y="308" width="2" height="15" fill="rgb(243,30,49)"/><text x="15.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.11%)</title><rect x="12" y="324" width="2" height="15" fill="rgb(219,141,8)"/><text x="15.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.11%)</title><rect x="12" y="340" width="2" height="15" fill="rgb(248,161,48)"/><text x="15.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.11%)</title><rect x="12" y="356" width="2" height="15" fill="rgb(234,196,19)"/><text x="15.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.11%)</title><rect x="12" y="372" width="2" height="15" fill="rgb(228,43,28)"/><text x="15.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (4 samples, 0.11%)</title><rect x="12" y="388" width="2" height="15" fill="rgb(250,217,30)"/><text x="15.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.11%)</title><rect x="12" y="404" width="2" height="15" fill="rgb(239,89,31)"/><text x="15.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.11%)</title><rect x="12" y="420" width="2" height="15" fill="rgb(228,36,20)"/><text x="15.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.11%)</title><rect x="12" y="436" width="2" height="15" fill="rgb(228,51,8)"/><text x="15.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.11%)</title><rect x="12" y="452" width="2" height="15" fill="rgb(233,218,10)"/><text x="15.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.11%)</title><rect x="12" y="468" width="2" height="15" fill="rgb(215,117,41)"/><text x="15.00" y="478.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:4) (19 samples, 0.53%)</title><rect x="10" y="52" width="6" height="15" fill="rgb(224,4,42)"/><text x="13.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (19 samples, 0.53%)</title><rect x="10" y="68" width="6" height="15" fill="rgb(245,170,22)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (19 samples, 0.53%)</title><rect x="10" y="84" width="6" height="15" fill="rgb(228,117,35)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (19 samples, 0.53%)</title><rect x="10" y="100" width="6" height="15" fill="rgb(226,114,37)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (19 samples, 0.53%)</title><rect x="10" y="116" width="6" height="15" fill="rgb(228,16,30)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (19 samples, 0.53%)</title><rect x="10" y="132" width="6" height="15" fill="rgb(251,0,12)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:7) (6 samples, 0.17%)</title><rect x="14" y="148" width="2" height="15" fill="rgb(244,79,25)"/><text x="17.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.17%)</title><rect x="14" y="164" width="2" height="15" fill="rgb(207,39,17)"/><text x="17.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.17%)</title><rect x="14" y="180" width="2" height="15" fill="rgb(209,171,42)"/><text x="17.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.17%)</title><rect x="14" y="196" width="2" height="15" fill="rgb(243,29,27)"/><text x="17.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.17%)</title><rect x="14" y="212" width="2" height="15" fill="rgb(235,109,35)"/><text x="17.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.17%)</title><rect x="14" y="228" width="2" height="15" fill="rgb(221,228,11)"/><text x="17.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (4 samples, 0.11%)</title><rect x="14" y="244" width="2" height="15" fill="rgb(254,117,19)"/><text x="17.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.11%)</title><rect x="14" y="260" width="2" height="15" fill="rgb(224,9,47)"/><text x="17.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.11%)</title><rect x="14" y="276" width="2" height="15" fill="rgb(209,102,49)"/><text x="17.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.11%)</title><rect x="14" y="292" width="2" height="15" fill="rgb(218,196,30)"/><text x="17.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.11%)</title><rect x="14" y="308" width="2" height="15" fill="rgb(228,111,3)"/><text x="17.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.11%)</title><rect x="14" y="324" width="2" height="15" fill="rgb(238,82,7)"/><text x="17.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (4 samples, 0.11%)</title><rect x="14" y="340" width="2" height="15" fill="rgb(245,73,13)"/><text x="17.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.11%)</title><rect x="14" y="356" width="2" height="15" fill="rgb(218,111,42)"/><text x="17.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.11%)</title><rect x="14" y="372" width="2" height="15" fill="rgb(226,88,17)"/><text x="17.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.11%)</title><rect x="14" y="388" width="2" height="15" fill="rgb(225,220,46)"/><text x="17.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.11%)</title><rect x="14" y="404" width="2" height="15" fill="rgb(234,209,19)"/><text x="17.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.11%)</title><rect x="14" y="420" width="2" height="15" fill="rgb(246,156,25)"/><text x="17.00" y="430.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:47) (4 samples, 0.11%)</title><rect x="16" y="52" width="1" height="15" fill="rgb(251,103,17)"/><text x="19.00" y="62.50"></text></g><g><title>profile0_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:46) (4 samples, 0.11%)</title><rect x="16" y="68" width="1" height="15" fill="rgb(227,166,17)"/><text x="19.00" y="78.50"></text></g><g><title>setup_profile0 (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:26) (4 samples, 0.11%)</title><rect x="16" y="84" width="1" height="15" fill="rgb(243,46,46)"/><text x="19.00" y="94.50"></text></g><g><title>profile0 (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:18) (4 samples, 0.11%)</title><rect x="16" y="100" width="1" height="15" fill="rgb(207,169,8)"/><text x="19.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (4 samples, 0.11%)</title><rect x="16" y="116" width="1" height="15" fill="rgb(236,57,12)"/><text x="19.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (4 samples, 0.11%)</title><rect x="16" y="132" width="1" height="15" fill="rgb(213,71,1)"/><text x="19.00" y="142.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:174) (4 samples, 0.11%)</title><rect x="16" y="148" width="1" height="15" fill="rgb(222,23,7)"/><text x="19.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:642) (4 samples, 0.11%)</title><rect x="16" y="164" width="1" height="15" fill="rgb(219,111,34)"/><text x="19.00" y="174.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1601) (4 samples, 0.11%)</title><rect x="16" y="180" width="1" height="15" fill="rgb(248,147,53)"/><text x="19.00" y="190.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:141) (6 samples, 0.17%)</title><rect x="18" y="244" width="2" height="15" fill="rgb(225,179,17)"/><text x="21.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:515) (6 samples, 0.17%)</title><rect x="18" y="260" width="2" height="15" fill="rgb(224,46,13)"/><text x="21.00" y="270.50"></text></g><g><title>asarray (numpy/core/_asarray.py:85) (6 samples, 0.17%)</title><rect x="18" y="276" width="2" height="15" fill="rgb(231,218,19)"/><text x="21.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1734) (5 samples, 0.14%)</title><rect x="18" y="292" width="2" height="15" fill="rgb(231,21,22)"/><text x="21.00" y="302.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c:2041) (5 samples, 0.14%)</title><rect x="18" y="308" width="2" height="15" fill="rgb(248,2,42)"/><text x="21.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c:1966) (5 samples, 0.14%)</title><rect x="18" y="324" width="2" height="15" fill="rgb(241,80,6)"/><text x="21.00" y="334.50"></text></g><g><title>PyArray_FromArray (ctors.c:2172) (4 samples, 0.11%)</title><rect x="19" y="340" width="1" height="15" fill="rgb(230,124,39)"/><text x="22.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (4 samples, 0.11%)</title><rect x="19" y="356" width="1" height="15" fill="rgb(235,36,7)"/><text x="22.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (4 samples, 0.11%)</title><rect x="19" y="372" width="1" height="15" fill="rgb(214,1,25)"/><text x="22.00" y="382.50"></text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src:855) (4 samples, 0.11%)</title><rect x="19" y="388" width="1" height="15" fill="rgb(253,229,16)"/><text x="22.00" y="398.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:262) (9 samples, 0.25%)</title><rect x="18" y="228" width="3" height="15" fill="rgb(208,116,51)"/><text x="21.00" y="238.50"></text></g><g><title>dgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (6 samples, 0.17%)</title><rect x="23" y="260" width="2" height="15" fill="rgb(250,75,13)"/><text x="26.00" y="270.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (15 samples, 0.41%)</title><rect x="25" y="260" width="5" height="15" fill="rgb(243,207,51)"/><text x="28.00" y="270.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:303) (29 samples, 0.80%)</title><rect x="22" y="228" width="9" height="15" fill="rgb(220,70,47)"/><text x="25.00" y="238.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (26 samples, 0.72%)</title><rect x="23" y="244" width="8" height="15" fill="rgb(242,28,5)"/><text x="26.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.14%)</title><rect x="30" y="260" width="1" height="15" fill="rgb(253,198,20)"/><text x="33.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (5 samples, 0.14%)</title><rect x="30" y="276" width="1" height="15" fill="rgb(214,136,29)"/><text x="33.00" y="286.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (5 samples, 0.14%)</title><rect x="30" y="292" width="1" height="15" fill="rgb(243,76,54)"/><text x="33.00" y="302.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (5 samples, 0.14%)</title><rect x="30" y="308" width="1" height="15" fill="rgb(231,192,10)"/><text x="33.00" y="318.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.14%)</title><rect x="30" y="324" width="1" height="15" fill="rgb(224,182,28)"/><text x="33.00" y="334.50"></text></g><g><title>dgemm_thread_tn (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.14%)</title><rect x="30" y="340" width="1" height="15" fill="rgb(249,166,20)"/><text x="33.00" y="350.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.14%)</title><rect x="30" y="356" width="1" height="15" fill="rgb(244,33,16)"/><text x="33.00" y="366.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.14%)</title><rect x="30" y="372" width="1" height="15" fill="rgb(233,134,17)"/><text x="33.00" y="382.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:304) (5 samples, 0.14%)</title><rect x="31" y="228" width="2" height="15" fill="rgb(247,74,28)"/><text x="34.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.14%)</title><rect x="31" y="244" width="2" height="15" fill="rgb(214,211,27)"/><text x="34.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 0.14%)</title><rect x="31" y="260" width="2" height="15" fill="rgb(237,133,1)"/><text x="34.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 0.14%)</title><rect x="31" y="276" width="2" height="15" fill="rgb(216,198,27)"/><text x="34.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (4 samples, 0.11%)</title><rect x="32" y="292" width="1" height="15" fill="rgb(206,91,3)"/><text x="35.00" y="302.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (4 samples, 0.11%)</title><rect x="32" y="308" width="1" height="15" fill="rgb(249,184,14)"/><text x="35.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (4 samples, 0.11%)</title><rect x="32" y="324" width="1" height="15" fill="rgb(209,101,7)"/><text x="35.00" y="334.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:603) (4 samples, 0.11%)</title><rect x="33" y="340" width="1" height="15" fill="rgb(206,138,33)"/><text x="36.00" y="350.50"></text></g><g><title>_mm_add_pd (emmintrin.h:229) (4 samples, 0.11%)</title><rect x="33" y="356" width="1" height="15" fill="rgb(213,5,8)"/><text x="36.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (6 samples, 0.17%)</title><rect x="33" y="308" width="2" height="15" fill="rgb(239,99,12)"/><text x="36.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (6 samples, 0.17%)</title><rect x="33" y="324" width="2" height="15" fill="rgb(235,216,26)"/><text x="36.00" y="334.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:305) (8 samples, 0.22%)</title><rect x="33" y="228" width="3" height="15" fill="rgb(234,80,17)"/><text x="36.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 0.22%)</title><rect x="33" y="244" width="3" height="15" fill="rgb(229,192,21)"/><text x="36.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (8 samples, 0.22%)</title><rect x="33" y="260" width="3" height="15" fill="rgb(236,143,14)"/><text x="36.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (8 samples, 0.22%)</title><rect x="33" y="276" width="3" height="15" fill="rgb(235,173,51)"/><text x="36.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (8 samples, 0.22%)</title><rect x="33" y="292" width="3" height="15" fill="rgb(243,76,40)"/><text x="36.00" y="302.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1592) (59 samples, 1.63%)</title><rect x="18" y="180" width="19" height="15" fill="rgb(213,31,32)"/><text x="21.00" y="190.50"></text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py:1749) (59 samples, 1.63%)</title><rect x="18" y="196" width="19" height="15" fill="rgb(248,175,22)"/><text x="21.00" y="206.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1348) (59 samples, 1.63%)</title><rect x="18" y="212" width="19" height="15" fill="rgb(238,115,17)"/><text x="21.00" y="222.50"></text></g><g><title>adumb_select_double (selection.c.src:257) (7 samples, 0.19%)</title><rect x="38" y="340" width="2" height="15" fill="rgb(217,19,33)"/><text x="41.00" y="350.50"></text></g><g><title>adumb_select_double (selection.c.src:258) (34 samples, 0.94%)</title><rect x="40" y="340" width="11" height="15" fill="rgb(236,226,40)"/><text x="43.00" y="350.50"></text></g><g><title>DOUBLE_LT (npysort_common.h:130) (29 samples, 0.80%)</title><rect x="41" y="356" width="10" height="15" fill="rgb(237,75,18)"/><text x="44.00" y="366.50"></text></g><g><title>aintroselect_double (selection.c.src:322) (44 samples, 1.22%)</title><rect x="38" y="324" width="14" height="15" fill="rgb(220,229,44)"/><text x="41.00" y="334.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (45 samples, 1.24%)</title><rect x="38" y="308" width="14" height="15" fill="rgb(224,13,50)"/><text x="41.00" y="318.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:517) (48 samples, 1.33%)</title><rect x="37" y="196" width="16" height="15" fill="rgb(217,30,15)"/><text x="40.00" y="206.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (48 samples, 1.33%)</title><rect x="37" y="212" width="16" height="15" fill="rgb(208,199,53)"/><text x="40.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (48 samples, 1.33%)</title><rect x="37" y="228" width="16" height="15" fill="rgb(222,33,34)"/><text x="40.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (48 samples, 1.33%)</title><rect x="37" y="244" width="16" height="15" fill="rgb(208,37,12)"/><text x="40.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (48 samples, 1.33%)</title><rect x="37" y="260" width="16" height="15" fill="rgb(231,13,35)"/><text x="40.00" y="270.50"></text></g><g><title>array_argpartition (methods.c:1454) (48 samples, 1.33%)</title><rect x="37" y="276" width="16" height="15" fill="rgb(209,74,21)"/><text x="40.00" y="286.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (48 samples, 1.33%)</title><rect x="37" y="292" width="16" height="15" fill="rgb(236,115,30)"/><text x="40.00" y="302.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:521) (9 samples, 0.25%)</title><rect x="53" y="196" width="3" height="15" fill="rgb(242,90,41)"/><text x="56.00" y="206.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1601) (61 samples, 1.69%)</title><rect x="37" y="180" width="20" height="15" fill="rgb(250,221,22)"/><text x="40.00" y="190.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:524) (4 samples, 0.11%)</title><rect x="56" y="196" width="1" height="15" fill="rgb(224,41,0)"/><text x="59.00" y="206.50"></text></g><g><title>array_subscript (mapping.c:1676) (4 samples, 0.11%)</title><rect x="56" y="212" width="1" height="15" fill="rgb(209,120,31)"/><text x="59.00" y="222.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:642) (123 samples, 3.40%)</title><rect x="18" y="164" width="40" height="15" fill="rgb(247,157,3)"/><text x="21.00" y="174.50">kne..</text></g><g><title>predict (sklearn/neighbors/_regression.py:174) (126 samples, 3.49%)</title><rect x="17" y="148" width="41" height="15" fill="rgb(218,114,20)"/><text x="20.00" y="158.50">pre..</text></g><g><title>_mean (numpy/core/_methods.py:151) (4 samples, 0.11%)</title><rect x="59" y="212" width="1" height="15" fill="rgb(248,214,12)"/><text x="62.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 0.11%)</title><rect x="59" y="228" width="1" height="15" fill="rgb(232,222,48)"/><text x="62.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (4 samples, 0.11%)</title><rect x="59" y="244" width="1" height="15" fill="rgb(248,164,34)"/><text x="62.00" y="254.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:54) (134 samples, 3.71%)</title><rect x="17" y="52" width="44" height="15" fill="rgb(232,0,28)"/><text x="20.00" y="62.50">&lt;mod..</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:53) (134 samples, 3.71%)</title><rect x="17" y="68" width="44" height="15" fill="rgb(238,4,43)"/><text x="20.00" y="78.50">prof..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:37) (134 samples, 3.71%)</title><rect x="17" y="84" width="44" height="15" fill="rgb(211,122,29)"/><text x="20.00" y="94.50">setu..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:31) (134 samples, 3.71%)</title><rect x="17" y="100" width="44" height="15" fill="rgb(226,75,20)"/><text x="20.00" y="110.50">prof..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (134 samples, 3.71%)</title><rect x="17" y="116" width="44" height="15" fill="rgb(249,134,14)"/><text x="20.00" y="126.50">time..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (134 samples, 3.71%)</title><rect x="17" y="132" width="44" height="15" fill="rgb(242,203,31)"/><text x="20.00" y="142.50">&lt;lam..</text></g><g><title>predict (sklearn/neighbors/_regression.py:183) (8 samples, 0.22%)</title><rect x="58" y="148" width="3" height="15" fill="rgb(231,74,10)"/><text x="61.00" y="158.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (8 samples, 0.22%)</title><rect x="58" y="164" width="3" height="15" fill="rgb(236,132,10)"/><text x="61.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 0.22%)</title><rect x="58" y="180" width="3" height="15" fill="rgb(217,133,29)"/><text x="61.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (8 samples, 0.22%)</title><rect x="58" y="196" width="3" height="15" fill="rgb(246,156,42)"/><text x="61.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (5 samples, 0.14%)</title><rect x="61" y="180" width="1" height="15" fill="rgb(253,26,6)"/><text x="64.00" y="190.50"></text></g><g><title>array_subscript (mapping.c:1539) (9 samples, 0.25%)</title><rect x="63" y="228" width="3" height="15" fill="rgb(227,145,46)"/><text x="66.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:516) (9 samples, 0.25%)</title><rect x="63" y="244" width="3" height="15" fill="rgb(228,56,21)"/><text x="66.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c:1938) (6 samples, 0.17%)</title><rect x="64" y="260" width="2" height="15" fill="rgb(225,33,51)"/><text x="67.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (6 samples, 0.17%)</title><rect x="64" y="276" width="2" height="15" fill="rgb(212,102,3)"/><text x="67.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c:550) (6 samples, 0.17%)</title><rect x="64" y="292" width="2" height="15" fill="rgb(248,220,53)"/><text x="67.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (6 samples, 0.17%)</title><rect x="64" y="308" width="2" height="15" fill="rgb(252,169,26)"/><text x="67.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (12 samples, 0.33%)</title><rect x="63" y="212" width="4" height="15" fill="rgb(253,199,39)"/><text x="66.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (8 samples, 0.22%)</title><rect x="68" y="212" width="3" height="15" fill="rgb(214,46,16)"/><text x="71.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (8 samples, 0.22%)</title><rect x="71" y="212" width="2" height="15" fill="rgb(228,52,50)"/><text x="74.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:87) (4 samples, 0.11%)</title><rect x="73" y="212" width="2" height="15" fill="rgb(223,119,24)"/><text x="76.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (8 samples, 0.22%)</title><rect x="76" y="212" width="2" height="15" fill="rgb(237,137,42)"/><text x="79.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1584) (4 samples, 0.11%)</title><rect x="77" y="228" width="1" height="15" fill="rgb(242,39,52)"/><text x="80.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (4 samples, 0.11%)</title><rect x="82" y="244" width="1" height="15" fill="rgb(213,131,12)"/><text x="85.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (5 samples, 0.14%)</title><rect x="84" y="244" width="2" height="15" fill="rgb(243,25,27)"/><text x="87.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (6 samples, 0.17%)</title><rect x="96" y="260" width="2" height="15" fill="rgb(230,15,10)"/><text x="99.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (43 samples, 1.19%)</title><rect x="98" y="260" width="14" height="15" fill="rgb(233,9,43)"/><text x="101.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (5 samples, 0.14%)</title><rect x="126" y="308" width="2" height="15" fill="rgb(243,207,27)"/><text x="129.00" y="318.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (5 samples, 0.14%)</title><rect x="130" y="436" width="2" height="15" fill="rgb(223,74,48)"/><text x="133.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (5 samples, 0.14%)</title><rect x="130" y="452" width="2" height="15" fill="rgb(245,25,1)"/><text x="133.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.14%)</title><rect x="130" y="468" width="2" height="15" fill="rgb(222,166,8)"/><text x="133.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (6 samples, 0.17%)</title><rect x="130" y="404" width="2" height="15" fill="rgb(242,88,7)"/><text x="133.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (6 samples, 0.17%)</title><rect x="130" y="420" width="2" height="15" fill="rgb(216,168,47)"/><text x="133.00" y="430.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (8 samples, 0.22%)</title><rect x="130" y="340" width="2" height="15" fill="rgb(222,208,33)"/><text x="133.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (7 samples, 0.19%)</title><rect x="130" y="356" width="2" height="15" fill="rgb(205,164,52)"/><text x="133.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (7 samples, 0.19%)</title><rect x="130" y="372" width="2" height="15" fill="rgb(249,161,36)"/><text x="133.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (7 samples, 0.19%)</title><rect x="130" y="388" width="2" height="15" fill="rgb(213,102,27)"/><text x="133.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (107 samples, 2.96%)</title><rect x="133" y="372" width="35" height="15" fill="rgb(211,178,45)"/><text x="136.00" y="382.50">ra..</text></g><g><title>0x7f094d263d94 (libc-2.29.so) (107 samples, 2.96%)</title><rect x="133" y="388" width="35" height="15" fill="rgb(243,110,4)"/><text x="136.00" y="398.50">0x..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (130 samples, 3.60%)</title><rect x="128" y="308" width="42" height="15" fill="rgb(221,9,17)"/><text x="131.00" y="318.50">_ru..</text></g><g><title>array_copy (methods.c:1133) (126 samples, 3.49%)</title><rect x="129" y="324" width="41" height="15" fill="rgb(209,0,34)"/><text x="132.00" y="334.50">arr..</text></g><g><title>PyArray_NewCopy (convert.c:560) (117 samples, 3.24%)</title><rect x="132" y="340" width="38" height="15" fill="rgb(208,111,51)"/><text x="135.00" y="350.50">PyA..</text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (116 samples, 3.21%)</title><rect x="133" y="356" width="37" height="15" fill="rgb(247,86,14)"/><text x="136.00" y="366.50">PyA..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (8 samples, 0.22%)</title><rect x="173" y="340" width="2" height="15" fill="rgb(218,113,37)"/><text x="176.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (7 samples, 0.19%)</title><rect x="173" y="356" width="2" height="15" fill="rgb(247,24,38)"/><text x="176.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (5 samples, 0.14%)</title><rect x="174" y="372" width="1" height="15" fill="rgb(216,4,0)"/><text x="177.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (5 samples, 0.14%)</title><rect x="177" y="388" width="2" height="15" fill="rgb(213,44,47)"/><text x="180.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (5 samples, 0.14%)</title><rect x="177" y="404" width="2" height="15" fill="rgb(250,171,43)"/><text x="180.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (5 samples, 0.14%)</title><rect x="177" y="420" width="2" height="15" fill="rgb(251,52,50)"/><text x="180.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.11%)</title><rect x="177" y="436" width="2" height="15" fill="rgb(250,47,6)"/><text x="180.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (9 samples, 0.25%)</title><rect x="177" y="356" width="3" height="15" fill="rgb(240,16,0)"/><text x="180.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (9 samples, 0.25%)</title><rect x="177" y="372" width="3" height="15" fill="rgb(236,45,15)"/><text x="180.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (4 samples, 0.11%)</title><rect x="179" y="388" width="1" height="15" fill="rgb(240,191,7)"/><text x="182.00" y="398.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (4 samples, 0.11%)</title><rect x="179" y="404" width="1" height="15" fill="rgb(243,139,18)"/><text x="182.00" y="414.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:593) (15 samples, 0.41%)</title><rect x="181" y="388" width="5" height="15" fill="rgb(234,22,6)"/><text x="184.00" y="398.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:595) (52 samples, 1.44%)</title><rect x="186" y="388" width="17" height="15" fill="rgb(219,186,23)"/><text x="189.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h:169) (52 samples, 1.44%)</title><rect x="186" y="404" width="17" height="15" fill="rgb(224,213,18)"/><text x="189.00" y="414.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:596) (53 samples, 1.47%)</title><rect x="203" y="388" width="17" height="15" fill="rgb(207,105,28)"/><text x="206.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (53 samples, 1.47%)</title><rect x="203" y="404" width="17" height="15" fill="rgb(233,62,16)"/><text x="206.00" y="414.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (121 samples, 3.35%)</title><rect x="181" y="372" width="39" height="15" fill="rgb(216,179,24)"/><text x="184.00" y="382.50">tri..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (126 samples, 3.49%)</title><rect x="180" y="356" width="41" height="15" fill="rgb(248,70,42)"/><text x="183.00" y="366.50">exe..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (150 samples, 4.15%)</title><rect x="172" y="324" width="49" height="15" fill="rgb(239,52,21)"/><text x="175.00" y="334.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (136 samples, 3.76%)</title><rect x="177" y="340" width="44" height="15" fill="rgb(228,37,31)"/><text x="180.00" y="350.50">PyUF..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (159 samples, 4.40%)</title><rect x="170" y="308" width="52" height="15" fill="rgb(214,53,29)"/><text x="173.00" y="318.50">_run ..</text></g><g><title>_buffer_clear_info (buffer.c:723) (4 samples, 0.11%)</title><rect x="225" y="356" width="2" height="15" fill="rgb(223,122,11)"/><text x="228.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (8 samples, 0.22%)</title><rect x="225" y="324" width="3" height="15" fill="rgb(228,158,10)"/><text x="228.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (8 samples, 0.22%)</title><rect x="225" y="340" width="3" height="15" fill="rgb(213,197,22)"/><text x="228.00" y="350.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (8 samples, 0.22%)</title><rect x="228" y="324" width="3" height="15" fill="rgb(226,70,37)"/><text x="231.00" y="334.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (6 samples, 0.17%)</title><rect x="233" y="356" width="2" height="15" fill="rgb(245,109,31)"/><text x="236.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (14 samples, 0.39%)</title><rect x="241" y="372" width="5" height="15" fill="rgb(235,96,52)"/><text x="244.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (6 samples, 0.17%)</title><rect x="244" y="388" width="2" height="15" fill="rgb(253,31,45)"/><text x="247.00" y="398.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (4 samples, 0.11%)</title><rect x="248" y="388" width="1" height="15" fill="rgb(226,10,28)"/><text x="251.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (4 samples, 0.11%)</title><rect x="248" y="404" width="1" height="15" fill="rgb(235,192,11)"/><text x="251.00" y="414.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (9 samples, 0.25%)</title><rect x="249" y="404" width="3" height="15" fill="rgb(241,116,27)"/><text x="252.00" y="414.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (4 samples, 0.11%)</title><rect x="253" y="420" width="2" height="15" fill="rgb(235,205,47)"/><text x="256.00" y="430.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (7 samples, 0.19%)</title><rect x="255" y="436" width="2" height="15" fill="rgb(247,42,7)"/><text x="258.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (7 samples, 0.19%)</title><rect x="255" y="452" width="2" height="15" fill="rgb(228,120,2)"/><text x="258.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (5 samples, 0.14%)</title><rect x="255" y="468" width="2" height="15" fill="rgb(241,199,15)"/><text x="258.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (5 samples, 0.14%)</title><rect x="255" y="484" width="2" height="15" fill="rgb(237,213,44)"/><text x="258.00" y="494.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:255) (6 samples, 0.17%)</title><rect x="257" y="468" width="2" height="15" fill="rgb(236,186,23)"/><text x="260.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:80) (4 samples, 0.11%)</title><rect x="261" y="484" width="1" height="15" fill="rgb(241,213,49)"/><text x="264.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (17 samples, 0.47%)</title><rect x="257" y="436" width="5" height="15" fill="rgb(209,135,36)"/><text x="260.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (17 samples, 0.47%)</title><rect x="257" y="452" width="5" height="15" fill="rgb(224,117,9)"/><text x="260.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (10 samples, 0.28%)</title><rect x="259" y="468" width="3" height="15" fill="rgb(229,165,8)"/><text x="262.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (18 samples, 0.50%)</title><rect x="262" y="436" width="6" height="15" fill="rgb(240,8,29)"/><text x="265.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3534) (10 samples, 0.28%)</title><rect x="269" y="452" width="3" height="15" fill="rgb(251,95,32)"/><text x="272.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3540) (4 samples, 0.11%)</title><rect x="273" y="452" width="1" height="15" fill="rgb(215,170,6)"/><text x="276.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1741) (10 samples, 0.28%)</title><rect x="276" y="468" width="3" height="15" fill="rgb(222,91,3)"/><text x="279.00" y="478.50"></text></g><g><title>FLOAT_add (loops.c.src:1742) (7 samples, 0.19%)</title><rect x="279" y="468" width="3" height="15" fill="rgb(220,185,27)"/><text x="282.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1662) (6 samples, 0.17%)</title><rect x="283" y="484" width="2" height="15" fill="rgb(240,208,34)"/><text x="286.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1663) (6 samples, 0.17%)</title><rect x="285" y="484" width="2" height="15" fill="rgb(215,49,47)"/><text x="288.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1690) (12 samples, 0.33%)</title><rect x="289" y="484" width="4" height="15" fill="rgb(217,136,51)"/><text x="292.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1694) (9 samples, 0.25%)</title><rect x="294" y="484" width="3" height="15" fill="rgb(230,188,18)"/><text x="297.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1695) (4 samples, 0.11%)</title><rect x="297" y="484" width="2" height="15" fill="rgb(225,155,4)"/><text x="300.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1696) (14 samples, 0.39%)</title><rect x="299" y="484" width="4" height="15" fill="rgb(209,85,45)"/><text x="302.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1698) (14 samples, 0.39%)</title><rect x="304" y="484" width="4" height="15" fill="rgb(225,223,6)"/><text x="307.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1699) (6 samples, 0.17%)</title><rect x="308" y="484" width="2" height="15" fill="rgb(246,100,13)"/><text x="311.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1700) (16 samples, 0.44%)</title><rect x="310" y="484" width="5" height="15" fill="rgb(207,229,49)"/><text x="313.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1704) (9 samples, 0.25%)</title><rect x="315" y="484" width="3" height="15" fill="rgb(226,209,35)"/><text x="318.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1705) (9 samples, 0.25%)</title><rect x="318" y="484" width="3" height="15" fill="rgb(205,45,18)"/><text x="321.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1708) (18 samples, 0.50%)</title><rect x="321" y="484" width="6" height="15" fill="rgb(234,192,52)"/><text x="324.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1709) (22 samples, 0.61%)</title><rect x="327" y="484" width="7" height="15" fill="rgb(222,23,20)"/><text x="330.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (163 samples, 4.51%)</title><rect x="282" y="468" width="53" height="15" fill="rgb(220,98,36)"/><text x="285.00" y="478.50">FLOAT..</text></g><g><title>FLOAT_add (loops.c.src:1762) (5 samples, 0.14%)</title><rect x="335" y="468" width="2" height="15" fill="rgb(252,113,45)"/><text x="338.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:194) (8 samples, 0.22%)</title><rect x="337" y="468" width="2" height="15" fill="rgb(253,158,13)"/><text x="340.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:235) (4 samples, 0.11%)</title><rect x="340" y="468" width="1" height="15" fill="rgb(217,102,43)"/><text x="343.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:265) (6 samples, 0.17%)</title><rect x="344" y="468" width="2" height="15" fill="rgb(222,60,20)"/><text x="347.00" y="478.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (221 samples, 6.11%)</title><rect x="275" y="452" width="72" height="15" fill="rgb(217,131,12)"/><text x="278.00" y="462.50">reduce_l..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:268) (4 samples, 0.11%)</title><rect x="346" y="468" width="1" height="15" fill="rgb(213,128,39)"/><text x="349.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (244 samples, 6.75%)</title><rect x="268" y="436" width="80" height="15" fill="rgb(249,215,46)"/><text x="271.00" y="446.50">PyUFunc_R..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (695 samples, 19.23%)</title><rect x="123" y="292" width="227" height="15" fill="rgb(242,38,3)"/><text x="126.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (390 samples, 10.79%)</title><rect x="222" y="308" width="128" height="15" fill="rgb(223,84,31)"/><text x="225.00" y="318.50">_run (mlprodict/..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (364 samples, 10.07%)</title><rect x="231" y="324" width="119" height="15" fill="rgb(219,165,20)"/><text x="234.00" y="334.50">sum (&lt;__array_..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (359 samples, 9.93%)</title><rect x="232" y="340" width="118" height="15" fill="rgb(250,119,51)"/><text x="235.00" y="350.50">array_implemen..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (348 samples, 9.63%)</title><rect x="236" y="356" width="114" height="15" fill="rgb(221,153,23)"/><text x="239.00" y="366.50">sum (numpy/cor..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (317 samples, 8.77%)</title><rect x="246" y="372" width="104" height="15" fill="rgb(241,226,2)"/><text x="249.00" y="382.50">_wrapreducti..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (308 samples, 8.52%)</title><rect x="249" y="388" width="101" height="15" fill="rgb(238,86,45)"/><text x="252.00" y="398.50">ufunc_reduce..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (297 samples, 8.22%)</title><rect x="253" y="404" width="97" height="15" fill="rgb(208,136,38)"/><text x="256.00" y="414.50">PyUFunc_Gen..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (291 samples, 8.05%)</title><rect x="255" y="420" width="95" height="15" fill="rgb(207,125,49)"/><text x="258.00" y="430.50">PyUFunc_Red..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (705 samples, 19.50%)</title><rect x="120" y="276" width="230" height="15" fill="rgb(249,131,49)"/><text x="123.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (13 samples, 0.36%)</title><rect x="350" y="276" width="4" height="15" fill="rgb(219,3,15)"/><text x="353.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (4 samples, 0.11%)</title><rect x="363" y="340" width="1" height="15" fill="rgb(216,48,45)"/><text x="366.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (4 samples, 0.11%)</title><rect x="363" y="356" width="1" height="15" fill="rgb(253,187,8)"/><text x="366.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (4 samples, 0.11%)</title><rect x="368" y="388" width="1" height="15" fill="rgb(238,101,44)"/><text x="371.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (13 samples, 0.36%)</title><rect x="365" y="372" width="5" height="15" fill="rgb(206,59,26)"/><text x="368.00" y="382.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (23 samples, 0.64%)</title><rect x="371" y="420" width="7" height="15" fill="rgb(248,107,12)"/><text x="374.00" y="430.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (25 samples, 0.69%)</title><rect x="371" y="404" width="8" height="15" fill="rgb(218,185,48)"/><text x="374.00" y="414.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (27 samples, 0.75%)</title><rect x="370" y="372" width="9" height="15" fill="rgb(223,143,52)"/><text x="373.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (26 samples, 0.72%)</title><rect x="371" y="388" width="8" height="15" fill="rgb(224,165,28)"/><text x="374.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1576) (6 samples, 0.17%)</title><rect x="379" y="372" width="2" height="15" fill="rgb(240,214,52)"/><text x="382.00" y="382.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:600) (6 samples, 0.17%)</title><rect x="381" y="420" width="2" height="15" fill="rgb(233,71,42)"/><text x="384.00" y="430.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:603) (57 samples, 1.58%)</title><rect x="383" y="420" width="19" height="15" fill="rgb(238,103,53)"/><text x="386.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h:163) (57 samples, 1.58%)</title><rect x="383" y="436" width="19" height="15" fill="rgb(254,70,21)"/><text x="386.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (145 samples, 4.01%)</title><rect x="381" y="388" width="47" height="15" fill="rgb(208,116,30)"/><text x="384.00" y="398.50">FLOA..</text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (145 samples, 4.01%)</title><rect x="381" y="404" width="47" height="15" fill="rgb(214,79,0)"/><text x="384.00" y="414.50">run_..</text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:604) (82 samples, 2.27%)</title><rect x="402" y="420" width="26" height="15" fill="rgb(238,202,7)"/><text x="405.00" y="430.50">s..</text></g><g><title>_mm_store_ps (xmmintrin.h:947) (82 samples, 2.27%)</title><rect x="402" y="436" width="26" height="15" fill="rgb(226,226,3)"/><text x="405.00" y="446.50">_..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (6 samples, 0.17%)</title><rect x="431" y="420" width="2" height="15" fill="rgb(233,181,29)"/><text x="434.00" y="430.50"></text></g><g><title>0x7f094d263d50 (libc-2.29.so) (4 samples, 0.11%)</title><rect x="434" y="436" width="2" height="15" fill="rgb(210,75,13)"/><text x="437.00" y="446.50"></text></g><g><title>0x7f094d263f03 (libc-2.29.so) (4 samples, 0.11%)</title><rect x="437" y="436" width="2" height="15" fill="rgb(252,216,38)"/><text x="440.00" y="446.50"></text></g><g><title>0x7f094d263f23 (libc-2.29.so) (5 samples, 0.14%)</title><rect x="440" y="436" width="2" height="15" fill="rgb(215,186,51)"/><text x="443.00" y="446.50"></text></g><g><title>0x7f094d263f6a (libc-2.29.so) (5 samples, 0.14%)</title><rect x="451" y="436" width="2" height="15" fill="rgb(208,172,4)"/><text x="454.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (68 samples, 1.88%)</title><rect x="434" y="420" width="22" height="15" fill="rgb(253,151,31)"/><text x="437.00" y="430.50">P..</text></g><g><title>0x7f094d263f7a (libc-2.29.so) (4 samples, 0.11%)</title><rect x="455" y="436" width="1" height="15" fill="rgb(233,225,14)"/><text x="458.00" y="446.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (233 samples, 6.45%)</title><rect x="381" y="372" width="76" height="15" fill="rgb(212,86,2)"/><text x="384.00" y="382.50">iterator..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (81 samples, 2.24%)</title><rect x="431" y="388" width="26" height="15" fill="rgb(229,90,41)"/><text x="434.00" y="398.50">n..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (79 samples, 2.19%)</title><rect x="431" y="404" width="26" height="15" fill="rgb(213,0,6)"/><text x="434.00" y="414.50">n..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (287 samples, 7.94%)</title><rect x="365" y="356" width="94" height="15" fill="rgb(214,97,20)"/><text x="368.00" y="366.50">execute_leg..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (5 samples, 0.14%)</title><rect x="457" y="372" width="2" height="15" fill="rgb(238,88,45)"/><text x="460.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (289 samples, 7.99%)</title><rect x="365" y="340" width="94" height="15" fill="rgb(241,204,26)"/><text x="368.00" y="350.50">PyUFunc_Gen..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (299 samples, 8.27%)</title><rect x="362" y="324" width="98" height="15" fill="rgb(221,156,9)"/><text x="365.00" y="334.50">ufunc_gener..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (325 samples, 8.99%)</title><rect x="355" y="276" width="106" height="15" fill="rgb(208,168,20)"/><text x="358.00" y="286.50">run (mlprodi..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (318 samples, 8.80%)</title><rect x="357" y="292" width="104" height="15" fill="rgb(243,110,53)"/><text x="360.00" y="302.50">run (mlprodi..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (308 samples, 8.52%)</title><rect x="360" y="308" width="101" height="15" fill="rgb(250,124,29)"/><text x="363.00" y="318.50">_run (mlprod..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,073 samples, 29.68%)</title><rect x="112" y="260" width="351" height="15" fill="rgb(230,170,9)"/><text x="115.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:13..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (5 samples, 0.14%)</title><rect x="461" y="276" width="2" height="15" fill="rgb(214,142,46)"/><text x="464.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (8 samples, 0.22%)</title><rect x="463" y="260" width="2" height="15" fill="rgb(226,88,14)"/><text x="466.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (13 samples, 0.36%)</title><rect x="465" y="260" width="4" height="15" fill="rgb(225,30,23)"/><text x="468.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (24 samples, 0.66%)</title><rect x="470" y="260" width="8" height="15" fill="rgb(211,12,35)"/><text x="473.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,208 samples, 33.42%)</title><rect x="87" y="244" width="394" height="15" fill="rgb(248,81,6)"/><text x="90.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inferenc..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (11 samples, 0.30%)</title><rect x="478" y="260" width="3" height="15" fill="rgb(250,18,28)"/><text x="481.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (12 samples, 0.33%)</title><rect x="481" y="244" width="4" height="15" fill="rgb(221,106,13)"/><text x="484.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (1,250 samples, 34.58%)</title><rect x="78" y="212" width="408" height="15" fill="rgb(230,15,44)"/><text x="81.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,244 samples, 34.41%)</title><rect x="80" y="228" width="406" height="15" fill="rgb(221,31,27)"/><text x="83.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (10 samples, 0.28%)</title><rect x="486" y="212" width="4" height="15" fill="rgb(218,43,45)"/><text x="489.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (4 samples, 0.11%)</title><rect x="488" y="228" width="2" height="15" fill="rgb(234,215,28)"/><text x="491.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (7 samples, 0.19%)</title><rect x="490" y="212" width="2" height="15" fill="rgb(228,204,6)"/><text x="493.00" y="222.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (6 samples, 0.17%)</title><rect x="497" y="260" width="2" height="15" fill="rgb(207,173,20)"/><text x="500.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (6 samples, 0.17%)</title><rect x="497" y="276" width="2" height="15" fill="rgb(235,119,41)"/><text x="500.00" y="286.50"></text></g><g><title>array_reshape (methods.c:195) (6 samples, 0.17%)</title><rect x="503" y="276" width="2" height="15" fill="rgb(239,44,41)"/><text x="506.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (33 samples, 0.91%)</title><rect x="496" y="244" width="10" height="15" fill="rgb(250,109,15)"/><text x="499.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (20 samples, 0.55%)</title><rect x="500" y="260" width="6" height="15" fill="rgb(222,59,49)"/><text x="503.00" y="270.50"></text></g><g><title>array_reshape (methods.c:210) (5 samples, 0.14%)</title><rect x="505" y="276" width="1" height="15" fill="rgb(236,126,37)"/><text x="508.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (5 samples, 0.14%)</title><rect x="505" y="292" width="1" height="15" fill="rgb(251,131,9)"/><text x="508.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (4 samples, 0.11%)</title><rect x="505" y="308" width="1" height="15" fill="rgb(228,137,26)"/><text x="508.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (45 samples, 1.24%)</title><rect x="492" y="212" width="15" height="15" fill="rgb(249,196,5)"/><text x="495.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (35 samples, 0.97%)</title><rect x="495" y="228" width="12" height="15" fill="rgb(217,172,35)"/><text x="498.00" y="238.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (5 samples, 0.14%)</title><rect x="507" y="308" width="2" height="15" fill="rgb(205,64,22)"/><text x="510.00" y="318.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (6 samples, 0.17%)</title><rect x="507" y="260" width="2" height="15" fill="rgb(212,156,18)"/><text x="510.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (6 samples, 0.17%)</title><rect x="507" y="276" width="2" height="15" fill="rgb(217,130,15)"/><text x="510.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.17%)</title><rect x="507" y="292" width="2" height="15" fill="rgb(214,153,8)"/><text x="510.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (11 samples, 0.30%)</title><rect x="507" y="212" width="4" height="15" fill="rgb(218,55,25)"/><text x="510.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (11 samples, 0.30%)</title><rect x="507" y="228" width="4" height="15" fill="rgb(233,210,24)"/><text x="510.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 0.30%)</title><rect x="507" y="244" width="4" height="15" fill="rgb(221,136,14)"/><text x="510.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (5 samples, 0.14%)</title><rect x="509" y="260" width="2" height="15" fill="rgb(217,71,18)"/><text x="512.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (5 samples, 0.14%)</title><rect x="509" y="276" width="2" height="15" fill="rgb(234,185,16)"/><text x="512.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.14%)</title><rect x="509" y="292" width="2" height="15" fill="rgb(237,75,44)"/><text x="512.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (5 samples, 0.14%)</title><rect x="509" y="308" width="2" height="15" fill="rgb(232,198,30)"/><text x="512.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (5 samples, 0.14%)</title><rect x="509" y="324" width="2" height="15" fill="rgb(218,74,10)"/><text x="512.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (5 samples, 0.14%)</title><rect x="509" y="340" width="2" height="15" fill="rgb(253,124,35)"/><text x="512.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (5 samples, 0.14%)</title><rect x="509" y="356" width="2" height="15" fill="rgb(251,183,29)"/><text x="512.00" y="366.50"></text></g><g><title>_new_argsortlike (item_selection.c:1057) (6 samples, 0.17%)</title><rect x="512" y="356" width="2" height="15" fill="rgb(238,0,27)"/><text x="515.00" y="366.50"></text></g><g><title>adumb_select_float (selection.c.src:257) (6 samples, 0.17%)</title><rect x="514" y="388" width="2" height="15" fill="rgb(216,138,40)"/><text x="517.00" y="398.50"></text></g><g><title>adumb_select_float (selection.c.src:258) (23 samples, 0.64%)</title><rect x="516" y="388" width="7" height="15" fill="rgb(254,176,42)"/><text x="519.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (21 samples, 0.58%)</title><rect x="516" y="404" width="7" height="15" fill="rgb(218,124,36)"/><text x="519.00" y="414.50"></text></g><g><title>aintroselect_float (selection.c.src:322) (30 samples, 0.83%)</title><rect x="514" y="372" width="10" height="15" fill="rgb(233,56,9)"/><text x="517.00" y="382.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (40 samples, 1.11%)</title><rect x="511" y="244" width="13" height="15" fill="rgb(235,156,14)"/><text x="514.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (40 samples, 1.11%)</title><rect x="511" y="260" width="13" height="15" fill="rgb(212,217,13)"/><text x="514.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (40 samples, 1.11%)</title><rect x="511" y="276" width="13" height="15" fill="rgb(205,57,32)"/><text x="514.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (40 samples, 1.11%)</title><rect x="511" y="292" width="13" height="15" fill="rgb(244,88,1)"/><text x="514.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (40 samples, 1.11%)</title><rect x="511" y="308" width="13" height="15" fill="rgb(210,129,4)"/><text x="514.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (40 samples, 1.11%)</title><rect x="511" y="324" width="13" height="15" fill="rgb(237,108,37)"/><text x="514.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (40 samples, 1.11%)</title><rect x="511" y="340" width="13" height="15" fill="rgb(240,9,45)"/><text x="514.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (31 samples, 0.86%)</title><rect x="514" y="356" width="10" height="15" fill="rgb(247,156,43)"/><text x="517.00" y="366.50"></text></g><g><title>array_subscript (mapping.c:1656) (4 samples, 0.11%)</title><rect x="525" y="260" width="1" height="15" fill="rgb(217,105,14)"/><text x="528.00" y="270.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2964) (4 samples, 0.11%)</title><rect x="525" y="276" width="1" height="15" fill="rgb(252,46,19)"/><text x="528.00" y="286.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c:229) (4 samples, 0.11%)</title><rect x="525" y="292" width="1" height="15" fill="rgb(233,146,32)"/><text x="528.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c:281) (4 samples, 0.11%)</title><rect x="525" y="308" width="1" height="15" fill="rgb(243,119,52)"/><text x="528.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (4 samples, 0.11%)</title><rect x="525" y="324" width="1" height="15" fill="rgb(209,45,26)"/><text x="528.00" y="334.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (12 samples, 0.33%)</title><rect x="524" y="244" width="4" height="15" fill="rgb(221,223,26)"/><text x="527.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (53 samples, 1.47%)</title><rect x="511" y="212" width="17" height="15" fill="rgb(251,218,2)"/><text x="514.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (53 samples, 1.47%)</title><rect x="511" y="228" width="17" height="15" fill="rgb(223,190,36)"/><text x="514.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (1,428 samples, 39.50%)</title><rect x="63" y="196" width="466" height="15" fill="rgb(238,188,49)"/><text x="66.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>_mean (numpy/core/_methods.py:151) (5 samples, 0.14%)</title><rect x="530" y="292" width="1" height="15" fill="rgb(246,43,36)"/><text x="533.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (5 samples, 0.14%)</title><rect x="530" y="308" width="1" height="15" fill="rgb(223,110,16)"/><text x="533.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (5 samples, 0.14%)</title><rect x="530" y="324" width="1" height="15" fill="rgb(222,142,14)"/><text x="533.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (5 samples, 0.14%)</title><rect x="530" y="340" width="1" height="15" fill="rgb(227,209,25)"/><text x="533.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py:29) (7 samples, 0.19%)</title><rect x="529" y="228" width="3" height="15" fill="rgb(232,185,35)"/><text x="532.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (6 samples, 0.17%)</title><rect x="530" y="244" width="2" height="15" fill="rgb(246,115,48)"/><text x="533.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.17%)</title><rect x="530" y="260" width="2" height="15" fill="rgb(240,56,20)"/><text x="533.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (6 samples, 0.17%)</title><rect x="530" y="276" width="2" height="15" fill="rgb(223,189,7)"/><text x="533.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 0.17%)</title><rect x="532" y="260" width="2" height="15" fill="rgb(231,94,45)"/><text x="535.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (6 samples, 0.17%)</title><rect x="532" y="276" width="2" height="15" fill="rgb(232,60,25)"/><text x="535.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (6 samples, 0.17%)</title><rect x="532" y="292" width="2" height="15" fill="rgb(243,21,35)"/><text x="535.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src:1584) (6 samples, 0.17%)</title><rect x="532" y="308" width="2" height="15" fill="rgb(220,58,32)"/><text x="535.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src:195) (6 samples, 0.17%)</title><rect x="532" y="324" width="2" height="15" fill="rgb(210,118,19)"/><text x="535.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src:1005) (6 samples, 0.17%)</title><rect x="532" y="340" width="2" height="15" fill="rgb(242,149,40)"/><text x="535.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (6 samples, 0.17%)</title><rect x="532" y="356" width="2" height="15" fill="rgb(226,130,36)"/><text x="535.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py:19) (7 samples, 0.19%)</title><rect x="532" y="228" width="2" height="15" fill="rgb(232,67,54)"/><text x="535.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 0.19%)</title><rect x="532" y="244" width="2" height="15" fill="rgb(245,122,39)"/><text x="535.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,446 samples, 40.00%)</title><rect x="62" y="180" width="472" height="15" fill="rgb(227,35,21)"/><text x="65.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (15 samples, 0.41%)</title><rect x="529" y="196" width="5" height="15" fill="rgb(254,4,31)"/><text x="532.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (15 samples, 0.41%)</title><rect x="529" y="212" width="5" height="15" fill="rgb(206,113,38)"/><text x="532.00" y="222.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:61) (1,452 samples, 40.17%)</title><rect x="61" y="52" width="474" height="15" fill="rgb(252,186,27)"/><text x="64.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbr..</text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:60) (1,452 samples, 40.17%)</title><rect x="61" y="68" width="474" height="15" fill="rgb(215,12,6)"/><text x="64.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorit..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:37) (1,452 samples, 40.17%)</title><rect x="61" y="84" width="474" height="15" fill="rgb(237,119,16)"/><text x="64.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algori..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:31) (1,452 samples, 40.17%)</title><rect x="61" y="100" width="474" height="15" fill="rgb(230,226,10)"/><text x="64.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbru..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (1,452 samples, 40.17%)</title><rect x="61" y="116" width="474" height="15" fill="rgb(234,42,52)"/><text x="64.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (1,452 samples, 40.17%)</title><rect x="61" y="132" width="474" height="15" fill="rgb(215,68,42)"/><text x="64.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,452 samples, 40.17%)</title><rect x="61" y="148" width="474" height="15" fill="rgb(245,94,9)"/><text x="64.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,452 samples, 40.17%)</title><rect x="61" y="164" width="474" height="15" fill="rgb(247,37,6)"/><text x="64.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.14%)</title><rect x="537" y="436" width="2" height="15" fill="rgb(254,202,36)"/><text x="540.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.14%)</title><rect x="539" y="436" width="1" height="15" fill="rgb(243,1,5)"/><text x="542.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.14%)</title><rect x="539" y="452" width="1" height="15" fill="rgb(228,111,11)"/><text x="542.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.11%)</title><rect x="539" y="468" width="1" height="15" fill="rgb(217,60,13)"/><text x="542.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.11%)</title><rect x="539" y="484" width="1" height="15" fill="rgb(206,180,49)"/><text x="542.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.11%)</title><rect x="539" y="500" width="1" height="15" fill="rgb(225,138,6)"/><text x="542.00" y="510.50"></text></g><g><title>0x7f094d263d94 (libc-2.29.so) (90 samples, 2.49%)</title><rect x="542" y="452" width="30" height="15" fill="rgb(248,108,24)"/><text x="545.00" y="462.50">0x..</text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (93 samples, 2.57%)</title><rect x="542" y="436" width="30" height="15" fill="rgb(228,25,33)"/><text x="545.00" y="446.50">on..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 1.69%)</title><rect x="1048" y="468" width="20" height="15" fill="rgb(236,29,18)"/><text x="1051.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,523 samples, 42.13%)</title><rect x="572" y="436" width="497" height="15" fill="rgb(208,121,11)"/><text x="575.00" y="446.50">onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxr..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,450 samples, 40.11%)</title><rect x="596" y="452" width="473" height="15" fill="rgb(238,155,47)"/><text x="599.00" y="462.50">onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxrunti..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (227 samples, 6.28%)</title><rect x="1069" y="468" width="74" height="15" fill="rgb(205,114,35)"/><text x="1072.00" y="478.50">onnxrunt..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (44 samples, 1.22%)</title><rect x="1129" y="484" width="14" height="15" fill="rgb(231,5,6)"/><text x="1132.00" y="494.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,863 samples, 51.54%)</title><rect x="536" y="420" width="608" height="15" fill="rgb(228,203,0)"/><text x="539.00" y="430.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_sta..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (230 samples, 6.36%)</title><rect x="1069" y="436" width="75" height="15" fill="rgb(219,127,3)"/><text x="1072.00" y="446.50">onnxrunt..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (230 samples, 6.36%)</title><rect x="1069" y="452" width="75" height="15" fill="rgb(215,26,6)"/><text x="1072.00" y="462.50">onnxrunt..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,866 samples, 51.62%)</title><rect x="536" y="356" width="609" height="15" fill="rgb(228,83,22)"/><text x="539.00" y="366.50">onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,866 samples, 51.62%)</title><rect x="536" y="372" width="609" height="15" fill="rgb(229,216,8)"/><text x="539.00" y="382.50">onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_st..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,865 samples, 51.59%)</title><rect x="536" y="388" width="609" height="15" fill="rgb(222,92,0)"/><text x="539.00" y="398.50">onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,865 samples, 51.59%)</title><rect x="536" y="404" width="609" height="15" fill="rgb(228,69,22)"/><text x="539.00" y="414.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,867 samples, 51.65%)</title><rect x="536" y="340" width="609" height="15" fill="rgb(221,13,35)"/><text x="539.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (91 samples, 2.52%)</title><rect x="1146" y="340" width="30" height="15" fill="rgb(229,54,14)"/><text x="1149.00" y="350.50">on..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (91 samples, 2.52%)</title><rect x="1146" y="356" width="30" height="15" fill="rgb(249,34,1)"/><text x="1149.00" y="366.50">on..</text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (41 samples, 1.13%)</title><rect x="1176" y="340" width="13" height="15" fill="rgb(248,42,20)"/><text x="1179.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (41 samples, 1.13%)</title><rect x="1176" y="356" width="13" height="15" fill="rgb(233,104,11)"/><text x="1179.00" y="366.50"></text></g><g><title>all (3,615 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(215,217,51)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:68) (2,006 samples, 55.49%)</title><rect x="535" y="52" width="655" height="15" fill="rgb(223,195,16)"/><text x="538.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_1..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:67) (2,006 samples, 55.49%)</title><rect x="535" y="68" width="655" height="15" fill="rgb(233,106,15)"/><text x="538.00" y="78.50">profile_ort (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_5..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:37) (2,006 samples, 55.49%)</title><rect x="535" y="84" width="655" height="15" fill="rgb(249,159,52)"/><text x="538.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py:31) (2,006 samples, 55.49%)</title><rect x="535" y="100" width="655" height="15" fill="rgb(241,34,12)"/><text x="538.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (2,005 samples, 55.46%)</title><rect x="535" y="116" width="655" height="15" fill="rgb(252,84,22)"/><text x="538.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (2,005 samples, 55.46%)</title><rect x="535" y="132" width="655" height="15" fill="rgb(209,7,28)"/><text x="538.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,005 samples, 55.46%)</title><rect x="535" y="148" width="655" height="15" fill="rgb(212,5,3)"/><text x="538.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (2,005 samples, 55.46%)</title><rect x="535" y="164" width="655" height="15" fill="rgb(242,191,11)"/><text x="538.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (2,005 samples, 55.46%)</title><rect x="535" y="180" width="655" height="15" fill="rgb(213,197,42)"/><text x="538.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:136) (2,005 samples, 55.46%)</title><rect x="535" y="196" width="655" height="15" fill="rgb(210,165,7)"/><text x="538.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,003 samples, 55.41%)</title><rect x="536" y="212" width="654" height="15" fill="rgb(206,26,49)"/><text x="539.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,003 samples, 55.41%)</title><rect x="536" y="228" width="654" height="15" fill="rgb(208,7,7)"/><text x="539.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::mo..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,003 samples, 55.41%)</title><rect x="536" y="244" width="654" height="15" fill="rgb(232,50,3)"/><text x="539.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSe..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,003 samples, 55.41%)</title><rect x="536" y="260" width="654" height="15" fill="rgb(231,188,23)"/><text x="539.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,003 samples, 55.41%)</title><rect x="536" y="276" width="654" height="15" fill="rgb(224,226,0)"/><text x="539.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,003 samples, 55.41%)</title><rect x="536" y="292" width="654" height="15" fill="rgb(227,124,34)"/><text x="539.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,003 samples, 55.41%)</title><rect x="536" y="308" width="654" height="15" fill="rgb(205,34,5)"/><text x="539.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,003 samples, 55.41%)</title><rect x="536" y="324" width="654" height="15" fill="rgb(240,41,4)"/><text x="539.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g></g></svg>