<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1846" onload="init(evt)" viewBox="0 0 1200 1846" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1846" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1829.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1829.00"> </text><g id="frames"><g><title>__new__ (protobuf/descriptor.py) (1 samples, 0.26%)</title><rect x="10" y="596" width="3" height="15" fill="rgb(205,201,46)"/><text x="13.00" y="606.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (1 samples, 0.26%)</title><rect x="13" y="836" width="3" height="15" fill="rgb(213,163,8)"/><text x="16.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (1 samples, 0.26%)</title><rect x="13" y="852" width="3" height="15" fill="rgb(244,227,54)"/><text x="16.00" y="862.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (1 samples, 0.26%)</title><rect x="13" y="868" width="3" height="15" fill="rgb(252,123,18)"/><text x="16.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (1 samples, 0.26%)</title><rect x="13" y="884" width="3" height="15" fill="rgb(248,157,15)"/><text x="16.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (1 samples, 0.26%)</title><rect x="13" y="900" width="3" height="15" fill="rgb(217,69,39)"/><text x="16.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (1 samples, 0.26%)</title><rect x="13" y="916" width="3" height="15" fill="rgb(227,176,29)"/><text x="16.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="13" y="932" width="3" height="15" fill="rgb(225,123,39)"/><text x="16.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="13" y="948" width="3" height="15" fill="rgb(207,31,22)"/><text x="16.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="13" y="964" width="3" height="15" fill="rgb(237,5,9)"/><text x="16.00" y="974.50"></text></g><g><title>_path_join (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="13" y="980" width="3" height="15" fill="rgb(233,115,49)"/><text x="16.00" y="990.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (3 samples, 0.79%)</title><rect x="10" y="292" width="9" height="15" fill="rgb(249,38,21)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="308" width="9" height="15" fill="rgb(252,171,30)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="324" width="9" height="15" fill="rgb(229,147,21)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="340" width="9" height="15" fill="rgb(209,202,39)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.79%)</title><rect x="10" y="356" width="9" height="15" fill="rgb(225,96,33)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="372" width="9" height="15" fill="rgb(219,31,10)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (3 samples, 0.79%)</title><rect x="10" y="388" width="9" height="15" fill="rgb(232,194,23)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="404" width="9" height="15" fill="rgb(211,173,8)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="420" width="9" height="15" fill="rgb(212,141,32)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="436" width="9" height="15" fill="rgb(230,26,34)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.79%)</title><rect x="10" y="452" width="9" height="15" fill="rgb(234,115,52)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="468" width="9" height="15" fill="rgb(229,52,47)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (3 samples, 0.79%)</title><rect x="10" y="484" width="9" height="15" fill="rgb(245,90,10)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="500" width="9" height="15" fill="rgb(230,85,39)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="516" width="9" height="15" fill="rgb(254,179,33)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="532" width="9" height="15" fill="rgb(252,82,52)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.79%)</title><rect x="10" y="548" width="9" height="15" fill="rgb(232,155,28)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="10" y="564" width="9" height="15" fill="rgb(249,110,14)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (3 samples, 0.79%)</title><rect x="10" y="580" width="9" height="15" fill="rgb(223,114,32)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.53%)</title><rect x="13" y="596" width="6" height="15" fill="rgb(232,134,43)"/><text x="16.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.53%)</title><rect x="13" y="612" width="6" height="15" fill="rgb(207,47,43)"/><text x="16.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.53%)</title><rect x="13" y="628" width="6" height="15" fill="rgb(254,72,28)"/><text x="16.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.53%)</title><rect x="13" y="644" width="6" height="15" fill="rgb(236,131,27)"/><text x="16.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.53%)</title><rect x="13" y="660" width="6" height="15" fill="rgb(218,80,38)"/><text x="16.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.53%)</title><rect x="13" y="676" width="6" height="15" fill="rgb(240,40,33)"/><text x="16.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.53%)</title><rect x="13" y="692" width="6" height="15" fill="rgb(254,51,46)"/><text x="16.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.53%)</title><rect x="13" y="708" width="6" height="15" fill="rgb(243,31,52)"/><text x="16.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (2 samples, 0.53%)</title><rect x="13" y="724" width="6" height="15" fill="rgb(212,132,29)"/><text x="16.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.53%)</title><rect x="13" y="740" width="6" height="15" fill="rgb(253,24,46)"/><text x="16.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.53%)</title><rect x="13" y="756" width="6" height="15" fill="rgb(250,14,15)"/><text x="16.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.53%)</title><rect x="13" y="772" width="6" height="15" fill="rgb(224,160,52)"/><text x="16.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.53%)</title><rect x="13" y="788" width="6" height="15" fill="rgb(209,9,12)"/><text x="16.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.53%)</title><rect x="13" y="804" width="6" height="15" fill="rgb(244,99,49)"/><text x="16.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (2 samples, 0.53%)</title><rect x="13" y="820" width="6" height="15" fill="rgb(233,48,28)"/><text x="16.00" y="830.50"></text></g><g><title>compile (re.py) (1 samples, 0.26%)</title><rect x="16" y="836" width="3" height="15" fill="rgb(211,200,32)"/><text x="19.00" y="846.50"></text></g><g><title>_compile (re.py) (1 samples, 0.26%)</title><rect x="16" y="852" width="3" height="15" fill="rgb(214,153,23)"/><text x="19.00" y="862.50"></text></g><g><title>compile (sre_compile.py) (1 samples, 0.26%)</title><rect x="16" y="868" width="3" height="15" fill="rgb(218,201,51)"/><text x="19.00" y="878.50"></text></g><g><title>_code (sre_compile.py) (1 samples, 0.26%)</title><rect x="16" y="884" width="3" height="15" fill="rgb(220,75,38)"/><text x="19.00" y="894.50"></text></g><g><title>_compile (sre_compile.py) (1 samples, 0.26%)</title><rect x="16" y="900" width="3" height="15" fill="rgb(220,66,17)"/><text x="19.00" y="910.50"></text></g><g><title>_compile (sre_compile.py) (1 samples, 0.26%)</title><rect x="16" y="916" width="3" height="15" fill="rgb(240,73,30)"/><text x="19.00" y="926.50"></text></g><g><title>_simple (sre_compile.py) (1 samples, 0.26%)</title><rect x="16" y="932" width="3" height="15" fill="rgb(245,126,3)"/><text x="19.00" y="942.50"></text></g><g><title>__getitem__ (sre_parse.py) (1 samples, 0.26%)</title><rect x="16" y="948" width="3" height="15" fill="rgb(245,94,37)"/><text x="19.00" y="958.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.06%)</title><rect x="10" y="196" width="12" height="15" fill="rgb(215,220,21)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.06%)</title><rect x="10" y="212" width="12" height="15" fill="rgb(247,16,46)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.06%)</title><rect x="10" y="228" width="12" height="15" fill="rgb(247,160,3)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.06%)</title><rect x="10" y="244" width="12" height="15" fill="rgb(232,88,18)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.06%)</title><rect x="10" y="260" width="12" height="15" fill="rgb(244,22,20)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.06%)</title><rect x="10" y="276" width="12" height="15" fill="rgb(216,28,45)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (1 samples, 0.26%)</title><rect x="19" y="292" width="3" height="15" fill="rgb(240,13,29)"/><text x="22.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="308" width="3" height="15" fill="rgb(252,135,32)"/><text x="22.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="324" width="3" height="15" fill="rgb(225,182,31)"/><text x="22.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="340" width="3" height="15" fill="rgb(212,202,1)"/><text x="22.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="19" y="356" width="3" height="15" fill="rgb(227,181,29)"/><text x="22.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="372" width="3" height="15" fill="rgb(234,93,21)"/><text x="22.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (1 samples, 0.26%)</title><rect x="19" y="388" width="3" height="15" fill="rgb(223,105,25)"/><text x="22.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="404" width="3" height="15" fill="rgb(246,124,35)"/><text x="22.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="420" width="3" height="15" fill="rgb(235,160,8)"/><text x="22.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="436" width="3" height="15" fill="rgb(241,7,44)"/><text x="22.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="19" y="452" width="3" height="15" fill="rgb(253,69,17)"/><text x="22.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="468" width="3" height="15" fill="rgb(222,158,19)"/><text x="22.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (1 samples, 0.26%)</title><rect x="19" y="484" width="3" height="15" fill="rgb(209,183,46)"/><text x="22.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="500" width="3" height="15" fill="rgb(225,81,4)"/><text x="22.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="516" width="3" height="15" fill="rgb(244,203,15)"/><text x="22.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="532" width="3" height="15" fill="rgb(245,191,37)"/><text x="22.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="19" y="548" width="3" height="15" fill="rgb(239,117,20)"/><text x="22.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="564" width="3" height="15" fill="rgb(205,17,20)"/><text x="22.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (1 samples, 0.26%)</title><rect x="19" y="580" width="3" height="15" fill="rgb(205,8,26)"/><text x="22.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="596" width="3" height="15" fill="rgb(231,214,46)"/><text x="22.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="612" width="3" height="15" fill="rgb(219,226,6)"/><text x="22.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="628" width="3" height="15" fill="rgb(244,149,42)"/><text x="22.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="19" y="644" width="3" height="15" fill="rgb(221,227,23)"/><text x="22.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="660" width="3" height="15" fill="rgb(225,132,25)"/><text x="22.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (1 samples, 0.26%)</title><rect x="19" y="676" width="3" height="15" fill="rgb(249,107,46)"/><text x="22.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="692" width="3" height="15" fill="rgb(240,154,39)"/><text x="22.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="708" width="3" height="15" fill="rgb(231,147,35)"/><text x="22.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="724" width="3" height="15" fill="rgb(210,66,32)"/><text x="22.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="19" y="740" width="3" height="15" fill="rgb(205,109,24)"/><text x="22.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="19" y="756" width="3" height="15" fill="rgb(226,227,35)"/><text x="22.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_multivariate.py) (1 samples, 0.26%)</title><rect x="19" y="772" width="3" height="15" fill="rgb(236,58,45)"/><text x="22.00" y="782.50"></text></g><g><title>docformat (scipy/_lib/doccer.py) (1 samples, 0.26%)</title><rect x="19" y="788" width="3" height="15" fill="rgb(223,143,11)"/><text x="22.00" y="798.50"></text></g><g><title>indentcount_lines (scipy/_lib/doccer.py) (1 samples, 0.26%)</title><rect x="19" y="804" width="3" height="15" fill="rgb(221,104,31)"/><text x="22.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.32%)</title><rect x="10" y="68" width="15" height="15" fill="rgb(252,111,41)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.32%)</title><rect x="10" y="84" width="15" height="15" fill="rgb(234,149,20)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.32%)</title><rect x="10" y="100" width="15" height="15" fill="rgb(212,140,28)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.32%)</title><rect x="10" y="116" width="15" height="15" fill="rgb(206,37,32)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.32%)</title><rect x="10" y="132" width="15" height="15" fill="rgb(220,73,5)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPRegressor/bench_MLPRegressor_default_b_reg.py) (5 samples, 1.32%)</title><rect x="10" y="148" width="15" height="15" fill="rgb(214,50,40)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.32%)</title><rect x="10" y="164" width="15" height="15" fill="rgb(241,90,37)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.32%)</title><rect x="10" y="180" width="15" height="15" fill="rgb(225,159,31)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="196" width="3" height="15" fill="rgb(232,166,45)"/><text x="25.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="212" width="3" height="15" fill="rgb(245,68,14)"/><text x="25.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="228" width="3" height="15" fill="rgb(216,146,37)"/><text x="25.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (1 samples, 0.26%)</title><rect x="22" y="244" width="3" height="15" fill="rgb(208,79,46)"/><text x="25.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="260" width="3" height="15" fill="rgb(243,66,9)"/><text x="25.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="276" width="3" height="15" fill="rgb(207,150,6)"/><text x="25.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="292" width="3" height="15" fill="rgb(238,120,40)"/><text x="25.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="308" width="3" height="15" fill="rgb(229,171,11)"/><text x="25.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="324" width="3" height="15" fill="rgb(240,29,52)"/><text x="25.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.26%)</title><rect x="22" y="340" width="3" height="15" fill="rgb(227,41,34)"/><text x="25.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="356" width="3" height="15" fill="rgb(238,63,54)"/><text x="25.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="372" width="3" height="15" fill="rgb(233,138,40)"/><text x="25.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="388" width="3" height="15" fill="rgb(216,111,42)"/><text x="25.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="404" width="3" height="15" fill="rgb(250,133,0)"/><text x="25.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="420" width="3" height="15" fill="rgb(205,59,3)"/><text x="25.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (1 samples, 0.26%)</title><rect x="22" y="436" width="3" height="15" fill="rgb(213,126,29)"/><text x="25.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="452" width="3" height="15" fill="rgb(244,51,18)"/><text x="25.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="468" width="3" height="15" fill="rgb(215,74,29)"/><text x="25.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="484" width="3" height="15" fill="rgb(214,165,32)"/><text x="25.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="500" width="3" height="15" fill="rgb(211,141,13)"/><text x="25.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="516" width="3" height="15" fill="rgb(212,190,10)"/><text x="25.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="532" width="3" height="15" fill="rgb(248,194,10)"/><text x="25.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="548" width="3" height="15" fill="rgb(214,167,2)"/><text x="25.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="564" width="3" height="15" fill="rgb(248,136,42)"/><text x="25.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (1 samples, 0.26%)</title><rect x="22" y="580" width="3" height="15" fill="rgb(206,206,51)"/><text x="25.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="596" width="3" height="15" fill="rgb(209,133,43)"/><text x="25.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="612" width="3" height="15" fill="rgb(252,145,31)"/><text x="25.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="628" width="3" height="15" fill="rgb(210,164,25)"/><text x="25.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="644" width="3" height="15" fill="rgb(242,50,39)"/><text x="25.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="660" width="3" height="15" fill="rgb(234,80,47)"/><text x="25.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (1 samples, 0.26%)</title><rect x="22" y="676" width="3" height="15" fill="rgb(217,33,2)"/><text x="25.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="692" width="3" height="15" fill="rgb(227,180,42)"/><text x="25.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="708" width="3" height="15" fill="rgb(207,124,5)"/><text x="25.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="724" width="3" height="15" fill="rgb(252,58,35)"/><text x="25.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="740" width="3" height="15" fill="rgb(232,191,15)"/><text x="25.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="756" width="3" height="15" fill="rgb(211,111,35)"/><text x="25.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (1 samples, 0.26%)</title><rect x="22" y="772" width="3" height="15" fill="rgb(242,158,42)"/><text x="25.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="788" width="3" height="15" fill="rgb(239,79,47)"/><text x="25.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="804" width="3" height="15" fill="rgb(251,182,36)"/><text x="25.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="820" width="3" height="15" fill="rgb(206,109,46)"/><text x="25.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="836" width="3" height="15" fill="rgb(238,195,41)"/><text x="25.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="852" width="3" height="15" fill="rgb(245,8,42)"/><text x="25.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (1 samples, 0.26%)</title><rect x="22" y="868" width="3" height="15" fill="rgb(216,154,7)"/><text x="25.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="884" width="3" height="15" fill="rgb(223,47,36)"/><text x="25.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="900" width="3" height="15" fill="rgb(253,61,43)"/><text x="25.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="916" width="3" height="15" fill="rgb(223,217,4)"/><text x="25.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="932" width="3" height="15" fill="rgb(219,160,51)"/><text x="25.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="948" width="3" height="15" fill="rgb(206,181,25)"/><text x="25.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="964" width="3" height="15" fill="rgb(246,104,14)"/><text x="25.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="980" width="3" height="15" fill="rgb(207,176,13)"/><text x="25.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="996" width="3" height="15" fill="rgb(221,190,2)"/><text x="25.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (1 samples, 0.26%)</title><rect x="22" y="1012" width="3" height="15" fill="rgb(221,178,5)"/><text x="25.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1028" width="3" height="15" fill="rgb(206,69,18)"/><text x="25.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1044" width="3" height="15" fill="rgb(246,91,39)"/><text x="25.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1060" width="3" height="15" fill="rgb(213,36,34)"/><text x="25.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="1076" width="3" height="15" fill="rgb(244,71,51)"/><text x="25.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1092" width="3" height="15" fill="rgb(239,187,17)"/><text x="25.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (1 samples, 0.26%)</title><rect x="22" y="1108" width="3" height="15" fill="rgb(253,225,17)"/><text x="25.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1124" width="3" height="15" fill="rgb(228,73,15)"/><text x="25.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1140" width="3" height="15" fill="rgb(238,213,6)"/><text x="25.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1156" width="3" height="15" fill="rgb(248,55,8)"/><text x="25.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="1172" width="3" height="15" fill="rgb(236,188,26)"/><text x="25.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1188" width="3" height="15" fill="rgb(220,174,34)"/><text x="25.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/_parse.py) (1 samples, 0.26%)</title><rect x="22" y="1204" width="3" height="15" fill="rgb(238,128,27)"/><text x="25.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1220" width="3" height="15" fill="rgb(254,199,23)"/><text x="25.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1236" width="3" height="15" fill="rgb(239,174,18)"/><text x="25.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1252" width="3" height="15" fill="rgb(216,21,19)"/><text x="25.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="1268" width="3" height="15" fill="rgb(231,212,7)"/><text x="25.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1284" width="3" height="15" fill="rgb(205,128,45)"/><text x="25.00" y="1294.50"></text></g><g><title>&lt;module&gt; (sklearn/neighbors/__init__.py) (1 samples, 0.26%)</title><rect x="22" y="1300" width="3" height="15" fill="rgb(214,145,32)"/><text x="25.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1316" width="3" height="15" fill="rgb(250,192,33)"/><text x="25.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1332" width="3" height="15" fill="rgb(211,158,36)"/><text x="25.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1348" width="3" height="15" fill="rgb(220,7,39)"/><text x="25.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="1364" width="3" height="15" fill="rgb(246,16,48)"/><text x="25.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1380" width="3" height="15" fill="rgb(208,149,1)"/><text x="25.00" y="1390.50"></text></g><g><title>&lt;module&gt; (sklearn/neighbors/_nca.py) (1 samples, 0.26%)</title><rect x="22" y="1396" width="3" height="15" fill="rgb(214,8,54)"/><text x="25.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1412" width="3" height="15" fill="rgb(252,33,32)"/><text x="25.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1428" width="3" height="15" fill="rgb(241,89,17)"/><text x="25.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1444" width="3" height="15" fill="rgb(239,41,40)"/><text x="25.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="1460" width="3" height="15" fill="rgb(213,172,47)"/><text x="25.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1476" width="3" height="15" fill="rgb(217,53,39)"/><text x="25.00" y="1486.50"></text></g><g><title>&lt;module&gt; (sklearn/decomposition/__init__.py) (1 samples, 0.26%)</title><rect x="22" y="1492" width="3" height="15" fill="rgb(243,95,14)"/><text x="25.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1508" width="3" height="15" fill="rgb(231,90,29)"/><text x="25.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1524" width="3" height="15" fill="rgb(212,98,47)"/><text x="25.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1540" width="3" height="15" fill="rgb(235,10,8)"/><text x="25.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="1556" width="3" height="15" fill="rgb(208,60,8)"/><text x="25.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1572" width="3" height="15" fill="rgb(234,173,24)"/><text x="25.00" y="1582.50"></text></g><g><title>&lt;module&gt; (sklearn/decomposition/_sparse_pca.py) (1 samples, 0.26%)</title><rect x="22" y="1588" width="3" height="15" fill="rgb(217,130,53)"/><text x="25.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1604" width="3" height="15" fill="rgb(221,138,43)"/><text x="25.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1620" width="3" height="15" fill="rgb(247,71,34)"/><text x="25.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1636" width="3" height="15" fill="rgb(234,60,12)"/><text x="25.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="1652" width="3" height="15" fill="rgb(251,19,20)"/><text x="25.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1668" width="3" height="15" fill="rgb(221,93,10)"/><text x="25.00" y="1678.50"></text></g><g><title>&lt;module&gt; (sklearn/linear_model/__init__.py) (1 samples, 0.26%)</title><rect x="22" y="1684" width="3" height="15" fill="rgb(231,19,32)"/><text x="25.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1700" width="3" height="15" fill="rgb(231,124,45)"/><text x="25.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1716" width="3" height="15" fill="rgb(206,1,7)"/><text x="25.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="22" y="1732" width="3" height="15" fill="rgb(242,103,40)"/><text x="25.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="1748" width="3" height="15" fill="rgb(208,209,39)"/><text x="25.00" y="1758.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="1764" width="3" height="15" fill="rgb(246,31,41)"/><text x="25.00" y="1774.50"></text></g><g><title>get_data (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="22" y="1780" width="3" height="15" fill="rgb(215,39,5)"/><text x="25.00" y="1790.50"></text></g><g><title>read (libpthread-2.29.so) (1 samples, 0.26%)</title><rect x="22" y="1796" width="3" height="15" fill="rgb(233,48,34)"/><text x="25.00" y="1806.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.79%)</title><rect x="28" y="116" width="10" height="15" fill="rgb(228,116,26)"/><text x="31.00" y="126.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (3 samples, 0.79%)</title><rect x="28" y="132" width="10" height="15" fill="rgb(217,214,47)"/><text x="31.00" y="142.50"></text></g><g><title>_buffer_clear_info (buffer.c) (3 samples, 0.79%)</title><rect x="28" y="148" width="10" height="15" fill="rgb(241,179,42)"/><text x="31.00" y="158.50"></text></g><g><title>0x7f46b3ba5f10 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.26%)</title><rect x="34" y="164" width="4" height="15" fill="rgb(235,67,0)"/><text x="37.00" y="174.50"></text></g><g><title>0x7f4672a0872e (?) (1 samples, 0.26%)</title><rect x="66" y="212" width="3" height="15" fill="rgb(244,212,44)"/><text x="69.00" y="222.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.26%)</title><rect x="66" y="228" width="3" height="15" fill="rgb(248,34,14)"/><text x="69.00" y="238.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py) (1 samples, 0.26%)</title><rect x="69" y="212" width="3" height="15" fill="rgb(208,204,4)"/><text x="72.00" y="222.50"></text></g><g><title>onnxruntime::FeedsFetchesInfo::FeedsFetchesInfo (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="75" y="292" width="3" height="15" fill="rgb(228,162,26)"/><text x="78.00" y="302.50"></text></g><g><title>onnxruntime::FeedsFetchesInfo::SetMLValueIdxs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="75" y="308" width="3" height="15" fill="rgb(209,10,30)"/><text x="78.00" y="318.50"></text></g><g><title>onnxruntime::FeedsFetchesInfo::MapNamesToMLValueIdxs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="75" y="324" width="3" height="15" fill="rgb(245,29,31)"/><text x="78.00" y="334.50"></text></g><g><title>onnxruntime::SessionState::GetEnableMemoryPattern (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="78" y="356" width="3" height="15" fill="rgb(243,163,12)"/><text x="81.00" y="366.50"></text></g><g><title>onnxruntime::SessionState::GetMemoryPatternGroup (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="81" y="356" width="3" height="15" fill="rgb(206,108,15)"/><text x="84.00" y="366.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.79%)</title><rect x="78" y="340" width="9" height="15" fill="rgb(209,41,31)"/><text x="81.00" y="350.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="84" y="356" width="3" height="15" fill="rgb(223,129,23)"/><text x="87.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="90" y="356" width="4" height="15" fill="rgb(211,196,36)"/><text x="93.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="90" y="372" width="4" height="15" fill="rgb(227,180,47)"/><text x="93.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="90" y="388" width="4" height="15" fill="rgb(224,109,21)"/><text x="93.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="90" y="404" width="4" height="15" fill="rgb(207,198,48)"/><text x="93.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="90" y="420" width="4" height="15" fill="rgb(249,66,15)"/><text x="93.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="90" y="436" width="4" height="15" fill="rgb(208,11,3)"/><text x="93.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="90" y="452" width="4" height="15" fill="rgb(245,205,2)"/><text x="93.00" y="462.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="90" y="468" width="4" height="15" fill="rgb(241,182,4)"/><text x="93.00" y="478.50"></text></g><g><title>mkl_blas_errchk_sgemm (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.26%)</title><rect x="94" y="404" width="3" height="15" fill="rgb(218,103,14)"/><text x="97.00" y="414.50"></text></g><g><title>mkl_serv_lsame (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.26%)</title><rect x="94" y="420" width="3" height="15" fill="rgb(240,52,22)"/><text x="97.00" y="430.50"></text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.06%)</title><rect x="87" y="340" width="13" height="15" fill="rgb(210,154,20)"/><text x="90.00" y="350.50"></text></g><g><title>onnxruntime::math::Gemm&lt;float, onnxruntime::concurrency::ThreadPool&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.53%)</title><rect x="94" y="356" width="6" height="15" fill="rgb(253,109,6)"/><text x="97.00" y="366.50"></text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (2 samples, 0.53%)</title><rect x="94" y="372" width="6" height="15" fill="rgb(214,197,38)"/><text x="97.00" y="382.50"></text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (2 samples, 0.53%)</title><rect x="94" y="388" width="6" height="15" fill="rgb(247,79,30)"/><text x="97.00" y="398.50"></text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.26%)</title><rect x="97" y="404" width="3" height="15" fill="rgb(253,162,23)"/><text x="100.00" y="414.50"></text></g><g><title>mkl_blas_sgemv (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.26%)</title><rect x="97" y="420" width="3" height="15" fill="rgb(230,3,16)"/><text x="100.00" y="430.50"></text></g><g><title>mkl_serv_cpu_detect (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.26%)</title><rect x="97" y="436" width="3" height="15" fill="rgb(248,179,45)"/><text x="100.00" y="446.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 2.64%)</title><rect x="75" y="260" width="31" height="15" fill="rgb(225,181,28)"/><text x="78.00" y="270.50">on..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 2.64%)</title><rect x="75" y="276" width="31" height="15" fill="rgb(231,211,11)"/><text x="78.00" y="286.50">on..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 2.37%)</title><rect x="78" y="292" width="28" height="15" fill="rgb(220,46,50)"/><text x="81.00" y="302.50">o..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 2.37%)</title><rect x="78" y="308" width="28" height="15" fill="rgb(229,6,28)"/><text x="81.00" y="318.50">o..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 2.37%)</title><rect x="78" y="324" width="28" height="15" fill="rgb(234,134,22)"/><text x="81.00" y="334.50">o..</text></g><g><title>onnxruntime::Reshape::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.53%)</title><rect x="100" y="340" width="6" height="15" fill="rgb(224,92,45)"/><text x="103.00" y="350.50"></text></g><g><title>onnxruntime::python::GetPyObjFromTensor [clone .constprop.374] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="106" y="260" width="3" height="15" fill="rgb(211,38,19)"/><text x="109.00" y="270.50"></text></g><g><title>PyArray_New (ctors.c) (1 samples, 0.26%)</title><rect x="106" y="276" width="3" height="15" fill="rgb(254,33,35)"/><text x="109.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.26%)</title><rect x="106" y="292" width="3" height="15" fill="rgb(244,67,19)"/><text x="109.00" y="302.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.26%)</title><rect x="106" y="308" width="3" height="15" fill="rgb(211,63,9)"/><text x="109.00" y="318.50"></text></g><g><title>0x7f46b4983bd8 (libc-2.29.so) (1 samples, 0.26%)</title><rect x="109" y="276" width="3" height="15" fill="rgb(245,41,13)"/><text x="112.00" y="286.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 3.69%)</title><rect x="72" y="244" width="43" height="15" fill="rgb(219,179,16)"/><text x="75.00" y="254.50">onnx..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.53%)</title><rect x="109" y="260" width="6" height="15" fill="rgb(234,117,34)"/><text x="112.00" y="270.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="112" y="276" width="3" height="15" fill="rgb(232,163,42)"/><text x="115.00" y="286.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="112" y="292" width="3" height="15" fill="rgb(229,163,15)"/><text x="115.00" y="302.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="112" y="308" width="3" height="15" fill="rgb(242,154,36)"/><text x="115.00" y="318.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="112" y="324" width="3" height="15" fill="rgb(235,206,21)"/><text x="115.00" y="334.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="112" y="340" width="3" height="15" fill="rgb(239,29,33)"/><text x="115.00" y="350.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="112" y="356" width="3" height="15" fill="rgb(249,164,19)"/><text x="115.00" y="366.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="112" y="372" width="3" height="15" fill="rgb(253,147,24)"/><text x="115.00" y="382.50"></text></g><g><title>pybind11::detail::list_caster&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::load (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="115" y="244" width="3" height="15" fill="rgb(213,204,50)"/><text x="118.00" y="254.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="115" y="260" width="3" height="15" fill="rgb(229,206,28)"/><text x="118.00" y="270.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic [clone .constprop.381] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="118" y="244" width="4" height="15" fill="rgb(236,119,17)"/><text x="121.00" y="254.50"></text></g><g><title>pybind11::detail::get_type_info [clone .constprop.384] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="118" y="260" width="4" height="15" fill="rgb(228,138,13)"/><text x="121.00" y="270.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node [clone .isra.1152] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="118" y="276" width="4" height="15" fill="rgb(210,17,27)"/><text x="121.00" y="286.50"></text></g><g><title>profile_ort (bench_MLPRegressor_default_b_reg_1_4_12_float_.py) (32 samples, 8.44%)</title><rect x="25" y="68" width="100" height="15" fill="rgb(253,229,47)"/><text x="28.00" y="78.50">profile_ort ..</text></g><g><title>setup_profile (bench_MLPRegressor_default_b_reg_1_4_12_float_.py) (32 samples, 8.44%)</title><rect x="25" y="84" width="100" height="15" fill="rgb(207,94,10)"/><text x="28.00" y="94.50">setup_profil..</text></g><g><title>profile (bench_MLPRegressor_default_b_reg_1_4_12_float_.py) (32 samples, 8.44%)</title><rect x="25" y="100" width="100" height="15" fill="rgb(248,82,19)"/><text x="28.00" y="110.50">profile (ben..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (28 samples, 7.39%)</title><rect x="38" y="116" width="87" height="15" fill="rgb(212,12,7)"/><text x="41.00" y="126.50">time_predi..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (28 samples, 7.39%)</title><rect x="38" y="132" width="87" height="15" fill="rgb(254,2,33)"/><text x="41.00" y="142.50">&lt;lambda&gt; (..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (28 samples, 7.39%)</title><rect x="38" y="148" width="87" height="15" fill="rgb(251,80,0)"/><text x="41.00" y="158.50">run (mlpro..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (27 samples, 7.12%)</title><rect x="41" y="164" width="84" height="15" fill="rgb(251,32,2)"/><text x="44.00" y="174.50">_run_whol..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (23 samples, 6.07%)</title><rect x="53" y="180" width="72" height="15" fill="rgb(240,76,18)"/><text x="56.00" y="190.50">run (mlp..</text></g><g><title>run (onnxruntime/capi/session.py) (23 samples, 6.07%)</title><rect x="53" y="196" width="72" height="15" fill="rgb(247,111,43)"/><text x="56.00" y="206.50">run (onn..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 4.49%)</title><rect x="72" y="212" width="53" height="15" fill="rgb(243,137,0)"/><text x="75.00" y="222.50">pybin..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 4.49%)</title><rect x="72" y="228" width="53" height="15" fill="rgb(212,103,41)"/><text x="75.00" y="238.50">void ..</text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic [clone .constprop.383] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="122" y="244" width="3" height="15" fill="rgb(215,211,18)"/><text x="125.00" y="254.50"></text></g><g><title>pybind11::detail::get_type_info [clone .constprop.384] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.26%)</title><rect x="122" y="260" width="3" height="15" fill="rgb(225,90,10)"/><text x="125.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (7 samples, 1.85%)</title><rect x="277" y="196" width="22" height="15" fill="rgb(232,154,44)"/><text x="280.00" y="206.50">&lt;..</text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.53%)</title><rect x="315" y="260" width="6" height="15" fill="rgb(228,82,36)"/><text x="318.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.53%)</title><rect x="315" y="276" width="6" height="15" fill="rgb(228,122,54)"/><text x="318.00" y="286.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (1 samples, 0.26%)</title><rect x="318" y="292" width="3" height="15" fill="rgb(240,146,33)"/><text x="321.00" y="302.50"></text></g><g><title>_array_fill_strides (ctors.c) (1 samples, 0.26%)</title><rect x="321" y="324" width="3" height="15" fill="rgb(221,138,15)"/><text x="324.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (5 samples, 1.32%)</title><rect x="312" y="212" width="15" height="15" fill="rgb(244,183,40)"/><text x="315.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (4 samples, 1.06%)</title><rect x="315" y="228" width="12" height="15" fill="rgb(231,105,33)"/><text x="318.00" y="238.50"></text></g><g><title>array_astype (methods.c) (4 samples, 1.06%)</title><rect x="315" y="244" width="12" height="15" fill="rgb(230,141,31)"/><text x="318.00" y="254.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (2 samples, 0.53%)</title><rect x="321" y="260" width="6" height="15" fill="rgb(233,162,35)"/><text x="324.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.53%)</title><rect x="321" y="276" width="6" height="15" fill="rgb(243,123,2)"/><text x="324.00" y="286.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (2 samples, 0.53%)</title><rect x="321" y="292" width="6" height="15" fill="rgb(243,92,42)"/><text x="324.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.53%)</title><rect x="321" y="308" width="6" height="15" fill="rgb(213,125,17)"/><text x="324.00" y="318.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.26%)</title><rect x="324" y="324" width="3" height="15" fill="rgb(230,139,42)"/><text x="327.00" y="334.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (1 samples, 0.26%)</title><rect x="336" y="244" width="4" height="15" fill="rgb(239,57,53)"/><text x="339.00" y="254.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.26%)</title><rect x="340" y="244" width="3" height="15" fill="rgb(240,125,13)"/><text x="343.00" y="254.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.26%)</title><rect x="340" y="260" width="3" height="15" fill="rgb(232,33,27)"/><text x="343.00" y="270.50"></text></g><g><title>gentype_dealloc (scalartypes.c.src) (1 samples, 0.26%)</title><rect x="340" y="276" width="3" height="15" fill="rgb(233,209,24)"/><text x="343.00" y="286.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.26%)</title><rect x="340" y="292" width="3" height="15" fill="rgb(214,175,48)"/><text x="343.00" y="302.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.26%)</title><rect x="340" y="308" width="3" height="15" fill="rgb(251,10,19)"/><text x="343.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reshape.py) (6 samples, 1.58%)</title><rect x="327" y="212" width="19" height="15" fill="rgb(247,219,50)"/><text x="330.00" y="222.50"></text></g><g><title>array_reshape (methods.c) (4 samples, 1.06%)</title><rect x="333" y="228" width="13" height="15" fill="rgb(208,118,14)"/><text x="336.00" y="238.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.26%)</title><rect x="343" y="244" width="3" height="15" fill="rgb(223,50,54)"/><text x="346.00" y="254.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.26%)</title><rect x="343" y="260" width="3" height="15" fill="rgb(222,227,40)"/><text x="346.00" y="270.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.53%)</title><rect x="389" y="260" width="7" height="15" fill="rgb(228,11,32)"/><text x="392.00" y="270.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.53%)</title><rect x="389" y="276" width="7" height="15" fill="rgb(224,155,48)"/><text x="392.00" y="286.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (1 samples, 0.26%)</title><rect x="392" y="292" width="4" height="15" fill="rgb(241,32,9)"/><text x="395.00" y="302.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (1 samples, 0.26%)</title><rect x="396" y="292" width="3" height="15" fill="rgb(240,15,10)"/><text x="399.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.26%)</title><rect x="396" y="308" width="3" height="15" fill="rgb(243,69,29)"/><text x="399.00" y="318.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (1 samples, 0.26%)</title><rect x="396" y="324" width="3" height="15" fill="rgb(207,14,22)"/><text x="399.00" y="334.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (1 samples, 0.26%)</title><rect x="396" y="340" width="3" height="15" fill="rgb(227,167,23)"/><text x="399.00" y="350.50"></text></g><g><title>gt_128 (npy_extint128.h) (1 samples, 0.26%)</title><rect x="396" y="356" width="3" height="15" fill="rgb(231,156,36)"/><text x="399.00" y="366.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.26%)</title><rect x="399" y="324" width="3" height="15" fill="rgb(236,131,13)"/><text x="402.00" y="334.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.79%)</title><rect x="399" y="308" width="9" height="15" fill="rgb(213,45,37)"/><text x="402.00" y="318.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (2 samples, 0.53%)</title><rect x="402" y="324" width="6" height="15" fill="rgb(234,103,6)"/><text x="405.00" y="334.50"></text></g><g><title>iterator_loop (ufunc_object.c) (4 samples, 1.06%)</title><rect x="399" y="292" width="12" height="15" fill="rgb(221,87,17)"/><text x="402.00" y="302.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (1 samples, 0.26%)</title><rect x="408" y="308" width="3" height="15" fill="rgb(219,73,54)"/><text x="411.00" y="318.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (1 samples, 0.26%)</title><rect x="408" y="324" width="3" height="15" fill="rgb(230,127,52)"/><text x="411.00" y="334.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (6 samples, 1.58%)</title><rect x="396" y="276" width="18" height="15" fill="rgb(224,73,24)"/><text x="399.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (1 samples, 0.26%)</title><rect x="411" y="292" width="3" height="15" fill="rgb(214,144,49)"/><text x="414.00" y="302.50"></text></g><g><title>FLOAT_add (loops.c.src) (1 samples, 0.26%)</title><rect x="411" y="308" width="3" height="15" fill="rgb(254,111,25)"/><text x="414.00" y="318.50"></text></g><g><title>run_binary_simd_add_FLOAT (simd.inc.src) (1 samples, 0.26%)</title><rect x="411" y="324" width="3" height="15" fill="rgb(243,140,30)"/><text x="414.00" y="334.50"></text></g><g><title>sse2_binary_add_FLOAT (simd.inc.src) (1 samples, 0.26%)</title><rect x="411" y="340" width="3" height="15" fill="rgb(252,140,8)"/><text x="414.00" y="350.50"></text></g><g><title>_mm_add_ps (xmmintrin.h) (1 samples, 0.26%)</title><rect x="411" y="356" width="3" height="15" fill="rgb(231,168,37)"/><text x="414.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (17 samples, 4.49%)</title><rect x="364" y="228" width="53" height="15" fill="rgb(222,53,54)"/><text x="367.00" y="238.50">_run ..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (9 samples, 2.37%)</title><rect x="389" y="244" width="28" height="15" fill="rgb(210,179,30)"/><text x="392.00" y="254.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 1.85%)</title><rect x="396" y="260" width="21" height="15" fill="rgb(234,161,30)"/><text x="399.00" y="270.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.26%)</title><rect x="414" y="276" width="3" height="15" fill="rgb(243,192,18)"/><text x="417.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (1 samples, 0.26%)</title><rect x="417" y="228" width="3" height="15" fill="rgb(217,197,10)"/><text x="420.00" y="238.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.26%)</title><rect x="439" y="260" width="3" height="15" fill="rgb(240,188,8)"/><text x="442.00" y="270.50"></text></g><g><title>FLOAT_dot (arraytypes.c.src) (1 samples, 0.26%)</title><rect x="458" y="340" width="3" height="15" fill="rgb(236,45,32)"/><text x="461.00" y="350.50"></text></g><g><title>sdot_k_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.26%)</title><rect x="458" y="356" width="3" height="15" fill="rgb(248,142,30)"/><text x="461.00" y="366.50"></text></g><g><title>sdot_kernel_16 (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.26%)</title><rect x="458" y="372" width="3" height="15" fill="rgb(254,154,22)"/><text x="461.00" y="382.50"></text></g><g><title>PyArray_ResolveWritebackIfCopy (arrayobject.c) (1 samples, 0.26%)</title><rect x="461" y="340" width="3" height="15" fill="rgb(208,86,54)"/><text x="464.00" y="350.50"></text></g><g><title>PyArray_CopyAsFlat (ctors.c) (1 samples, 0.26%)</title><rect x="461" y="356" width="3" height="15" fill="rgb(247,115,5)"/><text x="464.00" y="366.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.26%)</title><rect x="461" y="372" width="3" height="15" fill="rgb(253,144,37)"/><text x="464.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.26%)</title><rect x="461" y="388" width="3" height="15" fill="rgb(226,152,32)"/><text x="464.00" y="398.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (1 samples, 0.26%)</title><rect x="461" y="404" width="3" height="15" fill="rgb(249,117,42)"/><text x="464.00" y="414.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.26%)</title><rect x="461" y="420" width="3" height="15" fill="rgb(252,84,50)"/><text x="464.00" y="430.50"></text></g><g><title>0x7f46b49a3d62 (libc-2.29.so) (1 samples, 0.26%)</title><rect x="461" y="436" width="3" height="15" fill="rgb(227,17,20)"/><text x="464.00" y="446.50"></text></g><g><title>PyArray_Return (scalarapi.c) (1 samples, 0.26%)</title><rect x="464" y="340" width="3" height="15" fill="rgb(213,219,53)"/><text x="467.00" y="350.50"></text></g><g><title>_bad_strides (cblasfuncs.c) (1 samples, 0.26%)</title><rect x="467" y="340" width="3" height="15" fill="rgb(227,107,54)"/><text x="470.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.53%)</title><rect x="470" y="340" width="7" height="15" fill="rgb(247,115,41)"/><text x="473.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.53%)</title><rect x="470" y="356" width="7" height="15" fill="rgb(210,165,28)"/><text x="473.00" y="366.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (1 samples, 0.26%)</title><rect x="477" y="356" width="3" height="15" fill="rgb(221,121,6)"/><text x="480.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.26%)</title><rect x="477" y="372" width="3" height="15" fill="rgb(244,36,16)"/><text x="480.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.26%)</title><rect x="477" y="388" width="3" height="15" fill="rgb(227,145,5)"/><text x="480.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.26%)</title><rect x="477" y="404" width="3" height="15" fill="rgb(240,187,10)"/><text x="480.00" y="414.50"></text></g><g><title>_array_fill_strides (ctors.c) (1 samples, 0.26%)</title><rect x="477" y="420" width="3" height="15" fill="rgb(239,211,54)"/><text x="480.00" y="430.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py) (20 samples, 5.28%)</title><rect x="420" y="228" width="63" height="15" fill="rgb(252,185,40)"/><text x="423.00" y="238.50">_run (..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py) (20 samples, 5.28%)</title><rect x="420" y="244" width="63" height="15" fill="rgb(221,147,30)"/><text x="423.00" y="254.50">numpy_..</text></g><g><title>dot (&lt;__array_function__ internals&gt;) (13 samples, 3.43%)</title><rect x="442" y="260" width="41" height="15" fill="rgb(219,134,4)"/><text x="445.00" y="270.50">dot..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (13 samples, 3.43%)</title><rect x="442" y="276" width="41" height="15" fill="rgb(217,2,17)"/><text x="445.00" y="286.50">arr..</text></g><g><title>array_matrixproduct (multiarraymodule.c) (11 samples, 2.90%)</title><rect x="448" y="292" width="35" height="15" fill="rgb(208,128,40)"/><text x="451.00" y="302.50">ar..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c) (9 samples, 2.37%)</title><rect x="455" y="308" width="28" height="15" fill="rgb(221,112,16)"/><text x="458.00" y="318.50">P..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c) (9 samples, 2.37%)</title><rect x="455" y="324" width="28" height="15" fill="rgb(219,129,20)"/><text x="458.00" y="334.50">c..</text></g><g><title>new_array_for_sum (common.c) (2 samples, 0.53%)</title><rect x="477" y="340" width="6" height="15" fill="rgb(230,94,54)"/><text x="480.00" y="350.50"></text></g><g><title>PyArray_TYPE (ndarraytypes.h) (1 samples, 0.26%)</title><rect x="480" y="356" width="3" height="15" fill="rgb(208,39,31)"/><text x="483.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.26%)</title><rect x="495" y="292" width="3" height="15" fill="rgb(251,18,42)"/><text x="498.00" y="302.50"></text></g><g><title>PyArray_MinScalarType_internal (convert_datatype.c) (1 samples, 0.26%)</title><rect x="495" y="308" width="3" height="15" fill="rgb(209,203,17)"/><text x="498.00" y="318.50"></text></g><g><title>min_scalar_type_num (convert_datatype.c) (1 samples, 0.26%)</title><rect x="495" y="324" width="3" height="15" fill="rgb(252,167,28)"/><text x="498.00" y="334.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.53%)</title><rect x="495" y="276" width="6" height="15" fill="rgb(229,140,21)"/><text x="498.00" y="286.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (1 samples, 0.26%)</title><rect x="498" y="292" width="3" height="15" fill="rgb(220,110,18)"/><text x="501.00" y="302.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (1 samples, 0.26%)</title><rect x="498" y="308" width="3" height="15" fill="rgb(223,128,48)"/><text x="501.00" y="318.50"></text></g><g><title>can_cast_scalar_to (convert_datatype.c) (1 samples, 0.26%)</title><rect x="498" y="324" width="3" height="15" fill="rgb(216,103,11)"/><text x="501.00" y="334.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.26%)</title><rect x="498" y="340" width="3" height="15" fill="rgb(227,192,47)"/><text x="501.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.26%)</title><rect x="501" y="276" width="4" height="15" fill="rgb(240,149,26)"/><text x="504.00" y="286.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (1 samples, 0.26%)</title><rect x="501" y="292" width="4" height="15" fill="rgb(243,67,31)"/><text x="504.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.26%)</title><rect x="501" y="308" width="4" height="15" fill="rgb(210,106,36)"/><text x="504.00" y="318.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (1 samples, 0.26%)</title><rect x="501" y="324" width="4" height="15" fill="rgb(206,157,8)"/><text x="504.00" y="334.50"></text></g><g><title>0x7f46b4983998 (libc-2.29.so) (1 samples, 0.26%)</title><rect x="501" y="340" width="4" height="15" fill="rgb(252,101,47)"/><text x="504.00" y="350.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (1 samples, 0.26%)</title><rect x="505" y="308" width="3" height="15" fill="rgb(221,121,45)"/><text x="508.00" y="318.50"></text></g><g><title>_array_find_python_scalar_type (common.c) (1 samples, 0.26%)</title><rect x="505" y="324" width="3" height="15" fill="rgb(206,219,6)"/><text x="508.00" y="334.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.26%)</title><rect x="505" y="340" width="3" height="15" fill="rgb(226,124,8)"/><text x="508.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 1.32%)</title><rect x="495" y="260" width="16" height="15" fill="rgb(250,137,26)"/><text x="498.00" y="270.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (2 samples, 0.53%)</title><rect x="505" y="276" width="6" height="15" fill="rgb(214,136,35)"/><text x="508.00" y="286.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.53%)</title><rect x="505" y="292" width="6" height="15" fill="rgb(249,131,33)"/><text x="508.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.26%)</title><rect x="508" y="308" width="3" height="15" fill="rgb(218,217,1)"/><text x="511.00" y="318.50"></text></g><g><title>profile (bench_MLPRegressor_default_b_reg_1_4_12_float_.py) (125 samples, 32.98%)</title><rect x="125" y="100" width="389" height="15" fill="rgb(218,166,5)"/><text x="128.00" y="110.50">profile (bench_MLPRegressor_default_b_reg_1_4_12_flo..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (123 samples, 32.45%)</title><rect x="131" y="116" width="383" height="15" fill="rgb(223,193,27)"/><text x="134.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (121 samples, 31.93%)</title><rect x="137" y="132" width="377" height="15" fill="rgb(225,21,33)"/><text x="140.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (121 samples, 31.93%)</title><rect x="137" y="148" width="377" height="15" fill="rgb(218,69,23)"/><text x="140.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (120 samples, 31.66%)</title><rect x="140" y="164" width="374" height="15" fill="rgb(226,3,28)"/><text x="143.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_infer..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (112 samples, 29.55%)</title><rect x="165" y="180" width="349" height="15" fill="rgb(208,196,2)"/><text x="168.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (69 samples, 18.21%)</title><rect x="299" y="196" width="215" height="15" fill="rgb(207,194,12)"/><text x="302.00" y="206.50">run (mlprodict/onnxrt/ops_cp..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (54 samples, 14.25%)</title><rect x="346" y="212" width="168" height="15" fill="rgb(235,189,33)"/><text x="349.00" y="222.50">run (mlprodict/onnxrt..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py) (10 samples, 2.64%)</title><rect x="483" y="228" width="31" height="15" fill="rgb(216,21,2)"/><text x="486.00" y="238.50">_r..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 1.58%)</title><rect x="495" y="244" width="19" height="15" fill="rgb(250,120,6)"/><text x="498.00" y="254.50"></text></g><g><title>_find_array_wrap (ufunc_object.c) (1 samples, 0.26%)</title><rect x="511" y="260" width="3" height="15" fill="rgb(246,63,31)"/><text x="514.00" y="270.50"></text></g><g><title>profile_pyrt (bench_MLPRegressor_default_b_reg_1_4_12_float_.py) (126 samples, 33.25%)</title><rect x="125" y="68" width="392" height="15" fill="rgb(240,202,51)"/><text x="128.00" y="78.50">profile_pyrt (bench_MLPRegressor_default_b_reg_1_4_12..</text></g><g><title>setup_profile (bench_MLPRegressor_default_b_reg_1_4_12_float_.py) (126 samples, 33.25%)</title><rect x="125" y="84" width="392" height="15" fill="rgb(251,97,51)"/><text x="128.00" y="94.50">setup_profile (bench_MLPRegressor_default_b_reg_1_4_1..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.26%)</title><rect x="514" y="100" width="3" height="15" fill="rgb(233,208,37)"/><text x="517.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.26%)</title><rect x="514" y="116" width="3" height="15" fill="rgb(220,65,54)"/><text x="517.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.26%)</title><rect x="514" y="132" width="3" height="15" fill="rgb(229,33,25)"/><text x="517.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.26%)</title><rect x="514" y="148" width="3" height="15" fill="rgb(205,199,46)"/><text x="517.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.26%)</title><rect x="514" y="164" width="3" height="15" fill="rgb(206,167,24)"/><text x="517.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (1 samples, 0.26%)</title><rect x="514" y="180" width="3" height="15" fill="rgb(220,176,28)"/><text x="517.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (1 samples, 0.26%)</title><rect x="514" y="196" width="3" height="15" fill="rgb(231,203,29)"/><text x="517.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="514" y="212" width="3" height="15" fill="rgb(205,107,14)"/><text x="517.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="514" y="228" width="3" height="15" fill="rgb(247,205,10)"/><text x="517.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="514" y="244" width="3" height="15" fill="rgb(225,70,13)"/><text x="517.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="514" y="260" width="3" height="15" fill="rgb(207,131,7)"/><text x="517.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="514" y="276" width="3" height="15" fill="rgb(208,184,53)"/><text x="517.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (1 samples, 0.26%)</title><rect x="514" y="292" width="3" height="15" fill="rgb(245,51,20)"/><text x="517.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="514" y="308" width="3" height="15" fill="rgb(223,193,14)"/><text x="517.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="514" y="324" width="3" height="15" fill="rgb(229,74,5)"/><text x="517.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="514" y="340" width="3" height="15" fill="rgb(214,182,0)"/><text x="517.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="514" y="356" width="3" height="15" fill="rgb(223,223,54)"/><text x="517.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="514" y="372" width="3" height="15" fill="rgb(240,182,17)"/><text x="517.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (1 samples, 0.26%)</title><rect x="514" y="388" width="3" height="15" fill="rgb(214,227,14)"/><text x="517.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="514" y="404" width="3" height="15" fill="rgb(214,216,3)"/><text x="517.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="514" y="420" width="3" height="15" fill="rgb(248,46,18)"/><text x="517.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.26%)</title><rect x="514" y="436" width="3" height="15" fill="rgb(214,186,23)"/><text x="517.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="514" y="452" width="3" height="15" fill="rgb(232,226,25)"/><text x="517.00" y="462.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="514" y="468" width="3" height="15" fill="rgb(254,149,32)"/><text x="517.00" y="478.50"></text></g><g><title>path_stats (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="514" y="484" width="3" height="15" fill="rgb(215,42,7)"/><text x="517.00" y="494.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.26%)</title><rect x="514" y="500" width="3" height="15" fill="rgb(249,0,29)"/><text x="517.00" y="510.50"></text></g><g><title>__new__ (numpy/core/getlimits.py) (2 samples, 0.53%)</title><rect x="607" y="212" width="7" height="15" fill="rgb(212,201,51)"/><text x="610.00" y="222.50"></text></g><g><title>arraydescr_new (descriptor.c) (1 samples, 0.26%)</title><rect x="610" y="228" width="4" height="15" fill="rgb(240,197,1)"/><text x="613.00" y="238.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (2 samples, 0.53%)</title><rect x="654" y="372" width="6" height="15" fill="rgb(211,31,5)"/><text x="657.00" y="382.50"></text></g><g><title>PyArray_CastToType (convert_datatype.c) (2 samples, 0.53%)</title><rect x="654" y="388" width="6" height="15" fill="rgb(208,166,40)"/><text x="657.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.53%)</title><rect x="654" y="404" width="6" height="15" fill="rgb(208,93,14)"/><text x="657.00" y="414.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.26%)</title><rect x="657" y="420" width="3" height="15" fill="rgb(222,201,40)"/><text x="660.00" y="430.50"></text></g><g><title>can_cast_scalar_to (convert_datatype.c) (1 samples, 0.26%)</title><rect x="657" y="436" width="3" height="15" fill="rgb(246,163,47)"/><text x="660.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.26%)</title><rect x="660" y="404" width="3" height="15" fill="rgb(211,59,9)"/><text x="663.00" y="414.50"></text></g><g><title>0x7f46b49a414a (libc-2.29.so) (1 samples, 0.26%)</title><rect x="660" y="420" width="3" height="15" fill="rgb(240,35,26)"/><text x="663.00" y="430.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.79%)</title><rect x="660" y="372" width="10" height="15" fill="rgb(249,175,27)"/><text x="663.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.79%)</title><rect x="660" y="388" width="10" height="15" fill="rgb(243,25,46)"/><text x="663.00" y="398.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (2 samples, 0.53%)</title><rect x="663" y="404" width="7" height="15" fill="rgb(212,60,45)"/><text x="666.00" y="414.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (1 samples, 0.26%)</title><rect x="666" y="420" width="4" height="15" fill="rgb(218,160,16)"/><text x="669.00" y="430.50"></text></g><g><title>PyArray_FromScalar (scalarapi.c) (1 samples, 0.26%)</title><rect x="670" y="404" width="3" height="15" fill="rgb(218,187,51)"/><text x="673.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.26%)</title><rect x="670" y="420" width="3" height="15" fill="rgb(242,86,48)"/><text x="673.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.26%)</title><rect x="670" y="436" width="3" height="15" fill="rgb(227,178,44)"/><text x="673.00" y="446.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.26%)</title><rect x="670" y="452" width="3" height="15" fill="rgb(220,149,5)"/><text x="673.00" y="462.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.53%)</title><rect x="670" y="388" width="6" height="15" fill="rgb(213,137,5)"/><text x="673.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.26%)</title><rect x="673" y="404" width="3" height="15" fill="rgb(230,93,3)"/><text x="676.00" y="414.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.26%)</title><rect x="673" y="420" width="3" height="15" fill="rgb(225,190,34)"/><text x="676.00" y="430.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.79%)</title><rect x="670" y="372" width="9" height="15" fill="rgb(232,16,26)"/><text x="673.00" y="382.50"></text></g><g><title>parse_ufunc_keywords (ufunc_object.c) (1 samples, 0.26%)</title><rect x="676" y="388" width="3" height="15" fill="rgb(243,46,30)"/><text x="679.00" y="398.50"></text></g><g><title>locate_key (ufunc_object.c) (1 samples, 0.26%)</title><rect x="676" y="404" width="3" height="15" fill="rgb(219,40,49)"/><text x="679.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (9 samples, 2.37%)</title><rect x="654" y="356" width="28" height="15" fill="rgb(217,211,2)"/><text x="657.00" y="366.50">P..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.26%)</title><rect x="679" y="372" width="3" height="15" fill="rgb(250,81,7)"/><text x="682.00" y="382.50"></text></g><g><title>0x7f46b3ba6a80 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.26%)</title><rect x="679" y="388" width="3" height="15" fill="rgb(241,159,21)"/><text x="682.00" y="398.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.26%)</title><rect x="682" y="372" width="3" height="15" fill="rgb(209,32,45)"/><text x="685.00" y="382.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.26%)</title><rect x="682" y="388" width="3" height="15" fill="rgb(211,43,19)"/><text x="685.00" y="398.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (12 samples, 3.17%)</title><rect x="651" y="324" width="37" height="15" fill="rgb(241,24,34)"/><text x="654.00" y="334.50">_cl..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (11 samples, 2.90%)</title><rect x="654" y="340" width="34" height="15" fill="rgb(228,143,15)"/><text x="657.00" y="350.50">uf..</text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.53%)</title><rect x="682" y="356" width="6" height="15" fill="rgb(251,84,17)"/><text x="685.00" y="366.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.26%)</title><rect x="685" y="372" width="3" height="15" fill="rgb(248,157,0)"/><text x="688.00" y="382.50"></text></g><g><title>_clip_dep_is_byte_swapped (numpy/core/_methods.py) (1 samples, 0.26%)</title><rect x="688" y="324" width="3" height="15" fill="rgb(233,177,21)"/><text x="691.00" y="334.50"></text></g><g><title>arraydescr_isnative_get (descriptor.c) (1 samples, 0.26%)</title><rect x="688" y="340" width="3" height="15" fill="rgb(227,84,15)"/><text x="691.00" y="350.50"></text></g><g><title>_arraydescr_isnative (descriptor.c) (1 samples, 0.26%)</title><rect x="688" y="356" width="3" height="15" fill="rgb(239,136,3)"/><text x="691.00" y="366.50"></text></g><g><title>0x7f46b49a4124 (libc-2.29.so) (1 samples, 0.26%)</title><rect x="726" y="340" width="3" height="15" fill="rgb(226,114,3)"/><text x="729.00" y="350.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.06%)</title><rect x="729" y="340" width="12" height="15" fill="rgb(209,39,7)"/><text x="732.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.26%)</title><rect x="760" y="388" width="3" height="15" fill="rgb(249,220,50)"/><text x="763.00" y="398.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.26%)</title><rect x="760" y="404" width="3" height="15" fill="rgb(216,175,22)"/><text x="763.00" y="414.50"></text></g><g><title>PyArray_BoolConverter (conversion_utils.c) (1 samples, 0.26%)</title><rect x="766" y="420" width="3" height="15" fill="rgb(245,153,23)"/><text x="769.00" y="430.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;) (11 samples, 2.90%)</title><rect x="741" y="340" width="34" height="15" fill="rgb(235,31,44)"/><text x="744.00" y="350.50">nd..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 2.11%)</title><rect x="751" y="356" width="24" height="15" fill="rgb(210,36,9)"/><text x="754.00" y="366.50">a..</text></g><g><title>ndim (numpy/core/fromnumeric.py) (8 samples, 2.11%)</title><rect x="751" y="372" width="24" height="15" fill="rgb(208,62,22)"/><text x="754.00" y="382.50">n..</text></g><g><title>asarray (numpy/core/_asarray.py) (4 samples, 1.06%)</title><rect x="763" y="388" width="12" height="15" fill="rgb(226,62,39)"/><text x="766.00" y="398.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 1.06%)</title><rect x="763" y="404" width="12" height="15" fill="rgb(214,4,31)"/><text x="766.00" y="414.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (2 samples, 0.53%)</title><rect x="769" y="420" width="6" height="15" fill="rgb(253,95,19)"/><text x="772.00" y="430.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.53%)</title><rect x="769" y="436" width="6" height="15" fill="rgb(242,74,35)"/><text x="772.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.53%)</title><rect x="769" y="452" width="6" height="15" fill="rgb(211,140,21)"/><text x="772.00" y="462.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (2 samples, 0.53%)</title><rect x="769" y="468" width="6" height="15" fill="rgb(235,194,6)"/><text x="772.00" y="478.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (1 samples, 0.26%)</title><rect x="772" y="484" width="3" height="15" fill="rgb(207,5,0)"/><text x="775.00" y="494.50"></text></g><g><title>PyArray_ENABLEFLAGS (ndarraytypes.h) (1 samples, 0.26%)</title><rect x="772" y="500" width="3" height="15" fill="rgb(208,99,12)"/><text x="775.00" y="510.50"></text></g><g><title>PyArray_Return (scalarapi.c) (1 samples, 0.26%)</title><rect x="775" y="356" width="4" height="15" fill="rgb(215,26,7)"/><text x="778.00" y="366.50"></text></g><g><title>PyArray_Scalar (scalarapi.c) (1 samples, 0.26%)</title><rect x="775" y="372" width="4" height="15" fill="rgb(223,55,4)"/><text x="778.00" y="382.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.53%)</title><rect x="779" y="356" width="6" height="15" fill="rgb(239,217,13)"/><text x="782.00" y="366.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.53%)</title><rect x="779" y="372" width="6" height="15" fill="rgb(212,89,2)"/><text x="782.00" y="382.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.26%)</title><rect x="782" y="388" width="3" height="15" fill="rgb(238,154,26)"/><text x="785.00" y="398.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.26%)</title><rect x="782" y="404" width="3" height="15" fill="rgb(217,226,15)"/><text x="785.00" y="414.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.26%)</title><rect x="782" y="420" width="3" height="15" fill="rgb(231,187,12)"/><text x="785.00" y="430.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (1 samples, 0.26%)</title><rect x="785" y="372" width="3" height="15" fill="rgb(242,56,45)"/><text x="788.00" y="382.50"></text></g><g><title>PyArray_FromScalar (scalarapi.c) (1 samples, 0.26%)</title><rect x="788" y="404" width="3" height="15" fill="rgb(231,56,26)"/><text x="791.00" y="414.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (2 samples, 0.53%)</title><rect x="788" y="372" width="6" height="15" fill="rgb(224,117,28)"/><text x="791.00" y="382.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.53%)</title><rect x="788" y="388" width="6" height="15" fill="rgb(245,185,50)"/><text x="791.00" y="398.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (1 samples, 0.26%)</title><rect x="791" y="404" width="3" height="15" fill="rgb(236,43,36)"/><text x="794.00" y="414.50"></text></g><g><title>_array_find_python_scalar_type (common.c) (1 samples, 0.26%)</title><rect x="791" y="420" width="3" height="15" fill="rgb(229,155,50)"/><text x="794.00" y="430.50"></text></g><g><title>set_ufunc_loop_data_types (ufunc_type_resolution.c) (2 samples, 0.53%)</title><rect x="794" y="388" width="6" height="15" fill="rgb(235,19,23)"/><text x="797.00" y="398.50"></text></g><g><title>PyArray_DESCR (ndarraytypes.h) (1 samples, 0.26%)</title><rect x="797" y="404" width="3" height="15" fill="rgb(229,7,27)"/><text x="800.00" y="414.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (3 samples, 0.79%)</title><rect x="794" y="372" width="9" height="15" fill="rgb(234,129,32)"/><text x="797.00" y="382.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (1 samples, 0.26%)</title><rect x="800" y="388" width="3" height="15" fill="rgb(219,4,28)"/><text x="803.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.26%)</title><rect x="800" y="404" width="3" height="15" fill="rgb(244,191,10)"/><text x="803.00" y="414.50"></text></g><g><title>PyArray_CanCastTo (convert_datatype.c) (1 samples, 0.26%)</title><rect x="800" y="420" width="3" height="15" fill="rgb(205,69,39)"/><text x="803.00" y="430.50"></text></g><g><title>PyArray_CanCastSafely (convert_datatype.c) (1 samples, 0.26%)</title><rect x="800" y="436" width="3" height="15" fill="rgb(222,50,9)"/><text x="803.00" y="446.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 1.85%)</title><rect x="785" y="356" width="22" height="15" fill="rgb(228,52,40)"/><text x="788.00" y="366.50">P..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.26%)</title><rect x="803" y="372" width="4" height="15" fill="rgb(240,216,46)"/><text x="806.00" y="382.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.26%)</title><rect x="803" y="388" width="4" height="15" fill="rgb(243,206,34)"/><text x="806.00" y="398.50"></text></g><g><title>clip (numpy/core/fromnumeric.py) (61 samples, 16.09%)</title><rect x="620" y="244" width="190" height="15" fill="rgb(234,174,29)"/><text x="623.00" y="254.50">clip (numpy/core/fromnum..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (57 samples, 15.04%)</title><rect x="632" y="260" width="178" height="15" fill="rgb(226,194,53)"/><text x="635.00" y="270.50">_wrapfunc (numpy/core/f..</text></g><g><title>array_clip (methods.c) (56 samples, 14.78%)</title><rect x="635" y="276" width="175" height="15" fill="rgb(210,71,24)"/><text x="638.00" y="286.50">array_clip (methods.c)</text></g><g><title>forward_ndarray_method (methods.c) (56 samples, 14.78%)</title><rect x="635" y="292" width="175" height="15" fill="rgb(240,70,33)"/><text x="638.00" y="302.50">forward_ndarray_method..</text></g><g><title>_clip (numpy/core/_methods.py) (55 samples, 14.51%)</title><rect x="638" y="308" width="172" height="15" fill="rgb(248,195,38)"/><text x="641.00" y="318.50">_clip (numpy/core/_met..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (38 samples, 10.03%)</title><rect x="691" y="324" width="119" height="15" fill="rgb(224,26,36)"/><text x="694.00" y="334.50">_clip_dep_is_s..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (11 samples, 2.90%)</title><rect x="775" y="340" width="35" height="15" fill="rgb(240,116,47)"/><text x="778.00" y="350.50">uf..</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.26%)</title><rect x="807" y="356" width="3" height="15" fill="rgb(231,11,25)"/><text x="810.00" y="366.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.26%)</title><rect x="807" y="372" width="3" height="15" fill="rgb(212,55,50)"/><text x="810.00" y="382.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.26%)</title><rect x="807" y="388" width="3" height="15" fill="rgb(232,64,36)"/><text x="810.00" y="398.50"></text></g><g><title>relu (sklearn/neural_network/_base.py) (70 samples, 18.47%)</title><rect x="601" y="196" width="218" height="15" fill="rgb(227,185,48)"/><text x="604.00" y="206.50">relu (sklearn/neural_network..</text></g><g><title>clip (&lt;__array_function__ internals&gt;) (66 samples, 17.41%)</title><rect x="614" y="212" width="205" height="15" fill="rgb(244,172,25)"/><text x="617.00" y="222.50">clip (&lt;__array_function__ ..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (64 samples, 16.89%)</title><rect x="620" y="228" width="199" height="15" fill="rgb(236,89,15)"/><text x="623.00" y="238.50">array_implement_array_func..</text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (3 samples, 0.79%)</title><rect x="810" y="244" width="9" height="15" fill="rgb(207,74,39)"/><text x="813.00" y="254.50"></text></g><g><title>get_array_function (arrayfunction_override.c) (3 samples, 0.79%)</title><rect x="810" y="260" width="9" height="15" fill="rgb(209,210,41)"/><text x="813.00" y="270.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (3 samples, 0.79%)</title><rect x="810" y="276" width="9" height="15" fill="rgb(253,78,54)"/><text x="813.00" y="286.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (3 samples, 0.79%)</title><rect x="810" y="292" width="9" height="15" fill="rgb(231,152,26)"/><text x="813.00" y="302.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.26%)</title><rect x="828" y="212" width="3" height="15" fill="rgb(219,23,26)"/><text x="831.00" y="222.50"></text></g><g><title>PyArray_Return (scalarapi.c) (1 samples, 0.26%)</title><rect x="831" y="228" width="4" height="15" fill="rgb(205,129,10)"/><text x="834.00" y="238.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.26%)</title><rect x="835" y="228" width="3" height="15" fill="rgb(243,61,37)"/><text x="838.00" y="238.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.26%)</title><rect x="835" y="244" width="3" height="15" fill="rgb(250,129,9)"/><text x="838.00" y="254.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.26%)</title><rect x="835" y="260" width="3" height="15" fill="rgb(254,215,10)"/><text x="838.00" y="270.50"></text></g><g><title>0x7f46b49a412f (libc-2.29.so) (1 samples, 0.26%)</title><rect x="850" y="260" width="3" height="15" fill="rgb(215,104,52)"/><text x="853.00" y="270.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src) (1 samples, 0.26%)</title><rect x="853" y="260" width="3" height="15" fill="rgb(229,181,36)"/><text x="856.00" y="270.50"></text></g><g><title>DOUBLE_gemv (matmul.c.src) (1 samples, 0.26%)</title><rect x="853" y="276" width="3" height="15" fill="rgb(254,202,6)"/><text x="856.00" y="286.50"></text></g><g><title>cblas_dgemv (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.26%)</title><rect x="853" y="292" width="3" height="15" fill="rgb(213,154,51)"/><text x="856.00" y="302.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.26%)</title><rect x="859" y="292" width="4" height="15" fill="rgb(226,168,11)"/><text x="862.00" y="302.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.26%)</title><rect x="859" y="308" width="4" height="15" fill="rgb(238,211,5)"/><text x="862.00" y="318.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (1 samples, 0.26%)</title><rect x="859" y="324" width="4" height="15" fill="rgb(238,180,3)"/><text x="862.00" y="334.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (4 samples, 1.06%)</title><rect x="859" y="276" width="13" height="15" fill="rgb(232,13,45)"/><text x="862.00" y="286.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (3 samples, 0.79%)</title><rect x="863" y="292" width="9" height="15" fill="rgb(248,47,24)"/><text x="866.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.53%)</title><rect x="866" y="308" width="6" height="15" fill="rgb(231,163,2)"/><text x="869.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.26%)</title><rect x="869" y="324" width="3" height="15" fill="rgb(209,131,36)"/><text x="872.00" y="334.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.26%)</title><rect x="869" y="340" width="3" height="15" fill="rgb(206,178,40)"/><text x="872.00" y="350.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.26%)</title><rect x="869" y="356" width="3" height="15" fill="rgb(247,212,30)"/><text x="872.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (6 samples, 1.58%)</title><rect x="856" y="260" width="19" height="15" fill="rgb(210,72,30)"/><text x="859.00" y="270.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.26%)</title><rect x="872" y="276" width="3" height="15" fill="rgb(254,141,18)"/><text x="875.00" y="286.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.26%)</title><rect x="875" y="260" width="3" height="15" fill="rgb(248,196,29)"/><text x="878.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.26%)</title><rect x="875" y="276" width="3" height="15" fill="rgb(248,75,44)"/><text x="878.00" y="286.50"></text></g><g><title>NpyIter_RemoveAxis (nditer_api.c) (1 samples, 0.26%)</title><rect x="878" y="260" width="3" height="15" fill="rgb(217,220,49)"/><text x="881.00" y="270.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (1 samples, 0.26%)</title><rect x="881" y="260" width="3" height="15" fill="rgb(248,26,27)"/><text x="884.00" y="270.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (1 samples, 0.26%)</title><rect x="884" y="260" width="3" height="15" fill="rgb(241,192,39)"/><text x="887.00" y="270.50"></text></g><g><title>_get_coredim_sizes (ufunc_object.c) (2 samples, 0.53%)</title><rect x="887" y="260" width="7" height="15" fill="rgb(207,178,51)"/><text x="890.00" y="270.50"></text></g><g><title>PyArray_DIM (ndarraytypes.h) (2 samples, 0.53%)</title><rect x="887" y="276" width="7" height="15" fill="rgb(228,27,54)"/><text x="890.00" y="286.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (25 samples, 6.60%)</title><rect x="819" y="196" width="78" height="15" fill="rgb(217,67,38)"/><text x="822.00" y="206.50">safe_spar..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (21 samples, 5.54%)</title><rect x="831" y="212" width="66" height="15" fill="rgb(227,217,21)"/><text x="834.00" y="222.50">ufunc_g..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (19 samples, 5.01%)</title><rect x="838" y="228" width="59" height="15" fill="rgb(250,134,2)"/><text x="841.00" y="238.50">PyUFun..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (18 samples, 4.75%)</title><rect x="841" y="244" width="56" height="15" fill="rgb(232,67,48)"/><text x="844.00" y="254.50">PyUFu..</text></g><g><title>_initialize_variable_parts (ufunc_object.c) (1 samples, 0.26%)</title><rect x="894" y="260" width="3" height="15" fill="rgb(226,73,54)"/><text x="897.00" y="270.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.26%)</title><rect x="897" y="212" width="3" height="15" fill="rgb(215,219,13)"/><text x="900.00" y="222.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.26%)</title><rect x="897" y="228" width="3" height="15" fill="rgb(209,3,49)"/><text x="900.00" y="238.50"></text></g><g><title>PyUFunc_AdditionTypeResolver (ufunc_type_resolution.c) (1 samples, 0.26%)</title><rect x="903" y="228" width="3" height="15" fill="rgb(254,88,46)"/><text x="906.00" y="238.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.26%)</title><rect x="906" y="228" width="3" height="15" fill="rgb(243,194,42)"/><text x="909.00" y="238.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.26%)</title><rect x="906" y="244" width="3" height="15" fill="rgb(212,177,7)"/><text x="909.00" y="254.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (1 samples, 0.26%)</title><rect x="909" y="228" width="3" height="15" fill="rgb(231,123,43)"/><text x="912.00" y="238.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.53%)</title><rect x="916" y="260" width="6" height="15" fill="rgb(215,147,33)"/><text x="919.00" y="270.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.26%)</title><rect x="919" y="276" width="3" height="15" fill="rgb(246,2,9)"/><text x="922.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (9 samples, 2.37%)</title><rect x="897" y="196" width="28" height="15" fill="rgb(244,157,51)"/><text x="900.00" y="206.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (8 samples, 2.11%)</title><rect x="900" y="212" width="25" height="15" fill="rgb(231,17,38)"/><text x="903.00" y="222.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 1.06%)</title><rect x="912" y="228" width="13" height="15" fill="rgb(211,85,14)"/><text x="915.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (4 samples, 1.06%)</title><rect x="912" y="244" width="13" height="15" fill="rgb(207,206,25)"/><text x="915.00" y="254.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (1 samples, 0.26%)</title><rect x="922" y="260" width="3" height="15" fill="rgb(234,54,0)"/><text x="925.00" y="270.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (1 samples, 0.26%)</title><rect x="922" y="276" width="3" height="15" fill="rgb(247,43,28)"/><text x="925.00" y="286.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py) (116 samples, 30.61%)</title><rect x="567" y="180" width="361" height="15" fill="rgb(241,35,10)"/><text x="570.00" y="190.50">_forward_pass (sklearn/neural_network/_multilaye..</text></g><g><title>unicode_eq (python3.7) (1 samples, 0.26%)</title><rect x="925" y="196" width="3" height="15" fill="rgb(221,211,35)"/><text x="928.00" y="206.50"></text></g><g><title>0x7f46b4a6114d (libc-2.29.so) (1 samples, 0.26%)</title><rect x="925" y="212" width="3" height="15" fill="rgb(243,191,40)"/><text x="928.00" y="222.50"></text></g><g><title>array_empty (multiarraymodule.c) (1 samples, 0.26%)</title><rect x="928" y="180" width="3" height="15" fill="rgb(226,193,48)"/><text x="931.00" y="190.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.26%)</title><rect x="928" y="196" width="3" height="15" fill="rgb(249,200,17)"/><text x="931.00" y="206.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.26%)</title><rect x="928" y="212" width="3" height="15" fill="rgb(221,145,54)"/><text x="931.00" y="222.50"></text></g><g><title>__enter__ (warnings.py) (6 samples, 1.58%)</title><rect x="962" y="196" width="19" height="15" fill="rgb(251,96,26)"/><text x="965.00" y="206.50"></text></g><g><title>__exit__ (warnings.py) (1 samples, 0.26%)</title><rect x="981" y="196" width="3" height="15" fill="rgb(228,73,38)"/><text x="984.00" y="206.50"></text></g><g><title>__init__ (warnings.py) (2 samples, 0.53%)</title><rect x="984" y="196" width="6" height="15" fill="rgb(209,186,36)"/><text x="987.00" y="206.50"></text></g><g><title>0x7f46b4a61dc0 (libc-2.29.so) (1 samples, 0.26%)</title><rect x="1003" y="212" width="3" height="15" fill="rgb(246,169,48)"/><text x="1006.00" y="222.50"></text></g><g><title>0x7f46b4999e50 (libc-2.29.so) (1 samples, 0.26%)</title><rect x="1009" y="228" width="3" height="15" fill="rgb(207,145,23)"/><text x="1012.00" y="238.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="1006" y="212" width="9" height="15" fill="rgb(247,3,49)"/><text x="1009.00" y="222.50"></text></g><g><title>0x7f46b4999e7a (libc-2.29.so) (1 samples, 0.26%)</title><rect x="1012" y="228" width="3" height="15" fill="rgb(249,166,49)"/><text x="1015.00" y="238.50"></text></g><g><title>get_config (sklearn/_config.py) (1 samples, 0.26%)</title><rect x="1015" y="212" width="3" height="15" fill="rgb(212,149,25)"/><text x="1018.00" y="222.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (12 samples, 3.17%)</title><rect x="990" y="196" width="38" height="15" fill="rgb(245,73,53)"/><text x="993.00" y="206.50">_as..</text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.79%)</title><rect x="1018" y="212" width="10" height="15" fill="rgb(225,95,45)"/><text x="1021.00" y="222.50"></text></g><g><title>_ensure_no_complex_data (sklearn/utils/validation.py) (2 samples, 0.53%)</title><rect x="1028" y="196" width="6" height="15" fill="rgb(246,100,24)"/><text x="1031.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (10 samples, 2.64%)</title><rect x="1034" y="196" width="31" height="15" fill="rgb(211,108,2)"/><text x="1037.00" y="206.50">_n..</text></g><g><title>__instancecheck__ (abc.py) (1 samples, 0.26%)</title><rect x="1062" y="212" width="3" height="15" fill="rgb(250,77,2)"/><text x="1065.00" y="222.50"></text></g><g><title>__subclasscheck__ (abc.py) (1 samples, 0.26%)</title><rect x="1062" y="228" width="3" height="15" fill="rgb(241,118,17)"/><text x="1065.00" y="238.50"></text></g><g><title>array_descr_get (getset.c) (1 samples, 0.26%)</title><rect x="1065" y="196" width="3" height="15" fill="rgb(228,149,8)"/><text x="1068.00" y="206.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (2 samples, 0.53%)</title><rect x="1068" y="196" width="6" height="15" fill="rgb(225,69,36)"/><text x="1071.00" y="206.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (1 samples, 0.26%)</title><rect x="1071" y="212" width="3" height="15" fill="rgb(214,81,19)"/><text x="1074.00" y="222.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py) (4 samples, 1.06%)</title><rect x="1074" y="196" width="13" height="15" fill="rgb(252,170,11)"/><text x="1077.00" y="206.50"></text></g><g><title>issubclass_ (numpy/core/numerictypes.py) (1 samples, 0.26%)</title><rect x="1084" y="212" width="3" height="15" fill="rgb(214,200,36)"/><text x="1087.00" y="222.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py) (184 samples, 48.55%)</title><rect x="542" y="164" width="573" height="15" fill="rgb(236,64,9)"/><text x="545.00" y="174.50">_predict (sklearn/neural_network/_multilayer_perceptron.py)</text></g><g><title>check_array (sklearn/utils/validation.py) (59 samples, 15.57%)</title><rect x="931" y="180" width="184" height="15" fill="rgb(246,107,26)"/><text x="934.00" y="190.50">check_array (sklearn/ut..</text></g><g><title>simplefilter (warnings.py) (9 samples, 2.37%)</title><rect x="1087" y="196" width="28" height="15" fill="rgb(236,22,30)"/><text x="1090.00" y="206.50">s..</text></g><g><title>_add_filter (warnings.py) (9 samples, 2.37%)</title><rect x="1087" y="212" width="28" height="15" fill="rgb(232,55,10)"/><text x="1090.00" y="222.50">_..</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.26%)</title><rect x="1115" y="164" width="3" height="15" fill="rgb(220,186,7)"/><text x="1118.00" y="174.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.26%)</title><rect x="1115" y="180" width="3" height="15" fill="rgb(230,154,8)"/><text x="1118.00" y="190.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.26%)</title><rect x="1115" y="196" width="3" height="15" fill="rgb(237,154,47)"/><text x="1118.00" y="206.50"></text></g><g><title>array_ravel (methods.c) (1 samples, 0.26%)</title><rect x="1118" y="164" width="3" height="15" fill="rgb(229,62,21)"/><text x="1121.00" y="174.50"></text></g><g><title>PyArray_Ravel (shape.c) (1 samples, 0.26%)</title><rect x="1118" y="180" width="3" height="15" fill="rgb(237,60,24)"/><text x="1121.00" y="190.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.26%)</title><rect x="1118" y="196" width="3" height="15" fill="rgb(211,90,19)"/><text x="1121.00" y="206.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.26%)</title><rect x="1118" y="212" width="3" height="15" fill="rgb(213,108,13)"/><text x="1121.00" y="222.50"></text></g><g><title>unicode_endswith (python3.7) (3 samples, 0.79%)</title><rect x="1161" y="196" width="10" height="15" fill="rgb(208,95,17)"/><text x="1164.00" y="206.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (18 samples, 4.75%)</title><rect x="1130" y="180" width="56" height="15" fill="rgb(242,222,6)"/><text x="1133.00" y="190.50">&lt;list..</text></g><g><title>unicode_startswith (python3.7) (5 samples, 1.32%)</title><rect x="1171" y="196" width="15" height="15" fill="rgb(238,107,11)"/><text x="1174.00" y="206.50"></text></g><g><title>all (379 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(236,127,31)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPRegressor_default_b_reg_1_4_12_float_.py) (379 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(249,37,47)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_MLPRegressor_default_b_reg_1_4_12_float_.py)</text></g><g><title>profile_skl (bench_MLPRegressor_default_b_reg_1_4_12_float_.py) (216 samples, 56.99%)</title><rect x="517" y="68" width="673" height="15" fill="rgb(206,14,16)"/><text x="520.00" y="78.50">profile_skl (bench_MLPRegressor_default_b_reg_1_4_12_float_.py)</text></g><g><title>setup_profile (bench_MLPRegressor_default_b_reg_1_4_12_float_.py) (216 samples, 56.99%)</title><rect x="517" y="84" width="673" height="15" fill="rgb(216,49,1)"/><text x="520.00" y="94.50">setup_profile (bench_MLPRegressor_default_b_reg_1_4_12_float_.py)</text></g><g><title>profile (bench_MLPRegressor_default_b_reg_1_4_12_float_.py) (216 samples, 56.99%)</title><rect x="517" y="100" width="673" height="15" fill="rgb(206,167,37)"/><text x="520.00" y="110.50">profile (bench_MLPRegressor_default_b_reg_1_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (214 samples, 56.46%)</title><rect x="523" y="116" width="667" height="15" fill="rgb(233,42,8)"/><text x="526.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (210 samples, 55.41%)</title><rect x="536" y="132" width="654" height="15" fill="rgb(245,219,19)"/><text x="539.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict (sklearn/neural_network/_multilayer_perceptron.py) (210 samples, 55.41%)</title><rect x="536" y="148" width="654" height="15" fill="rgb(237,56,41)"/><text x="539.00" y="158.50">predict (sklearn/neural_network/_multilayer_perceptron.py)</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (22 samples, 5.80%)</title><rect x="1121" y="164" width="69" height="15" fill="rgb(207,26,9)"/><text x="1124.00" y="174.50">check_i..</text></g><g><title>isclass (inspect.py) (1 samples, 0.26%)</title><rect x="1186" y="180" width="4" height="15" fill="rgb(251,101,47)"/><text x="1189.00" y="190.50"></text></g></g></svg>