<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1174" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1157.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1157.00"> </text><g id="frames"><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (5 samples, 0.20%)</title><rect x="10" y="852" width="2" height="15" fill="rgb(216,106,8)"/><text x="13.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (5 samples, 0.20%)</title><rect x="10" y="868" width="2" height="15" fill="rgb(238,135,9)"/><text x="13.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (5 samples, 0.20%)</title><rect x="10" y="884" width="2" height="15" fill="rgb(254,9,12)"/><text x="13.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (5 samples, 0.20%)</title><rect x="10" y="900" width="2" height="15" fill="rgb(218,150,30)"/><text x="13.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (4 samples, 0.16%)</title><rect x="10" y="916" width="2" height="15" fill="rgb(216,147,25)"/><text x="13.00" y="926.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py:2135) (3 samples, 0.12%)</title><rect x="10" y="932" width="2" height="15" fill="rgb(214,220,50)"/><text x="13.00" y="942.50"></text></g><g><title>from_location (pkg_resources/__init__.py:2592) (3 samples, 0.12%)</title><rect x="10" y="948" width="2" height="15" fill="rgb(210,47,31)"/><text x="13.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:2571) (3 samples, 0.12%)</title><rect x="10" y="964" width="2" height="15" fill="rgb(251,197,17)"/><text x="13.00" y="974.50"></text></g><g><title>safe_version (pkg_resources/__init__.py:1331) (3 samples, 0.12%)</title><rect x="10" y="980" width="2" height="15" fill="rgb(219,60,14)"/><text x="13.00" y="990.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:2) (8 samples, 0.31%)</title><rect x="10" y="148" width="3" height="15" fill="rgb(222,191,53)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.31%)</title><rect x="10" y="164" width="3" height="15" fill="rgb(251,194,0)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (8 samples, 0.31%)</title><rect x="10" y="180" width="3" height="15" fill="rgb(245,112,35)"/><text x="13.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.31%)</title><rect x="10" y="196" width="3" height="15" fill="rgb(253,97,33)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.31%)</title><rect x="10" y="212" width="3" height="15" fill="rgb(206,45,29)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.31%)</title><rect x="10" y="228" width="3" height="15" fill="rgb(217,180,52)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.31%)</title><rect x="10" y="244" width="3" height="15" fill="rgb(233,9,31)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.31%)</title><rect x="10" y="260" width="3" height="15" fill="rgb(246,60,18)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.31%)</title><rect x="10" y="276" width="3" height="15" fill="rgb(207,8,4)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (8 samples, 0.31%)</title><rect x="10" y="292" width="3" height="15" fill="rgb(251,182,6)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.31%)</title><rect x="10" y="308" width="3" height="15" fill="rgb(222,199,2)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.31%)</title><rect x="10" y="324" width="3" height="15" fill="rgb(252,43,29)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.31%)</title><rect x="10" y="340" width="3" height="15" fill="rgb(205,193,0)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.31%)</title><rect x="10" y="356" width="3" height="15" fill="rgb(227,143,6)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.31%)</title><rect x="10" y="372" width="3" height="15" fill="rgb(209,114,51)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (8 samples, 0.31%)</title><rect x="10" y="388" width="3" height="15" fill="rgb(243,196,28)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.31%)</title><rect x="10" y="404" width="3" height="15" fill="rgb(238,187,12)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.31%)</title><rect x="10" y="420" width="3" height="15" fill="rgb(218,148,50)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.31%)</title><rect x="10" y="436" width="3" height="15" fill="rgb(216,141,26)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.31%)</title><rect x="10" y="452" width="3" height="15" fill="rgb(222,173,4)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.31%)</title><rect x="10" y="468" width="3" height="15" fill="rgb(217,108,8)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (8 samples, 0.31%)</title><rect x="10" y="484" width="3" height="15" fill="rgb(246,202,47)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.31%)</title><rect x="10" y="500" width="3" height="15" fill="rgb(209,209,22)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.31%)</title><rect x="10" y="516" width="3" height="15" fill="rgb(252,204,53)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.31%)</title><rect x="10" y="532" width="3" height="15" fill="rgb(248,28,43)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.31%)</title><rect x="10" y="548" width="3" height="15" fill="rgb(213,152,18)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.31%)</title><rect x="10" y="564" width="3" height="15" fill="rgb(244,52,23)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (8 samples, 0.31%)</title><rect x="10" y="580" width="3" height="15" fill="rgb(224,65,48)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.31%)</title><rect x="10" y="596" width="3" height="15" fill="rgb(221,44,16)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (8 samples, 0.31%)</title><rect x="10" y="612" width="3" height="15" fill="rgb(232,95,15)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.31%)</title><rect x="10" y="628" width="3" height="15" fill="rgb(214,213,37)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.31%)</title><rect x="10" y="644" width="3" height="15" fill="rgb(248,140,16)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.31%)</title><rect x="10" y="660" width="3" height="15" fill="rgb(250,10,22)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.31%)</title><rect x="10" y="676" width="3" height="15" fill="rgb(253,117,3)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.31%)</title><rect x="10" y="692" width="3" height="15" fill="rgb(253,180,27)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.31%)</title><rect x="10" y="708" width="3" height="15" fill="rgb(250,110,47)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (8 samples, 0.31%)</title><rect x="10" y="724" width="3" height="15" fill="rgb(244,135,3)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.31%)</title><rect x="10" y="740" width="3" height="15" fill="rgb(242,210,18)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.31%)</title><rect x="10" y="756" width="3" height="15" fill="rgb(245,221,40)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.31%)</title><rect x="10" y="772" width="3" height="15" fill="rgb(245,109,37)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.31%)</title><rect x="10" y="788" width="3" height="15" fill="rgb(227,181,47)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.31%)</title><rect x="10" y="804" width="3" height="15" fill="rgb(212,98,45)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (8 samples, 0.31%)</title><rect x="10" y="820" width="3" height="15" fill="rgb(226,158,53)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (8 samples, 0.31%)</title><rect x="10" y="836" width="3" height="15" fill="rgb(240,84,24)"/><text x="13.00" y="846.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:4) (3 samples, 0.12%)</title><rect x="13" y="148" width="2" height="15" fill="rgb(205,117,33)"/><text x="16.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.12%)</title><rect x="13" y="164" width="2" height="15" fill="rgb(227,15,19)"/><text x="16.00" y="174.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:10) (3 samples, 0.12%)</title><rect x="15" y="1108" width="1" height="15" fill="rgb(233,59,21)"/><text x="18.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.12%)</title><rect x="15" y="1124" width="1" height="15" fill="rgb(250,225,8)"/><text x="18.00" y="1134.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:4) (16 samples, 0.63%)</title><rect x="10" y="52" width="7" height="15" fill="rgb(210,65,23)"/><text x="13.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (16 samples, 0.63%)</title><rect x="10" y="68" width="7" height="15" fill="rgb(211,113,22)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (16 samples, 0.63%)</title><rect x="10" y="84" width="7" height="15" fill="rgb(206,8,8)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (16 samples, 0.63%)</title><rect x="10" y="100" width="7" height="15" fill="rgb(211,226,50)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (16 samples, 0.63%)</title><rect x="10" y="116" width="7" height="15" fill="rgb(234,98,41)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (16 samples, 0.63%)</title><rect x="10" y="132" width="7" height="15" fill="rgb(253,206,47)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:7) (5 samples, 0.20%)</title><rect x="15" y="148" width="2" height="15" fill="rgb(244,98,28)"/><text x="18.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.20%)</title><rect x="15" y="164" width="2" height="15" fill="rgb(240,26,0)"/><text x="18.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.20%)</title><rect x="15" y="180" width="2" height="15" fill="rgb(216,148,7)"/><text x="18.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.20%)</title><rect x="15" y="196" width="2" height="15" fill="rgb(211,42,15)"/><text x="18.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.20%)</title><rect x="15" y="212" width="2" height="15" fill="rgb(239,63,40)"/><text x="18.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.20%)</title><rect x="15" y="228" width="2" height="15" fill="rgb(234,39,16)"/><text x="18.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (5 samples, 0.20%)</title><rect x="15" y="244" width="2" height="15" fill="rgb(232,172,2)"/><text x="18.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.20%)</title><rect x="15" y="260" width="2" height="15" fill="rgb(226,86,15)"/><text x="18.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.20%)</title><rect x="15" y="276" width="2" height="15" fill="rgb(251,215,20)"/><text x="18.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.20%)</title><rect x="15" y="292" width="2" height="15" fill="rgb(208,214,29)"/><text x="18.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.20%)</title><rect x="15" y="308" width="2" height="15" fill="rgb(230,183,29)"/><text x="18.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.20%)</title><rect x="15" y="324" width="2" height="15" fill="rgb(246,74,34)"/><text x="18.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (5 samples, 0.20%)</title><rect x="15" y="340" width="2" height="15" fill="rgb(227,31,46)"/><text x="18.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.20%)</title><rect x="15" y="356" width="2" height="15" fill="rgb(247,184,27)"/><text x="18.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.20%)</title><rect x="15" y="372" width="2" height="15" fill="rgb(244,132,49)"/><text x="18.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.20%)</title><rect x="15" y="388" width="2" height="15" fill="rgb(246,102,18)"/><text x="18.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.20%)</title><rect x="15" y="404" width="2" height="15" fill="rgb(242,118,41)"/><text x="18.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.20%)</title><rect x="15" y="420" width="2" height="15" fill="rgb(226,84,8)"/><text x="18.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (4 samples, 0.16%)</title><rect x="15" y="436" width="2" height="15" fill="rgb(228,210,36)"/><text x="18.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.16%)</title><rect x="15" y="452" width="2" height="15" fill="rgb(253,141,0)"/><text x="18.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.16%)</title><rect x="15" y="468" width="2" height="15" fill="rgb(236,29,52)"/><text x="18.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.16%)</title><rect x="15" y="484" width="2" height="15" fill="rgb(205,87,18)"/><text x="18.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.16%)</title><rect x="15" y="500" width="2" height="15" fill="rgb(220,10,26)"/><text x="18.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.16%)</title><rect x="15" y="516" width="2" height="15" fill="rgb(219,17,30)"/><text x="18.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.16%)</title><rect x="15" y="532" width="2" height="15" fill="rgb(250,223,44)"/><text x="18.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.16%)</title><rect x="15" y="548" width="2" height="15" fill="rgb(222,67,43)"/><text x="18.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.16%)</title><rect x="15" y="564" width="2" height="15" fill="rgb(222,219,54)"/><text x="18.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (4 samples, 0.16%)</title><rect x="15" y="580" width="2" height="15" fill="rgb(242,35,13)"/><text x="18.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.16%)</title><rect x="15" y="596" width="2" height="15" fill="rgb(220,78,16)"/><text x="18.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.16%)</title><rect x="15" y="612" width="2" height="15" fill="rgb(249,70,53)"/><text x="18.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.16%)</title><rect x="15" y="628" width="2" height="15" fill="rgb(229,114,19)"/><text x="18.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.16%)</title><rect x="15" y="644" width="2" height="15" fill="rgb(228,224,48)"/><text x="18.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.16%)</title><rect x="15" y="660" width="2" height="15" fill="rgb(254,213,16)"/><text x="18.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (4 samples, 0.16%)</title><rect x="15" y="676" width="2" height="15" fill="rgb(208,48,53)"/><text x="18.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.16%)</title><rect x="15" y="692" width="2" height="15" fill="rgb(205,187,25)"/><text x="18.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.16%)</title><rect x="15" y="708" width="2" height="15" fill="rgb(249,225,36)"/><text x="18.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.16%)</title><rect x="15" y="724" width="2" height="15" fill="rgb(251,70,36)"/><text x="18.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.16%)</title><rect x="15" y="740" width="2" height="15" fill="rgb(220,105,21)"/><text x="18.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.16%)</title><rect x="15" y="756" width="2" height="15" fill="rgb(205,118,19)"/><text x="18.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (4 samples, 0.16%)</title><rect x="15" y="772" width="2" height="15" fill="rgb(250,93,45)"/><text x="18.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.16%)</title><rect x="15" y="788" width="2" height="15" fill="rgb(233,183,34)"/><text x="18.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.16%)</title><rect x="15" y="804" width="2" height="15" fill="rgb(246,80,47)"/><text x="18.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.16%)</title><rect x="15" y="820" width="2" height="15" fill="rgb(218,145,26)"/><text x="18.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.16%)</title><rect x="15" y="836" width="2" height="15" fill="rgb(211,174,2)"/><text x="18.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.16%)</title><rect x="15" y="852" width="2" height="15" fill="rgb(248,88,1)"/><text x="18.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (4 samples, 0.16%)</title><rect x="15" y="868" width="2" height="15" fill="rgb(250,174,53)"/><text x="18.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.16%)</title><rect x="15" y="884" width="2" height="15" fill="rgb(245,39,16)"/><text x="18.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.16%)</title><rect x="15" y="900" width="2" height="15" fill="rgb(244,201,37)"/><text x="18.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.16%)</title><rect x="15" y="916" width="2" height="15" fill="rgb(213,135,34)"/><text x="18.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.16%)</title><rect x="15" y="932" width="2" height="15" fill="rgb(228,214,31)"/><text x="18.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.16%)</title><rect x="15" y="948" width="2" height="15" fill="rgb(228,126,29)"/><text x="18.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.16%)</title><rect x="15" y="964" width="2" height="15" fill="rgb(206,180,16)"/><text x="18.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.16%)</title><rect x="15" y="980" width="2" height="15" fill="rgb(213,193,27)"/><text x="18.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.16%)</title><rect x="15" y="996" width="2" height="15" fill="rgb(240,86,31)"/><text x="18.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (4 samples, 0.16%)</title><rect x="15" y="1012" width="2" height="15" fill="rgb(207,144,8)"/><text x="18.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.16%)</title><rect x="15" y="1028" width="2" height="15" fill="rgb(211,208,42)"/><text x="18.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.16%)</title><rect x="15" y="1044" width="2" height="15" fill="rgb(243,206,22)"/><text x="18.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.16%)</title><rect x="15" y="1060" width="2" height="15" fill="rgb(218,105,27)"/><text x="18.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.16%)</title><rect x="15" y="1076" width="2" height="15" fill="rgb(216,98,54)"/><text x="18.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.16%)</title><rect x="15" y="1092" width="2" height="15" fill="rgb(231,128,8)"/><text x="18.00" y="1102.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (3 samples, 0.12%)</title><rect x="20" y="164" width="2" height="15" fill="rgb(230,91,35)"/><text x="23.00" y="174.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:172) (10 samples, 0.39%)</title><rect x="18" y="148" width="4" height="15" fill="rgb(224,117,44)"/><text x="21.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:583) (3 samples, 0.12%)</title><rect x="23" y="164" width="1" height="15" fill="rgb(209,97,9)"/><text x="26.00" y="174.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (3 samples, 0.12%)</title><rect x="23" y="180" width="1" height="15" fill="rgb(252,48,14)"/><text x="26.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (10 samples, 0.39%)</title><rect x="24" y="164" width="5" height="15" fill="rgb(233,135,44)"/><text x="27.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (3 samples, 0.12%)</title><rect x="28" y="180" width="1" height="15" fill="rgb(212,99,54)"/><text x="31.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:620) (5 samples, 0.20%)</title><rect x="29" y="164" width="2" height="15" fill="rgb(229,145,19)"/><text x="32.00" y="174.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py:388) (3 samples, 0.12%)</title><rect x="30" y="180" width="1" height="15" fill="rgb(213,143,53)"/><text x="33.00" y="190.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py:388) (3 samples, 0.12%)</title><rect x="37" y="228" width="2" height="15" fill="rgb(216,4,1)"/><text x="40.00" y="238.50"></text></g><g><title>get_active_backend (joblib/parallel.py:116) (3 samples, 0.12%)</title><rect x="37" y="244" width="2" height="15" fill="rgb(212,14,31)"/><text x="40.00" y="254.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1347) (4 samples, 0.16%)</title><rect x="37" y="212" width="2" height="15" fill="rgb(233,205,16)"/><text x="40.00" y="222.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:141) (8 samples, 0.31%)</title><rect x="40" y="244" width="3" height="15" fill="rgb(215,212,37)"/><text x="43.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:504) (3 samples, 0.12%)</title><rect x="43" y="260" width="2" height="15" fill="rgb(208,20,17)"/><text x="46.00" y="270.50"></text></g><g><title>simplefilter (warnings.py:179) (3 samples, 0.12%)</title><rect x="43" y="276" width="2" height="15" fill="rgb(230,0,8)"/><text x="46.00" y="286.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:262) (16 samples, 0.63%)</title><rect x="39" y="228" width="7" height="15" fill="rgb(254,54,48)"/><text x="42.00" y="238.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:144) (7 samples, 0.27%)</title><rect x="43" y="244" width="3" height="15" fill="rgb(231,181,50)"/><text x="46.00" y="254.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:279) (5 samples, 0.20%)</title><rect x="47" y="228" width="2" height="15" fill="rgb(229,56,2)"/><text x="50.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (4 samples, 0.16%)</title><rect x="47" y="244" width="2" height="15" fill="rgb(234,193,26)"/><text x="50.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;:6) (4 samples, 0.16%)</title><rect x="47" y="260" width="2" height="15" fill="rgb(225,217,5)"/><text x="50.00" y="270.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:295) (9 samples, 0.35%)</title><rect x="49" y="228" width="4" height="15" fill="rgb(247,8,12)"/><text x="52.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (6 samples, 0.24%)</title><rect x="51" y="244" width="2" height="15" fill="rgb(221,214,9)"/><text x="54.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;:6) (6 samples, 0.24%)</title><rect x="51" y="260" width="2" height="15" fill="rgb(235,171,26)"/><text x="54.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.16%)</title><rect x="52" y="276" width="1" height="15" fill="rgb(217,64,42)"/><text x="55.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py:1356) (4 samples, 0.16%)</title><rect x="52" y="292" width="1" height="15" fill="rgb(234,19,53)"/><text x="55.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c:2693) (3 samples, 0.12%)</title><rect x="52" y="308" width="1" height="15" fill="rgb(248,159,36)"/><text x="55.00" y="318.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1592) (47 samples, 1.84%)</title><rect x="35" y="180" width="22" height="15" fill="rgb(228,168,38)"/><text x="38.00" y="190.50">p..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py:1749) (46 samples, 1.80%)</title><rect x="35" y="196" width="22" height="15" fill="rgb(221,134,24)"/><text x="38.00" y="206.50">p..</text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1348) (38 samples, 1.49%)</title><rect x="39" y="212" width="18" height="15" fill="rgb(228,225,48)"/><text x="42.00" y="222.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:306) (4 samples, 0.16%)</title><rect x="55" y="228" width="2" height="15" fill="rgb(205,66,15)"/><text x="58.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 0.16%)</title><rect x="55" y="244" width="2" height="15" fill="rgb(238,48,33)"/><text x="58.00" y="254.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:517) (4 samples, 0.16%)</title><rect x="58" y="196" width="1" height="15" fill="rgb(221,225,47)"/><text x="61.00" y="206.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (4 samples, 0.16%)</title><rect x="58" y="212" width="1" height="15" fill="rgb(239,114,36)"/><text x="61.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.16%)</title><rect x="58" y="228" width="1" height="15" fill="rgb(213,68,15)"/><text x="61.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (4 samples, 0.16%)</title><rect x="58" y="244" width="1" height="15" fill="rgb(227,67,23)"/><text x="61.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (4 samples, 0.16%)</title><rect x="58" y="260" width="1" height="15" fill="rgb(239,26,32)"/><text x="61.00" y="270.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:521) (4 samples, 0.16%)</title><rect x="59" y="196" width="2" height="15" fill="rgb(246,2,8)"/><text x="62.00" y="206.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1601) (11 samples, 0.43%)</title><rect x="57" y="180" width="5" height="15" fill="rgb(248,181,8)"/><text x="60.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:642) (69 samples, 2.70%)</title><rect x="31" y="164" width="32" height="15" fill="rgb(223,125,13)"/><text x="34.00" y="174.50">kn..</text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1602) (3 samples, 0.12%)</title><rect x="62" y="180" width="1" height="15" fill="rgb(229,2,17)"/><text x="65.00" y="190.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:174) (95 samples, 3.72%)</title><rect x="22" y="148" width="44" height="15" fill="rgb(232,190,23)"/><text x="25.00" y="158.50">pred..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:671) (5 samples, 0.20%)</title><rect x="64" y="164" width="2" height="15" fill="rgb(229,166,15)"/><text x="67.00" y="174.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (4 samples, 0.16%)</title><rect x="65" y="180" width="1" height="15" fill="rgb(234,226,43)"/><text x="68.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.16%)</title><rect x="65" y="196" width="1" height="15" fill="rgb(226,55,19)"/><text x="68.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (3 samples, 0.12%)</title><rect x="65" y="212" width="1" height="15" fill="rgb(240,93,6)"/><text x="68.00" y="222.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (3 samples, 0.12%)</title><rect x="65" y="228" width="1" height="15" fill="rgb(248,72,36)"/><text x="68.00" y="238.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (3 samples, 0.12%)</title><rect x="70" y="228" width="1" height="15" fill="rgb(205,179,15)"/><text x="73.00" y="238.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (3 samples, 0.12%)</title><rect x="70" y="244" width="1" height="15" fill="rgb(211,223,54)"/><text x="73.00" y="254.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (3 samples, 0.12%)</title><rect x="70" y="260" width="1" height="15" fill="rgb(227,150,45)"/><text x="73.00" y="270.50"></text></g><g><title>_mean (numpy/core/_methods.py:151) (5 samples, 0.20%)</title><rect x="70" y="212" width="2" height="15" fill="rgb(239,149,35)"/><text x="73.00" y="222.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:54) (120 samples, 4.70%)</title><rect x="17" y="52" width="56" height="15" fill="rgb(245,134,9)"/><text x="20.00" y="62.50">&lt;modu..</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:53) (120 samples, 4.70%)</title><rect x="17" y="68" width="56" height="15" fill="rgb(223,17,20)"/><text x="20.00" y="78.50">profi..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:37) (120 samples, 4.70%)</title><rect x="17" y="84" width="56" height="15" fill="rgb(218,18,50)"/><text x="20.00" y="94.50">setup..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:31) (120 samples, 4.70%)</title><rect x="17" y="100" width="56" height="15" fill="rgb(254,63,11)"/><text x="20.00" y="110.50">profi..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (120 samples, 4.70%)</title><rect x="17" y="116" width="56" height="15" fill="rgb(207,186,2)"/><text x="20.00" y="126.50">time_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (119 samples, 4.66%)</title><rect x="18" y="132" width="55" height="15" fill="rgb(238,41,12)"/><text x="21.00" y="142.50">&lt;lamb..</text></g><g><title>predict (sklearn/neighbors/_regression.py:183) (12 samples, 0.47%)</title><rect x="67" y="148" width="6" height="15" fill="rgb(241,168,36)"/><text x="70.00" y="158.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (10 samples, 0.39%)</title><rect x="68" y="164" width="5" height="15" fill="rgb(220,98,23)"/><text x="71.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (10 samples, 0.39%)</title><rect x="68" y="180" width="5" height="15" fill="rgb(228,143,51)"/><text x="71.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (9 samples, 0.35%)</title><rect x="69" y="196" width="4" height="15" fill="rgb(223,127,15)"/><text x="72.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (6 samples, 0.24%)</title><rect x="75" y="180" width="3" height="15" fill="rgb(234,206,5)"/><text x="78.00" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:84) (3 samples, 0.12%)</title><rect x="81" y="212" width="2" height="15" fill="rgb(242,170,4)"/><text x="84.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (5 samples, 0.20%)</title><rect x="84" y="228" width="3" height="15" fill="rgb(220,107,4)"/><text x="87.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (5 samples, 0.20%)</title><rect x="84" y="244" width="3" height="15" fill="rgb(243,177,9)"/><text x="87.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (11 samples, 0.43%)</title><rect x="83" y="212" width="5" height="15" fill="rgb(224,195,15)"/><text x="86.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (25 samples, 0.98%)</title><rect x="88" y="212" width="11" height="15" fill="rgb(226,54,48)"/><text x="91.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:87) (4 samples, 0.16%)</title><rect x="99" y="212" width="2" height="15" fill="rgb(218,100,54)"/><text x="102.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (12 samples, 0.47%)</title><rect x="101" y="212" width="6" height="15" fill="rgb(253,170,20)"/><text x="104.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1539) (7 samples, 0.27%)</title><rect x="110" y="228" width="4" height="15" fill="rgb(252,160,50)"/><text x="113.00" y="238.50"></text></g><g><title>array_subscript (mapping.c:1584) (7 samples, 0.27%)</title><rect x="114" y="228" width="3" height="15" fill="rgb(230,92,30)"/><text x="117.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (4 samples, 0.16%)</title><rect x="115" y="244" width="2" height="15" fill="rgb(222,36,2)"/><text x="118.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (4 samples, 0.16%)</title><rect x="115" y="260" width="2" height="15" fill="rgb(237,208,7)"/><text x="118.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (23 samples, 0.90%)</title><rect x="107" y="212" width="10" height="15" fill="rgb(239,178,48)"/><text x="110.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:392) (7 samples, 0.27%)</title><rect x="126" y="228" width="4" height="15" fill="rgb(234,221,51)"/><text x="129.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (11 samples, 0.43%)</title><rect x="130" y="228" width="5" height="15" fill="rgb(212,9,8)"/><text x="133.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:401) (5 samples, 0.20%)</title><rect x="135" y="228" width="2" height="15" fill="rgb(216,129,33)"/><text x="138.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:426) (7 samples, 0.27%)</title><rect x="153" y="244" width="3" height="15" fill="rgb(213,116,24)"/><text x="156.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (11 samples, 0.43%)</title><rect x="156" y="244" width="5" height="15" fill="rgb(234,184,54)"/><text x="159.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (20 samples, 0.78%)</title><rect x="161" y="244" width="9" height="15" fill="rgb(212,24,35)"/><text x="164.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (13 samples, 0.51%)</title><rect x="170" y="244" width="6" height="15" fill="rgb(219,217,39)"/><text x="173.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (15 samples, 0.59%)</title><rect x="177" y="244" width="7" height="15" fill="rgb(229,70,9)"/><text x="180.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (20 samples, 0.78%)</title><rect x="224" y="260" width="9" height="15" fill="rgb(222,66,38)"/><text x="227.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (180 samples, 7.05%)</title><rect x="233" y="260" width="83" height="15" fill="rgb(218,85,16)"/><text x="236.00" y="270.50">run (mlpr..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (29 samples, 1.14%)</title><rect x="303" y="276" width="13" height="15" fill="rgb(246,171,1)"/><text x="306.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:264) (3 samples, 0.12%)</title><rect x="365" y="292" width="1" height="15" fill="rgb(247,58,28)"/><text x="368.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:268) (6 samples, 0.24%)</title><rect x="366" y="292" width="3" height="15" fill="rgb(249,130,25)"/><text x="369.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (21 samples, 0.82%)</title><rect x="383" y="308" width="10" height="15" fill="rgb(210,100,12)"/><text x="386.00" y="318.50"></text></g><g><title>array_copy (methods.c:1127) (4 samples, 0.16%)</title><rect x="398" y="324" width="2" height="15" fill="rgb(240,49,24)"/><text x="401.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1052) (3 samples, 0.12%)</title><rect x="403" y="404" width="2" height="15" fill="rgb(253,69,48)"/><text x="406.00" y="414.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (9 samples, 0.35%)</title><rect x="402" y="356" width="4" height="15" fill="rgb(251,108,39)"/><text x="405.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (9 samples, 0.35%)</title><rect x="402" y="372" width="4" height="15" fill="rgb(217,31,33)"/><text x="405.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (9 samples, 0.35%)</title><rect x="402" y="388" width="4" height="15" fill="rgb(231,212,52)"/><text x="405.00" y="398.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (13 samples, 0.51%)</title><rect x="401" y="340" width="6" height="15" fill="rgb(233,191,25)"/><text x="404.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:306) (3 samples, 0.12%)</title><rect x="407" y="356" width="1" height="15" fill="rgb(215,4,8)"/><text x="410.00" y="366.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:681) (3 samples, 0.12%)</title><rect x="407" y="372" width="1" height="15" fill="rgb(227,1,19)"/><text x="410.00" y="382.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:333) (6 samples, 0.24%)</title><rect x="408" y="356" width="3" height="15" fill="rgb(251,111,35)"/><text x="411.00" y="366.50"></text></g><g><title>arrays_overlap (array_assign.c:162) (5 samples, 0.20%)</title><rect x="409" y="372" width="2" height="15" fill="rgb(229,155,19)"/><text x="412.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:120) (4 samples, 0.16%)</title><rect x="412" y="372" width="2" height="15" fill="rgb(227,101,2)"/><text x="415.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (11 samples, 0.43%)</title><rect x="414" y="372" width="5" height="15" fill="rgb(214,59,43)"/><text x="417.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (5 samples, 0.20%)</title><rect x="420" y="372" width="2" height="15" fill="rgb(229,108,23)"/><text x="423.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:94) (4 samples, 0.16%)</title><rect x="423" y="372" width="2" height="15" fill="rgb(245,218,13)"/><text x="426.00" y="382.50"></text></g><g><title>copycast_isaligned (array_assign_array.c:38) (4 samples, 0.16%)</title><rect x="423" y="388" width="2" height="15" fill="rgb(249,72,2)"/><text x="426.00" y="398.50"></text></g><g><title>npy_uint_alignment (common.h:216) (4 samples, 0.16%)</title><rect x="423" y="404" width="2" height="15" fill="rgb(208,1,31)"/><text x="426.00" y="414.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (7 samples, 0.27%)</title><rect x="425" y="388" width="3" height="15" fill="rgb(248,88,28)"/><text x="428.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (6 samples, 0.24%)</title><rect x="426" y="404" width="2" height="15" fill="rgb(222,165,42)"/><text x="429.00" y="414.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (38 samples, 1.49%)</title><rect x="412" y="356" width="17" height="15" fill="rgb(247,200,28)"/><text x="415.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (10 samples, 0.39%)</title><rect x="425" y="372" width="4" height="15" fill="rgb(207,135,48)"/><text x="428.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (79 samples, 3.10%)</title><rect x="393" y="308" width="37" height="15" fill="rgb(247,128,39)"/><text x="396.00" y="318.50">_ru..</text></g><g><title>array_copy (methods.c:1133) (64 samples, 2.51%)</title><rect x="400" y="324" width="30" height="15" fill="rgb(248,171,42)"/><text x="403.00" y="334.50">ar..</text></g><g><title>PyArray_NewCopy (convert.c:560) (50 samples, 1.96%)</title><rect x="407" y="340" width="23" height="15" fill="rgb(244,89,36)"/><text x="410.00" y="350.50">P..</text></g><g><title>PyUFunc_CheckOverride (override.c:452) (3 samples, 0.12%)</title><rect x="440" y="340" width="1" height="15" fill="rgb(246,188,38)"/><text x="443.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (4 samples, 0.16%)</title><rect x="440" y="324" width="2" height="15" fill="rgb(210,145,36)"/><text x="443.00" y="334.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:1970) (5 samples, 0.20%)</title><rect x="444" y="356" width="2" height="15" fill="rgb(219,177,31)"/><text x="447.00" y="366.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c:1803) (3 samples, 0.12%)</title><rect x="445" y="372" width="1" height="15" fill="rgb(217,133,24)"/><text x="448.00" y="382.50"></text></g><g><title>dtype_kind_to_simplified_ordering (convert_datatype.c:1750) (3 samples, 0.12%)</title><rect x="445" y="388" width="1" height="15" fill="rgb(213,205,38)"/><text x="448.00" y="398.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1665) (3 samples, 0.12%)</title><rect x="451" y="372" width="1" height="15" fill="rgb(239,202,35)"/><text x="454.00" y="382.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c:1511) (3 samples, 0.12%)</title><rect x="453" y="420" width="2" height="15" fill="rgb(230,111,48)"/><text x="456.00" y="430.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:757) (6 samples, 0.24%)</title><rect x="453" y="404" width="3" height="15" fill="rgb(232,118,11)"/><text x="456.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c:1521) (3 samples, 0.12%)</title><rect x="455" y="420" width="1" height="15" fill="rgb(253,64,45)"/><text x="458.00" y="430.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (13 samples, 0.51%)</title><rect x="452" y="372" width="6" height="15" fill="rgb(221,153,25)"/><text x="455.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (12 samples, 0.47%)</title><rect x="453" y="388" width="5" height="15" fill="rgb(230,31,8)"/><text x="456.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:865) (5 samples, 0.20%)</title><rect x="456" y="404" width="2" height="15" fill="rgb(207,60,24)"/><text x="459.00" y="414.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (22 samples, 0.86%)</title><rect x="449" y="356" width="10" height="15" fill="rgb(254,112,53)"/><text x="452.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (37 samples, 1.45%)</title><rect x="443" y="340" width="17" height="15" fill="rgb(245,207,19)"/><text x="446.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (4 samples, 0.16%)</title><rect x="461" y="340" width="2" height="15" fill="rgb(213,38,23)"/><text x="464.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1616) (3 samples, 0.12%)</title><rect x="464" y="356" width="1" height="15" fill="rgb(220,201,26)"/><text x="467.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (10 samples, 0.39%)</title><rect x="467" y="388" width="5" height="15" fill="rgb(223,47,6)"/><text x="470.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (10 samples, 0.39%)</title><rect x="467" y="404" width="5" height="15" fill="rgb(252,1,18)"/><text x="470.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (10 samples, 0.39%)</title><rect x="467" y="420" width="5" height="15" fill="rgb(232,136,54)"/><text x="470.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (10 samples, 0.39%)</title><rect x="467" y="436" width="5" height="15" fill="rgb(210,75,44)"/><text x="470.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (17 samples, 0.67%)</title><rect x="466" y="356" width="8" height="15" fill="rgb(249,110,29)"/><text x="469.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (17 samples, 0.67%)</title><rect x="466" y="372" width="8" height="15" fill="rgb(241,214,9)"/><text x="469.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (9 samples, 0.35%)</title><rect x="474" y="356" width="4" height="15" fill="rgb(223,195,32)"/><text x="477.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1355) (8 samples, 0.31%)</title><rect x="474" y="372" width="4" height="15" fill="rgb(243,66,50)"/><text x="477.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:594) (4 samples, 0.16%)</title><rect x="476" y="388" width="2" height="15" fill="rgb(213,133,6)"/><text x="479.00" y="398.50"></text></g><g><title>_mm_load_ps (xmmintrin.h:898) (4 samples, 0.16%)</title><rect x="476" y="404" width="2" height="15" fill="rgb(245,1,36)"/><text x="479.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (34 samples, 1.33%)</title><rect x="463" y="340" width="16" height="15" fill="rgb(237,28,5)"/><text x="466.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (3 samples, 0.12%)</title><rect x="479" y="340" width="1" height="15" fill="rgb(231,190,7)"/><text x="482.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (84 samples, 3.29%)</title><rect x="442" y="324" width="39" height="15" fill="rgb(241,187,5)"/><text x="445.00" y="334.50">ufu..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (110 samples, 4.31%)</title><rect x="430" y="308" width="51" height="15" fill="rgb(211,5,4)"/><text x="433.00" y="318.50">_run ..</text></g><g><title>_buffer_clear_info (buffer.c:724) (5 samples, 0.20%)</title><rect x="493" y="356" width="2" height="15" fill="rgb(221,157,47)"/><text x="496.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (9 samples, 0.35%)</title><rect x="491" y="324" width="4" height="15" fill="rgb(235,116,12)"/><text x="494.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (7 samples, 0.27%)</title><rect x="492" y="340" width="3" height="15" fill="rgb(236,199,10)"/><text x="495.00" y="350.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (30 samples, 1.18%)</title><rect x="496" y="324" width="14" height="15" fill="rgb(220,178,47)"/><text x="499.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py:2042) (5 samples, 0.20%)</title><rect x="507" y="340" width="3" height="15" fill="rgb(208,140,36)"/><text x="510.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:234) (3 samples, 0.12%)</title><rect x="514" y="340" width="1" height="15" fill="rgb(212,77,37)"/><text x="517.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (5 samples, 0.20%)</title><rect x="515" y="340" width="3" height="15" fill="rgb(225,208,7)"/><text x="518.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (12 samples, 0.47%)</title><rect x="528" y="356" width="5" height="15" fill="rgb(235,92,31)"/><text x="531.00" y="366.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (6 samples, 0.24%)</title><rect x="533" y="356" width="3" height="15" fill="rgb(209,107,37)"/><text x="536.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (8 samples, 0.31%)</title><rect x="561" y="388" width="3" height="15" fill="rgb(250,176,54)"/><text x="564.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (40 samples, 1.57%)</title><rect x="554" y="372" width="19" height="15" fill="rgb(213,66,27)"/><text x="557.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (18 samples, 0.71%)</title><rect x="564" y="388" width="9" height="15" fill="rgb(233,50,41)"/><text x="567.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (4 samples, 0.16%)</title><rect x="573" y="372" width="2" height="15" fill="rgb(243,40,20)"/><text x="576.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (19 samples, 0.74%)</title><rect x="581" y="420" width="9" height="15" fill="rgb(240,41,30)"/><text x="584.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (16 samples, 0.63%)</title><rect x="582" y="436" width="8" height="15" fill="rgb(236,128,21)"/><text x="585.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (4 samples, 0.16%)</title><rect x="588" y="452" width="2" height="15" fill="rgb(216,208,6)"/><text x="591.00" y="462.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (21 samples, 0.82%)</title><rect x="581" y="388" width="9" height="15" fill="rgb(230,225,53)"/><text x="584.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (21 samples, 0.82%)</title><rect x="581" y="404" width="9" height="15" fill="rgb(214,18,53)"/><text x="584.00" y="414.50"></text></g><g><title>unicode_eq (python3.7) (3 samples, 0.12%)</title><rect x="602" y="420" width="1" height="15" fill="rgb(220,37,22)"/><text x="605.00" y="430.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (29 samples, 1.14%)</title><rect x="590" y="404" width="14" height="15" fill="rgb(213,0,6)"/><text x="593.00" y="414.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:864) (3 samples, 0.12%)</title><rect x="606" y="452" width="1" height="15" fill="rgb(253,136,39)"/><text x="609.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4564) (5 samples, 0.20%)</title><rect x="606" y="404" width="2" height="15" fill="rgb(231,201,0)"/><text x="609.00" y="414.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (5 samples, 0.20%)</title><rect x="606" y="420" width="2" height="15" fill="rgb(226,95,0)"/><text x="609.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (5 samples, 0.20%)</title><rect x="606" y="436" width="2" height="15" fill="rgb(222,77,10)"/><text x="609.00" y="446.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2194) (3 samples, 0.12%)</title><rect x="616" y="468" width="1" height="15" fill="rgb(248,32,24)"/><text x="619.00" y="478.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2215) (3 samples, 0.12%)</title><rect x="618" y="468" width="2" height="15" fill="rgb(223,44,0)"/><text x="621.00" y="478.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (19 samples, 0.74%)</title><rect x="612" y="436" width="8" height="15" fill="rgb(221,6,21)"/><text x="615.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (14 samples, 0.55%)</title><rect x="614" y="452" width="6" height="15" fill="rgb(214,90,21)"/><text x="617.00" y="462.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (22 samples, 0.86%)</title><rect x="611" y="420" width="10" height="15" fill="rgb(248,47,32)"/><text x="614.00" y="430.50"></text></g><g><title>0x7f26218b8d50 (libc-2.29.so) (3 samples, 0.12%)</title><rect x="625" y="500" width="2" height="15" fill="rgb(225,162,1)"/><text x="628.00" y="510.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (16 samples, 0.63%)</title><rect x="622" y="468" width="7" height="15" fill="rgb(230,25,29)"/><text x="625.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (14 samples, 0.55%)</title><rect x="623" y="484" width="6" height="15" fill="rgb(225,217,36)"/><text x="626.00" y="494.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.12%)</title><rect x="628" y="500" width="1" height="15" fill="rgb(216,196,43)"/><text x="631.00" y="510.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (4 samples, 0.16%)</title><rect x="631" y="500" width="2" height="15" fill="rgb(231,66,8)"/><text x="634.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (4 samples, 0.16%)</title><rect x="631" y="516" width="2" height="15" fill="rgb(206,221,12)"/><text x="634.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (4 samples, 0.16%)</title><rect x="631" y="532" width="2" height="15" fill="rgb(214,1,26)"/><text x="634.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.16%)</title><rect x="631" y="548" width="2" height="15" fill="rgb(242,39,23)"/><text x="634.00" y="558.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (8 samples, 0.31%)</title><rect x="634" y="532" width="3" height="15" fill="rgb(212,223,54)"/><text x="637.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (8 samples, 0.31%)</title><rect x="634" y="548" width="3" height="15" fill="rgb(253,123,19)"/><text x="637.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (8 samples, 0.31%)</title><rect x="634" y="564" width="3" height="15" fill="rgb(237,54,29)"/><text x="637.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (11 samples, 0.43%)</title><rect x="634" y="500" width="5" height="15" fill="rgb(245,194,48)"/><text x="637.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (11 samples, 0.43%)</title><rect x="634" y="516" width="5" height="15" fill="rgb(226,58,25)"/><text x="637.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (3 samples, 0.12%)</title><rect x="637" y="532" width="2" height="15" fill="rgb(231,27,30)"/><text x="640.00" y="542.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (3 samples, 0.12%)</title><rect x="639" y="500" width="1" height="15" fill="rgb(223,47,9)"/><text x="642.00" y="510.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (41 samples, 1.61%)</title><rect x="622" y="436" width="19" height="15" fill="rgb(252,62,34)"/><text x="625.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (41 samples, 1.61%)</title><rect x="622" y="452" width="19" height="15" fill="rgb(229,214,23)"/><text x="625.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (24 samples, 0.94%)</title><rect x="630" y="468" width="11" height="15" fill="rgb(220,31,5)"/><text x="633.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (23 samples, 0.90%)</title><rect x="630" y="484" width="11" height="15" fill="rgb(221,55,39)"/><text x="633.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:368) (3 samples, 0.12%)</title><rect x="641" y="452" width="1" height="15" fill="rgb(222,34,25)"/><text x="644.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:199) (3 samples, 0.12%)</title><rect x="643" y="468" width="2" height="15" fill="rgb(233,177,33)"/><text x="646.00" y="478.50"></text></g><g><title>PyArray_FailUnlessWriteable (arrayobject.c:691) (3 samples, 0.12%)</title><rect x="643" y="484" width="2" height="15" fill="rgb(245,136,44)"/><text x="646.00" y="494.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c:3869) (5 samples, 0.20%)</title><rect x="646" y="500" width="2" height="15" fill="rgb(218,92,40)"/><text x="649.00" y="510.50"></text></g><g><title>qsort_r (libc-2.29.so) (5 samples, 0.20%)</title><rect x="646" y="516" width="2" height="15" fill="rgb(227,94,34)"/><text x="649.00" y="526.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:57) (7 samples, 0.27%)</title><rect x="646" y="484" width="3" height="15" fill="rgb(242,186,14)"/><text x="649.00" y="494.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c:741) (5 samples, 0.20%)</title><rect x="652" y="500" width="3" height="15" fill="rgb(232,7,4)"/><text x="655.00" y="510.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (13 samples, 0.51%)</title><rect x="649" y="484" width="6" height="15" fill="rgb(213,156,27)"/><text x="652.00" y="494.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (24 samples, 0.94%)</title><rect x="645" y="468" width="11" height="15" fill="rgb(249,89,34)"/><text x="648.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (37 samples, 1.45%)</title><rect x="641" y="436" width="17" height="15" fill="rgb(229,216,47)"/><text x="644.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (33 samples, 1.29%)</title><rect x="643" y="452" width="15" height="15" fill="rgb(218,126,46)"/><text x="646.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:309) (3 samples, 0.12%)</title><rect x="656" y="468" width="2" height="15" fill="rgb(246,219,42)"/><text x="659.00" y="478.50"></text></g><g><title>PyArray_AdaptFlexibleDType (convert_datatype.c:148) (3 samples, 0.12%)</title><rect x="662" y="500" width="1" height="15" fill="rgb(235,76,31)"/><text x="665.00" y="510.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c:1106) (4 samples, 0.16%)</title><rect x="662" y="484" width="2" height="15" fill="rgb(234,201,48)"/><text x="665.00" y="494.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (7 samples, 0.27%)</title><rect x="661" y="452" width="3" height="15" fill="rgb(253,219,28)"/><text x="664.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (7 samples, 0.27%)</title><rect x="661" y="468" width="3" height="15" fill="rgb(205,34,46)"/><text x="664.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (3 samples, 0.12%)</title><rect x="666" y="452" width="1" height="15" fill="rgb(225,214,51)"/><text x="669.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:319) (4 samples, 0.16%)</title><rect x="668" y="452" width="2" height="15" fill="rgb(215,81,30)"/><text x="671.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (4 samples, 0.16%)</title><rect x="671" y="452" width="2" height="15" fill="rgb(254,150,47)"/><text x="674.00" y="462.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c:1623) (3 samples, 0.12%)</title><rect x="673" y="468" width="1" height="15" fill="rgb(251,25,46)"/><text x="676.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (4 samples, 0.16%)</title><rect x="673" y="452" width="2" height="15" fill="rgb(209,160,20)"/><text x="676.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (47 samples, 1.84%)</title><rect x="658" y="436" width="21" height="15" fill="rgb(224,104,35)"/><text x="661.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (7 samples, 0.27%)</title><rect x="676" y="452" width="3" height="15" fill="rgb(234,59,49)"/><text x="679.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:562) (3 samples, 0.12%)</title><rect x="680" y="436" width="1" height="15" fill="rgb(252,186,39)"/><text x="683.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:565) (3 samples, 0.12%)</title><rect x="682" y="436" width="1" height="15" fill="rgb(244,78,42)"/><text x="685.00" y="446.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c:1470) (3 samples, 0.12%)</title><rect x="685" y="468" width="1" height="15" fill="rgb(245,107,24)"/><text x="688.00" y="478.50"></text></g><g><title>reduce_loop (ufunc_object.c:3486) (6 samples, 0.24%)</title><rect x="685" y="452" width="2" height="15" fill="rgb(226,183,21)"/><text x="688.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (4 samples, 0.16%)</title><rect x="688" y="468" width="2" height="15" fill="rgb(210,193,29)"/><text x="691.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (19 samples, 0.74%)</title><rect x="684" y="436" width="8" height="15" fill="rgb(244,42,17)"/><text x="687.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (10 samples, 0.39%)</title><rect x="688" y="452" width="4" height="15" fill="rgb(233,45,38)"/><text x="691.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:255) (5 samples, 0.20%)</title><rect x="690" y="468" width="2" height="15" fill="rgb(241,179,7)"/><text x="693.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (4 samples, 0.16%)</title><rect x="693" y="436" width="2" height="15" fill="rgb(239,184,17)"/><text x="696.00" y="446.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (186 samples, 7.29%)</title><rect x="610" y="404" width="86" height="15" fill="rgb(212,166,34)"/><text x="613.00" y="414.50">PyUFunc_Ge..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (162 samples, 6.35%)</title><rect x="621" y="420" width="75" height="15" fill="rgb(213,92,32)"/><text x="624.00" y="430.50">PyUFunc_..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (388 samples, 15.20%)</title><rect x="518" y="340" width="180" height="15" fill="rgb(251,89,31)"/><text x="521.00" y="350.50">array_implement_array_f..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (349 samples, 13.68%)</title><rect x="536" y="356" width="162" height="15" fill="rgb(242,43,49)"/><text x="539.00" y="366.50">sum (numpy/core/from..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (266 samples, 10.42%)</title><rect x="575" y="372" width="123" height="15" fill="rgb(244,202,44)"/><text x="578.00" y="382.50">_wrapreduction ..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (232 samples, 9.09%)</title><rect x="590" y="388" width="108" height="15" fill="rgb(246,227,10)"/><text x="593.00" y="398.50">ufunc_reduce ..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (711 samples, 27.86%)</title><rect x="369" y="292" width="329" height="15" fill="rgb(206,198,48)"/><text x="372.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py:269)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (469 samples, 18.38%)</title><rect x="481" y="308" width="217" height="15" fill="rgb(228,51,40)"/><text x="484.00" y="318.50">_run (mlprodict/onnxrt/ops_c..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (407 samples, 15.95%)</title><rect x="510" y="324" width="188" height="15" fill="rgb(208,59,9)"/><text x="513.00" y="334.50">sum (&lt;__array_function__..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (748 samples, 29.31%)</title><rect x="353" y="276" width="346" height="15" fill="rgb(213,161,28)"/><text x="356.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py:348)</text></g><g><title>arraydescr_richcompare (descriptor.c:3210) (4 samples, 0.16%)</title><rect x="714" y="292" width="2" height="15" fill="rgb(226,54,43)"/><text x="717.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (39 samples, 1.53%)</title><rect x="699" y="276" width="18" height="15" fill="rgb(224,135,19)"/><text x="702.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:353) (3 samples, 0.12%)</title><rect x="717" y="276" width="1" height="15" fill="rgb(233,74,51)"/><text x="720.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (9 samples, 0.35%)</title><rect x="722" y="292" width="4" height="15" fill="rgb(242,138,4)"/><text x="725.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:519) (14 samples, 0.55%)</title><rect x="735" y="308" width="6" height="15" fill="rgb(237,4,1)"/><text x="738.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:527) (5 samples, 0.20%)</title><rect x="741" y="308" width="3" height="15" fill="rgb(223,128,4)"/><text x="744.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:431) (3 samples, 0.12%)</title><rect x="748" y="340" width="2" height="15" fill="rgb(208,104,23)"/><text x="751.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (4 samples, 0.16%)</title><rect x="748" y="324" width="2" height="15" fill="rgb(247,153,50)"/><text x="751.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (3 samples, 0.12%)</title><rect x="752" y="340" width="1" height="15" fill="rgb(222,206,37)"/><text x="755.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:866) (5 samples, 0.20%)</title><rect x="754" y="356" width="2" height="15" fill="rgb(244,189,11)"/><text x="757.00" y="366.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src:4417) (3 samples, 0.12%)</title><rect x="758" y="420" width="1" height="15" fill="rgb(227,71,31)"/><text x="761.00" y="430.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1905) (6 samples, 0.24%)</title><rect x="758" y="388" width="3" height="15" fill="rgb(249,35,54)"/><text x="761.00" y="398.50"></text></g><g><title>promote_types (convert_datatype.c:1043) (6 samples, 0.24%)</title><rect x="758" y="404" width="3" height="15" fill="rgb(232,200,41)"/><text x="761.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (10 samples, 0.39%)</title><rect x="757" y="372" width="4" height="15" fill="rgb(206,49,3)"/><text x="760.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (18 samples, 0.71%)</title><rect x="753" y="340" width="9" height="15" fill="rgb(249,100,45)"/><text x="756.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (12 samples, 0.47%)</title><rect x="756" y="356" width="6" height="15" fill="rgb(245,22,15)"/><text x="759.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3215) (4 samples, 0.16%)</title><rect x="762" y="340" width="2" height="15" fill="rgb(211,9,27)"/><text x="765.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (4 samples, 0.16%)</title><rect x="764" y="340" width="2" height="15" fill="rgb(216,36,0)"/><text x="767.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (3 samples, 0.12%)</title><rect x="766" y="340" width="1" height="15" fill="rgb(232,165,44)"/><text x="769.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (5 samples, 0.20%)</title><rect x="769" y="388" width="3" height="15" fill="rgb(225,169,32)"/><text x="772.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.16%)</title><rect x="770" y="404" width="2" height="15" fill="rgb(250,166,54)"/><text x="773.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (7 samples, 0.27%)</title><rect x="772" y="388" width="3" height="15" fill="rgb(252,83,2)"/><text x="775.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (5 samples, 0.20%)</title><rect x="772" y="404" width="3" height="15" fill="rgb(235,150,0)"/><text x="775.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:390) (4 samples, 0.16%)</title><rect x="778" y="388" width="1" height="15" fill="rgb(227,11,22)"/><text x="781.00" y="398.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c:1304) (3 samples, 0.12%)</title><rect x="778" y="404" width="1" height="15" fill="rgb(244,180,46)"/><text x="781.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.12%)</title><rect x="783" y="452" width="1" height="15" fill="rgb(222,205,23)"/><text x="786.00" y="462.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (3 samples, 0.12%)</title><rect x="783" y="468" width="1" height="15" fill="rgb(211,33,41)"/><text x="786.00" y="478.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (10 samples, 0.39%)</title><rect x="781" y="404" width="5" height="15" fill="rgb(208,202,16)"/><text x="784.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (8 samples, 0.31%)</title><rect x="782" y="420" width="4" height="15" fill="rgb(236,125,30)"/><text x="785.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (7 samples, 0.27%)</title><rect x="783" y="436" width="3" height="15" fill="rgb(253,174,46)"/><text x="786.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (16 samples, 0.63%)</title><rect x="779" y="388" width="8" height="15" fill="rgb(207,75,15)"/><text x="782.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (6 samples, 0.24%)</title><rect x="787" y="388" width="3" height="15" fill="rgb(242,218,24)"/><text x="790.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (49 samples, 1.92%)</title><rect x="768" y="372" width="23" height="15" fill="rgb(207,133,19)"/><text x="771.00" y="382.50">i..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (3 samples, 0.12%)</title><rect x="790" y="388" width="1" height="15" fill="rgb(214,140,49)"/><text x="793.00" y="398.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:306) (4 samples, 0.16%)</title><rect x="792" y="388" width="2" height="15" fill="rgb(217,13,30)"/><text x="795.00" y="398.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1717) (3 samples, 0.12%)</title><rect x="792" y="404" width="2" height="15" fill="rgb(211,138,32)"/><text x="795.00" y="414.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (12 samples, 0.47%)</title><rect x="792" y="372" width="5" height="15" fill="rgb(244,39,27)"/><text x="795.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (5 samples, 0.20%)</title><rect x="795" y="388" width="2" height="15" fill="rgb(231,109,11)"/><text x="798.00" y="398.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (6 samples, 0.24%)</title><rect x="800" y="388" width="3" height="15" fill="rgb(247,118,42)"/><text x="803.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (4 samples, 0.16%)</title><rect x="801" y="404" width="2" height="15" fill="rgb(242,178,25)"/><text x="804.00" y="414.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (12 samples, 0.47%)</title><rect x="800" y="372" width="5" height="15" fill="rgb(248,45,24)"/><text x="803.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (4 samples, 0.16%)</title><rect x="806" y="388" width="2" height="15" fill="rgb(248,197,21)"/><text x="809.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1586) (17 samples, 0.67%)</title><rect x="805" y="372" width="8" height="15" fill="rgb(241,197,34)"/><text x="808.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (10 samples, 0.39%)</title><rect x="808" y="388" width="5" height="15" fill="rgb(243,26,18)"/><text x="811.00" y="398.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.12%)</title><rect x="812" y="404" width="1" height="15" fill="rgb(209,228,52)"/><text x="815.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (99 samples, 3.88%)</title><rect x="768" y="356" width="46" height="15" fill="rgb(224,195,33)"/><text x="771.00" y="366.50">exec..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (103 samples, 4.04%)</title><rect x="767" y="340" width="48" height="15" fill="rgb(207,213,22)"/><text x="770.00" y="350.50">PyUF..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (5 samples, 0.20%)</title><rect x="815" y="340" width="2" height="15" fill="rgb(252,95,36)"/><text x="818.00" y="350.50"></text></g><g><title>_check_ufunc_fperr (extobj.c:286) (3 samples, 0.12%)</title><rect x="816" y="356" width="1" height="15" fill="rgb(222,216,22)"/><text x="819.00" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (147 samples, 5.76%)</title><rect x="750" y="324" width="68" height="15" fill="rgb(215,121,7)"/><text x="753.00" y="334.50">ufunc_g..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4768) (5 samples, 0.20%)</title><rect x="819" y="324" width="2" height="15" fill="rgb(210,35,40)"/><text x="822.00" y="334.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (206 samples, 8.07%)</title><rect x="727" y="292" width="95" height="15" fill="rgb(206,25,22)"/><text x="730.00" y="302.50">run (mlprod..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (169 samples, 6.62%)</title><rect x="744" y="308" width="78" height="15" fill="rgb(245,26,21)"/><text x="747.00" y="318.50">_run (mlp..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (225 samples, 8.82%)</title><rect x="718" y="276" width="104" height="15" fill="rgb(242,55,18)"/><text x="721.00" y="286.50">run (mlprodi..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (8 samples, 0.31%)</title><rect x="822" y="276" width="4" height="15" fill="rgb(223,187,27)"/><text x="825.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,106 samples, 43.34%)</title><rect x="316" y="260" width="511" height="15" fill="rgb(210,92,34)"/><text x="319.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:494) (3 samples, 0.12%)</title><rect x="826" y="276" width="1" height="15" fill="rgb(253,180,8)"/><text x="829.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (28 samples, 1.10%)</title><rect x="827" y="260" width="13" height="15" fill="rgb(244,128,50)"/><text x="830.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (45 samples, 1.76%)</title><rect x="840" y="260" width="21" height="15" fill="rgb(246,44,6)"/><text x="843.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (16 samples, 0.63%)</title><rect x="861" y="260" width="8" height="15" fill="rgb(246,1,9)"/><text x="864.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (108 samples, 4.23%)</title><rect x="869" y="260" width="50" height="15" fill="rgb(250,110,31)"/><text x="872.00" y="270.50">run (..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,616 samples, 63.32%)</title><rect x="184" y="244" width="747" height="15" fill="rgb(243,11,46)"/><text x="187.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (28 samples, 1.10%)</title><rect x="919" y="260" width="12" height="15" fill="rgb(214,101,12)"/><text x="922.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (39 samples, 1.53%)</title><rect x="932" y="244" width="18" height="15" fill="rgb(251,147,4)"/><text x="935.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (15 samples, 0.59%)</title><rect x="944" y="260" width="6" height="15" fill="rgb(220,167,51)"/><text x="947.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (3 samples, 0.12%)</title><rect x="951" y="276" width="2" height="15" fill="rgb(236,214,30)"/><text x="954.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (1,811 samples, 70.96%)</title><rect x="117" y="212" width="838" height="15" fill="rgb(208,227,7)"/><text x="120.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,768 samples, 69.28%)</title><rect x="137" y="228" width="818" height="15" fill="rgb(211,20,36)"/><text x="140.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>array_dealloc (arrayobject.c:476) (8 samples, 0.31%)</title><rect x="951" y="244" width="4" height="15" fill="rgb(243,61,18)"/><text x="954.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (7 samples, 0.27%)</title><rect x="951" y="260" width="4" height="15" fill="rgb(224,151,45)"/><text x="954.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (3 samples, 0.12%)</title><rect x="953" y="276" width="2" height="15" fill="rgb(210,108,27)"/><text x="956.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (24 samples, 0.94%)</title><rect x="955" y="212" width="11" height="15" fill="rgb(209,87,54)"/><text x="958.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (10 samples, 0.39%)</title><rect x="961" y="228" width="5" height="15" fill="rgb(235,60,6)"/><text x="964.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (20 samples, 0.78%)</title><rect x="966" y="212" width="9" height="15" fill="rgb(229,159,25)"/><text x="969.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (11 samples, 0.43%)</title><rect x="991" y="228" width="5" height="15" fill="rgb(247,198,1)"/><text x="994.00" y="238.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (12 samples, 0.47%)</title><rect x="1005" y="260" width="6" height="15" fill="rgb(237,212,3)"/><text x="1008.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (13 samples, 0.51%)</title><rect x="1013" y="276" width="6" height="15" fill="rgb(248,110,32)"/><text x="1016.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (20 samples, 0.78%)</title><rect x="1011" y="260" width="9" height="15" fill="rgb(248,220,18)"/><text x="1014.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:576) (6 samples, 0.24%)</title><rect x="1020" y="260" width="3" height="15" fill="rgb(238,174,11)"/><text x="1023.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (16 samples, 0.63%)</title><rect x="1023" y="260" width="7" height="15" fill="rgb(244,107,32)"/><text x="1026.00" y="270.50"></text></g><g><title>array_reshape (methods.c:179) (3 samples, 0.12%)</title><rect x="1048" y="276" width="1" height="15" fill="rgb(241,207,8)"/><text x="1051.00" y="286.50"></text></g><g><title>array_reshape (methods.c:186) (9 samples, 0.35%)</title><rect x="1049" y="276" width="5" height="15" fill="rgb(237,154,40)"/><text x="1052.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:53) (5 samples, 0.20%)</title><rect x="1051" y="292" width="3" height="15" fill="rgb(254,102,51)"/><text x="1054.00" y="302.50"></text></g><g><title>array_reshape (methods.c:195) (13 samples, 0.51%)</title><rect x="1054" y="276" width="6" height="15" fill="rgb(242,178,33)"/><text x="1057.00" y="286.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (6 samples, 0.24%)</title><rect x="1057" y="292" width="3" height="15" fill="rgb(244,34,12)"/><text x="1060.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c:240) (3 samples, 0.12%)</title><rect x="1060" y="308" width="1" height="15" fill="rgb(205,98,0)"/><text x="1063.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.12%)</title><rect x="1061" y="324" width="2" height="15" fill="rgb(249,159,30)"/><text x="1064.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (138 samples, 5.41%)</title><rect x="1001" y="244" width="64" height="15" fill="rgb(219,118,30)"/><text x="1004.00" y="254.50">array_i..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (74 samples, 2.90%)</title><rect x="1031" y="260" width="34" height="15" fill="rgb(211,154,21)"/><text x="1034.00" y="270.50">ex..</text></g><g><title>array_reshape (methods.c:210) (12 samples, 0.47%)</title><rect x="1060" y="276" width="5" height="15" fill="rgb(249,186,5)"/><text x="1063.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (12 samples, 0.47%)</title><rect x="1060" y="292" width="5" height="15" fill="rgb(208,163,27)"/><text x="1063.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (8 samples, 0.31%)</title><rect x="1061" y="308" width="4" height="15" fill="rgb(219,224,30)"/><text x="1064.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (198 samples, 7.76%)</title><rect x="975" y="212" width="92" height="15" fill="rgb(212,67,47)"/><text x="978.00" y="222.50">_run (mlpr..</text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (151 samples, 5.92%)</title><rect x="997" y="228" width="70" height="15" fill="rgb(249,207,35)"/><text x="1000.00" y="238.50">expand_..</text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (12 samples, 0.47%)</title><rect x="1069" y="308" width="6" height="15" fill="rgb(205,177,49)"/><text x="1072.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (8 samples, 0.31%)</title><rect x="1071" y="324" width="4" height="15" fill="rgb(242,61,17)"/><text x="1074.00" y="334.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:123) (4 samples, 0.16%)</title><rect x="1075" y="308" width="2" height="15" fill="rgb(208,183,34)"/><text x="1078.00" y="318.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:125) (4 samples, 0.16%)</title><rect x="1077" y="308" width="2" height="15" fill="rgb(242,28,9)"/><text x="1080.00" y="318.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (25 samples, 0.98%)</title><rect x="1068" y="260" width="11" height="15" fill="rgb(254,127,2)"/><text x="1071.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (24 samples, 0.94%)</title><rect x="1068" y="276" width="11" height="15" fill="rgb(250,163,31)"/><text x="1071.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (24 samples, 0.94%)</title><rect x="1068" y="292" width="11" height="15" fill="rgb(217,215,30)"/><text x="1071.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (35 samples, 1.37%)</title><rect x="1067" y="212" width="16" height="15" fill="rgb(214,125,49)"/><text x="1070.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (32 samples, 1.25%)</title><rect x="1068" y="228" width="15" height="15" fill="rgb(237,171,32)"/><text x="1071.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (32 samples, 1.25%)</title><rect x="1068" y="244" width="15" height="15" fill="rgb(229,214,3)"/><text x="1071.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (7 samples, 0.27%)</title><rect x="1079" y="260" width="4" height="15" fill="rgb(241,8,48)"/><text x="1082.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (7 samples, 0.27%)</title><rect x="1079" y="276" width="4" height="15" fill="rgb(214,5,16)"/><text x="1082.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.27%)</title><rect x="1079" y="292" width="4" height="15" fill="rgb(214,70,38)"/><text x="1082.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (5 samples, 0.20%)</title><rect x="1080" y="308" width="3" height="15" fill="rgb(215,214,33)"/><text x="1083.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (3 samples, 0.12%)</title><rect x="1081" y="324" width="2" height="15" fill="rgb(241,192,44)"/><text x="1084.00" y="334.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (7 samples, 0.27%)</title><rect x="1085" y="260" width="3" height="15" fill="rgb(234,173,45)"/><text x="1088.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.27%)</title><rect x="1085" y="276" width="3" height="15" fill="rgb(247,15,40)"/><text x="1088.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (7 samples, 0.27%)</title><rect x="1085" y="292" width="3" height="15" fill="rgb(245,3,19)"/><text x="1088.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (6 samples, 0.24%)</title><rect x="1085" y="308" width="3" height="15" fill="rgb(245,38,46)"/><text x="1088.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (3 samples, 0.12%)</title><rect x="1086" y="324" width="2" height="15" fill="rgb(231,31,12)"/><text x="1089.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (3 samples, 0.12%)</title><rect x="1086" y="340" width="2" height="15" fill="rgb(228,199,8)"/><text x="1089.00" y="350.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (9 samples, 0.35%)</title><rect x="1084" y="244" width="4" height="15" fill="rgb(221,210,18)"/><text x="1087.00" y="254.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (4 samples, 0.16%)</title><rect x="1089" y="260" width="2" height="15" fill="rgb(253,5,33)"/><text x="1092.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.16%)</title><rect x="1089" y="276" width="2" height="15" fill="rgb(235,26,15)"/><text x="1092.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (4 samples, 0.16%)</title><rect x="1089" y="292" width="2" height="15" fill="rgb(213,146,50)"/><text x="1092.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.12%)</title><rect x="1090" y="308" width="1" height="15" fill="rgb(245,183,21)"/><text x="1093.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (17 samples, 0.67%)</title><rect x="1084" y="212" width="7" height="15" fill="rgb(218,63,29)"/><text x="1087.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (16 samples, 0.63%)</title><rect x="1084" y="228" width="7" height="15" fill="rgb(224,35,31)"/><text x="1087.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (6 samples, 0.24%)</title><rect x="1089" y="244" width="2" height="15" fill="rgb(214,200,1)"/><text x="1092.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (4 samples, 0.16%)</title><rect x="1091" y="212" width="2" height="15" fill="rgb(246,114,6)"/><text x="1094.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (3 samples, 0.12%)</title><rect x="1092" y="228" width="1" height="15" fill="rgb(230,215,35)"/><text x="1095.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c:520) (3 samples, 0.12%)</title><rect x="1093" y="212" width="2" height="15" fill="rgb(213,28,36)"/><text x="1096.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (2,199 samples, 86.17%)</title><rect x="78" y="196" width="1017" height="15" fill="rgb(227,92,16)"/><text x="81.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (5 samples, 0.20%)</title><rect x="1097" y="308" width="2" height="15" fill="rgb(222,31,53)"/><text x="1100.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (3 samples, 0.12%)</title><rect x="1097" y="324" width="2" height="15" fill="rgb(219,11,32)"/><text x="1100.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py:24) (9 samples, 0.35%)</title><rect x="1095" y="212" width="4" height="15" fill="rgb(209,204,17)"/><text x="1098.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:6) (8 samples, 0.31%)</title><rect x="1096" y="228" width="3" height="15" fill="rgb(250,213,15)"/><text x="1099.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 0.31%)</title><rect x="1096" y="244" width="3" height="15" fill="rgb(235,5,12)"/><text x="1099.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py:2911) (8 samples, 0.31%)</title><rect x="1096" y="260" width="3" height="15" fill="rgb(228,45,15)"/><text x="1099.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (6 samples, 0.24%)</title><rect x="1097" y="276" width="2" height="15" fill="rgb(209,152,7)"/><text x="1100.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (6 samples, 0.24%)</title><rect x="1097" y="292" width="2" height="15" fill="rgb(250,221,24)"/><text x="1100.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (11 samples, 0.43%)</title><rect x="1095" y="196" width="5" height="15" fill="rgb(238,195,52)"/><text x="1098.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py:151) (5 samples, 0.20%)</title><rect x="1103" y="292" width="2" height="15" fill="rgb(250,85,29)"/><text x="1106.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (5 samples, 0.20%)</title><rect x="1103" y="308" width="2" height="15" fill="rgb(236,164,24)"/><text x="1106.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (5 samples, 0.20%)</title><rect x="1103" y="324" width="2" height="15" fill="rgb(230,202,26)"/><text x="1106.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (5 samples, 0.20%)</title><rect x="1103" y="340" width="2" height="15" fill="rgb(210,32,37)"/><text x="1106.00" y="350.50"></text></g><g><title>_mean (numpy/core/_methods.py:154) (3 samples, 0.12%)</title><rect x="1105" y="292" width="2" height="15" fill="rgb(253,229,30)"/><text x="1108.00" y="302.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.12%)</title><rect x="1105" y="308" width="2" height="15" fill="rgb(225,136,19)"/><text x="1108.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py:29) (13 samples, 0.51%)</title><rect x="1101" y="228" width="6" height="15" fill="rgb(206,174,5)"/><text x="1104.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (11 samples, 0.43%)</title><rect x="1102" y="244" width="5" height="15" fill="rgb(206,145,22)"/><text x="1105.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 0.43%)</title><rect x="1102" y="260" width="5" height="15" fill="rgb(218,47,30)"/><text x="1105.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (9 samples, 0.35%)</title><rect x="1103" y="276" width="4" height="15" fill="rgb(249,148,35)"/><text x="1106.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.12%)</title><rect x="1107" y="260" width="2" height="15" fill="rgb(223,2,8)"/><text x="1110.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py:19) (4 samples, 0.16%)</title><rect x="1107" y="228" width="2" height="15" fill="rgb(215,39,48)"/><text x="1110.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 0.16%)</title><rect x="1107" y="244" width="2" height="15" fill="rgb(224,187,18)"/><text x="1110.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (2,231 samples, 87.42%)</title><rect x="78" y="180" width="1032" height="15" fill="rgb(239,114,17)"/><text x="81.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (20 samples, 0.78%)</title><rect x="1100" y="196" width="10" height="15" fill="rgb(231,209,49)"/><text x="1103.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (18 samples, 0.71%)</title><rect x="1101" y="212" width="9" height="15" fill="rgb(206,50,14)"/><text x="1104.00" y="222.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (2,243 samples, 87.89%)</title><rect x="75" y="164" width="1037" height="15" fill="rgb(247,82,48)"/><text x="78.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (4 samples, 0.16%)</title><rect x="1110" y="180" width="2" height="15" fill="rgb(239,215,37)"/><text x="1113.00" y="190.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:61) (2,251 samples, 88.21%)</title><rect x="73" y="52" width="1041" height="15" fill="rgb(214,40,5)"/><text x="76.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:61)</text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:60) (2,251 samples, 88.21%)</title><rect x="73" y="68" width="1041" height="15" fill="rgb(222,146,40)"/><text x="76.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:60)</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:37) (2,250 samples, 88.17%)</title><rect x="73" y="84" width="1041" height="15" fill="rgb(244,193,49)"/><text x="76.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:37)</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:31) (2,250 samples, 88.17%)</title><rect x="73" y="100" width="1041" height="15" fill="rgb(226,207,46)"/><text x="76.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (2,250 samples, 88.17%)</title><rect x="73" y="116" width="1041" height="15" fill="rgb(218,66,49)"/><text x="76.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (2,249 samples, 88.13%)</title><rect x="74" y="132" width="1040" height="15" fill="rgb(209,186,34)"/><text x="77.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,247 samples, 88.05%)</title><rect x="75" y="148" width="1039" height="15" fill="rgb(233,12,24)"/><text x="78.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (3 samples, 0.12%)</title><rect x="1112" y="164" width="2" height="15" fill="rgb(241,20,33)"/><text x="1115.00" y="174.50"></text></g><g><title>run (onnxruntime/capi/session.py:134) (3 samples, 0.12%)</title><rect x="1114" y="196" width="2" height="15" fill="rgb(239,24,25)"/><text x="1117.00" y="206.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="1125" y="452" width="2" height="15" fill="rgb(222,2,26)"/><text x="1128.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="1125" y="468" width="2" height="15" fill="rgb(214,183,51)"/><text x="1128.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="1128" y="452" width="1" height="15" fill="rgb(236,66,40)"/><text x="1131.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="1128" y="468" width="1" height="15" fill="rgb(211,138,41)"/><text x="1131.00" y="478.50"></text></g><g><title>onnxruntime::SessionState::GetMemoryPatternGroup (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="1129" y="452" width="2" height="15" fill="rgb(252,15,48)"/><text x="1132.00" y="462.50"></text></g><g><title>onnxruntime::OrtMutex::lock (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="1129" y="468" width="2" height="15" fill="rgb(225,201,51)"/><text x="1132.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 0.63%)</title><rect x="1124" y="436" width="7" height="15" fill="rgb(225,180,14)"/><text x="1127.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.39%)</title><rect x="1131" y="436" width="5" height="15" fill="rgb(228,78,51)"/><text x="1134.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.31%)</title><rect x="1132" y="452" width="4" height="15" fill="rgb(237,174,30)"/><text x="1135.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.27%)</title><rect x="1133" y="468" width="3" height="15" fill="rgb(223,160,1)"/><text x="1136.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="1134" y="484" width="2" height="15" fill="rgb(219,215,2)"/><text x="1137.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="1134" y="500" width="2" height="15" fill="rgb(223,55,25)"/><text x="1137.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="1136" y="436" width="2" height="15" fill="rgb(244,92,1)"/><text x="1139.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="1136" y="452" width="2" height="15" fill="rgb(243,179,38)"/><text x="1139.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="1136" y="468" width="2" height="15" fill="rgb(231,128,2)"/><text x="1139.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="1138" y="436" width="1" height="15" fill="rgb(236,113,11)"/><text x="1141.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.20%)</title><rect x="1139" y="436" width="2" height="15" fill="rgb(246,179,54)"/><text x="1142.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::OpKernelContext (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="1141" y="436" width="2" height="15" fill="rgb(209,69,37)"/><text x="1144.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.27%)</title><rect x="1158" y="516" width="3" height="15" fill="rgb(214,229,12)"/><text x="1161.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.27%)</title><rect x="1158" y="532" width="3" height="15" fill="rgb(241,111,25)"/><text x="1161.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.27%)</title><rect x="1158" y="548" width="3" height="15" fill="rgb(241,124,15)"/><text x="1161.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.24%)</title><rect x="1159" y="564" width="2" height="15" fill="rgb(216,122,19)"/><text x="1162.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.20%)</title><rect x="1159" y="580" width="2" height="15" fill="rgb(246,110,53)"/><text x="1162.00" y="590.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="1160" y="596" width="1" height="15" fill="rgb(213,208,44)"/><text x="1163.00" y="606.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.31%)</title><rect x="1158" y="468" width="4" height="15" fill="rgb(246,140,20)"/><text x="1161.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.31%)</title><rect x="1158" y="484" width="4" height="15" fill="rgb(233,181,40)"/><text x="1161.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.31%)</title><rect x="1158" y="500" width="4" height="15" fill="rgb(243,138,36)"/><text x="1161.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.16%)</title><rect x="1162" y="468" width="2" height="15" fill="rgb(249,143,40)"/><text x="1165.00" y="478.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.12%)</title><rect x="1163" y="484" width="1" height="15" fill="rgb(218,192,20)"/><text x="1166.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="1164" y="468" width="1" height="15" fill="rgb(241,92,12)"/><text x="1167.00" y="478.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="1165" y="468" width="2" height="15" fill="rgb(210,119,47)"/><text x="1168.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (59 samples, 2.31%)</title><rect x="1143" y="436" width="27" height="15" fill="rgb(248,115,40)"/><text x="1146.00" y="446.50">o..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 2.23%)</title><rect x="1144" y="452" width="26" height="15" fill="rgb(207,145,36)"/><text x="1147.00" y="462.50">o..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="1168" y="468" width="2" height="15" fill="rgb(253,191,42)"/><text x="1171.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.12%)</title><rect x="1169" y="484" width="1" height="15" fill="rgb(248,30,28)"/><text x="1172.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.12%)</title><rect x="1169" y="500" width="1" height="15" fill="rgb(251,188,53)"/><text x="1172.00" y="510.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.24%)</title><rect x="1171" y="468" width="3" height="15" fill="rgb(232,102,54)"/><text x="1174.00" y="478.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.12%)</title><rect x="1173" y="484" width="1" height="15" fill="rgb(226,2,38)"/><text x="1176.00" y="494.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="1177" y="564" width="2" height="15" fill="rgb(218,106,21)"/><text x="1180.00" y="574.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.39%)</title><rect x="1176" y="468" width="4" height="15" fill="rgb(228,71,44)"/><text x="1179.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.39%)</title><rect x="1176" y="484" width="4" height="15" fill="rgb(250,186,27)"/><text x="1179.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.39%)</title><rect x="1176" y="500" width="4" height="15" fill="rgb(205,10,21)"/><text x="1179.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.39%)</title><rect x="1176" y="516" width="4" height="15" fill="rgb(243,187,16)"/><text x="1179.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.31%)</title><rect x="1177" y="532" width="3" height="15" fill="rgb(222,131,43)"/><text x="1180.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.31%)</title><rect x="1177" y="548" width="3" height="15" fill="rgb(243,56,49)"/><text x="1180.00" y="558.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="1182" y="500" width="1" height="15" fill="rgb(240,4,16)"/><text x="1185.00" y="510.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.35%)</title><rect x="1180" y="468" width="4" height="15" fill="rgb(247,108,17)"/><text x="1183.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.35%)</title><rect x="1180" y="484" width="4" height="15" fill="rgb(213,162,23)"/><text x="1183.00" y="494.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (135 samples, 5.29%)</title><rect x="1123" y="420" width="62" height="15" fill="rgb(233,33,19)"/><text x="1126.00" y="430.50">onnxru..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (33 samples, 1.29%)</title><rect x="1170" y="436" width="15" height="15" fill="rgb(230,17,22)"/><text x="1173.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (33 samples, 1.29%)</title><rect x="1170" y="452" width="15" height="15" fill="rgb(238,218,21)"/><text x="1173.00" y="462.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (146 samples, 5.72%)</title><rect x="1118" y="356" width="68" height="15" fill="rgb(206,53,8)"/><text x="1121.00" y="366.50">onnxrun..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (146 samples, 5.72%)</title><rect x="1118" y="372" width="68" height="15" fill="rgb(234,217,15)"/><text x="1121.00" y="382.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (138 samples, 5.41%)</title><rect x="1122" y="388" width="64" height="15" fill="rgb(236,129,31)"/><text x="1125.00" y="398.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (138 samples, 5.41%)</title><rect x="1122" y="404" width="64" height="15" fill="rgb(248,45,17)"/><text x="1125.00" y="414.50">onnxrun..</text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (149 samples, 5.84%)</title><rect x="1118" y="340" width="69" height="15" fill="rgb(237,165,40)"/><text x="1121.00" y="350.50">onnxrun..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (152 samples, 5.96%)</title><rect x="1117" y="260" width="70" height="15" fill="rgb(238,121,40)"/><text x="1120.00" y="270.50">onnxrun..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (152 samples, 5.96%)</title><rect x="1117" y="276" width="70" height="15" fill="rgb(248,176,51)"/><text x="1120.00" y="286.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.92%)</title><rect x="1117" y="292" width="70" height="15" fill="rgb(230,101,54)"/><text x="1120.00" y="302.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.92%)</title><rect x="1117" y="308" width="70" height="15" fill="rgb(213,176,42)"/><text x="1120.00" y="318.50">onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.92%)</title><rect x="1117" y="324" width="70" height="15" fill="rgb(234,2,45)"/><text x="1120.00" y="334.50">onnxrun..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (161 samples, 6.31%)</title><rect x="1114" y="164" width="75" height="15" fill="rgb(225,213,45)"/><text x="1117.00" y="174.50">_run_who..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (161 samples, 6.31%)</title><rect x="1114" y="180" width="75" height="15" fill="rgb(231,157,14)"/><text x="1117.00" y="190.50">run (mlp..</text></g><g><title>run (onnxruntime/capi/session.py:136) (157 samples, 6.15%)</title><rect x="1116" y="196" width="73" height="15" fill="rgb(245,76,49)"/><text x="1119.00" y="206.50">run (onn..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (156 samples, 6.11%)</title><rect x="1116" y="212" width="73" height="15" fill="rgb(211,55,28)"/><text x="1119.00" y="222.50">pybind11..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (156 samples, 6.11%)</title><rect x="1116" y="228" width="73" height="15" fill="rgb(247,51,22)"/><text x="1119.00" y="238.50">void pyb..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (156 samples, 6.11%)</title><rect x="1116" y="244" width="73" height="15" fill="rgb(243,170,52)"/><text x="1119.00" y="254.50">onnxrunt..</text></g><g><title>all (2,552 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(213,37,41)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:68) (164 samples, 6.43%)</title><rect x="1114" y="52" width="76" height="15" fill="rgb(213,126,5)"/><text x="1117.00" y="62.50">&lt;module&gt;..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:67) (164 samples, 6.43%)</title><rect x="1114" y="68" width="76" height="15" fill="rgb(219,19,28)"/><text x="1117.00" y="78.50">profile_..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:37) (164 samples, 6.43%)</title><rect x="1114" y="84" width="76" height="15" fill="rgb(237,106,16)"/><text x="1117.00" y="94.50">setup_pr..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:31) (164 samples, 6.43%)</title><rect x="1114" y="100" width="76" height="15" fill="rgb(217,100,21)"/><text x="1117.00" y="110.50">profile ..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (163 samples, 6.39%)</title><rect x="1114" y="116" width="76" height="15" fill="rgb(239,39,0)"/><text x="1117.00" y="126.50">time_pre..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (163 samples, 6.39%)</title><rect x="1114" y="132" width="76" height="15" fill="rgb(234,194,48)"/><text x="1117.00" y="142.50">&lt;lambda&gt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (163 samples, 6.39%)</title><rect x="1114" y="148" width="76" height="15" fill="rgb(223,27,38)"/><text x="1117.00" y="158.50">run (mlp..</text></g></g></svg>