<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1910" onload="init(evt)" viewBox="0 0 1200 1910" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1910" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1893.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1893.00"> </text><g id="frames"><g><title>&lt;module&gt; (numpy/__init__.py:142) (4 samples, 0.21%)</title><rect x="10" y="244" width="2" height="15" fill="rgb(228,58,50)"/><text x="13.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 0.21%)</title><rect x="10" y="260" width="2" height="15" fill="rgb(237,214,6)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="10" y="276" width="2" height="15" fill="rgb(218,135,54)"/><text x="13.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="10" y="292" width="2" height="15" fill="rgb(247,92,34)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="10" y="308" width="2" height="15" fill="rgb(211,76,42)"/><text x="13.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="10" y="324" width="2" height="15" fill="rgb(251,133,13)"/><text x="13.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="10" y="340" width="2" height="15" fill="rgb(238,118,4)"/><text x="13.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="10" y="356" width="2" height="15" fill="rgb(252,130,5)"/><text x="13.00" y="366.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:1) (5 samples, 0.26%)</title><rect x="10" y="148" width="3" height="15" fill="rgb(213,5,2)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.26%)</title><rect x="10" y="164" width="3" height="15" fill="rgb(214,78,52)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.26%)</title><rect x="10" y="180" width="3" height="15" fill="rgb(251,18,21)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.26%)</title><rect x="10" y="196" width="3" height="15" fill="rgb(205,149,39)"/><text x="13.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.26%)</title><rect x="10" y="212" width="3" height="15" fill="rgb(240,71,46)"/><text x="13.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.26%)</title><rect x="10" y="228" width="3" height="15" fill="rgb(210,210,5)"/><text x="13.00" y="238.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (2 samples, 0.10%)</title><rect x="13" y="820" width="1" height="15" fill="rgb(245,62,18)"/><text x="16.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (2 samples, 0.10%)</title><rect x="13" y="836" width="1" height="15" fill="rgb(243,31,47)"/><text x="16.00" y="846.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:2) (5 samples, 0.26%)</title><rect x="13" y="148" width="3" height="15" fill="rgb(236,81,40)"/><text x="16.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.26%)</title><rect x="13" y="164" width="3" height="15" fill="rgb(211,225,8)"/><text x="16.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.26%)</title><rect x="13" y="180" width="3" height="15" fill="rgb(205,55,49)"/><text x="16.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.26%)</title><rect x="13" y="196" width="3" height="15" fill="rgb(231,129,32)"/><text x="16.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.26%)</title><rect x="13" y="212" width="3" height="15" fill="rgb(251,76,54)"/><text x="16.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.26%)</title><rect x="13" y="228" width="3" height="15" fill="rgb(237,97,50)"/><text x="16.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.26%)</title><rect x="13" y="244" width="3" height="15" fill="rgb(247,88,18)"/><text x="16.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.26%)</title><rect x="13" y="260" width="3" height="15" fill="rgb(235,33,16)"/><text x="16.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.26%)</title><rect x="13" y="276" width="3" height="15" fill="rgb(253,93,38)"/><text x="16.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (4 samples, 0.21%)</title><rect x="13" y="292" width="3" height="15" fill="rgb(244,219,12)"/><text x="16.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="13" y="308" width="3" height="15" fill="rgb(205,6,46)"/><text x="16.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="13" y="324" width="3" height="15" fill="rgb(234,79,0)"/><text x="16.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="13" y="340" width="3" height="15" fill="rgb(208,16,36)"/><text x="16.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="13" y="356" width="3" height="15" fill="rgb(215,140,24)"/><text x="16.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="13" y="372" width="3" height="15" fill="rgb(228,189,47)"/><text x="16.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (4 samples, 0.21%)</title><rect x="13" y="388" width="3" height="15" fill="rgb(211,81,43)"/><text x="16.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="13" y="404" width="3" height="15" fill="rgb(219,172,19)"/><text x="16.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="13" y="420" width="3" height="15" fill="rgb(228,137,46)"/><text x="16.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="13" y="436" width="3" height="15" fill="rgb(214,37,36)"/><text x="16.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="13" y="452" width="3" height="15" fill="rgb(218,11,13)"/><text x="16.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="13" y="468" width="3" height="15" fill="rgb(227,149,9)"/><text x="16.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (4 samples, 0.21%)</title><rect x="13" y="484" width="3" height="15" fill="rgb(251,48,41)"/><text x="16.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="13" y="500" width="3" height="15" fill="rgb(214,187,13)"/><text x="16.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="13" y="516" width="3" height="15" fill="rgb(241,120,50)"/><text x="16.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="13" y="532" width="3" height="15" fill="rgb(227,192,36)"/><text x="16.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="13" y="548" width="3" height="15" fill="rgb(245,140,28)"/><text x="16.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="13" y="564" width="3" height="15" fill="rgb(215,13,0)"/><text x="16.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (4 samples, 0.21%)</title><rect x="13" y="580" width="3" height="15" fill="rgb(211,85,43)"/><text x="16.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="13" y="596" width="3" height="15" fill="rgb(240,149,48)"/><text x="16.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.21%)</title><rect x="13" y="612" width="3" height="15" fill="rgb(219,58,38)"/><text x="16.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="13" y="628" width="3" height="15" fill="rgb(251,53,40)"/><text x="16.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="13" y="644" width="3" height="15" fill="rgb(219,79,29)"/><text x="16.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="13" y="660" width="3" height="15" fill="rgb(254,110,23)"/><text x="16.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="13" y="676" width="3" height="15" fill="rgb(253,66,41)"/><text x="16.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="13" y="692" width="3" height="15" fill="rgb(219,101,50)"/><text x="16.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="13" y="708" width="3" height="15" fill="rgb(235,187,20)"/><text x="16.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (4 samples, 0.21%)</title><rect x="13" y="724" width="3" height="15" fill="rgb(226,108,20)"/><text x="16.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="13" y="740" width="3" height="15" fill="rgb(243,50,38)"/><text x="16.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="13" y="756" width="3" height="15" fill="rgb(253,225,46)"/><text x="16.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="13" y="772" width="3" height="15" fill="rgb(233,89,44)"/><text x="16.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="13" y="788" width="3" height="15" fill="rgb(233,107,4)"/><text x="16.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="13" y="804" width="3" height="15" fill="rgb(224,42,34)"/><text x="16.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:36) (2 samples, 0.10%)</title><rect x="14" y="820" width="2" height="15" fill="rgb(242,13,19)"/><text x="17.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="14" y="836" width="2" height="15" fill="rgb(219,191,34)"/><text x="17.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="14" y="852" width="2" height="15" fill="rgb(205,123,5)"/><text x="17.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="14" y="868" width="2" height="15" fill="rgb(235,126,35)"/><text x="17.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="14" y="884" width="2" height="15" fill="rgb(218,200,6)"/><text x="17.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="14" y="900" width="2" height="15" fill="rgb(253,41,23)"/><text x="17.00" y="910.50"></text></g><g><title>&lt;module&gt; (email/parser.py:12) (2 samples, 0.10%)</title><rect x="14" y="916" width="2" height="15" fill="rgb(205,108,49)"/><text x="17.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="14" y="932" width="2" height="15" fill="rgb(238,158,44)"/><text x="17.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="14" y="948" width="2" height="15" fill="rgb(211,105,6)"/><text x="17.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="14" y="964" width="2" height="15" fill="rgb(220,120,11)"/><text x="17.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="14" y="980" width="2" height="15" fill="rgb(217,92,30)"/><text x="17.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="14" y="996" width="2" height="15" fill="rgb(207,224,44)"/><text x="17.00" y="1006.50"></text></g><g><title>&lt;module&gt; (email/feedparser.py:27) (2 samples, 0.10%)</title><rect x="14" y="1012" width="2" height="15" fill="rgb(226,34,22)"/><text x="17.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="14" y="1028" width="2" height="15" fill="rgb(248,216,38)"/><text x="17.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="14" y="1044" width="2" height="15" fill="rgb(232,153,42)"/><text x="17.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="14" y="1060" width="2" height="15" fill="rgb(248,179,8)"/><text x="17.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="14" y="1076" width="2" height="15" fill="rgb(236,144,9)"/><text x="17.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="14" y="1092" width="2" height="15" fill="rgb(211,33,2)"/><text x="17.00" y="1102.50"></text></g><g><title>&lt;module&gt; (email/_policybase.py:9) (2 samples, 0.10%)</title><rect x="14" y="1108" width="2" height="15" fill="rgb(242,206,54)"/><text x="17.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="14" y="1124" width="2" height="15" fill="rgb(241,82,37)"/><text x="17.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="14" y="1140" width="2" height="15" fill="rgb(211,212,40)"/><text x="17.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="14" y="1156" width="2" height="15" fill="rgb(207,110,41)"/><text x="17.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="14" y="1172" width="2" height="15" fill="rgb(223,29,10)"/><text x="17.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="14" y="1188" width="2" height="15" fill="rgb(216,128,28)"/><text x="17.00" y="1198.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:4) (2 samples, 0.10%)</title><rect x="16" y="148" width="1" height="15" fill="rgb(219,183,36)"/><text x="19.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="164" width="1" height="15" fill="rgb(242,112,1)"/><text x="19.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.10%)</title><rect x="16" y="180" width="1" height="15" fill="rgb(253,161,11)"/><text x="19.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="196" width="1" height="15" fill="rgb(210,213,36)"/><text x="19.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="212" width="1" height="15" fill="rgb(250,38,11)"/><text x="19.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="228" width="1" height="15" fill="rgb(231,114,36)"/><text x="19.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="244" width="1" height="15" fill="rgb(214,135,2)"/><text x="19.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="260" width="1" height="15" fill="rgb(231,10,8)"/><text x="19.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="276" width="1" height="15" fill="rgb(246,54,38)"/><text x="19.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (2 samples, 0.10%)</title><rect x="16" y="292" width="1" height="15" fill="rgb(221,60,8)"/><text x="19.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="308" width="1" height="15" fill="rgb(228,45,26)"/><text x="19.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="324" width="1" height="15" fill="rgb(236,18,11)"/><text x="19.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="340" width="1" height="15" fill="rgb(223,58,4)"/><text x="19.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="356" width="1" height="15" fill="rgb(235,46,31)"/><text x="19.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="372" width="1" height="15" fill="rgb(232,85,5)"/><text x="19.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (2 samples, 0.10%)</title><rect x="16" y="388" width="1" height="15" fill="rgb(254,142,24)"/><text x="19.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="404" width="1" height="15" fill="rgb(243,78,52)"/><text x="19.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="420" width="1" height="15" fill="rgb(245,2,51)"/><text x="19.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="436" width="1" height="15" fill="rgb(253,147,34)"/><text x="19.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="452" width="1" height="15" fill="rgb(224,9,12)"/><text x="19.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="468" width="1" height="15" fill="rgb(252,145,29)"/><text x="19.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:25) (2 samples, 0.10%)</title><rect x="16" y="484" width="1" height="15" fill="rgb(212,210,18)"/><text x="19.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="500" width="1" height="15" fill="rgb(252,7,1)"/><text x="19.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="516" width="1" height="15" fill="rgb(232,45,43)"/><text x="19.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="532" width="1" height="15" fill="rgb(233,67,54)"/><text x="19.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="548" width="1" height="15" fill="rgb(224,75,42)"/><text x="19.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="564" width="1" height="15" fill="rgb(237,72,9)"/><text x="19.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (2 samples, 0.10%)</title><rect x="16" y="580" width="1" height="15" fill="rgb(251,103,0)"/><text x="19.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="596" width="1" height="15" fill="rgb(250,42,37)"/><text x="19.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="612" width="1" height="15" fill="rgb(234,186,36)"/><text x="19.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="628" width="1" height="15" fill="rgb(210,193,54)"/><text x="19.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="644" width="1" height="15" fill="rgb(229,147,37)"/><text x="19.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="660" width="1" height="15" fill="rgb(215,163,49)"/><text x="19.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:379) (2 samples, 0.10%)</title><rect x="16" y="676" width="1" height="15" fill="rgb(247,158,2)"/><text x="19.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="692" width="1" height="15" fill="rgb(235,169,3)"/><text x="19.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="708" width="1" height="15" fill="rgb(232,193,9)"/><text x="19.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="724" width="1" height="15" fill="rgb(222,46,17)"/><text x="19.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="740" width="1" height="15" fill="rgb(212,213,37)"/><text x="19.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="756" width="1" height="15" fill="rgb(222,40,19)"/><text x="19.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py:180) (2 samples, 0.10%)</title><rect x="16" y="772" width="1" height="15" fill="rgb(248,184,6)"/><text x="19.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="788" width="1" height="15" fill="rgb(244,109,44)"/><text x="19.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="804" width="1" height="15" fill="rgb(244,106,38)"/><text x="19.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="820" width="1" height="15" fill="rgb(247,54,22)"/><text x="19.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="836" width="1" height="15" fill="rgb(214,215,22)"/><text x="19.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="852" width="1" height="15" fill="rgb(232,206,37)"/><text x="19.00" y="862.50"></text></g><g><title>&lt;module&gt; (scipy/special/__init__.py:643) (2 samples, 0.10%)</title><rect x="16" y="868" width="1" height="15" fill="rgb(222,43,54)"/><text x="19.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="884" width="1" height="15" fill="rgb(206,212,15)"/><text x="19.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="900" width="1" height="15" fill="rgb(224,106,47)"/><text x="19.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="916" width="1" height="15" fill="rgb(212,137,1)"/><text x="19.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="932" width="1" height="15" fill="rgb(216,144,29)"/><text x="19.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="948" width="1" height="15" fill="rgb(229,94,53)"/><text x="19.00" y="958.50"></text></g><g><title>&lt;module&gt; (scipy/special/basic.py:19) (2 samples, 0.10%)</title><rect x="16" y="964" width="1" height="15" fill="rgb(212,179,29)"/><text x="19.00" y="974.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.10%)</title><rect x="16" y="980" width="1" height="15" fill="rgb(242,193,41)"/><text x="19.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="996" width="1" height="15" fill="rgb(223,80,30)"/><text x="19.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="1012" width="1" height="15" fill="rgb(225,205,17)"/><text x="19.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="1028" width="1" height="15" fill="rgb(231,179,42)"/><text x="19.00" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="1044" width="1" height="15" fill="rgb(211,214,54)"/><text x="19.00" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="1060" width="1" height="15" fill="rgb(236,121,2)"/><text x="19.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="1076" width="1" height="15" fill="rgb(209,160,49)"/><text x="19.00" y="1086.50"></text></g><g><title>&lt;module&gt; (scipy/special/orthogonal.py:83) (2 samples, 0.10%)</title><rect x="16" y="1092" width="1" height="15" fill="rgb(210,34,37)"/><text x="19.00" y="1102.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.10%)</title><rect x="16" y="1108" width="1" height="15" fill="rgb(234,88,43)"/><text x="19.00" y="1118.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="1124" width="1" height="15" fill="rgb(217,30,10)"/><text x="19.00" y="1134.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="1140" width="1" height="15" fill="rgb(213,73,16)"/><text x="19.00" y="1150.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="1156" width="1" height="15" fill="rgb(225,47,3)"/><text x="19.00" y="1166.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="1172" width="1" height="15" fill="rgb(214,217,45)"/><text x="19.00" y="1182.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="1188" width="1" height="15" fill="rgb(229,168,48)"/><text x="19.00" y="1198.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="1204" width="1" height="15" fill="rgb(231,78,27)"/><text x="19.00" y="1214.50"></text></g><g><title>&lt;module&gt; (scipy/linalg/__init__.py:195) (2 samples, 0.10%)</title><rect x="16" y="1220" width="1" height="15" fill="rgb(240,226,42)"/><text x="19.00" y="1230.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="1236" width="1" height="15" fill="rgb(228,155,28)"/><text x="19.00" y="1246.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="1252" width="1" height="15" fill="rgb(219,24,0)"/><text x="19.00" y="1262.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="1268" width="1" height="15" fill="rgb(251,190,53)"/><text x="19.00" y="1278.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="1284" width="1" height="15" fill="rgb(225,226,37)"/><text x="19.00" y="1294.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="1300" width="1" height="15" fill="rgb(236,156,16)"/><text x="19.00" y="1310.50"></text></g><g><title>&lt;module&gt; (scipy/linalg/misc.py:6) (2 samples, 0.10%)</title><rect x="16" y="1316" width="1" height="15" fill="rgb(239,162,16)"/><text x="19.00" y="1326.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="1332" width="1" height="15" fill="rgb(244,57,23)"/><text x="19.00" y="1342.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="1348" width="1" height="15" fill="rgb(219,71,30)"/><text x="19.00" y="1358.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="16" y="1364" width="1" height="15" fill="rgb(243,48,48)"/><text x="19.00" y="1374.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="16" y="1380" width="1" height="15" fill="rgb(244,78,24)"/><text x="19.00" y="1390.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="1396" width="1" height="15" fill="rgb(209,56,10)"/><text x="19.00" y="1406.50"></text></g><g><title>&lt;module&gt; (scipy/linalg/lapack.py:616) (2 samples, 0.10%)</title><rect x="16" y="1412" width="1" height="15" fill="rgb(246,8,49)"/><text x="19.00" y="1422.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.10%)</title><rect x="16" y="1428" width="1" height="15" fill="rgb(235,137,51)"/><text x="19.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="1444" width="1" height="15" fill="rgb(229,121,23)"/><text x="19.00" y="1454.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="16" y="1460" width="1" height="15" fill="rgb(216,38,1)"/><text x="19.00" y="1470.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="16" y="1476" width="1" height="15" fill="rgb(241,70,5)"/><text x="19.00" y="1486.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:670) (2 samples, 0.10%)</title><rect x="16" y="1492" width="1" height="15" fill="rgb(223,228,22)"/><text x="19.00" y="1502.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:583) (2 samples, 0.10%)</title><rect x="16" y="1508" width="1" height="15" fill="rgb(233,120,8)"/><text x="19.00" y="1518.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:1043) (2 samples, 0.10%)</title><rect x="16" y="1524" width="1" height="15" fill="rgb(205,196,4)"/><text x="19.00" y="1534.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="16" y="1540" width="1" height="15" fill="rgb(225,191,52)"/><text x="19.00" y="1550.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (3 samples, 0.15%)</title><rect x="17" y="244" width="2" height="15" fill="rgb(233,59,25)"/><text x="20.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="17" y="260" width="2" height="15" fill="rgb(250,81,51)"/><text x="20.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="17" y="276" width="2" height="15" fill="rgb(216,63,19)"/><text x="20.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="17" y="292" width="2" height="15" fill="rgb(231,38,24)"/><text x="20.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="17" y="308" width="2" height="15" fill="rgb(221,159,52)"/><text x="20.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="17" y="324" width="2" height="15" fill="rgb(233,96,45)"/><text x="20.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (3 samples, 0.15%)</title><rect x="17" y="340" width="2" height="15" fill="rgb(254,62,53)"/><text x="20.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="17" y="356" width="2" height="15" fill="rgb(240,12,52)"/><text x="20.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.15%)</title><rect x="17" y="372" width="2" height="15" fill="rgb(210,130,52)"/><text x="20.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="17" y="388" width="2" height="15" fill="rgb(243,51,30)"/><text x="20.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="17" y="404" width="2" height="15" fill="rgb(220,191,12)"/><text x="20.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="17" y="420" width="2" height="15" fill="rgb(239,177,26)"/><text x="20.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="17" y="436" width="2" height="15" fill="rgb(232,16,1)"/><text x="20.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="17" y="452" width="2" height="15" fill="rgb(213,204,52)"/><text x="20.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="17" y="468" width="2" height="15" fill="rgb(221,162,8)"/><text x="20.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:12) (3 samples, 0.15%)</title><rect x="17" y="484" width="2" height="15" fill="rgb(210,41,22)"/><text x="20.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="17" y="500" width="2" height="15" fill="rgb(248,190,26)"/><text x="20.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="17" y="516" width="2" height="15" fill="rgb(225,199,44)"/><text x="20.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="17" y="532" width="2" height="15" fill="rgb(248,175,27)"/><text x="20.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="17" y="548" width="2" height="15" fill="rgb(232,11,1)"/><text x="20.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="17" y="564" width="2" height="15" fill="rgb(206,49,33)"/><text x="20.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py:23) (3 samples, 0.15%)</title><rect x="17" y="580" width="2" height="15" fill="rgb(214,113,53)"/><text x="20.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="17" y="596" width="2" height="15" fill="rgb(229,225,8)"/><text x="20.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="17" y="612" width="2" height="15" fill="rgb(234,194,53)"/><text x="20.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="17" y="628" width="2" height="15" fill="rgb(241,8,20)"/><text x="20.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="17" y="644" width="2" height="15" fill="rgb(248,168,22)"/><text x="20.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="17" y="660" width="2" height="15" fill="rgb(218,20,45)"/><text x="20.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py:10) (3 samples, 0.15%)</title><rect x="17" y="676" width="2" height="15" fill="rgb(249,183,42)"/><text x="20.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="17" y="692" width="2" height="15" fill="rgb(225,133,54)"/><text x="20.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="17" y="708" width="2" height="15" fill="rgb(246,138,53)"/><text x="20.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="17" y="724" width="2" height="15" fill="rgb(228,40,8)"/><text x="20.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="17" y="740" width="2" height="15" fill="rgb(208,58,13)"/><text x="20.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="17" y="756" width="2" height="15" fill="rgb(239,24,46)"/><text x="20.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py:95) (3 samples, 0.15%)</title><rect x="17" y="772" width="2" height="15" fill="rgb(226,116,33)"/><text x="20.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (3 samples, 0.15%)</title><rect x="17" y="788" width="2" height="15" fill="rgb(248,72,29)"/><text x="20.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="17" y="804" width="2" height="15" fill="rgb(221,214,28)"/><text x="20.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="17" y="820" width="2" height="15" fill="rgb(236,40,34)"/><text x="20.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="17" y="836" width="2" height="15" fill="rgb(244,181,25)"/><text x="20.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="17" y="852" width="2" height="15" fill="rgb(231,188,18)"/><text x="20.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="17" y="868" width="2" height="15" fill="rgb(234,11,44)"/><text x="20.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="17" y="884" width="2" height="15" fill="rgb(213,48,14)"/><text x="20.00" y="894.50"></text></g><g><title>&lt;module&gt; (urllib3/contrib/pyopenssl.py:48) (3 samples, 0.15%)</title><rect x="17" y="900" width="2" height="15" fill="rgb(245,18,25)"/><text x="20.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="17" y="916" width="2" height="15" fill="rgb(220,197,32)"/><text x="20.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="17" y="932" width="2" height="15" fill="rgb(243,194,17)"/><text x="20.00" y="942.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="17" y="948" width="2" height="15" fill="rgb(222,5,20)"/><text x="20.00" y="958.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="17" y="964" width="2" height="15" fill="rgb(221,65,20)"/><text x="20.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="17" y="980" width="2" height="15" fill="rgb(242,139,12)"/><text x="20.00" y="990.50"></text></g><g><title>&lt;module&gt; (cryptography/hazmat/backends/openssl/__init__.py:7) (3 samples, 0.15%)</title><rect x="17" y="996" width="2" height="15" fill="rgb(222,130,21)"/><text x="20.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.15%)</title><rect x="17" y="1012" width="2" height="15" fill="rgb(214,124,30)"/><text x="20.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.15%)</title><rect x="17" y="1028" width="2" height="15" fill="rgb(242,62,47)"/><text x="20.00" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.15%)</title><rect x="17" y="1044" width="2" height="15" fill="rgb(250,124,30)"/><text x="20.00" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.15%)</title><rect x="17" y="1060" width="2" height="15" fill="rgb(217,53,28)"/><text x="20.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.15%)</title><rect x="17" y="1076" width="2" height="15" fill="rgb(213,172,5)"/><text x="20.00" y="1086.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:10) (2 samples, 0.10%)</title><rect x="19" y="1108" width="1" height="15" fill="rgb(244,41,19)"/><text x="22.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="19" y="1124" width="1" height="15" fill="rgb(249,11,49)"/><text x="22.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="19" y="1140" width="1" height="15" fill="rgb(207,100,45)"/><text x="22.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="19" y="1156" width="1" height="15" fill="rgb(215,80,47)"/><text x="22.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="19" y="1172" width="1" height="15" fill="rgb(242,48,49)"/><text x="22.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="19" y="1188" width="1" height="15" fill="rgb(254,218,26)"/><text x="22.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py:11) (2 samples, 0.10%)</title><rect x="19" y="1204" width="1" height="15" fill="rgb(238,102,17)"/><text x="22.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="19" y="1220" width="1" height="15" fill="rgb(210,126,31)"/><text x="22.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.10%)</title><rect x="19" y="1236" width="1" height="15" fill="rgb(209,149,35)"/><text x="22.00" y="1246.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="19" y="1252" width="1" height="15" fill="rgb(243,171,48)"/><text x="22.00" y="1262.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="19" y="1268" width="1" height="15" fill="rgb(230,222,28)"/><text x="22.00" y="1278.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="19" y="1284" width="1" height="15" fill="rgb(216,184,32)"/><text x="22.00" y="1294.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="19" y="1300" width="1" height="15" fill="rgb(219,149,15)"/><text x="22.00" y="1310.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="19" y="1316" width="1" height="15" fill="rgb(210,12,27)"/><text x="22.00" y="1326.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="19" y="1332" width="1" height="15" fill="rgb(237,16,37)"/><text x="22.00" y="1342.50"></text></g><g><title>&lt;module&gt; (onnxconverter_common/__init__.py:23) (2 samples, 0.10%)</title><rect x="19" y="1348" width="1" height="15" fill="rgb(225,215,30)"/><text x="22.00" y="1358.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="19" y="1364" width="1" height="15" fill="rgb(206,136,21)"/><text x="22.00" y="1374.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="19" y="1380" width="1" height="15" fill="rgb(235,35,29)"/><text x="22.00" y="1390.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="19" y="1396" width="1" height="15" fill="rgb(211,71,12)"/><text x="22.00" y="1406.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (2 samples, 0.10%)</title><rect x="19" y="1412" width="1" height="15" fill="rgb(239,34,24)"/><text x="22.00" y="1422.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:4) (19 samples, 0.97%)</title><rect x="10" y="52" width="11" height="15" fill="rgb(225,71,18)"/><text x="13.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (19 samples, 0.97%)</title><rect x="10" y="68" width="11" height="15" fill="rgb(245,70,50)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (19 samples, 0.97%)</title><rect x="10" y="84" width="11" height="15" fill="rgb(248,179,37)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (19 samples, 0.97%)</title><rect x="10" y="100" width="11" height="15" fill="rgb(231,51,36)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (19 samples, 0.97%)</title><rect x="10" y="116" width="11" height="15" fill="rgb(248,27,31)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (19 samples, 0.97%)</title><rect x="10" y="132" width="11" height="15" fill="rgb(205,149,52)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:7) (7 samples, 0.36%)</title><rect x="17" y="148" width="4" height="15" fill="rgb(224,201,3)"/><text x="20.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.36%)</title><rect x="17" y="164" width="4" height="15" fill="rgb(232,11,40)"/><text x="20.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.36%)</title><rect x="17" y="180" width="4" height="15" fill="rgb(238,114,53)"/><text x="20.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.36%)</title><rect x="17" y="196" width="4" height="15" fill="rgb(245,42,30)"/><text x="20.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.36%)</title><rect x="17" y="212" width="4" height="15" fill="rgb(252,129,32)"/><text x="20.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.36%)</title><rect x="17" y="228" width="4" height="15" fill="rgb(218,10,49)"/><text x="20.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (4 samples, 0.21%)</title><rect x="19" y="244" width="2" height="15" fill="rgb(249,193,51)"/><text x="22.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="19" y="260" width="2" height="15" fill="rgb(224,61,24)"/><text x="22.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="19" y="276" width="2" height="15" fill="rgb(220,31,5)"/><text x="22.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="19" y="292" width="2" height="15" fill="rgb(238,218,22)"/><text x="22.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="19" y="308" width="2" height="15" fill="rgb(212,73,2)"/><text x="22.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="19" y="324" width="2" height="15" fill="rgb(243,188,20)"/><text x="22.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (4 samples, 0.21%)</title><rect x="19" y="340" width="2" height="15" fill="rgb(234,62,15)"/><text x="22.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="19" y="356" width="2" height="15" fill="rgb(228,53,31)"/><text x="22.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="19" y="372" width="2" height="15" fill="rgb(244,26,39)"/><text x="22.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="19" y="388" width="2" height="15" fill="rgb(222,44,42)"/><text x="22.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="19" y="404" width="2" height="15" fill="rgb(214,107,25)"/><text x="22.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="19" y="420" width="2" height="15" fill="rgb(250,118,28)"/><text x="22.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (4 samples, 0.21%)</title><rect x="19" y="436" width="2" height="15" fill="rgb(224,108,6)"/><text x="22.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="19" y="452" width="2" height="15" fill="rgb(249,41,3)"/><text x="22.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.21%)</title><rect x="19" y="468" width="2" height="15" fill="rgb(208,17,47)"/><text x="22.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="19" y="484" width="2" height="15" fill="rgb(211,134,38)"/><text x="22.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="19" y="500" width="2" height="15" fill="rgb(229,83,28)"/><text x="22.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="19" y="516" width="2" height="15" fill="rgb(231,142,2)"/><text x="22.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="19" y="532" width="2" height="15" fill="rgb(230,50,34)"/><text x="22.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="19" y="548" width="2" height="15" fill="rgb(252,46,23)"/><text x="22.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="19" y="564" width="2" height="15" fill="rgb(211,53,11)"/><text x="22.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (4 samples, 0.21%)</title><rect x="19" y="580" width="2" height="15" fill="rgb(249,168,10)"/><text x="22.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="19" y="596" width="2" height="15" fill="rgb(224,91,38)"/><text x="22.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="19" y="612" width="2" height="15" fill="rgb(231,34,34)"/><text x="22.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="19" y="628" width="2" height="15" fill="rgb(227,77,49)"/><text x="22.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="19" y="644" width="2" height="15" fill="rgb(239,17,4)"/><text x="22.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="19" y="660" width="2" height="15" fill="rgb(235,115,50)"/><text x="22.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (4 samples, 0.21%)</title><rect x="19" y="676" width="2" height="15" fill="rgb(250,171,12)"/><text x="22.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="19" y="692" width="2" height="15" fill="rgb(218,175,38)"/><text x="22.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="19" y="708" width="2" height="15" fill="rgb(237,159,4)"/><text x="22.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="19" y="724" width="2" height="15" fill="rgb(228,171,54)"/><text x="22.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="19" y="740" width="2" height="15" fill="rgb(252,46,9)"/><text x="22.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="19" y="756" width="2" height="15" fill="rgb(215,84,50)"/><text x="22.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (4 samples, 0.21%)</title><rect x="19" y="772" width="2" height="15" fill="rgb(242,159,45)"/><text x="22.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="19" y="788" width="2" height="15" fill="rgb(244,71,27)"/><text x="22.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="19" y="804" width="2" height="15" fill="rgb(253,136,50)"/><text x="22.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="19" y="820" width="2" height="15" fill="rgb(213,70,53)"/><text x="22.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="19" y="836" width="2" height="15" fill="rgb(242,83,48)"/><text x="22.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="19" y="852" width="2" height="15" fill="rgb(212,15,2)"/><text x="22.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (4 samples, 0.21%)</title><rect x="19" y="868" width="2" height="15" fill="rgb(222,28,8)"/><text x="22.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="19" y="884" width="2" height="15" fill="rgb(219,198,0)"/><text x="22.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.21%)</title><rect x="19" y="900" width="2" height="15" fill="rgb(244,128,23)"/><text x="22.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="19" y="916" width="2" height="15" fill="rgb(240,228,21)"/><text x="22.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="19" y="932" width="2" height="15" fill="rgb(251,221,40)"/><text x="22.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="19" y="948" width="2" height="15" fill="rgb(228,140,41)"/><text x="22.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="19" y="964" width="2" height="15" fill="rgb(206,69,47)"/><text x="22.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="19" y="980" width="2" height="15" fill="rgb(214,79,7)"/><text x="22.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="19" y="996" width="2" height="15" fill="rgb(224,159,38)"/><text x="22.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (4 samples, 0.21%)</title><rect x="19" y="1012" width="2" height="15" fill="rgb(238,86,47)"/><text x="22.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.21%)</title><rect x="19" y="1028" width="2" height="15" fill="rgb(220,199,35)"/><text x="22.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.21%)</title><rect x="19" y="1044" width="2" height="15" fill="rgb(219,67,3)"/><text x="22.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.21%)</title><rect x="19" y="1060" width="2" height="15" fill="rgb(242,206,10)"/><text x="22.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.21%)</title><rect x="19" y="1076" width="2" height="15" fill="rgb(226,11,23)"/><text x="22.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.21%)</title><rect x="19" y="1092" width="2" height="15" fill="rgb(252,224,31)"/><text x="22.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (2 samples, 0.10%)</title><rect x="20" y="1108" width="1" height="15" fill="rgb(229,54,9)"/><text x="23.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.10%)</title><rect x="20" y="1124" width="1" height="15" fill="rgb(206,117,17)"/><text x="23.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="20" y="1140" width="1" height="15" fill="rgb(227,12,12)"/><text x="23.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="20" y="1156" width="1" height="15" fill="rgb(219,158,16)"/><text x="23.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="20" y="1172" width="1" height="15" fill="rgb(249,142,17)"/><text x="23.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="20" y="1188" width="1" height="15" fill="rgb(221,10,37)"/><text x="23.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="20" y="1204" width="1" height="15" fill="rgb(235,162,24)"/><text x="23.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="20" y="1220" width="1" height="15" fill="rgb(243,195,33)"/><text x="23.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (2 samples, 0.10%)</title><rect x="20" y="1236" width="1" height="15" fill="rgb(239,2,43)"/><text x="23.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.10%)</title><rect x="20" y="1252" width="1" height="15" fill="rgb(231,33,29)"/><text x="23.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="20" y="1268" width="1" height="15" fill="rgb(249,44,25)"/><text x="23.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="20" y="1284" width="1" height="15" fill="rgb(229,154,10)"/><text x="23.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="20" y="1300" width="1" height="15" fill="rgb(249,87,4)"/><text x="23.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="20" y="1316" width="1" height="15" fill="rgb(212,60,44)"/><text x="23.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="20" y="1332" width="1" height="15" fill="rgb(238,119,37)"/><text x="23.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="20" y="1348" width="1" height="15" fill="rgb(226,65,29)"/><text x="23.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (2 samples, 0.10%)</title><rect x="20" y="1364" width="1" height="15" fill="rgb(242,70,0)"/><text x="23.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="20" y="1380" width="1" height="15" fill="rgb(220,214,50)"/><text x="23.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="20" y="1396" width="1" height="15" fill="rgb(242,95,50)"/><text x="23.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="20" y="1412" width="1" height="15" fill="rgb(250,151,13)"/><text x="23.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="20" y="1428" width="1" height="15" fill="rgb(244,42,5)"/><text x="23.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="20" y="1444" width="1" height="15" fill="rgb(243,142,50)"/><text x="23.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py:6) (2 samples, 0.10%)</title><rect x="20" y="1460" width="1" height="15" fill="rgb(246,197,4)"/><text x="23.00" y="1470.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="20" y="1476" width="1" height="15" fill="rgb(243,168,44)"/><text x="23.00" y="1486.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="20" y="1492" width="1" height="15" fill="rgb(250,207,21)"/><text x="23.00" y="1502.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="20" y="1508" width="1" height="15" fill="rgb(205,203,23)"/><text x="23.00" y="1518.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="20" y="1524" width="1" height="15" fill="rgb(233,54,32)"/><text x="23.00" y="1534.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="20" y="1540" width="1" height="15" fill="rgb(250,33,38)"/><text x="23.00" y="1550.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/automation.py:104) (2 samples, 0.10%)</title><rect x="20" y="1556" width="1" height="15" fill="rgb(227,75,11)"/><text x="23.00" y="1566.50"></text></g><g><title>_get_doc_template (skl2onnx/algebra/automation.py:14) (2 samples, 0.10%)</title><rect x="20" y="1572" width="1" height="15" fill="rgb(246,55,40)"/><text x="23.00" y="1582.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="20" y="1588" width="1" height="15" fill="rgb(248,108,11)"/><text x="23.00" y="1598.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="20" y="1604" width="1" height="15" fill="rgb(238,92,52)"/><text x="23.00" y="1614.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="20" y="1620" width="1" height="15" fill="rgb(225,175,43)"/><text x="23.00" y="1630.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="20" y="1636" width="1" height="15" fill="rgb(228,10,18)"/><text x="23.00" y="1646.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="20" y="1652" width="1" height="15" fill="rgb(218,200,12)"/><text x="23.00" y="1662.50"></text></g><g><title>&lt;module&gt; (jinja2/__init__.py:82) (2 samples, 0.10%)</title><rect x="20" y="1668" width="1" height="15" fill="rgb(232,211,43)"/><text x="23.00" y="1678.50"></text></g><g><title>_patch_async (jinja2/__init__.py:78) (2 samples, 0.10%)</title><rect x="20" y="1684" width="1" height="15" fill="rgb(221,224,23)"/><text x="23.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="20" y="1700" width="1" height="15" fill="rgb(214,101,52)"/><text x="23.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="20" y="1716" width="1" height="15" fill="rgb(211,194,21)"/><text x="23.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="20" y="1732" width="1" height="15" fill="rgb(234,42,11)"/><text x="23.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="20" y="1748" width="1" height="15" fill="rgb(227,196,42)"/><text x="23.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="20" y="1764" width="1" height="15" fill="rgb(243,15,25)"/><text x="23.00" y="1774.50"></text></g><g><title>&lt;module&gt; (jinja2/asyncsupport.py:13) (2 samples, 0.10%)</title><rect x="20" y="1780" width="1" height="15" fill="rgb(225,106,15)"/><text x="23.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.10%)</title><rect x="20" y="1796" width="1" height="15" fill="rgb(229,146,40)"/><text x="23.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.10%)</title><rect x="20" y="1812" width="1" height="15" fill="rgb(223,183,20)"/><text x="23.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.10%)</title><rect x="20" y="1828" width="1" height="15" fill="rgb(239,212,3)"/><text x="23.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.10%)</title><rect x="20" y="1844" width="1" height="15" fill="rgb(249,172,47)"/><text x="23.00" y="1854.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.10%)</title><rect x="20" y="1860" width="1" height="15" fill="rgb(249,91,21)"/><text x="23.00" y="1870.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:47) (3 samples, 0.15%)</title><rect x="21" y="52" width="2" height="15" fill="rgb(221,99,25)"/><text x="24.00" y="62.50"></text></g><g><title>profile0_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:46) (3 samples, 0.15%)</title><rect x="21" y="68" width="2" height="15" fill="rgb(247,51,26)"/><text x="24.00" y="78.50"></text></g><g><title>setup_profile0 (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:26) (3 samples, 0.15%)</title><rect x="21" y="84" width="2" height="15" fill="rgb(229,106,29)"/><text x="24.00" y="94.50"></text></g><g><title>profile0 (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:18) (3 samples, 0.15%)</title><rect x="21" y="100" width="2" height="15" fill="rgb(251,90,53)"/><text x="24.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (3 samples, 0.15%)</title><rect x="21" y="116" width="2" height="15" fill="rgb(231,184,23)"/><text x="24.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (3 samples, 0.15%)</title><rect x="21" y="132" width="2" height="15" fill="rgb(230,131,15)"/><text x="24.00" y="142.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:174) (3 samples, 0.15%)</title><rect x="21" y="148" width="2" height="15" fill="rgb(247,228,46)"/><text x="24.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:642) (3 samples, 0.15%)</title><rect x="21" y="164" width="2" height="15" fill="rgb(241,207,38)"/><text x="24.00" y="174.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1601) (3 samples, 0.15%)</title><rect x="21" y="180" width="2" height="15" fill="rgb(248,131,8)"/><text x="24.00" y="190.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:517) (3 samples, 0.15%)</title><rect x="21" y="196" width="2" height="15" fill="rgb(213,160,13)"/><text x="24.00" y="206.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (3 samples, 0.15%)</title><rect x="21" y="212" width="2" height="15" fill="rgb(218,140,27)"/><text x="24.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.15%)</title><rect x="21" y="228" width="2" height="15" fill="rgb(239,56,53)"/><text x="24.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (3 samples, 0.15%)</title><rect x="21" y="244" width="2" height="15" fill="rgb(214,2,35)"/><text x="24.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.15%)</title><rect x="21" y="260" width="2" height="15" fill="rgb(249,21,31)"/><text x="24.00" y="270.50"></text></g><g><title>array_argpartition (methods.c:1454) (3 samples, 0.15%)</title><rect x="21" y="276" width="2" height="15" fill="rgb(217,227,6)"/><text x="24.00" y="286.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (3 samples, 0.15%)</title><rect x="21" y="292" width="2" height="15" fill="rgb(226,79,9)"/><text x="24.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (3 samples, 0.15%)</title><rect x="21" y="308" width="2" height="15" fill="rgb(253,218,46)"/><text x="24.00" y="318.50"></text></g><g><title>aintroselect_double (selection.c.src:322) (3 samples, 0.15%)</title><rect x="21" y="324" width="2" height="15" fill="rgb(253,101,0)"/><text x="24.00" y="334.50"></text></g><g><title>adumb_select_double (selection.c.src:257) (3 samples, 0.15%)</title><rect x="21" y="340" width="2" height="15" fill="rgb(219,0,37)"/><text x="24.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (2 samples, 0.10%)</title><rect x="25" y="164" width="1" height="15" fill="rgb(227,15,17)"/><text x="28.00" y="174.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:155) (2 samples, 0.10%)</title><rect x="25" y="180" width="1" height="15" fill="rgb(230,49,44)"/><text x="28.00" y="190.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:172) (7 samples, 0.36%)</title><rect x="23" y="148" width="4" height="15" fill="rgb(251,184,52)"/><text x="26.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (2 samples, 0.10%)</title><rect x="27" y="164" width="1" height="15" fill="rgb(238,141,8)"/><text x="30.00" y="174.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1562) (2 samples, 0.10%)</title><rect x="29" y="180" width="1" height="15" fill="rgb(231,169,19)"/><text x="32.00" y="190.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:155) (2 samples, 0.10%)</title><rect x="29" y="196" width="1" height="15" fill="rgb(225,228,51)"/><text x="32.00" y="206.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:141) (5 samples, 0.26%)</title><rect x="31" y="244" width="3" height="15" fill="rgb(223,141,17)"/><text x="34.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:515) (2 samples, 0.10%)</title><rect x="33" y="260" width="1" height="15" fill="rgb(248,97,32)"/><text x="36.00" y="270.50"></text></g><g><title>asarray (numpy/core/_asarray.py:85) (2 samples, 0.10%)</title><rect x="33" y="276" width="1" height="15" fill="rgb(211,182,22)"/><text x="36.00" y="286.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:262) (10 samples, 0.51%)</title><rect x="31" y="228" width="6" height="15" fill="rgb(215,25,5)"/><text x="34.00" y="238.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:144) (5 samples, 0.26%)</title><rect x="34" y="244" width="3" height="15" fill="rgb(232,46,25)"/><text x="37.00" y="254.50"></text></g><g><title>PyArray_EinsteinSum (einsum.c.src:2774) (2 samples, 0.10%)</title><rect x="38" y="324" width="1" height="15" fill="rgb(243,201,49)"/><text x="41.00" y="334.50"></text></g><g><title>PyArray_AssignZero (convert.c:542) (2 samples, 0.10%)</title><rect x="38" y="340" width="1" height="15" fill="rgb(253,56,33)"/><text x="41.00" y="350.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:204) (2 samples, 0.10%)</title><rect x="38" y="356" width="1" height="15" fill="rgb(217,205,26)"/><text x="41.00" y="366.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:279) (4 samples, 0.21%)</title><rect x="37" y="228" width="3" height="15" fill="rgb(226,19,2)"/><text x="40.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (3 samples, 0.15%)</title><rect x="38" y="244" width="2" height="15" fill="rgb(243,30,53)"/><text x="41.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;:6) (3 samples, 0.15%)</title><rect x="38" y="260" width="2" height="15" fill="rgb(242,195,34)"/><text x="41.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.15%)</title><rect x="38" y="276" width="2" height="15" fill="rgb(239,111,9)"/><text x="41.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py:1356) (3 samples, 0.15%)</title><rect x="38" y="292" width="2" height="15" fill="rgb(213,215,27)"/><text x="41.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c:2693) (3 samples, 0.15%)</title><rect x="38" y="308" width="2" height="15" fill="rgb(254,42,21)"/><text x="41.00" y="318.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:234) (2 samples, 0.10%)</title><rect x="40" y="276" width="1" height="15" fill="rgb(254,146,31)"/><text x="43.00" y="286.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:295) (4 samples, 0.21%)</title><rect x="40" y="228" width="2" height="15" fill="rgb(222,213,48)"/><text x="43.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (4 samples, 0.21%)</title><rect x="40" y="244" width="2" height="15" fill="rgb(243,164,15)"/><text x="43.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;:6) (4 samples, 0.21%)</title><rect x="40" y="260" width="2" height="15" fill="rgb(220,25,14)"/><text x="43.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.10%)</title><rect x="41" y="276" width="1" height="15" fill="rgb(229,226,45)"/><text x="44.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py:1356) (2 samples, 0.10%)</title><rect x="41" y="292" width="1" height="15" fill="rgb(221,62,53)"/><text x="44.00" y="302.50"></text></g><g><title>sse2_binary_scalar2_multiply_DOUBLE (simd.inc.src:765) (2 samples, 0.10%)</title><rect x="42" y="340" width="1" height="15" fill="rgb(230,41,39)"/><text x="45.00" y="350.50"></text></g><g><title>_mm_mul_pd (emmintrin.h:253) (2 samples, 0.10%)</title><rect x="42" y="356" width="1" height="15" fill="rgb(228,204,6)"/><text x="45.00" y="366.50"></text></g><g><title>array_multiply (number.c:350) (3 samples, 0.15%)</title><rect x="42" y="244" width="2" height="15" fill="rgb(252,55,25)"/><text x="45.00" y="254.50"></text></g><g><title>try_binary_elide (temp_elide.c:350) (3 samples, 0.15%)</title><rect x="42" y="260" width="2" height="15" fill="rgb(230,194,22)"/><text x="45.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.15%)</title><rect x="42" y="276" width="2" height="15" fill="rgb(254,94,39)"/><text x="45.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.15%)</title><rect x="42" y="292" width="2" height="15" fill="rgb(238,166,5)"/><text x="45.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (3 samples, 0.15%)</title><rect x="42" y="308" width="2" height="15" fill="rgb(246,114,25)"/><text x="45.00" y="318.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (3 samples, 0.15%)</title><rect x="42" y="324" width="2" height="15" fill="rgb(248,221,41)"/><text x="45.00" y="334.50"></text></g><g><title>dgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.10%)</title><rect x="44" y="260" width="1" height="15" fill="rgb(214,57,45)"/><text x="47.00" y="270.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.10%)</title><rect x="45" y="260" width="1" height="15" fill="rgb(252,23,50)"/><text x="48.00" y="270.50"></text></g><g><title>exec_blas_async (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.10%)</title><rect x="47" y="388" width="1" height="15" fill="rgb(239,217,52)"/><text x="50.00" y="398.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (3 samples, 0.15%)</title><rect x="48" y="388" width="2" height="15" fill="rgb(228,157,51)"/><text x="51.00" y="398.50"></text></g><g><title>sched_yield (libc-2.29.so) (3 samples, 0.15%)</title><rect x="48" y="404" width="2" height="15" fill="rgb(226,192,23)"/><text x="51.00" y="414.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:303) (14 samples, 0.72%)</title><rect x="42" y="228" width="9" height="15" fill="rgb(227,117,7)"/><text x="45.00" y="238.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (11 samples, 0.56%)</title><rect x="44" y="244" width="7" height="15" fill="rgb(238,6,14)"/><text x="47.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 0.36%)</title><rect x="46" y="260" width="5" height="15" fill="rgb(248,164,12)"/><text x="49.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (7 samples, 0.36%)</title><rect x="46" y="276" width="5" height="15" fill="rgb(249,137,18)"/><text x="49.00" y="286.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (7 samples, 0.36%)</title><rect x="46" y="292" width="5" height="15" fill="rgb(239,207,31)"/><text x="49.00" y="302.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (7 samples, 0.36%)</title><rect x="46" y="308" width="5" height="15" fill="rgb(213,35,29)"/><text x="49.00" y="318.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 0.36%)</title><rect x="46" y="324" width="5" height="15" fill="rgb(210,218,3)"/><text x="49.00" y="334.50"></text></g><g><title>dgemm_thread_tn (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 0.36%)</title><rect x="46" y="340" width="5" height="15" fill="rgb(248,145,10)"/><text x="49.00" y="350.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 0.36%)</title><rect x="46" y="356" width="5" height="15" fill="rgb(234,187,43)"/><text x="49.00" y="366.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (6 samples, 0.31%)</title><rect x="47" y="372" width="4" height="15" fill="rgb(233,132,44)"/><text x="50.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (2 samples, 0.10%)</title><rect x="51" y="292" width="1" height="15" fill="rgb(242,127,38)"/><text x="54.00" y="302.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:603) (2 samples, 0.10%)</title><rect x="52" y="340" width="2" height="15" fill="rgb(251,217,0)"/><text x="55.00" y="350.50"></text></g><g><title>_mm_add_pd (emmintrin.h:229) (2 samples, 0.10%)</title><rect x="52" y="356" width="2" height="15" fill="rgb(254,4,12)"/><text x="55.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (4 samples, 0.21%)</title><rect x="52" y="308" width="3" height="15" fill="rgb(239,8,40)"/><text x="55.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (4 samples, 0.21%)</title><rect x="52" y="324" width="3" height="15" fill="rgb(221,174,19)"/><text x="55.00" y="334.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:604) (2 samples, 0.10%)</title><rect x="54" y="340" width="1" height="15" fill="rgb(216,127,6)"/><text x="57.00" y="350.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (2 samples, 0.10%)</title><rect x="54" y="356" width="1" height="15" fill="rgb(237,21,27)"/><text x="57.00" y="366.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:304) (10 samples, 0.51%)</title><rect x="51" y="228" width="6" height="15" fill="rgb(210,111,5)"/><text x="54.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 0.51%)</title><rect x="51" y="244" width="6" height="15" fill="rgb(206,86,42)"/><text x="54.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (10 samples, 0.51%)</title><rect x="51" y="260" width="6" height="15" fill="rgb(224,181,14)"/><text x="54.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (10 samples, 0.51%)</title><rect x="51" y="276" width="6" height="15" fill="rgb(223,131,2)"/><text x="54.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (7 samples, 0.36%)</title><rect x="52" y="292" width="5" height="15" fill="rgb(229,216,51)"/><text x="55.00" y="302.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (3 samples, 0.15%)</title><rect x="55" y="308" width="2" height="15" fill="rgb(224,177,3)"/><text x="58.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (3 samples, 0.15%)</title><rect x="55" y="324" width="2" height="15" fill="rgb(217,180,28)"/><text x="58.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (3 samples, 0.15%)</title><rect x="55" y="340" width="2" height="15" fill="rgb(206,137,29)"/><text x="58.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:228) (2 samples, 0.10%)</title><rect x="55" y="356" width="2" height="15" fill="rgb(236,60,9)"/><text x="58.00" y="366.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:603) (3 samples, 0.15%)</title><rect x="57" y="340" width="2" height="15" fill="rgb(252,196,40)"/><text x="60.00" y="350.50"></text></g><g><title>_mm_add_pd (emmintrin.h:229) (3 samples, 0.15%)</title><rect x="57" y="356" width="2" height="15" fill="rgb(243,0,34)"/><text x="60.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (6 samples, 0.31%)</title><rect x="57" y="308" width="4" height="15" fill="rgb(252,69,31)"/><text x="60.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (6 samples, 0.31%)</title><rect x="57" y="324" width="4" height="15" fill="rgb(237,20,16)"/><text x="60.00" y="334.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:604) (3 samples, 0.15%)</title><rect x="59" y="340" width="2" height="15" fill="rgb(226,40,9)"/><text x="62.00" y="350.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (3 samples, 0.15%)</title><rect x="59" y="356" width="2" height="15" fill="rgb(252,194,28)"/><text x="62.00" y="366.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:305) (10 samples, 0.51%)</title><rect x="57" y="228" width="6" height="15" fill="rgb(208,135,47)"/><text x="60.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 0.51%)</title><rect x="57" y="244" width="6" height="15" fill="rgb(226,182,5)"/><text x="60.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (10 samples, 0.51%)</title><rect x="57" y="260" width="6" height="15" fill="rgb(207,97,38)"/><text x="60.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (10 samples, 0.51%)</title><rect x="57" y="276" width="6" height="15" fill="rgb(246,218,8)"/><text x="60.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (9 samples, 0.46%)</title><rect x="57" y="292" width="6" height="15" fill="rgb(241,131,49)"/><text x="60.00" y="302.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (3 samples, 0.15%)</title><rect x="61" y="308" width="2" height="15" fill="rgb(241,105,53)"/><text x="64.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (3 samples, 0.15%)</title><rect x="61" y="324" width="2" height="15" fill="rgb(239,95,13)"/><text x="64.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (3 samples, 0.15%)</title><rect x="61" y="340" width="2" height="15" fill="rgb(243,6,26)"/><text x="64.00" y="350.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1867) (4 samples, 0.21%)</title><rect x="63" y="308" width="2" height="15" fill="rgb(251,43,23)"/><text x="66.00" y="318.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1871) (7 samples, 0.36%)</title><rect x="65" y="308" width="4" height="15" fill="rgb(211,95,10)"/><text x="68.00" y="318.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1592) (64 samples, 3.28%)</title><rect x="31" y="180" width="39" height="15" fill="rgb(223,138,47)"/><text x="34.00" y="190.50">pai..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py:1749) (64 samples, 3.28%)</title><rect x="31" y="196" width="39" height="15" fill="rgb(236,216,20)"/><text x="34.00" y="206.50">pai..</text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1348) (64 samples, 3.28%)</title><rect x="31" y="212" width="39" height="15" fill="rgb(212,29,8)"/><text x="34.00" y="222.50">_pa..</text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:306) (12 samples, 0.62%)</title><rect x="63" y="228" width="7" height="15" fill="rgb(235,207,48)"/><text x="66.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (12 samples, 0.62%)</title><rect x="63" y="244" width="7" height="15" fill="rgb(223,87,14)"/><text x="66.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (12 samples, 0.62%)</title><rect x="63" y="260" width="7" height="15" fill="rgb(249,152,15)"/><text x="66.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (12 samples, 0.62%)</title><rect x="63" y="276" width="7" height="15" fill="rgb(232,85,1)"/><text x="66.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (12 samples, 0.62%)</title><rect x="63" y="292" width="7" height="15" fill="rgb(229,17,31)"/><text x="66.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c:1057) (5 samples, 0.26%)</title><rect x="72" y="308" width="3" height="15" fill="rgb(209,99,48)"/><text x="75.00" y="318.50"></text></g><g><title>adumb_select_double (selection.c.src:257) (8 samples, 0.41%)</title><rect x="75" y="340" width="5" height="15" fill="rgb(234,162,49)"/><text x="78.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (45 samples, 2.31%)</title><rect x="75" y="308" width="28" height="15" fill="rgb(242,21,7)"/><text x="78.00" y="318.50">_..</text></g><g><title>aintroselect_double (selection.c.src:322) (45 samples, 2.31%)</title><rect x="75" y="324" width="28" height="15" fill="rgb(250,72,11)"/><text x="78.00" y="334.50">a..</text></g><g><title>adumb_select_double (selection.c.src:258) (37 samples, 1.90%)</title><rect x="80" y="340" width="23" height="15" fill="rgb(221,23,8)"/><text x="83.00" y="350.50">a..</text></g><g><title>DOUBLE_LT (npysort_common.h:130) (35 samples, 1.79%)</title><rect x="81" y="356" width="22" height="15" fill="rgb(227,116,39)"/><text x="84.00" y="366.50">D..</text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:517) (55 samples, 2.82%)</title><rect x="70" y="196" width="33" height="15" fill="rgb(225,98,37)"/><text x="73.00" y="206.50">_k..</text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (53 samples, 2.72%)</title><rect x="71" y="212" width="32" height="15" fill="rgb(213,210,9)"/><text x="74.00" y="222.50">ar..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (53 samples, 2.72%)</title><rect x="71" y="228" width="32" height="15" fill="rgb(216,73,29)"/><text x="74.00" y="238.50">ar..</text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (53 samples, 2.72%)</title><rect x="71" y="244" width="32" height="15" fill="rgb(231,32,25)"/><text x="74.00" y="254.50">ar..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (53 samples, 2.72%)</title><rect x="71" y="260" width="32" height="15" fill="rgb(245,182,43)"/><text x="74.00" y="270.50">_w..</text></g><g><title>array_argpartition (methods.c:1454) (52 samples, 2.67%)</title><rect x="72" y="276" width="31" height="15" fill="rgb(246,176,34)"/><text x="75.00" y="286.50">ar..</text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (52 samples, 2.67%)</title><rect x="72" y="292" width="31" height="15" fill="rgb(237,138,22)"/><text x="75.00" y="302.50">Py..</text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (3 samples, 0.15%)</title><rect x="103" y="212" width="2" height="15" fill="rgb(235,94,33)"/><text x="106.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.15%)</title><rect x="103" y="228" width="2" height="15" fill="rgb(251,117,45)"/><text x="106.00" y="238.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (3 samples, 0.15%)</title><rect x="103" y="244" width="2" height="15" fill="rgb(217,72,37)"/><text x="106.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.15%)</title><rect x="103" y="260" width="2" height="15" fill="rgb(238,113,28)"/><text x="106.00" y="270.50"></text></g><g><title>array_argsort (methods.c:1395) (3 samples, 0.15%)</title><rect x="103" y="276" width="2" height="15" fill="rgb(237,176,52)"/><text x="106.00" y="286.50"></text></g><g><title>PyArray_ArgSort (item_selection.c:1322) (3 samples, 0.15%)</title><rect x="103" y="292" width="2" height="15" fill="rgb(214,188,11)"/><text x="106.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c:1101) (2 samples, 0.10%)</title><rect x="104" y="308" width="1" height="15" fill="rgb(214,96,27)"/><text x="107.00" y="318.50"></text></g><g><title>array_subscript (mapping.c:1666) (3 samples, 0.15%)</title><rect x="105" y="212" width="2" height="15" fill="rgb(222,168,35)"/><text x="108.00" y="222.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1566) (2 samples, 0.10%)</title><rect x="107" y="228" width="2" height="15" fill="rgb(241,202,16)"/><text x="110.00" y="238.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:521) (10 samples, 0.51%)</title><rect x="103" y="196" width="6" height="15" fill="rgb(238,142,32)"/><text x="106.00" y="206.50"></text></g><g><title>array_subscript (mapping.c:1676) (4 samples, 0.21%)</title><rect x="107" y="212" width="2" height="15" fill="rgb(237,144,31)"/><text x="110.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1656) (2 samples, 0.10%)</title><rect x="109" y="212" width="2" height="15" fill="rgb(238,60,24)"/><text x="112.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1676) (2 samples, 0.10%)</title><rect x="111" y="212" width="1" height="15" fill="rgb(217,151,50)"/><text x="114.00" y="222.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1564) (2 samples, 0.10%)</title><rect x="111" y="228" width="1" height="15" fill="rgb(205,76,27)"/><text x="114.00" y="238.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1601) (73 samples, 3.74%)</title><rect x="70" y="180" width="44" height="15" fill="rgb(224,28,16)"/><text x="73.00" y="190.50">pair..</text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:524) (8 samples, 0.41%)</title><rect x="109" y="196" width="5" height="15" fill="rgb(217,52,39)"/><text x="112.00" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.15%)</title><rect x="112" y="212" width="2" height="15" fill="rgb(248,133,36)"/><text x="115.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (2 samples, 0.10%)</title><rect x="113" y="228" width="1" height="15" fill="rgb(233,212,51)"/><text x="116.00" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (2 samples, 0.10%)</title><rect x="113" y="244" width="1" height="15" fill="rgb(220,50,29)"/><text x="116.00" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (2 samples, 0.10%)</title><rect x="113" y="260" width="1" height="15" fill="rgb(239,109,36)"/><text x="116.00" y="270.50"></text></g><g><title>DOUBLE_sqrt (loops.c.src:1584) (2 samples, 0.10%)</title><rect x="113" y="276" width="1" height="15" fill="rgb(232,113,54)"/><text x="116.00" y="286.50"></text></g><g><title>run_unary_simd_sqrt_DOUBLE (simd.inc.src:195) (2 samples, 0.10%)</title><rect x="113" y="292" width="1" height="15" fill="rgb(247,44,0)"/><text x="116.00" y="302.50"></text></g><g><title>sse2_sqrt_DOUBLE (simd.inc.src:1005) (2 samples, 0.10%)</title><rect x="113" y="308" width="1" height="15" fill="rgb(216,114,44)"/><text x="116.00" y="318.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (2 samples, 0.10%)</title><rect x="113" y="324" width="1" height="15" fill="rgb(228,52,9)"/><text x="116.00" y="334.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:642) (143 samples, 7.33%)</title><rect x="28" y="164" width="87" height="15" fill="rgb(209,116,49)"/><text x="31.00" y="174.50">kneighbors..</text></g><g><title>predict (sklearn/neighbors/_regression.py:174) (146 samples, 7.48%)</title><rect x="27" y="148" width="88" height="15" fill="rgb(222,217,8)"/><text x="30.00" y="158.50">predict (s..</text></g><g><title>array_subscript (mapping.c:1676) (3 samples, 0.15%)</title><rect x="116" y="164" width="2" height="15" fill="rgb(253,147,48)"/><text x="119.00" y="174.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1609) (2 samples, 0.10%)</title><rect x="117" y="180" width="1" height="15" fill="rgb(254,225,54)"/><text x="120.00" y="190.50"></text></g><g><title>_mean (numpy/core/_methods.py:151) (2 samples, 0.10%)</title><rect x="118" y="212" width="1" height="15" fill="rgb(243,117,14)"/><text x="121.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (2 samples, 0.10%)</title><rect x="118" y="228" width="1" height="15" fill="rgb(241,69,35)"/><text x="121.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (2 samples, 0.10%)</title><rect x="118" y="244" width="1" height="15" fill="rgb(235,64,52)"/><text x="121.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (2 samples, 0.10%)</title><rect x="118" y="260" width="1" height="15" fill="rgb(217,45,51)"/><text x="121.00" y="270.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:54) (160 samples, 8.20%)</title><rect x="23" y="52" width="97" height="15" fill="rgb(248,226,7)"/><text x="26.00" y="62.50">&lt;module&gt; (b..</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:53) (160 samples, 8.20%)</title><rect x="23" y="68" width="97" height="15" fill="rgb(237,11,17)"/><text x="26.00" y="78.50">profile_skl..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:37) (160 samples, 8.20%)</title><rect x="23" y="84" width="97" height="15" fill="rgb(215,118,38)"/><text x="26.00" y="94.50">setup_profi..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:31) (160 samples, 8.20%)</title><rect x="23" y="100" width="97" height="15" fill="rgb(207,10,19)"/><text x="26.00" y="110.50">profile (be..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (160 samples, 8.20%)</title><rect x="23" y="116" width="97" height="15" fill="rgb(206,2,11)"/><text x="26.00" y="126.50">time_predic..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (160 samples, 8.20%)</title><rect x="23" y="132" width="97" height="15" fill="rgb(220,69,45)"/><text x="26.00" y="142.50">&lt;lambda&gt; (m..</text></g><g><title>predict (sklearn/neighbors/_regression.py:183) (7 samples, 0.36%)</title><rect x="115" y="148" width="5" height="15" fill="rgb(222,174,39)"/><text x="118.00" y="158.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (3 samples, 0.15%)</title><rect x="118" y="164" width="2" height="15" fill="rgb(211,63,49)"/><text x="121.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.15%)</title><rect x="118" y="180" width="2" height="15" fill="rgb(210,100,36)"/><text x="121.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (3 samples, 0.15%)</title><rect x="118" y="196" width="2" height="15" fill="rgb(219,77,15)"/><text x="121.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (2 samples, 0.10%)</title><rect x="123" y="180" width="1" height="15" fill="rgb(214,11,50)"/><text x="126.00" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:39) (2 samples, 0.10%)</title><rect x="124" y="212" width="2" height="15" fill="rgb(242,221,46)"/><text x="127.00" y="222.50"></text></g><g><title>PyArray_ToList (convert.c:120) (2 samples, 0.10%)</title><rect x="124" y="228" width="2" height="15" fill="rgb(254,198,35)"/><text x="127.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c:102) (2 samples, 0.10%)</title><rect x="124" y="244" width="2" height="15" fill="rgb(228,112,15)"/><text x="127.00" y="254.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (2 samples, 0.10%)</title><rect x="127" y="324" width="1" height="15" fill="rgb(231,145,34)"/><text x="130.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c:41) (2 samples, 0.10%)</title><rect x="127" y="340" width="1" height="15" fill="rgb(238,74,8)"/><text x="130.00" y="350.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (5 samples, 0.26%)</title><rect x="126" y="276" width="3" height="15" fill="rgb(223,160,19)"/><text x="129.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (5 samples, 0.26%)</title><rect x="126" y="292" width="3" height="15" fill="rgb(226,111,46)"/><text x="129.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (4 samples, 0.21%)</title><rect x="126" y="308" width="3" height="15" fill="rgb(228,131,35)"/><text x="129.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (6 samples, 0.31%)</title><rect x="126" y="260" width="3" height="15" fill="rgb(210,46,22)"/><text x="129.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (10 samples, 0.51%)</title><rect x="126" y="212" width="6" height="15" fill="rgb(228,83,7)"/><text x="129.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1539) (10 samples, 0.51%)</title><rect x="126" y="228" width="6" height="15" fill="rgb(242,202,1)"/><text x="129.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:516) (10 samples, 0.51%)</title><rect x="126" y="244" width="6" height="15" fill="rgb(232,63,13)"/><text x="129.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c:1938) (4 samples, 0.21%)</title><rect x="129" y="260" width="3" height="15" fill="rgb(234,126,37)"/><text x="132.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (4 samples, 0.21%)</title><rect x="129" y="276" width="3" height="15" fill="rgb(233,175,34)"/><text x="132.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (2 samples, 0.10%)</title><rect x="133" y="228" width="1" height="15" fill="rgb(214,34,8)"/><text x="136.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (2 samples, 0.10%)</title><rect x="133" y="244" width="1" height="15" fill="rgb(251,219,45)"/><text x="136.00" y="254.50"></text></g><g><title>npy_free_cache (alloc.c:147) (4 samples, 0.21%)</title><rect x="134" y="244" width="3" height="15" fill="rgb(239,184,45)"/><text x="137.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c:112) (4 samples, 0.21%)</title><rect x="134" y="260" width="3" height="15" fill="rgb(229,220,17)"/><text x="137.00" y="270.50"></text></g><g><title>PyDataMem_FREE (alloc.c:274) (4 samples, 0.21%)</title><rect x="134" y="276" width="3" height="15" fill="rgb(218,124,53)"/><text x="137.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (8 samples, 0.41%)</title><rect x="132" y="212" width="5" height="15" fill="rgb(235,84,8)"/><text x="135.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:537) (5 samples, 0.26%)</title><rect x="134" y="228" width="3" height="15" fill="rgb(226,109,13)"/><text x="137.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (10 samples, 0.51%)</title><rect x="137" y="212" width="6" height="15" fill="rgb(216,129,50)"/><text x="140.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:87) (2 samples, 0.10%)</title><rect x="143" y="212" width="1" height="15" fill="rgb(225,217,17)"/><text x="146.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (6 samples, 0.31%)</title><rect x="144" y="212" width="4" height="15" fill="rgb(235,40,31)"/><text x="147.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1584) (4 samples, 0.21%)</title><rect x="150" y="228" width="2" height="15" fill="rgb(224,32,18)"/><text x="153.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (3 samples, 0.15%)</title><rect x="150" y="244" width="2" height="15" fill="rgb(218,14,42)"/><text x="153.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (3 samples, 0.15%)</title><rect x="150" y="260" width="2" height="15" fill="rgb(242,81,19)"/><text x="153.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (8 samples, 0.41%)</title><rect x="148" y="212" width="5" height="15" fill="rgb(228,14,31)"/><text x="151.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:392) (2 samples, 0.10%)</title><rect x="161" y="228" width="1" height="15" fill="rgb(245,141,49)"/><text x="164.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (4 samples, 0.21%)</title><rect x="162" y="228" width="2" height="15" fill="rgb(247,126,29)"/><text x="165.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:401) (2 samples, 0.10%)</title><rect x="164" y="228" width="2" height="15" fill="rgb(216,40,6)"/><text x="167.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (5 samples, 0.26%)</title><rect x="173" y="244" width="3" height="15" fill="rgb(216,128,1)"/><text x="176.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (3 samples, 0.15%)</title><rect x="176" y="244" width="2" height="15" fill="rgb(217,208,40)"/><text x="179.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (4 samples, 0.21%)</title><rect x="178" y="244" width="2" height="15" fill="rgb(211,183,19)"/><text x="181.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (6 samples, 0.31%)</title><rect x="181" y="244" width="3" height="15" fill="rgb(229,9,40)"/><text x="184.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (6 samples, 0.31%)</title><rect x="198" y="260" width="4" height="15" fill="rgb(235,128,44)"/><text x="201.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (56 samples, 2.87%)</title><rect x="202" y="260" width="34" height="15" fill="rgb(223,61,43)"/><text x="205.00" y="270.50">ru..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (8 samples, 0.41%)</title><rect x="231" y="276" width="5" height="15" fill="rgb(253,0,31)"/><text x="234.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (6 samples, 0.31%)</title><rect x="268" y="308" width="3" height="15" fill="rgb(242,91,47)"/><text x="271.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1052) (2 samples, 0.10%)</title><rect x="276" y="404" width="1" height="15" fill="rgb(207,205,53)"/><text x="279.00" y="414.50"></text></g><g><title>_array_fill_strides (ctors.c:4085) (2 samples, 0.10%)</title><rect x="276" y="420" width="1" height="15" fill="rgb(242,22,54)"/><text x="279.00" y="430.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (2 samples, 0.10%)</title><rect x="277" y="436" width="2" height="15" fill="rgb(229,80,27)"/><text x="280.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (2 samples, 0.10%)</title><rect x="277" y="452" width="2" height="15" fill="rgb(240,77,43)"/><text x="280.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.10%)</title><rect x="277" y="468" width="2" height="15" fill="rgb(245,219,46)"/><text x="280.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (4 samples, 0.21%)</title><rect x="277" y="404" width="2" height="15" fill="rgb(211,123,19)"/><text x="280.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (3 samples, 0.15%)</title><rect x="277" y="420" width="2" height="15" fill="rgb(253,203,10)"/><text x="280.00" y="430.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (7 samples, 0.36%)</title><rect x="276" y="356" width="4" height="15" fill="rgb(214,103,13)"/><text x="279.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (7 samples, 0.36%)</title><rect x="276" y="372" width="4" height="15" fill="rgb(234,58,26)"/><text x="279.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (7 samples, 0.36%)</title><rect x="276" y="388" width="4" height="15" fill="rgb(245,225,51)"/><text x="279.00" y="398.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (8 samples, 0.41%)</title><rect x="276" y="340" width="4" height="15" fill="rgb(241,73,45)"/><text x="279.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:333) (2 samples, 0.10%)</title><rect x="281" y="356" width="1" height="15" fill="rgb(206,61,48)"/><text x="284.00" y="366.50"></text></g><g><title>arrays_overlap (array_assign.c:162) (2 samples, 0.10%)</title><rect x="281" y="372" width="1" height="15" fill="rgb(243,19,44)"/><text x="284.00" y="382.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c:758) (2 samples, 0.10%)</title><rect x="281" y="388" width="1" height="15" fill="rgb(213,18,41)"/><text x="284.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:120) (4 samples, 0.21%)</title><rect x="282" y="372" width="3" height="15" fill="rgb(234,198,36)"/><text x="285.00" y="382.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c:3673) (2 samples, 0.10%)</title><rect x="283" y="388" width="2" height="15" fill="rgb(253,56,15)"/><text x="286.00" y="398.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c:274) (2 samples, 0.10%)</title><rect x="283" y="404" width="2" height="15" fill="rgb(231,0,13)"/><text x="286.00" y="414.50"></text></g><g><title>PyArray_GetStridedCopyFn (lowlevel_strided_loops.c.src:347) (2 samples, 0.10%)</title><rect x="283" y="420" width="2" height="15" fill="rgb(236,74,22)"/><text x="286.00" y="430.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (3 samples, 0.15%)</title><rect x="285" y="372" width="2" height="15" fill="rgb(205,64,29)"/><text x="288.00" y="382.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (2 samples, 0.10%)</title><rect x="285" y="388" width="2" height="15" fill="rgb(236,210,14)"/><text x="288.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (8 samples, 0.41%)</title><rect x="287" y="372" width="4" height="15" fill="rgb(229,193,7)"/><text x="290.00" y="382.50"></text></g><g><title>0x7f580a06cd94 (libc-2.29.so) (8 samples, 0.41%)</title><rect x="287" y="388" width="4" height="15" fill="rgb(210,149,6)"/><text x="290.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (4 samples, 0.21%)</title><rect x="291" y="372" width="3" height="15" fill="rgb(248,81,13)"/><text x="294.00" y="382.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (3 samples, 0.15%)</title><rect x="292" y="388" width="2" height="15" fill="rgb(208,228,37)"/><text x="295.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (39 samples, 2.00%)</title><rect x="272" y="308" width="24" height="15" fill="rgb(240,210,9)"/><text x="275.00" y="318.50">_..</text></g><g><title>array_copy (methods.c:1133) (33 samples, 1.69%)</title><rect x="276" y="324" width="20" height="15" fill="rgb(209,163,38)"/><text x="279.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c:560) (25 samples, 1.28%)</title><rect x="280" y="340" width="16" height="15" fill="rgb(242,117,43)"/><text x="283.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (22 samples, 1.13%)</title><rect x="282" y="356" width="14" height="15" fill="rgb(221,68,5)"/><text x="285.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (2 samples, 0.10%)</title><rect x="294" y="372" width="2" height="15" fill="rgb(249,27,10)"/><text x="297.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (2 samples, 0.10%)</title><rect x="300" y="356" width="2" height="15" fill="rgb(205,122,43)"/><text x="303.00" y="366.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:80) (2 samples, 0.10%)</title><rect x="300" y="372" width="2" height="15" fill="rgb(250,126,46)"/><text x="303.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (2 samples, 0.10%)</title><rect x="302" y="356" width="1" height="15" fill="rgb(205,160,30)"/><text x="305.00" y="366.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:19) (2 samples, 0.10%)</title><rect x="302" y="372" width="1" height="15" fill="rgb(251,201,17)"/><text x="305.00" y="382.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (6 samples, 0.31%)</title><rect x="300" y="324" width="3" height="15" fill="rgb(229,146,30)"/><text x="303.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (5 samples, 0.26%)</title><rect x="300" y="340" width="3" height="15" fill="rgb(247,82,43)"/><text x="303.00" y="350.50"></text></g><g><title>PyUFunc_DefaultTypeResolver (ufunc_type_resolution.c:288) (2 samples, 0.10%)</title><rect x="305" y="356" width="1" height="15" fill="rgb(207,140,53)"/><text x="308.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1665) (2 samples, 0.10%)</title><rect x="309" y="372" width="2" height="15" fill="rgb(214,203,49)"/><text x="312.00" y="382.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:738) (2 samples, 0.10%)</title><rect x="311" y="404" width="1" height="15" fill="rgb(216,129,8)"/><text x="314.00" y="414.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:757) (2 samples, 0.10%)</title><rect x="312" y="404" width="1" height="15" fill="rgb(206,200,47)"/><text x="315.00" y="414.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (5 samples, 0.26%)</title><rect x="311" y="372" width="3" height="15" fill="rgb(245,11,53)"/><text x="314.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (5 samples, 0.26%)</title><rect x="311" y="388" width="3" height="15" fill="rgb(251,126,24)"/><text x="314.00" y="398.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (10 samples, 0.51%)</title><rect x="308" y="356" width="6" height="15" fill="rgb(212,125,1)"/><text x="311.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (17 samples, 0.87%)</title><rect x="305" y="340" width="10" height="15" fill="rgb(223,114,11)"/><text x="308.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3196) (3 samples, 0.15%)</title><rect x="315" y="340" width="2" height="15" fill="rgb(236,24,21)"/><text x="318.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (4 samples, 0.21%)</title><rect x="319" y="388" width="2" height="15" fill="rgb(207,192,43)"/><text x="322.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (3 samples, 0.15%)</title><rect x="319" y="404" width="2" height="15" fill="rgb(218,160,53)"/><text x="322.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (3 samples, 0.15%)</title><rect x="319" y="420" width="2" height="15" fill="rgb(254,80,1)"/><text x="322.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.15%)</title><rect x="319" y="436" width="2" height="15" fill="rgb(238,76,1)"/><text x="322.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (8 samples, 0.41%)</title><rect x="318" y="356" width="5" height="15" fill="rgb(236,39,23)"/><text x="321.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (7 samples, 0.36%)</title><rect x="319" y="372" width="4" height="15" fill="rgb(221,184,0)"/><text x="322.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (3 samples, 0.15%)</title><rect x="321" y="388" width="2" height="15" fill="rgb(230,146,50)"/><text x="324.00" y="398.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (3 samples, 0.15%)</title><rect x="321" y="404" width="2" height="15" fill="rgb(225,219,31)"/><text x="324.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (2 samples, 0.10%)</title><rect x="322" y="420" width="1" height="15" fill="rgb(238,192,11)"/><text x="325.00" y="430.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1349) (3 samples, 0.15%)</title><rect x="323" y="372" width="2" height="15" fill="rgb(214,89,0)"/><text x="326.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:595) (4 samples, 0.21%)</title><rect x="326" y="388" width="2" height="15" fill="rgb(231,77,21)"/><text x="329.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h:169) (4 samples, 0.21%)</title><rect x="326" y="404" width="2" height="15" fill="rgb(243,224,53)"/><text x="329.00" y="414.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:596) (7 samples, 0.36%)</title><rect x="328" y="388" width="4" height="15" fill="rgb(244,20,13)"/><text x="331.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (7 samples, 0.36%)</title><rect x="328" y="404" width="4" height="15" fill="rgb(211,14,52)"/><text x="331.00" y="414.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (13 samples, 0.67%)</title><rect x="325" y="372" width="8" height="15" fill="rgb(248,48,23)"/><text x="328.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (19 samples, 0.97%)</title><rect x="323" y="356" width="11" height="15" fill="rgb(246,5,25)"/><text x="326.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1355) (2 samples, 0.10%)</title><rect x="333" y="372" width="1" height="15" fill="rgb(229,9,32)"/><text x="336.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (30 samples, 1.54%)</title><rect x="317" y="340" width="18" height="15" fill="rgb(211,11,39)"/><text x="320.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (54 samples, 2.77%)</title><rect x="303" y="324" width="33" height="15" fill="rgb(219,62,27)"/><text x="306.00" y="334.50">uf..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (69 samples, 3.54%)</title><rect x="296" y="308" width="41" height="15" fill="rgb(228,186,27)"/><text x="299.00" y="318.50">_ru..</text></g><g><title>_buffer_clear_info (buffer.c:724) (5 samples, 0.26%)</title><rect x="346" y="356" width="3" height="15" fill="rgb(238,151,11)"/><text x="349.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (7 samples, 0.36%)</title><rect x="345" y="324" width="4" height="15" fill="rgb(219,127,52)"/><text x="348.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (7 samples, 0.36%)</title><rect x="345" y="340" width="4" height="15" fill="rgb(205,23,3)"/><text x="348.00" y="350.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (8 samples, 0.41%)</title><rect x="350" y="324" width="5" height="15" fill="rgb(229,120,52)"/><text x="353.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py:2042) (3 samples, 0.15%)</title><rect x="353" y="340" width="2" height="15" fill="rgb(240,226,8)"/><text x="356.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (5 samples, 0.26%)</title><rect x="359" y="356" width="3" height="15" fill="rgb(254,203,28)"/><text x="362.00" y="366.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (3 samples, 0.15%)</title><rect x="362" y="356" width="2" height="15" fill="rgb(219,171,23)"/><text x="365.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (4 samples, 0.21%)</title><rect x="372" y="388" width="3" height="15" fill="rgb(222,114,34)"/><text x="375.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (20 samples, 1.03%)</title><rect x="369" y="372" width="12" height="15" fill="rgb(205,69,28)"/><text x="372.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (11 samples, 0.56%)</title><rect x="375" y="388" width="6" height="15" fill="rgb(213,195,25)"/><text x="378.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (5 samples, 0.26%)</title><rect x="381" y="372" width="3" height="15" fill="rgb(239,206,16)"/><text x="384.00" y="382.50"></text></g><g><title>0x7f580926f700 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.10%)</title><rect x="391" y="452" width="1" height="15" fill="rgb(240,179,13)"/><text x="394.00" y="462.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (7 samples, 0.36%)</title><rect x="391" y="420" width="4" height="15" fill="rgb(232,156,1)"/><text x="394.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (7 samples, 0.36%)</title><rect x="391" y="436" width="4" height="15" fill="rgb(244,223,48)"/><text x="394.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (3 samples, 0.15%)</title><rect x="393" y="452" width="2" height="15" fill="rgb(210,190,46)"/><text x="396.00" y="462.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (9 samples, 0.46%)</title><rect x="390" y="388" width="5" height="15" fill="rgb(228,55,12)"/><text x="393.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (9 samples, 0.46%)</title><rect x="390" y="404" width="5" height="15" fill="rgb(252,169,38)"/><text x="393.00" y="414.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (14 samples, 0.72%)</title><rect x="395" y="404" width="9" height="15" fill="rgb(228,212,19)"/><text x="398.00" y="414.50"></text></g><g><title>unicode_eq (python3.7) (2 samples, 0.10%)</title><rect x="403" y="420" width="1" height="15" fill="rgb(227,102,35)"/><text x="406.00" y="430.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (2 samples, 0.10%)</title><rect x="404" y="452" width="2" height="15" fill="rgb(250,153,23)"/><text x="407.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4564) (6 samples, 0.31%)</title><rect x="404" y="404" width="3" height="15" fill="rgb(234,74,49)"/><text x="407.00" y="414.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (5 samples, 0.26%)</title><rect x="404" y="420" width="3" height="15" fill="rgb(215,33,25)"/><text x="407.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (5 samples, 0.26%)</title><rect x="404" y="436" width="3" height="15" fill="rgb(245,140,22)"/><text x="407.00" y="446.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3635) (2 samples, 0.10%)</title><rect x="408" y="420" width="1" height="15" fill="rgb(245,103,19)"/><text x="411.00" y="430.50"></text></g><g><title>_get_identity (ufunc_object.c:2464) (2 samples, 0.10%)</title><rect x="408" y="436" width="1" height="15" fill="rgb(213,6,21)"/><text x="411.00" y="446.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (4 samples, 0.21%)</title><rect x="409" y="420" width="3" height="15" fill="rgb(245,117,29)"/><text x="412.00" y="430.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (4 samples, 0.21%)</title><rect x="409" y="436" width="3" height="15" fill="rgb(218,109,30)"/><text x="412.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (4 samples, 0.21%)</title><rect x="409" y="452" width="3" height="15" fill="rgb(211,190,1)"/><text x="412.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (2 samples, 0.10%)</title><rect x="413" y="500" width="1" height="15" fill="rgb(213,4,9)"/><text x="416.00" y="510.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (2 samples, 0.10%)</title><rect x="413" y="516" width="1" height="15" fill="rgb(224,33,19)"/><text x="416.00" y="526.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (2 samples, 0.10%)</title><rect x="414" y="500" width="1" height="15" fill="rgb(217,79,32)"/><text x="417.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (2 samples, 0.10%)</title><rect x="414" y="516" width="1" height="15" fill="rgb(224,44,15)"/><text x="417.00" y="526.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (4 samples, 0.21%)</title><rect x="415" y="500" width="3" height="15" fill="rgb(254,10,16)"/><text x="418.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (4 samples, 0.21%)</title><rect x="415" y="516" width="3" height="15" fill="rgb(214,177,12)"/><text x="418.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (4 samples, 0.21%)</title><rect x="415" y="532" width="3" height="15" fill="rgb(220,115,43)"/><text x="418.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (4 samples, 0.21%)</title><rect x="415" y="548" width="3" height="15" fill="rgb(218,26,0)"/><text x="418.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.21%)</title><rect x="415" y="564" width="3" height="15" fill="rgb(251,69,48)"/><text x="418.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (2 samples, 0.10%)</title><rect x="418" y="500" width="1" height="15" fill="rgb(249,96,19)"/><text x="421.00" y="510.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (13 samples, 0.67%)</title><rect x="412" y="436" width="8" height="15" fill="rgb(229,161,24)"/><text x="415.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (13 samples, 0.67%)</title><rect x="412" y="452" width="8" height="15" fill="rgb(234,73,46)"/><text x="415.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (11 samples, 0.56%)</title><rect x="413" y="468" width="7" height="15" fill="rgb(241,110,15)"/><text x="416.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (11 samples, 0.56%)</title><rect x="413" y="484" width="7" height="15" fill="rgb(226,28,39)"/><text x="416.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:415) (3 samples, 0.15%)</title><rect x="420" y="452" width="1" height="15" fill="rgb(227,106,11)"/><text x="423.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:255) (3 samples, 0.15%)</title><rect x="422" y="468" width="2" height="15" fill="rgb(254,34,30)"/><text x="425.00" y="478.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c:3799) (2 samples, 0.10%)</title><rect x="423" y="484" width="1" height="15" fill="rgb(220,228,11)"/><text x="426.00" y="494.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c:3514) (2 samples, 0.10%)</title><rect x="423" y="500" width="1" height="15" fill="rgb(229,77,2)"/><text x="426.00" y="510.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c:741) (2 samples, 0.10%)</title><rect x="423" y="516" width="1" height="15" fill="rgb(251,80,14)"/><text x="426.00" y="526.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:57) (3 samples, 0.15%)</title><rect x="424" y="484" width="2" height="15" fill="rgb(227,138,50)"/><text x="427.00" y="494.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c:3869) (3 samples, 0.15%)</title><rect x="424" y="500" width="2" height="15" fill="rgb(217,130,36)"/><text x="427.00" y="510.50"></text></g><g><title>qsort_r (libc-2.29.so) (2 samples, 0.10%)</title><rect x="424" y="516" width="2" height="15" fill="rgb(227,171,5)"/><text x="427.00" y="526.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:80) (2 samples, 0.10%)</title><rect x="426" y="484" width="1" height="15" fill="rgb(239,166,42)"/><text x="429.00" y="494.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (2 samples, 0.10%)</title><rect x="426" y="500" width="1" height="15" fill="rgb(215,139,15)"/><text x="429.00" y="510.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (7 samples, 0.36%)</title><rect x="424" y="468" width="4" height="15" fill="rgb(244,24,21)"/><text x="427.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (15 samples, 0.77%)</title><rect x="420" y="436" width="9" height="15" fill="rgb(217,178,21)"/><text x="423.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (12 samples, 0.62%)</title><rect x="421" y="452" width="8" height="15" fill="rgb(220,162,23)"/><text x="424.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (5 samples, 0.26%)</title><rect x="430" y="452" width="3" height="15" fill="rgb(221,39,14)"/><text x="433.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (5 samples, 0.26%)</title><rect x="430" y="468" width="3" height="15" fill="rgb(209,125,36)"/><text x="433.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (2 samples, 0.10%)</title><rect x="437" y="452" width="1" height="15" fill="rgb(207,52,48)"/><text x="440.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (18 samples, 0.92%)</title><rect x="429" y="436" width="11" height="15" fill="rgb(248,201,51)"/><text x="432.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (2 samples, 0.10%)</title><rect x="439" y="452" width="1" height="15" fill="rgb(223,136,46)"/><text x="442.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3533) (4 samples, 0.21%)</title><rect x="443" y="452" width="2" height="15" fill="rgb(243,198,52)"/><text x="446.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3534) (2 samples, 0.10%)</title><rect x="445" y="452" width="1" height="15" fill="rgb(222,50,13)"/><text x="448.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3536) (6 samples, 0.31%)</title><rect x="447" y="452" width="3" height="15" fill="rgb(243,184,54)"/><text x="450.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3537) (2 samples, 0.10%)</title><rect x="450" y="452" width="2" height="15" fill="rgb(220,79,45)"/><text x="453.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3538) (2 samples, 0.10%)</title><rect x="452" y="452" width="1" height="15" fill="rgb(229,159,20)"/><text x="455.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3540) (6 samples, 0.31%)</title><rect x="453" y="452" width="3" height="15" fill="rgb(210,45,39)"/><text x="456.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3541) (8 samples, 0.41%)</title><rect x="456" y="452" width="5" height="15" fill="rgb(251,161,7)"/><text x="459.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1741) (6 samples, 0.31%)</title><rect x="463" y="468" width="4" height="15" fill="rgb(247,71,34)"/><text x="466.00" y="478.50"></text></g><g><title>FLOAT_add (loops.c.src:1742) (12 samples, 0.62%)</title><rect x="467" y="468" width="7" height="15" fill="rgb(249,190,31)"/><text x="470.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1662) (11 samples, 0.56%)</title><rect x="484" y="484" width="6" height="15" fill="rgb(210,222,6)"/><text x="487.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1667) (37 samples, 1.90%)</title><rect x="491" y="484" width="22" height="15" fill="rgb(217,154,26)"/><text x="494.00" y="494.50">p..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1668) (2 samples, 0.10%)</title><rect x="513" y="484" width="2" height="15" fill="rgb(231,129,28)"/><text x="516.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (72 samples, 3.69%)</title><rect x="474" y="468" width="44" height="15" fill="rgb(235,38,54)"/><text x="477.00" y="478.50">FLOA..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1721) (5 samples, 0.26%)</title><rect x="515" y="484" width="3" height="15" fill="rgb(232,182,31)"/><text x="518.00" y="494.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:194) (6 samples, 0.31%)</title><rect x="518" y="468" width="4" height="15" fill="rgb(242,69,16)"/><text x="521.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:229) (2 samples, 0.10%)</title><rect x="522" y="468" width="1" height="15" fill="rgb(210,214,52)"/><text x="525.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:235) (7 samples, 0.36%)</title><rect x="523" y="468" width="4" height="15" fill="rgb(208,126,53)"/><text x="526.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:239) (4 samples, 0.21%)</title><rect x="527" y="468" width="3" height="15" fill="rgb(211,199,10)"/><text x="530.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:240) (5 samples, 0.26%)</title><rect x="530" y="468" width="3" height="15" fill="rgb(205,110,23)"/><text x="533.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (6 samples, 0.31%)</title><rect x="533" y="468" width="3" height="15" fill="rgb(240,68,46)"/><text x="536.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:243) (6 samples, 0.31%)</title><rect x="536" y="468" width="4" height="15" fill="rgb(254,134,10)"/><text x="539.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:244) (2 samples, 0.10%)</title><rect x="540" y="468" width="1" height="15" fill="rgb(219,139,32)"/><text x="543.00" y="478.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (140 samples, 7.18%)</title><rect x="461" y="452" width="85" height="15" fill="rgb(244,31,13)"/><text x="464.00" y="462.50">reduce_loo..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:268) (7 samples, 0.36%)</title><rect x="542" y="468" width="4" height="15" fill="rgb(218,141,7)"/><text x="545.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (174 samples, 8.92%)</title><rect x="442" y="436" width="105" height="15" fill="rgb(223,86,8)"/><text x="445.00" y="446.50">PyUFunc_Redu..</text></g><g><title>reduce_loop (ufunc_object.c:3574) (2 samples, 0.10%)</title><rect x="546" y="452" width="1" height="15" fill="rgb(212,3,30)"/><text x="549.00" y="462.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (3 samples, 0.15%)</title><rect x="548" y="452" width="2" height="15" fill="rgb(253,227,19)"/><text x="551.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (235 samples, 12.05%)</title><rect x="408" y="404" width="142" height="15" fill="rgb(207,14,34)"/><text x="411.00" y="414.50">PyUFunc_GenericRed..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (229 samples, 11.74%)</title><rect x="412" y="420" width="138" height="15" fill="rgb(211,21,0)"/><text x="415.00" y="430.50">PyUFunc_Reduce (u..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (4 samples, 0.21%)</title><rect x="548" y="436" width="2" height="15" fill="rgb(230,70,45)"/><text x="551.00" y="446.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (320 samples, 16.40%)</title><rect x="357" y="340" width="194" height="15" fill="rgb(226,54,49)"/><text x="360.00" y="350.50">array_implement_array_fun..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (309 samples, 15.84%)</title><rect x="364" y="356" width="187" height="15" fill="rgb(219,42,49)"/><text x="367.00" y="366.50">sum (numpy/core/fromnume..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (275 samples, 14.10%)</title><rect x="384" y="372" width="167" height="15" fill="rgb(241,64,9)"/><text x="387.00" y="382.50">_wrapreduction (numpy..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (257 samples, 13.17%)</title><rect x="395" y="388" width="156" height="15" fill="rgb(250,152,24)"/><text x="398.00" y="398.50">ufunc_reduce (ufunc_..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (491 samples, 25.17%)</title><rect x="254" y="276" width="297" height="15" fill="rgb(229,6,7)"/><text x="257.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py:34..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (479 samples, 24.55%)</title><rect x="262" y="292" width="289" height="15" fill="rgb(209,104,44)"/><text x="265.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py:2..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (354 samples, 18.14%)</title><rect x="337" y="308" width="214" height="15" fill="rgb(247,137,35)"/><text x="340.00" y="318.50">_run (mlprodict/onnxrt/ops_c..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (325 samples, 16.66%)</title><rect x="355" y="324" width="196" height="15" fill="rgb(224,192,0)"/><text x="358.00" y="334.50">sum (&lt;__array_function__ ..</text></g><g><title>array_descr_get (getset.c:207) (2 samples, 0.10%)</title><rect x="554" y="292" width="1" height="15" fill="rgb(210,31,26)"/><text x="557.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (10 samples, 0.51%)</title><rect x="551" y="276" width="6" height="15" fill="rgb(234,226,22)"/><text x="554.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:527) (2 samples, 0.10%)</title><rect x="565" y="308" width="1" height="15" fill="rgb(224,207,41)"/><text x="568.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (3 samples, 0.15%)</title><rect x="570" y="324" width="2" height="15" fill="rgb(212,95,31)"/><text x="573.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (2 samples, 0.10%)</title><rect x="571" y="340" width="1" height="15" fill="rgb(242,85,32)"/><text x="574.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (2 samples, 0.10%)</title><rect x="572" y="340" width="1" height="15" fill="rgb(238,151,34)"/><text x="575.00" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1102) (2 samples, 0.10%)</title><rect x="572" y="356" width="1" height="15" fill="rgb(227,27,29)"/><text x="575.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (3 samples, 0.15%)</title><rect x="573" y="340" width="2" height="15" fill="rgb(214,153,39)"/><text x="576.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (3 samples, 0.15%)</title><rect x="573" y="356" width="2" height="15" fill="rgb(248,138,38)"/><text x="576.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (3 samples, 0.15%)</title><rect x="573" y="372" width="2" height="15" fill="rgb(217,202,23)"/><text x="576.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (3 samples, 0.15%)</title><rect x="576" y="340" width="2" height="15" fill="rgb(245,192,43)"/><text x="579.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:319) (2 samples, 0.10%)</title><rect x="581" y="388" width="1" height="15" fill="rgb(224,217,54)"/><text x="584.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (2 samples, 0.10%)</title><rect x="583" y="452" width="1" height="15" fill="rgb(244,76,31)"/><text x="586.00" y="462.50"></text></g><g><title>array_alloc (arrayobject.c:1770) (2 samples, 0.10%)</title><rect x="583" y="468" width="1" height="15" fill="rgb(213,175,43)"/><text x="586.00" y="478.50"></text></g><g><title>0x7f580a04ddb0 (libc-2.29.so) (3 samples, 0.15%)</title><rect x="586" y="532" width="2" height="15" fill="rgb(213,193,8)"/><text x="589.00" y="542.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (7 samples, 0.36%)</title><rect x="584" y="452" width="4" height="15" fill="rgb(241,212,49)"/><text x="587.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (7 samples, 0.36%)</title><rect x="584" y="468" width="4" height="15" fill="rgb(244,27,19)"/><text x="587.00" y="478.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (6 samples, 0.31%)</title><rect x="585" y="484" width="3" height="15" fill="rgb(229,47,42)"/><text x="588.00" y="494.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (6 samples, 0.31%)</title><rect x="585" y="500" width="3" height="15" fill="rgb(252,200,52)"/><text x="588.00" y="510.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.31%)</title><rect x="585" y="516" width="3" height="15" fill="rgb(218,227,11)"/><text x="588.00" y="526.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (10 samples, 0.51%)</title><rect x="583" y="404" width="6" height="15" fill="rgb(224,158,19)"/><text x="586.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (10 samples, 0.51%)</title><rect x="583" y="420" width="6" height="15" fill="rgb(226,2,3)"/><text x="586.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (10 samples, 0.51%)</title><rect x="583" y="436" width="6" height="15" fill="rgb(222,77,24)"/><text x="586.00" y="446.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2995) (2 samples, 0.10%)</title><rect x="590" y="404" width="1" height="15" fill="rgb(237,25,31)"/><text x="593.00" y="414.50"></text></g><g><title>IsUintAligned (array_assign.c:148) (2 samples, 0.10%)</title><rect x="590" y="420" width="1" height="15" fill="rgb(221,94,10)"/><text x="593.00" y="430.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (17 samples, 0.87%)</title><rect x="582" y="388" width="11" height="15" fill="rgb(213,47,3)"/><text x="585.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (2 samples, 0.10%)</title><rect x="593" y="388" width="1" height="15" fill="rgb(253,205,40)"/><text x="596.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (26 samples, 1.33%)</title><rect x="579" y="372" width="15" height="15" fill="rgb(231,91,49)"/><text x="582.00" y="382.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (10 samples, 0.51%)</title><rect x="597" y="420" width="6" height="15" fill="rgb(225,161,13)"/><text x="600.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1014) (7 samples, 0.36%)</title><rect x="603" y="420" width="4" height="15" fill="rgb(226,63,49)"/><text x="606.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (13 samples, 0.67%)</title><rect x="607" y="420" width="8" height="15" fill="rgb(248,12,46)"/><text x="610.00" y="430.50"></text></g><g><title>0x7f580a06cd50 (libc-2.29.so) (6 samples, 0.31%)</title><rect x="615" y="436" width="4" height="15" fill="rgb(241,158,51)"/><text x="618.00" y="446.50"></text></g><g><title>0x7f580a06cd5f (libc-2.29.so) (3 samples, 0.15%)</title><rect x="619" y="436" width="1" height="15" fill="rgb(242,45,8)"/><text x="622.00" y="446.50"></text></g><g><title>0x7f580a06cd67 (libc-2.29.so) (4 samples, 0.21%)</title><rect x="620" y="436" width="3" height="15" fill="rgb(205,111,2)"/><text x="623.00" y="446.50"></text></g><g><title>0x7f580a06cd6f (libc-2.29.so) (10 samples, 0.51%)</title><rect x="623" y="436" width="6" height="15" fill="rgb(222,184,39)"/><text x="626.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (27 samples, 1.38%)</title><rect x="615" y="420" width="16" height="15" fill="rgb(207,133,44)"/><text x="618.00" y="430.50"></text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src:330) (3 samples, 0.15%)</title><rect x="629" y="436" width="2" height="15" fill="rgb(241,198,33)"/><text x="632.00" y="446.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (64 samples, 3.28%)</title><rect x="594" y="372" width="39" height="15" fill="rgb(240,82,47)"/><text x="597.00" y="382.50">ite..</text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (62 samples, 3.18%)</title><rect x="596" y="388" width="37" height="15" fill="rgb(210,91,8)"/><text x="599.00" y="398.50">Npy..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (60 samples, 3.08%)</title><rect x="597" y="404" width="36" height="15" fill="rgb(225,21,18)"/><text x="600.00" y="414.50">npy..</text></g><g><title>iterator_loop (ufunc_object.c:1576) (4 samples, 0.21%)</title><rect x="634" y="372" width="2" height="15" fill="rgb(233,145,46)"/><text x="637.00" y="382.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:603) (8 samples, 0.41%)</title><rect x="637" y="420" width="5" height="15" fill="rgb(214,89,3)"/><text x="640.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h:163) (8 samples, 0.41%)</title><rect x="637" y="436" width="5" height="15" fill="rgb(228,140,43)"/><text x="640.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (11 samples, 0.56%)</title><rect x="636" y="388" width="7" height="15" fill="rgb(210,143,26)"/><text x="639.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (11 samples, 0.56%)</title><rect x="636" y="404" width="7" height="15" fill="rgb(227,56,15)"/><text x="639.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:604) (2 samples, 0.10%)</title><rect x="642" y="420" width="1" height="15" fill="rgb(232,92,11)"/><text x="645.00" y="430.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (2 samples, 0.10%)</title><rect x="642" y="436" width="1" height="15" fill="rgb(224,221,39)"/><text x="645.00" y="446.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (15 samples, 0.77%)</title><rect x="636" y="372" width="9" height="15" fill="rgb(245,21,17)"/><text x="639.00" y="382.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:309) (2 samples, 0.10%)</title><rect x="644" y="388" width="1" height="15" fill="rgb(242,14,11)"/><text x="647.00" y="398.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (3 samples, 0.15%)</title><rect x="645" y="388" width="2" height="15" fill="rgb(206,212,16)"/><text x="648.00" y="398.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (126 samples, 6.46%)</title><rect x="572" y="324" width="76" height="15" fill="rgb(217,169,32)"/><text x="575.00" y="334.50">ufunc_ge..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (116 samples, 5.95%)</title><rect x="578" y="340" width="70" height="15" fill="rgb(251,55,4)"/><text x="581.00" y="350.50">PyUFunc..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (115 samples, 5.89%)</title><rect x="579" y="356" width="69" height="15" fill="rgb(236,96,32)"/><text x="582.00" y="366.50">execute..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (5 samples, 0.26%)</title><rect x="645" y="372" width="3" height="15" fill="rgb(206,206,19)"/><text x="648.00" y="382.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (152 samples, 7.79%)</title><rect x="557" y="276" width="92" height="15" fill="rgb(253,52,12)"/><text x="560.00" y="286.50">run (mlpro..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (145 samples, 7.43%)</title><rect x="562" y="292" width="87" height="15" fill="rgb(248,100,52)"/><text x="565.00" y="302.50">run (mlpro..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (138 samples, 7.07%)</title><rect x="566" y="308" width="83" height="15" fill="rgb(253,80,53)"/><text x="569.00" y="318.50">_run (mlp..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (689 samples, 35.32%)</title><rect x="236" y="260" width="416" height="15" fill="rgb(248,9,49)"/><text x="239.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (5 samples, 0.26%)</title><rect x="649" y="276" width="3" height="15" fill="rgb(223,115,15)"/><text x="652.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (16 samples, 0.82%)</title><rect x="652" y="260" width="10" height="15" fill="rgb(254,138,48)"/><text x="655.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (10 samples, 0.51%)</title><rect x="662" y="260" width="6" height="15" fill="rgb(229,171,18)"/><text x="665.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (4 samples, 0.21%)</title><rect x="668" y="260" width="3" height="15" fill="rgb(225,174,3)"/><text x="671.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (23 samples, 1.18%)</title><rect x="671" y="260" width="13" height="15" fill="rgb(243,212,18)"/><text x="674.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (835 samples, 42.80%)</title><rect x="184" y="244" width="505" height="15" fill="rgb(252,96,15)"/><text x="187.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (8 samples, 0.41%)</title><rect x="684" y="260" width="5" height="15" fill="rgb(230,106,2)"/><text x="687.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:534) (2 samples, 0.10%)</title><rect x="689" y="244" width="2" height="15" fill="rgb(240,229,18)"/><text x="692.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (20 samples, 1.03%)</title><rect x="691" y="244" width="12" height="15" fill="rgb(212,73,18)"/><text x="694.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (11 samples, 0.56%)</title><rect x="696" y="260" width="7" height="15" fill="rgb(209,224,32)"/><text x="699.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (2 samples, 0.10%)</title><rect x="703" y="244" width="1" height="15" fill="rgb(214,210,35)"/><text x="706.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (912 samples, 46.75%)</title><rect x="153" y="212" width="551" height="15" fill="rgb(245,211,15)"/><text x="156.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (891 samples, 45.67%)</title><rect x="166" y="228" width="538" height="15" fill="rgb(210,173,10)"/><text x="169.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (8 samples, 0.41%)</title><rect x="704" y="212" width="5" height="15" fill="rgb(250,2,25)"/><text x="707.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (4 samples, 0.21%)</title><rect x="707" y="228" width="2" height="15" fill="rgb(226,181,2)"/><text x="710.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (7 samples, 0.36%)</title><rect x="709" y="212" width="5" height="15" fill="rgb(217,202,45)"/><text x="712.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (9 samples, 0.46%)</title><rect x="722" y="228" width="5" height="15" fill="rgb(240,218,45)"/><text x="725.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:234) (3 samples, 0.15%)</title><rect x="730" y="244" width="2" height="15" fill="rgb(239,207,32)"/><text x="733.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (2 samples, 0.10%)</title><rect x="732" y="260" width="1" height="15" fill="rgb(211,195,26)"/><text x="735.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (8 samples, 0.41%)</title><rect x="733" y="260" width="5" height="15" fill="rgb(246,168,5)"/><text x="736.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (6 samples, 0.31%)</title><rect x="735" y="276" width="3" height="15" fill="rgb(216,170,48)"/><text x="738.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:576) (4 samples, 0.21%)</title><rect x="738" y="260" width="3" height="15" fill="rgb(228,74,0)"/><text x="741.00" y="270.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c:1184) (2 samples, 0.10%)</title><rect x="740" y="276" width="1" height="15" fill="rgb(249,9,24)"/><text x="743.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (4 samples, 0.21%)</title><rect x="741" y="260" width="2" height="15" fill="rgb(225,115,15)"/><text x="744.00" y="270.50"></text></g><g><title>array_reshape (methods.c:186) (4 samples, 0.21%)</title><rect x="747" y="276" width="2" height="15" fill="rgb(207,86,30)"/><text x="750.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:53) (3 samples, 0.15%)</title><rect x="747" y="292" width="2" height="15" fill="rgb(248,148,33)"/><text x="750.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c:954) (2 samples, 0.10%)</title><rect x="752" y="308" width="1" height="15" fill="rgb(227,72,5)"/><text x="755.00" y="318.50"></text></g><g><title>array_reshape (methods.c:195) (8 samples, 0.41%)</title><rect x="749" y="276" width="5" height="15" fill="rgb(228,150,33)"/><text x="752.00" y="286.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (3 samples, 0.15%)</title><rect x="752" y="292" width="2" height="15" fill="rgb(235,111,20)"/><text x="755.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (2 samples, 0.10%)</title><rect x="755" y="324" width="1" height="15" fill="rgb(240,106,34)"/><text x="758.00" y="334.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (2 samples, 0.10%)</title><rect x="755" y="340" width="1" height="15" fill="rgb(237,33,43)"/><text x="758.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (72 samples, 3.69%)</title><rect x="714" y="212" width="43" height="15" fill="rgb(217,27,17)"/><text x="717.00" y="222.50">_run..</text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (48 samples, 2.46%)</title><rect x="728" y="228" width="29" height="15" fill="rgb(210,53,44)"/><text x="731.00" y="238.50">ex..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (42 samples, 2.15%)</title><rect x="732" y="244" width="25" height="15" fill="rgb(234,173,54)"/><text x="735.00" y="254.50">a..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (23 samples, 1.18%)</title><rect x="743" y="260" width="14" height="15" fill="rgb(216,51,42)"/><text x="746.00" y="270.50"></text></g><g><title>array_reshape (methods.c:210) (5 samples, 0.26%)</title><rect x="754" y="276" width="3" height="15" fill="rgb(248,209,27)"/><text x="757.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (5 samples, 0.26%)</title><rect x="754" y="292" width="3" height="15" fill="rgb(209,30,46)"/><text x="757.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (4 samples, 0.21%)</title><rect x="755" y="308" width="2" height="15" fill="rgb(250,117,0)"/><text x="758.00" y="318.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (3 samples, 0.15%)</title><rect x="758" y="308" width="1" height="15" fill="rgb(222,183,27)"/><text x="761.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (2 samples, 0.10%)</title><rect x="758" y="324" width="1" height="15" fill="rgb(232,164,3)"/><text x="761.00" y="334.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (6 samples, 0.31%)</title><rect x="757" y="260" width="4" height="15" fill="rgb(241,221,54)"/><text x="760.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (5 samples, 0.26%)</title><rect x="758" y="276" width="3" height="15" fill="rgb(252,76,17)"/><text x="761.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.26%)</title><rect x="758" y="292" width="3" height="15" fill="rgb(237,159,8)"/><text x="761.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:129) (2 samples, 0.10%)</title><rect x="759" y="308" width="2" height="15" fill="rgb(228,132,27)"/><text x="762.00" y="318.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (2 samples, 0.10%)</title><rect x="761" y="372" width="1" height="15" fill="rgb(215,203,10)"/><text x="764.00" y="382.50"></text></g><g><title>0x7f580a06cd94 (libc-2.29.so) (2 samples, 0.10%)</title><rect x="761" y="388" width="1" height="15" fill="rgb(233,111,28)"/><text x="764.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (11 samples, 0.56%)</title><rect x="757" y="212" width="7" height="15" fill="rgb(249,222,34)"/><text x="760.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (11 samples, 0.56%)</title><rect x="757" y="228" width="7" height="15" fill="rgb(231,53,18)"/><text x="760.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 0.56%)</title><rect x="757" y="244" width="7" height="15" fill="rgb(254,172,35)"/><text x="760.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (5 samples, 0.26%)</title><rect x="761" y="260" width="3" height="15" fill="rgb(246,115,35)"/><text x="764.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (5 samples, 0.26%)</title><rect x="761" y="276" width="3" height="15" fill="rgb(222,163,8)"/><text x="764.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.26%)</title><rect x="761" y="292" width="3" height="15" fill="rgb(251,98,27)"/><text x="764.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (5 samples, 0.26%)</title><rect x="761" y="308" width="3" height="15" fill="rgb(227,68,43)"/><text x="764.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (5 samples, 0.26%)</title><rect x="761" y="324" width="3" height="15" fill="rgb(246,107,14)"/><text x="764.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (5 samples, 0.26%)</title><rect x="761" y="340" width="3" height="15" fill="rgb(230,203,47)"/><text x="764.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (5 samples, 0.26%)</title><rect x="761" y="356" width="3" height="15" fill="rgb(247,133,0)"/><text x="764.00" y="366.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:26) (2 samples, 0.10%)</title><rect x="764" y="244" width="1" height="15" fill="rgb(215,93,29)"/><text x="767.00" y="254.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c:319) (12 samples, 0.62%)</title><rect x="766" y="388" width="7" height="15" fill="rgb(240,20,45)"/><text x="769.00" y="398.50"></text></g><g><title>_new_argsortlike (item_selection.c:1048) (15 samples, 0.77%)</title><rect x="765" y="356" width="9" height="15" fill="rgb(240,78,18)"/><text x="768.00" y="366.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src:1915) (14 samples, 0.72%)</title><rect x="766" y="372" width="8" height="15" fill="rgb(239,205,10)"/><text x="769.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c:331) (2 samples, 0.10%)</title><rect x="773" y="388" width="1" height="15" fill="rgb(230,35,33)"/><text x="776.00" y="398.50"></text></g><g><title>_new_argsortlike (item_selection.c:1057) (4 samples, 0.21%)</title><rect x="775" y="356" width="2" height="15" fill="rgb(253,12,13)"/><text x="778.00" y="366.50"></text></g><g><title>adumb_select_float (selection.c.src:257) (6 samples, 0.31%)</title><rect x="777" y="388" width="4" height="15" fill="rgb(234,216,16)"/><text x="780.00" y="398.50"></text></g><g><title>adumb_select_float (selection.c.src:258) (44 samples, 2.26%)</title><rect x="781" y="388" width="26" height="15" fill="rgb(213,86,37)"/><text x="784.00" y="398.50">a..</text></g><g><title>FLOAT_LT (npysort_common.h:123) (39 samples, 2.00%)</title><rect x="784" y="404" width="23" height="15" fill="rgb(232,25,7)"/><text x="787.00" y="414.50">F..</text></g><g><title>_new_argsortlike (item_selection.c:1084) (52 samples, 2.67%)</title><rect x="777" y="356" width="31" height="15" fill="rgb(242,63,41)"/><text x="780.00" y="366.50">_n..</text></g><g><title>aintroselect_float (selection.c.src:322) (52 samples, 2.67%)</title><rect x="777" y="372" width="31" height="15" fill="rgb(216,150,32)"/><text x="780.00" y="382.50">ai..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (74 samples, 3.79%)</title><rect x="765" y="244" width="45" height="15" fill="rgb(231,128,20)"/><text x="768.00" y="254.50">topk..</text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (74 samples, 3.79%)</title><rect x="765" y="260" width="45" height="15" fill="rgb(226,178,45)"/><text x="768.00" y="270.50">argp..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (74 samples, 3.79%)</title><rect x="765" y="276" width="45" height="15" fill="rgb(225,95,6)"/><text x="768.00" y="286.50">arra..</text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (74 samples, 3.79%)</title><rect x="765" y="292" width="45" height="15" fill="rgb(211,51,38)"/><text x="768.00" y="302.50">argp..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (74 samples, 3.79%)</title><rect x="765" y="308" width="45" height="15" fill="rgb(254,65,37)"/><text x="768.00" y="318.50">_wra..</text></g><g><title>array_argpartition (methods.c:1454) (74 samples, 3.79%)</title><rect x="765" y="324" width="45" height="15" fill="rgb(231,30,46)"/><text x="768.00" y="334.50">arra..</text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (74 samples, 3.79%)</title><rect x="765" y="340" width="45" height="15" fill="rgb(216,193,22)"/><text x="768.00" y="350.50">PyAr..</text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (5 samples, 0.26%)</title><rect x="811" y="260" width="4" height="15" fill="rgb(217,0,17)"/><text x="814.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.26%)</title><rect x="811" y="276" width="4" height="15" fill="rgb(244,50,3)"/><text x="814.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (5 samples, 0.26%)</title><rect x="811" y="292" width="4" height="15" fill="rgb(231,143,13)"/><text x="814.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (4 samples, 0.21%)</title><rect x="812" y="308" width="3" height="15" fill="rgb(213,175,14)"/><text x="815.00" y="318.50"></text></g><g><title>array_argsort (methods.c:1395) (4 samples, 0.21%)</title><rect x="812" y="324" width="3" height="15" fill="rgb(224,110,40)"/><text x="815.00" y="334.50"></text></g><g><title>PyArray_ArgSort (item_selection.c:1322) (4 samples, 0.21%)</title><rect x="812" y="340" width="3" height="15" fill="rgb(205,27,24)"/><text x="815.00" y="350.50"></text></g><g><title>array_subscript (mapping.c:1656) (2 samples, 0.10%)</title><rect x="815" y="260" width="1" height="15" fill="rgb(242,115,28)"/><text x="818.00" y="270.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2964) (2 samples, 0.10%)</title><rect x="815" y="276" width="1" height="15" fill="rgb(210,178,26)"/><text x="818.00" y="286.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c:229) (2 samples, 0.10%)</title><rect x="815" y="292" width="1" height="15" fill="rgb(253,112,52)"/><text x="818.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c:281) (2 samples, 0.10%)</title><rect x="815" y="308" width="1" height="15" fill="rgb(242,178,21)"/><text x="818.00" y="318.50"></text></g><g><title>array_subscript (mapping.c:1666) (3 samples, 0.15%)</title><rect x="816" y="260" width="2" height="15" fill="rgb(226,156,35)"/><text x="819.00" y="270.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1564) (3 samples, 0.15%)</title><rect x="818" y="276" width="2" height="15" fill="rgb(239,174,50)"/><text x="821.00" y="286.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (18 samples, 0.92%)</title><rect x="810" y="244" width="11" height="15" fill="rgb(243,133,8)"/><text x="813.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (4 samples, 0.21%)</title><rect x="818" y="260" width="3" height="15" fill="rgb(245,33,35)"/><text x="821.00" y="270.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (96 samples, 4.92%)</title><rect x="764" y="228" width="58" height="15" fill="rgb(207,51,4)"/><text x="767.00" y="238.50">_commo..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:39) (2 samples, 0.10%)</title><rect x="821" y="244" width="1" height="15" fill="rgb(244,146,23)"/><text x="824.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (98 samples, 5.02%)</title><rect x="764" y="212" width="59" height="15" fill="rgb(244,44,47)"/><text x="767.00" y="222.50">_run (..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:76) (2 samples, 0.10%)</title><rect x="822" y="228" width="1" height="15" fill="rgb(208,174,45)"/><text x="825.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c:520) (3 samples, 0.15%)</title><rect x="823" y="212" width="2" height="15" fill="rgb(222,201,8)"/><text x="826.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:537) (2 samples, 0.10%)</title><rect x="824" y="228" width="1" height="15" fill="rgb(223,163,30)"/><text x="827.00" y="238.50"></text></g><g><title>npy_free_cache (alloc.c:147) (2 samples, 0.10%)</title><rect x="824" y="244" width="1" height="15" fill="rgb(253,53,4)"/><text x="827.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c:112) (2 samples, 0.10%)</title><rect x="824" y="260" width="1" height="15" fill="rgb(233,98,5)"/><text x="827.00" y="270.50"></text></g><g><title>PyDataMem_FREE (alloc.c:274) (2 samples, 0.10%)</title><rect x="824" y="276" width="1" height="15" fill="rgb(210,15,31)"/><text x="827.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (1,160 samples, 59.46%)</title><rect x="124" y="196" width="701" height="15" fill="rgb(226,63,10)"/><text x="127.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (2 samples, 0.10%)</title><rect x="825" y="196" width="2" height="15" fill="rgb(233,31,8)"/><text x="828.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py:24) (2 samples, 0.10%)</title><rect x="825" y="212" width="2" height="15" fill="rgb(218,221,26)"/><text x="828.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:6) (2 samples, 0.10%)</title><rect x="825" y="228" width="2" height="15" fill="rgb(208,92,17)"/><text x="828.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.10%)</title><rect x="825" y="244" width="2" height="15" fill="rgb(244,83,19)"/><text x="828.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py:2911) (2 samples, 0.10%)</title><rect x="825" y="260" width="2" height="15" fill="rgb(227,22,17)"/><text x="828.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (2 samples, 0.10%)</title><rect x="825" y="276" width="2" height="15" fill="rgb(240,224,33)"/><text x="828.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (2 samples, 0.10%)</title><rect x="825" y="292" width="2" height="15" fill="rgb(214,84,37)"/><text x="828.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4520) (2 samples, 0.10%)</title><rect x="825" y="308" width="2" height="15" fill="rgb(238,190,6)"/><text x="828.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c:1938) (2 samples, 0.10%)</title><rect x="825" y="324" width="2" height="15" fill="rgb(254,163,35)"/><text x="828.00" y="334.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (2 samples, 0.10%)</title><rect x="825" y="340" width="2" height="15" fill="rgb(243,57,7)"/><text x="828.00" y="350.50"></text></g><g><title>setArrayFromSequence (ctors.c:519) (2 samples, 0.10%)</title><rect x="825" y="356" width="2" height="15" fill="rgb(221,211,44)"/><text x="828.00" y="366.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (2 samples, 0.10%)</title><rect x="825" y="372" width="2" height="15" fill="rgb(252,78,31)"/><text x="828.00" y="382.50"></text></g><g><title>_mean (numpy/core/_methods.py:151) (6 samples, 0.31%)</title><rect x="828" y="292" width="3" height="15" fill="rgb(222,200,15)"/><text x="831.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (5 samples, 0.26%)</title><rect x="828" y="308" width="3" height="15" fill="rgb(249,214,22)"/><text x="831.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (5 samples, 0.26%)</title><rect x="828" y="324" width="3" height="15" fill="rgb(244,155,15)"/><text x="831.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (4 samples, 0.21%)</title><rect x="829" y="340" width="2" height="15" fill="rgb(253,128,46)"/><text x="832.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (2 samples, 0.10%)</title><rect x="830" y="356" width="1" height="15" fill="rgb(223,61,43)"/><text x="833.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (2 samples, 0.10%)</title><rect x="830" y="372" width="1" height="15" fill="rgb(244,185,0)"/><text x="833.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py:29) (10 samples, 0.51%)</title><rect x="827" y="228" width="6" height="15" fill="rgb(225,86,2)"/><text x="830.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (10 samples, 0.51%)</title><rect x="827" y="244" width="6" height="15" fill="rgb(207,124,18)"/><text x="830.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (9 samples, 0.46%)</title><rect x="827" y="260" width="6" height="15" fill="rgb(211,51,37)"/><text x="830.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (9 samples, 0.46%)</title><rect x="827" y="276" width="6" height="15" fill="rgb(236,31,29)"/><text x="830.00" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py:154) (2 samples, 0.10%)</title><rect x="831" y="292" width="2" height="15" fill="rgb(237,144,36)"/><text x="834.00" y="302.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.10%)</title><rect x="831" y="308" width="2" height="15" fill="rgb(227,207,20)"/><text x="834.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py:19) (6 samples, 0.31%)</title><rect x="833" y="228" width="3" height="15" fill="rgb(254,171,18)"/><text x="836.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 0.31%)</title><rect x="833" y="244" width="3" height="15" fill="rgb(228,50,1)"/><text x="836.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 0.31%)</title><rect x="833" y="260" width="3" height="15" fill="rgb(235,33,48)"/><text x="836.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (5 samples, 0.26%)</title><rect x="833" y="276" width="3" height="15" fill="rgb(224,92,13)"/><text x="836.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (5 samples, 0.26%)</title><rect x="833" y="292" width="3" height="15" fill="rgb(241,26,12)"/><text x="836.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src:1584) (5 samples, 0.26%)</title><rect x="833" y="308" width="3" height="15" fill="rgb(250,211,41)"/><text x="836.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src:195) (5 samples, 0.26%)</title><rect x="833" y="324" width="3" height="15" fill="rgb(220,160,48)"/><text x="836.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src:1005) (5 samples, 0.26%)</title><rect x="833" y="340" width="3" height="15" fill="rgb(248,122,22)"/><text x="836.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (5 samples, 0.26%)</title><rect x="833" y="356" width="3" height="15" fill="rgb(228,15,5)"/><text x="836.00" y="366.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,179 samples, 60.43%)</title><rect x="124" y="180" width="713" height="15" fill="rgb(220,208,31)"/><text x="127.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (17 samples, 0.87%)</title><rect x="827" y="196" width="10" height="15" fill="rgb(232,201,34)"/><text x="830.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (17 samples, 0.87%)</title><rect x="827" y="212" width="10" height="15" fill="rgb(242,215,54)"/><text x="830.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (2 samples, 0.10%)</title><rect x="837" y="180" width="1" height="15" fill="rgb(216,161,17)"/><text x="840.00" y="190.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:61) (1,189 samples, 60.94%)</title><rect x="120" y="52" width="719" height="15" fill="rgb(207,150,7)"/><text x="123.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.p..</text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:60) (1,189 samples, 60.94%)</title><rect x="120" y="68" width="719" height="15" fill="rgb(206,144,13)"/><text x="123.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_floa..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:37) (1,188 samples, 60.89%)</title><rect x="120" y="84" width="719" height="15" fill="rgb(247,153,9)"/><text x="123.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_flo..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:31) (1,188 samples, 60.89%)</title><rect x="120" y="100" width="719" height="15" fill="rgb(240,198,53)"/><text x="123.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (1,188 samples, 60.89%)</title><rect x="120" y="116" width="719" height="15" fill="rgb(236,39,50)"/><text x="123.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (1,187 samples, 60.84%)</title><rect x="121" y="132" width="718" height="15" fill="rgb(222,123,37)"/><text x="124.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,186 samples, 60.79%)</title><rect x="121" y="148" width="718" height="15" fill="rgb(215,23,17)"/><text x="124.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,186 samples, 60.79%)</title><rect x="121" y="164" width="718" height="15" fill="rgb(230,228,22)"/><text x="124.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>onnxruntime::ReduceMean&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.15%)</title><rect x="841" y="340" width="2" height="15" fill="rgb(227,187,31)"/><text x="844.00" y="350.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="845" y="436" width="1" height="15" fill="rgb(212,210,7)"/><text x="848.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="845" y="452" width="1" height="15" fill="rgb(232,217,31)"/><text x="848.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="845" y="468" width="1" height="15" fill="rgb(225,224,50)"/><text x="848.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::InsertFreeChunkIntoBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="848" y="516" width="2" height="15" fill="rgb(250,146,10)"/><text x="851.00" y="526.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::_M_insert_unique&lt;unsigned long const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="848" y="532" width="2" height="15" fill="rgb(253,196,50)"/><text x="851.00" y="542.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.26%)</title><rect x="847" y="484" width="3" height="15" fill="rgb(217,76,3)"/><text x="850.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.26%)</title><rect x="847" y="500" width="3" height="15" fill="rgb(252,17,24)"/><text x="850.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.41%)</title><rect x="846" y="436" width="5" height="15" fill="rgb(250,104,10)"/><text x="849.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.41%)</title><rect x="846" y="452" width="5" height="15" fill="rgb(230,170,32)"/><text x="849.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.36%)</title><rect x="847" y="468" width="4" height="15" fill="rgb(246,83,3)"/><text x="850.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="851" y="436" width="3" height="15" fill="rgb(251,145,27)"/><text x="854.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="851" y="452" width="3" height="15" fill="rgb(211,15,32)"/><text x="854.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="851" y="468" width="3" height="15" fill="rgb(233,182,6)"/><text x="854.00" y="478.50"></text></g><g><title>0x7f580a06cd94 (libc-2.29.so) (5 samples, 0.26%)</title><rect x="854" y="452" width="3" height="15" fill="rgb(224,165,41)"/><text x="857.00" y="462.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.31%)</title><rect x="854" y="436" width="3" height="15" fill="rgb(242,203,15)"/><text x="857.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="954" y="468" width="3" height="15" fill="rgb(253,106,12)"/><text x="957.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="954" y="484" width="3" height="15" fill="rgb(226,74,18)"/><text x="957.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="954" y="500" width="3" height="15" fill="rgb(235,148,7)"/><text x="957.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="954" y="516" width="3" height="15" fill="rgb(208,138,8)"/><text x="957.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="954" y="532" width="3" height="15" fill="rgb(235,68,11)"/><text x="957.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="954" y="548" width="3" height="15" fill="rgb(228,74,50)"/><text x="957.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="955" y="564" width="2" height="15" fill="rgb(214,14,40)"/><text x="958.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="955" y="580" width="2" height="15" fill="rgb(239,29,9)"/><text x="958.00" y="590.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.36%)</title><rect x="957" y="468" width="4" height="15" fill="rgb(236,151,28)"/><text x="960.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.10%)</title><rect x="960" y="484" width="1" height="15" fill="rgb(230,102,50)"/><text x="963.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.10%)</title><rect x="960" y="500" width="1" height="15" fill="rgb(235,155,32)"/><text x="963.00" y="510.50"></text></g><g><title>0x7f580a04e028 (libc-2.29.so) (2 samples, 0.10%)</title><rect x="960" y="516" width="1" height="15" fill="rgb(244,45,53)"/><text x="963.00" y="526.50"></text></g><g><title>0x7f580a04bb9b (libc-2.29.so) (2 samples, 0.10%)</title><rect x="960" y="532" width="1" height="15" fill="rgb(219,13,53)"/><text x="963.00" y="542.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (172 samples, 8.82%)</title><rect x="859" y="436" width="104" height="15" fill="rgb(226,63,38)"/><text x="862.00" y="446.50">onnxruntime:..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (159 samples, 8.15%)</title><rect x="867" y="452" width="96" height="15" fill="rgb(251,113,36)"/><text x="870.00" y="462.50">onnxruntime..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (157 samples, 8.05%)</title><rect x="963" y="468" width="95" height="15" fill="rgb(206,68,27)"/><text x="966.00" y="478.50">onnxruntime..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (45 samples, 2.31%)</title><rect x="1030" y="484" width="28" height="15" fill="rgb(240,141,52)"/><text x="1033.00" y="494.50">o..</text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.15%)</title><rect x="1058" y="468" width="2" height="15" fill="rgb(241,205,3)"/><text x="1061.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="1059" y="484" width="1" height="15" fill="rgb(254,71,25)"/><text x="1062.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="1059" y="500" width="1" height="15" fill="rgb(213,94,11)"/><text x="1062.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="1059" y="516" width="1" height="15" fill="rgb(214,36,22)"/><text x="1062.00" y="526.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="1060" y="500" width="1" height="15" fill="rgb(232,173,9)"/><text x="1063.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.10%)</title><rect x="1060" y="516" width="1" height="15" fill="rgb(213,162,52)"/><text x="1063.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.10%)</title><rect x="1060" y="532" width="1" height="15" fill="rgb(243,50,16)"/><text x="1063.00" y="542.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="1060" y="468" width="2" height="15" fill="rgb(212,9,45)"/><text x="1063.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="1060" y="484" width="2" height="15" fill="rgb(241,155,12)"/><text x="1063.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.10%)</title><rect x="1061" y="500" width="1" height="15" fill="rgb(208,176,20)"/><text x="1064.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.10%)</title><rect x="1061" y="516" width="1" height="15" fill="rgb(245,228,0)"/><text x="1064.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.10%)</title><rect x="1061" y="532" width="1" height="15" fill="rgb(241,33,52)"/><text x="1064.00" y="542.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (364 samples, 18.66%)</title><rect x="843" y="340" width="220" height="15" fill="rgb(241,0,53)"/><text x="846.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compute..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (364 samples, 18.66%)</title><rect x="843" y="356" width="220" height="15" fill="rgb(217,179,41)"/><text x="846.00" y="366.50">onnxruntime::ScanImpl::Execut..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (364 samples, 18.66%)</title><rect x="843" y="372" width="220" height="15" fill="rgb(254,212,32)"/><text x="846.00" y="382.50">onnxruntime::scan::detail::It..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (362 samples, 18.55%)</title><rect x="844" y="388" width="219" height="15" fill="rgb(233,28,32)"/><text x="847.00" y="398.50">onnxruntime::utils::ExecuteS..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (362 samples, 18.55%)</title><rect x="844" y="404" width="219" height="15" fill="rgb(208,106,47)"/><text x="847.00" y="414.50">onnxruntime::utils::ExecuteG..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (361 samples, 18.50%)</title><rect x="845" y="420" width="218" height="15" fill="rgb(251,136,2)"/><text x="848.00" y="430.50">onnxruntime::SequentialExecu..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (166 samples, 8.51%)</title><rect x="963" y="436" width="100" height="15" fill="rgb(254,59,10)"/><text x="966.00" y="446.50">onnxruntime:..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (166 samples, 8.51%)</title><rect x="963" y="452" width="100" height="15" fill="rgb(226,143,6)"/><text x="966.00" y="462.50">onnxruntime:..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.31%)</title><rect x="1063" y="340" width="4" height="15" fill="rgb(243,101,18)"/><text x="1066.00" y="350.50"></text></g><g><title>0x7f580a04cf71 (libc-2.29.so) (2 samples, 0.10%)</title><rect x="1141" y="372" width="1" height="15" fill="rgb(229,101,36)"/><text x="1144.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.21%)</title><rect x="1144" y="372" width="2" height="15" fill="rgb(235,162,50)"/><text x="1147.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.21%)</title><rect x="1144" y="388" width="2" height="15" fill="rgb(229,28,35)"/><text x="1147.00" y="398.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 6.97%)</title><rect x="1067" y="340" width="82" height="15" fill="rgb(254,87,40)"/><text x="1070.00" y="350.50">onnxrunti..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 6.97%)</title><rect x="1067" y="356" width="82" height="15" fill="rgb(238,97,51)"/><text x="1070.00" y="366.50">onnxrunti..</text></g><g><title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.21%)</title><rect x="1147" y="372" width="2" height="15" fill="rgb(254,106,20)"/><text x="1150.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (573 samples, 29.37%)</title><rect x="841" y="260" width="346" height="15" fill="rgb(224,97,40)"/><text x="844.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntim..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (573 samples, 29.37%)</title><rect x="841" y="276" width="346" height="15" fill="rgb(249,62,17)"/><text x="844.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (572 samples, 29.32%)</title><rect x="841" y="292" width="346" height="15" fill="rgb(222,125,36)"/><text x="844.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (572 samples, 29.32%)</title><rect x="841" y="308" width="346" height="15" fill="rgb(220,45,48)"/><text x="844.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxrunt..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (572 samples, 29.32%)</title><rect x="841" y="324" width="346" height="15" fill="rgb(252,129,36)"/><text x="844.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnx..</text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (63 samples, 3.23%)</title><rect x="1149" y="340" width="38" height="15" fill="rgb(212,160,34)"/><text x="1152.00" y="350.50">onn..</text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (63 samples, 3.23%)</title><rect x="1149" y="356" width="38" height="15" fill="rgb(254,65,42)"/><text x="1152.00" y="366.50">onn..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (575 samples, 29.47%)</title><rect x="841" y="244" width="347" height="15" fill="rgb(235,215,49)"/><text x="844.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11:..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (578 samples, 29.63%)</title><rect x="839" y="164" width="350" height="15" fill="rgb(235,151,45)"/><text x="842.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_infer..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (577 samples, 29.57%)</title><rect x="840" y="180" width="349" height="15" fill="rgb(211,152,5)"/><text x="843.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:136) (577 samples, 29.57%)</title><rect x="840" y="196" width="349" height="15" fill="rgb(235,155,39)"/><text x="843.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (576 samples, 29.52%)</title><rect x="841" y="212" width="348" height="15" fill="rgb(207,205,15)"/><text x="844.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (576 samples, 29.52%)</title><rect x="841" y="228" width="348" height="15" fill="rgb(242,34,42)"/><text x="844.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxrun..</text></g><g><title>all (1,951 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(230,42,51)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:68) (580 samples, 29.73%)</title><rect x="839" y="52" width="351" height="15" fill="rgb(253,170,1)"/><text x="842.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:67) (580 samples, 29.73%)</title><rect x="839" y="68" width="351" height="15" fill="rgb(212,218,48)"/><text x="842.00" y="78.50">profile_ort (bench_KNeighborsRegressor_default_..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:37) (580 samples, 29.73%)</title><rect x="839" y="84" width="351" height="15" fill="rgb(220,24,11)"/><text x="842.00" y="94.50">setup_profile (bench_KNeighborsRegressor_defaul..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py:31) (580 samples, 29.73%)</title><rect x="839" y="100" width="351" height="15" fill="rgb(228,199,48)"/><text x="842.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (579 samples, 29.68%)</title><rect x="839" y="116" width="351" height="15" fill="rgb(205,194,39)"/><text x="842.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_as..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (579 samples, 29.68%)</title><rect x="839" y="132" width="351" height="15" fill="rgb(216,183,19)"/><text x="842.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_sk..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (579 samples, 29.68%)</title><rect x="839" y="148" width="351" height="15" fill="rgb(215,221,46)"/><text x="842.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g></g></svg>