<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1238" onload="init(evt)" viewBox="0 0 1200 1238" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1238" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1221.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1221.00"> </text><g id="frames"><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.10%)</title><rect x="10" y="196" width="1" height="15" fill="rgb(229,227,24)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.10%)</title><rect x="10" y="212" width="1" height="15" fill="rgb(235,116,46)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.10%)</title><rect x="10" y="228" width="1" height="15" fill="rgb(206,123,10)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.10%)</title><rect x="10" y="244" width="1" height="15" fill="rgb(240,149,26)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.10%)</title><rect x="10" y="260" width="1" height="15" fill="rgb(244,174,8)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.10%)</title><rect x="10" y="276" width="1" height="15" fill="rgb(223,17,11)"/><text x="13.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.10%)</title><rect x="11" y="1124" width="1" height="15" fill="rgb(211,58,53)"/><text x="14.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.10%)</title><rect x="11" y="1140" width="1" height="15" fill="rgb(242,46,52)"/><text x="14.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.10%)</title><rect x="11" y="1156" width="1" height="15" fill="rgb(206,178,29)"/><text x="14.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.10%)</title><rect x="11" y="1172" width="1" height="15" fill="rgb(239,148,43)"/><text x="14.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.10%)</title><rect x="11" y="1188" width="1" height="15" fill="rgb(241,82,40)"/><text x="14.00" y="1198.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.22%)</title><rect x="10" y="68" width="2" height="15" fill="rgb(236,11,30)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.22%)</title><rect x="10" y="84" width="2" height="15" fill="rgb(211,151,0)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.22%)</title><rect x="10" y="100" width="2" height="15" fill="rgb(209,106,4)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 0.22%)</title><rect x="10" y="116" width="2" height="15" fill="rgb(212,20,26)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.22%)</title><rect x="10" y="132" width="2" height="15" fill="rgb(244,190,3)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py) (9 samples, 0.22%)</title><rect x="10" y="148" width="2" height="15" fill="rgb(248,168,17)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.22%)</title><rect x="10" y="164" width="2" height="15" fill="rgb(225,194,44)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.22%)</title><rect x="10" y="180" width="2" height="15" fill="rgb(222,126,33)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="196" width="1" height="15" fill="rgb(237,25,1)"/><text x="14.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="11" y="212" width="1" height="15" fill="rgb(249,72,14)"/><text x="14.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="228" width="1" height="15" fill="rgb(231,133,36)"/><text x="14.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (5 samples, 0.12%)</title><rect x="11" y="244" width="1" height="15" fill="rgb(243,22,30)"/><text x="14.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="260" width="1" height="15" fill="rgb(240,145,40)"/><text x="14.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="276" width="1" height="15" fill="rgb(230,79,52)"/><text x="14.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="292" width="1" height="15" fill="rgb(233,195,2)"/><text x="14.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="11" y="308" width="1" height="15" fill="rgb(240,198,23)"/><text x="14.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="324" width="1" height="15" fill="rgb(215,126,54)"/><text x="14.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (5 samples, 0.12%)</title><rect x="11" y="340" width="1" height="15" fill="rgb(224,156,32)"/><text x="14.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="356" width="1" height="15" fill="rgb(224,109,45)"/><text x="14.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="372" width="1" height="15" fill="rgb(252,206,20)"/><text x="14.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="388" width="1" height="15" fill="rgb(222,196,46)"/><text x="14.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="11" y="404" width="1" height="15" fill="rgb(213,126,53)"/><text x="14.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="420" width="1" height="15" fill="rgb(228,65,28)"/><text x="14.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (5 samples, 0.12%)</title><rect x="11" y="436" width="1" height="15" fill="rgb(208,224,16)"/><text x="14.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="452" width="1" height="15" fill="rgb(251,211,1)"/><text x="14.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="468" width="1" height="15" fill="rgb(241,31,4)"/><text x="14.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="484" width="1" height="15" fill="rgb(226,146,34)"/><text x="14.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="500" width="1" height="15" fill="rgb(226,116,16)"/><text x="14.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="516" width="1" height="15" fill="rgb(251,177,49)"/><text x="14.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="532" width="1" height="15" fill="rgb(242,189,31)"/><text x="14.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="11" y="548" width="1" height="15" fill="rgb(250,227,4)"/><text x="14.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="564" width="1" height="15" fill="rgb(215,215,47)"/><text x="14.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (5 samples, 0.12%)</title><rect x="11" y="580" width="1" height="15" fill="rgb(210,136,14)"/><text x="14.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="596" width="1" height="15" fill="rgb(252,224,8)"/><text x="14.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="612" width="1" height="15" fill="rgb(243,61,2)"/><text x="14.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="628" width="1" height="15" fill="rgb(235,21,10)"/><text x="14.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="11" y="644" width="1" height="15" fill="rgb(206,97,51)"/><text x="14.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="660" width="1" height="15" fill="rgb(235,227,34)"/><text x="14.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (5 samples, 0.12%)</title><rect x="11" y="676" width="1" height="15" fill="rgb(248,130,22)"/><text x="14.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="692" width="1" height="15" fill="rgb(205,223,14)"/><text x="14.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="708" width="1" height="15" fill="rgb(212,141,52)"/><text x="14.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="724" width="1" height="15" fill="rgb(235,8,43)"/><text x="14.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="11" y="740" width="1" height="15" fill="rgb(253,209,44)"/><text x="14.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="756" width="1" height="15" fill="rgb(215,90,4)"/><text x="14.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (5 samples, 0.12%)</title><rect x="11" y="772" width="1" height="15" fill="rgb(253,22,24)"/><text x="14.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="788" width="1" height="15" fill="rgb(238,168,39)"/><text x="14.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="804" width="1" height="15" fill="rgb(210,200,11)"/><text x="14.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="820" width="1" height="15" fill="rgb(217,170,46)"/><text x="14.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="11" y="836" width="1" height="15" fill="rgb(252,133,7)"/><text x="14.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="852" width="1" height="15" fill="rgb(210,111,51)"/><text x="14.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (5 samples, 0.12%)</title><rect x="11" y="868" width="1" height="15" fill="rgb(227,3,17)"/><text x="14.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="884" width="1" height="15" fill="rgb(236,70,6)"/><text x="14.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="900" width="1" height="15" fill="rgb(225,39,42)"/><text x="14.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="916" width="1" height="15" fill="rgb(214,163,48)"/><text x="14.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="932" width="1" height="15" fill="rgb(239,211,38)"/><text x="14.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="948" width="1" height="15" fill="rgb(240,103,36)"/><text x="14.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="964" width="1" height="15" fill="rgb(248,199,21)"/><text x="14.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="11" y="980" width="1" height="15" fill="rgb(222,172,18)"/><text x="14.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="996" width="1" height="15" fill="rgb(249,176,2)"/><text x="14.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (5 samples, 0.12%)</title><rect x="11" y="1012" width="1" height="15" fill="rgb(239,67,13)"/><text x="14.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="1028" width="1" height="15" fill="rgb(222,226,13)"/><text x="14.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="1044" width="1" height="15" fill="rgb(216,129,29)"/><text x="14.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="1060" width="1" height="15" fill="rgb(223,52,21)"/><text x="14.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="11" y="1076" width="1" height="15" fill="rgb(234,12,45)"/><text x="14.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="11" y="1092" width="1" height="15" fill="rgb(234,203,3)"/><text x="14.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (5 samples, 0.12%)</title><rect x="11" y="1108" width="1" height="15" fill="rgb(221,145,40)"/><text x="14.00" y="1118.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.10%)</title><rect x="15" y="452" width="1" height="15" fill="rgb(226,197,5)"/><text x="18.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.17%)</title><rect x="15" y="436" width="2" height="15" fill="rgb(214,2,41)"/><text x="18.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::Merge (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.10%)</title><rect x="19" y="516" width="1" height="15" fill="rgb(229,90,39)"/><text x="22.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.27%)</title><rect x="17" y="436" width="4" height="15" fill="rgb(206,229,43)"/><text x="20.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.22%)</title><rect x="18" y="452" width="3" height="15" fill="rgb(220,153,20)"/><text x="21.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.20%)</title><rect x="18" y="468" width="3" height="15" fill="rgb(250,34,37)"/><text x="21.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.17%)</title><rect x="19" y="484" width="2" height="15" fill="rgb(224,57,30)"/><text x="22.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.15%)</title><rect x="19" y="500" width="2" height="15" fill="rgb(250,38,7)"/><text x="22.00" y="510.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (101 samples, 2.49%)</title><rect x="21" y="436" width="30" height="15" fill="rgb(238,149,38)"/><text x="24.00" y="446.50">on..</text></g><g><title>0x7fd4169f6d94 (libc-2.29.so) (101 samples, 2.49%)</title><rect x="21" y="452" width="30" height="15" fill="rgb(218,166,36)"/><text x="24.00" y="462.50">0x..</text></g><g><title>onnxruntime::OpKernelContext::OpKernelContext (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.10%)</title><rect x="51" y="436" width="1" height="15" fill="rgb(227,143,22)"/><text x="54.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.10%)</title><rect x="539" y="468" width="1" height="15" fill="rgb(244,121,39)"/><text x="542.00" y="478.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (80 samples, 1.97%)</title><rect x="541" y="468" width="23" height="15" fill="rgb(213,104,19)"/><text x="544.00" y="478.50">s..</text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,765 samples, 43.43%)</title><rect x="52" y="436" width="512" height="15" fill="rgb(227,59,0)"/><text x="55.00" y="446.50">onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxrun..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,685 samples, 41.46%)</title><rect x="75" y="452" width="489" height="15" fill="rgb(207,37,28)"/><text x="78.00" y="462.50">onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (236 samples, 5.81%)</title><rect x="565" y="468" width="68" height="15" fill="rgb(226,139,48)"/><text x="568.00" y="478.50">onnxrun..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (41 samples, 1.01%)</title><rect x="621" y="484" width="12" height="15" fill="rgb(251,159,47)"/><text x="624.00" y="494.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.12%)</title><rect x="635" y="468" width="1" height="15" fill="rgb(216,1,3)"/><text x="638.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.12%)</title><rect x="635" y="484" width="1" height="15" fill="rgb(240,146,10)"/><text x="638.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,147 samples, 52.83%)</title><rect x="13" y="340" width="624" height="15" fill="rgb(233,175,19)"/><text x="16.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,147 samples, 52.83%)</title><rect x="13" y="356" width="624" height="15" fill="rgb(207,154,6)"/><text x="16.00" y="366.50">onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,147 samples, 52.83%)</title><rect x="13" y="372" width="624" height="15" fill="rgb(233,56,10)"/><text x="16.00" y="382.50">onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_stat..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,145 samples, 52.78%)</title><rect x="14" y="388" width="623" height="15" fill="rgb(210,27,19)"/><text x="17.00" y="398.50">onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,145 samples, 52.78%)</title><rect x="14" y="404" width="623" height="15" fill="rgb(253,228,44)"/><text x="17.00" y="414.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,144 samples, 52.76%)</title><rect x="14" y="420" width="623" height="15" fill="rgb(237,113,38)"/><text x="17.00" y="430.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (248 samples, 6.10%)</title><rect x="565" y="436" width="72" height="15" fill="rgb(252,135,2)"/><text x="568.00" y="446.50">onnxrunt..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (248 samples, 6.10%)</title><rect x="565" y="452" width="72" height="15" fill="rgb(225,169,5)"/><text x="568.00" y="462.50">onnxrunt..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.15%)</title><rect x="637" y="340" width="1" height="15" fill="rgb(252,7,31)"/><text x="640.00" y="350.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (117 samples, 2.88%)</title><rect x="638" y="340" width="34" height="15" fill="rgb(250,2,51)"/><text x="641.00" y="350.50">on..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (117 samples, 2.88%)</title><rect x="638" y="356" width="34" height="15" fill="rgb(232,57,44)"/><text x="641.00" y="366.50">on..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (2,315 samples, 56.96%)</title><rect x="13" y="68" width="672" height="15" fill="rgb(212,159,43)"/><text x="16.00" y="78.50">profile_ort (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (2,315 samples, 56.96%)</title><rect x="13" y="84" width="672" height="15" fill="rgb(225,113,33)"/><text x="16.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_5..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (2,315 samples, 56.96%)</title><rect x="13" y="100" width="672" height="15" fill="rgb(254,149,48)"/><text x="16.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_f..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (2,315 samples, 56.96%)</title><rect x="13" y="116" width="672" height="15" fill="rgb(229,142,39)"/><text x="16.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (2,315 samples, 56.96%)</title><rect x="13" y="132" width="672" height="15" fill="rgb(218,212,41)"/><text x="16.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (2,315 samples, 56.96%)</title><rect x="13" y="148" width="672" height="15" fill="rgb(220,137,42)"/><text x="16.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (2,314 samples, 56.94%)</title><rect x="13" y="164" width="672" height="15" fill="rgb(245,66,35)"/><text x="16.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (2,314 samples, 56.94%)</title><rect x="13" y="180" width="672" height="15" fill="rgb(242,152,39)"/><text x="16.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (2,314 samples, 56.94%)</title><rect x="13" y="196" width="672" height="15" fill="rgb(228,84,6)"/><text x="16.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,313 samples, 56.91%)</title><rect x="13" y="212" width="672" height="15" fill="rgb(240,155,51)"/><text x="16.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,313 samples, 56.91%)</title><rect x="13" y="228" width="672" height="15" fill="rgb(249,112,26)"/><text x="16.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::modu..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,313 samples, 56.91%)</title><rect x="13" y="244" width="672" height="15" fill="rgb(221,194,26)"/><text x="16.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSess..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,313 samples, 56.91%)</title><rect x="13" y="260" width="672" height="15" fill="rgb(253,152,49)"/><text x="16.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,313 samples, 56.91%)</title><rect x="13" y="276" width="672" height="15" fill="rgb(254,215,53)"/><text x="16.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,313 samples, 56.91%)</title><rect x="13" y="292" width="672" height="15" fill="rgb(212,23,7)"/><text x="16.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,313 samples, 56.91%)</title><rect x="13" y="308" width="672" height="15" fill="rgb(226,159,28)"/><text x="16.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,313 samples, 56.91%)</title><rect x="13" y="324" width="672" height="15" fill="rgb(244,14,21)"/><text x="16.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (43 samples, 1.06%)</title><rect x="672" y="340" width="13" height="15" fill="rgb(242,118,10)"/><text x="675.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (43 samples, 1.06%)</title><rect x="672" y="356" width="13" height="15" fill="rgb(231,141,27)"/><text x="675.00" y="366.50"></text></g><g><title>PyArray_ToList (convert.c) (4 samples, 0.10%)</title><rect x="687" y="228" width="1" height="15" fill="rgb(218,190,35)"/><text x="690.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c) (4 samples, 0.10%)</title><rect x="687" y="244" width="1" height="15" fill="rgb(242,82,43)"/><text x="690.00" y="254.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (6 samples, 0.15%)</title><rect x="689" y="276" width="1" height="15" fill="rgb(249,31,1)"/><text x="692.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c) (6 samples, 0.15%)</title><rect x="689" y="292" width="1" height="15" fill="rgb(220,86,21)"/><text x="692.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (5 samples, 0.12%)</title><rect x="689" y="308" width="1" height="15" fill="rgb(216,40,48)"/><text x="692.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src) (5 samples, 0.12%)</title><rect x="689" y="324" width="1" height="15" fill="rgb(249,7,13)"/><text x="692.00" y="334.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (7 samples, 0.17%)</title><rect x="690" y="292" width="2" height="15" fill="rgb(230,50,27)"/><text x="693.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (7 samples, 0.17%)</title><rect x="690" y="308" width="2" height="15" fill="rgb(212,197,18)"/><text x="693.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (7 samples, 0.17%)</title><rect x="690" y="324" width="2" height="15" fill="rgb(228,80,41)"/><text x="693.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (27 samples, 0.66%)</title><rect x="687" y="212" width="8" height="15" fill="rgb(209,50,32)"/><text x="690.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (22 samples, 0.54%)</title><rect x="688" y="228" width="7" height="15" fill="rgb(242,20,33)"/><text x="691.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (21 samples, 0.52%)</title><rect x="689" y="244" width="6" height="15" fill="rgb(221,162,27)"/><text x="692.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c) (21 samples, 0.52%)</title><rect x="689" y="260" width="6" height="15" fill="rgb(215,194,44)"/><text x="692.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (15 samples, 0.37%)</title><rect x="690" y="276" width="5" height="15" fill="rgb(221,182,48)"/><text x="693.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c) (8 samples, 0.20%)</title><rect x="692" y="292" width="3" height="15" fill="rgb(235,171,11)"/><text x="695.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c) (5 samples, 0.12%)</title><rect x="693" y="308" width="2" height="15" fill="rgb(236,206,31)"/><text x="696.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (4 samples, 0.10%)</title><rect x="695" y="212" width="1" height="15" fill="rgb(246,96,23)"/><text x="698.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (5 samples, 0.12%)</title><rect x="710" y="228" width="2" height="15" fill="rgb(241,200,48)"/><text x="713.00" y="238.50"></text></g><g><title>array_subscript (mapping.c) (7 samples, 0.17%)</title><rect x="712" y="228" width="2" height="15" fill="rgb(239,128,14)"/><text x="715.00" y="238.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (6 samples, 0.15%)</title><rect x="726" y="292" width="2" height="15" fill="rgb(232,21,41)"/><text x="729.00" y="302.50"></text></g><g><title>array_reshape (methods.c) (19 samples, 0.47%)</title><rect x="724" y="276" width="5" height="15" fill="rgb(231,0,41)"/><text x="727.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (6 samples, 0.15%)</title><rect x="728" y="292" width="1" height="15" fill="rgb(250,35,41)"/><text x="731.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (6 samples, 0.15%)</title><rect x="728" y="308" width="1" height="15" fill="rgb(250,70,45)"/><text x="731.00" y="318.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (55 samples, 1.35%)</title><rect x="714" y="228" width="16" height="15" fill="rgb(205,182,36)"/><text x="717.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (47 samples, 1.16%)</title><rect x="717" y="244" width="13" height="15" fill="rgb(237,78,38)"/><text x="720.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (47 samples, 1.16%)</title><rect x="717" y="260" width="13" height="15" fill="rgb(239,55,37)"/><text x="720.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (4 samples, 0.10%)</title><rect x="729" y="276" width="1" height="15" fill="rgb(212,85,4)"/><text x="732.00" y="286.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (10 samples, 0.25%)</title><rect x="743" y="260" width="3" height="15" fill="rgb(219,59,36)"/><text x="746.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (8 samples, 0.20%)</title><rect x="788" y="276" width="3" height="15" fill="rgb(250,148,34)"/><text x="791.00" y="286.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (6 samples, 0.15%)</title><rect x="798" y="292" width="2" height="15" fill="rgb(254,124,12)"/><text x="801.00" y="302.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (5 samples, 0.12%)</title><rect x="809" y="356" width="2" height="15" fill="rgb(213,204,35)"/><text x="812.00" y="366.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (75 samples, 1.85%)</title><rect x="813" y="436" width="22" height="15" fill="rgb(240,153,35)"/><text x="816.00" y="446.50">_..</text></g><g><title>FLOAT_subtract (loops.c.src) (150 samples, 3.69%)</title><rect x="812" y="388" width="44" height="15" fill="rgb(253,150,35)"/><text x="815.00" y="398.50">FLOA..</text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (150 samples, 3.69%)</title><rect x="812" y="404" width="44" height="15" fill="rgb(232,6,30)"/><text x="815.00" y="414.50">run_..</text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (150 samples, 3.69%)</title><rect x="812" y="420" width="44" height="15" fill="rgb(244,140,19)"/><text x="815.00" y="430.50">sse2..</text></g><g><title>_mm_sub_ps (xmmintrin.h) (71 samples, 1.75%)</title><rect x="835" y="436" width="21" height="15" fill="rgb(247,33,13)"/><text x="838.00" y="446.50"></text></g><g><title>npy_alloc_cache (alloc.c) (6 samples, 0.15%)</title><rect x="859" y="468" width="2" height="15" fill="rgb(230,208,51)"/><text x="862.00" y="478.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (6 samples, 0.15%)</title><rect x="859" y="484" width="2" height="15" fill="rgb(248,100,52)"/><text x="862.00" y="494.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (4 samples, 0.10%)</title><rect x="859" y="500" width="2" height="15" fill="rgb(235,41,12)"/><text x="862.00" y="510.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.10%)</title><rect x="859" y="516" width="2" height="15" fill="rgb(209,77,19)"/><text x="862.00" y="526.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (9 samples, 0.22%)</title><rect x="858" y="420" width="3" height="15" fill="rgb(229,84,41)"/><text x="861.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (8 samples, 0.20%)</title><rect x="858" y="436" width="3" height="15" fill="rgb(241,90,44)"/><text x="861.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (8 samples, 0.20%)</title><rect x="858" y="452" width="3" height="15" fill="rgb(248,158,30)"/><text x="861.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (13 samples, 0.32%)</title><rect x="857" y="404" width="4" height="15" fill="rgb(222,114,22)"/><text x="860.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (27 samples, 0.66%)</title><rect x="856" y="388" width="7" height="15" fill="rgb(238,189,40)"/><text x="859.00" y="398.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (4 samples, 0.10%)</title><rect x="863" y="388" width="2" height="15" fill="rgb(243,193,36)"/><text x="866.00" y="398.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (29 samples, 0.71%)</title><rect x="865" y="388" width="8" height="15" fill="rgb(250,161,1)"/><text x="868.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (25 samples, 0.62%)</title><rect x="866" y="404" width="7" height="15" fill="rgb(253,17,44)"/><text x="869.00" y="414.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (24 samples, 0.59%)</title><rect x="866" y="420" width="7" height="15" fill="rgb(223,29,17)"/><text x="869.00" y="430.50"></text></g><g><title>0x7fd4169f6eff (libc-2.29.so) (4 samples, 0.10%)</title><rect x="884" y="436" width="1" height="15" fill="rgb(223,220,6)"/><text x="887.00" y="446.50"></text></g><g><title>0x7fd4169f6f36 (libc-2.29.so) (7 samples, 0.17%)</title><rect x="886" y="436" width="2" height="15" fill="rgb(230,221,26)"/><text x="889.00" y="446.50"></text></g><g><title>0x7fd4169f6f3a (libc-2.29.so) (6 samples, 0.15%)</title><rect x="888" y="436" width="2" height="15" fill="rgb(208,134,7)"/><text x="891.00" y="446.50"></text></g><g><title>0x7fd4169f6f58 (libc-2.29.so) (6 samples, 0.15%)</title><rect x="893" y="436" width="2" height="15" fill="rgb(217,197,49)"/><text x="896.00" y="446.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (78 samples, 1.92%)</title><rect x="875" y="404" width="23" height="15" fill="rgb(242,163,54)"/><text x="878.00" y="414.50">n..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (78 samples, 1.92%)</title><rect x="875" y="420" width="23" height="15" fill="rgb(221,37,4)"/><text x="878.00" y="430.50">P..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (87 samples, 2.14%)</title><rect x="874" y="388" width="25" height="15" fill="rgb(235,221,27)"/><text x="877.00" y="398.50">n..</text></g><g><title>npyiter_goto_iterindex (nditer_api.c) (6 samples, 0.15%)</title><rect x="898" y="404" width="1" height="15" fill="rgb(238,198,31)"/><text x="901.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (302 samples, 7.43%)</title><rect x="812" y="356" width="88" height="15" fill="rgb(232,203,54)"/><text x="815.00" y="366.50">execute_le..</text></g><g><title>iterator_loop (ufunc_object.c) (302 samples, 7.43%)</title><rect x="812" y="372" width="88" height="15" fill="rgb(214,225,53)"/><text x="815.00" y="382.50">iterator_l..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (318 samples, 7.82%)</title><rect x="808" y="340" width="92" height="15" fill="rgb(249,151,44)"/><text x="811.00" y="350.50">PyUFunc_Ge..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (326 samples, 8.02%)</title><rect x="806" y="308" width="95" height="15" fill="rgb(245,39,46)"/><text x="809.00" y="318.50">_run (mlpro..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (320 samples, 7.87%)</title><rect x="808" y="324" width="93" height="15" fill="rgb(246,174,50)"/><text x="811.00" y="334.50">ufunc_gener..</text></g><g><title>0x7fd4169f6d94 (libc-2.29.so) (120 samples, 2.95%)</title><rect x="906" y="388" width="35" height="15" fill="rgb(210,211,11)"/><text x="909.00" y="398.50">0x..</text></g><g><title>PyArray_AssignArray (array_assign_array.c) (132 samples, 3.25%)</title><rect x="905" y="356" width="39" height="15" fill="rgb(246,142,54)"/><text x="908.00" y="366.50">PyA..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (131 samples, 3.22%)</title><rect x="906" y="372" width="38" height="15" fill="rgb(249,23,13)"/><text x="909.00" y="382.50">raw..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (153 samples, 3.76%)</title><rect x="901" y="308" width="44" height="15" fill="rgb(248,43,20)"/><text x="904.00" y="318.50">_run..</text></g><g><title>array_copy (methods.c) (140 samples, 3.44%)</title><rect x="904" y="324" width="41" height="15" fill="rgb(213,58,8)"/><text x="907.00" y="334.50">arr..</text></g><g><title>PyArray_NewCopy (convert.c) (138 samples, 3.40%)</title><rect x="905" y="340" width="40" height="15" fill="rgb(232,40,8)"/><text x="908.00" y="350.50">PyA..</text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (5 samples, 0.12%)</title><rect x="944" y="356" width="1" height="15" fill="rgb(253,204,39)"/><text x="947.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (5 samples, 0.12%)</title><rect x="944" y="372" width="1" height="15" fill="rgb(208,29,44)"/><text x="947.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (5 samples, 0.12%)</title><rect x="944" y="388" width="1" height="15" fill="rgb(226,37,30)"/><text x="947.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 0.12%)</title><rect x="944" y="404" width="1" height="15" fill="rgb(223,91,16)"/><text x="947.00" y="414.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (6 samples, 0.15%)</title><rect x="966" y="388" width="1" height="15" fill="rgb(208,14,44)"/><text x="969.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (5 samples, 0.12%)</title><rect x="967" y="404" width="2" height="15" fill="rgb(217,6,51)"/><text x="970.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (5 samples, 0.12%)</title><rect x="967" y="420" width="2" height="15" fill="rgb(233,85,50)"/><text x="970.00" y="430.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (16 samples, 0.39%)</title><rect x="974" y="452" width="5" height="15" fill="rgb(230,70,40)"/><text x="977.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (5 samples, 0.12%)</title><rect x="981" y="484" width="1" height="15" fill="rgb(230,172,50)"/><text x="984.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 0.12%)</title><rect x="981" y="500" width="1" height="15" fill="rgb(229,203,25)"/><text x="984.00" y="510.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (12 samples, 0.30%)</title><rect x="980" y="452" width="3" height="15" fill="rgb(214,115,21)"/><text x="983.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (12 samples, 0.30%)</title><rect x="980" y="468" width="3" height="15" fill="rgb(216,224,40)"/><text x="983.00" y="478.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c) (5 samples, 0.12%)</title><rect x="983" y="484" width="2" height="15" fill="rgb(245,94,4)"/><text x="986.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (14 samples, 0.34%)</title><rect x="983" y="452" width="4" height="15" fill="rgb(225,130,21)"/><text x="986.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (13 samples, 0.32%)</title><rect x="983" y="468" width="4" height="15" fill="rgb(224,204,23)"/><text x="986.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (8 samples, 0.20%)</title><rect x="985" y="484" width="2" height="15" fill="rgb(207,39,31)"/><text x="988.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src) (205 samples, 5.04%)</title><rect x="996" y="468" width="60" height="15" fill="rgb(219,176,46)"/><text x="999.00" y="478.50">FLOAT_..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (171 samples, 4.21%)</title><rect x="1006" y="484" width="50" height="15" fill="rgb(233,70,34)"/><text x="1009.00" y="494.50">pairw..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (4 samples, 0.10%)</title><rect x="1065" y="484" width="1" height="15" fill="rgb(254,39,3)"/><text x="1068.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (321 samples, 7.90%)</title><rect x="973" y="436" width="93" height="15" fill="rgb(206,16,43)"/><text x="976.00" y="446.50">PyUFunc_Red..</text></g><g><title>reduce_loop (ufunc_object.c) (270 samples, 6.64%)</title><rect x="988" y="452" width="78" height="15" fill="rgb(253,17,22)"/><text x="991.00" y="462.50">reduce_lo..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (34 samples, 0.84%)</title><rect x="1057" y="468" width="9" height="15" fill="rgb(218,19,8)"/><text x="1060.00" y="478.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (331 samples, 8.14%)</title><rect x="973" y="420" width="96" height="15" fill="rgb(240,30,3)"/><text x="976.00" y="430.50">PyUFunc_Red..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (9 samples, 0.22%)</title><rect x="1066" y="436" width="3" height="15" fill="rgb(249,155,20)"/><text x="1069.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (8 samples, 0.20%)</title><rect x="1067" y="452" width="2" height="15" fill="rgb(247,106,17)"/><text x="1070.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (8 samples, 0.20%)</title><rect x="1067" y="468" width="2" height="15" fill="rgb(220,194,18)"/><text x="1070.00" y="478.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (416 samples, 10.24%)</title><rect x="949" y="324" width="121" height="15" fill="rgb(244,168,38)"/><text x="952.00" y="334.50">sum (&lt;__array_f..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (407 samples, 10.01%)</title><rect x="951" y="340" width="119" height="15" fill="rgb(229,225,14)"/><text x="954.00" y="350.50">array_implemen..</text></g><g><title>sum (numpy/core/fromnumeric.py) (401 samples, 9.87%)</title><rect x="953" y="356" width="117" height="15" fill="rgb(208,187,52)"/><text x="956.00" y="366.50">sum (numpy/cor..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (378 samples, 9.30%)</title><rect x="960" y="372" width="110" height="15" fill="rgb(246,62,19)"/><text x="963.00" y="382.50">_wrapreductio..</text></g><g><title>ufunc_reduce (ufunc_object.c) (352 samples, 8.66%)</title><rect x="967" y="388" width="103" height="15" fill="rgb(212,11,31)"/><text x="970.00" y="398.50">ufunc_reduce..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (347 samples, 8.54%)</title><rect x="969" y="404" width="101" height="15" fill="rgb(219,117,44)"/><text x="972.00" y="414.50">PyUFunc_Gene..</text></g><g><title>PyArray_NewFromDescr (ctors.c) (6 samples, 0.15%)</title><rect x="1072" y="372" width="2" height="15" fill="rgb(213,98,16)"/><text x="1075.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (6 samples, 0.15%)</title><rect x="1072" y="388" width="2" height="15" fill="rgb(251,173,42)"/><text x="1075.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h) (47 samples, 1.16%)</title><rect x="1079" y="404" width="14" height="15" fill="rgb(220,65,20)"/><text x="1082.00" y="414.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (56 samples, 1.38%)</title><rect x="1093" y="404" width="16" height="15" fill="rgb(205,119,24)"/><text x="1096.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (129 samples, 3.17%)</title><rect x="1072" y="356" width="38" height="15" fill="rgb(234,28,50)"/><text x="1075.00" y="366.50">exe..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (122 samples, 3.00%)</title><rect x="1074" y="372" width="36" height="15" fill="rgb(224,79,27)"/><text x="1077.00" y="382.50">tri..</text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (119 samples, 2.93%)</title><rect x="1075" y="388" width="35" height="15" fill="rgb(208,103,39)"/><text x="1078.00" y="398.50">ss..</text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (7 samples, 0.17%)</title><rect x="1110" y="356" width="2" height="15" fill="rgb(230,17,28)"/><text x="1113.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (147 samples, 3.62%)</title><rect x="1070" y="340" width="43" height="15" fill="rgb(246,211,50)"/><text x="1073.00" y="350.50">PyUF..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (580 samples, 14.27%)</title><rect x="945" y="308" width="168" height="15" fill="rgb(217,119,44)"/><text x="948.00" y="318.50">_run (mlprodict/onnxr..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (151 samples, 3.72%)</title><rect x="1070" y="324" width="43" height="15" fill="rgb(208,97,12)"/><text x="1073.00" y="334.50">ufun..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,266 samples, 31.15%)</title><rect x="746" y="260" width="368" height="15" fill="rgb(227,95,44)"/><text x="749.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,113 samples, 27.39%)</title><rect x="791" y="276" width="323" height="15" fill="rgb(254,154,25)"/><text x="794.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,082 samples, 26.62%)</title><rect x="800" y="292" width="314" height="15" fill="rgb(217,38,5)"/><text x="803.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,314 samples, 32.33%)</title><rect x="732" y="244" width="382" height="15" fill="rgb(207,137,0)"/><text x="735.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_infere..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,324 samples, 32.58%)</title><rect x="730" y="228" width="385" height="15" fill="rgb(230,96,38)"/><text x="733.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (4 samples, 0.10%)</title><rect x="1115" y="276" width="1" height="15" fill="rgb(219,69,4)"/><text x="1118.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.10%)</title><rect x="1115" y="292" width="1" height="15" fill="rgb(242,204,40)"/><text x="1118.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (4 samples, 0.10%)</title><rect x="1115" y="308" width="1" height="15" fill="rgb(208,38,7)"/><text x="1118.00" y="318.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (5 samples, 0.12%)</title><rect x="1116" y="356" width="1" height="15" fill="rgb(230,225,7)"/><text x="1119.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (5 samples, 0.12%)</title><rect x="1116" y="372" width="1" height="15" fill="rgb(208,80,32)"/><text x="1119.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (1,452 samples, 35.73%)</title><rect x="696" y="212" width="422" height="15" fill="rgb(207,97,50)"/><text x="699.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (10 samples, 0.25%)</title><rect x="1115" y="228" width="3" height="15" fill="rgb(246,201,26)"/><text x="1118.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (10 samples, 0.25%)</title><rect x="1115" y="244" width="3" height="15" fill="rgb(215,57,35)"/><text x="1118.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (10 samples, 0.25%)</title><rect x="1115" y="260" width="3" height="15" fill="rgb(229,15,26)"/><text x="1118.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (6 samples, 0.15%)</title><rect x="1116" y="276" width="2" height="15" fill="rgb(242,36,18)"/><text x="1119.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.15%)</title><rect x="1116" y="292" width="2" height="15" fill="rgb(232,187,2)"/><text x="1119.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (6 samples, 0.15%)</title><rect x="1116" y="308" width="2" height="15" fill="rgb(246,26,10)"/><text x="1119.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (6 samples, 0.15%)</title><rect x="1116" y="324" width="2" height="15" fill="rgb(252,114,9)"/><text x="1119.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (6 samples, 0.15%)</title><rect x="1116" y="340" width="2" height="15" fill="rgb(210,157,27)"/><text x="1119.00" y="350.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src) (8 samples, 0.20%)</title><rect x="1119" y="372" width="3" height="15" fill="rgb(222,23,30)"/><text x="1122.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c) (8 samples, 0.20%)</title><rect x="1119" y="388" width="3" height="15" fill="rgb(215,73,32)"/><text x="1122.00" y="398.50"></text></g><g><title>adumb_select_float (selection.c.src) (43 samples, 1.06%)</title><rect x="1122" y="388" width="12" height="15" fill="rgb(240,164,23)"/><text x="1125.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (30 samples, 0.74%)</title><rect x="1126" y="404" width="8" height="15" fill="rgb(252,133,13)"/><text x="1129.00" y="414.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (56 samples, 1.38%)</title><rect x="1118" y="260" width="17" height="15" fill="rgb(206,129,42)"/><text x="1121.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (56 samples, 1.38%)</title><rect x="1118" y="276" width="17" height="15" fill="rgb(213,13,27)"/><text x="1121.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (56 samples, 1.38%)</title><rect x="1118" y="292" width="17" height="15" fill="rgb(229,70,29)"/><text x="1121.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (56 samples, 1.38%)</title><rect x="1118" y="308" width="17" height="15" fill="rgb(226,214,34)"/><text x="1121.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (56 samples, 1.38%)</title><rect x="1118" y="324" width="17" height="15" fill="rgb(210,164,51)"/><text x="1121.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (56 samples, 1.38%)</title><rect x="1118" y="340" width="17" height="15" fill="rgb(205,200,43)"/><text x="1121.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (56 samples, 1.38%)</title><rect x="1118" y="356" width="17" height="15" fill="rgb(249,40,17)"/><text x="1121.00" y="366.50"></text></g><g><title>aintroselect_float (selection.c.src) (44 samples, 1.08%)</title><rect x="1122" y="372" width="13" height="15" fill="rgb(224,142,35)"/><text x="1125.00" y="382.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (5 samples, 0.12%)</title><rect x="1136" y="276" width="2" height="15" fill="rgb(243,145,35)"/><text x="1139.00" y="286.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (5 samples, 0.12%)</title><rect x="1138" y="276" width="1" height="15" fill="rgb(215,83,40)"/><text x="1141.00" y="286.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (5 samples, 0.12%)</title><rect x="1138" y="292" width="1" height="15" fill="rgb(246,206,4)"/><text x="1141.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (5 samples, 0.12%)</title><rect x="1138" y="308" width="1" height="15" fill="rgb(219,108,41)"/><text x="1141.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (5 samples, 0.12%)</title><rect x="1138" y="324" width="1" height="15" fill="rgb(223,158,32)"/><text x="1141.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (5 samples, 0.12%)</title><rect x="1138" y="340" width="1" height="15" fill="rgb(209,6,42)"/><text x="1141.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (76 samples, 1.87%)</title><rect x="1118" y="212" width="22" height="15" fill="rgb(251,15,24)"/><text x="1121.00" y="222.50">_..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (76 samples, 1.87%)</title><rect x="1118" y="228" width="22" height="15" fill="rgb(214,2,35)"/><text x="1121.00" y="238.50">_..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (76 samples, 1.87%)</title><rect x="1118" y="244" width="22" height="15" fill="rgb(237,201,34)"/><text x="1121.00" y="254.50">t..</text></g><g><title>array_subscript (mapping.c) (13 samples, 0.32%)</title><rect x="1136" y="260" width="4" height="15" fill="rgb(210,97,41)"/><text x="1139.00" y="270.50"></text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (1,581 samples, 38.90%)</title><rect x="685" y="68" width="459" height="15" fill="rgb(247,11,27)"/><text x="688.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algor..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (1,581 samples, 38.90%)</title><rect x="685" y="84" width="459" height="15" fill="rgb(212,137,49)"/><text x="688.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algo..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (1,581 samples, 38.90%)</title><rect x="685" y="100" width="459" height="15" fill="rgb(232,170,41)"/><text x="688.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmb..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (1,581 samples, 38.90%)</title><rect x="685" y="116" width="459" height="15" fill="rgb(225,213,47)"/><text x="688.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (1,581 samples, 38.90%)</title><rect x="685" y="132" width="459" height="15" fill="rgb(254,36,28)"/><text x="688.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,581 samples, 38.90%)</title><rect x="685" y="148" width="459" height="15" fill="rgb(251,159,54)"/><text x="688.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,581 samples, 38.90%)</title><rect x="685" y="164" width="459" height="15" fill="rgb(208,172,2)"/><text x="688.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,579 samples, 38.85%)</title><rect x="685" y="180" width="459" height="15" fill="rgb(218,207,15)"/><text x="688.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,574 samples, 38.73%)</title><rect x="687" y="196" width="457" height="15" fill="rgb(243,120,12)"/><text x="690.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (12 samples, 0.30%)</title><rect x="1140" y="212" width="4" height="15" fill="rgb(210,229,51)"/><text x="1143.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (10 samples, 0.25%)</title><rect x="1141" y="228" width="3" height="15" fill="rgb(244,212,37)"/><text x="1144.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (10 samples, 0.25%)</title><rect x="1141" y="244" width="3" height="15" fill="rgb(248,109,3)"/><text x="1144.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (10 samples, 0.25%)</title><rect x="1141" y="260" width="3" height="15" fill="rgb(232,201,22)"/><text x="1144.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (10 samples, 0.25%)</title><rect x="1141" y="276" width="3" height="15" fill="rgb(246,123,38)"/><text x="1144.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (10 samples, 0.25%)</title><rect x="1141" y="292" width="3" height="15" fill="rgb(229,167,38)"/><text x="1144.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src) (10 samples, 0.25%)</title><rect x="1141" y="308" width="3" height="15" fill="rgb(213,86,23)"/><text x="1144.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src) (10 samples, 0.25%)</title><rect x="1141" y="324" width="3" height="15" fill="rgb(213,165,6)"/><text x="1144.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src) (10 samples, 0.25%)</title><rect x="1141" y="340" width="3" height="15" fill="rgb(214,88,11)"/><text x="1144.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (10 samples, 0.25%)</title><rect x="1141" y="356" width="3" height="15" fill="rgb(207,28,11)"/><text x="1144.00" y="366.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (62 samples, 1.53%)</title><rect x="1147" y="212" width="18" height="15" fill="rgb(217,215,53)"/><text x="1150.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (62 samples, 1.53%)</title><rect x="1147" y="228" width="18" height="15" fill="rgb(249,151,11)"/><text x="1150.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (62 samples, 1.53%)</title><rect x="1147" y="244" width="18" height="15" fill="rgb(213,165,43)"/><text x="1150.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (61 samples, 1.50%)</title><rect x="1148" y="260" width="17" height="15" fill="rgb(253,170,47)"/><text x="1151.00" y="270.50"></text></g><g><title>array_argpartition (methods.c) (61 samples, 1.50%)</title><rect x="1148" y="276" width="17" height="15" fill="rgb(241,22,40)"/><text x="1151.00" y="286.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (61 samples, 1.50%)</title><rect x="1148" y="292" width="17" height="15" fill="rgb(212,170,10)"/><text x="1151.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c) (61 samples, 1.50%)</title><rect x="1148" y="308" width="17" height="15" fill="rgb(231,168,45)"/><text x="1151.00" y="318.50"></text></g><g><title>aintroselect_double (selection.c.src) (58 samples, 1.43%)</title><rect x="1149" y="324" width="16" height="15" fill="rgb(239,173,38)"/><text x="1152.00" y="334.50"></text></g><g><title>adumb_select_double (selection.c.src) (57 samples, 1.40%)</title><rect x="1149" y="340" width="16" height="15" fill="rgb(244,22,9)"/><text x="1152.00" y="350.50"></text></g><g><title>DOUBLE_LT (npysort_common.h) (44 samples, 1.08%)</title><rect x="1153" y="356" width="12" height="15" fill="rgb(248,75,50)"/><text x="1156.00" y="366.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (4 samples, 0.10%)</title><rect x="1166" y="228" width="1" height="15" fill="rgb(223,167,52)"/><text x="1169.00" y="238.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py) (72 samples, 1.77%)</title><rect x="1147" y="196" width="21" height="15" fill="rgb(238,201,2)"/><text x="1150.00" y="206.50"></text></g><g><title>array_subscript (mapping.c) (10 samples, 0.25%)</title><rect x="1165" y="212" width="3" height="15" fill="rgb(251,186,54)"/><text x="1168.00" y="222.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (4 samples, 0.10%)</title><rect x="1167" y="228" width="1" height="15" fill="rgb(244,140,19)"/><text x="1170.00" y="238.50"></text></g><g><title>array_multiply (number.c) (6 samples, 0.15%)</title><rect x="1169" y="244" width="2" height="15" fill="rgb(214,216,33)"/><text x="1172.00" y="254.50"></text></g><g><title>try_binary_elide (temp_elide.c) (6 samples, 0.15%)</title><rect x="1169" y="260" width="2" height="15" fill="rgb(246,213,41)"/><text x="1172.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 0.15%)</title><rect x="1169" y="276" width="2" height="15" fill="rgb(209,155,8)"/><text x="1172.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (6 samples, 0.15%)</title><rect x="1169" y="292" width="2" height="15" fill="rgb(240,75,40)"/><text x="1172.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (6 samples, 0.15%)</title><rect x="1169" y="308" width="2" height="15" fill="rgb(208,85,33)"/><text x="1172.00" y="318.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (6 samples, 0.15%)</title><rect x="1169" y="324" width="2" height="15" fill="rgb(254,91,25)"/><text x="1172.00" y="334.50"></text></g><g><title>sse2_binary_scalar2_multiply_DOUBLE (simd.inc.src) (6 samples, 0.15%)</title><rect x="1169" y="340" width="2" height="15" fill="rgb(254,87,50)"/><text x="1172.00" y="350.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py) (5 samples, 0.12%)</title><rect x="1171" y="244" width="1" height="15" fill="rgb(234,189,39)"/><text x="1174.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (5 samples, 0.12%)</title><rect x="1171" y="260" width="1" height="15" fill="rgb(248,117,33)"/><text x="1174.00" y="270.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py) (4 samples, 0.10%)</title><rect x="1172" y="244" width="2" height="15" fill="rgb(247,68,33)"/><text x="1175.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;) (4 samples, 0.10%)</title><rect x="1172" y="260" width="2" height="15" fill="rgb(209,126,52)"/><text x="1175.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.10%)</title><rect x="1172" y="276" width="2" height="15" fill="rgb(224,80,10)"/><text x="1175.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py) (4 samples, 0.10%)</title><rect x="1172" y="292" width="2" height="15" fill="rgb(251,117,52)"/><text x="1175.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c) (4 samples, 0.10%)</title><rect x="1172" y="308" width="2" height="15" fill="rgb(230,142,17)"/><text x="1175.00" y="318.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 0.25%)</title><rect x="1174" y="260" width="2" height="15" fill="rgb(213,201,19)"/><text x="1177.00" y="270.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (8 samples, 0.20%)</title><rect x="1176" y="388" width="3" height="15" fill="rgb(212,65,16)"/><text x="1179.00" y="398.50"></text></g><g><title>sched_yield (libc-2.29.so) (8 samples, 0.20%)</title><rect x="1176" y="404" width="3" height="15" fill="rgb(217,229,5)"/><text x="1179.00" y="414.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src) (10 samples, 0.25%)</title><rect x="1176" y="308" width="3" height="15" fill="rgb(242,158,42)"/><text x="1179.00" y="318.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 0.25%)</title><rect x="1176" y="324" width="3" height="15" fill="rgb(244,31,40)"/><text x="1179.00" y="334.50"></text></g><g><title>dgemm_thread_tn (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 0.25%)</title><rect x="1176" y="340" width="3" height="15" fill="rgb(242,59,6)"/><text x="1179.00" y="350.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 0.25%)</title><rect x="1176" y="356" width="3" height="15" fill="rgb(236,118,0)"/><text x="1179.00" y="366.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 0.25%)</title><rect x="1176" y="372" width="3" height="15" fill="rgb(250,114,14)"/><text x="1179.00" y="382.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (21 samples, 0.52%)</title><rect x="1174" y="244" width="6" height="15" fill="rgb(209,179,7)"/><text x="1177.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (11 samples, 0.27%)</title><rect x="1176" y="260" width="4" height="15" fill="rgb(240,178,51)"/><text x="1179.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (11 samples, 0.27%)</title><rect x="1176" y="276" width="4" height="15" fill="rgb(242,30,18)"/><text x="1179.00" y="286.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (11 samples, 0.27%)</title><rect x="1176" y="292" width="4" height="15" fill="rgb(237,63,50)"/><text x="1179.00" y="302.50"></text></g><g><title>_mm_add_pd (emmintrin.h) (4 samples, 0.10%)</title><rect x="1181" y="356" width="1" height="15" fill="rgb(253,142,54)"/><text x="1184.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src) (10 samples, 0.25%)</title><rect x="1180" y="308" width="3" height="15" fill="rgb(210,149,46)"/><text x="1183.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (9 samples, 0.22%)</title><rect x="1180" y="324" width="3" height="15" fill="rgb(238,38,42)"/><text x="1183.00" y="334.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (9 samples, 0.22%)</title><rect x="1180" y="340" width="3" height="15" fill="rgb(247,90,0)"/><text x="1183.00" y="350.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (4 samples, 0.10%)</title><rect x="1182" y="356" width="1" height="15" fill="rgb(228,27,29)"/><text x="1185.00" y="366.50"></text></g><g><title>iterator_loop (ufunc_object.c) (15 samples, 0.37%)</title><rect x="1180" y="292" width="5" height="15" fill="rgb(207,193,11)"/><text x="1183.00" y="302.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (4 samples, 0.10%)</title><rect x="1183" y="308" width="2" height="15" fill="rgb(220,197,22)"/><text x="1186.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (4 samples, 0.10%)</title><rect x="1183" y="324" width="2" height="15" fill="rgb(242,156,51)"/><text x="1186.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (4 samples, 0.10%)</title><rect x="1183" y="340" width="2" height="15" fill="rgb(239,110,14)"/><text x="1186.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (25 samples, 0.62%)</title><rect x="1180" y="276" width="7" height="15" fill="rgb(250,211,5)"/><text x="1183.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (10 samples, 0.25%)</title><rect x="1185" y="292" width="2" height="15" fill="rgb(222,70,43)"/><text x="1188.00" y="302.50"></text></g><g><title>DOUBLE_maximum (loops.c.src) (10 samples, 0.25%)</title><rect x="1185" y="308" width="2" height="15" fill="rgb(211,180,53)"/><text x="1188.00" y="318.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (143 samples, 3.52%)</title><rect x="1146" y="164" width="42" height="15" fill="rgb(252,28,51)"/><text x="1149.00" y="174.50">kne..</text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py) (141 samples, 3.47%)</title><rect x="1147" y="180" width="41" height="15" fill="rgb(234,167,15)"/><text x="1150.00" y="190.50">pai..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py) (66 samples, 1.62%)</title><rect x="1169" y="196" width="19" height="15" fill="rgb(247,125,51)"/><text x="1172.00" y="206.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py) (66 samples, 1.62%)</title><rect x="1169" y="212" width="19" height="15" fill="rgb(238,137,52)"/><text x="1172.00" y="222.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py) (64 samples, 1.57%)</title><rect x="1169" y="228" width="19" height="15" fill="rgb(234,166,28)"/><text x="1172.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (28 samples, 0.69%)</title><rect x="1180" y="244" width="8" height="15" fill="rgb(227,27,51)"/><text x="1183.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (28 samples, 0.69%)</title><rect x="1180" y="260" width="8" height="15" fill="rgb(228,167,33)"/><text x="1183.00" y="270.50"></text></g><g><title>all (4,064 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(242,51,30)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (4,064 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(232,63,13)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (157 samples, 3.86%)</title><rect x="1144" y="68" width="46" height="15" fill="rgb(241,229,51)"/><text x="1147.00" y="78.50">prof..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (157 samples, 3.86%)</title><rect x="1144" y="84" width="46" height="15" fill="rgb(205,187,41)"/><text x="1147.00" y="94.50">setu..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (157 samples, 3.86%)</title><rect x="1144" y="100" width="46" height="15" fill="rgb(228,116,54)"/><text x="1147.00" y="110.50">prof..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (156 samples, 3.84%)</title><rect x="1144" y="116" width="46" height="15" fill="rgb(224,206,39)"/><text x="1147.00" y="126.50">time..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (156 samples, 3.84%)</title><rect x="1144" y="132" width="46" height="15" fill="rgb(253,29,2)"/><text x="1147.00" y="142.50">&lt;lam..</text></g><g><title>predict (sklearn/neighbors/_regression.py) (156 samples, 3.84%)</title><rect x="1144" y="148" width="46" height="15" fill="rgb(243,48,49)"/><text x="1147.00" y="158.50">pred..</text></g><g><title>mean (&lt;__array_function__ internals&gt;) (6 samples, 0.15%)</title><rect x="1188" y="164" width="2" height="15" fill="rgb(240,8,29)"/><text x="1191.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.15%)</title><rect x="1188" y="180" width="2" height="15" fill="rgb(216,59,16)"/><text x="1191.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (6 samples, 0.15%)</title><rect x="1188" y="196" width="2" height="15" fill="rgb(222,142,26)"/><text x="1191.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py) (6 samples, 0.15%)</title><rect x="1188" y="212" width="2" height="15" fill="rgb(245,124,27)"/><text x="1191.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (5 samples, 0.12%)</title><rect x="1188" y="228" width="2" height="15" fill="rgb(220,169,10)"/><text x="1191.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (5 samples, 0.12%)</title><rect x="1188" y="244" width="2" height="15" fill="rgb(236,66,39)"/><text x="1191.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (5 samples, 0.12%)</title><rect x="1188" y="260" width="2" height="15" fill="rgb(227,223,26)"/><text x="1191.00" y="270.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (5 samples, 0.12%)</title><rect x="1188" y="276" width="2" height="15" fill="rgb(219,39,45)"/><text x="1191.00" y="286.50"></text></g></g></svg>