<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2150" onload="init(evt)" viewBox="0 0 1200 2150" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="2150" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="2133.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="2133.00"> </text><g id="frames"><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (1 samples, 0.45%)</title><rect x="10" y="964" width="5" height="15" fill="rgb(238,12,27)"/><text x="13.00" y="974.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.45%)</title><rect x="10" y="980" width="5" height="15" fill="rgb(227,215,47)"/><text x="13.00" y="990.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.45%)</title><rect x="10" y="996" width="5" height="15" fill="rgb(211,154,30)"/><text x="13.00" y="1006.50"></text></g><g><title>_legacy_cmpkey (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.45%)</title><rect x="10" y="1012" width="5" height="15" fill="rgb(245,174,17)"/><text x="13.00" y="1022.50"></text></g><g><title>_parse_version_parts (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.45%)</title><rect x="10" y="1028" width="5" height="15" fill="rgb(235,133,29)"/><text x="13.00" y="1038.50"></text></g><g><title>_sre_SRE_Pattern_split (python3.7) (1 samples, 0.45%)</title><rect x="10" y="1044" width="5" height="15" fill="rgb(252,2,9)"/><text x="13.00" y="1054.50"></text></g><g><title>sre_ucs1_match (python3.7) (1 samples, 0.45%)</title><rect x="10" y="1060" width="5" height="15" fill="rgb(211,25,40)"/><text x="13.00" y="1070.50"></text></g><g><title>_build_master (pkg_resources/__init__.py) (2 samples, 0.91%)</title><rect x="10" y="868" width="10" height="15" fill="rgb(208,112,35)"/><text x="13.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (2 samples, 0.91%)</title><rect x="10" y="884" width="10" height="15" fill="rgb(238,91,49)"/><text x="13.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (2 samples, 0.91%)</title><rect x="10" y="900" width="10" height="15" fill="rgb(223,65,11)"/><text x="13.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.91%)</title><rect x="10" y="916" width="10" height="15" fill="rgb(210,26,24)"/><text x="13.00" y="926.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (2 samples, 0.91%)</title><rect x="10" y="932" width="10" height="15" fill="rgb(248,202,11)"/><text x="13.00" y="942.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (2 samples, 0.91%)</title><rect x="10" y="948" width="10" height="15" fill="rgb(229,93,54)"/><text x="13.00" y="958.50"></text></g><g><title>splitext (posixpath.py) (1 samples, 0.45%)</title><rect x="15" y="964" width="5" height="15" fill="rgb(218,139,47)"/><text x="18.00" y="974.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (1 samples, 0.45%)</title><rect x="20" y="900" width="6" height="15" fill="rgb(253,72,31)"/><text x="23.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (1 samples, 0.45%)</title><rect x="20" y="916" width="6" height="15" fill="rgb(216,42,28)"/><text x="23.00" y="926.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (1 samples, 0.45%)</title><rect x="20" y="932" width="6" height="15" fill="rgb(236,136,14)"/><text x="23.00" y="942.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.45%)</title><rect x="20" y="948" width="6" height="15" fill="rgb(236,65,49)"/><text x="23.00" y="958.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (4 samples, 1.82%)</title><rect x="10" y="836" width="21" height="15" fill="rgb(225,140,9)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (4 samples, 1.82%)</title><rect x="10" y="852" width="21" height="15" fill="rgb(237,193,44)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (2 samples, 0.91%)</title><rect x="20" y="868" width="11" height="15" fill="rgb(210,179,17)"/><text x="23.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.91%)</title><rect x="20" y="884" width="11" height="15" fill="rgb(254,7,3)"/><text x="23.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (1 samples, 0.45%)</title><rect x="26" y="900" width="5" height="15" fill="rgb(248,83,29)"/><text x="29.00" y="910.50"></text></g><g><title>from_location (pkg_resources/__init__.py) (1 samples, 0.45%)</title><rect x="26" y="916" width="5" height="15" fill="rgb(211,87,9)"/><text x="29.00" y="926.50"></text></g><g><title>_sre_SRE_Pattern_match (python3.7) (1 samples, 0.45%)</title><rect x="26" y="932" width="5" height="15" fill="rgb(222,123,48)"/><text x="29.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="196" width="26" height="15" fill="rgb(219,15,51)"/><text x="13.00" y="206.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="212" width="26" height="15" fill="rgb(231,154,36)"/><text x="13.00" y="222.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="228" width="26" height="15" fill="rgb(211,95,10)"/><text x="13.00" y="238.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="244" width="26" height="15" fill="rgb(251,24,30)"/><text x="13.00" y="254.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 2.27%)</title><rect x="10" y="260" width="26" height="15" fill="rgb(239,77,14)"/><text x="13.00" y="270.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="276" width="26" height="15" fill="rgb(242,214,51)"/><text x="13.00" y="286.50">_..</text></g><g><title>&lt;module&gt; (onnx/__init__.py) (5 samples, 2.27%)</title><rect x="10" y="292" width="26" height="15" fill="rgb(241,155,17)"/><text x="13.00" y="302.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="308" width="26" height="15" fill="rgb(234,172,21)"/><text x="13.00" y="318.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="324" width="26" height="15" fill="rgb(250,155,46)"/><text x="13.00" y="334.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="340" width="26" height="15" fill="rgb(210,9,30)"/><text x="13.00" y="350.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 2.27%)</title><rect x="10" y="356" width="26" height="15" fill="rgb(209,110,47)"/><text x="13.00" y="366.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="372" width="26" height="15" fill="rgb(210,30,10)"/><text x="13.00" y="382.50">_..</text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (5 samples, 2.27%)</title><rect x="10" y="388" width="26" height="15" fill="rgb(208,133,44)"/><text x="13.00" y="398.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="404" width="26" height="15" fill="rgb(217,15,2)"/><text x="13.00" y="414.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="420" width="26" height="15" fill="rgb(231,82,6)"/><text x="13.00" y="430.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="436" width="26" height="15" fill="rgb(246,145,50)"/><text x="13.00" y="446.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 2.27%)</title><rect x="10" y="452" width="26" height="15" fill="rgb(247,136,26)"/><text x="13.00" y="462.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="468" width="26" height="15" fill="rgb(218,108,23)"/><text x="13.00" y="478.50">_..</text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (5 samples, 2.27%)</title><rect x="10" y="484" width="26" height="15" fill="rgb(248,116,13)"/><text x="13.00" y="494.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="500" width="26" height="15" fill="rgb(254,171,18)"/><text x="13.00" y="510.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="516" width="26" height="15" fill="rgb(211,105,31)"/><text x="13.00" y="526.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="532" width="26" height="15" fill="rgb(205,97,19)"/><text x="13.00" y="542.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 2.27%)</title><rect x="10" y="548" width="26" height="15" fill="rgb(236,130,37)"/><text x="13.00" y="558.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="564" width="26" height="15" fill="rgb(224,185,14)"/><text x="13.00" y="574.50">_..</text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (5 samples, 2.27%)</title><rect x="10" y="580" width="26" height="15" fill="rgb(228,38,24)"/><text x="13.00" y="590.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="596" width="26" height="15" fill="rgb(254,161,54)"/><text x="13.00" y="606.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="612" width="26" height="15" fill="rgb(241,166,44)"/><text x="13.00" y="622.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="628" width="26" height="15" fill="rgb(245,102,48)"/><text x="13.00" y="638.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="644" width="26" height="15" fill="rgb(206,185,8)"/><text x="13.00" y="654.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="660" width="26" height="15" fill="rgb(221,123,29)"/><text x="13.00" y="670.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="676" width="26" height="15" fill="rgb(223,185,38)"/><text x="13.00" y="686.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 2.27%)</title><rect x="10" y="692" width="26" height="15" fill="rgb(221,58,0)"/><text x="13.00" y="702.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="708" width="26" height="15" fill="rgb(211,130,34)"/><text x="13.00" y="718.50">_..</text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (5 samples, 2.27%)</title><rect x="10" y="724" width="26" height="15" fill="rgb(219,173,6)"/><text x="13.00" y="734.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="740" width="26" height="15" fill="rgb(251,226,50)"/><text x="13.00" y="750.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="756" width="26" height="15" fill="rgb(223,91,25)"/><text x="13.00" y="766.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="772" width="26" height="15" fill="rgb(207,161,4)"/><text x="13.00" y="782.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 2.27%)</title><rect x="10" y="788" width="26" height="15" fill="rgb(239,44,45)"/><text x="13.00" y="798.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 2.27%)</title><rect x="10" y="804" width="26" height="15" fill="rgb(221,26,44)"/><text x="13.00" y="814.50">_..</text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (5 samples, 2.27%)</title><rect x="10" y="820" width="26" height="15" fill="rgb(229,180,5)"/><text x="13.00" y="830.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="836" width="5" height="15" fill="rgb(245,97,19)"/><text x="34.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="852" width="5" height="15" fill="rgb(212,76,49)"/><text x="34.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="868" width="5" height="15" fill="rgb(246,30,45)"/><text x="34.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="31" y="884" width="5" height="15" fill="rgb(232,122,41)"/><text x="34.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="900" width="5" height="15" fill="rgb(247,132,17)"/><text x="34.00" y="910.50"></text></g><g><title>&lt;module&gt; (email/parser.py) (1 samples, 0.45%)</title><rect x="31" y="916" width="5" height="15" fill="rgb(230,227,13)"/><text x="34.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="932" width="5" height="15" fill="rgb(227,82,48)"/><text x="34.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="948" width="5" height="15" fill="rgb(237,100,47)"/><text x="34.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="964" width="5" height="15" fill="rgb(209,43,8)"/><text x="34.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="31" y="980" width="5" height="15" fill="rgb(227,193,27)"/><text x="34.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="996" width="5" height="15" fill="rgb(205,178,31)"/><text x="34.00" y="1006.50"></text></g><g><title>&lt;module&gt; (email/feedparser.py) (1 samples, 0.45%)</title><rect x="31" y="1012" width="5" height="15" fill="rgb(236,157,52)"/><text x="34.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1028" width="5" height="15" fill="rgb(254,166,33)"/><text x="34.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1044" width="5" height="15" fill="rgb(206,29,48)"/><text x="34.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1060" width="5" height="15" fill="rgb(206,185,32)"/><text x="34.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="31" y="1076" width="5" height="15" fill="rgb(224,26,28)"/><text x="34.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1092" width="5" height="15" fill="rgb(207,57,22)"/><text x="34.00" y="1102.50"></text></g><g><title>&lt;module&gt; (email/_policybase.py) (1 samples, 0.45%)</title><rect x="31" y="1108" width="5" height="15" fill="rgb(221,35,14)"/><text x="34.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1124" width="5" height="15" fill="rgb(235,125,48)"/><text x="34.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1140" width="5" height="15" fill="rgb(220,98,54)"/><text x="34.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1156" width="5" height="15" fill="rgb(209,216,37)"/><text x="34.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="31" y="1172" width="5" height="15" fill="rgb(249,31,4)"/><text x="34.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1188" width="5" height="15" fill="rgb(232,186,25)"/><text x="34.00" y="1198.50"></text></g><g><title>&lt;module&gt; (email/utils.py) (1 samples, 0.45%)</title><rect x="31" y="1204" width="5" height="15" fill="rgb(243,96,12)"/><text x="34.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1220" width="5" height="15" fill="rgb(244,86,31)"/><text x="34.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1236" width="5" height="15" fill="rgb(249,204,46)"/><text x="34.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1252" width="5" height="15" fill="rgb(215,90,10)"/><text x="34.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="31" y="1268" width="5" height="15" fill="rgb(252,14,2)"/><text x="34.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="31" y="1284" width="5" height="15" fill="rgb(210,192,18)"/><text x="34.00" y="1294.50"></text></g><g><title>&lt;module&gt; (socket.py) (1 samples, 0.45%)</title><rect x="31" y="1300" width="5" height="15" fill="rgb(237,145,16)"/><text x="34.00" y="1310.50"></text></g><g><title>_convert (enum.py) (1 samples, 0.45%)</title><rect x="31" y="1316" width="5" height="15" fill="rgb(226,227,24)"/><text x="34.00" y="1326.50"></text></g><g><title>__call__ (enum.py) (1 samples, 0.45%)</title><rect x="31" y="1332" width="5" height="15" fill="rgb(238,50,18)"/><text x="34.00" y="1342.50"></text></g><g><title>_create_ (enum.py) (1 samples, 0.45%)</title><rect x="31" y="1348" width="5" height="15" fill="rgb(210,12,10)"/><text x="34.00" y="1358.50"></text></g><g><title>__setitem__ (enum.py) (1 samples, 0.45%)</title><rect x="31" y="1364" width="5" height="15" fill="rgb(250,54,15)"/><text x="34.00" y="1374.50"></text></g><g><title>_is_descriptor (enum.py) (1 samples, 0.45%)</title><rect x="31" y="1380" width="5" height="15" fill="rgb(224,11,24)"/><text x="34.00" y="1390.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="484" width="6" height="15" fill="rgb(215,136,4)"/><text x="39.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="500" width="6" height="15" fill="rgb(226,199,11)"/><text x="39.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="516" width="6" height="15" fill="rgb(245,9,2)"/><text x="39.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="532" width="6" height="15" fill="rgb(244,13,36)"/><text x="39.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="36" y="548" width="6" height="15" fill="rgb(254,69,46)"/><text x="39.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="564" width="6" height="15" fill="rgb(251,124,11)"/><text x="39.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (1 samples, 0.45%)</title><rect x="36" y="580" width="6" height="15" fill="rgb(225,81,38)"/><text x="39.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="596" width="6" height="15" fill="rgb(240,24,42)"/><text x="39.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="612" width="6" height="15" fill="rgb(251,17,15)"/><text x="39.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="628" width="6" height="15" fill="rgb(206,151,3)"/><text x="39.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="36" y="644" width="6" height="15" fill="rgb(253,28,46)"/><text x="39.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="660" width="6" height="15" fill="rgb(240,115,29)"/><text x="39.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (1 samples, 0.45%)</title><rect x="36" y="676" width="6" height="15" fill="rgb(226,7,26)"/><text x="39.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="692" width="6" height="15" fill="rgb(239,20,30)"/><text x="39.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="708" width="6" height="15" fill="rgb(212,68,46)"/><text x="39.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="724" width="6" height="15" fill="rgb(240,212,13)"/><text x="39.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="36" y="740" width="6" height="15" fill="rgb(252,63,12)"/><text x="39.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="756" width="6" height="15" fill="rgb(251,34,40)"/><text x="39.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (1 samples, 0.45%)</title><rect x="36" y="772" width="6" height="15" fill="rgb(254,32,22)"/><text x="39.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="788" width="6" height="15" fill="rgb(212,154,8)"/><text x="39.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="804" width="6" height="15" fill="rgb(245,33,27)"/><text x="39.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="820" width="6" height="15" fill="rgb(241,109,19)"/><text x="39.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="36" y="836" width="6" height="15" fill="rgb(254,69,35)"/><text x="39.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="852" width="6" height="15" fill="rgb(213,20,43)"/><text x="39.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (1 samples, 0.45%)</title><rect x="36" y="868" width="6" height="15" fill="rgb(215,219,10)"/><text x="39.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="884" width="6" height="15" fill="rgb(245,99,10)"/><text x="39.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="900" width="6" height="15" fill="rgb(218,139,3)"/><text x="39.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="916" width="6" height="15" fill="rgb(222,14,22)"/><text x="39.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="932" width="6" height="15" fill="rgb(220,89,27)"/><text x="39.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="948" width="6" height="15" fill="rgb(253,150,35)"/><text x="39.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="964" width="6" height="15" fill="rgb(237,156,33)"/><text x="39.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="36" y="980" width="6" height="15" fill="rgb(233,132,13)"/><text x="39.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="996" width="6" height="15" fill="rgb(242,175,15)"/><text x="39.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (1 samples, 0.45%)</title><rect x="36" y="1012" width="6" height="15" fill="rgb(251,159,53)"/><text x="39.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1028" width="6" height="15" fill="rgb(221,183,9)"/><text x="39.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1044" width="6" height="15" fill="rgb(214,165,0)"/><text x="39.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1060" width="6" height="15" fill="rgb(254,179,45)"/><text x="39.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="36" y="1076" width="6" height="15" fill="rgb(233,157,4)"/><text x="39.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1092" width="6" height="15" fill="rgb(207,29,8)"/><text x="39.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (1 samples, 0.45%)</title><rect x="36" y="1108" width="6" height="15" fill="rgb(253,195,21)"/><text x="39.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1124" width="6" height="15" fill="rgb(205,201,28)"/><text x="39.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1140" width="6" height="15" fill="rgb(214,62,14)"/><text x="39.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1156" width="6" height="15" fill="rgb(233,67,29)"/><text x="39.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="36" y="1172" width="6" height="15" fill="rgb(231,16,47)"/><text x="39.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1188" width="6" height="15" fill="rgb(246,198,21)"/><text x="39.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py) (1 samples, 0.45%)</title><rect x="36" y="1204" width="6" height="15" fill="rgb(219,220,21)"/><text x="39.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1220" width="6" height="15" fill="rgb(206,34,52)"/><text x="39.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1236" width="6" height="15" fill="rgb(208,185,51)"/><text x="39.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1252" width="6" height="15" fill="rgb(212,28,50)"/><text x="39.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="36" y="1268" width="6" height="15" fill="rgb(208,8,31)"/><text x="39.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="36" y="1284" width="6" height="15" fill="rgb(205,8,31)"/><text x="39.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_container.py) (1 samples, 0.45%)</title><rect x="36" y="1300" width="6" height="15" fill="rgb(227,206,14)"/><text x="39.00" y="1310.50"></text></g><g><title>_get_operation_list (skl2onnx/common/_container.py) (1 samples, 0.45%)</title><rect x="36" y="1316" width="6" height="15" fill="rgb(207,146,3)"/><text x="39.00" y="1326.50"></text></g><g><title>getsource (inspect.py) (1 samples, 0.45%)</title><rect x="36" y="1332" width="6" height="15" fill="rgb(244,229,45)"/><text x="39.00" y="1342.50"></text></g><g><title>getsourcelines (inspect.py) (1 samples, 0.45%)</title><rect x="36" y="1348" width="6" height="15" fill="rgb(211,176,28)"/><text x="39.00" y="1358.50"></text></g><g><title>getblock (inspect.py) (1 samples, 0.45%)</title><rect x="36" y="1364" width="6" height="15" fill="rgb(222,72,4)"/><text x="39.00" y="1374.50"></text></g><g><title>_tokenize (tokenize.py) (1 samples, 0.45%)</title><rect x="36" y="1380" width="6" height="15" fill="rgb(214,198,34)"/><text x="39.00" y="1390.50"></text></g><g><title>_compile (tokenize.py) (1 samples, 0.45%)</title><rect x="36" y="1396" width="6" height="15" fill="rgb(215,28,53)"/><text x="39.00" y="1406.50"></text></g><g><title>compile (re.py) (1 samples, 0.45%)</title><rect x="36" y="1412" width="6" height="15" fill="rgb(225,15,16)"/><text x="39.00" y="1422.50"></text></g><g><title>_compile (re.py) (1 samples, 0.45%)</title><rect x="36" y="1428" width="6" height="15" fill="rgb(221,188,18)"/><text x="39.00" y="1438.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.91%)</title><rect x="36" y="340" width="11" height="15" fill="rgb(211,141,40)"/><text x="39.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.91%)</title><rect x="36" y="356" width="11" height="15" fill="rgb(205,32,0)"/><text x="39.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.91%)</title><rect x="36" y="372" width="11" height="15" fill="rgb(228,14,48)"/><text x="39.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.91%)</title><rect x="36" y="388" width="11" height="15" fill="rgb(241,152,11)"/><text x="39.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.91%)</title><rect x="36" y="404" width="11" height="15" fill="rgb(250,20,23)"/><text x="39.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.91%)</title><rect x="36" y="420" width="11" height="15" fill="rgb(228,68,7)"/><text x="39.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (2 samples, 0.91%)</title><rect x="36" y="436" width="11" height="15" fill="rgb(239,150,3)"/><text x="39.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.91%)</title><rect x="36" y="452" width="11" height="15" fill="rgb(245,62,17)"/><text x="39.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.91%)</title><rect x="36" y="468" width="11" height="15" fill="rgb(239,197,10)"/><text x="39.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="484" width="5" height="15" fill="rgb(236,1,16)"/><text x="45.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="500" width="5" height="15" fill="rgb(222,130,44)"/><text x="45.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="516" width="5" height="15" fill="rgb(235,120,30)"/><text x="45.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.45%)</title><rect x="42" y="532" width="5" height="15" fill="rgb(215,214,19)"/><text x="45.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="548" width="5" height="15" fill="rgb(211,72,18)"/><text x="45.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="564" width="5" height="15" fill="rgb(221,5,3)"/><text x="45.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="580" width="5" height="15" fill="rgb(205,157,31)"/><text x="45.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="596" width="5" height="15" fill="rgb(250,21,27)"/><text x="45.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="612" width="5" height="15" fill="rgb(251,153,45)"/><text x="45.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (1 samples, 0.45%)</title><rect x="42" y="628" width="5" height="15" fill="rgb(249,226,21)"/><text x="45.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="644" width="5" height="15" fill="rgb(235,21,40)"/><text x="45.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="660" width="5" height="15" fill="rgb(226,115,16)"/><text x="45.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="676" width="5" height="15" fill="rgb(238,24,39)"/><text x="45.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="692" width="5" height="15" fill="rgb(236,17,46)"/><text x="45.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="708" width="5" height="15" fill="rgb(223,211,53)"/><text x="45.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (1 samples, 0.45%)</title><rect x="42" y="724" width="5" height="15" fill="rgb(247,42,35)"/><text x="45.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="740" width="5" height="15" fill="rgb(223,130,38)"/><text x="45.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="756" width="5" height="15" fill="rgb(234,53,51)"/><text x="45.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="772" width="5" height="15" fill="rgb(239,155,22)"/><text x="45.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="788" width="5" height="15" fill="rgb(238,133,52)"/><text x="45.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="804" width="5" height="15" fill="rgb(234,33,0)"/><text x="45.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (1 samples, 0.45%)</title><rect x="42" y="820" width="5" height="15" fill="rgb(253,81,47)"/><text x="45.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="836" width="5" height="15" fill="rgb(210,229,24)"/><text x="45.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="852" width="5" height="15" fill="rgb(231,85,45)"/><text x="45.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="868" width="5" height="15" fill="rgb(254,79,2)"/><text x="45.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="884" width="5" height="15" fill="rgb(233,136,30)"/><text x="45.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="900" width="5" height="15" fill="rgb(228,79,38)"/><text x="45.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (1 samples, 0.45%)</title><rect x="42" y="916" width="5" height="15" fill="rgb(246,152,23)"/><text x="45.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="932" width="5" height="15" fill="rgb(209,101,20)"/><text x="45.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="948" width="5" height="15" fill="rgb(210,175,31)"/><text x="45.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="964" width="5" height="15" fill="rgb(239,152,25)"/><text x="45.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="980" width="5" height="15" fill="rgb(221,200,40)"/><text x="45.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="996" width="5" height="15" fill="rgb(208,73,31)"/><text x="45.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (1 samples, 0.45%)</title><rect x="42" y="1012" width="5" height="15" fill="rgb(210,184,29)"/><text x="45.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1028" width="5" height="15" fill="rgb(239,174,25)"/><text x="45.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1044" width="5" height="15" fill="rgb(208,133,18)"/><text x="45.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1060" width="5" height="15" fill="rgb(254,19,54)"/><text x="45.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="1076" width="5" height="15" fill="rgb(227,6,36)"/><text x="45.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1092" width="5" height="15" fill="rgb(217,185,48)"/><text x="45.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (1 samples, 0.45%)</title><rect x="42" y="1108" width="5" height="15" fill="rgb(214,12,16)"/><text x="45.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1124" width="5" height="15" fill="rgb(211,212,54)"/><text x="45.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1140" width="5" height="15" fill="rgb(246,128,48)"/><text x="45.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1156" width="5" height="15" fill="rgb(240,150,47)"/><text x="45.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="1172" width="5" height="15" fill="rgb(218,0,18)"/><text x="45.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1188" width="5" height="15" fill="rgb(254,8,10)"/><text x="45.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (1 samples, 0.45%)</title><rect x="42" y="1204" width="5" height="15" fill="rgb(227,29,39)"/><text x="45.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1220" width="5" height="15" fill="rgb(227,104,43)"/><text x="45.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1236" width="5" height="15" fill="rgb(245,85,15)"/><text x="45.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1252" width="5" height="15" fill="rgb(206,73,10)"/><text x="45.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="1268" width="5" height="15" fill="rgb(227,170,47)"/><text x="45.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1284" width="5" height="15" fill="rgb(240,213,36)"/><text x="45.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (1 samples, 0.45%)</title><rect x="42" y="1300" width="5" height="15" fill="rgb(245,125,37)"/><text x="45.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1316" width="5" height="15" fill="rgb(248,51,39)"/><text x="45.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1332" width="5" height="15" fill="rgb(253,65,52)"/><text x="45.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1348" width="5" height="15" fill="rgb(239,17,54)"/><text x="45.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="1364" width="5" height="15" fill="rgb(233,106,8)"/><text x="45.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1380" width="5" height="15" fill="rgb(240,105,17)"/><text x="45.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (1 samples, 0.45%)</title><rect x="42" y="1396" width="5" height="15" fill="rgb(238,90,28)"/><text x="45.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1412" width="5" height="15" fill="rgb(207,212,9)"/><text x="45.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1428" width="5" height="15" fill="rgb(245,216,3)"/><text x="45.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1444" width="5" height="15" fill="rgb(244,70,19)"/><text x="45.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="1460" width="5" height="15" fill="rgb(223,117,38)"/><text x="45.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1476" width="5" height="15" fill="rgb(210,80,19)"/><text x="45.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (1 samples, 0.45%)</title><rect x="42" y="1492" width="5" height="15" fill="rgb(249,190,5)"/><text x="45.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1508" width="5" height="15" fill="rgb(246,205,25)"/><text x="45.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1524" width="5" height="15" fill="rgb(212,212,39)"/><text x="45.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1540" width="5" height="15" fill="rgb(233,119,9)"/><text x="45.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="1556" width="5" height="15" fill="rgb(237,195,35)"/><text x="45.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1572" width="5" height="15" fill="rgb(229,92,47)"/><text x="45.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py) (1 samples, 0.45%)</title><rect x="42" y="1588" width="5" height="15" fill="rgb(212,185,18)"/><text x="45.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1604" width="5" height="15" fill="rgb(245,124,15)"/><text x="45.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1620" width="5" height="15" fill="rgb(245,40,26)"/><text x="45.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1636" width="5" height="15" fill="rgb(251,166,0)"/><text x="45.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="1652" width="5" height="15" fill="rgb(254,100,0)"/><text x="45.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1668" width="5" height="15" fill="rgb(241,210,29)"/><text x="45.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/tools.py) (1 samples, 0.45%)</title><rect x="42" y="1684" width="5" height="15" fill="rgb(213,55,12)"/><text x="45.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1700" width="5" height="15" fill="rgb(222,116,46)"/><text x="45.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1716" width="5" height="15" fill="rgb(209,208,36)"/><text x="45.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1732" width="5" height="15" fill="rgb(215,70,2)"/><text x="45.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="1748" width="5" height="15" fill="rgb(213,94,17)"/><text x="45.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1764" width="5" height="15" fill="rgb(248,205,33)"/><text x="45.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/table.py) (1 samples, 0.45%)</title><rect x="42" y="1780" width="5" height="15" fill="rgb(223,85,18)"/><text x="45.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1796" width="5" height="15" fill="rgb(207,189,12)"/><text x="45.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1812" width="5" height="15" fill="rgb(242,174,23)"/><text x="45.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1828" width="5" height="15" fill="rgb(231,27,45)"/><text x="45.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="1844" width="5" height="15" fill="rgb(237,84,13)"/><text x="45.00" y="1854.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1860" width="5" height="15" fill="rgb(218,76,17)"/><text x="45.00" y="1870.50"></text></g><g><title>&lt;module&gt; (matplotlib/patches.py) (1 samples, 0.45%)</title><rect x="42" y="1876" width="5" height="15" fill="rgb(240,57,3)"/><text x="45.00" y="1886.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1892" width="5" height="15" fill="rgb(205,20,9)"/><text x="45.00" y="1902.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1908" width="5" height="15" fill="rgb(239,43,28)"/><text x="45.00" y="1918.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1924" width="5" height="15" fill="rgb(246,110,49)"/><text x="45.00" y="1934.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1940" width="5" height="15" fill="rgb(247,118,47)"/><text x="45.00" y="1950.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1956" width="5" height="15" fill="rgb(246,110,1)"/><text x="45.00" y="1966.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="42" y="1972" width="5" height="15" fill="rgb(225,177,21)"/><text x="45.00" y="1982.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="42" y="1988" width="5" height="15" fill="rgb(243,200,33)"/><text x="45.00" y="1998.50"></text></g><g><title>&lt;module&gt; (matplotlib/lines.py) (1 samples, 0.45%)</title><rect x="42" y="2004" width="5" height="15" fill="rgb(221,196,44)"/><text x="45.00" y="2014.50"></text></g><g><title>kwdoc (matplotlib/artist.py) (1 samples, 0.45%)</title><rect x="42" y="2020" width="5" height="15" fill="rgb(223,141,41)"/><text x="45.00" y="2030.50"></text></g><g><title>__init__ (matplotlib/artist.py) (1 samples, 0.45%)</title><rect x="42" y="2036" width="5" height="15" fill="rgb(218,148,28)"/><text x="45.00" y="2046.50"></text></g><g><title>get_aliases (matplotlib/artist.py) (1 samples, 0.45%)</title><rect x="42" y="2052" width="5" height="15" fill="rgb(217,149,33)"/><text x="45.00" y="2062.50"></text></g><g><title>is_alias (matplotlib/artist.py) (1 samples, 0.45%)</title><rect x="42" y="2068" width="5" height="15" fill="rgb(248,201,26)"/><text x="45.00" y="2078.50"></text></g><g><title>getdoc (inspect.py) (1 samples, 0.45%)</title><rect x="42" y="2084" width="5" height="15" fill="rgb(216,51,26)"/><text x="45.00" y="2094.50"></text></g><g><title>cleandoc (inspect.py) (1 samples, 0.45%)</title><rect x="42" y="2100" width="5" height="15" fill="rgb(226,183,6)"/><text x="45.00" y="2110.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 3.64%)</title><rect x="10" y="68" width="42" height="15" fill="rgb(248,176,41)"/><text x="13.00" y="78.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 3.64%)</title><rect x="10" y="84" width="42" height="15" fill="rgb(241,176,40)"/><text x="13.00" y="94.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 3.64%)</title><rect x="10" y="100" width="42" height="15" fill="rgb(211,173,22)"/><text x="13.00" y="110.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 3.64%)</title><rect x="10" y="116" width="42" height="15" fill="rgb(208,169,11)"/><text x="13.00" y="126.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 3.64%)</title><rect x="10" y="132" width="42" height="15" fill="rgb(231,15,1)"/><text x="13.00" y="142.50">_ca..</text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py) (8 samples, 3.64%)</title><rect x="10" y="148" width="42" height="15" fill="rgb(215,128,46)"/><text x="13.00" y="158.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 3.64%)</title><rect x="10" y="164" width="42" height="15" fill="rgb(208,212,43)"/><text x="13.00" y="174.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 3.64%)</title><rect x="10" y="180" width="42" height="15" fill="rgb(212,190,0)"/><text x="13.00" y="190.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.36%)</title><rect x="36" y="196" width="16" height="15" fill="rgb(245,147,53)"/><text x="39.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.36%)</title><rect x="36" y="212" width="16" height="15" fill="rgb(210,121,6)"/><text x="39.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.36%)</title><rect x="36" y="228" width="16" height="15" fill="rgb(239,113,40)"/><text x="39.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (3 samples, 1.36%)</title><rect x="36" y="244" width="16" height="15" fill="rgb(222,122,19)"/><text x="39.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.36%)</title><rect x="36" y="260" width="16" height="15" fill="rgb(221,121,7)"/><text x="39.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.36%)</title><rect x="36" y="276" width="16" height="15" fill="rgb(241,218,17)"/><text x="39.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.36%)</title><rect x="36" y="292" width="16" height="15" fill="rgb(215,102,5)"/><text x="39.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.36%)</title><rect x="36" y="308" width="16" height="15" fill="rgb(212,218,53)"/><text x="39.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.36%)</title><rect x="36" y="324" width="16" height="15" fill="rgb(240,89,19)"/><text x="39.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py) (1 samples, 0.45%)</title><rect x="47" y="340" width="5" height="15" fill="rgb(236,207,47)"/><text x="50.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="356" width="5" height="15" fill="rgb(209,132,4)"/><text x="50.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="372" width="5" height="15" fill="rgb(222,70,9)"/><text x="50.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="388" width="5" height="15" fill="rgb(237,28,5)"/><text x="50.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="404" width="5" height="15" fill="rgb(248,178,48)"/><text x="50.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="420" width="5" height="15" fill="rgb(224,36,54)"/><text x="50.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="436" width="5" height="15" fill="rgb(236,174,31)"/><text x="50.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="47" y="452" width="5" height="15" fill="rgb(241,152,36)"/><text x="50.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="468" width="5" height="15" fill="rgb(218,163,4)"/><text x="50.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py) (1 samples, 0.45%)</title><rect x="47" y="484" width="5" height="15" fill="rgb(240,71,47)"/><text x="50.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="500" width="5" height="15" fill="rgb(253,212,50)"/><text x="50.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="516" width="5" height="15" fill="rgb(220,160,32)"/><text x="50.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="532" width="5" height="15" fill="rgb(247,46,44)"/><text x="50.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="47" y="548" width="5" height="15" fill="rgb(234,96,40)"/><text x="50.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="564" width="5" height="15" fill="rgb(247,75,29)"/><text x="50.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py) (1 samples, 0.45%)</title><rect x="47" y="580" width="5" height="15" fill="rgb(225,4,23)"/><text x="50.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="596" width="5" height="15" fill="rgb(232,164,10)"/><text x="50.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="612" width="5" height="15" fill="rgb(220,22,6)"/><text x="50.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="628" width="5" height="15" fill="rgb(237,148,36)"/><text x="50.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="47" y="644" width="5" height="15" fill="rgb(218,160,50)"/><text x="50.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="660" width="5" height="15" fill="rgb(232,159,36)"/><text x="50.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py) (1 samples, 0.45%)</title><rect x="47" y="676" width="5" height="15" fill="rgb(224,2,51)"/><text x="50.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="692" width="5" height="15" fill="rgb(229,173,25)"/><text x="50.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="708" width="5" height="15" fill="rgb(205,227,35)"/><text x="50.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="724" width="5" height="15" fill="rgb(213,3,28)"/><text x="50.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.45%)</title><rect x="47" y="740" width="5" height="15" fill="rgb(231,151,15)"/><text x="50.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.45%)</title><rect x="47" y="756" width="5" height="15" fill="rgb(253,128,2)"/><text x="50.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py) (1 samples, 0.45%)</title><rect x="47" y="772" width="5" height="15" fill="rgb(223,143,18)"/><text x="50.00" y="782.50"></text></g><g><title>simplefilter (warnings.py) (1 samples, 0.45%)</title><rect x="47" y="788" width="5" height="15" fill="rgb(244,166,17)"/><text x="50.00" y="798.50"></text></g><g><title>_add_filter (warnings.py) (1 samples, 0.45%)</title><rect x="47" y="804" width="5" height="15" fill="rgb(220,98,28)"/><text x="50.00" y="814.50"></text></g><g><title>profile0_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (1 samples, 0.45%)</title><rect x="52" y="68" width="6" height="15" fill="rgb(251,29,40)"/><text x="55.00" y="78.50"></text></g><g><title>setup_profile0 (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (1 samples, 0.45%)</title><rect x="52" y="84" width="6" height="15" fill="rgb(209,27,54)"/><text x="55.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.45%)</title><rect x="52" y="100" width="6" height="15" fill="rgb(222,81,5)"/><text x="55.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.45%)</title><rect x="52" y="116" width="6" height="15" fill="rgb(219,137,48)"/><text x="55.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.45%)</title><rect x="52" y="132" width="6" height="15" fill="rgb(211,220,54)"/><text x="55.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (1 samples, 0.45%)</title><rect x="52" y="148" width="6" height="15" fill="rgb(209,207,34)"/><text x="55.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (1 samples, 0.45%)</title><rect x="52" y="164" width="6" height="15" fill="rgb(246,29,6)"/><text x="55.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (1 samples, 0.45%)</title><rect x="52" y="180" width="6" height="15" fill="rgb(228,164,35)"/><text x="55.00" y="190.50"></text></g><g><title>convert_nearest_neighbors_regressor (skl2onnx/operator_converters/nearest_neighbours.py) (1 samples, 0.45%)</title><rect x="52" y="196" width="6" height="15" fill="rgb(214,92,4)"/><text x="55.00" y="206.50"></text></g><g><title>add_to (skl2onnx/algebra/onnx_operator.py) (1 samples, 0.45%)</title><rect x="52" y="212" width="6" height="15" fill="rgb(237,167,27)"/><text x="55.00" y="222.50"></text></g><g><title>run (skl2onnx/algebra/graph_state.py) (1 samples, 0.45%)</title><rect x="52" y="228" width="6" height="15" fill="rgb(235,19,36)"/><text x="55.00" y="238.50"></text></g><g><title>_get_var_name (skl2onnx/algebra/graph_state.py) (1 samples, 0.45%)</title><rect x="52" y="244" width="6" height="15" fill="rgb(232,121,8)"/><text x="55.00" y="254.50"></text></g><g><title>add_to (skl2onnx/algebra/onnx_operator.py) (1 samples, 0.45%)</title><rect x="52" y="260" width="6" height="15" fill="rgb(250,191,48)"/><text x="55.00" y="270.50"></text></g><g><title>run (skl2onnx/algebra/graph_state.py) (1 samples, 0.45%)</title><rect x="52" y="276" width="6" height="15" fill="rgb(206,76,8)"/><text x="55.00" y="286.50"></text></g><g><title>_get_var_name (skl2onnx/algebra/graph_state.py) (1 samples, 0.45%)</title><rect x="52" y="292" width="6" height="15" fill="rgb(232,159,33)"/><text x="55.00" y="302.50"></text></g><g><title>add_to (skl2onnx/algebra/onnx_operator.py) (1 samples, 0.45%)</title><rect x="52" y="308" width="6" height="15" fill="rgb(254,199,24)"/><text x="55.00" y="318.50"></text></g><g><title>run (skl2onnx/algebra/graph_state.py) (1 samples, 0.45%)</title><rect x="52" y="324" width="6" height="15" fill="rgb(240,131,2)"/><text x="55.00" y="334.50"></text></g><g><title>_get_var_name (skl2onnx/algebra/graph_state.py) (1 samples, 0.45%)</title><rect x="52" y="340" width="6" height="15" fill="rgb(220,219,22)"/><text x="55.00" y="350.50"></text></g><g><title>add_to (skl2onnx/algebra/onnx_operator.py) (1 samples, 0.45%)</title><rect x="52" y="356" width="6" height="15" fill="rgb(250,172,26)"/><text x="55.00" y="366.50"></text></g><g><title>run (skl2onnx/algebra/graph_state.py) (1 samples, 0.45%)</title><rect x="52" y="372" width="6" height="15" fill="rgb(250,28,52)"/><text x="55.00" y="382.50"></text></g><g><title>_get_var_name (skl2onnx/algebra/graph_state.py) (1 samples, 0.45%)</title><rect x="52" y="388" width="6" height="15" fill="rgb(227,106,54)"/><text x="55.00" y="398.50"></text></g><g><title>add_to (skl2onnx/algebra/onnx_operator.py) (1 samples, 0.45%)</title><rect x="52" y="404" width="6" height="15" fill="rgb(235,206,31)"/><text x="55.00" y="414.50"></text></g><g><title>run (skl2onnx/algebra/graph_state.py) (1 samples, 0.45%)</title><rect x="52" y="420" width="6" height="15" fill="rgb(208,90,1)"/><text x="55.00" y="430.50"></text></g><g><title>_get_var_name (skl2onnx/algebra/graph_state.py) (1 samples, 0.45%)</title><rect x="52" y="436" width="6" height="15" fill="rgb(229,200,21)"/><text x="55.00" y="446.50"></text></g><g><title>add_to (skl2onnx/algebra/onnx_operator.py) (1 samples, 0.45%)</title><rect x="52" y="452" width="6" height="15" fill="rgb(219,50,12)"/><text x="55.00" y="462.50"></text></g><g><title>add_to (skl2onnx/algebra/onnx_operator.py) (1 samples, 0.45%)</title><rect x="52" y="468" width="6" height="15" fill="rgb(231,154,17)"/><text x="55.00" y="478.50"></text></g><g><title>run (skl2onnx/algebra/graph_state.py) (1 samples, 0.45%)</title><rect x="52" y="484" width="6" height="15" fill="rgb(236,183,47)"/><text x="55.00" y="494.50"></text></g><g><title>add_node (skl2onnx/common/_container.py) (1 samples, 0.45%)</title><rect x="52" y="500" width="6" height="15" fill="rgb(250,52,52)"/><text x="55.00" y="510.50"></text></g><g><title>_check_operator (skl2onnx/common/_container.py) (1 samples, 0.45%)</title><rect x="52" y="516" width="6" height="15" fill="rgb(242,59,25)"/><text x="55.00" y="526.50"></text></g><g><title>extract_stack (traceback.py) (1 samples, 0.45%)</title><rect x="52" y="532" width="6" height="15" fill="rgb(216,136,18)"/><text x="55.00" y="542.50"></text></g><g><title>extract (traceback.py) (1 samples, 0.45%)</title><rect x="52" y="548" width="6" height="15" fill="rgb(215,179,36)"/><text x="55.00" y="558.50"></text></g><g><title>line (traceback.py) (1 samples, 0.45%)</title><rect x="52" y="564" width="6" height="15" fill="rgb(206,61,47)"/><text x="55.00" y="574.50"></text></g><g><title>getline (linecache.py) (1 samples, 0.45%)</title><rect x="52" y="580" width="6" height="15" fill="rgb(216,199,37)"/><text x="55.00" y="590.50"></text></g><g><title>getlines (linecache.py) (1 samples, 0.45%)</title><rect x="52" y="596" width="6" height="15" fill="rgb(246,104,36)"/><text x="55.00" y="606.50"></text></g><g><title>updatecache (linecache.py) (1 samples, 0.45%)</title><rect x="52" y="612" width="6" height="15" fill="rgb(244,100,8)"/><text x="55.00" y="622.50"></text></g><g><title>0x7fd6b9c76ff9 (?) (1 samples, 0.45%)</title><rect x="69" y="212" width="5" height="15" fill="rgb(228,58,51)"/><text x="72.00" y="222.50"></text></g><g><title>0x7fd6b9c71ef6 (?) (1 samples, 0.45%)</title><rect x="69" y="228" width="5" height="15" fill="rgb(230,224,28)"/><text x="72.00" y="238.50"></text></g><g><title>0x7fd6b9c6691a (?) (1 samples, 0.45%)</title><rect x="69" y="244" width="5" height="15" fill="rgb(247,111,24)"/><text x="72.00" y="254.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.45%)</title><rect x="69" y="260" width="5" height="15" fill="rgb(236,183,8)"/><text x="72.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py) (1 samples, 0.45%)</title><rect x="74" y="212" width="5" height="15" fill="rgb(232,28,28)"/><text x="77.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="74" y="228" width="5" height="15" fill="rgb(215,138,51)"/><text x="77.00" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg const*, &gt;(pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; (*)(onnxruntime::NodeArg const*), const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="74" y="244" width="5" height="15" fill="rgb(235,212,27)"/><text x="77.00" y="254.50"></text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::cast [clone .isra.698] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="74" y="260" width="5" height="15" fill="rgb(222,154,28)"/><text x="77.00" y="270.50"></text></g><g><title>onnxruntime::InferenceSession::ValidateOutputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="85" y="292" width="5" height="15" fill="rgb(229,30,48)"/><text x="88.00" y="302.50"></text></g><g><title>std::_Hash_bytes (libstdc++.so.6.0.28) (1 samples, 0.45%)</title><rect x="85" y="308" width="5" height="15" fill="rgb(221,111,34)"/><text x="88.00" y="318.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="101" y="340" width="5" height="15" fill="rgb(232,185,20)"/><text x="104.00" y="350.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="101" y="356" width="5" height="15" fill="rgb(226,216,53)"/><text x="104.00" y="366.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="101" y="372" width="5" height="15" fill="rgb(210,112,53)"/><text x="104.00" y="382.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="101" y="388" width="5" height="15" fill="rgb(249,1,41)"/><text x="104.00" y="398.50"></text></g><g><title>0x7fd6f9c526d2 (libc-2.29.so) (1 samples, 0.45%)</title><rect x="101" y="404" width="5" height="15" fill="rgb(240,64,47)"/><text x="104.00" y="414.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="106" y="340" width="5" height="15" fill="rgb(228,131,44)"/><text x="109.00" y="350.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="106" y="356" width="5" height="15" fill="rgb(239,164,16)"/><text x="109.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="106" y="372" width="5" height="15" fill="rgb(209,112,5)"/><text x="109.00" y="382.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="106" y="388" width="5" height="15" fill="rgb(213,78,48)"/><text x="109.00" y="398.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="106" y="404" width="5" height="15" fill="rgb(214,151,34)"/><text x="109.00" y="414.50"></text></g><g><title>0x7fd6f9c4390e (libc-2.29.so) (1 samples, 0.45%)</title><rect x="106" y="420" width="5" height="15" fill="rgb(207,92,12)"/><text x="109.00" y="430.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 2.73%)</title><rect x="85" y="260" width="32" height="15" fill="rgb(222,162,0)"/><text x="88.00" y="270.50">on..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 2.73%)</title><rect x="85" y="276" width="32" height="15" fill="rgb(213,7,14)"/><text x="88.00" y="286.50">on..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 2.27%)</title><rect x="90" y="292" width="27" height="15" fill="rgb(230,192,32)"/><text x="93.00" y="302.50">o..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.82%)</title><rect x="95" y="308" width="22" height="15" fill="rgb(217,181,40)"/><text x="98.00" y="318.50">o..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.82%)</title><rect x="95" y="324" width="22" height="15" fill="rgb(215,226,14)"/><text x="98.00" y="334.50">o..</text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="111" y="340" width="6" height="15" fill="rgb(226,17,31)"/><text x="114.00" y="350.50"></text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="111" y="356" width="6" height="15" fill="rgb(243,60,14)"/><text x="114.00" y="366.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 3.64%)</title><rect x="79" y="244" width="43" height="15" fill="rgb(253,116,24)"/><text x="82.00" y="254.50">onnx..</text></g><g><title>onnxruntime::python::CreateGenericMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="117" y="260" width="5" height="15" fill="rgb(235,29,23)"/><text x="120.00" y="270.50"></text></g><g><title>onnxruntime::python::CreateTensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="117" y="276" width="5" height="15" fill="rgb(229,114,13)"/><text x="120.00" y="286.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="117" y="292" width="5" height="15" fill="rgb(210,54,42)"/><text x="120.00" y="302.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="117" y="308" width="5" height="15" fill="rgb(248,228,33)"/><text x="120.00" y="318.50"></text></g><g><title>onnxruntime::TensorShape::Size (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="117" y="324" width="5" height="15" fill="rgb(233,190,20)"/><text x="120.00" y="334.50"></text></g><g><title>pybind11::detail::list_caster&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::load (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="122" y="244" width="6" height="15" fill="rgb(210,209,35)"/><text x="125.00" y="254.50"></text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::load [clone .constprop.387] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="122" y="260" width="6" height="15" fill="rgb(218,58,14)"/><text x="125.00" y="270.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; [clone .isra.154] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="122" y="276" width="6" height="15" fill="rgb(237,58,53)"/><text x="125.00" y="286.50"></text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (14 samples, 6.36%)</title><rect x="58" y="68" width="75" height="15" fill="rgb(227,39,46)"/><text x="61.00" y="78.50">profile_..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (14 samples, 6.36%)</title><rect x="58" y="84" width="75" height="15" fill="rgb(228,221,50)"/><text x="61.00" y="94.50">setup_pr..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (14 samples, 6.36%)</title><rect x="58" y="100" width="75" height="15" fill="rgb(252,70,4)"/><text x="61.00" y="110.50">profile ..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (14 samples, 6.36%)</title><rect x="58" y="116" width="75" height="15" fill="rgb(216,93,9)"/><text x="61.00" y="126.50">time_pre..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (13 samples, 5.91%)</title><rect x="63" y="132" width="70" height="15" fill="rgb(236,128,2)"/><text x="66.00" y="142.50">&lt;lambda..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (13 samples, 5.91%)</title><rect x="63" y="148" width="70" height="15" fill="rgb(224,55,48)"/><text x="66.00" y="158.50">run (ml..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (13 samples, 5.91%)</title><rect x="63" y="164" width="70" height="15" fill="rgb(250,113,51)"/><text x="66.00" y="174.50">_run_wh..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (13 samples, 5.91%)</title><rect x="63" y="180" width="70" height="15" fill="rgb(205,130,9)"/><text x="66.00" y="190.50">run (ml..</text></g><g><title>run (onnxruntime/capi/session.py) (13 samples, 5.91%)</title><rect x="63" y="196" width="70" height="15" fill="rgb(232,18,35)"/><text x="66.00" y="206.50">run (on..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 4.55%)</title><rect x="79" y="212" width="54" height="15" fill="rgb(214,166,31)"/><text x="82.00" y="222.50">pybin..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 4.55%)</title><rect x="79" y="228" width="54" height="15" fill="rgb(221,177,28)"/><text x="82.00" y="238.50">void ..</text></g><g><title>std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;::~vector [clone .lto_priv.576] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.45%)</title><rect x="128" y="244" width="5" height="15" fill="rgb(227,221,26)"/><text x="131.00" y="254.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (1 samples, 0.45%)</title><rect x="246" y="244" width="5" height="15" fill="rgb(252,130,30)"/><text x="249.00" y="254.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (1 samples, 0.45%)</title><rect x="246" y="260" width="5" height="15" fill="rgb(224,155,34)"/><text x="249.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.45%)</title><rect x="246" y="276" width="5" height="15" fill="rgb(247,87,8)"/><text x="249.00" y="286.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c) (1 samples, 0.45%)</title><rect x="246" y="292" width="5" height="15" fill="rgb(251,141,2)"/><text x="249.00" y="302.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (1 samples, 0.45%)</title><rect x="246" y="308" width="5" height="15" fill="rgb(225,119,21)"/><text x="249.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (2 samples, 0.91%)</title><rect x="246" y="212" width="10" height="15" fill="rgb(210,93,2)"/><text x="249.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (2 samples, 0.91%)</title><rect x="246" y="228" width="10" height="15" fill="rgb(249,211,11)"/><text x="249.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.45%)</title><rect x="251" y="244" width="5" height="15" fill="rgb(220,188,35)"/><text x="254.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.45%)</title><rect x="251" y="260" width="5" height="15" fill="rgb(243,214,36)"/><text x="254.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.45%)</title><rect x="251" y="276" width="5" height="15" fill="rgb(237,71,19)"/><text x="254.00" y="286.50"></text></g><g><title>PyArray_FromScalar (scalarapi.c) (1 samples, 0.45%)</title><rect x="256" y="244" width="6" height="15" fill="rgb(223,222,38)"/><text x="259.00" y="254.50"></text></g><g><title>scalar_value (scalarapi.c) (1 samples, 0.45%)</title><rect x="256" y="260" width="6" height="15" fill="rgb(254,10,38)"/><text x="259.00" y="270.50"></text></g><g><title>gentype_generic_method (scalartypes.c.src) (2 samples, 0.91%)</title><rect x="256" y="228" width="11" height="15" fill="rgb(249,2,20)"/><text x="259.00" y="238.50"></text></g><g><title>array_astype (methods.c) (1 samples, 0.45%)</title><rect x="262" y="244" width="5" height="15" fill="rgb(229,191,12)"/><text x="265.00" y="254.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.45%)</title><rect x="262" y="260" width="5" height="15" fill="rgb(216,108,39)"/><text x="265.00" y="270.50"></text></g><g><title>_prod_dispatcher (numpy/core/fromnumeric.py) (1 samples, 0.45%)</title><rect x="272" y="244" width="6" height="15" fill="rgb(219,188,20)"/><text x="275.00" y="254.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.91%)</title><rect x="283" y="308" width="11" height="15" fill="rgb(225,107,45)"/><text x="286.00" y="318.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.45%)</title><rect x="288" y="324" width="6" height="15" fill="rgb(241,121,25)"/><text x="291.00" y="334.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (1 samples, 0.45%)</title><rect x="288" y="340" width="6" height="15" fill="rgb(237,121,29)"/><text x="291.00" y="350.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.45%)</title><rect x="299" y="324" width="6" height="15" fill="rgb(235,25,5)"/><text x="302.00" y="334.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (1 samples, 0.45%)</title><rect x="299" y="340" width="6" height="15" fill="rgb(254,159,3)"/><text x="302.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (1 samples, 0.45%)</title><rect x="299" y="356" width="6" height="15" fill="rgb(212,166,12)"/><text x="302.00" y="366.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (1 samples, 0.45%)</title><rect x="299" y="372" width="6" height="15" fill="rgb(244,229,47)"/><text x="302.00" y="382.50"></text></g><g><title>_array_find_python_scalar_type (common.c) (1 samples, 0.45%)</title><rect x="299" y="388" width="6" height="15" fill="rgb(229,172,32)"/><text x="302.00" y="398.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (1 samples, 0.45%)</title><rect x="305" y="324" width="5" height="15" fill="rgb(215,209,16)"/><text x="308.00" y="334.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (1 samples, 0.45%)</title><rect x="305" y="340" width="5" height="15" fill="rgb(254,75,20)"/><text x="308.00" y="350.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.45%)</title><rect x="305" y="356" width="5" height="15" fill="rgb(230,125,9)"/><text x="308.00" y="366.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.45%)</title><rect x="305" y="372" width="5" height="15" fill="rgb(237,34,26)"/><text x="308.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (11 samples, 5.00%)</title><rect x="256" y="212" width="59" height="15" fill="rgb(247,118,27)"/><text x="259.00" y="222.50">_run (..</text></g><g><title>prod (&lt;__array_function__ internals&gt;) (9 samples, 4.09%)</title><rect x="267" y="228" width="48" height="15" fill="rgb(224,34,17)"/><text x="270.00" y="238.50">prod..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 3.18%)</title><rect x="278" y="244" width="37" height="15" fill="rgb(236,40,50)"/><text x="281.00" y="254.50">arr..</text></g><g><title>prod (numpy/core/fromnumeric.py) (7 samples, 3.18%)</title><rect x="278" y="260" width="37" height="15" fill="rgb(248,192,29)"/><text x="281.00" y="270.50">pro..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (7 samples, 3.18%)</title><rect x="278" y="276" width="37" height="15" fill="rgb(246,123,21)"/><text x="281.00" y="286.50">_wr..</text></g><g><title>ufunc_reduce (ufunc_object.c) (6 samples, 2.73%)</title><rect x="283" y="292" width="32" height="15" fill="rgb(221,134,1)"/><text x="286.00" y="302.50">uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 1.82%)</title><rect x="294" y="308" width="21" height="15" fill="rgb(254,75,14)"/><text x="297.00" y="318.50"></text></g><g><title>unicode_dealloc (python3.7) (1 samples, 0.45%)</title><rect x="310" y="324" width="5" height="15" fill="rgb(252,65,51)"/><text x="313.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_shape.py) (2 samples, 0.91%)</title><rect x="315" y="212" width="11" height="15" fill="rgb(229,61,14)"/><text x="318.00" y="222.50"></text></g><g><title>0x7fd6f9c641f2 (libc-2.29.so) (1 samples, 0.45%)</title><rect x="321" y="228" width="5" height="15" fill="rgb(232,125,47)"/><text x="324.00" y="238.50"></text></g><g><title>array_astype (methods.c) (1 samples, 0.45%)</title><rect x="337" y="244" width="5" height="15" fill="rgb(222,42,34)"/><text x="340.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (3 samples, 1.36%)</title><rect x="358" y="260" width="16" height="15" fill="rgb(220,189,28)"/><text x="361.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.91%)</title><rect x="364" y="276" width="10" height="15" fill="rgb(232,144,38)"/><text x="367.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (2 samples, 0.91%)</title><rect x="364" y="292" width="10" height="15" fill="rgb(247,94,2)"/><text x="367.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (1 samples, 0.45%)</title><rect x="369" y="308" width="5" height="15" fill="rgb(226,77,5)"/><text x="372.00" y="318.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (1 samples, 0.45%)</title><rect x="374" y="340" width="6" height="15" fill="rgb(242,193,47)"/><text x="377.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (1 samples, 0.45%)</title><rect x="374" y="356" width="6" height="15" fill="rgb(242,196,36)"/><text x="377.00" y="366.50"></text></g><g><title>PyArray_IterAllButAxis (iterators.c) (1 samples, 0.45%)</title><rect x="374" y="372" width="6" height="15" fill="rgb(240,195,9)"/><text x="377.00" y="382.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (2 samples, 0.91%)</title><rect x="374" y="260" width="11" height="15" fill="rgb(216,183,27)"/><text x="377.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.91%)</title><rect x="374" y="276" width="11" height="15" fill="rgb(222,161,22)"/><text x="377.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (2 samples, 0.91%)</title><rect x="374" y="292" width="11" height="15" fill="rgb(224,99,38)"/><text x="377.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (2 samples, 0.91%)</title><rect x="374" y="308" width="11" height="15" fill="rgb(231,124,2)"/><text x="377.00" y="318.50"></text></g><g><title>array_argsort (methods.c) (2 samples, 0.91%)</title><rect x="374" y="324" width="11" height="15" fill="rgb(242,167,49)"/><text x="377.00" y="334.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.45%)</title><rect x="380" y="340" width="5" height="15" fill="rgb(209,110,8)"/><text x="383.00" y="350.50"></text></g><g><title>array_arange (multiarraymodule.c) (1 samples, 0.45%)</title><rect x="385" y="260" width="5" height="15" fill="rgb(230,66,15)"/><text x="388.00" y="270.50"></text></g><g><title>PyArray_ArangeObj (ctors.c) (1 samples, 0.45%)</title><rect x="385" y="276" width="5" height="15" fill="rgb(251,145,24)"/><text x="388.00" y="286.50"></text></g><g><title>_calc_length (ctors.c) (1 samples, 0.45%)</title><rect x="385" y="292" width="5" height="15" fill="rgb(246,66,50)"/><text x="388.00" y="302.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.45%)</title><rect x="390" y="260" width="6" height="15" fill="rgb(238,87,38)"/><text x="393.00" y="270.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.45%)</title><rect x="390" y="276" width="6" height="15" fill="rgb(225,220,43)"/><text x="393.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (16 samples, 7.27%)</title><rect x="326" y="212" width="86" height="15" fill="rgb(239,68,49)"/><text x="329.00" y="222.50">_run (mlpr..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (16 samples, 7.27%)</title><rect x="326" y="228" width="86" height="15" fill="rgb(210,211,25)"/><text x="329.00" y="238.50">_common_ru..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (13 samples, 5.91%)</title><rect x="342" y="244" width="70" height="15" fill="rgb(219,155,12)"/><text x="345.00" y="254.50">topk_so..</text></g><g><title>array_subscript (mapping.c) (3 samples, 1.36%)</title><rect x="396" y="260" width="16" height="15" fill="rgb(219,134,16)"/><text x="399.00" y="270.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (2 samples, 0.91%)</title><rect x="401" y="276" width="11" height="15" fill="rgb(244,73,34)"/><text x="404.00" y="286.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (2 samples, 0.91%)</title><rect x="401" y="292" width="11" height="15" fill="rgb(228,156,5)"/><text x="404.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.91%)</title><rect x="401" y="308" width="11" height="15" fill="rgb(251,214,6)"/><text x="404.00" y="318.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (2 samples, 0.91%)</title><rect x="401" y="324" width="11" height="15" fill="rgb(224,190,45)"/><text x="404.00" y="334.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (2 samples, 0.91%)</title><rect x="401" y="340" width="11" height="15" fill="rgb(226,153,15)"/><text x="404.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.91%)</title><rect x="401" y="356" width="11" height="15" fill="rgb(214,4,47)"/><text x="404.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.91%)</title><rect x="401" y="372" width="11" height="15" fill="rgb(213,128,40)"/><text x="404.00" y="382.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.45%)</title><rect x="406" y="388" width="6" height="15" fill="rgb(238,29,21)"/><text x="409.00" y="398.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (1 samples, 0.45%)</title><rect x="406" y="404" width="6" height="15" fill="rgb(254,43,17)"/><text x="409.00" y="414.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (1 samples, 0.45%)</title><rect x="412" y="212" width="5" height="15" fill="rgb(252,11,47)"/><text x="415.00" y="222.50"></text></g><g><title>0x7fd6d6e69a09 (?) (1 samples, 0.45%)</title><rect x="455" y="260" width="5" height="15" fill="rgb(230,63,29)"/><text x="458.00" y="270.50"></text></g><g><title>PyArray_DescrConverter2 (descriptor.c) (1 samples, 0.45%)</title><rect x="476" y="324" width="6" height="15" fill="rgb(233,224,54)"/><text x="479.00" y="334.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.45%)</title><rect x="476" y="340" width="6" height="15" fill="rgb(230,110,48)"/><text x="479.00" y="350.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.45%)</title><rect x="476" y="356" width="6" height="15" fill="rgb(239,186,9)"/><text x="479.00" y="366.50"></text></g><g><title>_convert_to_type (scipy/spatial/distance.py) (4 samples, 1.82%)</title><rect x="465" y="276" width="22" height="15" fill="rgb(232,222,27)"/><text x="468.00" y="286.50">_..</text></g><g><title>ascontiguousarray (numpy/core/_asarray.py) (3 samples, 1.36%)</title><rect x="471" y="292" width="16" height="15" fill="rgb(217,226,39)"/><text x="474.00" y="302.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.91%)</title><rect x="476" y="308" width="11" height="15" fill="rgb(241,145,19)"/><text x="479.00" y="318.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.45%)</title><rect x="482" y="324" width="5" height="15" fill="rgb(233,147,7)"/><text x="485.00" y="334.50"></text></g><g><title>0x7fd6f9d21ee0 (libc-2.29.so) (1 samples, 0.45%)</title><rect x="487" y="324" width="5" height="15" fill="rgb(207,100,42)"/><text x="490.00" y="334.50"></text></g><g><title>_validate_cdist_input (scipy/spatial/distance.py) (7 samples, 3.18%)</title><rect x="460" y="260" width="38" height="15" fill="rgb(233,140,39)"/><text x="463.00" y="270.50">_va..</text></g><g><title>arraydescr_richcompare (descriptor.c) (2 samples, 0.91%)</title><rect x="487" y="276" width="11" height="15" fill="rgb(211,160,23)"/><text x="490.00" y="286.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (2 samples, 0.91%)</title><rect x="487" y="292" width="11" height="15" fill="rgb(239,44,11)"/><text x="490.00" y="302.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (2 samples, 0.91%)</title><rect x="487" y="308" width="11" height="15" fill="rgb(232,46,45)"/><text x="490.00" y="318.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.45%)</title><rect x="492" y="324" width="6" height="15" fill="rgb(220,140,46)"/><text x="495.00" y="334.50"></text></g><g><title>array_empty (multiarraymodule.c) (1 samples, 0.45%)</title><rect x="498" y="260" width="5" height="15" fill="rgb(254,77,16)"/><text x="501.00" y="270.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.45%)</title><rect x="498" y="276" width="5" height="15" fill="rgb(254,104,31)"/><text x="501.00" y="286.50"></text></g><g><title>PyArray_Empty (ctors.c) (1 samples, 0.45%)</title><rect x="498" y="292" width="5" height="15" fill="rgb(215,80,37)"/><text x="501.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.45%)</title><rect x="498" y="308" width="5" height="15" fill="rgb(248,208,2)"/><text x="501.00" y="318.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.45%)</title><rect x="498" y="324" width="5" height="15" fill="rgb(246,36,23)"/><text x="501.00" y="334.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.45%)</title><rect x="498" y="340" width="5" height="15" fill="rgb(247,180,33)"/><text x="501.00" y="350.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (2 samples, 0.91%)</title><rect x="503" y="260" width="11" height="15" fill="rgb(217,58,48)"/><text x="506.00" y="270.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.91%)</title><rect x="503" y="276" width="11" height="15" fill="rgb(208,126,11)"/><text x="506.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cdist.py) (18 samples, 8.18%)</title><rect x="423" y="228" width="96" height="15" fill="rgb(241,75,41)"/><text x="426.00" y="238.50">_run (mlpro..</text></g><g><title>cdist (scipy/spatial/distance.py) (17 samples, 7.73%)</title><rect x="428" y="244" width="91" height="15" fill="rgb(252,191,43)"/><text x="431.00" y="254.50">cdist (sci..</text></g><g><title>callable (scipy/_lib/six.py) (1 samples, 0.45%)</title><rect x="514" y="260" width="5" height="15" fill="rgb(217,160,22)"/><text x="517.00" y="270.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (1 samples, 0.45%)</title><rect x="535" y="340" width="6" height="15" fill="rgb(246,188,41)"/><text x="538.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.91%)</title><rect x="535" y="308" width="11" height="15" fill="rgb(242,192,1)"/><text x="538.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.91%)</title><rect x="535" y="324" width="11" height="15" fill="rgb(224,84,27)"/><text x="538.00" y="334.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.45%)</title><rect x="541" y="340" width="5" height="15" fill="rgb(229,194,44)"/><text x="544.00" y="350.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (1 samples, 0.45%)</title><rect x="541" y="356" width="5" height="15" fill="rgb(206,139,35)"/><text x="544.00" y="366.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.45%)</title><rect x="541" y="372" width="5" height="15" fill="rgb(209,151,44)"/><text x="544.00" y="382.50"></text></g><g><title>diophantine_simplify (mem_overlap.c) (1 samples, 0.45%)</title><rect x="541" y="388" width="5" height="15" fill="rgb(244,201,47)"/><text x="544.00" y="398.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (1 samples, 0.45%)</title><rect x="546" y="372" width="5" height="15" fill="rgb(206,149,14)"/><text x="549.00" y="382.50"></text></g><g><title>allocate_reduce_result (reduction.c) (1 samples, 0.45%)</title><rect x="546" y="388" width="5" height="15" fill="rgb(213,211,52)"/><text x="549.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.45%)</title><rect x="546" y="404" width="5" height="15" fill="rgb(216,150,16)"/><text x="549.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.45%)</title><rect x="546" y="420" width="5" height="15" fill="rgb(220,134,16)"/><text x="549.00" y="430.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.45%)</title><rect x="546" y="436" width="5" height="15" fill="rgb(234,44,7)"/><text x="549.00" y="446.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (1 samples, 0.45%)</title><rect x="546" y="452" width="5" height="15" fill="rgb(226,146,36)"/><text x="549.00" y="462.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (1 samples, 0.45%)</title><rect x="551" y="372" width="6" height="15" fill="rgb(250,221,7)"/><text x="554.00" y="382.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.45%)</title><rect x="551" y="388" width="6" height="15" fill="rgb(251,167,49)"/><text x="554.00" y="398.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.45%)</title><rect x="551" y="404" width="6" height="15" fill="rgb(252,3,25)"/><text x="554.00" y="414.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (80 samples, 36.36%)</title><rect x="133" y="164" width="429" height="15" fill="rgb(233,62,42)"/><text x="136.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (75 samples, 34.09%)</title><rect x="160" y="180" width="402" height="15" fill="rgb(238,147,44)"/><text x="163.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (60 samples, 27.27%)</title><rect x="240" y="196" width="322" height="15" fill="rgb(250,14,1)"/><text x="243.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (27 samples, 12.27%)</title><rect x="417" y="212" width="145" height="15" fill="rgb(213,88,2)"/><text x="420.00" y="222.50">run (mlprodict/onn..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py) (8 samples, 3.64%)</title><rect x="519" y="228" width="43" height="15" fill="rgb(206,120,53)"/><text x="522.00" y="238.50">_run..</text></g><g><title>mean (&lt;__array_function__ internals&gt;) (8 samples, 3.64%)</title><rect x="519" y="244" width="43" height="15" fill="rgb(243,190,10)"/><text x="522.00" y="254.50">mean..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 3.64%)</title><rect x="519" y="260" width="43" height="15" fill="rgb(251,50,28)"/><text x="522.00" y="270.50">arra..</text></g><g><title>mean (numpy/core/fromnumeric.py) (8 samples, 3.64%)</title><rect x="519" y="276" width="43" height="15" fill="rgb(220,131,9)"/><text x="522.00" y="286.50">mean..</text></g><g><title>_mean (numpy/core/_methods.py) (5 samples, 2.27%)</title><rect x="535" y="292" width="27" height="15" fill="rgb(215,55,33)"/><text x="538.00" y="302.50">_..</text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 1.36%)</title><rect x="546" y="308" width="16" height="15" fill="rgb(237,192,51)"/><text x="549.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 1.36%)</title><rect x="546" y="324" width="16" height="15" fill="rgb(228,56,53)"/><text x="549.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (3 samples, 1.36%)</title><rect x="546" y="340" width="16" height="15" fill="rgb(253,186,13)"/><text x="549.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (3 samples, 1.36%)</title><rect x="546" y="356" width="16" height="15" fill="rgb(230,27,47)"/><text x="549.00" y="366.50"></text></g><g><title>PyArray_RemoveAxesInPlace (shape.c) (1 samples, 0.45%)</title><rect x="557" y="372" width="5" height="15" fill="rgb(246,90,15)"/><text x="560.00" y="382.50"></text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (81 samples, 36.82%)</title><rect x="133" y="68" width="434" height="15" fill="rgb(244,159,31)"/><text x="136.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_al..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (81 samples, 36.82%)</title><rect x="133" y="84" width="434" height="15" fill="rgb(252,82,53)"/><text x="136.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_a..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (81 samples, 36.82%)</title><rect x="133" y="100" width="434" height="15" fill="rgb(224,224,16)"/><text x="136.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorit..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (81 samples, 36.82%)</title><rect x="133" y="116" width="434" height="15" fill="rgb(233,87,6)"/><text x="136.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (81 samples, 36.82%)</title><rect x="133" y="132" width="434" height="15" fill="rgb(225,154,37)"/><text x="136.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (81 samples, 36.82%)</title><rect x="133" y="148" width="434" height="15" fill="rgb(225,73,20)"/><text x="136.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.45%)</title><rect x="562" y="164" width="5" height="15" fill="rgb(213,98,21)"/><text x="565.00" y="174.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.45%)</title><rect x="562" y="180" width="5" height="15" fill="rgb(236,30,25)"/><text x="565.00" y="190.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.45%)</title><rect x="562" y="196" width="5" height="15" fill="rgb(244,55,50)"/><text x="565.00" y="206.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.45%)</title><rect x="578" y="164" width="5" height="15" fill="rgb(216,116,44)"/><text x="581.00" y="174.50"></text></g><g><title>npy_free_cache_dim (alloc.c) (1 samples, 0.45%)</title><rect x="578" y="180" width="5" height="15" fill="rgb(253,201,34)"/><text x="581.00" y="190.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.45%)</title><rect x="578" y="196" width="5" height="15" fill="rgb(237,62,34)"/><text x="581.00" y="206.50"></text></g><g><title>array_ravel (methods.c) (2 samples, 0.91%)</title><rect x="583" y="164" width="11" height="15" fill="rgb(207,78,16)"/><text x="586.00" y="174.50"></text></g><g><title>0x7fd6f8e66dd0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.45%)</title><rect x="589" y="180" width="5" height="15" fill="rgb(250,12,7)"/><text x="592.00" y="190.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (1 samples, 0.45%)</title><rect x="600" y="180" width="5" height="15" fill="rgb(220,151,2)"/><text x="603.00" y="190.50"></text></g><g><title>array_reshape (methods.c) (3 samples, 1.36%)</title><rect x="594" y="164" width="16" height="15" fill="rgb(211,3,27)"/><text x="597.00" y="174.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.45%)</title><rect x="605" y="180" width="5" height="15" fill="rgb(244,211,21)"/><text x="608.00" y="190.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.45%)</title><rect x="605" y="196" width="5" height="15" fill="rgb(226,164,5)"/><text x="608.00" y="206.50"></text></g><g><title>_fix_unknown_dimension (shape.c) (1 samples, 0.45%)</title><rect x="605" y="212" width="5" height="15" fill="rgb(235,141,35)"/><text x="608.00" y="222.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.45%)</title><rect x="605" y="228" width="5" height="15" fill="rgb(231,209,29)"/><text x="608.00" y="238.50"></text></g><g><title>array_subscript (mapping.c) (1 samples, 0.45%)</title><rect x="610" y="164" width="6" height="15" fill="rgb(236,223,31)"/><text x="613.00" y="174.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (1 samples, 0.45%)</title><rect x="610" y="180" width="6" height="15" fill="rgb(246,103,29)"/><text x="613.00" y="190.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.45%)</title><rect x="610" y="196" width="6" height="15" fill="rgb(221,198,28)"/><text x="613.00" y="206.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.45%)</title><rect x="610" y="212" width="6" height="15" fill="rgb(233,91,40)"/><text x="613.00" y="222.50"></text></g><g><title>__init__ (warnings.py) (2 samples, 0.91%)</title><rect x="616" y="180" width="10" height="15" fill="rgb(222,204,42)"/><text x="619.00" y="190.50"></text></g><g><title>array_descr_get (getset.c) (2 samples, 0.91%)</title><rect x="626" y="180" width="11" height="15" fill="rgb(223,83,27)"/><text x="629.00" y="190.50"></text></g><g><title>array_ndim_get (getset.c) (1 samples, 0.45%)</title><rect x="637" y="180" width="5" height="15" fill="rgb(216,33,1)"/><text x="640.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (7 samples, 3.18%)</title><rect x="616" y="164" width="37" height="15" fill="rgb(240,93,21)"/><text x="619.00" y="174.50">che..</text></g><g><title>simplefilter (warnings.py) (2 samples, 0.91%)</title><rect x="642" y="180" width="11" height="15" fill="rgb(218,101,6)"/><text x="645.00" y="190.50"></text></g><g><title>_add_filter (warnings.py) (2 samples, 0.91%)</title><rect x="642" y="196" width="11" height="15" fill="rgb(233,140,24)"/><text x="645.00" y="206.50"></text></g><g><title>0x7fd6f9c64120 (libc-2.29.so) (1 samples, 0.45%)</title><rect x="685" y="180" width="6" height="15" fill="rgb(216,134,8)"/><text x="688.00" y="190.50"></text></g><g><title>__init__ (warnings.py) (1 samples, 0.45%)</title><rect x="696" y="196" width="5" height="15" fill="rgb(246,190,24)"/><text x="699.00" y="206.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (2 samples, 0.91%)</title><rect x="701" y="196" width="11" height="15" fill="rgb(231,66,52)"/><text x="704.00" y="206.50"></text></g><g><title>_ensure_no_complex_data (sklearn/utils/validation.py) (1 samples, 0.45%)</title><rect x="712" y="196" width="6" height="15" fill="rgb(233,55,14)"/><text x="715.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (2 samples, 0.91%)</title><rect x="718" y="196" width="10" height="15" fill="rgb(252,142,10)"/><text x="721.00" y="206.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py) (1 samples, 0.45%)</title><rect x="728" y="196" width="6" height="15" fill="rgb(244,83,51)"/><text x="731.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (12 samples, 5.45%)</title><rect x="691" y="180" width="64" height="15" fill="rgb(218,220,33)"/><text x="694.00" y="190.50">check_a..</text></g><g><title>simplefilter (warnings.py) (4 samples, 1.82%)</title><rect x="734" y="196" width="21" height="15" fill="rgb(253,28,49)"/><text x="737.00" y="206.50"></text></g><g><title>_add_filter (warnings.py) (3 samples, 1.36%)</title><rect x="739" y="212" width="16" height="15" fill="rgb(234,26,41)"/><text x="742.00" y="222.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (2 samples, 0.91%)</title><rect x="755" y="180" width="11" height="15" fill="rgb(247,158,30)"/><text x="758.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (1 samples, 0.45%)</title><rect x="760" y="196" width="6" height="15" fill="rgb(238,31,21)"/><text x="763.00" y="206.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.45%)</title><rect x="760" y="212" width="6" height="15" fill="rgb(206,192,46)"/><text x="763.00" y="222.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py) (2 samples, 0.91%)</title><rect x="766" y="180" width="11" height="15" fill="rgb(236,79,15)"/><text x="769.00" y="190.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (1 samples, 0.45%)</title><rect x="771" y="196" width="6" height="15" fill="rgb(211,0,25)"/><text x="774.00" y="206.50"></text></g><g><title>0x7fd6f9d21151 (libc-2.29.so) (1 samples, 0.45%)</title><rect x="857" y="244" width="5" height="15" fill="rgb(251,112,17)"/><text x="860.00" y="254.50"></text></g><g><title>_check_chunk_size (sklearn/metrics/pairwise.py) (13 samples, 5.91%)</title><rect x="798" y="196" width="70" height="15" fill="rgb(251,52,10)"/><text x="801.00" y="206.50">_check_..</text></g><g><title>&lt;genexpr&gt; (sklearn/metrics/pairwise.py) (9 samples, 4.09%)</title><rect x="819" y="212" width="49" height="15" fill="rgb(228,192,14)"/><text x="822.00" y="222.50">&lt;gen..</text></g><g><title>_num_samples (sklearn/utils/validation.py) (6 samples, 2.73%)</title><rect x="836" y="228" width="32" height="15" fill="rgb(249,177,38)"/><text x="839.00" y="238.50">_n..</text></g><g><title>__instancecheck__ (abc.py) (1 samples, 0.45%)</title><rect x="862" y="244" width="6" height="15" fill="rgb(226,167,8)"/><text x="865.00" y="254.50"></text></g><g><title>__subclasscheck__ (abc.py) (1 samples, 0.45%)</title><rect x="862" y="260" width="6" height="15" fill="rgb(237,95,48)"/><text x="865.00" y="270.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (2 samples, 0.91%)</title><rect x="878" y="212" width="11" height="15" fill="rgb(232,16,54)"/><text x="881.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.91%)</title><rect x="878" y="228" width="11" height="15" fill="rgb(215,173,40)"/><text x="881.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (2 samples, 0.91%)</title><rect x="878" y="244" width="11" height="15" fill="rgb(215,32,1)"/><text x="881.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (1 samples, 0.45%)</title><rect x="884" y="260" width="5" height="15" fill="rgb(212,120,2)"/><text x="887.00" y="270.50"></text></g><g><title>array_argpartition (methods.c) (1 samples, 0.45%)</title><rect x="884" y="276" width="5" height="15" fill="rgb(221,160,26)"/><text x="887.00" y="286.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (1 samples, 0.45%)</title><rect x="884" y="292" width="5" height="15" fill="rgb(212,128,51)"/><text x="887.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c) (1 samples, 0.45%)</title><rect x="884" y="308" width="5" height="15" fill="rgb(242,225,14)"/><text x="887.00" y="318.50"></text></g><g><title>aintroselect_double (selection.c.src) (1 samples, 0.45%)</title><rect x="884" y="324" width="5" height="15" fill="rgb(234,145,42)"/><text x="887.00" y="334.50"></text></g><g><title>adumb_select_double (selection.c.src) (1 samples, 0.45%)</title><rect x="884" y="340" width="5" height="15" fill="rgb(207,73,36)"/><text x="887.00" y="350.50"></text></g><g><title>DOUBLE_LT (npysort_common.h) (1 samples, 0.45%)</title><rect x="884" y="356" width="5" height="15" fill="rgb(242,14,12)"/><text x="887.00" y="366.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (1 samples, 0.45%)</title><rect x="889" y="212" width="6" height="15" fill="rgb(209,189,7)"/><text x="892.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.45%)</title><rect x="889" y="228" width="6" height="15" fill="rgb(213,220,18)"/><text x="892.00" y="238.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (1 samples, 0.45%)</title><rect x="889" y="244" width="6" height="15" fill="rgb(208,1,5)"/><text x="892.00" y="254.50"></text></g><g><title>array_arange (multiarraymodule.c) (1 samples, 0.45%)</title><rect x="895" y="212" width="5" height="15" fill="rgb(215,98,28)"/><text x="898.00" y="222.50"></text></g><g><title>PyArray_ArangeObj (ctors.c) (1 samples, 0.45%)</title><rect x="895" y="228" width="5" height="15" fill="rgb(217,190,15)"/><text x="898.00" y="238.50"></text></g><g><title>_calc_length (ctors.c) (1 samples, 0.45%)</title><rect x="895" y="244" width="5" height="15" fill="rgb(211,199,21)"/><text x="898.00" y="254.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (1 samples, 0.45%)</title><rect x="900" y="228" width="5" height="15" fill="rgb(209,10,20)"/><text x="903.00" y="238.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.45%)</title><rect x="905" y="276" width="6" height="15" fill="rgb(215,38,17)"/><text x="908.00" y="286.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (1 samples, 0.45%)</title><rect x="905" y="292" width="6" height="15" fill="rgb(231,197,2)"/><text x="908.00" y="302.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py) (9 samples, 4.09%)</title><rect x="868" y="196" width="48" height="15" fill="rgb(229,192,47)"/><text x="871.00" y="206.50">_kne..</text></g><g><title>array_subscript (mapping.c) (3 samples, 1.36%)</title><rect x="900" y="212" width="16" height="15" fill="rgb(244,79,8)"/><text x="903.00" y="222.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (2 samples, 0.91%)</title><rect x="905" y="228" width="11" height="15" fill="rgb(244,184,35)"/><text x="908.00" y="238.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (2 samples, 0.91%)</title><rect x="905" y="244" width="11" height="15" fill="rgb(247,97,48)"/><text x="908.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.91%)</title><rect x="905" y="260" width="11" height="15" fill="rgb(253,105,49)"/><text x="908.00" y="270.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c) (1 samples, 0.45%)</title><rect x="911" y="276" width="5" height="15" fill="rgb(206,156,48)"/><text x="914.00" y="286.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (1 samples, 0.45%)</title><rect x="916" y="196" width="5" height="15" fill="rgb(217,121,24)"/><text x="919.00" y="206.50"></text></g><g><title>gen_batches (sklearn/utils/__init__.py) (2 samples, 0.91%)</title><rect x="921" y="196" width="11" height="15" fill="rgb(252,221,13)"/><text x="924.00" y="206.50"></text></g><g><title>_return_float_dtype (sklearn/metrics/pairwise.py) (1 samples, 0.45%)</title><rect x="937" y="228" width="6" height="15" fill="rgb(219,184,44)"/><text x="940.00" y="238.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py) (1 samples, 0.45%)</title><rect x="943" y="228" width="5" height="15" fill="rgb(220,41,33)"/><text x="946.00" y="238.50"></text></g><g><title>effective_n_jobs (joblib/_parallel_backends.py) (1 samples, 0.45%)</title><rect x="943" y="244" width="5" height="15" fill="rgb(243,3,48)"/><text x="946.00" y="254.50"></text></g><g><title>daemon (multiprocessing/process.py) (1 samples, 0.45%)</title><rect x="943" y="260" width="5" height="15" fill="rgb(237,50,49)"/><text x="946.00" y="270.50"></text></g><g><title>array_multiply (number.c) (1 samples, 0.45%)</title><rect x="959" y="244" width="5" height="15" fill="rgb(221,41,45)"/><text x="962.00" y="254.50"></text></g><g><title>_return_float_dtype (sklearn/metrics/pairwise.py) (2 samples, 0.91%)</title><rect x="964" y="260" width="11" height="15" fill="rgb(216,86,42)"/><text x="967.00" y="270.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.45%)</title><rect x="970" y="276" width="5" height="15" fill="rgb(240,181,24)"/><text x="973.00" y="286.50"></text></g><g><title>__enter__ (warnings.py) (2 samples, 0.91%)</title><rect x="1007" y="276" width="11" height="15" fill="rgb(253,100,26)"/><text x="1010.00" y="286.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (3 samples, 1.36%)</title><rect x="1018" y="276" width="16" height="15" fill="rgb(246,21,25)"/><text x="1021.00" y="286.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py) (15 samples, 6.82%)</title><rect x="964" y="244" width="81" height="15" fill="rgb(222,203,17)"/><text x="967.00" y="254.50">check_pai..</text></g><g><title>check_array (sklearn/utils/validation.py) (13 samples, 5.91%)</title><rect x="975" y="260" width="70" height="15" fill="rgb(228,199,25)"/><text x="978.00" y="270.50">check_a..</text></g><g><title>asarray (numpy/core/_asarray.py) (2 samples, 0.91%)</title><rect x="1034" y="276" width="11" height="15" fill="rgb(217,131,22)"/><text x="1037.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (1 samples, 0.45%)</title><rect x="1039" y="292" width="6" height="15" fill="rgb(248,41,44)"/><text x="1042.00" y="302.50"></text></g><g><title>can_cast_scalar_to (convert_datatype.c) (1 samples, 0.45%)</title><rect x="1050" y="372" width="5" height="15" fill="rgb(225,173,52)"/><text x="1053.00" y="382.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.45%)</title><rect x="1050" y="388" width="5" height="15" fill="rgb(230,33,39)"/><text x="1053.00" y="398.50"></text></g><g><title>PyArray_CanCastTo (convert_datatype.c) (1 samples, 0.45%)</title><rect x="1050" y="404" width="5" height="15" fill="rgb(234,40,33)"/><text x="1053.00" y="414.50"></text></g><g><title>PyArray_AssignZero (convert.c) (2 samples, 0.91%)</title><rect x="1050" y="340" width="11" height="15" fill="rgb(227,11,33)"/><text x="1053.00" y="350.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (2 samples, 0.91%)</title><rect x="1050" y="356" width="11" height="15" fill="rgb(246,3,2)"/><text x="1053.00" y="366.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.45%)</title><rect x="1055" y="372" width="6" height="15" fill="rgb(254,142,39)"/><text x="1058.00" y="382.50"></text></g><g><title>_aligned_cast_bool_to_double (lowlevel_strided_loops.c.src) (1 samples, 0.45%)</title><rect x="1055" y="388" width="6" height="15" fill="rgb(231,172,27)"/><text x="1058.00" y="398.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py) (4 samples, 1.82%)</title><rect x="1045" y="244" width="21" height="15" fill="rgb(205,218,42)"/><text x="1048.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;) (4 samples, 1.82%)</title><rect x="1045" y="260" width="21" height="15" fill="rgb(219,200,41)"/><text x="1048.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 1.82%)</title><rect x="1045" y="276" width="21" height="15" fill="rgb(215,172,36)"/><text x="1048.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py) (4 samples, 1.82%)</title><rect x="1045" y="292" width="21" height="15" fill="rgb(241,193,30)"/><text x="1048.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c) (4 samples, 1.82%)</title><rect x="1045" y="308" width="21" height="15" fill="rgb(232,51,49)"/><text x="1048.00" y="318.50"></text></g><g><title>PyArray_EinsteinSum (einsum.c.src) (4 samples, 1.82%)</title><rect x="1045" y="324" width="21" height="15" fill="rgb(253,205,21)"/><text x="1048.00" y="334.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters3 (nditer_templ.c.src) (1 samples, 0.45%)</title><rect x="1061" y="340" width="5" height="15" fill="rgb(245,160,35)"/><text x="1064.00" y="350.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.45%)</title><rect x="1066" y="260" width="6" height="15" fill="rgb(223,131,22)"/><text x="1069.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.45%)</title><rect x="1072" y="308" width="5" height="15" fill="rgb(241,164,27)"/><text x="1075.00" y="318.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.45%)</title><rect x="1072" y="324" width="5" height="15" fill="rgb(218,37,41)"/><text x="1075.00" y="334.50"></text></g><g><title>npyiter_replace_axisdata (nditer_constr.c) (1 samples, 0.45%)</title><rect x="1072" y="340" width="5" height="15" fill="rgb(237,21,33)"/><text x="1075.00" y="350.50"></text></g><g><title>_get_coredim_sizes (ufunc_object.c) (1 samples, 0.45%)</title><rect x="1077" y="308" width="5" height="15" fill="rgb(215,102,51)"/><text x="1080.00" y="318.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (4 samples, 1.82%)</title><rect x="1066" y="244" width="22" height="15" fill="rgb(217,71,16)"/><text x="1069.00" y="254.50">s..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 1.36%)</title><rect x="1072" y="260" width="16" height="15" fill="rgb(225,164,10)"/><text x="1075.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 1.36%)</title><rect x="1072" y="276" width="16" height="15" fill="rgb(224,27,54)"/><text x="1075.00" y="286.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (3 samples, 1.36%)</title><rect x="1072" y="292" width="16" height="15" fill="rgb(251,64,15)"/><text x="1075.00" y="302.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.45%)</title><rect x="1082" y="308" width="6" height="15" fill="rgb(241,60,31)"/><text x="1085.00" y="318.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.45%)</title><rect x="1082" y="324" width="6" height="15" fill="rgb(234,129,43)"/><text x="1085.00" y="334.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.45%)</title><rect x="1082" y="340" width="6" height="15" fill="rgb(211,9,30)"/><text x="1085.00" y="350.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.45%)</title><rect x="1088" y="260" width="5" height="15" fill="rgb(229,13,51)"/><text x="1091.00" y="270.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.45%)</title><rect x="1088" y="276" width="5" height="15" fill="rgb(223,36,39)"/><text x="1091.00" y="286.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (1 samples, 0.45%)</title><rect x="1088" y="292" width="5" height="15" fill="rgb(208,225,12)"/><text x="1091.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.45%)</title><rect x="1093" y="260" width="5" height="15" fill="rgb(210,56,49)"/><text x="1096.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.45%)</title><rect x="1093" y="276" width="5" height="15" fill="rgb(230,109,5)"/><text x="1096.00" y="286.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (1 samples, 0.45%)</title><rect x="1093" y="292" width="5" height="15" fill="rgb(230,32,22)"/><text x="1096.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.45%)</title><rect x="1093" y="308" width="5" height="15" fill="rgb(242,34,0)"/><text x="1096.00" y="318.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (1 samples, 0.45%)</title><rect x="1093" y="324" width="5" height="15" fill="rgb(224,134,12)"/><text x="1096.00" y="334.50"></text></g><g><title>0x7fd6f9c43965 (libc-2.29.so) (1 samples, 0.45%)</title><rect x="1093" y="340" width="5" height="15" fill="rgb(228,2,49)"/><text x="1096.00" y="350.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py) (61 samples, 27.73%)</title><rect x="777" y="180" width="327" height="15" fill="rgb(245,216,13)"/><text x="780.00" y="190.50">pairwise_distances_chunked (sklearn/metrics/..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py) (32 samples, 14.55%)</title><rect x="932" y="196" width="172" height="15" fill="rgb(205,63,0)"/><text x="935.00" y="206.50">pairwise_distances (sk..</text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py) (32 samples, 14.55%)</title><rect x="932" y="212" width="172" height="15" fill="rgb(249,159,23)"/><text x="935.00" y="222.50">_parallel_pairwise (sk..</text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py) (29 samples, 13.18%)</title><rect x="948" y="228" width="156" height="15" fill="rgb(250,104,38)"/><text x="951.00" y="238.50">euclidean_distances ..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 1.36%)</title><rect x="1088" y="244" width="16" height="15" fill="rgb(250,36,43)"/><text x="1091.00" y="254.50"></text></g><g><title>_find_array_wrap (ufunc_object.c) (1 samples, 0.45%)</title><rect x="1098" y="260" width="6" height="15" fill="rgb(233,35,11)"/><text x="1101.00" y="270.50"></text></g><g><title>_find_array_method (ufunc_object.c) (1 samples, 0.45%)</title><rect x="1098" y="276" width="6" height="15" fill="rgb(237,158,52)"/><text x="1101.00" y="286.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (86 samples, 39.09%)</title><rect x="653" y="164" width="461" height="15" fill="rgb(215,227,27)"/><text x="656.00" y="174.50">kneighbors (sklearn/neighbors/_base.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (2 samples, 0.91%)</title><rect x="1104" y="180" width="10" height="15" fill="rgb(205,192,32)"/><text x="1107.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.91%)</title><rect x="1104" y="196" width="10" height="15" fill="rgb(231,222,11)"/><text x="1107.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (2 samples, 0.91%)</title><rect x="1104" y="212" width="10" height="15" fill="rgb(209,127,2)"/><text x="1107.00" y="222.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (2 samples, 0.91%)</title><rect x="1104" y="228" width="10" height="15" fill="rgb(234,201,24)"/><text x="1107.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.91%)</title><rect x="1104" y="244" width="10" height="15" fill="rgb(237,211,38)"/><text x="1107.00" y="254.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (2 samples, 0.91%)</title><rect x="1104" y="260" width="10" height="15" fill="rgb(208,133,5)"/><text x="1107.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (1 samples, 0.45%)</title><rect x="1109" y="276" width="5" height="15" fill="rgb(239,163,9)"/><text x="1112.00" y="286.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.45%)</title><rect x="1131" y="244" width="5" height="15" fill="rgb(235,8,38)"/><text x="1134.00" y="254.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.45%)</title><rect x="1131" y="260" width="5" height="15" fill="rgb(239,72,19)"/><text x="1134.00" y="270.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (1 samples, 0.45%)</title><rect x="1131" y="276" width="5" height="15" fill="rgb(219,197,11)"/><text x="1134.00" y="286.50"></text></g><g><title>unicode_eq (python3.7) (1 samples, 0.45%)</title><rect x="1131" y="292" width="5" height="15" fill="rgb(230,71,39)"/><text x="1134.00" y="302.50"></text></g><g><title>0x7fd6f9d21151 (libc-2.29.so) (1 samples, 0.45%)</title><rect x="1131" y="308" width="5" height="15" fill="rgb(223,168,42)"/><text x="1134.00" y="318.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (1 samples, 0.45%)</title><rect x="1136" y="260" width="5" height="15" fill="rgb(226,165,28)"/><text x="1139.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.91%)</title><rect x="1141" y="260" width="11" height="15" fill="rgb(246,96,28)"/><text x="1144.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (2 samples, 0.91%)</title><rect x="1141" y="276" width="11" height="15" fill="rgb(212,222,53)"/><text x="1144.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.91%)</title><rect x="1141" y="292" width="11" height="15" fill="rgb(231,5,11)"/><text x="1144.00" y="302.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 2.27%)</title><rect x="1131" y="228" width="26" height="15" fill="rgb(240,92,36)"/><text x="1134.00" y="238.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 1.82%)</title><rect x="1136" y="244" width="21" height="15" fill="rgb(245,146,35)"/><text x="1139.00" y="254.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (1 samples, 0.45%)</title><rect x="1152" y="260" width="5" height="15" fill="rgb(229,69,11)"/><text x="1155.00" y="270.50"></text></g><g><title>set_ufunc_loop_data_types (ufunc_type_resolution.c) (1 samples, 0.45%)</title><rect x="1152" y="276" width="5" height="15" fill="rgb(225,118,45)"/><text x="1155.00" y="286.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.45%)</title><rect x="1157" y="244" width="6" height="15" fill="rgb(218,8,22)"/><text x="1160.00" y="254.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.45%)</title><rect x="1157" y="260" width="6" height="15" fill="rgb(216,115,26)"/><text x="1160.00" y="270.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.45%)</title><rect x="1157" y="276" width="6" height="15" fill="rgb(205,67,54)"/><text x="1160.00" y="286.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.45%)</title><rect x="1157" y="292" width="6" height="15" fill="rgb(242,210,45)"/><text x="1160.00" y="302.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.45%)</title><rect x="1157" y="308" width="6" height="15" fill="rgb(238,202,27)"/><text x="1160.00" y="318.50"></text></g><g><title>0x7fd6f9c59e7a (libc-2.29.so) (1 samples, 0.45%)</title><rect x="1157" y="324" width="6" height="15" fill="rgb(210,123,3)"/><text x="1160.00" y="334.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.45%)</title><rect x="1163" y="292" width="5" height="15" fill="rgb(224,92,6)"/><text x="1166.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (2 samples, 0.91%)</title><rect x="1163" y="276" width="10" height="15" fill="rgb(209,208,49)"/><text x="1166.00" y="286.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (1 samples, 0.45%)</title><rect x="1168" y="292" width="5" height="15" fill="rgb(243,174,50)"/><text x="1171.00" y="302.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.45%)</title><rect x="1168" y="308" width="5" height="15" fill="rgb(249,140,17)"/><text x="1171.00" y="318.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.45%)</title><rect x="1168" y="324" width="5" height="15" fill="rgb(219,109,14)"/><text x="1171.00" y="334.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (1 samples, 0.45%)</title><rect x="1168" y="340" width="5" height="15" fill="rgb(247,84,30)"/><text x="1171.00" y="350.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (1 samples, 0.45%)</title><rect x="1168" y="356" width="5" height="15" fill="rgb(209,43,26)"/><text x="1171.00" y="366.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (12 samples, 5.45%)</title><rect x="1120" y="196" width="64" height="15" fill="rgb(239,80,6)"/><text x="1123.00" y="206.50">mean (n..</text></g><g><title>_mean (numpy/core/_methods.py) (11 samples, 5.00%)</title><rect x="1125" y="212" width="59" height="15" fill="rgb(225,184,54)"/><text x="1128.00" y="222.50">_mean ..</text></g><g><title>ufunc_reduce (ufunc_object.c) (5 samples, 2.27%)</title><rect x="1157" y="228" width="27" height="15" fill="rgb(218,0,4)"/><text x="1160.00" y="238.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 1.82%)</title><rect x="1163" y="244" width="21" height="15" fill="rgb(243,109,22)"/><text x="1166.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (4 samples, 1.82%)</title><rect x="1163" y="260" width="21" height="15" fill="rgb(248,11,47)"/><text x="1166.00" y="270.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (2 samples, 0.91%)</title><rect x="1173" y="276" width="11" height="15" fill="rgb(225,80,1)"/><text x="1176.00" y="286.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.91%)</title><rect x="1173" y="292" width="11" height="15" fill="rgb(239,160,20)"/><text x="1176.00" y="302.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (2 samples, 0.91%)</title><rect x="1173" y="308" width="11" height="15" fill="rgb(218,21,45)"/><text x="1176.00" y="318.50"></text></g><g><title>all (220 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(211,48,39)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (220 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(239,177,5)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py)</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (116 samples, 52.73%)</title><rect x="567" y="68" width="623" height="15" fill="rgb(226,177,21)"/><text x="570.00" y="78.50">profile_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (116 samples, 52.73%)</title><rect x="567" y="84" width="623" height="15" fill="rgb(231,4,53)"/><text x="570.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_cdist.py) (116 samples, 52.73%)</title><rect x="567" y="100" width="623" height="15" fill="rgb(238,26,0)"/><text x="570.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_1..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (116 samples, 52.73%)</title><rect x="567" y="116" width="623" height="15" fill="rgb(249,11,22)"/><text x="570.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (115 samples, 52.27%)</title><rect x="573" y="132" width="617" height="15" fill="rgb(230,58,47)"/><text x="576.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict (sklearn/neighbors/_regression.py) (115 samples, 52.27%)</title><rect x="573" y="148" width="617" height="15" fill="rgb(224,201,42)"/><text x="576.00" y="158.50">predict (sklearn/neighbors/_regression.py)</text></g><g><title>mean (&lt;__array_function__ internals&gt;) (14 samples, 6.36%)</title><rect x="1114" y="164" width="76" height="15" fill="rgb(232,44,2)"/><text x="1117.00" y="174.50">mean (&lt;_..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (14 samples, 6.36%)</title><rect x="1114" y="180" width="76" height="15" fill="rgb(214,25,1)"/><text x="1117.00" y="190.50">array_im..</text></g><g><title>npy_cache_import (npy_import.h) (1 samples, 0.45%)</title><rect x="1184" y="196" width="6" height="15" fill="rgb(238,96,28)"/><text x="1187.00" y="206.50"></text></g></g></svg>