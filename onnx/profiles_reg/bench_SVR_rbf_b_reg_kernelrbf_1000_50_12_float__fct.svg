<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="741.00"> </text><svg id="frames" x="10" width="1180"><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.23%)</title><rect x="0.0000%" y="196" width="1.2320%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.23%)</title><rect x="0.0000%" y="212" width="1.2320%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.23%)</title><rect x="0.0000%" y="228" width="1.2320%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.23%)</title><rect x="0.0000%" y="244" width="1.2320%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.23%)</title><rect x="0.0000%" y="260" width="1.2320%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.23%)</title><rect x="0.0000%" y="276" width="1.2320%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (9 samples, 1.85%)</title><rect x="1.2320%" y="340" width="1.8480%" height="15" fill="rgb(207,160,47)"/><text x="1.4820%" y="350.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.85%)</title><rect x="1.2320%" y="356" width="1.8480%" height="15" fill="rgb(228,23,34)"/><text x="1.4820%" y="366.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.85%)</title><rect x="1.2320%" y="372" width="1.8480%" height="15" fill="rgb(218,30,26)"/><text x="1.4820%" y="382.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.85%)</title><rect x="1.2320%" y="388" width="1.8480%" height="15" fill="rgb(220,122,19)"/><text x="1.4820%" y="398.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 1.85%)</title><rect x="1.2320%" y="404" width="1.8480%" height="15" fill="rgb(250,228,42)"/><text x="1.4820%" y="414.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.85%)</title><rect x="1.2320%" y="420" width="1.8480%" height="15" fill="rgb(240,193,28)"/><text x="1.4820%" y="430.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (9 samples, 1.85%)</title><rect x="1.2320%" y="436" width="1.8480%" height="15" fill="rgb(216,20,37)"/><text x="1.4820%" y="446.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.85%)</title><rect x="1.2320%" y="452" width="1.8480%" height="15" fill="rgb(206,188,39)"/><text x="1.4820%" y="462.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.85%)</title><rect x="1.2320%" y="468" width="1.8480%" height="15" fill="rgb(217,207,13)"/><text x="1.4820%" y="478.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="484" width="1.0267%" height="15" fill="rgb(231,73,38)"/><text x="2.3034%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="500" width="1.0267%" height="15" fill="rgb(225,20,46)"/><text x="2.3034%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="516" width="1.0267%" height="15" fill="rgb(210,31,41)"/><text x="2.3034%" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (5 samples, 1.03%)</title><rect x="2.0534%" y="532" width="1.0267%" height="15" fill="rgb(221,200,47)"/><text x="2.3034%" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="548" width="1.0267%" height="15" fill="rgb(226,26,5)"/><text x="2.3034%" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="564" width="1.0267%" height="15" fill="rgb(249,33,26)"/><text x="2.3034%" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="580" width="1.0267%" height="15" fill="rgb(235,183,28)"/><text x="2.3034%" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="596" width="1.0267%" height="15" fill="rgb(221,5,38)"/><text x="2.3034%" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="612" width="1.0267%" height="15" fill="rgb(247,18,42)"/><text x="2.3034%" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (5 samples, 1.03%)</title><rect x="2.0534%" y="628" width="1.0267%" height="15" fill="rgb(241,131,45)"/><text x="2.3034%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="644" width="1.0267%" height="15" fill="rgb(249,31,29)"/><text x="2.3034%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="660" width="1.0267%" height="15" fill="rgb(225,111,53)"/><text x="2.3034%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="676" width="1.0267%" height="15" fill="rgb(238,160,17)"/><text x="2.3034%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="692" width="1.0267%" height="15" fill="rgb(214,148,48)"/><text x="2.3034%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.03%)</title><rect x="2.0534%" y="708" width="1.0267%" height="15" fill="rgb(232,36,49)"/><text x="2.3034%" y="718.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (12 samples, 2.46%)</title><rect x="1.2320%" y="244" width="2.4641%" height="15" fill="rgb(209,103,24)"/><text x="1.4820%" y="254.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 2.46%)</title><rect x="1.2320%" y="260" width="2.4641%" height="15" fill="rgb(229,88,8)"/><text x="1.4820%" y="270.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 2.46%)</title><rect x="1.2320%" y="276" width="2.4641%" height="15" fill="rgb(213,181,19)"/><text x="1.4820%" y="286.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 2.46%)</title><rect x="1.2320%" y="292" width="2.4641%" height="15" fill="rgb(254,191,54)"/><text x="1.4820%" y="302.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (12 samples, 2.46%)</title><rect x="1.2320%" y="308" width="2.4641%" height="15" fill="rgb(241,83,37)"/><text x="1.4820%" y="318.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 2.46%)</title><rect x="1.2320%" y="324" width="2.4641%" height="15" fill="rgb(233,36,39)"/><text x="1.4820%" y="334.50">_c..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.90%)</title><rect x="0.0000%" y="68" width="3.9014%" height="15" fill="rgb(226,3,54)"/><text x="0.2500%" y="78.50">_fin..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.90%)</title><rect x="0.0000%" y="84" width="3.9014%" height="15" fill="rgb(245,192,40)"/><text x="0.2500%" y="94.50">_fin..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.90%)</title><rect x="0.0000%" y="100" width="3.9014%" height="15" fill="rgb(238,167,29)"/><text x="0.2500%" y="110.50">_loa..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (19 samples, 3.90%)</title><rect x="0.0000%" y="116" width="3.9014%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="126.50">exec..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.90%)</title><rect x="0.0000%" y="132" width="3.9014%" height="15" fill="rgb(231,60,39)"/><text x="0.2500%" y="142.50">_cal..</text></g><g><title>&lt;module&gt; (profiles/benches/svm/SVR/bench_SVR_rbf_b_reg_kernelrbf.py) (19 samples, 3.90%)</title><rect x="0.0000%" y="148" width="3.9014%" height="15" fill="rgb(208,69,12)"/><text x="0.2500%" y="158.50">&lt;mod..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.90%)</title><rect x="0.0000%" y="164" width="3.9014%" height="15" fill="rgb(235,93,37)"/><text x="0.2500%" y="174.50">_fin..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.90%)</title><rect x="0.0000%" y="180" width="3.9014%" height="15" fill="rgb(213,116,39)"/><text x="0.2500%" y="190.50">_fin..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.67%)</title><rect x="1.2320%" y="196" width="2.6694%" height="15" fill="rgb(222,207,29)"/><text x="1.4820%" y="206.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (13 samples, 2.67%)</title><rect x="1.2320%" y="212" width="2.6694%" height="15" fill="rgb(206,96,30)"/><text x="1.4820%" y="222.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.67%)</title><rect x="1.2320%" y="228" width="2.6694%" height="15" fill="rgb(218,138,4)"/><text x="1.4820%" y="238.50">_c..</text></g><g><title>0x7f1e38a09c04 (libm-2.29.so) (6 samples, 1.23%)</title><rect x="38.3984%" y="356" width="1.2320%" height="15" fill="rgb(250,191,14)"/><text x="38.6484%" y="366.50"></text></g><g><title>0x7f1e38a09c32 (libm-2.29.so) (9 samples, 1.85%)</title><rect x="40.2464%" y="356" width="1.8480%" height="15" fill="rgb(239,60,40)"/><text x="40.4964%" y="366.50">0..</text></g><g><title>0x7f1e38a09c6e (libm-2.29.so) (6 samples, 1.23%)</title><rect x="43.5318%" y="356" width="1.2320%" height="15" fill="rgb(206,27,48)"/><text x="43.7818%" y="366.50"></text></g><g><title>0x7f1e38a09c7b (libm-2.29.so) (5 samples, 1.03%)</title><rect x="44.7639%" y="356" width="1.0267%" height="15" fill="rgb(225,35,8)"/><text x="45.0139%" y="366.50"></text></g><g><title>profile_ort (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py) (204 samples, 41.89%)</title><rect x="4.1068%" y="68" width="41.8891%" height="15" fill="rgb(250,213,24)"/><text x="4.3568%" y="78.50">profile_ort (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py)</text></g><g><title>setup_profile (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py) (204 samples, 41.89%)</title><rect x="4.1068%" y="84" width="41.8891%" height="15" fill="rgb(247,123,22)"/><text x="4.3568%" y="94.50">setup_profile (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py)</text></g><g><title>profile (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py) (204 samples, 41.89%)</title><rect x="4.1068%" y="100" width="41.8891%" height="15" fill="rgb(231,138,38)"/><text x="4.3568%" y="110.50">profile (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (204 samples, 41.89%)</title><rect x="4.1068%" y="116" width="41.8891%" height="15" fill="rgb(231,145,46)"/><text x="4.3568%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (204 samples, 41.89%)</title><rect x="4.1068%" y="132" width="41.8891%" height="15" fill="rgb(251,118,11)"/><text x="4.3568%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (204 samples, 41.89%)</title><rect x="4.1068%" y="148" width="41.8891%" height="15" fill="rgb(217,147,25)"/><text x="4.3568%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (203 samples, 41.68%)</title><rect x="4.3121%" y="164" width="41.6838%" height="15" fill="rgb(247,81,37)"/><text x="4.5621%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (203 samples, 41.68%)</title><rect x="4.3121%" y="180" width="41.6838%" height="15" fill="rgb(209,12,38)"/><text x="4.5621%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (203 samples, 41.68%)</title><rect x="4.3121%" y="196" width="41.6838%" height="15" fill="rgb(227,1,9)"/><text x="4.5621%" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (202 samples, 41.48%)</title><rect x="4.5175%" y="212" width="41.4784%" height="15" fill="rgb(248,47,43)"/><text x="4.7675%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pyb..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (202 samples, 41.48%)</title><rect x="4.5175%" y="228" width="41.4784%" height="15" fill="rgb(221,10,30)"/><text x="4.7675%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObje..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (202 samples, 41.48%)</title><rect x="4.5175%" y="244" width="41.4784%" height="15" fill="rgb(210,229,1)"/><text x="4.7675%" y="254.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pyb..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (202 samples, 41.48%)</title><rect x="4.5175%" y="260" width="41.4784%" height="15" fill="rgb(222,148,37)"/><text x="4.7675%" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pyb..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (202 samples, 41.48%)</title><rect x="4.5175%" y="276" width="41.4784%" height="15" fill="rgb(234,67,33)"/><text x="4.7675%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybin..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (202 samples, 41.48%)</title><rect x="4.5175%" y="292" width="41.4784%" height="15" fill="rgb(247,98,35)"/><text x="4.7675%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_p..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (202 samples, 41.48%)</title><rect x="4.5175%" y="308" width="41.4784%" height="15" fill="rgb(247,138,52)"/><text x="4.7675%" y="318.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxrunti..</text></g><g><title>onnxruntime::ml::SVMRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (202 samples, 41.48%)</title><rect x="4.5175%" y="324" width="41.4784%" height="15" fill="rgb(213,79,30)"/><text x="4.7675%" y="334.50">onnxruntime::ml::SVMRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnx..</text></g><g><title>expf32x (libm-2.29.so) (64 samples, 13.14%)</title><rect x="32.8542%" y="340" width="13.1417%" height="15" fill="rgb(246,177,23)"/><text x="33.1042%" y="350.50">expf32x (libm-2.29.s..</text></g><g><title>profile (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py) (68 samples, 13.96%)</title><rect x="45.9959%" y="100" width="13.9630%" height="15" fill="rgb(230,62,27)"/><text x="46.2459%" y="110.50">profile (bench_SVR_rb..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (68 samples, 13.96%)</title><rect x="45.9959%" y="116" width="13.9630%" height="15" fill="rgb(216,154,8)"/><text x="46.2459%" y="126.50">time_predict (mlprodi..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (68 samples, 13.96%)</title><rect x="45.9959%" y="132" width="13.9630%" height="15" fill="rgb(244,35,45)"/><text x="46.2459%" y="142.50">&lt;lambda&gt; (mlprodict/a..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (68 samples, 13.96%)</title><rect x="45.9959%" y="148" width="13.9630%" height="15" fill="rgb(251,115,12)"/><text x="46.2459%" y="158.50">run (mlprodict/onnxrt..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py) (68 samples, 13.96%)</title><rect x="45.9959%" y="164" width="13.9630%" height="15" fill="rgb(240,54,50)"/><text x="46.2459%" y="174.50">_run_sequence_runtime..</text></g><g><title>compiled_run (&lt;string&gt;) (68 samples, 13.96%)</title><rect x="45.9959%" y="180" width="13.9630%" height="15" fill="rgb(233,84,52)"/><text x="46.2459%" y="190.50">compiled_run (&lt;string..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_svm_regressor.py) (68 samples, 13.96%)</title><rect x="45.9959%" y="196" width="13.9630%" height="15" fill="rgb(207,117,47)"/><text x="46.2459%" y="206.50">_run (mlprodict/onnxr..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="212" width="13.7577%" height="15" fill="rgb(249,43,39)"/><text x="46.4512%" y="222.50">pybind11::cpp_functio..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeSVMRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeSVMRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="228" width="13.7577%" height="15" fill="rgb(209,38,44)"/><text x="46.4512%" y="238.50">void pybind11::cpp_fu..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeSVMRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeSVMRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="244" width="13.7577%" height="15" fill="rgb(236,212,23)"/><text x="46.4512%" y="254.50">void pybind11::cpp_fu..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeSVMRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="260" width="13.7577%" height="15" fill="rgb(242,79,21)"/><text x="46.4512%" y="270.50">pybind11::detail::arg..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeSVMRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="276" width="13.7577%" height="15" fill="rgb(211,96,35)"/><text x="46.4512%" y="286.50">pybind11::detail::arg..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeSVMRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeSVMRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="292" width="13.7577%" height="15" fill="rgb(253,215,40)"/><text x="46.4512%" y="302.50">pybind11::cpp_functio..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="308" width="13.7577%" height="15" fill="rgb(211,81,21)"/><text x="46.4512%" y="318.50">pybind11::array_t&lt;flo..</text></g><g><title>pybind11::array::~array (numpy.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="324" width="13.7577%" height="15" fill="rgb(208,190,38)"/><text x="46.4512%" y="334.50">pybind11::array::~arr..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="340" width="13.7577%" height="15" fill="rgb(235,213,38)"/><text x="46.4512%" y="350.50">pybind11::buffer::~bu..</text></g><g><title>pybind11::object::~object (pytypes.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="356" width="13.7577%" height="15" fill="rgb(237,122,38)"/><text x="46.4512%" y="366.50">pybind11::object::~ob..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="372" width="13.7577%" height="15" fill="rgb(244,218,35)"/><text x="46.4512%" y="382.50">pybind11::handle::dec..</text></g><g><title>RuntimeSVMRegressor&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_svm_regressor_.cpp) (67 samples, 13.76%)</title><rect x="46.2012%" y="388" width="13.7577%" height="15" fill="rgb(240,68,47)"/><text x="46.4512%" y="398.50">RuntimeSVMRegressor&lt;f..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (67 samples, 13.76%)</title><rect x="46.2012%" y="404" width="13.7577%" height="15" fill="rgb(210,16,53)"/><text x="46.4512%" y="414.50">pybind11::gil_scoped_..</text></g><g><title>RuntimeSVMRegressor&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_regressor_.cpp) (67 samples, 13.76%)</title><rect x="46.2012%" y="420" width="13.7577%" height="15" fill="rgb(235,124,12)"/><text x="46.4512%" y="430.50">RuntimeSVMRegressor&lt;f..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (64 samples, 13.14%)</title><rect x="46.8172%" y="436" width="13.1417%" height="15" fill="rgb(224,169,11)"/><text x="47.0672%" y="446.50">GOMP_parallel (libgo..</text></g><g><title>RuntimeSVMRegressor&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_svm_regressor_.cpp) (63 samples, 12.94%)</title><rect x="47.0226%" y="452" width="12.9363%" height="15" fill="rgb(250,166,2)"/><text x="47.2726%" y="462.50">RuntimeSVMRegressor..</text></g><g><title>RuntimeSVMRegressor&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_regressor_.cpp) (61 samples, 12.53%)</title><rect x="47.4333%" y="468" width="12.5257%" height="15" fill="rgb(242,216,29)"/><text x="47.6833%" y="478.50">RuntimeSVMRegressor..</text></g><g><title>expf32x (libm-2.29.so) (14 samples, 2.87%)</title><rect x="57.0842%" y="484" width="2.8747%" height="15" fill="rgb(230,116,27)"/><text x="57.3342%" y="494.50">ex..</text></g><g><title>profile_pyrtc (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py) (69 samples, 14.17%)</title><rect x="45.9959%" y="68" width="14.1684%" height="15" fill="rgb(228,99,48)"/><text x="46.2459%" y="78.50">profile_pyrtc (bench_S..</text></g><g><title>setup_profile (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py) (69 samples, 14.17%)</title><rect x="45.9959%" y="84" width="14.1684%" height="15" fill="rgb(253,11,6)"/><text x="46.2459%" y="94.50">setup_profile (bench_S..</text></g><g><title>0x7f1e38a09c6e (libm-2.29.so) (5 samples, 1.03%)</title><rect x="67.1458%" y="276" width="1.0267%" height="15" fill="rgb(247,143,39)"/><text x="67.3958%" y="286.50"></text></g><g><title>0x7f1e38a09c7b (libm-2.29.so) (7 samples, 1.44%)</title><rect x="68.1725%" y="276" width="1.4374%" height="15" fill="rgb(236,97,10)"/><text x="68.4225%" y="286.50"></text></g><g><title>exp (libm-2.29.so) (46 samples, 9.45%)</title><rect x="60.7803%" y="260" width="9.4456%" height="15" fill="rgb(233,208,19)"/><text x="61.0303%" y="270.50">exp (libm-2.29..</text></g><g><title>_dense_predict (sklearn/svm/_base.py) (190 samples, 39.01%)</title><rect x="60.1643%" y="164" width="39.0144%" height="15" fill="rgb(216,164,2)"/><text x="60.4143%" y="174.50">_dense_predict (sklearn/svm/_base.py)</text></g><g><title>0x7f1e1b7ab1dd (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (190 samples, 39.01%)</title><rect x="60.1643%" y="180" width="39.0144%" height="15" fill="rgb(220,129,5)"/><text x="60.4143%" y="190.50">0x7f1e1b7ab1dd (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu..</text></g><g><title>0x7f1e1b7a94f1 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (189 samples, 38.81%)</title><rect x="60.3696%" y="196" width="38.8090%" height="15" fill="rgb(242,17,10)"/><text x="60.6196%" y="206.50">0x7f1e1b7a94f1 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gn..</text></g><g><title>copy_predict (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (189 samples, 38.81%)</title><rect x="60.3696%" y="212" width="38.8090%" height="15" fill="rgb(242,107,0)"/><text x="60.6196%" y="222.50">copy_predict (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu...</text></g><g><title>svm_predict (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (189 samples, 38.81%)</title><rect x="60.3696%" y="228" width="38.8090%" height="15" fill="rgb(251,28,31)"/><text x="60.6196%" y="238.50">svm_predict (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.s..</text></g><g><title>svm_predict_values (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (189 samples, 38.81%)</title><rect x="60.3696%" y="244" width="38.8090%" height="15" fill="rgb(233,223,10)"/><text x="60.6196%" y="254.50">svm_predict_values (sklearn/svm/_libsvm.cpython-37m-x86_64-linu..</text></g><g><title>svm::Kernel::k_function (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (141 samples, 28.95%)</title><rect x="70.2259%" y="260" width="28.9528%" height="15" fill="rgb(215,21,27)"/><text x="70.4759%" y="270.50">svm::Kernel::k_function (sklearn/svm/_libsvm.cp..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (192 samples, 39.43%)</title><rect x="60.1643%" y="132" width="39.4251%" height="15" fill="rgb(232,23,21)"/><text x="60.4143%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict (sklearn/svm/_base.py) (192 samples, 39.43%)</title><rect x="60.1643%" y="148" width="39.4251%" height="15" fill="rgb(244,5,23)"/><text x="60.4143%" y="158.50">predict (sklearn/svm/_base.py)</text></g><g><title>profile_skl (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py) (193 samples, 39.63%)</title><rect x="60.1643%" y="68" width="39.6304%" height="15" fill="rgb(226,81,46)"/><text x="60.4143%" y="78.50">profile_skl (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py)</text></g><g><title>setup_profile (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py) (193 samples, 39.63%)</title><rect x="60.1643%" y="84" width="39.6304%" height="15" fill="rgb(247,70,30)"/><text x="60.4143%" y="94.50">setup_profile (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py)</text></g><g><title>profile (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py) (193 samples, 39.63%)</title><rect x="60.1643%" y="100" width="39.6304%" height="15" fill="rgb(212,68,19)"/><text x="60.4143%" y="110.50">profile (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (193 samples, 39.63%)</title><rect x="60.1643%" y="116" width="39.6304%" height="15" fill="rgb(240,187,13)"/><text x="60.4143%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>all (487 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py) (487 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="62.50">&lt;module&gt; (bench_SVR_rbf_b_reg_kernelrbf_1000_50_12_float_.py)</text></g></svg></svg>