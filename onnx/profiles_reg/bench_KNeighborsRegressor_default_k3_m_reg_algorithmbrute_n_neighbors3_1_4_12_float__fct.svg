<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1062" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1045.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1045.00"> </text><g id="frames"><g><title>_build_master (pkg_resources/__init__.py) (3 samples, 0.12%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(244,19,43)"/><text x="13.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (3 samples, 0.12%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(208,55,9)"/><text x="13.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (3 samples, 0.12%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(205,168,47)"/><text x="13.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (3 samples, 0.12%)</title><rect x="10" y="916" width="1" height="15" fill="rgb(243,80,41)"/><text x="13.00" y="926.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (3 samples, 0.12%)</title><rect x="10" y="932" width="1" height="15" fill="rgb(236,39,6)"/><text x="13.00" y="942.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (6 samples, 0.24%)</title><rect x="10" y="292" width="2" height="15" fill="rgb(207,182,46)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="308" width="2" height="15" fill="rgb(206,51,49)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="324" width="2" height="15" fill="rgb(228,153,5)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="340" width="2" height="15" fill="rgb(207,227,10)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.24%)</title><rect x="10" y="356" width="2" height="15" fill="rgb(207,20,38)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="372" width="2" height="15" fill="rgb(211,187,42)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (6 samples, 0.24%)</title><rect x="10" y="388" width="2" height="15" fill="rgb(238,95,13)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="404" width="2" height="15" fill="rgb(211,29,28)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="420" width="2" height="15" fill="rgb(233,9,14)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="436" width="2" height="15" fill="rgb(249,95,47)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.24%)</title><rect x="10" y="452" width="2" height="15" fill="rgb(218,112,21)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="468" width="2" height="15" fill="rgb(245,26,39)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (6 samples, 0.24%)</title><rect x="10" y="484" width="2" height="15" fill="rgb(248,118,18)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="500" width="2" height="15" fill="rgb(228,181,15)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="516" width="2" height="15" fill="rgb(244,190,23)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="532" width="2" height="15" fill="rgb(219,130,22)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.24%)</title><rect x="10" y="548" width="2" height="15" fill="rgb(217,41,16)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="564" width="2" height="15" fill="rgb(220,58,14)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (6 samples, 0.24%)</title><rect x="10" y="580" width="2" height="15" fill="rgb(211,186,10)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="596" width="2" height="15" fill="rgb(208,73,14)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="612" width="2" height="15" fill="rgb(247,52,0)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="628" width="2" height="15" fill="rgb(231,45,35)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="644" width="2" height="15" fill="rgb(252,87,41)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="660" width="2" height="15" fill="rgb(229,74,45)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="676" width="2" height="15" fill="rgb(216,143,28)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.24%)</title><rect x="10" y="692" width="2" height="15" fill="rgb(213,28,47)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="708" width="2" height="15" fill="rgb(237,174,25)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (6 samples, 0.24%)</title><rect x="10" y="724" width="2" height="15" fill="rgb(205,8,17)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="740" width="2" height="15" fill="rgb(237,52,41)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="756" width="2" height="15" fill="rgb(239,13,54)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="772" width="2" height="15" fill="rgb(238,119,1)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.24%)</title><rect x="10" y="788" width="2" height="15" fill="rgb(246,67,35)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="10" y="804" width="2" height="15" fill="rgb(205,11,53)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (6 samples, 0.24%)</title><rect x="10" y="820" width="2" height="15" fill="rgb(240,194,39)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (6 samples, 0.24%)</title><rect x="10" y="836" width="2" height="15" fill="rgb(226,85,34)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (6 samples, 0.24%)</title><rect x="10" y="852" width="2" height="15" fill="rgb(215,157,28)"/><text x="13.00" y="862.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.32%)</title><rect x="10" y="196" width="3" height="15" fill="rgb(243,112,12)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.32%)</title><rect x="10" y="212" width="3" height="15" fill="rgb(219,158,9)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.32%)</title><rect x="10" y="228" width="3" height="15" fill="rgb(253,93,42)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.32%)</title><rect x="10" y="244" width="3" height="15" fill="rgb(246,171,31)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.32%)</title><rect x="10" y="260" width="3" height="15" fill="rgb(252,228,41)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.32%)</title><rect x="10" y="276" width="3" height="15" fill="rgb(234,222,4)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 0.16%)</title><rect x="13" y="340" width="2" height="15" fill="rgb(241,98,26)"/><text x="16.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.16%)</title><rect x="13" y="356" width="2" height="15" fill="rgb(244,54,54)"/><text x="16.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.16%)</title><rect x="13" y="372" width="2" height="15" fill="rgb(211,207,52)"/><text x="16.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.16%)</title><rect x="13" y="388" width="2" height="15" fill="rgb(226,30,28)"/><text x="16.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.16%)</title><rect x="13" y="404" width="2" height="15" fill="rgb(237,8,46)"/><text x="16.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.16%)</title><rect x="13" y="420" width="2" height="15" fill="rgb(235,21,13)"/><text x="16.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (4 samples, 0.16%)</title><rect x="13" y="436" width="2" height="15" fill="rgb(221,18,22)"/><text x="16.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.16%)</title><rect x="13" y="452" width="2" height="15" fill="rgb(251,152,13)"/><text x="16.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.16%)</title><rect x="13" y="468" width="2" height="15" fill="rgb(242,27,42)"/><text x="16.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="484" width="1" height="15" fill="rgb(206,59,27)"/><text x="17.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.12%)</title><rect x="14" y="500" width="1" height="15" fill="rgb(225,228,1)"/><text x="17.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="516" width="1" height="15" fill="rgb(224,131,29)"/><text x="17.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.12%)</title><rect x="14" y="532" width="1" height="15" fill="rgb(230,154,19)"/><text x="17.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="548" width="1" height="15" fill="rgb(250,85,35)"/><text x="17.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="564" width="1" height="15" fill="rgb(234,179,20)"/><text x="17.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="580" width="1" height="15" fill="rgb(220,19,33)"/><text x="17.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.12%)</title><rect x="14" y="596" width="1" height="15" fill="rgb(215,44,34)"/><text x="17.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="612" width="1" height="15" fill="rgb(228,16,30)"/><text x="17.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (3 samples, 0.12%)</title><rect x="14" y="628" width="1" height="15" fill="rgb(245,33,33)"/><text x="17.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="644" width="1" height="15" fill="rgb(234,147,13)"/><text x="17.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="660" width="1" height="15" fill="rgb(208,100,43)"/><text x="17.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="676" width="1" height="15" fill="rgb(215,28,24)"/><text x="17.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.12%)</title><rect x="14" y="692" width="1" height="15" fill="rgb(239,31,33)"/><text x="17.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="708" width="1" height="15" fill="rgb(220,63,36)"/><text x="17.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (3 samples, 0.12%)</title><rect x="14" y="724" width="1" height="15" fill="rgb(239,7,4)"/><text x="17.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="740" width="1" height="15" fill="rgb(206,116,4)"/><text x="17.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="756" width="1" height="15" fill="rgb(220,218,21)"/><text x="17.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="772" width="1" height="15" fill="rgb(236,186,6)"/><text x="17.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.12%)</title><rect x="14" y="788" width="1" height="15" fill="rgb(229,78,1)"/><text x="17.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="804" width="1" height="15" fill="rgb(239,163,5)"/><text x="17.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (3 samples, 0.12%)</title><rect x="14" y="820" width="1" height="15" fill="rgb(217,12,9)"/><text x="17.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="836" width="1" height="15" fill="rgb(223,44,50)"/><text x="17.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="852" width="1" height="15" fill="rgb(216,89,16)"/><text x="17.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="868" width="1" height="15" fill="rgb(214,27,23)"/><text x="17.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.12%)</title><rect x="14" y="884" width="1" height="15" fill="rgb(213,75,5)"/><text x="17.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="900" width="1" height="15" fill="rgb(253,94,49)"/><text x="17.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (3 samples, 0.12%)</title><rect x="14" y="916" width="1" height="15" fill="rgb(230,104,48)"/><text x="17.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="932" width="1" height="15" fill="rgb(223,203,10)"/><text x="17.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="948" width="1" height="15" fill="rgb(224,109,42)"/><text x="17.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="964" width="1" height="15" fill="rgb(215,219,31)"/><text x="17.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.12%)</title><rect x="14" y="980" width="1" height="15" fill="rgb(224,144,22)"/><text x="17.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.12%)</title><rect x="14" y="996" width="1" height="15" fill="rgb(248,73,52)"/><text x="17.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (3 samples, 0.12%)</title><rect x="14" y="1012" width="1" height="15" fill="rgb(239,37,3)"/><text x="17.00" y="1022.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (6 samples, 0.24%)</title><rect x="13" y="244" width="3" height="15" fill="rgb(233,168,35)"/><text x="16.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="13" y="260" width="3" height="15" fill="rgb(211,35,41)"/><text x="16.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="13" y="276" width="3" height="15" fill="rgb(218,30,36)"/><text x="16.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="13" y="292" width="3" height="15" fill="rgb(217,81,25)"/><text x="16.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.24%)</title><rect x="13" y="308" width="3" height="15" fill="rgb(209,90,34)"/><text x="16.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.24%)</title><rect x="13" y="324" width="3" height="15" fill="rgb(246,52,18)"/><text x="16.00" y="334.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.59%)</title><rect x="10" y="68" width="6" height="15" fill="rgb(245,140,16)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.59%)</title><rect x="10" y="84" width="6" height="15" fill="rgb(244,123,26)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.59%)</title><rect x="10" y="100" width="6" height="15" fill="rgb(245,171,23)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (15 samples, 0.59%)</title><rect x="10" y="116" width="6" height="15" fill="rgb(231,147,1)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.59%)</title><rect x="10" y="132" width="6" height="15" fill="rgb(227,153,26)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py) (15 samples, 0.59%)</title><rect x="10" y="148" width="6" height="15" fill="rgb(226,142,11)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.59%)</title><rect x="10" y="164" width="6" height="15" fill="rgb(240,60,11)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.59%)</title><rect x="10" y="180" width="6" height="15" fill="rgb(233,64,34)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.28%)</title><rect x="13" y="196" width="3" height="15" fill="rgb(222,39,48)"/><text x="16.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.28%)</title><rect x="13" y="212" width="3" height="15" fill="rgb(226,25,9)"/><text x="16.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.28%)</title><rect x="13" y="228" width="3" height="15" fill="rgb(229,0,44)"/><text x="16.00" y="238.50"></text></g><g><title>profile0_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (3 samples, 0.12%)</title><rect x="16" y="68" width="2" height="15" fill="rgb(221,142,51)"/><text x="19.00" y="78.50"></text></g><g><title>setup_profile0 (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (3 samples, 0.12%)</title><rect x="16" y="84" width="2" height="15" fill="rgb(241,56,36)"/><text x="19.00" y="94.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="23" y="388" width="2" height="15" fill="rgb(231,129,52)"/><text x="26.00" y="398.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="24" y="404" width="1" height="15" fill="rgb(208,127,25)"/><text x="27.00" y="414.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.24%)</title><rect x="25" y="388" width="3" height="15" fill="rgb(250,27,0)"/><text x="28.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.24%)</title><rect x="25" y="404" width="3" height="15" fill="rgb(246,107,25)"/><text x="28.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkIterFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="36" y="484" width="1" height="15" fill="rgb(208,118,35)"/><text x="39.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.24%)</title><rect x="35" y="452" width="2" height="15" fill="rgb(207,196,54)"/><text x="38.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.20%)</title><rect x="35" y="468" width="2" height="15" fill="rgb(238,15,24)"/><text x="38.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="37" y="452" width="2" height="15" fill="rgb(245,43,54)"/><text x="40.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (21 samples, 0.83%)</title><rect x="31" y="436" width="10" height="15" fill="rgb(220,163,39)"/><text x="34.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::InsertFreeChunkIntoBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="43" y="516" width="1" height="15" fill="rgb(212,94,13)"/><text x="46.00" y="526.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.28%)</title><rect x="42" y="484" width="3" height="15" fill="rgb(213,184,35)"/><text x="45.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.28%)</title><rect x="42" y="500" width="3" height="15" fill="rgb(244,161,28)"/><text x="45.00" y="510.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="44" y="516" width="1" height="15" fill="rgb(216,221,20)"/><text x="47.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.39%)</title><rect x="41" y="436" width="5" height="15" fill="rgb(227,26,35)"/><text x="44.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.39%)</title><rect x="41" y="452" width="5" height="15" fill="rgb(247,219,19)"/><text x="44.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.35%)</title><rect x="42" y="468" width="4" height="15" fill="rgb(247,150,31)"/><text x="45.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="49" y="436" width="1" height="15" fill="rgb(214,131,13)"/><text x="52.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.20%)</title><rect x="50" y="436" width="2" height="15" fill="rgb(219,14,18)"/><text x="53.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="51" y="452" width="1" height="15" fill="rgb(228,193,30)"/><text x="54.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.20%)</title><rect x="58" y="468" width="3" height="15" fill="rgb(206,184,10)"/><text x="61.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.20%)</title><rect x="58" y="484" width="3" height="15" fill="rgb(224,163,40)"/><text x="61.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="59" y="500" width="2" height="15" fill="rgb(235,161,36)"/><text x="62.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="59" y="516" width="2" height="15" fill="rgb(221,130,8)"/><text x="62.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="59" y="532" width="2" height="15" fill="rgb(241,103,21)"/><text x="62.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="59" y="548" width="2" height="15" fill="rgb(236,41,46)"/><text x="62.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="59" y="564" width="2" height="15" fill="rgb(240,209,20)"/><text x="62.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.12%)</title><rect x="59" y="580" width="2" height="15" fill="rgb(249,63,2)"/><text x="62.00" y="590.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (31 samples, 1.22%)</title><rect x="52" y="436" width="15" height="15" fill="rgb(227,43,53)"/><text x="55.00" y="446.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (29 samples, 1.14%)</title><rect x="53" y="452" width="14" height="15" fill="rgb(205,135,24)"/><text x="56.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.32%)</title><rect x="63" y="468" width="4" height="15" fill="rgb(240,179,49)"/><text x="66.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (7 samples, 0.28%)</title><rect x="63" y="484" width="4" height="15" fill="rgb(221,215,42)"/><text x="66.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.28%)</title><rect x="63" y="500" width="4" height="15" fill="rgb(245,144,53)"/><text x="66.00" y="510.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="68" y="468" width="1" height="15" fill="rgb(233,51,33)"/><text x="71.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2247] (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="69" y="468" width="2" height="15" fill="rgb(209,67,30)"/><text x="72.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.32%)</title><rect x="72" y="468" width="4" height="15" fill="rgb(216,113,1)"/><text x="75.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.32%)</title><rect x="72" y="484" width="4" height="15" fill="rgb(243,171,34)"/><text x="75.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.32%)</title><rect x="72" y="500" width="4" height="15" fill="rgb(208,29,37)"/><text x="75.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.28%)</title><rect x="73" y="516" width="3" height="15" fill="rgb(252,63,9)"/><text x="76.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="74" y="532" width="2" height="15" fill="rgb(214,22,42)"/><text x="77.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.16%)</title><rect x="74" y="548" width="2" height="15" fill="rgb(227,100,4)"/><text x="77.00" y="558.50"></text></g><g><title>0x7fa60e2eec38 (libc-2.29.so) (3 samples, 0.12%)</title><rect x="80" y="548" width="1" height="15" fill="rgb(253,205,19)"/><text x="83.00" y="558.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (112 samples, 4.41%)</title><rect x="29" y="420" width="53" height="15" fill="rgb(216,71,12)"/><text x="32.00" y="430.50">onnxr..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (31 samples, 1.22%)</title><rect x="67" y="436" width="15" height="15" fill="rgb(221,101,42)"/><text x="70.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (30 samples, 1.18%)</title><rect x="68" y="452" width="14" height="15" fill="rgb(220,158,30)"/><text x="71.00" y="462.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.47%)</title><rect x="76" y="468" width="6" height="15" fill="rgb(240,4,22)"/><text x="79.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.47%)</title><rect x="76" y="484" width="6" height="15" fill="rgb(254,211,54)"/><text x="79.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.20%)</title><rect x="79" y="500" width="3" height="15" fill="rgb(222,74,25)"/><text x="82.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (5 samples, 0.20%)</title><rect x="79" y="516" width="3" height="15" fill="rgb(235,74,41)"/><text x="82.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.20%)</title><rect x="79" y="532" width="3" height="15" fill="rgb(210,216,38)"/><text x="82.00" y="542.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (130 samples, 5.12%)</title><rect x="22" y="356" width="60" height="15" fill="rgb(223,64,37)"/><text x="25.00" y="366.50">onnxru..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (130 samples, 5.12%)</title><rect x="22" y="372" width="60" height="15" fill="rgb(219,64,10)"/><text x="25.00" y="382.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (115 samples, 4.53%)</title><rect x="29" y="388" width="53" height="15" fill="rgb(231,150,30)"/><text x="32.00" y="398.50">onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (115 samples, 4.53%)</title><rect x="29" y="404" width="53" height="15" fill="rgb(244,45,28)"/><text x="32.00" y="414.50">onnxr..</text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (132 samples, 5.20%)</title><rect x="22" y="340" width="61" height="15" fill="rgb(250,117,2)"/><text x="25.00" y="350.50">onnxru..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (141 samples, 5.56%)</title><rect x="18" y="68" width="65" height="15" fill="rgb(238,174,21)"/><text x="21.00" y="78.50">profile..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (141 samples, 5.56%)</title><rect x="18" y="84" width="65" height="15" fill="rgb(244,94,46)"/><text x="21.00" y="94.50">setup_p..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (141 samples, 5.56%)</title><rect x="18" y="100" width="65" height="15" fill="rgb(209,109,37)"/><text x="21.00" y="110.50">profile..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (141 samples, 5.56%)</title><rect x="18" y="116" width="65" height="15" fill="rgb(210,90,6)"/><text x="21.00" y="126.50">time_pr..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (141 samples, 5.56%)</title><rect x="18" y="132" width="65" height="15" fill="rgb(237,174,49)"/><text x="21.00" y="142.50">&lt;lambda..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (141 samples, 5.56%)</title><rect x="18" y="148" width="65" height="15" fill="rgb(234,124,35)"/><text x="21.00" y="158.50">run (ml..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (141 samples, 5.56%)</title><rect x="18" y="164" width="65" height="15" fill="rgb(216,150,33)"/><text x="21.00" y="174.50">_run_wh..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (139 samples, 5.48%)</title><rect x="19" y="180" width="64" height="15" fill="rgb(208,108,18)"/><text x="22.00" y="190.50">run (ml..</text></g><g><title>run (onnxruntime/capi/session.py) (138 samples, 5.44%)</title><rect x="19" y="196" width="64" height="15" fill="rgb(233,141,22)"/><text x="22.00" y="206.50">run (on..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 5.36%)</title><rect x="20" y="212" width="63" height="15" fill="rgb(238,99,30)"/><text x="23.00" y="222.50">pybind..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 5.36%)</title><rect x="20" y="228" width="63" height="15" fill="rgb(221,125,3)"/><text x="23.00" y="238.50">void p..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 5.36%)</title><rect x="20" y="244" width="63" height="15" fill="rgb(222,20,48)"/><text x="23.00" y="254.50">onnxru..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 5.36%)</title><rect x="20" y="260" width="63" height="15" fill="rgb(214,18,20)"/><text x="23.00" y="270.50">onnxru..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 5.36%)</title><rect x="20" y="276" width="63" height="15" fill="rgb(207,216,42)"/><text x="23.00" y="286.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 5.36%)</title><rect x="20" y="292" width="63" height="15" fill="rgb(241,11,1)"/><text x="23.00" y="302.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 5.36%)</title><rect x="20" y="308" width="63" height="15" fill="rgb(220,139,24)"/><text x="23.00" y="318.50">onnxru..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 5.36%)</title><rect x="20" y="324" width="63" height="15" fill="rgb(218,193,35)"/><text x="23.00" y="334.50">onnxru..</text></g><g><title>PyArray_MapIterNew (mapping.c) (4 samples, 0.16%)</title><rect x="96" y="244" width="2" height="15" fill="rgb(217,130,50)"/><text x="99.00" y="254.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.12%)</title><rect x="97" y="260" width="1" height="15" fill="rgb(222,125,3)"/><text x="100.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (5 samples, 0.20%)</title><rect x="96" y="212" width="3" height="15" fill="rgb(242,162,8)"/><text x="99.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (5 samples, 0.20%)</title><rect x="96" y="228" width="3" height="15" fill="rgb(210,28,6)"/><text x="99.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (6 samples, 0.24%)</title><rect x="99" y="212" width="3" height="15" fill="rgb(252,124,51)"/><text x="102.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;) (4 samples, 0.16%)</title><rect x="100" y="228" width="2" height="15" fill="rgb(214,116,13)"/><text x="103.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.16%)</title><rect x="100" y="244" width="2" height="15" fill="rgb(229,68,1)"/><text x="103.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py) (4 samples, 0.16%)</title><rect x="100" y="260" width="2" height="15" fill="rgb(205,1,40)"/><text x="103.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (3 samples, 0.12%)</title><rect x="101" y="276" width="1" height="15" fill="rgb(236,49,47)"/><text x="104.00" y="286.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (12 samples, 0.47%)</title><rect x="175" y="228" width="6" height="15" fill="rgb(232,135,39)"/><text x="178.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (7 samples, 0.28%)</title><rect x="182" y="228" width="3" height="15" fill="rgb(247,188,10)"/><text x="185.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (4 samples, 0.16%)</title><rect x="183" y="244" width="2" height="15" fill="rgb(223,183,23)"/><text x="186.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (4 samples, 0.16%)</title><rect x="183" y="260" width="2" height="15" fill="rgb(241,133,5)"/><text x="186.00" y="270.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (3 samples, 0.12%)</title><rect x="186" y="260" width="1" height="15" fill="rgb(234,97,12)"/><text x="189.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (3 samples, 0.12%)</title><rect x="186" y="276" width="1" height="15" fill="rgb(234,30,45)"/><text x="189.00" y="286.50"></text></g><g><title>get_view_from_index (mapping.c) (4 samples, 0.16%)</title><rect x="186" y="244" width="2" height="15" fill="rgb(222,182,40)"/><text x="189.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (14 samples, 0.55%)</title><rect x="185" y="228" width="6" height="15" fill="rgb(250,104,43)"/><text x="188.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (8 samples, 0.32%)</title><rect x="188" y="244" width="3" height="15" fill="rgb(220,209,34)"/><text x="191.00" y="254.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (3 samples, 0.12%)</title><rect x="251" y="292" width="2" height="15" fill="rgb(240,136,5)"/><text x="254.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (10 samples, 0.39%)</title><rect x="255" y="308" width="5" height="15" fill="rgb(208,27,10)"/><text x="258.00" y="318.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (6 samples, 0.24%)</title><rect x="257" y="324" width="3" height="15" fill="rgb(231,181,20)"/><text x="260.00" y="334.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (6 samples, 0.24%)</title><rect x="257" y="340" width="3" height="15" fill="rgb(239,96,9)"/><text x="260.00" y="350.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (16 samples, 0.63%)</title><rect x="253" y="292" width="7" height="15" fill="rgb(232,8,0)"/><text x="256.00" y="302.50"></text></g><g><title>array_alloc (arrayobject.c) (4 samples, 0.16%)</title><rect x="264" y="340" width="2" height="15" fill="rgb(209,204,43)"/><text x="267.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (12 samples, 0.47%)</title><rect x="261" y="324" width="6" height="15" fill="rgb(225,66,22)"/><text x="264.00" y="334.50"></text></g><g><title>array_reshape (methods.c) (42 samples, 1.65%)</title><rect x="248" y="276" width="20" height="15" fill="rgb(213,226,44)"/><text x="251.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (16 samples, 0.63%)</title><rect x="260" y="292" width="8" height="15" fill="rgb(245,17,25)"/><text x="263.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (16 samples, 0.63%)</title><rect x="260" y="308" width="8" height="15" fill="rgb(213,139,25)"/><text x="263.00" y="318.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (133 samples, 5.24%)</title><rect x="213" y="260" width="62" height="15" fill="rgb(219,27,5)"/><text x="216.00" y="270.50">expand..</text></g><g><title>asanyarray (numpy/core/_asarray.py) (16 samples, 0.63%)</title><rect x="268" y="276" width="7" height="15" fill="rgb(243,59,50)"/><text x="271.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 0.16%)</title><rect x="273" y="292" width="2" height="15" fill="rgb(222,151,47)"/><text x="276.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (182 samples, 7.17%)</title><rect x="191" y="228" width="85" height="15" fill="rgb(231,10,19)"/><text x="194.00" y="238.50">expand_dim..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (158 samples, 6.23%)</title><rect x="202" y="244" width="74" height="15" fill="rgb(240,138,2)"/><text x="205.00" y="254.50">array_im..</text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (21 samples, 0.83%)</title><rect x="375" y="260" width="10" height="15" fill="rgb(254,72,16)"/><text x="378.00" y="270.50"></text></g><g><title>0x7fa60e30e124 (libc-2.29.so) (3 samples, 0.12%)</title><rect x="612" y="276" width="1" height="15" fill="rgb(243,219,39)"/><text x="615.00" y="286.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (25 samples, 0.99%)</title><rect x="614" y="276" width="12" height="15" fill="rgb(251,117,45)"/><text x="617.00" y="286.50"></text></g><g><title>array_descr_get (getset.c) (3 samples, 0.12%)</title><rect x="658" y="292" width="1" height="15" fill="rgb(214,193,51)"/><text x="661.00" y="302.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (8 samples, 0.32%)</title><rect x="659" y="292" width="4" height="15" fill="rgb(248,186,41)"/><text x="662.00" y="302.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (4 samples, 0.16%)</title><rect x="699" y="340" width="2" height="15" fill="rgb(248,164,17)"/><text x="702.00" y="350.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (9 samples, 0.35%)</title><rect x="704" y="388" width="4" height="15" fill="rgb(249,99,37)"/><text x="707.00" y="398.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (12 samples, 0.47%)</title><rect x="703" y="356" width="5" height="15" fill="rgb(207,3,8)"/><text x="706.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (11 samples, 0.43%)</title><rect x="703" y="372" width="5" height="15" fill="rgb(239,142,50)"/><text x="706.00" y="382.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (6 samples, 0.24%)</title><rect x="709" y="356" width="3" height="15" fill="rgb(228,103,32)"/><text x="712.00" y="366.50"></text></g><g><title>_find_array_method (ufunc_object.c) (3 samples, 0.12%)</title><rect x="710" y="372" width="2" height="15" fill="rgb(241,151,5)"/><text x="713.00" y="382.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (3 samples, 0.12%)</title><rect x="713" y="356" width="1" height="15" fill="rgb(246,187,2)"/><text x="716.00" y="366.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (4 samples, 0.16%)</title><rect x="715" y="372" width="2" height="15" fill="rgb(245,20,23)"/><text x="718.00" y="382.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (11 samples, 0.43%)</title><rect x="725" y="420" width="6" height="15" fill="rgb(249,170,29)"/><text x="728.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (8 samples, 0.32%)</title><rect x="727" y="436" width="4" height="15" fill="rgb(230,59,3)"/><text x="730.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (8 samples, 0.32%)</title><rect x="727" y="452" width="4" height="15" fill="rgb(205,188,39)"/><text x="730.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (21 samples, 0.83%)</title><rect x="722" y="404" width="10" height="15" fill="rgb(221,5,50)"/><text x="725.00" y="414.50"></text></g><g><title>npyiter_replace_axisdata (nditer_constr.c) (3 samples, 0.12%)</title><rect x="731" y="420" width="1" height="15" fill="rgb(244,77,23)"/><text x="734.00" y="430.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c) (3 samples, 0.12%)</title><rect x="735" y="404" width="1" height="15" fill="rgb(248,202,20)"/><text x="738.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (5 samples, 0.20%)</title><rect x="737" y="404" width="2" height="15" fill="rgb(209,206,12)"/><text x="740.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (51 samples, 2.01%)</title><rect x="719" y="388" width="23" height="15" fill="rgb(231,165,51)"/><text x="722.00" y="398.50">N..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (6 samples, 0.24%)</title><rect x="739" y="404" width="3" height="15" fill="rgb(214,29,51)"/><text x="742.00" y="414.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (4 samples, 0.16%)</title><rect x="740" y="420" width="2" height="15" fill="rgb(253,224,12)"/><text x="743.00" y="430.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (7 samples, 0.28%)</title><rect x="742" y="388" width="3" height="15" fill="rgb(209,182,24)"/><text x="745.00" y="398.50"></text></g><g><title>0x7fa60e2ed902 (libc-2.29.so) (3 samples, 0.12%)</title><rect x="744" y="404" width="1" height="15" fill="rgb(252,122,6)"/><text x="747.00" y="414.50"></text></g><g><title>NpyIter_GetIterNext (nditer_templ.c.src) (3 samples, 0.12%)</title><rect x="747" y="388" width="1" height="15" fill="rgb(212,33,48)"/><text x="750.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (4 samples, 0.16%)</title><rect x="751" y="404" width="2" height="15" fill="rgb(250,213,19)"/><text x="754.00" y="414.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (8 samples, 0.32%)</title><rect x="750" y="388" width="3" height="15" fill="rgb(229,117,41)"/><text x="753.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (87 samples, 3.43%)</title><rect x="714" y="356" width="41" height="15" fill="rgb(253,174,24)"/><text x="717.00" y="366.50">exe..</text></g><g><title>iterator_loop (ufunc_object.c) (81 samples, 3.19%)</title><rect x="717" y="372" width="38" height="15" fill="rgb(253,162,43)"/><text x="720.00" y="382.50">ite..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (3 samples, 0.12%)</title><rect x="753" y="388" width="2" height="15" fill="rgb(209,198,4)"/><text x="756.00" y="398.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (3 samples, 0.12%)</title><rect x="753" y="404" width="2" height="15" fill="rgb(207,204,53)"/><text x="756.00" y="414.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.12%)</title><rect x="755" y="356" width="1" height="15" fill="rgb(254,20,22)"/><text x="758.00" y="366.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (3 samples, 0.12%)</title><rect x="756" y="356" width="2" height="15" fill="rgb(237,41,13)"/><text x="759.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (125 samples, 4.93%)</title><rect x="701" y="340" width="58" height="15" fill="rgb(210,47,41)"/><text x="704.00" y="350.50">PyUFun..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (4 samples, 0.16%)</title><rect x="758" y="356" width="1" height="15" fill="rgb(235,97,5)"/><text x="761.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (3 samples, 0.12%)</title><rect x="758" y="372" width="1" height="15" fill="rgb(211,58,53)"/><text x="761.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (154 samples, 6.07%)</title><rect x="688" y="308" width="72" height="15" fill="rgb(224,19,31)"/><text x="691.00" y="318.50">_run (ml..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (134 samples, 5.28%)</title><rect x="698" y="324" width="62" height="15" fill="rgb(243,14,42)"/><text x="701.00" y="334.50">ufunc_..</text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (3 samples, 0.12%)</title><rect x="770" y="372" width="2" height="15" fill="rgb(215,226,39)"/><text x="773.00" y="382.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (5 samples, 0.20%)</title><rect x="779" y="404" width="3" height="15" fill="rgb(226,0,37)"/><text x="782.00" y="414.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (12 samples, 0.47%)</title><rect x="778" y="388" width="6" height="15" fill="rgb(216,149,33)"/><text x="781.00" y="398.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c) (4 samples, 0.16%)</title><rect x="782" y="404" width="2" height="15" fill="rgb(246,83,14)"/><text x="785.00" y="414.50"></text></g><g><title>PyArray_GetStridedCopyFn (lowlevel_strided_loops.c.src) (4 samples, 0.16%)</title><rect x="782" y="420" width="2" height="15" fill="rgb(221,84,14)"/><text x="785.00" y="430.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (11 samples, 0.43%)</title><rect x="784" y="388" width="5" height="15" fill="rgb(216,224,37)"/><text x="787.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (4 samples, 0.16%)</title><rect x="787" y="404" width="2" height="15" fill="rgb(253,101,3)"/><text x="790.00" y="414.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (9 samples, 0.35%)</title><rect x="789" y="388" width="4" height="15" fill="rgb(237,109,53)"/><text x="792.00" y="398.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (6 samples, 0.24%)</title><rect x="795" y="388" width="3" height="15" fill="rgb(254,146,52)"/><text x="798.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (66 samples, 2.60%)</title><rect x="770" y="356" width="30" height="15" fill="rgb(254,150,13)"/><text x="773.00" y="366.50">Py..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (59 samples, 2.32%)</title><rect x="773" y="372" width="27" height="15" fill="rgb(229,67,26)"/><text x="776.00" y="382.50">r..</text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (4 samples, 0.16%)</title><rect x="802" y="420" width="2" height="15" fill="rgb(224,66,43)"/><text x="805.00" y="430.50"></text></g><g><title>array_alloc (arrayobject.c) (3 samples, 0.12%)</title><rect x="804" y="420" width="1" height="15" fill="rgb(231,143,19)"/><text x="807.00" y="430.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (101 samples, 3.98%)</title><rect x="760" y="308" width="47" height="15" fill="rgb(240,222,17)"/><text x="763.00" y="318.50">_run..</text></g><g><title>array_copy (methods.c) (85 samples, 3.35%)</title><rect x="767" y="324" width="40" height="15" fill="rgb(253,216,39)"/><text x="770.00" y="334.50">arr..</text></g><g><title>PyArray_NewCopy (convert.c) (81 samples, 3.19%)</title><rect x="769" y="340" width="38" height="15" fill="rgb(237,167,50)"/><text x="772.00" y="350.50">PyA..</text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (14 samples, 0.55%)</title><rect x="800" y="356" width="7" height="15" fill="rgb(248,199,18)"/><text x="803.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (12 samples, 0.47%)</title><rect x="801" y="372" width="6" height="15" fill="rgb(253,5,27)"/><text x="804.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (12 samples, 0.47%)</title><rect x="801" y="388" width="6" height="15" fill="rgb(219,219,17)"/><text x="804.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (12 samples, 0.47%)</title><rect x="801" y="404" width="6" height="15" fill="rgb(250,118,5)"/><text x="804.00" y="414.50"></text></g><g><title>array_dealloc (arrayobject.c) (14 samples, 0.55%)</title><rect x="838" y="324" width="6" height="15" fill="rgb(248,211,8)"/><text x="841.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (12 samples, 0.47%)</title><rect x="838" y="340" width="6" height="15" fill="rgb(233,9,18)"/><text x="841.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (10 samples, 0.39%)</title><rect x="839" y="356" width="5" height="15" fill="rgb(216,128,12)"/><text x="842.00" y="366.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py) (5 samples, 0.20%)</title><rect x="860" y="340" width="3" height="15" fill="rgb(209,209,23)"/><text x="863.00" y="350.50"></text></g><g><title>0x7fa60e3cc74a (libc-2.29.so) (4 samples, 0.16%)</title><rect x="895" y="372" width="2" height="15" fill="rgb(215,35,6)"/><text x="898.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (21 samples, 0.83%)</title><rect x="923" y="388" width="10" height="15" fill="rgb(216,166,28)"/><text x="926.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (29 samples, 1.14%)</title><rect x="935" y="404" width="14" height="15" fill="rgb(210,117,37)"/><text x="938.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (29 samples, 1.14%)</title><rect x="935" y="420" width="14" height="15" fill="rgb(219,104,31)"/><text x="938.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (26 samples, 1.02%)</title><rect x="937" y="436" width="12" height="15" fill="rgb(247,184,16)"/><text x="940.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (7 samples, 0.28%)</title><rect x="945" y="452" width="4" height="15" fill="rgb(247,93,3)"/><text x="948.00" y="462.50"></text></g><g><title>PyArray_DescrConverter2 (descriptor.c) (4 samples, 0.16%)</title><rect x="964" y="420" width="2" height="15" fill="rgb(234,100,12)"/><text x="967.00" y="430.50"></text></g><g><title>PyArray_OutputConverter (conversion_utils.c) (3 samples, 0.12%)</title><rect x="967" y="420" width="1" height="15" fill="rgb(214,22,5)"/><text x="970.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (5 samples, 0.20%)</title><rect x="968" y="420" width="3" height="15" fill="rgb(234,124,49)"/><text x="971.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (5 samples, 0.20%)</title><rect x="968" y="436" width="3" height="15" fill="rgb(205,21,44)"/><text x="971.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (5 samples, 0.20%)</title><rect x="968" y="452" width="3" height="15" fill="rgb(206,169,53)"/><text x="971.00" y="462.50"></text></g><g><title>npyiter_check_global_flags (nditer_constr.c) (3 samples, 0.12%)</title><rect x="979" y="468" width="2" height="15" fill="rgb(231,128,11)"/><text x="982.00" y="478.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c) (4 samples, 0.16%)</title><rect x="981" y="468" width="2" height="15" fill="rgb(232,160,50)"/><text x="984.00" y="478.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (8 samples, 0.32%)</title><rect x="983" y="468" width="3" height="15" fill="rgb(215,166,39)"/><text x="986.00" y="478.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (12 samples, 0.47%)</title><rect x="986" y="468" width="6" height="15" fill="rgb(254,202,31)"/><text x="989.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (51 samples, 2.01%)</title><rect x="974" y="452" width="23" height="15" fill="rgb(224,19,8)"/><text x="977.00" y="462.50">N..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (10 samples, 0.39%)</title><rect x="993" y="468" width="4" height="15" fill="rgb(247,197,50)"/><text x="996.00" y="478.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (6 samples, 0.24%)</title><rect x="995" y="484" width="2" height="15" fill="rgb(250,134,30)"/><text x="998.00" y="494.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (8 samples, 0.32%)</title><rect x="997" y="452" width="4" height="15" fill="rgb(254,131,10)"/><text x="1000.00" y="462.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (6 samples, 0.24%)</title><rect x="1004" y="516" width="2" height="15" fill="rgb(214,30,1)"/><text x="1007.00" y="526.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (3 samples, 0.12%)</title><rect x="1005" y="532" width="1" height="15" fill="rgb(213,175,9)"/><text x="1008.00" y="542.50"></text></g><g><title>npy_alloc_cache (alloc.c) (12 samples, 0.47%)</title><rect x="1007" y="516" width="5" height="15" fill="rgb(226,222,7)"/><text x="1010.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (11 samples, 0.43%)</title><rect x="1007" y="532" width="5" height="15" fill="rgb(207,70,51)"/><text x="1010.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (7 samples, 0.28%)</title><rect x="1009" y="548" width="3" height="15" fill="rgb(242,90,20)"/><text x="1012.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.28%)</title><rect x="1009" y="564" width="3" height="15" fill="rgb(253,110,54)"/><text x="1012.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (28 samples, 1.10%)</title><rect x="1003" y="484" width="13" height="15" fill="rgb(252,195,16)"/><text x="1006.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (28 samples, 1.10%)</title><rect x="1003" y="500" width="13" height="15" fill="rgb(230,107,0)"/><text x="1006.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (8 samples, 0.32%)</title><rect x="1012" y="516" width="4" height="15" fill="rgb(254,15,13)"/><text x="1015.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (8 samples, 0.32%)</title><rect x="1012" y="532" width="4" height="15" fill="rgb(223,31,50)"/><text x="1015.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.28%)</title><rect x="1013" y="548" width="3" height="15" fill="rgb(251,147,6)"/><text x="1016.00" y="558.50"></text></g><g><title>qsort (libc-2.29.so) (3 samples, 0.12%)</title><rect x="1017" y="484" width="1" height="15" fill="rgb(210,161,6)"/><text x="1020.00" y="494.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (39 samples, 1.54%)</title><rect x="1002" y="452" width="18" height="15" fill="rgb(243,158,50)"/><text x="1005.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (39 samples, 1.54%)</title><rect x="1002" y="468" width="18" height="15" fill="rgb(219,190,54)"/><text x="1005.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (5 samples, 0.20%)</title><rect x="1018" y="484" width="2" height="15" fill="rgb(246,208,11)"/><text x="1021.00" y="494.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.12%)</title><rect x="1019" y="500" width="1" height="15" fill="rgb(252,63,3)"/><text x="1022.00" y="510.50"></text></g><g><title>can_cast_scalar_to (convert_datatype.c) (4 samples, 0.16%)</title><rect x="1024" y="484" width="2" height="15" fill="rgb(240,225,51)"/><text x="1027.00" y="494.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (3 samples, 0.12%)</title><rect x="1029" y="500" width="1" height="15" fill="rgb(229,175,5)"/><text x="1032.00" y="510.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c) (5 samples, 0.20%)</title><rect x="1030" y="500" width="2" height="15" fill="rgb(245,68,19)"/><text x="1033.00" y="510.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (7 samples, 0.28%)</title><rect x="1032" y="500" width="4" height="15" fill="rgb(237,17,15)"/><text x="1035.00" y="510.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (7 samples, 0.28%)</title><rect x="1032" y="516" width="4" height="15" fill="rgb(249,151,19)"/><text x="1035.00" y="526.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (34 samples, 1.34%)</title><rect x="1020" y="452" width="16" height="15" fill="rgb(231,90,25)"/><text x="1023.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (29 samples, 1.14%)</title><rect x="1023" y="468" width="13" height="15" fill="rgb(248,83,46)"/><text x="1026.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (21 samples, 0.83%)</title><rect x="1026" y="484" width="10" height="15" fill="rgb(230,43,38)"/><text x="1029.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src) (4 samples, 0.16%)</title><rect x="1038" y="468" width="2" height="15" fill="rgb(237,25,14)"/><text x="1041.00" y="478.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (5 samples, 0.20%)</title><rect x="1040" y="468" width="2" height="15" fill="rgb(230,76,50)"/><text x="1043.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (156 samples, 6.15%)</title><rect x="972" y="436" width="72" height="15" fill="rgb(226,89,3)"/><text x="975.00" y="446.50">PyUFunc_..</text></g><g><title>reduce_loop (ufunc_object.c) (15 samples, 0.59%)</title><rect x="1037" y="452" width="7" height="15" fill="rgb(215,36,34)"/><text x="1040.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (5 samples, 0.20%)</title><rect x="1042" y="468" width="2" height="15" fill="rgb(205,67,7)"/><text x="1045.00" y="478.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (185 samples, 7.29%)</title><rect x="971" y="420" width="86" height="15" fill="rgb(235,8,5)"/><text x="974.00" y="430.50">PyUFunc_Re..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (23 samples, 0.91%)</title><rect x="1046" y="436" width="11" height="15" fill="rgb(223,196,41)"/><text x="1049.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (22 samples, 0.87%)</title><rect x="1047" y="452" width="10" height="15" fill="rgb(206,140,44)"/><text x="1050.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (19 samples, 0.75%)</title><rect x="1048" y="468" width="9" height="15" fill="rgb(240,13,33)"/><text x="1051.00" y="478.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (4 samples, 0.16%)</title><rect x="1055" y="484" width="2" height="15" fill="rgb(222,69,40)"/><text x="1058.00" y="494.50"></text></g><g><title>unicode_eq (python3.7) (3 samples, 0.12%)</title><rect x="1057" y="420" width="1" height="15" fill="rgb(207,141,49)"/><text x="1060.00" y="430.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (464 samples, 18.28%)</title><rect x="844" y="324" width="216" height="15" fill="rgb(250,209,17)"/><text x="847.00" y="334.50">sum (&lt;__array_function__ int..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (424 samples, 16.71%)</title><rect x="863" y="340" width="197" height="15" fill="rgb(250,44,6)"/><text x="866.00" y="350.50">array_implement_array_fun..</text></g><g><title>sum (numpy/core/fromnumeric.py) (416 samples, 16.39%)</title><rect x="866" y="356" width="194" height="15" fill="rgb(228,129,54)"/><text x="869.00" y="366.50">sum (numpy/core/fromnumer..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (351 samples, 13.83%)</title><rect x="897" y="372" width="163" height="15" fill="rgb(245,21,44)"/><text x="900.00" y="382.50">_wrapreduction (numpy..</text></g><g><title>ufunc_reduce (ufunc_object.c) (273 samples, 10.76%)</title><rect x="933" y="388" width="127" height="15" fill="rgb(248,183,30)"/><text x="936.00" y="398.50">ufunc_reduce (u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (239 samples, 9.42%)</title><rect x="949" y="404" width="111" height="15" fill="rgb(248,53,52)"/><text x="952.00" y="414.50">PyUFunc_Gener..</text></g><g><title>unicode_hash (python3.7) (3 samples, 0.12%)</title><rect x="1058" y="420" width="2" height="15" fill="rgb(252,201,16)"/><text x="1061.00" y="430.50"></text></g><g><title>PyUFunc_DefaultTypeResolver (ufunc_type_resolution.c) (3 samples, 0.12%)</title><rect x="1062" y="356" width="2" height="15" fill="rgb(211,28,29)"/><text x="1065.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (15 samples, 0.59%)</title><rect x="1067" y="372" width="7" height="15" fill="rgb(242,112,16)"/><text x="1070.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (15 samples, 0.59%)</title><rect x="1067" y="388" width="7" height="15" fill="rgb(246,61,10)"/><text x="1070.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (10 samples, 0.39%)</title><rect x="1070" y="404" width="4" height="15" fill="rgb(206,17,23)"/><text x="1073.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (10 samples, 0.39%)</title><rect x="1070" y="420" width="4" height="15" fill="rgb(230,150,47)"/><text x="1073.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (8 samples, 0.32%)</title><rect x="1070" y="436" width="4" height="15" fill="rgb(216,38,5)"/><text x="1073.00" y="446.50"></text></g><g><title>FLOAT_square (loops.c.src) (3 samples, 0.12%)</title><rect x="1075" y="388" width="2" height="15" fill="rgb(225,100,28)"/><text x="1078.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (28 samples, 1.10%)</title><rect x="1065" y="356" width="13" height="15" fill="rgb(215,125,35)"/><text x="1068.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (7 samples, 0.28%)</title><rect x="1075" y="372" width="3" height="15" fill="rgb(216,211,51)"/><text x="1078.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (4 samples, 0.16%)</title><rect x="1077" y="388" width="1" height="15" fill="rgb(252,8,22)"/><text x="1080.00" y="398.50"></text></g><g><title>_mm_load_ps (xmmintrin.h) (3 samples, 0.12%)</title><rect x="1077" y="404" width="1" height="15" fill="rgb(209,165,37)"/><text x="1080.00" y="414.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (4 samples, 0.16%)</title><rect x="1078" y="356" width="2" height="15" fill="rgb(226,198,25)"/><text x="1081.00" y="366.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (9 samples, 0.35%)</title><rect x="1088" y="388" width="4" height="15" fill="rgb(206,155,15)"/><text x="1091.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (8 samples, 0.32%)</title><rect x="1089" y="404" width="3" height="15" fill="rgb(223,28,24)"/><text x="1092.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (4 samples, 0.16%)</title><rect x="1090" y="420" width="2" height="15" fill="rgb(251,183,29)"/><text x="1093.00" y="430.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (33 samples, 1.30%)</title><rect x="1080" y="356" width="16" height="15" fill="rgb(232,179,31)"/><text x="1083.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (22 samples, 0.87%)</title><rect x="1085" y="372" width="11" height="15" fill="rgb(215,69,33)"/><text x="1088.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (7 samples, 0.28%)</title><rect x="1092" y="388" width="4" height="15" fill="rgb(245,193,18)"/><text x="1095.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (622 samples, 24.51%)</title><rect x="807" y="308" width="289" height="15" fill="rgb(226,115,15)"/><text x="810.00" y="318.50">_run (mlprodict/onnxrt/ops_cpu/op_redu..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (78 samples, 3.07%)</title><rect x="1060" y="324" width="36" height="15" fill="rgb(234,34,35)"/><text x="1063.00" y="334.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (74 samples, 2.92%)</title><rect x="1062" y="340" width="34" height="15" fill="rgb(237,42,38)"/><text x="1065.00" y="350.50">Py..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,531 samples, 60.32%)</title><rect x="385" y="260" width="712" height="15" fill="rgb(212,139,26)"/><text x="388.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,014 samples, 39.95%)</title><rect x="626" y="276" width="471" height="15" fill="rgb(209,185,24)"/><text x="629.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (933 samples, 36.76%)</title><rect x="663" y="292" width="434" height="15" fill="rgb(227,182,0)"/><text x="666.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,725 samples, 67.97%)</title><rect x="296" y="244" width="802" height="15" fill="rgb(239,96,37)"/><text x="299.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (6 samples, 0.24%)</title><rect x="1098" y="260" width="3" height="15" fill="rgb(225,87,39)"/><text x="1101.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (5 samples, 0.20%)</title><rect x="1098" y="276" width="3" height="15" fill="rgb(219,202,26)"/><text x="1101.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,775 samples, 69.94%)</title><rect x="276" y="228" width="825" height="15" fill="rgb(230,136,50)"/><text x="279.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (7 samples, 0.28%)</title><rect x="1098" y="244" width="3" height="15" fill="rgb(225,85,17)"/><text x="1101.00" y="254.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (20 samples, 0.79%)</title><rect x="1103" y="276" width="9" height="15" fill="rgb(214,99,28)"/><text x="1106.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (20 samples, 0.79%)</title><rect x="1103" y="292" width="9" height="15" fill="rgb(207,170,30)"/><text x="1106.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (20 samples, 0.79%)</title><rect x="1103" y="308" width="9" height="15" fill="rgb(233,138,41)"/><text x="1106.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (6 samples, 0.24%)</title><rect x="1110" y="324" width="2" height="15" fill="rgb(206,204,25)"/><text x="1113.00" y="334.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (3 samples, 0.12%)</title><rect x="1111" y="340" width="1" height="15" fill="rgb(237,116,5)"/><text x="1114.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (7 samples, 0.28%)</title><rect x="1113" y="356" width="3" height="15" fill="rgb(234,91,38)"/><text x="1116.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (6 samples, 0.24%)</title><rect x="1113" y="372" width="3" height="15" fill="rgb(241,71,51)"/><text x="1116.00" y="382.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (8 samples, 0.32%)</title><rect x="1113" y="340" width="4" height="15" fill="rgb(215,152,24)"/><text x="1116.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (2,182 samples, 85.97%)</title><rect x="102" y="212" width="1015" height="15" fill="rgb(252,50,47)"/><text x="105.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (33 samples, 1.30%)</title><rect x="1102" y="228" width="15" height="15" fill="rgb(213,163,43)"/><text x="1105.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (33 samples, 1.30%)</title><rect x="1102" y="244" width="15" height="15" fill="rgb(212,46,43)"/><text x="1105.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (33 samples, 1.30%)</title><rect x="1102" y="260" width="15" height="15" fill="rgb(237,166,8)"/><text x="1105.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (10 samples, 0.39%)</title><rect x="1112" y="276" width="5" height="15" fill="rgb(252,59,13)"/><text x="1115.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (10 samples, 0.39%)</title><rect x="1112" y="292" width="5" height="15" fill="rgb(253,16,17)"/><text x="1115.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (10 samples, 0.39%)</title><rect x="1112" y="308" width="5" height="15" fill="rgb(215,5,26)"/><text x="1115.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (9 samples, 0.35%)</title><rect x="1113" y="324" width="4" height="15" fill="rgb(217,118,21)"/><text x="1116.00" y="334.50"></text></g><g><title>array_arange (multiarraymodule.c) (3 samples, 0.12%)</title><rect x="1120" y="260" width="1" height="15" fill="rgb(215,150,16)"/><text x="1123.00" y="270.50"></text></g><g><title>PyArray_ArangeObj (ctors.c) (3 samples, 0.12%)</title><rect x="1120" y="276" width="1" height="15" fill="rgb(211,135,28)"/><text x="1123.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (11 samples, 0.43%)</title><rect x="1117" y="212" width="6" height="15" fill="rgb(216,160,49)"/><text x="1120.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (10 samples, 0.39%)</title><rect x="1118" y="228" width="5" height="15" fill="rgb(254,225,45)"/><text x="1121.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (9 samples, 0.35%)</title><rect x="1118" y="244" width="5" height="15" fill="rgb(226,25,47)"/><text x="1121.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (3 samples, 0.12%)</title><rect x="1121" y="260" width="2" height="15" fill="rgb(217,194,22)"/><text x="1124.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (3 samples, 0.12%)</title><rect x="1124" y="244" width="1" height="15" fill="rgb(225,11,39)"/><text x="1127.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (3 samples, 0.12%)</title><rect x="1124" y="260" width="1" height="15" fill="rgb(248,126,53)"/><text x="1127.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (7 samples, 0.28%)</title><rect x="1123" y="212" width="3" height="15" fill="rgb(210,56,34)"/><text x="1126.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (6 samples, 0.24%)</title><rect x="1123" y="228" width="3" height="15" fill="rgb(213,74,1)"/><text x="1126.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.20%)</title><rect x="1128" y="308" width="2" height="15" fill="rgb(216,175,50)"/><text x="1131.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.16%)</title><rect x="1129" y="324" width="1" height="15" fill="rgb(207,67,11)"/><text x="1132.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py) (11 samples, 0.43%)</title><rect x="1126" y="228" width="5" height="15" fill="rgb(244,42,15)"/><text x="1129.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;) (11 samples, 0.43%)</title><rect x="1126" y="244" width="5" height="15" fill="rgb(247,118,52)"/><text x="1129.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (11 samples, 0.43%)</title><rect x="1126" y="260" width="5" height="15" fill="rgb(240,226,33)"/><text x="1129.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (11 samples, 0.43%)</title><rect x="1126" y="276" width="5" height="15" fill="rgb(212,28,33)"/><text x="1129.00" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py) (9 samples, 0.35%)</title><rect x="1127" y="292" width="4" height="15" fill="rgb(232,17,26)"/><text x="1130.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (3 samples, 0.12%)</title><rect x="1131" y="228" width="2" height="15" fill="rgb(245,101,44)"/><text x="1134.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.12%)</title><rect x="1131" y="244" width="2" height="15" fill="rgb(237,215,3)"/><text x="1134.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.12%)</title><rect x="1131" y="260" width="2" height="15" fill="rgb(219,174,46)"/><text x="1134.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (2,258 samples, 88.97%)</title><rect x="84" y="164" width="1050" height="15" fill="rgb(219,8,52)"/><text x="87.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (2,253 samples, 88.77%)</title><rect x="86" y="180" width="1048" height="15" fill="rgb(227,116,34)"/><text x="89.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (2,235 samples, 88.06%)</title><rect x="95" y="196" width="1039" height="15" fill="rgb(212,59,22)"/><text x="98.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (16 samples, 0.63%)</title><rect x="1126" y="212" width="8" height="15" fill="rgb(247,148,11)"/><text x="1129.00" y="222.50"></text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (2,262 samples, 89.13%)</title><rect x="83" y="100" width="1052" height="15" fill="rgb(251,194,43)"/><text x="86.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (2,262 samples, 89.13%)</title><rect x="83" y="116" width="1052" height="15" fill="rgb(226,221,16)"/><text x="86.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (2,261 samples, 89.09%)</title><rect x="84" y="132" width="1051" height="15" fill="rgb(248,186,24)"/><text x="87.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (2,261 samples, 89.09%)</title><rect x="84" y="148" width="1051" height="15" fill="rgb(211,128,21)"/><text x="87.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.12%)</title><rect x="1134" y="164" width="1" height="15" fill="rgb(244,137,28)"/><text x="1137.00" y="174.50"></text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (2,263 samples, 89.16%)</title><rect x="83" y="68" width="1053" height="15" fill="rgb(237,117,5)"/><text x="86.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (2,263 samples, 89.16%)</title><rect x="83" y="84" width="1053" height="15" fill="rgb(236,101,12)"/><text x="86.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py)</text></g><g><title>check_array (sklearn/utils/validation.py) (11 samples, 0.43%)</title><rect x="1137" y="164" width="6" height="15" fill="rgb(229,88,11)"/><text x="1140.00" y="174.50"></text></g><g><title>simplefilter (warnings.py) (4 samples, 0.16%)</title><rect x="1141" y="180" width="2" height="15" fill="rgb(241,215,16)"/><text x="1144.00" y="190.50"></text></g><g><title>_add_filter (warnings.py) (4 samples, 0.16%)</title><rect x="1141" y="196" width="2" height="15" fill="rgb(215,75,13)"/><text x="1144.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (12 samples, 0.47%)</title><rect x="1144" y="180" width="6" height="15" fill="rgb(249,180,52)"/><text x="1147.00" y="190.50"></text></g><g><title>simplefilter (warnings.py) (3 samples, 0.12%)</title><rect x="1148" y="196" width="2" height="15" fill="rgb(252,216,1)"/><text x="1151.00" y="206.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (3 samples, 0.12%)</title><rect x="1150" y="180" width="1" height="15" fill="rgb(235,32,41)"/><text x="1153.00" y="190.50"></text></g><g><title>_check_chunk_size (sklearn/metrics/pairwise.py) (9 samples, 0.35%)</title><rect x="1153" y="196" width="4" height="15" fill="rgb(237,199,34)"/><text x="1156.00" y="206.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/metrics/pairwise.py) (8 samples, 0.32%)</title><rect x="1153" y="212" width="4" height="15" fill="rgb(208,147,21)"/><text x="1156.00" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (5 samples, 0.20%)</title><rect x="1155" y="228" width="2" height="15" fill="rgb(232,195,12)"/><text x="1158.00" y="238.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (4 samples, 0.16%)</title><rect x="1158" y="212" width="2" height="15" fill="rgb(217,44,9)"/><text x="1161.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.16%)</title><rect x="1158" y="228" width="2" height="15" fill="rgb(221,111,29)"/><text x="1161.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (4 samples, 0.16%)</title><rect x="1158" y="244" width="2" height="15" fill="rgb(226,150,35)"/><text x="1161.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (4 samples, 0.16%)</title><rect x="1158" y="260" width="2" height="15" fill="rgb(230,121,24)"/><text x="1161.00" y="270.50"></text></g><g><title>array_argpartition (methods.c) (3 samples, 0.12%)</title><rect x="1159" y="276" width="1" height="15" fill="rgb(252,89,3)"/><text x="1162.00" y="286.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (3 samples, 0.12%)</title><rect x="1159" y="292" width="1" height="15" fill="rgb(206,15,50)"/><text x="1162.00" y="302.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (3 samples, 0.12%)</title><rect x="1161" y="228" width="1" height="15" fill="rgb(254,10,30)"/><text x="1164.00" y="238.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py) (13 samples, 0.51%)</title><rect x="1157" y="196" width="6" height="15" fill="rgb(211,218,40)"/><text x="1160.00" y="206.50"></text></g><g><title>array_subscript (mapping.c) (6 samples, 0.24%)</title><rect x="1160" y="212" width="3" height="15" fill="rgb(240,103,35)"/><text x="1163.00" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (3 samples, 0.12%)</title><rect x="1163" y="196" width="1" height="15" fill="rgb(235,69,26)"/><text x="1166.00" y="206.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py) (4 samples, 0.16%)</title><rect x="1165" y="228" width="2" height="15" fill="rgb(228,207,38)"/><text x="1168.00" y="238.50"></text></g><g><title>array_multiply (number.c) (3 samples, 0.12%)</title><rect x="1167" y="244" width="2" height="15" fill="rgb(221,134,22)"/><text x="1170.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.12%)</title><rect x="1167" y="260" width="2" height="15" fill="rgb(233,196,43)"/><text x="1170.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.12%)</title><rect x="1167" y="276" width="2" height="15" fill="rgb(227,38,24)"/><text x="1170.00" y="286.50"></text></g><g><title>__enter__ (warnings.py) (3 samples, 0.12%)</title><rect x="1170" y="276" width="1" height="15" fill="rgb(222,217,23)"/><text x="1173.00" y="286.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (3 samples, 0.12%)</title><rect x="1173" y="276" width="2" height="15" fill="rgb(238,196,53)"/><text x="1176.00" y="286.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py) (21 samples, 0.83%)</title><rect x="1169" y="244" width="9" height="15" fill="rgb(247,80,18)"/><text x="1172.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (20 samples, 0.79%)</title><rect x="1169" y="260" width="9" height="15" fill="rgb(235,91,54)"/><text x="1172.00" y="270.50"></text></g><g><title>simplefilter (warnings.py) (7 samples, 0.28%)</title><rect x="1175" y="276" width="3" height="15" fill="rgb(219,39,30)"/><text x="1178.00" y="286.50"></text></g><g><title>_add_filter (warnings.py) (7 samples, 0.28%)</title><rect x="1175" y="292" width="3" height="15" fill="rgb(251,107,18)"/><text x="1178.00" y="302.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py) (5 samples, 0.20%)</title><rect x="1178" y="244" width="3" height="15" fill="rgb(214,182,15)"/><text x="1181.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;) (5 samples, 0.20%)</title><rect x="1178" y="260" width="3" height="15" fill="rgb(245,199,1)"/><text x="1181.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 0.20%)</title><rect x="1178" y="276" width="3" height="15" fill="rgb(245,155,30)"/><text x="1181.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py) (3 samples, 0.12%)</title><rect x="1179" y="292" width="2" height="15" fill="rgb(250,166,11)"/><text x="1182.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c) (3 samples, 0.12%)</title><rect x="1179" y="308" width="2" height="15" fill="rgb(252,31,26)"/><text x="1182.00" y="318.50"></text></g><g><title>PyArray_EinsteinSum (einsum.c.src) (3 samples, 0.12%)</title><rect x="1179" y="324" width="2" height="15" fill="rgb(209,0,24)"/><text x="1182.00" y="334.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py) (67 samples, 2.64%)</title><rect x="1151" y="180" width="32" height="15" fill="rgb(213,48,43)"/><text x="1154.00" y="190.50">pa..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py) (38 samples, 1.50%)</title><rect x="1165" y="196" width="18" height="15" fill="rgb(252,129,54)"/><text x="1168.00" y="206.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py) (38 samples, 1.50%)</title><rect x="1165" y="212" width="18" height="15" fill="rgb(254,85,24)"/><text x="1168.00" y="222.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py) (33 samples, 1.30%)</title><rect x="1167" y="228" width="16" height="15" fill="rgb(211,158,15)"/><text x="1170.00" y="238.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (89 samples, 3.51%)</title><rect x="1143" y="164" width="41" height="15" fill="rgb(252,196,51)"/><text x="1146.00" y="174.50">kne..</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (3 samples, 0.12%)</title><rect x="1183" y="180" width="1" height="15" fill="rgb(209,26,26)"/><text x="1186.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.12%)</title><rect x="1183" y="196" width="1" height="15" fill="rgb(205,64,23)"/><text x="1186.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (3 samples, 0.12%)</title><rect x="1183" y="212" width="1" height="15" fill="rgb(224,224,22)"/><text x="1186.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.20%)</title><rect x="1185" y="228" width="2" height="15" fill="rgb(246,60,30)"/><text x="1188.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.20%)</title><rect x="1185" y="244" width="2" height="15" fill="rgb(209,107,34)"/><text x="1188.00" y="254.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (2,537 samples, 99.96%)</title><rect x="10" y="52" width="1179" height="15" fill="rgb(245,152,43)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (115 samples, 4.53%)</title><rect x="1136" y="68" width="53" height="15" fill="rgb(225,67,21)"/><text x="1139.00" y="78.50">profi..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (115 samples, 4.53%)</title><rect x="1136" y="84" width="53" height="15" fill="rgb(246,87,51)"/><text x="1139.00" y="94.50">setup..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py) (115 samples, 4.53%)</title><rect x="1136" y="100" width="53" height="15" fill="rgb(244,140,23)"/><text x="1139.00" y="110.50">profi..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (115 samples, 4.53%)</title><rect x="1136" y="116" width="53" height="15" fill="rgb(233,221,52)"/><text x="1139.00" y="126.50">time_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (115 samples, 4.53%)</title><rect x="1136" y="132" width="53" height="15" fill="rgb(223,220,10)"/><text x="1139.00" y="142.50">&lt;lamb..</text></g><g><title>predict (sklearn/neighbors/_regression.py) (115 samples, 4.53%)</title><rect x="1136" y="148" width="53" height="15" fill="rgb(231,142,17)"/><text x="1139.00" y="158.50">predi..</text></g><g><title>mean (&lt;__array_function__ internals&gt;) (11 samples, 0.43%)</title><rect x="1184" y="164" width="5" height="15" fill="rgb(253,132,13)"/><text x="1187.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (11 samples, 0.43%)</title><rect x="1184" y="180" width="5" height="15" fill="rgb(219,216,5)"/><text x="1187.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (11 samples, 0.43%)</title><rect x="1184" y="196" width="5" height="15" fill="rgb(207,27,50)"/><text x="1187.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py) (11 samples, 0.43%)</title><rect x="1184" y="212" width="5" height="15" fill="rgb(232,185,26)"/><text x="1187.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (4 samples, 0.16%)</title><rect x="1187" y="228" width="2" height="15" fill="rgb(239,88,6)"/><text x="1190.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.12%)</title><rect x="1188" y="244" width="1" height="15" fill="rgb(227,38,44)"/><text x="1191.00" y="254.50"></text></g><g><title>all (2,538 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(227,25,19)"/><text x="13.00" y="46.50"></text></g></g></svg>