<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1270" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1253.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1253.00"> </text><g id="frames"><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3279) (3 samples, 0.11%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(241,141,19)"/><text x="13.00" y="862.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py:3279) (3 samples, 0.11%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(237,131,2)"/><text x="13.00" y="878.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (5 samples, 0.18%)</title><rect x="10" y="820" width="2" height="15" fill="rgb(234,63,34)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (5 samples, 0.18%)</title><rect x="10" y="836" width="2" height="15" fill="rgb(234,141,7)"/><text x="13.00" y="846.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py:2) (8 samples, 0.28%)</title><rect x="10" y="148" width="3" height="15" fill="rgb(245,199,26)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.28%)</title><rect x="10" y="164" width="3" height="15" fill="rgb(248,41,16)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (8 samples, 0.28%)</title><rect x="10" y="180" width="3" height="15" fill="rgb(216,132,8)"/><text x="13.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.28%)</title><rect x="10" y="196" width="3" height="15" fill="rgb(209,91,17)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.28%)</title><rect x="10" y="212" width="3" height="15" fill="rgb(239,149,46)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.28%)</title><rect x="10" y="228" width="3" height="15" fill="rgb(230,26,2)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.28%)</title><rect x="10" y="244" width="3" height="15" fill="rgb(227,218,27)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.28%)</title><rect x="10" y="260" width="3" height="15" fill="rgb(245,174,9)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.28%)</title><rect x="10" y="276" width="3" height="15" fill="rgb(245,81,51)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (7 samples, 0.25%)</title><rect x="10" y="292" width="3" height="15" fill="rgb(241,175,10)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.25%)</title><rect x="10" y="308" width="3" height="15" fill="rgb(243,28,51)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.25%)</title><rect x="10" y="324" width="3" height="15" fill="rgb(248,157,37)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.25%)</title><rect x="10" y="340" width="3" height="15" fill="rgb(218,114,0)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.25%)</title><rect x="10" y="356" width="3" height="15" fill="rgb(220,208,12)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.25%)</title><rect x="10" y="372" width="3" height="15" fill="rgb(237,1,31)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (7 samples, 0.25%)</title><rect x="10" y="388" width="3" height="15" fill="rgb(230,200,33)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.25%)</title><rect x="10" y="404" width="3" height="15" fill="rgb(227,54,12)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.25%)</title><rect x="10" y="420" width="3" height="15" fill="rgb(254,134,7)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.25%)</title><rect x="10" y="436" width="3" height="15" fill="rgb(207,218,9)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.25%)</title><rect x="10" y="452" width="3" height="15" fill="rgb(248,47,52)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.25%)</title><rect x="10" y="468" width="3" height="15" fill="rgb(220,133,46)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (7 samples, 0.25%)</title><rect x="10" y="484" width="3" height="15" fill="rgb(219,200,45)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.25%)</title><rect x="10" y="500" width="3" height="15" fill="rgb(239,113,49)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.25%)</title><rect x="10" y="516" width="3" height="15" fill="rgb(237,25,18)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.25%)</title><rect x="10" y="532" width="3" height="15" fill="rgb(231,122,36)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.25%)</title><rect x="10" y="548" width="3" height="15" fill="rgb(218,125,42)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.25%)</title><rect x="10" y="564" width="3" height="15" fill="rgb(205,217,24)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (7 samples, 0.25%)</title><rect x="10" y="580" width="3" height="15" fill="rgb(241,211,44)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.25%)</title><rect x="10" y="596" width="3" height="15" fill="rgb(245,7,46)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 0.25%)</title><rect x="10" y="612" width="3" height="15" fill="rgb(221,148,43)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.25%)</title><rect x="10" y="628" width="3" height="15" fill="rgb(233,108,5)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.25%)</title><rect x="10" y="644" width="3" height="15" fill="rgb(235,113,7)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.25%)</title><rect x="10" y="660" width="3" height="15" fill="rgb(235,88,5)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.25%)</title><rect x="10" y="676" width="3" height="15" fill="rgb(253,4,44)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.25%)</title><rect x="10" y="692" width="3" height="15" fill="rgb(249,110,32)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.25%)</title><rect x="10" y="708" width="3" height="15" fill="rgb(218,147,43)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (7 samples, 0.25%)</title><rect x="10" y="724" width="3" height="15" fill="rgb(249,40,12)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.25%)</title><rect x="10" y="740" width="3" height="15" fill="rgb(232,63,19)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.25%)</title><rect x="10" y="756" width="3" height="15" fill="rgb(207,195,28)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.25%)</title><rect x="10" y="772" width="3" height="15" fill="rgb(213,200,19)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.25%)</title><rect x="10" y="788" width="3" height="15" fill="rgb(206,116,18)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.25%)</title><rect x="10" y="804" width="3" height="15" fill="rgb(252,183,17)"/><text x="13.00" y="814.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.11%)</title><rect x="13" y="180" width="1" height="15" fill="rgb(210,72,39)"/><text x="16.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="13" y="196" width="1" height="15" fill="rgb(252,28,18)"/><text x="16.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="13" y="212" width="1" height="15" fill="rgb(253,29,44)"/><text x="16.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="13" y="228" width="1" height="15" fill="rgb(252,119,24)"/><text x="16.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="13" y="244" width="1" height="15" fill="rgb(214,171,49)"/><text x="16.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="13" y="260" width="1" height="15" fill="rgb(219,104,40)"/><text x="16.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="13" y="276" width="1" height="15" fill="rgb(214,79,8)"/><text x="16.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (3 samples, 0.11%)</title><rect x="13" y="292" width="1" height="15" fill="rgb(247,132,54)"/><text x="16.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="13" y="308" width="1" height="15" fill="rgb(241,119,37)"/><text x="16.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="13" y="324" width="1" height="15" fill="rgb(242,30,41)"/><text x="16.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="13" y="340" width="1" height="15" fill="rgb(224,179,41)"/><text x="16.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="13" y="356" width="1" height="15" fill="rgb(207,165,29)"/><text x="16.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="13" y="372" width="1" height="15" fill="rgb(243,85,45)"/><text x="16.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (3 samples, 0.11%)</title><rect x="13" y="388" width="1" height="15" fill="rgb(229,57,5)"/><text x="16.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="13" y="404" width="1" height="15" fill="rgb(230,56,54)"/><text x="16.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="13" y="420" width="1" height="15" fill="rgb(227,166,24)"/><text x="16.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="13" y="436" width="1" height="15" fill="rgb(205,108,21)"/><text x="16.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="13" y="452" width="1" height="15" fill="rgb(225,129,45)"/><text x="16.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="13" y="468" width="1" height="15" fill="rgb(219,69,50)"/><text x="16.00" y="478.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py:4) (4 samples, 0.14%)</title><rect x="13" y="148" width="2" height="15" fill="rgb(248,82,8)"/><text x="16.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="13" y="164" width="2" height="15" fill="rgb(233,104,24)"/><text x="16.00" y="174.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:12) (3 samples, 0.11%)</title><rect x="15" y="484" width="1" height="15" fill="rgb(221,43,40)"/><text x="18.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="15" y="500" width="1" height="15" fill="rgb(231,95,7)"/><text x="18.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="15" y="516" width="1" height="15" fill="rgb(241,159,40)"/><text x="18.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="15" y="532" width="1" height="15" fill="rgb(209,160,9)"/><text x="18.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="15" y="548" width="1" height="15" fill="rgb(214,15,48)"/><text x="18.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="15" y="564" width="1" height="15" fill="rgb(241,109,46)"/><text x="18.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py:23) (3 samples, 0.11%)</title><rect x="15" y="580" width="1" height="15" fill="rgb(206,6,44)"/><text x="18.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="15" y="596" width="1" height="15" fill="rgb(235,227,14)"/><text x="18.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="15" y="612" width="1" height="15" fill="rgb(243,60,23)"/><text x="18.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="15" y="628" width="1" height="15" fill="rgb(209,171,25)"/><text x="18.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="15" y="644" width="1" height="15" fill="rgb(248,62,50)"/><text x="18.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="15" y="660" width="1" height="15" fill="rgb(231,177,13)"/><text x="18.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py:10) (3 samples, 0.11%)</title><rect x="15" y="676" width="1" height="15" fill="rgb(218,92,0)"/><text x="18.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="15" y="692" width="1" height="15" fill="rgb(251,82,34)"/><text x="18.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="15" y="708" width="1" height="15" fill="rgb(214,227,12)"/><text x="18.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="15" y="724" width="1" height="15" fill="rgb(220,52,18)"/><text x="18.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="15" y="740" width="1" height="15" fill="rgb(217,109,34)"/><text x="18.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="15" y="756" width="1" height="15" fill="rgb(238,156,53)"/><text x="18.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (4 samples, 0.14%)</title><rect x="15" y="244" width="1" height="15" fill="rgb(207,49,27)"/><text x="18.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="15" y="260" width="1" height="15" fill="rgb(216,197,41)"/><text x="18.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="15" y="276" width="1" height="15" fill="rgb(233,56,18)"/><text x="18.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="15" y="292" width="1" height="15" fill="rgb(217,96,23)"/><text x="18.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="15" y="308" width="1" height="15" fill="rgb(207,107,15)"/><text x="18.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="15" y="324" width="1" height="15" fill="rgb(207,104,34)"/><text x="18.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (4 samples, 0.14%)</title><rect x="15" y="340" width="1" height="15" fill="rgb(229,117,52)"/><text x="18.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="15" y="356" width="1" height="15" fill="rgb(237,139,26)"/><text x="18.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.14%)</title><rect x="15" y="372" width="1" height="15" fill="rgb(219,37,17)"/><text x="18.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="15" y="388" width="1" height="15" fill="rgb(235,214,44)"/><text x="18.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="15" y="404" width="1" height="15" fill="rgb(245,156,11)"/><text x="18.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="15" y="420" width="1" height="15" fill="rgb(251,24,53)"/><text x="18.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="15" y="436" width="1" height="15" fill="rgb(229,87,30)"/><text x="18.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="15" y="452" width="1" height="15" fill="rgb(235,188,28)"/><text x="18.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="15" y="468" width="1" height="15" fill="rgb(226,160,26)"/><text x="18.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (3 samples, 0.11%)</title><rect x="17" y="436" width="1" height="15" fill="rgb(240,71,1)"/><text x="20.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="17" y="452" width="1" height="15" fill="rgb(254,140,30)"/><text x="20.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="17" y="468" width="1" height="15" fill="rgb(220,146,32)"/><text x="20.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="17" y="484" width="1" height="15" fill="rgb(244,91,11)"/><text x="20.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="17" y="500" width="1" height="15" fill="rgb(238,44,9)"/><text x="20.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="17" y="516" width="1" height="15" fill="rgb(253,179,21)"/><text x="20.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (3 samples, 0.11%)</title><rect x="17" y="532" width="1" height="15" fill="rgb(205,164,49)"/><text x="20.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="17" y="548" width="1" height="15" fill="rgb(236,65,28)"/><text x="20.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="17" y="564" width="1" height="15" fill="rgb(230,213,4)"/><text x="20.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="17" y="580" width="1" height="15" fill="rgb(235,198,5)"/><text x="20.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="17" y="596" width="1" height="15" fill="rgb(214,103,4)"/><text x="20.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="17" y="612" width="1" height="15" fill="rgb(207,54,34)"/><text x="20.00" y="622.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:4) (25 samples, 0.89%)</title><rect x="10" y="52" width="10" height="15" fill="rgb(249,216,6)"/><text x="13.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (25 samples, 0.89%)</title><rect x="10" y="68" width="10" height="15" fill="rgb(230,39,6)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (25 samples, 0.89%)</title><rect x="10" y="84" width="10" height="15" fill="rgb(219,84,47)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (25 samples, 0.89%)</title><rect x="10" y="100" width="10" height="15" fill="rgb(253,91,53)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (25 samples, 0.89%)</title><rect x="10" y="116" width="10" height="15" fill="rgb(207,89,36)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (25 samples, 0.89%)</title><rect x="10" y="132" width="10" height="15" fill="rgb(213,15,51)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py:7) (13 samples, 0.46%)</title><rect x="15" y="148" width="5" height="15" fill="rgb(226,81,32)"/><text x="18.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (13 samples, 0.46%)</title><rect x="15" y="164" width="5" height="15" fill="rgb(231,4,30)"/><text x="18.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (13 samples, 0.46%)</title><rect x="15" y="180" width="5" height="15" fill="rgb(229,184,25)"/><text x="18.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (13 samples, 0.46%)</title><rect x="15" y="196" width="5" height="15" fill="rgb(247,166,39)"/><text x="18.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (13 samples, 0.46%)</title><rect x="15" y="212" width="5" height="15" fill="rgb(226,228,7)"/><text x="18.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 0.46%)</title><rect x="15" y="228" width="5" height="15" fill="rgb(223,142,49)"/><text x="18.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (9 samples, 0.32%)</title><rect x="16" y="244" width="4" height="15" fill="rgb(212,155,36)"/><text x="19.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 0.32%)</title><rect x="16" y="260" width="4" height="15" fill="rgb(228,44,39)"/><text x="19.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 0.32%)</title><rect x="16" y="276" width="4" height="15" fill="rgb(239,98,12)"/><text x="19.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 0.32%)</title><rect x="16" y="292" width="4" height="15" fill="rgb(227,211,10)"/><text x="19.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 0.32%)</title><rect x="16" y="308" width="4" height="15" fill="rgb(252,64,52)"/><text x="19.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.32%)</title><rect x="16" y="324" width="4" height="15" fill="rgb(211,227,52)"/><text x="19.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (7 samples, 0.25%)</title><rect x="17" y="340" width="3" height="15" fill="rgb(210,149,42)"/><text x="20.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.25%)</title><rect x="17" y="356" width="3" height="15" fill="rgb(217,28,15)"/><text x="20.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.25%)</title><rect x="17" y="372" width="3" height="15" fill="rgb(242,145,4)"/><text x="20.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.25%)</title><rect x="17" y="388" width="3" height="15" fill="rgb(238,165,42)"/><text x="20.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.25%)</title><rect x="17" y="404" width="3" height="15" fill="rgb(210,196,35)"/><text x="20.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.25%)</title><rect x="17" y="420" width="3" height="15" fill="rgb(247,139,2)"/><text x="20.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (4 samples, 0.14%)</title><rect x="18" y="436" width="2" height="15" fill="rgb(229,14,44)"/><text x="21.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="18" y="452" width="2" height="15" fill="rgb(237,149,29)"/><text x="21.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.14%)</title><rect x="18" y="468" width="2" height="15" fill="rgb(246,79,12)"/><text x="21.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="18" y="484" width="2" height="15" fill="rgb(223,16,36)"/><text x="21.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="18" y="500" width="2" height="15" fill="rgb(238,73,22)"/><text x="21.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="18" y="516" width="2" height="15" fill="rgb(225,180,38)"/><text x="21.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="18" y="532" width="2" height="15" fill="rgb(229,221,47)"/><text x="21.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="18" y="548" width="2" height="15" fill="rgb(234,16,8)"/><text x="21.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="18" y="564" width="2" height="15" fill="rgb(215,228,19)"/><text x="21.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (4 samples, 0.14%)</title><rect x="18" y="580" width="2" height="15" fill="rgb(220,77,36)"/><text x="21.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="18" y="596" width="2" height="15" fill="rgb(208,163,16)"/><text x="21.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="18" y="612" width="2" height="15" fill="rgb(252,33,0)"/><text x="21.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="18" y="628" width="2" height="15" fill="rgb(208,47,27)"/><text x="21.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="18" y="644" width="2" height="15" fill="rgb(221,163,10)"/><text x="21.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="18" y="660" width="2" height="15" fill="rgb(252,53,19)"/><text x="21.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (4 samples, 0.14%)</title><rect x="18" y="676" width="2" height="15" fill="rgb(226,192,53)"/><text x="21.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="18" y="692" width="2" height="15" fill="rgb(216,30,23)"/><text x="21.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="18" y="708" width="2" height="15" fill="rgb(212,57,4)"/><text x="21.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="18" y="724" width="2" height="15" fill="rgb(247,153,27)"/><text x="21.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="18" y="740" width="2" height="15" fill="rgb(210,17,21)"/><text x="21.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="18" y="756" width="2" height="15" fill="rgb(239,64,23)"/><text x="21.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (4 samples, 0.14%)</title><rect x="18" y="772" width="2" height="15" fill="rgb(220,24,46)"/><text x="21.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="18" y="788" width="2" height="15" fill="rgb(243,62,8)"/><text x="21.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="18" y="804" width="2" height="15" fill="rgb(211,154,19)"/><text x="21.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="18" y="820" width="2" height="15" fill="rgb(247,224,25)"/><text x="21.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="18" y="836" width="2" height="15" fill="rgb(235,1,53)"/><text x="21.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="18" y="852" width="2" height="15" fill="rgb(242,199,4)"/><text x="21.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (4 samples, 0.14%)</title><rect x="18" y="868" width="2" height="15" fill="rgb(243,76,18)"/><text x="21.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="18" y="884" width="2" height="15" fill="rgb(231,66,10)"/><text x="21.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.14%)</title><rect x="18" y="900" width="2" height="15" fill="rgb(239,163,38)"/><text x="21.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="18" y="916" width="2" height="15" fill="rgb(218,2,52)"/><text x="21.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="18" y="932" width="2" height="15" fill="rgb(225,110,25)"/><text x="21.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="18" y="948" width="2" height="15" fill="rgb(250,171,50)"/><text x="21.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="18" y="964" width="2" height="15" fill="rgb(243,116,3)"/><text x="21.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="18" y="980" width="2" height="15" fill="rgb(252,208,47)"/><text x="21.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="18" y="996" width="2" height="15" fill="rgb(226,14,26)"/><text x="21.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (4 samples, 0.14%)</title><rect x="18" y="1012" width="2" height="15" fill="rgb(220,29,41)"/><text x="21.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="18" y="1028" width="2" height="15" fill="rgb(254,37,25)"/><text x="21.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="18" y="1044" width="2" height="15" fill="rgb(212,152,0)"/><text x="21.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="18" y="1060" width="2" height="15" fill="rgb(239,69,11)"/><text x="21.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="18" y="1076" width="2" height="15" fill="rgb(213,215,25)"/><text x="21.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="18" y="1092" width="2" height="15" fill="rgb(209,193,49)"/><text x="21.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (4 samples, 0.14%)</title><rect x="18" y="1108" width="2" height="15" fill="rgb(233,181,54)"/><text x="21.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 0.14%)</title><rect x="18" y="1124" width="2" height="15" fill="rgb(219,215,47)"/><text x="21.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="18" y="1140" width="2" height="15" fill="rgb(205,103,42)"/><text x="21.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="18" y="1156" width="2" height="15" fill="rgb(232,219,11)"/><text x="21.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="18" y="1172" width="2" height="15" fill="rgb(252,15,16)"/><text x="21.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="18" y="1188" width="2" height="15" fill="rgb(246,80,11)"/><text x="21.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="18" y="1204" width="2" height="15" fill="rgb(227,129,32)"/><text x="21.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="18" y="1220" width="2" height="15" fill="rgb(215,129,27)"/><text x="21.00" y="1230.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:172) (14 samples, 0.50%)</title><rect x="22" y="148" width="6" height="15" fill="rgb(211,131,0)"/><text x="25.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:583) (6 samples, 0.21%)</title><rect x="28" y="164" width="2" height="15" fill="rgb(216,10,43)"/><text x="31.00" y="174.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (5 samples, 0.18%)</title><rect x="28" y="180" width="2" height="15" fill="rgb(209,206,17)"/><text x="31.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (5 samples, 0.18%)</title><rect x="28" y="196" width="2" height="15" fill="rgb(253,106,6)"/><text x="31.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (4 samples, 0.14%)</title><rect x="30" y="164" width="2" height="15" fill="rgb(237,76,45)"/><text x="33.00" y="174.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1347) (5 samples, 0.18%)</title><rect x="36" y="212" width="2" height="15" fill="rgb(236,174,41)"/><text x="39.00" y="222.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py:389) (3 samples, 0.11%)</title><rect x="37" y="228" width="1" height="15" fill="rgb(236,59,30)"/><text x="40.00" y="238.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:141) (9 samples, 0.32%)</title><rect x="38" y="244" width="4" height="15" fill="rgb(231,106,29)"/><text x="41.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:504) (3 samples, 0.11%)</title><rect x="42" y="260" width="2" height="15" fill="rgb(237,176,13)"/><text x="45.00" y="270.50"></text></g><g><title>simplefilter (warnings.py:179) (3 samples, 0.11%)</title><rect x="42" y="276" width="2" height="15" fill="rgb(230,193,9)"/><text x="45.00" y="286.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:262) (18 samples, 0.64%)</title><rect x="38" y="228" width="8" height="15" fill="rgb(242,42,49)"/><text x="41.00" y="238.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:144) (9 samples, 0.32%)</title><rect x="42" y="244" width="4" height="15" fill="rgb(206,83,22)"/><text x="45.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (3 samples, 0.11%)</title><rect x="45" y="260" width="1" height="15" fill="rgb(224,94,0)"/><text x="48.00" y="270.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:279) (5 samples, 0.18%)</title><rect x="46" y="228" width="3" height="15" fill="rgb(215,207,1)"/><text x="49.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (4 samples, 0.14%)</title><rect x="47" y="244" width="2" height="15" fill="rgb(238,163,28)"/><text x="50.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;:6) (3 samples, 0.11%)</title><rect x="47" y="260" width="2" height="15" fill="rgb(217,144,35)"/><text x="50.00" y="270.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:295) (6 samples, 0.21%)</title><rect x="49" y="228" width="2" height="15" fill="rgb(242,152,13)"/><text x="52.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (5 samples, 0.18%)</title><rect x="49" y="244" width="2" height="15" fill="rgb(212,178,42)"/><text x="52.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;:6) (5 samples, 0.18%)</title><rect x="49" y="260" width="2" height="15" fill="rgb(251,226,14)"/><text x="52.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.14%)</title><rect x="49" y="276" width="2" height="15" fill="rgb(237,66,28)"/><text x="52.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py:1356) (4 samples, 0.14%)</title><rect x="49" y="292" width="2" height="15" fill="rgb(236,88,53)"/><text x="52.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c:2693) (3 samples, 0.11%)</title><rect x="50" y="308" width="1" height="15" fill="rgb(225,159,28)"/><text x="53.00" y="318.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (3 samples, 0.11%)</title><rect x="52" y="244" width="2" height="15" fill="rgb(214,57,22)"/><text x="55.00" y="254.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:303) (7 samples, 0.25%)</title><rect x="51" y="228" width="3" height="15" fill="rgb(240,213,1)"/><text x="54.00" y="238.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1592) (50 samples, 1.78%)</title><rect x="35" y="180" width="21" height="15" fill="rgb(231,111,25)"/><text x="38.00" y="190.50"></text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py:1749) (49 samples, 1.74%)</title><rect x="36" y="196" width="20" height="15" fill="rgb(208,6,23)"/><text x="39.00" y="206.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1348) (42 samples, 1.49%)</title><rect x="38" y="212" width="18" height="15" fill="rgb(243,39,27)"/><text x="41.00" y="222.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:517) (6 samples, 0.21%)</title><rect x="57" y="196" width="3" height="15" fill="rgb(239,225,13)"/><text x="60.00" y="206.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (6 samples, 0.21%)</title><rect x="57" y="212" width="3" height="15" fill="rgb(229,117,5)"/><text x="60.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.21%)</title><rect x="57" y="228" width="3" height="15" fill="rgb(243,27,30)"/><text x="60.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (6 samples, 0.21%)</title><rect x="57" y="244" width="3" height="15" fill="rgb(245,125,26)"/><text x="60.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (4 samples, 0.14%)</title><rect x="58" y="260" width="2" height="15" fill="rgb(208,85,8)"/><text x="61.00" y="270.50"></text></g><g><title>array_argpartition (methods.c:1454) (3 samples, 0.11%)</title><rect x="59" y="276" width="1" height="15" fill="rgb(205,18,5)"/><text x="62.00" y="286.50"></text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.11%)</title><rect x="61" y="212" width="1" height="15" fill="rgb(213,9,47)"/><text x="64.00" y="222.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:521) (7 samples, 0.25%)</title><rect x="60" y="196" width="3" height="15" fill="rgb(225,147,14)"/><text x="63.00" y="206.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1601) (17 samples, 0.60%)</title><rect x="57" y="180" width="7" height="15" fill="rgb(208,122,26)"/><text x="60.00" y="190.50"></text></g><g><title>_check_chunk_size (sklearn/metrics/pairwise.py:1415) (3 samples, 0.11%)</title><rect x="64" y="196" width="1" height="15" fill="rgb(229,26,12)"/><text x="67.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:642) (81 samples, 2.88%)</title><rect x="33" y="164" width="34" height="15" fill="rgb(243,94,21)"/><text x="36.00" y="174.50">kn..</text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1602) (7 samples, 0.25%)</title><rect x="64" y="180" width="3" height="15" fill="rgb(235,208,18)"/><text x="67.00" y="190.50"></text></g><g><title>_check_chunk_size (sklearn/metrics/pairwise.py:1419) (4 samples, 0.14%)</title><rect x="65" y="196" width="2" height="15" fill="rgb(223,185,0)"/><text x="68.00" y="206.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/metrics/pairwise.py:1419) (3 samples, 0.11%)</title><rect x="65" y="212" width="2" height="15" fill="rgb(217,110,10)"/><text x="68.00" y="222.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:174) (95 samples, 3.38%)</title><rect x="28" y="148" width="39" height="15" fill="rgb(236,164,26)"/><text x="31.00" y="158.50">pre..</text></g><g><title>predict (sklearn/neighbors/_regression.py:183) (9 samples, 0.32%)</title><rect x="67" y="148" width="4" height="15" fill="rgb(215,215,5)"/><text x="70.00" y="158.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (7 samples, 0.25%)</title><rect x="68" y="164" width="3" height="15" fill="rgb(206,147,46)"/><text x="71.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.25%)</title><rect x="68" y="180" width="3" height="15" fill="rgb(231,219,54)"/><text x="71.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (6 samples, 0.21%)</title><rect x="69" y="196" width="2" height="15" fill="rgb(230,129,37)"/><text x="72.00" y="206.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:54) (123 samples, 4.38%)</title><rect x="21" y="52" width="51" height="15" fill="rgb(250,107,25)"/><text x="24.00" y="62.50">&lt;modu..</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:53) (123 samples, 4.38%)</title><rect x="21" y="68" width="51" height="15" fill="rgb(234,38,4)"/><text x="24.00" y="78.50">profi..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:37) (123 samples, 4.38%)</title><rect x="21" y="84" width="51" height="15" fill="rgb(231,93,11)"/><text x="24.00" y="94.50">setup..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:31) (123 samples, 4.38%)</title><rect x="21" y="100" width="51" height="15" fill="rgb(247,46,0)"/><text x="24.00" y="110.50">profi..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (122 samples, 4.34%)</title><rect x="21" y="116" width="51" height="15" fill="rgb(246,141,41)"/><text x="24.00" y="126.50">time_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (121 samples, 4.30%)</title><rect x="22" y="132" width="50" height="15" fill="rgb(230,190,6)"/><text x="25.00" y="142.50">&lt;lamb..</text></g><g><title>array_dealloc (arrayobject.c:476) (7 samples, 0.25%)</title><rect x="82" y="228" width="3" height="15" fill="rgb(244,84,29)"/><text x="85.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (4 samples, 0.14%)</title><rect x="83" y="244" width="2" height="15" fill="rgb(227,227,16)"/><text x="86.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (19 samples, 0.68%)</title><rect x="77" y="212" width="8" height="15" fill="rgb(226,37,26)"/><text x="80.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (35 samples, 1.25%)</title><rect x="85" y="212" width="15" height="15" fill="rgb(244,88,2)"/><text x="88.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:87) (3 samples, 0.11%)</title><rect x="100" y="212" width="1" height="15" fill="rgb(234,121,23)"/><text x="103.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (15 samples, 0.53%)</title><rect x="101" y="212" width="6" height="15" fill="rgb(223,104,43)"/><text x="104.00" y="222.50"></text></g><g><title>prepare_index (mapping.c:376) (5 samples, 0.18%)</title><rect x="110" y="244" width="2" height="15" fill="rgb(242,221,40)"/><text x="113.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1539) (14 samples, 0.50%)</title><rect x="110" y="228" width="6" height="15" fill="rgb(219,111,31)"/><text x="113.00" y="238.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (3 samples, 0.11%)</title><rect x="117" y="260" width="2" height="15" fill="rgb(233,90,38)"/><text x="120.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (3 samples, 0.11%)</title><rect x="119" y="276" width="2" height="15" fill="rgb(236,140,34)"/><text x="122.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (36 samples, 1.28%)</title><rect x="107" y="212" width="15" height="15" fill="rgb(209,105,13)"/><text x="110.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1584) (16 samples, 0.57%)</title><rect x="116" y="228" width="6" height="15" fill="rgb(243,25,18)"/><text x="119.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (13 samples, 0.46%)</title><rect x="117" y="244" width="5" height="15" fill="rgb(236,136,21)"/><text x="120.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (9 samples, 0.32%)</title><rect x="119" y="260" width="3" height="15" fill="rgb(206,76,21)"/><text x="122.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:392) (10 samples, 0.36%)</title><rect x="135" y="228" width="4" height="15" fill="rgb(251,44,53)"/><text x="138.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (15 samples, 0.53%)</title><rect x="139" y="228" width="7" height="15" fill="rgb(237,204,12)"/><text x="142.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:401) (3 samples, 0.11%)</title><rect x="146" y="228" width="1" height="15" fill="rgb(249,153,30)"/><text x="149.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:423) (4 samples, 0.14%)</title><rect x="156" y="244" width="2" height="15" fill="rgb(251,88,50)"/><text x="159.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:426) (9 samples, 0.32%)</title><rect x="158" y="244" width="4" height="15" fill="rgb(210,23,12)"/><text x="161.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (9 samples, 0.32%)</title><rect x="162" y="244" width="4" height="15" fill="rgb(222,50,48)"/><text x="165.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (8 samples, 0.28%)</title><rect x="166" y="244" width="3" height="15" fill="rgb(214,74,11)"/><text x="169.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (26 samples, 0.92%)</title><rect x="169" y="244" width="11" height="15" fill="rgb(217,53,12)"/><text x="172.00" y="254.50"></text></g><g><title>unicode_eq (python3.7) (3 samples, 0.11%)</title><rect x="179" y="260" width="1" height="15" fill="rgb(237,5,11)"/><text x="182.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (10 samples, 0.36%)</title><rect x="181" y="244" width="4" height="15" fill="rgb(249,128,38)"/><text x="184.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (17 samples, 0.60%)</title><rect x="228" y="260" width="7" height="15" fill="rgb(234,1,43)"/><text x="231.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (182 samples, 6.47%)</title><rect x="235" y="260" width="77" height="15" fill="rgb(239,23,32)"/><text x="238.00" y="270.50">run (mlp..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (31 samples, 1.10%)</title><rect x="299" y="276" width="13" height="15" fill="rgb(237,16,24)"/><text x="302.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:264) (3 samples, 0.11%)</title><rect x="369" y="292" width="1" height="15" fill="rgb(206,153,13)"/><text x="372.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (21 samples, 0.75%)</title><rect x="386" y="308" width="8" height="15" fill="rgb(232,145,47)"/><text x="389.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:18) (5 samples, 0.18%)</title><rect x="394" y="308" width="3" height="15" fill="rgb(220,41,4)"/><text x="397.00" y="318.50"></text></g><g><title>array_copy (methods.c:1127) (4 samples, 0.14%)</title><rect x="400" y="324" width="2" height="15" fill="rgb(214,132,42)"/><text x="403.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.11%)</title><rect x="403" y="404" width="2" height="15" fill="rgb(231,25,52)"/><text x="406.00" y="414.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (7 samples, 0.25%)</title><rect x="403" y="356" width="3" height="15" fill="rgb(239,20,16)"/><text x="406.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (7 samples, 0.25%)</title><rect x="403" y="372" width="3" height="15" fill="rgb(222,229,33)"/><text x="406.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (7 samples, 0.25%)</title><rect x="403" y="388" width="3" height="15" fill="rgb(220,228,4)"/><text x="406.00" y="398.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (10 samples, 0.36%)</title><rect x="402" y="340" width="5" height="15" fill="rgb(209,110,41)"/><text x="405.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:333) (3 samples, 0.11%)</title><rect x="407" y="356" width="1" height="15" fill="rgb(208,148,38)"/><text x="410.00" y="366.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (3 samples, 0.11%)</title><rect x="411" y="388" width="1" height="15" fill="rgb(222,90,47)"/><text x="414.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (11 samples, 0.39%)</title><rect x="409" y="372" width="5" height="15" fill="rgb(245,104,3)"/><text x="412.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:133) (4 samples, 0.14%)</title><rect x="414" y="372" width="1" height="15" fill="rgb(221,114,34)"/><text x="417.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (4 samples, 0.14%)</title><rect x="415" y="372" width="2" height="15" fill="rgb(224,208,51)"/><text x="418.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (7 samples, 0.25%)</title><rect x="417" y="372" width="3" height="15" fill="rgb(208,122,0)"/><text x="420.00" y="382.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (5 samples, 0.18%)</title><rect x="418" y="388" width="2" height="15" fill="rgb(238,10,19)"/><text x="421.00" y="398.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (10 samples, 0.36%)</title><rect x="423" y="388" width="4" height="15" fill="rgb(227,218,21)"/><text x="426.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (10 samples, 0.36%)</title><rect x="423" y="404" width="4" height="15" fill="rgb(242,228,17)"/><text x="426.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (6 samples, 0.21%)</title><rect x="424" y="420" width="3" height="15" fill="rgb(234,201,43)"/><text x="427.00" y="430.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (43 samples, 1.53%)</title><rect x="409" y="356" width="18" height="15" fill="rgb(220,0,9)"/><text x="412.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (12 samples, 0.43%)</title><rect x="422" y="372" width="5" height="15" fill="rgb(228,8,50)"/><text x="425.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (76 samples, 2.70%)</title><rect x="397" y="308" width="31" height="15" fill="rgb(221,60,25)"/><text x="400.00" y="318.50">_r..</text></g><g><title>array_copy (methods.c:1133) (64 samples, 2.28%)</title><rect x="402" y="324" width="26" height="15" fill="rgb(244,33,25)"/><text x="405.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c:560) (52 samples, 1.85%)</title><rect x="407" y="340" width="21" height="15" fill="rgb(234,45,51)"/><text x="410.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (3 samples, 0.11%)</title><rect x="437" y="340" width="1" height="15" fill="rgb(219,48,33)"/><text x="440.00" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1102) (3 samples, 0.11%)</title><rect x="437" y="356" width="1" height="15" fill="rgb(206,1,16)"/><text x="440.00" y="366.50"></text></g><g><title>PyArray_FromArray (ctors.c:2059) (3 samples, 0.11%)</title><rect x="437" y="372" width="1" height="15" fill="rgb(248,167,36)"/><text x="440.00" y="382.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:757) (6 samples, 0.21%)</title><rect x="448" y="404" width="2" height="15" fill="rgb(244,55,14)"/><text x="451.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c:1521) (4 samples, 0.14%)</title><rect x="449" y="420" width="1" height="15" fill="rgb(221,46,17)"/><text x="452.00" y="430.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (13 samples, 0.46%)</title><rect x="446" y="372" width="6" height="15" fill="rgb(251,229,25)"/><text x="449.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (11 samples, 0.39%)</title><rect x="447" y="388" width="5" height="15" fill="rgb(216,199,54)"/><text x="450.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:865) (3 samples, 0.11%)</title><rect x="450" y="404" width="2" height="15" fill="rgb(248,221,37)"/><text x="453.00" y="414.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (22 samples, 0.78%)</title><rect x="443" y="356" width="9" height="15" fill="rgb(254,1,45)"/><text x="446.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (34 samples, 1.21%)</title><rect x="439" y="340" width="14" height="15" fill="rgb(241,57,28)"/><text x="442.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3215) (3 samples, 0.11%)</title><rect x="453" y="340" width="1" height="15" fill="rgb(206,22,15)"/><text x="456.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1616) (6 samples, 0.21%)</title><rect x="456" y="356" width="2" height="15" fill="rgb(235,183,10)"/><text x="459.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (9 samples, 0.32%)</title><rect x="459" y="388" width="4" height="15" fill="rgb(253,137,25)"/><text x="462.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (9 samples, 0.32%)</title><rect x="459" y="404" width="4" height="15" fill="rgb(250,37,43)"/><text x="462.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (9 samples, 0.32%)</title><rect x="459" y="420" width="4" height="15" fill="rgb(228,196,19)"/><text x="462.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.25%)</title><rect x="460" y="436" width="3" height="15" fill="rgb(205,209,43)"/><text x="463.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (17 samples, 0.60%)</title><rect x="458" y="356" width="7" height="15" fill="rgb(241,127,34)"/><text x="461.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (17 samples, 0.60%)</title><rect x="458" y="372" width="7" height="15" fill="rgb(249,61,22)"/><text x="461.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (8 samples, 0.28%)</title><rect x="466" y="356" width="4" height="15" fill="rgb(210,181,47)"/><text x="469.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1355) (4 samples, 0.14%)</title><rect x="468" y="372" width="2" height="15" fill="rgb(233,77,27)"/><text x="471.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (36 samples, 1.28%)</title><rect x="456" y="340" width="15" height="15" fill="rgb(211,226,39)"/><text x="459.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (88 samples, 3.13%)</title><rect x="436" y="324" width="37" height="15" fill="rgb(235,189,7)"/><text x="439.00" y="334.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (4 samples, 0.14%)</title><rect x="471" y="340" width="2" height="15" fill="rgb(208,27,24)"/><text x="474.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4751) (3 samples, 0.11%)</title><rect x="473" y="324" width="1" height="15" fill="rgb(205,108,29)"/><text x="476.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (110 samples, 3.91%)</title><rect x="428" y="308" width="47" height="15" fill="rgb(223,40,44)"/><text x="431.00" y="318.50">_run..</text></g><g><title>_buffer_clear_info (buffer.c:723) (6 samples, 0.21%)</title><rect x="489" y="356" width="3" height="15" fill="rgb(234,101,7)"/><text x="492.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (13 samples, 0.46%)</title><rect x="488" y="324" width="6" height="15" fill="rgb(211,2,10)"/><text x="491.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (12 samples, 0.43%)</title><rect x="489" y="340" width="5" height="15" fill="rgb(249,77,17)"/><text x="492.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (5 samples, 0.18%)</title><rect x="492" y="356" width="2" height="15" fill="rgb(253,123,22)"/><text x="495.00" y="366.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (20 samples, 0.71%)</title><rect x="496" y="324" width="8" height="15" fill="rgb(236,151,17)"/><text x="499.00" y="334.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (19 samples, 0.68%)</title><rect x="517" y="356" width="8" height="15" fill="rgb(210,100,28)"/><text x="520.00" y="366.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (8 samples, 0.28%)</title><rect x="525" y="356" width="4" height="15" fill="rgb(244,215,39)"/><text x="528.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (10 samples, 0.36%)</title><rect x="555" y="388" width="4" height="15" fill="rgb(250,69,31)"/><text x="558.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (56 samples, 1.99%)</title><rect x="542" y="372" width="24" height="15" fill="rgb(237,55,50)"/><text x="545.00" y="382.50">_..</text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (15 samples, 0.53%)</title><rect x="559" y="388" width="7" height="15" fill="rgb(228,216,19)"/><text x="562.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (11 samples, 0.39%)</title><rect x="566" y="372" width="4" height="15" fill="rgb(254,28,52)"/><text x="569.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (20 samples, 0.71%)</title><rect x="578" y="420" width="8" height="15" fill="rgb(226,40,43)"/><text x="581.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (20 samples, 0.71%)</title><rect x="578" y="436" width="8" height="15" fill="rgb(246,97,32)"/><text x="581.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (7 samples, 0.25%)</title><rect x="583" y="452" width="3" height="15" fill="rgb(206,14,36)"/><text x="586.00" y="462.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (22 samples, 0.78%)</title><rect x="577" y="404" width="10" height="15" fill="rgb(244,202,8)"/><text x="580.00" y="414.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (23 samples, 0.82%)</title><rect x="577" y="388" width="10" height="15" fill="rgb(227,12,43)"/><text x="580.00" y="398.50"></text></g><g><title>unicode_eq (python3.7) (4 samples, 0.14%)</title><rect x="601" y="420" width="1" height="15" fill="rgb(216,141,5)"/><text x="604.00" y="430.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (37 samples, 1.32%)</title><rect x="589" y="404" width="15" height="15" fill="rgb(233,188,39)"/><text x="592.00" y="414.50"></text></g><g><title>unicode_hash (python3.7) (5 samples, 0.18%)</title><rect x="602" y="420" width="2" height="15" fill="rgb(249,6,33)"/><text x="605.00" y="430.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4519) (4 samples, 0.14%)</title><rect x="604" y="404" width="2" height="15" fill="rgb(239,118,43)"/><text x="607.00" y="414.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (3 samples, 0.11%)</title><rect x="608" y="452" width="1" height="15" fill="rgb(222,12,29)"/><text x="611.00" y="462.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:864) (5 samples, 0.18%)</title><rect x="609" y="452" width="2" height="15" fill="rgb(227,7,6)"/><text x="612.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4564) (10 samples, 0.36%)</title><rect x="607" y="404" width="4" height="15" fill="rgb(236,78,33)"/><text x="610.00" y="414.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (9 samples, 0.32%)</title><rect x="608" y="420" width="3" height="15" fill="rgb(207,202,24)"/><text x="611.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (9 samples, 0.32%)</title><rect x="608" y="436" width="3" height="15" fill="rgb(232,16,10)"/><text x="611.00" y="446.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3419) (3 samples, 0.11%)</title><rect x="614" y="436" width="2" height="15" fill="rgb(209,215,11)"/><text x="617.00" y="446.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (16 samples, 0.57%)</title><rect x="616" y="436" width="6" height="15" fill="rgb(247,50,53)"/><text x="619.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (10 samples, 0.36%)</title><rect x="618" y="452" width="4" height="15" fill="rgb(235,215,6)"/><text x="621.00" y="462.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (22 samples, 0.78%)</title><rect x="614" y="420" width="9" height="15" fill="rgb(225,150,2)"/><text x="617.00" y="430.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3663) (3 samples, 0.11%)</title><rect x="623" y="420" width="1" height="15" fill="rgb(226,28,1)"/><text x="626.00" y="430.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:444) (4 samples, 0.14%)</title><rect x="624" y="436" width="2" height="15" fill="rgb(216,183,31)"/><text x="627.00" y="446.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (13 samples, 0.46%)</title><rect x="626" y="468" width="6" height="15" fill="rgb(220,137,49)"/><text x="629.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (11 samples, 0.39%)</title><rect x="627" y="484" width="5" height="15" fill="rgb(217,97,36)"/><text x="630.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (10 samples, 0.36%)</title><rect x="633" y="500" width="4" height="15" fill="rgb(226,173,7)"/><text x="636.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (8 samples, 0.28%)</title><rect x="634" y="516" width="3" height="15" fill="rgb(210,24,7)"/><text x="637.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (8 samples, 0.28%)</title><rect x="634" y="532" width="3" height="15" fill="rgb(206,89,36)"/><text x="637.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.25%)</title><rect x="635" y="548" width="2" height="15" fill="rgb(230,176,9)"/><text x="638.00" y="558.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (5 samples, 0.18%)</title><rect x="638" y="532" width="2" height="15" fill="rgb(230,107,47)"/><text x="641.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (5 samples, 0.18%)</title><rect x="638" y="548" width="2" height="15" fill="rgb(234,90,5)"/><text x="641.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.18%)</title><rect x="638" y="564" width="2" height="15" fill="rgb(244,11,13)"/><text x="641.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (9 samples, 0.32%)</title><rect x="638" y="500" width="4" height="15" fill="rgb(244,229,7)"/><text x="641.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (9 samples, 0.32%)</title><rect x="638" y="516" width="4" height="15" fill="rgb(226,40,6)"/><text x="641.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (4 samples, 0.14%)</title><rect x="640" y="532" width="2" height="15" fill="rgb(243,202,20)"/><text x="643.00" y="542.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (4 samples, 0.14%)</title><rect x="642" y="500" width="1" height="15" fill="rgb(242,94,33)"/><text x="645.00" y="510.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (45 samples, 1.60%)</title><rect x="626" y="436" width="19" height="15" fill="rgb(241,45,24)"/><text x="629.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (45 samples, 1.60%)</title><rect x="626" y="452" width="19" height="15" fill="rgb(229,139,34)"/><text x="629.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (30 samples, 1.07%)</title><rect x="632" y="468" width="13" height="15" fill="rgb(227,175,34)"/><text x="635.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (29 samples, 1.03%)</title><rect x="632" y="484" width="13" height="15" fill="rgb(216,126,33)"/><text x="635.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:415) (3 samples, 0.11%)</title><rect x="645" y="452" width="2" height="15" fill="rgb(215,145,25)"/><text x="648.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:199) (3 samples, 0.11%)</title><rect x="647" y="468" width="1" height="15" fill="rgb(241,138,48)"/><text x="650.00" y="478.50"></text></g><g><title>PyArray_FailUnlessWriteable (arrayobject.c:691) (3 samples, 0.11%)</title><rect x="647" y="484" width="1" height="15" fill="rgb(254,193,14)"/><text x="650.00" y="494.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:57) (4 samples, 0.14%)</title><rect x="650" y="484" width="2" height="15" fill="rgb(240,64,11)"/><text x="653.00" y="494.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (9 samples, 0.32%)</title><rect x="652" y="484" width="4" height="15" fill="rgb(249,89,1)"/><text x="655.00" y="494.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c:741) (3 samples, 0.11%)</title><rect x="654" y="500" width="2" height="15" fill="rgb(232,113,23)"/><text x="657.00" y="510.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (17 samples, 0.60%)</title><rect x="650" y="468" width="7" height="15" fill="rgb(218,34,42)"/><text x="653.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (32 samples, 1.14%)</title><rect x="645" y="436" width="13" height="15" fill="rgb(231,198,50)"/><text x="648.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (27 samples, 0.96%)</title><rect x="647" y="452" width="11" height="15" fill="rgb(227,40,28)"/><text x="650.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:110) (3 samples, 0.11%)</title><rect x="658" y="452" width="2" height="15" fill="rgb(208,195,7)"/><text x="661.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (7 samples, 0.25%)</title><rect x="661" y="452" width="3" height="15" fill="rgb(205,179,52)"/><text x="664.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (6 samples, 0.21%)</title><rect x="661" y="468" width="3" height="15" fill="rgb(228,132,12)"/><text x="664.00" y="478.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c:1442) (3 samples, 0.11%)</title><rect x="665" y="468" width="1" height="15" fill="rgb(209,218,28)"/><text x="668.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (7 samples, 0.25%)</title><rect x="664" y="452" width="3" height="15" fill="rgb(252,77,41)"/><text x="667.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (7 samples, 0.25%)</title><rect x="668" y="452" width="3" height="15" fill="rgb(224,198,0)"/><text x="671.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (3 samples, 0.11%)</title><rect x="671" y="452" width="1" height="15" fill="rgb(210,133,39)"/><text x="674.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (3 samples, 0.11%)</title><rect x="672" y="452" width="2" height="15" fill="rgb(229,62,50)"/><text x="675.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (40 samples, 1.42%)</title><rect x="658" y="436" width="17" height="15" fill="rgb(224,200,4)"/><text x="661.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (3 samples, 0.11%)</title><rect x="674" y="452" width="1" height="15" fill="rgb(248,134,11)"/><text x="677.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:550) (4 samples, 0.14%)</title><rect x="675" y="436" width="2" height="15" fill="rgb(239,148,48)"/><text x="678.00" y="446.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (3 samples, 0.11%)</title><rect x="680" y="468" width="1" height="15" fill="rgb(232,69,22)"/><text x="683.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (11 samples, 0.39%)</title><rect x="679" y="436" width="5" height="15" fill="rgb(229,132,4)"/><text x="682.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (10 samples, 0.36%)</title><rect x="679" y="452" width="5" height="15" fill="rgb(218,127,43)"/><text x="682.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:255) (6 samples, 0.21%)</title><rect x="681" y="468" width="3" height="15" fill="rgb(215,71,53)"/><text x="684.00" y="478.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (4 samples, 0.14%)</title><rect x="685" y="452" width="2" height="15" fill="rgb(253,186,49)"/><text x="688.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (7 samples, 0.25%)</title><rect x="685" y="436" width="2" height="15" fill="rgb(253,189,45)"/><text x="688.00" y="446.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (185 samples, 6.58%)</title><rect x="611" y="404" width="78" height="15" fill="rgb(231,8,41)"/><text x="614.00" y="414.50">PyUFunc_G..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (155 samples, 5.51%)</title><rect x="624" y="420" width="65" height="15" fill="rgb(219,120,9)"/><text x="627.00" y="430.50">PyUFunc..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:595) (4 samples, 0.14%)</title><rect x="687" y="436" width="2" height="15" fill="rgb(234,47,32)"/><text x="690.00" y="446.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c:66) (3 samples, 0.11%)</title><rect x="688" y="452" width="1" height="15" fill="rgb(211,57,38)"/><text x="691.00" y="462.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (244 samples, 8.68%)</title><rect x="587" y="388" width="103" height="15" fill="rgb(206,207,19)"/><text x="590.00" y="398.50">ufunc_reduce..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (425 samples, 15.12%)</title><rect x="512" y="340" width="178" height="15" fill="rgb(213,21,17)"/><text x="515.00" y="350.50">array_implement_array_f..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (384 samples, 13.66%)</title><rect x="529" y="356" width="161" height="15" fill="rgb(237,76,41)"/><text x="532.00" y="366.50">sum (numpy/core/from..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (285 samples, 10.14%)</title><rect x="570" y="372" width="120" height="15" fill="rgb(243,101,7)"/><text x="573.00" y="382.50">_wrapreduction..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (761 samples, 27.07%)</title><rect x="371" y="292" width="319" height="15" fill="rgb(225,191,34)"/><text x="374.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py:269)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (514 samples, 18.29%)</title><rect x="475" y="308" width="215" height="15" fill="rgb(226,109,17)"/><text x="478.00" y="318.50">_run (mlprodict/onnxrt/ops_c..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (444 samples, 15.80%)</title><rect x="504" y="324" width="186" height="15" fill="rgb(224,140,5)"/><text x="507.00" y="334.50">sum (&lt;__array_function__..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (806 samples, 28.67%)</title><rect x="353" y="276" width="339" height="15" fill="rgb(252,57,50)"/><text x="356.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py:348)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:274) (3 samples, 0.11%)</title><rect x="690" y="292" width="2" height="15" fill="rgb(253,127,32)"/><text x="693.00" y="302.50"></text></g><g><title>arraydescr_richcompare (descriptor.c:3210) (3 samples, 0.11%)</title><rect x="707" y="292" width="1" height="15" fill="rgb(212,180,49)"/><text x="710.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (46 samples, 1.64%)</title><rect x="692" y="276" width="19" height="15" fill="rgb(218,166,49)"/><text x="695.00" y="286.50"></text></g><g><title>arraydescr_richcompare (descriptor.c:3248) (3 samples, 0.11%)</title><rect x="710" y="292" width="1" height="15" fill="rgb(250,49,22)"/><text x="713.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (8 samples, 0.28%)</title><rect x="715" y="292" width="4" height="15" fill="rgb(233,169,36)"/><text x="718.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:519) (7 samples, 0.25%)</title><rect x="721" y="308" width="3" height="15" fill="rgb(223,122,43)"/><text x="724.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:527) (4 samples, 0.14%)</title><rect x="724" y="308" width="2" height="15" fill="rgb(242,176,49)"/><text x="727.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:431) (3 samples, 0.11%)</title><rect x="735" y="340" width="1" height="15" fill="rgb(241,157,13)"/><text x="738.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (3 samples, 0.11%)</title><rect x="737" y="356" width="1" height="15" fill="rgb(234,118,53)"/><text x="740.00" y="366.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (5 samples, 0.18%)</title><rect x="736" y="340" width="2" height="15" fill="rgb(206,61,21)"/><text x="739.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (9 samples, 0.32%)</title><rect x="735" y="324" width="4" height="15" fill="rgb(248,90,10)"/><text x="738.00" y="334.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1867) (3 samples, 0.11%)</title><rect x="743" y="388" width="2" height="15" fill="rgb(224,49,11)"/><text x="746.00" y="398.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src:4417) (3 samples, 0.11%)</title><rect x="745" y="420" width="1" height="15" fill="rgb(248,55,8)"/><text x="748.00" y="430.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src:4473) (4 samples, 0.14%)</title><rect x="746" y="420" width="2" height="15" fill="rgb(239,26,16)"/><text x="749.00" y="430.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1905) (10 samples, 0.36%)</title><rect x="745" y="388" width="4" height="15" fill="rgb(206,12,9)"/><text x="748.00" y="398.50"></text></g><g><title>promote_types (convert_datatype.c:1043) (10 samples, 0.36%)</title><rect x="745" y="404" width="4" height="15" fill="rgb(237,150,28)"/><text x="748.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (17 samples, 0.60%)</title><rect x="743" y="372" width="7" height="15" fill="rgb(254,63,32)"/><text x="746.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (24 samples, 0.85%)</title><rect x="741" y="340" width="10" height="15" fill="rgb(213,149,0)"/><text x="744.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (22 samples, 0.78%)</title><rect x="742" y="356" width="9" height="15" fill="rgb(215,87,27)"/><text x="745.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3196) (4 samples, 0.14%)</title><rect x="751" y="340" width="2" height="15" fill="rgb(241,142,20)"/><text x="754.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3215) (4 samples, 0.14%)</title><rect x="753" y="340" width="1" height="15" fill="rgb(254,200,2)"/><text x="756.00" y="350.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c:1962) (4 samples, 0.14%)</title><rect x="753" y="356" width="1" height="15" fill="rgb(254,125,6)"/><text x="756.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (4 samples, 0.14%)</title><rect x="754" y="340" width="2" height="15" fill="rgb(230,103,23)"/><text x="757.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (3 samples, 0.11%)</title><rect x="756" y="340" width="2" height="15" fill="rgb(242,176,22)"/><text x="759.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1616) (4 samples, 0.14%)</title><rect x="758" y="356" width="1" height="15" fill="rgb(235,7,24)"/><text x="761.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (6 samples, 0.21%)</title><rect x="760" y="388" width="3" height="15" fill="rgb(229,219,24)"/><text x="763.00" y="398.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c:1104) (3 samples, 0.11%)</title><rect x="765" y="420" width="1" height="15" fill="rgb(233,187,31)"/><text x="768.00" y="430.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (5 samples, 0.18%)</title><rect x="765" y="404" width="2" height="15" fill="rgb(240,177,11)"/><text x="768.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (11 samples, 0.39%)</title><rect x="763" y="388" width="5" height="15" fill="rgb(237,161,20)"/><text x="766.00" y="398.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c:1544) (3 samples, 0.11%)</title><rect x="770" y="404" width="1" height="15" fill="rgb(252,48,37)"/><text x="773.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (10 samples, 0.36%)</title><rect x="768" y="388" width="4" height="15" fill="rgb(225,217,39)"/><text x="771.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.11%)</title><rect x="777" y="452" width="2" height="15" fill="rgb(213,82,36)"/><text x="780.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (3 samples, 0.11%)</title><rect x="780" y="452" width="1" height="15" fill="rgb(230,63,11)"/><text x="783.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (15 samples, 0.53%)</title><rect x="776" y="404" width="6" height="15" fill="rgb(231,40,26)"/><text x="779.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (13 samples, 0.46%)</title><rect x="776" y="420" width="6" height="15" fill="rgb(216,221,21)"/><text x="779.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (11 samples, 0.39%)</title><rect x="777" y="436" width="5" height="15" fill="rgb(217,209,37)"/><text x="780.00" y="446.50"></text></g><g><title>npyiter_replace_axisdata (nditer_constr.c:1937) (3 samples, 0.11%)</title><rect x="783" y="420" width="1" height="15" fill="rgb(207,3,28)"/><text x="786.00" y="430.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2858) (5 samples, 0.18%)</title><rect x="782" y="404" width="2" height="15" fill="rgb(218,167,23)"/><text x="785.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (28 samples, 1.00%)</title><rect x="773" y="388" width="12" height="15" fill="rgb(235,45,15)"/><text x="776.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (4 samples, 0.14%)</title><rect x="785" y="388" width="2" height="15" fill="rgb(211,19,13)"/><text x="788.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (67 samples, 2.38%)</title><rect x="760" y="372" width="28" height="15" fill="rgb(240,154,44)"/><text x="763.00" y="382.50">i..</text></g><g><title>iterator_loop (ufunc_object.c:1532) (3 samples, 0.11%)</title><rect x="789" y="372" width="1" height="15" fill="rgb(238,167,39)"/><text x="792.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (10 samples, 0.36%)</title><rect x="790" y="372" width="4" height="15" fill="rgb(247,213,23)"/><text x="793.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (5 samples, 0.18%)</title><rect x="792" y="388" width="2" height="15" fill="rgb(238,177,12)"/><text x="795.00" y="398.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (4 samples, 0.14%)</title><rect x="795" y="388" width="2" height="15" fill="rgb(241,166,17)"/><text x="798.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (3 samples, 0.11%)</title><rect x="796" y="404" width="1" height="15" fill="rgb(221,144,49)"/><text x="799.00" y="414.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (12 samples, 0.43%)</title><rect x="795" y="372" width="5" height="15" fill="rgb(241,106,46)"/><text x="798.00" y="382.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:309) (4 samples, 0.14%)</title><rect x="798" y="388" width="2" height="15" fill="rgb(252,86,4)"/><text x="801.00" y="398.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (3 samples, 0.11%)</title><rect x="800" y="388" width="1" height="15" fill="rgb(214,80,11)"/><text x="803.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1586) (10 samples, 0.36%)</title><rect x="800" y="372" width="4" height="15" fill="rgb(245,52,24)"/><text x="803.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (7 samples, 0.25%)</title><rect x="801" y="388" width="3" height="15" fill="rgb(212,102,14)"/><text x="804.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (107 samples, 3.81%)</title><rect x="760" y="356" width="45" height="15" fill="rgb(209,31,35)"/><text x="763.00" y="366.50">exec..</text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (3 samples, 0.11%)</title><rect x="805" y="372" width="1" height="15" fill="rgb(213,24,29)"/><text x="808.00" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (3 samples, 0.11%)</title><rect x="805" y="388" width="1" height="15" fill="rgb(252,23,5)"/><text x="808.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (117 samples, 4.16%)</title><rect x="758" y="340" width="49" height="15" fill="rgb(230,162,35)"/><text x="761.00" y="350.50">PyUF..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (5 samples, 0.18%)</title><rect x="805" y="356" width="2" height="15" fill="rgb(208,151,6)"/><text x="808.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (4 samples, 0.14%)</title><rect x="807" y="340" width="1" height="15" fill="rgb(212,152,51)"/><text x="810.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (167 samples, 5.94%)</title><rect x="739" y="324" width="70" height="15" fill="rgb(252,159,41)"/><text x="742.00" y="334.50">ufunc_g..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (236 samples, 8.40%)</title><rect x="711" y="276" width="99" height="15" fill="rgb(226,16,42)"/><text x="714.00" y="286.50">run (mlprod..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (218 samples, 7.76%)</title><rect x="719" y="292" width="91" height="15" fill="rgb(218,10,22)"/><text x="722.00" y="302.50">run (mlpro..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (200 samples, 7.11%)</title><rect x="726" y="308" width="84" height="15" fill="rgb(210,174,19)"/><text x="729.00" y="318.50">_run (mlp..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,197 samples, 42.58%)</title><rect x="312" y="260" width="502" height="15" fill="rgb(228,9,42)"/><text x="315.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (10 samples, 0.36%)</title><rect x="810" y="276" width="4" height="15" fill="rgb(231,153,17)"/><text x="813.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (52 samples, 1.85%)</title><rect x="814" y="260" width="22" height="15" fill="rgb(208,56,13)"/><text x="817.00" y="270.50">r..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (40 samples, 1.42%)</title><rect x="836" y="260" width="17" height="15" fill="rgb(230,188,52)"/><text x="839.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (10 samples, 0.36%)</title><rect x="853" y="260" width="4" height="15" fill="rgb(245,125,35)"/><text x="856.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (96 samples, 3.42%)</title><rect x="857" y="260" width="40" height="15" fill="rgb(235,139,51)"/><text x="860.00" y="270.50">run..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,736 samples, 61.76%)</title><rect x="185" y="244" width="729" height="15" fill="rgb(233,15,48)"/><text x="188.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (39 samples, 1.39%)</title><rect x="897" y="260" width="17" height="15" fill="rgb(237,189,36)"/><text x="900.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (50 samples, 1.78%)</title><rect x="914" y="244" width="21" height="15" fill="rgb(205,187,25)"/><text x="917.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (27 samples, 0.96%)</title><rect x="924" y="260" width="11" height="15" fill="rgb(254,166,50)"/><text x="927.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:546) (4 samples, 0.14%)</title><rect x="935" y="244" width="2" height="15" fill="rgb(205,23,32)"/><text x="938.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (3 samples, 0.11%)</title><rect x="938" y="276" width="1" height="15" fill="rgb(225,13,3)"/><text x="941.00" y="286.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (4 samples, 0.14%)</title><rect x="939" y="276" width="2" height="15" fill="rgb(236,129,29)"/><text x="942.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (11 samples, 0.39%)</title><rect x="937" y="244" width="4" height="15" fill="rgb(238,73,16)"/><text x="940.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (9 samples, 0.32%)</title><rect x="938" y="260" width="3" height="15" fill="rgb(227,204,34)"/><text x="941.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (1,953 samples, 69.48%)</title><rect x="122" y="212" width="820" height="15" fill="rgb(218,220,54)"/><text x="125.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,895 samples, 67.41%)</title><rect x="147" y="228" width="795" height="15" fill="rgb(250,62,24)"/><text x="150.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (23 samples, 0.82%)</title><rect x="942" y="212" width="10" height="15" fill="rgb(242,112,40)"/><text x="945.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (10 samples, 0.36%)</title><rect x="948" y="228" width="4" height="15" fill="rgb(251,172,24)"/><text x="951.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (22 samples, 0.78%)</title><rect x="952" y="212" width="9" height="15" fill="rgb(219,201,8)"/><text x="955.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (21 samples, 0.75%)</title><rect x="977" y="228" width="8" height="15" fill="rgb(242,155,35)"/><text x="980.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:225) (4 samples, 0.14%)</title><rect x="990" y="244" width="2" height="15" fill="rgb(243,133,33)"/><text x="993.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (15 samples, 0.53%)</title><rect x="996" y="260" width="7" height="15" fill="rgb(232,91,19)"/><text x="999.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (21 samples, 0.75%)</title><rect x="1003" y="260" width="9" height="15" fill="rgb(225,63,44)"/><text x="1006.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (12 samples, 0.43%)</title><rect x="1006" y="276" width="6" height="15" fill="rgb(239,83,52)"/><text x="1009.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:576) (11 samples, 0.39%)</title><rect x="1012" y="260" width="4" height="15" fill="rgb(250,80,26)"/><text x="1015.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (22 samples, 0.78%)</title><rect x="1016" y="260" width="9" height="15" fill="rgb(231,185,28)"/><text x="1019.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:583) (3 samples, 0.11%)</title><rect x="1025" y="260" width="2" height="15" fill="rgb(227,151,43)"/><text x="1028.00" y="270.50"></text></g><g><title>array_reshape (methods.c:179) (6 samples, 0.21%)</title><rect x="1040" y="276" width="2" height="15" fill="rgb(240,41,11)"/><text x="1043.00" y="286.50"></text></g><g><title>array_reshape (methods.c:186) (9 samples, 0.32%)</title><rect x="1042" y="276" width="4" height="15" fill="rgb(254,48,11)"/><text x="1045.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:53) (8 samples, 0.28%)</title><rect x="1043" y="292" width="3" height="15" fill="rgb(214,140,37)"/><text x="1046.00" y="302.50"></text></g><g><title>array_reshape (methods.c:195) (24 samples, 0.85%)</title><rect x="1046" y="276" width="10" height="15" fill="rgb(218,34,42)"/><text x="1049.00" y="286.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (5 samples, 0.18%)</title><rect x="1054" y="292" width="2" height="15" fill="rgb(237,35,34)"/><text x="1057.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (5 samples, 0.18%)</title><rect x="1057" y="324" width="2" height="15" fill="rgb(241,185,36)"/><text x="1060.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (4 samples, 0.14%)</title><rect x="1060" y="324" width="2" height="15" fill="rgb(208,97,1)"/><text x="1063.00" y="334.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (16 samples, 0.57%)</title><rect x="1057" y="308" width="7" height="15" fill="rgb(253,57,44)"/><text x="1060.00" y="318.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (186 samples, 6.62%)</title><rect x="986" y="228" width="78" height="15" fill="rgb(217,61,1)"/><text x="989.00" y="238.50">expand_di..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (170 samples, 6.05%)</title><rect x="993" y="244" width="71" height="15" fill="rgb(232,70,16)"/><text x="996.00" y="254.50">array_im..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (89 samples, 3.17%)</title><rect x="1027" y="260" width="37" height="15" fill="rgb(207,115,42)"/><text x="1030.00" y="270.50">exp..</text></g><g><title>array_reshape (methods.c:210) (19 samples, 0.68%)</title><rect x="1056" y="276" width="8" height="15" fill="rgb(251,213,42)"/><text x="1059.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (19 samples, 0.68%)</title><rect x="1056" y="292" width="8" height="15" fill="rgb(242,111,38)"/><text x="1059.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (246 samples, 8.75%)</title><rect x="961" y="212" width="103" height="15" fill="rgb(218,19,23)"/><text x="964.00" y="222.50">_run (mlprod..</text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (7 samples, 0.25%)</title><rect x="1065" y="308" width="3" height="15" fill="rgb(246,105,53)"/><text x="1068.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (6 samples, 0.21%)</title><rect x="1065" y="324" width="3" height="15" fill="rgb(222,148,34)"/><text x="1068.00" y="334.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:123) (3 samples, 0.11%)</title><rect x="1068" y="308" width="1" height="15" fill="rgb(211,111,49)"/><text x="1071.00" y="318.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (17 samples, 0.60%)</title><rect x="1065" y="260" width="7" height="15" fill="rgb(218,224,35)"/><text x="1068.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (17 samples, 0.60%)</title><rect x="1065" y="276" width="7" height="15" fill="rgb(208,190,51)"/><text x="1068.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (17 samples, 0.60%)</title><rect x="1065" y="292" width="7" height="15" fill="rgb(233,16,16)"/><text x="1068.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:129) (6 samples, 0.21%)</title><rect x="1069" y="308" width="3" height="15" fill="rgb(229,154,6)"/><text x="1072.00" y="318.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (3 samples, 0.11%)</title><rect x="1075" y="372" width="1" height="15" fill="rgb(247,19,42)"/><text x="1078.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (33 samples, 1.17%)</title><rect x="1064" y="212" width="14" height="15" fill="rgb(252,115,26)"/><text x="1067.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (32 samples, 1.14%)</title><rect x="1065" y="228" width="13" height="15" fill="rgb(245,112,46)"/><text x="1068.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (32 samples, 1.14%)</title><rect x="1065" y="244" width="13" height="15" fill="rgb(218,97,39)"/><text x="1068.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (14 samples, 0.50%)</title><rect x="1072" y="260" width="6" height="15" fill="rgb(217,35,50)"/><text x="1075.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (14 samples, 0.50%)</title><rect x="1072" y="276" width="6" height="15" fill="rgb(232,186,8)"/><text x="1075.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (14 samples, 0.50%)</title><rect x="1072" y="292" width="6" height="15" fill="rgb(232,227,35)"/><text x="1075.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (14 samples, 0.50%)</title><rect x="1072" y="308" width="6" height="15" fill="rgb(225,148,27)"/><text x="1075.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (14 samples, 0.50%)</title><rect x="1072" y="324" width="6" height="15" fill="rgb(227,140,25)"/><text x="1075.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (12 samples, 0.43%)</title><rect x="1073" y="340" width="5" height="15" fill="rgb(222,100,47)"/><text x="1076.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (10 samples, 0.36%)</title><rect x="1074" y="356" width="4" height="15" fill="rgb(207,189,53)"/><text x="1077.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (4 samples, 0.14%)</title><rect x="1077" y="372" width="1" height="15" fill="rgb(234,42,20)"/><text x="1080.00" y="382.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (4 samples, 0.14%)</title><rect x="1077" y="388" width="1" height="15" fill="rgb(227,192,49)"/><text x="1080.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (4 samples, 0.14%)</title><rect x="1077" y="404" width="1" height="15" fill="rgb(231,55,12)"/><text x="1080.00" y="414.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (3 samples, 0.11%)</title><rect x="1080" y="244" width="2" height="15" fill="rgb(210,29,11)"/><text x="1083.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (3 samples, 0.11%)</title><rect x="1080" y="260" width="2" height="15" fill="rgb(209,131,40)"/><text x="1083.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.11%)</title><rect x="1080" y="276" width="2" height="15" fill="rgb(236,142,6)"/><text x="1083.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (3 samples, 0.11%)</title><rect x="1080" y="292" width="2" height="15" fill="rgb(214,169,1)"/><text x="1083.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.11%)</title><rect x="1080" y="308" width="2" height="15" fill="rgb(247,10,9)"/><text x="1083.00" y="318.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (3 samples, 0.11%)</title><rect x="1082" y="260" width="1" height="15" fill="rgb(221,82,9)"/><text x="1085.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.11%)</title><rect x="1082" y="276" width="1" height="15" fill="rgb(234,107,1)"/><text x="1085.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (3 samples, 0.11%)</title><rect x="1082" y="292" width="1" height="15" fill="rgb(205,32,8)"/><text x="1085.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.11%)</title><rect x="1082" y="308" width="1" height="15" fill="rgb(243,227,12)"/><text x="1085.00" y="318.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (12 samples, 0.43%)</title><rect x="1080" y="228" width="5" height="15" fill="rgb(252,47,29)"/><text x="1083.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (7 samples, 0.25%)</title><rect x="1082" y="244" width="3" height="15" fill="rgb(212,191,53)"/><text x="1085.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.11%)</title><rect x="1083" y="260" width="2" height="15" fill="rgb(229,16,37)"/><text x="1086.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (15 samples, 0.53%)</title><rect x="1079" y="212" width="6" height="15" fill="rgb(241,145,33)"/><text x="1082.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (2,413 samples, 85.84%)</title><rect x="75" y="196" width="1012" height="15" fill="rgb(212,188,16)"/><text x="78.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>array_dealloc (arrayobject.c:520) (3 samples, 0.11%)</title><rect x="1086" y="212" width="1" height="15" fill="rgb(209,75,15)"/><text x="1089.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (11 samples, 0.39%)</title><rect x="1087" y="196" width="5" height="15" fill="rgb(215,35,17)"/><text x="1090.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py:24) (11 samples, 0.39%)</title><rect x="1087" y="212" width="5" height="15" fill="rgb(211,138,28)"/><text x="1090.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:6) (8 samples, 0.28%)</title><rect x="1089" y="228" width="3" height="15" fill="rgb(247,190,27)"/><text x="1092.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 0.28%)</title><rect x="1089" y="244" width="3" height="15" fill="rgb(229,101,49)"/><text x="1092.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py:2911) (7 samples, 0.25%)</title><rect x="1089" y="260" width="3" height="15" fill="rgb(238,91,18)"/><text x="1092.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (3 samples, 0.11%)</title><rect x="1091" y="276" width="1" height="15" fill="rgb(254,16,40)"/><text x="1094.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (3 samples, 0.11%)</title><rect x="1091" y="292" width="1" height="15" fill="rgb(241,29,5)"/><text x="1094.00" y="302.50"></text></g><g><title>_mean (numpy/core/_methods.py:151) (6 samples, 0.21%)</title><rect x="1094" y="292" width="2" height="15" fill="rgb(245,124,49)"/><text x="1097.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 0.14%)</title><rect x="1095" y="308" width="1" height="15" fill="rgb(213,62,44)"/><text x="1098.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (3 samples, 0.11%)</title><rect x="1095" y="324" width="1" height="15" fill="rgb(250,41,28)"/><text x="1098.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (3 samples, 0.11%)</title><rect x="1095" y="340" width="1" height="15" fill="rgb(215,225,37)"/><text x="1098.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py:29) (13 samples, 0.46%)</title><rect x="1092" y="228" width="6" height="15" fill="rgb(242,37,42)"/><text x="1095.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (11 samples, 0.39%)</title><rect x="1093" y="244" width="5" height="15" fill="rgb(206,91,31)"/><text x="1096.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 0.39%)</title><rect x="1093" y="260" width="5" height="15" fill="rgb(250,89,34)"/><text x="1096.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (11 samples, 0.39%)</title><rect x="1093" y="276" width="5" height="15" fill="rgb(205,141,6)"/><text x="1096.00" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py:154) (3 samples, 0.11%)</title><rect x="1096" y="292" width="2" height="15" fill="rgb(210,38,43)"/><text x="1099.00" y="302.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.11%)</title><rect x="1096" y="308" width="2" height="15" fill="rgb(220,173,50)"/><text x="1099.00" y="318.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (2,440 samples, 86.80%)</title><rect x="75" y="180" width="1024" height="15" fill="rgb(249,194,0)"/><text x="78.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (16 samples, 0.57%)</title><rect x="1092" y="196" width="7" height="15" fill="rgb(231,45,4)"/><text x="1095.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (16 samples, 0.57%)</title><rect x="1092" y="212" width="7" height="15" fill="rgb(211,147,15)"/><text x="1095.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py:19) (3 samples, 0.11%)</title><rect x="1098" y="228" width="1" height="15" fill="rgb(228,82,14)"/><text x="1101.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.11%)</title><rect x="1098" y="244" width="1" height="15" fill="rgb(230,8,19)"/><text x="1101.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (3 samples, 0.11%)</title><rect x="1100" y="180" width="1" height="15" fill="rgb(242,48,38)"/><text x="1103.00" y="190.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (2,455 samples, 87.34%)</title><rect x="73" y="164" width="1031" height="15" fill="rgb(250,101,38)"/><text x="76.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (6 samples, 0.21%)</title><rect x="1101" y="180" width="3" height="15" fill="rgb(236,19,44)"/><text x="1104.00" y="190.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:61) (2,461 samples, 87.55%)</title><rect x="72" y="52" width="1034" height="15" fill="rgb(242,167,1)"/><text x="75.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:61)</text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:60) (2,461 samples, 87.55%)</title><rect x="72" y="68" width="1034" height="15" fill="rgb(237,37,50)"/><text x="75.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:60)</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:37) (2,460 samples, 87.51%)</title><rect x="73" y="84" width="1033" height="15" fill="rgb(209,216,22)"/><text x="76.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:37)</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:31) (2,460 samples, 87.51%)</title><rect x="73" y="100" width="1033" height="15" fill="rgb(239,34,35)"/><text x="76.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (2,460 samples, 87.51%)</title><rect x="73" y="116" width="1033" height="15" fill="rgb(229,25,45)"/><text x="76.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (2,460 samples, 87.51%)</title><rect x="73" y="132" width="1033" height="15" fill="rgb(233,17,10)"/><text x="76.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,460 samples, 87.51%)</title><rect x="73" y="148" width="1033" height="15" fill="rgb(222,49,54)"/><text x="76.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1110" y="388" width="1" height="15" fill="rgb(210,163,43)"/><text x="1113.00" y="398.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="1111" y="388" width="3" height="15" fill="rgb(215,194,17)"/><text x="1114.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="1111" y="404" width="3" height="15" fill="rgb(211,174,41)"/><text x="1114.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1120" y="452" width="1" height="15" fill="rgb(209,139,0)"/><text x="1123.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.36%)</title><rect x="1122" y="452" width="5" height="15" fill="rgb(217,69,6)"/><text x="1125.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="1124" y="468" width="3" height="15" fill="rgb(241,174,5)"/><text x="1127.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 0.92%)</title><rect x="1117" y="436" width="11" height="15" fill="rgb(208,151,8)"/><text x="1120.00" y="446.50"></text></g><g><title>onnxruntime::SessionState::GetMemoryPatternGroup (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1127" y="452" width="1" height="15" fill="rgb(247,48,43)"/><text x="1130.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="1128" y="436" width="3" height="15" fill="rgb(216,132,12)"/><text x="1131.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="1128" y="452" width="3" height="15" fill="rgb(225,48,15)"/><text x="1131.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.25%)</title><rect x="1128" y="468" width="3" height="15" fill="rgb(248,133,18)"/><text x="1131.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="1129" y="484" width="2" height="15" fill="rgb(233,52,29)"/><text x="1132.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="1129" y="500" width="2" height="15" fill="rgb(245,201,32)"/><text x="1132.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="1132" y="436" width="2" height="15" fill="rgb(238,147,4)"/><text x="1135.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="1132" y="452" width="2" height="15" fill="rgb(247,102,11)"/><text x="1135.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="1132" y="468" width="2" height="15" fill="rgb(221,195,21)"/><text x="1135.00" y="478.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1133" y="484" width="1" height="15" fill="rgb(231,51,16)"/><text x="1136.00" y="494.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1133" y="500" width="1" height="15" fill="rgb(230,170,8)"/><text x="1136.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1134" y="436" width="1" height="15" fill="rgb(240,89,39)"/><text x="1137.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="1135" y="436" width="4" height="15" fill="rgb(226,1,2)"/><text x="1138.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="1137" y="452" width="2" height="15" fill="rgb(208,63,22)"/><text x="1140.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1137" y="468" width="2" height="15" fill="rgb(242,57,30)"/><text x="1140.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1137" y="484" width="2" height="15" fill="rgb(220,226,54)"/><text x="1140.00" y="494.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1157" y="564" width="1" height="15" fill="rgb(208,189,42)"/><text x="1160.00" y="574.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.32%)</title><rect x="1156" y="516" width="4" height="15" fill="rgb(228,217,2)"/><text x="1159.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="1156" y="532" width="4" height="15" fill="rgb(212,173,14)"/><text x="1159.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="1156" y="548" width="4" height="15" fill="rgb(229,64,1)"/><text x="1159.00" y="558.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.43%)</title><rect x="1155" y="468" width="6" height="15" fill="rgb(245,135,40)"/><text x="1158.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.43%)</title><rect x="1155" y="484" width="6" height="15" fill="rgb(216,178,47)"/><text x="1158.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.39%)</title><rect x="1156" y="500" width="5" height="15" fill="rgb(213,79,22)"/><text x="1159.00" y="510.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="1162" y="468" width="1" height="15" fill="rgb(209,90,52)"/><text x="1165.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (62 samples, 2.21%)</title><rect x="1140" y="436" width="26" height="15" fill="rgb(242,226,51)"/><text x="1143.00" y="446.50">o..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (54 samples, 1.92%)</title><rect x="1143" y="452" width="23" height="15" fill="rgb(216,188,2)"/><text x="1146.00" y="462.50">o..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1164" y="468" width="2" height="15" fill="rgb(244,50,32)"/><text x="1167.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.11%)</title><rect x="1164" y="484" width="2" height="15" fill="rgb(211,153,10)"/><text x="1167.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.11%)</title><rect x="1164" y="500" width="2" height="15" fill="rgb(234,31,7)"/><text x="1167.00" y="510.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.11%)</title><rect x="1168" y="468" width="1" height="15" fill="rgb(228,95,14)"/><text x="1171.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1169" y="468" width="2" height="15" fill="rgb(230,209,23)"/><text x="1172.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1171" y="468" width="1" height="15" fill="rgb(229,8,16)"/><text x="1174.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2247] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1172" y="468" width="1" height="15" fill="rgb(235,46,39)"/><text x="1175.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2248] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1173" y="468" width="1" height="15" fill="rgb(244,2,37)"/><text x="1176.00" y="478.50"></text></g><g><title>OrtValue::Get&lt;onnxruntime::Tensor&gt; [clone .localalias.13] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1173" y="484" width="1" height="15" fill="rgb(239,170,51)"/><text x="1176.00" y="494.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1176" y="564" width="1" height="15" fill="rgb(237,180,30)"/><text x="1179.00" y="574.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1177" y="564" width="2" height="15" fill="rgb(220,212,34)"/><text x="1180.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1177" y="580" width="2" height="15" fill="rgb(247,218,12)"/><text x="1180.00" y="590.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.39%)</title><rect x="1174" y="468" width="5" height="15" fill="rgb(243,175,27)"/><text x="1177.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.39%)</title><rect x="1174" y="484" width="5" height="15" fill="rgb(226,99,35)"/><text x="1177.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.36%)</title><rect x="1175" y="500" width="4" height="15" fill="rgb(235,171,3)"/><text x="1178.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.36%)</title><rect x="1175" y="516" width="4" height="15" fill="rgb(213,29,9)"/><text x="1178.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.32%)</title><rect x="1175" y="532" width="4" height="15" fill="rgb(214,42,20)"/><text x="1178.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.32%)</title><rect x="1175" y="548" width="4" height="15" fill="rgb(234,15,25)"/><text x="1178.00" y="558.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="1180" y="500" width="2" height="15" fill="rgb(229,139,5)"/><text x="1183.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.14%)</title><rect x="1180" y="516" width="2" height="15" fill="rgb(224,127,18)"/><text x="1183.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.14%)</title><rect x="1180" y="532" width="2" height="15" fill="rgb(248,99,3)"/><text x="1183.00" y="542.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.43%)</title><rect x="1179" y="468" width="5" height="15" fill="rgb(247,107,54)"/><text x="1182.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.43%)</title><rect x="1179" y="484" width="5" height="15" fill="rgb(223,218,10)"/><text x="1182.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="1182" y="500" width="2" height="15" fill="rgb(212,195,23)"/><text x="1185.00" y="510.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 6.47%)</title><rect x="1108" y="356" width="76" height="15" fill="rgb(241,229,27)"/><text x="1111.00" y="366.50">onnxrunt..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 6.40%)</title><rect x="1109" y="372" width="75" height="15" fill="rgb(233,54,21)"/><text x="1112.00" y="382.50">onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 5.98%)</title><rect x="1114" y="388" width="70" height="15" fill="rgb(240,212,43)"/><text x="1117.00" y="398.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 5.98%)</title><rect x="1114" y="404" width="70" height="15" fill="rgb(253,126,14)"/><text x="1117.00" y="414.50">onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (167 samples, 5.94%)</title><rect x="1114" y="420" width="70" height="15" fill="rgb(224,229,18)"/><text x="1117.00" y="430.50">onnxrun..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (45 samples, 1.60%)</title><rect x="1166" y="436" width="18" height="15" fill="rgb(252,76,42)"/><text x="1169.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (43 samples, 1.53%)</title><rect x="1166" y="452" width="18" height="15" fill="rgb(252,112,30)"/><text x="1169.00" y="462.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (185 samples, 6.58%)</title><rect x="1108" y="340" width="78" height="15" fill="rgb(250,4,14)"/><text x="1111.00" y="350.50">onnxrunti..</text></g><g><title>onnxruntime::ScanImpl::Initialize (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1184" y="356" width="2" height="15" fill="rgb(238,109,30)"/><text x="1187.00" y="366.50"></text></g><g><title>onnxruntime::ScanImpl::AllocateOutputTensors (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1184" y="372" width="2" height="15" fill="rgb(234,1,24)"/><text x="1187.00" y="382.50"></text></g><g><title>onnxruntime::scan::detail::AllocateOutput (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1184" y="388" width="2" height="15" fill="rgb(216,163,6)"/><text x="1187.00" y="398.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (189 samples, 6.72%)</title><rect x="1107" y="260" width="80" height="15" fill="rgb(234,5,23)"/><text x="1110.00" y="270.50">onnxrunti..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (189 samples, 6.72%)</title><rect x="1107" y="276" width="80" height="15" fill="rgb(213,4,28)"/><text x="1110.00" y="286.50">onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (188 samples, 6.69%)</title><rect x="1108" y="292" width="79" height="15" fill="rgb(207,75,51)"/><text x="1111.00" y="302.50">onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (188 samples, 6.69%)</title><rect x="1108" y="308" width="79" height="15" fill="rgb(244,5,26)"/><text x="1111.00" y="318.50">onnxrunti..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (188 samples, 6.69%)</title><rect x="1108" y="324" width="79" height="15" fill="rgb(220,166,26)"/><text x="1111.00" y="334.50">onnxrunti..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (196 samples, 6.97%)</title><rect x="1106" y="164" width="82" height="15" fill="rgb(238,91,27)"/><text x="1109.00" y="174.50">_run_whol..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (196 samples, 6.97%)</title><rect x="1106" y="180" width="82" height="15" fill="rgb(244,130,7)"/><text x="1109.00" y="190.50">run (mlpr..</text></g><g><title>run (onnxruntime/capi/session.py:136) (196 samples, 6.97%)</title><rect x="1106" y="196" width="82" height="15" fill="rgb(251,69,17)"/><text x="1109.00" y="206.50">run (onnx..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (195 samples, 6.94%)</title><rect x="1106" y="212" width="82" height="15" fill="rgb(236,5,14)"/><text x="1109.00" y="222.50">pybind11:..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (195 samples, 6.94%)</title><rect x="1106" y="228" width="82" height="15" fill="rgb(231,124,24)"/><text x="1109.00" y="238.50">void pybi..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (194 samples, 6.90%)</title><rect x="1107" y="244" width="81" height="15" fill="rgb(254,12,40)"/><text x="1110.00" y="254.50">onnxrunti..</text></g><g><title>all (2,811 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(245,81,43)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:68) (200 samples, 7.11%)</title><rect x="1106" y="52" width="84" height="15" fill="rgb(222,144,52)"/><text x="1109.00" y="62.50">&lt;module&gt; ..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:67) (200 samples, 7.11%)</title><rect x="1106" y="68" width="84" height="15" fill="rgb(226,197,31)"/><text x="1109.00" y="78.50">profile_o..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:37) (200 samples, 7.11%)</title><rect x="1106" y="84" width="84" height="15" fill="rgb(206,15,20)"/><text x="1109.00" y="94.50">setup_pro..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py:31) (200 samples, 7.11%)</title><rect x="1106" y="100" width="84" height="15" fill="rgb(246,73,3)"/><text x="1109.00" y="110.50">profile (..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (200 samples, 7.11%)</title><rect x="1106" y="116" width="84" height="15" fill="rgb(237,74,12)"/><text x="1109.00" y="126.50">time_pred..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (199 samples, 7.08%)</title><rect x="1106" y="132" width="84" height="15" fill="rgb(244,125,23)"/><text x="1109.00" y="142.50">&lt;lambda&gt; ..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (199 samples, 7.08%)</title><rect x="1106" y="148" width="84" height="15" fill="rgb(238,197,16)"/><text x="1109.00" y="158.50">run (mlpr..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:611) (3 samples, 0.11%)</title><rect x="1188" y="164" width="2" height="15" fill="rgb(239,217,16)"/><text x="1191.00" y="174.50"></text></g></g></svg>