<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1910" onload="init(evt)" viewBox="0 0 1200 1910" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1910" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1893.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1893.00"> </text><g id="frames"><g><title>&lt;module&gt; (onnx/__init__.py) (2 samples, 0.13%)</title><rect x="10" y="292" width="1" height="15" fill="rgb(207,45,27)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="308" width="1" height="15" fill="rgb(239,24,36)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="324" width="1" height="15" fill="rgb(218,50,23)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="340" width="1" height="15" fill="rgb(239,158,23)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="10" y="356" width="1" height="15" fill="rgb(214,101,26)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="372" width="1" height="15" fill="rgb(244,175,30)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (2 samples, 0.13%)</title><rect x="10" y="388" width="1" height="15" fill="rgb(225,45,39)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="404" width="1" height="15" fill="rgb(251,32,39)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="420" width="1" height="15" fill="rgb(222,121,33)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="436" width="1" height="15" fill="rgb(234,149,44)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="10" y="452" width="1" height="15" fill="rgb(246,199,34)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="468" width="1" height="15" fill="rgb(226,130,5)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (2 samples, 0.13%)</title><rect x="10" y="484" width="1" height="15" fill="rgb(234,164,25)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="500" width="1" height="15" fill="rgb(236,188,8)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="516" width="1" height="15" fill="rgb(236,180,18)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="532" width="1" height="15" fill="rgb(215,62,34)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="10" y="548" width="1" height="15" fill="rgb(219,137,6)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="564" width="1" height="15" fill="rgb(217,109,39)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (2 samples, 0.13%)</title><rect x="10" y="580" width="1" height="15" fill="rgb(214,189,26)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="596" width="1" height="15" fill="rgb(220,215,36)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="612" width="1" height="15" fill="rgb(226,214,8)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="628" width="1" height="15" fill="rgb(222,28,31)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="644" width="1" height="15" fill="rgb(215,186,50)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="660" width="1" height="15" fill="rgb(246,132,24)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="676" width="1" height="15" fill="rgb(226,141,35)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="10" y="692" width="1" height="15" fill="rgb(240,142,16)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="708" width="1" height="15" fill="rgb(234,158,4)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (2 samples, 0.13%)</title><rect x="10" y="724" width="1" height="15" fill="rgb(222,223,15)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="740" width="1" height="15" fill="rgb(236,136,46)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="756" width="1" height="15" fill="rgb(252,158,46)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="772" width="1" height="15" fill="rgb(233,222,13)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="10" y="788" width="1" height="15" fill="rgb(232,180,45)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="10" y="804" width="1" height="15" fill="rgb(240,212,12)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="10" y="820" width="1" height="15" fill="rgb(240,193,25)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="10" y="836" width="1" height="15" fill="rgb(206,224,45)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(205,112,30)"/><text x="13.00" y="862.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="10" y="196" width="2" height="15" fill="rgb(249,114,9)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="10" y="212" width="2" height="15" fill="rgb(211,200,20)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="10" y="228" width="2" height="15" fill="rgb(230,169,14)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="10" y="244" width="2" height="15" fill="rgb(228,112,52)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="10" y="260" width="2" height="15" fill="rgb(249,113,15)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="10" y="276" width="2" height="15" fill="rgb(252,121,54)"/><text x="13.00" y="286.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="484" width="1" height="15" fill="rgb(232,177,32)"/><text x="15.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="500" width="1" height="15" fill="rgb(207,147,8)"/><text x="15.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="516" width="1" height="15" fill="rgb(216,53,27)"/><text x="15.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="532" width="1" height="15" fill="rgb(239,27,38)"/><text x="15.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="12" y="548" width="1" height="15" fill="rgb(249,135,31)"/><text x="15.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="564" width="1" height="15" fill="rgb(208,225,25)"/><text x="15.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (2 samples, 0.13%)</title><rect x="12" y="580" width="1" height="15" fill="rgb(238,210,20)"/><text x="15.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="596" width="1" height="15" fill="rgb(230,33,23)"/><text x="15.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="612" width="1" height="15" fill="rgb(252,40,44)"/><text x="15.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="628" width="1" height="15" fill="rgb(219,228,2)"/><text x="15.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="12" y="644" width="1" height="15" fill="rgb(236,36,45)"/><text x="15.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="660" width="1" height="15" fill="rgb(249,37,13)"/><text x="15.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (2 samples, 0.13%)</title><rect x="12" y="676" width="1" height="15" fill="rgb(227,146,24)"/><text x="15.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="692" width="1" height="15" fill="rgb(245,166,15)"/><text x="15.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="708" width="1" height="15" fill="rgb(232,138,14)"/><text x="15.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="724" width="1" height="15" fill="rgb(253,151,13)"/><text x="15.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="12" y="740" width="1" height="15" fill="rgb(248,228,24)"/><text x="15.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="756" width="1" height="15" fill="rgb(240,45,11)"/><text x="15.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (2 samples, 0.13%)</title><rect x="12" y="772" width="1" height="15" fill="rgb(219,10,35)"/><text x="15.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="788" width="1" height="15" fill="rgb(254,3,37)"/><text x="15.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="804" width="1" height="15" fill="rgb(237,16,50)"/><text x="15.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="820" width="1" height="15" fill="rgb(231,64,5)"/><text x="15.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="12" y="836" width="1" height="15" fill="rgb(249,77,9)"/><text x="15.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="852" width="1" height="15" fill="rgb(216,210,43)"/><text x="15.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (2 samples, 0.13%)</title><rect x="12" y="868" width="1" height="15" fill="rgb(219,203,26)"/><text x="15.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="884" width="1" height="15" fill="rgb(247,217,3)"/><text x="15.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="900" width="1" height="15" fill="rgb(223,75,20)"/><text x="15.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="916" width="1" height="15" fill="rgb(234,76,41)"/><text x="15.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="932" width="1" height="15" fill="rgb(205,137,12)"/><text x="15.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="948" width="1" height="15" fill="rgb(250,56,30)"/><text x="15.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="964" width="1" height="15" fill="rgb(251,164,1)"/><text x="15.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="12" y="980" width="1" height="15" fill="rgb(242,228,50)"/><text x="15.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="996" width="1" height="15" fill="rgb(240,60,6)"/><text x="15.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (2 samples, 0.13%)</title><rect x="12" y="1012" width="1" height="15" fill="rgb(244,136,51)"/><text x="15.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="1028" width="1" height="15" fill="rgb(252,97,21)"/><text x="15.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="1044" width="1" height="15" fill="rgb(221,13,1)"/><text x="15.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="1060" width="1" height="15" fill="rgb(213,130,43)"/><text x="15.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="12" y="1076" width="1" height="15" fill="rgb(242,229,37)"/><text x="15.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="1092" width="1" height="15" fill="rgb(236,211,53)"/><text x="15.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (2 samples, 0.13%)</title><rect x="12" y="1108" width="1" height="15" fill="rgb(215,18,51)"/><text x="15.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="1124" width="1" height="15" fill="rgb(250,81,0)"/><text x="15.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="1140" width="1" height="15" fill="rgb(221,143,34)"/><text x="15.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="1156" width="1" height="15" fill="rgb(233,113,2)"/><text x="15.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="12" y="1172" width="1" height="15" fill="rgb(234,48,30)"/><text x="15.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="12" y="1188" width="1" height="15" fill="rgb(254,112,38)"/><text x="15.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (2 samples, 0.13%)</title><rect x="13" y="724" width="2" height="15" fill="rgb(219,21,34)"/><text x="16.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="740" width="2" height="15" fill="rgb(216,54,50)"/><text x="16.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="756" width="2" height="15" fill="rgb(227,187,4)"/><text x="16.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="772" width="2" height="15" fill="rgb(224,208,7)"/><text x="16.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="788" width="2" height="15" fill="rgb(205,23,32)"/><text x="16.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="804" width="2" height="15" fill="rgb(243,174,53)"/><text x="16.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (2 samples, 0.13%)</title><rect x="13" y="820" width="2" height="15" fill="rgb(230,201,48)"/><text x="16.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="836" width="2" height="15" fill="rgb(227,195,15)"/><text x="16.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="852" width="2" height="15" fill="rgb(215,8,35)"/><text x="16.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="868" width="2" height="15" fill="rgb(206,203,17)"/><text x="16.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="884" width="2" height="15" fill="rgb(241,34,2)"/><text x="16.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="900" width="2" height="15" fill="rgb(231,93,30)"/><text x="16.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (2 samples, 0.13%)</title><rect x="13" y="916" width="2" height="15" fill="rgb(244,97,22)"/><text x="16.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="932" width="2" height="15" fill="rgb(213,223,6)"/><text x="16.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="948" width="2" height="15" fill="rgb(238,91,27)"/><text x="16.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="964" width="2" height="15" fill="rgb(237,50,48)"/><text x="16.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="980" width="2" height="15" fill="rgb(222,3,28)"/><text x="16.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="996" width="2" height="15" fill="rgb(209,188,35)"/><text x="16.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (2 samples, 0.13%)</title><rect x="13" y="1012" width="2" height="15" fill="rgb(208,140,8)"/><text x="16.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1028" width="2" height="15" fill="rgb(223,179,41)"/><text x="16.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1044" width="2" height="15" fill="rgb(240,101,41)"/><text x="16.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1060" width="2" height="15" fill="rgb(243,153,53)"/><text x="16.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="1076" width="2" height="15" fill="rgb(254,157,10)"/><text x="16.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1092" width="2" height="15" fill="rgb(240,16,23)"/><text x="16.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (2 samples, 0.13%)</title><rect x="13" y="1108" width="2" height="15" fill="rgb(242,5,49)"/><text x="16.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1124" width="2" height="15" fill="rgb(218,106,1)"/><text x="16.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1140" width="2" height="15" fill="rgb(235,86,2)"/><text x="16.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1156" width="2" height="15" fill="rgb(212,143,48)"/><text x="16.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="1172" width="2" height="15" fill="rgb(230,20,23)"/><text x="16.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1188" width="2" height="15" fill="rgb(239,35,42)"/><text x="16.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (2 samples, 0.13%)</title><rect x="13" y="1204" width="2" height="15" fill="rgb(235,38,6)"/><text x="16.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1220" width="2" height="15" fill="rgb(252,19,10)"/><text x="16.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1236" width="2" height="15" fill="rgb(245,168,49)"/><text x="16.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1252" width="2" height="15" fill="rgb(208,31,38)"/><text x="16.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="1268" width="2" height="15" fill="rgb(214,190,33)"/><text x="16.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1284" width="2" height="15" fill="rgb(209,41,46)"/><text x="16.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (2 samples, 0.13%)</title><rect x="13" y="1300" width="2" height="15" fill="rgb(235,209,3)"/><text x="16.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1316" width="2" height="15" fill="rgb(242,208,30)"/><text x="16.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1332" width="2" height="15" fill="rgb(252,87,17)"/><text x="16.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1348" width="2" height="15" fill="rgb(253,93,39)"/><text x="16.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="1364" width="2" height="15" fill="rgb(240,75,16)"/><text x="16.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1380" width="2" height="15" fill="rgb(246,179,3)"/><text x="16.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (2 samples, 0.13%)</title><rect x="13" y="1396" width="2" height="15" fill="rgb(244,206,15)"/><text x="16.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1412" width="2" height="15" fill="rgb(252,145,21)"/><text x="16.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1428" width="2" height="15" fill="rgb(227,92,40)"/><text x="16.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1444" width="2" height="15" fill="rgb(221,115,9)"/><text x="16.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="1460" width="2" height="15" fill="rgb(239,163,54)"/><text x="16.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1476" width="2" height="15" fill="rgb(219,225,21)"/><text x="16.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (2 samples, 0.13%)</title><rect x="13" y="1492" width="2" height="15" fill="rgb(237,120,17)"/><text x="16.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1508" width="2" height="15" fill="rgb(222,195,49)"/><text x="16.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1524" width="2" height="15" fill="rgb(251,105,45)"/><text x="16.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1540" width="2" height="15" fill="rgb(209,115,18)"/><text x="16.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="1556" width="2" height="15" fill="rgb(239,102,53)"/><text x="16.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1572" width="2" height="15" fill="rgb(235,82,26)"/><text x="16.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py) (2 samples, 0.13%)</title><rect x="13" y="1588" width="2" height="15" fill="rgb(219,106,19)"/><text x="16.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1604" width="2" height="15" fill="rgb(234,195,16)"/><text x="16.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1620" width="2" height="15" fill="rgb(220,114,18)"/><text x="16.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1636" width="2" height="15" fill="rgb(240,91,48)"/><text x="16.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="1652" width="2" height="15" fill="rgb(217,17,7)"/><text x="16.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1668" width="2" height="15" fill="rgb(217,183,6)"/><text x="16.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/tools.py) (2 samples, 0.13%)</title><rect x="13" y="1684" width="2" height="15" fill="rgb(236,210,11)"/><text x="16.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1700" width="2" height="15" fill="rgb(254,147,33)"/><text x="16.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1716" width="2" height="15" fill="rgb(221,193,41)"/><text x="16.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1732" width="2" height="15" fill="rgb(237,60,47)"/><text x="16.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="1748" width="2" height="15" fill="rgb(237,169,41)"/><text x="16.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1764" width="2" height="15" fill="rgb(223,44,28)"/><text x="16.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/table.py) (2 samples, 0.13%)</title><rect x="13" y="1780" width="2" height="15" fill="rgb(225,180,53)"/><text x="16.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1796" width="2" height="15" fill="rgb(236,171,54)"/><text x="16.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1812" width="2" height="15" fill="rgb(228,62,1)"/><text x="16.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1828" width="2" height="15" fill="rgb(217,8,22)"/><text x="16.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="1844" width="2" height="15" fill="rgb(253,23,36)"/><text x="16.00" y="1854.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="1860" width="2" height="15" fill="rgb(238,195,13)"/><text x="16.00" y="1870.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (5 samples, 0.32%)</title><rect x="12" y="340" width="3" height="15" fill="rgb(246,52,6)"/><text x="15.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.32%)</title><rect x="12" y="356" width="3" height="15" fill="rgb(236,70,27)"/><text x="15.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.32%)</title><rect x="12" y="372" width="3" height="15" fill="rgb(224,195,5)"/><text x="15.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.32%)</title><rect x="12" y="388" width="3" height="15" fill="rgb(237,10,38)"/><text x="15.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.32%)</title><rect x="12" y="404" width="3" height="15" fill="rgb(208,171,33)"/><text x="15.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.32%)</title><rect x="12" y="420" width="3" height="15" fill="rgb(229,189,40)"/><text x="15.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (5 samples, 0.32%)</title><rect x="12" y="436" width="3" height="15" fill="rgb(224,69,20)"/><text x="15.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.32%)</title><rect x="12" y="452" width="3" height="15" fill="rgb(231,122,44)"/><text x="15.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.32%)</title><rect x="12" y="468" width="3" height="15" fill="rgb(248,163,13)"/><text x="15.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="13" y="484" width="2" height="15" fill="rgb(217,211,17)"/><text x="16.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="13" y="500" width="2" height="15" fill="rgb(224,88,19)"/><text x="16.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="13" y="516" width="2" height="15" fill="rgb(229,195,22)"/><text x="16.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.19%)</title><rect x="13" y="532" width="2" height="15" fill="rgb(222,150,0)"/><text x="16.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="13" y="548" width="2" height="15" fill="rgb(242,137,27)"/><text x="16.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="13" y="564" width="2" height="15" fill="rgb(222,152,6)"/><text x="16.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="13" y="580" width="2" height="15" fill="rgb(224,220,14)"/><text x="16.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="13" y="596" width="2" height="15" fill="rgb(215,114,19)"/><text x="16.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="13" y="612" width="2" height="15" fill="rgb(213,73,3)"/><text x="16.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (3 samples, 0.19%)</title><rect x="13" y="628" width="2" height="15" fill="rgb(215,91,26)"/><text x="16.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="13" y="644" width="2" height="15" fill="rgb(211,152,17)"/><text x="16.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="13" y="660" width="2" height="15" fill="rgb(235,200,28)"/><text x="16.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="13" y="676" width="2" height="15" fill="rgb(205,191,23)"/><text x="16.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="13" y="692" width="2" height="15" fill="rgb(244,187,21)"/><text x="16.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="13" y="708" width="2" height="15" fill="rgb(218,28,3)"/><text x="16.00" y="718.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (6 samples, 0.38%)</title><rect x="12" y="244" width="4" height="15" fill="rgb(246,38,23)"/><text x="15.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.38%)</title><rect x="12" y="260" width="4" height="15" fill="rgb(241,78,52)"/><text x="15.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.38%)</title><rect x="12" y="276" width="4" height="15" fill="rgb(236,226,19)"/><text x="15.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.38%)</title><rect x="12" y="292" width="4" height="15" fill="rgb(249,42,51)"/><text x="15.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.38%)</title><rect x="12" y="308" width="4" height="15" fill="rgb(226,60,28)"/><text x="15.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.38%)</title><rect x="12" y="324" width="4" height="15" fill="rgb(237,34,6)"/><text x="15.00" y="334.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="68" width="8" height="15" fill="rgb(212,1,31)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="84" width="8" height="15" fill="rgb(251,52,25)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="100" width="8" height="15" fill="rgb(207,100,6)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (11 samples, 0.69%)</title><rect x="10" y="116" width="8" height="15" fill="rgb(232,24,6)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="132" width="8" height="15" fill="rgb(235,213,6)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py) (11 samples, 0.69%)</title><rect x="10" y="148" width="8" height="15" fill="rgb(247,219,24)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="164" width="8" height="15" fill="rgb(215,57,26)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="180" width="8" height="15" fill="rgb(207,82,10)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.51%)</title><rect x="12" y="196" width="6" height="15" fill="rgb(222,206,6)"/><text x="15.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.51%)</title><rect x="12" y="212" width="6" height="15" fill="rgb(212,105,50)"/><text x="15.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.51%)</title><rect x="12" y="228" width="6" height="15" fill="rgb(208,124,18)"/><text x="15.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py) (2 samples, 0.13%)</title><rect x="16" y="244" width="2" height="15" fill="rgb(214,49,30)"/><text x="19.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="16" y="260" width="2" height="15" fill="rgb(216,75,47)"/><text x="19.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="16" y="276" width="2" height="15" fill="rgb(212,116,39)"/><text x="19.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="16" y="292" width="2" height="15" fill="rgb(218,198,4)"/><text x="19.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="16" y="308" width="2" height="15" fill="rgb(209,103,19)"/><text x="19.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="16" y="324" width="2" height="15" fill="rgb(248,46,0)"/><text x="19.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="16" y="340" width="2" height="15" fill="rgb(226,73,42)"/><text x="19.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="16" y="356" width="2" height="15" fill="rgb(225,72,3)"/><text x="19.00" y="366.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py) (2 samples, 0.13%)</title><rect x="18" y="196" width="1" height="15" fill="rgb(233,168,19)"/><text x="21.00" y="206.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (2 samples, 0.13%)</title><rect x="18" y="212" width="1" height="15" fill="rgb(216,95,1)"/><text x="21.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.13%)</title><rect x="18" y="228" width="1" height="15" fill="rgb(239,36,15)"/><text x="21.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (2 samples, 0.13%)</title><rect x="18" y="244" width="1" height="15" fill="rgb(242,80,11)"/><text x="21.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (2 samples, 0.13%)</title><rect x="18" y="260" width="1" height="15" fill="rgb(251,41,41)"/><text x="21.00" y="270.50"></text></g><g><title>array_argpartition (methods.c) (2 samples, 0.13%)</title><rect x="18" y="276" width="1" height="15" fill="rgb(234,83,1)"/><text x="21.00" y="286.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (2 samples, 0.13%)</title><rect x="18" y="292" width="1" height="15" fill="rgb(251,217,3)"/><text x="21.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c) (2 samples, 0.13%)</title><rect x="18" y="308" width="1" height="15" fill="rgb(252,103,35)"/><text x="21.00" y="318.50"></text></g><g><title>aintroselect_double (selection.c.src) (2 samples, 0.13%)</title><rect x="18" y="324" width="1" height="15" fill="rgb(241,3,28)"/><text x="21.00" y="334.50"></text></g><g><title>adumb_select_double (selection.c.src) (2 samples, 0.13%)</title><rect x="18" y="340" width="1" height="15" fill="rgb(250,183,9)"/><text x="21.00" y="350.50"></text></g><g><title>DOUBLE_LT (npysort_common.h) (2 samples, 0.13%)</title><rect x="18" y="356" width="1" height="15" fill="rgb(247,162,8)"/><text x="21.00" y="366.50"></text></g><g><title>profile0_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (3 samples, 0.19%)</title><rect x="18" y="68" width="2" height="15" fill="rgb(253,46,45)"/><text x="21.00" y="78.50"></text></g><g><title>setup_profile0 (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (3 samples, 0.19%)</title><rect x="18" y="84" width="2" height="15" fill="rgb(238,68,27)"/><text x="21.00" y="94.50"></text></g><g><title>profile0 (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (3 samples, 0.19%)</title><rect x="18" y="100" width="2" height="15" fill="rgb(217,210,33)"/><text x="21.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.19%)</title><rect x="18" y="116" width="2" height="15" fill="rgb(241,75,16)"/><text x="21.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.19%)</title><rect x="18" y="132" width="2" height="15" fill="rgb(215,110,27)"/><text x="21.00" y="142.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py) (3 samples, 0.19%)</title><rect x="18" y="148" width="2" height="15" fill="rgb(219,49,35)"/><text x="21.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (3 samples, 0.19%)</title><rect x="18" y="164" width="2" height="15" fill="rgb(250,192,12)"/><text x="21.00" y="174.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py) (3 samples, 0.19%)</title><rect x="18" y="180" width="2" height="15" fill="rgb(205,128,27)"/><text x="21.00" y="190.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="26" y="452" width="1" height="15" fill="rgb(241,136,9)"/><text x="29.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.38%)</title><rect x="24" y="436" width="5" height="15" fill="rgb(234,129,12)"/><text x="27.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.19%)</title><rect x="29" y="436" width="2" height="15" fill="rgb(226,76,34)"/><text x="32.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="30" y="452" width="1" height="15" fill="rgb(218,94,9)"/><text x="33.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="30" y="468" width="1" height="15" fill="rgb(208,196,41)"/><text x="33.00" y="478.50"></text></g><g><title>0x7f464600ed94 (libc-2.29.so) (8 samples, 0.51%)</title><rect x="33" y="452" width="6" height="15" fill="rgb(250,107,24)"/><text x="36.00" y="462.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.69%)</title><rect x="33" y="436" width="8" height="15" fill="rgb(245,6,41)"/><text x="36.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="39" y="452" width="2" height="15" fill="rgb(217,89,2)"/><text x="42.00" y="462.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.19%)</title><rect x="137" y="468" width="2" height="15" fill="rgb(207,115,12)"/><text x="140.00" y="478.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.19%)</title><rect x="137" y="484" width="2" height="15" fill="rgb(210,106,28)"/><text x="140.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.32%)</title><rect x="139" y="468" width="4" height="15" fill="rgb(243,156,26)"/><text x="142.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.13%)</title><rect x="141" y="484" width="2" height="15" fill="rgb(251,186,33)"/><text x="144.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="141" y="500" width="2" height="15" fill="rgb(236,209,41)"/><text x="144.00" y="510.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.19%)</title><rect x="143" y="468" width="2" height="15" fill="rgb(219,55,6)"/><text x="146.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (142 samples, 8.97%)</title><rect x="41" y="436" width="106" height="15" fill="rgb(254,59,9)"/><text x="44.00" y="446.50">onnxruntime:..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (132 samples, 8.34%)</title><rect x="48" y="452" width="99" height="15" fill="rgb(210,66,7)"/><text x="51.00" y="462.50">onnxruntime..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (143 samples, 9.03%)</title><rect x="147" y="468" width="107" height="15" fill="rgb(211,139,54)"/><text x="150.00" y="478.50">onnxruntime::..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (53 samples, 3.35%)</title><rect x="214" y="484" width="40" height="15" fill="rgb(233,1,37)"/><text x="217.00" y="494.50">onn..</text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.25%)</title><rect x="254" y="468" width="3" height="15" fill="rgb(234,24,1)"/><text x="257.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.25%)</title><rect x="254" y="484" width="3" height="15" fill="rgb(213,97,31)"/><text x="257.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.25%)</title><rect x="254" y="500" width="3" height="15" fill="rgb(252,171,24)"/><text x="257.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.19%)</title><rect x="255" y="516" width="2" height="15" fill="rgb(224,142,47)"/><text x="258.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.19%)</title><rect x="255" y="532" width="2" height="15" fill="rgb(222,104,54)"/><text x="258.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.19%)</title><rect x="255" y="548" width="2" height="15" fill="rgb(228,35,25)"/><text x="258.00" y="558.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="255" y="564" width="2" height="15" fill="rgb(228,83,23)"/><text x="258.00" y="574.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="255" y="580" width="2" height="15" fill="rgb(252,210,40)"/><text x="258.00" y="590.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="255" y="596" width="2" height="15" fill="rgb(214,59,28)"/><text x="258.00" y="606.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::operator= (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="255" y="612" width="2" height="15" fill="rgb(231,89,18)"/><text x="258.00" y="622.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (316 samples, 19.96%)</title><rect x="22" y="340" width="236" height="15" fill="rgb(215,178,7)"/><text x="25.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compute (..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (316 samples, 19.96%)</title><rect x="22" y="356" width="236" height="15" fill="rgb(247,120,32)"/><text x="25.00" y="366.50">onnxruntime::ScanImpl::Execute ..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (316 samples, 19.96%)</title><rect x="22" y="372" width="236" height="15" fill="rgb(210,86,20)"/><text x="25.00" y="382.50">onnxruntime::scan::detail::Iter..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (315 samples, 19.90%)</title><rect x="23" y="388" width="235" height="15" fill="rgb(211,123,2)"/><text x="26.00" y="398.50">onnxruntime::utils::ExecuteSubg..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (315 samples, 19.90%)</title><rect x="23" y="404" width="235" height="15" fill="rgb(212,153,33)"/><text x="26.00" y="414.50">onnxruntime::utils::ExecuteGrap..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (314 samples, 19.84%)</title><rect x="24" y="420" width="234" height="15" fill="rgb(221,205,28)"/><text x="27.00" y="430.50">onnxruntime::SequentialExecutor..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (149 samples, 9.41%)</title><rect x="147" y="436" width="111" height="15" fill="rgb(218,51,31)"/><text x="150.00" y="446.50">onnxruntime::..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (149 samples, 9.41%)</title><rect x="147" y="452" width="111" height="15" fill="rgb(223,166,5)"/><text x="150.00" y="462.50">onnxruntime::..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.57%)</title><rect x="258" y="340" width="6" height="15" fill="rgb(218,85,14)"/><text x="261.00" y="350.50"></text></g><g><title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.19%)</title><rect x="349" y="372" width="2" height="15" fill="rgb(223,118,26)"/><text x="352.00" y="382.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (121 samples, 7.64%)</title><rect x="264" y="340" width="91" height="15" fill="rgb(209,155,29)"/><text x="267.00" y="350.50">onnxruntim..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (121 samples, 7.64%)</title><rect x="264" y="356" width="91" height="15" fill="rgb(218,225,5)"/><text x="267.00" y="366.50">onnxruntim..</text></g><g><title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.32%)</title><rect x="351" y="372" width="4" height="15" fill="rgb(225,107,33)"/><text x="354.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (492 samples, 31.08%)</title><rect x="21" y="260" width="366" height="15" fill="rgb(231,49,0)"/><text x="24.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/c..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (492 samples, 31.08%)</title><rect x="21" y="276" width="366" height="15" fill="rgb(231,189,17)"/><text x="24.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/c..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (492 samples, 31.08%)</title><rect x="21" y="292" width="366" height="15" fill="rgb(224,2,0)"/><text x="24.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/cap..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (492 samples, 31.08%)</title><rect x="21" y="308" width="366" height="15" fill="rgb(214,188,41)"/><text x="24.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (492 samples, 31.08%)</title><rect x="21" y="324" width="366" height="15" fill="rgb(220,98,32)"/><text x="24.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxrun..</text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (44 samples, 2.78%)</title><rect x="355" y="340" width="32" height="15" fill="rgb(205,98,8)"/><text x="358.00" y="350.50">on..</text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (44 samples, 2.78%)</title><rect x="355" y="356" width="32" height="15" fill="rgb(215,17,22)"/><text x="358.00" y="366.50">on..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (494 samples, 31.21%)</title><rect x="20" y="68" width="368" height="15" fill="rgb(248,186,30)"/><text x="23.00" y="78.50">profile_ort (bench_KNeighborsRegressor_default_k3..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (494 samples, 31.21%)</title><rect x="20" y="84" width="368" height="15" fill="rgb(225,137,23)"/><text x="23.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (494 samples, 31.21%)</title><rect x="20" y="100" width="368" height="15" fill="rgb(243,162,15)"/><text x="23.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_r..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (494 samples, 31.21%)</title><rect x="20" y="116" width="368" height="15" fill="rgb(216,227,6)"/><text x="23.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (494 samples, 31.21%)</title><rect x="20" y="132" width="368" height="15" fill="rgb(240,141,44)"/><text x="23.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl...</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (494 samples, 31.21%)</title><rect x="20" y="148" width="368" height="15" fill="rgb(213,213,14)"/><text x="23.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (494 samples, 31.21%)</title><rect x="20" y="164" width="368" height="15" fill="rgb(231,27,47)"/><text x="23.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inferen..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (494 samples, 31.21%)</title><rect x="20" y="180" width="368" height="15" fill="rgb(219,15,41)"/><text x="23.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (494 samples, 31.21%)</title><rect x="20" y="196" width="368" height="15" fill="rgb(247,123,35)"/><text x="23.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (493 samples, 31.14%)</title><rect x="21" y="212" width="367" height="15" fill="rgb(249,206,46)"/><text x="24.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/c..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (493 samples, 31.14%)</title><rect x="21" y="228" width="367" height="15" fill="rgb(207,125,50)"/><text x="24.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxrunti..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (493 samples, 31.14%)</title><rect x="21" y="244" width="367" height="15" fill="rgb(244,135,20)"/><text x="24.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::m..</text></g><g><title>PyArray_ToList (convert.c) (2 samples, 0.13%)</title><rect x="398" y="228" width="1" height="15" fill="rgb(243,214,46)"/><text x="401.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c) (2 samples, 0.13%)</title><rect x="398" y="244" width="1" height="15" fill="rgb(238,37,45)"/><text x="401.00" y="254.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (3 samples, 0.19%)</title><rect x="399" y="276" width="3" height="15" fill="rgb(251,139,34)"/><text x="402.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c) (3 samples, 0.19%)</title><rect x="399" y="292" width="3" height="15" fill="rgb(240,119,1)"/><text x="402.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (2 samples, 0.13%)</title><rect x="400" y="308" width="2" height="15" fill="rgb(243,118,25)"/><text x="403.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src) (2 samples, 0.13%)</title><rect x="400" y="324" width="2" height="15" fill="rgb(254,108,48)"/><text x="403.00" y="334.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (2 samples, 0.13%)</title><rect x="403" y="340" width="2" height="15" fill="rgb(229,56,15)"/><text x="406.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (7 samples, 0.44%)</title><rect x="402" y="292" width="5" height="15" fill="rgb(237,149,46)"/><text x="405.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (7 samples, 0.44%)</title><rect x="402" y="308" width="5" height="15" fill="rgb(241,91,54)"/><text x="405.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (7 samples, 0.44%)</title><rect x="402" y="324" width="5" height="15" fill="rgb(235,197,13)"/><text x="405.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c) (3 samples, 0.19%)</title><rect x="405" y="340" width="2" height="15" fill="rgb(211,63,40)"/><text x="408.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (16 samples, 1.01%)</title><rect x="398" y="212" width="12" height="15" fill="rgb(238,203,52)"/><text x="401.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (14 samples, 0.88%)</title><rect x="399" y="228" width="11" height="15" fill="rgb(223,163,12)"/><text x="402.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (14 samples, 0.88%)</title><rect x="399" y="244" width="11" height="15" fill="rgb(226,38,49)"/><text x="402.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c) (14 samples, 0.88%)</title><rect x="399" y="260" width="11" height="15" fill="rgb(243,197,4)"/><text x="402.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (11 samples, 0.69%)</title><rect x="402" y="276" width="8" height="15" fill="rgb(240,190,46)"/><text x="405.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c) (4 samples, 0.25%)</title><rect x="407" y="292" width="3" height="15" fill="rgb(240,88,31)"/><text x="410.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c) (3 samples, 0.19%)</title><rect x="408" y="308" width="2" height="15" fill="rgb(216,57,41)"/><text x="411.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (5 samples, 0.32%)</title><rect x="410" y="212" width="4" height="15" fill="rgb(246,211,9)"/><text x="413.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;) (3 samples, 0.19%)</title><rect x="411" y="228" width="3" height="15" fill="rgb(205,187,11)"/><text x="414.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.19%)</title><rect x="411" y="244" width="3" height="15" fill="rgb(216,49,23)"/><text x="414.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py) (3 samples, 0.19%)</title><rect x="411" y="260" width="3" height="15" fill="rgb(237,146,43)"/><text x="414.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (3 samples, 0.19%)</title><rect x="411" y="276" width="3" height="15" fill="rgb(222,114,42)"/><text x="414.00" y="286.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (3 samples, 0.19%)</title><rect x="432" y="228" width="2" height="15" fill="rgb(238,70,30)"/><text x="435.00" y="238.50"></text></g><g><title>_common_run_shape (mlprodict/onnxrt/ops_cpu/op_scan.py) (3 samples, 0.19%)</title><rect x="435" y="228" width="2" height="15" fill="rgb(245,39,46)"/><text x="438.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (3 samples, 0.19%)</title><rect x="437" y="244" width="3" height="15" fill="rgb(230,22,47)"/><text x="440.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.13%)</title><rect x="438" y="260" width="2" height="15" fill="rgb(205,54,10)"/><text x="441.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (5 samples, 0.32%)</title><rect x="437" y="228" width="4" height="15" fill="rgb(243,80,51)"/><text x="440.00" y="238.50"></text></g><g><title>npy_free_cache (alloc.c) (2 samples, 0.13%)</title><rect x="440" y="244" width="1" height="15" fill="rgb(235,65,24)"/><text x="443.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c) (2 samples, 0.13%)</title><rect x="440" y="260" width="1" height="15" fill="rgb(229,139,48)"/><text x="443.00" y="270.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (2 samples, 0.13%)</title><rect x="440" y="276" width="1" height="15" fill="rgb(210,39,2)"/><text x="443.00" y="286.50"></text></g><g><title>free (libc-2.29.so) (2 samples, 0.13%)</title><rect x="440" y="292" width="1" height="15" fill="rgb(227,137,39)"/><text x="443.00" y="302.50"></text></g><g><title>get_view_from_index (mapping.c) (2 samples, 0.13%)</title><rect x="442" y="244" width="1" height="15" fill="rgb(249,51,53)"/><text x="445.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (2 samples, 0.13%)</title><rect x="442" y="260" width="1" height="15" fill="rgb(223,71,43)"/><text x="445.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.13%)</title><rect x="442" y="276" width="1" height="15" fill="rgb(216,133,16)"/><text x="445.00" y="286.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (2 samples, 0.13%)</title><rect x="442" y="292" width="1" height="15" fill="rgb(208,163,26)"/><text x="445.00" y="302.50"></text></g><g><title>array_subscript (mapping.c) (6 samples, 0.38%)</title><rect x="441" y="228" width="5" height="15" fill="rgb(253,64,31)"/><text x="444.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (3 samples, 0.19%)</title><rect x="443" y="244" width="3" height="15" fill="rgb(234,205,50)"/><text x="446.00" y="254.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (3 samples, 0.19%)</title><rect x="463" y="276" width="3" height="15" fill="rgb(236,126,51)"/><text x="466.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (2 samples, 0.13%)</title><rect x="467" y="292" width="2" height="15" fill="rgb(236,104,7)"/><text x="470.00" y="302.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (6 samples, 0.38%)</title><rect x="469" y="292" width="4" height="15" fill="rgb(245,18,22)"/><text x="472.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (4 samples, 0.25%)</title><rect x="470" y="308" width="3" height="15" fill="rgb(214,80,2)"/><text x="473.00" y="318.50"></text></g><g><title>array_reshape (methods.c) (12 samples, 0.76%)</title><rect x="466" y="276" width="9" height="15" fill="rgb(213,6,26)"/><text x="469.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (2 samples, 0.13%)</title><rect x="473" y="292" width="2" height="15" fill="rgb(241,168,18)"/><text x="476.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (2 samples, 0.13%)</title><rect x="473" y="308" width="2" height="15" fill="rgb(250,126,15)"/><text x="476.00" y="318.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (35 samples, 2.21%)</title><rect x="452" y="260" width="26" height="15" fill="rgb(243,83,35)"/><text x="455.00" y="270.50">e..</text></g><g><title>asanyarray (numpy/core/_asarray.py) (5 samples, 0.32%)</title><rect x="475" y="276" width="3" height="15" fill="rgb(230,9,42)"/><text x="478.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.13%)</title><rect x="477" y="292" width="1" height="15" fill="rgb(247,168,28)"/><text x="480.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (46 samples, 2.91%)</title><rect x="446" y="228" width="34" height="15" fill="rgb(214,149,37)"/><text x="449.00" y="238.50">ex..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (39 samples, 2.46%)</title><rect x="451" y="244" width="29" height="15" fill="rgb(235,106,0)"/><text x="454.00" y="254.50">ar..</text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (2 samples, 0.13%)</title><rect x="478" y="260" width="2" height="15" fill="rgb(231,115,6)"/><text x="481.00" y="270.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (6 samples, 0.38%)</title><rect x="527" y="260" width="4" height="15" fill="rgb(224,110,15)"/><text x="530.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (4 samples, 0.25%)</title><rect x="618" y="276" width="3" height="15" fill="rgb(205,101,30)"/><text x="621.00" y="286.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (2 samples, 0.13%)</title><rect x="660" y="356" width="1" height="15" fill="rgb(207,226,19)"/><text x="663.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.13%)</title><rect x="660" y="372" width="1" height="15" fill="rgb(208,9,22)"/><text x="663.00" y="382.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (3 samples, 0.19%)</title><rect x="661" y="356" width="2" height="15" fill="rgb(217,210,28)"/><text x="664.00" y="366.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (3 samples, 0.19%)</title><rect x="665" y="372" width="3" height="15" fill="rgb(243,102,39)"/><text x="668.00" y="382.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (4 samples, 0.25%)</title><rect x="671" y="436" width="3" height="15" fill="rgb(213,59,40)"/><text x="674.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (12 samples, 0.76%)</title><rect x="671" y="388" width="9" height="15" fill="rgb(244,38,49)"/><text x="674.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (11 samples, 0.69%)</title><rect x="671" y="404" width="9" height="15" fill="rgb(250,133,52)"/><text x="674.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (11 samples, 0.69%)</title><rect x="671" y="420" width="9" height="15" fill="rgb(215,109,19)"/><text x="674.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h) (7 samples, 0.44%)</title><rect x="674" y="436" width="6" height="15" fill="rgb(247,215,18)"/><text x="677.00" y="446.50"></text></g><g><title>npy_alloc_cache (alloc.c) (5 samples, 0.32%)</title><rect x="684" y="468" width="4" height="15" fill="rgb(238,79,39)"/><text x="687.00" y="478.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (5 samples, 0.32%)</title><rect x="684" y="484" width="4" height="15" fill="rgb(214,224,49)"/><text x="687.00" y="494.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (5 samples, 0.32%)</title><rect x="684" y="500" width="4" height="15" fill="rgb(220,174,22)"/><text x="687.00" y="510.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.32%)</title><rect x="684" y="516" width="4" height="15" fill="rgb(220,140,22)"/><text x="687.00" y="526.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (11 samples, 0.69%)</title><rect x="682" y="404" width="8" height="15" fill="rgb(243,79,36)"/><text x="685.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (10 samples, 0.63%)</title><rect x="683" y="420" width="7" height="15" fill="rgb(240,68,16)"/><text x="686.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (10 samples, 0.63%)</title><rect x="683" y="436" width="7" height="15" fill="rgb(237,162,7)"/><text x="686.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (10 samples, 0.63%)</title><rect x="683" y="452" width="7" height="15" fill="rgb(250,131,54)"/><text x="686.00" y="462.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (3 samples, 0.19%)</title><rect x="688" y="468" width="2" height="15" fill="rgb(220,97,1)"/><text x="691.00" y="478.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (2 samples, 0.13%)</title><rect x="690" y="404" width="2" height="15" fill="rgb(224,37,31)"/><text x="693.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (23 samples, 1.45%)</title><rect x="680" y="388" width="17" height="15" fill="rgb(247,213,49)"/><text x="683.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (3 samples, 0.19%)</title><rect x="695" y="404" width="2" height="15" fill="rgb(240,200,21)"/><text x="698.00" y="414.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (2 samples, 0.13%)</title><rect x="695" y="420" width="2" height="15" fill="rgb(239,135,36)"/><text x="698.00" y="430.50"></text></g><g><title>IsAligned (array_assign.c) (2 samples, 0.13%)</title><rect x="695" y="436" width="2" height="15" fill="rgb(237,95,27)"/><text x="698.00" y="446.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (2 samples, 0.13%)</title><rect x="695" y="452" width="2" height="15" fill="rgb(252,143,29)"/><text x="698.00" y="462.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (5 samples, 0.32%)</title><rect x="697" y="388" width="4" height="15" fill="rgb(242,89,15)"/><text x="700.00" y="398.50"></text></g><g><title>0x7f464600ed50 (libc-2.29.so) (10 samples, 0.63%)</title><rect x="722" y="436" width="8" height="15" fill="rgb(241,194,43)"/><text x="725.00" y="446.50"></text></g><g><title>0x7f464600ed6f (libc-2.29.so) (5 samples, 0.32%)</title><rect x="731" y="436" width="4" height="15" fill="rgb(216,158,32)"/><text x="734.00" y="446.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (50 samples, 3.16%)</title><rect x="701" y="388" width="38" height="15" fill="rgb(249,135,22)"/><text x="704.00" y="398.50">Npy..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (48 samples, 3.03%)</title><rect x="703" y="404" width="36" height="15" fill="rgb(234,171,32)"/><text x="706.00" y="414.50">npy..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (48 samples, 3.03%)</title><rect x="703" y="420" width="36" height="15" fill="rgb(248,161,48)"/><text x="706.00" y="430.50">PyA..</text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src) (5 samples, 0.32%)</title><rect x="735" y="436" width="4" height="15" fill="rgb(213,79,37)"/><text x="738.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (101 samples, 6.38%)</title><rect x="665" y="356" width="76" height="15" fill="rgb(228,52,23)"/><text x="668.00" y="366.50">execute_..</text></g><g><title>iterator_loop (ufunc_object.c) (98 samples, 6.19%)</title><rect x="668" y="372" width="73" height="15" fill="rgb(251,201,15)"/><text x="671.00" y="382.50">iterator..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (117 samples, 7.39%)</title><rect x="655" y="308" width="87" height="15" fill="rgb(226,174,39)"/><text x="658.00" y="318.50">_run (mlpr..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (114 samples, 7.20%)</title><rect x="657" y="324" width="85" height="15" fill="rgb(220,210,38)"/><text x="660.00" y="334.50">ufunc_gene..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (111 samples, 7.01%)</title><rect x="660" y="340" width="82" height="15" fill="rgb(244,153,31)"/><text x="663.00" y="350.50">PyUFunc_G..</text></g><g><title>0x7f464600ed94 (libc-2.29.so) (9 samples, 0.57%)</title><rect x="756" y="388" width="6" height="15" fill="rgb(252,107,8)"/><text x="759.00" y="398.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (2 samples, 0.13%)</title><rect x="762" y="388" width="2" height="15" fill="rgb(245,158,42)"/><text x="765.00" y="398.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (5 samples, 0.32%)</title><rect x="764" y="388" width="4" height="15" fill="rgb(241,45,28)"/><text x="767.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (4 samples, 0.25%)</title><rect x="765" y="404" width="3" height="15" fill="rgb(251,59,8)"/><text x="768.00" y="414.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (2 samples, 0.13%)</title><rect x="768" y="388" width="2" height="15" fill="rgb(225,146,11)"/><text x="771.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (24 samples, 1.52%)</title><rect x="753" y="356" width="18" height="15" fill="rgb(239,97,39)"/><text x="756.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (21 samples, 1.33%)</title><rect x="755" y="372" width="16" height="15" fill="rgb(246,168,25)"/><text x="758.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (45 samples, 2.84%)</title><rect x="742" y="308" width="34" height="15" fill="rgb(245,75,35)"/><text x="745.00" y="318.50">_r..</text></g><g><title>array_copy (methods.c) (33 samples, 2.08%)</title><rect x="751" y="324" width="25" height="15" fill="rgb(223,37,51)"/><text x="754.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c) (31 samples, 1.96%)</title><rect x="753" y="340" width="23" height="15" fill="rgb(244,32,24)"/><text x="756.00" y="350.50">P..</text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (7 samples, 0.44%)</title><rect x="771" y="356" width="5" height="15" fill="rgb(251,149,41)"/><text x="774.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (5 samples, 0.32%)</title><rect x="772" y="372" width="4" height="15" fill="rgb(243,134,37)"/><text x="775.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (5 samples, 0.32%)</title><rect x="772" y="388" width="4" height="15" fill="rgb(208,125,53)"/><text x="775.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 0.32%)</title><rect x="772" y="404" width="4" height="15" fill="rgb(224,190,52)"/><text x="775.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c) (4 samples, 0.25%)</title><rect x="773" y="420" width="3" height="15" fill="rgb(208,217,7)"/><text x="776.00" y="430.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (4 samples, 0.25%)</title><rect x="773" y="436" width="3" height="15" fill="rgb(213,125,14)"/><text x="776.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (3 samples, 0.19%)</title><rect x="774" y="452" width="2" height="15" fill="rgb(252,205,37)"/><text x="777.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.19%)</title><rect x="774" y="468" width="2" height="15" fill="rgb(237,179,14)"/><text x="777.00" y="478.50"></text></g><g><title>array_dealloc (arrayobject.c) (6 samples, 0.38%)</title><rect x="783" y="324" width="5" height="15" fill="rgb(209,91,22)"/><text x="786.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (5 samples, 0.32%)</title><rect x="784" y="340" width="4" height="15" fill="rgb(210,130,6)"/><text x="787.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (4 samples, 0.25%)</title><rect x="785" y="356" width="3" height="15" fill="rgb(248,119,3)"/><text x="788.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (11 samples, 0.69%)</title><rect x="813" y="388" width="8" height="15" fill="rgb(226,136,52)"/><text x="816.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (6 samples, 0.38%)</title><rect x="822" y="404" width="4" height="15" fill="rgb(252,183,29)"/><text x="825.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (6 samples, 0.38%)</title><rect x="822" y="420" width="4" height="15" fill="rgb(225,92,24)"/><text x="825.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (5 samples, 0.32%)</title><rect x="823" y="436" width="3" height="15" fill="rgb(211,98,11)"/><text x="826.00" y="446.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (2 samples, 0.13%)</title><rect x="832" y="420" width="2" height="15" fill="rgb(215,10,20)"/><text x="835.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (2 samples, 0.13%)</title><rect x="832" y="436" width="2" height="15" fill="rgb(242,92,44)"/><text x="835.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (2 samples, 0.13%)</title><rect x="832" y="452" width="2" height="15" fill="rgb(214,227,14)"/><text x="835.00" y="462.50"></text></g><g><title>PyArray_Return (scalarapi.c) (2 samples, 0.13%)</title><rect x="834" y="420" width="1" height="15" fill="rgb(221,44,20)"/><text x="837.00" y="430.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (3 samples, 0.19%)</title><rect x="842" y="468" width="2" height="15" fill="rgb(212,105,43)"/><text x="845.00" y="478.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (3 samples, 0.19%)</title><rect x="842" y="484" width="2" height="15" fill="rgb(220,1,51)"/><text x="845.00" y="494.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c) (2 samples, 0.13%)</title><rect x="843" y="500" width="1" height="15" fill="rgb(250,219,27)"/><text x="846.00" y="510.50"></text></g><g><title>PyArray_GetStridedCopyFn (lowlevel_strided_loops.c.src) (2 samples, 0.13%)</title><rect x="843" y="516" width="1" height="15" fill="rgb(244,142,5)"/><text x="846.00" y="526.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (3 samples, 0.19%)</title><rect x="846" y="468" width="2" height="15" fill="rgb(224,226,45)"/><text x="849.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (18 samples, 1.14%)</title><rect x="838" y="452" width="13" height="15" fill="rgb(249,17,28)"/><text x="841.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (3 samples, 0.19%)</title><rect x="849" y="468" width="2" height="15" fill="rgb(208,40,7)"/><text x="852.00" y="478.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (2 samples, 0.13%)</title><rect x="851" y="452" width="2" height="15" fill="rgb(249,66,54)"/><text x="854.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (7 samples, 0.44%)</title><rect x="853" y="484" width="6" height="15" fill="rgb(222,222,32)"/><text x="856.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (7 samples, 0.44%)</title><rect x="853" y="500" width="6" height="15" fill="rgb(250,13,39)"/><text x="856.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (3 samples, 0.19%)</title><rect x="856" y="516" width="3" height="15" fill="rgb(225,220,9)"/><text x="859.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (2 samples, 0.13%)</title><rect x="857" y="532" width="2" height="15" fill="rgb(215,97,18)"/><text x="860.00" y="542.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (12 samples, 0.76%)</title><rect x="853" y="452" width="9" height="15" fill="rgb(233,81,6)"/><text x="856.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (12 samples, 0.76%)</title><rect x="853" y="468" width="9" height="15" fill="rgb(252,92,46)"/><text x="856.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.19%)</title><rect x="859" y="484" width="3" height="15" fill="rgb(250,55,42)"/><text x="862.00" y="494.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (2 samples, 0.13%)</title><rect x="865" y="500" width="2" height="15" fill="rgb(226,204,48)"/><text x="868.00" y="510.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (2 samples, 0.13%)</title><rect x="865" y="516" width="2" height="15" fill="rgb(213,23,12)"/><text x="868.00" y="526.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (2 samples, 0.13%)</title><rect x="865" y="532" width="2" height="15" fill="rgb(246,32,37)"/><text x="868.00" y="542.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c) (4 samples, 0.25%)</title><rect x="865" y="484" width="3" height="15" fill="rgb(248,212,4)"/><text x="868.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (15 samples, 0.95%)</title><rect x="862" y="452" width="11" height="15" fill="rgb(219,114,26)"/><text x="865.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (10 samples, 0.63%)</title><rect x="865" y="468" width="8" height="15" fill="rgb(218,125,28)"/><text x="868.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (6 samples, 0.38%)</title><rect x="868" y="484" width="5" height="15" fill="rgb(215,140,4)"/><text x="871.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src) (76 samples, 4.80%)</title><rect x="885" y="468" width="57" height="15" fill="rgb(247,2,34)"/><text x="888.00" y="478.50">FLOAT_..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (41 samples, 2.59%)</title><rect x="911" y="484" width="31" height="15" fill="rgb(248,93,50)"/><text x="914.00" y="494.50">pa..</text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (2 samples, 0.13%)</title><rect x="942" y="468" width="2" height="15" fill="rgb(213,223,41)"/><text x="945.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (170 samples, 10.74%)</title><rect x="838" y="436" width="126" height="15" fill="rgb(246,70,14)"/><text x="841.00" y="446.50">PyUFunc_ReduceW..</text></g><g><title>reduce_loop (ufunc_object.c) (122 samples, 7.71%)</title><rect x="873" y="452" width="91" height="15" fill="rgb(236,204,7)"/><text x="876.00" y="462.50">reduce_loo..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (27 samples, 1.71%)</title><rect x="944" y="468" width="20" height="15" fill="rgb(218,220,12)"/><text x="947.00" y="478.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (186 samples, 11.75%)</title><rect x="835" y="420" width="139" height="15" fill="rgb(224,172,46)"/><text x="838.00" y="430.50">PyUFunc_Reduce (u..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (12 samples, 0.76%)</title><rect x="965" y="436" width="9" height="15" fill="rgb(212,160,44)"/><text x="968.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (10 samples, 0.63%)</title><rect x="967" y="452" width="7" height="15" fill="rgb(212,88,4)"/><text x="970.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (9 samples, 0.57%)</title><rect x="967" y="468" width="7" height="15" fill="rgb(242,165,1)"/><text x="970.00" y="478.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (252 samples, 15.92%)</title><rect x="788" y="324" width="188" height="15" fill="rgb(226,220,13)"/><text x="791.00" y="334.50">sum (&lt;__array_function__..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (249 samples, 15.73%)</title><rect x="790" y="340" width="186" height="15" fill="rgb(222,35,10)"/><text x="793.00" y="350.50">array_implement_array_fu..</text></g><g><title>sum (numpy/core/fromnumeric.py) (244 samples, 15.41%)</title><rect x="794" y="356" width="182" height="15" fill="rgb(220,113,28)"/><text x="797.00" y="366.50">sum (numpy/core/fromnum..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (234 samples, 14.78%)</title><rect x="801" y="372" width="175" height="15" fill="rgb(206,203,34)"/><text x="804.00" y="382.50">_wrapreduction (numpy/..</text></g><g><title>ufunc_reduce (ufunc_object.c) (207 samples, 13.08%)</title><rect x="821" y="388" width="155" height="15" fill="rgb(239,87,10)"/><text x="824.00" y="398.50">ufunc_reduce (ufunc..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (200 samples, 12.63%)</title><rect x="826" y="404" width="150" height="15" fill="rgb(208,95,24)"/><text x="829.00" y="414.50">PyUFunc_GenericRedu..</text></g><g><title>PyArray_NewFromDescr (ctors.c) (4 samples, 0.25%)</title><rect x="978" y="372" width="3" height="15" fill="rgb(221,195,19)"/><text x="981.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.25%)</title><rect x="978" y="388" width="3" height="15" fill="rgb(224,106,27)"/><text x="981.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (2 samples, 0.13%)</title><rect x="979" y="404" width="2" height="15" fill="rgb(222,2,40)"/><text x="982.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (2 samples, 0.13%)</title><rect x="979" y="420" width="2" height="15" fill="rgb(238,21,42)"/><text x="982.00" y="430.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h) (6 samples, 0.38%)</title><rect x="983" y="404" width="4" height="15" fill="rgb(218,62,23)"/><text x="986.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (15 samples, 0.95%)</title><rect x="978" y="356" width="11" height="15" fill="rgb(219,167,23)"/><text x="981.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (10 samples, 0.63%)</title><rect x="982" y="372" width="7" height="15" fill="rgb(231,38,13)"/><text x="985.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (9 samples, 0.57%)</title><rect x="982" y="388" width="7" height="15" fill="rgb(240,153,46)"/><text x="985.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (2 samples, 0.13%)</title><rect x="987" y="404" width="2" height="15" fill="rgb(213,137,53)"/><text x="990.00" y="414.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (3 samples, 0.19%)</title><rect x="995" y="388" width="2" height="15" fill="rgb(248,123,39)"/><text x="998.00" y="398.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (686 samples, 43.34%)</title><rect x="487" y="244" width="512" height="15" fill="rgb(235,213,28)"/><text x="490.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (627 samples, 39.61%)</title><rect x="531" y="260" width="468" height="15" fill="rgb(252,216,9)"/><text x="534.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (507 samples, 32.03%)</title><rect x="621" y="276" width="378" height="15" fill="rgb(234,7,46)"/><text x="624.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (478 samples, 30.20%)</title><rect x="642" y="292" width="357" height="15" fill="rgb(243,151,36)"/><text x="645.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (299 samples, 18.89%)</title><rect x="776" y="308" width="223" height="15" fill="rgb(224,115,14)"/><text x="779.00" y="318.50">_run (mlprodict/onnxrt/ops_cp..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (31 samples, 1.96%)</title><rect x="976" y="324" width="23" height="15" fill="rgb(238,91,35)"/><text x="979.00" y="334.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (28 samples, 1.77%)</title><rect x="978" y="340" width="21" height="15" fill="rgb(207,170,53)"/><text x="981.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (13 samples, 0.82%)</title><rect x="989" y="356" width="10" height="15" fill="rgb(239,95,24)"/><text x="992.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (8 samples, 0.51%)</title><rect x="993" y="372" width="6" height="15" fill="rgb(229,76,7)"/><text x="996.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (2 samples, 0.13%)</title><rect x="997" y="388" width="2" height="15" fill="rgb(206,19,23)"/><text x="1000.00" y="398.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (698 samples, 44.09%)</title><rect x="480" y="228" width="520" height="15" fill="rgb(251,31,27)"/><text x="483.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.13%)</title><rect x="999" y="244" width="1" height="15" fill="rgb(222,81,22)"/><text x="1002.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.13%)</title><rect x="999" y="260" width="1" height="15" fill="rgb(224,15,41)"/><text x="1002.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (797 samples, 50.35%)</title><rect x="414" y="212" width="594" height="15" fill="rgb(229,172,21)"/><text x="417.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (9 samples, 0.57%)</title><rect x="1001" y="228" width="7" height="15" fill="rgb(217,36,45)"/><text x="1004.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 0.51%)</title><rect x="1002" y="244" width="6" height="15" fill="rgb(240,29,54)"/><text x="1005.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (8 samples, 0.51%)</title><rect x="1002" y="260" width="6" height="15" fill="rgb(212,123,0)"/><text x="1005.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (7 samples, 0.44%)</title><rect x="1002" y="276" width="6" height="15" fill="rgb(233,184,41)"/><text x="1005.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.38%)</title><rect x="1003" y="292" width="5" height="15" fill="rgb(231,81,39)"/><text x="1006.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (6 samples, 0.38%)</title><rect x="1003" y="308" width="5" height="15" fill="rgb(245,148,36)"/><text x="1006.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (6 samples, 0.38%)</title><rect x="1003" y="324" width="5" height="15" fill="rgb(217,125,50)"/><text x="1006.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (5 samples, 0.32%)</title><rect x="1004" y="340" width="4" height="15" fill="rgb(242,64,42)"/><text x="1007.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (5 samples, 0.32%)</title><rect x="1004" y="356" width="4" height="15" fill="rgb(254,48,37)"/><text x="1007.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (5 samples, 0.32%)</title><rect x="1004" y="372" width="4" height="15" fill="rgb(211,192,42)"/><text x="1007.00" y="382.50"></text></g><g><title>0x7f464600ed94 (libc-2.29.so) (4 samples, 0.25%)</title><rect x="1005" y="388" width="3" height="15" fill="rgb(237,224,45)"/><text x="1008.00" y="398.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src) (7 samples, 0.44%)</title><rect x="1017" y="372" width="6" height="15" fill="rgb(249,65,24)"/><text x="1020.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c) (6 samples, 0.38%)</title><rect x="1018" y="388" width="5" height="15" fill="rgb(215,229,48)"/><text x="1021.00" y="398.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (59 samples, 3.73%)</title><rect x="1009" y="260" width="44" height="15" fill="rgb(253,4,1)"/><text x="1012.00" y="270.50">argp..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (59 samples, 3.73%)</title><rect x="1009" y="276" width="44" height="15" fill="rgb(245,214,38)"/><text x="1012.00" y="286.50">arra..</text></g><g><title>argpartition (numpy/core/fromnumeric.py) (59 samples, 3.73%)</title><rect x="1009" y="292" width="44" height="15" fill="rgb(235,99,21)"/><text x="1012.00" y="302.50">argp..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (59 samples, 3.73%)</title><rect x="1009" y="308" width="44" height="15" fill="rgb(246,178,52)"/><text x="1012.00" y="318.50">_wra..</text></g><g><title>array_argpartition (methods.c) (59 samples, 3.73%)</title><rect x="1009" y="324" width="44" height="15" fill="rgb(210,99,47)"/><text x="1012.00" y="334.50">arra..</text></g><g><title>PyArray_ArgPartition (item_selection.c) (58 samples, 3.66%)</title><rect x="1010" y="340" width="43" height="15" fill="rgb(236,58,7)"/><text x="1013.00" y="350.50">PyAr..</text></g><g><title>_new_argsortlike (item_selection.c) (58 samples, 3.66%)</title><rect x="1010" y="356" width="43" height="15" fill="rgb(207,227,49)"/><text x="1013.00" y="366.50">_new..</text></g><g><title>aintroselect_float (selection.c.src) (41 samples, 2.59%)</title><rect x="1023" y="372" width="30" height="15" fill="rgb(244,59,20)"/><text x="1026.00" y="382.50">ai..</text></g><g><title>adumb_select_float (selection.c.src) (41 samples, 2.59%)</title><rect x="1023" y="388" width="30" height="15" fill="rgb(228,128,18)"/><text x="1026.00" y="398.50">ad..</text></g><g><title>FLOAT_LT (npysort_common.h) (33 samples, 2.08%)</title><rect x="1028" y="404" width="25" height="15" fill="rgb(206,103,9)"/><text x="1031.00" y="414.50">F..</text></g><g><title>argsort (numpy/core/fromnumeric.py) (5 samples, 0.32%)</title><rect x="1053" y="292" width="4" height="15" fill="rgb(247,23,48)"/><text x="1056.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (5 samples, 0.32%)</title><rect x="1053" y="308" width="4" height="15" fill="rgb(228,79,1)"/><text x="1056.00" y="318.50"></text></g><g><title>array_argsort (methods.c) (5 samples, 0.32%)</title><rect x="1053" y="324" width="4" height="15" fill="rgb(212,214,54)"/><text x="1056.00" y="334.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (5 samples, 0.32%)</title><rect x="1053" y="340" width="4" height="15" fill="rgb(252,71,1)"/><text x="1056.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (5 samples, 0.32%)</title><rect x="1053" y="356" width="4" height="15" fill="rgb(228,82,15)"/><text x="1056.00" y="366.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (7 samples, 0.44%)</title><rect x="1053" y="260" width="5" height="15" fill="rgb(233,228,31)"/><text x="1056.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 0.44%)</title><rect x="1053" y="276" width="5" height="15" fill="rgb(221,41,4)"/><text x="1056.00" y="286.50"></text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (2 samples, 0.13%)</title><rect x="1057" y="292" width="1" height="15" fill="rgb(224,164,0)"/><text x="1060.00" y="302.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (3 samples, 0.19%)</title><rect x="1059" y="276" width="2" height="15" fill="rgb(252,143,45)"/><text x="1062.00" y="286.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (2 samples, 0.13%)</title><rect x="1061" y="276" width="2" height="15" fill="rgb(216,116,26)"/><text x="1064.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (78 samples, 4.93%)</title><rect x="1008" y="212" width="59" height="15" fill="rgb(212,102,10)"/><text x="1011.00" y="222.50">_run (..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (78 samples, 4.93%)</title><rect x="1008" y="228" width="59" height="15" fill="rgb(220,109,44)"/><text x="1011.00" y="238.50">_commo..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (78 samples, 4.93%)</title><rect x="1008" y="244" width="59" height="15" fill="rgb(207,82,21)"/><text x="1011.00" y="254.50">topk_s..</text></g><g><title>array_subscript (mapping.c) (10 samples, 0.63%)</title><rect x="1059" y="260" width="8" height="15" fill="rgb(225,52,0)"/><text x="1062.00" y="270.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (5 samples, 0.32%)</title><rect x="1063" y="276" width="4" height="15" fill="rgb(232,67,53)"/><text x="1066.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.13%)</title><rect x="1067" y="212" width="1" height="15" fill="rgb(247,172,46)"/><text x="1070.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.13%)</title><rect x="1067" y="228" width="1" height="15" fill="rgb(220,93,6)"/><text x="1070.00" y="238.50"></text></g><g><title>npy_free_cache (alloc.c) (2 samples, 0.13%)</title><rect x="1067" y="244" width="1" height="15" fill="rgb(215,191,36)"/><text x="1070.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c) (2 samples, 0.13%)</title><rect x="1067" y="260" width="1" height="15" fill="rgb(238,57,43)"/><text x="1070.00" y="270.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (2 samples, 0.13%)</title><rect x="1067" y="276" width="1" height="15" fill="rgb(232,35,38)"/><text x="1070.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1069" y="308" width="3" height="15" fill="rgb(251,164,52)"/><text x="1072.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1069" y="324" width="3" height="15" fill="rgb(220,107,8)"/><text x="1072.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py) (8 samples, 0.51%)</title><rect x="1068" y="228" width="6" height="15" fill="rgb(243,154,23)"/><text x="1071.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;) (8 samples, 0.51%)</title><rect x="1068" y="244" width="6" height="15" fill="rgb(229,108,42)"/><text x="1071.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 0.51%)</title><rect x="1068" y="260" width="6" height="15" fill="rgb(219,154,52)"/><text x="1071.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (8 samples, 0.51%)</title><rect x="1068" y="276" width="6" height="15" fill="rgb(237,130,14)"/><text x="1071.00" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py) (6 samples, 0.38%)</title><rect x="1069" y="292" width="5" height="15" fill="rgb(216,69,13)"/><text x="1072.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1072" y="308" width="2" height="15" fill="rgb(216,2,2)"/><text x="1075.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1072" y="324" width="2" height="15" fill="rgb(213,106,14)"/><text x="1075.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1072" y="340" width="2" height="15" fill="rgb(234,177,27)"/><text x="1075.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (2 samples, 0.13%)</title><rect x="1072" y="356" width="2" height="15" fill="rgb(218,5,12)"/><text x="1075.00" y="366.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (920 samples, 58.12%)</title><rect x="391" y="164" width="686" height="15" fill="rgb(207,195,45)"/><text x="394.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (919 samples, 58.05%)</title><rect x="392" y="180" width="685" height="15" fill="rgb(219,104,40)"/><text x="395.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (913 samples, 57.68%)</title><rect x="396" y="196" width="681" height="15" fill="rgb(247,43,48)"/><text x="399.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (12 samples, 0.76%)</title><rect x="1068" y="212" width="9" height="15" fill="rgb(221,186,19)"/><text x="1071.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (4 samples, 0.25%)</title><rect x="1074" y="228" width="3" height="15" fill="rgb(248,90,39)"/><text x="1077.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.25%)</title><rect x="1074" y="244" width="3" height="15" fill="rgb(228,222,23)"/><text x="1077.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.25%)</title><rect x="1074" y="260" width="3" height="15" fill="rgb(214,154,48)"/><text x="1077.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.25%)</title><rect x="1074" y="276" width="3" height="15" fill="rgb(251,136,45)"/><text x="1077.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (4 samples, 0.25%)</title><rect x="1074" y="292" width="3" height="15" fill="rgb(230,224,20)"/><text x="1077.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src) (4 samples, 0.25%)</title><rect x="1074" y="308" width="3" height="15" fill="rgb(241,30,0)"/><text x="1077.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src) (4 samples, 0.25%)</title><rect x="1074" y="324" width="3" height="15" fill="rgb(216,23,41)"/><text x="1077.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src) (4 samples, 0.25%)</title><rect x="1074" y="340" width="3" height="15" fill="rgb(217,83,42)"/><text x="1077.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (4 samples, 0.25%)</title><rect x="1074" y="356" width="3" height="15" fill="rgb(242,140,38)"/><text x="1077.00" y="366.50"></text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (925 samples, 58.43%)</title><rect x="388" y="100" width="690" height="15" fill="rgb(224,172,32)"/><text x="391.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (924 samples, 58.37%)</title><rect x="389" y="116" width="689" height="15" fill="rgb(231,22,33)"/><text x="392.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (923 samples, 58.31%)</title><rect x="390" y="132" width="688" height="15" fill="rgb(218,87,4)"/><text x="393.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (923 samples, 58.31%)</title><rect x="390" y="148" width="688" height="15" fill="rgb(236,68,2)"/><text x="393.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (926 samples, 58.50%)</title><rect x="388" y="68" width="690" height="15" fill="rgb(233,45,28)"/><text x="391.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (926 samples, 58.50%)</title><rect x="388" y="84" width="690" height="15" fill="rgb(221,51,1)"/><text x="391.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12..</text></g><g><title>array_subscript (mapping.c) (2 samples, 0.13%)</title><rect x="1078" y="164" width="2" height="15" fill="rgb(210,39,30)"/><text x="1081.00" y="174.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (2 samples, 0.13%)</title><rect x="1083" y="180" width="1" height="15" fill="rgb(227,76,33)"/><text x="1086.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (8 samples, 0.51%)</title><rect x="1080" y="164" width="6" height="15" fill="rgb(213,120,19)"/><text x="1083.00" y="174.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (53 samples, 3.35%)</title><rect x="1091" y="212" width="40" height="15" fill="rgb(235,110,33)"/><text x="1094.00" y="222.50">arg..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (53 samples, 3.35%)</title><rect x="1091" y="228" width="40" height="15" fill="rgb(219,205,12)"/><text x="1094.00" y="238.50">arr..</text></g><g><title>argpartition (numpy/core/fromnumeric.py) (53 samples, 3.35%)</title><rect x="1091" y="244" width="40" height="15" fill="rgb(231,63,21)"/><text x="1094.00" y="254.50">arg..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (53 samples, 3.35%)</title><rect x="1091" y="260" width="40" height="15" fill="rgb(227,42,2)"/><text x="1094.00" y="270.50">_wr..</text></g><g><title>array_argpartition (methods.c) (53 samples, 3.35%)</title><rect x="1091" y="276" width="40" height="15" fill="rgb(220,181,29)"/><text x="1094.00" y="286.50">arr..</text></g><g><title>PyArray_ArgPartition (item_selection.c) (53 samples, 3.35%)</title><rect x="1091" y="292" width="40" height="15" fill="rgb(207,18,25)"/><text x="1094.00" y="302.50">PyA..</text></g><g><title>_new_argsortlike (item_selection.c) (53 samples, 3.35%)</title><rect x="1091" y="308" width="40" height="15" fill="rgb(229,161,45)"/><text x="1094.00" y="318.50">_ne..</text></g><g><title>aintroselect_double (selection.c.src) (49 samples, 3.10%)</title><rect x="1094" y="324" width="37" height="15" fill="rgb(234,20,38)"/><text x="1097.00" y="334.50">ain..</text></g><g><title>adumb_select_double (selection.c.src) (47 samples, 2.97%)</title><rect x="1096" y="340" width="35" height="15" fill="rgb(221,33,12)"/><text x="1099.00" y="350.50">ad..</text></g><g><title>DOUBLE_LT (npysort_common.h) (33 samples, 2.08%)</title><rect x="1106" y="356" width="25" height="15" fill="rgb(244,81,3)"/><text x="1109.00" y="366.50">D..</text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (3 samples, 0.19%)</title><rect x="1131" y="212" width="2" height="15" fill="rgb(247,95,26)"/><text x="1134.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.19%)</title><rect x="1131" y="228" width="2" height="15" fill="rgb(253,139,50)"/><text x="1134.00" y="238.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (3 samples, 0.19%)</title><rect x="1131" y="244" width="2" height="15" fill="rgb(211,6,2)"/><text x="1134.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (3 samples, 0.19%)</title><rect x="1131" y="260" width="2" height="15" fill="rgb(220,207,18)"/><text x="1134.00" y="270.50"></text></g><g><title>array_argsort (methods.c) (2 samples, 0.13%)</title><rect x="1131" y="276" width="2" height="15" fill="rgb(236,152,0)"/><text x="1134.00" y="286.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (2 samples, 0.13%)</title><rect x="1131" y="292" width="2" height="15" fill="rgb(224,77,8)"/><text x="1134.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c) (2 samples, 0.13%)</title><rect x="1131" y="308" width="2" height="15" fill="rgb(254,27,28)"/><text x="1134.00" y="318.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (3 samples, 0.19%)</title><rect x="1134" y="228" width="2" height="15" fill="rgb(218,34,21)"/><text x="1137.00" y="238.50"></text></g><g><title>check_and_adjust_index (common.h) (3 samples, 0.19%)</title><rect x="1134" y="244" width="2" height="15" fill="rgb(235,26,46)"/><text x="1137.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (11 samples, 0.69%)</title><rect x="1134" y="212" width="8" height="15" fill="rgb(225,76,14)"/><text x="1137.00" y="222.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (8 samples, 0.51%)</title><rect x="1136" y="228" width="6" height="15" fill="rgb(213,31,33)"/><text x="1139.00" y="238.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py) (69 samples, 4.36%)</title><rect x="1091" y="196" width="52" height="15" fill="rgb(237,144,14)"/><text x="1094.00" y="206.50">_knei..</text></g><g><title>array_multiply (number.c) (2 samples, 0.13%)</title><rect x="1144" y="244" width="2" height="15" fill="rgb(220,56,0)"/><text x="1147.00" y="254.50"></text></g><g><title>try_binary_elide (temp_elide.c) (2 samples, 0.13%)</title><rect x="1144" y="260" width="2" height="15" fill="rgb(243,120,38)"/><text x="1147.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1144" y="276" width="2" height="15" fill="rgb(218,224,23)"/><text x="1147.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1144" y="292" width="2" height="15" fill="rgb(248,9,42)"/><text x="1147.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1144" y="308" width="2" height="15" fill="rgb(207,53,37)"/><text x="1147.00" y="318.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1144" y="324" width="2" height="15" fill="rgb(222,227,20)"/><text x="1147.00" y="334.50"></text></g><g><title>sse2_binary_scalar2_multiply_DOUBLE (simd.inc.src) (2 samples, 0.13%)</title><rect x="1144" y="340" width="2" height="15" fill="rgb(216,57,29)"/><text x="1147.00" y="350.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py) (6 samples, 0.38%)</title><rect x="1146" y="244" width="4" height="15" fill="rgb(211,155,9)"/><text x="1149.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (6 samples, 0.38%)</title><rect x="1146" y="260" width="4" height="15" fill="rgb(242,94,45)"/><text x="1149.00" y="270.50"></text></g><g><title>simplefilter (warnings.py) (2 samples, 0.13%)</title><rect x="1149" y="276" width="1" height="15" fill="rgb(245,227,44)"/><text x="1152.00" y="286.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py) (2 samples, 0.13%)</title><rect x="1150" y="244" width="1" height="15" fill="rgb(244,69,42)"/><text x="1153.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;) (2 samples, 0.13%)</title><rect x="1150" y="260" width="1" height="15" fill="rgb(238,175,36)"/><text x="1153.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.13%)</title><rect x="1150" y="276" width="1" height="15" fill="rgb(218,76,25)"/><text x="1153.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py) (2 samples, 0.13%)</title><rect x="1150" y="292" width="1" height="15" fill="rgb(249,61,46)"/><text x="1153.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c) (2 samples, 0.13%)</title><rect x="1150" y="308" width="1" height="15" fill="rgb(220,62,23)"/><text x="1153.00" y="318.50"></text></g><g><title>PyArray_EinsteinSum (einsum.c.src) (2 samples, 0.13%)</title><rect x="1150" y="324" width="1" height="15" fill="rgb(210,166,21)"/><text x="1153.00" y="334.50"></text></g><g><title>dgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.13%)</title><rect x="1151" y="260" width="2" height="15" fill="rgb(233,17,40)"/><text x="1154.00" y="270.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.32%)</title><rect x="1153" y="260" width="4" height="15" fill="rgb(222,62,8)"/><text x="1156.00" y="270.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (15 samples, 0.95%)</title><rect x="1151" y="244" width="12" height="15" fill="rgb(218,213,3)"/><text x="1154.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (8 samples, 0.51%)</title><rect x="1157" y="260" width="6" height="15" fill="rgb(225,203,28)"/><text x="1160.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (8 samples, 0.51%)</title><rect x="1157" y="276" width="6" height="15" fill="rgb(234,182,31)"/><text x="1160.00" y="286.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (8 samples, 0.51%)</title><rect x="1157" y="292" width="6" height="15" fill="rgb(221,13,3)"/><text x="1160.00" y="302.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src) (8 samples, 0.51%)</title><rect x="1157" y="308" width="6" height="15" fill="rgb(252,214,24)"/><text x="1160.00" y="318.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (8 samples, 0.51%)</title><rect x="1157" y="324" width="6" height="15" fill="rgb(241,174,46)"/><text x="1160.00" y="334.50"></text></g><g><title>dgemm_thread_tn (libopenblasp-r0-34a18dc3.3.7.so) (8 samples, 0.51%)</title><rect x="1157" y="340" width="6" height="15" fill="rgb(251,10,10)"/><text x="1160.00" y="350.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (8 samples, 0.51%)</title><rect x="1157" y="356" width="6" height="15" fill="rgb(242,141,20)"/><text x="1160.00" y="366.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (8 samples, 0.51%)</title><rect x="1157" y="372" width="6" height="15" fill="rgb(247,148,51)"/><text x="1160.00" y="382.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (8 samples, 0.51%)</title><rect x="1157" y="388" width="6" height="15" fill="rgb(248,115,15)"/><text x="1160.00" y="398.50"></text></g><g><title>sched_yield (libc-2.29.so) (8 samples, 0.51%)</title><rect x="1157" y="404" width="6" height="15" fill="rgb(207,31,18)"/><text x="1160.00" y="414.50"></text></g><g><title>_mm_add_pd (emmintrin.h) (3 samples, 0.19%)</title><rect x="1165" y="356" width="2" height="15" fill="rgb(248,0,2)"/><text x="1168.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src) (5 samples, 0.32%)</title><rect x="1164" y="308" width="4" height="15" fill="rgb(252,96,44)"/><text x="1167.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (5 samples, 0.32%)</title><rect x="1164" y="324" width="4" height="15" fill="rgb(220,22,32)"/><text x="1167.00" y="334.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (5 samples, 0.32%)</title><rect x="1164" y="340" width="4" height="15" fill="rgb(237,85,9)"/><text x="1167.00" y="350.50"></text></g><g><title>iterator_loop (ufunc_object.c) (10 samples, 0.63%)</title><rect x="1164" y="292" width="8" height="15" fill="rgb(236,105,5)"/><text x="1167.00" y="302.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (4 samples, 0.25%)</title><rect x="1169" y="308" width="3" height="15" fill="rgb(206,90,30)"/><text x="1172.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (4 samples, 0.25%)</title><rect x="1169" y="324" width="3" height="15" fill="rgb(215,60,0)"/><text x="1172.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (4 samples, 0.25%)</title><rect x="1169" y="340" width="3" height="15" fill="rgb(217,142,10)"/><text x="1172.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (3 samples, 0.19%)</title><rect x="1169" y="356" width="3" height="15" fill="rgb(241,100,41)"/><text x="1172.00" y="366.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py) (123 samples, 7.77%)</title><rect x="1090" y="180" width="91" height="15" fill="rgb(207,212,36)"/><text x="1093.00" y="190.50">pairwise_d..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py) (51 samples, 3.22%)</title><rect x="1143" y="196" width="38" height="15" fill="rgb(228,34,40)"/><text x="1146.00" y="206.50">pai..</text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py) (50 samples, 3.16%)</title><rect x="1144" y="212" width="37" height="15" fill="rgb(207,115,35)"/><text x="1147.00" y="222.50">_pa..</text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py) (50 samples, 3.16%)</title><rect x="1144" y="228" width="37" height="15" fill="rgb(210,30,13)"/><text x="1147.00" y="238.50">euc..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (25 samples, 1.58%)</title><rect x="1163" y="244" width="18" height="15" fill="rgb(213,207,24)"/><text x="1166.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (25 samples, 1.58%)</title><rect x="1163" y="260" width="18" height="15" fill="rgb(211,164,35)"/><text x="1166.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (24 samples, 1.52%)</title><rect x="1163" y="276" width="18" height="15" fill="rgb(207,5,49)"/><text x="1166.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (13 samples, 0.82%)</title><rect x="1172" y="292" width="9" height="15" fill="rgb(234,107,50)"/><text x="1175.00" y="302.50"></text></g><g><title>DOUBLE_maximum (loops.c.src) (13 samples, 0.82%)</title><rect x="1172" y="308" width="9" height="15" fill="rgb(216,195,46)"/><text x="1175.00" y="318.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (130 samples, 8.21%)</title><rect x="1086" y="164" width="97" height="15" fill="rgb(245,125,15)"/><text x="1089.00" y="174.50">kneighbors ..</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (2 samples, 0.13%)</title><rect x="1181" y="180" width="2" height="15" fill="rgb(234,226,30)"/><text x="1184.00" y="190.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.19%)</title><rect x="1184" y="292" width="3" height="15" fill="rgb(208,147,21)"/><text x="1187.00" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (2 samples, 0.13%)</title><rect x="1185" y="308" width="2" height="15" fill="rgb(248,149,25)"/><text x="1188.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (2 samples, 0.13%)</title><rect x="1185" y="324" width="2" height="15" fill="rgb(239,175,7)"/><text x="1188.00" y="334.50"></text></g><g><title>all (1,583 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(211,158,47)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (1,583 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(229,123,27)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (149 samples, 9.41%)</title><rect x="1078" y="68" width="112" height="15" fill="rgb(231,211,43)"/><text x="1081.00" y="78.50">profile_skl (..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (149 samples, 9.41%)</title><rect x="1078" y="84" width="112" height="15" fill="rgb(246,134,45)"/><text x="1081.00" y="94.50">setup_profile..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (149 samples, 9.41%)</title><rect x="1078" y="100" width="112" height="15" fill="rgb(228,97,13)"/><text x="1081.00" y="110.50">profile (benc..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (149 samples, 9.41%)</title><rect x="1078" y="116" width="112" height="15" fill="rgb(220,173,50)"/><text x="1081.00" y="126.50">time_predict ..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (149 samples, 9.41%)</title><rect x="1078" y="132" width="112" height="15" fill="rgb(225,15,49)"/><text x="1081.00" y="142.50">&lt;lambda&gt; (mlp..</text></g><g><title>predict (sklearn/neighbors/_regression.py) (149 samples, 9.41%)</title><rect x="1078" y="148" width="112" height="15" fill="rgb(241,67,14)"/><text x="1081.00" y="158.50">predict (skle..</text></g><g><title>mean (&lt;__array_function__ internals&gt;) (9 samples, 0.57%)</title><rect x="1183" y="164" width="7" height="15" fill="rgb(244,121,5)"/><text x="1186.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 0.57%)</title><rect x="1183" y="180" width="7" height="15" fill="rgb(246,222,5)"/><text x="1186.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (9 samples, 0.57%)</title><rect x="1183" y="196" width="7" height="15" fill="rgb(251,20,9)"/><text x="1186.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py) (9 samples, 0.57%)</title><rect x="1183" y="212" width="7" height="15" fill="rgb(219,121,50)"/><text x="1186.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (7 samples, 0.44%)</title><rect x="1184" y="228" width="6" height="15" fill="rgb(240,47,36)"/><text x="1187.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (7 samples, 0.44%)</title><rect x="1184" y="244" width="6" height="15" fill="rgb(242,28,27)"/><text x="1187.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (7 samples, 0.44%)</title><rect x="1184" y="260" width="6" height="15" fill="rgb(222,35,38)"/><text x="1187.00" y="270.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (7 samples, 0.44%)</title><rect x="1184" y="276" width="6" height="15" fill="rgb(221,202,47)"/><text x="1187.00" y="286.50"></text></g><g><title>reduce_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1188" y="292" width="2" height="15" fill="rgb(206,10,20)"/><text x="1191.00" y="302.50"></text></g></g></svg>