<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1846" onload="init(evt)" viewBox="0 0 1200 1846" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1846" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1829.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1829.00"> </text><g id="frames"><g><title>_build_master (pkg_resources/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(243,2,18)"/><text x="13.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(233,36,15)"/><text x="13.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(254,218,54)"/><text x="13.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="916" width="1" height="15" fill="rgb(229,123,7)"/><text x="13.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="196" width="2" height="15" fill="rgb(205,200,51)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="212" width="2" height="15" fill="rgb(231,108,41)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="228" width="2" height="15" fill="rgb(208,23,43)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="244" width="2" height="15" fill="rgb(219,118,24)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.18%)</title><rect x="10" y="260" width="2" height="15" fill="rgb(227,30,45)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="276" width="2" height="15" fill="rgb(253,41,36)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (5 samples, 0.18%)</title><rect x="10" y="292" width="2" height="15" fill="rgb(253,88,45)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="308" width="2" height="15" fill="rgb(213,227,54)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="324" width="2" height="15" fill="rgb(209,113,23)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="340" width="2" height="15" fill="rgb(212,150,53)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.18%)</title><rect x="10" y="356" width="2" height="15" fill="rgb(236,70,42)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="372" width="2" height="15" fill="rgb(239,64,35)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (5 samples, 0.18%)</title><rect x="10" y="388" width="2" height="15" fill="rgb(244,220,11)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="404" width="2" height="15" fill="rgb(252,0,0)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="420" width="2" height="15" fill="rgb(235,27,8)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="436" width="2" height="15" fill="rgb(215,63,26)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.18%)</title><rect x="10" y="452" width="2" height="15" fill="rgb(225,84,52)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="468" width="2" height="15" fill="rgb(236,187,43)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (5 samples, 0.18%)</title><rect x="10" y="484" width="2" height="15" fill="rgb(246,71,16)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="500" width="2" height="15" fill="rgb(253,18,34)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="516" width="2" height="15" fill="rgb(247,142,46)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="532" width="2" height="15" fill="rgb(254,52,39)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.18%)</title><rect x="10" y="548" width="2" height="15" fill="rgb(229,56,40)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="564" width="2" height="15" fill="rgb(244,114,30)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (5 samples, 0.18%)</title><rect x="10" y="580" width="2" height="15" fill="rgb(232,149,22)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="596" width="2" height="15" fill="rgb(230,53,31)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="612" width="2" height="15" fill="rgb(216,76,54)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="628" width="2" height="15" fill="rgb(244,157,29)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="644" width="2" height="15" fill="rgb(224,146,19)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="660" width="2" height="15" fill="rgb(205,121,7)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="676" width="2" height="15" fill="rgb(242,204,45)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.18%)</title><rect x="10" y="692" width="2" height="15" fill="rgb(212,61,11)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="708" width="2" height="15" fill="rgb(246,81,39)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (5 samples, 0.18%)</title><rect x="10" y="724" width="2" height="15" fill="rgb(242,72,6)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="740" width="2" height="15" fill="rgb(243,62,52)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="756" width="2" height="15" fill="rgb(212,200,7)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="772" width="2" height="15" fill="rgb(216,82,23)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.18%)</title><rect x="10" y="788" width="2" height="15" fill="rgb(217,213,30)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="804" width="2" height="15" fill="rgb(229,223,46)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (5 samples, 0.18%)</title><rect x="10" y="820" width="2" height="15" fill="rgb(211,142,21)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (4 samples, 0.14%)</title><rect x="10" y="836" width="2" height="15" fill="rgb(235,23,2)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (4 samples, 0.14%)</title><rect x="10" y="852" width="2" height="15" fill="rgb(250,4,37)"/><text x="13.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (6 samples, 0.21%)</title><rect x="12" y="340" width="2" height="15" fill="rgb(222,206,28)"/><text x="15.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="12" y="356" width="2" height="15" fill="rgb(212,229,43)"/><text x="15.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="12" y="372" width="2" height="15" fill="rgb(249,23,19)"/><text x="15.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="12" y="388" width="2" height="15" fill="rgb(221,152,54)"/><text x="15.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.21%)</title><rect x="12" y="404" width="2" height="15" fill="rgb(251,126,12)"/><text x="15.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="12" y="420" width="2" height="15" fill="rgb(248,190,6)"/><text x="15.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (6 samples, 0.21%)</title><rect x="12" y="436" width="2" height="15" fill="rgb(227,138,43)"/><text x="15.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="12" y="452" width="2" height="15" fill="rgb(241,8,22)"/><text x="15.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="12" y="468" width="2" height="15" fill="rgb(219,203,44)"/><text x="15.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="12" y="484" width="2" height="15" fill="rgb(205,57,2)"/><text x="15.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.18%)</title><rect x="12" y="500" width="2" height="15" fill="rgb(210,14,16)"/><text x="15.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="12" y="516" width="2" height="15" fill="rgb(208,167,8)"/><text x="15.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (5 samples, 0.18%)</title><rect x="12" y="532" width="2" height="15" fill="rgb(220,150,22)"/><text x="15.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="12" y="548" width="2" height="15" fill="rgb(214,41,14)"/><text x="15.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="12" y="564" width="2" height="15" fill="rgb(205,158,43)"/><text x="15.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="12" y="580" width="2" height="15" fill="rgb(226,2,29)"/><text x="15.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.18%)</title><rect x="12" y="596" width="2" height="15" fill="rgb(254,26,43)"/><text x="15.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="12" y="612" width="2" height="15" fill="rgb(218,140,2)"/><text x="15.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (5 samples, 0.18%)</title><rect x="12" y="628" width="2" height="15" fill="rgb(254,153,23)"/><text x="15.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="12" y="644" width="2" height="15" fill="rgb(211,63,27)"/><text x="15.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="12" y="660" width="2" height="15" fill="rgb(238,4,50)"/><text x="15.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="12" y="676" width="2" height="15" fill="rgb(234,77,50)"/><text x="15.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.18%)</title><rect x="12" y="692" width="2" height="15" fill="rgb(227,43,47)"/><text x="15.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="12" y="708" width="2" height="15" fill="rgb(214,173,11)"/><text x="15.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (4 samples, 0.14%)</title><rect x="12" y="724" width="2" height="15" fill="rgb(213,59,21)"/><text x="15.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="740" width="2" height="15" fill="rgb(244,37,46)"/><text x="15.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="756" width="2" height="15" fill="rgb(211,181,30)"/><text x="15.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="772" width="2" height="15" fill="rgb(254,215,46)"/><text x="15.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.14%)</title><rect x="12" y="788" width="2" height="15" fill="rgb(213,93,54)"/><text x="15.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="804" width="2" height="15" fill="rgb(239,159,39)"/><text x="15.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (4 samples, 0.14%)</title><rect x="12" y="820" width="2" height="15" fill="rgb(252,41,31)"/><text x="15.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="836" width="2" height="15" fill="rgb(243,130,23)"/><text x="15.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="852" width="2" height="15" fill="rgb(207,141,31)"/><text x="15.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="868" width="2" height="15" fill="rgb(208,201,17)"/><text x="15.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.14%)</title><rect x="12" y="884" width="2" height="15" fill="rgb(213,140,19)"/><text x="15.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="900" width="2" height="15" fill="rgb(235,77,10)"/><text x="15.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (4 samples, 0.14%)</title><rect x="12" y="916" width="2" height="15" fill="rgb(248,129,32)"/><text x="15.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="932" width="2" height="15" fill="rgb(240,210,47)"/><text x="15.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="948" width="2" height="15" fill="rgb(253,226,0)"/><text x="15.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="964" width="2" height="15" fill="rgb(238,207,39)"/><text x="15.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.14%)</title><rect x="12" y="980" width="2" height="15" fill="rgb(243,216,51)"/><text x="15.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="996" width="2" height="15" fill="rgb(222,61,39)"/><text x="15.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (4 samples, 0.14%)</title><rect x="12" y="1012" width="2" height="15" fill="rgb(251,13,44)"/><text x="15.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="1028" width="2" height="15" fill="rgb(213,229,50)"/><text x="15.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="1044" width="2" height="15" fill="rgb(226,93,13)"/><text x="15.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="1060" width="2" height="15" fill="rgb(253,44,6)"/><text x="15.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.14%)</title><rect x="12" y="1076" width="2" height="15" fill="rgb(220,15,38)"/><text x="15.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.14%)</title><rect x="12" y="1092" width="2" height="15" fill="rgb(249,192,33)"/><text x="15.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (3 samples, 0.11%)</title><rect x="13" y="1108" width="1" height="15" fill="rgb(231,133,11)"/><text x="16.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1124" width="1" height="15" fill="rgb(226,168,30)"/><text x="16.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1140" width="1" height="15" fill="rgb(247,223,48)"/><text x="16.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1156" width="1" height="15" fill="rgb(246,24,23)"/><text x="16.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="13" y="1172" width="1" height="15" fill="rgb(233,202,47)"/><text x="16.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1188" width="1" height="15" fill="rgb(228,119,39)"/><text x="16.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (3 samples, 0.11%)</title><rect x="13" y="1204" width="1" height="15" fill="rgb(252,99,15)"/><text x="16.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1220" width="1" height="15" fill="rgb(223,31,26)"/><text x="16.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1236" width="1" height="15" fill="rgb(242,162,44)"/><text x="16.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1252" width="1" height="15" fill="rgb(236,97,47)"/><text x="16.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="13" y="1268" width="1" height="15" fill="rgb(206,20,11)"/><text x="16.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1284" width="1" height="15" fill="rgb(235,62,38)"/><text x="16.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (3 samples, 0.11%)</title><rect x="13" y="1300" width="1" height="15" fill="rgb(250,92,43)"/><text x="16.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1316" width="1" height="15" fill="rgb(230,13,22)"/><text x="16.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1332" width="1" height="15" fill="rgb(218,65,35)"/><text x="16.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1348" width="1" height="15" fill="rgb(251,178,31)"/><text x="16.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="13" y="1364" width="1" height="15" fill="rgb(212,34,50)"/><text x="16.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1380" width="1" height="15" fill="rgb(209,17,4)"/><text x="16.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (3 samples, 0.11%)</title><rect x="13" y="1396" width="1" height="15" fill="rgb(241,6,50)"/><text x="16.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1412" width="1" height="15" fill="rgb(232,48,19)"/><text x="16.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1428" width="1" height="15" fill="rgb(237,69,48)"/><text x="16.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1444" width="1" height="15" fill="rgb(235,122,12)"/><text x="16.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="13" y="1460" width="1" height="15" fill="rgb(234,190,49)"/><text x="16.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1476" width="1" height="15" fill="rgb(212,206,18)"/><text x="16.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (3 samples, 0.11%)</title><rect x="13" y="1492" width="1" height="15" fill="rgb(243,133,3)"/><text x="16.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1508" width="1" height="15" fill="rgb(240,1,17)"/><text x="16.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1524" width="1" height="15" fill="rgb(224,105,19)"/><text x="16.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1540" width="1" height="15" fill="rgb(207,196,37)"/><text x="16.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="13" y="1556" width="1" height="15" fill="rgb(232,32,25)"/><text x="16.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1572" width="1" height="15" fill="rgb(222,57,5)"/><text x="16.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py) (3 samples, 0.11%)</title><rect x="13" y="1588" width="1" height="15" fill="rgb(250,100,1)"/><text x="16.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1604" width="1" height="15" fill="rgb(230,152,2)"/><text x="16.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1620" width="1" height="15" fill="rgb(222,204,19)"/><text x="16.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1636" width="1" height="15" fill="rgb(235,167,34)"/><text x="16.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="13" y="1652" width="1" height="15" fill="rgb(240,127,54)"/><text x="16.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1668" width="1" height="15" fill="rgb(228,62,50)"/><text x="16.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/style.py) (3 samples, 0.11%)</title><rect x="13" y="1684" width="1" height="15" fill="rgb(208,183,32)"/><text x="16.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1700" width="1" height="15" fill="rgb(252,173,33)"/><text x="16.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1716" width="1" height="15" fill="rgb(213,119,8)"/><text x="16.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1732" width="1" height="15" fill="rgb(231,185,24)"/><text x="16.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="13" y="1748" width="1" height="15" fill="rgb(237,201,23)"/><text x="16.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="13" y="1764" width="1" height="15" fill="rgb(209,138,47)"/><text x="16.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/cm.py) (3 samples, 0.11%)</title><rect x="13" y="1780" width="1" height="15" fill="rgb(244,49,3)"/><text x="16.00" y="1790.50"></text></g><g><title>_generate_cmap (matplotlib/cm.py) (3 samples, 0.11%)</title><rect x="13" y="1796" width="1" height="15" fill="rgb(253,212,36)"/><text x="16.00" y="1806.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (9 samples, 0.32%)</title><rect x="12" y="244" width="3" height="15" fill="rgb(216,6,0)"/><text x="15.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.32%)</title><rect x="12" y="260" width="3" height="15" fill="rgb(210,152,45)"/><text x="15.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.32%)</title><rect x="12" y="276" width="3" height="15" fill="rgb(240,93,47)"/><text x="15.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.32%)</title><rect x="12" y="292" width="3" height="15" fill="rgb(236,61,46)"/><text x="15.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 0.32%)</title><rect x="12" y="308" width="3" height="15" fill="rgb(251,229,16)"/><text x="15.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.32%)</title><rect x="12" y="324" width="3" height="15" fill="rgb(253,91,29)"/><text x="15.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py) (3 samples, 0.11%)</title><rect x="14" y="340" width="1" height="15" fill="rgb(237,60,6)"/><text x="17.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="14" y="356" width="1" height="15" fill="rgb(233,200,28)"/><text x="17.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="14" y="372" width="1" height="15" fill="rgb(232,21,30)"/><text x="17.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="14" y="388" width="1" height="15" fill="rgb(227,81,40)"/><text x="17.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="14" y="404" width="1" height="15" fill="rgb(222,180,39)"/><text x="17.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="14" y="420" width="1" height="15" fill="rgb(238,17,50)"/><text x="17.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="14" y="436" width="1" height="15" fill="rgb(240,89,18)"/><text x="17.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="14" y="452" width="1" height="15" fill="rgb(205,194,0)"/><text x="17.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="14" y="468" width="1" height="15" fill="rgb(238,221,34)"/><text x="17.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py) (3 samples, 0.11%)</title><rect x="14" y="484" width="1" height="15" fill="rgb(253,0,45)"/><text x="17.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="14" y="500" width="1" height="15" fill="rgb(225,141,32)"/><text x="17.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="14" y="516" width="1" height="15" fill="rgb(235,4,39)"/><text x="17.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="14" y="532" width="1" height="15" fill="rgb(223,80,54)"/><text x="17.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="14" y="548" width="1" height="15" fill="rgb(230,187,23)"/><text x="17.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="14" y="564" width="1" height="15" fill="rgb(227,198,22)"/><text x="17.00" y="574.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.53%)</title><rect x="10" y="68" width="6" height="15" fill="rgb(237,224,54)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.53%)</title><rect x="10" y="84" width="6" height="15" fill="rgb(205,80,8)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.53%)</title><rect x="10" y="100" width="6" height="15" fill="rgb(219,124,46)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (15 samples, 0.53%)</title><rect x="10" y="116" width="6" height="15" fill="rgb(235,154,46)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.53%)</title><rect x="10" y="132" width="6" height="15" fill="rgb(218,221,19)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py) (15 samples, 0.53%)</title><rect x="10" y="148" width="6" height="15" fill="rgb(220,7,22)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.53%)</title><rect x="10" y="164" width="6" height="15" fill="rgb(234,24,17)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 0.53%)</title><rect x="10" y="180" width="6" height="15" fill="rgb(220,2,53)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 0.35%)</title><rect x="12" y="196" width="4" height="15" fill="rgb(221,151,46)"/><text x="15.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (10 samples, 0.35%)</title><rect x="12" y="212" width="4" height="15" fill="rgb(243,8,50)"/><text x="15.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (10 samples, 0.35%)</title><rect x="12" y="228" width="4" height="15" fill="rgb(247,202,30)"/><text x="15.00" y="238.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="22" y="404" width="2" height="15" fill="rgb(229,24,22)"/><text x="25.00" y="414.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="23" y="420" width="1" height="15" fill="rgb(213,131,34)"/><text x="26.00" y="430.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.32%)</title><rect x="21" y="388" width="4" height="15" fill="rgb(245,40,48)"/><text x="24.00" y="398.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="26" y="388" width="2" height="15" fill="rgb(218,148,12)"/><text x="29.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="26" y="404" width="2" height="15" fill="rgb(227,98,30)"/><text x="29.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="36" y="452" width="2" height="15" fill="rgb(226,48,39)"/><text x="39.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="36" y="468" width="2" height="15" fill="rgb(246,193,3)"/><text x="39.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::SplitChunk (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="37" y="484" width="1" height="15" fill="rgb(216,160,7)"/><text x="40.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="39" y="452" width="3" height="15" fill="rgb(228,103,23)"/><text x="42.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="39" y="468" width="3" height="15" fill="rgb(234,45,16)"/><text x="42.00" y="478.50"></text></g><g><title>onnxruntime::SessionState::GetMemoryPatternGroup (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="43" y="452" width="1" height="15" fill="rgb(238,197,10)"/><text x="46.00" y="462.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.11%)</title><rect x="44" y="452" width="2" height="15" fill="rgb(226,160,41)"/><text x="47.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (33 samples, 1.16%)</title><rect x="33" y="436" width="14" height="15" fill="rgb(247,97,16)"/><text x="36.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="47" y="436" width="3" height="15" fill="rgb(229,148,23)"/><text x="50.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.25%)</title><rect x="47" y="452" width="3" height="15" fill="rgb(241,61,26)"/><text x="50.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="48" y="468" width="2" height="15" fill="rgb(225,199,0)"/><text x="51.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="49" y="484" width="1" height="15" fill="rgb(220,202,1)"/><text x="52.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="49" y="500" width="1" height="15" fill="rgb(229,93,49)"/><text x="52.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="50" y="436" width="2" height="15" fill="rgb(225,184,8)"/><text x="53.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="50" y="452" width="2" height="15" fill="rgb(234,41,33)"/><text x="53.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="50" y="468" width="2" height="15" fill="rgb(208,134,31)"/><text x="53.00" y="478.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="53" y="436" width="2" height="15" fill="rgb(222,59,41)"/><text x="56.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::OpKernelContext (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="55" y="436" width="1" height="15" fill="rgb(224,154,30)"/><text x="58.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="73" y="468" width="2" height="15" fill="rgb(218,23,43)"/><text x="76.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="73" y="484" width="2" height="15" fill="rgb(238,192,14)"/><text x="76.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="73" y="500" width="2" height="15" fill="rgb(210,222,33)"/><text x="76.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="73" y="516" width="2" height="15" fill="rgb(211,129,25)"/><text x="76.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="73" y="532" width="2" height="15" fill="rgb(224,227,38)"/><text x="76.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="73" y="548" width="2" height="15" fill="rgb(226,58,11)"/><text x="76.00" y="558.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="75" y="468" width="1" height="15" fill="rgb(253,141,12)"/><text x="78.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.11%)</title><rect x="75" y="484" width="1" height="15" fill="rgb(205,53,30)"/><text x="78.00" y="494.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (52 samples, 1.83%)</title><rect x="56" y="436" width="22" height="15" fill="rgb(254,62,38)"/><text x="59.00" y="446.50">o..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (51 samples, 1.80%)</title><rect x="57" y="452" width="21" height="15" fill="rgb(237,82,11)"/><text x="60.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="76" y="468" width="2" height="15" fill="rgb(219,59,17)"/><text x="79.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.11%)</title><rect x="77" y="484" width="1" height="15" fill="rgb(248,136,0)"/><text x="80.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.11%)</title><rect x="77" y="500" width="1" height="15" fill="rgb(206,19,51)"/><text x="80.00" y="510.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="78" y="468" width="2" height="15" fill="rgb(220,115,13)"/><text x="81.00" y="478.50"></text></g><g><title>OrtValue::Get&lt;onnxruntime::Tensor&gt; [clone .localalias.13] (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="81" y="484" width="2" height="15" fill="rgb(227,72,45)"/><text x="84.00" y="494.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2247] (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="81" y="468" width="2" height="15" fill="rgb(223,114,18)"/><text x="84.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="84" y="468" width="3" height="15" fill="rgb(241,196,41)"/><text x="87.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="84" y="484" width="3" height="15" fill="rgb(215,79,29)"/><text x="87.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="84" y="500" width="3" height="15" fill="rgb(229,219,35)"/><text x="87.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.28%)</title><rect x="84" y="516" width="3" height="15" fill="rgb(239,191,50)"/><text x="87.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="86" y="532" width="1" height="15" fill="rgb(225,228,10)"/><text x="89.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="86" y="548" width="1" height="15" fill="rgb(253,209,4)"/><text x="89.00" y="558.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="89" y="500" width="2" height="15" fill="rgb(209,95,21)"/><text x="92.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.14%)</title><rect x="89" y="516" width="2" height="15" fill="rgb(232,223,11)"/><text x="92.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.14%)</title><rect x="89" y="532" width="2" height="15" fill="rgb(214,147,2)"/><text x="92.00" y="542.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (181 samples, 6.37%)</title><rect x="17" y="356" width="76" height="15" fill="rgb(225,178,8)"/><text x="20.00" y="366.50">onnxrunt..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (181 samples, 6.37%)</title><rect x="17" y="372" width="76" height="15" fill="rgb(241,91,38)"/><text x="20.00" y="382.50">onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 5.46%)</title><rect x="28" y="388" width="65" height="15" fill="rgb(209,79,39)"/><text x="31.00" y="398.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 5.46%)</title><rect x="28" y="404" width="65" height="15" fill="rgb(237,166,41)"/><text x="31.00" y="414.50">onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.32%)</title><rect x="30" y="420" width="63" height="15" fill="rgb(219,193,3)"/><text x="33.00" y="430.50">onnxru..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 1.23%)</title><rect x="78" y="436" width="15" height="15" fill="rgb(234,119,11)"/><text x="81.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 1.23%)</title><rect x="78" y="452" width="15" height="15" fill="rgb(247,71,11)"/><text x="81.00" y="462.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.46%)</title><rect x="87" y="468" width="6" height="15" fill="rgb(210,99,18)"/><text x="90.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.46%)</title><rect x="87" y="484" width="6" height="15" fill="rgb(232,69,41)"/><text x="90.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="91" y="500" width="2" height="15" fill="rgb(207,146,29)"/><text x="94.00" y="510.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 6.41%)</title><rect x="17" y="340" width="76" height="15" fill="rgb(240,93,31)"/><text x="20.00" y="350.50">onnxrunt..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (187 samples, 6.58%)</title><rect x="16" y="100" width="77" height="15" fill="rgb(219,42,36)"/><text x="19.00" y="110.50">profile ..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (187 samples, 6.58%)</title><rect x="16" y="116" width="77" height="15" fill="rgb(224,121,35)"/><text x="19.00" y="126.50">time_pre..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (187 samples, 6.58%)</title><rect x="16" y="132" width="77" height="15" fill="rgb(229,38,53)"/><text x="19.00" y="142.50">&lt;lambda&gt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (187 samples, 6.58%)</title><rect x="16" y="148" width="77" height="15" fill="rgb(240,110,53)"/><text x="19.00" y="158.50">run (mlp..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (187 samples, 6.58%)</title><rect x="16" y="164" width="77" height="15" fill="rgb(222,108,49)"/><text x="19.00" y="174.50">_run_who..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (186 samples, 6.55%)</title><rect x="16" y="180" width="77" height="15" fill="rgb(245,129,8)"/><text x="19.00" y="190.50">run (mlp..</text></g><g><title>run (onnxruntime/capi/session.py) (186 samples, 6.55%)</title><rect x="16" y="196" width="77" height="15" fill="rgb(251,4,44)"/><text x="19.00" y="206.50">run (onn..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (183 samples, 6.44%)</title><rect x="17" y="212" width="76" height="15" fill="rgb(221,60,14)"/><text x="20.00" y="222.50">pybind11..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (183 samples, 6.44%)</title><rect x="17" y="228" width="76" height="15" fill="rgb(238,227,4)"/><text x="20.00" y="238.50">void pyb..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (183 samples, 6.44%)</title><rect x="17" y="244" width="76" height="15" fill="rgb(247,86,39)"/><text x="20.00" y="254.50">onnxrunt..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (183 samples, 6.44%)</title><rect x="17" y="260" width="76" height="15" fill="rgb(253,171,8)"/><text x="20.00" y="270.50">onnxrunt..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (183 samples, 6.44%)</title><rect x="17" y="276" width="76" height="15" fill="rgb(224,117,37)"/><text x="20.00" y="286.50">onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (183 samples, 6.44%)</title><rect x="17" y="292" width="76" height="15" fill="rgb(231,131,8)"/><text x="20.00" y="302.50">onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (183 samples, 6.44%)</title><rect x="17" y="308" width="76" height="15" fill="rgb(242,5,13)"/><text x="20.00" y="318.50">onnxrunt..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (183 samples, 6.44%)</title><rect x="17" y="324" width="76" height="15" fill="rgb(245,178,46)"/><text x="20.00" y="334.50">onnxrunt..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (188 samples, 6.62%)</title><rect x="16" y="68" width="78" height="15" fill="rgb(229,46,53)"/><text x="19.00" y="78.50">profile_o..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (188 samples, 6.62%)</title><rect x="16" y="84" width="78" height="15" fill="rgb(211,50,52)"/><text x="19.00" y="94.50">setup_pro..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (4 samples, 0.14%)</title><rect x="102" y="212" width="1" height="15" fill="rgb(230,111,41)"/><text x="105.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (3 samples, 0.11%)</title><rect x="102" y="228" width="1" height="15" fill="rgb(205,46,28)"/><text x="105.00" y="238.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (7 samples, 0.25%)</title><rect x="105" y="292" width="3" height="15" fill="rgb(215,150,15)"/><text x="108.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (6 samples, 0.21%)</title><rect x="106" y="308" width="2" height="15" fill="rgb(240,199,6)"/><text x="109.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (11 samples, 0.39%)</title><rect x="104" y="212" width="5" height="15" fill="rgb(217,133,41)"/><text x="107.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;) (8 samples, 0.28%)</title><rect x="105" y="228" width="4" height="15" fill="rgb(219,195,7)"/><text x="108.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 0.28%)</title><rect x="105" y="244" width="4" height="15" fill="rgb(247,135,31)"/><text x="108.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py) (8 samples, 0.28%)</title><rect x="105" y="260" width="4" height="15" fill="rgb(217,73,17)"/><text x="108.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (8 samples, 0.28%)</title><rect x="105" y="276" width="4" height="15" fill="rgb(209,64,27)"/><text x="108.00" y="286.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (15 samples, 0.53%)</title><rect x="179" y="228" width="6" height="15" fill="rgb(223,65,42)"/><text x="182.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (6 samples, 0.21%)</title><rect x="188" y="244" width="3" height="15" fill="rgb(222,76,34)"/><text x="191.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (4 samples, 0.14%)</title><rect x="189" y="260" width="2" height="15" fill="rgb(225,164,22)"/><text x="192.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (13 samples, 0.46%)</title><rect x="186" y="228" width="5" height="15" fill="rgb(243,126,17)"/><text x="189.00" y="238.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (5 samples, 0.18%)</title><rect x="194" y="260" width="2" height="15" fill="rgb(207,165,1)"/><text x="197.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.14%)</title><rect x="194" y="276" width="2" height="15" fill="rgb(225,178,50)"/><text x="197.00" y="286.50"></text></g><g><title>get_view_from_index (mapping.c) (8 samples, 0.28%)</title><rect x="193" y="244" width="3" height="15" fill="rgb(224,56,14)"/><text x="196.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (18 samples, 0.63%)</title><rect x="191" y="228" width="8" height="15" fill="rgb(242,56,18)"/><text x="194.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (7 samples, 0.25%)</title><rect x="196" y="244" width="3" height="15" fill="rgb(225,215,51)"/><text x="199.00" y="254.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py) (3 samples, 0.11%)</title><rect x="204" y="244" width="2" height="15" fill="rgb(224,122,32)"/><text x="207.00" y="254.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (7 samples, 0.25%)</title><rect x="241" y="276" width="3" height="15" fill="rgb(224,186,19)"/><text x="244.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (9 samples, 0.32%)</title><rect x="249" y="292" width="4" height="15" fill="rgb(222,221,8)"/><text x="252.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (3 samples, 0.11%)</title><rect x="253" y="308" width="1" height="15" fill="rgb(247,189,3)"/><text x="256.00" y="318.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (7 samples, 0.25%)</title><rect x="253" y="292" width="2" height="15" fill="rgb(238,183,3)"/><text x="256.00" y="302.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (3 samples, 0.11%)</title><rect x="254" y="308" width="1" height="15" fill="rgb(209,156,40)"/><text x="257.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (12 samples, 0.42%)</title><rect x="257" y="324" width="5" height="15" fill="rgb(209,175,9)"/><text x="260.00" y="334.50"></text></g><g><title>memcpy (libc-2.29.so) (3 samples, 0.11%)</title><rect x="260" y="340" width="2" height="15" fill="rgb(217,155,39)"/><text x="263.00" y="350.50"></text></g><g><title>array_reshape (methods.c) (43 samples, 1.51%)</title><rect x="244" y="276" width="18" height="15" fill="rgb(219,110,22)"/><text x="247.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (16 samples, 0.56%)</title><rect x="255" y="292" width="7" height="15" fill="rgb(250,108,31)"/><text x="258.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (16 samples, 0.56%)</title><rect x="255" y="308" width="7" height="15" fill="rgb(247,176,20)"/><text x="258.00" y="318.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (174 samples, 6.13%)</title><rect x="199" y="228" width="72" height="15" fill="rgb(254,128,35)"/><text x="202.00" y="238.50">expand_d..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (158 samples, 5.56%)</title><rect x="206" y="244" width="65" height="15" fill="rgb(250,201,11)"/><text x="209.00" y="254.50">array_i..</text></g><g><title>expand_dims (numpy/lib/shape_base.py) (146 samples, 5.14%)</title><rect x="211" y="260" width="60" height="15" fill="rgb(230,200,26)"/><text x="214.00" y="270.50">expand..</text></g><g><title>asanyarray (numpy/core/_asarray.py) (21 samples, 0.74%)</title><rect x="263" y="276" width="8" height="15" fill="rgb(209,53,15)"/><text x="266.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (5 samples, 0.18%)</title><rect x="269" y="292" width="2" height="15" fill="rgb(250,175,35)"/><text x="272.00" y="302.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (23 samples, 0.81%)</title><rect x="375" y="260" width="10" height="15" fill="rgb(253,72,11)"/><text x="378.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (20 samples, 0.70%)</title><rect x="598" y="276" width="9" height="15" fill="rgb(229,183,38)"/><text x="601.00" y="286.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (13 samples, 0.46%)</title><rect x="650" y="292" width="6" height="15" fill="rgb(230,215,54)"/><text x="653.00" y="302.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (4 samples, 0.14%)</title><rect x="654" y="308" width="2" height="15" fill="rgb(254,102,43)"/><text x="657.00" y="318.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (3 samples, 0.11%)</title><rect x="697" y="372" width="1" height="15" fill="rgb(217,175,51)"/><text x="700.00" y="382.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (5 samples, 0.18%)</title><rect x="696" y="340" width="2" height="15" fill="rgb(245,59,11)"/><text x="699.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (5 samples, 0.18%)</title><rect x="696" y="356" width="2" height="15" fill="rgb(227,151,35)"/><text x="699.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (11 samples, 0.39%)</title><rect x="703" y="388" width="5" height="15" fill="rgb(233,96,9)"/><text x="706.00" y="398.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (15 samples, 0.53%)</title><rect x="703" y="356" width="6" height="15" fill="rgb(242,103,51)"/><text x="706.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (14 samples, 0.49%)</title><rect x="703" y="372" width="6" height="15" fill="rgb(208,22,24)"/><text x="706.00" y="382.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (3 samples, 0.11%)</title><rect x="708" y="388" width="1" height="15" fill="rgb(234,61,49)"/><text x="711.00" y="398.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (5 samples, 0.18%)</title><rect x="709" y="356" width="2" height="15" fill="rgb(253,150,26)"/><text x="712.00" y="366.50"></text></g><g><title>_ufunc_setup_flags (ufunc_object.c) (3 samples, 0.11%)</title><rect x="711" y="356" width="2" height="15" fill="rgb(211,182,32)"/><text x="714.00" y="366.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (3 samples, 0.11%)</title><rect x="714" y="372" width="1" height="15" fill="rgb(214,85,19)"/><text x="717.00" y="382.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (3 samples, 0.11%)</title><rect x="718" y="388" width="1" height="15" fill="rgb(211,221,46)"/><text x="721.00" y="398.50"></text></g><g><title>IsUintAligned (array_assign.c) (4 samples, 0.14%)</title><rect x="725" y="420" width="2" height="15" fill="rgb(224,136,12)"/><text x="728.00" y="430.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (3 samples, 0.11%)</title><rect x="726" y="436" width="1" height="15" fill="rgb(238,190,31)"/><text x="729.00" y="446.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (12 samples, 0.42%)</title><rect x="727" y="420" width="5" height="15" fill="rgb(238,0,38)"/><text x="730.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (10 samples, 0.35%)</title><rect x="728" y="436" width="4" height="15" fill="rgb(244,165,29)"/><text x="731.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (10 samples, 0.35%)</title><rect x="728" y="452" width="4" height="15" fill="rgb(231,11,40)"/><text x="731.00" y="462.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (4 samples, 0.14%)</title><rect x="730" y="468" width="2" height="15" fill="rgb(227,68,40)"/><text x="733.00" y="478.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (24 samples, 0.85%)</title><rect x="722" y="404" width="10" height="15" fill="rgb(213,39,29)"/><text x="725.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (5 samples, 0.18%)</title><rect x="735" y="404" width="2" height="15" fill="rgb(230,150,19)"/><text x="738.00" y="414.50"></text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c) (4 samples, 0.14%)</title><rect x="737" y="404" width="2" height="15" fill="rgb(250,212,44)"/><text x="740.00" y="414.50"></text></g><g><title>npyiter_check_per_op_flags (nditer_constr.c) (4 samples, 0.14%)</title><rect x="739" y="420" width="2" height="15" fill="rgb(249,190,48)"/><text x="742.00" y="430.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (60 samples, 2.11%)</title><rect x="719" y="388" width="25" height="15" fill="rgb(239,12,43)"/><text x="722.00" y="398.50">N..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (12 samples, 0.42%)</title><rect x="739" y="404" width="5" height="15" fill="rgb(237,128,33)"/><text x="742.00" y="414.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (7 samples, 0.25%)</title><rect x="741" y="420" width="3" height="15" fill="rgb(217,195,2)"/><text x="744.00" y="430.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (8 samples, 0.28%)</title><rect x="744" y="388" width="3" height="15" fill="rgb(222,5,34)"/><text x="747.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (3 samples, 0.11%)</title><rect x="750" y="404" width="2" height="15" fill="rgb(241,34,1)"/><text x="753.00" y="414.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (9 samples, 0.32%)</title><rect x="748" y="388" width="4" height="15" fill="rgb(206,169,27)"/><text x="751.00" y="398.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (4 samples, 0.14%)</title><rect x="752" y="388" width="2" height="15" fill="rgb(251,100,6)"/><text x="755.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (100 samples, 3.52%)</title><rect x="713" y="356" width="41" height="15" fill="rgb(228,9,48)"/><text x="716.00" y="366.50">exe..</text></g><g><title>iterator_loop (ufunc_object.c) (94 samples, 3.31%)</title><rect x="715" y="372" width="39" height="15" fill="rgb(249,101,37)"/><text x="718.00" y="382.50">ite..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (7 samples, 0.25%)</title><rect x="755" y="356" width="3" height="15" fill="rgb(222,152,34)"/><text x="758.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (149 samples, 5.25%)</title><rect x="698" y="340" width="62" height="15" fill="rgb(238,65,7)"/><text x="701.00" y="350.50">PyUFun..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (6 samples, 0.21%)</title><rect x="758" y="356" width="2" height="15" fill="rgb(225,103,14)"/><text x="761.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (4 samples, 0.14%)</title><rect x="759" y="372" width="1" height="15" fill="rgb(240,121,27)"/><text x="762.00" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (4 samples, 0.14%)</title><rect x="759" y="388" width="1" height="15" fill="rgb(251,104,33)"/><text x="762.00" y="398.50"></text></g><g><title>_find_array_wrap (ufunc_object.c) (3 samples, 0.11%)</title><rect x="760" y="340" width="2" height="15" fill="rgb(215,117,7)"/><text x="763.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (197 samples, 6.94%)</title><rect x="680" y="308" width="82" height="15" fill="rgb(218,177,31)"/><text x="683.00" y="318.50">_run (mlp..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (164 samples, 5.77%)</title><rect x="694" y="324" width="68" height="15" fill="rgb(250,13,7)"/><text x="697.00" y="334.50">ufunc_g..</text></g><g><title>arrays_overlap (array_assign.c) (4 samples, 0.14%)</title><rect x="778" y="372" width="1" height="15" fill="rgb(225,91,2)"/><text x="781.00" y="382.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (3 samples, 0.11%)</title><rect x="778" y="388" width="1" height="15" fill="rgb(251,97,41)"/><text x="781.00" y="398.50"></text></g><g><title>broadcast_strides (array_assign.c) (4 samples, 0.14%)</title><rect x="779" y="372" width="2" height="15" fill="rgb(217,86,36)"/><text x="782.00" y="382.50"></text></g><g><title>0x7f163e5a4f2d (libc-2.29.so) (3 samples, 0.11%)</title><rect x="785" y="388" width="1" height="15" fill="rgb(220,142,37)"/><text x="788.00" y="398.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (5 samples, 0.18%)</title><rect x="786" y="388" width="3" height="15" fill="rgb(248,85,19)"/><text x="789.00" y="398.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (10 samples, 0.35%)</title><rect x="789" y="388" width="4" height="15" fill="rgb(220,200,8)"/><text x="792.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (7 samples, 0.25%)</title><rect x="790" y="404" width="3" height="15" fill="rgb(243,16,24)"/><text x="793.00" y="414.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (3 samples, 0.11%)</title><rect x="794" y="388" width="1" height="15" fill="rgb(223,187,10)"/><text x="797.00" y="398.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (5 samples, 0.18%)</title><rect x="795" y="388" width="2" height="15" fill="rgb(239,129,14)"/><text x="798.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (55 samples, 1.94%)</title><rect x="777" y="356" width="22" height="15" fill="rgb(233,108,11)"/><text x="780.00" y="366.50">P..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (44 samples, 1.55%)</title><rect x="781" y="372" width="18" height="15" fill="rgb(248,142,21)"/><text x="784.00" y="382.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (3 samples, 0.11%)</title><rect x="798" y="388" width="1" height="15" fill="rgb(221,144,44)"/><text x="801.00" y="398.50"></text></g><g><title>npy_uint_alignment (common.h) (3 samples, 0.11%)</title><rect x="798" y="404" width="1" height="15" fill="rgb(222,188,41)"/><text x="801.00" y="414.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (105 samples, 3.70%)</title><rect x="762" y="308" width="44" height="15" fill="rgb(251,9,48)"/><text x="765.00" y="318.50">_run..</text></g><g><title>array_copy (methods.c) (81 samples, 2.85%)</title><rect x="772" y="324" width="34" height="15" fill="rgb(227,206,32)"/><text x="775.00" y="334.50">ar..</text></g><g><title>PyArray_NewCopy (convert.c) (76 samples, 2.68%)</title><rect x="774" y="340" width="32" height="15" fill="rgb(244,33,16)"/><text x="777.00" y="350.50">Py..</text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (15 samples, 0.53%)</title><rect x="799" y="356" width="7" height="15" fill="rgb(207,188,7)"/><text x="802.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (14 samples, 0.49%)</title><rect x="800" y="372" width="6" height="15" fill="rgb(245,162,54)"/><text x="803.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (14 samples, 0.49%)</title><rect x="800" y="388" width="6" height="15" fill="rgb(227,61,48)"/><text x="803.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (14 samples, 0.49%)</title><rect x="800" y="404" width="6" height="15" fill="rgb(242,128,31)"/><text x="803.00" y="414.50"></text></g><g><title>array_dealloc (arrayobject.c) (20 samples, 0.70%)</title><rect x="827" y="324" width="9" height="15" fill="rgb(254,18,20)"/><text x="830.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (19 samples, 0.67%)</title><rect x="828" y="340" width="8" height="15" fill="rgb(228,12,30)"/><text x="831.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (17 samples, 0.60%)</title><rect x="828" y="356" width="8" height="15" fill="rgb(230,84,50)"/><text x="831.00" y="366.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py) (7 samples, 0.25%)</title><rect x="850" y="340" width="3" height="15" fill="rgb(246,47,40)"/><text x="853.00" y="350.50"></text></g><g><title>0x7f163e66374a (libc-2.29.so) (3 samples, 0.11%)</title><rect x="894" y="372" width="1" height="15" fill="rgb(242,171,33)"/><text x="897.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (23 samples, 0.81%)</title><rect x="925" y="388" width="9" height="15" fill="rgb(233,23,12)"/><text x="928.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (18 samples, 0.63%)</title><rect x="935" y="404" width="7" height="15" fill="rgb(216,223,16)"/><text x="938.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (18 samples, 0.63%)</title><rect x="935" y="420" width="7" height="15" fill="rgb(210,31,15)"/><text x="938.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (15 samples, 0.53%)</title><rect x="936" y="436" width="6" height="15" fill="rgb(253,225,48)"/><text x="939.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (6 samples, 0.21%)</title><rect x="940" y="452" width="2" height="15" fill="rgb(234,132,16)"/><text x="943.00" y="462.50"></text></g><g><title>PyArray_DescrConverter2 (descriptor.c) (3 samples, 0.11%)</title><rect x="957" y="420" width="1" height="15" fill="rgb(247,53,47)"/><text x="960.00" y="430.50"></text></g><g><title>PyArray_OutputConverter (conversion_utils.c) (3 samples, 0.11%)</title><rect x="960" y="420" width="1" height="15" fill="rgb(231,134,48)"/><text x="963.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (6 samples, 0.21%)</title><rect x="961" y="420" width="3" height="15" fill="rgb(208,41,3)"/><text x="964.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (5 samples, 0.18%)</title><rect x="962" y="436" width="2" height="15" fill="rgb(254,142,30)"/><text x="965.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (5 samples, 0.18%)</title><rect x="962" y="452" width="2" height="15" fill="rgb(231,115,36)"/><text x="965.00" y="462.50"></text></g><g><title>PyArray_Return (scalarapi.c) (3 samples, 0.11%)</title><rect x="964" y="420" width="1" height="15" fill="rgb(242,78,23)"/><text x="967.00" y="430.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (6 samples, 0.21%)</title><rect x="972" y="468" width="2" height="15" fill="rgb(235,39,47)"/><text x="975.00" y="478.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (7 samples, 0.25%)</title><rect x="976" y="468" width="3" height="15" fill="rgb(245,28,39)"/><text x="979.00" y="478.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (6 samples, 0.21%)</title><rect x="979" y="468" width="2" height="15" fill="rgb(220,205,38)"/><text x="982.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (37 samples, 1.30%)</title><rect x="969" y="452" width="15" height="15" fill="rgb(235,4,30)"/><text x="972.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (5 samples, 0.18%)</title><rect x="982" y="468" width="2" height="15" fill="rgb(246,120,53)"/><text x="985.00" y="478.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (4 samples, 0.14%)</title><rect x="983" y="484" width="1" height="15" fill="rgb(254,152,19)"/><text x="986.00" y="494.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (9 samples, 0.32%)</title><rect x="984" y="452" width="4" height="15" fill="rgb(206,120,34)"/><text x="987.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c) (3 samples, 0.11%)</title><rect x="992" y="516" width="1" height="15" fill="rgb(236,199,27)"/><text x="995.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.11%)</title><rect x="992" y="532" width="1" height="15" fill="rgb(251,51,12)"/><text x="995.00" y="542.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (19 samples, 0.67%)</title><rect x="990" y="484" width="8" height="15" fill="rgb(237,62,23)"/><text x="993.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (19 samples, 0.67%)</title><rect x="990" y="500" width="8" height="15" fill="rgb(223,156,47)"/><text x="993.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (11 samples, 0.39%)</title><rect x="993" y="516" width="5" height="15" fill="rgb(219,217,43)"/><text x="996.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (11 samples, 0.39%)</title><rect x="993" y="532" width="5" height="15" fill="rgb(239,115,18)"/><text x="996.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (10 samples, 0.35%)</title><rect x="993" y="548" width="5" height="15" fill="rgb(226,99,44)"/><text x="996.00" y="558.50"></text></g><g><title>qsort (libc-2.29.so) (5 samples, 0.18%)</title><rect x="998" y="484" width="2" height="15" fill="rgb(205,4,45)"/><text x="1001.00" y="494.50"></text></g><g><title>0x7f163e5a4d50 (libc-2.29.so) (3 samples, 0.11%)</title><rect x="1002" y="500" width="1" height="15" fill="rgb(210,41,15)"/><text x="1005.00" y="510.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (36 samples, 1.27%)</title><rect x="989" y="452" width="15" height="15" fill="rgb(212,126,21)"/><text x="992.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (36 samples, 1.27%)</title><rect x="989" y="468" width="15" height="15" fill="rgb(215,49,51)"/><text x="992.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (9 samples, 0.32%)</title><rect x="1000" y="484" width="4" height="15" fill="rgb(232,87,25)"/><text x="1003.00" y="494.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (4 samples, 0.14%)</title><rect x="1010" y="500" width="1" height="15" fill="rgb(239,99,54)"/><text x="1013.00" y="510.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c) (8 samples, 0.28%)</title><rect x="1011" y="500" width="4" height="15" fill="rgb(219,8,4)"/><text x="1014.00" y="510.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (6 samples, 0.21%)</title><rect x="1015" y="500" width="2" height="15" fill="rgb(242,97,25)"/><text x="1018.00" y="510.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (4 samples, 0.14%)</title><rect x="1016" y="516" width="1" height="15" fill="rgb(230,98,23)"/><text x="1019.00" y="526.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (34 samples, 1.20%)</title><rect x="1004" y="452" width="14" height="15" fill="rgb(215,84,2)"/><text x="1007.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (26 samples, 0.92%)</title><rect x="1007" y="468" width="11" height="15" fill="rgb(225,229,48)"/><text x="1010.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (25 samples, 0.88%)</title><rect x="1008" y="484" width="10" height="15" fill="rgb(222,81,47)"/><text x="1011.00" y="494.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (3 samples, 0.11%)</title><rect x="1019" y="452" width="1" height="15" fill="rgb(236,5,47)"/><text x="1022.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src) (9 samples, 0.32%)</title><rect x="1022" y="468" width="3" height="15" fill="rgb(225,56,6)"/><text x="1025.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (3 samples, 0.11%)</title><rect x="1024" y="484" width="1" height="15" fill="rgb(214,34,54)"/><text x="1027.00" y="494.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (5 samples, 0.18%)</title><rect x="1026" y="468" width="2" height="15" fill="rgb(219,76,24)"/><text x="1029.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (151 samples, 5.32%)</title><rect x="966" y="436" width="63" height="15" fill="rgb(237,91,42)"/><text x="969.00" y="446.50">PyUFun..</text></g><g><title>reduce_loop (ufunc_object.c) (21 samples, 0.74%)</title><rect x="1020" y="452" width="9" height="15" fill="rgb(224,47,29)"/><text x="1023.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (3 samples, 0.11%)</title><rect x="1028" y="468" width="1" height="15" fill="rgb(206,139,13)"/><text x="1031.00" y="478.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (3 samples, 0.11%)</title><rect x="1032" y="452" width="2" height="15" fill="rgb(241,56,24)"/><text x="1035.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (13 samples, 0.46%)</title><rect x="1035" y="468" width="5" height="15" fill="rgb(221,134,45)"/><text x="1038.00" y="478.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (180 samples, 6.34%)</title><rect x="966" y="420" width="75" height="15" fill="rgb(211,96,40)"/><text x="969.00" y="430.50">PyUFunc_..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (25 samples, 0.88%)</title><rect x="1030" y="436" width="11" height="15" fill="rgb(208,21,31)"/><text x="1033.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (17 samples, 0.60%)</title><rect x="1034" y="452" width="7" height="15" fill="rgb(215,124,53)"/><text x="1037.00" y="462.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (495 samples, 17.43%)</title><rect x="836" y="324" width="206" height="15" fill="rgb(216,171,11)"/><text x="839.00" y="334.50">sum (&lt;__array_function__ in..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (453 samples, 15.95%)</title><rect x="853" y="340" width="189" height="15" fill="rgb(229,115,28)"/><text x="856.00" y="350.50">array_implement_array_fu..</text></g><g><title>sum (numpy/core/fromnumeric.py) (437 samples, 15.39%)</title><rect x="860" y="356" width="182" height="15" fill="rgb(245,68,20)"/><text x="863.00" y="366.50">sum (numpy/core/fromnum..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (353 samples, 12.43%)</title><rect x="895" y="372" width="147" height="15" fill="rgb(250,190,15)"/><text x="898.00" y="382.50">_wrapreduction (nu..</text></g><g><title>ufunc_reduce (ufunc_object.c) (258 samples, 9.08%)</title><rect x="934" y="388" width="108" height="15" fill="rgb(207,114,35)"/><text x="937.00" y="398.50">ufunc_reduce ..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (239 samples, 8.42%)</title><rect x="942" y="404" width="100" height="15" fill="rgb(211,86,37)"/><text x="945.00" y="414.50">PyUFunc_Gene..</text></g><g><title>PyArray_Return (scalarapi.c) (3 samples, 0.11%)</title><rect x="1042" y="340" width="1" height="15" fill="rgb(244,219,43)"/><text x="1045.00" y="350.50"></text></g><g><title>array_alloc (arrayobject.c) (4 samples, 0.14%)</title><rect x="1052" y="404" width="1" height="15" fill="rgb(251,109,6)"/><text x="1055.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (23 samples, 0.81%)</title><rect x="1049" y="372" width="10" height="15" fill="rgb(205,31,13)"/><text x="1052.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (22 samples, 0.77%)</title><rect x="1050" y="388" width="9" height="15" fill="rgb(218,148,24)"/><text x="1053.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (14 samples, 0.49%)</title><rect x="1053" y="404" width="6" height="15" fill="rgb(236,96,45)"/><text x="1056.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (14 samples, 0.49%)</title><rect x="1053" y="420" width="6" height="15" fill="rgb(227,3,19)"/><text x="1056.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (13 samples, 0.46%)</title><rect x="1054" y="436" width="5" height="15" fill="rgb(220,146,10)"/><text x="1057.00" y="446.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (5 samples, 0.18%)</title><rect x="1059" y="372" width="2" height="15" fill="rgb(220,81,10)"/><text x="1062.00" y="382.50"></text></g><g><title>FLOAT_square (loops.c.src) (3 samples, 0.11%)</title><rect x="1062" y="388" width="1" height="15" fill="rgb(219,150,33)"/><text x="1065.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (38 samples, 1.34%)</title><rect x="1048" y="356" width="16" height="15" fill="rgb(248,76,36)"/><text x="1051.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (6 samples, 0.21%)</title><rect x="1062" y="372" width="2" height="15" fill="rgb(205,103,31)"/><text x="1065.00" y="382.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (5 samples, 0.18%)</title><rect x="1064" y="356" width="2" height="15" fill="rgb(212,84,11)"/><text x="1067.00" y="366.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (3 samples, 0.11%)</title><rect x="1072" y="372" width="1" height="15" fill="rgb(251,88,9)"/><text x="1075.00" y="382.50"></text></g><g><title>PyArray_CanCastTo (convert_datatype.c) (3 samples, 0.11%)</title><rect x="1076" y="420" width="2" height="15" fill="rgb(237,217,2)"/><text x="1079.00" y="430.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (15 samples, 0.53%)</title><rect x="1074" y="388" width="6" height="15" fill="rgb(225,215,36)"/><text x="1077.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (12 samples, 0.42%)</title><rect x="1075" y="404" width="5" height="15" fill="rgb(229,146,47)"/><text x="1078.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (5 samples, 0.18%)</title><rect x="1078" y="420" width="2" height="15" fill="rgb(240,191,52)"/><text x="1081.00" y="430.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (4 samples, 0.14%)</title><rect x="1078" y="436" width="2" height="15" fill="rgb(212,201,39)"/><text x="1081.00" y="446.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (37 samples, 1.30%)</title><rect x="1066" y="356" width="15" height="15" fill="rgb(223,104,33)"/><text x="1069.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (20 samples, 0.70%)</title><rect x="1073" y="372" width="8" height="15" fill="rgb(205,112,1)"/><text x="1076.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (4 samples, 0.14%)</title><rect x="1080" y="388" width="1" height="15" fill="rgb(232,17,54)"/><text x="1083.00" y="398.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1081" y="356" width="2" height="15" fill="rgb(224,46,31)"/><text x="1084.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (94 samples, 3.31%)</title><rect x="1044" y="340" width="39" height="15" fill="rgb(206,208,37)"/><text x="1047.00" y="350.50">PyU..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (670 samples, 23.59%)</title><rect x="806" y="308" width="278" height="15" fill="rgb(240,89,9)"/><text x="809.00" y="318.50">_run (mlprodict/onnxrt/ops_cpu/op_red..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (102 samples, 3.59%)</title><rect x="1042" y="324" width="42" height="15" fill="rgb(234,164,32)"/><text x="1045.00" y="334.50">ufu..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,688 samples, 59.44%)</title><rect x="385" y="260" width="701" height="15" fill="rgb(226,15,43)"/><text x="388.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,154 samples, 40.63%)</title><rect x="607" y="276" width="479" height="15" fill="rgb(238,209,45)"/><text x="610.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,036 samples, 36.48%)</title><rect x="656" y="292" width="430" height="15" fill="rgb(221,89,6)"/><text x="659.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>arraydescr_richcompare (descriptor.c) (4 samples, 0.14%)</title><rect x="1084" y="308" width="2" height="15" fill="rgb(240,79,12)"/><text x="1087.00" y="318.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,911 samples, 67.29%)</title><rect x="295" y="244" width="794" height="15" fill="rgb(216,95,47)"/><text x="298.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>unicode_eq (python3.7) (6 samples, 0.21%)</title><rect x="1086" y="260" width="3" height="15" fill="rgb(237,130,27)"/><text x="1089.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (6 samples, 0.21%)</title><rect x="1089" y="260" width="3" height="15" fill="rgb(215,0,3)"/><text x="1092.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (5 samples, 0.18%)</title><rect x="1090" y="276" width="2" height="15" fill="rgb(216,103,45)"/><text x="1093.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,976 samples, 69.58%)</title><rect x="272" y="228" width="821" height="15" fill="rgb(226,8,45)"/><text x="275.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (11 samples, 0.39%)</title><rect x="1089" y="244" width="4" height="15" fill="rgb(249,163,41)"/><text x="1092.00" y="254.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (6 samples, 0.21%)</title><rect x="1099" y="324" width="2" height="15" fill="rgb(230,161,30)"/><text x="1102.00" y="334.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (15 samples, 0.53%)</title><rect x="1095" y="276" width="6" height="15" fill="rgb(223,69,14)"/><text x="1098.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (15 samples, 0.53%)</title><rect x="1095" y="292" width="6" height="15" fill="rgb(223,0,4)"/><text x="1098.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (15 samples, 0.53%)</title><rect x="1095" y="308" width="6" height="15" fill="rgb(231,89,34)"/><text x="1098.00" y="318.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (6 samples, 0.21%)</title><rect x="1103" y="388" width="3" height="15" fill="rgb(244,200,21)"/><text x="1106.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (5 samples, 0.18%)</title><rect x="1103" y="404" width="3" height="15" fill="rgb(247,1,32)"/><text x="1106.00" y="414.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (12 samples, 0.42%)</title><rect x="1101" y="356" width="5" height="15" fill="rgb(245,2,54)"/><text x="1104.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (11 samples, 0.39%)</title><rect x="1102" y="372" width="4" height="15" fill="rgb(216,55,36)"/><text x="1105.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (2,401 samples, 84.54%)</title><rect x="109" y="212" width="998" height="15" fill="rgb(215,82,18)"/><text x="112.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (32 samples, 1.13%)</title><rect x="1094" y="228" width="13" height="15" fill="rgb(254,72,28)"/><text x="1097.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (31 samples, 1.09%)</title><rect x="1094" y="244" width="13" height="15" fill="rgb(235,154,48)"/><text x="1097.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (31 samples, 1.09%)</title><rect x="1094" y="260" width="13" height="15" fill="rgb(243,198,25)"/><text x="1097.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (13 samples, 0.46%)</title><rect x="1101" y="276" width="6" height="15" fill="rgb(249,146,46)"/><text x="1104.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (13 samples, 0.46%)</title><rect x="1101" y="292" width="6" height="15" fill="rgb(240,78,42)"/><text x="1104.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (13 samples, 0.46%)</title><rect x="1101" y="308" width="6" height="15" fill="rgb(206,223,43)"/><text x="1104.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (13 samples, 0.46%)</title><rect x="1101" y="324" width="6" height="15" fill="rgb(253,94,14)"/><text x="1104.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (13 samples, 0.46%)</title><rect x="1101" y="340" width="6" height="15" fill="rgb(234,40,40)"/><text x="1104.00" y="350.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (3 samples, 0.11%)</title><rect x="1109" y="260" width="2" height="15" fill="rgb(249,102,1)"/><text x="1112.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.11%)</title><rect x="1109" y="276" width="2" height="15" fill="rgb(240,2,42)"/><text x="1112.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (3 samples, 0.11%)</title><rect x="1109" y="292" width="2" height="15" fill="rgb(244,181,9)"/><text x="1112.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (3 samples, 0.11%)</title><rect x="1109" y="308" width="2" height="15" fill="rgb(220,103,0)"/><text x="1112.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (3 samples, 0.11%)</title><rect x="1109" y="324" width="2" height="15" fill="rgb(207,114,22)"/><text x="1112.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (3 samples, 0.11%)</title><rect x="1109" y="340" width="2" height="15" fill="rgb(210,101,3)"/><text x="1112.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (3 samples, 0.11%)</title><rect x="1109" y="356" width="2" height="15" fill="rgb(207,2,51)"/><text x="1112.00" y="366.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (3 samples, 0.11%)</title><rect x="1111" y="260" width="1" height="15" fill="rgb(239,214,51)"/><text x="1114.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.11%)</title><rect x="1111" y="276" width="1" height="15" fill="rgb(213,105,1)"/><text x="1114.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (3 samples, 0.11%)</title><rect x="1111" y="292" width="1" height="15" fill="rgb(216,95,46)"/><text x="1114.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (3 samples, 0.11%)</title><rect x="1111" y="308" width="1" height="15" fill="rgb(218,159,24)"/><text x="1114.00" y="318.50"></text></g><g><title>array_argsort (methods.c) (3 samples, 0.11%)</title><rect x="1111" y="324" width="1" height="15" fill="rgb(212,138,18)"/><text x="1114.00" y="334.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (3 samples, 0.11%)</title><rect x="1112" y="292" width="1" height="15" fill="rgb(213,171,27)"/><text x="1115.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.11%)</title><rect x="1112" y="308" width="1" height="15" fill="rgb(244,90,31)"/><text x="1115.00" y="318.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (4 samples, 0.14%)</title><rect x="1112" y="276" width="1" height="15" fill="rgb(236,149,46)"/><text x="1115.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (16 samples, 0.56%)</title><rect x="1107" y="212" width="7" height="15" fill="rgb(207,184,31)"/><text x="1110.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (14 samples, 0.49%)</title><rect x="1108" y="228" width="6" height="15" fill="rgb(210,63,16)"/><text x="1111.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (13 samples, 0.46%)</title><rect x="1108" y="244" width="6" height="15" fill="rgb(243,220,13)"/><text x="1111.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (5 samples, 0.18%)</title><rect x="1112" y="260" width="2" height="15" fill="rgb(244,31,25)"/><text x="1115.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (3 samples, 0.11%)</title><rect x="1114" y="228" width="1" height="15" fill="rgb(253,18,41)"/><text x="1117.00" y="238.50"></text></g><g><title>_buffer_clear_info (buffer.c) (3 samples, 0.11%)</title><rect x="1114" y="244" width="1" height="15" fill="rgb(226,146,34)"/><text x="1117.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (7 samples, 0.25%)</title><rect x="1114" y="212" width="3" height="15" fill="rgb(205,45,35)"/><text x="1117.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (4 samples, 0.14%)</title><rect x="1115" y="228" width="2" height="15" fill="rgb(231,150,26)"/><text x="1118.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py) (10 samples, 0.35%)</title><rect x="1117" y="228" width="4" height="15" fill="rgb(229,55,43)"/><text x="1120.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;) (8 samples, 0.28%)</title><rect x="1118" y="244" width="3" height="15" fill="rgb(227,209,54)"/><text x="1121.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.21%)</title><rect x="1118" y="260" width="3" height="15" fill="rgb(250,85,47)"/><text x="1121.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (6 samples, 0.21%)</title><rect x="1118" y="276" width="3" height="15" fill="rgb(207,150,49)"/><text x="1121.00" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py) (4 samples, 0.14%)</title><rect x="1119" y="292" width="2" height="15" fill="rgb(205,47,45)"/><text x="1122.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (5 samples, 0.18%)</title><rect x="1121" y="228" width="2" height="15" fill="rgb(241,56,9)"/><text x="1124.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1122" y="244" width="1" height="15" fill="rgb(214,226,40)"/><text x="1125.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1122" y="260" width="1" height="15" fill="rgb(206,156,7)"/><text x="1125.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (2,476 samples, 87.18%)</title><rect x="95" y="164" width="1028" height="15" fill="rgb(248,178,3)"/><text x="98.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (2,476 samples, 87.18%)</title><rect x="95" y="180" width="1028" height="15" fill="rgb(231,61,11)"/><text x="98.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (2,461 samples, 86.65%)</title><rect x="101" y="196" width="1022" height="15" fill="rgb(250,120,51)"/><text x="104.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (16 samples, 0.56%)</title><rect x="1117" y="212" width="6" height="15" fill="rgb(233,83,18)"/><text x="1120.00" y="222.50"></text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (2,479 samples, 87.29%)</title><rect x="94" y="68" width="1030" height="15" fill="rgb(234,110,36)"/><text x="97.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (2,479 samples, 87.29%)</title><rect x="94" y="84" width="1030" height="15" fill="rgb(237,33,46)"/><text x="97.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py)</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (2,479 samples, 87.29%)</title><rect x="94" y="100" width="1030" height="15" fill="rgb(220,197,37)"/><text x="97.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (2,479 samples, 87.29%)</title><rect x="94" y="116" width="1030" height="15" fill="rgb(250,41,2)"/><text x="97.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (2,479 samples, 87.29%)</title><rect x="94" y="132" width="1030" height="15" fill="rgb(235,187,33)"/><text x="97.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (2,478 samples, 87.25%)</title><rect x="94" y="148" width="1030" height="15" fill="rgb(253,183,52)"/><text x="97.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_reshape (methods.c) (3 samples, 0.11%)</title><rect x="1128" y="164" width="1" height="15" fill="rgb(244,157,42)"/><text x="1131.00" y="174.50"></text></g><g><title>array_subscript (mapping.c) (4 samples, 0.14%)</title><rect x="1129" y="164" width="2" height="15" fill="rgb(215,50,14)"/><text x="1132.00" y="174.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (4 samples, 0.14%)</title><rect x="1129" y="180" width="2" height="15" fill="rgb(219,13,20)"/><text x="1132.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (11 samples, 0.39%)</title><rect x="1131" y="164" width="4" height="15" fill="rgb(231,161,6)"/><text x="1134.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (4 samples, 0.14%)</title><rect x="1136" y="180" width="2" height="15" fill="rgb(232,6,21)"/><text x="1139.00" y="190.50"></text></g><g><title>_check_chunk_size (sklearn/metrics/pairwise.py) (7 samples, 0.25%)</title><rect x="1140" y="196" width="3" height="15" fill="rgb(235,109,3)"/><text x="1143.00" y="206.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/metrics/pairwise.py) (6 samples, 0.21%)</title><rect x="1141" y="212" width="2" height="15" fill="rgb(208,184,26)"/><text x="1144.00" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (6 samples, 0.21%)</title><rect x="1141" y="228" width="2" height="15" fill="rgb(240,14,41)"/><text x="1144.00" y="238.50"></text></g><g><title>__instancecheck__ (abc.py) (3 samples, 0.11%)</title><rect x="1142" y="244" width="1" height="15" fill="rgb(238,81,34)"/><text x="1145.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (4 samples, 0.14%)</title><rect x="1144" y="212" width="2" height="15" fill="rgb(247,186,21)"/><text x="1147.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.14%)</title><rect x="1144" y="228" width="2" height="15" fill="rgb(212,138,22)"/><text x="1147.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (4 samples, 0.14%)</title><rect x="1144" y="244" width="2" height="15" fill="rgb(245,39,28)"/><text x="1147.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (3 samples, 0.11%)</title><rect x="1147" y="212" width="1" height="15" fill="rgb(213,153,51)"/><text x="1150.00" y="222.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py) (13 samples, 0.46%)</title><rect x="1143" y="196" width="6" height="15" fill="rgb(222,31,51)"/><text x="1146.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (5 samples, 0.18%)</title><rect x="1149" y="196" width="2" height="15" fill="rgb(252,229,17)"/><text x="1152.00" y="206.50"></text></g><g><title>get_chunk_n_rows (sklearn/utils/__init__.py) (3 samples, 0.11%)</title><rect x="1151" y="196" width="2" height="15" fill="rgb(249,162,47)"/><text x="1154.00" y="206.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py) (4 samples, 0.14%)</title><rect x="1154" y="228" width="1" height="15" fill="rgb(238,137,44)"/><text x="1157.00" y="238.50"></text></g><g><title>array_multiply (number.c) (3 samples, 0.11%)</title><rect x="1157" y="244" width="1" height="15" fill="rgb(253,188,1)"/><text x="1160.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1157" y="260" width="1" height="15" fill="rgb(227,15,13)"/><text x="1160.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1157" y="276" width="1" height="15" fill="rgb(216,228,28)"/><text x="1160.00" y="286.50"></text></g><g><title>array_subscript (mapping.c) (5 samples, 0.18%)</title><rect x="1158" y="244" width="2" height="15" fill="rgb(212,165,38)"/><text x="1161.00" y="254.50"></text></g><g><title>__enter__ (warnings.py) (3 samples, 0.11%)</title><rect x="1164" y="276" width="1" height="15" fill="rgb(212,89,10)"/><text x="1167.00" y="286.50"></text></g><g><title>__exit__ (warnings.py) (3 samples, 0.11%)</title><rect x="1165" y="276" width="1" height="15" fill="rgb(224,68,9)"/><text x="1168.00" y="286.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (4 samples, 0.14%)</title><rect x="1167" y="276" width="2" height="15" fill="rgb(236,172,14)"/><text x="1170.00" y="286.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (5 samples, 0.18%)</title><rect x="1169" y="308" width="2" height="15" fill="rgb(243,193,42)"/><text x="1172.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c) (5 samples, 0.18%)</title><rect x="1169" y="324" width="2" height="15" fill="rgb(233,135,3)"/><text x="1172.00" y="334.50"></text></g><g><title>PyArray_FromArray (ctors.c) (5 samples, 0.18%)</title><rect x="1169" y="340" width="2" height="15" fill="rgb(213,68,36)"/><text x="1172.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (5 samples, 0.18%)</title><rect x="1169" y="356" width="2" height="15" fill="rgb(206,32,44)"/><text x="1172.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (3 samples, 0.11%)</title><rect x="1170" y="372" width="1" height="15" fill="rgb(228,209,53)"/><text x="1173.00" y="382.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (6 samples, 0.21%)</title><rect x="1169" y="276" width="2" height="15" fill="rgb(233,202,12)"/><text x="1172.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (6 samples, 0.21%)</title><rect x="1169" y="292" width="2" height="15" fill="rgb(240,176,31)"/><text x="1172.00" y="302.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py) (29 samples, 1.02%)</title><rect x="1160" y="244" width="12" height="15" fill="rgb(215,138,42)"/><text x="1163.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (26 samples, 0.92%)</title><rect x="1161" y="260" width="11" height="15" fill="rgb(249,23,8)"/><text x="1164.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (4 samples, 0.14%)</title><rect x="1173" y="340" width="2" height="15" fill="rgb(249,110,21)"/><text x="1176.00" y="350.50"></text></g><g><title>PyArray_EinsteinSum (einsum.c.src) (7 samples, 0.25%)</title><rect x="1173" y="324" width="3" height="15" fill="rgb(209,200,4)"/><text x="1176.00" y="334.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py) (11 samples, 0.39%)</title><rect x="1172" y="244" width="5" height="15" fill="rgb(244,206,46)"/><text x="1175.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;) (11 samples, 0.39%)</title><rect x="1172" y="260" width="5" height="15" fill="rgb(237,107,20)"/><text x="1175.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (11 samples, 0.39%)</title><rect x="1172" y="276" width="5" height="15" fill="rgb(209,24,10)"/><text x="1175.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py) (8 samples, 0.28%)</title><rect x="1173" y="292" width="4" height="15" fill="rgb(234,217,5)"/><text x="1176.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c) (8 samples, 0.28%)</title><rect x="1173" y="308" width="4" height="15" fill="rgb(230,16,36)"/><text x="1176.00" y="318.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (6 samples, 0.21%)</title><rect x="1177" y="244" width="2" height="15" fill="rgb(214,161,51)"/><text x="1180.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.18%)</title><rect x="1177" y="260" width="2" height="15" fill="rgb(233,213,0)"/><text x="1180.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.18%)</title><rect x="1177" y="276" width="2" height="15" fill="rgb(248,187,10)"/><text x="1180.00" y="286.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (5 samples, 0.18%)</title><rect x="1177" y="292" width="2" height="15" fill="rgb(236,76,2)"/><text x="1180.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (5 samples, 0.18%)</title><rect x="1180" y="276" width="2" height="15" fill="rgb(208,207,23)"/><text x="1183.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1181" y="292" width="1" height="15" fill="rgb(209,133,17)"/><text x="1184.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.11%)</title><rect x="1181" y="308" width="1" height="15" fill="rgb(206,41,50)"/><text x="1184.00" y="318.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py) (107 samples, 3.77%)</title><rect x="1138" y="180" width="45" height="15" fill="rgb(210,145,6)"/><text x="1141.00" y="190.50">pair..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py) (73 samples, 2.57%)</title><rect x="1153" y="196" width="30" height="15" fill="rgb(223,117,25)"/><text x="1156.00" y="206.50">pa..</text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py) (72 samples, 2.54%)</title><rect x="1153" y="212" width="30" height="15" fill="rgb(251,65,16)"/><text x="1156.00" y="222.50">_p..</text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py) (66 samples, 2.32%)</title><rect x="1155" y="228" width="28" height="15" fill="rgb(252,168,21)"/><text x="1158.00" y="238.50">e..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (9 samples, 0.32%)</title><rect x="1179" y="244" width="4" height="15" fill="rgb(211,1,22)"/><text x="1182.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (9 samples, 0.32%)</title><rect x="1179" y="260" width="4" height="15" fill="rgb(230,11,14)"/><text x="1182.00" y="270.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (122 samples, 4.30%)</title><rect x="1135" y="164" width="51" height="15" fill="rgb(211,105,21)"/><text x="1138.00" y="174.50">kneig..</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (7 samples, 0.25%)</title><rect x="1183" y="180" width="3" height="15" fill="rgb(231,98,9)"/><text x="1186.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.21%)</title><rect x="1183" y="196" width="3" height="15" fill="rgb(220,140,34)"/><text x="1186.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (5 samples, 0.18%)</title><rect x="1184" y="212" width="2" height="15" fill="rgb(240,74,18)"/><text x="1187.00" y="222.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (5 samples, 0.18%)</title><rect x="1184" y="228" width="2" height="15" fill="rgb(232,183,19)"/><text x="1187.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.14%)</title><rect x="1184" y="244" width="2" height="15" fill="rgb(226,152,5)"/><text x="1187.00" y="254.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (4 samples, 0.14%)</title><rect x="1184" y="260" width="2" height="15" fill="rgb(237,49,44)"/><text x="1187.00" y="270.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (4 samples, 0.14%)</title><rect x="1184" y="276" width="2" height="15" fill="rgb(227,189,12)"/><text x="1187.00" y="286.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (4 samples, 0.14%)</title><rect x="1184" y="292" width="2" height="15" fill="rgb(248,60,7)"/><text x="1187.00" y="302.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1187" y="228" width="1" height="15" fill="rgb(205,95,20)"/><text x="1190.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1187" y="244" width="1" height="15" fill="rgb(208,9,17)"/><text x="1190.00" y="254.50"></text></g><g><title>all (2,840 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(225,47,18)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (2,840 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(253,160,11)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (158 samples, 5.56%)</title><rect x="1124" y="68" width="66" height="15" fill="rgb(209,90,49)"/><text x="1127.00" y="78.50">profile..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (158 samples, 5.56%)</title><rect x="1124" y="84" width="66" height="15" fill="rgb(230,52,22)"/><text x="1127.00" y="94.50">setup_p..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_50_12_float_.py) (158 samples, 5.56%)</title><rect x="1124" y="100" width="66" height="15" fill="rgb(218,111,12)"/><text x="1127.00" y="110.50">profile..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (156 samples, 5.49%)</title><rect x="1125" y="116" width="65" height="15" fill="rgb(218,185,5)"/><text x="1128.00" y="126.50">time_pr..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (156 samples, 5.49%)</title><rect x="1125" y="132" width="65" height="15" fill="rgb(206,158,1)"/><text x="1128.00" y="142.50">&lt;lambda..</text></g><g><title>predict (sklearn/neighbors/_regression.py) (154 samples, 5.42%)</title><rect x="1126" y="148" width="64" height="15" fill="rgb(210,189,4)"/><text x="1129.00" y="158.50">predict..</text></g><g><title>mean (&lt;__array_function__ internals&gt;) (9 samples, 0.32%)</title><rect x="1186" y="164" width="4" height="15" fill="rgb(253,182,11)"/><text x="1189.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 0.32%)</title><rect x="1186" y="180" width="4" height="15" fill="rgb(223,150,52)"/><text x="1189.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (9 samples, 0.32%)</title><rect x="1186" y="196" width="4" height="15" fill="rgb(219,198,25)"/><text x="1189.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py) (9 samples, 0.32%)</title><rect x="1186" y="212" width="4" height="15" fill="rgb(217,99,4)"/><text x="1189.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (4 samples, 0.14%)</title><rect x="1188" y="228" width="2" height="15" fill="rgb(234,86,23)"/><text x="1191.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1188" y="244" width="2" height="15" fill="rgb(217,137,10)"/><text x="1191.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1188" y="260" width="2" height="15" fill="rgb(230,204,30)"/><text x="1191.00" y="270.50"></text></g></g></svg>