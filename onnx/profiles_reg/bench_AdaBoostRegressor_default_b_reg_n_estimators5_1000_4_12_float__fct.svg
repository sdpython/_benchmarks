<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="613.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="613.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 1.14%)</title><rect x="0.2849%" y="340" width="1.1396%" height="15" fill="rgb(227,0,7)"/><text x="0.5349%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.14%)</title><rect x="0.2849%" y="356" width="1.1396%" height="15" fill="rgb(217,0,24)"/><text x="0.5349%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.14%)</title><rect x="0.2849%" y="372" width="1.1396%" height="15" fill="rgb(221,193,54)"/><text x="0.5349%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.14%)</title><rect x="0.2849%" y="388" width="1.1396%" height="15" fill="rgb(248,212,6)"/><text x="0.5349%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.14%)</title><rect x="0.2849%" y="404" width="1.1396%" height="15" fill="rgb(208,68,35)"/><text x="0.5349%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.14%)</title><rect x="0.2849%" y="420" width="1.1396%" height="15" fill="rgb(232,128,0)"/><text x="0.5349%" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (4 samples, 1.14%)</title><rect x="0.2849%" y="436" width="1.1396%" height="15" fill="rgb(207,160,47)"/><text x="0.5349%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.14%)</title><rect x="0.2849%" y="452" width="1.1396%" height="15" fill="rgb(228,23,34)"/><text x="0.5349%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.14%)</title><rect x="0.2849%" y="468" width="1.1396%" height="15" fill="rgb(218,30,26)"/><text x="0.5349%" y="478.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.71%)</title><rect x="0.0000%" y="68" width="1.7094%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.71%)</title><rect x="0.0000%" y="84" width="1.7094%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.71%)</title><rect x="0.0000%" y="100" width="1.7094%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.71%)</title><rect x="0.0000%" y="116" width="1.7094%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.71%)</title><rect x="0.0000%" y="132" width="1.7094%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_n_estimators5.py) (6 samples, 1.71%)</title><rect x="0.0000%" y="148" width="1.7094%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.71%)</title><rect x="0.0000%" y="164" width="1.7094%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.71%)</title><rect x="0.0000%" y="180" width="1.7094%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.42%)</title><rect x="0.2849%" y="196" width="1.4245%" height="15" fill="rgb(210,31,41)"/><text x="0.5349%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.42%)</title><rect x="0.2849%" y="212" width="1.4245%" height="15" fill="rgb(221,200,47)"/><text x="0.5349%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.42%)</title><rect x="0.2849%" y="228" width="1.4245%" height="15" fill="rgb(226,26,5)"/><text x="0.5349%" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (5 samples, 1.42%)</title><rect x="0.2849%" y="244" width="1.4245%" height="15" fill="rgb(249,33,26)"/><text x="0.5349%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.42%)</title><rect x="0.2849%" y="260" width="1.4245%" height="15" fill="rgb(235,183,28)"/><text x="0.5349%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.42%)</title><rect x="0.2849%" y="276" width="1.4245%" height="15" fill="rgb(221,5,38)"/><text x="0.5349%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.42%)</title><rect x="0.2849%" y="292" width="1.4245%" height="15" fill="rgb(247,18,42)"/><text x="0.5349%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.42%)</title><rect x="0.2849%" y="308" width="1.4245%" height="15" fill="rgb(241,131,45)"/><text x="0.5349%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.42%)</title><rect x="0.2849%" y="324" width="1.4245%" height="15" fill="rgb(249,31,29)"/><text x="0.5349%" y="334.50"></text></g><g><title>onnxruntime::ArgMin&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 1.99%)</title><rect x="3.1339%" y="324" width="1.9943%" height="15" fill="rgb(225,111,53)"/><text x="3.3839%" y="334.50">o..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 1.71%)</title><rect x="3.4188%" y="340" width="1.7094%" height="15" fill="rgb(238,160,17)"/><text x="3.6688%" y="350.50"></text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 2.28%)</title><rect x="5.4131%" y="324" width="2.2792%" height="15" fill="rgb(214,148,48)"/><text x="5.6631%" y="334.50">o..</text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 2.28%)</title><rect x="5.4131%" y="340" width="2.2792%" height="15" fill="rgb(232,36,49)"/><text x="5.6631%" y="350.50">o..</text></g><g><title>onnxruntime::CumSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 3.70%)</title><rect x="7.6923%" y="324" width="3.7037%" height="15" fill="rgb(209,103,24)"/><text x="7.9423%" y="334.50">onnx..</text></g><g><title>(anonymous namespace)::SumSlices&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 2.85%)</title><rect x="8.5470%" y="340" width="2.8490%" height="15" fill="rgb(229,88,8)"/><text x="8.7970%" y="350.50">(a..</text></g><g><title>onnxruntime::GatherElements::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.42%)</title><rect x="11.3960%" y="324" width="1.4245%" height="15" fill="rgb(213,181,19)"/><text x="11.6460%" y="334.50"></text></g><g><title>onnxruntime::Mul&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.14%)</title><rect x="13.6752%" y="324" width="1.1396%" height="15" fill="rgb(254,191,54)"/><text x="13.9252%" y="334.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.14%)</title><rect x="13.6752%" y="340" width="1.1396%" height="15" fill="rgb(241,83,37)"/><text x="13.9252%" y="350.50"></text></g><g><title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, long, std::pair&lt;float, long&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::GreaterValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.42%)</title><rect x="23.3618%" y="372" width="1.4245%" height="15" fill="rgb(233,36,39)"/><text x="23.6118%" y="382.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 16.24%)</title><rect x="14.8148%" y="324" width="16.2393%" height="15" fill="rgb(226,3,54)"/><text x="15.0648%" y="334.50">onnxruntime::TopK&lt;11, flo..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 16.24%)</title><rect x="14.8148%" y="340" width="16.2393%" height="15" fill="rgb(245,192,40)"/><text x="15.0648%" y="350.50">onnxruntime::TopKImpl (on..</text></g><g><title>onnxruntime::extract_top_k_elements&lt;true, true, onnxruntime::GreaterValueCmp&lt;float&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 16.24%)</title><rect x="14.8148%" y="356" width="16.2393%" height="15" fill="rgb(238,167,29)"/><text x="15.0648%" y="366.50">onnxruntime::extract_top_..</text></g><g><title>std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt;::_M_emplace_back_aux&lt;std::pair&lt;float, long&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (22 samples, 6.27%)</title><rect x="24.7863%" y="372" width="6.2678%" height="15" fill="rgb(232,182,51)"/><text x="25.0363%" y="382.50">std::vec..</text></g><g><title>operator new (libstdc++.so.6.0.28) (9 samples, 2.56%)</title><rect x="28.4900%" y="388" width="2.5641%" height="15" fill="rgb(231,60,39)"/><text x="28.7400%" y="398.50">op..</text></g><g><title>malloc (libc-2.29.so) (7 samples, 1.99%)</title><rect x="29.0598%" y="404" width="1.9943%" height="15" fill="rgb(208,69,12)"/><text x="29.3098%" y="414.50">m..</text></g><g><title>onnxruntime::ml::ArrayFeatureExtractorOp&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.14%)</title><rect x="31.0541%" y="324" width="1.1396%" height="15" fill="rgb(235,93,37)"/><text x="31.3041%" y="334.50"></text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (117 samples, 33.33%)</title><rect x="2.8490%" y="292" width="33.3333%" height="15" fill="rgb(213,116,39)"/><text x="3.0990%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (117 samples, 33.33%)</title><rect x="2.8490%" y="308" width="33.3333%" height="15" fill="rgb(222,207,29)"/><text x="3.0990%" y="318.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 3.99%)</title><rect x="32.1937%" y="324" width="3.9886%" height="15" fill="rgb(206,96,30)"/><text x="32.4437%" y="334.50">onnx..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 2.85%)</title><rect x="33.3333%" y="340" width="2.8490%" height="15" fill="rgb(218,138,4)"/><text x="33.5833%" y="350.50">on..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (118 samples, 33.62%)</title><rect x="2.8490%" y="244" width="33.6182%" height="15" fill="rgb(250,191,14)"/><text x="3.0990%" y="254.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/o..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (118 samples, 33.62%)</title><rect x="2.8490%" y="260" width="33.6182%" height="15" fill="rgb(239,60,40)"/><text x="3.0990%" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/o..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (118 samples, 33.62%)</title><rect x="2.8490%" y="276" width="33.6182%" height="15" fill="rgb(206,27,48)"/><text x="3.0990%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onn..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (123 samples, 35.04%)</title><rect x="1.7094%" y="100" width="35.0427%" height="15" fill="rgb(225,35,8)"/><text x="1.9594%" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_n_estimato..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (123 samples, 35.04%)</title><rect x="1.7094%" y="116" width="35.0427%" height="15" fill="rgb(250,213,24)"/><text x="1.9594%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (123 samples, 35.04%)</title><rect x="1.7094%" y="132" width="35.0427%" height="15" fill="rgb(247,123,22)"/><text x="1.9594%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (122 samples, 34.76%)</title><rect x="1.9943%" y="148" width="34.7578%" height="15" fill="rgb(231,138,38)"/><text x="2.2443%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (121 samples, 34.47%)</title><rect x="2.2792%" y="164" width="34.4729%" height="15" fill="rgb(231,145,46)"/><text x="2.5292%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (121 samples, 34.47%)</title><rect x="2.2792%" y="180" width="34.4729%" height="15" fill="rgb(251,118,11)"/><text x="2.5292%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (121 samples, 34.47%)</title><rect x="2.2792%" y="196" width="34.4729%" height="15" fill="rgb(217,147,25)"/><text x="2.5292%" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (120 samples, 34.19%)</title><rect x="2.5641%" y="212" width="34.1880%" height="15" fill="rgb(247,81,37)"/><text x="2.8141%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/on..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (119 samples, 33.90%)</title><rect x="2.8490%" y="228" width="33.9031%" height="15" fill="rgb(209,12,38)"/><text x="3.0990%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::py..</text></g><g><title>profile_ort (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (124 samples, 35.33%)</title><rect x="1.7094%" y="68" width="35.3276%" height="15" fill="rgb(227,1,9)"/><text x="1.9594%" y="78.50">profile_ort (bench_AdaBoostRegressor_default_b_reg_n_esti..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (124 samples, 35.33%)</title><rect x="1.7094%" y="84" width="35.3276%" height="15" fill="rgb(248,47,43)"/><text x="1.9594%" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_n_es..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py) (6 samples, 1.71%)</title><rect x="37.8917%" y="196" width="1.7094%" height="15" fill="rgb(221,10,30)"/><text x="38.1417%" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py) (6 samples, 1.71%)</title><rect x="37.8917%" y="212" width="1.7094%" height="15" fill="rgb(210,229,1)"/><text x="38.1417%" y="222.50"></text></g><g><title>_argmin (mlprodict/onnxrt/ops_cpu/op_argmin.py) (6 samples, 1.71%)</title><rect x="37.8917%" y="228" width="1.7094%" height="15" fill="rgb(222,148,37)"/><text x="38.1417%" y="238.50"></text></g><g><title>pybind11::dtype::dtype (numpy.h) (4 samples, 1.14%)</title><rect x="39.8860%" y="516" width="1.1396%" height="15" fill="rgb(234,67,33)"/><text x="40.1360%" y="526.50"></text></g><g><title>pybind11::detail::object_api&lt;pybind11::handle&gt;::operator()&lt;(pybind11::return_value_policy)1, pybind11::str&gt; (cast.h) (4 samples, 1.14%)</title><rect x="39.8860%" y="532" width="1.1396%" height="15" fill="rgb(247,98,35)"/><text x="40.1360%" y="542.50"></text></g><g><title>pybind11::detail::simple_collector&lt;(pybind11::return_value_policy)1&gt;::call (cast.h) (4 samples, 1.14%)</title><rect x="39.8860%" y="548" width="1.1396%" height="15" fill="rgb(247,138,52)"/><text x="40.1360%" y="558.50"></text></g><g><title>_dtype_from_pep3118 (numpy/core/_internal.py) (4 samples, 1.14%)</title><rect x="39.8860%" y="564" width="1.1396%" height="15" fill="rgb(213,79,30)"/><text x="40.1360%" y="574.50"></text></g><g><title>__dtype_from_pep3118 (numpy/core/_internal.py) (4 samples, 1.14%)</title><rect x="39.8860%" y="580" width="1.1396%" height="15" fill="rgb(246,177,23)"/><text x="40.1360%" y="590.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (6 samples, 1.71%)</title><rect x="39.6011%" y="196" width="1.7094%" height="15" fill="rgb(230,62,27)"/><text x="39.8511%" y="206.50"></text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (6 samples, 1.71%)</title><rect x="39.6011%" y="212" width="1.7094%" height="15" fill="rgb(216,154,8)"/><text x="39.8511%" y="222.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::array_t&lt;float, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::array_t&lt;float, 16&gt;, pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;, pybind11::name, pybind11::scope, pybind11::sibling, char [114]&gt;(pybind11::array_t&lt;float, 16&gt; (*&amp;&amp;&amp;)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::array_t&lt;float, 16&gt; (*)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, char [114])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (6 samples, 1.71%)</title><rect x="39.6011%" y="228" width="1.7094%" height="15" fill="rgb(244,35,45)"/><text x="39.8511%" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::array_t&lt;float, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::array_t&lt;float, 16&gt;, pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;, pybind11::name, pybind11::scope, pybind11::sibling, char [114]&gt;(pybind11::array_t&lt;float, 16&gt; (*&amp;&amp;&amp;)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::array_t&lt;float, 16&gt; (*)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, char [114])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (6 samples, 1.71%)</title><rect x="39.6011%" y="244" width="1.7094%" height="15" fill="rgb(251,115,12)"/><text x="39.8511%" y="254.50"></text></g><g><title>pybind11::detail::pyobject_caster&lt;pybind11::array_t&lt;float, 16&gt; &gt;::cast (numpy.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="260" width="1.4245%" height="15" fill="rgb(240,54,50)"/><text x="40.1360%" y="270.50"></text></g><g><title>pybind11::handle::inc_ref &amp; (pytypes.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="276" width="1.4245%" height="15" fill="rgb(233,84,52)"/><text x="40.1360%" y="286.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::array_t&lt;float, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, pybind11::array_t&lt;long, 17&gt;), (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="292" width="1.4245%" height="15" fill="rgb(207,117,47)"/><text x="40.1360%" y="302.50"></text></g><g><title>pybind11::array_t&lt;float, 17&gt;::~array_t (numpy.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="308" width="1.4245%" height="15" fill="rgb(249,43,39)"/><text x="40.1360%" y="318.50"></text></g><g><title>pybind11::array::~array (numpy.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="324" width="1.4245%" height="15" fill="rgb(209,38,44)"/><text x="40.1360%" y="334.50"></text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="340" width="1.4245%" height="15" fill="rgb(236,212,23)"/><text x="40.1360%" y="350.50"></text></g><g><title>pybind11::object::~object (pytypes.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="356" width="1.4245%" height="15" fill="rgb(242,79,21)"/><text x="40.1360%" y="366.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="372" width="1.4245%" height="15" fill="rgb(211,96,35)"/><text x="40.1360%" y="382.50"></text></g><g><title>array_feature_extractor_float (mlprodict/onnxrt/ops_cpu/_op_onnx_numpy.cpp) (5 samples, 1.42%)</title><rect x="39.8860%" y="388" width="1.4245%" height="15" fill="rgb(253,215,40)"/><text x="40.1360%" y="398.50"></text></g><g><title>pybind11::array_t&lt;float, 17&gt;::~array_t (numpy.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="404" width="1.4245%" height="15" fill="rgb(211,81,21)"/><text x="40.1360%" y="414.50"></text></g><g><title>pybind11::array::~array (numpy.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="420" width="1.4245%" height="15" fill="rgb(208,190,38)"/><text x="40.1360%" y="430.50"></text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="436" width="1.4245%" height="15" fill="rgb(235,213,38)"/><text x="40.1360%" y="446.50"></text></g><g><title>pybind11::object::~object (pytypes.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="452" width="1.4245%" height="15" fill="rgb(237,122,38)"/><text x="40.1360%" y="462.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="468" width="1.4245%" height="15" fill="rgb(244,218,35)"/><text x="40.1360%" y="478.50"></text></g><g><title>array_feature_extractor&lt;float&gt; (mlprodict/onnxrt/ops_cpu/_op_onnx_numpy.cpp) (5 samples, 1.42%)</title><rect x="39.8860%" y="484" width="1.4245%" height="15" fill="rgb(240,68,47)"/><text x="40.1360%" y="494.50"></text></g><g><title>pybind11::array::array (numpy.h) (5 samples, 1.42%)</title><rect x="39.8860%" y="500" width="1.4245%" height="15" fill="rgb(210,16,53)"/><text x="40.1360%" y="510.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cum_sum.py) (5 samples, 1.42%)</title><rect x="42.1652%" y="196" width="1.4245%" height="15" fill="rgb(235,124,12)"/><text x="42.4152%" y="206.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;) (4 samples, 1.14%)</title><rect x="42.4501%" y="212" width="1.1396%" height="15" fill="rgb(224,169,11)"/><text x="42.7001%" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 1.14%)</title><rect x="42.4501%" y="228" width="1.1396%" height="15" fill="rgb(250,166,2)"/><text x="42.7001%" y="238.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py) (4 samples, 1.14%)</title><rect x="42.4501%" y="244" width="1.1396%" height="15" fill="rgb(242,216,29)"/><text x="42.7001%" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (4 samples, 1.14%)</title><rect x="42.4501%" y="260" width="1.1396%" height="15" fill="rgb(230,116,27)"/><text x="42.7001%" y="270.50"></text></g><g><title>array_cumsum (methods.c) (4 samples, 1.14%)</title><rect x="42.4501%" y="276" width="1.1396%" height="15" fill="rgb(228,99,48)"/><text x="42.7001%" y="286.50"></text></g><g><title>PyArray_CumSum (calculation.c) (4 samples, 1.14%)</title><rect x="42.4501%" y="292" width="1.1396%" height="15" fill="rgb(253,11,6)"/><text x="42.7001%" y="302.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c) (4 samples, 1.14%)</title><rect x="42.4501%" y="308" width="1.1396%" height="15" fill="rgb(247,143,39)"/><text x="42.7001%" y="318.50"></text></g><g><title>_choose_dispatcher (numpy/core/fromnumeric.py) (4 samples, 1.14%)</title><rect x="44.1595%" y="260" width="1.1396%" height="15" fill="rgb(236,97,10)"/><text x="44.4095%" y="270.50"></text></g><g><title>choose (&lt;__array_function__ internals&gt;) (25 samples, 7.12%)</title><rect x="43.5897%" y="228" width="7.1225%" height="15" fill="rgb(233,208,19)"/><text x="43.8397%" y="238.50">choose (&lt;_..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (24 samples, 6.84%)</title><rect x="43.8746%" y="244" width="6.8376%" height="15" fill="rgb(216,164,2)"/><text x="44.1246%" y="254.50">array_imp..</text></g><g><title>choose (numpy/core/fromnumeric.py) (18 samples, 5.13%)</title><rect x="45.5840%" y="260" width="5.1282%" height="15" fill="rgb(220,129,5)"/><text x="45.8340%" y="270.50">choose..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (17 samples, 4.84%)</title><rect x="45.8689%" y="276" width="4.8433%" height="15" fill="rgb(242,17,10)"/><text x="46.1189%" y="286.50">_wrapf..</text></g><g><title>array_choose (methods.c) (17 samples, 4.84%)</title><rect x="45.8689%" y="292" width="4.8433%" height="15" fill="rgb(242,107,0)"/><text x="46.1189%" y="302.50">array_..</text></g><g><title>PyArray_Choose (item_selection.c) (17 samples, 4.84%)</title><rect x="45.8689%" y="308" width="4.8433%" height="15" fill="rgb(251,28,31)"/><text x="46.1189%" y="318.50">PyArra..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_gather_elements.py) (27 samples, 7.69%)</title><rect x="43.5897%" y="196" width="7.6923%" height="15" fill="rgb(233,223,10)"/><text x="43.8397%" y="206.50">_run (mlpro..</text></g><g><title>gather_numpy (mlprodict/onnxrt/ops_cpu/op_gather_elements.py) (27 samples, 7.69%)</title><rect x="43.5897%" y="212" width="7.6923%" height="15" fill="rgb(215,21,27)"/><text x="43.8397%" y="222.50">gather_nump..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (7 samples, 1.99%)</title><rect x="52.1368%" y="196" width="1.9943%" height="15" fill="rgb(232,23,21)"/><text x="52.3868%" y="206.50">_..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (7 samples, 1.99%)</title><rect x="52.1368%" y="212" width="1.9943%" height="15" fill="rgb(244,5,23)"/><text x="52.3868%" y="222.50">_..</text></g><g><title>topk_sorted_implementation_cpp (mlprodict/onnxrt/ops_cpu/op_topk.py) (7 samples, 1.99%)</title><rect x="52.1368%" y="228" width="1.9943%" height="15" fill="rgb(226,81,46)"/><text x="52.3868%" y="238.50">t..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="244" width="1.7094%" height="15" fill="rgb(247,70,30)"/><text x="52.6717%" y="254.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::array_t&lt;long, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::array_t&lt;long, 16&gt;, pybind11::array_t&lt;float, 17&gt;, long, bool, pybind11::name, pybind11::scope, pybind11::sibling, char [183]&gt;(pybind11::array_t&lt;long, 16&gt; (*&amp;&amp;&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::array_t&lt;long, 16&gt; (*)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, char [183])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="260" width="1.7094%" height="15" fill="rgb(212,68,19)"/><text x="52.6717%" y="270.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::array_t&lt;long, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::array_t&lt;long, 16&gt;, pybind11::array_t&lt;float, 17&gt;, long, bool, pybind11::name, pybind11::scope, pybind11::sibling, char [183]&gt;(pybind11::array_t&lt;long, 16&gt; (*&amp;&amp;&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::array_t&lt;long, 16&gt; (*)(pybind11::array_t&lt;float, 17&gt;, long, bool), pybind11::name const, pybind11::scope&amp;, pybind11::sibling, char [183])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="276" width="1.7094%" height="15" fill="rgb(240,187,13)"/><text x="52.6717%" y="286.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pybind11::array_t&lt;float, 17&gt;, long, bool&gt;::call&lt;pybind11::array_t&lt;long, 16&gt;, pybind11::detail::void_type, pybind11::array_t&lt;long, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool)&gt; &amp;&amp; (cast.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="292" width="1.7094%" height="15" fill="rgb(223,113,26)"/><text x="52.6717%" y="302.50"></text></g><g><title>pybind11::detail::argument_loader&lt;pybind11::array_t&lt;float, 17&gt;, long, bool&gt;::call_impl&lt;pybind11::array_t&lt;long, 16&gt;, pybind11::array_t&lt;long, 16&gt; (*&amp;)(pybind11::array_t&lt;float, 17&gt;, long, bool), (unsigned long)0, (unsigned long)1, (unsigned long)2, pybind11::detail::void_type&gt; (cast.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="308" width="1.7094%" height="15" fill="rgb(206,192,2)"/><text x="52.6717%" y="318.50"></text></g><g><title>pybind11::array_t&lt;float, 17&gt;::~array_t (numpy.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="324" width="1.7094%" height="15" fill="rgb(241,108,4)"/><text x="52.6717%" y="334.50"></text></g><g><title>pybind11::array::~array (numpy.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="340" width="1.7094%" height="15" fill="rgb(247,173,49)"/><text x="52.6717%" y="350.50"></text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="356" width="1.7094%" height="15" fill="rgb(224,114,35)"/><text x="52.6717%" y="366.50"></text></g><g><title>pybind11::object::~object (pytypes.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="372" width="1.7094%" height="15" fill="rgb(245,159,27)"/><text x="52.6717%" y="382.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="388" width="1.7094%" height="15" fill="rgb(245,172,44)"/><text x="52.6717%" y="398.50"></text></g><g><title>topk_element_max_float (mlprodict/onnxrt/ops_cpu/_op_onnx_numpy.cpp) (6 samples, 1.71%)</title><rect x="52.4217%" y="404" width="1.7094%" height="15" fill="rgb(236,23,11)"/><text x="52.6717%" y="414.50"></text></g><g><title>pybind11::array_t&lt;float, 17&gt;::~array_t (numpy.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="420" width="1.7094%" height="15" fill="rgb(205,117,38)"/><text x="52.6717%" y="430.50"></text></g><g><title>pybind11::array::~array (numpy.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="436" width="1.7094%" height="15" fill="rgb(237,72,25)"/><text x="52.6717%" y="446.50"></text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="452" width="1.7094%" height="15" fill="rgb(244,70,9)"/><text x="52.6717%" y="462.50"></text></g><g><title>pybind11::object::~object (pytypes.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="468" width="1.7094%" height="15" fill="rgb(217,125,39)"/><text x="52.6717%" y="478.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (6 samples, 1.71%)</title><rect x="52.4217%" y="484" width="1.7094%" height="15" fill="rgb(235,36,10)"/><text x="52.6717%" y="494.50"></text></g><g><title>topk_element&lt;float, void (float const*, long, long, long*, bool)&gt; (mlprodict/onnxrt/ops_cpu/_op_onnx_numpy.cpp) (6 samples, 1.71%)</title><rect x="52.4217%" y="500" width="1.7094%" height="15" fill="rgb(251,123,47)"/><text x="52.6717%" y="510.50"></text></g><g><title>0x7f28a75cfab9 (libgomp.so.1.0.0) (6 samples, 1.71%)</title><rect x="52.4217%" y="516" width="1.7094%" height="15" fill="rgb(221,13,13)"/><text x="52.6717%" y="526.50"></text></g><g><title>0x7f28a75d0ea9 (libgomp.so.1.0.0) (4 samples, 1.14%)</title><rect x="54.9858%" y="436" width="1.1396%" height="15" fill="rgb(238,131,9)"/><text x="55.2358%" y="446.50"></text></g><g><title>0x7f28a75d0eab (libgomp.so.1.0.0) (5 samples, 1.42%)</title><rect x="56.1254%" y="436" width="1.4245%" height="15" fill="rgb(211,50,8)"/><text x="56.3754%" y="446.50"></text></g><g><title>0x7f28a75cfab9 (libgomp.so.1.0.0) (14 samples, 3.99%)</title><rect x="54.4160%" y="420" width="3.9886%" height="15" fill="rgb(245,182,24)"/><text x="54.6660%" y="430.50">0x7f..</text></g><g><title>profile_pyrtc (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (77 samples, 21.94%)</title><rect x="37.0370%" y="68" width="21.9373%" height="15" fill="rgb(242,14,37)"/><text x="37.2870%" y="78.50">profile_pyrtc (bench_AdaBoostRegres..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (77 samples, 21.94%)</title><rect x="37.0370%" y="84" width="21.9373%" height="15" fill="rgb(246,228,12)"/><text x="37.2870%" y="94.50">setup_profile (bench_AdaBoostRegres..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (77 samples, 21.94%)</title><rect x="37.0370%" y="100" width="21.9373%" height="15" fill="rgb(213,55,15)"/><text x="37.2870%" y="110.50">profile (bench_AdaBoostRegressor_de..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (77 samples, 21.94%)</title><rect x="37.0370%" y="116" width="21.9373%" height="15" fill="rgb(209,9,3)"/><text x="37.2870%" y="126.50">time_predict (mlprodict/asv_benchma..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (77 samples, 21.94%)</title><rect x="37.0370%" y="132" width="21.9373%" height="15" fill="rgb(230,59,30)"/><text x="37.2870%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/c..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (77 samples, 21.94%)</title><rect x="37.0370%" y="148" width="21.9373%" height="15" fill="rgb(209,121,21)"/><text x="37.2870%" y="158.50">run (mlprodict/onnxrt/onnx_inferenc..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py) (77 samples, 21.94%)</title><rect x="37.0370%" y="164" width="21.9373%" height="15" fill="rgb(220,109,13)"/><text x="37.2870%" y="174.50">_run_sequence_runtime_compiled (mlp..</text></g><g><title>compiled_run (&lt;string&gt;) (76 samples, 21.65%)</title><rect x="37.3219%" y="180" width="21.6524%" height="15" fill="rgb(232,18,1)"/><text x="37.5719%" y="190.50">compiled_run (&lt;string&gt;)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py) (17 samples, 4.84%)</title><rect x="54.1311%" y="196" width="4.8433%" height="15" fill="rgb(215,41,42)"/><text x="54.3811%" y="206.50">_run (..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (16 samples, 4.56%)</title><rect x="54.4160%" y="212" width="4.5584%" height="15" fill="rgb(224,123,36)"/><text x="54.6660%" y="222.50">pybin..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (16 samples, 4.56%)</title><rect x="54.4160%" y="228" width="4.5584%" height="15" fill="rgb(240,125,3)"/><text x="54.6660%" y="238.50">void ..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (16 samples, 4.56%)</title><rect x="54.4160%" y="244" width="4.5584%" height="15" fill="rgb(205,98,50)"/><text x="54.6660%" y="254.50">void ..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (16 samples, 4.56%)</title><rect x="54.4160%" y="260" width="4.5584%" height="15" fill="rgb(205,185,37)"/><text x="54.6660%" y="270.50">pybin..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (16 samples, 4.56%)</title><rect x="54.4160%" y="276" width="4.5584%" height="15" fill="rgb(238,207,15)"/><text x="54.6660%" y="286.50">pybin..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (16 samples, 4.56%)</title><rect x="54.4160%" y="292" width="4.5584%" height="15" fill="rgb(213,199,42)"/><text x="54.6660%" y="302.50">pybin..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (16 samples, 4.56%)</title><rect x="54.4160%" y="308" width="4.5584%" height="15" fill="rgb(235,201,11)"/><text x="54.6660%" y="318.50">pybin..</text></g><g><title>pybind11::array::~array (numpy.h) (16 samples, 4.56%)</title><rect x="54.4160%" y="324" width="4.5584%" height="15" fill="rgb(207,46,11)"/><text x="54.6660%" y="334.50">pybin..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (16 samples, 4.56%)</title><rect x="54.4160%" y="340" width="4.5584%" height="15" fill="rgb(241,35,35)"/><text x="54.6660%" y="350.50">pybin..</text></g><g><title>pybind11::object::~object (pytypes.h) (16 samples, 4.56%)</title><rect x="54.4160%" y="356" width="4.5584%" height="15" fill="rgb(243,32,47)"/><text x="54.6660%" y="366.50">pybin..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (16 samples, 4.56%)</title><rect x="54.4160%" y="372" width="4.5584%" height="15" fill="rgb(247,202,23)"/><text x="54.6660%" y="382.50">pybin..</text></g><g><title>RuntimeTreeEnsembleRegressorP&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_p_.cpp) (16 samples, 4.56%)</title><rect x="54.4160%" y="388" width="4.5584%" height="15" fill="rgb(219,102,11)"/><text x="54.6660%" y="398.50">Runti..</text></g><g><title>RuntimeTreeEnsembleRegressorP&lt;float&gt;::compute_gil_free&lt;_AggregatorSum&lt;float&gt; &gt; (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_p_.cpp) (16 samples, 4.56%)</title><rect x="54.4160%" y="404" width="4.5584%" height="15" fill="rgb(243,110,44)"/><text x="54.6660%" y="414.50">Runti..</text></g><g><title>0x7f28b9715405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 3.13%)</title><rect x="62.1083%" y="244" width="3.1339%" height="15" fill="rgb(222,74,54)"/><text x="62.3583%" y="254.50">0x7..</text></g><g><title>0x7f28b9705fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 3.42%)</title><rect x="62.1083%" y="228" width="3.4188%" height="15" fill="rgb(216,99,12)"/><text x="62.3583%" y="238.50">0x7..</text></g><g><title>0x7f28b9706d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (21 samples, 5.98%)</title><rect x="61.8234%" y="212" width="5.9829%" height="15" fill="rgb(226,22,26)"/><text x="62.0734%" y="222.50">0x7f28b9..</text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (6 samples, 1.71%)</title><rect x="70.0855%" y="244" width="1.7094%" height="15" fill="rgb(217,163,10)"/><text x="70.3355%" y="254.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (5 samples, 1.42%)</title><rect x="72.6496%" y="244" width="1.4245%" height="15" fill="rgb(213,25,53)"/><text x="72.8996%" y="254.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (29 samples, 8.26%)</title><rect x="67.8063%" y="212" width="8.2621%" height="15" fill="rgb(252,105,26)"/><text x="68.0563%" y="222.50">_validate_X_..</text></g><g><title>check_array (sklearn/utils/validation.py) (29 samples, 8.26%)</title><rect x="67.8063%" y="228" width="8.2621%" height="15" fill="rgb(220,39,43)"/><text x="68.0563%" y="238.50">check_array ..</text></g><g><title>simplefilter (warnings.py) (4 samples, 1.14%)</title><rect x="74.9288%" y="244" width="1.1396%" height="15" fill="rgb(229,68,48)"/><text x="75.1788%" y="254.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_weight_boosting.py) (64 samples, 18.23%)</title><rect x="60.1140%" y="180" width="18.2336%" height="15" fill="rgb(252,8,32)"/><text x="60.3640%" y="190.50">&lt;listcomp&gt; (sklearn/ensemble..</text></g><g><title>predict (sklearn/tree/_classes.py) (64 samples, 18.23%)</title><rect x="60.1140%" y="196" width="18.2336%" height="15" fill="rgb(223,20,43)"/><text x="60.3640%" y="206.50">predict (sklearn/tree/_class..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (8 samples, 2.28%)</title><rect x="76.0684%" y="212" width="2.2792%" height="15" fill="rgb(229,81,49)"/><text x="76.3184%" y="222.50">c..</text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 1.14%)</title><rect x="78.3476%" y="180" width="1.1396%" height="15" fill="rgb(236,28,36)"/><text x="78.5976%" y="190.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (4 samples, 1.14%)</title><rect x="78.3476%" y="196" width="1.1396%" height="15" fill="rgb(249,185,26)"/><text x="78.5976%" y="206.50"></text></g><g><title>PyArray_FromAny (ctors.c) (4 samples, 1.14%)</title><rect x="78.3476%" y="212" width="1.1396%" height="15" fill="rgb(249,174,33)"/><text x="78.5976%" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (4 samples, 1.14%)</title><rect x="79.4872%" y="180" width="1.1396%" height="15" fill="rgb(233,201,37)"/><text x="79.7372%" y="190.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (13 samples, 3.70%)</title><rect x="80.6268%" y="180" width="3.7037%" height="15" fill="rgb(221,78,26)"/><text x="80.8768%" y="190.50">args..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (13 samples, 3.70%)</title><rect x="80.6268%" y="196" width="3.7037%" height="15" fill="rgb(250,127,30)"/><text x="80.8768%" y="206.50">arra..</text></g><g><title>argsort (numpy/core/fromnumeric.py) (13 samples, 3.70%)</title><rect x="80.6268%" y="212" width="3.7037%" height="15" fill="rgb(230,49,44)"/><text x="80.8768%" y="222.50">args..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (13 samples, 3.70%)</title><rect x="80.6268%" y="228" width="3.7037%" height="15" fill="rgb(229,67,23)"/><text x="80.8768%" y="238.50">_wra..</text></g><g><title>array_argsort (methods.c) (13 samples, 3.70%)</title><rect x="80.6268%" y="244" width="3.7037%" height="15" fill="rgb(249,83,47)"/><text x="80.8768%" y="254.50">arra..</text></g><g><title>PyArray_ArgSort (item_selection.c) (13 samples, 3.70%)</title><rect x="80.6268%" y="260" width="3.7037%" height="15" fill="rgb(215,43,3)"/><text x="80.8768%" y="270.50">PyAr..</text></g><g><title>_new_argsortlike (item_selection.c) (13 samples, 3.70%)</title><rect x="80.6268%" y="276" width="3.7037%" height="15" fill="rgb(238,154,13)"/><text x="80.8768%" y="286.50">_new..</text></g><g><title>aquicksort_double (quicksort.c.src) (4 samples, 1.14%)</title><rect x="83.1909%" y="292" width="1.1396%" height="15" fill="rgb(219,56,2)"/><text x="83.4409%" y="302.50"></text></g><g><title>array_subscript (mapping.c) (7 samples, 1.99%)</title><rect x="85.7550%" y="180" width="1.9943%" height="15" fill="rgb(233,0,4)"/><text x="86.0050%" y="190.50">a..</text></g><g><title>all (&lt;__array_function__ internals&gt;) (7 samples, 1.99%)</title><rect x="89.4587%" y="244" width="1.9943%" height="15" fill="rgb(235,30,7)"/><text x="89.7087%" y="254.50">a..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 1.99%)</title><rect x="89.4587%" y="260" width="1.9943%" height="15" fill="rgb(250,79,13)"/><text x="89.7087%" y="270.50">a..</text></g><g><title>all (numpy/core/fromnumeric.py) (7 samples, 1.99%)</title><rect x="89.4587%" y="276" width="1.9943%" height="15" fill="rgb(211,146,34)"/><text x="89.7087%" y="286.50">a..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (6 samples, 1.71%)</title><rect x="89.7436%" y="292" width="1.7094%" height="15" fill="rgb(228,22,38)"/><text x="89.9936%" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (5 samples, 1.42%)</title><rect x="90.0285%" y="308" width="1.4245%" height="15" fill="rgb(235,168,5)"/><text x="90.2785%" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 1.14%)</title><rect x="90.3134%" y="324" width="1.1396%" height="15" fill="rgb(221,155,16)"/><text x="90.5634%" y="334.50"></text></g><g><title>isclose (&lt;__array_function__ internals&gt;) (21 samples, 5.98%)</title><rect x="89.1738%" y="196" width="5.9829%" height="15" fill="rgb(215,215,53)"/><text x="89.4238%" y="206.50">isclose ..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (21 samples, 5.98%)</title><rect x="89.1738%" y="212" width="5.9829%" height="15" fill="rgb(223,4,10)"/><text x="89.4238%" y="222.50">array_im..</text></g><g><title>isclose (numpy/core/numeric.py) (21 samples, 5.98%)</title><rect x="89.1738%" y="228" width="5.9829%" height="15" fill="rgb(234,103,6)"/><text x="89.4238%" y="238.50">isclose ..</text></g><g><title>within_tol (numpy/core/numeric.py) (10 samples, 2.85%)</title><rect x="92.3077%" y="244" width="2.8490%" height="15" fill="rgb(227,97,0)"/><text x="92.5577%" y="254.50">wi..</text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py) (130 samples, 37.04%)</title><rect x="59.5442%" y="164" width="37.0370%" height="15" fill="rgb(234,150,53)"/><text x="59.7942%" y="174.50">_get_median_predict (sklearn/ensemble/_weight_boosting.py)</text></g><g><title>stable_cumsum (sklearn/utils/extmath.py) (31 samples, 8.83%)</title><rect x="87.7493%" y="180" width="8.8319%" height="15" fill="rgb(228,201,54)"/><text x="87.9993%" y="190.50">stable_cumsu..</text></g><g><title>sum (&lt;__array_function__ internals&gt;) (5 samples, 1.42%)</title><rect x="95.1567%" y="196" width="1.4245%" height="15" fill="rgb(222,22,37)"/><text x="95.4067%" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 1.42%)</title><rect x="95.1567%" y="212" width="1.4245%" height="15" fill="rgb(237,53,32)"/><text x="95.4067%" y="222.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (5 samples, 1.42%)</title><rect x="95.1567%" y="228" width="1.4245%" height="15" fill="rgb(233,25,53)"/><text x="95.4067%" y="238.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (5 samples, 1.42%)</title><rect x="95.1567%" y="244" width="1.4245%" height="15" fill="rgb(210,40,34)"/><text x="95.4067%" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (5 samples, 1.42%)</title><rect x="95.1567%" y="260" width="1.4245%" height="15" fill="rgb(241,220,44)"/><text x="95.4067%" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 1.14%)</title><rect x="95.4416%" y="276" width="1.1396%" height="15" fill="rgb(235,28,35)"/><text x="95.6916%" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (4 samples, 1.14%)</title><rect x="95.4416%" y="292" width="1.1396%" height="15" fill="rgb(210,56,17)"/><text x="95.6916%" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (4 samples, 1.14%)</title><rect x="95.4416%" y="308" width="1.1396%" height="15" fill="rgb(224,130,29)"/><text x="95.6916%" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c) (4 samples, 1.14%)</title><rect x="95.4416%" y="324" width="1.1396%" height="15" fill="rgb(235,212,8)"/><text x="95.6916%" y="334.50"></text></g><g><title>_validate_data (sklearn/ensemble/_weight_boosting.py) (6 samples, 1.71%)</title><rect x="96.5812%" y="164" width="1.7094%" height="15" fill="rgb(223,33,50)"/><text x="96.8312%" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (5 samples, 1.42%)</title><rect x="96.8661%" y="180" width="1.4245%" height="15" fill="rgb(219,149,13)"/><text x="97.1161%" y="190.50"></text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (141 samples, 40.17%)</title><rect x="58.9744%" y="100" width="40.1709%" height="15" fill="rgb(250,156,29)"/><text x="59.2244%" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (140 samples, 39.89%)</title><rect x="59.2593%" y="116" width="39.8860%" height="15" fill="rgb(216,193,19)"/><text x="59.5093%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (140 samples, 39.89%)</title><rect x="59.2593%" y="132" width="39.8860%" height="15" fill="rgb(216,135,14)"/><text x="59.5093%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py) (140 samples, 39.89%)</title><rect x="59.2593%" y="148" width="39.8860%" height="15" fill="rgb(241,47,5)"/><text x="59.5093%" y="158.50">predict (sklearn/ensemble/_weight_boosting.py)</text></g><g><title>profile_skl (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (142 samples, 40.46%)</title><rect x="58.9744%" y="68" width="40.4558%" height="15" fill="rgb(233,42,35)"/><text x="59.2244%" y="78.50">profile_skl (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (142 samples, 40.46%)</title><rect x="58.9744%" y="84" width="40.4558%" height="15" fill="rgb(231,13,6)"/><text x="59.2244%" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5..</text></g><g><title>all (351 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(207,181,40)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (351 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(254,173,49)"/><text x="0.2500%" y="62.50">&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py)</text></g></svg></svg>