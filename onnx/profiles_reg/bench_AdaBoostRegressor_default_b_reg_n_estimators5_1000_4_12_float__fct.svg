<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2022" onload="init(evt)" viewBox="0 0 1200 2022" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="2022" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="2005.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="2005.00"> </text><g id="frames"><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(234,118,48)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(239,180,24)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(212,101,36)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="10" y="916" width="1" height="15" fill="rgb(214,29,40)"/><text x="13.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="10" y="932" width="1" height="15" fill="rgb(234,35,39)"/><text x="13.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="10" y="948" width="1" height="15" fill="rgb(212,63,0)"/><text x="13.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="10" y="964" width="1" height="15" fill="rgb(226,38,52)"/><text x="13.00" y="974.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="10" y="980" width="1" height="15" fill="rgb(244,226,47)"/><text x="13.00" y="990.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="10" y="996" width="1" height="15" fill="rgb(233,84,37)"/><text x="13.00" y="1006.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="10" y="1012" width="1" height="15" fill="rgb(233,11,39)"/><text x="13.00" y="1022.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.09%)</title><rect x="10" y="1028" width="1" height="15" fill="rgb(248,6,51)"/><text x="13.00" y="1038.50"></text></g><g><title>strerror (libc-2.29.so) (1 samples, 0.09%)</title><rect x="10" y="1044" width="1" height="15" fill="rgb(254,112,25)"/><text x="13.00" y="1054.50"></text></g><g><title>__strerror_r (libc-2.29.so) (1 samples, 0.09%)</title><rect x="10" y="1060" width="1" height="15" fill="rgb(233,18,39)"/><text x="13.00" y="1070.50"></text></g><g><title>0x7f1e7c64c564 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="10" y="1076" width="1" height="15" fill="rgb(229,98,36)"/><text x="13.00" y="1086.50"></text></g><g><title>_build_master (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="11" y="868" width="1" height="15" fill="rgb(244,78,6)"/><text x="14.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="11" y="884" width="1" height="15" fill="rgb(217,126,47)"/><text x="14.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="11" y="900" width="1" height="15" fill="rgb(219,18,21)"/><text x="14.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="11" y="916" width="1" height="15" fill="rgb(233,62,47)"/><text x="14.00" y="926.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (3 samples, 0.28%)</title><rect x="10" y="836" width="3" height="15" fill="rgb(237,159,51)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (3 samples, 0.28%)</title><rect x="10" y="852" width="3" height="15" fill="rgb(229,155,17)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="12" y="868" width="1" height="15" fill="rgb(245,214,41)"/><text x="15.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="12" y="884" width="1" height="15" fill="rgb(244,119,31)"/><text x="15.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (1 samples, 0.09%)</title><rect x="12" y="900" width="1" height="15" fill="rgb(239,72,16)"/><text x="15.00" y="910.50"></text></g><g><title>isdir (genericpath.py) (1 samples, 0.09%)</title><rect x="12" y="916" width="1" height="15" fill="rgb(205,225,50)"/><text x="15.00" y="926.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.09%)</title><rect x="12" y="932" width="1" height="15" fill="rgb(243,182,4)"/><text x="15.00" y="942.50"></text></g><g><title>__xstat (libc-2.29.so) (1 samples, 0.09%)</title><rect x="12" y="948" width="1" height="15" fill="rgb(231,121,9)"/><text x="15.00" y="958.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (4 samples, 0.38%)</title><rect x="10" y="292" width="4" height="15" fill="rgb(254,82,11)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="308" width="4" height="15" fill="rgb(211,220,43)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="324" width="4" height="15" fill="rgb(223,181,11)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="340" width="4" height="15" fill="rgb(215,189,39)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.38%)</title><rect x="10" y="356" width="4" height="15" fill="rgb(235,24,14)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="372" width="4" height="15" fill="rgb(234,30,36)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (4 samples, 0.38%)</title><rect x="10" y="388" width="4" height="15" fill="rgb(250,146,4)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="404" width="4" height="15" fill="rgb(224,188,47)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="420" width="4" height="15" fill="rgb(241,131,16)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="436" width="4" height="15" fill="rgb(205,165,13)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.38%)</title><rect x="10" y="452" width="4" height="15" fill="rgb(236,205,18)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="468" width="4" height="15" fill="rgb(233,156,1)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (4 samples, 0.38%)</title><rect x="10" y="484" width="4" height="15" fill="rgb(245,151,20)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="500" width="4" height="15" fill="rgb(213,44,36)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="516" width="4" height="15" fill="rgb(233,30,44)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="532" width="4" height="15" fill="rgb(217,100,17)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.38%)</title><rect x="10" y="548" width="4" height="15" fill="rgb(240,149,37)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="564" width="4" height="15" fill="rgb(245,134,19)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (4 samples, 0.38%)</title><rect x="10" y="580" width="4" height="15" fill="rgb(254,39,11)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="596" width="4" height="15" fill="rgb(225,202,21)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="612" width="4" height="15" fill="rgb(251,34,2)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="628" width="4" height="15" fill="rgb(233,93,39)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="644" width="4" height="15" fill="rgb(234,113,12)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="660" width="4" height="15" fill="rgb(253,26,33)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="676" width="4" height="15" fill="rgb(251,155,32)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.38%)</title><rect x="10" y="692" width="4" height="15" fill="rgb(225,35,36)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="708" width="4" height="15" fill="rgb(214,91,13)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (4 samples, 0.38%)</title><rect x="10" y="724" width="4" height="15" fill="rgb(250,62,1)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="740" width="4" height="15" fill="rgb(229,205,43)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="756" width="4" height="15" fill="rgb(228,76,14)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="772" width="4" height="15" fill="rgb(237,76,12)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.38%)</title><rect x="10" y="788" width="4" height="15" fill="rgb(212,80,9)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.38%)</title><rect x="10" y="804" width="4" height="15" fill="rgb(245,227,35)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (4 samples, 0.38%)</title><rect x="10" y="820" width="4" height="15" fill="rgb(228,57,13)"/><text x="13.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="836" width="1" height="15" fill="rgb(227,194,40)"/><text x="16.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="852" width="1" height="15" fill="rgb(243,101,41)"/><text x="16.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="868" width="1" height="15" fill="rgb(249,88,37)"/><text x="16.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="13" y="884" width="1" height="15" fill="rgb(235,56,12)"/><text x="16.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="900" width="1" height="15" fill="rgb(243,10,34)"/><text x="16.00" y="910.50"></text></g><g><title>&lt;module&gt; (pkg_resources/_vendor/packaging/requirements.py) (1 samples, 0.09%)</title><rect x="13" y="916" width="1" height="15" fill="rgb(245,182,45)"/><text x="16.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="932" width="1" height="15" fill="rgb(215,217,20)"/><text x="16.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="948" width="1" height="15" fill="rgb(245,89,16)"/><text x="16.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="964" width="1" height="15" fill="rgb(215,129,36)"/><text x="16.00" y="974.50"></text></g><g><title>_load_backward_compatible (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="980" width="1" height="15" fill="rgb(225,214,39)"/><text x="16.00" y="990.50"></text></g><g><title>load_module (pkg_resources/extern/__init__.py) (1 samples, 0.09%)</title><rect x="13" y="996" width="1" height="15" fill="rgb(223,62,32)"/><text x="16.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="1012" width="1" height="15" fill="rgb(206,93,17)"/><text x="16.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="1028" width="1" height="15" fill="rgb(252,29,50)"/><text x="16.00" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="1044" width="1" height="15" fill="rgb(229,4,14)"/><text x="16.00" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="13" y="1060" width="1" height="15" fill="rgb(246,8,38)"/><text x="16.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="13" y="1076" width="1" height="15" fill="rgb(215,137,4)"/><text x="16.00" y="1086.50"></text></g><g><title>&lt;module&gt; (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.09%)</title><rect x="13" y="1092" width="1" height="15" fill="rgb(234,18,47)"/><text x="16.00" y="1102.50"></text></g><g><title>pyparsing_common (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.09%)</title><rect x="13" y="1108" width="1" height="15" fill="rgb(246,98,47)"/><text x="16.00" y="1118.50"></text></g><g><title>__init__ (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.09%)</title><rect x="13" y="1124" width="1" height="15" fill="rgb(253,171,27)"/><text x="16.00" y="1134.50"></text></g><g><title>leaveWhitespace (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.09%)</title><rect x="13" y="1140" width="1" height="15" fill="rgb(228,141,39)"/><text x="16.00" y="1150.50"></text></g><g><title>leaveWhitespace (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.09%)</title><rect x="13" y="1156" width="1" height="15" fill="rgb(228,99,0)"/><text x="16.00" y="1166.50"></text></g><g><title>leaveWhitespace (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.09%)</title><rect x="13" y="1172" width="1" height="15" fill="rgb(239,22,44)"/><text x="16.00" y="1182.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.09%)</title><rect x="13" y="1188" width="1" height="15" fill="rgb(248,167,10)"/><text x="16.00" y="1198.50"></text></g><g><title>copy (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.09%)</title><rect x="13" y="1204" width="1" height="15" fill="rgb(240,32,20)"/><text x="16.00" y="1214.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.09%)</title><rect x="13" y="1220" width="1" height="15" fill="rgb(247,72,47)"/><text x="16.00" y="1230.50"></text></g><g><title>copy (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.09%)</title><rect x="13" y="1236" width="1" height="15" fill="rgb(219,83,1)"/><text x="16.00" y="1246.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.09%)</title><rect x="13" y="1252" width="1" height="15" fill="rgb(206,204,19)"/><text x="16.00" y="1262.50"></text></g><g><title>&lt;module&gt; (scipy/sparse/__init__.py) (1 samples, 0.09%)</title><rect x="14" y="580" width="1" height="15" fill="rgb(239,25,46)"/><text x="17.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="14" y="596" width="1" height="15" fill="rgb(250,95,18)"/><text x="17.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="14" y="612" width="1" height="15" fill="rgb(245,64,39)"/><text x="17.00" y="622.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="14" y="628" width="1" height="15" fill="rgb(224,143,30)"/><text x="17.00" y="638.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="14" y="644" width="1" height="15" fill="rgb(211,31,20)"/><text x="17.00" y="654.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="14" y="660" width="1" height="15" fill="rgb(226,146,20)"/><text x="17.00" y="670.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="14" y="676" width="1" height="15" fill="rgb(212,34,44)"/><text x="17.00" y="686.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="14" y="692" width="1" height="15" fill="rgb(210,13,10)"/><text x="17.00" y="702.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="14" y="708" width="1" height="15" fill="rgb(240,7,48)"/><text x="17.00" y="718.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="14" y="724" width="1" height="15" fill="rgb(247,191,9)"/><text x="17.00" y="734.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.09%)</title><rect x="14" y="740" width="1" height="15" fill="rgb(223,12,4)"/><text x="17.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.56%)</title><rect x="10" y="196" width="6" height="15" fill="rgb(220,215,54)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.56%)</title><rect x="10" y="212" width="6" height="15" fill="rgb(241,111,28)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.56%)</title><rect x="10" y="228" width="6" height="15" fill="rgb(251,48,37)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.56%)</title><rect x="10" y="244" width="6" height="15" fill="rgb(234,17,50)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.56%)</title><rect x="10" y="260" width="6" height="15" fill="rgb(227,80,5)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.56%)</title><rect x="10" y="276" width="6" height="15" fill="rgb(246,156,40)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (2 samples, 0.19%)</title><rect x="14" y="292" width="2" height="15" fill="rgb(243,138,1)"/><text x="17.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="308" width="2" height="15" fill="rgb(239,135,12)"/><text x="17.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="324" width="2" height="15" fill="rgb(224,12,54)"/><text x="17.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="340" width="2" height="15" fill="rgb(222,128,23)"/><text x="17.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="14" y="356" width="2" height="15" fill="rgb(235,84,32)"/><text x="17.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="372" width="2" height="15" fill="rgb(230,203,17)"/><text x="17.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (2 samples, 0.19%)</title><rect x="14" y="388" width="2" height="15" fill="rgb(211,18,24)"/><text x="17.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="404" width="2" height="15" fill="rgb(226,34,31)"/><text x="17.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="420" width="2" height="15" fill="rgb(241,41,54)"/><text x="17.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="436" width="2" height="15" fill="rgb(220,152,53)"/><text x="17.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="14" y="452" width="2" height="15" fill="rgb(252,205,52)"/><text x="17.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="468" width="2" height="15" fill="rgb(237,221,16)"/><text x="17.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (2 samples, 0.19%)</title><rect x="14" y="484" width="2" height="15" fill="rgb(248,68,13)"/><text x="17.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="500" width="2" height="15" fill="rgb(245,119,32)"/><text x="17.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="516" width="2" height="15" fill="rgb(221,157,48)"/><text x="17.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="532" width="2" height="15" fill="rgb(233,81,28)"/><text x="17.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="14" y="548" width="2" height="15" fill="rgb(242,187,34)"/><text x="17.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="14" y="564" width="2" height="15" fill="rgb(251,202,12)"/><text x="17.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (1 samples, 0.09%)</title><rect x="15" y="580" width="1" height="15" fill="rgb(225,116,14)"/><text x="18.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="596" width="1" height="15" fill="rgb(225,44,39)"/><text x="18.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="612" width="1" height="15" fill="rgb(250,19,7)"/><text x="18.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="628" width="1" height="15" fill="rgb(246,114,51)"/><text x="18.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="15" y="644" width="1" height="15" fill="rgb(224,71,44)"/><text x="18.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="660" width="1" height="15" fill="rgb(254,17,42)"/><text x="18.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (1 samples, 0.09%)</title><rect x="15" y="676" width="1" height="15" fill="rgb(220,8,18)"/><text x="18.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="692" width="1" height="15" fill="rgb(242,56,2)"/><text x="18.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="708" width="1" height="15" fill="rgb(221,11,11)"/><text x="18.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="724" width="1" height="15" fill="rgb(247,68,0)"/><text x="18.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="15" y="740" width="1" height="15" fill="rgb(222,227,13)"/><text x="18.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="756" width="1" height="15" fill="rgb(248,76,51)"/><text x="18.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (1 samples, 0.09%)</title><rect x="15" y="772" width="1" height="15" fill="rgb(238,228,37)"/><text x="18.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="788" width="1" height="15" fill="rgb(247,23,44)"/><text x="18.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="804" width="1" height="15" fill="rgb(222,191,20)"/><text x="18.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="820" width="1" height="15" fill="rgb(207,126,48)"/><text x="18.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="836" width="1" height="15" fill="rgb(237,185,24)"/><text x="18.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="852" width="1" height="15" fill="rgb(209,136,1)"/><text x="18.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="15" y="868" width="1" height="15" fill="rgb(226,193,5)"/><text x="18.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="884" width="1" height="15" fill="rgb(240,59,41)"/><text x="18.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (1 samples, 0.09%)</title><rect x="15" y="900" width="1" height="15" fill="rgb(208,32,18)"/><text x="18.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="916" width="1" height="15" fill="rgb(246,17,23)"/><text x="18.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="932" width="1" height="15" fill="rgb(244,51,35)"/><text x="18.00" y="942.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="948" width="1" height="15" fill="rgb(205,147,28)"/><text x="18.00" y="958.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="15" y="964" width="1" height="15" fill="rgb(223,53,37)"/><text x="18.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="980" width="1" height="15" fill="rgb(213,169,30)"/><text x="18.00" y="990.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_distn_infrastructure.py) (1 samples, 0.09%)</title><rect x="15" y="996" width="1" height="15" fill="rgb(254,87,20)"/><text x="18.00" y="1006.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1012" width="1" height="15" fill="rgb(242,226,23)"/><text x="18.00" y="1022.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1028" width="1" height="15" fill="rgb(236,11,17)"/><text x="18.00" y="1038.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1044" width="1" height="15" fill="rgb(253,229,49)"/><text x="18.00" y="1054.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1060" width="1" height="15" fill="rgb(244,194,44)"/><text x="18.00" y="1070.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1076" width="1" height="15" fill="rgb(209,93,40)"/><text x="18.00" y="1086.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="15" y="1092" width="1" height="15" fill="rgb(251,175,19)"/><text x="18.00" y="1102.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1108" width="1" height="15" fill="rgb(232,37,54)"/><text x="18.00" y="1118.50"></text></g><g><title>&lt;module&gt; (scipy/optimize/__init__.py) (1 samples, 0.09%)</title><rect x="15" y="1124" width="1" height="15" fill="rgb(214,43,16)"/><text x="18.00" y="1134.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1140" width="1" height="15" fill="rgb(232,57,1)"/><text x="18.00" y="1150.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1156" width="1" height="15" fill="rgb(246,167,31)"/><text x="18.00" y="1166.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1172" width="1" height="15" fill="rgb(215,22,53)"/><text x="18.00" y="1182.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="15" y="1188" width="1" height="15" fill="rgb(221,132,41)"/><text x="18.00" y="1198.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1204" width="1" height="15" fill="rgb(243,215,43)"/><text x="18.00" y="1214.50"></text></g><g><title>&lt;module&gt; (scipy/optimize/_root.py) (1 samples, 0.09%)</title><rect x="15" y="1220" width="1" height="15" fill="rgb(244,174,18)"/><text x="18.00" y="1230.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1236" width="1" height="15" fill="rgb(242,155,20)"/><text x="18.00" y="1246.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1252" width="1" height="15" fill="rgb(213,149,4)"/><text x="18.00" y="1262.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1268" width="1" height="15" fill="rgb(216,39,14)"/><text x="18.00" y="1278.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1284" width="1" height="15" fill="rgb(240,116,52)"/><text x="18.00" y="1294.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1300" width="1" height="15" fill="rgb(234,228,46)"/><text x="18.00" y="1310.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="15" y="1316" width="1" height="15" fill="rgb(234,53,22)"/><text x="18.00" y="1326.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="15" y="1332" width="1" height="15" fill="rgb(227,16,27)"/><text x="18.00" y="1342.50"></text></g><g><title>&lt;module&gt; (scipy/optimize/nonlin.py) (1 samples, 0.09%)</title><rect x="15" y="1348" width="1" height="15" fill="rgb(245,42,34)"/><text x="18.00" y="1358.50"></text></g><g><title>_nonlin_wrapper (scipy/optimize/nonlin.py) (1 samples, 0.09%)</title><rect x="15" y="1364" width="1" height="15" fill="rgb(225,28,35)"/><text x="18.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="16" y="1476" width="1" height="15" fill="rgb(248,150,49)"/><text x="19.00" y="1486.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="16" y="1492" width="1" height="15" fill="rgb(237,22,27)"/><text x="19.00" y="1502.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="16" y="1508" width="1" height="15" fill="rgb(234,63,28)"/><text x="19.00" y="1518.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="16" y="1524" width="1" height="15" fill="rgb(244,193,6)"/><text x="19.00" y="1534.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="16" y="1540" width="1" height="15" fill="rgb(206,171,53)"/><text x="19.00" y="1550.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/automation.py) (1 samples, 0.09%)</title><rect x="16" y="1556" width="1" height="15" fill="rgb(234,21,1)"/><text x="19.00" y="1566.50"></text></g><g><title>_get_doc_template (skl2onnx/algebra/automation.py) (1 samples, 0.09%)</title><rect x="16" y="1572" width="1" height="15" fill="rgb(218,27,18)"/><text x="19.00" y="1582.50"></text></g><g><title>__new__ (jinja2/environment.py) (1 samples, 0.09%)</title><rect x="16" y="1588" width="1" height="15" fill="rgb(229,94,13)"/><text x="19.00" y="1598.50"></text></g><g><title>from_string (jinja2/environment.py) (1 samples, 0.09%)</title><rect x="16" y="1604" width="1" height="15" fill="rgb(253,184,20)"/><text x="19.00" y="1614.50"></text></g><g><title>compile (jinja2/environment.py) (1 samples, 0.09%)</title><rect x="16" y="1620" width="1" height="15" fill="rgb(223,75,23)"/><text x="19.00" y="1630.50"></text></g><g><title>_generate (jinja2/environment.py) (1 samples, 0.09%)</title><rect x="16" y="1636" width="1" height="15" fill="rgb(217,188,3)"/><text x="19.00" y="1646.50"></text></g><g><title>generate (jinja2/compiler.py) (1 samples, 0.09%)</title><rect x="16" y="1652" width="1" height="15" fill="rgb(216,195,36)"/><text x="19.00" y="1662.50"></text></g><g><title>visit (jinja2/visitor.py) (1 samples, 0.09%)</title><rect x="16" y="1668" width="1" height="15" fill="rgb(226,199,1)"/><text x="19.00" y="1678.50"></text></g><g><title>visit_Template (jinja2/compiler.py) (1 samples, 0.09%)</title><rect x="16" y="1684" width="1" height="15" fill="rgb(235,184,3)"/><text x="19.00" y="1694.50"></text></g><g><title>pull_dependencies (jinja2/compiler.py) (1 samples, 0.09%)</title><rect x="16" y="1700" width="1" height="15" fill="rgb(235,164,20)"/><text x="19.00" y="1710.50"></text></g><g><title>visit (jinja2/visitor.py) (1 samples, 0.09%)</title><rect x="16" y="1716" width="1" height="15" fill="rgb(219,47,47)"/><text x="19.00" y="1726.50"></text></g><g><title>generic_visit (jinja2/visitor.py) (1 samples, 0.09%)</title><rect x="16" y="1732" width="1" height="15" fill="rgb(205,69,40)"/><text x="19.00" y="1742.50"></text></g><g><title>visit (jinja2/visitor.py) (1 samples, 0.09%)</title><rect x="16" y="1748" width="1" height="15" fill="rgb(247,184,40)"/><text x="19.00" y="1758.50"></text></g><g><title>generic_visit (jinja2/visitor.py) (1 samples, 0.09%)</title><rect x="16" y="1764" width="1" height="15" fill="rgb(241,125,44)"/><text x="19.00" y="1774.50"></text></g><g><title>visit (jinja2/visitor.py) (1 samples, 0.09%)</title><rect x="16" y="1780" width="1" height="15" fill="rgb(224,185,37)"/><text x="19.00" y="1790.50"></text></g><g><title>generic_visit (jinja2/visitor.py) (1 samples, 0.09%)</title><rect x="16" y="1796" width="1" height="15" fill="rgb(241,205,40)"/><text x="19.00" y="1806.50"></text></g><g><title>visit (jinja2/visitor.py) (1 samples, 0.09%)</title><rect x="16" y="1812" width="1" height="15" fill="rgb(223,59,14)"/><text x="19.00" y="1822.50"></text></g><g><title>generic_visit (jinja2/visitor.py) (1 samples, 0.09%)</title><rect x="16" y="1828" width="1" height="15" fill="rgb(212,114,41)"/><text x="19.00" y="1838.50"></text></g><g><title>visit (jinja2/visitor.py) (1 samples, 0.09%)</title><rect x="16" y="1844" width="1" height="15" fill="rgb(245,87,50)"/><text x="19.00" y="1854.50"></text></g><g><title>generic_visit (jinja2/visitor.py) (1 samples, 0.09%)</title><rect x="16" y="1860" width="1" height="15" fill="rgb(254,67,5)"/><text x="19.00" y="1870.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="484" width="2" height="15" fill="rgb(215,5,4)"/><text x="19.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="500" width="2" height="15" fill="rgb(210,80,16)"/><text x="19.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="516" width="2" height="15" fill="rgb(221,161,24)"/><text x="19.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="532" width="2" height="15" fill="rgb(222,218,7)"/><text x="19.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="16" y="548" width="2" height="15" fill="rgb(250,106,1)"/><text x="19.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="564" width="2" height="15" fill="rgb(243,147,10)"/><text x="19.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (2 samples, 0.19%)</title><rect x="16" y="580" width="2" height="15" fill="rgb(251,217,42)"/><text x="19.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="596" width="2" height="15" fill="rgb(242,189,50)"/><text x="19.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="612" width="2" height="15" fill="rgb(230,55,14)"/><text x="19.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="628" width="2" height="15" fill="rgb(222,174,32)"/><text x="19.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="16" y="644" width="2" height="15" fill="rgb(211,185,22)"/><text x="19.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="660" width="2" height="15" fill="rgb(216,67,45)"/><text x="19.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (2 samples, 0.19%)</title><rect x="16" y="676" width="2" height="15" fill="rgb(253,92,49)"/><text x="19.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="692" width="2" height="15" fill="rgb(229,193,4)"/><text x="19.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="708" width="2" height="15" fill="rgb(210,45,7)"/><text x="19.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="724" width="2" height="15" fill="rgb(216,73,16)"/><text x="19.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="16" y="740" width="2" height="15" fill="rgb(206,148,31)"/><text x="19.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="756" width="2" height="15" fill="rgb(233,156,15)"/><text x="19.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (2 samples, 0.19%)</title><rect x="16" y="772" width="2" height="15" fill="rgb(211,95,6)"/><text x="19.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="788" width="2" height="15" fill="rgb(218,153,42)"/><text x="19.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="804" width="2" height="15" fill="rgb(207,13,19)"/><text x="19.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="820" width="2" height="15" fill="rgb(226,145,29)"/><text x="19.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="16" y="836" width="2" height="15" fill="rgb(238,202,18)"/><text x="19.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="852" width="2" height="15" fill="rgb(215,50,13)"/><text x="19.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (2 samples, 0.19%)</title><rect x="16" y="868" width="2" height="15" fill="rgb(222,55,46)"/><text x="19.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="884" width="2" height="15" fill="rgb(242,215,13)"/><text x="19.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="900" width="2" height="15" fill="rgb(225,110,25)"/><text x="19.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="916" width="2" height="15" fill="rgb(238,76,34)"/><text x="19.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="932" width="2" height="15" fill="rgb(231,145,1)"/><text x="19.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="948" width="2" height="15" fill="rgb(228,28,14)"/><text x="19.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="964" width="2" height="15" fill="rgb(235,53,28)"/><text x="19.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="16" y="980" width="2" height="15" fill="rgb(254,204,14)"/><text x="19.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="996" width="2" height="15" fill="rgb(213,202,11)"/><text x="19.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (2 samples, 0.19%)</title><rect x="16" y="1012" width="2" height="15" fill="rgb(208,80,9)"/><text x="19.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1028" width="2" height="15" fill="rgb(211,67,52)"/><text x="19.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1044" width="2" height="15" fill="rgb(209,187,27)"/><text x="19.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1060" width="2" height="15" fill="rgb(224,222,13)"/><text x="19.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="16" y="1076" width="2" height="15" fill="rgb(244,187,41)"/><text x="19.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1092" width="2" height="15" fill="rgb(237,8,44)"/><text x="19.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (2 samples, 0.19%)</title><rect x="16" y="1108" width="2" height="15" fill="rgb(218,24,40)"/><text x="19.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1124" width="2" height="15" fill="rgb(206,203,33)"/><text x="19.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1140" width="2" height="15" fill="rgb(218,37,45)"/><text x="19.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1156" width="2" height="15" fill="rgb(249,74,35)"/><text x="19.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1172" width="2" height="15" fill="rgb(253,50,18)"/><text x="19.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1188" width="2" height="15" fill="rgb(205,145,35)"/><text x="19.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="16" y="1204" width="2" height="15" fill="rgb(254,198,11)"/><text x="19.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1220" width="2" height="15" fill="rgb(243,106,18)"/><text x="19.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (2 samples, 0.19%)</title><rect x="16" y="1236" width="2" height="15" fill="rgb(241,6,29)"/><text x="19.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1252" width="2" height="15" fill="rgb(218,185,19)"/><text x="19.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1268" width="2" height="15" fill="rgb(240,109,2)"/><text x="19.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1284" width="2" height="15" fill="rgb(229,5,42)"/><text x="19.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1300" width="2" height="15" fill="rgb(225,130,51)"/><text x="19.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1316" width="2" height="15" fill="rgb(250,108,29)"/><text x="19.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="16" y="1332" width="2" height="15" fill="rgb(209,86,38)"/><text x="19.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1348" width="2" height="15" fill="rgb(216,140,9)"/><text x="19.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (2 samples, 0.19%)</title><rect x="16" y="1364" width="2" height="15" fill="rgb(251,150,7)"/><text x="19.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1380" width="2" height="15" fill="rgb(216,80,45)"/><text x="19.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1396" width="2" height="15" fill="rgb(241,224,25)"/><text x="19.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1412" width="2" height="15" fill="rgb(226,91,50)"/><text x="19.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="16" y="1428" width="2" height="15" fill="rgb(250,87,24)"/><text x="19.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="16" y="1444" width="2" height="15" fill="rgb(246,118,46)"/><text x="19.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (2 samples, 0.19%)</title><rect x="16" y="1460" width="2" height="15" fill="rgb(211,115,27)"/><text x="19.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.09%)</title><rect x="17" y="1476" width="1" height="15" fill="rgb(222,42,42)"/><text x="20.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.09%)</title><rect x="17" y="1492" width="1" height="15" fill="rgb(240,145,6)"/><text x="20.00" y="1502.50"></text></g><g><title>ClassFactory (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.09%)</title><rect x="17" y="1508" width="1" height="15" fill="rgb(250,57,22)"/><text x="20.00" y="1518.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="17" y="1524" width="1" height="15" fill="rgb(232,194,24)"/><text x="20.00" y="1534.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/base.py) (1 samples, 0.09%)</title><rect x="18" y="964" width="1" height="15" fill="rgb(217,31,26)"/><text x="21.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="772" width="3" height="15" fill="rgb(222,122,40)"/><text x="21.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="788" width="3" height="15" fill="rgb(219,0,3)"/><text x="21.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="804" width="3" height="15" fill="rgb(225,57,17)"/><text x="21.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="820" width="3" height="15" fill="rgb(226,131,40)"/><text x="21.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="18" y="836" width="3" height="15" fill="rgb(226,168,1)"/><text x="21.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="852" width="3" height="15" fill="rgb(216,31,35)"/><text x="21.00" y="862.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/__init__.py) (2 samples, 0.19%)</title><rect x="18" y="868" width="3" height="15" fill="rgb(223,63,38)"/><text x="21.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="884" width="3" height="15" fill="rgb(235,116,15)"/><text x="21.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="900" width="3" height="15" fill="rgb(227,33,15)"/><text x="21.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="916" width="3" height="15" fill="rgb(243,194,32)"/><text x="21.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="18" y="932" width="3" height="15" fill="rgb(246,77,25)"/><text x="21.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="18" y="948" width="3" height="15" fill="rgb(245,153,31)"/><text x="21.00" y="958.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/interval.py) (1 samples, 0.09%)</title><rect x="19" y="964" width="2" height="15" fill="rgb(219,99,30)"/><text x="22.00" y="974.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="980" width="2" height="15" fill="rgb(230,123,46)"/><text x="22.00" y="990.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="996" width="2" height="15" fill="rgb(208,7,21)"/><text x="22.00" y="1006.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1012" width="2" height="15" fill="rgb(250,175,35)"/><text x="22.00" y="1022.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="19" y="1028" width="2" height="15" fill="rgb(210,163,40)"/><text x="22.00" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1044" width="2" height="15" fill="rgb(209,48,10)"/><text x="22.00" y="1054.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/base.py) (1 samples, 0.09%)</title><rect x="19" y="1060" width="2" height="15" fill="rgb(223,56,49)"/><text x="22.00" y="1070.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1076" width="2" height="15" fill="rgb(226,71,33)"/><text x="22.00" y="1086.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1092" width="2" height="15" fill="rgb(235,134,34)"/><text x="22.00" y="1102.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1108" width="2" height="15" fill="rgb(213,7,45)"/><text x="22.00" y="1118.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="19" y="1124" width="2" height="15" fill="rgb(253,223,3)"/><text x="22.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="19" y="1140" width="2" height="15" fill="rgb(229,157,37)"/><text x="22.00" y="1150.50"></text></g><g><title>&lt;module&gt; (pandas/core/strings.py) (1 samples, 0.09%)</title><rect x="19" y="1156" width="2" height="15" fill="rgb(210,204,4)"/><text x="22.00" y="1166.50"></text></g><g><title>StringMethods (pandas/core/strings.py) (1 samples, 0.09%)</title><rect x="19" y="1172" width="2" height="15" fill="rgb(212,96,25)"/><text x="22.00" y="1182.50"></text></g><g><title>_forbid_nonstring_types (pandas/core/strings.py) (1 samples, 0.09%)</title><rect x="19" y="1188" width="2" height="15" fill="rgb(227,150,10)"/><text x="22.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/core/generic.py) (2 samples, 0.19%)</title><rect x="21" y="1108" width="2" height="15" fill="rgb(213,94,7)"/><text x="24.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1124" width="2" height="15" fill="rgb(234,225,35)"/><text x="24.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1140" width="2" height="15" fill="rgb(219,50,15)"/><text x="24.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1156" width="2" height="15" fill="rgb(231,34,21)"/><text x="24.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="21" y="1172" width="2" height="15" fill="rgb(215,64,20)"/><text x="24.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1188" width="2" height="15" fill="rgb(241,1,35)"/><text x="24.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/core/index.py) (2 samples, 0.19%)</title><rect x="21" y="1204" width="2" height="15" fill="rgb(215,35,31)"/><text x="24.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1220" width="2" height="15" fill="rgb(229,89,53)"/><text x="24.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1236" width="2" height="15" fill="rgb(243,170,54)"/><text x="24.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1252" width="2" height="15" fill="rgb(207,149,48)"/><text x="24.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="21" y="1268" width="2" height="15" fill="rgb(252,3,52)"/><text x="24.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1284" width="2" height="15" fill="rgb(239,224,50)"/><text x="24.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/api.py) (2 samples, 0.19%)</title><rect x="21" y="1300" width="2" height="15" fill="rgb(230,75,39)"/><text x="24.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1316" width="2" height="15" fill="rgb(240,11,17)"/><text x="24.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1332" width="2" height="15" fill="rgb(206,178,40)"/><text x="24.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1348" width="2" height="15" fill="rgb(217,225,49)"/><text x="24.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="21" y="1364" width="2" height="15" fill="rgb(248,36,44)"/><text x="24.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1380" width="2" height="15" fill="rgb(243,93,8)"/><text x="24.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/interval.py) (2 samples, 0.19%)</title><rect x="21" y="1396" width="2" height="15" fill="rgb(252,102,15)"/><text x="24.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1412" width="2" height="15" fill="rgb(207,19,22)"/><text x="24.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1428" width="2" height="15" fill="rgb(244,117,45)"/><text x="24.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1444" width="2" height="15" fill="rgb(205,192,48)"/><text x="24.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.19%)</title><rect x="21" y="1460" width="2" height="15" fill="rgb(253,174,32)"/><text x="24.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.19%)</title><rect x="21" y="1476" width="2" height="15" fill="rgb(245,61,27)"/><text x="24.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/multi.py) (2 samples, 0.19%)</title><rect x="21" y="1492" width="2" height="15" fill="rgb(243,28,8)"/><text x="24.00" y="1502.50"></text></g><g><title>_add_numeric_methods_disabled (pandas/core/indexes/base.py) (2 samples, 0.19%)</title><rect x="21" y="1508" width="2" height="15" fill="rgb(221,129,44)"/><text x="24.00" y="1518.50"></text></g><g><title>make_invalid_op (pandas/core/ops/__init__.py) (2 samples, 0.19%)</title><rect x="21" y="1524" width="2" height="15" fill="rgb(223,151,48)"/><text x="24.00" y="1534.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (7 samples, 0.66%)</title><rect x="16" y="244" width="8" height="15" fill="rgb(215,227,46)"/><text x="19.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.66%)</title><rect x="16" y="260" width="8" height="15" fill="rgb(211,81,31)"/><text x="19.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.66%)</title><rect x="16" y="276" width="8" height="15" fill="rgb(221,189,15)"/><text x="19.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.66%)</title><rect x="16" y="292" width="8" height="15" fill="rgb(234,64,3)"/><text x="19.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.66%)</title><rect x="16" y="308" width="8" height="15" fill="rgb(231,101,14)"/><text x="19.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.66%)</title><rect x="16" y="324" width="8" height="15" fill="rgb(234,107,39)"/><text x="19.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (7 samples, 0.66%)</title><rect x="16" y="340" width="8" height="15" fill="rgb(242,31,28)"/><text x="19.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.66%)</title><rect x="16" y="356" width="8" height="15" fill="rgb(207,94,16)"/><text x="19.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.66%)</title><rect x="16" y="372" width="8" height="15" fill="rgb(211,70,5)"/><text x="19.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.66%)</title><rect x="16" y="388" width="8" height="15" fill="rgb(240,114,14)"/><text x="19.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.66%)</title><rect x="16" y="404" width="8" height="15" fill="rgb(233,219,0)"/><text x="19.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.66%)</title><rect x="16" y="420" width="8" height="15" fill="rgb(209,138,20)"/><text x="19.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (7 samples, 0.66%)</title><rect x="16" y="436" width="8" height="15" fill="rgb(209,178,7)"/><text x="19.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.66%)</title><rect x="16" y="452" width="8" height="15" fill="rgb(224,159,16)"/><text x="19.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.66%)</title><rect x="16" y="468" width="8" height="15" fill="rgb(228,184,51)"/><text x="19.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="484" width="6" height="15" fill="rgb(231,170,47)"/><text x="21.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.47%)</title><rect x="18" y="500" width="6" height="15" fill="rgb(210,225,14)"/><text x="21.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="516" width="6" height="15" fill="rgb(210,113,29)"/><text x="21.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (5 samples, 0.47%)</title><rect x="18" y="532" width="6" height="15" fill="rgb(218,69,49)"/><text x="21.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="548" width="6" height="15" fill="rgb(205,39,50)"/><text x="21.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="564" width="6" height="15" fill="rgb(247,147,12)"/><text x="21.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="580" width="6" height="15" fill="rgb(234,191,9)"/><text x="21.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.47%)</title><rect x="18" y="596" width="6" height="15" fill="rgb(210,67,24)"/><text x="21.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="612" width="6" height="15" fill="rgb(212,87,17)"/><text x="21.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (5 samples, 0.47%)</title><rect x="18" y="628" width="6" height="15" fill="rgb(224,179,7)"/><text x="21.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="644" width="6" height="15" fill="rgb(233,176,52)"/><text x="21.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="660" width="6" height="15" fill="rgb(218,130,44)"/><text x="21.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="676" width="6" height="15" fill="rgb(211,218,25)"/><text x="21.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.47%)</title><rect x="18" y="692" width="6" height="15" fill="rgb(214,166,18)"/><text x="21.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="708" width="6" height="15" fill="rgb(207,117,22)"/><text x="21.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (5 samples, 0.47%)</title><rect x="18" y="724" width="6" height="15" fill="rgb(208,92,33)"/><text x="21.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="740" width="6" height="15" fill="rgb(246,207,10)"/><text x="21.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.47%)</title><rect x="18" y="756" width="6" height="15" fill="rgb(244,175,2)"/><text x="21.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="772" width="3" height="15" fill="rgb(221,196,5)"/><text x="24.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.28%)</title><rect x="21" y="788" width="3" height="15" fill="rgb(230,113,32)"/><text x="24.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="804" width="3" height="15" fill="rgb(235,226,8)"/><text x="24.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (3 samples, 0.28%)</title><rect x="21" y="820" width="3" height="15" fill="rgb(234,104,15)"/><text x="24.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="836" width="3" height="15" fill="rgb(239,98,53)"/><text x="24.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="852" width="3" height="15" fill="rgb(219,179,53)"/><text x="24.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="868" width="3" height="15" fill="rgb(205,17,49)"/><text x="24.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.28%)</title><rect x="21" y="884" width="3" height="15" fill="rgb(216,96,42)"/><text x="24.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="900" width="3" height="15" fill="rgb(220,40,6)"/><text x="24.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (3 samples, 0.28%)</title><rect x="21" y="916" width="3" height="15" fill="rgb(242,1,29)"/><text x="24.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="932" width="3" height="15" fill="rgb(219,206,35)"/><text x="24.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="948" width="3" height="15" fill="rgb(220,179,3)"/><text x="24.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="964" width="3" height="15" fill="rgb(222,89,24)"/><text x="24.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.28%)</title><rect x="21" y="980" width="3" height="15" fill="rgb(219,64,41)"/><text x="24.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="996" width="3" height="15" fill="rgb(240,77,39)"/><text x="24.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (3 samples, 0.28%)</title><rect x="21" y="1012" width="3" height="15" fill="rgb(234,145,14)"/><text x="24.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="1028" width="3" height="15" fill="rgb(230,153,46)"/><text x="24.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="1044" width="3" height="15" fill="rgb(253,207,14)"/><text x="24.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="1060" width="3" height="15" fill="rgb(219,54,32)"/><text x="24.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.28%)</title><rect x="21" y="1076" width="3" height="15" fill="rgb(231,186,23)"/><text x="24.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.28%)</title><rect x="21" y="1092" width="3" height="15" fill="rgb(221,89,44)"/><text x="24.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (1 samples, 0.09%)</title><rect x="23" y="1108" width="1" height="15" fill="rgb(247,219,35)"/><text x="26.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1124" width="1" height="15" fill="rgb(242,206,3)"/><text x="26.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1140" width="1" height="15" fill="rgb(230,170,8)"/><text x="26.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1156" width="1" height="15" fill="rgb(214,63,7)"/><text x="26.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="23" y="1172" width="1" height="15" fill="rgb(224,30,44)"/><text x="26.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1188" width="1" height="15" fill="rgb(244,189,38)"/><text x="26.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (1 samples, 0.09%)</title><rect x="23" y="1204" width="1" height="15" fill="rgb(245,217,11)"/><text x="26.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1220" width="1" height="15" fill="rgb(205,24,45)"/><text x="26.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1236" width="1" height="15" fill="rgb(218,61,45)"/><text x="26.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1252" width="1" height="15" fill="rgb(241,46,52)"/><text x="26.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="23" y="1268" width="1" height="15" fill="rgb(227,183,41)"/><text x="26.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1284" width="1" height="15" fill="rgb(249,19,0)"/><text x="26.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (1 samples, 0.09%)</title><rect x="23" y="1300" width="1" height="15" fill="rgb(223,126,14)"/><text x="26.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1316" width="1" height="15" fill="rgb(229,170,45)"/><text x="26.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1332" width="1" height="15" fill="rgb(251,167,41)"/><text x="26.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1348" width="1" height="15" fill="rgb(234,31,52)"/><text x="26.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="23" y="1364" width="1" height="15" fill="rgb(213,8,39)"/><text x="26.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1380" width="1" height="15" fill="rgb(242,134,53)"/><text x="26.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (1 samples, 0.09%)</title><rect x="23" y="1396" width="1" height="15" fill="rgb(229,93,15)"/><text x="26.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1412" width="1" height="15" fill="rgb(214,168,18)"/><text x="26.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1428" width="1" height="15" fill="rgb(218,40,46)"/><text x="26.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1444" width="1" height="15" fill="rgb(236,56,1)"/><text x="26.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="23" y="1460" width="1" height="15" fill="rgb(205,168,40)"/><text x="26.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1476" width="1" height="15" fill="rgb(250,75,14)"/><text x="26.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (1 samples, 0.09%)</title><rect x="23" y="1492" width="1" height="15" fill="rgb(233,161,15)"/><text x="26.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1508" width="1" height="15" fill="rgb(216,188,31)"/><text x="26.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1524" width="1" height="15" fill="rgb(227,74,29)"/><text x="26.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1540" width="1" height="15" fill="rgb(254,56,29)"/><text x="26.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="23" y="1556" width="1" height="15" fill="rgb(245,146,30)"/><text x="26.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1572" width="1" height="15" fill="rgb(209,80,32)"/><text x="26.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py) (1 samples, 0.09%)</title><rect x="23" y="1588" width="1" height="15" fill="rgb(246,188,13)"/><text x="26.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1604" width="1" height="15" fill="rgb(247,123,14)"/><text x="26.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1620" width="1" height="15" fill="rgb(250,11,50)"/><text x="26.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1636" width="1" height="15" fill="rgb(245,131,6)"/><text x="26.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="23" y="1652" width="1" height="15" fill="rgb(253,125,44)"/><text x="26.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1668" width="1" height="15" fill="rgb(221,205,3)"/><text x="26.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/tools.py) (1 samples, 0.09%)</title><rect x="23" y="1684" width="1" height="15" fill="rgb(228,38,49)"/><text x="26.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1700" width="1" height="15" fill="rgb(239,131,31)"/><text x="26.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1716" width="1" height="15" fill="rgb(207,214,0)"/><text x="26.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1732" width="1" height="15" fill="rgb(223,138,47)"/><text x="26.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="23" y="1748" width="1" height="15" fill="rgb(247,174,2)"/><text x="26.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1764" width="1" height="15" fill="rgb(243,198,22)"/><text x="26.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/table.py) (1 samples, 0.09%)</title><rect x="23" y="1780" width="1" height="15" fill="rgb(233,143,16)"/><text x="26.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1796" width="1" height="15" fill="rgb(224,92,51)"/><text x="26.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1812" width="1" height="15" fill="rgb(235,55,25)"/><text x="26.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1828" width="1" height="15" fill="rgb(244,73,39)"/><text x="26.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="23" y="1844" width="1" height="15" fill="rgb(207,67,26)"/><text x="26.00" y="1854.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="23" y="1860" width="1" height="15" fill="rgb(222,168,8)"/><text x="26.00" y="1870.50"></text></g><g><title>&lt;module&gt; (matplotlib/patches.py) (1 samples, 0.09%)</title><rect x="23" y="1876" width="1" height="15" fill="rgb(215,113,23)"/><text x="26.00" y="1886.50"></text></g><g><title>kwdoc (matplotlib/artist.py) (1 samples, 0.09%)</title><rect x="23" y="1892" width="1" height="15" fill="rgb(242,85,52)"/><text x="26.00" y="1902.50"></text></g><g><title>__init__ (matplotlib/artist.py) (1 samples, 0.09%)</title><rect x="23" y="1908" width="1" height="15" fill="rgb(247,168,53)"/><text x="26.00" y="1918.50"></text></g><g><title>get_aliases (matplotlib/artist.py) (1 samples, 0.09%)</title><rect x="23" y="1924" width="1" height="15" fill="rgb(229,197,15)"/><text x="26.00" y="1934.50"></text></g><g><title>is_alias (matplotlib/artist.py) (1 samples, 0.09%)</title><rect x="23" y="1940" width="1" height="15" fill="rgb(232,100,11)"/><text x="26.00" y="1950.50"></text></g><g><title>getdoc (inspect.py) (1 samples, 0.09%)</title><rect x="23" y="1956" width="1" height="15" fill="rgb(231,72,16)"/><text x="26.00" y="1966.50"></text></g><g><title>cleandoc (inspect.py) (1 samples, 0.09%)</title><rect x="23" y="1972" width="1" height="15" fill="rgb(224,129,36)"/><text x="26.00" y="1982.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (14 samples, 1.32%)</title><rect x="10" y="68" width="15" height="15" fill="rgb(232,196,6)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (14 samples, 1.32%)</title><rect x="10" y="84" width="15" height="15" fill="rgb(243,33,1)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (14 samples, 1.32%)</title><rect x="10" y="100" width="15" height="15" fill="rgb(245,204,17)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (14 samples, 1.32%)</title><rect x="10" y="116" width="15" height="15" fill="rgb(231,21,54)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (14 samples, 1.32%)</title><rect x="10" y="132" width="15" height="15" fill="rgb(233,123,54)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_n_estimators5.py) (14 samples, 1.32%)</title><rect x="10" y="148" width="15" height="15" fill="rgb(225,212,13)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (14 samples, 1.32%)</title><rect x="10" y="164" width="15" height="15" fill="rgb(253,77,6)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (14 samples, 1.32%)</title><rect x="10" y="180" width="15" height="15" fill="rgb(227,66,48)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="16" y="196" width="9" height="15" fill="rgb(225,139,6)"/><text x="19.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.75%)</title><rect x="16" y="212" width="9" height="15" fill="rgb(236,226,10)"/><text x="19.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.75%)</title><rect x="16" y="228" width="9" height="15" fill="rgb(250,81,15)"/><text x="19.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py) (1 samples, 0.09%)</title><rect x="24" y="244" width="1" height="15" fill="rgb(246,160,11)"/><text x="27.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="260" width="1" height="15" fill="rgb(224,65,47)"/><text x="27.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="276" width="1" height="15" fill="rgb(220,123,53)"/><text x="27.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="292" width="1" height="15" fill="rgb(220,40,17)"/><text x="27.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="308" width="1" height="15" fill="rgb(217,156,18)"/><text x="27.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="324" width="1" height="15" fill="rgb(209,195,1)"/><text x="27.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="24" y="340" width="1" height="15" fill="rgb(219,121,16)"/><text x="27.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="356" width="1" height="15" fill="rgb(229,49,51)"/><text x="27.00" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/core/__init__.py) (1 samples, 0.09%)</title><rect x="24" y="372" width="1" height="15" fill="rgb(214,155,6)"/><text x="27.00" y="382.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="388" width="1" height="15" fill="rgb(251,126,38)"/><text x="27.00" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="404" width="1" height="15" fill="rgb(218,4,39)"/><text x="27.00" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="420" width="1" height="15" fill="rgb(213,124,28)"/><text x="27.00" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="436" width="1" height="15" fill="rgb(231,30,15)"/><text x="27.00" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="452" width="1" height="15" fill="rgb(209,86,2)"/><text x="27.00" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="24" y="468" width="1" height="15" fill="rgb(207,77,26)"/><text x="27.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="484" width="1" height="15" fill="rgb(250,196,47)"/><text x="27.00" y="494.50"></text></g><g><title>&lt;module&gt; (numpy/core/_internal.py) (1 samples, 0.09%)</title><rect x="24" y="500" width="1" height="15" fill="rgb(225,172,47)"/><text x="27.00" y="510.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="516" width="1" height="15" fill="rgb(251,159,34)"/><text x="27.00" y="526.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="532" width="1" height="15" fill="rgb(209,60,0)"/><text x="27.00" y="542.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="548" width="1" height="15" fill="rgb(205,68,18)"/><text x="27.00" y="558.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="24" y="564" width="1" height="15" fill="rgb(251,96,1)"/><text x="27.00" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="580" width="1" height="15" fill="rgb(214,158,46)"/><text x="27.00" y="590.50"></text></g><g><title>&lt;module&gt; (platform.py) (1 samples, 0.09%)</title><rect x="24" y="596" width="1" height="15" fill="rgb(252,34,44)"/><text x="27.00" y="606.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="612" width="1" height="15" fill="rgb(247,222,47)"/><text x="27.00" y="622.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="628" width="1" height="15" fill="rgb(253,16,52)"/><text x="27.00" y="638.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="644" width="1" height="15" fill="rgb(228,4,13)"/><text x="27.00" y="654.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.09%)</title><rect x="24" y="660" width="1" height="15" fill="rgb(250,87,2)"/><text x="27.00" y="670.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="676" width="1" height="15" fill="rgb(211,19,39)"/><text x="27.00" y="686.50"></text></g><g><title>&lt;module&gt; (subprocess.py) (1 samples, 0.09%)</title><rect x="24" y="692" width="1" height="15" fill="rgb(221,195,13)"/><text x="27.00" y="702.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="708" width="1" height="15" fill="rgb(210,198,29)"/><text x="27.00" y="718.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="724" width="1" height="15" fill="rgb(214,138,54)"/><text x="27.00" y="734.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="24" y="740" width="1" height="15" fill="rgb(223,154,12)"/><text x="27.00" y="750.50"></text></g><g><title>profile0_skl (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (1 samples, 0.09%)</title><rect x="25" y="68" width="1" height="15" fill="rgb(229,89,13)"/><text x="28.00" y="78.50"></text></g><g><title>setup_profile0 (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (1 samples, 0.09%)</title><rect x="25" y="84" width="1" height="15" fill="rgb(217,193,15)"/><text x="28.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.09%)</title><rect x="25" y="100" width="1" height="15" fill="rgb(249,27,38)"/><text x="28.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.09%)</title><rect x="25" y="116" width="1" height="15" fill="rgb(222,97,11)"/><text x="28.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.09%)</title><rect x="25" y="132" width="1" height="15" fill="rgb(245,59,10)"/><text x="28.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (1 samples, 0.09%)</title><rect x="25" y="148" width="1" height="15" fill="rgb(239,202,33)"/><text x="28.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (1 samples, 0.09%)</title><rect x="25" y="164" width="1" height="15" fill="rgb(245,139,17)"/><text x="28.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (1 samples, 0.09%)</title><rect x="25" y="180" width="1" height="15" fill="rgb(212,107,27)"/><text x="28.00" y="190.50"></text></g><g><title>convert_sklearn_decision_tree_regressor (mlprodict/onnx_conv/sklconv/tree_converters.py) (1 samples, 0.09%)</title><rect x="25" y="196" width="1" height="15" fill="rgb(223,27,22)"/><text x="28.00" y="206.50"></text></g><g><title>add_node (skl2onnx/common/_container.py) (1 samples, 0.09%)</title><rect x="25" y="212" width="1" height="15" fill="rgb(216,22,13)"/><text x="28.00" y="222.50"></text></g><g><title>make_node (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.09%)</title><rect x="25" y="228" width="1" height="15" fill="rgb(235,26,30)"/><text x="28.00" y="238.50"></text></g><g><title>0x7f1e6aa054d0 (?) (1 samples, 0.09%)</title><rect x="25" y="244" width="1" height="15" fill="rgb(220,193,16)"/><text x="28.00" y="254.50"></text></g><g><title>&lt;genexpr&gt; (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.09%)</title><rect x="25" y="260" width="1" height="15" fill="rgb(252,49,39)"/><text x="28.00" y="270.50"></text></g><g><title>make_attribute (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.09%)</title><rect x="25" y="276" width="1" height="15" fill="rgb(225,192,20)"/><text x="28.00" y="286.50"></text></g><g><title>&lt;listcomp&gt; (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.09%)</title><rect x="25" y="292" width="1" height="15" fill="rgb(208,155,47)"/><text x="28.00" y="302.50"></text></g><g><title>_to_bytes_or_false (onnx/helper.py) (1 samples, 0.09%)</title><rect x="25" y="308" width="1" height="15" fill="rgb(239,206,44)"/><text x="28.00" y="318.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.09%)</title><rect x="29" y="180" width="2" height="15" fill="rgb(240,168,34)"/><text x="32.00" y="190.50"></text></g><g><title>0x7f1e3c6d9ff9 (?) (1 samples, 0.09%)</title><rect x="32" y="212" width="1" height="15" fill="rgb(221,13,33)"/><text x="35.00" y="222.50"></text></g><g><title>0x7f1e3c6d4ef6 (?) (1 samples, 0.09%)</title><rect x="32" y="228" width="1" height="15" fill="rgb(242,31,20)"/><text x="35.00" y="238.50"></text></g><g><title>0x7f1e3c6c9962 (?) (1 samples, 0.09%)</title><rect x="32" y="244" width="1" height="15" fill="rgb(230,14,1)"/><text x="35.00" y="254.50"></text></g><g><title>0x7f1e3c6fd7a7 (?) (1 samples, 0.09%)</title><rect x="32" y="260" width="1" height="15" fill="rgb(219,10,48)"/><text x="35.00" y="270.50"></text></g><g><title>0x7f1e3c6fd379 (?) (1 samples, 0.09%)</title><rect x="32" y="276" width="1" height="15" fill="rgb(240,176,21)"/><text x="35.00" y="286.50"></text></g><g><title>0x7f1e3cb5b8b8 (?) (1 samples, 0.09%)</title><rect x="32" y="292" width="1" height="15" fill="rgb(241,81,38)"/><text x="35.00" y="302.50"></text></g><g><title>0x7f1e3cb59c7f (?) (1 samples, 0.09%)</title><rect x="32" y="308" width="1" height="15" fill="rgb(224,176,52)"/><text x="35.00" y="318.50"></text></g><g><title>0x7f1e3cb6c99c (?) (1 samples, 0.09%)</title><rect x="32" y="324" width="1" height="15" fill="rgb(248,198,39)"/><text x="35.00" y="334.50"></text></g><g><title>0x7f1e3c893dc2 (?) (1 samples, 0.09%)</title><rect x="32" y="340" width="1" height="15" fill="rgb(242,98,43)"/><text x="35.00" y="350.50"></text></g><g><title>0x7f1e3c893530 (?) (1 samples, 0.09%)</title><rect x="32" y="356" width="1" height="15" fill="rgb(236,71,11)"/><text x="35.00" y="366.50"></text></g><g><title>onnxruntime::ArgMin&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (21 samples, 1.98%)</title><rect x="37" y="340" width="24" height="15" fill="rgb(246,79,14)"/><text x="40.00" y="350.50">o..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 1.41%)</title><rect x="44" y="356" width="17" height="15" fill="rgb(220,163,41)"/><text x="47.00" y="366.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="59" y="372" width="2" height="15" fill="rgb(222,14,1)"/><text x="62.00" y="382.50"></text></g><g><title>onnxruntime::Cast&lt;bool&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.47%)</title><rect x="61" y="340" width="5" height="15" fill="rgb(209,128,37)"/><text x="64.00" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="65" y="356" width="1" height="15" fill="rgb(222,13,50)"/><text x="68.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="65" y="372" width="1" height="15" fill="rgb(250,78,47)"/><text x="68.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="65" y="388" width="1" height="15" fill="rgb(205,37,10)"/><text x="68.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="65" y="404" width="1" height="15" fill="rgb(208,46,28)"/><text x="68.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="65" y="420" width="1" height="15" fill="rgb(210,68,46)"/><text x="68.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="65" y="436" width="1" height="15" fill="rgb(252,93,51)"/><text x="68.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="65" y="452" width="1" height="15" fill="rgb(237,167,1)"/><text x="68.00" y="462.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="65" y="468" width="1" height="15" fill="rgb(216,10,7)"/><text x="68.00" y="478.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="65" y="484" width="1" height="15" fill="rgb(230,167,42)"/><text x="68.00" y="494.50"></text></g><g><title>0x7f1e3c6a16b0 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="65" y="500" width="1" height="15" fill="rgb(244,222,47)"/><text x="68.00" y="510.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.09%)</title><rect x="66" y="356" width="1" height="15" fill="rgb(249,34,8)"/><text x="69.00" y="366.50"></text></g><g><title>0x7f1e7c6bbdc9 (libc-2.29.so) (4 samples, 0.38%)</title><rect x="73" y="372" width="4" height="15" fill="rgb(213,147,7)"/><text x="76.00" y="382.50"></text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 1.22%)</title><rect x="66" y="340" width="15" height="15" fill="rgb(228,219,4)"/><text x="69.00" y="350.50"></text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 1.13%)</title><rect x="67" y="356" width="14" height="15" fill="rgb(221,103,39)"/><text x="70.00" y="366.50"></text></g><g><title>0x7f1e7c6bbdcb (libc-2.29.so) (3 samples, 0.28%)</title><rect x="77" y="372" width="4" height="15" fill="rgb(250,166,46)"/><text x="80.00" y="382.50"></text></g><g><title>(anonymous namespace)::CopySlices&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.38%)</title><rect x="81" y="356" width="4" height="15" fill="rgb(244,191,4)"/><text x="84.00" y="366.50"></text></g><g><title>onnxruntime::SliceIterator&lt;float&gt;::SliceIterator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="84" y="372" width="1" height="15" fill="rgb(211,77,21)"/><text x="87.00" y="382.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector [clone .constprop.161] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="84" y="388" width="1" height="15" fill="rgb(224,79,2)"/><text x="87.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.09%)</title><rect x="84" y="404" width="1" height="15" fill="rgb(216,13,3)"/><text x="87.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="84" y="420" width="1" height="15" fill="rgb(247,128,1)"/><text x="87.00" y="430.50"></text></g><g><title>onnxruntime::CumSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 1.22%)</title><rect x="81" y="340" width="14" height="15" fill="rgb(215,106,1)"/><text x="84.00" y="350.50"></text></g><g><title>(anonymous namespace)::SumSlices&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.85%)</title><rect x="85" y="356" width="10" height="15" fill="rgb(219,122,53)"/><text x="88.00" y="366.50"></text></g><g><title>onnxruntime::SliceIterator&lt;float&gt;::SliceIterator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="94" y="372" width="1" height="15" fill="rgb(242,212,15)"/><text x="97.00" y="382.50"></text></g><g><title>0x7f1e7c6bbdb3 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="105" y="356" width="1" height="15" fill="rgb(239,55,41)"/><text x="108.00" y="366.50"></text></g><g><title>onnxruntime::GatherElements::ValidateInputShapes (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="106" y="356" width="1" height="15" fill="rgb(211,53,52)"/><text x="109.00" y="366.50"></text></g><g><title>onnxruntime::GatherElements::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 1.22%)</title><rect x="95" y="340" width="14" height="15" fill="rgb(215,134,25)"/><text x="98.00" y="350.50"></text></g><g><title>onnxruntime::parse_and_validate_indices_tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="107" y="356" width="2" height="15" fill="rgb(249,126,49)"/><text x="110.00" y="366.50"></text></g><g><title>onnxruntime::Less&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.28%)</title><rect x="109" y="340" width="4" height="15" fill="rgb(221,179,0)"/><text x="112.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, bool, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.28%)</title><rect x="109" y="356" width="4" height="15" fill="rgb(215,199,24)"/><text x="112.00" y="366.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="111" y="372" width="2" height="15" fill="rgb(206,222,53)"/><text x="114.00" y="382.50"></text></g><g><title>onnxruntime::Mul&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.28%)</title><rect x="113" y="340" width="3" height="15" fill="rgb(230,73,14)"/><text x="116.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.28%)</title><rect x="113" y="356" width="3" height="15" fill="rgb(223,118,11)"/><text x="116.00" y="366.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.28%)</title><rect x="113" y="372" width="3" height="15" fill="rgb(232,78,44)"/><text x="116.00" y="382.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="114" y="388" width="2" height="15" fill="rgb(235,171,13)"/><text x="117.00" y="398.50"></text></g><g><title>0x7f1e7c86de88 (libm-2.29.so) (2 samples, 0.19%)</title><rect x="139" y="388" width="3" height="15" fill="rgb(243,139,35)"/><text x="142.00" y="398.50"></text></g><g><title>0x7f1e7c86de8d (libm-2.29.so) (1 samples, 0.09%)</title><rect x="142" y="388" width="1" height="15" fill="rgb(210,7,42)"/><text x="145.00" y="398.50"></text></g><g><title>0x7f1e7c86de91 (libm-2.29.so) (1 samples, 0.09%)</title><rect x="143" y="388" width="1" height="15" fill="rgb(228,202,27)"/><text x="146.00" y="398.50"></text></g><g><title>0x7f1e7c86deb6 (libm-2.29.so) (1 samples, 0.09%)</title><rect x="144" y="388" width="1" height="15" fill="rgb(242,0,49)"/><text x="147.00" y="398.50"></text></g><g><title>0x7f1e7c86dece (libm-2.29.so) (1 samples, 0.09%)</title><rect x="145" y="388" width="1" height="15" fill="rgb(211,130,42)"/><text x="148.00" y="398.50"></text></g><g><title>0x7f1e7c86ded2 (libm-2.29.so) (2 samples, 0.19%)</title><rect x="146" y="388" width="2" height="15" fill="rgb(216,25,46)"/><text x="149.00" y="398.50"></text></g><g><title>0x7f1e7c86def6 (libm-2.29.so) (1 samples, 0.09%)</title><rect x="148" y="388" width="1" height="15" fill="rgb(247,199,42)"/><text x="151.00" y="398.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.09%)</title><rect x="149" y="388" width="1" height="15" fill="rgb(225,150,41)"/><text x="152.00" y="398.50"></text></g><g><title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, long, std::pair&lt;float, long&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::GreaterValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.94%)</title><rect x="150" y="388" width="12" height="15" fill="rgb(238,52,33)"/><text x="153.00" y="398.50"></text></g><g><title>0x7f1e3c6a10f0 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="174" y="404" width="1" height="15" fill="rgb(241,63,3)"/><text x="177.00" y="414.50"></text></g><g><title>0x7f1e7c69b90e (libc-2.29.so) (1 samples, 0.09%)</title><rect x="175" y="404" width="1" height="15" fill="rgb(207,113,40)"/><text x="178.00" y="414.50"></text></g><g><title>0x7f1e7c69b92c (libc-2.29.so) (1 samples, 0.09%)</title><rect x="176" y="404" width="1" height="15" fill="rgb(234,214,8)"/><text x="179.00" y="414.50"></text></g><g><title>0x7f1e7c69ba4c (libc-2.29.so) (1 samples, 0.09%)</title><rect x="177" y="404" width="1" height="15" fill="rgb(251,83,51)"/><text x="180.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.09%)</title><rect x="178" y="404" width="1" height="15" fill="rgb(252,150,19)"/><text x="181.00" y="414.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (66 samples, 6.21%)</title><rect x="116" y="340" width="73" height="15" fill="rgb(235,93,15)"/><text x="119.00" y="350.50">onnxrunt..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (66 samples, 6.21%)</title><rect x="116" y="356" width="73" height="15" fill="rgb(228,120,48)"/><text x="119.00" y="366.50">onnxrunt..</text></g><g><title>onnxruntime::extract_top_k_elements&lt;true, true, onnxruntime::GreaterValueCmp&lt;float&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (66 samples, 6.21%)</title><rect x="116" y="372" width="73" height="15" fill="rgb(213,3,51)"/><text x="119.00" y="382.50">onnxrunt..</text></g><g><title>std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt;::_M_emplace_back_aux&lt;std::pair&lt;float, long&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 2.35%)</title><rect x="162" y="388" width="27" height="15" fill="rgb(217,7,39)"/><text x="165.00" y="398.50">s..</text></g><g><title>operator new (libstdc++.so.6.0.28) (9 samples, 0.85%)</title><rect x="179" y="404" width="10" height="15" fill="rgb(229,143,4)"/><text x="182.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.66%)</title><rect x="182" y="420" width="7" height="15" fill="rgb(252,172,35)"/><text x="185.00" y="430.50"></text></g><g><title>onnxruntime::ml::ArrayFeatureExtractorOp&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.56%)</title><rect x="189" y="340" width="7" height="15" fill="rgb(206,24,18)"/><text x="192.00" y="350.50"></text></g><g><title>0x7f1e3c6a10f0 (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.28%)</title><rect x="246" y="356" width="3" height="15" fill="rgb(239,23,37)"/><text x="249.00" y="366.50"></text></g><g><title>0x7f1e6c1687a0 (libstdc++.so.6.0.28) (1 samples, 0.09%)</title><rect x="249" y="356" width="1" height="15" fill="rgb(239,1,28)"/><text x="252.00" y="366.50"></text></g><g><title>0x7f1e7c69b906 (libc-2.29.so) (5 samples, 0.47%)</title><rect x="250" y="356" width="6" height="15" fill="rgb(235,154,16)"/><text x="253.00" y="366.50"></text></g><g><title>0x7f1e7c69b90e (libc-2.29.so) (3 samples, 0.28%)</title><rect x="256" y="356" width="3" height="15" fill="rgb(243,113,35)"/><text x="259.00" y="366.50"></text></g><g><title>0x7f1e7c69b91c (libc-2.29.so) (1 samples, 0.09%)</title><rect x="259" y="356" width="1" height="15" fill="rgb(235,227,47)"/><text x="262.00" y="366.50"></text></g><g><title>0x7f1e7c69b929 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="260" y="356" width="1" height="15" fill="rgb(229,196,24)"/><text x="263.00" y="366.50"></text></g><g><title>0x7f1e7c69b938 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="261" y="356" width="2" height="15" fill="rgb(213,161,50)"/><text x="264.00" y="366.50"></text></g><g><title>0x7f1e7c69b93b (libc-2.29.so) (1 samples, 0.09%)</title><rect x="263" y="356" width="1" height="15" fill="rgb(218,215,42)"/><text x="266.00" y="366.50"></text></g><g><title>0x7f1e7c69b957 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="264" y="356" width="1" height="15" fill="rgb(219,150,27)"/><text x="267.00" y="366.50"></text></g><g><title>0x7f1e7c69b961 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="265" y="356" width="1" height="15" fill="rgb(230,6,46)"/><text x="268.00" y="366.50"></text></g><g><title>0x7f1e7c69b965 (libc-2.29.so) (2 samples, 0.19%)</title><rect x="266" y="356" width="2" height="15" fill="rgb(219,53,25)"/><text x="269.00" y="366.50"></text></g><g><title>0x7f1e7c69b97c (libc-2.29.so) (1 samples, 0.09%)</title><rect x="268" y="356" width="1" height="15" fill="rgb(216,59,31)"/><text x="271.00" y="366.50"></text></g><g><title>0x7f1e7c69b991 (libc-2.29.so) (6 samples, 0.56%)</title><rect x="269" y="356" width="7" height="15" fill="rgb(240,183,25)"/><text x="272.00" y="366.50"></text></g><g><title>0x7f1e7c69b998 (libc-2.29.so) (3 samples, 0.28%)</title><rect x="276" y="356" width="3" height="15" fill="rgb(213,133,8)"/><text x="279.00" y="366.50"></text></g><g><title>0x7f1e7c69ba38 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="279" y="356" width="1" height="15" fill="rgb(252,211,11)"/><text x="282.00" y="366.50"></text></g><g><title>0x7f1e7c69ba41 (libc-2.29.so) (2 samples, 0.19%)</title><rect x="280" y="356" width="3" height="15" fill="rgb(230,179,0)"/><text x="283.00" y="366.50"></text></g><g><title>0x7f1e7c69ba4d (libc-2.29.so) (3 samples, 0.28%)</title><rect x="283" y="356" width="3" height="15" fill="rgb(238,25,36)"/><text x="286.00" y="366.50"></text></g><g><title>0x7f1e7c69ba53 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="286" y="356" width="1" height="15" fill="rgb(237,137,39)"/><text x="289.00" y="366.50"></text></g><g><title>0x7f1e7c69bbc0 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="287" y="356" width="1" height="15" fill="rgb(245,229,3)"/><text x="290.00" y="366.50"></text></g><g><title>0x7f1e7c69bbd8 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="288" y="356" width="1" height="15" fill="rgb(243,213,36)"/><text x="291.00" y="366.50"></text></g><g><title>0x7f1e7c69bbe4 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="289" y="356" width="1" height="15" fill="rgb(206,205,30)"/><text x="292.00" y="366.50"></text></g><g><title>0x7f1e7c6bc12f (libc-2.29.so) (1 samples, 0.09%)</title><rect x="290" y="356" width="1" height="15" fill="rgb(221,204,31)"/><text x="293.00" y="366.50"></text></g><g><title>0x7f1e7c6bc144 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="291" y="356" width="2" height="15" fill="rgb(238,162,27)"/><text x="294.00" y="366.50"></text></g><g><title>0x7f1e7c6bc14a (libc-2.29.so) (1 samples, 0.09%)</title><rect x="293" y="356" width="1" height="15" fill="rgb(207,177,18)"/><text x="296.00" y="366.50"></text></g><g><title>free (libc-2.29.so) (19 samples, 1.79%)</title><rect x="294" y="356" width="21" height="15" fill="rgb(230,174,45)"/><text x="297.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="315" y="356" width="2" height="15" fill="rgb(213,4,41)"/><text x="318.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="315" y="372" width="2" height="15" fill="rgb(242,5,36)"/><text x="318.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="315" y="388" width="2" height="15" fill="rgb(207,23,38)"/><text x="318.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="315" y="404" width="2" height="15" fill="rgb(217,224,24)"/><text x="318.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="315" y="420" width="2" height="15" fill="rgb(231,133,34)"/><text x="318.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.19%)</title><rect x="315" y="436" width="2" height="15" fill="rgb(215,210,24)"/><text x="318.00" y="446.50"></text></g><g><title>0x7f1e3c6a0930 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.09%)</title><rect x="428" y="388" width="1" height="15" fill="rgb(230,198,23)"/><text x="431.00" y="398.50"></text></g><g><title>0x7f1e6c167d50 (libstdc++.so.6.0.28) (1 samples, 0.09%)</title><rect x="430" y="404" width="1" height="15" fill="rgb(245,99,20)"/><text x="433.00" y="414.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (12 samples, 1.13%)</title><rect x="429" y="388" width="13" height="15" fill="rgb(247,114,4)"/><text x="432.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (10 samples, 0.94%)</title><rect x="431" y="404" width="11" height="15" fill="rgb(217,10,0)"/><text x="434.00" y="414.50"></text></g><g><title>0x7f1e7c69d6fb (libc-2.29.so) (1 samples, 0.09%)</title><rect x="441" y="420" width="1" height="15" fill="rgb(237,8,54)"/><text x="444.00" y="430.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 1.13%)</title><rect x="460" y="404" width="14" height="15" fill="rgb(205,202,19)"/><text x="463.00" y="414.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (7 samples, 0.66%)</title><rect x="466" y="420" width="8" height="15" fill="rgb(239,103,16)"/><text x="469.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.47%)</title><rect x="468" y="436" width="6" height="15" fill="rgb(243,147,6)"/><text x="471.00" y="446.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (196 samples, 18.44%)</title><rect x="317" y="356" width="218" height="15" fill="rgb(207,189,46)"/><text x="320.00" y="366.50">onnxruntime::ml::TreeEnsembl..</text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;long, std::tuple&lt;float, float, float&gt; &gt;&amp;&gt; [clone .isra.301] (onnxruntime/capi/onnxruntime_pybind11_state.so) (109 samples, 10.25%)</title><rect x="414" y="372" width="121" height="15" fill="rgb(212,87,43)"/><text x="417.00" y="382.50">std::_Hashtable..</text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (onnxruntime/capi/onnxruntime_pybind11_state.so) (83 samples, 7.81%)</title><rect x="442" y="388" width="93" height="15" fill="rgb(242,103,49)"/><text x="445.00" y="398.50">std::_Hasht..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (libstdc++.so.6.0.28) (55 samples, 5.17%)</title><rect x="474" y="404" width="61" height="15" fill="rgb(250,178,32)"/><text x="477.00" y="414.50">std::_..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (libstdc++.so.6.0.28) (28 samples, 2.63%)</title><rect x="503" y="420" width="32" height="15" fill="rgb(205,199,26)"/><text x="506.00" y="430.50">st..</text></g><g><title>0x7f1e7c6bbdc3 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="540" y="372" width="1" height="15" fill="rgb(243,107,14)"/><text x="543.00" y="382.50"></text></g><g><title>0x7f1e7c6bbdc9 (libc-2.29.so) (2 samples, 0.19%)</title><rect x="541" y="372" width="2" height="15" fill="rgb(226,24,49)"/><text x="544.00" y="382.50"></text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.85%)</title><rect x="535" y="356" width="10" height="15" fill="rgb(246,42,42)"/><text x="538.00" y="366.50"></text></g><g><title>0x7f1e7c6bbdcb (libc-2.29.so) (1 samples, 0.09%)</title><rect x="543" y="372" width="2" height="15" fill="rgb(208,16,7)"/><text x="546.00" y="382.50"></text></g><g><title>operator delete (libstdc++.so.6.0.28) (2 samples, 0.19%)</title><rect x="545" y="356" width="2" height="15" fill="rgb(234,71,30)"/><text x="548.00" y="366.50"></text></g><g><title>std::__detail::_Map_base&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 1.69%)</title><rect x="547" y="356" width="20" height="15" fill="rgb(247,118,6)"/><text x="550.00" y="366.50"></text></g><g><title>profile_ort (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (501 samples, 47.13%)</title><rect x="26" y="68" width="556" height="15" fill="rgb(231,68,38)"/><text x="29.00" y="78.50">profile_ort (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_f..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (501 samples, 47.13%)</title><rect x="26" y="84" width="556" height="15" fill="rgb(207,82,26)"/><text x="29.00" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (501 samples, 47.13%)</title><rect x="26" y="100" width="556" height="15" fill="rgb(222,139,50)"/><text x="29.00" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (501 samples, 47.13%)</title><rect x="26" y="116" width="556" height="15" fill="rgb(224,115,42)"/><text x="29.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (501 samples, 47.13%)</title><rect x="26" y="132" width="556" height="15" fill="rgb(225,125,6)"/><text x="29.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (501 samples, 47.13%)</title><rect x="26" y="148" width="556" height="15" fill="rgb(214,9,23)"/><text x="29.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (501 samples, 47.13%)</title><rect x="26" y="164" width="556" height="15" fill="rgb(244,115,9)"/><text x="29.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (497 samples, 46.75%)</title><rect x="31" y="180" width="551" height="15" fill="rgb(226,184,16)"/><text x="34.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (497 samples, 46.75%)</title><rect x="31" y="196" width="551" height="15" fill="rgb(229,92,21)"/><text x="34.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (495 samples, 46.57%)</title><rect x="33" y="212" width="549" height="15" fill="rgb(246,125,36)"/><text x="36.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_s..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (495 samples, 46.57%)</title><rect x="33" y="228" width="549" height="15" fill="rgb(245,211,36)"/><text x="36.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMetho..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (493 samples, 46.38%)</title><rect x="35" y="244" width="547" height="15" fill="rgb(254,34,4)"/><text x="38.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxrunti..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (493 samples, 46.38%)</title><rect x="35" y="260" width="547" height="15" fill="rgb(253,184,34)"/><text x="38.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_s..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (492 samples, 46.28%)</title><rect x="36" y="276" width="546" height="15" fill="rgb(222,87,45)"/><text x="39.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_s..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (492 samples, 46.28%)</title><rect x="36" y="292" width="546" height="15" fill="rgb(232,209,27)"/><text x="39.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_sta..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (492 samples, 46.28%)</title><rect x="36" y="308" width="546" height="15" fill="rgb(222,143,42)"/><text x="39.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (492 samples, 46.28%)</title><rect x="36" y="324" width="546" height="15" fill="rgb(239,192,19)"/><text x="39.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybi..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (348 samples, 32.74%)</title><rect x="196" y="340" width="386" height="15" fill="rgb(245,121,25)"/><text x="199.00" y="350.50">onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Compu..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 1.32%)</title><rect x="567" y="356" width="15" height="15" fill="rgb(239,50,45)"/><text x="570.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (9 samples, 0.85%)</title><rect x="572" y="372" width="10" height="15" fill="rgb(223,58,54)"/><text x="575.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.56%)</title><rect x="576" y="388" width="6" height="15" fill="rgb(254,157,28)"/><text x="579.00" y="398.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.09%)</title><rect x="595" y="180" width="1" height="15" fill="rgb(236,171,6)"/><text x="598.00" y="190.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (1 samples, 0.09%)</title><rect x="612" y="196" width="1" height="15" fill="rgb(206,49,26)"/><text x="615.00" y="206.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.09%)</title><rect x="620" y="228" width="1" height="15" fill="rgb(223,9,9)"/><text x="623.00" y="238.50"></text></g><g><title>0x7f1e7c6bc120 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="620" y="244" width="1" height="15" fill="rgb(229,208,40)"/><text x="623.00" y="254.50"></text></g><g><title>LONG_getitem (arraytypes.c.src) (3 samples, 0.28%)</title><rect x="623" y="260" width="4" height="15" fill="rgb(211,121,16)"/><text x="626.00" y="270.50"></text></g><g><title>0x7f1e7b8be800 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="626" y="276" width="1" height="15" fill="rgb(206,144,3)"/><text x="629.00" y="286.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="627" y="260" width="1" height="15" fill="rgb(212,100,41)"/><text x="630.00" y="270.50"></text></g><g><title>0x7f1e7c6bc103 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="627" y="276" width="1" height="15" fill="rgb(241,103,48)"/><text x="630.00" y="286.50"></text></g><g><title>PyArray_ToList (convert.c) (10 samples, 0.94%)</title><rect x="621" y="228" width="11" height="15" fill="rgb(218,17,16)"/><text x="624.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c) (10 samples, 0.94%)</title><rect x="621" y="244" width="11" height="15" fill="rgb(249,223,22)"/><text x="624.00" y="254.50"></text></g><g><title>recursive_tolist (convert.c) (4 samples, 0.38%)</title><rect x="628" y="260" width="4" height="15" fill="rgb(218,197,48)"/><text x="631.00" y="270.50"></text></g><g><title>array_ravel (methods.c) (1 samples, 0.09%)</title><rect x="632" y="228" width="1" height="15" fill="rgb(237,113,24)"/><text x="635.00" y="238.50"></text></g><g><title>PyArray_Ravel (shape.c) (1 samples, 0.09%)</title><rect x="632" y="244" width="1" height="15" fill="rgb(235,88,16)"/><text x="635.00" y="254.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.09%)</title><rect x="632" y="260" width="1" height="15" fill="rgb(218,114,37)"/><text x="635.00" y="270.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.09%)</title><rect x="632" y="276" width="1" height="15" fill="rgb(226,157,22)"/><text x="635.00" y="286.50"></text></g><g><title>array_reshape (methods.c) (1 samples, 0.09%)</title><rect x="633" y="228" width="1" height="15" fill="rgb(223,223,35)"/><text x="636.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="634" y="244" width="2" height="15" fill="rgb(217,123,9)"/><text x="637.00" y="254.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (2 samples, 0.19%)</title><rect x="636" y="244" width="2" height="15" fill="rgb(233,174,22)"/><text x="639.00" y="254.50"></text></g><g><title>check_and_adjust_index (common.h) (1 samples, 0.09%)</title><rect x="637" y="260" width="1" height="15" fill="rgb(219,85,17)"/><text x="640.00" y="270.50"></text></g><g><title>0x7f1e7b8bd600 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="662" y="356" width="1" height="15" fill="rgb(229,25,19)"/><text x="665.00" y="366.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src) (9 samples, 0.85%)</title><rect x="654" y="340" width="10" height="15" fill="rgb(229,178,42)"/><text x="657.00" y="350.50"></text></g><g><title>0x7f1e7b8bd740 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="663" y="356" width="1" height="15" fill="rgb(238,151,33)"/><text x="666.00" y="366.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (24 samples, 2.26%)</title><rect x="639" y="276" width="27" height="15" fill="rgb(214,56,19)"/><text x="642.00" y="286.50">P..</text></g><g><title>setArrayFromSequence (ctors.c) (24 samples, 2.26%)</title><rect x="639" y="292" width="27" height="15" fill="rgb(215,132,6)"/><text x="642.00" y="302.50">s..</text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (20 samples, 1.88%)</title><rect x="643" y="308" width="23" height="15" fill="rgb(246,161,24)"/><text x="646.00" y="318.50">P..</text></g><g><title>LONG_setitem (arraytypes.c.src) (20 samples, 1.88%)</title><rect x="643" y="324" width="23" height="15" fill="rgb(226,2,15)"/><text x="646.00" y="334.50">L..</text></g><g><title>PyArray_DESCR (ndarraytypes.h) (1 samples, 0.09%)</title><rect x="664" y="340" width="2" height="15" fill="rgb(239,195,21)"/><text x="667.00" y="350.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (7 samples, 0.66%)</title><rect x="692" y="340" width="8" height="15" fill="rgb(226,52,20)"/><text x="695.00" y="350.50"></text></g><g><title>ensure_dtype_nbo (convert_datatype.c) (1 samples, 0.09%)</title><rect x="699" y="356" width="1" height="15" fill="rgb(224,188,37)"/><text x="702.00" y="366.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (5 samples, 0.47%)</title><rect x="718" y="356" width="5" height="15" fill="rgb(217,14,42)"/><text x="721.00" y="366.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (55 samples, 5.17%)</title><rect x="666" y="292" width="61" height="15" fill="rgb(227,1,29)"/><text x="669.00" y="302.50">PyArra..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (55 samples, 5.17%)</title><rect x="666" y="308" width="61" height="15" fill="rgb(215,135,48)"/><text x="669.00" y="318.50">PyArra..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (54 samples, 5.08%)</title><rect x="667" y="324" width="60" height="15" fill="rgb(212,131,1)"/><text x="670.00" y="334.50">PyArra..</text></g><g><title>_array_find_python_scalar_type (common.c) (24 samples, 2.26%)</title><rect x="700" y="340" width="27" height="15" fill="rgb(240,224,24)"/><text x="703.00" y="350.50">_..</text></g><g><title>PyInt_Check (npy_3kcompat.h) (3 samples, 0.28%)</title><rect x="723" y="356" width="4" height="15" fill="rgb(241,110,4)"/><text x="726.00" y="366.50"></text></g><g><title>0x7f1e7b8be3f0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="762" y="324" width="1" height="15" fill="rgb(215,115,28)"/><text x="765.00" y="334.50"></text></g><g><title>PyArray_FromAny (ctors.c) (115 samples, 10.82%)</title><rect x="638" y="260" width="127" height="15" fill="rgb(222,218,24)"/><text x="641.00" y="270.50">PyArray_FromAny..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (90 samples, 8.47%)</title><rect x="666" y="276" width="99" height="15" fill="rgb(213,183,14)"/><text x="669.00" y="286.50">PyArray_Get..</text></g><g><title>discover_dimensions (ctors.c) (35 samples, 3.29%)</title><rect x="727" y="292" width="38" height="15" fill="rgb(229,179,43)"/><text x="730.00" y="302.50">dis..</text></g><g><title>discover_dimensions (ctors.c) (30 samples, 2.82%)</title><rect x="732" y="308" width="33" height="15" fill="rgb(224,165,2)"/><text x="735.00" y="318.50">di..</text></g><g><title>0x7f1e7b8bea40 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.19%)</title><rect x="763" y="324" width="2" height="15" fill="rgb(224,62,9)"/><text x="766.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (136 samples, 12.79%)</title><rect x="617" y="212" width="151" height="15" fill="rgb(232,79,50)"/><text x="620.00" y="222.50">_run (mlprodict/onn..</text></g><g><title>array_subscript (mapping.c) (120 samples, 11.29%)</title><rect x="634" y="228" width="134" height="15" fill="rgb(219,124,23)"/><text x="637.00" y="238.50">array_subscript ..</text></g><g><title>prepare_index (mapping.c) (117 samples, 11.01%)</title><rect x="638" y="244" width="130" height="15" fill="rgb(207,150,27)"/><text x="641.00" y="254.50">prepare_index (m..</text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (2 samples, 0.19%)</title><rect x="765" y="260" width="3" height="15" fill="rgb(221,23,29)"/><text x="768.00" y="270.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (2 samples, 0.19%)</title><rect x="765" y="276" width="3" height="15" fill="rgb(225,157,20)"/><text x="768.00" y="286.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (1 samples, 0.09%)</title><rect x="768" y="292" width="1" height="15" fill="rgb(252,15,42)"/><text x="771.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (5 samples, 0.47%)</title><rect x="768" y="212" width="5" height="15" fill="rgb(242,60,16)"/><text x="771.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (5 samples, 0.47%)</title><rect x="768" y="228" width="5" height="15" fill="rgb(217,88,49)"/><text x="771.00" y="238.50"></text></g><g><title>array_astype (methods.c) (5 samples, 0.47%)</title><rect x="768" y="244" width="5" height="15" fill="rgb(235,114,47)"/><text x="771.00" y="254.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (5 samples, 0.47%)</title><rect x="768" y="260" width="5" height="15" fill="rgb(214,212,2)"/><text x="771.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (5 samples, 0.47%)</title><rect x="768" y="276" width="5" height="15" fill="rgb(223,129,9)"/><text x="771.00" y="286.50"></text></g><g><title>_aligned_contig_cast_bool_to_float (lowlevel_strided_loops.c.src) (4 samples, 0.38%)</title><rect x="769" y="292" width="4" height="15" fill="rgb(253,229,37)"/><text x="772.00" y="302.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_concat.py) (1 samples, 0.09%)</title><rect x="773" y="228" width="1" height="15" fill="rgb(226,200,32)"/><text x="776.00" y="238.50"></text></g><g><title>_preprocess (mlprodict/onnxrt/ops_cpu/op_concat.py) (1 samples, 0.09%)</title><rect x="773" y="244" width="1" height="15" fill="rgb(254,163,46)"/><text x="776.00" y="254.50"></text></g><g><title>array_reshape (methods.c) (1 samples, 0.09%)</title><rect x="773" y="260" width="1" height="15" fill="rgb(232,137,5)"/><text x="776.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_concat.py) (2 samples, 0.19%)</title><rect x="773" y="212" width="2" height="15" fill="rgb(244,13,7)"/><text x="776.00" y="222.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (1 samples, 0.09%)</title><rect x="774" y="228" width="1" height="15" fill="rgb(248,228,35)"/><text x="777.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.09%)</title><rect x="774" y="244" width="1" height="15" fill="rgb(205,50,6)"/><text x="777.00" y="254.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (1 samples, 0.09%)</title><rect x="774" y="260" width="1" height="15" fill="rgb(209,114,14)"/><text x="777.00" y="270.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (1 samples, 0.09%)</title><rect x="774" y="276" width="1" height="15" fill="rgb(240,166,35)"/><text x="777.00" y="286.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (1 samples, 0.09%)</title><rect x="774" y="292" width="1" height="15" fill="rgb(228,148,9)"/><text x="777.00" y="302.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.09%)</title><rect x="774" y="308" width="1" height="15" fill="rgb(244,37,26)"/><text x="777.00" y="318.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.09%)</title><rect x="774" y="324" width="1" height="15" fill="rgb(233,131,8)"/><text x="777.00" y="334.50"></text></g><g><title>_aligned_contig_to_strided_size4 (lowlevel_strided_loops.c.src) (1 samples, 0.09%)</title><rect x="774" y="340" width="1" height="15" fill="rgb(235,221,40)"/><text x="777.00" y="350.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.09%)</title><rect x="778" y="372" width="1" height="15" fill="rgb(251,212,29)"/><text x="781.00" y="382.50"></text></g><g><title>0x7f1e7c6bbdbf (libc-2.29.so) (1 samples, 0.09%)</title><rect x="781" y="388" width="1" height="15" fill="rgb(252,148,30)"/><text x="784.00" y="398.50"></text></g><g><title>0x7f1e7c6bbdc3 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="782" y="388" width="1" height="15" fill="rgb(216,112,46)"/><text x="785.00" y="398.50"></text></g><g><title>FLOAT_add (loops.c.src) (4 samples, 0.38%)</title><rect x="783" y="388" width="5" height="15" fill="rgb(219,169,47)"/><text x="786.00" y="398.50"></text></g><g><title>run_binary_simd_add_FLOAT (simd.inc.src) (2 samples, 0.19%)</title><rect x="785" y="404" width="3" height="15" fill="rgb(236,81,20)"/><text x="788.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.19%)</title><rect x="788" y="388" width="2" height="15" fill="rgb(252,156,9)"/><text x="791.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cum_sum.py) (14 samples, 1.32%)</title><rect x="775" y="212" width="16" height="15" fill="rgb(254,142,50)"/><text x="778.00" y="222.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;) (14 samples, 1.32%)</title><rect x="775" y="228" width="16" height="15" fill="rgb(248,149,12)"/><text x="778.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (14 samples, 1.32%)</title><rect x="775" y="244" width="16" height="15" fill="rgb(223,70,9)"/><text x="778.00" y="254.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py) (14 samples, 1.32%)</title><rect x="775" y="260" width="16" height="15" fill="rgb(232,67,26)"/><text x="778.00" y="270.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (14 samples, 1.32%)</title><rect x="775" y="276" width="16" height="15" fill="rgb(240,13,45)"/><text x="778.00" y="286.50"></text></g><g><title>array_cumsum (methods.c) (14 samples, 1.32%)</title><rect x="775" y="292" width="16" height="15" fill="rgb(238,148,22)"/><text x="778.00" y="302.50"></text></g><g><title>PyArray_CumSum (calculation.c) (13 samples, 1.22%)</title><rect x="777" y="308" width="14" height="15" fill="rgb(244,2,54)"/><text x="780.00" y="318.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c) (13 samples, 1.22%)</title><rect x="777" y="324" width="14" height="15" fill="rgb(219,90,24)"/><text x="780.00" y="334.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c) (12 samples, 1.13%)</title><rect x="778" y="340" width="13" height="15" fill="rgb(212,47,35)"/><text x="781.00" y="350.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (12 samples, 1.13%)</title><rect x="778" y="356" width="13" height="15" fill="rgb(217,173,51)"/><text x="781.00" y="366.50"></text></g><g><title>PyUFunc_Accumulate (ufunc_object.c) (11 samples, 1.03%)</title><rect x="779" y="372" width="12" height="15" fill="rgb(245,84,26)"/><text x="782.00" y="382.50"></text></g><g><title>npyiter_iternext_itflags0_dims1_iters2 (nditer_templ.c.src) (1 samples, 0.09%)</title><rect x="790" y="388" width="1" height="15" fill="rgb(237,32,39)"/><text x="793.00" y="398.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.09%)</title><rect x="794" y="324" width="1" height="15" fill="rgb(225,166,25)"/><text x="797.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="794" y="340" width="1" height="15" fill="rgb(230,203,2)"/><text x="797.00" y="350.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="794" y="356" width="1" height="15" fill="rgb(211,123,51)"/><text x="797.00" y="366.50"></text></g><g><title>_choose_dispatcher (numpy/core/fromnumeric.py) (3 samples, 0.28%)</title><rect x="793" y="260" width="4" height="15" fill="rgb(216,14,38)"/><text x="796.00" y="270.50"></text></g><g><title>array_item (mapping.c) (3 samples, 0.28%)</title><rect x="793" y="276" width="4" height="15" fill="rgb(218,5,15)"/><text x="796.00" y="286.50"></text></g><g><title>array_item_asarray (mapping.c) (3 samples, 0.28%)</title><rect x="793" y="292" width="4" height="15" fill="rgb(236,159,33)"/><text x="796.00" y="302.50"></text></g><g><title>get_view_from_index (mapping.c) (3 samples, 0.28%)</title><rect x="793" y="308" width="4" height="15" fill="rgb(236,82,18)"/><text x="796.00" y="318.50"></text></g><g><title>sprintf (libc-2.29.so) (1 samples, 0.09%)</title><rect x="795" y="324" width="2" height="15" fill="rgb(246,44,16)"/><text x="798.00" y="334.50"></text></g><g><title>0x7f1e7c68cab0 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="795" y="340" width="2" height="15" fill="rgb(223,52,6)"/><text x="798.00" y="350.50"></text></g><g><title>0x7f1e7c680ac7 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="795" y="356" width="2" height="15" fill="rgb(231,176,21)"/><text x="798.00" y="366.50"></text></g><g><title>_IO_default_xsputn (libc-2.29.so) (1 samples, 0.09%)</title><rect x="795" y="372" width="2" height="15" fill="rgb(247,225,41)"/><text x="798.00" y="382.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (1 samples, 0.09%)</title><rect x="797" y="308" width="1" height="15" fill="rgb(239,163,5)"/><text x="800.00" y="318.50"></text></g><g><title>0x7f1e7c6bbdbf (libc-2.29.so) (1 samples, 0.09%)</title><rect x="819" y="324" width="1" height="15" fill="rgb(233,68,54)"/><text x="822.00" y="334.50"></text></g><g><title>0x7f1e7c6bbdcb (libc-2.29.so) (1 samples, 0.09%)</title><rect x="820" y="324" width="1" height="15" fill="rgb(232,229,40)"/><text x="823.00" y="334.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.09%)</title><rect x="822" y="388" width="1" height="15" fill="rgb(248,17,17)"/><text x="825.00" y="398.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c) (1 samples, 0.09%)</title><rect x="822" y="404" width="1" height="15" fill="rgb(221,183,51)"/><text x="825.00" y="414.50"></text></g><g><title>PyArray_GetStridedCopyFn (lowlevel_strided_loops.c.src) (1 samples, 0.09%)</title><rect x="822" y="420" width="1" height="15" fill="rgb(232,189,38)"/><text x="825.00" y="430.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (3 samples, 0.28%)</title><rect x="821" y="356" width="3" height="15" fill="rgb(209,186,16)"/><text x="824.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (3 samples, 0.28%)</title><rect x="821" y="372" width="3" height="15" fill="rgb(246,105,9)"/><text x="824.00" y="382.50"></text></g><g><title>_aligned_strided_to_contig_size4 (lowlevel_strided_loops.c.src) (1 samples, 0.09%)</title><rect x="823" y="388" width="1" height="15" fill="rgb(231,115,33)"/><text x="826.00" y="398.50"></text></g><g><title>0x7f1e7c69d700 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="824" y="484" width="1" height="15" fill="rgb(222,93,37)"/><text x="827.00" y="494.50"></text></g><g><title>0x7f1e7c69aab9 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="824" y="500" width="1" height="15" fill="rgb(248,94,43)"/><text x="827.00" y="510.50"></text></g><g><title>PyArray_NewCopy (convert.c) (5 samples, 0.47%)</title><rect x="821" y="340" width="6" height="15" fill="rgb(232,211,39)"/><text x="824.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (2 samples, 0.19%)</title><rect x="824" y="356" width="3" height="15" fill="rgb(206,98,3)"/><text x="827.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.19%)</title><rect x="824" y="372" width="3" height="15" fill="rgb(229,157,27)"/><text x="827.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (2 samples, 0.19%)</title><rect x="824" y="388" width="3" height="15" fill="rgb(224,122,42)"/><text x="827.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.19%)</title><rect x="824" y="404" width="3" height="15" fill="rgb(207,61,28)"/><text x="827.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c) (2 samples, 0.19%)</title><rect x="824" y="420" width="3" height="15" fill="rgb(234,20,28)"/><text x="827.00" y="430.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (2 samples, 0.19%)</title><rect x="824" y="436" width="3" height="15" fill="rgb(236,168,5)"/><text x="827.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (2 samples, 0.19%)</title><rect x="824" y="452" width="3" height="15" fill="rgb(209,41,50)"/><text x="827.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.19%)</title><rect x="824" y="468" width="3" height="15" fill="rgb(243,60,14)"/><text x="827.00" y="478.50"></text></g><g><title>0x7f1e7c69d727 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="825" y="484" width="2" height="15" fill="rgb(224,126,14)"/><text x="828.00" y="494.50"></text></g><g><title>PyArray_ConvertToCommonType (convert_datatype.c) (6 samples, 0.56%)</title><rect x="821" y="324" width="7" height="15" fill="rgb(225,99,50)"/><text x="824.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="827" y="340" width="1" height="15" fill="rgb(213,131,34)"/><text x="830.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.09%)</title><rect x="827" y="356" width="1" height="15" fill="rgb(217,2,24)"/><text x="830.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.09%)</title><rect x="827" y="372" width="1" height="15" fill="rgb(235,10,41)"/><text x="830.00" y="382.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.09%)</title><rect x="828" y="356" width="1" height="15" fill="rgb(227,202,15)"/><text x="831.00" y="366.50"></text></g><g><title>PyArray_FromArray (ctors.c) (1 samples, 0.09%)</title><rect x="828" y="372" width="1" height="15" fill="rgb(246,172,43)"/><text x="831.00" y="382.50"></text></g><g><title>PyArray_MultiIterFromObjects (iterators.c) (2 samples, 0.19%)</title><rect x="828" y="324" width="2" height="15" fill="rgb(220,46,17)"/><text x="831.00" y="334.50"></text></g><g><title>multiiter_new_impl (iterators.c) (2 samples, 0.19%)</title><rect x="828" y="340" width="2" height="15" fill="rgb(231,194,13)"/><text x="831.00" y="350.50"></text></g><g><title>PyArray_IterNew (iterators.c) (1 samples, 0.09%)</title><rect x="829" y="356" width="1" height="15" fill="rgb(253,40,45)"/><text x="832.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="829" y="372" width="1" height="15" fill="rgb(224,159,19)"/><text x="832.00" y="382.50"></text></g><g><title>0x7f1e7c69d700 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="829" y="388" width="1" height="15" fill="rgb(213,67,19)"/><text x="832.00" y="398.50"></text></g><g><title>0x7f1e7c69aab9 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="829" y="404" width="1" height="15" fill="rgb(249,141,42)"/><text x="832.00" y="414.50"></text></g><g><title>choose (&lt;__array_function__ internals&gt;) (35 samples, 3.29%)</title><rect x="792" y="228" width="39" height="15" fill="rgb(241,172,22)"/><text x="795.00" y="238.50">cho..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (34 samples, 3.20%)</title><rect x="793" y="244" width="38" height="15" fill="rgb(237,218,38)"/><text x="796.00" y="254.50">arr..</text></g><g><title>choose (numpy/core/fromnumeric.py) (31 samples, 2.92%)</title><rect x="797" y="260" width="34" height="15" fill="rgb(250,85,41)"/><text x="800.00" y="270.50">ch..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (31 samples, 2.92%)</title><rect x="797" y="276" width="34" height="15" fill="rgb(247,4,33)"/><text x="800.00" y="286.50">_w..</text></g><g><title>array_choose (methods.c) (31 samples, 2.92%)</title><rect x="797" y="292" width="34" height="15" fill="rgb(211,15,17)"/><text x="800.00" y="302.50">ar..</text></g><g><title>PyArray_Choose (item_selection.c) (30 samples, 2.82%)</title><rect x="798" y="308" width="33" height="15" fill="rgb(250,91,51)"/><text x="801.00" y="318.50">Py..</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="830" y="324" width="1" height="15" fill="rgb(217,177,42)"/><text x="833.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_gather_elements.py) (37 samples, 3.48%)</title><rect x="791" y="212" width="41" height="15" fill="rgb(242,4,32)"/><text x="794.00" y="222.50">_ru..</text></g><g><title>swapaxes (&lt;__array_function__ internals&gt;) (1 samples, 0.09%)</title><rect x="831" y="228" width="1" height="15" fill="rgb(209,57,45)"/><text x="834.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.09%)</title><rect x="831" y="244" width="1" height="15" fill="rgb(206,53,40)"/><text x="834.00" y="254.50"></text></g><g><title>swapaxes (numpy/core/fromnumeric.py) (1 samples, 0.09%)</title><rect x="831" y="260" width="1" height="15" fill="rgb(217,202,22)"/><text x="834.00" y="270.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (1 samples, 0.09%)</title><rect x="831" y="276" width="1" height="15" fill="rgb(205,3,41)"/><text x="834.00" y="286.50"></text></g><g><title>array_swapaxes (methods.c) (1 samples, 0.09%)</title><rect x="831" y="292" width="1" height="15" fill="rgb(206,45,52)"/><text x="834.00" y="302.50"></text></g><g><title>PyArray_SwapAxes (shape.c) (1 samples, 0.09%)</title><rect x="831" y="308" width="1" height="15" fill="rgb(216,170,50)"/><text x="834.00" y="318.50"></text></g><g><title>PyArray_Transpose (shape.c) (1 samples, 0.09%)</title><rect x="831" y="324" width="1" height="15" fill="rgb(243,170,16)"/><text x="834.00" y="334.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.09%)</title><rect x="831" y="340" width="1" height="15" fill="rgb(217,194,2)"/><text x="834.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="831" y="356" width="1" height="15" fill="rgb(249,122,3)"/><text x="834.00" y="366.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.09%)</title><rect x="831" y="372" width="1" height="15" fill="rgb(247,112,7)"/><text x="834.00" y="382.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.09%)</title><rect x="831" y="388" width="1" height="15" fill="rgb(210,217,42)"/><text x="834.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="831" y="404" width="1" height="15" fill="rgb(233,174,44)"/><text x="834.00" y="414.50"></text></g><g><title>FLOAT_less (loops.c.src) (1 samples, 0.09%)</title><rect x="832" y="292" width="1" height="15" fill="rgb(239,182,49)"/><text x="835.00" y="302.50"></text></g><g><title>run_binary_simd_less_FLOAT (simd.inc.src) (1 samples, 0.09%)</title><rect x="832" y="308" width="1" height="15" fill="rgb(211,85,32)"/><text x="835.00" y="318.50"></text></g><g><title>sse2_binary_less_FLOAT (simd.inc.src) (1 samples, 0.09%)</title><rect x="832" y="324" width="1" height="15" fill="rgb(211,200,38)"/><text x="835.00" y="334.50"></text></g><g><title>_mm_load_ps (xmmintrin.h) (1 samples, 0.09%)</title><rect x="832" y="340" width="1" height="15" fill="rgb(232,0,42)"/><text x="835.00" y="350.50"></text></g><g><title>NpyIter_GetIterSize (nditer_api.c) (1 samples, 0.09%)</title><rect x="833" y="292" width="1" height="15" fill="rgb(246,115,28)"/><text x="836.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_less.py) (3 samples, 0.28%)</title><rect x="832" y="212" width="3" height="15" fill="rgb(247,36,9)"/><text x="835.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.28%)</title><rect x="832" y="228" width="3" height="15" fill="rgb(253,16,4)"/><text x="835.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.28%)</title><rect x="832" y="244" width="3" height="15" fill="rgb(252,15,11)"/><text x="835.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.28%)</title><rect x="832" y="260" width="3" height="15" fill="rgb(224,2,54)"/><text x="835.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.28%)</title><rect x="832" y="276" width="3" height="15" fill="rgb(213,33,7)"/><text x="835.00" y="286.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (1 samples, 0.09%)</title><rect x="834" y="292" width="1" height="15" fill="rgb(222,186,52)"/><text x="837.00" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.09%)</title><rect x="834" y="308" width="1" height="15" fill="rgb(221,17,5)"/><text x="837.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (1 samples, 0.09%)</title><rect x="834" y="324" width="1" height="15" fill="rgb(234,1,44)"/><text x="837.00" y="334.50"></text></g><g><title>_aligned_strided_to_contig_size4_srcstride0 (lowlevel_strided_loops.c.src) (1 samples, 0.09%)</title><rect x="834" y="340" width="1" height="15" fill="rgb(209,207,32)"/><text x="837.00" y="350.50"></text></g><g><title>array_astype (methods.c) (1 samples, 0.09%)</title><rect x="836" y="244" width="2" height="15" fill="rgb(253,156,23)"/><text x="839.00" y="254.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.09%)</title><rect x="836" y="260" width="2" height="15" fill="rgb(249,16,54)"/><text x="839.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.09%)</title><rect x="836" y="276" width="2" height="15" fill="rgb(250,110,31)"/><text x="839.00" y="286.50"></text></g><g><title>0x7f1e7c6bbd94 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="836" y="292" width="2" height="15" fill="rgb(210,14,50)"/><text x="839.00" y="302.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.09%)</title><rect x="851" y="372" width="1" height="15" fill="rgb(213,86,31)"/><text x="854.00" y="382.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (11 samples, 1.03%)</title><rect x="844" y="340" width="12" height="15" fill="rgb(238,180,10)"/><text x="847.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (11 samples, 1.03%)</title><rect x="844" y="356" width="12" height="15" fill="rgb(253,62,53)"/><text x="847.00" y="366.50"></text></g><g><title>aintroselect_float (selection.c.src) (4 samples, 0.38%)</title><rect x="852" y="372" width="4" height="15" fill="rgb(220,206,15)"/><text x="855.00" y="382.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (3 samples, 0.28%)</title><rect x="853" y="388" width="3" height="15" fill="rgb(226,17,43)"/><text x="856.00" y="398.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (13 samples, 1.22%)</title><rect x="843" y="260" width="15" height="15" fill="rgb(205,159,15)"/><text x="846.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (13 samples, 1.22%)</title><rect x="843" y="276" width="15" height="15" fill="rgb(247,138,50)"/><text x="846.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (13 samples, 1.22%)</title><rect x="843" y="292" width="15" height="15" fill="rgb(247,34,0)"/><text x="846.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (12 samples, 1.13%)</title><rect x="844" y="308" width="14" height="15" fill="rgb(241,101,33)"/><text x="847.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (12 samples, 1.13%)</title><rect x="844" y="324" width="14" height="15" fill="rgb(247,18,5)"/><text x="847.00" y="334.50"></text></g><g><title>PyArray_SelectkindConverter (conversion_utils.c) (1 samples, 0.09%)</title><rect x="856" y="340" width="2" height="15" fill="rgb(252,72,44)"/><text x="859.00" y="350.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (13 samples, 1.22%)</title><rect x="858" y="260" width="14" height="15" fill="rgb(243,171,0)"/><text x="861.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (13 samples, 1.22%)</title><rect x="858" y="276" width="14" height="15" fill="rgb(245,33,43)"/><text x="861.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (11 samples, 1.03%)</title><rect x="860" y="292" width="12" height="15" fill="rgb(218,118,0)"/><text x="863.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (11 samples, 1.03%)</title><rect x="860" y="308" width="12" height="15" fill="rgb(246,217,21)"/><text x="863.00" y="318.50"></text></g><g><title>array_argsort (methods.c) (11 samples, 1.03%)</title><rect x="860" y="324" width="12" height="15" fill="rgb(254,219,29)"/><text x="863.00" y="334.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (11 samples, 1.03%)</title><rect x="860" y="340" width="12" height="15" fill="rgb(246,133,11)"/><text x="863.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (11 samples, 1.03%)</title><rect x="860" y="356" width="12" height="15" fill="rgb(217,135,29)"/><text x="863.00" y="366.50"></text></g><g><title>aquicksort_float (quicksort.c.src) (4 samples, 0.38%)</title><rect x="868" y="372" width="4" height="15" fill="rgb(251,183,17)"/><text x="871.00" y="382.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (2 samples, 0.19%)</title><rect x="870" y="388" width="2" height="15" fill="rgb(223,97,7)"/><text x="873.00" y="398.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="872" y="260" width="1" height="15" fill="rgb(207,114,25)"/><text x="875.00" y="270.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (7 samples, 0.66%)</title><rect x="873" y="276" width="8" height="15" fill="rgb(207,96,18)"/><text x="876.00" y="286.50"></text></g><g><title>check_and_adjust_index (common.h) (2 samples, 0.19%)</title><rect x="879" y="292" width="2" height="15" fill="rgb(229,23,8)"/><text x="882.00" y="302.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (11 samples, 1.03%)</title><rect x="881" y="292" width="12" height="15" fill="rgb(246,52,32)"/><text x="884.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (11 samples, 1.03%)</title><rect x="881" y="308" width="12" height="15" fill="rgb(248,56,3)"/><text x="884.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (11 samples, 1.03%)</title><rect x="881" y="324" width="12" height="15" fill="rgb(240,150,6)"/><text x="884.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (11 samples, 1.03%)</title><rect x="881" y="340" width="12" height="15" fill="rgb(226,159,15)"/><text x="884.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (7 samples, 0.66%)</title><rect x="885" y="356" width="8" height="15" fill="rgb(237,120,34)"/><text x="888.00" y="366.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (12 samples, 1.13%)</title><rect x="881" y="276" width="13" height="15" fill="rgb(217,63,23)"/><text x="884.00" y="286.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="893" y="292" width="1" height="15" fill="rgb(250,201,40)"/><text x="896.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="893" y="308" width="1" height="15" fill="rgb(205,229,38)"/><text x="896.00" y="318.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c) (1 samples, 0.09%)</title><rect x="893" y="324" width="1" height="15" fill="rgb(236,21,17)"/><text x="896.00" y="334.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (1 samples, 0.09%)</title><rect x="893" y="340" width="1" height="15" fill="rgb(223,21,46)"/><text x="896.00" y="350.50"></text></g><g><title>array_subscript (mapping.c) (37 samples, 3.48%)</title><rect x="873" y="260" width="41" height="15" fill="rgb(235,70,6)"/><text x="876.00" y="270.50">arr..</text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (18 samples, 1.69%)</title><rect x="894" y="276" width="20" height="15" fill="rgb(210,4,7)"/><text x="897.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (72 samples, 6.77%)</title><rect x="835" y="212" width="80" height="15" fill="rgb(249,35,2)"/><text x="838.00" y="222.50">_run (mlp..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (72 samples, 6.77%)</title><rect x="835" y="228" width="80" height="15" fill="rgb(214,49,41)"/><text x="838.00" y="238.50">_common_r..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (70 samples, 6.59%)</title><rect x="838" y="244" width="77" height="15" fill="rgb(220,59,5)"/><text x="841.00" y="254.50">topk_sor..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.09%)</title><rect x="914" y="260" width="1" height="15" fill="rgb(224,51,12)"/><text x="917.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.09%)</title><rect x="914" y="276" width="1" height="15" fill="rgb(231,91,29)"/><text x="917.00" y="286.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (1 samples, 0.09%)</title><rect x="914" y="292" width="1" height="15" fill="rgb(250,56,2)"/><text x="917.00" y="302.50"></text></g><g><title>array_size_get (getset.c) (1 samples, 0.09%)</title><rect x="915" y="244" width="1" height="15" fill="rgb(212,79,26)"/><text x="918.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (2 samples, 0.19%)</title><rect x="915" y="228" width="3" height="15" fill="rgb(227,143,5)"/><text x="918.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.09%)</title><rect x="916" y="244" width="2" height="15" fill="rgb(240,130,1)"/><text x="919.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.09%)</title><rect x="916" y="260" width="2" height="15" fill="rgb(214,220,6)"/><text x="919.00" y="270.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.09%)</title><rect x="916" y="276" width="2" height="15" fill="rgb(216,143,53)"/><text x="919.00" y="286.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (1 samples, 0.09%)</title><rect x="916" y="292" width="2" height="15" fill="rgb(223,199,2)"/><text x="919.00" y="302.50"></text></g><g><title>argmin (&lt;__array_function__ internals&gt;) (3 samples, 0.28%)</title><rect x="919" y="276" width="3" height="15" fill="rgb(253,45,43)"/><text x="922.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.28%)</title><rect x="919" y="292" width="3" height="15" fill="rgb(253,111,36)"/><text x="922.00" y="302.50"></text></g><g><title>argmin (numpy/core/fromnumeric.py) (3 samples, 0.28%)</title><rect x="919" y="308" width="3" height="15" fill="rgb(205,83,51)"/><text x="922.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (3 samples, 0.28%)</title><rect x="919" y="324" width="3" height="15" fill="rgb(227,42,54)"/><text x="922.00" y="334.50"></text></g><g><title>array_argmin (methods.c) (3 samples, 0.28%)</title><rect x="919" y="340" width="3" height="15" fill="rgb(228,107,13)"/><text x="922.00" y="350.50"></text></g><g><title>PyArray_ArgMin (calculation.c) (2 samples, 0.19%)</title><rect x="920" y="356" width="2" height="15" fill="rgb(215,145,26)"/><text x="923.00" y="366.50"></text></g><g><title>FLOAT_argmin (arraytypes.c.src) (1 samples, 0.09%)</title><rect x="921" y="372" width="1" height="15" fill="rgb(205,37,51)"/><text x="924.00" y="382.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py) (1 samples, 0.09%)</title><rect x="922" y="292" width="1" height="15" fill="rgb(213,20,6)"/><text x="925.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py) (6 samples, 0.56%)</title><rect x="918" y="228" width="6" height="15" fill="rgb(254,84,50)"/><text x="921.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py) (6 samples, 0.56%)</title><rect x="918" y="244" width="6" height="15" fill="rgb(249,69,30)"/><text x="921.00" y="254.50"></text></g><g><title>_argmin (mlprodict/onnxrt/ops_cpu/op_argmin.py) (6 samples, 0.56%)</title><rect x="918" y="260" width="6" height="15" fill="rgb(226,163,5)"/><text x="921.00" y="270.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (2 samples, 0.19%)</title><rect x="922" y="276" width="2" height="15" fill="rgb(233,160,42)"/><text x="925.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.09%)</title><rect x="923" y="292" width="1" height="15" fill="rgb(217,20,1)"/><text x="926.00" y="302.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (1 samples, 0.09%)</title><rect x="923" y="308" width="1" height="15" fill="rgb(231,110,42)"/><text x="926.00" y="318.50"></text></g><g><title>0x7f1e3d13454f (?) (1 samples, 0.09%)</title><rect x="924" y="244" width="1" height="15" fill="rgb(210,17,52)"/><text x="927.00" y="254.50"></text></g><g><title>0x7f1e3d13a65e (?) (1 samples, 0.09%)</title><rect x="924" y="260" width="1" height="15" fill="rgb(205,187,43)"/><text x="927.00" y="270.50"></text></g><g><title>0x7f1e3d13a50f (?) (1 samples, 0.09%)</title><rect x="924" y="276" width="1" height="15" fill="rgb(224,131,14)"/><text x="927.00" y="286.50"></text></g><g><title>0x7f1e3d140d6c (?) (1 samples, 0.09%)</title><rect x="924" y="292" width="1" height="15" fill="rgb(222,194,20)"/><text x="927.00" y="302.50"></text></g><g><title>0x7f1e466a1ab9 (libgomp.so.1.0.0) (1 samples, 0.09%)</title><rect x="924" y="308" width="1" height="15" fill="rgb(236,190,16)"/><text x="927.00" y="318.50"></text></g><g><title>0x7f1e466a2ea9 (libgomp.so.1.0.0) (1 samples, 0.09%)</title><rect x="924" y="324" width="1" height="15" fill="rgb(225,0,43)"/><text x="927.00" y="334.50"></text></g><g><title>0x7f1e466a2ea0 (libgomp.so.1.0.0) (4 samples, 0.38%)</title><rect x="925" y="484" width="5" height="15" fill="rgb(212,61,40)"/><text x="928.00" y="494.50"></text></g><g><title>0x7f1e466a2ea9 (libgomp.so.1.0.0) (8 samples, 0.75%)</title><rect x="930" y="484" width="9" height="15" fill="rgb(250,81,16)"/><text x="933.00" y="494.50"></text></g><g><title>0x7f1e466a2eab (libgomp.so.1.0.0) (9 samples, 0.85%)</title><rect x="939" y="484" width="10" height="15" fill="rgb(216,105,47)"/><text x="942.00" y="494.50"></text></g><g><title>0x7f1e466a1ab9 (libgomp.so.1.0.0) (32 samples, 3.01%)</title><rect x="925" y="468" width="36" height="15" fill="rgb(218,206,18)"/><text x="928.00" y="478.50">0x7..</text></g><g><title>0x7f1e466a2ead (libgomp.so.1.0.0) (11 samples, 1.03%)</title><rect x="949" y="484" width="12" height="15" fill="rgb(220,132,36)"/><text x="952.00" y="494.50"></text></g><g><title>0x7f1e466a0daa (libgomp.so.1.0.0) (1 samples, 0.09%)</title><rect x="961" y="484" width="1" height="15" fill="rgb(207,81,6)"/><text x="964.00" y="494.50"></text></g><g><title>0x7f1e466a2cf9 (libgomp.so.1.0.0) (1 samples, 0.09%)</title><rect x="961" y="500" width="1" height="15" fill="rgb(225,132,28)"/><text x="964.00" y="510.50"></text></g><g><title>0x7f1e466a0ed3 (libgomp.so.1.0.0) (1 samples, 0.09%)</title><rect x="962" y="484" width="1" height="15" fill="rgb(226,33,19)"/><text x="965.00" y="494.50"></text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (35 samples, 3.29%)</title><rect x="925" y="292" width="39" height="15" fill="rgb(208,157,11)"/><text x="928.00" y="302.50">pyb..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (35 samples, 3.29%)</title><rect x="925" y="308" width="39" height="15" fill="rgb(251,24,23)"/><text x="928.00" y="318.50">pyb..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (35 samples, 3.29%)</title><rect x="925" y="324" width="39" height="15" fill="rgb(225,164,48)"/><text x="928.00" y="334.50">pyb..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (35 samples, 3.29%)</title><rect x="925" y="340" width="39" height="15" fill="rgb(235,18,47)"/><text x="928.00" y="350.50">pyb..</text></g><g><title>pybind11::array::~array (numpy.h) (35 samples, 3.29%)</title><rect x="925" y="356" width="39" height="15" fill="rgb(251,75,50)"/><text x="928.00" y="366.50">pyb..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (35 samples, 3.29%)</title><rect x="925" y="372" width="39" height="15" fill="rgb(245,161,39)"/><text x="928.00" y="382.50">pyb..</text></g><g><title>pybind11::object::~object (pytypes.h) (35 samples, 3.29%)</title><rect x="925" y="388" width="39" height="15" fill="rgb(235,145,44)"/><text x="928.00" y="398.50">pyb..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (35 samples, 3.29%)</title><rect x="925" y="404" width="39" height="15" fill="rgb(232,183,22)"/><text x="928.00" y="414.50">pyb..</text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (35 samples, 3.29%)</title><rect x="925" y="420" width="39" height="15" fill="rgb(223,67,21)"/><text x="928.00" y="430.50">Run..</text></g><g><title>pybind11::array::size (numpy.h) (35 samples, 3.29%)</title><rect x="925" y="436" width="39" height="15" fill="rgb(238,204,26)"/><text x="928.00" y="446.50">pyb..</text></g><g><title>std::accumulate&lt;long const*, long, std::multiplies&lt;long&gt; &gt; (stl_numeric.h) (35 samples, 3.29%)</title><rect x="925" y="452" width="39" height="15" fill="rgb(220,81,44)"/><text x="928.00" y="462.50">std..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (3 samples, 0.28%)</title><rect x="961" y="468" width="3" height="15" fill="rgb(218,138,22)"/><text x="964.00" y="478.50"></text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute_gil_free [clone ._omp_fn.2] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (1 samples, 0.09%)</title><rect x="963" y="484" width="1" height="15" fill="rgb(240,116,17)"/><text x="966.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::size (stl_vector.h) (1 samples, 0.09%)</title><rect x="963" y="500" width="1" height="15" fill="rgb(231,77,28)"/><text x="966.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp) (1 samples, 0.09%)</title><rect x="963" y="516" width="1" height="15" fill="rgb(251,32,4)"/><text x="966.00" y="526.50"></text></g><g><title>std::unordered_map&lt;long, unsigned long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt; &gt;::find (unordered_map.h) (1 samples, 0.09%)</title><rect x="963" y="532" width="1" height="15" fill="rgb(210,219,28)"/><text x="966.00" y="542.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (hashtable.h) (1 samples, 0.09%)</title><rect x="963" y="548" width="1" height="15" fill="rgb(224,25,24)"/><text x="966.00" y="558.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (hashtable.h) (1 samples, 0.09%)</title><rect x="963" y="564" width="1" height="15" fill="rgb(233,220,44)"/><text x="966.00" y="574.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (hashtable.h) (1 samples, 0.09%)</title><rect x="963" y="580" width="1" height="15" fill="rgb(254,32,18)"/><text x="966.00" y="590.50"></text></g><g><title>pybind11::array_t&lt;float, 16&gt;::ensure (numpy.h) (1 samples, 0.09%)</title><rect x="964" y="340" width="1" height="15" fill="rgb(209,219,19)"/><text x="967.00" y="350.50"></text></g><g><title>pybind11::array_t&lt;float, 16&gt;::raw_array_t (numpy.h) (1 samples, 0.09%)</title><rect x="964" y="356" width="1" height="15" fill="rgb(248,170,50)"/><text x="967.00" y="366.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.09%)</title><rect x="964" y="372" width="1" height="15" fill="rgb(211,21,33)"/><text x="967.00" y="382.50"></text></g><g><title>PyArray_FromArray (ctors.c) (1 samples, 0.09%)</title><rect x="964" y="388" width="1" height="15" fill="rgb(207,228,45)"/><text x="967.00" y="398.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (343 samples, 32.27%)</title><rect x="586" y="164" width="380" height="15" fill="rgb(243,90,34)"/><text x="589.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_infere..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (334 samples, 31.42%)</title><rect x="596" y="180" width="370" height="15" fill="rgb(246,157,31)"/><text x="599.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (318 samples, 29.92%)</title><rect x="613" y="196" width="353" height="15" fill="rgb(241,77,48)"/><text x="616.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (46 samples, 4.33%)</title><rect x="915" y="212" width="51" height="15" fill="rgb(226,31,43)"/><text x="918.00" y="222.50">run (..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py) (38 samples, 3.57%)</title><rect x="924" y="228" width="42" height="15" fill="rgb(216,47,4)"/><text x="927.00" y="238.50">_ru..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (37 samples, 3.48%)</title><rect x="925" y="244" width="41" height="15" fill="rgb(211,206,22)"/><text x="928.00" y="254.50">pyb..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (37 samples, 3.48%)</title><rect x="925" y="260" width="41" height="15" fill="rgb(235,88,25)"/><text x="928.00" y="270.50">voi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (37 samples, 3.48%)</title><rect x="925" y="276" width="41" height="15" fill="rgb(228,52,23)"/><text x="928.00" y="286.50">voi..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::load_args (cast.h) (2 samples, 0.19%)</title><rect x="964" y="292" width="2" height="15" fill="rgb(244,210,44)"/><text x="967.00" y="302.50"></text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::load_impl_sequence&lt;(unsigned long)0, (unsigned long)1&gt; (cast.h) (2 samples, 0.19%)</title><rect x="964" y="308" width="2" height="15" fill="rgb(241,16,28)"/><text x="967.00" y="318.50"></text></g><g><title>pybind11::detail::pyobject_caster&lt;pybind11::array_t&lt;float, 16&gt; &gt;::load (numpy.h) (2 samples, 0.19%)</title><rect x="964" y="324" width="2" height="15" fill="rgb(234,78,50)"/><text x="967.00" y="334.50"></text></g><g><title>pybind11::array_t&lt;float, 16&gt;::operator= (numpy.h) (1 samples, 0.09%)</title><rect x="965" y="340" width="1" height="15" fill="rgb(210,158,41)"/><text x="968.00" y="350.50"></text></g><g><title>pybind11::array::operator= (numpy.h) (1 samples, 0.09%)</title><rect x="965" y="356" width="1" height="15" fill="rgb(253,39,48)"/><text x="968.00" y="366.50"></text></g><g><title>pybind11::buffer::operator= (pytypes.h) (1 samples, 0.09%)</title><rect x="965" y="372" width="1" height="15" fill="rgb(249,2,4)"/><text x="968.00" y="382.50"></text></g><g><title>pybind11::object::operator= (pytypes.h) (1 samples, 0.09%)</title><rect x="965" y="388" width="1" height="15" fill="rgb(215,147,53)"/><text x="968.00" y="398.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (1 samples, 0.09%)</title><rect x="965" y="404" width="1" height="15" fill="rgb(241,155,7)"/><text x="968.00" y="414.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="965" y="420" width="1" height="15" fill="rgb(234,26,33)"/><text x="968.00" y="430.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.09%)</title><rect x="965" y="436" width="1" height="15" fill="rgb(206,175,40)"/><text x="968.00" y="446.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.09%)</title><rect x="965" y="452" width="1" height="15" fill="rgb(233,174,10)"/><text x="968.00" y="462.50"></text></g><g><title>profile_pyrt (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (348 samples, 32.74%)</title><rect x="582" y="68" width="387" height="15" fill="rgb(245,9,5)"/><text x="585.00" y="78.50">profile_pyrt (bench_AdaBoostRegressor_default_b_reg_..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (348 samples, 32.74%)</title><rect x="582" y="84" width="387" height="15" fill="rgb(210,19,45)"/><text x="585.00" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (348 samples, 32.74%)</title><rect x="582" y="100" width="387" height="15" fill="rgb(240,59,48)"/><text x="585.00" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_n_est..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (347 samples, 32.64%)</title><rect x="583" y="116" width="386" height="15" fill="rgb(242,58,46)"/><text x="586.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (346 samples, 32.55%)</title><rect x="585" y="132" width="384" height="15" fill="rgb(218,168,51)"/><text x="588.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (346 samples, 32.55%)</title><rect x="585" y="148" width="384" height="15" fill="rgb(216,153,6)"/><text x="588.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.19%)</title><rect x="966" y="164" width="3" height="15" fill="rgb(231,183,9)"/><text x="969.00" y="174.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="967" y="180" width="2" height="15" fill="rgb(241,214,50)"/><text x="970.00" y="190.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="967" y="196" width="2" height="15" fill="rgb(247,195,43)"/><text x="970.00" y="206.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="967" y="212" width="2" height="15" fill="rgb(217,4,10)"/><text x="970.00" y="222.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.09%)</title><rect x="967" y="228" width="2" height="15" fill="rgb(213,89,25)"/><text x="970.00" y="238.50"></text></g><g><title>0x7f1e560def55 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="976" y="228" width="1" height="15" fill="rgb(209,115,18)"/><text x="979.00" y="238.50"></text></g><g><title>0x7f1e560ced7b (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="976" y="244" width="1" height="15" fill="rgb(206,93,41)"/><text x="979.00" y="254.50"></text></g><g><title>0x7f1e560bbb8c (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="976" y="260" width="1" height="15" fill="rgb(241,183,5)"/><text x="979.00" y="270.50"></text></g><g><title>0x7f1e560ed2df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.19%)</title><rect x="977" y="260" width="3" height="15" fill="rgb(226,111,53)"/><text x="980.00" y="270.50"></text></g><g><title>0x7f1e560d1d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.19%)</title><rect x="977" y="276" width="3" height="15" fill="rgb(215,23,10)"/><text x="980.00" y="286.50"></text></g><g><title>0x7f1e560d1666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.19%)</title><rect x="977" y="292" width="3" height="15" fill="rgb(227,187,17)"/><text x="980.00" y="302.50"></text></g><g><title>0x7f1e560c72fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.19%)</title><rect x="977" y="308" width="3" height="15" fill="rgb(252,77,53)"/><text x="980.00" y="318.50"></text></g><g><title>array_getbuffer (buffer.c) (2 samples, 0.19%)</title><rect x="977" y="324" width="3" height="15" fill="rgb(227,133,16)"/><text x="980.00" y="334.50"></text></g><g><title>_buffer_get_info (buffer.c) (2 samples, 0.19%)</title><rect x="977" y="340" width="3" height="15" fill="rgb(240,142,52)"/><text x="980.00" y="350.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.09%)</title><rect x="979" y="356" width="1" height="15" fill="rgb(205,139,9)"/><text x="982.00" y="366.50"></text></g><g><title>0x7f1e560ed364 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.19%)</title><rect x="980" y="260" width="2" height="15" fill="rgb(206,104,14)"/><text x="983.00" y="270.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.09%)</title><rect x="981" y="276" width="1" height="15" fill="rgb(239,82,47)"/><text x="984.00" y="286.50"></text></g><g><title>0x7f1e7c6bc120 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="981" y="292" width="1" height="15" fill="rgb(236,207,39)"/><text x="984.00" y="302.50"></text></g><g><title>0x7f1e560ed54f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="982" y="260" width="1" height="15" fill="rgb(239,40,52)"/><text x="985.00" y="270.50"></text></g><g><title>0x7f1e7c6b1782 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="985" y="292" width="1" height="15" fill="rgb(219,180,49)"/><text x="988.00" y="302.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.09%)</title><rect x="986" y="292" width="1" height="15" fill="rgb(245,211,24)"/><text x="989.00" y="302.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (1 samples, 0.09%)</title><rect x="986" y="308" width="1" height="15" fill="rgb(241,127,5)"/><text x="989.00" y="318.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.09%)</title><rect x="986" y="324" width="1" height="15" fill="rgb(207,213,3)"/><text x="989.00" y="334.50"></text></g><g><title>0x7f1e7c69ce07 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="989" y="388" width="1" height="15" fill="rgb(224,124,53)"/><text x="992.00" y="398.50"></text></g><g><title>0x7f1e560ed592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.66%)</title><rect x="983" y="260" width="8" height="15" fill="rgb(234,60,48)"/><text x="986.00" y="270.50"></text></g><g><title>array_zeros (multiarraymodule.c) (7 samples, 0.66%)</title><rect x="983" y="276" width="8" height="15" fill="rgb(220,184,11)"/><text x="986.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (3 samples, 0.28%)</title><rect x="987" y="292" width="4" height="15" fill="rgb(236,72,30)"/><text x="990.00" y="302.50"></text></g><g><title>PyArray_Zeros (ctors.c) (3 samples, 0.28%)</title><rect x="987" y="308" width="4" height="15" fill="rgb(238,129,0)"/><text x="990.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (3 samples, 0.28%)</title><rect x="987" y="324" width="4" height="15" fill="rgb(212,120,47)"/><text x="990.00" y="334.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c) (3 samples, 0.28%)</title><rect x="987" y="340" width="4" height="15" fill="rgb(248,175,18)"/><text x="990.00" y="350.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c) (2 samples, 0.19%)</title><rect x="989" y="356" width="2" height="15" fill="rgb(205,6,53)"/><text x="992.00" y="366.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (2 samples, 0.19%)</title><rect x="989" y="372" width="2" height="15" fill="rgb(208,3,0)"/><text x="992.00" y="382.50"></text></g><g><title>0x7f1e7c6bc103 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="990" y="388" width="1" height="15" fill="rgb(220,126,50)"/><text x="993.00" y="398.50"></text></g><g><title>0x7f1e560ed693 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="991" y="260" width="1" height="15" fill="rgb(209,84,32)"/><text x="994.00" y="270.50"></text></g><g><title>0x7f1e560ed698 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="992" y="260" width="1" height="15" fill="rgb(253,72,42)"/><text x="995.00" y="270.50"></text></g><g><title>0x7f1e560ed6a5 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="993" y="260" width="1" height="15" fill="rgb(238,93,8)"/><text x="996.00" y="270.50"></text></g><g><title>0x7f1e560ed6aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.19%)</title><rect x="994" y="260" width="2" height="15" fill="rgb(225,201,24)"/><text x="997.00" y="270.50"></text></g><g><title>0x7f1e560ed6ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.28%)</title><rect x="996" y="260" width="4" height="15" fill="rgb(229,10,28)"/><text x="999.00" y="270.50"></text></g><g><title>0x7f1e560ed6b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.19%)</title><rect x="1000" y="260" width="2" height="15" fill="rgb(236,54,46)"/><text x="1003.00" y="270.50"></text></g><g><title>0x7f1e560ed6d4 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1002" y="260" width="1" height="15" fill="rgb(246,217,0)"/><text x="1005.00" y="270.50"></text></g><g><title>0x7f1e560ed6e2 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1003" y="260" width="1" height="15" fill="rgb(209,95,11)"/><text x="1006.00" y="270.50"></text></g><g><title>0x7f1e560ed6fc (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1004" y="260" width="1" height="15" fill="rgb(227,48,32)"/><text x="1007.00" y="270.50"></text></g><g><title>0x7f1e560defa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (26 samples, 2.45%)</title><rect x="977" y="228" width="29" height="15" fill="rgb(221,141,54)"/><text x="980.00" y="238.50">0x..</text></g><g><title>0x7f1e560ee405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (26 samples, 2.45%)</title><rect x="977" y="244" width="29" height="15" fill="rgb(241,70,37)"/><text x="980.00" y="254.50">0x..</text></g><g><title>0x7f1e560ed7b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1005" y="260" width="1" height="15" fill="rgb(210,106,11)"/><text x="1008.00" y="270.50"></text></g><g><title>PyArray_ClipmodeConverter (conversion_utils.c) (1 samples, 0.09%)</title><rect x="1010" y="260" width="1" height="15" fill="rgb(231,156,21)"/><text x="1013.00" y="270.50"></text></g><g><title>0x7f1e560df05a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.66%)</title><rect x="1006" y="228" width="8" height="15" fill="rgb(234,191,36)"/><text x="1009.00" y="238.50"></text></g><g><title>array_take (methods.c) (7 samples, 0.66%)</title><rect x="1006" y="244" width="8" height="15" fill="rgb(236,121,51)"/><text x="1009.00" y="254.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c) (3 samples, 0.28%)</title><rect x="1011" y="260" width="3" height="15" fill="rgb(218,89,44)"/><text x="1014.00" y="270.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (3 samples, 0.28%)</title><rect x="1011" y="276" width="3" height="15" fill="rgb(216,107,7)"/><text x="1014.00" y="286.50"></text></g><g><title>0x7f1e560df13a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.09%)</title><rect x="1014" y="228" width="1" height="15" fill="rgb(242,10,9)"/><text x="1017.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="1014" y="244" width="1" height="15" fill="rgb(210,65,20)"/><text x="1017.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.09%)</title><rect x="1014" y="260" width="1" height="15" fill="rgb(251,134,0)"/><text x="1017.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.09%)</title><rect x="1014" y="276" width="1" height="15" fill="rgb(240,53,6)"/><text x="1017.00" y="286.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.09%)</title><rect x="1015" y="260" width="1" height="15" fill="rgb(241,102,8)"/><text x="1018.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.09%)</title><rect x="1015" y="276" width="1" height="15" fill="rgb(248,116,0)"/><text x="1018.00" y="286.50"></text></g><g><title>0x7f1e560dfd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (37 samples, 3.48%)</title><rect x="976" y="212" width="41" height="15" fill="rgb(228,109,6)"/><text x="979.00" y="222.50">0x7..</text></g><g><title>0x7f1e560df14f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.19%)</title><rect x="1015" y="228" width="2" height="15" fill="rgb(252,96,16)"/><text x="1018.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.19%)</title><rect x="1015" y="244" width="2" height="15" fill="rgb(237,84,48)"/><text x="1018.00" y="254.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1016" y="260" width="1" height="15" fill="rgb(243,200,19)"/><text x="1019.00" y="270.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1016" y="276" width="1" height="15" fill="rgb(214,229,33)"/><text x="1019.00" y="286.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.09%)</title><rect x="1016" y="292" width="1" height="15" fill="rgb(226,47,38)"/><text x="1019.00" y="302.50"></text></g><g><title>0x7f1e7c69be60 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1016" y="308" width="1" height="15" fill="rgb(247,192,43)"/><text x="1019.00" y="318.50"></text></g><g><title>__enter__ (warnings.py) (2 samples, 0.19%)</title><rect x="1032" y="244" width="2" height="15" fill="rgb(205,161,29)"/><text x="1035.00" y="254.50"></text></g><g><title>__exit__ (warnings.py) (1 samples, 0.09%)</title><rect x="1034" y="244" width="1" height="15" fill="rgb(241,171,7)"/><text x="1037.00" y="254.50"></text></g><g><title>__init__ (warnings.py) (1 samples, 0.09%)</title><rect x="1035" y="244" width="1" height="15" fill="rgb(248,124,4)"/><text x="1038.00" y="254.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (4 samples, 0.38%)</title><rect x="1036" y="244" width="5" height="15" fill="rgb(231,188,34)"/><text x="1039.00" y="254.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.09%)</title><rect x="1040" y="260" width="1" height="15" fill="rgb(227,222,4)"/><text x="1043.00" y="270.50"></text></g><g><title>_ensure_no_complex_data (sklearn/utils/validation.py) (2 samples, 0.19%)</title><rect x="1041" y="244" width="2" height="15" fill="rgb(206,196,10)"/><text x="1044.00" y="254.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.09%)</title><rect x="1046" y="260" width="1" height="15" fill="rgb(218,0,41)"/><text x="1049.00" y="270.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (6 samples, 0.56%)</title><rect x="1043" y="244" width="7" height="15" fill="rgb(220,208,21)"/><text x="1046.00" y="254.50"></text></g><g><title>__instancecheck__ (abc.py) (2 samples, 0.19%)</title><rect x="1047" y="260" width="3" height="15" fill="rgb(226,137,26)"/><text x="1050.00" y="270.50"></text></g><g><title>__subclasscheck__ (abc.py) (1 samples, 0.09%)</title><rect x="1049" y="276" width="1" height="15" fill="rgb(220,213,2)"/><text x="1052.00" y="286.50"></text></g><g><title>arraydescr_new (descriptor.c) (3 samples, 0.28%)</title><rect x="1050" y="244" width="3" height="15" fill="rgb(214,175,26)"/><text x="1053.00" y="254.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (4 samples, 0.38%)</title><rect x="1053" y="244" width="4" height="15" fill="rgb(223,28,15)"/><text x="1056.00" y="254.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.19%)</title><rect x="1055" y="260" width="2" height="15" fill="rgb(232,144,33)"/><text x="1058.00" y="270.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (1 samples, 0.09%)</title><rect x="1056" y="276" width="1" height="15" fill="rgb(235,68,34)"/><text x="1059.00" y="286.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (40 samples, 3.76%)</title><rect x="1017" y="228" width="45" height="15" fill="rgb(231,206,49)"/><text x="1020.00" y="238.50">chec..</text></g><g><title>simplefilter (warnings.py) (4 samples, 0.38%)</title><rect x="1057" y="244" width="5" height="15" fill="rgb(230,0,14)"/><text x="1060.00" y="254.50"></text></g><g><title>_add_filter (warnings.py) (2 samples, 0.19%)</title><rect x="1060" y="260" width="2" height="15" fill="rgb(243,187,34)"/><text x="1063.00" y="270.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (41 samples, 3.86%)</title><rect x="1017" y="212" width="46" height="15" fill="rgb(233,149,42)"/><text x="1020.00" y="222.50">_val..</text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.09%)</title><rect x="1062" y="228" width="1" height="15" fill="rgb(237,120,26)"/><text x="1065.00" y="238.50"></text></g><g><title>array_subscript (mapping.c) (1 samples, 0.09%)</title><rect x="1063" y="212" width="1" height="15" fill="rgb(209,228,28)"/><text x="1066.00" y="222.50"></text></g><g><title>get_view_from_index (mapping.c) (1 samples, 0.09%)</title><rect x="1063" y="228" width="1" height="15" fill="rgb(247,37,37)"/><text x="1066.00" y="238.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.09%)</title><rect x="1063" y="244" width="1" height="15" fill="rgb(244,159,53)"/><text x="1066.00" y="254.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="1063" y="260" width="1" height="15" fill="rgb(233,126,47)"/><text x="1066.00" y="270.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.09%)</title><rect x="1063" y="276" width="1" height="15" fill="rgb(239,107,50)"/><text x="1066.00" y="286.50"></text></g><g><title>IsAligned (array_assign.c) (1 samples, 0.09%)</title><rect x="1063" y="292" width="1" height="15" fill="rgb(220,86,53)"/><text x="1066.00" y="302.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (1 samples, 0.09%)</title><rect x="1063" y="308" width="1" height="15" fill="rgb(253,106,6)"/><text x="1066.00" y="318.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (9 samples, 0.85%)</title><rect x="1064" y="212" width="10" height="15" fill="rgb(247,137,40)"/><text x="1067.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (9 samples, 0.85%)</title><rect x="1064" y="228" width="10" height="15" fill="rgb(216,43,29)"/><text x="1067.00" y="238.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.09%)</title><rect x="1073" y="244" width="1" height="15" fill="rgb(236,155,24)"/><text x="1076.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_weight_boosting.py) (92 samples, 8.65%)</title><rect x="973" y="180" width="102" height="15" fill="rgb(208,9,1)"/><text x="976.00" y="190.50">&lt;listcomp&gt; (..</text></g><g><title>predict (sklearn/tree/_classes.py) (90 samples, 8.47%)</title><rect x="975" y="196" width="100" height="15" fill="rgb(246,69,14)"/><text x="978.00" y="206.50">predict (skl..</text></g><g><title>is_classifier (sklearn/base.py) (1 samples, 0.09%)</title><rect x="1074" y="212" width="1" height="15" fill="rgb(220,107,43)"/><text x="1077.00" y="222.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (1 samples, 0.09%)</title><rect x="1075" y="228" width="1" height="15" fill="rgb(240,177,44)"/><text x="1078.00" y="238.50"></text></g><g><title>setArrayFromSequence (ctors.c) (1 samples, 0.09%)</title><rect x="1075" y="244" width="1" height="15" fill="rgb(225,205,16)"/><text x="1078.00" y="254.50"></text></g><g><title>setArrayFromSequence (ctors.c) (1 samples, 0.09%)</title><rect x="1075" y="260" width="1" height="15" fill="rgb(217,166,44)"/><text x="1078.00" y="270.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.09%)</title><rect x="1075" y="276" width="1" height="15" fill="rgb(235,187,38)"/><text x="1078.00" y="286.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.09%)</title><rect x="1075" y="292" width="1" height="15" fill="rgb(228,176,18)"/><text x="1078.00" y="302.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.09%)</title><rect x="1075" y="308" width="1" height="15" fill="rgb(215,102,30)"/><text x="1078.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (1 samples, 0.09%)</title><rect x="1076" y="244" width="1" height="15" fill="rgb(235,155,10)"/><text x="1079.00" y="254.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (1 samples, 0.09%)</title><rect x="1076" y="260" width="1" height="15" fill="rgb(246,118,39)"/><text x="1079.00" y="270.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (1 samples, 0.09%)</title><rect x="1076" y="276" width="1" height="15" fill="rgb(215,80,45)"/><text x="1079.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (3 samples, 0.28%)</title><rect x="1075" y="180" width="3" height="15" fill="rgb(243,165,40)"/><text x="1078.00" y="190.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (3 samples, 0.28%)</title><rect x="1075" y="196" width="3" height="15" fill="rgb(212,63,48)"/><text x="1078.00" y="206.50"></text></g><g><title>PyArray_FromAny (ctors.c) (3 samples, 0.28%)</title><rect x="1075" y="212" width="3" height="15" fill="rgb(243,102,54)"/><text x="1078.00" y="222.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (2 samples, 0.19%)</title><rect x="1076" y="228" width="2" height="15" fill="rgb(222,73,32)"/><text x="1079.00" y="238.50"></text></g><g><title>discover_dimensions (ctors.c) (1 samples, 0.09%)</title><rect x="1077" y="244" width="1" height="15" fill="rgb(216,101,22)"/><text x="1080.00" y="254.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (2 samples, 0.19%)</title><rect x="1078" y="180" width="3" height="15" fill="rgb(215,228,30)"/><text x="1081.00" y="190.50"></text></g><g><title>DOUBLE_copyswapn (arraytypes.c.src) (4 samples, 0.38%)</title><rect x="1091" y="292" width="4" height="15" fill="rgb(230,158,9)"/><text x="1094.00" y="302.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c) (2 samples, 0.19%)</title><rect x="1093" y="308" width="2" height="15" fill="rgb(242,191,43)"/><text x="1096.00" y="318.50"></text></g><g><title>PyArray_IterAllButAxis (iterators.c) (1 samples, 0.09%)</title><rect x="1095" y="292" width="1" height="15" fill="rgb(248,200,37)"/><text x="1098.00" y="302.50"></text></g><g><title>PyArray_IterNew (iterators.c) (1 samples, 0.09%)</title><rect x="1095" y="308" width="1" height="15" fill="rgb(230,43,53)"/><text x="1098.00" y="318.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1095" y="324" width="1" height="15" fill="rgb(244,165,32)"/><text x="1098.00" y="334.50"></text></g><g><title>0x7f1e7c69d28a (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1095" y="340" width="1" height="15" fill="rgb(228,8,0)"/><text x="1098.00" y="350.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.09%)</title><rect x="1096" y="292" width="1" height="15" fill="rgb(209,173,9)"/><text x="1099.00" y="302.50"></text></g><g><title>DOUBLE_LT (npysort_common.h) (2 samples, 0.19%)</title><rect x="1101" y="308" width="2" height="15" fill="rgb(223,4,36)"/><text x="1104.00" y="318.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (21 samples, 1.98%)</title><rect x="1081" y="260" width="23" height="15" fill="rgb(239,84,16)"/><text x="1084.00" y="270.50">P..</text></g><g><title>_new_argsortlike (item_selection.c) (21 samples, 1.98%)</title><rect x="1081" y="276" width="23" height="15" fill="rgb(254,180,1)"/><text x="1084.00" y="286.50">_..</text></g><g><title>aquicksort_double (quicksort.c.src) (6 samples, 0.56%)</title><rect x="1097" y="292" width="7" height="15" fill="rgb(245,188,10)"/><text x="1100.00" y="302.50"></text></g><g><title>npy_get_msb (npy_sort.h.src) (1 samples, 0.09%)</title><rect x="1103" y="308" width="1" height="15" fill="rgb(212,28,34)"/><text x="1106.00" y="318.50"></text></g><g><title>PyArray_Return (scalarapi.c) (1 samples, 0.09%)</title><rect x="1104" y="260" width="1" height="15" fill="rgb(233,2,6)"/><text x="1107.00" y="270.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (23 samples, 2.16%)</title><rect x="1081" y="180" width="25" height="15" fill="rgb(212,50,46)"/><text x="1084.00" y="190.50">a..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (23 samples, 2.16%)</title><rect x="1081" y="196" width="25" height="15" fill="rgb(224,9,17)"/><text x="1084.00" y="206.50">a..</text></g><g><title>argsort (numpy/core/fromnumeric.py) (23 samples, 2.16%)</title><rect x="1081" y="212" width="25" height="15" fill="rgb(247,70,2)"/><text x="1084.00" y="222.50">a..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (23 samples, 2.16%)</title><rect x="1081" y="228" width="25" height="15" fill="rgb(231,37,1)"/><text x="1084.00" y="238.50">_..</text></g><g><title>array_argsort (methods.c) (23 samples, 2.16%)</title><rect x="1081" y="244" width="25" height="15" fill="rgb(239,37,36)"/><text x="1084.00" y="254.50">a..</text></g><g><title>unicode_hash (python3.7) (1 samples, 0.09%)</title><rect x="1105" y="260" width="1" height="15" fill="rgb(244,85,27)"/><text x="1108.00" y="270.50"></text></g><g><title>BOOL_argmax (arraytypes.c.src) (2 samples, 0.19%)</title><rect x="1106" y="212" width="2" height="15" fill="rgb(238,152,50)"/><text x="1109.00" y="222.50"></text></g><g><title>array_argmax (methods.c) (3 samples, 0.28%)</title><rect x="1106" y="180" width="4" height="15" fill="rgb(243,53,17)"/><text x="1109.00" y="190.50"></text></g><g><title>PyArray_ArgMax (calculation.c) (3 samples, 0.28%)</title><rect x="1106" y="196" width="4" height="15" fill="rgb(213,92,20)"/><text x="1109.00" y="206.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.09%)</title><rect x="1108" y="212" width="2" height="15" fill="rgb(214,1,40)"/><text x="1111.00" y="222.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="1108" y="228" width="2" height="15" fill="rgb(245,64,39)"/><text x="1111.00" y="238.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1108" y="244" width="2" height="15" fill="rgb(233,213,14)"/><text x="1111.00" y="254.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1108" y="260" width="2" height="15" fill="rgb(233,133,4)"/><text x="1111.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="1110" y="180" width="1" height="15" fill="rgb(214,148,52)"/><text x="1113.00" y="190.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.09%)</title><rect x="1110" y="196" width="1" height="15" fill="rgb(229,102,35)"/><text x="1113.00" y="206.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.09%)</title><rect x="1110" y="212" width="1" height="15" fill="rgb(215,69,36)"/><text x="1113.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1111" y="212" width="2" height="15" fill="rgb(231,133,36)"/><text x="1114.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1112" y="228" width="1" height="15" fill="rgb(225,170,41)"/><text x="1115.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1112" y="244" width="1" height="15" fill="rgb(246,3,44)"/><text x="1115.00" y="254.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (1 samples, 0.09%)</title><rect x="1112" y="260" width="1" height="15" fill="rgb(214,26,2)"/><text x="1115.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.09%)</title><rect x="1112" y="276" width="1" height="15" fill="rgb(243,64,45)"/><text x="1115.00" y="286.50"></text></g><g><title>array_multiply (number.c) (3 samples, 0.28%)</title><rect x="1111" y="180" width="3" height="15" fill="rgb(248,155,6)"/><text x="1114.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.28%)</title><rect x="1111" y="196" width="3" height="15" fill="rgb(207,141,1)"/><text x="1114.00" y="206.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.09%)</title><rect x="1113" y="212" width="1" height="15" fill="rgb(229,81,13)"/><text x="1116.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.09%)</title><rect x="1113" y="228" width="1" height="15" fill="rgb(232,194,28)"/><text x="1116.00" y="238.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.09%)</title><rect x="1113" y="244" width="1" height="15" fill="rgb(253,108,33)"/><text x="1116.00" y="254.50"></text></g><g><title>DOUBLE_greater_equal (loops.c.src) (2 samples, 0.19%)</title><rect x="1114" y="260" width="2" height="15" fill="rgb(239,6,9)"/><text x="1117.00" y="270.50"></text></g><g><title>run_binary_simd_greater_equal_DOUBLE (simd.inc.src) (2 samples, 0.19%)</title><rect x="1114" y="276" width="2" height="15" fill="rgb(243,107,42)"/><text x="1117.00" y="286.50"></text></g><g><title>sse2_binary_greater_equal_DOUBLE (simd.inc.src) (2 samples, 0.19%)</title><rect x="1114" y="292" width="2" height="15" fill="rgb(254,48,28)"/><text x="1117.00" y="302.50"></text></g><g><title>sse2_compress4_to_byte_DOUBLE (simd.inc.src) (2 samples, 0.19%)</title><rect x="1114" y="308" width="2" height="15" fill="rgb(238,127,2)"/><text x="1117.00" y="318.50"></text></g><g><title>_mm_packs_epi32 (emmintrin.h) (2 samples, 0.19%)</title><rect x="1114" y="324" width="2" height="15" fill="rgb(231,78,38)"/><text x="1117.00" y="334.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1116" y="276" width="1" height="15" fill="rgb(247,104,9)"/><text x="1119.00" y="286.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1116" y="292" width="1" height="15" fill="rgb(236,201,40)"/><text x="1119.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.19%)</title><rect x="1116" y="260" width="2" height="15" fill="rgb(215,155,8)"/><text x="1119.00" y="270.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1117" y="276" width="1" height="15" fill="rgb(223,32,17)"/><text x="1120.00" y="286.50"></text></g><g><title>memcpy (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1117" y="292" width="1" height="15" fill="rgb(213,78,3)"/><text x="1120.00" y="302.50"></text></g><g><title>array_richcompare (arrayobject.c) (5 samples, 0.47%)</title><rect x="1114" y="180" width="6" height="15" fill="rgb(213,179,15)"/><text x="1117.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.47%)</title><rect x="1114" y="196" width="6" height="15" fill="rgb(223,107,24)"/><text x="1117.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.47%)</title><rect x="1114" y="212" width="6" height="15" fill="rgb(249,106,27)"/><text x="1117.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (5 samples, 0.47%)</title><rect x="1114" y="228" width="6" height="15" fill="rgb(217,154,9)"/><text x="1117.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (5 samples, 0.47%)</title><rect x="1114" y="244" width="6" height="15" fill="rgb(216,51,49)"/><text x="1117.00" y="254.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (1 samples, 0.09%)</title><rect x="1118" y="260" width="2" height="15" fill="rgb(217,202,26)"/><text x="1121.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.09%)</title><rect x="1118" y="276" width="2" height="15" fill="rgb(246,160,1)"/><text x="1121.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (1 samples, 0.09%)</title><rect x="1118" y="292" width="2" height="15" fill="rgb(234,176,48)"/><text x="1121.00" y="302.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (2 samples, 0.19%)</title><rect x="1120" y="196" width="2" height="15" fill="rgb(238,78,5)"/><text x="1123.00" y="206.50"></text></g><g><title>check_and_adjust_index (common.h) (1 samples, 0.09%)</title><rect x="1121" y="212" width="1" height="15" fill="rgb(206,186,43)"/><text x="1124.00" y="222.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (1 samples, 0.09%)</title><rect x="1122" y="196" width="1" height="15" fill="rgb(250,218,41)"/><text x="1125.00" y="206.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1122" y="212" width="1" height="15" fill="rgb(253,135,22)"/><text x="1125.00" y="222.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1122" y="228" width="1" height="15" fill="rgb(243,74,36)"/><text x="1125.00" y="238.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1122" y="244" width="1" height="15" fill="rgb(220,203,2)"/><text x="1125.00" y="254.50"></text></g><g><title>arraymapiter_dealloc (mapping.c) (1 samples, 0.09%)</title><rect x="1123" y="196" width="1" height="15" fill="rgb(219,156,3)"/><text x="1126.00" y="206.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (4 samples, 0.38%)</title><rect x="1124" y="196" width="4" height="15" fill="rgb(245,159,37)"/><text x="1127.00" y="206.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (1 samples, 0.09%)</title><rect x="1127" y="212" width="1" height="15" fill="rgb(233,111,50)"/><text x="1130.00" y="222.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (1 samples, 0.09%)</title><rect x="1127" y="228" width="1" height="15" fill="rgb(213,189,8)"/><text x="1130.00" y="238.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.09%)</title><rect x="1131" y="212" width="1" height="15" fill="rgb(247,125,32)"/><text x="1134.00" y="222.50"></text></g><g><title>mapiter_trivial_get (lowlevel_strided_loops.c.src) (4 samples, 0.38%)</title><rect x="1128" y="196" width="5" height="15" fill="rgb(225,30,1)"/><text x="1131.00" y="206.50"></text></g><g><title>check_and_adjust_index (common.h) (1 samples, 0.09%)</title><rect x="1132" y="212" width="1" height="15" fill="rgb(216,67,52)"/><text x="1135.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (13 samples, 1.22%)</title><rect x="1120" y="180" width="14" height="15" fill="rgb(238,214,53)"/><text x="1123.00" y="190.50"></text></g><g><title>prepare_index (mapping.c) (1 samples, 0.09%)</title><rect x="1133" y="196" width="1" height="15" fill="rgb(250,217,4)"/><text x="1136.00" y="206.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;) (2 samples, 0.19%)</title><rect x="1135" y="196" width="2" height="15" fill="rgb(219,158,16)"/><text x="1138.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.19%)</title><rect x="1135" y="212" width="2" height="15" fill="rgb(254,182,52)"/><text x="1138.00" y="222.50"></text></g><g><title>all (numpy/core/fromnumeric.py) (2 samples, 0.19%)</title><rect x="1135" y="228" width="2" height="15" fill="rgb(229,127,46)"/><text x="1138.00" y="238.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (2 samples, 0.19%)</title><rect x="1135" y="244" width="2" height="15" fill="rgb(231,9,50)"/><text x="1138.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1136" y="260" width="1" height="15" fill="rgb(224,58,35)"/><text x="1139.00" y="270.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.09%)</title><rect x="1136" y="276" width="1" height="15" fill="rgb(245,216,38)"/><text x="1139.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.09%)</title><rect x="1136" y="292" width="1" height="15" fill="rgb(226,84,32)"/><text x="1139.00" y="302.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (1 samples, 0.09%)</title><rect x="1136" y="308" width="1" height="15" fill="rgb(243,223,46)"/><text x="1139.00" y="318.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.09%)</title><rect x="1136" y="324" width="1" height="15" fill="rgb(218,51,34)"/><text x="1139.00" y="334.50"></text></g><g><title>array_take (methods.c) (1 samples, 0.09%)</title><rect x="1137" y="196" width="1" height="15" fill="rgb(217,35,12)"/><text x="1140.00" y="206.50"></text></g><g><title>PyArray_AxisConverter (conversion_utils.c) (1 samples, 0.09%)</title><rect x="1137" y="212" width="1" height="15" fill="rgb(239,79,21)"/><text x="1140.00" y="222.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (1 samples, 0.09%)</title><rect x="1137" y="228" width="1" height="15" fill="rgb(227,223,24)"/><text x="1140.00" y="238.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (1 samples, 0.09%)</title><rect x="1137" y="244" width="1" height="15" fill="rgb(242,60,49)"/><text x="1140.00" y="254.50"></text></g><g><title>0x7f1e7c6b1730 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1138" y="276" width="2" height="15" fill="rgb(233,4,36)"/><text x="1141.00" y="286.50"></text></g><g><title>DOUBLE_add (loops.c.src) (5 samples, 0.47%)</title><rect x="1140" y="356" width="5" height="15" fill="rgb(231,146,36)"/><text x="1143.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1145" y="356" width="1" height="15" fill="rgb(250,200,42)"/><text x="1148.00" y="366.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1145" y="372" width="1" height="15" fill="rgb(242,6,37)"/><text x="1148.00" y="382.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1145" y="388" width="1" height="15" fill="rgb(245,26,46)"/><text x="1148.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.09%)</title><rect x="1145" y="404" width="1" height="15" fill="rgb(248,171,23)"/><text x="1148.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="1145" y="420" width="1" height="15" fill="rgb(231,63,9)"/><text x="1148.00" y="430.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.09%)</title><rect x="1145" y="436" width="1" height="15" fill="rgb(247,30,43)"/><text x="1148.00" y="446.50"></text></g><g><title>NpyIter_GetIterNext (nditer_templ.c.src) (1 samples, 0.09%)</title><rect x="1146" y="356" width="1" height="15" fill="rgb(231,138,16)"/><text x="1149.00" y="366.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;) (9 samples, 0.85%)</title><rect x="1138" y="196" width="10" height="15" fill="rgb(226,17,11)"/><text x="1141.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 0.85%)</title><rect x="1138" y="212" width="10" height="15" fill="rgb(244,125,8)"/><text x="1141.00" y="222.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py) (9 samples, 0.85%)</title><rect x="1138" y="228" width="10" height="15" fill="rgb(223,48,52)"/><text x="1141.00" y="238.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (9 samples, 0.85%)</title><rect x="1138" y="244" width="10" height="15" fill="rgb(208,186,13)"/><text x="1141.00" y="254.50"></text></g><g><title>array_cumsum (methods.c) (9 samples, 0.85%)</title><rect x="1138" y="260" width="10" height="15" fill="rgb(231,45,6)"/><text x="1141.00" y="270.50"></text></g><g><title>PyArray_CumSum (calculation.c) (8 samples, 0.75%)</title><rect x="1140" y="276" width="8" height="15" fill="rgb(215,220,11)"/><text x="1143.00" y="286.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c) (8 samples, 0.75%)</title><rect x="1140" y="292" width="8" height="15" fill="rgb(240,224,49)"/><text x="1143.00" y="302.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c) (8 samples, 0.75%)</title><rect x="1140" y="308" width="8" height="15" fill="rgb(254,11,6)"/><text x="1143.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (8 samples, 0.75%)</title><rect x="1140" y="324" width="8" height="15" fill="rgb(251,213,47)"/><text x="1143.00" y="334.50"></text></g><g><title>PyUFunc_Accumulate (ufunc_object.c) (8 samples, 0.75%)</title><rect x="1140" y="340" width="8" height="15" fill="rgb(220,62,37)"/><text x="1143.00" y="350.50"></text></g><g><title>get_binary_op_function (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1147" y="356" width="1" height="15" fill="rgb(223,111,53)"/><text x="1150.00" y="366.50"></text></g><g><title>PyArray_CanCastSafely (convert_datatype.c) (1 samples, 0.09%)</title><rect x="1147" y="372" width="1" height="15" fill="rgb(222,0,20)"/><text x="1150.00" y="382.50"></text></g><g><title>0x7f1e7c6bc124 (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1150" y="244" width="1" height="15" fill="rgb(241,104,17)"/><text x="1153.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.09%)</title><rect x="1153" y="372" width="1" height="15" fill="rgb(210,76,8)"/><text x="1156.00" y="382.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.09%)</title><rect x="1153" y="388" width="1" height="15" fill="rgb(225,70,48)"/><text x="1156.00" y="398.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (2 samples, 0.19%)</title><rect x="1153" y="356" width="2" height="15" fill="rgb(215,63,33)"/><text x="1156.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1154" y="372" width="1" height="15" fill="rgb(225,135,18)"/><text x="1157.00" y="382.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (1 samples, 0.09%)</title><rect x="1154" y="388" width="1" height="15" fill="rgb(226,212,4)"/><text x="1157.00" y="398.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;) (5 samples, 0.47%)</title><rect x="1151" y="244" width="5" height="15" fill="rgb(219,214,42)"/><text x="1154.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 0.47%)</title><rect x="1151" y="260" width="5" height="15" fill="rgb(209,81,38)"/><text x="1154.00" y="270.50"></text></g><g><title>all (numpy/core/fromnumeric.py) (5 samples, 0.47%)</title><rect x="1151" y="276" width="5" height="15" fill="rgb(240,197,38)"/><text x="1154.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (3 samples, 0.28%)</title><rect x="1153" y="292" width="3" height="15" fill="rgb(220,111,28)"/><text x="1156.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 0.28%)</title><rect x="1153" y="308" width="3" height="15" fill="rgb(214,145,45)"/><text x="1156.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.28%)</title><rect x="1153" y="324" width="3" height="15" fill="rgb(208,108,48)"/><text x="1156.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (3 samples, 0.28%)</title><rect x="1153" y="340" width="3" height="15" fill="rgb(251,121,45)"/><text x="1156.00" y="350.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1155" y="356" width="1" height="15" fill="rgb(247,70,9)"/><text x="1158.00" y="366.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c) (1 samples, 0.09%)</title><rect x="1155" y="372" width="1" height="15" fill="rgb(224,1,43)"/><text x="1158.00" y="382.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.09%)</title><rect x="1155" y="388" width="1" height="15" fill="rgb(254,136,17)"/><text x="1158.00" y="398.50"></text></g><g><title>__exit__ (numpy/core/_ufunc_config.py) (2 samples, 0.19%)</title><rect x="1156" y="260" width="2" height="15" fill="rgb(242,220,22)"/><text x="1159.00" y="270.50"></text></g><g><title>seterr (numpy/core/_ufunc_config.py) (2 samples, 0.19%)</title><rect x="1156" y="276" width="2" height="15" fill="rgb(220,190,39)"/><text x="1159.00" y="286.50"></text></g><g><title>geterr (numpy/core/_ufunc_config.py) (1 samples, 0.09%)</title><rect x="1157" y="292" width="1" height="15" fill="rgb(236,213,5)"/><text x="1160.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1161" y="308" width="1" height="15" fill="rgb(240,62,49)"/><text x="1164.00" y="318.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1161" y="324" width="1" height="15" fill="rgb(250,168,52)"/><text x="1164.00" y="334.50"></text></g><g><title>array_add (number.c) (4 samples, 0.38%)</title><rect x="1158" y="260" width="5" height="15" fill="rgb(236,99,20)"/><text x="1161.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1161" y="276" width="2" height="15" fill="rgb(248,170,24)"/><text x="1164.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1161" y="292" width="2" height="15" fill="rgb(249,99,14)"/><text x="1164.00" y="302.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1162" y="308" width="1" height="15" fill="rgb(208,72,15)"/><text x="1165.00" y="318.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.09%)</title><rect x="1163" y="276" width="1" height="15" fill="rgb(239,26,21)"/><text x="1166.00" y="286.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.09%)</title><rect x="1163" y="292" width="1" height="15" fill="rgb(248,158,32)"/><text x="1166.00" y="302.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.19%)</title><rect x="1163" y="260" width="2" height="15" fill="rgb(239,167,10)"/><text x="1166.00" y="270.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1164" y="276" width="1" height="15" fill="rgb(239,32,37)"/><text x="1167.00" y="286.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1164" y="292" width="1" height="15" fill="rgb(235,80,52)"/><text x="1167.00" y="302.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.09%)</title><rect x="1164" y="308" width="1" height="15" fill="rgb(237,194,21)"/><text x="1167.00" y="318.50"></text></g><g><title>0x7f1e7c69b95e (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1164" y="324" width="1" height="15" fill="rgb(250,112,2)"/><text x="1167.00" y="334.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1165" y="308" width="1" height="15" fill="rgb(252,122,4)"/><text x="1168.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.09%)</title><rect x="1165" y="324" width="1" height="15" fill="rgb(242,37,4)"/><text x="1168.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.09%)</title><rect x="1165" y="340" width="1" height="15" fill="rgb(224,78,47)"/><text x="1168.00" y="350.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1165" y="356" width="1" height="15" fill="rgb(238,53,24)"/><text x="1168.00" y="366.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.09%)</title><rect x="1165" y="372" width="1" height="15" fill="rgb(253,183,34)"/><text x="1168.00" y="382.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.09%)</title><rect x="1165" y="388" width="1" height="15" fill="rgb(224,204,52)"/><text x="1168.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1165" y="404" width="1" height="15" fill="rgb(253,49,0)"/><text x="1168.00" y="414.50"></text></g><g><title>0x7f1e7c69d1ba (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1165" y="420" width="1" height="15" fill="rgb(216,46,1)"/><text x="1168.00" y="430.50"></text></g><g><title>array_multiply (number.c) (2 samples, 0.19%)</title><rect x="1165" y="260" width="2" height="15" fill="rgb(246,227,13)"/><text x="1168.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1165" y="276" width="2" height="15" fill="rgb(235,39,13)"/><text x="1168.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1165" y="292" width="2" height="15" fill="rgb(229,76,11)"/><text x="1168.00" y="302.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1166" y="308" width="1" height="15" fill="rgb(218,94,39)"/><text x="1169.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.09%)</title><rect x="1166" y="324" width="1" height="15" fill="rgb(207,36,47)"/><text x="1169.00" y="334.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (1 samples, 0.09%)</title><rect x="1166" y="340" width="1" height="15" fill="rgb(241,101,50)"/><text x="1169.00" y="350.50"></text></g><g><title>DOUBLE_setitem (arraytypes.c.src) (1 samples, 0.09%)</title><rect x="1166" y="356" width="1" height="15" fill="rgb(241,12,4)"/><text x="1169.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1167" y="308" width="1" height="15" fill="rgb(220,164,24)"/><text x="1170.00" y="318.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (1 samples, 0.09%)</title><rect x="1167" y="324" width="1" height="15" fill="rgb(233,173,4)"/><text x="1170.00" y="334.50"></text></g><g><title>isclose (&lt;__array_function__ internals&gt;) (19 samples, 1.79%)</title><rect x="1148" y="196" width="22" height="15" fill="rgb(237,50,47)"/><text x="1151.00" y="206.50">i..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (19 samples, 1.79%)</title><rect x="1148" y="212" width="22" height="15" fill="rgb(233,115,12)"/><text x="1151.00" y="222.50">a..</text></g><g><title>isclose (numpy/core/numeric.py) (19 samples, 1.79%)</title><rect x="1148" y="228" width="22" height="15" fill="rgb(228,45,9)"/><text x="1151.00" y="238.50">i..</text></g><g><title>within_tol (numpy/core/numeric.py) (12 samples, 1.13%)</title><rect x="1156" y="244" width="14" height="15" fill="rgb(247,37,39)"/><text x="1159.00" y="254.50"></text></g><g><title>array_subtract (number.c) (2 samples, 0.19%)</title><rect x="1167" y="260" width="3" height="15" fill="rgb(210,205,9)"/><text x="1170.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1167" y="276" width="3" height="15" fill="rgb(220,169,19)"/><text x="1170.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.19%)</title><rect x="1167" y="292" width="3" height="15" fill="rgb(227,160,7)"/><text x="1170.00" y="302.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.09%)</title><rect x="1168" y="308" width="2" height="15" fill="rgb(248,166,7)"/><text x="1171.00" y="318.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.09%)</title><rect x="1168" y="324" width="2" height="15" fill="rgb(209,113,16)"/><text x="1171.00" y="334.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (1 samples, 0.09%)</title><rect x="1172" y="260" width="1" height="15" fill="rgb(218,174,35)"/><text x="1175.00" y="270.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.09%)</title><rect x="1173" y="276" width="1" height="15" fill="rgb(237,214,49)"/><text x="1176.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.09%)</title><rect x="1173" y="292" width="1" height="15" fill="rgb(234,10,47)"/><text x="1176.00" y="302.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.09%)</title><rect x="1173" y="308" width="1" height="15" fill="rgb(212,20,1)"/><text x="1176.00" y="318.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.09%)</title><rect x="1173" y="324" width="1" height="15" fill="rgb(233,12,10)"/><text x="1176.00" y="334.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.09%)</title><rect x="1173" y="340" width="1" height="15" fill="rgb(221,134,12)"/><text x="1176.00" y="350.50"></text></g><g><title>0x7f1e7c6b1e7a (libc-2.29.so) (1 samples, 0.09%)</title><rect x="1173" y="356" width="1" height="15" fill="rgb(252,45,1)"/><text x="1176.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src) (4 samples, 0.38%)</title><rect x="1175" y="340" width="5" height="15" fill="rgb(240,114,34)"/><text x="1178.00" y="350.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (2 samples, 0.19%)</title><rect x="1177" y="356" width="3" height="15" fill="rgb(220,179,33)"/><text x="1180.00" y="366.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py) (189 samples, 17.78%)</title><rect x="971" y="164" width="210" height="15" fill="rgb(228,97,13)"/><text x="974.00" y="174.50">_get_median_predict (sklear..</text></g><g><title>stable_cumsum (sklearn/utils/extmath.py) (42 samples, 3.95%)</title><rect x="1134" y="180" width="47" height="15" fill="rgb(228,172,39)"/><text x="1137.00" y="190.50">stab..</text></g><g><title>sum (&lt;__array_function__ internals&gt;) (10 samples, 0.94%)</title><rect x="1170" y="196" width="11" height="15" fill="rgb(211,200,17)"/><text x="1173.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 0.85%)</title><rect x="1171" y="212" width="10" height="15" fill="rgb(209,66,5)"/><text x="1174.00" y="222.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (9 samples, 0.85%)</title><rect x="1171" y="228" width="10" height="15" fill="rgb(230,165,27)"/><text x="1174.00" y="238.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (9 samples, 0.85%)</title><rect x="1171" y="244" width="10" height="15" fill="rgb(250,1,24)"/><text x="1174.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (7 samples, 0.66%)</title><rect x="1173" y="260" width="8" height="15" fill="rgb(236,102,11)"/><text x="1176.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (6 samples, 0.56%)</title><rect x="1174" y="276" width="7" height="15" fill="rgb(207,79,1)"/><text x="1177.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (6 samples, 0.56%)</title><rect x="1174" y="292" width="7" height="15" fill="rgb(218,131,53)"/><text x="1177.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (6 samples, 0.56%)</title><rect x="1174" y="308" width="7" height="15" fill="rgb(233,176,18)"/><text x="1177.00" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c) (6 samples, 0.56%)</title><rect x="1174" y="324" width="7" height="15" fill="rgb(210,44,7)"/><text x="1177.00" y="334.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (1 samples, 0.09%)</title><rect x="1180" y="340" width="1" height="15" fill="rgb(250,55,53)"/><text x="1183.00" y="350.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (4 samples, 0.38%)</title><rect x="1183" y="196" width="4" height="15" fill="rgb(207,74,41)"/><text x="1186.00" y="206.50"></text></g><g><title>_validate_data (sklearn/ensemble/_weight_boosting.py) (7 samples, 0.66%)</title><rect x="1181" y="164" width="7" height="15" fill="rgb(241,48,45)"/><text x="1184.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (7 samples, 0.66%)</title><rect x="1181" y="180" width="7" height="15" fill="rgb(223,129,17)"/><text x="1184.00" y="190.50"></text></g><g><title>simplefilter (warnings.py) (1 samples, 0.09%)</title><rect x="1187" y="196" width="1" height="15" fill="rgb(227,172,51)"/><text x="1190.00" y="206.50"></text></g><g><title>_add_filter (warnings.py) (1 samples, 0.09%)</title><rect x="1187" y="212" width="1" height="15" fill="rgb(212,103,10)"/><text x="1190.00" y="222.50"></text></g><g><title>all (1,063 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(242,200,47)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (1,063 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(228,32,42)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py)</text></g><g><title>profile_skl (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (199 samples, 18.72%)</title><rect x="969" y="68" width="221" height="15" fill="rgb(254,104,5)"/><text x="972.00" y="78.50">profile_skl (bench_AdaBoostRe..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (199 samples, 18.72%)</title><rect x="969" y="84" width="221" height="15" fill="rgb(238,216,42)"/><text x="972.00" y="94.50">setup_profile (bench_AdaBoost..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py) (199 samples, 18.72%)</title><rect x="969" y="100" width="221" height="15" fill="rgb(241,46,31)"/><text x="972.00" y="110.50">profile (bench_AdaBoostRegres..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (198 samples, 18.63%)</title><rect x="970" y="116" width="220" height="15" fill="rgb(235,79,1)"/><text x="973.00" y="126.50">time_predict (mlprodict/asv_b..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (198 samples, 18.63%)</title><rect x="970" y="132" width="220" height="15" fill="rgb(222,178,34)"/><text x="973.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_bench..</text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py) (198 samples, 18.63%)</title><rect x="970" y="148" width="220" height="15" fill="rgb(242,165,38)"/><text x="973.00" y="158.50">predict (sklearn/ensemble/_we..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (1 samples, 0.09%)</title><rect x="1188" y="164" width="2" height="15" fill="rgb(245,83,35)"/><text x="1191.00" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (1 samples, 0.09%)</title><rect x="1188" y="180" width="2" height="15" fill="rgb(235,13,32)"/><text x="1191.00" y="190.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.09%)</title><rect x="1188" y="196" width="2" height="15" fill="rgb(251,35,33)"/><text x="1191.00" y="206.50"></text></g></g></svg>