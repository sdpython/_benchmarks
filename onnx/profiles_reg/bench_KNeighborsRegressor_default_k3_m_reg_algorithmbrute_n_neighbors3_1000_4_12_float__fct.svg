<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1014" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="997.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="997.00"> </text><g id="frames"><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(242,221,36)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(225,115,11)"/><text x="13.00" y="894.50"></text></g><g><title>_build_master (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="11" y="868" width="1" height="15" fill="rgb(216,203,44)"/><text x="14.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="11" y="884" width="1" height="15" fill="rgb(219,45,28)"/><text x="14.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="11" y="900" width="1" height="15" fill="rgb(222,15,40)"/><text x="14.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="11" y="916" width="1" height="15" fill="rgb(226,106,36)"/><text x="14.00" y="926.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="12" y="900" width="2" height="15" fill="rgb(241,124,3)"/><text x="15.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="12" y="916" width="2" height="15" fill="rgb(234,131,31)"/><text x="15.00" y="926.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="12" y="932" width="2" height="15" fill="rgb(252,133,3)"/><text x="15.00" y="942.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (2 samples, 0.13%)</title><rect x="12" y="948" width="2" height="15" fill="rgb(208,101,8)"/><text x="15.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (2 samples, 0.13%)</title><rect x="12" y="964" width="2" height="15" fill="rgb(210,216,1)"/><text x="15.00" y="974.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (7 samples, 0.44%)</title><rect x="10" y="292" width="5" height="15" fill="rgb(240,178,48)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="308" width="5" height="15" fill="rgb(252,96,46)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="324" width="5" height="15" fill="rgb(235,34,10)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="340" width="5" height="15" fill="rgb(207,57,47)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.44%)</title><rect x="10" y="356" width="5" height="15" fill="rgb(205,139,9)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="372" width="5" height="15" fill="rgb(245,209,48)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (7 samples, 0.44%)</title><rect x="10" y="388" width="5" height="15" fill="rgb(247,209,14)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="404" width="5" height="15" fill="rgb(206,45,22)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="420" width="5" height="15" fill="rgb(234,36,45)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="436" width="5" height="15" fill="rgb(209,3,8)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.44%)</title><rect x="10" y="452" width="5" height="15" fill="rgb(252,13,25)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="468" width="5" height="15" fill="rgb(213,197,12)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (7 samples, 0.44%)</title><rect x="10" y="484" width="5" height="15" fill="rgb(209,48,13)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="500" width="5" height="15" fill="rgb(244,151,19)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="516" width="5" height="15" fill="rgb(254,34,46)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="532" width="5" height="15" fill="rgb(244,167,7)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.44%)</title><rect x="10" y="548" width="5" height="15" fill="rgb(212,28,3)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="564" width="5" height="15" fill="rgb(223,216,17)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (7 samples, 0.44%)</title><rect x="10" y="580" width="5" height="15" fill="rgb(211,182,18)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="596" width="5" height="15" fill="rgb(233,144,23)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="612" width="5" height="15" fill="rgb(223,162,27)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="628" width="5" height="15" fill="rgb(205,215,21)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="644" width="5" height="15" fill="rgb(227,223,34)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="660" width="5" height="15" fill="rgb(241,30,36)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="676" width="5" height="15" fill="rgb(231,176,7)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.44%)</title><rect x="10" y="692" width="5" height="15" fill="rgb(246,170,35)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="708" width="5" height="15" fill="rgb(230,51,53)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (7 samples, 0.44%)</title><rect x="10" y="724" width="5" height="15" fill="rgb(235,7,34)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="740" width="5" height="15" fill="rgb(217,8,26)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="756" width="5" height="15" fill="rgb(217,164,42)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="772" width="5" height="15" fill="rgb(230,34,52)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.44%)</title><rect x="10" y="788" width="5" height="15" fill="rgb(220,214,38)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="804" width="5" height="15" fill="rgb(224,172,10)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (7 samples, 0.44%)</title><rect x="10" y="820" width="5" height="15" fill="rgb(243,17,22)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (7 samples, 0.44%)</title><rect x="10" y="836" width="5" height="15" fill="rgb(209,12,14)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (7 samples, 0.44%)</title><rect x="10" y="852" width="5" height="15" fill="rgb(220,27,53)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (3 samples, 0.19%)</title><rect x="12" y="868" width="3" height="15" fill="rgb(217,74,39)"/><text x="15.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (3 samples, 0.19%)</title><rect x="12" y="884" width="3" height="15" fill="rgb(253,148,34)"/><text x="15.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.57%)</title><rect x="10" y="196" width="6" height="15" fill="rgb(233,19,17)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.57%)</title><rect x="10" y="212" width="6" height="15" fill="rgb(252,145,31)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.57%)</title><rect x="10" y="228" width="6" height="15" fill="rgb(232,213,54)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.57%)</title><rect x="10" y="244" width="6" height="15" fill="rgb(240,201,19)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 0.57%)</title><rect x="10" y="260" width="6" height="15" fill="rgb(215,153,24)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.57%)</title><rect x="10" y="276" width="6" height="15" fill="rgb(232,6,12)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (2 samples, 0.13%)</title><rect x="15" y="292" width="1" height="15" fill="rgb(237,113,30)"/><text x="18.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="308" width="1" height="15" fill="rgb(236,178,8)"/><text x="18.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="324" width="1" height="15" fill="rgb(220,164,12)"/><text x="18.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="340" width="1" height="15" fill="rgb(254,144,35)"/><text x="18.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="356" width="1" height="15" fill="rgb(245,158,16)"/><text x="18.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="372" width="1" height="15" fill="rgb(241,28,27)"/><text x="18.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (2 samples, 0.13%)</title><rect x="15" y="388" width="1" height="15" fill="rgb(209,166,46)"/><text x="18.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="404" width="1" height="15" fill="rgb(209,175,34)"/><text x="18.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="420" width="1" height="15" fill="rgb(206,156,51)"/><text x="18.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="436" width="1" height="15" fill="rgb(223,197,18)"/><text x="18.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="452" width="1" height="15" fill="rgb(227,53,14)"/><text x="18.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="468" width="1" height="15" fill="rgb(224,208,3)"/><text x="18.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (2 samples, 0.13%)</title><rect x="15" y="484" width="1" height="15" fill="rgb(213,180,39)"/><text x="18.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="500" width="1" height="15" fill="rgb(254,15,12)"/><text x="18.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="516" width="1" height="15" fill="rgb(243,88,5)"/><text x="18.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="532" width="1" height="15" fill="rgb(230,60,5)"/><text x="18.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="548" width="1" height="15" fill="rgb(228,193,40)"/><text x="18.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="564" width="1" height="15" fill="rgb(215,36,32)"/><text x="18.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (2 samples, 0.13%)</title><rect x="15" y="580" width="1" height="15" fill="rgb(239,39,5)"/><text x="18.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="596" width="1" height="15" fill="rgb(247,39,13)"/><text x="18.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="612" width="1" height="15" fill="rgb(236,100,4)"/><text x="18.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="628" width="1" height="15" fill="rgb(245,135,16)"/><text x="18.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="644" width="1" height="15" fill="rgb(207,85,26)"/><text x="18.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="660" width="1" height="15" fill="rgb(221,18,11)"/><text x="18.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (2 samples, 0.13%)</title><rect x="15" y="676" width="1" height="15" fill="rgb(208,14,37)"/><text x="18.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="692" width="1" height="15" fill="rgb(250,4,38)"/><text x="18.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="708" width="1" height="15" fill="rgb(230,83,20)"/><text x="18.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="724" width="1" height="15" fill="rgb(241,9,2)"/><text x="18.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="740" width="1" height="15" fill="rgb(207,158,32)"/><text x="18.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="756" width="1" height="15" fill="rgb(238,53,48)"/><text x="18.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (2 samples, 0.13%)</title><rect x="15" y="772" width="1" height="15" fill="rgb(236,146,7)"/><text x="18.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="788" width="1" height="15" fill="rgb(206,16,13)"/><text x="18.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="804" width="1" height="15" fill="rgb(211,15,12)"/><text x="18.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="820" width="1" height="15" fill="rgb(244,152,23)"/><text x="18.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="836" width="1" height="15" fill="rgb(245,64,34)"/><text x="18.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="852" width="1" height="15" fill="rgb(245,73,51)"/><text x="18.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="868" width="1" height="15" fill="rgb(226,129,48)"/><text x="18.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="884" width="1" height="15" fill="rgb(219,221,24)"/><text x="18.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (2 samples, 0.13%)</title><rect x="15" y="900" width="1" height="15" fill="rgb(245,220,50)"/><text x="18.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.76%)</title><rect x="10" y="68" width="8" height="15" fill="rgb(240,52,39)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.76%)</title><rect x="10" y="84" width="8" height="15" fill="rgb(248,50,48)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.76%)</title><rect x="10" y="100" width="8" height="15" fill="rgb(235,128,8)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (12 samples, 0.76%)</title><rect x="10" y="116" width="8" height="15" fill="rgb(205,200,20)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.76%)</title><rect x="10" y="132" width="8" height="15" fill="rgb(205,167,32)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py) (12 samples, 0.76%)</title><rect x="10" y="148" width="8" height="15" fill="rgb(223,190,14)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.76%)</title><rect x="10" y="164" width="8" height="15" fill="rgb(210,181,9)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.76%)</title><rect x="10" y="180" width="8" height="15" fill="rgb(239,77,17)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="196" width="2" height="15" fill="rgb(217,85,18)"/><text x="19.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="16" y="212" width="2" height="15" fill="rgb(211,92,35)"/><text x="19.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="228" width="2" height="15" fill="rgb(221,194,42)"/><text x="19.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (3 samples, 0.19%)</title><rect x="16" y="244" width="2" height="15" fill="rgb(229,156,36)"/><text x="19.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="260" width="2" height="15" fill="rgb(226,33,50)"/><text x="19.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="276" width="2" height="15" fill="rgb(214,0,53)"/><text x="19.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="292" width="2" height="15" fill="rgb(225,115,28)"/><text x="19.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="16" y="308" width="2" height="15" fill="rgb(246,134,32)"/><text x="19.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="324" width="2" height="15" fill="rgb(234,209,17)"/><text x="19.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.19%)</title><rect x="16" y="340" width="2" height="15" fill="rgb(241,51,24)"/><text x="19.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="356" width="2" height="15" fill="rgb(219,42,6)"/><text x="19.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="372" width="2" height="15" fill="rgb(243,35,1)"/><text x="19.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="388" width="2" height="15" fill="rgb(249,155,42)"/><text x="19.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="16" y="404" width="2" height="15" fill="rgb(254,157,9)"/><text x="19.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="420" width="2" height="15" fill="rgb(237,205,12)"/><text x="19.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (3 samples, 0.19%)</title><rect x="16" y="436" width="2" height="15" fill="rgb(206,149,8)"/><text x="19.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="452" width="2" height="15" fill="rgb(228,38,26)"/><text x="19.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="16" y="468" width="2" height="15" fill="rgb(221,130,48)"/><text x="19.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="17" y="484" width="1" height="15" fill="rgb(249,61,4)"/><text x="20.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="17" y="500" width="1" height="15" fill="rgb(251,125,45)"/><text x="20.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="17" y="516" width="1" height="15" fill="rgb(216,12,48)"/><text x="20.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.13%)</title><rect x="17" y="532" width="1" height="15" fill="rgb(231,86,14)"/><text x="20.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="17" y="548" width="1" height="15" fill="rgb(241,29,31)"/><text x="20.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="17" y="564" width="1" height="15" fill="rgb(205,215,47)"/><text x="20.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="17" y="580" width="1" height="15" fill="rgb(246,197,31)"/><text x="20.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="17" y="596" width="1" height="15" fill="rgb(243,22,33)"/><text x="20.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="17" y="612" width="1" height="15" fill="rgb(221,86,30)"/><text x="20.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (2 samples, 0.13%)</title><rect x="17" y="628" width="1" height="15" fill="rgb(209,123,13)"/><text x="20.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="17" y="644" width="1" height="15" fill="rgb(216,102,21)"/><text x="20.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="17" y="660" width="1" height="15" fill="rgb(249,131,39)"/><text x="20.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="17" y="676" width="1" height="15" fill="rgb(208,145,35)"/><text x="20.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="17" y="692" width="1" height="15" fill="rgb(219,62,37)"/><text x="20.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="17" y="708" width="1" height="15" fill="rgb(243,126,49)"/><text x="20.00" y="718.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (2 samples, 0.13%)</title><rect x="18" y="212" width="2" height="15" fill="rgb(224,175,45)"/><text x="21.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.13%)</title><rect x="18" y="228" width="2" height="15" fill="rgb(250,205,51)"/><text x="21.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (2 samples, 0.13%)</title><rect x="18" y="244" width="2" height="15" fill="rgb(245,180,11)"/><text x="21.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (2 samples, 0.13%)</title><rect x="18" y="260" width="2" height="15" fill="rgb(226,60,46)"/><text x="21.00" y="270.50"></text></g><g><title>array_argpartition (methods.c) (2 samples, 0.13%)</title><rect x="18" y="276" width="2" height="15" fill="rgb(215,168,1)"/><text x="21.00" y="286.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (2 samples, 0.13%)</title><rect x="18" y="292" width="2" height="15" fill="rgb(233,81,15)"/><text x="21.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c) (2 samples, 0.13%)</title><rect x="18" y="308" width="2" height="15" fill="rgb(243,184,27)"/><text x="21.00" y="318.50"></text></g><g><title>aintroselect_double (selection.c.src) (2 samples, 0.13%)</title><rect x="18" y="324" width="2" height="15" fill="rgb(227,154,39)"/><text x="21.00" y="334.50"></text></g><g><title>adumb_select_double (selection.c.src) (2 samples, 0.13%)</title><rect x="18" y="340" width="2" height="15" fill="rgb(248,160,42)"/><text x="21.00" y="350.50"></text></g><g><title>DOUBLE_LT (npysort_common.h) (2 samples, 0.13%)</title><rect x="18" y="356" width="2" height="15" fill="rgb(238,17,17)"/><text x="21.00" y="366.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py) (3 samples, 0.19%)</title><rect x="18" y="196" width="3" height="15" fill="rgb(230,27,25)"/><text x="21.00" y="206.50"></text></g><g><title>profile0_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (5 samples, 0.32%)</title><rect x="18" y="68" width="4" height="15" fill="rgb(240,136,15)"/><text x="21.00" y="78.50"></text></g><g><title>setup_profile0 (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (5 samples, 0.32%)</title><rect x="18" y="84" width="4" height="15" fill="rgb(227,221,21)"/><text x="21.00" y="94.50"></text></g><g><title>profile0 (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (5 samples, 0.32%)</title><rect x="18" y="100" width="4" height="15" fill="rgb(208,33,40)"/><text x="21.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (5 samples, 0.32%)</title><rect x="18" y="116" width="4" height="15" fill="rgb(238,89,31)"/><text x="21.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (5 samples, 0.32%)</title><rect x="18" y="132" width="4" height="15" fill="rgb(249,228,18)"/><text x="21.00" y="142.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py) (5 samples, 0.32%)</title><rect x="18" y="148" width="4" height="15" fill="rgb(222,183,0)"/><text x="21.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (5 samples, 0.32%)</title><rect x="18" y="164" width="4" height="15" fill="rgb(222,36,39)"/><text x="21.00" y="174.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py) (5 samples, 0.32%)</title><rect x="18" y="180" width="4" height="15" fill="rgb(215,18,14)"/><text x="21.00" y="190.50"></text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py) (2 samples, 0.13%)</title><rect x="21" y="196" width="1" height="15" fill="rgb(249,11,12)"/><text x="24.00" y="206.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py) (2 samples, 0.13%)</title><rect x="21" y="212" width="1" height="15" fill="rgb(235,155,15)"/><text x="24.00" y="222.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py) (2 samples, 0.13%)</title><rect x="21" y="228" width="1" height="15" fill="rgb(214,3,48)"/><text x="24.00" y="238.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.44%)</title><rect x="27" y="436" width="5" height="15" fill="rgb(227,132,37)"/><text x="30.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="33" y="484" width="2" height="15" fill="rgb(241,63,54)"/><text x="36.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="33" y="500" width="2" height="15" fill="rgb(235,66,21)"/><text x="36.00" y="510.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="33" y="516" width="2" height="15" fill="rgb(209,95,38)"/><text x="36.00" y="526.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="33" y="532" width="2" height="15" fill="rgb(224,30,16)"/><text x="36.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.32%)</title><rect x="32" y="436" width="4" height="15" fill="rgb(254,196,52)"/><text x="35.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.32%)</title><rect x="32" y="452" width="4" height="15" fill="rgb(235,75,17)"/><text x="35.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.19%)</title><rect x="33" y="468" width="3" height="15" fill="rgb(247,158,18)"/><text x="36.00" y="478.50"></text></g><g><title>0x7f20e51eed94 (libc-2.29.so) (8 samples, 0.51%)</title><rect x="37" y="452" width="6" height="15" fill="rgb(239,110,14)"/><text x="40.00" y="462.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.63%)</title><rect x="36" y="436" width="8" height="15" fill="rgb(254,189,15)"/><text x="39.00" y="446.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.38%)</title><rect x="137" y="468" width="4" height="15" fill="rgb(253,219,46)"/><text x="140.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (132 samples, 8.33%)</title><rect x="44" y="436" width="98" height="15" fill="rgb(218,216,37)"/><text x="47.00" y="446.50">onnxruntime..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (113 samples, 7.13%)</title><rect x="58" y="452" width="84" height="15" fill="rgb(209,170,14)"/><text x="61.00" y="462.50">onnxrunti..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (117 samples, 7.39%)</title><rect x="142" y="468" width="87" height="15" fill="rgb(244,122,47)"/><text x="145.00" y="478.50">onnxruntim..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (43 samples, 2.71%)</title><rect x="197" y="484" width="32" height="15" fill="rgb(242,68,37)"/><text x="200.00" y="494.50">on..</text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="229" y="468" width="2" height="15" fill="rgb(235,185,5)"/><text x="232.00" y="478.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="231" y="500" width="1" height="15" fill="rgb(230,120,46)"/><text x="234.00" y="510.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.19%)</title><rect x="231" y="484" width="2" height="15" fill="rgb(252,184,20)"/><text x="234.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (280 samples, 17.68%)</title><rect x="25" y="340" width="209" height="15" fill="rgb(209,91,40)"/><text x="28.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compu..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (280 samples, 17.68%)</title><rect x="25" y="356" width="209" height="15" fill="rgb(207,50,34)"/><text x="28.00" y="366.50">onnxruntime::ScanImpl::Exec..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (280 samples, 17.68%)</title><rect x="25" y="372" width="209" height="15" fill="rgb(206,141,36)"/><text x="28.00" y="382.50">onnxruntime::scan::detail::..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (279 samples, 17.61%)</title><rect x="26" y="388" width="208" height="15" fill="rgb(252,205,20)"/><text x="29.00" y="398.50">onnxruntime::utils::Execute..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (279 samples, 17.61%)</title><rect x="26" y="404" width="208" height="15" fill="rgb(207,179,4)"/><text x="29.00" y="414.50">onnxruntime::utils::Execute..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (279 samples, 17.61%)</title><rect x="26" y="420" width="208" height="15" fill="rgb(241,102,4)"/><text x="29.00" y="430.50">onnxruntime::SequentialExec..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (123 samples, 7.77%)</title><rect x="142" y="436" width="92" height="15" fill="rgb(206,200,12)"/><text x="145.00" y="446.50">onnxruntim..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (123 samples, 7.77%)</title><rect x="142" y="452" width="92" height="15" fill="rgb(234,153,50)"/><text x="145.00" y="462.50">onnxruntim..</text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.25%)</title><rect x="231" y="468" width="3" height="15" fill="rgb(221,165,22)"/><text x="234.00" y="478.50"></text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="234" y="340" width="1" height="15" fill="rgb(208,77,3)"/><text x="237.00" y="350.50"></text></g><g><title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="329" y="372" width="2" height="15" fill="rgb(206,15,47)"/><text x="332.00" y="382.50"></text></g><g><title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="331" y="372" width="1" height="15" fill="rgb(247,176,41)"/><text x="334.00" y="382.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (132 samples, 8.33%)</title><rect x="235" y="340" width="99" height="15" fill="rgb(234,56,47)"/><text x="238.00" y="350.50">onnxruntime..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (132 samples, 8.33%)</title><rect x="235" y="356" width="99" height="15" fill="rgb(242,81,33)"/><text x="238.00" y="366.50">onnxruntime..</text></g><g><title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="332" y="372" width="2" height="15" fill="rgb(208,151,51)"/><text x="335.00" y="382.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (49 samples, 3.09%)</title><rect x="334" y="340" width="36" height="15" fill="rgb(228,1,40)"/><text x="337.00" y="350.50">onn..</text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (48 samples, 3.03%)</title><rect x="334" y="356" width="36" height="15" fill="rgb(215,179,36)"/><text x="337.00" y="366.50">onn..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (465 samples, 29.36%)</title><rect x="24" y="244" width="347" height="15" fill="rgb(209,229,22)"/><text x="27.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11:..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (465 samples, 29.36%)</title><rect x="24" y="260" width="347" height="15" fill="rgb(245,151,38)"/><text x="27.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (465 samples, 29.36%)</title><rect x="24" y="276" width="347" height="15" fill="rgb(250,132,36)"/><text x="27.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (465 samples, 29.36%)</title><rect x="24" y="292" width="347" height="15" fill="rgb(230,196,49)"/><text x="27.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/c..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (465 samples, 29.36%)</title><rect x="24" y="308" width="347" height="15" fill="rgb(220,141,44)"/><text x="27.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxrunti..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (465 samples, 29.36%)</title><rect x="24" y="324" width="347" height="15" fill="rgb(252,152,31)"/><text x="27.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxr..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (469 samples, 29.61%)</title><rect x="22" y="68" width="350" height="15" fill="rgb(214,77,10)"/><text x="25.00" y="78.50">profile_ort (bench_KNeighborsRegressor_default_..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (469 samples, 29.61%)</title><rect x="22" y="84" width="350" height="15" fill="rgb(229,6,15)"/><text x="25.00" y="94.50">setup_profile (bench_KNeighborsRegressor_defaul..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (469 samples, 29.61%)</title><rect x="22" y="100" width="350" height="15" fill="rgb(232,70,49)"/><text x="25.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (468 samples, 29.55%)</title><rect x="23" y="116" width="349" height="15" fill="rgb(217,203,8)"/><text x="26.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_as..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (468 samples, 29.55%)</title><rect x="23" y="132" width="349" height="15" fill="rgb(247,42,0)"/><text x="26.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_sk..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (468 samples, 29.55%)</title><rect x="23" y="148" width="349" height="15" fill="rgb(236,105,35)"/><text x="26.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (468 samples, 29.55%)</title><rect x="23" y="164" width="349" height="15" fill="rgb(248,127,36)"/><text x="26.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_infer..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (467 samples, 29.48%)</title><rect x="24" y="180" width="348" height="15" fill="rgb(235,180,35)"/><text x="27.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (467 samples, 29.48%)</title><rect x="24" y="196" width="348" height="15" fill="rgb(206,64,24)"/><text x="27.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (466 samples, 29.42%)</title><rect x="24" y="212" width="348" height="15" fill="rgb(231,225,52)"/><text x="27.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (466 samples, 29.42%)</title><rect x="24" y="228" width="348" height="15" fill="rgb(211,6,21)"/><text x="27.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxrun..</text></g><g><title>PyArray_AssignFromSequence (ctors.c) (2 samples, 0.13%)</title><rect x="378" y="276" width="1" height="15" fill="rgb(205,210,41)"/><text x="381.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c) (2 samples, 0.13%)</title><rect x="378" y="292" width="1" height="15" fill="rgb(247,109,46)"/><text x="381.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (2 samples, 0.13%)</title><rect x="378" y="308" width="1" height="15" fill="rgb(208,193,11)"/><text x="381.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src) (2 samples, 0.13%)</title><rect x="378" y="324" width="1" height="15" fill="rgb(211,19,8)"/><text x="381.00" y="334.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (3 samples, 0.19%)</title><rect x="379" y="292" width="2" height="15" fill="rgb(241,146,17)"/><text x="382.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (3 samples, 0.19%)</title><rect x="379" y="308" width="2" height="15" fill="rgb(218,64,36)"/><text x="382.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (3 samples, 0.19%)</title><rect x="379" y="324" width="2" height="15" fill="rgb(247,147,13)"/><text x="382.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (12 samples, 0.76%)</title><rect x="376" y="212" width="9" height="15" fill="rgb(248,64,42)"/><text x="379.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (12 samples, 0.76%)</title><rect x="376" y="228" width="9" height="15" fill="rgb(223,21,40)"/><text x="379.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (10 samples, 0.63%)</title><rect x="378" y="244" width="7" height="15" fill="rgb(217,124,38)"/><text x="381.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c) (10 samples, 0.63%)</title><rect x="378" y="260" width="7" height="15" fill="rgb(219,64,10)"/><text x="381.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (8 samples, 0.51%)</title><rect x="379" y="276" width="6" height="15" fill="rgb(234,36,17)"/><text x="382.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c) (5 samples, 0.32%)</title><rect x="381" y="292" width="4" height="15" fill="rgb(219,216,13)"/><text x="384.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c) (4 samples, 0.25%)</title><rect x="382" y="308" width="3" height="15" fill="rgb(244,129,54)"/><text x="385.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (3 samples, 0.19%)</title><rect x="420" y="228" width="2" height="15" fill="rgb(215,65,30)"/><text x="423.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (6 samples, 0.38%)</title><rect x="422" y="228" width="5" height="15" fill="rgb(210,183,0)"/><text x="425.00" y="238.50"></text></g><g><title>array_subscript (mapping.c) (5 samples, 0.32%)</title><rect x="427" y="228" width="3" height="15" fill="rgb(250,119,22)"/><text x="430.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (4 samples, 0.25%)</title><rect x="427" y="244" width="3" height="15" fill="rgb(221,119,42)"/><text x="430.00" y="254.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (3 samples, 0.19%)</title><rect x="457" y="276" width="2" height="15" fill="rgb(228,15,46)"/><text x="460.00" y="286.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (4 samples, 0.25%)</title><rect x="462" y="292" width="3" height="15" fill="rgb(241,68,7)"/><text x="465.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (3 samples, 0.19%)</title><rect x="462" y="308" width="3" height="15" fill="rgb(249,84,49)"/><text x="465.00" y="318.50"></text></g><g><title>memcpy (libc-2.29.so) (2 samples, 0.13%)</title><rect x="469" y="340" width="2" height="15" fill="rgb(226,65,36)"/><text x="472.00" y="350.50"></text></g><g><title>array_reshape (methods.c) (16 samples, 1.01%)</title><rect x="459" y="276" width="12" height="15" fill="rgb(208,211,30)"/><text x="462.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (9 samples, 0.57%)</title><rect x="465" y="292" width="6" height="15" fill="rgb(241,52,47)"/><text x="468.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (9 samples, 0.57%)</title><rect x="465" y="308" width="6" height="15" fill="rgb(223,210,49)"/><text x="468.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (7 samples, 0.44%)</title><rect x="466" y="324" width="5" height="15" fill="rgb(211,13,7)"/><text x="469.00" y="334.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (61 samples, 3.85%)</title><rect x="430" y="228" width="46" height="15" fill="rgb(208,52,6)"/><text x="433.00" y="238.50">expa..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (58 samples, 3.66%)</title><rect x="433" y="244" width="43" height="15" fill="rgb(234,229,34)"/><text x="436.00" y="254.50">arra..</text></g><g><title>expand_dims (numpy/lib/shape_base.py) (54 samples, 3.41%)</title><rect x="436" y="260" width="40" height="15" fill="rgb(253,29,6)"/><text x="439.00" y="270.50">exp..</text></g><g><title>asanyarray (numpy/core/_asarray.py) (6 samples, 0.38%)</title><rect x="471" y="276" width="5" height="15" fill="rgb(237,35,53)"/><text x="474.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.13%)</title><rect x="474" y="292" width="2" height="15" fill="rgb(249,178,13)"/><text x="477.00" y="302.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (8 samples, 0.51%)</title><rect x="521" y="260" width="5" height="15" fill="rgb(217,121,17)"/><text x="524.00" y="270.50"></text></g><g><title>unicode_eq (python3.7) (2 samples, 0.13%)</title><rect x="525" y="276" width="1" height="15" fill="rgb(212,156,13)"/><text x="528.00" y="286.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (5 samples, 0.32%)</title><rect x="627" y="276" width="4" height="15" fill="rgb(253,94,54)"/><text x="630.00" y="286.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (2 samples, 0.13%)</title><rect x="644" y="292" width="2" height="15" fill="rgb(249,78,33)"/><text x="647.00" y="302.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (2 samples, 0.13%)</title><rect x="667" y="356" width="2" height="15" fill="rgb(210,66,45)"/><text x="670.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.13%)</title><rect x="667" y="372" width="2" height="15" fill="rgb(218,64,0)"/><text x="670.00" y="382.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (5 samples, 0.32%)</title><rect x="672" y="436" width="3" height="15" fill="rgb(205,54,7)"/><text x="675.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (9 samples, 0.57%)</title><rect x="671" y="388" width="7" height="15" fill="rgb(247,57,46)"/><text x="674.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (9 samples, 0.57%)</title><rect x="671" y="404" width="7" height="15" fill="rgb(225,56,19)"/><text x="674.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (9 samples, 0.57%)</title><rect x="671" y="420" width="7" height="15" fill="rgb(207,97,15)"/><text x="674.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h) (3 samples, 0.19%)</title><rect x="675" y="436" width="3" height="15" fill="rgb(239,158,40)"/><text x="678.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="678" y="404" width="2" height="15" fill="rgb(221,12,0)"/><text x="681.00" y="414.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (7 samples, 0.44%)</title><rect x="680" y="404" width="5" height="15" fill="rgb(248,205,47)"/><text x="683.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (5 samples, 0.32%)</title><rect x="681" y="420" width="4" height="15" fill="rgb(208,111,38)"/><text x="684.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (5 samples, 0.32%)</title><rect x="681" y="436" width="4" height="15" fill="rgb(235,158,34)"/><text x="684.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 0.32%)</title><rect x="681" y="452" width="4" height="15" fill="rgb(246,168,34)"/><text x="684.00" y="462.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c) (2 samples, 0.13%)</title><rect x="686" y="404" width="1" height="15" fill="rgb(249,70,23)"/><text x="689.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (15 samples, 0.95%)</title><rect x="678" y="388" width="11" height="15" fill="rgb(254,42,23)"/><text x="681.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (2 samples, 0.13%)</title><rect x="687" y="404" width="2" height="15" fill="rgb(227,205,17)"/><text x="690.00" y="414.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (4 samples, 0.25%)</title><rect x="689" y="388" width="3" height="15" fill="rgb(224,195,42)"/><text x="692.00" y="398.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (2 samples, 0.13%)</title><rect x="693" y="404" width="2" height="15" fill="rgb(234,113,27)"/><text x="696.00" y="414.50"></text></g><g><title>0x7f20e51eed50 (libc-2.29.so) (5 samples, 0.32%)</title><rect x="707" y="436" width="3" height="15" fill="rgb(242,2,18)"/><text x="710.00" y="446.50"></text></g><g><title>0x7f20e51eed5f (libc-2.29.so) (6 samples, 0.38%)</title><rect x="710" y="436" width="5" height="15" fill="rgb(217,104,13)"/><text x="713.00" y="446.50"></text></g><g><title>0x7f20e51eed67 (libc-2.29.so) (6 samples, 0.38%)</title><rect x="715" y="436" width="4" height="15" fill="rgb(242,69,48)"/><text x="718.00" y="446.50"></text></g><g><title>0x7f20e51eed6f (libc-2.29.so) (5 samples, 0.32%)</title><rect x="719" y="436" width="4" height="15" fill="rgb(222,148,54)"/><text x="722.00" y="446.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (42 samples, 2.65%)</title><rect x="693" y="388" width="32" height="15" fill="rgb(239,191,34)"/><text x="696.00" y="398.50">Np..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (40 samples, 2.53%)</title><rect x="695" y="404" width="30" height="15" fill="rgb(233,89,30)"/><text x="698.00" y="414.50">np..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (38 samples, 2.40%)</title><rect x="696" y="420" width="29" height="15" fill="rgb(232,1,19)"/><text x="699.00" y="430.50">Py..</text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src) (2 samples, 0.13%)</title><rect x="723" y="436" width="2" height="15" fill="rgb(232,145,7)"/><text x="726.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (76 samples, 4.80%)</title><rect x="670" y="356" width="56" height="15" fill="rgb(207,52,13)"/><text x="673.00" y="366.50">execu..</text></g><g><title>iterator_loop (ufunc_object.c) (75 samples, 4.73%)</title><rect x="670" y="372" width="56" height="15" fill="rgb(234,215,18)"/><text x="673.00" y="382.50">itera..</text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.19%)</title><rect x="726" y="356" width="2" height="15" fill="rgb(211,130,51)"/><text x="729.00" y="366.50"></text></g><g><title>PyArray_FromArray (ctors.c) (2 samples, 0.13%)</title><rect x="727" y="372" width="1" height="15" fill="rgb(206,172,48)"/><text x="730.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (86 samples, 5.43%)</title><rect x="665" y="340" width="64" height="15" fill="rgb(221,203,26)"/><text x="668.00" y="350.50">PyUFunc..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (98 samples, 6.19%)</title><rect x="657" y="308" width="73" height="15" fill="rgb(230,174,7)"/><text x="660.00" y="318.50">_run (ml..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (90 samples, 5.68%)</title><rect x="663" y="324" width="67" height="15" fill="rgb(232,73,44)"/><text x="666.00" y="334.50">ufunc_g..</text></g><g><title>0x7f20e51eed94 (libc-2.29.so) (5 samples, 0.32%)</title><rect x="740" y="388" width="4" height="15" fill="rgb(249,23,53)"/><text x="743.00" y="398.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (2 samples, 0.13%)</title><rect x="744" y="388" width="2" height="15" fill="rgb(225,1,7)"/><text x="747.00" y="398.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (5 samples, 0.32%)</title><rect x="746" y="388" width="3" height="15" fill="rgb(216,94,33)"/><text x="749.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (4 samples, 0.25%)</title><rect x="746" y="404" width="3" height="15" fill="rgb(212,202,31)"/><text x="749.00" y="414.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (18 samples, 1.14%)</title><rect x="738" y="356" width="13" height="15" fill="rgb(249,50,40)"/><text x="741.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (17 samples, 1.07%)</title><rect x="739" y="372" width="12" height="15" fill="rgb(220,38,36)"/><text x="742.00" y="382.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (2 samples, 0.13%)</title><rect x="750" y="388" width="1" height="15" fill="rgb(215,134,40)"/><text x="753.00" y="398.50"></text></g><g><title>array_alloc (arrayobject.c) (2 samples, 0.13%)</title><rect x="754" y="420" width="1" height="15" fill="rgb(240,1,40)"/><text x="757.00" y="430.50"></text></g><g><title>0x7f20e43f02d0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.13%)</title><rect x="755" y="468" width="2" height="15" fill="rgb(223,215,0)"/><text x="758.00" y="478.50"></text></g><g><title>npy_alloc_cache (alloc.c) (3 samples, 0.19%)</title><rect x="755" y="420" width="2" height="15" fill="rgb(245,30,53)"/><text x="758.00" y="430.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.19%)</title><rect x="755" y="436" width="2" height="15" fill="rgb(254,95,33)"/><text x="758.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (3 samples, 0.19%)</title><rect x="755" y="452" width="2" height="15" fill="rgb(210,33,53)"/><text x="758.00" y="462.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (38 samples, 2.40%)</title><rect x="730" y="308" width="28" height="15" fill="rgb(209,90,49)"/><text x="733.00" y="318.50">_..</text></g><g><title>array_copy (methods.c) (31 samples, 1.96%)</title><rect x="735" y="324" width="23" height="15" fill="rgb(250,68,4)"/><text x="738.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c) (28 samples, 1.77%)</title><rect x="737" y="340" width="21" height="15" fill="rgb(238,137,38)"/><text x="740.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (9 samples, 0.57%)</title><rect x="751" y="356" width="7" height="15" fill="rgb(238,74,51)"/><text x="754.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (7 samples, 0.44%)</title><rect x="753" y="372" width="5" height="15" fill="rgb(212,75,51)"/><text x="756.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (7 samples, 0.44%)</title><rect x="753" y="388" width="5" height="15" fill="rgb(220,213,54)"/><text x="756.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (7 samples, 0.44%)</title><rect x="753" y="404" width="5" height="15" fill="rgb(224,108,35)"/><text x="756.00" y="414.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (3 samples, 0.19%)</title><rect x="769" y="340" width="3" height="15" fill="rgb(205,14,49)"/><text x="772.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (3 samples, 0.19%)</title><rect x="769" y="356" width="3" height="15" fill="rgb(232,115,19)"/><text x="772.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c) (5 samples, 0.32%)</title><rect x="769" y="324" width="4" height="15" fill="rgb(217,120,18)"/><text x="772.00" y="334.50"></text></g><g><title>npy_free_cache (alloc.c) (2 samples, 0.13%)</title><rect x="772" y="340" width="1" height="15" fill="rgb(232,85,16)"/><text x="775.00" y="350.50"></text></g><g><title>_npy_free_cache (alloc.c) (2 samples, 0.13%)</title><rect x="772" y="356" width="1" height="15" fill="rgb(226,114,18)"/><text x="775.00" y="366.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (2 samples, 0.13%)</title><rect x="772" y="372" width="1" height="15" fill="rgb(248,163,38)"/><text x="775.00" y="382.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (2 samples, 0.13%)</title><rect x="773" y="324" width="2" height="15" fill="rgb(231,180,42)"/><text x="776.00" y="334.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (2 samples, 0.13%)</title><rect x="773" y="340" width="2" height="15" fill="rgb(224,82,3)"/><text x="776.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (2 samples, 0.13%)</title><rect x="773" y="356" width="2" height="15" fill="rgb(205,89,49)"/><text x="776.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (2 samples, 0.13%)</title><rect x="773" y="372" width="2" height="15" fill="rgb(213,227,17)"/><text x="776.00" y="382.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py) (2 samples, 0.13%)</title><rect x="779" y="340" width="2" height="15" fill="rgb(226,208,47)"/><text x="782.00" y="350.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (3 samples, 0.19%)</title><rect x="800" y="388" width="2" height="15" fill="rgb(226,183,13)"/><text x="803.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (6 samples, 0.38%)</title><rect x="802" y="404" width="5" height="15" fill="rgb(250,139,34)"/><text x="805.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (6 samples, 0.38%)</title><rect x="802" y="420" width="5" height="15" fill="rgb(239,225,49)"/><text x="805.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (6 samples, 0.38%)</title><rect x="802" y="436" width="5" height="15" fill="rgb(250,38,2)"/><text x="805.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (2 samples, 0.13%)</title><rect x="805" y="452" width="2" height="15" fill="rgb(226,145,50)"/><text x="808.00" y="462.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (2 samples, 0.13%)</title><rect x="812" y="420" width="1" height="15" fill="rgb(233,24,21)"/><text x="815.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (2 samples, 0.13%)</title><rect x="812" y="436" width="1" height="15" fill="rgb(244,229,35)"/><text x="815.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (2 samples, 0.13%)</title><rect x="812" y="452" width="1" height="15" fill="rgb(238,77,27)"/><text x="815.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (2 samples, 0.13%)</title><rect x="817" y="468" width="2" height="15" fill="rgb(225,62,38)"/><text x="820.00" y="478.50"></text></g><g><title>0x7f20e51cfb12 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="819" y="500" width="2" height="15" fill="rgb(253,107,14)"/><text x="822.00" y="510.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (4 samples, 0.25%)</title><rect x="819" y="468" width="2" height="15" fill="rgb(254,216,8)"/><text x="822.00" y="478.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.25%)</title><rect x="819" y="484" width="2" height="15" fill="rgb(250,40,38)"/><text x="822.00" y="494.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (3 samples, 0.19%)</title><rect x="821" y="468" width="3" height="15" fill="rgb(247,133,54)"/><text x="824.00" y="478.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (2 samples, 0.13%)</title><rect x="824" y="468" width="1" height="15" fill="rgb(219,125,11)"/><text x="827.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (16 samples, 1.01%)</title><rect x="814" y="452" width="12" height="15" fill="rgb(240,159,28)"/><text x="817.00" y="462.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (2 samples, 0.13%)</title><rect x="826" y="452" width="1" height="15" fill="rgb(243,148,9)"/><text x="829.00" y="462.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (3 samples, 0.19%)</title><rect x="828" y="452" width="2" height="15" fill="rgb(241,68,21)"/><text x="831.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (3 samples, 0.19%)</title><rect x="828" y="468" width="2" height="15" fill="rgb(227,72,27)"/><text x="831.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.13%)</title><rect x="829" y="484" width="1" height="15" fill="rgb(222,112,51)"/><text x="832.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.13%)</title><rect x="829" y="500" width="1" height="15" fill="rgb(224,37,23)"/><text x="832.00" y="510.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (4 samples, 0.25%)</title><rect x="836" y="500" width="3" height="15" fill="rgb(232,178,6)"/><text x="839.00" y="510.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (3 samples, 0.19%)</title><rect x="836" y="516" width="3" height="15" fill="rgb(228,224,36)"/><text x="839.00" y="526.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (3 samples, 0.19%)</title><rect x="836" y="532" width="3" height="15" fill="rgb(235,152,12)"/><text x="839.00" y="542.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c) (7 samples, 0.44%)</title><rect x="835" y="484" width="5" height="15" fill="rgb(232,175,4)"/><text x="838.00" y="494.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c) (2 samples, 0.13%)</title><rect x="842" y="500" width="1" height="15" fill="rgb(208,183,49)"/><text x="845.00" y="510.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (22 samples, 1.39%)</title><rect x="830" y="452" width="17" height="15" fill="rgb(229,61,49)"/><text x="833.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (18 samples, 1.14%)</title><rect x="833" y="468" width="14" height="15" fill="rgb(228,138,36)"/><text x="836.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (9 samples, 0.57%)</title><rect x="840" y="484" width="7" height="15" fill="rgb(208,77,10)"/><text x="843.00" y="494.50"></text></g><g><title>_aligned_strided_to_contig_size4_srcstride0 (lowlevel_strided_loops.c.src) (3 samples, 0.19%)</title><rect x="845" y="500" width="2" height="15" fill="rgb(206,24,24)"/><text x="848.00" y="510.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (2 samples, 0.13%)</title><rect x="848" y="452" width="1" height="15" fill="rgb(246,30,21)"/><text x="851.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src) (98 samples, 6.19%)</title><rect x="872" y="468" width="73" height="15" fill="rgb(215,40,54)"/><text x="875.00" y="478.50">FLOAT_ad..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (64 samples, 4.04%)</title><rect x="897" y="484" width="48" height="15" fill="rgb(213,104,25)"/><text x="900.00" y="494.50">pair..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (199 samples, 12.56%)</title><rect x="813" y="436" width="149" height="15" fill="rgb(225,39,37)"/><text x="816.00" y="446.50">PyUFunc_ReduceWrapp..</text></g><g><title>reduce_loop (ufunc_object.c) (151 samples, 9.53%)</title><rect x="849" y="452" width="113" height="15" fill="rgb(230,154,44)"/><text x="852.00" y="462.50">reduce_loop (..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (20 samples, 1.26%)</title><rect x="947" y="468" width="15" height="15" fill="rgb(225,175,51)"/><text x="950.00" y="478.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (256 samples, 16.16%)</title><rect x="775" y="324" width="190" height="15" fill="rgb(233,82,29)"/><text x="778.00" y="334.50">sum (&lt;__array_function__..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (248 samples, 15.66%)</title><rect x="781" y="340" width="184" height="15" fill="rgb(246,25,53)"/><text x="784.00" y="350.50">array_implement_array_f..</text></g><g><title>sum (numpy/core/fromnumeric.py) (242 samples, 15.28%)</title><rect x="785" y="356" width="180" height="15" fill="rgb(218,115,0)"/><text x="788.00" y="366.50">sum (numpy/core/fromnum..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (233 samples, 14.71%)</title><rect x="792" y="372" width="173" height="15" fill="rgb(226,73,31)"/><text x="795.00" y="382.50">_wrapreduction (numpy/..</text></g><g><title>ufunc_reduce (ufunc_object.c) (219 samples, 13.83%)</title><rect x="802" y="388" width="163" height="15" fill="rgb(247,114,19)"/><text x="805.00" y="398.50">ufunc_reduce (ufunc_o..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (213 samples, 13.45%)</title><rect x="807" y="404" width="158" height="15" fill="rgb(225,166,22)"/><text x="810.00" y="414.50">PyUFunc_GenericReduc..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (204 samples, 12.88%)</title><rect x="813" y="420" width="152" height="15" fill="rgb(206,175,34)"/><text x="816.00" y="430.50">PyUFunc_Reduce (ufu..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (5 samples, 0.32%)</title><rect x="962" y="436" width="3" height="15" fill="rgb(214,149,7)"/><text x="965.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (5 samples, 0.32%)</title><rect x="962" y="452" width="3" height="15" fill="rgb(222,60,34)"/><text x="965.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (4 samples, 0.25%)</title><rect x="962" y="468" width="3" height="15" fill="rgb(252,16,37)"/><text x="965.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (5 samples, 0.32%)</title><rect x="969" y="372" width="4" height="15" fill="rgb(254,208,19)"/><text x="972.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 0.32%)</title><rect x="969" y="388" width="4" height="15" fill="rgb(238,48,53)"/><text x="972.00" y="398.50"></text></g><g><title>npy_alloc_cache (alloc.c) (3 samples, 0.19%)</title><rect x="970" y="404" width="3" height="15" fill="rgb(223,199,21)"/><text x="973.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.19%)</title><rect x="970" y="420" width="3" height="15" fill="rgb(212,38,35)"/><text x="973.00" y="430.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (2 samples, 0.13%)</title><rect x="971" y="436" width="2" height="15" fill="rgb(210,19,30)"/><text x="974.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="971" y="452" width="2" height="15" fill="rgb(210,138,48)"/><text x="974.00" y="462.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h) (3 samples, 0.19%)</title><rect x="974" y="404" width="2" height="15" fill="rgb(235,206,45)"/><text x="977.00" y="414.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (7 samples, 0.44%)</title><rect x="976" y="404" width="6" height="15" fill="rgb(222,41,18)"/><text x="979.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (18 samples, 1.14%)</title><rect x="969" y="356" width="13" height="15" fill="rgb(248,132,11)"/><text x="972.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (13 samples, 0.82%)</title><rect x="973" y="372" width="9" height="15" fill="rgb(212,10,16)"/><text x="976.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (11 samples, 0.69%)</title><rect x="974" y="388" width="8" height="15" fill="rgb(240,91,8)"/><text x="977.00" y="398.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (2 samples, 0.13%)</title><rect x="982" y="356" width="2" height="15" fill="rgb(226,80,25)"/><text x="985.00" y="366.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (2 samples, 0.13%)</title><rect x="985" y="388" width="1" height="15" fill="rgb(227,184,33)"/><text x="988.00" y="398.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (4 samples, 0.25%)</title><rect x="984" y="356" width="3" height="15" fill="rgb(216,219,7)"/><text x="987.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (3 samples, 0.19%)</title><rect x="985" y="372" width="2" height="15" fill="rgb(228,151,30)"/><text x="988.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (31 samples, 1.96%)</title><rect x="966" y="340" width="23" height="15" fill="rgb(226,160,7)"/><text x="969.00" y="350.50">P..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (2 samples, 0.13%)</title><rect x="988" y="356" width="1" height="15" fill="rgb(221,199,4)"/><text x="991.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (2 samples, 0.13%)</title><rect x="988" y="372" width="1" height="15" fill="rgb(243,196,53)"/><text x="991.00" y="382.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (682 samples, 43.06%)</title><rect x="483" y="244" width="508" height="15" fill="rgb(215,61,2)"/><text x="486.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (623 samples, 39.33%)</title><rect x="526" y="260" width="465" height="15" fill="rgb(228,73,13)"/><text x="529.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (483 samples, 30.49%)</title><rect x="631" y="276" width="360" height="15" fill="rgb(246,121,34)"/><text x="634.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (463 samples, 29.23%)</title><rect x="646" y="292" width="345" height="15" fill="rgb(237,149,9)"/><text x="649.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (312 samples, 19.70%)</title><rect x="758" y="308" width="233" height="15" fill="rgb(239,174,14)"/><text x="761.00" y="318.50">_run (mlprodict/onnxrt/ops_cpu..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (34 samples, 2.15%)</title><rect x="965" y="324" width="26" height="15" fill="rgb(220,88,54)"/><text x="968.00" y="334.50">u..</text></g><g><title>_apply_array_wrap (ufunc_object.c) (2 samples, 0.13%)</title><rect x="989" y="340" width="2" height="15" fill="rgb(210,128,50)"/><text x="992.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (3 samples, 0.19%)</title><rect x="991" y="260" width="2" height="15" fill="rgb(214,126,12)"/><text x="994.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (3 samples, 0.19%)</title><rect x="991" y="276" width="2" height="15" fill="rgb(220,186,8)"/><text x="994.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (697 samples, 44.00%)</title><rect x="476" y="228" width="519" height="15" fill="rgb(221,212,2)"/><text x="479.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (6 samples, 0.38%)</title><rect x="991" y="244" width="4" height="15" fill="rgb(214,185,42)"/><text x="994.00" y="254.50"></text></g><g><title>npy_free_cache (alloc.c) (3 samples, 0.19%)</title><rect x="993" y="260" width="2" height="15" fill="rgb(235,26,14)"/><text x="996.00" y="270.50"></text></g><g><title>_npy_free_cache (alloc.c) (3 samples, 0.19%)</title><rect x="993" y="276" width="2" height="15" fill="rgb(229,19,21)"/><text x="996.00" y="286.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (3 samples, 0.19%)</title><rect x="993" y="292" width="2" height="15" fill="rgb(234,11,38)"/><text x="996.00" y="302.50"></text></g><g><title>0x7f20e51ceb1c (libc-2.29.so) (2 samples, 0.13%)</title><rect x="994" y="308" width="1" height="15" fill="rgb(213,144,1)"/><text x="997.00" y="318.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (3 samples, 0.19%)</title><rect x="996" y="276" width="2" height="15" fill="rgb(216,58,2)"/><text x="999.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.19%)</title><rect x="996" y="292" width="2" height="15" fill="rgb(222,8,37)"/><text x="999.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (3 samples, 0.19%)</title><rect x="996" y="308" width="2" height="15" fill="rgb(236,9,19)"/><text x="999.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (826 samples, 52.15%)</title><rect x="386" y="212" width="616" height="15" fill="rgb(240,125,15)"/><text x="389.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (9 samples, 0.57%)</title><rect x="995" y="228" width="7" height="15" fill="rgb(233,48,51)"/><text x="998.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 0.57%)</title><rect x="995" y="244" width="7" height="15" fill="rgb(228,226,13)"/><text x="998.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (8 samples, 0.51%)</title><rect x="996" y="260" width="6" height="15" fill="rgb(234,89,48)"/><text x="999.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (5 samples, 0.32%)</title><rect x="998" y="276" width="4" height="15" fill="rgb(241,80,29)"/><text x="1001.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 0.32%)</title><rect x="998" y="292" width="4" height="15" fill="rgb(250,127,8)"/><text x="1001.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (4 samples, 0.25%)</title><rect x="999" y="308" width="3" height="15" fill="rgb(245,51,44)"/><text x="1002.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (4 samples, 0.25%)</title><rect x="999" y="324" width="3" height="15" fill="rgb(223,83,22)"/><text x="1002.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (4 samples, 0.25%)</title><rect x="999" y="340" width="3" height="15" fill="rgb(225,7,20)"/><text x="1002.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (4 samples, 0.25%)</title><rect x="999" y="356" width="3" height="15" fill="rgb(208,197,16)"/><text x="1002.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (3 samples, 0.19%)</title><rect x="1000" y="372" width="2" height="15" fill="rgb(218,148,30)"/><text x="1003.00" y="382.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (2 samples, 0.13%)</title><rect x="1000" y="388" width="2" height="15" fill="rgb(227,205,12)"/><text x="1003.00" y="398.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src) (15 samples, 0.95%)</title><rect x="1008" y="372" width="12" height="15" fill="rgb(215,220,27)"/><text x="1011.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c) (15 samples, 0.95%)</title><rect x="1008" y="388" width="12" height="15" fill="rgb(221,63,35)"/><text x="1011.00" y="398.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (70 samples, 4.42%)</title><rect x="1003" y="340" width="52" height="15" fill="rgb(231,75,44)"/><text x="1006.00" y="350.50">PyArr..</text></g><g><title>_new_argsortlike (item_selection.c) (70 samples, 4.42%)</title><rect x="1003" y="356" width="52" height="15" fill="rgb(251,182,22)"/><text x="1006.00" y="366.50">_new_..</text></g><g><title>aintroselect_float (selection.c.src) (48 samples, 3.03%)</title><rect x="1020" y="372" width="35" height="15" fill="rgb(217,171,46)"/><text x="1023.00" y="382.50">ai..</text></g><g><title>adumb_select_float (selection.c.src) (48 samples, 3.03%)</title><rect x="1020" y="388" width="35" height="15" fill="rgb(243,36,48)"/><text x="1023.00" y="398.50">ad..</text></g><g><title>FLOAT_LT (npysort_common.h) (40 samples, 2.53%)</title><rect x="1026" y="404" width="29" height="15" fill="rgb(227,107,10)"/><text x="1029.00" y="414.50">FL..</text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (73 samples, 4.61%)</title><rect x="1003" y="260" width="54" height="15" fill="rgb(230,61,39)"/><text x="1006.00" y="270.50">argpa..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (73 samples, 4.61%)</title><rect x="1003" y="276" width="54" height="15" fill="rgb(250,130,21)"/><text x="1006.00" y="286.50">array..</text></g><g><title>argpartition (numpy/core/fromnumeric.py) (73 samples, 4.61%)</title><rect x="1003" y="292" width="54" height="15" fill="rgb(223,162,38)"/><text x="1006.00" y="302.50">argpa..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (73 samples, 4.61%)</title><rect x="1003" y="308" width="54" height="15" fill="rgb(226,25,11)"/><text x="1006.00" y="318.50">_wrap..</text></g><g><title>array_argpartition (methods.c) (72 samples, 4.55%)</title><rect x="1003" y="324" width="54" height="15" fill="rgb(215,38,28)"/><text x="1006.00" y="334.50">array..</text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.13%)</title><rect x="1055" y="340" width="2" height="15" fill="rgb(243,101,52)"/><text x="1058.00" y="350.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (3 samples, 0.19%)</title><rect x="1057" y="260" width="2" height="15" fill="rgb(232,77,43)"/><text x="1060.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.19%)</title><rect x="1057" y="276" width="2" height="15" fill="rgb(205,140,38)"/><text x="1060.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (3 samples, 0.19%)</title><rect x="1057" y="292" width="2" height="15" fill="rgb(252,183,32)"/><text x="1060.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (2 samples, 0.13%)</title><rect x="1058" y="308" width="1" height="15" fill="rgb(253,134,34)"/><text x="1061.00" y="318.50"></text></g><g><title>array_argsort (methods.c) (2 samples, 0.13%)</title><rect x="1058" y="324" width="1" height="15" fill="rgb(251,137,46)"/><text x="1061.00" y="334.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (2 samples, 0.13%)</title><rect x="1058" y="340" width="1" height="15" fill="rgb(218,61,13)"/><text x="1061.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (2 samples, 0.13%)</title><rect x="1058" y="356" width="1" height="15" fill="rgb(241,77,3)"/><text x="1061.00" y="366.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (2 samples, 0.13%)</title><rect x="1059" y="276" width="2" height="15" fill="rgb(216,96,7)"/><text x="1062.00" y="286.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (3 samples, 0.19%)</title><rect x="1061" y="276" width="2" height="15" fill="rgb(236,145,27)"/><text x="1064.00" y="286.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (3 samples, 0.19%)</title><rect x="1061" y="292" width="2" height="15" fill="rgb(253,154,45)"/><text x="1064.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (3 samples, 0.19%)</title><rect x="1061" y="308" width="2" height="15" fill="rgb(211,71,3)"/><text x="1064.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (3 samples, 0.19%)</title><rect x="1061" y="324" width="2" height="15" fill="rgb(230,76,1)"/><text x="1064.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (3 samples, 0.19%)</title><rect x="1061" y="340" width="2" height="15" fill="rgb(210,128,26)"/><text x="1064.00" y="350.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (6 samples, 0.38%)</title><rect x="1063" y="276" width="4" height="15" fill="rgb(219,101,20)"/><text x="1066.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (90 samples, 5.68%)</title><rect x="1002" y="212" width="67" height="15" fill="rgb(216,100,4)"/><text x="1005.00" y="222.50">_run (m..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (90 samples, 5.68%)</title><rect x="1002" y="228" width="67" height="15" fill="rgb(246,208,33)"/><text x="1005.00" y="238.50">_common..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (89 samples, 5.62%)</title><rect x="1003" y="244" width="66" height="15" fill="rgb(220,208,38)"/><text x="1006.00" y="254.50">topk_so..</text></g><g><title>array_subscript (mapping.c) (13 samples, 0.82%)</title><rect x="1059" y="260" width="10" height="15" fill="rgb(217,215,39)"/><text x="1062.00" y="270.50"></text></g><g><title>prepare_index (mapping.c) (2 samples, 0.13%)</title><rect x="1067" y="276" width="2" height="15" fill="rgb(205,198,7)"/><text x="1070.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.19%)</title><rect x="1069" y="212" width="2" height="15" fill="rgb(234,75,20)"/><text x="1072.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.13%)</title><rect x="1070" y="228" width="1" height="15" fill="rgb(228,201,48)"/><text x="1073.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py) (5 samples, 0.32%)</title><rect x="1071" y="228" width="4" height="15" fill="rgb(207,25,1)"/><text x="1074.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;) (5 samples, 0.32%)</title><rect x="1071" y="244" width="4" height="15" fill="rgb(212,229,25)"/><text x="1074.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 0.32%)</title><rect x="1071" y="260" width="4" height="15" fill="rgb(249,91,29)"/><text x="1074.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (5 samples, 0.32%)</title><rect x="1071" y="276" width="4" height="15" fill="rgb(219,64,46)"/><text x="1074.00" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py) (3 samples, 0.19%)</title><rect x="1073" y="292" width="2" height="15" fill="rgb(244,193,26)"/><text x="1076.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1073" y="308" width="2" height="15" fill="rgb(211,113,40)"/><text x="1076.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1073" y="324" width="2" height="15" fill="rgb(254,193,43)"/><text x="1076.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1073" y="340" width="2" height="15" fill="rgb(225,38,30)"/><text x="1076.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (2 samples, 0.13%)</title><rect x="1073" y="356" width="2" height="15" fill="rgb(205,58,54)"/><text x="1076.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1073" y="372" width="2" height="15" fill="rgb(236,200,0)"/><text x="1076.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (3 samples, 0.19%)</title><rect x="1075" y="228" width="2" height="15" fill="rgb(209,177,23)"/><text x="1078.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1075" y="244" width="2" height="15" fill="rgb(237,2,1)"/><text x="1078.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1075" y="260" width="2" height="15" fill="rgb(212,185,4)"/><text x="1078.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1075" y="276" width="2" height="15" fill="rgb(235,214,5)"/><text x="1078.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1075" y="292" width="2" height="15" fill="rgb(254,137,41)"/><text x="1078.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src) (3 samples, 0.19%)</title><rect x="1075" y="308" width="2" height="15" fill="rgb(228,164,12)"/><text x="1078.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src) (3 samples, 0.19%)</title><rect x="1075" y="324" width="2" height="15" fill="rgb(205,101,52)"/><text x="1078.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src) (3 samples, 0.19%)</title><rect x="1075" y="340" width="2" height="15" fill="rgb(238,132,31)"/><text x="1078.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (3 samples, 0.19%)</title><rect x="1075" y="356" width="2" height="15" fill="rgb(232,50,27)"/><text x="1078.00" y="366.50"></text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (948 samples, 59.85%)</title><rect x="372" y="68" width="706" height="15" fill="rgb(229,90,42)"/><text x="375.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_fl..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (948 samples, 59.85%)</title><rect x="372" y="84" width="706" height="15" fill="rgb(248,202,54)"/><text x="375.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_f..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (948 samples, 59.85%)</title><rect x="372" y="100" width="706" height="15" fill="rgb(217,194,27)"/><text x="375.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_...</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (948 samples, 59.85%)</title><rect x="372" y="116" width="706" height="15" fill="rgb(254,105,49)"/><text x="375.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (948 samples, 59.85%)</title><rect x="372" y="132" width="706" height="15" fill="rgb(207,155,28)"/><text x="375.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (948 samples, 59.85%)</title><rect x="372" y="148" width="706" height="15" fill="rgb(217,150,1)"/><text x="375.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (948 samples, 59.85%)</title><rect x="372" y="164" width="706" height="15" fill="rgb(241,108,43)"/><text x="375.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (946 samples, 59.72%)</title><rect x="373" y="180" width="705" height="15" fill="rgb(254,71,19)"/><text x="376.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (943 samples, 59.53%)</title><rect x="375" y="196" width="703" height="15" fill="rgb(228,202,44)"/><text x="378.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (9 samples, 0.57%)</title><rect x="1071" y="212" width="7" height="15" fill="rgb(254,106,48)"/><text x="1074.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (2 samples, 0.13%)</title><rect x="1078" y="164" width="1" height="15" fill="rgb(247,207,7)"/><text x="1081.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (2 samples, 0.13%)</title><rect x="1079" y="164" width="2" height="15" fill="rgb(237,190,24)"/><text x="1082.00" y="174.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (2 samples, 0.13%)</title><rect x="1079" y="180" width="2" height="15" fill="rgb(238,118,40)"/><text x="1082.00" y="190.50"></text></g><g><title>_check_chunk_size (sklearn/metrics/pairwise.py) (3 samples, 0.19%)</title><rect x="1084" y="196" width="3" height="15" fill="rgb(212,224,13)"/><text x="1087.00" y="206.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/metrics/pairwise.py) (2 samples, 0.13%)</title><rect x="1085" y="212" width="2" height="15" fill="rgb(206,67,35)"/><text x="1088.00" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (2 samples, 0.13%)</title><rect x="1085" y="228" width="2" height="15" fill="rgb(250,117,38)"/><text x="1088.00" y="238.50"></text></g><g><title>adumb_select_double (selection.c.src) (53 samples, 3.35%)</title><rect x="1089" y="340" width="39" height="15" fill="rgb(253,27,34)"/><text x="1092.00" y="350.50">adu..</text></g><g><title>DOUBLE_LT (npysort_common.h) (45 samples, 2.84%)</title><rect x="1095" y="356" width="33" height="15" fill="rgb(205,0,25)"/><text x="1098.00" y="366.50">DO..</text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (57 samples, 3.60%)</title><rect x="1087" y="212" width="42" height="15" fill="rgb(252,181,24)"/><text x="1090.00" y="222.50">arg..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (57 samples, 3.60%)</title><rect x="1087" y="228" width="42" height="15" fill="rgb(212,109,37)"/><text x="1090.00" y="238.50">arr..</text></g><g><title>argpartition (numpy/core/fromnumeric.py) (57 samples, 3.60%)</title><rect x="1087" y="244" width="42" height="15" fill="rgb(252,7,31)"/><text x="1090.00" y="254.50">arg..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (57 samples, 3.60%)</title><rect x="1087" y="260" width="42" height="15" fill="rgb(221,223,33)"/><text x="1090.00" y="270.50">_wr..</text></g><g><title>array_argpartition (methods.c) (57 samples, 3.60%)</title><rect x="1087" y="276" width="42" height="15" fill="rgb(235,139,54)"/><text x="1090.00" y="286.50">arr..</text></g><g><title>PyArray_ArgPartition (item_selection.c) (57 samples, 3.60%)</title><rect x="1087" y="292" width="42" height="15" fill="rgb(205,201,11)"/><text x="1090.00" y="302.50">PyA..</text></g><g><title>_new_argsortlike (item_selection.c) (57 samples, 3.60%)</title><rect x="1087" y="308" width="42" height="15" fill="rgb(244,47,39)"/><text x="1090.00" y="318.50">_ne..</text></g><g><title>aintroselect_double (selection.c.src) (54 samples, 3.41%)</title><rect x="1089" y="324" width="40" height="15" fill="rgb(249,92,51)"/><text x="1092.00" y="334.50">ain..</text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (3 samples, 0.19%)</title><rect x="1129" y="212" width="2" height="15" fill="rgb(246,123,35)"/><text x="1132.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.19%)</title><rect x="1129" y="228" width="2" height="15" fill="rgb(244,7,10)"/><text x="1132.00" y="238.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (3 samples, 0.19%)</title><rect x="1129" y="244" width="2" height="15" fill="rgb(239,41,4)"/><text x="1132.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (3 samples, 0.19%)</title><rect x="1129" y="260" width="2" height="15" fill="rgb(216,175,43)"/><text x="1132.00" y="270.50"></text></g><g><title>array_argsort (methods.c) (3 samples, 0.19%)</title><rect x="1129" y="276" width="2" height="15" fill="rgb(234,196,21)"/><text x="1132.00" y="286.50"></text></g><g><title>PyArray_ArgSort (item_selection.c) (3 samples, 0.19%)</title><rect x="1129" y="292" width="2" height="15" fill="rgb(223,118,28)"/><text x="1132.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c) (3 samples, 0.19%)</title><rect x="1129" y="308" width="2" height="15" fill="rgb(237,60,33)"/><text x="1132.00" y="318.50"></text></g><g><title>NpyIter_New (nditer_constr.c) (2 samples, 0.13%)</title><rect x="1131" y="244" width="2" height="15" fill="rgb(240,164,37)"/><text x="1134.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.13%)</title><rect x="1131" y="260" width="2" height="15" fill="rgb(211,17,41)"/><text x="1134.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (2 samples, 0.13%)</title><rect x="1131" y="276" width="2" height="15" fill="rgb(232,64,17)"/><text x="1134.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (2 samples, 0.13%)</title><rect x="1131" y="292" width="2" height="15" fill="rgb(224,163,30)"/><text x="1134.00" y="302.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (3 samples, 0.19%)</title><rect x="1131" y="228" width="3" height="15" fill="rgb(244,68,13)"/><text x="1134.00" y="238.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (2 samples, 0.13%)</title><rect x="1134" y="244" width="1" height="15" fill="rgb(216,165,34)"/><text x="1137.00" y="254.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (2 samples, 0.13%)</title><rect x="1134" y="260" width="1" height="15" fill="rgb(236,155,47)"/><text x="1137.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (2 samples, 0.13%)</title><rect x="1134" y="276" width="1" height="15" fill="rgb(244,20,28)"/><text x="1137.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (2 samples, 0.13%)</title><rect x="1134" y="292" width="1" height="15" fill="rgb(216,190,28)"/><text x="1137.00" y="302.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (2 samples, 0.13%)</title><rect x="1134" y="308" width="1" height="15" fill="rgb(249,0,11)"/><text x="1137.00" y="318.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (3 samples, 0.19%)</title><rect x="1134" y="228" width="2" height="15" fill="rgb(231,176,13)"/><text x="1137.00" y="238.50"></text></g><g><title>array_subscript (mapping.c) (14 samples, 0.88%)</title><rect x="1131" y="212" width="11" height="15" fill="rgb(228,160,44)"/><text x="1134.00" y="222.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (7 samples, 0.44%)</title><rect x="1137" y="228" width="5" height="15" fill="rgb(235,170,45)"/><text x="1140.00" y="238.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py) (76 samples, 4.80%)</title><rect x="1087" y="196" width="56" height="15" fill="rgb(237,156,28)"/><text x="1090.00" y="206.50">_knei..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1142" y="212" width="1" height="15" fill="rgb(217,95,52)"/><text x="1145.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1142" y="228" width="1" height="15" fill="rgb(218,186,6)"/><text x="1145.00" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1142" y="244" width="1" height="15" fill="rgb(215,1,8)"/><text x="1145.00" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1142" y="260" width="1" height="15" fill="rgb(230,84,31)"/><text x="1145.00" y="270.50"></text></g><g><title>DOUBLE_sqrt (loops.c.src) (2 samples, 0.13%)</title><rect x="1142" y="276" width="1" height="15" fill="rgb(213,157,3)"/><text x="1145.00" y="286.50"></text></g><g><title>run_unary_simd_sqrt_DOUBLE (simd.inc.src) (2 samples, 0.13%)</title><rect x="1142" y="292" width="1" height="15" fill="rgb(210,33,24)"/><text x="1145.00" y="302.50"></text></g><g><title>sse2_sqrt_DOUBLE (simd.inc.src) (2 samples, 0.13%)</title><rect x="1142" y="308" width="1" height="15" fill="rgb(212,177,6)"/><text x="1145.00" y="318.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (2 samples, 0.13%)</title><rect x="1142" y="324" width="1" height="15" fill="rgb(209,120,47)"/><text x="1145.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1146" y="292" width="1" height="15" fill="rgb(216,61,22)"/><text x="1149.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1146" y="308" width="1" height="15" fill="rgb(228,112,31)"/><text x="1149.00" y="318.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1146" y="324" width="1" height="15" fill="rgb(216,164,14)"/><text x="1149.00" y="334.50"></text></g><g><title>sse2_binary_scalar2_multiply_DOUBLE (simd.inc.src) (2 samples, 0.13%)</title><rect x="1146" y="340" width="1" height="15" fill="rgb(231,48,26)"/><text x="1149.00" y="350.50"></text></g><g><title>array_multiply (number.c) (3 samples, 0.19%)</title><rect x="1146" y="244" width="2" height="15" fill="rgb(215,169,39)"/><text x="1149.00" y="254.50"></text></g><g><title>try_binary_elide (temp_elide.c) (3 samples, 0.19%)</title><rect x="1146" y="260" width="2" height="15" fill="rgb(243,79,54)"/><text x="1149.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1146" y="276" width="2" height="15" fill="rgb(240,116,42)"/><text x="1149.00" y="286.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py) (3 samples, 0.19%)</title><rect x="1148" y="244" width="2" height="15" fill="rgb(242,174,29)"/><text x="1151.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (3 samples, 0.19%)</title><rect x="1148" y="260" width="2" height="15" fill="rgb(219,106,48)"/><text x="1151.00" y="270.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (7 samples, 0.44%)</title><rect x="1151" y="244" width="5" height="15" fill="rgb(224,217,15)"/><text x="1154.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (7 samples, 0.44%)</title><rect x="1151" y="260" width="5" height="15" fill="rgb(228,197,44)"/><text x="1154.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 0.44%)</title><rect x="1151" y="276" width="5" height="15" fill="rgb(217,38,37)"/><text x="1154.00" y="286.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (7 samples, 0.44%)</title><rect x="1151" y="292" width="5" height="15" fill="rgb(253,158,30)"/><text x="1154.00" y="302.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src) (7 samples, 0.44%)</title><rect x="1151" y="308" width="5" height="15" fill="rgb(232,2,5)"/><text x="1154.00" y="318.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 0.44%)</title><rect x="1151" y="324" width="5" height="15" fill="rgb(208,169,22)"/><text x="1154.00" y="334.50"></text></g><g><title>dgemm_thread_tn (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 0.44%)</title><rect x="1151" y="340" width="5" height="15" fill="rgb(248,186,0)"/><text x="1154.00" y="350.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 0.44%)</title><rect x="1151" y="356" width="5" height="15" fill="rgb(233,203,11)"/><text x="1154.00" y="366.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 0.44%)</title><rect x="1151" y="372" width="5" height="15" fill="rgb(213,208,14)"/><text x="1154.00" y="382.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 0.44%)</title><rect x="1151" y="388" width="5" height="15" fill="rgb(218,209,40)"/><text x="1154.00" y="398.50"></text></g><g><title>sched_yield (libc-2.29.so) (7 samples, 0.44%)</title><rect x="1151" y="404" width="5" height="15" fill="rgb(242,148,29)"/><text x="1154.00" y="414.50"></text></g><g><title>_mm_add_pd (emmintrin.h) (11 samples, 0.69%)</title><rect x="1156" y="356" width="8" height="15" fill="rgb(220,50,29)"/><text x="1159.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src) (17 samples, 1.07%)</title><rect x="1156" y="308" width="13" height="15" fill="rgb(206,52,1)"/><text x="1159.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (17 samples, 1.07%)</title><rect x="1156" y="324" width="13" height="15" fill="rgb(231,181,21)"/><text x="1159.00" y="334.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (17 samples, 1.07%)</title><rect x="1156" y="340" width="13" height="15" fill="rgb(219,84,13)"/><text x="1159.00" y="350.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (6 samples, 0.38%)</title><rect x="1164" y="356" width="5" height="15" fill="rgb(221,150,24)"/><text x="1167.00" y="366.50"></text></g><g><title>0x7f20e51eef58 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="1170" y="356" width="2" height="15" fill="rgb(237,155,3)"/><text x="1173.00" y="366.50"></text></g><g><title>iterator_loop (ufunc_object.c) (25 samples, 1.58%)</title><rect x="1156" y="292" width="19" height="15" fill="rgb(207,228,6)"/><text x="1159.00" y="302.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (7 samples, 0.44%)</title><rect x="1169" y="308" width="6" height="15" fill="rgb(243,220,51)"/><text x="1172.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (7 samples, 0.44%)</title><rect x="1169" y="324" width="6" height="15" fill="rgb(252,13,29)"/><text x="1172.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (7 samples, 0.44%)</title><rect x="1169" y="340" width="6" height="15" fill="rgb(209,181,43)"/><text x="1172.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (3 samples, 0.19%)</title><rect x="1172" y="356" width="3" height="15" fill="rgb(245,36,8)"/><text x="1175.00" y="366.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py) (131 samples, 8.27%)</title><rect x="1083" y="180" width="98" height="15" fill="rgb(223,105,12)"/><text x="1086.00" y="190.50">pairwise_di..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py) (48 samples, 3.03%)</title><rect x="1145" y="196" width="36" height="15" fill="rgb(214,96,44)"/><text x="1148.00" y="206.50">pai..</text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py) (48 samples, 3.03%)</title><rect x="1145" y="212" width="36" height="15" fill="rgb(223,7,22)"/><text x="1148.00" y="222.50">_pa..</text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py) (47 samples, 2.97%)</title><rect x="1146" y="228" width="35" height="15" fill="rgb(244,105,25)"/><text x="1149.00" y="238.50">eu..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (33 samples, 2.08%)</title><rect x="1156" y="244" width="25" height="15" fill="rgb(208,130,8)"/><text x="1159.00" y="254.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (33 samples, 2.08%)</title><rect x="1156" y="260" width="25" height="15" fill="rgb(242,228,25)"/><text x="1159.00" y="270.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (33 samples, 2.08%)</title><rect x="1156" y="276" width="25" height="15" fill="rgb(222,55,7)"/><text x="1159.00" y="286.50">e..</text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (8 samples, 0.51%)</title><rect x="1175" y="292" width="6" height="15" fill="rgb(228,170,50)"/><text x="1178.00" y="302.50"></text></g><g><title>DOUBLE_maximum (loops.c.src) (8 samples, 0.51%)</title><rect x="1175" y="308" width="6" height="15" fill="rgb(228,188,20)"/><text x="1178.00" y="318.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (139 samples, 8.78%)</title><rect x="1081" y="164" width="103" height="15" fill="rgb(252,217,38)"/><text x="1084.00" y="174.50">kneighbors (..</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (5 samples, 0.32%)</title><rect x="1181" y="180" width="3" height="15" fill="rgb(248,80,25)"/><text x="1184.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 0.32%)</title><rect x="1181" y="196" width="3" height="15" fill="rgb(242,154,15)"/><text x="1184.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (5 samples, 0.32%)</title><rect x="1181" y="212" width="3" height="15" fill="rgb(244,174,34)"/><text x="1184.00" y="222.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (3 samples, 0.19%)</title><rect x="1182" y="228" width="2" height="15" fill="rgb(254,122,44)"/><text x="1185.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.19%)</title><rect x="1182" y="244" width="2" height="15" fill="rgb(254,14,50)"/><text x="1185.00" y="254.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (3 samples, 0.19%)</title><rect x="1182" y="260" width="2" height="15" fill="rgb(247,1,7)"/><text x="1185.00" y="270.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (2 samples, 0.13%)</title><rect x="1183" y="276" width="1" height="15" fill="rgb(232,69,22)"/><text x="1186.00" y="286.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (2 samples, 0.13%)</title><rect x="1187" y="276" width="1" height="15" fill="rgb(244,221,27)"/><text x="1190.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.13%)</title><rect x="1187" y="292" width="1" height="15" fill="rgb(229,34,46)"/><text x="1190.00" y="302.50"></text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (149 samples, 9.41%)</title><rect x="1078" y="68" width="111" height="15" fill="rgb(207,40,12)"/><text x="1081.00" y="78.50">profile_skl (..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (149 samples, 9.41%)</title><rect x="1078" y="84" width="111" height="15" fill="rgb(213,16,11)"/><text x="1081.00" y="94.50">setup_profile..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (149 samples, 9.41%)</title><rect x="1078" y="100" width="111" height="15" fill="rgb(239,121,6)"/><text x="1081.00" y="110.50">profile (benc..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (149 samples, 9.41%)</title><rect x="1078" y="116" width="111" height="15" fill="rgb(205,55,31)"/><text x="1081.00" y="126.50">time_predict ..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (149 samples, 9.41%)</title><rect x="1078" y="132" width="111" height="15" fill="rgb(254,88,6)"/><text x="1081.00" y="142.50">&lt;lambda&gt; (mlp..</text></g><g><title>predict (sklearn/neighbors/_regression.py) (149 samples, 9.41%)</title><rect x="1078" y="148" width="111" height="15" fill="rgb(214,119,3)"/><text x="1081.00" y="158.50">predict (skle..</text></g><g><title>mean (&lt;__array_function__ internals&gt;) (6 samples, 0.38%)</title><rect x="1184" y="164" width="5" height="15" fill="rgb(213,44,36)"/><text x="1187.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.38%)</title><rect x="1184" y="180" width="5" height="15" fill="rgb(218,159,2)"/><text x="1187.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (5 samples, 0.32%)</title><rect x="1185" y="196" width="4" height="15" fill="rgb(221,211,37)"/><text x="1188.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py) (4 samples, 0.25%)</title><rect x="1186" y="212" width="3" height="15" fill="rgb(208,136,28)"/><text x="1189.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1187" y="228" width="2" height="15" fill="rgb(230,49,13)"/><text x="1190.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1187" y="244" width="2" height="15" fill="rgb(209,50,49)"/><text x="1190.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1187" y="260" width="2" height="15" fill="rgb(219,163,47)"/><text x="1190.00" y="270.50"></text></g><g><title>all (1,584 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(240,131,42)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py) (1,584 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(247,132,43)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1000_4_12_float_.py)</text></g></g></svg>