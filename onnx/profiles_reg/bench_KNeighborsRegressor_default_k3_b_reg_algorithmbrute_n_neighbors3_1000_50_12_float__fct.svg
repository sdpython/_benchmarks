<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="598" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="581.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="581.00"> </text><g id="frames"><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="10" y="196" width="1" height="15" fill="rgb(211,140,51)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="10" y="212" width="1" height="15" fill="rgb(241,212,27)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="10" y="228" width="1" height="15" fill="rgb(254,83,39)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="10" y="244" width="1" height="15" fill="rgb(248,40,13)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.12%)</title><rect x="10" y="260" width="1" height="15" fill="rgb(217,91,12)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.12%)</title><rect x="10" y="276" width="1" height="15" fill="rgb(244,35,5)"/><text x="13.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="10" y="68" width="2" height="15" fill="rgb(228,109,34)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="10" y="84" width="2" height="15" fill="rgb(250,163,15)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="10" y="100" width="2" height="15" fill="rgb(220,65,41)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.19%)</title><rect x="10" y="116" width="2" height="15" fill="rgb(227,13,41)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="10" y="132" width="2" height="15" fill="rgb(215,141,35)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py) (8 samples, 0.19%)</title><rect x="10" y="148" width="2" height="15" fill="rgb(210,85,42)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="10" y="164" width="2" height="15" fill="rgb(233,2,38)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.19%)</title><rect x="10" y="180" width="2" height="15" fill="rgb(223,221,33)"/><text x="13.00" y="190.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.09%)</title><rect x="14" y="388" width="1" height="15" fill="rgb(227,16,23)"/><text x="17.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.09%)</title><rect x="14" y="404" width="1" height="15" fill="rgb(217,55,51)"/><text x="17.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.28%)</title><rect x="16" y="436" width="3" height="15" fill="rgb(230,12,42)"/><text x="19.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.14%)</title><rect x="18" y="452" width="1" height="15" fill="rgb(250,90,33)"/><text x="21.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.14%)</title><rect x="18" y="468" width="1" height="15" fill="rgb(206,59,14)"/><text x="21.00" y="478.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.12%)</title><rect x="18" y="484" width="1" height="15" fill="rgb(224,131,34)"/><text x="21.00" y="494.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.09%)</title><rect x="19" y="436" width="1" height="15" fill="rgb(209,187,14)"/><text x="22.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.09%)</title><rect x="19" y="452" width="1" height="15" fill="rgb(227,201,51)"/><text x="22.00" y="462.50"></text></g><g><title>0x7fb745a38d94 (libc-2.29.so) (125 samples, 2.97%)</title><rect x="21" y="452" width="35" height="15" fill="rgb(216,72,50)"/><text x="24.00" y="462.50">0x..</text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (130 samples, 3.09%)</title><rect x="20" y="436" width="37" height="15" fill="rgb(247,213,48)"/><text x="23.00" y="446.50">onn..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (78 samples, 1.85%)</title><rect x="519" y="468" width="22" height="15" fill="rgb(231,45,5)"/><text x="522.00" y="478.50">s..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,648 samples, 39.14%)</title><rect x="80" y="452" width="462" height="15" fill="rgb(233,39,21)"/><text x="83.00" y="462.50">onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxrunt..</text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1,729 samples, 41.06%)</title><rect x="57" y="436" width="485" height="15" fill="rgb(244,229,42)"/><text x="60.00" y="446.50">onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onn..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (287 samples, 6.82%)</title><rect x="542" y="468" width="81" height="15" fill="rgb(225,154,14)"/><text x="545.00" y="478.50">onnxrunti..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (55 samples, 1.31%)</title><rect x="607" y="484" width="16" height="15" fill="rgb(251,204,25)"/><text x="610.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.12%)</title><rect x="624" y="500" width="2" height="15" fill="rgb(249,79,50)"/><text x="627.00" y="510.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.24%)</title><rect x="623" y="468" width="3" height="15" fill="rgb(218,133,31)"/><text x="626.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.24%)</title><rect x="623" y="484" width="3" height="15" fill="rgb(213,145,27)"/><text x="626.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,189 samples, 51.98%)</title><rect x="13" y="340" width="613" height="15" fill="rgb(218,111,19)"/><text x="16.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,189 samples, 51.98%)</title><rect x="13" y="356" width="613" height="15" fill="rgb(229,163,53)"/><text x="16.00" y="366.50">onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,189 samples, 51.98%)</title><rect x="13" y="372" width="613" height="15" fill="rgb(222,211,48)"/><text x="16.00" y="382.50">onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_st..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,181 samples, 51.79%)</title><rect x="15" y="388" width="611" height="15" fill="rgb(218,74,49)"/><text x="18.00" y="398.50">onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,181 samples, 51.79%)</title><rect x="15" y="404" width="611" height="15" fill="rgb(231,160,35)"/><text x="18.00" y="414.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,181 samples, 51.79%)</title><rect x="15" y="420" width="611" height="15" fill="rgb(238,17,21)"/><text x="18.00" y="430.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_stat..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (301 samples, 7.15%)</title><rect x="542" y="436" width="84" height="15" fill="rgb(247,93,28)"/><text x="545.00" y="446.50">onnxrunti..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (301 samples, 7.15%)</title><rect x="542" y="452" width="84" height="15" fill="rgb(205,206,30)"/><text x="545.00" y="462.50">onnxrunti..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.09%)</title><rect x="626" y="340" width="1" height="15" fill="rgb(228,62,38)"/><text x="629.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (5 samples, 0.12%)</title><rect x="658" y="372" width="2" height="15" fill="rgb(239,205,9)"/><text x="661.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.12%)</title><rect x="658" y="388" width="2" height="15" fill="rgb(219,226,23)"/><text x="661.00" y="398.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (125 samples, 2.97%)</title><rect x="627" y="340" width="35" height="15" fill="rgb(226,160,26)"/><text x="630.00" y="350.50">on..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (125 samples, 2.97%)</title><rect x="627" y="356" width="35" height="15" fill="rgb(230,11,43)"/><text x="630.00" y="366.50">on..</text></g><g><title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.21%)</title><rect x="660" y="372" width="2" height="15" fill="rgb(225,138,13)"/><text x="663.00" y="382.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (43 samples, 1.02%)</title><rect x="662" y="340" width="12" height="15" fill="rgb(242,40,15)"/><text x="665.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (43 samples, 1.02%)</title><rect x="662" y="356" width="12" height="15" fill="rgb(251,217,11)"/><text x="665.00" y="366.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,363 samples, 56.11%)</title><rect x="13" y="244" width="662" height="15" fill="rgb(235,187,4)"/><text x="16.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSes..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,363 samples, 56.11%)</title><rect x="13" y="260" width="662" height="15" fill="rgb(232,229,18)"/><text x="16.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,363 samples, 56.11%)</title><rect x="13" y="276" width="662" height="15" fill="rgb(221,128,41)"/><text x="16.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,363 samples, 56.11%)</title><rect x="13" y="292" width="662" height="15" fill="rgb(233,147,1)"/><text x="16.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,363 samples, 56.11%)</title><rect x="13" y="308" width="662" height="15" fill="rgb(207,73,36)"/><text x="16.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,363 samples, 56.11%)</title><rect x="13" y="324" width="662" height="15" fill="rgb(231,176,0)"/><text x="16.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (2,365 samples, 56.16%)</title><rect x="12" y="100" width="663" height="15" fill="rgb(213,7,0)"/><text x="15.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (2,365 samples, 56.16%)</title><rect x="12" y="116" width="663" height="15" fill="rgb(250,204,33)"/><text x="15.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (2,365 samples, 56.16%)</title><rect x="12" y="132" width="663" height="15" fill="rgb(232,120,43)"/><text x="15.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (2,365 samples, 56.16%)</title><rect x="12" y="148" width="663" height="15" fill="rgb(214,223,52)"/><text x="15.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (2,365 samples, 56.16%)</title><rect x="12" y="164" width="663" height="15" fill="rgb(229,198,41)"/><text x="15.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (2,365 samples, 56.16%)</title><rect x="12" y="180" width="663" height="15" fill="rgb(231,224,37)"/><text x="15.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (2,365 samples, 56.16%)</title><rect x="12" y="196" width="663" height="15" fill="rgb(250,173,29)"/><text x="15.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,364 samples, 56.14%)</title><rect x="13" y="212" width="662" height="15" fill="rgb(249,141,24)"/><text x="16.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2,364 samples, 56.14%)</title><rect x="13" y="228" width="662" height="15" fill="rgb(252,98,9)"/><text x="16.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::mod..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (2,367 samples, 56.21%)</title><rect x="12" y="68" width="664" height="15" fill="rgb(252,145,2)"/><text x="15.00" y="78.50">profile_ort (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (2,367 samples, 56.21%)</title><rect x="12" y="84" width="664" height="15" fill="rgb(225,20,38)"/><text x="15.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_..</text></g><g><title>PyArray_AssignFromSequence (ctors.c) (5 samples, 0.12%)</title><rect x="678" y="276" width="1" height="15" fill="rgb(252,76,33)"/><text x="681.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c) (5 samples, 0.12%)</title><rect x="678" y="292" width="1" height="15" fill="rgb(206,189,19)"/><text x="681.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (4 samples, 0.09%)</title><rect x="678" y="308" width="1" height="15" fill="rgb(226,148,9)"/><text x="681.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src) (4 samples, 0.09%)</title><rect x="678" y="324" width="1" height="15" fill="rgb(235,73,54)"/><text x="681.00" y="334.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (10 samples, 0.24%)</title><rect x="679" y="292" width="3" height="15" fill="rgb(228,155,6)"/><text x="682.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (10 samples, 0.24%)</title><rect x="679" y="308" width="3" height="15" fill="rgb(226,79,32)"/><text x="682.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (10 samples, 0.24%)</title><rect x="679" y="324" width="3" height="15" fill="rgb(253,208,29)"/><text x="682.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (20 samples, 0.47%)</title><rect x="677" y="212" width="6" height="15" fill="rgb(232,82,15)"/><text x="680.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (18 samples, 0.43%)</title><rect x="678" y="228" width="5" height="15" fill="rgb(217,185,30)"/><text x="681.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (17 samples, 0.40%)</title><rect x="678" y="244" width="5" height="15" fill="rgb(222,29,27)"/><text x="681.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c) (17 samples, 0.40%)</title><rect x="678" y="260" width="5" height="15" fill="rgb(248,167,51)"/><text x="681.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (12 samples, 0.28%)</title><rect x="679" y="276" width="4" height="15" fill="rgb(227,9,5)"/><text x="682.00" y="286.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (5 samples, 0.12%)</title><rect x="693" y="228" width="1" height="15" fill="rgb(246,105,4)"/><text x="696.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (6 samples, 0.14%)</title><rect x="694" y="228" width="2" height="15" fill="rgb(209,3,14)"/><text x="697.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c) (5 samples, 0.12%)</title><rect x="696" y="244" width="2" height="15" fill="rgb(210,75,28)"/><text x="699.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (8 samples, 0.19%)</title><rect x="696" y="228" width="2" height="15" fill="rgb(210,154,20)"/><text x="699.00" y="238.50"></text></g><g><title>array_reshape (methods.c) (9 samples, 0.21%)</title><rect x="706" y="276" width="3" height="15" fill="rgb(226,221,30)"/><text x="709.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (4 samples, 0.09%)</title><rect x="708" y="292" width="1" height="15" fill="rgb(216,216,34)"/><text x="711.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (4 samples, 0.09%)</title><rect x="708" y="308" width="1" height="15" fill="rgb(244,84,38)"/><text x="711.00" y="318.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (45 samples, 1.07%)</title><rect x="698" y="228" width="13" height="15" fill="rgb(239,43,23)"/><text x="701.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (38 samples, 0.90%)</title><rect x="700" y="244" width="11" height="15" fill="rgb(221,204,37)"/><text x="703.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (37 samples, 0.88%)</title><rect x="701" y="260" width="10" height="15" fill="rgb(248,104,46)"/><text x="704.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (8 samples, 0.19%)</title><rect x="709" y="276" width="2" height="15" fill="rgb(251,47,52)"/><text x="712.00" y="286.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (4 samples, 0.09%)</title><rect x="729" y="260" width="1" height="15" fill="rgb(225,139,27)"/><text x="732.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (9 samples, 0.21%)</title><rect x="773" y="276" width="2" height="15" fill="rgb(246,141,1)"/><text x="776.00" y="286.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (7 samples, 0.17%)</title><rect x="791" y="356" width="2" height="15" fill="rgb(226,111,34)"/><text x="794.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (5 samples, 0.12%)</title><rect x="791" y="372" width="2" height="15" fill="rgb(226,22,49)"/><text x="794.00" y="382.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (5 samples, 0.12%)</title><rect x="791" y="388" width="2" height="15" fill="rgb(217,139,40)"/><text x="794.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (84 samples, 1.99%)</title><rect x="797" y="436" width="23" height="15" fill="rgb(224,186,54)"/><text x="800.00" y="446.50">_..</text></g><g><title>FLOAT_subtract (loops.c.src) (184 samples, 4.37%)</title><rect x="795" y="388" width="52" height="15" fill="rgb(253,108,30)"/><text x="798.00" y="398.50">FLOAT..</text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (184 samples, 4.37%)</title><rect x="795" y="404" width="52" height="15" fill="rgb(231,183,31)"/><text x="798.00" y="414.50">run_b..</text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (184 samples, 4.37%)</title><rect x="795" y="420" width="52" height="15" fill="rgb(222,80,23)"/><text x="798.00" y="430.50">sse2_..</text></g><g><title>_mm_sub_ps (xmmintrin.h) (93 samples, 2.21%)</title><rect x="820" y="436" width="27" height="15" fill="rgb(238,64,12)"/><text x="823.00" y="446.50">_..</text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (7 samples, 0.17%)</title><rect x="849" y="404" width="2" height="15" fill="rgb(228,205,12)"/><text x="852.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (4 samples, 0.09%)</title><rect x="852" y="404" width="1" height="15" fill="rgb(210,18,20)"/><text x="855.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (24 samples, 0.57%)</title><rect x="847" y="388" width="6" height="15" fill="rgb(219,90,18)"/><text x="850.00" y="398.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (8 samples, 0.19%)</title><rect x="853" y="388" width="2" height="15" fill="rgb(218,165,35)"/><text x="856.00" y="398.50"></text></g><g><title>0x7fb745a38f36 (libc-2.29.so) (4 samples, 0.09%)</title><rect x="859" y="436" width="1" height="15" fill="rgb(230,43,19)"/><text x="862.00" y="446.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (23 samples, 0.55%)</title><rect x="856" y="388" width="6" height="15" fill="rgb(243,59,0)"/><text x="859.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (21 samples, 0.50%)</title><rect x="856" y="404" width="6" height="15" fill="rgb(238,19,1)"/><text x="859.00" y="414.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (20 samples, 0.47%)</title><rect x="857" y="420" width="5" height="15" fill="rgb(208,62,30)"/><text x="860.00" y="430.50"></text></g><g><title>0x7fb745a38d50 (libc-2.29.so) (5 samples, 0.12%)</title><rect x="868" y="436" width="1" height="15" fill="rgb(205,161,39)"/><text x="871.00" y="446.50"></text></g><g><title>0x7fb745a38f36 (libc-2.29.so) (8 samples, 0.19%)</title><rect x="876" y="436" width="3" height="15" fill="rgb(214,200,10)"/><text x="879.00" y="446.50"></text></g><g><title>0x7fb745a38f3e (libc-2.29.so) (4 samples, 0.09%)</title><rect x="880" y="436" width="1" height="15" fill="rgb(250,93,51)"/><text x="883.00" y="446.50"></text></g><g><title>0x7fb745a38f53 (libc-2.29.so) (5 samples, 0.12%)</title><rect x="883" y="436" width="2" height="15" fill="rgb(222,0,29)"/><text x="886.00" y="446.50"></text></g><g><title>0x7fb745a38f58 (libc-2.29.so) (5 samples, 0.12%)</title><rect x="885" y="436" width="1" height="15" fill="rgb(228,111,49)"/><text x="888.00" y="446.50"></text></g><g><title>0x7fb745a38f5d (libc-2.29.so) (6 samples, 0.14%)</title><rect x="886" y="436" width="2" height="15" fill="rgb(215,72,29)"/><text x="889.00" y="446.50"></text></g><g><title>0x7fb745a38f76 (libc-2.29.so) (4 samples, 0.09%)</title><rect x="889" y="436" width="1" height="15" fill="rgb(232,16,35)"/><text x="892.00" y="446.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (101 samples, 2.40%)</title><rect x="864" y="404" width="28" height="15" fill="rgb(229,84,36)"/><text x="867.00" y="414.50">n..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (99 samples, 2.35%)</title><rect x="864" y="420" width="28" height="15" fill="rgb(233,59,52)"/><text x="867.00" y="430.50">P..</text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src) (6 samples, 0.14%)</title><rect x="890" y="436" width="2" height="15" fill="rgb(216,3,33)"/><text x="893.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (353 samples, 8.38%)</title><rect x="793" y="356" width="99" height="15" fill="rgb(235,88,19)"/><text x="796.00" y="366.50">execute_leg..</text></g><g><title>iterator_loop (ufunc_object.c) (350 samples, 8.31%)</title><rect x="794" y="372" width="98" height="15" fill="rgb(229,150,27)"/><text x="797.00" y="382.50">iterator_lo..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (104 samples, 2.47%)</title><rect x="863" y="388" width="29" height="15" fill="rgb(228,114,2)"/><text x="866.00" y="398.50">np..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (376 samples, 8.93%)</title><rect x="788" y="308" width="105" height="15" fill="rgb(244,172,47)"/><text x="791.00" y="318.50">_run (mlprod..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (371 samples, 8.81%)</title><rect x="789" y="324" width="104" height="15" fill="rgb(236,73,44)"/><text x="792.00" y="334.50">ufunc_generi..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (368 samples, 8.74%)</title><rect x="790" y="340" width="103" height="15" fill="rgb(214,94,21)"/><text x="793.00" y="350.50">PyUFunc_Gene..</text></g><g><title>0x7fb745a38d94 (libc-2.29.so) (100 samples, 2.37%)</title><rect x="896" y="388" width="28" height="15" fill="rgb(245,0,13)"/><text x="899.00" y="398.50">0..</text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (4 samples, 0.09%)</title><rect x="924" y="388" width="2" height="15" fill="rgb(217,154,51)"/><text x="927.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (117 samples, 2.78%)</title><rect x="894" y="356" width="33" height="15" fill="rgb(250,94,21)"/><text x="897.00" y="366.50">Py..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (114 samples, 2.71%)</title><rect x="895" y="372" width="32" height="15" fill="rgb(228,12,33)"/><text x="898.00" y="382.50">ra..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (124 samples, 2.94%)</title><rect x="893" y="308" width="35" height="15" fill="rgb(218,124,26)"/><text x="896.00" y="318.50">_r..</text></g><g><title>array_copy (methods.c) (122 samples, 2.90%)</title><rect x="894" y="324" width="34" height="15" fill="rgb(205,51,18)"/><text x="897.00" y="334.50">ar..</text></g><g><title>PyArray_NewCopy (convert.c) (122 samples, 2.90%)</title><rect x="894" y="340" width="34" height="15" fill="rgb(225,93,52)"/><text x="897.00" y="350.50">Py..</text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (5 samples, 0.12%)</title><rect x="927" y="356" width="1" height="15" fill="rgb(235,87,7)"/><text x="930.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (5 samples, 0.12%)</title><rect x="927" y="372" width="1" height="15" fill="rgb(238,212,39)"/><text x="930.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (5 samples, 0.12%)</title><rect x="927" y="388" width="1" height="15" fill="rgb(248,67,27)"/><text x="930.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 0.12%)</title><rect x="927" y="404" width="1" height="15" fill="rgb(226,210,13)"/><text x="930.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c) (4 samples, 0.09%)</title><rect x="927" y="420" width="1" height="15" fill="rgb(220,218,20)"/><text x="930.00" y="430.50"></text></g><g><title>array_dealloc (arrayobject.c) (6 samples, 0.14%)</title><rect x="933" y="324" width="2" height="15" fill="rgb(227,191,42)"/><text x="936.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (6 samples, 0.14%)</title><rect x="933" y="340" width="2" height="15" fill="rgb(216,215,29)"/><text x="936.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (5 samples, 0.12%)</title><rect x="933" y="356" width="2" height="15" fill="rgb(231,42,0)"/><text x="936.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (4 samples, 0.09%)</title><rect x="949" y="388" width="1" height="15" fill="rgb(242,186,48)"/><text x="952.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (6 samples, 0.14%)</title><rect x="950" y="404" width="2" height="15" fill="rgb(211,10,12)"/><text x="953.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (6 samples, 0.14%)</title><rect x="950" y="420" width="2" height="15" fill="rgb(229,137,39)"/><text x="953.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (5 samples, 0.12%)</title><rect x="951" y="436" width="1" height="15" fill="rgb(244,50,22)"/><text x="954.00" y="446.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (4 samples, 0.09%)</title><rect x="959" y="468" width="1" height="15" fill="rgb(223,134,4)"/><text x="962.00" y="478.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (7 samples, 0.17%)</title><rect x="960" y="468" width="2" height="15" fill="rgb(254,177,1)"/><text x="963.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (25 samples, 0.59%)</title><rect x="956" y="452" width="7" height="15" fill="rgb(241,124,50)"/><text x="959.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (4 samples, 0.09%)</title><rect x="962" y="468" width="1" height="15" fill="rgb(233,169,28)"/><text x="965.00" y="478.50"></text></g><g><title>npy_alloc_cache (alloc.c) (4 samples, 0.09%)</title><rect x="966" y="516" width="1" height="15" fill="rgb(246,117,10)"/><text x="969.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (4 samples, 0.09%)</title><rect x="966" y="532" width="1" height="15" fill="rgb(229,85,9)"/><text x="969.00" y="542.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (13 samples, 0.31%)</title><rect x="965" y="484" width="3" height="15" fill="rgb(216,221,12)"/><text x="968.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (13 samples, 0.31%)</title><rect x="965" y="500" width="3" height="15" fill="rgb(208,144,30)"/><text x="968.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (6 samples, 0.14%)</title><rect x="967" y="516" width="1" height="15" fill="rgb(230,81,52)"/><text x="970.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (6 samples, 0.14%)</title><rect x="967" y="532" width="1" height="15" fill="rgb(252,66,33)"/><text x="970.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.14%)</title><rect x="967" y="548" width="1" height="15" fill="rgb(216,38,15)"/><text x="970.00" y="558.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (15 samples, 0.36%)</title><rect x="964" y="452" width="5" height="15" fill="rgb(243,100,29)"/><text x="967.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (14 samples, 0.33%)</title><rect x="965" y="468" width="4" height="15" fill="rgb(243,203,53)"/><text x="968.00" y="478.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (5 samples, 0.12%)</title><rect x="970" y="500" width="1" height="15" fill="rgb(249,41,32)"/><text x="973.00" y="510.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (18 samples, 0.43%)</title><rect x="969" y="452" width="5" height="15" fill="rgb(205,185,36)"/><text x="972.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (18 samples, 0.43%)</title><rect x="969" y="468" width="5" height="15" fill="rgb(205,89,12)"/><text x="972.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (14 samples, 0.33%)</title><rect x="970" y="484" width="4" height="15" fill="rgb(237,133,53)"/><text x="973.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src) (240 samples, 5.70%)</title><rect x="979" y="468" width="67" height="15" fill="rgb(219,84,45)"/><text x="982.00" y="478.50">FLOAT_a..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (212 samples, 5.03%)</title><rect x="987" y="484" width="59" height="15" fill="rgb(248,45,9)"/><text x="990.00" y="494.50">pairwi..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (358 samples, 8.50%)</title><rect x="956" y="436" width="100" height="15" fill="rgb(226,82,14)"/><text x="959.00" y="446.50">PyUFunc_Redu..</text></g><g><title>reduce_loop (ufunc_object.c) (294 samples, 6.98%)</title><rect x="974" y="452" width="82" height="15" fill="rgb(247,210,54)"/><text x="977.00" y="462.50">reduce_lo..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (34 samples, 0.81%)</title><rect x="1047" y="468" width="9" height="15" fill="rgb(243,57,51)"/><text x="1050.00" y="478.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (364 samples, 8.64%)</title><rect x="956" y="420" width="102" height="15" fill="rgb(250,51,36)"/><text x="959.00" y="430.50">PyUFunc_Redu..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (4 samples, 0.09%)</title><rect x="1057" y="436" width="1" height="15" fill="rgb(213,59,28)"/><text x="1060.00" y="446.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (445 samples, 10.57%)</title><rect x="935" y="324" width="124" height="15" fill="rgb(251,205,2)"/><text x="938.00" y="334.50">sum (&lt;__array_f..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (428 samples, 10.16%)</title><rect x="940" y="340" width="119" height="15" fill="rgb(219,31,41)"/><text x="943.00" y="350.50">array_implemen..</text></g><g><title>sum (numpy/core/fromnumeric.py) (426 samples, 10.12%)</title><rect x="940" y="356" width="119" height="15" fill="rgb(209,111,49)"/><text x="943.00" y="366.50">sum (numpy/cor..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (411 samples, 9.76%)</title><rect x="944" y="372" width="115" height="15" fill="rgb(212,186,16)"/><text x="947.00" y="382.50">_wrapreduction..</text></g><g><title>ufunc_reduce (ufunc_object.c) (389 samples, 9.24%)</title><rect x="950" y="388" width="109" height="15" fill="rgb(217,116,40)"/><text x="953.00" y="398.50">ufunc_reduce ..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (383 samples, 9.10%)</title><rect x="952" y="404" width="107" height="15" fill="rgb(239,162,53)"/><text x="955.00" y="414.50">PyUFunc_Gener..</text></g><g><title>PyUFunc_CheckOverride (override.c) (4 samples, 0.09%)</title><rect x="1060" y="340" width="1" height="15" fill="rgb(244,133,29)"/><text x="1063.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (4 samples, 0.09%)</title><rect x="1063" y="372" width="1" height="15" fill="rgb(205,108,36)"/><text x="1066.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.09%)</title><rect x="1063" y="388" width="1" height="15" fill="rgb(209,112,2)"/><text x="1066.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h) (64 samples, 1.52%)</title><rect x="1069" y="404" width="18" height="15" fill="rgb(222,99,41)"/><text x="1072.00" y="414.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (71 samples, 1.69%)</title><rect x="1087" y="404" width="20" height="15" fill="rgb(217,182,19)"/><text x="1090.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (159 samples, 3.78%)</title><rect x="1063" y="356" width="45" height="15" fill="rgb(209,129,3)"/><text x="1066.00" y="366.50">exec..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (155 samples, 3.68%)</title><rect x="1064" y="372" width="44" height="15" fill="rgb(208,108,30)"/><text x="1067.00" y="382.50">triv..</text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (152 samples, 3.61%)</title><rect x="1065" y="388" width="43" height="15" fill="rgb(250,62,5)"/><text x="1068.00" y="398.50">sse2..</text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (9 samples, 0.21%)</title><rect x="1108" y="356" width="2" height="15" fill="rgb(237,44,38)"/><text x="1111.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (9 samples, 0.21%)</title><rect x="1108" y="372" width="2" height="15" fill="rgb(240,203,32)"/><text x="1111.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (176 samples, 4.18%)</title><rect x="1061" y="340" width="50" height="15" fill="rgb(249,227,51)"/><text x="1064.00" y="350.50">PyUFu..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (653 samples, 15.51%)</title><rect x="928" y="308" width="183" height="15" fill="rgb(231,226,10)"/><text x="931.00" y="318.50">_run (mlprodict/onnxrt/..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (184 samples, 4.37%)</title><rect x="1059" y="324" width="52" height="15" fill="rgb(230,47,52)"/><text x="1062.00" y="334.50">ufunc..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,415 samples, 33.60%)</title><rect x="715" y="244" width="396" height="15" fill="rgb(251,180,6)"/><text x="718.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inferenc..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,360 samples, 32.30%)</title><rect x="730" y="260" width="381" height="15" fill="rgb(227,71,51)"/><text x="733.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,199 samples, 28.47%)</title><rect x="775" y="276" width="336" height="15" fill="rgb(209,41,6)"/><text x="778.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,173 samples, 27.86%)</title><rect x="783" y="292" width="328" height="15" fill="rgb(211,119,5)"/><text x="786.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,429 samples, 33.93%)</title><rect x="711" y="228" width="401" height="15" fill="rgb(228,69,3)"/><text x="714.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (8 samples, 0.19%)</title><rect x="1112" y="276" width="2" height="15" fill="rgb(214,147,10)"/><text x="1115.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 0.19%)</title><rect x="1112" y="292" width="2" height="15" fill="rgb(254,12,53)"/><text x="1115.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (7 samples, 0.17%)</title><rect x="1112" y="308" width="2" height="15" fill="rgb(224,135,34)"/><text x="1115.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (4 samples, 0.09%)</title><rect x="1113" y="324" width="1" height="15" fill="rgb(234,196,6)"/><text x="1116.00" y="334.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (4 samples, 0.09%)</title><rect x="1114" y="276" width="2" height="15" fill="rgb(205,163,44)"/><text x="1117.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.09%)</title><rect x="1114" y="292" width="2" height="15" fill="rgb(221,122,45)"/><text x="1117.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (4 samples, 0.09%)</title><rect x="1114" y="308" width="2" height="15" fill="rgb(211,110,13)"/><text x="1117.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (4 samples, 0.09%)</title><rect x="1114" y="324" width="2" height="15" fill="rgb(223,167,9)"/><text x="1117.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (4 samples, 0.09%)</title><rect x="1114" y="340" width="2" height="15" fill="rgb(218,19,29)"/><text x="1117.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (4 samples, 0.09%)</title><rect x="1114" y="356" width="2" height="15" fill="rgb(241,115,53)"/><text x="1117.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (4 samples, 0.09%)</title><rect x="1114" y="372" width="2" height="15" fill="rgb(210,225,20)"/><text x="1117.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (1,545 samples, 36.69%)</title><rect x="683" y="212" width="433" height="15" fill="rgb(208,133,46)"/><text x="686.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (14 samples, 0.33%)</title><rect x="1112" y="228" width="4" height="15" fill="rgb(219,184,0)"/><text x="1115.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (14 samples, 0.33%)</title><rect x="1112" y="244" width="4" height="15" fill="rgb(207,49,10)"/><text x="1115.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (14 samples, 0.33%)</title><rect x="1112" y="260" width="4" height="15" fill="rgb(238,133,18)"/><text x="1115.00" y="270.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src) (14 samples, 0.33%)</title><rect x="1118" y="372" width="4" height="15" fill="rgb(247,175,0)"/><text x="1121.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c) (14 samples, 0.33%)</title><rect x="1118" y="388" width="4" height="15" fill="rgb(245,194,38)"/><text x="1121.00" y="398.50"></text></g><g><title>adumb_select_float (selection.c.src) (52 samples, 1.23%)</title><rect x="1122" y="388" width="15" height="15" fill="rgb(227,185,1)"/><text x="1125.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (37 samples, 0.88%)</title><rect x="1126" y="404" width="11" height="15" fill="rgb(208,215,53)"/><text x="1129.00" y="414.50"></text></g><g><title>aintroselect_float (selection.c.src) (55 samples, 1.31%)</title><rect x="1122" y="372" width="15" height="15" fill="rgb(240,229,7)"/><text x="1125.00" y="382.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (76 samples, 1.80%)</title><rect x="1116" y="340" width="21" height="15" fill="rgb(210,61,46)"/><text x="1119.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (76 samples, 1.80%)</title><rect x="1116" y="356" width="21" height="15" fill="rgb(224,180,19)"/><text x="1119.00" y="366.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (77 samples, 1.83%)</title><rect x="1116" y="260" width="22" height="15" fill="rgb(250,1,14)"/><text x="1119.00" y="270.50">a..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (77 samples, 1.83%)</title><rect x="1116" y="276" width="22" height="15" fill="rgb(212,94,29)"/><text x="1119.00" y="286.50">a..</text></g><g><title>argpartition (numpy/core/fromnumeric.py) (77 samples, 1.83%)</title><rect x="1116" y="292" width="22" height="15" fill="rgb(217,101,43)"/><text x="1119.00" y="302.50">a..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (77 samples, 1.83%)</title><rect x="1116" y="308" width="22" height="15" fill="rgb(249,96,41)"/><text x="1119.00" y="318.50">_..</text></g><g><title>array_argpartition (methods.c) (77 samples, 1.83%)</title><rect x="1116" y="324" width="22" height="15" fill="rgb(235,10,52)"/><text x="1119.00" y="334.50">a..</text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (5 samples, 0.12%)</title><rect x="1139" y="276" width="1" height="15" fill="rgb(241,43,31)"/><text x="1142.00" y="286.50"></text></g><g><title>array_subscript (mapping.c) (10 samples, 0.24%)</title><rect x="1139" y="260" width="2" height="15" fill="rgb(243,108,20)"/><text x="1142.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (91 samples, 2.16%)</title><rect x="1116" y="212" width="26" height="15" fill="rgb(228,74,29)"/><text x="1119.00" y="222.50">_..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (91 samples, 2.16%)</title><rect x="1116" y="228" width="26" height="15" fill="rgb(229,97,4)"/><text x="1119.00" y="238.50">_..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (91 samples, 2.16%)</title><rect x="1116" y="244" width="26" height="15" fill="rgb(227,85,25)"/><text x="1119.00" y="254.50">t..</text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (1,672 samples, 39.71%)</title><rect x="676" y="68" width="468" height="15" fill="rgb(216,211,44)"/><text x="679.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorit..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (1,672 samples, 39.71%)</title><rect x="676" y="84" width="468" height="15" fill="rgb(248,207,28)"/><text x="679.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algori..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (1,672 samples, 39.71%)</title><rect x="676" y="100" width="468" height="15" fill="rgb(226,68,6)"/><text x="679.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbru..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (1,672 samples, 39.71%)</title><rect x="676" y="116" width="468" height="15" fill="rgb(208,50,47)"/><text x="679.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (1,672 samples, 39.71%)</title><rect x="676" y="132" width="468" height="15" fill="rgb(227,92,48)"/><text x="679.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,671 samples, 39.68%)</title><rect x="676" y="148" width="468" height="15" fill="rgb(207,105,40)"/><text x="679.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,671 samples, 39.68%)</title><rect x="676" y="164" width="468" height="15" fill="rgb(225,173,27)"/><text x="679.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,671 samples, 39.68%)</title><rect x="676" y="180" width="468" height="15" fill="rgb(212,46,27)"/><text x="679.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,670 samples, 39.66%)</title><rect x="676" y="196" width="468" height="15" fill="rgb(234,55,31)"/><text x="679.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (9 samples, 0.21%)</title><rect x="1142" y="212" width="2" height="15" fill="rgb(245,170,25)"/><text x="1145.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (6 samples, 0.14%)</title><rect x="1142" y="228" width="2" height="15" fill="rgb(205,223,43)"/><text x="1145.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 0.14%)</title><rect x="1142" y="244" width="2" height="15" fill="rgb(241,33,42)"/><text x="1145.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (6 samples, 0.14%)</title><rect x="1142" y="260" width="2" height="15" fill="rgb(216,83,8)"/><text x="1145.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (6 samples, 0.14%)</title><rect x="1142" y="276" width="2" height="15" fill="rgb(241,36,25)"/><text x="1145.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (6 samples, 0.14%)</title><rect x="1142" y="292" width="2" height="15" fill="rgb(245,24,24)"/><text x="1145.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src) (6 samples, 0.14%)</title><rect x="1142" y="308" width="2" height="15" fill="rgb(223,47,10)"/><text x="1145.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src) (6 samples, 0.14%)</title><rect x="1142" y="324" width="2" height="15" fill="rgb(239,143,2)"/><text x="1145.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src) (6 samples, 0.14%)</title><rect x="1142" y="340" width="2" height="15" fill="rgb(205,34,27)"/><text x="1145.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (6 samples, 0.14%)</title><rect x="1142" y="356" width="2" height="15" fill="rgb(242,61,21)"/><text x="1145.00" y="366.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (53 samples, 1.26%)</title><rect x="1148" y="212" width="15" height="15" fill="rgb(244,165,23)"/><text x="1151.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (53 samples, 1.26%)</title><rect x="1148" y="228" width="15" height="15" fill="rgb(238,55,51)"/><text x="1151.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (53 samples, 1.26%)</title><rect x="1148" y="244" width="15" height="15" fill="rgb(217,72,41)"/><text x="1151.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (53 samples, 1.26%)</title><rect x="1148" y="260" width="15" height="15" fill="rgb(241,47,16)"/><text x="1151.00" y="270.50"></text></g><g><title>array_argpartition (methods.c) (53 samples, 1.26%)</title><rect x="1148" y="276" width="15" height="15" fill="rgb(208,214,47)"/><text x="1151.00" y="286.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (53 samples, 1.26%)</title><rect x="1148" y="292" width="15" height="15" fill="rgb(238,90,10)"/><text x="1151.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c) (53 samples, 1.26%)</title><rect x="1148" y="308" width="15" height="15" fill="rgb(246,90,12)"/><text x="1151.00" y="318.50"></text></g><g><title>aintroselect_double (selection.c.src) (44 samples, 1.04%)</title><rect x="1150" y="324" width="13" height="15" fill="rgb(231,148,51)"/><text x="1153.00" y="334.50"></text></g><g><title>adumb_select_double (selection.c.src) (44 samples, 1.04%)</title><rect x="1150" y="340" width="13" height="15" fill="rgb(253,202,29)"/><text x="1153.00" y="350.50"></text></g><g><title>DOUBLE_LT (npysort_common.h) (33 samples, 0.78%)</title><rect x="1153" y="356" width="10" height="15" fill="rgb(237,118,53)"/><text x="1156.00" y="366.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (4 samples, 0.09%)</title><rect x="1163" y="228" width="2" height="15" fill="rgb(227,173,30)"/><text x="1166.00" y="238.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (4 samples, 0.09%)</title><rect x="1163" y="244" width="2" height="15" fill="rgb(246,1,12)"/><text x="1166.00" y="254.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (4 samples, 0.09%)</title><rect x="1163" y="260" width="2" height="15" fill="rgb(215,22,22)"/><text x="1166.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (4 samples, 0.09%)</title><rect x="1163" y="276" width="2" height="15" fill="rgb(210,117,42)"/><text x="1166.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (4 samples, 0.09%)</title><rect x="1163" y="292" width="2" height="15" fill="rgb(253,228,20)"/><text x="1166.00" y="302.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py) (68 samples, 1.61%)</title><rect x="1148" y="196" width="19" height="15" fill="rgb(218,98,26)"/><text x="1151.00" y="206.50"></text></g><g><title>array_subscript (mapping.c) (13 samples, 0.31%)</title><rect x="1163" y="212" width="4" height="15" fill="rgb(248,67,39)"/><text x="1166.00" y="222.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (7 samples, 0.17%)</title><rect x="1165" y="228" width="2" height="15" fill="rgb(205,94,2)"/><text x="1168.00" y="238.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (5 samples, 0.12%)</title><rect x="1170" y="276" width="2" height="15" fill="rgb(215,220,43)"/><text x="1173.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (5 samples, 0.12%)</title><rect x="1170" y="292" width="2" height="15" fill="rgb(251,107,8)"/><text x="1173.00" y="302.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (5 samples, 0.12%)</title><rect x="1170" y="308" width="2" height="15" fill="rgb(246,89,4)"/><text x="1173.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c) (5 samples, 0.12%)</title><rect x="1170" y="324" width="2" height="15" fill="rgb(205,225,15)"/><text x="1173.00" y="334.50"></text></g><g><title>PyArray_FromArray (ctors.c) (5 samples, 0.12%)</title><rect x="1170" y="340" width="2" height="15" fill="rgb(224,13,39)"/><text x="1173.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (5 samples, 0.12%)</title><rect x="1170" y="356" width="2" height="15" fill="rgb(222,211,29)"/><text x="1173.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (5 samples, 0.12%)</title><rect x="1170" y="372" width="2" height="15" fill="rgb(252,138,47)"/><text x="1173.00" y="382.50"></text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src) (4 samples, 0.09%)</title><rect x="1170" y="388" width="2" height="15" fill="rgb(215,4,7)"/><text x="1173.00" y="398.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py) (11 samples, 0.26%)</title><rect x="1169" y="244" width="3" height="15" fill="rgb(229,215,0)"/><text x="1172.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (10 samples, 0.24%)</title><rect x="1169" y="260" width="3" height="15" fill="rgb(230,58,40)"/><text x="1172.00" y="270.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (14 samples, 0.33%)</title><rect x="1173" y="260" width="4" height="15" fill="rgb(252,175,50)"/><text x="1176.00" y="270.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (21 samples, 0.50%)</title><rect x="1172" y="244" width="6" height="15" fill="rgb(208,195,50)"/><text x="1175.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.09%)</title><rect x="1177" y="260" width="1" height="15" fill="rgb(227,59,0)"/><text x="1180.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.09%)</title><rect x="1177" y="276" width="1" height="15" fill="rgb(205,155,10)"/><text x="1180.00" y="286.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (4 samples, 0.09%)</title><rect x="1177" y="292" width="1" height="15" fill="rgb(220,19,22)"/><text x="1180.00" y="302.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src) (4 samples, 0.09%)</title><rect x="1177" y="308" width="1" height="15" fill="rgb(222,197,23)"/><text x="1180.00" y="318.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.09%)</title><rect x="1177" y="324" width="1" height="15" fill="rgb(226,52,39)"/><text x="1180.00" y="334.50"></text></g><g><title>dgemm_thread_tn (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.09%)</title><rect x="1177" y="340" width="1" height="15" fill="rgb(246,18,36)"/><text x="1180.00" y="350.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.09%)</title><rect x="1177" y="356" width="1" height="15" fill="rgb(221,134,28)"/><text x="1180.00" y="366.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.09%)</title><rect x="1177" y="372" width="1" height="15" fill="rgb(223,144,45)"/><text x="1180.00" y="382.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.09%)</title><rect x="1177" y="388" width="1" height="15" fill="rgb(232,220,54)"/><text x="1180.00" y="398.50"></text></g><g><title>sched_yield (libc-2.29.so) (4 samples, 0.09%)</title><rect x="1177" y="404" width="1" height="15" fill="rgb(226,132,35)"/><text x="1180.00" y="414.50"></text></g><g><title>_mm_add_pd (emmintrin.h) (4 samples, 0.09%)</title><rect x="1178" y="356" width="1" height="15" fill="rgb(211,195,8)"/><text x="1181.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src) (13 samples, 0.31%)</title><rect x="1178" y="308" width="4" height="15" fill="rgb(216,184,26)"/><text x="1181.00" y="318.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (13 samples, 0.31%)</title><rect x="1178" y="324" width="4" height="15" fill="rgb(216,86,51)"/><text x="1181.00" y="334.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (13 samples, 0.31%)</title><rect x="1178" y="340" width="4" height="15" fill="rgb(238,31,54)"/><text x="1181.00" y="350.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (8 samples, 0.19%)</title><rect x="1179" y="356" width="3" height="15" fill="rgb(239,177,7)"/><text x="1182.00" y="366.50"></text></g><g><title>iterator_loop (ufunc_object.c) (19 samples, 0.45%)</title><rect x="1178" y="292" width="5" height="15" fill="rgb(229,152,44)"/><text x="1181.00" y="302.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (5 samples, 0.12%)</title><rect x="1182" y="308" width="1" height="15" fill="rgb(244,158,22)"/><text x="1185.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (5 samples, 0.12%)</title><rect x="1182" y="324" width="1" height="15" fill="rgb(238,70,29)"/><text x="1185.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (5 samples, 0.12%)</title><rect x="1182" y="340" width="1" height="15" fill="rgb(225,75,49)"/><text x="1185.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (32 samples, 0.76%)</title><rect x="1178" y="260" width="9" height="15" fill="rgb(226,68,1)"/><text x="1181.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (32 samples, 0.76%)</title><rect x="1178" y="276" width="9" height="15" fill="rgb(218,28,24)"/><text x="1181.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (13 samples, 0.31%)</title><rect x="1183" y="292" width="4" height="15" fill="rgb(254,201,28)"/><text x="1186.00" y="302.50"></text></g><g><title>DOUBLE_maximum (loops.c.src) (13 samples, 0.31%)</title><rect x="1183" y="308" width="4" height="15" fill="rgb(209,72,26)"/><text x="1186.00" y="318.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py) (145 samples, 3.44%)</title><rect x="1147" y="180" width="40" height="15" fill="rgb(239,222,50)"/><text x="1150.00" y="190.50">pai..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py) (73 samples, 1.73%)</title><rect x="1167" y="196" width="20" height="15" fill="rgb(231,144,45)"/><text x="1170.00" y="206.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py) (73 samples, 1.73%)</title><rect x="1167" y="212" width="20" height="15" fill="rgb(252,193,4)"/><text x="1170.00" y="222.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py) (71 samples, 1.69%)</title><rect x="1167" y="228" width="20" height="15" fill="rgb(234,127,12)"/><text x="1170.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (33 samples, 0.78%)</title><rect x="1178" y="244" width="9" height="15" fill="rgb(233,83,15)"/><text x="1181.00" y="254.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (154 samples, 3.66%)</title><rect x="1145" y="164" width="43" height="15" fill="rgb(208,70,15)"/><text x="1148.00" y="174.50">knei..</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (4 samples, 0.09%)</title><rect x="1187" y="180" width="1" height="15" fill="rgb(228,56,38)"/><text x="1190.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.09%)</title><rect x="1187" y="196" width="1" height="15" fill="rgb(216,63,38)"/><text x="1190.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (4 samples, 0.09%)</title><rect x="1187" y="212" width="1" height="15" fill="rgb(237,167,37)"/><text x="1190.00" y="222.50"></text></g><g><title>all (4,211 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(251,109,50)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (4,211 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(223,221,51)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (162 samples, 3.85%)</title><rect x="1144" y="68" width="46" height="15" fill="rgb(239,22,46)"/><text x="1147.00" y="78.50">prof..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (162 samples, 3.85%)</title><rect x="1144" y="84" width="46" height="15" fill="rgb(228,114,27)"/><text x="1147.00" y="94.50">setu..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1000_50_12_float_.py) (162 samples, 3.85%)</title><rect x="1144" y="100" width="46" height="15" fill="rgb(210,100,31)"/><text x="1147.00" y="110.50">prof..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (162 samples, 3.85%)</title><rect x="1144" y="116" width="46" height="15" fill="rgb(236,136,17)"/><text x="1147.00" y="126.50">time..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (162 samples, 3.85%)</title><rect x="1144" y="132" width="46" height="15" fill="rgb(218,46,40)"/><text x="1147.00" y="142.50">&lt;lam..</text></g><g><title>predict (sklearn/neighbors/_regression.py) (162 samples, 3.85%)</title><rect x="1144" y="148" width="46" height="15" fill="rgb(217,136,3)"/><text x="1147.00" y="158.50">pred..</text></g><g><title>mean (&lt;__array_function__ internals&gt;) (4 samples, 0.09%)</title><rect x="1188" y="164" width="2" height="15" fill="rgb(207,101,3)"/><text x="1191.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.09%)</title><rect x="1188" y="180" width="2" height="15" fill="rgb(207,215,9)"/><text x="1191.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py) (4 samples, 0.09%)</title><rect x="1188" y="196" width="2" height="15" fill="rgb(226,219,6)"/><text x="1191.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py) (4 samples, 0.09%)</title><rect x="1188" y="212" width="2" height="15" fill="rgb(249,61,33)"/><text x="1191.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (4 samples, 0.09%)</title><rect x="1188" y="228" width="2" height="15" fill="rgb(233,210,36)"/><text x="1191.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 0.09%)</title><rect x="1188" y="244" width="2" height="15" fill="rgb(244,108,50)"/><text x="1191.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (4 samples, 0.09%)</title><rect x="1188" y="260" width="2" height="15" fill="rgb(218,10,22)"/><text x="1191.00" y="270.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (4 samples, 0.09%)</title><rect x="1188" y="276" width="2" height="15" fill="rgb(250,83,1)"/><text x="1191.00" y="286.50"></text></g></g></svg>