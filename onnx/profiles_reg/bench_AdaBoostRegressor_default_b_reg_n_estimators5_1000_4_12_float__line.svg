<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2118" onload="init(evt)" viewBox="0 0 1200 2118" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="2118" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="2101.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="2101.00"> </text><g id="frames"><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (1 samples, 0.12%)</title><rect x="10" y="820" width="1" height="15" fill="rgb(209,118,6)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (1 samples, 0.12%)</title><rect x="10" y="836" width="1" height="15" fill="rgb(250,163,54)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3279) (1 samples, 0.12%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(208,104,15)"/><text x="13.00" y="862.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py:3279) (1 samples, 0.12%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(239,25,26)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py:2782) (1 samples, 0.12%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(233,16,51)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py:2295) (1 samples, 0.12%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(248,116,9)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py:2201) (1 samples, 0.12%)</title><rect x="10" y="916" width="1" height="15" fill="rgb(245,155,31)"/><text x="13.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;:431) (1 samples, 0.12%)</title><rect x="10" y="932" width="1" height="15" fill="rgb(241,188,19)"/><text x="13.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;:1346) (1 samples, 0.12%)</title><rect x="10" y="948" width="1" height="15" fill="rgb(209,124,9)"/><text x="13.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1383) (1 samples, 0.12%)</title><rect x="10" y="964" width="1" height="15" fill="rgb(226,79,32)"/><text x="13.00" y="974.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;:95) (1 samples, 0.12%)</title><rect x="10" y="980" width="1" height="15" fill="rgb(230,190,52)"/><text x="13.00" y="990.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;:87) (1 samples, 0.12%)</title><rect x="10" y="996" width="1" height="15" fill="rgb(222,12,22)"/><text x="13.00" y="1006.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;:81) (1 samples, 0.12%)</title><rect x="10" y="1012" width="1" height="15" fill="rgb(210,214,21)"/><text x="13.00" y="1022.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.12%)</title><rect x="10" y="1028" width="1" height="15" fill="rgb(217,11,22)"/><text x="13.00" y="1038.50"></text></g><g><title>__xstat (libc-2.29.so) (1 samples, 0.12%)</title><rect x="10" y="1044" width="1" height="15" fill="rgb(216,102,14)"/><text x="13.00" y="1054.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_n_estimators5.py:2) (2 samples, 0.24%)</title><rect x="10" y="148" width="2" height="15" fill="rgb(237,205,18)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="10" y="164" width="2" height="15" fill="rgb(222,13,43)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.24%)</title><rect x="10" y="180" width="2" height="15" fill="rgb(253,224,32)"/><text x="13.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="10" y="196" width="2" height="15" fill="rgb(212,162,42)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="10" y="212" width="2" height="15" fill="rgb(233,74,41)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="10" y="228" width="2" height="15" fill="rgb(251,18,33)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="10" y="244" width="2" height="15" fill="rgb(251,53,30)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="10" y="260" width="2" height="15" fill="rgb(246,204,38)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="10" y="276" width="2" height="15" fill="rgb(246,175,26)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (2 samples, 0.24%)</title><rect x="10" y="292" width="2" height="15" fill="rgb(242,155,37)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="10" y="308" width="2" height="15" fill="rgb(251,68,50)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="10" y="324" width="2" height="15" fill="rgb(228,138,9)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="10" y="340" width="2" height="15" fill="rgb(225,199,25)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="10" y="356" width="2" height="15" fill="rgb(235,116,25)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="10" y="372" width="2" height="15" fill="rgb(249,220,51)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (2 samples, 0.24%)</title><rect x="10" y="388" width="2" height="15" fill="rgb(208,166,23)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="10" y="404" width="2" height="15" fill="rgb(236,99,37)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="10" y="420" width="2" height="15" fill="rgb(230,204,32)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="10" y="436" width="2" height="15" fill="rgb(209,32,45)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="10" y="452" width="2" height="15" fill="rgb(233,188,5)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="10" y="468" width="2" height="15" fill="rgb(249,4,50)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (2 samples, 0.24%)</title><rect x="10" y="484" width="2" height="15" fill="rgb(240,65,29)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="10" y="500" width="2" height="15" fill="rgb(234,10,44)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="10" y="516" width="2" height="15" fill="rgb(237,92,29)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="10" y="532" width="2" height="15" fill="rgb(220,51,43)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="10" y="548" width="2" height="15" fill="rgb(207,109,39)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="10" y="564" width="2" height="15" fill="rgb(230,119,8)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (2 samples, 0.24%)</title><rect x="10" y="580" width="2" height="15" fill="rgb(247,209,1)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="10" y="596" width="2" height="15" fill="rgb(220,37,1)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.24%)</title><rect x="10" y="612" width="2" height="15" fill="rgb(209,178,11)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="10" y="628" width="2" height="15" fill="rgb(239,17,37)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="10" y="644" width="2" height="15" fill="rgb(224,101,29)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="10" y="660" width="2" height="15" fill="rgb(233,153,12)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="10" y="676" width="2" height="15" fill="rgb(232,71,9)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="10" y="692" width="2" height="15" fill="rgb(213,143,32)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="10" y="708" width="2" height="15" fill="rgb(231,218,19)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (2 samples, 0.24%)</title><rect x="10" y="724" width="2" height="15" fill="rgb(211,16,41)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="10" y="740" width="2" height="15" fill="rgb(218,134,17)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="10" y="756" width="2" height="15" fill="rgb(226,222,4)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="10" y="772" width="2" height="15" fill="rgb(238,88,35)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="10" y="788" width="2" height="15" fill="rgb(222,227,47)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="10" y="804" width="2" height="15" fill="rgb(212,51,12)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:84) (1 samples, 0.12%)</title><rect x="11" y="820" width="1" height="15" fill="rgb(229,229,8)"/><text x="14.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="11" y="836" width="1" height="15" fill="rgb(224,8,12)"/><text x="14.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="11" y="852" width="1" height="15" fill="rgb(248,189,9)"/><text x="14.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="11" y="868" width="1" height="15" fill="rgb(220,3,50)"/><text x="14.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="11" y="884" width="1" height="15" fill="rgb(220,164,21)"/><text x="14.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="11" y="900" width="1" height="15" fill="rgb(222,160,42)"/><text x="14.00" y="910.50"></text></g><g><title>&lt;module&gt; (pkg_resources/_vendor/packaging/requirements.py:48) (1 samples, 0.12%)</title><rect x="11" y="916" width="1" height="15" fill="rgb(214,95,13)"/><text x="14.00" y="926.50"></text></g><g><title>__init__ (pkg_resources/_vendor/pyparsing.py:2792) (1 samples, 0.12%)</title><rect x="11" y="932" width="1" height="15" fill="rgb(233,12,22)"/><text x="14.00" y="942.50"></text></g><g><title>compile (re.py:234) (1 samples, 0.12%)</title><rect x="11" y="948" width="1" height="15" fill="rgb(225,159,30)"/><text x="14.00" y="958.50"></text></g><g><title>_compile (re.py:286) (1 samples, 0.12%)</title><rect x="11" y="964" width="1" height="15" fill="rgb(231,104,26)"/><text x="14.00" y="974.50"></text></g><g><title>compile (sre_compile.py:783) (1 samples, 0.12%)</title><rect x="11" y="980" width="1" height="15" fill="rgb(229,139,3)"/><text x="14.00" y="990.50"></text></g><g><title>_sre_compile (python3.7) (1 samples, 0.12%)</title><rect x="11" y="996" width="1" height="15" fill="rgb(235,89,10)"/><text x="14.00" y="1006.50"></text></g><g><title>&lt;module&gt; (cryptography/x509/base.py:15) (1 samples, 0.12%)</title><rect x="12" y="1396" width="2" height="15" fill="rgb(211,13,4)"/><text x="15.00" y="1406.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.12%)</title><rect x="12" y="1412" width="2" height="15" fill="rgb(214,28,2)"/><text x="15.00" y="1422.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="12" y="1428" width="2" height="15" fill="rgb(236,206,44)"/><text x="15.00" y="1438.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="12" y="1444" width="2" height="15" fill="rgb(207,210,37)"/><text x="15.00" y="1454.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="12" y="1460" width="2" height="15" fill="rgb(243,80,10)"/><text x="15.00" y="1470.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="12" y="1476" width="2" height="15" fill="rgb(214,13,26)"/><text x="15.00" y="1486.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="12" y="1492" width="2" height="15" fill="rgb(230,7,4)"/><text x="15.00" y="1502.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="12" y="1508" width="2" height="15" fill="rgb(252,102,0)"/><text x="15.00" y="1518.50"></text></g><g><title>&lt;module&gt; (cryptography/hazmat/primitives/asymmetric/ed25519.py:11) (1 samples, 0.12%)</title><rect x="12" y="1524" width="2" height="15" fill="rgb(222,96,2)"/><text x="15.00" y="1534.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="12" y="1540" width="2" height="15" fill="rgb(244,203,43)"/><text x="15.00" y="1550.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="12" y="1556" width="2" height="15" fill="rgb(227,173,3)"/><text x="15.00" y="1566.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="12" y="1572" width="2" height="15" fill="rgb(217,204,17)"/><text x="15.00" y="1582.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="12" y="1588" width="2" height="15" fill="rgb(244,78,35)"/><text x="15.00" y="1598.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="12" y="1604" width="2" height="15" fill="rgb(226,7,26)"/><text x="15.00" y="1614.50"></text></g><g><title>&lt;module&gt; (cryptography/exceptions.py:10) (1 samples, 0.12%)</title><rect x="12" y="1620" width="2" height="15" fill="rgb(245,46,32)"/><text x="15.00" y="1630.50"></text></g><g><title>__new__ (enum.py:213) (1 samples, 0.12%)</title><rect x="12" y="1636" width="2" height="15" fill="rgb(236,155,43)"/><text x="15.00" y="1646.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (2 samples, 0.24%)</title><rect x="12" y="244" width="3" height="15" fill="rgb(225,162,37)"/><text x="15.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="260" width="3" height="15" fill="rgb(223,190,14)"/><text x="15.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="12" y="276" width="3" height="15" fill="rgb(222,134,44)"/><text x="15.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="12" y="292" width="3" height="15" fill="rgb(254,26,4)"/><text x="15.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="12" y="308" width="3" height="15" fill="rgb(224,160,21)"/><text x="15.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="324" width="3" height="15" fill="rgb(243,195,49)"/><text x="15.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (2 samples, 0.24%)</title><rect x="12" y="340" width="3" height="15" fill="rgb(218,105,12)"/><text x="15.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="356" width="3" height="15" fill="rgb(205,96,32)"/><text x="15.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.24%)</title><rect x="12" y="372" width="3" height="15" fill="rgb(233,218,20)"/><text x="15.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="388" width="3" height="15" fill="rgb(226,89,15)"/><text x="15.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="404" width="3" height="15" fill="rgb(250,166,10)"/><text x="15.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="12" y="420" width="3" height="15" fill="rgb(245,127,23)"/><text x="15.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="12" y="436" width="3" height="15" fill="rgb(248,71,9)"/><text x="15.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="12" y="452" width="3" height="15" fill="rgb(254,49,14)"/><text x="15.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="468" width="3" height="15" fill="rgb(207,128,53)"/><text x="15.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:12) (2 samples, 0.24%)</title><rect x="12" y="484" width="3" height="15" fill="rgb(230,17,7)"/><text x="15.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="500" width="3" height="15" fill="rgb(251,3,21)"/><text x="15.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="12" y="516" width="3" height="15" fill="rgb(251,146,16)"/><text x="15.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="12" y="532" width="3" height="15" fill="rgb(247,85,5)"/><text x="15.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="12" y="548" width="3" height="15" fill="rgb(233,95,21)"/><text x="15.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="564" width="3" height="15" fill="rgb(221,118,42)"/><text x="15.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py:23) (2 samples, 0.24%)</title><rect x="12" y="580" width="3" height="15" fill="rgb(238,3,46)"/><text x="15.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="596" width="3" height="15" fill="rgb(224,117,43)"/><text x="15.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="12" y="612" width="3" height="15" fill="rgb(206,118,28)"/><text x="15.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="12" y="628" width="3" height="15" fill="rgb(208,100,5)"/><text x="15.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="12" y="644" width="3" height="15" fill="rgb(232,81,46)"/><text x="15.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="660" width="3" height="15" fill="rgb(241,8,13)"/><text x="15.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py:10) (2 samples, 0.24%)</title><rect x="12" y="676" width="3" height="15" fill="rgb(236,221,50)"/><text x="15.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="692" width="3" height="15" fill="rgb(211,57,6)"/><text x="15.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="12" y="708" width="3" height="15" fill="rgb(236,83,38)"/><text x="15.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="12" y="724" width="3" height="15" fill="rgb(208,157,0)"/><text x="15.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="12" y="740" width="3" height="15" fill="rgb(216,131,43)"/><text x="15.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="756" width="3" height="15" fill="rgb(210,195,30)"/><text x="15.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py:95) (2 samples, 0.24%)</title><rect x="12" y="772" width="3" height="15" fill="rgb(246,147,45)"/><text x="15.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.24%)</title><rect x="12" y="788" width="3" height="15" fill="rgb(213,116,0)"/><text x="15.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="804" width="3" height="15" fill="rgb(244,194,14)"/><text x="15.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="820" width="3" height="15" fill="rgb(223,189,40)"/><text x="15.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="12" y="836" width="3" height="15" fill="rgb(253,168,53)"/><text x="15.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="12" y="852" width="3" height="15" fill="rgb(209,94,41)"/><text x="15.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="12" y="868" width="3" height="15" fill="rgb(241,194,9)"/><text x="15.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="884" width="3" height="15" fill="rgb(206,196,30)"/><text x="15.00" y="894.50"></text></g><g><title>&lt;module&gt; (urllib3/contrib/pyopenssl.py:46) (2 samples, 0.24%)</title><rect x="12" y="900" width="3" height="15" fill="rgb(205,113,41)"/><text x="15.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="916" width="3" height="15" fill="rgb(208,222,4)"/><text x="15.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.24%)</title><rect x="12" y="932" width="3" height="15" fill="rgb(246,212,41)"/><text x="15.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="948" width="3" height="15" fill="rgb(223,158,42)"/><text x="15.00" y="958.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="964" width="3" height="15" fill="rgb(233,45,44)"/><text x="15.00" y="974.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="12" y="980" width="3" height="15" fill="rgb(215,220,25)"/><text x="15.00" y="990.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="12" y="996" width="3" height="15" fill="rgb(238,21,25)"/><text x="15.00" y="1006.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="12" y="1012" width="3" height="15" fill="rgb(229,191,46)"/><text x="15.00" y="1022.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="1028" width="3" height="15" fill="rgb(240,141,46)"/><text x="15.00" y="1038.50"></text></g><g><title>&lt;module&gt; (OpenSSL/__init__.py:8) (2 samples, 0.24%)</title><rect x="12" y="1044" width="3" height="15" fill="rgb(240,174,4)"/><text x="15.00" y="1054.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.24%)</title><rect x="12" y="1060" width="3" height="15" fill="rgb(219,70,43)"/><text x="15.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="1076" width="3" height="15" fill="rgb(234,13,5)"/><text x="15.00" y="1086.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="1092" width="3" height="15" fill="rgb(236,59,2)"/><text x="15.00" y="1102.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="12" y="1108" width="3" height="15" fill="rgb(231,184,40)"/><text x="15.00" y="1118.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="12" y="1124" width="3" height="15" fill="rgb(239,124,12)"/><text x="15.00" y="1134.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="12" y="1140" width="3" height="15" fill="rgb(212,161,46)"/><text x="15.00" y="1150.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="1156" width="3" height="15" fill="rgb(206,173,32)"/><text x="15.00" y="1166.50"></text></g><g><title>&lt;module&gt; (OpenSSL/crypto.py:12) (2 samples, 0.24%)</title><rect x="12" y="1172" width="3" height="15" fill="rgb(246,56,11)"/><text x="15.00" y="1182.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.24%)</title><rect x="12" y="1188" width="3" height="15" fill="rgb(236,32,23)"/><text x="15.00" y="1198.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="1204" width="3" height="15" fill="rgb(251,145,54)"/><text x="15.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="1220" width="3" height="15" fill="rgb(250,149,43)"/><text x="15.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="12" y="1236" width="3" height="15" fill="rgb(207,209,20)"/><text x="15.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="12" y="1252" width="3" height="15" fill="rgb(214,204,17)"/><text x="15.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="12" y="1268" width="3" height="15" fill="rgb(211,84,49)"/><text x="15.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="1284" width="3" height="15" fill="rgb(248,148,16)"/><text x="15.00" y="1294.50"></text></g><g><title>&lt;module&gt; (cryptography/x509/__init__.py:8) (2 samples, 0.24%)</title><rect x="12" y="1300" width="3" height="15" fill="rgb(208,130,1)"/><text x="15.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="12" y="1316" width="3" height="15" fill="rgb(235,190,38)"/><text x="15.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="12" y="1332" width="3" height="15" fill="rgb(242,204,13)"/><text x="15.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="12" y="1348" width="3" height="15" fill="rgb(220,3,35)"/><text x="15.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="12" y="1364" width="3" height="15" fill="rgb(212,147,4)"/><text x="15.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="12" y="1380" width="3" height="15" fill="rgb(219,48,50)"/><text x="15.00" y="1390.50"></text></g><g><title>&lt;module&gt; (cryptography/x509/base.py:18) (1 samples, 0.12%)</title><rect x="14" y="1396" width="1" height="15" fill="rgb(241,1,42)"/><text x="17.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="14" y="1412" width="1" height="15" fill="rgb(245,59,52)"/><text x="17.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="14" y="1428" width="1" height="15" fill="rgb(210,103,16)"/><text x="17.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="14" y="1444" width="1" height="15" fill="rgb(252,37,13)"/><text x="17.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="14" y="1460" width="1" height="15" fill="rgb(216,1,10)"/><text x="17.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="14" y="1476" width="1" height="15" fill="rgb(233,42,36)"/><text x="17.00" y="1486.50"></text></g><g><title>&lt;module&gt; (cryptography/x509/extensions.py:20) (1 samples, 0.12%)</title><rect x="14" y="1492" width="1" height="15" fill="rgb(207,88,25)"/><text x="17.00" y="1502.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.12%)</title><rect x="14" y="1508" width="1" height="15" fill="rgb(230,7,35)"/><text x="17.00" y="1518.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="14" y="1524" width="1" height="15" fill="rgb(215,159,47)"/><text x="17.00" y="1534.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="14" y="1540" width="1" height="15" fill="rgb(243,87,21)"/><text x="17.00" y="1550.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:971) (1 samples, 0.12%)</title><rect x="14" y="1556" width="1" height="15" fill="rgb(225,219,42)"/><text x="17.00" y="1566.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.12%)</title><rect x="14" y="1572" width="1" height="15" fill="rgb(242,195,11)"/><text x="17.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:117) (1 samples, 0.12%)</title><rect x="15" y="628" width="2" height="15" fill="rgb(233,146,14)"/><text x="18.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="15" y="644" width="2" height="15" fill="rgb(218,128,35)"/><text x="18.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="15" y="660" width="2" height="15" fill="rgb(220,63,38)"/><text x="18.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="15" y="676" width="2" height="15" fill="rgb(253,146,20)"/><text x="18.00" y="686.50"></text></g><g><title>__exit__ (&lt;frozen importlib._bootstrap&gt;:327) (1 samples, 0.12%)</title><rect x="15" y="692" width="2" height="15" fill="rgb(245,175,43)"/><text x="18.00" y="702.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:147) (1 samples, 0.12%)</title><rect x="17" y="628" width="1" height="15" fill="rgb(252,92,21)"/><text x="20.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="17" y="644" width="1" height="15" fill="rgb(245,39,46)"/><text x="20.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="17" y="660" width="1" height="15" fill="rgb(230,158,17)"/><text x="20.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="17" y="676" width="1" height="15" fill="rgb(229,68,37)"/><text x="20.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="17" y="692" width="1" height="15" fill="rgb(207,55,53)"/><text x="20.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="17" y="708" width="1" height="15" fill="rgb(243,181,16)"/><text x="20.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/io/api.py:11) (1 samples, 0.12%)</title><rect x="17" y="724" width="1" height="15" fill="rgb(253,193,46)"/><text x="20.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="17" y="740" width="1" height="15" fill="rgb(213,22,9)"/><text x="20.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="17" y="756" width="1" height="15" fill="rgb(236,116,20)"/><text x="20.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="17" y="772" width="1" height="15" fill="rgb(246,115,47)"/><text x="20.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 0.12%)</title><rect x="17" y="788" width="1" height="15" fill="rgb(211,28,26)"/><text x="20.00" y="798.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:857) (1 samples, 0.12%)</title><rect x="17" y="804" width="1" height="15" fill="rgb(245,110,33)"/><text x="20.00" y="814.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:525) (1 samples, 0.12%)</title><rect x="17" y="820" width="1" height="15" fill="rgb(210,113,14)"/><text x="20.00" y="830.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py:33) (1 samples, 0.12%)</title><rect x="18" y="1588" width="2" height="15" fill="rgb(220,144,45)"/><text x="21.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="18" y="1604" width="2" height="15" fill="rgb(249,140,0)"/><text x="21.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="18" y="1620" width="2" height="15" fill="rgb(248,218,35)"/><text x="21.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="18" y="1636" width="2" height="15" fill="rgb(238,221,13)"/><text x="21.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="18" y="1652" width="2" height="15" fill="rgb(239,138,22)"/><text x="21.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="18" y="1668" width="2" height="15" fill="rgb(226,157,51)"/><text x="21.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/style.py:4) (1 samples, 0.12%)</title><rect x="18" y="1684" width="2" height="15" fill="rgb(237,85,40)"/><text x="21.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="18" y="1700" width="2" height="15" fill="rgb(207,16,19)"/><text x="21.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="18" y="1716" width="2" height="15" fill="rgb(234,33,15)"/><text x="21.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="18" y="1732" width="2" height="15" fill="rgb(242,163,32)"/><text x="21.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="18" y="1748" width="2" height="15" fill="rgb(250,49,26)"/><text x="21.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="18" y="1764" width="2" height="15" fill="rgb(224,116,43)"/><text x="21.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/cm.py:106) (1 samples, 0.12%)</title><rect x="18" y="1780" width="2" height="15" fill="rgb(206,222,40)"/><text x="21.00" y="1790.50"></text></g><g><title>_generate_cmap (matplotlib/cm.py:93) (1 samples, 0.12%)</title><rect x="18" y="1796" width="2" height="15" fill="rgb(208,114,54)"/><text x="21.00" y="1806.50"></text></g><g><title>from_list (matplotlib/colors.py:755) (1 samples, 0.12%)</title><rect x="18" y="1812" width="2" height="15" fill="rgb(233,144,2)"/><text x="21.00" y="1822.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py:14) (2 samples, 0.24%)</title><rect x="18" y="1492" width="3" height="15" fill="rgb(207,41,21)"/><text x="21.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="18" y="1508" width="3" height="15" fill="rgb(208,123,36)"/><text x="21.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="18" y="1524" width="3" height="15" fill="rgb(223,212,25)"/><text x="21.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="18" y="1540" width="3" height="15" fill="rgb(218,179,24)"/><text x="21.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="18" y="1556" width="3" height="15" fill="rgb(218,156,37)"/><text x="21.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="18" y="1572" width="3" height="15" fill="rgb(229,220,5)"/><text x="21.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py:34) (1 samples, 0.12%)</title><rect x="20" y="1588" width="1" height="15" fill="rgb(211,57,24)"/><text x="23.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="20" y="1604" width="1" height="15" fill="rgb(217,215,19)"/><text x="23.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="20" y="1620" width="1" height="15" fill="rgb(217,12,13)"/><text x="23.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="20" y="1636" width="1" height="15" fill="rgb(252,21,25)"/><text x="23.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="20" y="1652" width="1" height="15" fill="rgb(224,118,16)"/><text x="23.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="20" y="1668" width="1" height="15" fill="rgb(214,31,48)"/><text x="23.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/tools.py:5) (1 samples, 0.12%)</title><rect x="20" y="1684" width="1" height="15" fill="rgb(244,161,4)"/><text x="23.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="20" y="1700" width="1" height="15" fill="rgb(251,95,11)"/><text x="23.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="20" y="1716" width="1" height="15" fill="rgb(207,110,27)"/><text x="23.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="20" y="1732" width="1" height="15" fill="rgb(214,225,23)"/><text x="23.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="20" y="1748" width="1" height="15" fill="rgb(211,190,4)"/><text x="23.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="20" y="1764" width="1" height="15" fill="rgb(239,166,1)"/><text x="23.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/table.py:25) (1 samples, 0.12%)</title><rect x="20" y="1780" width="1" height="15" fill="rgb(211,42,23)"/><text x="23.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="20" y="1796" width="1" height="15" fill="rgb(218,118,5)"/><text x="23.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="20" y="1812" width="1" height="15" fill="rgb(211,82,2)"/><text x="23.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="20" y="1828" width="1" height="15" fill="rgb(241,174,43)"/><text x="23.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="20" y="1844" width="1" height="15" fill="rgb(245,137,27)"/><text x="23.00" y="1854.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="20" y="1860" width="1" height="15" fill="rgb(230,94,4)"/><text x="23.00" y="1870.50"></text></g><g><title>&lt;module&gt; (matplotlib/text.py:17) (1 samples, 0.12%)</title><rect x="20" y="1876" width="1" height="15" fill="rgb(238,98,0)"/><text x="23.00" y="1886.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="20" y="1892" width="1" height="15" fill="rgb(244,3,18)"/><text x="23.00" y="1902.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="20" y="1908" width="1" height="15" fill="rgb(236,27,54)"/><text x="23.00" y="1918.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="20" y="1924" width="1" height="15" fill="rgb(227,212,46)"/><text x="23.00" y="1934.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="20" y="1940" width="1" height="15" fill="rgb(223,122,53)"/><text x="23.00" y="1950.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="20" y="1956" width="1" height="15" fill="rgb(253,174,17)"/><text x="23.00" y="1966.50"></text></g><g><title>&lt;module&gt; (matplotlib/textpath.py:12) (1 samples, 0.12%)</title><rect x="20" y="1972" width="1" height="15" fill="rgb(254,73,5)"/><text x="23.00" y="1982.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="20" y="1988" width="1" height="15" fill="rgb(219,9,0)"/><text x="23.00" y="1998.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="20" y="2004" width="1" height="15" fill="rgb(237,119,41)"/><text x="23.00" y="2014.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="20" y="2020" width="1" height="15" fill="rgb(240,167,46)"/><text x="23.00" y="2030.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 0.12%)</title><rect x="20" y="2036" width="1" height="15" fill="rgb(239,53,34)"/><text x="23.00" y="2046.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:857) (1 samples, 0.12%)</title><rect x="20" y="2052" width="1" height="15" fill="rgb(248,188,25)"/><text x="23.00" y="2062.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:525) (1 samples, 0.12%)</title><rect x="20" y="2068" width="1" height="15" fill="rgb(253,73,36)"/><text x="23.00" y="2078.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.12%)</title><rect x="21" y="1524" width="1" height="15" fill="rgb(223,64,16)"/><text x="24.00" y="1534.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="21" y="1540" width="1" height="15" fill="rgb(251,172,26)"/><text x="24.00" y="1550.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="21" y="1556" width="1" height="15" fill="rgb(235,14,34)"/><text x="24.00" y="1566.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="21" y="1572" width="1" height="15" fill="rgb(236,192,44)"/><text x="24.00" y="1582.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="21" y="1588" width="1" height="15" fill="rgb(210,111,13)"/><text x="24.00" y="1598.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="21" y="1604" width="1" height="15" fill="rgb(238,99,2)"/><text x="24.00" y="1614.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="21" y="1620" width="1" height="15" fill="rgb(224,46,40)"/><text x="24.00" y="1630.50"></text></g><g><title>&lt;module&gt; (matplotlib/__init__.py:138) (1 samples, 0.12%)</title><rect x="21" y="1636" width="1" height="15" fill="rgb(219,92,49)"/><text x="24.00" y="1646.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.12%)</title><rect x="21" y="1652" width="1" height="15" fill="rgb(216,24,38)"/><text x="24.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="21" y="1668" width="1" height="15" fill="rgb(252,55,24)"/><text x="24.00" y="1678.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="21" y="1684" width="1" height="15" fill="rgb(227,48,5)"/><text x="24.00" y="1694.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="21" y="1700" width="1" height="15" fill="rgb(209,102,11)"/><text x="24.00" y="1710.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="21" y="1716" width="1" height="15" fill="rgb(211,165,35)"/><text x="24.00" y="1726.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="21" y="1732" width="1" height="15" fill="rgb(244,144,1)"/><text x="24.00" y="1742.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="21" y="1748" width="1" height="15" fill="rgb(243,37,43)"/><text x="24.00" y="1758.50"></text></g><g><title>&lt;module&gt; (matplotlib/rcsetup.py:28) (1 samples, 0.12%)</title><rect x="21" y="1764" width="1" height="15" fill="rgb(219,41,52)"/><text x="24.00" y="1774.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="21" y="1780" width="1" height="15" fill="rgb(242,22,42)"/><text x="24.00" y="1790.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="21" y="1796" width="1" height="15" fill="rgb(249,116,40)"/><text x="24.00" y="1806.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="21" y="1812" width="1" height="15" fill="rgb(247,213,39)"/><text x="24.00" y="1822.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:4) (10 samples, 1.22%)</title><rect x="10" y="52" width="14" height="15" fill="rgb(233,60,3)"/><text x="13.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 1.22%)</title><rect x="10" y="68" width="14" height="15" fill="rgb(212,36,17)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 1.22%)</title><rect x="10" y="84" width="14" height="15" fill="rgb(207,11,11)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 1.22%)</title><rect x="10" y="100" width="14" height="15" fill="rgb(209,46,52)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 1.22%)</title><rect x="10" y="116" width="14" height="15" fill="rgb(205,113,34)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 1.22%)</title><rect x="10" y="132" width="14" height="15" fill="rgb(210,36,28)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostRegressor/bench_AdaBoostRegressor_default_b_reg_n_estimators5.py:7) (8 samples, 0.98%)</title><rect x="12" y="148" width="12" height="15" fill="rgb(208,101,9)"/><text x="15.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.98%)</title><rect x="12" y="164" width="12" height="15" fill="rgb(208,191,7)"/><text x="15.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.98%)</title><rect x="12" y="180" width="12" height="15" fill="rgb(226,6,34)"/><text x="15.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.98%)</title><rect x="12" y="196" width="12" height="15" fill="rgb(223,62,18)"/><text x="15.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.98%)</title><rect x="12" y="212" width="12" height="15" fill="rgb(242,49,32)"/><text x="15.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.98%)</title><rect x="12" y="228" width="12" height="15" fill="rgb(212,111,16)"/><text x="15.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (6 samples, 0.73%)</title><rect x="15" y="244" width="9" height="15" fill="rgb(213,55,6)"/><text x="18.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.73%)</title><rect x="15" y="260" width="9" height="15" fill="rgb(213,200,35)"/><text x="18.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.73%)</title><rect x="15" y="276" width="9" height="15" fill="rgb(214,154,32)"/><text x="18.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.73%)</title><rect x="15" y="292" width="9" height="15" fill="rgb(223,175,27)"/><text x="18.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.73%)</title><rect x="15" y="308" width="9" height="15" fill="rgb(211,166,39)"/><text x="18.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.73%)</title><rect x="15" y="324" width="9" height="15" fill="rgb(228,101,17)"/><text x="18.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (6 samples, 0.73%)</title><rect x="15" y="340" width="9" height="15" fill="rgb(212,52,44)"/><text x="18.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.73%)</title><rect x="15" y="356" width="9" height="15" fill="rgb(253,23,42)"/><text x="18.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.73%)</title><rect x="15" y="372" width="9" height="15" fill="rgb(254,153,10)"/><text x="18.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.73%)</title><rect x="15" y="388" width="9" height="15" fill="rgb(223,67,49)"/><text x="18.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.73%)</title><rect x="15" y="404" width="9" height="15" fill="rgb(227,83,20)"/><text x="18.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.73%)</title><rect x="15" y="420" width="9" height="15" fill="rgb(212,130,21)"/><text x="18.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (6 samples, 0.73%)</title><rect x="15" y="436" width="9" height="15" fill="rgb(228,83,18)"/><text x="18.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.73%)</title><rect x="15" y="452" width="9" height="15" fill="rgb(242,98,54)"/><text x="18.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.73%)</title><rect x="15" y="468" width="9" height="15" fill="rgb(227,152,30)"/><text x="18.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.73%)</title><rect x="15" y="484" width="9" height="15" fill="rgb(207,119,38)"/><text x="18.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.73%)</title><rect x="15" y="500" width="9" height="15" fill="rgb(211,105,11)"/><text x="18.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.73%)</title><rect x="15" y="516" width="9" height="15" fill="rgb(232,82,48)"/><text x="18.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (6 samples, 0.73%)</title><rect x="15" y="532" width="9" height="15" fill="rgb(250,186,52)"/><text x="18.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.73%)</title><rect x="15" y="548" width="9" height="15" fill="rgb(235,13,45)"/><text x="18.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.73%)</title><rect x="15" y="564" width="9" height="15" fill="rgb(218,31,20)"/><text x="18.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.73%)</title><rect x="15" y="580" width="9" height="15" fill="rgb(231,104,26)"/><text x="18.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.73%)</title><rect x="15" y="596" width="9" height="15" fill="rgb(211,15,19)"/><text x="18.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.73%)</title><rect x="15" y="612" width="9" height="15" fill="rgb(219,172,17)"/><text x="18.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (4 samples, 0.49%)</title><rect x="18" y="628" width="6" height="15" fill="rgb(221,170,44)"/><text x="21.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.49%)</title><rect x="18" y="644" width="6" height="15" fill="rgb(215,205,2)"/><text x="21.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.49%)</title><rect x="18" y="660" width="6" height="15" fill="rgb(213,212,1)"/><text x="21.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.49%)</title><rect x="18" y="676" width="6" height="15" fill="rgb(218,96,39)"/><text x="21.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.49%)</title><rect x="18" y="692" width="6" height="15" fill="rgb(241,198,48)"/><text x="21.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.49%)</title><rect x="18" y="708" width="6" height="15" fill="rgb(209,164,6)"/><text x="21.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (4 samples, 0.49%)</title><rect x="18" y="724" width="6" height="15" fill="rgb(245,178,15)"/><text x="21.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.49%)</title><rect x="18" y="740" width="6" height="15" fill="rgb(207,46,14)"/><text x="21.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.49%)</title><rect x="18" y="756" width="6" height="15" fill="rgb(234,109,22)"/><text x="21.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.49%)</title><rect x="18" y="772" width="6" height="15" fill="rgb(228,164,21)"/><text x="21.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.49%)</title><rect x="18" y="788" width="6" height="15" fill="rgb(206,105,11)"/><text x="21.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.49%)</title><rect x="18" y="804" width="6" height="15" fill="rgb(208,1,29)"/><text x="21.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (4 samples, 0.49%)</title><rect x="18" y="820" width="6" height="15" fill="rgb(222,32,3)"/><text x="21.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.49%)</title><rect x="18" y="836" width="6" height="15" fill="rgb(243,114,50)"/><text x="21.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.49%)</title><rect x="18" y="852" width="6" height="15" fill="rgb(253,121,28)"/><text x="21.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.49%)</title><rect x="18" y="868" width="6" height="15" fill="rgb(221,31,12)"/><text x="21.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.49%)</title><rect x="18" y="884" width="6" height="15" fill="rgb(234,152,44)"/><text x="21.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.49%)</title><rect x="18" y="900" width="6" height="15" fill="rgb(233,75,20)"/><text x="21.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:44) (4 samples, 0.49%)</title><rect x="18" y="916" width="6" height="15" fill="rgb(220,192,24)"/><text x="21.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.49%)</title><rect x="18" y="932" width="6" height="15" fill="rgb(234,142,0)"/><text x="21.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.49%)</title><rect x="18" y="948" width="6" height="15" fill="rgb(242,104,2)"/><text x="21.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.49%)</title><rect x="18" y="964" width="6" height="15" fill="rgb(254,200,20)"/><text x="21.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.49%)</title><rect x="18" y="980" width="6" height="15" fill="rgb(207,185,52)"/><text x="21.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.49%)</title><rect x="18" y="996" width="6" height="15" fill="rgb(250,191,16)"/><text x="21.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py:115) (4 samples, 0.49%)</title><rect x="18" y="1012" width="6" height="15" fill="rgb(246,185,3)"/><text x="21.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.49%)</title><rect x="18" y="1028" width="6" height="15" fill="rgb(232,187,14)"/><text x="21.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.49%)</title><rect x="18" y="1044" width="6" height="15" fill="rgb(242,21,45)"/><text x="21.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.49%)</title><rect x="18" y="1060" width="6" height="15" fill="rgb(238,29,50)"/><text x="21.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.49%)</title><rect x="18" y="1076" width="6" height="15" fill="rgb(207,59,29)"/><text x="21.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.49%)</title><rect x="18" y="1092" width="6" height="15" fill="rgb(218,125,26)"/><text x="21.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py:84) (4 samples, 0.49%)</title><rect x="18" y="1108" width="6" height="15" fill="rgb(205,111,27)"/><text x="21.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.49%)</title><rect x="18" y="1124" width="6" height="15" fill="rgb(232,60,25)"/><text x="21.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.49%)</title><rect x="18" y="1140" width="6" height="15" fill="rgb(212,96,53)"/><text x="21.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.49%)</title><rect x="18" y="1156" width="6" height="15" fill="rgb(215,123,15)"/><text x="21.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.49%)</title><rect x="18" y="1172" width="6" height="15" fill="rgb(226,68,49)"/><text x="21.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.49%)</title><rect x="18" y="1188" width="6" height="15" fill="rgb(226,153,16)"/><text x="21.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py:59) (4 samples, 0.49%)</title><rect x="18" y="1204" width="6" height="15" fill="rgb(249,109,15)"/><text x="21.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.49%)</title><rect x="18" y="1220" width="6" height="15" fill="rgb(219,37,7)"/><text x="21.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.49%)</title><rect x="18" y="1236" width="6" height="15" fill="rgb(205,76,23)"/><text x="21.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.49%)</title><rect x="18" y="1252" width="6" height="15" fill="rgb(240,96,37)"/><text x="21.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.49%)</title><rect x="18" y="1268" width="6" height="15" fill="rgb(254,7,53)"/><text x="21.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.49%)</title><rect x="18" y="1284" width="6" height="15" fill="rgb(229,200,27)"/><text x="21.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py:17) (4 samples, 0.49%)</title><rect x="18" y="1300" width="6" height="15" fill="rgb(247,195,24)"/><text x="21.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.49%)</title><rect x="18" y="1316" width="6" height="15" fill="rgb(252,202,7)"/><text x="21.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.49%)</title><rect x="18" y="1332" width="6" height="15" fill="rgb(214,175,24)"/><text x="21.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.49%)</title><rect x="18" y="1348" width="6" height="15" fill="rgb(205,149,25)"/><text x="21.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.49%)</title><rect x="18" y="1364" width="6" height="15" fill="rgb(247,133,22)"/><text x="21.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.49%)</title><rect x="18" y="1380" width="6" height="15" fill="rgb(224,208,23)"/><text x="21.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py:3) (4 samples, 0.49%)</title><rect x="18" y="1396" width="6" height="15" fill="rgb(211,30,38)"/><text x="21.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.49%)</title><rect x="18" y="1412" width="6" height="15" fill="rgb(218,35,42)"/><text x="21.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.49%)</title><rect x="18" y="1428" width="6" height="15" fill="rgb(230,229,4)"/><text x="21.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.49%)</title><rect x="18" y="1444" width="6" height="15" fill="rgb(228,105,17)"/><text x="21.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.49%)</title><rect x="18" y="1460" width="6" height="15" fill="rgb(249,61,0)"/><text x="21.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.49%)</title><rect x="18" y="1476" width="6" height="15" fill="rgb(247,199,13)"/><text x="21.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py:4) (2 samples, 0.24%)</title><rect x="21" y="1492" width="3" height="15" fill="rgb(230,177,9)"/><text x="24.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="21" y="1508" width="3" height="15" fill="rgb(242,34,7)"/><text x="24.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="22" y="1524" width="2" height="15" fill="rgb(222,182,20)"/><text x="25.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="22" y="1540" width="2" height="15" fill="rgb(240,135,34)"/><text x="25.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="22" y="1556" width="2" height="15" fill="rgb(252,107,30)"/><text x="25.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="22" y="1572" width="2" height="15" fill="rgb(232,67,8)"/><text x="25.00" y="1582.50"></text></g><g><title>&lt;module&gt; (matplotlib/artist.py:12) (1 samples, 0.12%)</title><rect x="22" y="1588" width="2" height="15" fill="rgb(236,177,49)"/><text x="25.00" y="1598.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.12%)</title><rect x="22" y="1604" width="2" height="15" fill="rgb(222,62,36)"/><text x="25.00" y="1614.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="22" y="1620" width="2" height="15" fill="rgb(210,8,3)"/><text x="25.00" y="1630.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="22" y="1636" width="2" height="15" fill="rgb(239,178,23)"/><text x="25.00" y="1646.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="22" y="1652" width="2" height="15" fill="rgb(214,146,24)"/><text x="25.00" y="1662.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:670) (1 samples, 0.12%)</title><rect x="22" y="1668" width="2" height="15" fill="rgb(210,65,32)"/><text x="25.00" y="1678.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:583) (1 samples, 0.12%)</title><rect x="22" y="1684" width="2" height="15" fill="rgb(250,124,24)"/><text x="25.00" y="1694.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:164) (1 samples, 0.12%)</title><rect x="24" y="100" width="1" height="15" fill="rgb(222,59,3)"/><text x="27.00" y="110.50"></text></g><g><title>register_converters (mlprodict/onnx_conv/register.py:188) (1 samples, 0.12%)</title><rect x="24" y="116" width="1" height="15" fill="rgb(235,218,4)"/><text x="27.00" y="126.50"></text></g><g><title>_register_converters_lightgbm (mlprodict/onnx_conv/register.py:40) (1 samples, 0.12%)</title><rect x="24" y="132" width="1" height="15" fill="rgb(218,187,1)"/><text x="27.00" y="142.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="24" y="148" width="1" height="15" fill="rgb(249,146,17)"/><text x="27.00" y="158.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="24" y="164" width="1" height="15" fill="rgb(216,149,16)"/><text x="27.00" y="174.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="24" y="180" width="1" height="15" fill="rgb(249,86,14)"/><text x="27.00" y="190.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="24" y="196" width="1" height="15" fill="rgb(223,21,32)"/><text x="27.00" y="206.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="24" y="212" width="1" height="15" fill="rgb(229,165,4)"/><text x="27.00" y="222.50"></text></g><g><title>&lt;module&gt; (lightgbm/__init__.py:8) (1 samples, 0.12%)</title><rect x="24" y="228" width="1" height="15" fill="rgb(244,67,30)"/><text x="27.00" y="238.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="24" y="244" width="1" height="15" fill="rgb(236,15,40)"/><text x="27.00" y="254.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="24" y="260" width="1" height="15" fill="rgb(247,72,21)"/><text x="27.00" y="270.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="24" y="276" width="1" height="15" fill="rgb(208,217,42)"/><text x="27.00" y="286.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="24" y="292" width="1" height="15" fill="rgb(213,89,39)"/><text x="27.00" y="302.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="24" y="308" width="1" height="15" fill="rgb(245,117,3)"/><text x="27.00" y="318.50"></text></g><g><title>&lt;module&gt; (lightgbm/basic.py:33) (1 samples, 0.12%)</title><rect x="24" y="324" width="1" height="15" fill="rgb(225,149,47)"/><text x="27.00" y="334.50"></text></g><g><title>_load_lib (lightgbm/basic.py:28) (1 samples, 0.12%)</title><rect x="24" y="340" width="1" height="15" fill="rgb(207,16,20)"/><text x="27.00" y="350.50"></text></g><g><title>LoadLibrary (ctypes/__init__.py:434) (1 samples, 0.12%)</title><rect x="24" y="356" width="1" height="15" fill="rgb(251,40,50)"/><text x="27.00" y="366.50"></text></g><g><title>__init__ (ctypes/__init__.py:356) (1 samples, 0.12%)</title><rect x="24" y="372" width="1" height="15" fill="rgb(226,59,41)"/><text x="27.00" y="382.50"></text></g><g><title>0x7f19b666fa28 (?) (1 samples, 0.12%)</title><rect x="24" y="388" width="1" height="15" fill="rgb(236,221,7)"/><text x="27.00" y="398.50"></text></g><g><title>dlopen (libdl-2.29.so) (1 samples, 0.12%)</title><rect x="24" y="404" width="1" height="15" fill="rgb(222,131,40)"/><text x="27.00" y="414.50"></text></g><g><title>0x7f19c1e16995 (libdl-2.29.so) (1 samples, 0.12%)</title><rect x="24" y="420" width="1" height="15" fill="rgb(247,70,37)"/><text x="27.00" y="430.50"></text></g><g><title>_dl_catch_error (libc-2.29.so) (1 samples, 0.12%)</title><rect x="24" y="436" width="1" height="15" fill="rgb(239,62,27)"/><text x="27.00" y="446.50"></text></g><g><title>_dl_catch_exception (libc-2.29.so) (1 samples, 0.12%)</title><rect x="24" y="452" width="1" height="15" fill="rgb(238,71,15)"/><text x="27.00" y="462.50"></text></g><g><title>0x7f19c1e16258 (libdl-2.29.so) (1 samples, 0.12%)</title><rect x="24" y="468" width="1" height="15" fill="rgb(210,132,13)"/><text x="27.00" y="478.50"></text></g><g><title>0x7f19c1e63d7a (ld-2.29.so) (1 samples, 0.12%)</title><rect x="24" y="484" width="1" height="15" fill="rgb(220,61,37)"/><text x="27.00" y="494.50"></text></g><g><title>_dl_catch_exception (libc-2.29.so) (1 samples, 0.12%)</title><rect x="24" y="500" width="1" height="15" fill="rgb(211,191,29)"/><text x="27.00" y="510.50"></text></g><g><title>0x7f19c1e64345 (ld-2.29.so) (1 samples, 0.12%)</title><rect x="24" y="516" width="1" height="15" fill="rgb(219,207,12)"/><text x="27.00" y="526.50"></text></g><g><title>0x7f19c1e5cfec (ld-2.29.so) (1 samples, 0.12%)</title><rect x="24" y="532" width="1" height="15" fill="rgb(205,42,0)"/><text x="27.00" y="542.50"></text></g><g><title>0x7f19c1e5b487 (ld-2.29.so) (1 samples, 0.12%)</title><rect x="24" y="548" width="1" height="15" fill="rgb(246,209,29)"/><text x="27.00" y="558.50"></text></g><g><title>setup_profile0 (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:25) (2 samples, 0.24%)</title><rect x="24" y="84" width="3" height="15" fill="rgb(205,147,28)"/><text x="27.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (1 samples, 0.12%)</title><rect x="25" y="100" width="2" height="15" fill="rgb(220,36,4)"/><text x="28.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:370) (1 samples, 0.12%)</title><rect x="25" y="116" width="2" height="15" fill="rgb(219,49,19)"/><text x="28.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py:110) (1 samples, 0.12%)</title><rect x="25" y="132" width="2" height="15" fill="rgb(224,72,17)"/><text x="28.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py:346) (1 samples, 0.12%)</title><rect x="25" y="148" width="2" height="15" fill="rgb(238,117,8)"/><text x="28.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py:139) (1 samples, 0.12%)</title><rect x="25" y="164" width="2" height="15" fill="rgb(208,110,17)"/><text x="28.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py:973) (1 samples, 0.12%)</title><rect x="25" y="180" width="2" height="15" fill="rgb(241,18,24)"/><text x="28.00" y="190.50"></text></g><g><title>convert_sklearn_decision_tree_regressor (mlprodict/onnx_conv/sklconv/tree_converters.py:35) (1 samples, 0.12%)</title><rect x="25" y="196" width="2" height="15" fill="rgb(211,58,53)"/><text x="28.00" y="206.50"></text></g><g><title>add_tree_to_attribute_pairs (skl2onnx/common/tree_ensemble.py:167) (1 samples, 0.12%)</title><rect x="25" y="212" width="2" height="15" fill="rgb(240,69,21)"/><text x="28.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.12%)</title><rect x="25" y="228" width="2" height="15" fill="rgb(231,56,31)"/><text x="28.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.12%)</title><rect x="25" y="244" width="2" height="15" fill="rgb(225,24,49)"/><text x="28.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (1 samples, 0.12%)</title><rect x="25" y="260" width="2" height="15" fill="rgb(243,54,4)"/><text x="28.00" y="270.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:47) (3 samples, 0.37%)</title><rect x="24" y="52" width="4" height="15" fill="rgb(222,49,36)"/><text x="27.00" y="62.50"></text></g><g><title>profile0_skl (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:46) (3 samples, 0.37%)</title><rect x="24" y="68" width="4" height="15" fill="rgb(245,1,51)"/><text x="27.00" y="78.50"></text></g><g><title>setup_profile0 (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:26) (1 samples, 0.12%)</title><rect x="27" y="84" width="1" height="15" fill="rgb(250,196,42)"/><text x="30.00" y="94.50"></text></g><g><title>profile0 (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:18) (1 samples, 0.12%)</title><rect x="27" y="100" width="1" height="15" fill="rgb(234,130,22)"/><text x="30.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (1 samples, 0.12%)</title><rect x="27" y="116" width="1" height="15" fill="rgb(239,143,26)"/><text x="30.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (1 samples, 0.12%)</title><rect x="27" y="132" width="1" height="15" fill="rgb(251,130,53)"/><text x="30.00" y="142.50"></text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py:1131) (1 samples, 0.12%)</title><rect x="27" y="148" width="1" height="15" fill="rgb(223,93,51)"/><text x="30.00" y="158.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1096) (1 samples, 0.12%)</title><rect x="27" y="164" width="1" height="15" fill="rgb(216,200,37)"/><text x="30.00" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_weight_boosting.py:1096) (1 samples, 0.12%)</title><rect x="27" y="180" width="1" height="15" fill="rgb(239,202,18)"/><text x="30.00" y="190.50"></text></g><g><title>predict (sklearn/tree/_classes.py:419) (1 samples, 0.12%)</title><rect x="27" y="196" width="1" height="15" fill="rgb(219,19,46)"/><text x="30.00" y="206.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py:380) (1 samples, 0.12%)</title><rect x="27" y="212" width="1" height="15" fill="rgb(221,188,20)"/><text x="30.00" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (1 samples, 0.12%)</title><rect x="27" y="228" width="1" height="15" fill="rgb(236,180,26)"/><text x="30.00" y="238.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:155) (1 samples, 0.12%)</title><rect x="27" y="244" width="1" height="15" fill="rgb(243,96,26)"/><text x="30.00" y="254.50"></text></g><g><title>__instancecheck__ (abc.py:139) (1 samples, 0.12%)</title><rect x="27" y="260" width="1" height="15" fill="rgb(235,161,13)"/><text x="30.00" y="270.50"></text></g><g><title>__subclasscheck__ (abc.py:143) (1 samples, 0.12%)</title><rect x="27" y="276" width="1" height="15" fill="rgb(207,19,54)"/><text x="30.00" y="286.50"></text></g><g><title>check_array (sklearn/utils/validation.py:490) (1 samples, 0.12%)</title><rect x="28" y="180" width="2" height="15" fill="rgb(224,177,38)"/><text x="31.00" y="190.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py:1216) (1 samples, 0.12%)</title><rect x="28" y="196" width="2" height="15" fill="rgb(224,178,44)"/><text x="31.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:502) (1 samples, 0.12%)</title><rect x="30" y="180" width="1" height="15" fill="rgb(234,100,38)"/><text x="33.00" y="190.50"></text></g><g><title>__enter__ (warnings.py:480) (1 samples, 0.12%)</title><rect x="30" y="196" width="1" height="15" fill="rgb(251,54,38)"/><text x="33.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:504) (3 samples, 0.37%)</title><rect x="31" y="180" width="4" height="15" fill="rgb(209,45,13)"/><text x="34.00" y="190.50"></text></g><g><title>simplefilter (warnings.py:179) (3 samples, 0.37%)</title><rect x="31" y="196" width="4" height="15" fill="rgb(221,189,48)"/><text x="34.00" y="206.50"></text></g><g><title>_add_filter (warnings.py:186) (3 samples, 0.37%)</title><rect x="31" y="212" width="4" height="15" fill="rgb(239,181,44)"/><text x="34.00" y="222.50"></text></g><g><title>0x7f19c1ba4e76 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="34" y="228" width="1" height="15" fill="rgb(205,66,6)"/><text x="37.00" y="238.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (1 samples, 0.12%)</title><rect x="35" y="180" width="2" height="15" fill="rgb(243,117,54)"/><text x="38.00" y="190.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (1 samples, 0.12%)</title><rect x="35" y="196" width="2" height="15" fill="rgb(232,94,43)"/><text x="38.00" y="206.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;:419) (1 samples, 0.12%)</title><rect x="35" y="212" width="2" height="15" fill="rgb(232,80,26)"/><text x="38.00" y="222.50"></text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py:1129) (7 samples, 0.86%)</title><rect x="28" y="148" width="10" height="15" fill="rgb(222,133,46)"/><text x="31.00" y="158.50"></text></g><g><title>_validate_data (sklearn/ensemble/_weight_boosting.py:84) (7 samples, 0.86%)</title><rect x="28" y="164" width="10" height="15" fill="rgb(250,191,29)"/><text x="31.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (1 samples, 0.12%)</title><rect x="37" y="180" width="1" height="15" fill="rgb(232,220,19)"/><text x="40.00" y="190.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:138) (1 samples, 0.12%)</title><rect x="37" y="196" width="1" height="15" fill="rgb(216,199,23)"/><text x="40.00" y="206.50"></text></g><g><title>unicode_endswith (python3.7) (1 samples, 0.12%)</title><rect x="44" y="244" width="2" height="15" fill="rgb(232,189,16)"/><text x="47.00" y="254.50"></text></g><g><title>predict (sklearn/tree/_classes.py:418) (4 samples, 0.49%)</title><rect x="41" y="196" width="6" height="15" fill="rgb(211,204,38)"/><text x="44.00" y="206.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (4 samples, 0.49%)</title><rect x="41" y="212" width="6" height="15" fill="rgb(215,44,6)"/><text x="44.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (4 samples, 0.49%)</title><rect x="41" y="228" width="6" height="15" fill="rgb(213,13,47)"/><text x="44.00" y="238.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.12%)</title><rect x="46" y="244" width="1" height="15" fill="rgb(225,126,33)"/><text x="49.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:456) (2 samples, 0.24%)</title><rect x="47" y="228" width="3" height="15" fill="rgb(245,99,32)"/><text x="50.00" y="238.50"></text></g><g><title>check_array (sklearn/utils/validation.py:490) (1 samples, 0.12%)</title><rect x="50" y="228" width="1" height="15" fill="rgb(209,211,23)"/><text x="53.00" y="238.50"></text></g><g><title>__enter__ (warnings.py:479) (1 samples, 0.12%)</title><rect x="51" y="244" width="2" height="15" fill="rgb(236,154,22)"/><text x="54.00" y="254.50"></text></g><g><title>__enter__ (warnings.py:480) (1 samples, 0.12%)</title><rect x="53" y="244" width="1" height="15" fill="rgb(250,115,15)"/><text x="56.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:502) (3 samples, 0.37%)</title><rect x="51" y="228" width="5" height="15" fill="rgb(244,4,1)"/><text x="54.00" y="238.50"></text></g><g><title>__init__ (warnings.py:461) (1 samples, 0.12%)</title><rect x="54" y="244" width="2" height="15" fill="rgb(252,164,11)"/><text x="57.00" y="254.50"></text></g><g><title>simplefilter (warnings.py:177) (1 samples, 0.12%)</title><rect x="57" y="244" width="2" height="15" fill="rgb(218,41,44)"/><text x="60.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:504) (5 samples, 0.61%)</title><rect x="56" y="228" width="7" height="15" fill="rgb(251,194,19)"/><text x="59.00" y="238.50"></text></g><g><title>simplefilter (warnings.py:179) (3 samples, 0.37%)</title><rect x="59" y="244" width="4" height="15" fill="rgb(213,157,14)"/><text x="62.00" y="254.50"></text></g><g><title>_add_filter (warnings.py:186) (3 samples, 0.37%)</title><rect x="59" y="260" width="4" height="15" fill="rgb(254,195,17)"/><text x="62.00" y="270.50"></text></g><g><title>check_array (sklearn/utils/validation.py:505) (1 samples, 0.12%)</title><rect x="63" y="228" width="1" height="15" fill="rgb(216,57,25)"/><text x="66.00" y="238.50"></text></g><g><title>arraydescr_new (descriptor.c:2283) (1 samples, 0.12%)</title><rect x="63" y="244" width="1" height="15" fill="rgb(206,203,43)"/><text x="66.00" y="254.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c:1385) (1 samples, 0.12%)</title><rect x="63" y="260" width="1" height="15" fill="rgb(227,204,25)"/><text x="66.00" y="270.50"></text></g><g><title>check_array (sklearn/utils/validation.py:515) (4 samples, 0.49%)</title><rect x="64" y="228" width="6" height="15" fill="rgb(216,24,44)"/><text x="67.00" y="238.50"></text></g><g><title>asarray (numpy/core/_asarray.py:85) (2 samples, 0.24%)</title><rect x="67" y="244" width="3" height="15" fill="rgb(217,61,43)"/><text x="70.00" y="254.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1664) (1 samples, 0.12%)</title><rect x="69" y="260" width="1" height="15" fill="rgb(245,227,19)"/><text x="72.00" y="270.50"></text></g><g><title>PyArray_DescrConverter2 (descriptor.c:1358) (1 samples, 0.12%)</title><rect x="69" y="276" width="1" height="15" fill="rgb(225,9,41)"/><text x="72.00" y="286.50"></text></g><g><title>__exit__ (warnings.py:494) (1 samples, 0.12%)</title><rect x="74" y="244" width="2" height="15" fill="rgb(209,156,7)"/><text x="77.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:518) (5 samples, 0.61%)</title><rect x="70" y="228" width="7" height="15" fill="rgb(247,23,53)"/><text x="73.00" y="238.50"></text></g><g><title>__exit__ (warnings.py:496) (1 samples, 0.12%)</title><rect x="76" y="244" width="1" height="15" fill="rgb(234,179,26)"/><text x="79.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:524) (1 samples, 0.12%)</title><rect x="77" y="228" width="2" height="15" fill="rgb(254,204,5)"/><text x="80.00" y="238.50"></text></g><g><title>_ensure_no_complex_data (sklearn/utils/validation.py:333) (1 samples, 0.12%)</title><rect x="77" y="244" width="2" height="15" fill="rgb(220,110,2)"/><text x="80.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:535) (1 samples, 0.12%)</title><rect x="79" y="228" width="1" height="15" fill="rgb(250,115,1)"/><text x="82.00" y="238.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (2 samples, 0.24%)</title><rect x="83" y="260" width="3" height="15" fill="rgb(221,199,21)"/><text x="86.00" y="270.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (4 samples, 0.49%)</title><rect x="82" y="244" width="5" height="15" fill="rgb(242,101,49)"/><text x="85.00" y="254.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;:419) (1 samples, 0.12%)</title><rect x="86" y="260" width="1" height="15" fill="rgb(246,152,11)"/><text x="89.00" y="270.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (6 samples, 0.73%)</title><rect x="80" y="228" width="9" height="15" fill="rgb(245,183,37)"/><text x="83.00" y="238.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:42) (1 samples, 0.12%)</title><rect x="87" y="244" width="2" height="15" fill="rgb(206,56,48)"/><text x="90.00" y="254.50"></text></g><g><title>get_config (sklearn/_config.py:26) (1 samples, 0.12%)</title><rect x="87" y="260" width="2" height="15" fill="rgb(235,62,16)"/><text x="90.00" y="270.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:138) (3 samples, 0.37%)</title><rect x="89" y="244" width="4" height="15" fill="rgb(231,114,9)"/><text x="92.00" y="254.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:149) (1 samples, 0.12%)</title><rect x="93" y="244" width="2" height="15" fill="rgb(207,160,54)"/><text x="96.00" y="254.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c:1184) (1 samples, 0.12%)</title><rect x="93" y="260" width="2" height="15" fill="rgb(208,12,27)"/><text x="96.00" y="270.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:150) (1 samples, 0.12%)</title><rect x="95" y="244" width="1" height="15" fill="rgb(219,100,8)"/><text x="98.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (7 samples, 0.86%)</title><rect x="89" y="228" width="10" height="15" fill="rgb(224,43,17)"/><text x="92.00" y="238.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:155) (2 samples, 0.24%)</title><rect x="96" y="244" width="3" height="15" fill="rgb(247,19,13)"/><text x="99.00" y="254.50"></text></g><g><title>__instancecheck__ (abc.py:139) (2 samples, 0.24%)</title><rect x="96" y="260" width="3" height="15" fill="rgb(232,208,39)"/><text x="99.00" y="270.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py:380) (37 samples, 4.52%)</title><rect x="47" y="212" width="53" height="15" fill="rgb(243,57,15)"/><text x="50.00" y="222.50">_vali..</text></g><g><title>check_array (sklearn/utils/validation.py:574) (1 samples, 0.12%)</title><rect x="99" y="228" width="1" height="15" fill="rgb(242,16,12)"/><text x="102.00" y="238.50"></text></g><g><title>predict (sklearn/tree/_classes.py:419) (38 samples, 4.65%)</title><rect x="47" y="196" width="55" height="15" fill="rgb(220,213,53)"/><text x="50.00" y="206.50">predi..</text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py:386) (1 samples, 0.12%)</title><rect x="100" y="212" width="2" height="15" fill="rgb(219,125,17)"/><text x="103.00" y="222.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c:1189) (1 samples, 0.12%)</title><rect x="100" y="228" width="2" height="15" fill="rgb(250,16,22)"/><text x="103.00" y="238.50"></text></g><g><title>0x7f199b5e0225 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="102" y="260" width="1" height="15" fill="rgb(207,222,16)"/><text x="105.00" y="270.50"></text></g><g><title>arraydescr_richcompare (descriptor.c:3214) (1 samples, 0.12%)</title><rect x="102" y="276" width="1" height="15" fill="rgb(226,187,25)"/><text x="105.00" y="286.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c:1399) (1 samples, 0.12%)</title><rect x="102" y="292" width="1" height="15" fill="rgb(236,136,52)"/><text x="105.00" y="302.50"></text></g><g><title>0x7f199b5e02df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="103" y="260" width="2" height="15" fill="rgb(221,158,8)"/><text x="106.00" y="270.50"></text></g><g><title>0x7f199b5c4d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="103" y="276" width="2" height="15" fill="rgb(214,222,26)"/><text x="106.00" y="286.50"></text></g><g><title>0x7f199b5c4666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="103" y="292" width="2" height="15" fill="rgb(215,159,20)"/><text x="106.00" y="302.50"></text></g><g><title>0x7f199b5ba2fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="103" y="308" width="2" height="15" fill="rgb(235,18,40)"/><text x="106.00" y="318.50"></text></g><g><title>array_getbuffer (buffer.c:748) (1 samples, 0.12%)</title><rect x="103" y="324" width="2" height="15" fill="rgb(246,86,45)"/><text x="106.00" y="334.50"></text></g><g><title>0x7f199b5e06aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="105" y="260" width="1" height="15" fill="rgb(205,25,13)"/><text x="108.00" y="270.50"></text></g><g><title>0x7f199b5e06ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="106" y="260" width="2" height="15" fill="rgb(226,199,47)"/><text x="109.00" y="270.50"></text></g><g><title>0x7f199b5e06b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="108" y="260" width="1" height="15" fill="rgb(219,27,23)"/><text x="111.00" y="270.50"></text></g><g><title>0x7f199b5d1fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.86%)</title><rect x="102" y="228" width="10" height="15" fill="rgb(250,135,50)"/><text x="105.00" y="238.50"></text></g><g><title>0x7f199b5e1405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.86%)</title><rect x="102" y="244" width="10" height="15" fill="rgb(227,10,15)"/><text x="105.00" y="254.50"></text></g><g><title>0x7f199b5e06b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.24%)</title><rect x="109" y="260" width="3" height="15" fill="rgb(241,124,25)"/><text x="112.00" y="270.50"></text></g><g><title>PyArray_ClipmodeConverter (conversion_utils.c:625) (1 samples, 0.12%)</title><rect x="112" y="260" width="1" height="15" fill="rgb(245,43,25)"/><text x="115.00" y="270.50"></text></g><g><title>array_take (methods.c:138) (3 samples, 0.37%)</title><rect x="112" y="244" width="4" height="15" fill="rgb(215,1,20)"/><text x="115.00" y="254.50"></text></g><g><title>PyArray_ClipmodeConverter (conversion_utils.c:655) (2 samples, 0.24%)</title><rect x="113" y="260" width="3" height="15" fill="rgb(244,62,5)"/><text x="116.00" y="270.50"></text></g><g><title>PyArray_ClipmodeConverter (conversion_utils.c:677) (1 samples, 0.12%)</title><rect x="115" y="276" width="1" height="15" fill="rgb(254,30,17)"/><text x="118.00" y="286.50"></text></g><g><title>0x7f199b5d205a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.49%)</title><rect x="112" y="228" width="6" height="15" fill="rgb(209,30,14)"/><text x="115.00" y="238.50"></text></g><g><title>array_take (methods.c:145) (1 samples, 0.12%)</title><rect x="116" y="244" width="2" height="15" fill="rgb(210,118,40)"/><text x="119.00" y="254.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:36) (1 samples, 0.12%)</title><rect x="116" y="260" width="2" height="15" fill="rgb(254,10,51)"/><text x="119.00" y="270.50"></text></g><g><title>0x7f199b5d214f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="118" y="228" width="1" height="15" fill="rgb(249,51,10)"/><text x="121.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.12%)</title><rect x="118" y="244" width="1" height="15" fill="rgb(207,45,52)"/><text x="121.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.12%)</title><rect x="118" y="260" width="1" height="15" fill="rgb(229,198,53)"/><text x="121.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (1 samples, 0.12%)</title><rect x="118" y="276" width="1" height="15" fill="rgb(209,10,10)"/><text x="121.00" y="286.50"></text></g><g><title>0x7f199b5d218f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="119" y="228" width="2" height="15" fill="rgb(214,39,41)"/><text x="122.00" y="238.50"></text></g><g><title>array_reshape (methods.c:186) (1 samples, 0.12%)</title><rect x="121" y="244" width="1" height="15" fill="rgb(236,139,0)"/><text x="124.00" y="254.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:45) (1 samples, 0.12%)</title><rect x="121" y="260" width="1" height="15" fill="rgb(250,175,25)"/><text x="124.00" y="270.50"></text></g><g><title>predict (sklearn/tree/_classes.py:420) (15 samples, 1.83%)</title><rect x="102" y="196" width="21" height="15" fill="rgb(209,199,21)"/><text x="105.00" y="206.50"></text></g><g><title>0x7f199b5d2d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (15 samples, 1.83%)</title><rect x="102" y="212" width="21" height="15" fill="rgb(239,48,24)"/><text x="105.00" y="222.50"></text></g><g><title>0x7f199b5d2328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.24%)</title><rect x="121" y="228" width="2" height="15" fill="rgb(232,200,54)"/><text x="124.00" y="238.50"></text></g><g><title>array_reshape (methods.c:201) (1 samples, 0.12%)</title><rect x="122" y="244" width="1" height="15" fill="rgb(240,121,28)"/><text x="125.00" y="254.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (1 samples, 0.12%)</title><rect x="122" y="260" width="1" height="15" fill="rgb(239,117,54)"/><text x="125.00" y="270.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c:954) (1 samples, 0.12%)</title><rect x="122" y="276" width="1" height="15" fill="rgb(222,41,50)"/><text x="125.00" y="286.50"></text></g><g><title>predict (sklearn/tree/_classes.py:421) (1 samples, 0.12%)</title><rect x="123" y="196" width="2" height="15" fill="rgb(237,133,44)"/><text x="126.00" y="206.50"></text></g><g><title>predict (sklearn/tree/_classes.py:424) (1 samples, 0.12%)</title><rect x="125" y="196" width="1" height="15" fill="rgb(252,29,1)"/><text x="128.00" y="206.50"></text></g><g><title>is_classifier (sklearn/base.py:652) (1 samples, 0.12%)</title><rect x="125" y="212" width="1" height="15" fill="rgb(205,11,40)"/><text x="128.00" y="222.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1096) (61 samples, 7.46%)</title><rect x="40" y="164" width="88" height="15" fill="rgb(221,67,21)"/><text x="43.00" y="174.50">_get_media..</text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_weight_boosting.py:1096) (60 samples, 7.33%)</title><rect x="41" y="180" width="87" height="15" fill="rgb(253,17,5)"/><text x="44.00" y="190.50">&lt;listcomp&gt;..</text></g><g><title>predict (sklearn/tree/_classes.py:442) (1 samples, 0.12%)</title><rect x="126" y="196" width="2" height="15" fill="rgb(241,72,52)"/><text x="129.00" y="206.50"></text></g><g><title>_new_argsortlike (item_selection.c:1022) (1 samples, 0.12%)</title><rect x="129" y="276" width="2" height="15" fill="rgb(251,74,34)"/><text x="132.00" y="286.50"></text></g><g><title>_new_argsortlike (item_selection.c:1027) (1 samples, 0.12%)</title><rect x="131" y="276" width="1" height="15" fill="rgb(207,120,14)"/><text x="134.00" y="286.50"></text></g><g><title>_new_argsortlike (item_selection.c:1048) (1 samples, 0.12%)</title><rect x="132" y="276" width="2" height="15" fill="rgb(238,194,0)"/><text x="135.00" y="286.50"></text></g><g><title>DOUBLE_copyswapn (arraytypes.c.src:1915) (1 samples, 0.12%)</title><rect x="132" y="292" width="2" height="15" fill="rgb(226,3,28)"/><text x="135.00" y="302.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c:317) (1 samples, 0.12%)</title><rect x="132" y="308" width="2" height="15" fill="rgb(242,171,23)"/><text x="135.00" y="318.50"></text></g><g><title>_new_argsortlike (item_selection.c:1057) (2 samples, 0.24%)</title><rect x="134" y="276" width="2" height="15" fill="rgb(243,156,54)"/><text x="137.00" y="286.50"></text></g><g><title>aquicksort_double (quicksort.c.src:222) (2 samples, 0.24%)</title><rect x="138" y="292" width="3" height="15" fill="rgb(233,103,25)"/><text x="141.00" y="302.50"></text></g><g><title>DOUBLE_LT (npysort_common.h:130) (1 samples, 0.12%)</title><rect x="139" y="308" width="2" height="15" fill="rgb(208,168,49)"/><text x="142.00" y="318.50"></text></g><g><title>_new_argsortlike (item_selection.c:1064) (4 samples, 0.49%)</title><rect x="136" y="276" width="6" height="15" fill="rgb(214,93,44)"/><text x="139.00" y="286.50"></text></g><g><title>aquicksort_double (quicksort.c.src:223) (1 samples, 0.12%)</title><rect x="141" y="292" width="1" height="15" fill="rgb(250,225,53)"/><text x="144.00" y="302.50"></text></g><g><title>_new_argsortlike (item_selection.c:1100) (3 samples, 0.37%)</title><rect x="142" y="276" width="5" height="15" fill="rgb(234,2,43)"/><text x="145.00" y="286.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1099) (14 samples, 1.71%)</title><rect x="128" y="164" width="20" height="15" fill="rgb(251,60,16)"/><text x="131.00" y="174.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (14 samples, 1.71%)</title><rect x="128" y="180" width="20" height="15" fill="rgb(211,12,15)"/><text x="131.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (14 samples, 1.71%)</title><rect x="128" y="196" width="20" height="15" fill="rgb(235,63,2)"/><text x="131.00" y="206.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (14 samples, 1.71%)</title><rect x="128" y="212" width="20" height="15" fill="rgb(215,157,38)"/><text x="131.00" y="222.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (13 samples, 1.59%)</title><rect x="129" y="228" width="19" height="15" fill="rgb(241,92,44)"/><text x="132.00" y="238.50"></text></g><g><title>array_argsort (methods.c:1395) (13 samples, 1.59%)</title><rect x="129" y="244" width="19" height="15" fill="rgb(237,6,25)"/><text x="132.00" y="254.50"></text></g><g><title>PyArray_ArgSort (item_selection.c:1322) (13 samples, 1.59%)</title><rect x="129" y="260" width="19" height="15" fill="rgb(215,174,32)"/><text x="132.00" y="270.50"></text></g><g><title>_new_argsortlike (item_selection.c:984) (1 samples, 0.12%)</title><rect x="147" y="276" width="1" height="15" fill="rgb(240,50,20)"/><text x="150.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.12%)</title><rect x="147" y="292" width="1" height="15" fill="rgb(224,11,37)"/><text x="150.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (1 samples, 0.12%)</title><rect x="147" y="308" width="1" height="15" fill="rgb(218,214,14)"/><text x="150.00" y="318.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (1 samples, 0.12%)</title><rect x="147" y="324" width="1" height="15" fill="rgb(243,93,9)"/><text x="150.00" y="334.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (1 samples, 0.12%)</title><rect x="147" y="340" width="1" height="15" fill="rgb(234,81,24)"/><text x="150.00" y="350.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (1 samples, 0.12%)</title><rect x="147" y="356" width="1" height="15" fill="rgb(253,13,44)"/><text x="150.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="147" y="372" width="1" height="15" fill="rgb(239,88,22)"/><text x="150.00" y="382.50"></text></g><g><title>array_dealloc (arrayobject.c:525) (1 samples, 0.12%)</title><rect x="149" y="180" width="2" height="15" fill="rgb(245,0,4)"/><text x="152.00" y="190.50"></text></g><g><title>array_dealloc (arrayobject.c:538) (1 samples, 0.12%)</title><rect x="151" y="180" width="1" height="15" fill="rgb(242,152,31)"/><text x="154.00" y="190.50"></text></g><g><title>mapiter_trivial_get (lowlevel_strided_loops.c.src:1425) (1 samples, 0.12%)</title><rect x="152" y="196" width="2" height="15" fill="rgb(228,86,41)"/><text x="155.00" y="206.50"></text></g><g><title>check_and_adjust_index (common.h:110) (1 samples, 0.12%)</title><rect x="152" y="212" width="2" height="15" fill="rgb(211,209,10)"/><text x="155.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1521) (2 samples, 0.24%)</title><rect x="152" y="180" width="3" height="15" fill="rgb(229,51,6)"/><text x="155.00" y="190.50"></text></g><g><title>mapiter_trivial_get (lowlevel_strided_loops.c.src:1455) (1 samples, 0.12%)</title><rect x="154" y="196" width="1" height="15" fill="rgb(212,229,25)"/><text x="157.00" y="206.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c:261) (1 samples, 0.12%)</title><rect x="157" y="292" width="1" height="15" fill="rgb(206,106,30)"/><text x="160.00" y="302.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c:5531) (1 samples, 0.12%)</title><rect x="158" y="308" width="2" height="15" fill="rgb(225,53,13)"/><text x="161.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (1 samples, 0.12%)</title><rect x="158" y="324" width="2" height="15" fill="rgb(212,64,53)"/><text x="161.00" y="334.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (1 samples, 0.12%)</title><rect x="158" y="340" width="2" height="15" fill="rgb(247,66,42)"/><text x="161.00" y="350.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (1 samples, 0.12%)</title><rect x="158" y="356" width="2" height="15" fill="rgb(253,88,40)"/><text x="161.00" y="366.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.12%)</title><rect x="158" y="372" width="2" height="15" fill="rgb(251,187,5)"/><text x="161.00" y="382.50"></text></g><g><title>DOUBLE_add (loops.c.src:1756) (4 samples, 0.49%)</title><rect x="160" y="356" width="5" height="15" fill="rgb(251,95,2)"/><text x="163.00" y="366.50"></text></g><g><title>stable_cumsum (sklearn/utils/extmath.py:825) (8 samples, 0.98%)</title><rect x="155" y="180" width="12" height="15" fill="rgb(235,149,34)"/><text x="158.00" y="190.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;:6) (7 samples, 0.86%)</title><rect x="157" y="196" width="10" height="15" fill="rgb(246,212,7)"/><text x="160.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.86%)</title><rect x="157" y="212" width="10" height="15" fill="rgb(242,171,35)"/><text x="160.00" y="222.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py:2423) (7 samples, 0.86%)</title><rect x="157" y="228" width="10" height="15" fill="rgb(250,51,32)"/><text x="160.00" y="238.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (7 samples, 0.86%)</title><rect x="157" y="244" width="10" height="15" fill="rgb(238,39,23)"/><text x="160.00" y="254.50"></text></g><g><title>array_cumsum (methods.c:2239) (7 samples, 0.86%)</title><rect x="157" y="260" width="10" height="15" fill="rgb(216,132,9)"/><text x="160.00" y="270.50"></text></g><g><title>PyArray_CumSum (calculation.c:568) (7 samples, 0.86%)</title><rect x="157" y="276" width="10" height="15" fill="rgb(227,213,4)"/><text x="160.00" y="286.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c:262) (6 samples, 0.73%)</title><rect x="158" y="292" width="9" height="15" fill="rgb(217,194,20)"/><text x="161.00" y="302.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c:5537) (5 samples, 0.61%)</title><rect x="160" y="308" width="7" height="15" fill="rgb(246,84,16)"/><text x="163.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4646) (5 samples, 0.61%)</title><rect x="160" y="324" width="7" height="15" fill="rgb(234,22,0)"/><text x="163.00" y="334.50"></text></g><g><title>PyUFunc_Accumulate (ufunc_object.c:3934) (5 samples, 0.61%)</title><rect x="160" y="340" width="7" height="15" fill="rgb(212,83,14)"/><text x="163.00" y="350.50"></text></g><g><title>npyiter_iternext_itflags0_dims1_iters2 (nditer_templ.c.src:80) (1 samples, 0.12%)</title><rect x="165" y="356" width="2" height="15" fill="rgb(243,42,34)"/><text x="168.00" y="366.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (1 samples, 0.12%)</title><rect x="167" y="260" width="1" height="15" fill="rgb(208,83,38)"/><text x="170.00" y="270.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (1 samples, 0.12%)</title><rect x="167" y="276" width="1" height="15" fill="rgb(251,83,29)"/><text x="170.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (1 samples, 0.12%)</title><rect x="167" y="292" width="1" height="15" fill="rgb(211,206,11)"/><text x="170.00" y="302.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (1 samples, 0.12%)</title><rect x="167" y="308" width="1" height="15" fill="rgb(248,100,5)"/><text x="170.00" y="318.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.12%)</title><rect x="167" y="324" width="1" height="15" fill="rgb(211,42,0)"/><text x="170.00" y="334.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (1 samples, 0.12%)</title><rect x="168" y="308" width="2" height="15" fill="rgb(254,228,42)"/><text x="171.00" y="318.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (1 samples, 0.12%)</title><rect x="168" y="324" width="2" height="15" fill="rgb(227,63,22)"/><text x="171.00" y="334.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (1 samples, 0.12%)</title><rect x="168" y="340" width="2" height="15" fill="rgb(235,166,17)"/><text x="171.00" y="350.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:87) (1 samples, 0.12%)</title><rect x="168" y="356" width="2" height="15" fill="rgb(239,203,50)"/><text x="171.00" y="366.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:228) (1 samples, 0.12%)</title><rect x="168" y="372" width="2" height="15" fill="rgb(228,129,0)"/><text x="171.00" y="382.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (1 samples, 0.12%)</title><rect x="170" y="308" width="1" height="15" fill="rgb(236,51,33)"/><text x="173.00" y="318.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:183) (1 samples, 0.12%)</title><rect x="170" y="324" width="1" height="15" fill="rgb(230,17,14)"/><text x="173.00" y="334.50"></text></g><g><title>npyiter_check_global_flags (nditer_constr.c:778) (1 samples, 0.12%)</title><rect x="170" y="340" width="1" height="15" fill="rgb(245,89,41)"/><text x="173.00" y="350.50"></text></g><g><title>reduce_loop (ufunc_object.c:3533) (1 samples, 0.12%)</title><rect x="171" y="324" width="2" height="15" fill="rgb(212,118,23)"/><text x="174.00" y="334.50"></text></g><g><title>DOUBLE_add (loops.c.src:1747) (1 samples, 0.12%)</title><rect x="174" y="340" width="1" height="15" fill="rgb(211,102,15)"/><text x="177.00" y="350.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:194) (1 samples, 0.12%)</title><rect x="175" y="340" width="2" height="15" fill="rgb(254,200,30)"/><text x="178.00" y="350.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:239) (1 samples, 0.12%)</title><rect x="177" y="340" width="1" height="15" fill="rgb(214,76,37)"/><text x="180.00" y="350.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (1 samples, 0.12%)</title><rect x="178" y="340" width="2" height="15" fill="rgb(216,41,10)"/><text x="181.00" y="350.50"></text></g><g><title>stable_cumsum (sklearn/utils/extmath.py:826) (10 samples, 1.22%)</title><rect x="167" y="180" width="14" height="15" fill="rgb(215,73,1)"/><text x="170.00" y="190.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (10 samples, 1.22%)</title><rect x="167" y="196" width="14" height="15" fill="rgb(208,40,39)"/><text x="170.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (10 samples, 1.22%)</title><rect x="167" y="212" width="14" height="15" fill="rgb(243,63,1)"/><text x="170.00" y="222.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (10 samples, 1.22%)</title><rect x="167" y="228" width="14" height="15" fill="rgb(211,100,25)"/><text x="170.00" y="238.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (10 samples, 1.22%)</title><rect x="167" y="244" width="14" height="15" fill="rgb(219,162,22)"/><text x="170.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (9 samples, 1.10%)</title><rect x="168" y="260" width="13" height="15" fill="rgb(237,171,31)"/><text x="171.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (9 samples, 1.10%)</title><rect x="168" y="276" width="13" height="15" fill="rgb(211,27,36)"/><text x="171.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (9 samples, 1.10%)</title><rect x="168" y="292" width="13" height="15" fill="rgb(219,150,38)"/><text x="171.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (7 samples, 0.86%)</title><rect x="171" y="308" width="10" height="15" fill="rgb(234,206,46)"/><text x="174.00" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (6 samples, 0.73%)</title><rect x="173" y="324" width="8" height="15" fill="rgb(211,209,2)"/><text x="176.00" y="334.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:268) (1 samples, 0.12%)</title><rect x="180" y="340" width="1" height="15" fill="rgb(206,149,26)"/><text x="183.00" y="350.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:234) (1 samples, 0.12%)</title><rect x="183" y="212" width="1" height="15" fill="rgb(213,22,44)"/><text x="186.00" y="222.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3900) (1 samples, 0.12%)</title><rect x="183" y="228" width="1" height="15" fill="rgb(239,188,20)"/><text x="186.00" y="238.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:55) (1 samples, 0.12%)</title><rect x="184" y="212" width="1" height="15" fill="rgb(228,58,31)"/><text x="187.00" y="222.50"></text></g><g><title>PyArray_FromAny (ctors.c:1933) (1 samples, 0.12%)</title><rect x="184" y="228" width="1" height="15" fill="rgb(229,141,32)"/><text x="187.00" y="238.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (1 samples, 0.12%)</title><rect x="184" y="244" width="1" height="15" fill="rgb(241,62,20)"/><text x="187.00" y="254.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (1 samples, 0.12%)</title><rect x="184" y="260" width="1" height="15" fill="rgb(227,194,3)"/><text x="187.00" y="270.50"></text></g><g><title>stable_cumsum (sklearn/utils/extmath.py:827) (4 samples, 0.49%)</title><rect x="181" y="180" width="6" height="15" fill="rgb(207,6,1)"/><text x="184.00" y="190.50"></text></g><g><title>array_take (methods.c:145) (3 samples, 0.37%)</title><rect x="183" y="196" width="4" height="15" fill="rgb(246,111,43)"/><text x="186.00" y="206.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:80) (1 samples, 0.12%)</title><rect x="185" y="212" width="2" height="15" fill="rgb(224,167,30)"/><text x="188.00" y="222.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;:4) (1 samples, 0.12%)</title><rect x="188" y="196" width="2" height="15" fill="rgb(231,45,21)"/><text x="191.00" y="206.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.12%)</title><rect x="190" y="196" width="1" height="15" fill="rgb(211,56,11)"/><text x="193.00" y="206.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.12%)</title><rect x="190" y="212" width="1" height="15" fill="rgb(229,27,42)"/><text x="193.00" y="222.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (1 samples, 0.12%)</title><rect x="190" y="228" width="1" height="15" fill="rgb(231,64,12)"/><text x="193.00" y="238.50"></text></g><g><title>isclose (&lt;__array_function__ internals&gt;:4) (1 samples, 0.12%)</title><rect x="191" y="196" width="2" height="15" fill="rgb(228,6,38)"/><text x="194.00" y="206.50"></text></g><g><title>_isclose_dispatcher (numpy/core/numeric.py:2176) (1 samples, 0.12%)</title><rect x="191" y="212" width="2" height="15" fill="rgb(212,150,46)"/><text x="194.00" y="222.50"></text></g><g><title>isclose (numpy/core/numeric.py:2266) (1 samples, 0.12%)</title><rect x="193" y="228" width="1" height="15" fill="rgb(223,126,47)"/><text x="196.00" y="238.50"></text></g><g><title>result_type (&lt;__array_function__ internals&gt;:6) (1 samples, 0.12%)</title><rect x="193" y="244" width="1" height="15" fill="rgb(249,150,50)"/><text x="196.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (1 samples, 0.12%)</title><rect x="193" y="260" width="1" height="15" fill="rgb(220,226,1)"/><text x="196.00" y="270.50"></text></g><g><title>array_result_type (multiarraymodule.c:3262) (1 samples, 0.12%)</title><rect x="193" y="276" width="1" height="15" fill="rgb(233,43,40)"/><text x="196.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.12%)</title><rect x="193" y="292" width="1" height="15" fill="rgb(212,157,21)"/><text x="196.00" y="302.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.12%)</title><rect x="193" y="308" width="1" height="15" fill="rgb(215,217,11)"/><text x="196.00" y="318.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (1 samples, 0.12%)</title><rect x="193" y="324" width="1" height="15" fill="rgb(246,11,10)"/><text x="196.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.12%)</title><rect x="194" y="260" width="2" height="15" fill="rgb(212,3,53)"/><text x="197.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (1 samples, 0.12%)</title><rect x="194" y="276" width="2" height="15" fill="rgb(247,103,1)"/><text x="197.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1355) (1 samples, 0.12%)</title><rect x="194" y="292" width="2" height="15" fill="rgb(224,102,18)"/><text x="197.00" y="302.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.12%)</title><rect x="194" y="308" width="2" height="15" fill="rgb(217,92,30)"/><text x="197.00" y="318.50"></text></g><g><title>isclose (numpy/core/numeric.py:2269) (2 samples, 0.24%)</title><rect x="194" y="228" width="3" height="15" fill="rgb(230,50,52)"/><text x="197.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.24%)</title><rect x="194" y="244" width="3" height="15" fill="rgb(215,96,8)"/><text x="197.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (1 samples, 0.12%)</title><rect x="196" y="260" width="1" height="15" fill="rgb(238,124,9)"/><text x="199.00" y="270.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;:6) (1 samples, 0.12%)</title><rect x="197" y="244" width="1" height="15" fill="rgb(223,217,10)"/><text x="200.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (1 samples, 0.12%)</title><rect x="197" y="260" width="1" height="15" fill="rgb(216,200,42)"/><text x="200.00" y="270.50"></text></g><g><title>all (numpy/core/fromnumeric.py:2351) (1 samples, 0.12%)</title><rect x="197" y="276" width="1" height="15" fill="rgb(227,18,25)"/><text x="200.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (1 samples, 0.12%)</title><rect x="197" y="292" width="1" height="15" fill="rgb(220,136,53)"/><text x="200.00" y="302.50"></text></g><g><title>isclose (numpy/core/numeric.py:2271) (2 samples, 0.24%)</title><rect x="197" y="228" width="3" height="15" fill="rgb(239,21,38)"/><text x="200.00" y="238.50"></text></g><g><title>bool_arrtype_nonzero (scalartypes.c.src:3017) (1 samples, 0.12%)</title><rect x="198" y="244" width="2" height="15" fill="rgb(208,227,27)"/><text x="201.00" y="254.50"></text></g><g><title>geterr (numpy/core/_ufunc_config.py:176) (1 samples, 0.12%)</title><rect x="201" y="292" width="2" height="15" fill="rgb(212,110,10)"/><text x="204.00" y="302.50"></text></g><g><title>seterr (numpy/core/_ufunc_config.py:118) (2 samples, 0.24%)</title><rect x="201" y="276" width="3" height="15" fill="rgb(246,8,20)"/><text x="204.00" y="286.50"></text></g><g><title>geterr (numpy/core/_ufunc_config.py:185) (1 samples, 0.12%)</title><rect x="203" y="292" width="1" height="15" fill="rgb(234,65,17)"/><text x="206.00" y="302.50"></text></g><g><title>ufunc_seterr (ufunc_object.c:4837) (1 samples, 0.12%)</title><rect x="204" y="292" width="2" height="15" fill="rgb(246,49,13)"/><text x="207.00" y="302.50"></text></g><g><title>__exit__ (numpy/core/_ufunc_config.py:447) (4 samples, 0.49%)</title><rect x="201" y="260" width="6" height="15" fill="rgb(212,175,41)"/><text x="204.00" y="270.50"></text></g><g><title>seterr (numpy/core/_ufunc_config.py:135) (2 samples, 0.24%)</title><rect x="204" y="276" width="3" height="15" fill="rgb(219,2,34)"/><text x="207.00" y="286.50"></text></g><g><title>ufunc_seterr (ufunc_object.c:4858) (1 samples, 0.12%)</title><rect x="206" y="292" width="1" height="15" fill="rgb(209,221,23)"/><text x="209.00" y="302.50"></text></g><g><title>array_dealloc (arrayobject.c:537) (1 samples, 0.12%)</title><rect x="207" y="260" width="2" height="15" fill="rgb(254,38,2)"/><text x="210.00" y="270.50"></text></g><g><title>npy_free_cache (alloc.c:147) (1 samples, 0.12%)</title><rect x="207" y="276" width="2" height="15" fill="rgb(219,226,6)"/><text x="210.00" y="286.50"></text></g><g><title>_npy_free_cache (alloc.c:112) (1 samples, 0.12%)</title><rect x="207" y="292" width="2" height="15" fill="rgb(251,153,27)"/><text x="210.00" y="302.50"></text></g><g><title>PyDataMem_FREE (alloc.c:274) (1 samples, 0.12%)</title><rect x="207" y="308" width="2" height="15" fill="rgb(220,146,52)"/><text x="210.00" y="318.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.12%)</title><rect x="207" y="324" width="2" height="15" fill="rgb(240,224,18)"/><text x="210.00" y="334.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1102) (43 samples, 5.26%)</title><rect x="148" y="164" width="62" height="15" fill="rgb(205,214,14)"/><text x="151.00" y="174.50">_get_m..</text></g><g><title>stable_cumsum (sklearn/utils/extmath.py:828) (16 samples, 1.96%)</title><rect x="187" y="180" width="23" height="15" fill="rgb(220,112,5)"/><text x="190.00" y="190.50">s..</text></g><g><title>isclose (&lt;__array_function__ internals&gt;:6) (12 samples, 1.47%)</title><rect x="193" y="196" width="17" height="15" fill="rgb(251,149,27)"/><text x="196.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (12 samples, 1.47%)</title><rect x="193" y="212" width="17" height="15" fill="rgb(239,134,24)"/><text x="196.00" y="222.50"></text></g><g><title>isclose (numpy/core/numeric.py:2272) (7 samples, 0.86%)</title><rect x="200" y="228" width="10" height="15" fill="rgb(211,60,3)"/><text x="203.00" y="238.50"></text></g><g><title>within_tol (numpy/core/numeric.py:2258) (7 samples, 0.86%)</title><rect x="200" y="244" width="10" height="15" fill="rgb(209,117,47)"/><text x="203.00" y="254.50"></text></g><g><title>array_subtract (number.c:342) (1 samples, 0.12%)</title><rect x="209" y="260" width="1" height="15" fill="rgb(215,176,21)"/><text x="212.00" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.12%)</title><rect x="209" y="276" width="1" height="15" fill="rgb(241,182,41)"/><text x="212.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.12%)</title><rect x="209" y="292" width="1" height="15" fill="rgb(227,226,11)"/><text x="212.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1699) (1 samples, 0.12%)</title><rect x="209" y="308" width="1" height="15" fill="rgb(228,92,43)"/><text x="212.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.12%)</title><rect x="209" y="324" width="1" height="15" fill="rgb(214,167,54)"/><text x="212.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (1 samples, 0.12%)</title><rect x="209" y="340" width="1" height="15" fill="rgb(226,204,28)"/><text x="212.00" y="350.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (1 samples, 0.12%)</title><rect x="209" y="356" width="1" height="15" fill="rgb(247,217,19)"/><text x="212.00" y="366.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (1 samples, 0.12%)</title><rect x="209" y="372" width="1" height="15" fill="rgb(237,226,30)"/><text x="212.00" y="382.50"></text></g><g><title>array_multiply (number.c:354) (1 samples, 0.12%)</title><rect x="210" y="180" width="1" height="15" fill="rgb(235,44,11)"/><text x="213.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.12%)</title><rect x="210" y="196" width="1" height="15" fill="rgb(235,54,51)"/><text x="213.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.12%)</title><rect x="210" y="212" width="1" height="15" fill="rgb(253,112,44)"/><text x="213.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (1 samples, 0.12%)</title><rect x="210" y="228" width="1" height="15" fill="rgb(219,186,8)"/><text x="213.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (1 samples, 0.12%)</title><rect x="210" y="244" width="1" height="15" fill="rgb(227,153,49)"/><text x="213.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (1 samples, 0.12%)</title><rect x="210" y="260" width="1" height="15" fill="rgb(207,214,40)"/><text x="213.00" y="270.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:3037) (1 samples, 0.12%)</title><rect x="210" y="276" width="1" height="15" fill="rgb(218,63,20)"/><text x="213.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (1 samples, 0.12%)</title><rect x="211" y="212" width="2" height="15" fill="rgb(209,108,45)"/><text x="214.00" y="222.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c:1298) (1 samples, 0.12%)</title><rect x="211" y="228" width="2" height="15" fill="rgb(254,128,51)"/><text x="214.00" y="238.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c:1473) (1 samples, 0.12%)</title><rect x="211" y="244" width="2" height="15" fill="rgb(244,168,2)"/><text x="214.00" y="254.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (1 samples, 0.12%)</title><rect x="213" y="244" width="1" height="15" fill="rgb(247,148,40)"/><text x="216.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (1 samples, 0.12%)</title><rect x="213" y="260" width="1" height="15" fill="rgb(245,28,31)"/><text x="216.00" y="270.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2711) (1 samples, 0.12%)</title><rect x="213" y="276" width="1" height="15" fill="rgb(239,136,1)"/><text x="216.00" y="286.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1103) (5 samples, 0.61%)</title><rect x="210" y="164" width="7" height="15" fill="rgb(208,172,37)"/><text x="213.00" y="174.50"></text></g><g><title>array_richcompare (arrayobject.c:1509) (4 samples, 0.49%)</title><rect x="211" y="180" width="6" height="15" fill="rgb(247,216,35)"/><text x="214.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 0.49%)</title><rect x="211" y="196" width="6" height="15" fill="rgb(245,128,4)"/><text x="214.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.37%)</title><rect x="213" y="212" width="4" height="15" fill="rgb(216,221,37)"/><text x="216.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 0.37%)</title><rect x="213" y="228" width="4" height="15" fill="rgb(254,172,47)"/><text x="216.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (2 samples, 0.24%)</title><rect x="214" y="244" width="3" height="15" fill="rgb(250,60,32)"/><text x="217.00" y="254.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (2 samples, 0.24%)</title><rect x="214" y="260" width="3" height="15" fill="rgb(224,171,54)"/><text x="217.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (2 samples, 0.24%)</title><rect x="214" y="276" width="3" height="15" fill="rgb(251,159,46)"/><text x="217.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (2 samples, 0.24%)</title><rect x="214" y="292" width="3" height="15" fill="rgb(227,133,23)"/><text x="217.00" y="302.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:226) (1 samples, 0.12%)</title><rect x="216" y="308" width="1" height="15" fill="rgb(244,84,31)"/><text x="219.00" y="318.50"></text></g><g><title>PyArray_ArgMax (calculation.c:108) (1 samples, 0.12%)</title><rect x="217" y="196" width="2" height="15" fill="rgb(215,5,16)"/><text x="220.00" y="206.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.12%)</title><rect x="217" y="212" width="2" height="15" fill="rgb(243,130,29)"/><text x="220.00" y="222.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (1 samples, 0.12%)</title><rect x="217" y="228" width="2" height="15" fill="rgb(235,12,20)"/><text x="220.00" y="238.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (1 samples, 0.12%)</title><rect x="217" y="244" width="2" height="15" fill="rgb(254,147,36)"/><text x="220.00" y="254.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1104) (2 samples, 0.24%)</title><rect x="217" y="164" width="3" height="15" fill="rgb(227,203,22)"/><text x="220.00" y="174.50"></text></g><g><title>array_argmax (methods.c:302) (2 samples, 0.24%)</title><rect x="217" y="180" width="3" height="15" fill="rgb(207,206,46)"/><text x="220.00" y="190.50"></text></g><g><title>PyArray_ArgMax (calculation.c:131) (1 samples, 0.12%)</title><rect x="219" y="196" width="1" height="15" fill="rgb(233,122,20)"/><text x="222.00" y="206.50"></text></g><g><title>BOOL_argmax (arraytypes.c.src:3057) (1 samples, 0.12%)</title><rect x="219" y="212" width="1" height="15" fill="rgb(240,203,30)"/><text x="222.00" y="222.50"></text></g><g><title>array_arange (multiarraymodule.c:2763) (1 samples, 0.12%)</title><rect x="220" y="180" width="2" height="15" fill="rgb(224,102,31)"/><text x="223.00" y="190.50"></text></g><g><title>PyArray_ArangeObj (ctors.c:3460) (1 samples, 0.12%)</title><rect x="220" y="196" width="2" height="15" fill="rgb(224,190,8)"/><text x="223.00" y="206.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:216) (1 samples, 0.12%)</title><rect x="220" y="212" width="2" height="15" fill="rgb(240,146,54)"/><text x="223.00" y="222.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src:123) (1 samples, 0.12%)</title><rect x="220" y="228" width="2" height="15" fill="rgb(244,120,37)"/><text x="223.00" y="238.50"></text></g><g><title>array_subscript (mapping.c:1656) (1 samples, 0.12%)</title><rect x="222" y="180" width="1" height="15" fill="rgb(240,57,39)"/><text x="225.00" y="190.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2662) (1 samples, 0.12%)</title><rect x="222" y="196" width="1" height="15" fill="rgb(215,105,35)"/><text x="225.00" y="206.50"></text></g><g><title>mapiter_fill_info (mapping.c:2373) (1 samples, 0.12%)</title><rect x="222" y="212" width="1" height="15" fill="rgb(233,106,37)"/><text x="225.00" y="222.50"></text></g><g><title>PyArray_STRIDE (ndarraytypes.h:1516) (1 samples, 0.12%)</title><rect x="222" y="228" width="1" height="15" fill="rgb(213,54,11)"/><text x="225.00" y="238.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c:2493) (1 samples, 0.12%)</title><rect x="223" y="196" width="1" height="15" fill="rgb(228,210,35)"/><text x="226.00" y="206.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.12%)</title><rect x="223" y="212" width="1" height="15" fill="rgb(248,134,4)"/><text x="226.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1666) (2 samples, 0.24%)</title><rect x="223" y="180" width="3" height="15" fill="rgb(254,127,0)"/><text x="226.00" y="190.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c:2517) (1 samples, 0.12%)</title><rect x="224" y="196" width="2" height="15" fill="rgb(209,18,9)"/><text x="227.00" y="206.50"></text></g><g><title>check_and_adjust_index (common.h:126) (1 samples, 0.12%)</title><rect x="224" y="212" width="2" height="15" fill="rgb(205,143,7)"/><text x="227.00" y="222.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1566) (1 samples, 0.12%)</title><rect x="226" y="196" width="1" height="15" fill="rgb(231,209,35)"/><text x="229.00" y="206.50"></text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1106) (6 samples, 0.73%)</title><rect x="220" y="164" width="9" height="15" fill="rgb(233,115,41)"/><text x="223.00" y="174.50"></text></g><g><title>array_subscript (mapping.c:1676) (2 samples, 0.24%)</title><rect x="226" y="180" width="3" height="15" fill="rgb(218,137,9)"/><text x="229.00" y="190.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1581) (1 samples, 0.12%)</title><rect x="227" y="196" width="2" height="15" fill="rgb(214,224,41)"/><text x="230.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:139) (1 samples, 0.12%)</title><rect x="229" y="180" width="1" height="15" fill="rgb(241,161,35)"/><text x="232.00" y="190.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:155) (1 samples, 0.12%)</title><rect x="230" y="180" width="2" height="15" fill="rgb(222,124,38)"/><text x="233.00" y="190.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:54) (142 samples, 17.36%)</title><rect x="28" y="52" width="205" height="15" fill="rgb(220,60,20)"/><text x="31.00" y="62.50">&lt;module&gt; (bench_AdaBoostRe..</text></g><g><title>profile_skl (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:53) (142 samples, 17.36%)</title><rect x="28" y="68" width="205" height="15" fill="rgb(251,66,49)"/><text x="31.00" y="78.50">profile_skl (bench_AdaBoos..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:37) (142 samples, 17.36%)</title><rect x="28" y="84" width="205" height="15" fill="rgb(210,51,25)"/><text x="31.00" y="94.50">setup_profile (bench_AdaBo..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:31) (142 samples, 17.36%)</title><rect x="28" y="100" width="205" height="15" fill="rgb(215,176,14)"/><text x="31.00" y="110.50">profile (bench_AdaBoostReg..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (142 samples, 17.36%)</title><rect x="28" y="116" width="205" height="15" fill="rgb(221,156,0)"/><text x="31.00" y="126.50">time_predict (mlprodict/as..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (142 samples, 17.36%)</title><rect x="28" y="132" width="205" height="15" fill="rgb(210,14,46)"/><text x="31.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_be..</text></g><g><title>predict (sklearn/ensemble/_weight_boosting.py:1131) (135 samples, 16.50%)</title><rect x="38" y="148" width="195" height="15" fill="rgb(227,175,21)"/><text x="41.00" y="158.50">predict (sklearn/ensemble..</text></g><g><title>_get_median_predict (sklearn/ensemble/_weight_boosting.py:1109) (3 samples, 0.37%)</title><rect x="229" y="164" width="4" height="15" fill="rgb(235,210,53)"/><text x="232.00" y="174.50"></text></g><g><title>array_arange (multiarraymodule.c:2754) (1 samples, 0.12%)</title><rect x="232" y="180" width="1" height="15" fill="rgb(223,125,32)"/><text x="235.00" y="190.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py:78) (1 samples, 0.12%)</title><rect x="233" y="388" width="2" height="15" fill="rgb(221,26,39)"/><text x="236.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="233" y="404" width="2" height="15" fill="rgb(229,176,40)"/><text x="236.00" y="414.50"></text></g><g><title>cb (&lt;frozen importlib._bootstrap&gt;:177) (1 samples, 0.12%)</title><rect x="233" y="420" width="2" height="15" fill="rgb(219,198,41)"/><text x="236.00" y="430.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py:115) (2 samples, 0.24%)</title><rect x="233" y="164" width="3" height="15" fill="rgb(214,101,34)"/><text x="236.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py:101) (2 samples, 0.24%)</title><rect x="233" y="180" width="3" height="15" fill="rgb(246,30,26)"/><text x="236.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py:28) (2 samples, 0.24%)</title><rect x="233" y="196" width="3" height="15" fill="rgb(221,71,17)"/><text x="236.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="233" y="212" width="3" height="15" fill="rgb(214,132,2)"/><text x="236.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="233" y="228" width="3" height="15" fill="rgb(252,87,32)"/><text x="236.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="233" y="244" width="3" height="15" fill="rgb(243,85,20)"/><text x="236.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="233" y="260" width="3" height="15" fill="rgb(212,191,39)"/><text x="236.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="233" y="276" width="3" height="15" fill="rgb(228,129,38)"/><text x="236.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py:7) (2 samples, 0.24%)</title><rect x="233" y="292" width="3" height="15" fill="rgb(208,83,35)"/><text x="236.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.24%)</title><rect x="233" y="308" width="3" height="15" fill="rgb(246,147,47)"/><text x="236.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.24%)</title><rect x="233" y="324" width="3" height="15" fill="rgb(252,58,29)"/><text x="236.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.24%)</title><rect x="233" y="340" width="3" height="15" fill="rgb(233,18,22)"/><text x="236.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.24%)</title><rect x="233" y="356" width="3" height="15" fill="rgb(244,14,12)"/><text x="236.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.24%)</title><rect x="233" y="372" width="3" height="15" fill="rgb(206,13,25)"/><text x="236.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py:8) (1 samples, 0.12%)</title><rect x="235" y="388" width="1" height="15" fill="rgb(211,6,38)"/><text x="238.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="235" y="404" width="1" height="15" fill="rgb(238,147,38)"/><text x="238.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="235" y="420" width="1" height="15" fill="rgb(211,49,50)"/><text x="238.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="235" y="436" width="1" height="15" fill="rgb(233,15,47)"/><text x="238.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="235" y="452" width="1" height="15" fill="rgb(247,200,22)"/><text x="238.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="235" y="468" width="1" height="15" fill="rgb(250,225,25)"/><text x="238.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op.py:25) (1 samples, 0.12%)</title><rect x="235" y="484" width="1" height="15" fill="rgb(254,203,32)"/><text x="238.00" y="494.50"></text></g><g><title>_build_schemas (mlprodict/onnxrt/ops_cpu/_op.py:13) (1 samples, 0.12%)</title><rect x="235" y="500" width="1" height="15" fill="rgb(206,175,41)"/><text x="238.00" y="510.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="235" y="516" width="1" height="15" fill="rgb(254,46,24)"/><text x="238.00" y="526.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;onnx::pybind11_init_onnx_cpp2py_export(pybind11::module&amp;)::{lambda()#9}, std::vector&lt;onnx::OpSchema, std::allocator&lt;onnx::OpSchema&gt; &gt; const, , pybind11::name, pybind11::scope, pybind11::sibling&gt;(onnx::pybind11_init_onnx_cpp2py_export(pybind11::module&amp;)::{lambda()#9}&amp;&amp;, std::vector&lt;onnx::OpSchema, std::allocator&lt;onnx::OpSchema&gt; &gt; const (*)(), pybind11::name const, pybind11::scope&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="235" y="532" width="1" height="15" fill="rgb(218,1,43)"/><text x="238.00" y="542.50"></text></g><g><title>std::vector&lt;onnx::OpSchema, std::allocator&lt;onnx::OpSchema&gt; &gt;::_M_emplace_back_aux&lt;onnx::OpSchema&amp;&gt; (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="235" y="548" width="1" height="15" fill="rgb(244,116,54)"/><text x="238.00" y="558.50"></text></g><g><title>onnx::OpSchema::OpSchema (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="235" y="564" width="1" height="15" fill="rgb(220,200,37)"/><text x="238.00" y="574.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;)::{lambda(std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::pair&lt;std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, true&gt; const*)#1}&gt; (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="235" y="580" width="1" height="15" fill="rgb(231,23,18)"/><text x="238.00" y="590.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt; const&amp;)::{lambda(std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, false&gt; const*)#1}&gt; (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="235" y="596" width="1" height="15" fill="rgb(239,116,10)"/><text x="238.00" y="606.50"></text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:36) (3 samples, 0.37%)</title><rect x="233" y="84" width="4" height="15" fill="rgb(222,92,14)"/><text x="236.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (3 samples, 0.37%)</title><rect x="233" y="100" width="4" height="15" fill="rgb(234,124,0)"/><text x="236.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:377) (3 samples, 0.37%)</title><rect x="233" y="116" width="4" height="15" fill="rgb(252,41,54)"/><text x="236.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py:114) (3 samples, 0.37%)</title><rect x="233" y="132" width="4" height="15" fill="rgb(237,22,6)"/><text x="236.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py:62) (3 samples, 0.37%)</title><rect x="233" y="148" width="4" height="15" fill="rgb(231,22,13)"/><text x="236.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py:121) (1 samples, 0.12%)</title><rect x="236" y="164" width="1" height="15" fill="rgb(241,199,42)"/><text x="239.00" y="174.50"></text></g><g><title>_set_shape_inference_runtime (mlprodict/onnxrt/onnx_inference.py:728) (1 samples, 0.12%)</title><rect x="236" y="180" width="1" height="15" fill="rgb(221,75,14)"/><text x="239.00" y="190.50"></text></g><g><title>__init__ (mlprodict/onnxrt/shape_object.py:473) (1 samples, 0.12%)</title><rect x="236" y="196" width="1" height="15" fill="rgb(232,45,25)"/><text x="239.00" y="206.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/shape_object.py:473) (1 samples, 0.12%)</title><rect x="236" y="212" width="1" height="15" fill="rgb(207,144,19)"/><text x="239.00" y="222.50"></text></g><g><title>__init__ (mlprodict/onnxrt/shape_object.py:284) (1 samples, 0.12%)</title><rect x="236" y="228" width="1" height="15" fill="rgb(240,228,50)"/><text x="239.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.12%)</title><rect x="237" y="116" width="2" height="15" fill="rgb(223,203,36)"/><text x="240.00" y="126.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.12%)</title><rect x="237" y="132" width="2" height="15" fill="rgb(247,24,44)"/><text x="240.00" y="142.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (1 samples, 0.12%)</title><rect x="237" y="148" width="2" height="15" fill="rgb(240,66,32)"/><text x="240.00" y="158.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (3 samples, 0.37%)</title><rect x="242" y="180" width="4" height="15" fill="rgb(236,35,24)"/><text x="245.00" y="190.50"></text></g><g><title>recursive_tolist (convert.c:100) (1 samples, 0.12%)</title><rect x="258" y="244" width="1" height="15" fill="rgb(247,101,38)"/><text x="261.00" y="254.50"></text></g><g><title>recursive_tolist (convert.c:101) (1 samples, 0.12%)</title><rect x="259" y="244" width="2" height="15" fill="rgb(206,136,18)"/><text x="262.00" y="254.50"></text></g><g><title>LONG_getitem (arraytypes.c.src:191) (1 samples, 0.12%)</title><rect x="261" y="260" width="1" height="15" fill="rgb(245,67,16)"/><text x="264.00" y="270.50"></text></g><g><title>LONG_getitem (arraytypes.c.src:196) (1 samples, 0.12%)</title><rect x="262" y="260" width="1" height="15" fill="rgb(229,76,25)"/><text x="265.00" y="270.50"></text></g><g><title>LONG_getitem (arraytypes.c.src:204) (4 samples, 0.49%)</title><rect x="263" y="260" width="6" height="15" fill="rgb(207,226,16)"/><text x="266.00" y="270.50"></text></g><g><title>recursive_tolist (convert.c:112) (1 samples, 0.12%)</title><rect x="269" y="260" width="2" height="15" fill="rgb(250,132,20)"/><text x="272.00" y="270.50"></text></g><g><title>recursive_tolist (convert.c:83) (1 samples, 0.12%)</title><rect x="271" y="260" width="1" height="15" fill="rgb(230,223,12)"/><text x="274.00" y="270.50"></text></g><g><title>recursive_tolist (convert.c:102) (10 samples, 1.22%)</title><rect x="261" y="244" width="14" height="15" fill="rgb(229,191,24)"/><text x="264.00" y="254.50"></text></g><g><title>recursive_tolist (convert.c:89) (2 samples, 0.24%)</title><rect x="272" y="260" width="3" height="15" fill="rgb(217,140,36)"/><text x="275.00" y="270.50"></text></g><g><title>PyArray_GETITEM (ndarraytypes.h:1558) (2 samples, 0.24%)</title><rect x="272" y="276" width="3" height="15" fill="rgb(206,134,29)"/><text x="275.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:39) (13 samples, 1.59%)</title><rect x="258" y="212" width="18" height="15" fill="rgb(222,193,24)"/><text x="261.00" y="222.50"></text></g><g><title>PyArray_ToList (convert.c:120) (13 samples, 1.59%)</title><rect x="258" y="228" width="18" height="15" fill="rgb(239,64,39)"/><text x="261.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c:106) (1 samples, 0.12%)</title><rect x="275" y="244" width="1" height="15" fill="rgb(239,171,40)"/><text x="278.00" y="254.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:478) (1 samples, 0.12%)</title><rect x="276" y="308" width="2" height="15" fill="rgb(240,105,8)"/><text x="279.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:127) (1 samples, 0.12%)</title><rect x="278" y="324" width="1" height="15" fill="rgb(213,178,48)"/><text x="281.00" y="334.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:138) (7 samples, 0.86%)</title><rect x="279" y="324" width="10" height="15" fill="rgb(242,57,4)"/><text x="282.00" y="334.50"></text></g><g><title>0x7f19c0db10a0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="288" y="340" width="1" height="15" fill="rgb(229,205,14)"/><text x="291.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:154) (2 samples, 0.24%)</title><rect x="289" y="324" width="3" height="15" fill="rgb(234,219,15)"/><text x="292.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c:40) (1 samples, 0.12%)</title><rect x="294" y="340" width="1" height="15" fill="rgb(225,84,23)"/><text x="297.00" y="350.50"></text></g><g><title>_array_find_python_scalar_type (common.c:41) (5 samples, 0.61%)</title><rect x="295" y="340" width="7" height="15" fill="rgb(221,209,1)"/><text x="298.00" y="350.50"></text></g><g><title>_array_find_python_scalar_type (common.c:44) (3 samples, 0.37%)</title><rect x="302" y="340" width="5" height="15" fill="rgb(213,178,13)"/><text x="305.00" y="350.50"></text></g><g><title>_array_find_python_scalar_type (common.c:47) (3 samples, 0.37%)</title><rect x="307" y="340" width="4" height="15" fill="rgb(213,139,0)"/><text x="310.00" y="350.50"></text></g><g><title>PyInt_Check (npy_3kcompat.h:37) (2 samples, 0.24%)</title><rect x="308" y="356" width="3" height="15" fill="rgb(222,78,47)"/><text x="311.00" y="366.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src:4417) (1 samples, 0.12%)</title><rect x="314" y="356" width="1" height="15" fill="rgb(248,207,21)"/><text x="317.00" y="366.50"></text></g><g><title>_array_find_python_scalar_type (common.c:53) (5 samples, 0.61%)</title><rect x="311" y="340" width="7" height="15" fill="rgb(236,216,32)"/><text x="314.00" y="350.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src:4482) (2 samples, 0.24%)</title><rect x="315" y="356" width="3" height="15" fill="rgb(211,161,12)"/><text x="318.00" y="366.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (19 samples, 2.32%)</title><rect x="292" y="324" width="28" height="15" fill="rgb(234,46,21)"/><text x="295.00" y="334.50">P..</text></g><g><title>_array_find_python_scalar_type (common.c:77) (1 samples, 0.12%)</title><rect x="318" y="340" width="2" height="15" fill="rgb(231,69,42)"/><text x="321.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:511) (3 samples, 0.37%)</title><rect x="320" y="324" width="4" height="15" fill="rgb(206,1,8)"/><text x="323.00" y="334.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c:1070) (1 samples, 0.12%)</title><rect x="328" y="340" width="2" height="15" fill="rgb(215,82,25)"/><text x="331.00" y="350.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c:1079) (1 samples, 0.12%)</title><rect x="330" y="340" width="1" height="15" fill="rgb(217,137,29)"/><text x="333.00" y="350.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c:1372) (1 samples, 0.12%)</title><rect x="331" y="340" width="2" height="15" fill="rgb(217,178,1)"/><text x="334.00" y="350.50"></text></g><g><title>ensure_dtype_nbo (convert_datatype.c:1056) (1 samples, 0.12%)</title><rect x="331" y="356" width="2" height="15" fill="rgb(213,0,35)"/><text x="334.00" y="366.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:512) (8 samples, 0.98%)</title><rect x="324" y="324" width="12" height="15" fill="rgb(244,41,46)"/><text x="327.00" y="334.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c:1386) (2 samples, 0.24%)</title><rect x="333" y="340" width="3" height="15" fill="rgb(249,16,28)"/><text x="336.00" y="350.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (42 samples, 5.13%)</title><rect x="276" y="276" width="61" height="15" fill="rgb(223,101,43)"/><text x="279.00" y="286.50">PyArra..</text></g><g><title>PyArray_DTypeFromObject (common.c:108) (42 samples, 5.13%)</title><rect x="276" y="292" width="61" height="15" fill="rgb(236,135,40)"/><text x="279.00" y="302.50">PyArra..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (41 samples, 5.01%)</title><rect x="278" y="308" width="59" height="15" fill="rgb(227,207,42)"/><text x="281.00" y="318.50">PyArra..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:513) (1 samples, 0.12%)</title><rect x="336" y="324" width="1" height="15" fill="rgb(241,219,35)"/><text x="339.00" y="334.50"></text></g><g><title>discover_dimensions (ctors.c:883) (3 samples, 0.37%)</title><rect x="337" y="292" width="4" height="15" fill="rgb(246,32,14)"/><text x="340.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c:668) (5 samples, 0.61%)</title><rect x="346" y="308" width="7" height="15" fill="rgb(253,166,4)"/><text x="349.00" y="318.50"></text></g><g><title>discover_dimensions (ctors.c:679) (3 samples, 0.37%)</title><rect x="353" y="308" width="4" height="15" fill="rgb(233,36,31)"/><text x="356.00" y="318.50"></text></g><g><title>discover_dimensions (ctors.c:693) (4 samples, 0.49%)</title><rect x="357" y="308" width="6" height="15" fill="rgb(236,75,27)"/><text x="360.00" y="318.50"></text></g><g><title>discover_dimensions (ctors.c:699) (6 samples, 0.73%)</title><rect x="363" y="308" width="9" height="15" fill="rgb(221,66,1)"/><text x="366.00" y="318.50"></text></g><g><title>discover_dimensions (ctors.c:703) (8 samples, 0.98%)</title><rect x="372" y="308" width="11" height="15" fill="rgb(231,39,29)"/><text x="375.00" y="318.50"></text></g><g><title>0x7f19c0db1a40 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="382" y="324" width="1" height="15" fill="rgb(243,206,11)"/><text x="385.00" y="334.50"></text></g><g><title>discover_dimensions (ctors.c:884) (33 samples, 4.03%)</title><rect x="341" y="292" width="48" height="15" fill="rgb(250,98,35)"/><text x="344.00" y="302.50">disc..</text></g><g><title>discover_dimensions (ctors.c:912) (4 samples, 0.49%)</title><rect x="383" y="308" width="6" height="15" fill="rgb(207,51,40)"/><text x="386.00" y="318.50"></text></g><g><title>discover_dimensions (ctors.c:892) (1 samples, 0.12%)</title><rect x="389" y="292" width="1" height="15" fill="rgb(248,0,24)"/><text x="392.00" y="302.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (80 samples, 9.78%)</title><rect x="276" y="260" width="116" height="15" fill="rgb(238,24,50)"/><text x="279.00" y="270.50">PyArray_FromAn..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (38 samples, 4.65%)</title><rect x="337" y="276" width="55" height="15" fill="rgb(251,68,49)"/><text x="340.00" y="286.50">PyArr..</text></g><g><title>discover_dimensions (ctors.c:897) (1 samples, 0.12%)</title><rect x="390" y="292" width="2" height="15" fill="rgb(229,220,19)"/><text x="393.00" y="302.50"></text></g><g><title>setArrayFromSequence (ctors.c:502) (1 samples, 0.12%)</title><rect x="392" y="292" width="1" height="15" fill="rgb(236,35,12)"/><text x="395.00" y="302.50"></text></g><g><title>setArrayFromSequence (ctors.c:536) (10 samples, 1.22%)</title><rect x="393" y="292" width="15" height="15" fill="rgb(250,193,23)"/><text x="396.00" y="302.50"></text></g><g><title>setArrayFromSequence (ctors.c:549) (1 samples, 0.12%)</title><rect x="408" y="292" width="1" height="15" fill="rgb(230,105,41)"/><text x="411.00" y="302.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:212) (1 samples, 0.12%)</title><rect x="413" y="324" width="2" height="15" fill="rgb(235,161,41)"/><text x="416.00" y="334.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src:117) (1 samples, 0.12%)</title><rect x="419" y="340" width="2" height="15" fill="rgb(243,213,42)"/><text x="422.00" y="350.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src:119) (7 samples, 0.86%)</title><rect x="421" y="340" width="10" height="15" fill="rgb(247,182,43)"/><text x="424.00" y="350.50"></text></g><g><title>0x7f19c0db0740 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="429" y="356" width="2" height="15" fill="rgb(205,18,25)"/><text x="432.00" y="366.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:216) (18 samples, 2.20%)</title><rect x="415" y="324" width="26" height="15" fill="rgb(245,56,0)"/><text x="418.00" y="334.50">L..</text></g><g><title>MyPyLong_AsLong (arraytypes.c.src:123) (7 samples, 0.86%)</title><rect x="431" y="340" width="10" height="15" fill="rgb(208,11,29)"/><text x="434.00" y="350.50"></text></g><g><title>0x7f19c0db0600 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="439" y="356" width="2" height="15" fill="rgb(213,213,52)"/><text x="442.00" y="366.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:218) (1 samples, 0.12%)</title><rect x="441" y="324" width="1" height="15" fill="rgb(250,227,49)"/><text x="444.00" y="334.50"></text></g><g><title>array_subscript (mapping.c:1539) (116 samples, 14.18%)</title><rect x="276" y="228" width="168" height="15" fill="rgb(221,135,39)"/><text x="279.00" y="238.50">array_subscript (mapp..</text></g><g><title>prepare_index (mapping.c:516) (116 samples, 14.18%)</title><rect x="276" y="244" width="168" height="15" fill="rgb(221,208,40)"/><text x="279.00" y="254.50">prepare_index (mappin..</text></g><g><title>PyArray_FromAny (ctors.c:1938) (36 samples, 4.40%)</title><rect x="392" y="260" width="52" height="15" fill="rgb(251,30,52)"/><text x="395.00" y="270.50">PyArr..</text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (36 samples, 4.40%)</title><rect x="392" y="276" width="52" height="15" fill="rgb(239,94,3)"/><text x="395.00" y="286.50">PyArr..</text></g><g><title>setArrayFromSequence (ctors.c:550) (24 samples, 2.93%)</title><rect x="409" y="292" width="35" height="15" fill="rgb(234,93,14)"/><text x="412.00" y="302.50">se..</text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (24 samples, 2.93%)</title><rect x="409" y="308" width="35" height="15" fill="rgb(245,145,14)"/><text x="412.00" y="318.50">Py..</text></g><g><title>LONG_setitem (arraytypes.c.src:235) (1 samples, 0.12%)</title><rect x="442" y="324" width="2" height="15" fill="rgb(248,141,27)"/><text x="445.00" y="334.50"></text></g><g><title>array_subscript (mapping.c:1656) (1 samples, 0.12%)</title><rect x="444" y="228" width="1" height="15" fill="rgb(240,198,11)"/><text x="447.00" y="238.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:3012) (1 samples, 0.12%)</title><rect x="444" y="244" width="1" height="15" fill="rgb(235,97,36)"/><text x="447.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:282) (1 samples, 0.12%)</title><rect x="444" y="260" width="1" height="15" fill="rgb(252,6,15)"/><text x="447.00" y="270.50"></text></g><g><title>npyiter_compute_index_strides (nditer_constr.c:2088) (1 samples, 0.12%)</title><rect x="444" y="276" width="1" height="15" fill="rgb(252,119,47)"/><text x="447.00" y="286.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1567) (1 samples, 0.12%)</title><rect x="445" y="244" width="2" height="15" fill="rgb(237,105,10)"/><text x="448.00" y="254.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1593) (3 samples, 0.37%)</title><rect x="447" y="244" width="4" height="15" fill="rgb(247,197,42)"/><text x="450.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (5 samples, 0.61%)</title><rect x="445" y="228" width="7" height="15" fill="rgb(220,160,10)"/><text x="448.00" y="238.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1609) (1 samples, 0.12%)</title><rect x="451" y="244" width="1" height="15" fill="rgb(223,74,52)"/><text x="454.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (123 samples, 15.04%)</title><rect x="276" y="212" width="178" height="15" fill="rgb(240,228,30)"/><text x="279.00" y="222.50">_run (mlprodict/onnxrt/..</text></g><g><title>array_subscript (mapping.c:1684) (1 samples, 0.12%)</title><rect x="452" y="228" width="2" height="15" fill="rgb(218,117,47)"/><text x="455.00" y="238.50"></text></g><g><title>PyArray_MapIterSwapAxes (mapping.c:133) (1 samples, 0.12%)</title><rect x="452" y="244" width="2" height="15" fill="rgb(252,73,33)"/><text x="455.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:45) (2 samples, 0.24%)</title><rect x="454" y="212" width="3" height="15" fill="rgb(207,93,19)"/><text x="457.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:37) (3 samples, 0.37%)</title><rect x="457" y="212" width="4" height="15" fill="rgb(237,137,50)"/><text x="460.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (3 samples, 0.37%)</title><rect x="457" y="228" width="4" height="15" fill="rgb(235,152,38)"/><text x="460.00" y="238.50"></text></g><g><title>array_astype (methods.c:845) (3 samples, 0.37%)</title><rect x="457" y="244" width="4" height="15" fill="rgb(229,115,40)"/><text x="460.00" y="254.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (3 samples, 0.37%)</title><rect x="457" y="260" width="4" height="15" fill="rgb(237,176,40)"/><text x="460.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (3 samples, 0.37%)</title><rect x="457" y="276" width="4" height="15" fill="rgb(226,52,38)"/><text x="460.00" y="286.50"></text></g><g><title>_aligned_contig_cast_bool_to_float (lowlevel_strided_loops.c.src:816) (3 samples, 0.37%)</title><rect x="457" y="292" width="4" height="15" fill="rgb(247,22,12)"/><text x="460.00" y="302.50"></text></g><g><title>array_cumsum (methods.c:2228) (1 samples, 0.12%)</title><rect x="464" y="292" width="1" height="15" fill="rgb(253,197,43)"/><text x="467.00" y="302.50"></text></g><g><title>PyArray_AxisConverter (conversion_utils.c:229) (1 samples, 0.12%)</title><rect x="464" y="308" width="1" height="15" fill="rgb(216,211,18)"/><text x="467.00" y="318.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (1 samples, 0.12%)</title><rect x="464" y="324" width="1" height="15" fill="rgb(228,71,11)"/><text x="467.00" y="334.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:864) (1 samples, 0.12%)</title><rect x="464" y="340" width="1" height="15" fill="rgb(205,196,37)"/><text x="467.00" y="350.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c:5531) (1 samples, 0.12%)</title><rect x="467" y="340" width="1" height="15" fill="rgb(232,85,42)"/><text x="470.00" y="350.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (1 samples, 0.12%)</title><rect x="467" y="356" width="1" height="15" fill="rgb(206,178,3)"/><text x="470.00" y="366.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (1 samples, 0.12%)</title><rect x="467" y="372" width="1" height="15" fill="rgb(205,157,26)"/><text x="470.00" y="382.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (1 samples, 0.12%)</title><rect x="467" y="388" width="1" height="15" fill="rgb(228,103,17)"/><text x="470.00" y="398.50"></text></g><g><title>PyUFunc_Accumulate (ufunc_object.c:3922) (1 samples, 0.12%)</title><rect x="468" y="372" width="2" height="15" fill="rgb(223,94,46)"/><text x="471.00" y="382.50"></text></g><g><title>0x7f19c1baed97 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="468" y="388" width="2" height="15" fill="rgb(224,19,13)"/><text x="471.00" y="398.50"></text></g><g><title>FLOAT_add (loops.c.src:1759) (1 samples, 0.12%)</title><rect x="470" y="388" width="1" height="15" fill="rgb(233,29,36)"/><text x="473.00" y="398.50"></text></g><g><title>npyiter_iternext_itflags0_dims1_iters2 (nditer_templ.c.src:77) (1 samples, 0.12%)</title><rect x="471" y="388" width="2" height="15" fill="rgb(209,168,5)"/><text x="474.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cum_sum.py:39) (9 samples, 1.10%)</title><rect x="461" y="212" width="13" height="15" fill="rgb(225,97,2)"/><text x="464.00" y="222.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;:6) (9 samples, 1.10%)</title><rect x="461" y="228" width="13" height="15" fill="rgb(215,215,30)"/><text x="464.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (9 samples, 1.10%)</title><rect x="461" y="244" width="13" height="15" fill="rgb(240,22,53)"/><text x="464.00" y="254.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py:2423) (9 samples, 1.10%)</title><rect x="461" y="260" width="13" height="15" fill="rgb(229,225,44)"/><text x="464.00" y="270.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (7 samples, 0.86%)</title><rect x="464" y="276" width="10" height="15" fill="rgb(250,1,47)"/><text x="467.00" y="286.50"></text></g><g><title>array_cumsum (methods.c:2239) (6 samples, 0.73%)</title><rect x="465" y="292" width="9" height="15" fill="rgb(244,160,48)"/><text x="468.00" y="302.50"></text></g><g><title>PyArray_CumSum (calculation.c:568) (5 samples, 0.61%)</title><rect x="467" y="308" width="7" height="15" fill="rgb(217,117,21)"/><text x="470.00" y="318.50"></text></g><g><title>PyArray_GenericAccumulateFunction (number.c:262) (5 samples, 0.61%)</title><rect x="467" y="324" width="7" height="15" fill="rgb(247,46,14)"/><text x="470.00" y="334.50"></text></g><g><title>ufunc_accumulate (ufunc_object.c:5537) (4 samples, 0.49%)</title><rect x="468" y="340" width="6" height="15" fill="rgb(228,219,15)"/><text x="471.00" y="350.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4646) (4 samples, 0.49%)</title><rect x="468" y="356" width="6" height="15" fill="rgb(208,0,19)"/><text x="471.00" y="366.50"></text></g><g><title>PyUFunc_Accumulate (ufunc_object.c:3934) (3 samples, 0.37%)</title><rect x="470" y="372" width="4" height="15" fill="rgb(213,113,0)"/><text x="473.00" y="382.50"></text></g><g><title>npyiter_iternext_itflags0_dims1_iters2 (nditer_templ.c.src:80) (1 samples, 0.12%)</title><rect x="473" y="388" width="1" height="15" fill="rgb(225,159,8)"/><text x="476.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_gather_elements.py:21) (2 samples, 0.24%)</title><rect x="474" y="212" width="3" height="15" fill="rgb(224,228,16)"/><text x="477.00" y="222.50"></text></g><g><title>swapaxes (&lt;__array_function__ internals&gt;:6) (2 samples, 0.24%)</title><rect x="474" y="228" width="3" height="15" fill="rgb(228,52,4)"/><text x="477.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (1 samples, 0.12%)</title><rect x="475" y="244" width="2" height="15" fill="rgb(209,209,54)"/><text x="478.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:234) (1 samples, 0.12%)</title><rect x="478" y="244" width="2" height="15" fill="rgb(227,97,41)"/><text x="481.00" y="254.50"></text></g><g><title>_choose_dispatcher (numpy/core/fromnumeric.py:306) (1 samples, 0.12%)</title><rect x="478" y="260" width="2" height="15" fill="rgb(206,189,14)"/><text x="481.00" y="270.50"></text></g><g><title>array_item (mapping.c:1384) (1 samples, 0.12%)</title><rect x="478" y="276" width="2" height="15" fill="rgb(206,19,52)"/><text x="481.00" y="286.50"></text></g><g><title>array_item_asarray (mapping.c:1350) (1 samples, 0.12%)</title><rect x="478" y="292" width="2" height="15" fill="rgb(227,85,34)"/><text x="481.00" y="302.50"></text></g><g><title>get_view_from_index (mapping.c:937) (1 samples, 0.12%)</title><rect x="478" y="308" width="2" height="15" fill="rgb(232,43,46)"/><text x="481.00" y="318.50"></text></g><g><title>PyArray_ClipmodeConverter (conversion_utils.c:650) (1 samples, 0.12%)</title><rect x="480" y="324" width="1" height="15" fill="rgb(217,222,25)"/><text x="483.00" y="334.50"></text></g><g><title>array_choose (methods.c:1218) (2 samples, 0.24%)</title><rect x="480" y="292" width="3" height="15" fill="rgb(227,138,25)"/><text x="483.00" y="302.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:53) (2 samples, 0.24%)</title><rect x="480" y="308" width="3" height="15" fill="rgb(226,193,24)"/><text x="483.00" y="318.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.12%)</title><rect x="481" y="324" width="2" height="15" fill="rgb(228,189,12)"/><text x="484.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (1 samples, 0.12%)</title><rect x="483" y="340" width="1" height="15" fill="rgb(225,228,46)"/><text x="486.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1260) (1 samples, 0.12%)</title><rect x="483" y="356" width="1" height="15" fill="rgb(212,194,53)"/><text x="486.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (1 samples, 0.12%)</title><rect x="484" y="372" width="2" height="15" fill="rgb(242,132,36)"/><text x="487.00" y="382.50"></text></g><g><title>PyArray_Choose (item_selection.c:687) (4 samples, 0.49%)</title><rect x="483" y="308" width="5" height="15" fill="rgb(253,105,50)"/><text x="486.00" y="318.50"></text></g><g><title>PyArray_ConvertToCommonType (convert_datatype.c:2150) (4 samples, 0.49%)</title><rect x="483" y="324" width="5" height="15" fill="rgb(231,211,24)"/><text x="486.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c:560) (3 samples, 0.37%)</title><rect x="484" y="340" width="4" height="15" fill="rgb(242,219,10)"/><text x="487.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (3 samples, 0.37%)</title><rect x="484" y="356" width="4" height="15" fill="rgb(243,95,50)"/><text x="487.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (2 samples, 0.24%)</title><rect x="486" y="372" width="2" height="15" fill="rgb(220,65,13)"/><text x="489.00" y="382.50"></text></g><g><title>_aligned_strided_to_contig_size8 (lowlevel_strided_loops.c.src:133) (2 samples, 0.24%)</title><rect x="486" y="388" width="2" height="15" fill="rgb(227,65,0)"/><text x="489.00" y="398.50"></text></g><g><title>PyArray_IterNew (iterators.c:183) (1 samples, 0.12%)</title><rect x="488" y="356" width="2" height="15" fill="rgb(254,100,2)"/><text x="491.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="488" y="372" width="2" height="15" fill="rgb(205,45,39)"/><text x="491.00" y="382.50"></text></g><g><title>0x7f19c1b9021f (libc-2.29.so) (1 samples, 0.12%)</title><rect x="488" y="388" width="2" height="15" fill="rgb(218,150,45)"/><text x="491.00" y="398.50"></text></g><g><title>PyArray_Choose (item_selection.c:702) (2 samples, 0.24%)</title><rect x="488" y="308" width="3" height="15" fill="rgb(237,96,53)"/><text x="491.00" y="318.50"></text></g><g><title>PyArray_MultiIterFromObjects (iterators.c:1357) (2 samples, 0.24%)</title><rect x="488" y="324" width="3" height="15" fill="rgb(217,218,45)"/><text x="491.00" y="334.50"></text></g><g><title>multiiter_new_impl (iterators.c:1296) (2 samples, 0.24%)</title><rect x="488" y="340" width="3" height="15" fill="rgb(235,164,38)"/><text x="491.00" y="350.50"></text></g><g><title>PyArray_IterNew (iterators.c:185) (1 samples, 0.12%)</title><rect x="490" y="356" width="1" height="15" fill="rgb(243,14,7)"/><text x="493.00" y="366.50"></text></g><g><title>PyArray_Choose (item_selection.c:709) (1 samples, 0.12%)</title><rect x="491" y="308" width="2" height="15" fill="rgb(214,81,42)"/><text x="494.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.12%)</title><rect x="491" y="324" width="2" height="15" fill="rgb(231,74,28)"/><text x="494.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (1 samples, 0.12%)</title><rect x="491" y="340" width="2" height="15" fill="rgb(217,199,14)"/><text x="494.00" y="350.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (1 samples, 0.12%)</title><rect x="491" y="356" width="2" height="15" fill="rgb(210,125,23)"/><text x="494.00" y="366.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (1 samples, 0.12%)</title><rect x="491" y="372" width="2" height="15" fill="rgb(229,69,22)"/><text x="494.00" y="382.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (1 samples, 0.12%)</title><rect x="491" y="388" width="2" height="15" fill="rgb(235,108,43)"/><text x="494.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="491" y="404" width="2" height="15" fill="rgb(215,131,32)"/><text x="494.00" y="414.50"></text></g><g><title>0x7f19c1b902f0 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="491" y="420" width="2" height="15" fill="rgb(254,133,37)"/><text x="494.00" y="430.50"></text></g><g><title>PyArray_Choose (item_selection.c:757) (1 samples, 0.12%)</title><rect x="493" y="308" width="1" height="15" fill="rgb(213,69,30)"/><text x="496.00" y="318.50"></text></g><g><title>PyArray_Choose (item_selection.c:786) (1 samples, 0.12%)</title><rect x="494" y="308" width="2" height="15" fill="rgb(248,188,42)"/><text x="497.00" y="318.50"></text></g><g><title>0x7f19c1baed50 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="501" y="324" width="2" height="15" fill="rgb(252,190,51)"/><text x="504.00" y="334.50"></text></g><g><title>PyArray_Choose (item_selection.c:788) (6 samples, 0.73%)</title><rect x="496" y="308" width="8" height="15" fill="rgb(244,166,30)"/><text x="499.00" y="318.50"></text></g><g><title>0x7f19c1baed97 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="503" y="324" width="1" height="15" fill="rgb(252,96,30)"/><text x="506.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_gather_elements.py:23) (20 samples, 2.44%)</title><rect x="477" y="212" width="29" height="15" fill="rgb(223,21,20)"/><text x="480.00" y="222.50">_r..</text></g><g><title>choose (&lt;__array_function__ internals&gt;:6) (20 samples, 2.44%)</title><rect x="477" y="228" width="29" height="15" fill="rgb(241,220,31)"/><text x="480.00" y="238.50">ch..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (18 samples, 2.20%)</title><rect x="480" y="244" width="26" height="15" fill="rgb(216,173,21)"/><text x="483.00" y="254.50">a..</text></g><g><title>choose (numpy/core/fromnumeric.py:432) (18 samples, 2.20%)</title><rect x="480" y="260" width="26" height="15" fill="rgb(253,160,0)"/><text x="483.00" y="270.50">c..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (18 samples, 2.20%)</title><rect x="480" y="276" width="26" height="15" fill="rgb(240,117,53)"/><text x="483.00" y="286.50">_..</text></g><g><title>array_choose (methods.c:1224) (16 samples, 1.96%)</title><rect x="483" y="292" width="23" height="15" fill="rgb(236,199,37)"/><text x="486.00" y="302.50">a..</text></g><g><title>PyArray_Choose (item_selection.c:792) (1 samples, 0.12%)</title><rect x="504" y="308" width="2" height="15" fill="rgb(240,128,7)"/><text x="507.00" y="318.50"></text></g><g><title>arraymultiter_dealloc (iterators.c:1439) (1 samples, 0.12%)</title><rect x="504" y="324" width="2" height="15" fill="rgb(210,100,50)"/><text x="507.00" y="334.50"></text></g><g><title>0x7f19c1b8eb87 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="504" y="340" width="2" height="15" fill="rgb(216,12,23)"/><text x="507.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_gather_elements.py:24) (1 samples, 0.12%)</title><rect x="506" y="212" width="1" height="15" fill="rgb(242,160,2)"/><text x="509.00" y="222.50"></text></g><g><title>swapaxes (&lt;__array_function__ internals&gt;:6) (1 samples, 0.12%)</title><rect x="506" y="228" width="1" height="15" fill="rgb(221,217,4)"/><text x="509.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (1 samples, 0.12%)</title><rect x="506" y="244" width="1" height="15" fill="rgb(216,108,32)"/><text x="509.00" y="254.50"></text></g><g><title>swapaxes (numpy/core/fromnumeric.py:596) (1 samples, 0.12%)</title><rect x="506" y="260" width="1" height="15" fill="rgb(235,151,10)"/><text x="509.00" y="270.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:56) (1 samples, 0.12%)</title><rect x="506" y="276" width="1" height="15" fill="rgb(235,213,48)"/><text x="509.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reshape.py:17) (1 samples, 0.12%)</title><rect x="507" y="212" width="2" height="15" fill="rgb(229,108,15)"/><text x="510.00" y="222.50"></text></g><g><title>array_reshape (methods.c:210) (1 samples, 0.12%)</title><rect x="507" y="228" width="2" height="15" fill="rgb(224,213,42)"/><text x="510.00" y="238.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (1 samples, 0.12%)</title><rect x="507" y="244" width="2" height="15" fill="rgb(245,205,30)"/><text x="510.00" y="254.50"></text></g><g><title>PyArray_Newshape (shape.c:230) (1 samples, 0.12%)</title><rect x="507" y="260" width="2" height="15" fill="rgb(252,12,15)"/><text x="510.00" y="270.50"></text></g><g><title>_fix_unknown_dimension (shape.c:504) (1 samples, 0.12%)</title><rect x="507" y="276" width="2" height="15" fill="rgb(237,100,11)"/><text x="510.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c:520) (1 samples, 0.12%)</title><rect x="510" y="244" width="2" height="15" fill="rgb(223,136,6)"/><text x="513.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.12%)</title><rect x="510" y="260" width="2" height="15" fill="rgb(238,67,24)"/><text x="513.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.12%)</title><rect x="510" y="276" width="2" height="15" fill="rgb(248,197,40)"/><text x="513.00" y="286.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (1 samples, 0.12%)</title><rect x="510" y="292" width="2" height="15" fill="rgb(253,150,25)"/><text x="513.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:56) (1 samples, 0.12%)</title><rect x="513" y="308" width="1" height="15" fill="rgb(221,171,37)"/><text x="516.00" y="318.50"></text></g><g><title>_new_argsortlike (item_selection.c:1023) (1 samples, 0.12%)</title><rect x="514" y="356" width="2" height="15" fill="rgb(240,190,31)"/><text x="517.00" y="366.50"></text></g><g><title>_new_argsortlike (item_selection.c:1052) (2 samples, 0.24%)</title><rect x="516" y="356" width="3" height="15" fill="rgb(230,15,35)"/><text x="519.00" y="366.50"></text></g><g><title>_new_argsortlike (item_selection.c:1057) (1 samples, 0.12%)</title><rect x="519" y="356" width="1" height="15" fill="rgb(214,30,17)"/><text x="522.00" y="366.50"></text></g><g><title>aintroselect_float (selection.c.src:331) (1 samples, 0.12%)</title><rect x="520" y="372" width="2" height="15" fill="rgb(237,162,25)"/><text x="523.00" y="382.50"></text></g><g><title>aintroselect_float (selection.c.src:332) (2 samples, 0.24%)</title><rect x="522" y="372" width="2" height="15" fill="rgb(246,64,18)"/><text x="525.00" y="382.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (2 samples, 0.24%)</title><rect x="522" y="388" width="2" height="15" fill="rgb(242,73,25)"/><text x="525.00" y="398.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (4 samples, 0.49%)</title><rect x="520" y="356" width="6" height="15" fill="rgb(227,144,46)"/><text x="523.00" y="366.50"></text></g><g><title>aintroselect_float (selection.c.src:338) (1 samples, 0.12%)</title><rect x="524" y="372" width="2" height="15" fill="rgb(217,205,37)"/><text x="527.00" y="382.50"></text></g><g><title>_new_argsortlike (item_selection.c:1100) (1 samples, 0.12%)</title><rect x="526" y="356" width="1" height="15" fill="rgb(214,9,43)"/><text x="529.00" y="366.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (12 samples, 1.47%)</title><rect x="512" y="260" width="17" height="15" fill="rgb(212,49,31)"/><text x="515.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (12 samples, 1.47%)</title><rect x="512" y="276" width="17" height="15" fill="rgb(219,199,53)"/><text x="515.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (12 samples, 1.47%)</title><rect x="512" y="292" width="17" height="15" fill="rgb(219,69,20)"/><text x="515.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (10 samples, 1.22%)</title><rect x="514" y="308" width="15" height="15" fill="rgb(212,78,38)"/><text x="517.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (10 samples, 1.22%)</title><rect x="514" y="324" width="15" height="15" fill="rgb(241,129,42)"/><text x="517.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (10 samples, 1.22%)</title><rect x="514" y="340" width="15" height="15" fill="rgb(210,86,48)"/><text x="517.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.12%)</title><rect x="527" y="356" width="2" height="15" fill="rgb(212,85,11)"/><text x="530.00" y="366.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.12%)</title><rect x="527" y="372" width="2" height="15" fill="rgb(249,126,50)"/><text x="530.00" y="382.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (1 samples, 0.12%)</title><rect x="527" y="388" width="2" height="15" fill="rgb(224,226,50)"/><text x="530.00" y="398.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:34) (13 samples, 1.59%)</title><rect x="512" y="244" width="18" height="15" fill="rgb(230,78,11)"/><text x="515.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.12%)</title><rect x="529" y="260" width="1" height="15" fill="rgb(211,77,16)"/><text x="532.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.12%)</title><rect x="529" y="276" width="1" height="15" fill="rgb(208,111,20)"/><text x="532.00" y="286.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (1 samples, 0.12%)</title><rect x="529" y="292" width="1" height="15" fill="rgb(228,49,5)"/><text x="532.00" y="302.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;:4) (1 samples, 0.12%)</title><rect x="533" y="260" width="2" height="15" fill="rgb(240,147,52)"/><text x="536.00" y="270.50"></text></g><g><title>_new_argsortlike (item_selection.c:1022) (1 samples, 0.12%)</title><rect x="535" y="356" width="1" height="15" fill="rgb(237,10,35)"/><text x="538.00" y="366.50"></text></g><g><title>_new_argsortlike (item_selection.c:1027) (1 samples, 0.12%)</title><rect x="536" y="356" width="1" height="15" fill="rgb(237,166,32)"/><text x="539.00" y="366.50"></text></g><g><title>_new_argsortlike (item_selection.c:1052) (3 samples, 0.37%)</title><rect x="537" y="356" width="5" height="15" fill="rgb(211,187,47)"/><text x="540.00" y="366.50"></text></g><g><title>_new_argsortlike (item_selection.c:1064) (1 samples, 0.12%)</title><rect x="542" y="356" width="1" height="15" fill="rgb(247,143,33)"/><text x="545.00" y="366.50"></text></g><g><title>aquicksort_float (quicksort.c.src:175) (1 samples, 0.12%)</title><rect x="542" y="372" width="1" height="15" fill="rgb(212,197,48)"/><text x="545.00" y="382.50"></text></g><g><title>npy_get_msb (npy_sort.h.src:15) (1 samples, 0.12%)</title><rect x="542" y="388" width="1" height="15" fill="rgb(234,94,44)"/><text x="545.00" y="398.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (10 samples, 1.22%)</title><rect x="535" y="260" width="14" height="15" fill="rgb(212,3,48)"/><text x="538.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (10 samples, 1.22%)</title><rect x="535" y="276" width="14" height="15" fill="rgb(241,25,32)"/><text x="538.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (10 samples, 1.22%)</title><rect x="535" y="292" width="14" height="15" fill="rgb(225,99,8)"/><text x="538.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (10 samples, 1.22%)</title><rect x="535" y="308" width="14" height="15" fill="rgb(249,206,23)"/><text x="538.00" y="318.50"></text></g><g><title>array_argsort (methods.c:1395) (10 samples, 1.22%)</title><rect x="535" y="324" width="14" height="15" fill="rgb(223,51,35)"/><text x="538.00" y="334.50"></text></g><g><title>PyArray_ArgSort (item_selection.c:1322) (10 samples, 1.22%)</title><rect x="535" y="340" width="14" height="15" fill="rgb(211,49,39)"/><text x="538.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:1101) (4 samples, 0.49%)</title><rect x="543" y="356" width="6" height="15" fill="rgb(220,97,46)"/><text x="546.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.12%)</title><rect x="549" y="260" width="1" height="15" fill="rgb(211,213,43)"/><text x="552.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.12%)</title><rect x="549" y="276" width="1" height="15" fill="rgb(250,50,32)"/><text x="552.00" y="286.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (1 samples, 0.12%)</title><rect x="549" y="292" width="1" height="15" fill="rgb(224,86,17)"/><text x="552.00" y="302.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1014) (1 samples, 0.12%)</title><rect x="550" y="340" width="2" height="15" fill="rgb(229,20,30)"/><text x="553.00" y="350.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1023) (1 samples, 0.12%)</title><rect x="552" y="340" width="1" height="15" fill="rgb(220,146,32)"/><text x="555.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:226) (1 samples, 0.12%)</title><rect x="555" y="356" width="1" height="15" fill="rgb(231,155,54)"/><text x="558.00" y="366.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:228) (1 samples, 0.12%)</title><rect x="556" y="356" width="2" height="15" fill="rgb(207,153,42)"/><text x="559.00" y="366.50"></text></g><g><title>array_subscript (mapping.c:1656) (6 samples, 0.73%)</title><rect x="550" y="260" width="9" height="15" fill="rgb(233,129,53)"/><text x="553.00" y="270.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2964) (6 samples, 0.73%)</title><rect x="550" y="276" width="9" height="15" fill="rgb(242,156,52)"/><text x="553.00" y="286.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c:229) (6 samples, 0.73%)</title><rect x="550" y="292" width="9" height="15" fill="rgb(240,215,29)"/><text x="553.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c:281) (6 samples, 0.73%)</title><rect x="550" y="308" width="9" height="15" fill="rgb(215,80,18)"/><text x="553.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (6 samples, 0.73%)</title><rect x="550" y="324" width="9" height="15" fill="rgb(224,165,8)"/><text x="553.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (4 samples, 0.49%)</title><rect x="553" y="340" width="6" height="15" fill="rgb(222,181,25)"/><text x="556.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:234) (1 samples, 0.12%)</title><rect x="558" y="356" width="1" height="15" fill="rgb(252,5,25)"/><text x="561.00" y="366.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c:2516) (1 samples, 0.12%)</title><rect x="559" y="276" width="2" height="15" fill="rgb(228,85,22)"/><text x="562.00" y="286.50"></text></g><g><title>check_and_adjust_index (common.h:110) (4 samples, 0.49%)</title><rect x="561" y="292" width="5" height="15" fill="rgb(213,217,18)"/><text x="564.00" y="302.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c:2517) (7 samples, 0.86%)</title><rect x="561" y="276" width="10" height="15" fill="rgb(225,208,17)"/><text x="564.00" y="286.50"></text></g><g><title>check_and_adjust_index (common.h:126) (3 samples, 0.37%)</title><rect x="566" y="292" width="5" height="15" fill="rgb(219,199,15)"/><text x="569.00" y="302.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c:2521) (1 samples, 0.12%)</title><rect x="571" y="276" width="1" height="15" fill="rgb(234,78,5)"/><text x="574.00" y="286.50"></text></g><g><title>array_subscript (mapping.c:1666) (10 samples, 1.22%)</title><rect x="559" y="260" width="15" height="15" fill="rgb(214,84,50)"/><text x="562.00" y="270.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c:2569) (1 samples, 0.12%)</title><rect x="572" y="276" width="2" height="15" fill="rgb(211,176,17)"/><text x="575.00" y="286.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (1 samples, 0.12%)</title><rect x="572" y="292" width="2" height="15" fill="rgb(212,31,4)"/><text x="575.00" y="302.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1566) (2 samples, 0.24%)</title><rect x="574" y="276" width="2" height="15" fill="rgb(211,170,6)"/><text x="577.00" y="286.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1577) (1 samples, 0.12%)</title><rect x="576" y="276" width="2" height="15" fill="rgb(237,145,8)"/><text x="579.00" y="286.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1581) (1 samples, 0.12%)</title><rect x="578" y="276" width="1" height="15" fill="rgb(230,170,23)"/><text x="581.00" y="286.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1593) (1 samples, 0.12%)</title><rect x="579" y="276" width="2" height="15" fill="rgb(231,155,34)"/><text x="582.00" y="286.50"></text></g><g><title>array_subscript (mapping.c:1676) (7 samples, 0.86%)</title><rect x="574" y="260" width="10" height="15" fill="rgb(236,135,47)"/><text x="577.00" y="270.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1609) (2 samples, 0.24%)</title><rect x="581" y="276" width="3" height="15" fill="rgb(233,184,5)"/><text x="584.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.12%)</title><rect x="584" y="276" width="1" height="15" fill="rgb(232,49,42)"/><text x="587.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (1 samples, 0.12%)</title><rect x="584" y="292" width="1" height="15" fill="rgb(252,70,28)"/><text x="587.00" y="302.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1349) (1 samples, 0.12%)</title><rect x="584" y="308" width="1" height="15" fill="rgb(242,178,29)"/><text x="587.00" y="318.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:38) (39 samples, 4.77%)</title><rect x="530" y="244" width="57" height="15" fill="rgb(250,1,52)"/><text x="533.00" y="254.50">topk_s..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.24%)</title><rect x="584" y="260" width="3" height="15" fill="rgb(236,156,2)"/><text x="587.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3308) (1 samples, 0.12%)</title><rect x="585" y="276" width="2" height="15" fill="rgb(227,30,6)"/><text x="588.00" y="286.50"></text></g><g><title>array_subscript (mapping.c:1656) (2 samples, 0.24%)</title><rect x="587" y="260" width="2" height="15" fill="rgb(224,178,6)"/><text x="590.00" y="270.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2964) (2 samples, 0.24%)</title><rect x="587" y="276" width="2" height="15" fill="rgb(231,210,35)"/><text x="590.00" y="286.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c:229) (2 samples, 0.24%)</title><rect x="587" y="292" width="2" height="15" fill="rgb(206,90,38)"/><text x="590.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c:281) (2 samples, 0.24%)</title><rect x="587" y="308" width="2" height="15" fill="rgb(214,178,15)"/><text x="590.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (2 samples, 0.24%)</title><rect x="587" y="324" width="2" height="15" fill="rgb(211,189,48)"/><text x="590.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (2 samples, 0.24%)</title><rect x="587" y="340" width="2" height="15" fill="rgb(209,196,17)"/><text x="590.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:226) (2 samples, 0.24%)</title><rect x="587" y="356" width="2" height="15" fill="rgb(243,21,14)"/><text x="590.00" y="366.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c:2515) (1 samples, 0.12%)</title><rect x="589" y="276" width="2" height="15" fill="rgb(208,59,31)"/><text x="592.00" y="286.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c:2517) (2 samples, 0.24%)</title><rect x="591" y="276" width="3" height="15" fill="rgb(213,0,5)"/><text x="594.00" y="286.50"></text></g><g><title>check_and_adjust_index (common.h:126) (2 samples, 0.24%)</title><rect x="591" y="292" width="3" height="15" fill="rgb(210,32,7)"/><text x="594.00" y="302.50"></text></g><g><title>array_subscript (mapping.c:1666) (4 samples, 0.49%)</title><rect x="589" y="260" width="6" height="15" fill="rgb(233,127,41)"/><text x="592.00" y="270.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c:2521) (1 samples, 0.12%)</title><rect x="594" y="276" width="1" height="15" fill="rgb(219,182,33)"/><text x="597.00" y="286.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1566) (1 samples, 0.12%)</title><rect x="595" y="276" width="2" height="15" fill="rgb(225,91,38)"/><text x="598.00" y="286.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1581) (1 samples, 0.12%)</title><rect x="597" y="276" width="1" height="15" fill="rgb(213,111,2)"/><text x="600.00" y="286.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (62 samples, 7.58%)</title><rect x="510" y="228" width="90" height="15" fill="rgb(244,11,14)"/><text x="513.00" y="238.50">_common_ru..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:39) (9 samples, 1.10%)</title><rect x="587" y="244" width="13" height="15" fill="rgb(239,80,7)"/><text x="590.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (3 samples, 0.37%)</title><rect x="595" y="260" width="5" height="15" fill="rgb(250,36,29)"/><text x="598.00" y="270.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1584) (1 samples, 0.12%)</title><rect x="598" y="276" width="2" height="15" fill="rgb(211,168,0)"/><text x="601.00" y="286.50"></text></g><g><title>array_astype (methods.c:799) (1 samples, 0.12%)</title><rect x="600" y="244" width="1" height="15" fill="rgb(224,200,23)"/><text x="603.00" y="254.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c:1408) (1 samples, 0.12%)</title><rect x="600" y="260" width="1" height="15" fill="rgb(234,45,46)"/><text x="603.00" y="270.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c:433) (1 samples, 0.12%)</title><rect x="600" y="276" width="1" height="15" fill="rgb(254,211,38)"/><text x="603.00" y="286.50"></text></g><g><title>_typenum_fromtypeobj (scalartypes.c.src:4593) (1 samples, 0.12%)</title><rect x="600" y="292" width="1" height="15" fill="rgb(234,60,20)"/><text x="603.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (246 samples, 30.07%)</title><rect x="249" y="196" width="355" height="15" fill="rgb(226,91,35)"/><text x="252.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (66 samples, 8.07%)</title><rect x="509" y="212" width="95" height="15" fill="rgb(208,113,34)"/><text x="512.00" y="222.50">_run (mlpro..</text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:76) (3 samples, 0.37%)</title><rect x="600" y="228" width="4" height="15" fill="rgb(215,57,17)"/><text x="603.00" y="238.50"></text></g><g><title>array_astype (methods.c:845) (2 samples, 0.24%)</title><rect x="601" y="244" width="3" height="15" fill="rgb(206,222,17)"/><text x="604.00" y="254.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (2 samples, 0.24%)</title><rect x="601" y="260" width="3" height="15" fill="rgb(217,163,1)"/><text x="604.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (2 samples, 0.24%)</title><rect x="601" y="276" width="3" height="15" fill="rgb(240,152,10)"/><text x="604.00" y="286.50"></text></g><g><title>0x7f19c1baed94 (libc-2.29.so) (2 samples, 0.24%)</title><rect x="601" y="292" width="3" height="15" fill="rgb(221,112,14)"/><text x="604.00" y="302.50"></text></g><g><title>argmin (&lt;__array_function__ internals&gt;:4) (1 samples, 0.12%)</title><rect x="607" y="276" width="1" height="15" fill="rgb(251,68,9)"/><text x="610.00" y="286.50"></text></g><g><title>_argmin (mlprodict/onnxrt/ops_cpu/op_argmin.py:13) (5 samples, 0.61%)</title><rect x="604" y="260" width="7" height="15" fill="rgb(208,188,48)"/><text x="607.00" y="270.50"></text></g><g><title>argmin (&lt;__array_function__ internals&gt;:6) (2 samples, 0.24%)</title><rect x="608" y="276" width="3" height="15" fill="rgb(236,224,3)"/><text x="611.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.24%)</title><rect x="608" y="292" width="3" height="15" fill="rgb(249,105,44)"/><text x="611.00" y="302.50"></text></g><g><title>argmin (numpy/core/fromnumeric.py:1222) (2 samples, 0.24%)</title><rect x="608" y="308" width="3" height="15" fill="rgb(211,44,8)"/><text x="611.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (2 samples, 0.24%)</title><rect x="608" y="324" width="3" height="15" fill="rgb(213,39,29)"/><text x="611.00" y="334.50"></text></g><g><title>array_argmin (methods.c:317) (2 samples, 0.24%)</title><rect x="608" y="340" width="3" height="15" fill="rgb(238,63,53)"/><text x="611.00" y="350.50"></text></g><g><title>PyArray_ArgMin (calculation.c:247) (2 samples, 0.24%)</title><rect x="608" y="356" width="3" height="15" fill="rgb(215,229,38)"/><text x="611.00" y="366.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:312) (7 samples, 0.86%)</title><rect x="604" y="196" width="10" height="15" fill="rgb(220,217,0)"/><text x="607.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (7 samples, 0.86%)</title><rect x="604" y="212" width="10" height="15" fill="rgb(240,178,31)"/><text x="607.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py:66) (7 samples, 0.86%)</title><rect x="604" y="228" width="10" height="15" fill="rgb(212,216,16)"/><text x="607.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmin.py:38) (7 samples, 0.86%)</title><rect x="604" y="244" width="10" height="15" fill="rgb(217,145,5)"/><text x="607.00" y="254.50"></text></g><g><title>_argmin (mlprodict/onnxrt/ops_cpu/op_argmin.py:16) (2 samples, 0.24%)</title><rect x="611" y="260" width="3" height="15" fill="rgb(233,18,23)"/><text x="614.00" y="270.50"></text></g><g><title>array_astype (methods.c:845) (1 samples, 0.12%)</title><rect x="612" y="276" width="2" height="15" fill="rgb(212,175,18)"/><text x="615.00" y="286.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (1 samples, 0.12%)</title><rect x="612" y="292" width="2" height="15" fill="rgb(233,162,8)"/><text x="615.00" y="302.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (1 samples, 0.12%)</title><rect x="612" y="308" width="2" height="15" fill="rgb(227,145,30)"/><text x="615.00" y="318.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (1 samples, 0.12%)</title><rect x="612" y="324" width="2" height="15" fill="rgb(239,109,53)"/><text x="615.00" y="334.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.12%)</title><rect x="612" y="340" width="2" height="15" fill="rgb(215,125,2)"/><text x="615.00" y="350.50"></text></g><g><title>0x7f198262754f (?) (1 samples, 0.12%)</title><rect x="614" y="244" width="1" height="15" fill="rgb(209,121,34)"/><text x="617.00" y="254.50"></text></g><g><title>0x7f198262d65e (?) (1 samples, 0.12%)</title><rect x="614" y="260" width="1" height="15" fill="rgb(230,158,7)"/><text x="617.00" y="270.50"></text></g><g><title>0x7f198262d50f (?) (1 samples, 0.12%)</title><rect x="614" y="276" width="1" height="15" fill="rgb(229,189,3)"/><text x="617.00" y="286.50"></text></g><g><title>0x7f1982633d6c (?) (1 samples, 0.12%)</title><rect x="614" y="292" width="1" height="15" fill="rgb(250,131,39)"/><text x="617.00" y="302.50"></text></g><g><title>0x7f198bb94ab9 (libgomp.so.1.0.0) (1 samples, 0.12%)</title><rect x="614" y="308" width="1" height="15" fill="rgb(245,69,54)"/><text x="617.00" y="318.50"></text></g><g><title>0x7f198bb95eab (libgomp.so.1.0.0) (1 samples, 0.12%)</title><rect x="614" y="324" width="1" height="15" fill="rgb(245,21,27)"/><text x="617.00" y="334.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:138) (1 samples, 0.12%)</title><rect x="615" y="276" width="2" height="15" fill="rgb(226,148,11)"/><text x="618.00" y="286.50"></text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::argument_loader (cast.h:1887) (1 samples, 0.12%)</title><rect x="615" y="292" width="2" height="15" fill="rgb(232,81,25)"/><text x="618.00" y="302.50"></text></g><g><title>std::tuple&lt;pybind11::detail::type_caster&lt;RuntimeTreeEnsembleRegressorFloat, void&gt;, pybind11::detail::type_caster&lt;pybind11::array_t&lt;float, 16&gt;, void&gt; &gt;::tuple&lt;pybind11::detail::type_caster&lt;RuntimeTreeEnsembleRegressorFloat, void&gt;, pybind11::detail::type_caster&lt;pybind11::array_t&lt;float, 16&gt;, void&gt;, true&gt; (tuple:879) (1 samples, 0.12%)</title><rect x="615" y="308" width="2" height="15" fill="rgb(219,113,44)"/><text x="618.00" y="318.50"></text></g><g><title>std::_Tuple_impl&lt;(unsigned long)0, pybind11::detail::type_caster&lt;RuntimeTreeEnsembleRegressorFloat, void&gt;, pybind11::detail::type_caster&lt;pybind11::array_t&lt;float, 16&gt;, void&gt; &gt;::_Tuple_impl (tuple:202) (1 samples, 0.12%)</title><rect x="615" y="324" width="2" height="15" fill="rgb(220,57,44)"/><text x="618.00" y="334.50"></text></g><g><title>std::_Head_base&lt;(unsigned long)0, pybind11::detail::type_caster&lt;RuntimeTreeEnsembleRegressorFloat, void&gt;, false&gt;::_Head_base (tuple:105) (1 samples, 0.12%)</title><rect x="615" y="340" width="2" height="15" fill="rgb(232,157,2)"/><text x="618.00" y="350.50"></text></g><g><title>pybind11::detail::type_caster&lt;RuntimeTreeEnsembleRegressorFloat, void&gt;::type_caster (cast.h:911) (1 samples, 0.12%)</title><rect x="615" y="356" width="2" height="15" fill="rgb(239,193,6)"/><text x="618.00" y="366.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;RuntimeTreeEnsembleRegressorFloat&gt;::type_caster_base (cast.h:832) (1 samples, 0.12%)</title><rect x="615" y="372" width="2" height="15" fill="rgb(218,65,53)"/><text x="618.00" y="382.50"></text></g><g><title>pybind11::detail::type_caster_base&lt;RuntimeTreeEnsembleRegressorFloat&gt;::type_caster_base (cast.h:833) (1 samples, 0.12%)</title><rect x="615" y="388" width="2" height="15" fill="rgb(217,61,26)"/><text x="618.00" y="398.50"></text></g><g><title>pybind11::array::array&lt;float&gt; (numpy.h:607) (1 samples, 0.12%)</title><rect x="615" y="404" width="2" height="15" fill="rgb(243,73,23)"/><text x="618.00" y="414.50"></text></g><g><title>pybind11::detail::any_container&lt;long&gt;::~any_container (common.h:771) (1 samples, 0.12%)</title><rect x="615" y="420" width="2" height="15" fill="rgb(254,35,0)"/><text x="618.00" y="430.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::~vector (stl_vector.h:426) (1 samples, 0.12%)</title><rect x="615" y="436" width="2" height="15" fill="rgb(209,66,3)"/><text x="618.00" y="446.50"></text></g><g><title>pybind11::array::array&lt;float&gt; (numpy.h:600) (1 samples, 0.12%)</title><rect x="615" y="452" width="2" height="15" fill="rgb(229,24,26)"/><text x="618.00" y="462.50"></text></g><g><title>pybind11::dtype::~dtype (numpy.h:444) (1 samples, 0.12%)</title><rect x="615" y="468" width="2" height="15" fill="rgb(238,45,43)"/><text x="618.00" y="478.50"></text></g><g><title>pybind11::object::~object (pytypes.h:240) (1 samples, 0.12%)</title><rect x="615" y="484" width="2" height="15" fill="rgb(206,51,26)"/><text x="618.00" y="494.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (1 samples, 0.12%)</title><rect x="615" y="500" width="2" height="15" fill="rgb(253,40,54)"/><text x="618.00" y="510.50"></text></g><g><title>pybind11::array::array (numpy.h:578) (1 samples, 0.12%)</title><rect x="615" y="516" width="2" height="15" fill="rgb(224,162,29)"/><text x="618.00" y="526.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.12%)</title><rect x="615" y="532" width="2" height="15" fill="rgb(236,121,27)"/><text x="618.00" y="542.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (1 samples, 0.12%)</title><rect x="615" y="548" width="2" height="15" fill="rgb(217,155,40)"/><text x="618.00" y="558.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (1 samples, 0.12%)</title><rect x="615" y="564" width="2" height="15" fill="rgb(239,203,13)"/><text x="618.00" y="574.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (1 samples, 0.12%)</title><rect x="615" y="580" width="2" height="15" fill="rgb(212,130,33)"/><text x="618.00" y="590.50"></text></g><g><title>0x7f198bb95ea0 (libgomp.so.1.0.0) (1 samples, 0.12%)</title><rect x="617" y="484" width="1" height="15" fill="rgb(249,151,2)"/><text x="620.00" y="494.50"></text></g><g><title>0x7f198bb95ea9 (libgomp.so.1.0.0) (9 samples, 1.10%)</title><rect x="618" y="484" width="13" height="15" fill="rgb(214,145,20)"/><text x="621.00" y="494.50"></text></g><g><title>0x7f198bb95eab (libgomp.so.1.0.0) (9 samples, 1.10%)</title><rect x="631" y="484" width="13" height="15" fill="rgb(245,217,38)"/><text x="634.00" y="494.50"></text></g><g><title>0x7f198bb94ab9 (libgomp.so.1.0.0) (32 samples, 3.91%)</title><rect x="617" y="468" width="46" height="15" fill="rgb(235,51,11)"/><text x="620.00" y="478.50">0x7f..</text></g><g><title>0x7f198bb95ead (libgomp.so.1.0.0) (13 samples, 1.59%)</title><rect x="644" y="484" width="19" height="15" fill="rgb(233,64,12)"/><text x="647.00" y="494.50"></text></g><g><title>0x7f198bb95cf9 (libgomp.so.1.0.0) (1 samples, 0.12%)</title><rect x="663" y="500" width="1" height="15" fill="rgb(235,139,53)"/><text x="666.00" y="510.50"></text></g><g><title>0x7f198bb93daa (libgomp.so.1.0.0) (2 samples, 0.24%)</title><rect x="663" y="484" width="3" height="15" fill="rgb(234,17,9)"/><text x="666.00" y="494.50"></text></g><g><title>0x7f198bb95cfb (libgomp.so.1.0.0) (1 samples, 0.12%)</title><rect x="664" y="500" width="2" height="15" fill="rgb(226,216,3)"/><text x="667.00" y="510.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (37 samples, 4.52%)</title><rect x="614" y="196" width="53" height="15" fill="rgb(210,176,23)"/><text x="617.00" y="206.50">run (..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (37 samples, 4.52%)</title><rect x="614" y="212" width="53" height="15" fill="rgb(244,104,24)"/><text x="617.00" y="222.50">run (..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py:61) (37 samples, 4.52%)</title><rect x="614" y="228" width="53" height="15" fill="rgb(233,62,4)"/><text x="617.00" y="238.50">_run ..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (36 samples, 4.40%)</title><rect x="615" y="244" width="52" height="15" fill="rgb(213,62,36)"/><text x="618.00" y="254.50">pybin..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (36 samples, 4.40%)</title><rect x="615" y="260" width="52" height="15" fill="rgb(243,104,14)"/><text x="618.00" y="270.50">void ..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (35 samples, 4.28%)</title><rect x="617" y="276" width="50" height="15" fill="rgb(244,194,18)"/><text x="620.00" y="286.50">void ..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (35 samples, 4.28%)</title><rect x="617" y="292" width="50" height="15" fill="rgb(230,58,2)"/><text x="620.00" y="302.50">pybin..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (35 samples, 4.28%)</title><rect x="617" y="308" width="50" height="15" fill="rgb(216,223,25)"/><text x="620.00" y="318.50">pybin..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (35 samples, 4.28%)</title><rect x="617" y="324" width="50" height="15" fill="rgb(236,102,21)"/><text x="620.00" y="334.50">pybin..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (35 samples, 4.28%)</title><rect x="617" y="340" width="50" height="15" fill="rgb(233,59,5)"/><text x="620.00" y="350.50">pybin..</text></g><g><title>pybind11::array::~array (numpy.h:538) (35 samples, 4.28%)</title><rect x="617" y="356" width="50" height="15" fill="rgb(220,21,5)"/><text x="620.00" y="366.50">pybin..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (35 samples, 4.28%)</title><rect x="617" y="372" width="50" height="15" fill="rgb(242,183,28)"/><text x="620.00" y="382.50">pybin..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (35 samples, 4.28%)</title><rect x="617" y="388" width="50" height="15" fill="rgb(205,65,51)"/><text x="620.00" y="398.50">pybin..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (35 samples, 4.28%)</title><rect x="617" y="404" width="50" height="15" fill="rgb(247,201,54)"/><text x="620.00" y="414.50">pybin..</text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp:321) (35 samples, 4.28%)</title><rect x="617" y="420" width="50" height="15" fill="rgb(238,114,14)"/><text x="620.00" y="430.50">Runti..</text></g><g><title>pybind11::array::size (numpy.h:619) (35 samples, 4.28%)</title><rect x="617" y="436" width="50" height="15" fill="rgb(247,12,8)"/><text x="620.00" y="446.50">pybin..</text></g><g><title>std::accumulate&lt;long const*, long, std::multiplies&lt;long&gt; &gt; (stl_numeric.h:153) (35 samples, 4.28%)</title><rect x="617" y="452" width="50" height="15" fill="rgb(217,12,30)"/><text x="620.00" y="462.50">std::..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (3 samples, 0.37%)</title><rect x="663" y="468" width="4" height="15" fill="rgb(211,173,46)"/><text x="666.00" y="478.50"></text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::compute_gil_free [clone ._omp_fn.2] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp:371) (1 samples, 0.12%)</title><rect x="666" y="484" width="1" height="15" fill="rgb(233,19,34)"/><text x="669.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::size (stl_vector.h:656) (1 samples, 0.12%)</title><rect x="666" y="500" width="1" height="15" fill="rgb(251,207,39)"/><text x="669.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_.cpp:473) (1 samples, 0.12%)</title><rect x="666" y="516" width="1" height="15" fill="rgb(212,115,39)"/><text x="669.00" y="526.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (1 samples, 0.12%)</title><rect x="670" y="324" width="2" height="15" fill="rgb(221,211,4)"/><text x="673.00" y="334.50"></text></g><g><title>_aligned_strided_to_contig_size4_srcstride0 (lowlevel_strided_loops.c.src:238) (1 samples, 0.12%)</title><rect x="670" y="340" width="2" height="15" fill="rgb(228,136,11)"/><text x="673.00" y="350.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (2 samples, 0.24%)</title><rect x="670" y="276" width="3" height="15" fill="rgb(239,22,2)"/><text x="673.00" y="286.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (2 samples, 0.24%)</title><rect x="670" y="292" width="3" height="15" fill="rgb(222,3,15)"/><text x="673.00" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (2 samples, 0.24%)</title><rect x="670" y="308" width="3" height="15" fill="rgb(208,171,6)"/><text x="673.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1025) (1 samples, 0.12%)</title><rect x="672" y="324" width="1" height="15" fill="rgb(254,162,28)"/><text x="675.00" y="334.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (297 samples, 36.31%)</title><rect x="246" y="180" width="429" height="15" fill="rgb(253,122,20)"/><text x="249.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (5 samples, 0.61%)</title><rect x="667" y="196" width="8" height="15" fill="rgb(229,61,7)"/><text x="670.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_less.py:17) (4 samples, 0.49%)</title><rect x="669" y="212" width="6" height="15" fill="rgb(205,63,25)"/><text x="672.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.37%)</title><rect x="670" y="228" width="5" height="15" fill="rgb(220,128,49)"/><text x="673.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.37%)</title><rect x="670" y="244" width="5" height="15" fill="rgb(216,188,34)"/><text x="673.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 0.37%)</title><rect x="670" y="260" width="5" height="15" fill="rgb(235,99,2)"/><text x="673.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (1 samples, 0.12%)</title><rect x="673" y="276" width="2" height="15" fill="rgb(247,135,1)"/><text x="676.00" y="286.50"></text></g><g><title>FLOAT_less (loops.c.src:1771) (1 samples, 0.12%)</title><rect x="673" y="292" width="2" height="15" fill="rgb(232,193,24)"/><text x="676.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (2 samples, 0.24%)</title><rect x="675" y="180" width="2" height="15" fill="rgb(234,142,23)"/><text x="678.00" y="190.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (1 samples, 0.12%)</title><rect x="677" y="180" width="2" height="15" fill="rgb(234,6,12)"/><text x="680.00" y="190.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (306 samples, 37.41%)</title><rect x="239" y="164" width="441" height="15" fill="rgb(217,146,50)"/><text x="242.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:45..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (1 samples, 0.12%)</title><rect x="679" y="180" width="1" height="15" fill="rgb(234,195,25)"/><text x="682.00" y="190.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:61) (311 samples, 38.02%)</title><rect x="233" y="52" width="449" height="15" fill="rgb(210,159,42)"/><text x="236.00" y="62.50">&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5..</text></g><g><title>profile_pyrt (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:60) (311 samples, 38.02%)</title><rect x="233" y="68" width="449" height="15" fill="rgb(232,214,31)"/><text x="236.00" y="78.50">profile_pyrt (bench_AdaBoostRegressor_default_b_reg_n_estimat..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:37) (308 samples, 37.65%)</title><rect x="237" y="84" width="445" height="15" fill="rgb(208,23,17)"/><text x="240.00" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estim..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:31) (308 samples, 37.65%)</title><rect x="237" y="100" width="445" height="15" fill="rgb(235,39,31)"/><text x="240.00" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (307 samples, 37.53%)</title><rect x="239" y="116" width="443" height="15" fill="rgb(253,211,17)"/><text x="242.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (307 samples, 37.53%)</title><rect x="239" y="132" width="443" height="15" fill="rgb(228,111,43)"/><text x="242.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (307 samples, 37.53%)</title><rect x="239" y="148" width="443" height="15" fill="rgb(236,138,39)"/><text x="242.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (1 samples, 0.12%)</title><rect x="680" y="164" width="2" height="15" fill="rgb(226,32,23)"/><text x="683.00" y="174.50"></text></g><g><title>0x7f1981bccff9 (?) (1 samples, 0.12%)</title><rect x="682" y="212" width="1" height="15" fill="rgb(230,101,12)"/><text x="685.00" y="222.50"></text></g><g><title>0x7f1981bc7ef6 (?) (1 samples, 0.12%)</title><rect x="682" y="228" width="1" height="15" fill="rgb(213,98,4)"/><text x="685.00" y="238.50"></text></g><g><title>0x7f1981bbc962 (?) (1 samples, 0.12%)</title><rect x="682" y="244" width="1" height="15" fill="rgb(222,0,51)"/><text x="685.00" y="254.50"></text></g><g><title>0x7f1981bf07a7 (?) (1 samples, 0.12%)</title><rect x="682" y="260" width="1" height="15" fill="rgb(224,151,11)"/><text x="685.00" y="270.50"></text></g><g><title>0x7f1981bf0379 (?) (1 samples, 0.12%)</title><rect x="682" y="276" width="1" height="15" fill="rgb(252,112,32)"/><text x="685.00" y="286.50"></text></g><g><title>0x7f198204e8b8 (?) (1 samples, 0.12%)</title><rect x="682" y="292" width="1" height="15" fill="rgb(249,5,15)"/><text x="685.00" y="302.50"></text></g><g><title>0x7f198204cc7f (?) (1 samples, 0.12%)</title><rect x="682" y="308" width="1" height="15" fill="rgb(250,35,2)"/><text x="685.00" y="318.50"></text></g><g><title>0x7f198205f99c (?) (1 samples, 0.12%)</title><rect x="682" y="324" width="1" height="15" fill="rgb(220,37,21)"/><text x="685.00" y="334.50"></text></g><g><title>0x7f1981d8730b (?) (1 samples, 0.12%)</title><rect x="682" y="340" width="1" height="15" fill="rgb(229,72,9)"/><text x="685.00" y="350.50"></text></g><g><title>0x7f19c1b8e965 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="682" y="356" width="1" height="15" fill="rgb(209,104,0)"/><text x="685.00" y="366.50"></text></g><g><title>0x7f19c1baf120 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="683" y="212" width="2" height="15" fill="rgb(240,58,40)"/><text x="686.00" y="222.50"></text></g><g><title>onnxruntime::ArgMin&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.61%)</title><rect x="686" y="340" width="7" height="15" fill="rgb(241,204,37)"/><text x="689.00" y="350.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="690" y="356" width="3" height="15" fill="rgb(249,192,39)"/><text x="693.00" y="366.50"></text></g><g><title>onnxruntime::Cast&lt;bool&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="693" y="340" width="2" height="15" fill="rgb(237,194,54)"/><text x="696.00" y="350.50"></text></g><g><title>0x7f19c1baedbf (libc-2.29.so) (2 samples, 0.24%)</title><rect x="696" y="372" width="3" height="15" fill="rgb(234,192,33)"/><text x="699.00" y="382.50"></text></g><g><title>0x7f19c1baedc3 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="699" y="372" width="1" height="15" fill="rgb(231,106,42)"/><text x="702.00" y="382.50"></text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.73%)</title><rect x="695" y="340" width="8" height="15" fill="rgb(227,76,38)"/><text x="698.00" y="350.50"></text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.73%)</title><rect x="695" y="356" width="8" height="15" fill="rgb(237,199,25)"/><text x="698.00" y="366.50"></text></g><g><title>0x7f19c1baedc9 (libc-2.29.so) (2 samples, 0.24%)</title><rect x="700" y="372" width="3" height="15" fill="rgb(215,218,28)"/><text x="703.00" y="382.50"></text></g><g><title>(anonymous namespace)::CopySlices&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="703" y="356" width="2" height="15" fill="rgb(208,68,30)"/><text x="706.00" y="366.50"></text></g><g><title>(anonymous namespace)::SumSlices&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.49%)</title><rect x="705" y="356" width="6" height="15" fill="rgb(240,167,49)"/><text x="708.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="711" y="356" width="1" height="15" fill="rgb(216,114,26)"/><text x="714.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="711" y="372" width="1" height="15" fill="rgb(223,167,31)"/><text x="714.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="711" y="388" width="1" height="15" fill="rgb(236,192,26)"/><text x="714.00" y="398.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetNodeIdxToMLValueIdx (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="711" y="404" width="1" height="15" fill="rgb(227,130,51)"/><text x="714.00" y="414.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="712" y="356" width="1" height="15" fill="rgb(214,111,23)"/><text x="715.00" y="366.50"></text></g><g><title>onnxruntime::CumSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.98%)</title><rect x="703" y="340" width="12" height="15" fill="rgb(220,69,25)"/><text x="706.00" y="350.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector [clone .constprop.161] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="713" y="356" width="2" height="15" fill="rgb(211,194,49)"/><text x="716.00" y="366.50"></text></g><g><title>0x7f19c1b8ebe8 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="725" y="356" width="1" height="15" fill="rgb(206,42,30)"/><text x="728.00" y="366.50"></text></g><g><title>onnxruntime::GatherElements::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.10%)</title><rect x="715" y="340" width="13" height="15" fill="rgb(254,3,7)"/><text x="718.00" y="350.50"></text></g><g><title>onnxruntime::parse_and_validate_indices_tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="726" y="356" width="2" height="15" fill="rgb(205,214,36)"/><text x="729.00" y="366.50"></text></g><g><title>onnxruntime::Less&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.49%)</title><rect x="728" y="340" width="6" height="15" fill="rgb(238,171,13)"/><text x="731.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, bool, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Less&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.49%)</title><rect x="728" y="356" width="6" height="15" fill="rgb(226,6,47)"/><text x="731.00" y="366.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.37%)</title><rect x="729" y="372" width="5" height="15" fill="rgb(212,202,53)"/><text x="732.00" y="382.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.49%)</title><rect x="734" y="372" width="5" height="15" fill="rgb(217,23,33)"/><text x="737.00" y="382.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="737" y="388" width="2" height="15" fill="rgb(250,176,10)"/><text x="740.00" y="398.50"></text></g><g><title>onnxruntime::Mul&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.86%)</title><rect x="734" y="340" width="10" height="15" fill="rgb(236,58,0)"/><text x="737.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.86%)</title><rect x="734" y="356" width="10" height="15" fill="rgb(222,115,2)"/><text x="737.00" y="366.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.37%)</title><rect x="739" y="372" width="5" height="15" fill="rgb(253,56,29)"/><text x="742.00" y="382.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.37%)</title><rect x="739" y="388" width="5" height="15" fill="rgb(231,152,0)"/><text x="742.00" y="398.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="742" y="404" width="2" height="15" fill="rgb(230,163,38)"/><text x="745.00" y="414.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="742" y="420" width="2" height="15" fill="rgb(225,37,26)"/><text x="745.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="742" y="436" width="2" height="15" fill="rgb(254,79,22)"/><text x="745.00" y="446.50"></text></g><g><title>0x7f19c1b8e90e (libc-2.29.so) (2 samples, 0.24%)</title><rect x="763" y="388" width="2" height="15" fill="rgb(240,228,35)"/><text x="766.00" y="398.50"></text></g><g><title>0x7f19c1b8e945 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="765" y="388" width="2" height="15" fill="rgb(234,132,44)"/><text x="768.00" y="398.50"></text></g><g><title>0x7f19c1b8e961 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="767" y="388" width="1" height="15" fill="rgb(238,196,6)"/><text x="770.00" y="398.50"></text></g><g><title>0x7f19c1b8e971 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="768" y="388" width="2" height="15" fill="rgb(205,34,36)"/><text x="771.00" y="398.50"></text></g><g><title>0x7f19c1b8e982 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="770" y="388" width="1" height="15" fill="rgb(224,74,5)"/><text x="773.00" y="398.50"></text></g><g><title>0x7f19c1b8ea4c (libc-2.29.so) (1 samples, 0.12%)</title><rect x="771" y="388" width="2" height="15" fill="rgb(218,97,40)"/><text x="774.00" y="398.50"></text></g><g><title>0x7f19c1d60dee (libm-2.29.so) (1 samples, 0.12%)</title><rect x="773" y="388" width="1" height="15" fill="rgb(238,183,28)"/><text x="776.00" y="398.50"></text></g><g><title>0x7f19c1d60e4d (libm-2.29.so) (1 samples, 0.12%)</title><rect x="774" y="388" width="1" height="15" fill="rgb(236,18,8)"/><text x="777.00" y="398.50"></text></g><g><title>0x7f19c1d60e7e (libm-2.29.so) (3 samples, 0.37%)</title><rect x="775" y="388" width="5" height="15" fill="rgb(234,158,25)"/><text x="778.00" y="398.50"></text></g><g><title>0x7f19c1d60e8d (libm-2.29.so) (1 samples, 0.12%)</title><rect x="780" y="388" width="1" height="15" fill="rgb(246,41,24)"/><text x="783.00" y="398.50"></text></g><g><title>0x7f19c1d60e91 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="781" y="388" width="2" height="15" fill="rgb(227,155,23)"/><text x="784.00" y="398.50"></text></g><g><title>0x7f19c1d60ea2 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="783" y="388" width="1" height="15" fill="rgb(215,54,51)"/><text x="786.00" y="398.50"></text></g><g><title>0x7f19c1d60eb6 (libm-2.29.so) (2 samples, 0.24%)</title><rect x="784" y="388" width="3" height="15" fill="rgb(218,220,37)"/><text x="787.00" y="398.50"></text></g><g><title>0x7f19c1d60efa (libm-2.29.so) (1 samples, 0.12%)</title><rect x="787" y="388" width="1" height="15" fill="rgb(240,97,29)"/><text x="790.00" y="398.50"></text></g><g><title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, long, std::pair&lt;float, long&gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::GreaterValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.73%)</title><rect x="788" y="388" width="9" height="15" fill="rgb(251,12,7)"/><text x="791.00" y="398.50"></text></g><g><title>0x7f1981b940f0 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="807" y="404" width="2" height="15" fill="rgb(253,148,51)"/><text x="810.00" y="414.50"></text></g><g><title>0x7f19c1b8e991 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="809" y="404" width="1" height="15" fill="rgb(205,27,44)"/><text x="812.00" y="414.50"></text></g><g><title>0x7f19c1b8e99b (libc-2.29.so) (1 samples, 0.12%)</title><rect x="810" y="404" width="2" height="15" fill="rgb(246,176,22)"/><text x="813.00" y="414.50"></text></g><g><title>0x7f19c1b8ea53 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="812" y="404" width="1" height="15" fill="rgb(224,130,8)"/><text x="815.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.37%)</title><rect x="813" y="404" width="4" height="15" fill="rgb(218,212,19)"/><text x="816.00" y="414.50"></text></g><g><title>operator delete (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="817" y="404" width="2" height="15" fill="rgb(237,123,24)"/><text x="820.00" y="414.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 6.97%)</title><rect x="744" y="340" width="82" height="15" fill="rgb(235,124,44)"/><text x="747.00" y="350.50">onnxrunti..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 6.97%)</title><rect x="744" y="356" width="82" height="15" fill="rgb(237,172,26)"/><text x="747.00" y="366.50">onnxrunti..</text></g><g><title>onnxruntime::extract_top_k_elements&lt;true, true, onnxruntime::GreaterValueCmp&lt;float&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 6.97%)</title><rect x="744" y="372" width="82" height="15" fill="rgb(224,19,47)"/><text x="747.00" y="382.50">onnxrunti..</text></g><g><title>std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt;::_M_emplace_back_aux&lt;std::pair&lt;float, long&gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 2.44%)</title><rect x="797" y="388" width="29" height="15" fill="rgb(248,42,52)"/><text x="800.00" y="398.50">st..</text></g><g><title>operator new (libstdc++.so.6.0.28) (5 samples, 0.61%)</title><rect x="819" y="404" width="7" height="15" fill="rgb(220,2,25)"/><text x="822.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.61%)</title><rect x="819" y="420" width="7" height="15" fill="rgb(241,60,0)"/><text x="822.00" y="430.50"></text></g><g><title>onnxruntime::ml::ArrayFeatureExtractorOp&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.24%)</title><rect x="826" y="340" width="3" height="15" fill="rgb(223,106,13)"/><text x="829.00" y="350.50"></text></g><g><title>0x7f19c1b8e906 (libc-2.29.so) (2 samples, 0.24%)</title><rect x="874" y="356" width="2" height="15" fill="rgb(246,175,3)"/><text x="877.00" y="366.50"></text></g><g><title>0x7f19c1b8e945 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="876" y="356" width="2" height="15" fill="rgb(227,103,15)"/><text x="879.00" y="366.50"></text></g><g><title>0x7f19c1b8e95e (libc-2.29.so) (1 samples, 0.12%)</title><rect x="878" y="356" width="1" height="15" fill="rgb(242,83,14)"/><text x="881.00" y="366.50"></text></g><g><title>0x7f19c1b8e965 (libc-2.29.so) (3 samples, 0.37%)</title><rect x="879" y="356" width="5" height="15" fill="rgb(213,76,1)"/><text x="882.00" y="366.50"></text></g><g><title>0x7f19c1b8e96a (libc-2.29.so) (2 samples, 0.24%)</title><rect x="884" y="356" width="3" height="15" fill="rgb(208,154,1)"/><text x="887.00" y="366.50"></text></g><g><title>0x7f19c1b8e991 (libc-2.29.so) (2 samples, 0.24%)</title><rect x="887" y="356" width="2" height="15" fill="rgb(245,210,2)"/><text x="890.00" y="366.50"></text></g><g><title>0x7f19c1b8ea41 (libc-2.29.so) (3 samples, 0.37%)</title><rect x="889" y="356" width="5" height="15" fill="rgb(232,82,34)"/><text x="892.00" y="366.50"></text></g><g><title>0x7f19c1b8ea4d (libc-2.29.so) (2 samples, 0.24%)</title><rect x="894" y="356" width="3" height="15" fill="rgb(237,9,13)"/><text x="897.00" y="366.50"></text></g><g><title>0x7f19c1b8ea53 (libc-2.29.so) (2 samples, 0.24%)</title><rect x="897" y="356" width="3" height="15" fill="rgb(220,177,24)"/><text x="900.00" y="366.50"></text></g><g><title>0x7f19c1b8ea55 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="900" y="356" width="1" height="15" fill="rgb(254,26,10)"/><text x="903.00" y="366.50"></text></g><g><title>0x7f19c1b8ebc0 (libc-2.29.so) (4 samples, 0.49%)</title><rect x="901" y="356" width="6" height="15" fill="rgb(243,138,1)"/><text x="904.00" y="366.50"></text></g><g><title>0x7f19c1baf120 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="907" y="356" width="1" height="15" fill="rgb(243,169,45)"/><text x="910.00" y="366.50"></text></g><g><title>free (libc-2.29.so) (14 samples, 1.71%)</title><rect x="908" y="356" width="20" height="15" fill="rgb(244,126,37)"/><text x="911.00" y="366.50"></text></g><g><title>0x7f19b165ad50 (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="1029" y="404" width="2" height="15" fill="rgb(239,29,32)"/><text x="1032.00" y="414.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (13 samples, 1.59%)</title><rect x="1025" y="388" width="19" height="15" fill="rgb(232,39,1)"/><text x="1028.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (9 samples, 1.10%)</title><rect x="1031" y="404" width="13" height="15" fill="rgb(211,123,50)"/><text x="1034.00" y="414.50"></text></g><g><title>0x7f19c1baf12f (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1063" y="420" width="1" height="15" fill="rgb(216,18,15)"/><text x="1066.00" y="430.50"></text></g><g><title>0x7f19b165ad50 (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="1070" y="436" width="1" height="15" fill="rgb(250,19,13)"/><text x="1073.00" y="446.50"></text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 2.20%)</title><rect x="1055" y="404" width="26" height="15" fill="rgb(227,32,45)"/><text x="1058.00" y="414.50">s..</text></g><g><title>operator new (libstdc++.so.6.0.28) (12 samples, 1.47%)</title><rect x="1064" y="420" width="17" height="15" fill="rgb(230,199,41)"/><text x="1067.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.86%)</title><rect x="1071" y="436" width="10" height="15" fill="rgb(225,18,33)"/><text x="1074.00" y="446.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (152 samples, 18.58%)</title><rect x="928" y="356" width="220" height="15" fill="rgb(211,67,21)"/><text x="931.00" y="366.50">onnxruntime::ml::TreeEnsemble..</text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;long, std::tuple&lt;float, float, float&gt; &gt;&amp;&gt; [clone .isra.301] (onnxruntime/capi/onnxruntime_pybind11_state.so) (92 samples, 11.25%)</title><rect x="1015" y="372" width="133" height="15" fill="rgb(229,35,10)"/><text x="1018.00" y="382.50">std::_Hashtable&lt;..</text></g><g><title>std::_Hashtable&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (onnxruntime/capi/onnxruntime_pybind11_state.so) (72 samples, 8.80%)</title><rect x="1044" y="388" width="104" height="15" fill="rgb(214,35,18)"/><text x="1047.00" y="398.50">std::_Hashta..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (libstdc++.so.6.0.28) (46 samples, 5.62%)</title><rect x="1081" y="404" width="67" height="15" fill="rgb(215,25,27)"/><text x="1084.00" y="414.50">std::__..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (libstdc++.so.6.0.28) (18 samples, 2.20%)</title><rect x="1122" y="420" width="26" height="15" fill="rgb(244,197,23)"/><text x="1125.00" y="430.50">s..</text></g><g><title>0x7f1981b93850 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1151" y="372" width="1" height="15" fill="rgb(239,39,1)"/><text x="1154.00" y="382.50"></text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.49%)</title><rect x="1148" y="356" width="5" height="15" fill="rgb(237,85,30)"/><text x="1151.00" y="366.50"></text></g><g><title>0x7f19c1baedbf (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1152" y="372" width="1" height="15" fill="rgb(230,154,30)"/><text x="1155.00" y="382.50"></text></g><g><title>operator delete (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="1153" y="356" width="2" height="15" fill="rgb(209,91,11)"/><text x="1156.00" y="366.50"></text></g><g><title>std::__detail::_Map_base&lt;long, std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt;, std::allocator&lt;std::pair&lt;long const, std::tuple&lt;float, float, float&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 1.34%)</title><rect x="1155" y="356" width="16" height="15" fill="rgb(210,117,41)"/><text x="1158.00" y="366.50"></text></g><g><title>0x7f19b165ad50 (libstdc++.so.6.0.28) (3 samples, 0.37%)</title><rect x="1178" y="388" width="4" height="15" fill="rgb(253,112,40)"/><text x="1181.00" y="398.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (348 samples, 42.54%)</title><rect x="685" y="260" width="502" height="15" fill="rgb(223,24,36)"/><text x="688.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pyb..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (347 samples, 42.42%)</title><rect x="686" y="276" width="501" height="15" fill="rgb(214,0,53)"/><text x="689.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pyb..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (347 samples, 42.42%)</title><rect x="686" y="292" width="501" height="15" fill="rgb(240,198,5)"/><text x="689.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybin..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (347 samples, 42.42%)</title><rect x="686" y="308" width="501" height="15" fill="rgb(243,172,22)"/><text x="689.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_p..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (347 samples, 42.42%)</title><rect x="686" y="324" width="501" height="15" fill="rgb(232,57,0)"/><text x="689.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxrunti..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (248 samples, 30.32%)</title><rect x="829" y="340" width="358" height="15" fill="rgb(248,50,40)"/><text x="832.00" y="350.50">onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::C..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 1.34%)</title><rect x="1171" y="356" width="16" height="15" fill="rgb(232,7,48)"/><text x="1174.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (7 samples, 0.86%)</title><rect x="1177" y="372" width="10" height="15" fill="rgb(213,180,5)"/><text x="1180.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.37%)</title><rect x="1182" y="388" width="5" height="15" fill="rgb(254,111,4)"/><text x="1185.00" y="398.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (351 samples, 42.91%)</title><rect x="682" y="132" width="506" height="15" fill="rgb(246,97,36)"/><text x="685.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (351 samples, 42.91%)</title><rect x="682" y="148" width="506" height="15" fill="rgb(239,149,35)"/><text x="685.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (351 samples, 42.91%)</title><rect x="682" y="164" width="506" height="15" fill="rgb(234,149,29)"/><text x="685.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (351 samples, 42.91%)</title><rect x="682" y="180" width="506" height="15" fill="rgb(238,56,15)"/><text x="685.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:136) (351 samples, 42.91%)</title><rect x="682" y="196" width="506" height="15" fill="rgb(221,39,6)"/><text x="685.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (349 samples, 42.67%)</title><rect x="685" y="212" width="503" height="15" fill="rgb(235,84,46)"/><text x="688.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (349 samples, 42.67%)</title><rect x="685" y="228" width="503" height="15" fill="rgb(248,6,49)"/><text x="688.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjec..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (349 samples, 42.67%)</title><rect x="685" y="244" width="503" height="15" fill="rgb(253,47,9)"/><text x="688.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onn..</text></g><g><title>onnxruntime::python::CreateGenericMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1187" y="260" width="1" height="15" fill="rgb(244,8,34)"/><text x="1190.00" y="270.50"></text></g><g><title>onnxruntime::python::CreateTensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1187" y="276" width="1" height="15" fill="rgb(224,61,9)"/><text x="1190.00" y="286.50"></text></g><g><title>all (818 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(232,149,5)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:68) (352 samples, 43.03%)</title><rect x="682" y="52" width="508" height="15" fill="rgb(211,180,2)"/><text x="685.00" y="62.50">&lt;module&gt; (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_..</text></g><g><title>profile_ort (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:67) (352 samples, 43.03%)</title><rect x="682" y="68" width="508" height="15" fill="rgb(230,208,27)"/><text x="685.00" y="78.50">profile_ort (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000..</text></g><g><title>setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:37) (352 samples, 43.03%)</title><rect x="682" y="84" width="508" height="15" fill="rgb(224,92,1)"/><text x="685.00" y="94.50">setup_profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_10..</text></g><g><title>profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_12_float_.py:31) (352 samples, 43.03%)</title><rect x="682" y="100" width="508" height="15" fill="rgb(235,218,53)"/><text x="685.00" y="110.50">profile (bench_AdaBoostRegressor_default_b_reg_n_estimators5_1000_4_1..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (352 samples, 43.03%)</title><rect x="682" y="116" width="508" height="15" fill="rgb(225,82,32)"/><text x="685.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>unicode_eq (python3.7) (1 samples, 0.12%)</title><rect x="1188" y="132" width="2" height="15" fill="rgb(214,9,22)"/><text x="1191.00" y="142.50"></text></g><g><title>0x7f19c1c6ce83 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1188" y="148" width="2" height="15" fill="rgb(245,206,35)"/><text x="1191.00" y="158.50"></text></g></g></svg>