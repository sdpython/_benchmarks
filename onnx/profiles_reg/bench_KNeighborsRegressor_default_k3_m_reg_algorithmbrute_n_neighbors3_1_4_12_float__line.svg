<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1094" onload="init(evt)" viewBox="0 0 1200 1094" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1094" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1077.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1077.00"> </text><g id="frames"><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="10" y="740" width="2" height="15" fill="rgb(250,121,3)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="10" y="756" width="2" height="15" fill="rgb(209,25,17)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="10" y="772" width="2" height="15" fill="rgb(218,56,31)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="10" y="788" width="2" height="15" fill="rgb(240,184,7)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="10" y="804" width="2" height="15" fill="rgb(215,74,2)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (3 samples, 0.11%)</title><rect x="10" y="820" width="2" height="15" fill="rgb(232,158,49)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (3 samples, 0.11%)</title><rect x="10" y="836" width="2" height="15" fill="rgb(246,117,38)"/><text x="13.00" y="846.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:2) (4 samples, 0.15%)</title><rect x="10" y="148" width="2" height="15" fill="rgb(216,56,15)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="10" y="164" width="2" height="15" fill="rgb(245,113,43)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.15%)</title><rect x="10" y="180" width="2" height="15" fill="rgb(252,125,9)"/><text x="13.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="10" y="196" width="2" height="15" fill="rgb(209,156,24)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="10" y="212" width="2" height="15" fill="rgb(231,82,54)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="10" y="228" width="2" height="15" fill="rgb(252,96,2)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="10" y="244" width="2" height="15" fill="rgb(240,21,19)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="10" y="260" width="2" height="15" fill="rgb(214,146,15)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="10" y="276" width="2" height="15" fill="rgb(235,23,26)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (4 samples, 0.15%)</title><rect x="10" y="292" width="2" height="15" fill="rgb(241,96,0)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="10" y="308" width="2" height="15" fill="rgb(224,114,6)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="10" y="324" width="2" height="15" fill="rgb(206,193,6)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="10" y="340" width="2" height="15" fill="rgb(209,53,26)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="10" y="356" width="2" height="15" fill="rgb(206,179,39)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="10" y="372" width="2" height="15" fill="rgb(237,47,31)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (4 samples, 0.15%)</title><rect x="10" y="388" width="2" height="15" fill="rgb(226,151,45)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="10" y="404" width="2" height="15" fill="rgb(231,109,28)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="10" y="420" width="2" height="15" fill="rgb(242,110,17)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="10" y="436" width="2" height="15" fill="rgb(230,190,14)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="10" y="452" width="2" height="15" fill="rgb(240,75,38)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="10" y="468" width="2" height="15" fill="rgb(238,115,20)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (4 samples, 0.15%)</title><rect x="10" y="484" width="2" height="15" fill="rgb(245,22,51)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="10" y="500" width="2" height="15" fill="rgb(241,197,47)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="10" y="516" width="2" height="15" fill="rgb(218,160,52)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="10" y="532" width="2" height="15" fill="rgb(226,165,34)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="10" y="548" width="2" height="15" fill="rgb(225,143,27)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="10" y="564" width="2" height="15" fill="rgb(220,149,34)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (4 samples, 0.15%)</title><rect x="10" y="580" width="2" height="15" fill="rgb(244,217,37)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="10" y="596" width="2" height="15" fill="rgb(221,181,35)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.15%)</title><rect x="10" y="612" width="2" height="15" fill="rgb(220,180,42)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="10" y="628" width="2" height="15" fill="rgb(225,18,25)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="10" y="644" width="2" height="15" fill="rgb(237,221,12)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="10" y="660" width="2" height="15" fill="rgb(230,5,30)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="10" y="676" width="2" height="15" fill="rgb(227,93,15)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="10" y="692" width="2" height="15" fill="rgb(213,66,25)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="10" y="708" width="2" height="15" fill="rgb(226,54,40)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (4 samples, 0.15%)</title><rect x="10" y="724" width="2" height="15" fill="rgb(229,48,50)"/><text x="13.00" y="734.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:4) (3 samples, 0.11%)</title><rect x="12" y="148" width="1" height="15" fill="rgb(206,13,28)"/><text x="15.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="12" y="164" width="1" height="15" fill="rgb(237,13,51)"/><text x="15.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.11%)</title><rect x="12" y="180" width="1" height="15" fill="rgb(213,0,1)"/><text x="15.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="12" y="196" width="1" height="15" fill="rgb(226,17,43)"/><text x="15.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="12" y="212" width="1" height="15" fill="rgb(206,215,35)"/><text x="15.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="12" y="228" width="1" height="15" fill="rgb(225,71,29)"/><text x="15.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="12" y="244" width="1" height="15" fill="rgb(224,173,33)"/><text x="15.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="12" y="260" width="1" height="15" fill="rgb(235,105,4)"/><text x="15.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="12" y="276" width="1" height="15" fill="rgb(236,186,48)"/><text x="15.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (3 samples, 0.11%)</title><rect x="12" y="292" width="1" height="15" fill="rgb(228,31,27)"/><text x="15.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="12" y="308" width="1" height="15" fill="rgb(225,107,20)"/><text x="15.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="12" y="324" width="1" height="15" fill="rgb(233,194,17)"/><text x="15.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="12" y="340" width="1" height="15" fill="rgb(215,114,8)"/><text x="15.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="12" y="356" width="1" height="15" fill="rgb(237,220,7)"/><text x="15.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="12" y="372" width="1" height="15" fill="rgb(224,193,37)"/><text x="15.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (3 samples, 0.11%)</title><rect x="12" y="388" width="1" height="15" fill="rgb(211,8,9)"/><text x="15.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="12" y="404" width="1" height="15" fill="rgb(229,38,28)"/><text x="15.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="12" y="420" width="1" height="15" fill="rgb(222,217,32)"/><text x="15.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="12" y="436" width="1" height="15" fill="rgb(230,133,3)"/><text x="15.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="12" y="452" width="1" height="15" fill="rgb(208,184,17)"/><text x="15.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="12" y="468" width="1" height="15" fill="rgb(241,34,45)"/><text x="15.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (4 samples, 0.15%)</title><rect x="13" y="244" width="2" height="15" fill="rgb(209,133,21)"/><text x="16.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="13" y="260" width="2" height="15" fill="rgb(231,93,49)"/><text x="16.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="13" y="276" width="2" height="15" fill="rgb(230,187,52)"/><text x="16.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="13" y="292" width="2" height="15" fill="rgb(239,160,32)"/><text x="16.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="13" y="308" width="2" height="15" fill="rgb(208,19,39)"/><text x="16.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="13" y="324" width="2" height="15" fill="rgb(205,171,44)"/><text x="16.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (4 samples, 0.15%)</title><rect x="13" y="340" width="2" height="15" fill="rgb(244,22,6)"/><text x="16.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="13" y="356" width="2" height="15" fill="rgb(233,215,20)"/><text x="16.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.15%)</title><rect x="13" y="372" width="2" height="15" fill="rgb(208,154,18)"/><text x="16.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="13" y="388" width="2" height="15" fill="rgb(241,113,34)"/><text x="16.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="13" y="404" width="2" height="15" fill="rgb(229,93,28)"/><text x="16.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="13" y="420" width="2" height="15" fill="rgb(209,171,32)"/><text x="16.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="13" y="436" width="2" height="15" fill="rgb(252,209,15)"/><text x="16.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="13" y="452" width="2" height="15" fill="rgb(206,39,30)"/><text x="16.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="13" y="468" width="2" height="15" fill="rgb(208,2,42)"/><text x="16.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:7) (3 samples, 0.11%)</title><rect x="14" y="484" width="1" height="15" fill="rgb(207,128,24)"/><text x="17.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="14" y="500" width="1" height="15" fill="rgb(227,189,3)"/><text x="17.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="14" y="516" width="1" height="15" fill="rgb(212,104,1)"/><text x="17.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="14" y="532" width="1" height="15" fill="rgb(216,203,2)"/><text x="17.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="14" y="548" width="1" height="15" fill="rgb(247,208,0)"/><text x="17.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="14" y="564" width="1" height="15" fill="rgb(216,183,42)"/><text x="17.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/code_helper.py:8) (3 samples, 0.11%)</title><rect x="14" y="580" width="1" height="15" fill="rgb(208,105,24)"/><text x="17.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="14" y="596" width="1" height="15" fill="rgb(227,101,43)"/><text x="17.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.11%)</title><rect x="14" y="612" width="1" height="15" fill="rgb(220,110,45)"/><text x="17.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="14" y="628" width="1" height="15" fill="rgb(210,137,38)"/><text x="17.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="14" y="644" width="1" height="15" fill="rgb(237,158,37)"/><text x="17.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="14" y="660" width="1" height="15" fill="rgb(250,178,8)"/><text x="17.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="14" y="676" width="1" height="15" fill="rgb(251,178,5)"/><text x="17.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="14" y="692" width="1" height="15" fill="rgb(228,69,38)"/><text x="17.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="14" y="708" width="1" height="15" fill="rgb(253,4,25)"/><text x="17.00" y="718.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/__init__.py:6) (3 samples, 0.11%)</title><rect x="14" y="724" width="1" height="15" fill="rgb(214,179,27)"/><text x="17.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="14" y="740" width="1" height="15" fill="rgb(209,219,35)"/><text x="17.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="14" y="756" width="1" height="15" fill="rgb(241,103,41)"/><text x="17.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="14" y="772" width="1" height="15" fill="rgb(233,132,27)"/><text x="17.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="14" y="788" width="1" height="15" fill="rgb(222,206,26)"/><text x="17.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="14" y="804" width="1" height="15" fill="rgb(228,206,49)"/><text x="17.00" y="814.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/anyfhelper.py:9) (3 samples, 0.11%)</title><rect x="14" y="820" width="1" height="15" fill="rgb(219,197,5)"/><text x="17.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="14" y="836" width="1" height="15" fill="rgb(245,0,35)"/><text x="17.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="14" y="852" width="1" height="15" fill="rgb(234,174,49)"/><text x="17.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="14" y="868" width="1" height="15" fill="rgb(250,25,24)"/><text x="17.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="14" y="884" width="1" height="15" fill="rgb(248,85,40)"/><text x="17.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="14" y="900" width="1" height="15" fill="rgb(229,121,51)"/><text x="17.00" y="910.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/synchelper.py:10) (3 samples, 0.11%)</title><rect x="14" y="916" width="1" height="15" fill="rgb(233,227,13)"/><text x="17.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="14" y="932" width="1" height="15" fill="rgb(217,210,42)"/><text x="17.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.11%)</title><rect x="14" y="948" width="1" height="15" fill="rgb(233,112,36)"/><text x="17.00" y="958.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="14" y="964" width="1" height="15" fill="rgb(222,180,5)"/><text x="17.00" y="974.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="14" y="980" width="1" height="15" fill="rgb(242,43,0)"/><text x="17.00" y="990.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="14" y="996" width="1" height="15" fill="rgb(252,205,36)"/><text x="17.00" y="1006.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="14" y="1012" width="1" height="15" fill="rgb(246,2,22)"/><text x="17.00" y="1022.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="14" y="1028" width="1" height="15" fill="rgb(233,130,19)"/><text x="17.00" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="14" y="1044" width="1" height="15" fill="rgb(238,133,29)"/><text x="17.00" y="1054.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (3 samples, 0.11%)</title><rect x="15" y="724" width="1" height="15" fill="rgb(212,153,37)"/><text x="18.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="15" y="740" width="1" height="15" fill="rgb(216,122,17)"/><text x="18.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="15" y="756" width="1" height="15" fill="rgb(249,4,22)"/><text x="18.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="15" y="772" width="1" height="15" fill="rgb(219,205,21)"/><text x="18.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="15" y="788" width="1" height="15" fill="rgb(210,11,40)"/><text x="18.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="15" y="804" width="1" height="15" fill="rgb(211,162,52)"/><text x="18.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (3 samples, 0.11%)</title><rect x="15" y="820" width="1" height="15" fill="rgb(222,20,20)"/><text x="18.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="15" y="836" width="1" height="15" fill="rgb(229,185,15)"/><text x="18.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="15" y="852" width="1" height="15" fill="rgb(224,54,18)"/><text x="18.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="15" y="868" width="1" height="15" fill="rgb(228,173,50)"/><text x="18.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="15" y="884" width="1" height="15" fill="rgb(243,19,8)"/><text x="18.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="15" y="900" width="1" height="15" fill="rgb(231,191,30)"/><text x="18.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:44) (3 samples, 0.11%)</title><rect x="15" y="916" width="1" height="15" fill="rgb(218,52,0)"/><text x="18.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.11%)</title><rect x="15" y="932" width="1" height="15" fill="rgb(213,129,9)"/><text x="18.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.11%)</title><rect x="15" y="948" width="1" height="15" fill="rgb(217,209,27)"/><text x="18.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.11%)</title><rect x="15" y="964" width="1" height="15" fill="rgb(217,163,24)"/><text x="18.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.11%)</title><rect x="15" y="980" width="1" height="15" fill="rgb(232,158,16)"/><text x="18.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.11%)</title><rect x="15" y="996" width="1" height="15" fill="rgb(212,146,14)"/><text x="18.00" y="1006.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:4) (17 samples, 0.62%)</title><rect x="10" y="52" width="7" height="15" fill="rgb(236,106,42)"/><text x="13.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (17 samples, 0.62%)</title><rect x="10" y="68" width="7" height="15" fill="rgb(240,153,6)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (17 samples, 0.62%)</title><rect x="10" y="84" width="7" height="15" fill="rgb(234,173,31)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (17 samples, 0.62%)</title><rect x="10" y="100" width="7" height="15" fill="rgb(227,137,44)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (17 samples, 0.62%)</title><rect x="10" y="116" width="7" height="15" fill="rgb(248,226,41)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 0.62%)</title><rect x="10" y="132" width="7" height="15" fill="rgb(233,56,52)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3.py:7) (8 samples, 0.29%)</title><rect x="13" y="148" width="4" height="15" fill="rgb(221,226,25)"/><text x="16.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.29%)</title><rect x="13" y="164" width="4" height="15" fill="rgb(250,219,9)"/><text x="16.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.29%)</title><rect x="13" y="180" width="4" height="15" fill="rgb(242,16,8)"/><text x="16.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.29%)</title><rect x="13" y="196" width="4" height="15" fill="rgb(221,153,20)"/><text x="16.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.29%)</title><rect x="13" y="212" width="4" height="15" fill="rgb(225,173,31)"/><text x="16.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.29%)</title><rect x="13" y="228" width="4" height="15" fill="rgb(216,33,25)"/><text x="16.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (4 samples, 0.15%)</title><rect x="15" y="244" width="2" height="15" fill="rgb(214,180,21)"/><text x="18.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="15" y="260" width="2" height="15" fill="rgb(232,70,10)"/><text x="18.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="15" y="276" width="2" height="15" fill="rgb(206,14,13)"/><text x="18.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="15" y="292" width="2" height="15" fill="rgb(207,117,21)"/><text x="18.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="15" y="308" width="2" height="15" fill="rgb(210,198,33)"/><text x="18.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="15" y="324" width="2" height="15" fill="rgb(217,150,40)"/><text x="18.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (4 samples, 0.15%)</title><rect x="15" y="340" width="2" height="15" fill="rgb(236,132,2)"/><text x="18.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="15" y="356" width="2" height="15" fill="rgb(222,207,6)"/><text x="18.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="15" y="372" width="2" height="15" fill="rgb(245,163,23)"/><text x="18.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="15" y="388" width="2" height="15" fill="rgb(208,127,20)"/><text x="18.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="15" y="404" width="2" height="15" fill="rgb(221,53,8)"/><text x="18.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="15" y="420" width="2" height="15" fill="rgb(251,151,11)"/><text x="18.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (4 samples, 0.15%)</title><rect x="15" y="436" width="2" height="15" fill="rgb(219,218,34)"/><text x="18.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="15" y="452" width="2" height="15" fill="rgb(210,110,2)"/><text x="18.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="15" y="468" width="2" height="15" fill="rgb(249,177,20)"/><text x="18.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="15" y="484" width="2" height="15" fill="rgb(236,65,1)"/><text x="18.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="15" y="500" width="2" height="15" fill="rgb(229,149,30)"/><text x="18.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="15" y="516" width="2" height="15" fill="rgb(205,140,43)"/><text x="18.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (4 samples, 0.15%)</title><rect x="15" y="532" width="2" height="15" fill="rgb(206,78,22)"/><text x="18.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="15" y="548" width="2" height="15" fill="rgb(249,166,10)"/><text x="18.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="15" y="564" width="2" height="15" fill="rgb(248,91,12)"/><text x="18.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="15" y="580" width="2" height="15" fill="rgb(252,229,49)"/><text x="18.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="15" y="596" width="2" height="15" fill="rgb(227,160,6)"/><text x="18.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="15" y="612" width="2" height="15" fill="rgb(229,204,11)"/><text x="18.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (4 samples, 0.15%)</title><rect x="15" y="628" width="2" height="15" fill="rgb(229,41,27)"/><text x="18.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.15%)</title><rect x="15" y="644" width="2" height="15" fill="rgb(240,130,54)"/><text x="18.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.15%)</title><rect x="15" y="660" width="2" height="15" fill="rgb(234,95,50)"/><text x="18.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.15%)</title><rect x="15" y="676" width="2" height="15" fill="rgb(245,71,8)"/><text x="18.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.15%)</title><rect x="15" y="692" width="2" height="15" fill="rgb(233,56,48)"/><text x="18.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.15%)</title><rect x="15" y="708" width="2" height="15" fill="rgb(231,30,34)"/><text x="18.00" y="718.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (3 samples, 0.11%)</title><rect x="21" y="196" width="1" height="15" fill="rgb(229,158,28)"/><text x="24.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (4 samples, 0.15%)</title><rect x="21" y="164" width="1" height="15" fill="rgb(232,198,34)"/><text x="24.00" y="174.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (4 samples, 0.15%)</title><rect x="21" y="180" width="1" height="15" fill="rgb(226,52,13)"/><text x="24.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (3 samples, 0.11%)</title><rect x="22" y="164" width="2" height="15" fill="rgb(249,129,17)"/><text x="25.00" y="174.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:172) (14 samples, 0.51%)</title><rect x="19" y="148" width="6" height="15" fill="rgb(210,56,36)"/><text x="22.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (12 samples, 0.44%)</title><rect x="26" y="164" width="5" height="15" fill="rgb(215,164,31)"/><text x="29.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (4 samples, 0.15%)</title><rect x="29" y="180" width="2" height="15" fill="rgb(251,219,20)"/><text x="32.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:620) (3 samples, 0.11%)</title><rect x="31" y="164" width="1" height="15" fill="rgb(252,192,18)"/><text x="34.00" y="174.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py:388) (3 samples, 0.11%)</title><rect x="31" y="180" width="1" height="15" fill="rgb(234,62,26)"/><text x="34.00" y="190.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1347) (4 samples, 0.15%)</title><rect x="36" y="212" width="2" height="15" fill="rgb(231,158,34)"/><text x="39.00" y="222.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py:389) (3 samples, 0.11%)</title><rect x="36" y="228" width="2" height="15" fill="rgb(249,173,31)"/><text x="39.00" y="238.50"></text></g><g><title>effective_n_jobs (joblib/_parallel_backends.py:529) (3 samples, 0.11%)</title><rect x="36" y="244" width="2" height="15" fill="rgb(226,195,2)"/><text x="39.00" y="254.50"></text></g><g><title>in_main_thread (joblib/_parallel_backends.py:180) (3 samples, 0.11%)</title><rect x="36" y="260" width="2" height="15" fill="rgb(220,1,12)"/><text x="39.00" y="270.50"></text></g><g><title>check_array (sklearn/utils/validation.py:502) (3 samples, 0.11%)</title><rect x="39" y="260" width="1" height="15" fill="rgb(241,219,26)"/><text x="42.00" y="270.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:138) (3 samples, 0.11%)</title><rect x="43" y="276" width="1" height="15" fill="rgb(219,86,4)"/><text x="46.00" y="286.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:141) (15 samples, 0.55%)</title><rect x="38" y="244" width="6" height="15" fill="rgb(226,224,48)"/><text x="41.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (5 samples, 0.18%)</title><rect x="42" y="260" width="2" height="15" fill="rgb(233,134,45)"/><text x="45.00" y="270.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:262) (25 samples, 0.91%)</title><rect x="38" y="228" width="10" height="15" fill="rgb(211,198,27)"/><text x="41.00" y="238.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:144) (9 samples, 0.33%)</title><rect x="44" y="244" width="4" height="15" fill="rgb(233,95,43)"/><text x="47.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (4 samples, 0.15%)</title><rect x="47" y="260" width="1" height="15" fill="rgb(226,20,50)"/><text x="50.00" y="270.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:279) (4 samples, 0.15%)</title><rect x="49" y="228" width="2" height="15" fill="rgb(214,189,0)"/><text x="52.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (3 samples, 0.11%)</title><rect x="49" y="244" width="2" height="15" fill="rgb(233,172,47)"/><text x="52.00" y="254.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:295) (7 samples, 0.26%)</title><rect x="51" y="228" width="3" height="15" fill="rgb(249,115,13)"/><text x="54.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (6 samples, 0.22%)</title><rect x="51" y="244" width="3" height="15" fill="rgb(247,18,46)"/><text x="54.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;:6) (4 samples, 0.15%)</title><rect x="52" y="260" width="2" height="15" fill="rgb(245,12,27)"/><text x="55.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.15%)</title><rect x="52" y="276" width="2" height="15" fill="rgb(206,80,43)"/><text x="55.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py:1356) (4 samples, 0.15%)</title><rect x="52" y="292" width="2" height="15" fill="rgb(208,179,20)"/><text x="55.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c:2693) (3 samples, 0.11%)</title><rect x="53" y="308" width="1" height="15" fill="rgb(226,151,30)"/><text x="56.00" y="318.50"></text></g><g><title>array_multiply (number.c:354) (3 samples, 0.11%)</title><rect x="54" y="244" width="1" height="15" fill="rgb(245,24,27)"/><text x="57.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.11%)</title><rect x="54" y="260" width="1" height="15" fill="rgb(253,139,7)"/><text x="57.00" y="270.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (3 samples, 0.11%)</title><rect x="55" y="244" width="2" height="15" fill="rgb(214,116,20)"/><text x="58.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.11%)</title><rect x="55" y="260" width="2" height="15" fill="rgb(212,95,12)"/><text x="58.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (3 samples, 0.11%)</title><rect x="55" y="276" width="2" height="15" fill="rgb(218,101,15)"/><text x="58.00" y="286.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:303) (7 samples, 0.26%)</title><rect x="54" y="228" width="3" height="15" fill="rgb(250,119,5)"/><text x="57.00" y="238.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1592) (56 samples, 2.05%)</title><rect x="35" y="180" width="24" height="15" fill="rgb(240,40,28)"/><text x="38.00" y="190.50">p..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py:1749) (54 samples, 1.98%)</title><rect x="35" y="196" width="24" height="15" fill="rgb(211,5,5)"/><text x="38.00" y="206.50">p..</text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1348) (49 samples, 1.79%)</title><rect x="38" y="212" width="21" height="15" fill="rgb(247,8,24)"/><text x="41.00" y="222.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:306) (3 samples, 0.11%)</title><rect x="57" y="228" width="2" height="15" fill="rgb(206,38,54)"/><text x="60.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.11%)</title><rect x="57" y="244" width="2" height="15" fill="rgb(249,8,43)"/><text x="60.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (3 samples, 0.11%)</title><rect x="57" y="260" width="2" height="15" fill="rgb(219,56,46)"/><text x="60.00" y="270.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1097) (3 samples, 0.11%)</title><rect x="57" y="276" width="2" height="15" fill="rgb(234,71,38)"/><text x="60.00" y="286.50"></text></g><g><title>PyArray_FromAny (ctors.c:1944) (3 samples, 0.11%)</title><rect x="57" y="292" width="2" height="15" fill="rgb(250,195,8)"/><text x="60.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (3 samples, 0.11%)</title><rect x="57" y="308" width="2" height="15" fill="rgb(207,170,1)"/><text x="60.00" y="318.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:517) (6 samples, 0.22%)</title><rect x="59" y="196" width="2" height="15" fill="rgb(240,104,16)"/><text x="62.00" y="206.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (5 samples, 0.18%)</title><rect x="59" y="212" width="2" height="15" fill="rgb(245,15,17)"/><text x="62.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.18%)</title><rect x="59" y="228" width="2" height="15" fill="rgb(239,223,43)"/><text x="62.00" y="238.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (5 samples, 0.18%)</title><rect x="59" y="244" width="2" height="15" fill="rgb(249,58,31)"/><text x="62.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (4 samples, 0.15%)</title><rect x="60" y="260" width="1" height="15" fill="rgb(221,33,43)"/><text x="63.00" y="270.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (4 samples, 0.15%)</title><rect x="62" y="212" width="1" height="15" fill="rgb(209,191,51)"/><text x="65.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.15%)</title><rect x="62" y="228" width="1" height="15" fill="rgb(218,153,25)"/><text x="65.00" y="238.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (3 samples, 0.11%)</title><rect x="62" y="244" width="1" height="15" fill="rgb(243,185,14)"/><text x="65.00" y="254.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1601) (14 samples, 0.51%)</title><rect x="59" y="180" width="6" height="15" fill="rgb(241,2,38)"/><text x="62.00" y="190.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:521) (8 samples, 0.29%)</title><rect x="61" y="196" width="4" height="15" fill="rgb(218,130,14)"/><text x="64.00" y="206.50"></text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.11%)</title><rect x="63" y="212" width="2" height="15" fill="rgb(220,202,51)"/><text x="66.00" y="222.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:642) (81 samples, 2.96%)</title><rect x="32" y="164" width="35" height="15" fill="rgb(254,71,1)"/><text x="35.00" y="174.50">kn..</text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1602) (6 samples, 0.22%)</title><rect x="65" y="180" width="2" height="15" fill="rgb(205,110,32)"/><text x="68.00" y="190.50"></text></g><g><title>_check_chunk_size (sklearn/metrics/pairwise.py:1419) (5 samples, 0.18%)</title><rect x="65" y="196" width="2" height="15" fill="rgb(218,195,2)"/><text x="68.00" y="206.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/metrics/pairwise.py:1419) (4 samples, 0.15%)</title><rect x="66" y="212" width="1" height="15" fill="rgb(227,87,5)"/><text x="69.00" y="222.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:174) (104 samples, 3.80%)</title><rect x="25" y="148" width="44" height="15" fill="rgb(233,99,41)"/><text x="28.00" y="158.50">pred..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:671) (5 samples, 0.18%)</title><rect x="67" y="164" width="2" height="15" fill="rgb(247,57,43)"/><text x="70.00" y="174.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (4 samples, 0.15%)</title><rect x="68" y="180" width="1" height="15" fill="rgb(241,18,44)"/><text x="71.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.15%)</title><rect x="68" y="196" width="1" height="15" fill="rgb(226,108,13)"/><text x="71.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (3 samples, 0.11%)</title><rect x="68" y="212" width="1" height="15" fill="rgb(210,144,44)"/><text x="71.00" y="222.50"></text></g><g><title>_mean (numpy/core/_methods.py:151) (4 samples, 0.15%)</title><rect x="71" y="212" width="2" height="15" fill="rgb(240,154,37)"/><text x="74.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (3 samples, 0.11%)</title><rect x="71" y="228" width="2" height="15" fill="rgb(228,186,7)"/><text x="74.00" y="238.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:54) (131 samples, 4.79%)</title><rect x="17" y="52" width="57" height="15" fill="rgb(244,6,33)"/><text x="20.00" y="62.50">&lt;modul..</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:53) (131 samples, 4.79%)</title><rect x="17" y="68" width="57" height="15" fill="rgb(208,193,45)"/><text x="20.00" y="78.50">profil..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:37) (131 samples, 4.79%)</title><rect x="17" y="84" width="57" height="15" fill="rgb(241,56,0)"/><text x="20.00" y="94.50">setup_..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:31) (131 samples, 4.79%)</title><rect x="17" y="100" width="57" height="15" fill="rgb(233,21,32)"/><text x="20.00" y="110.50">profil..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (129 samples, 4.72%)</title><rect x="18" y="116" width="56" height="15" fill="rgb(234,95,8)"/><text x="21.00" y="126.50">time_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (129 samples, 4.72%)</title><rect x="18" y="132" width="56" height="15" fill="rgb(242,75,43)"/><text x="21.00" y="142.50">&lt;lamb..</text></g><g><title>predict (sklearn/neighbors/_regression.py:183) (10 samples, 0.37%)</title><rect x="69" y="148" width="5" height="15" fill="rgb(213,16,7)"/><text x="72.00" y="158.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (10 samples, 0.37%)</title><rect x="69" y="164" width="5" height="15" fill="rgb(239,166,3)"/><text x="72.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (10 samples, 0.37%)</title><rect x="69" y="180" width="5" height="15" fill="rgb(214,94,3)"/><text x="72.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (10 samples, 0.37%)</title><rect x="69" y="196" width="5" height="15" fill="rgb(231,26,4)"/><text x="72.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py:154) (3 samples, 0.11%)</title><rect x="73" y="212" width="1" height="15" fill="rgb(229,36,27)"/><text x="76.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.11%)</title><rect x="73" y="228" width="1" height="15" fill="rgb(254,74,8)"/><text x="76.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (6 samples, 0.22%)</title><rect x="78" y="180" width="3" height="15" fill="rgb(207,187,26)"/><text x="81.00" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (4 samples, 0.15%)</title><rect x="85" y="212" width="2" height="15" fill="rgb(252,183,39)"/><text x="88.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.11%)</title><rect x="85" y="228" width="2" height="15" fill="rgb(208,124,47)"/><text x="88.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:79) (5 samples, 0.18%)</title><rect x="87" y="212" width="2" height="15" fill="rgb(243,141,21)"/><text x="90.00" y="222.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (4 samples, 0.15%)</title><rect x="94" y="260" width="1" height="15" fill="rgb(243,166,34)"/><text x="97.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (5 samples, 0.18%)</title><rect x="95" y="260" width="3" height="15" fill="rgb(219,187,44)"/><text x="98.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (19 samples, 0.69%)</title><rect x="90" y="212" width="8" height="15" fill="rgb(254,70,41)"/><text x="93.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (11 samples, 0.40%)</title><rect x="93" y="228" width="5" height="15" fill="rgb(205,173,32)"/><text x="96.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (11 samples, 0.40%)</title><rect x="93" y="244" width="5" height="15" fill="rgb(205,8,34)"/><text x="96.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (38 samples, 1.39%)</title><rect x="98" y="212" width="16" height="15" fill="rgb(252,34,32)"/><text x="101.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:87) (4 samples, 0.15%)</title><rect x="114" y="212" width="2" height="15" fill="rgb(221,118,19)"/><text x="117.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (20 samples, 0.73%)</title><rect x="116" y="212" width="9" height="15" fill="rgb(243,189,8)"/><text x="119.00" y="222.50"></text></g><g><title>prepare_index (mapping.c:491) (3 samples, 0.11%)</title><rect x="129" y="244" width="1" height="15" fill="rgb(210,180,34)"/><text x="132.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1539) (9 samples, 0.33%)</title><rect x="127" y="228" width="4" height="15" fill="rgb(226,191,5)"/><text x="130.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (27 samples, 0.99%)</title><rect x="125" y="212" width="11" height="15" fill="rgb(207,27,12)"/><text x="128.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1584) (12 samples, 0.44%)</title><rect x="131" y="228" width="5" height="15" fill="rgb(243,35,34)"/><text x="134.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (8 samples, 0.29%)</title><rect x="133" y="244" width="3" height="15" fill="rgb(230,123,29)"/><text x="136.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (6 samples, 0.22%)</title><rect x="134" y="260" width="2" height="15" fill="rgb(250,91,43)"/><text x="137.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:392) (6 samples, 0.22%)</title><rect x="151" y="228" width="3" height="15" fill="rgb(234,171,1)"/><text x="154.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (18 samples, 0.66%)</title><rect x="154" y="228" width="7" height="15" fill="rgb(214,105,7)"/><text x="157.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:418) (6 samples, 0.22%)</title><rect x="172" y="244" width="3" height="15" fill="rgb(242,33,3)"/><text x="175.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:423) (3 samples, 0.11%)</title><rect x="175" y="244" width="1" height="15" fill="rgb(208,18,42)"/><text x="178.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:426) (7 samples, 0.26%)</title><rect x="176" y="244" width="3" height="15" fill="rgb(250,123,47)"/><text x="179.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (5 samples, 0.18%)</title><rect x="179" y="244" width="2" height="15" fill="rgb(212,189,11)"/><text x="182.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (23 samples, 0.84%)</title><rect x="181" y="244" width="10" height="15" fill="rgb(236,184,52)"/><text x="184.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (16 samples, 0.59%)</title><rect x="191" y="244" width="7" height="15" fill="rgb(217,202,36)"/><text x="194.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (15 samples, 0.55%)</title><rect x="199" y="244" width="6" height="15" fill="rgb(206,158,41)"/><text x="202.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (21 samples, 0.77%)</title><rect x="243" y="260" width="9" height="15" fill="rgb(227,106,12)"/><text x="246.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (175 samples, 6.40%)</title><rect x="252" y="260" width="75" height="15" fill="rgb(228,91,18)"/><text x="255.00" y="270.50">run (mlp..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (25 samples, 0.91%)</title><rect x="316" y="276" width="11" height="15" fill="rgb(211,141,10)"/><text x="319.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:268) (8 samples, 0.29%)</title><rect x="371" y="292" width="3" height="15" fill="rgb(252,45,46)"/><text x="374.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (22 samples, 0.80%)</title><rect x="388" y="308" width="9" height="15" fill="rgb(246,98,47)"/><text x="391.00" y="318.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (5 samples, 0.18%)</title><rect x="407" y="356" width="2" height="15" fill="rgb(252,39,14)"/><text x="410.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (5 samples, 0.18%)</title><rect x="407" y="372" width="2" height="15" fill="rgb(240,59,39)"/><text x="410.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (5 samples, 0.18%)</title><rect x="407" y="388" width="2" height="15" fill="rgb(235,201,22)"/><text x="410.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:986) (3 samples, 0.11%)</title><rect x="407" y="404" width="2" height="15" fill="rgb(236,77,16)"/><text x="410.00" y="414.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (11 samples, 0.40%)</title><rect x="404" y="340" width="5" height="15" fill="rgb(243,34,4)"/><text x="407.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:333) (4 samples, 0.15%)</title><rect x="410" y="356" width="1" height="15" fill="rgb(219,82,27)"/><text x="413.00" y="366.50"></text></g><g><title>arrays_overlap (array_assign.c:162) (3 samples, 0.11%)</title><rect x="410" y="372" width="1" height="15" fill="rgb(213,130,7)"/><text x="413.00" y="382.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c:3451) (3 samples, 0.11%)</title><rect x="412" y="388" width="1" height="15" fill="rgb(213,98,27)"/><text x="415.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:120) (7 samples, 0.26%)</title><rect x="412" y="372" width="3" height="15" fill="rgb(222,39,25)"/><text x="415.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (10 samples, 0.37%)</title><rect x="415" y="372" width="5" height="15" fill="rgb(213,202,54)"/><text x="418.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (6 samples, 0.22%)</title><rect x="420" y="372" width="3" height="15" fill="rgb(227,31,3)"/><text x="423.00" y="382.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (3 samples, 0.11%)</title><rect x="422" y="388" width="1" height="15" fill="rgb(206,93,36)"/><text x="425.00" y="398.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (7 samples, 0.26%)</title><rect x="425" y="388" width="3" height="15" fill="rgb(210,138,45)"/><text x="428.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (6 samples, 0.22%)</title><rect x="426" y="404" width="2" height="15" fill="rgb(240,148,16)"/><text x="429.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.11%)</title><rect x="427" y="420" width="1" height="15" fill="rgb(205,26,41)"/><text x="430.00" y="430.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (73 samples, 2.67%)</title><rect x="398" y="308" width="31" height="15" fill="rgb(211,42,27)"/><text x="401.00" y="318.50">_r..</text></g><g><title>array_copy (methods.c:1133) (59 samples, 2.16%)</title><rect x="404" y="324" width="25" height="15" fill="rgb(241,78,18)"/><text x="407.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c:560) (47 samples, 1.72%)</title><rect x="409" y="340" width="20" height="15" fill="rgb(231,10,26)"/><text x="412.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (41 samples, 1.50%)</title><rect x="412" y="356" width="17" height="15" fill="rgb(223,200,6)"/><text x="415.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (12 samples, 0.44%)</title><rect x="424" y="372" width="5" height="15" fill="rgb(234,189,36)"/><text x="427.00" y="382.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (4 samples, 0.15%)</title><rect x="439" y="324" width="2" height="15" fill="rgb(253,68,31)"/><text x="442.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (3 samples, 0.11%)</title><rect x="439" y="340" width="2" height="15" fill="rgb(247,7,11)"/><text x="442.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2006) (5 samples, 0.18%)</title><rect x="445" y="356" width="3" height="15" fill="rgb(215,108,38)"/><text x="448.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1665) (8 samples, 0.29%)</title><rect x="449" y="372" width="4" height="15" fill="rgb(243,62,46)"/><text x="452.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src:4482) (4 samples, 0.15%)</title><rect x="451" y="388" width="2" height="15" fill="rgb(240,212,27)"/><text x="454.00" y="398.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (7 samples, 0.26%)</title><rect x="453" y="388" width="3" height="15" fill="rgb(228,65,0)"/><text x="456.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:865) (4 samples, 0.15%)</title><rect x="454" y="404" width="2" height="15" fill="rgb(236,223,14)"/><text x="457.00" y="414.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (9 samples, 0.33%)</title><rect x="453" y="372" width="4" height="15" fill="rgb(227,49,13)"/><text x="456.00" y="382.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (23 samples, 0.84%)</title><rect x="448" y="356" width="10" height="15" fill="rgb(241,219,34)"/><text x="451.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (35 samples, 1.28%)</title><rect x="443" y="340" width="15" height="15" fill="rgb(205,22,45)"/><text x="446.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (6 samples, 0.22%)</title><rect x="460" y="340" width="2" height="15" fill="rgb(221,49,51)"/><text x="463.00" y="350.50"></text></g><g><title>_find_array_prepare (ufunc_object.c:309) (4 samples, 0.15%)</title><rect x="461" y="356" width="1" height="15" fill="rgb(220,44,32)"/><text x="464.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1616) (3 samples, 0.11%)</title><rect x="463" y="356" width="1" height="15" fill="rgb(245,148,45)"/><text x="466.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (4 samples, 0.15%)</title><rect x="464" y="388" width="2" height="15" fill="rgb(248,98,33)"/><text x="467.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (11 samples, 0.40%)</title><rect x="466" y="388" width="5" height="15" fill="rgb(248,112,7)"/><text x="469.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (10 samples, 0.37%)</title><rect x="467" y="404" width="4" height="15" fill="rgb(254,50,45)"/><text x="470.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (10 samples, 0.37%)</title><rect x="467" y="420" width="4" height="15" fill="rgb(217,118,51)"/><text x="470.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (9 samples, 0.33%)</title><rect x="467" y="436" width="4" height="15" fill="rgb(238,19,31)"/><text x="470.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (3 samples, 0.11%)</title><rect x="471" y="388" width="2" height="15" fill="rgb(217,115,44)"/><text x="474.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (21 samples, 0.77%)</title><rect x="464" y="356" width="9" height="15" fill="rgb(233,143,50)"/><text x="467.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (21 samples, 0.77%)</title><rect x="464" y="372" width="9" height="15" fill="rgb(230,163,1)"/><text x="467.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (7 samples, 0.26%)</title><rect x="473" y="356" width="3" height="15" fill="rgb(238,215,39)"/><text x="476.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1355) (3 samples, 0.11%)</title><rect x="475" y="372" width="1" height="15" fill="rgb(247,154,23)"/><text x="478.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (32 samples, 1.17%)</title><rect x="463" y="340" width="14" height="15" fill="rgb(210,109,49)"/><text x="466.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (3 samples, 0.11%)</title><rect x="477" y="340" width="1" height="15" fill="rgb(237,56,33)"/><text x="480.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (88 samples, 3.22%)</title><rect x="441" y="324" width="38" height="15" fill="rgb(210,92,3)"/><text x="444.00" y="334.50">ufu..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (119 samples, 4.35%)</title><rect x="429" y="308" width="52" height="15" fill="rgb(218,180,40)"/><text x="432.00" y="318.50">_run ..</text></g><g><title>_buffer_clear_info (buffer.c:723) (5 samples, 0.18%)</title><rect x="499" y="356" width="3" height="15" fill="rgb(213,68,47)"/><text x="502.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (10 samples, 0.37%)</title><rect x="499" y="324" width="5" height="15" fill="rgb(209,229,24)"/><text x="502.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (10 samples, 0.37%)</title><rect x="499" y="340" width="5" height="15" fill="rgb(244,229,7)"/><text x="502.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (4 samples, 0.15%)</title><rect x="502" y="356" width="2" height="15" fill="rgb(221,2,26)"/><text x="505.00" y="366.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (26 samples, 0.95%)</title><rect x="506" y="324" width="11" height="15" fill="rgb(215,27,21)"/><text x="509.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py:2042) (4 samples, 0.15%)</title><rect x="515" y="340" width="2" height="15" fill="rgb(228,222,26)"/><text x="518.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:225) (3 samples, 0.11%)</title><rect x="523" y="340" width="1" height="15" fill="rgb(211,44,34)"/><text x="526.00" y="350.50"></text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c:89) (3 samples, 0.11%)</title><rect x="525" y="356" width="2" height="15" fill="rgb(207,154,15)"/><text x="528.00" y="366.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (5 samples, 0.18%)</title><rect x="525" y="340" width="2" height="15" fill="rgb(234,153,28)"/><text x="528.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (19 samples, 0.69%)</title><rect x="533" y="356" width="8" height="15" fill="rgb(237,60,44)"/><text x="536.00" y="366.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (16 samples, 0.59%)</title><rect x="541" y="356" width="7" height="15" fill="rgb(241,9,31)"/><text x="544.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (12 samples, 0.44%)</title><rect x="577" y="388" width="5" height="15" fill="rgb(216,159,4)"/><text x="580.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (53 samples, 1.94%)</title><rect x="567" y="372" width="23" height="15" fill="rgb(221,155,36)"/><text x="570.00" y="382.50">_..</text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (17 samples, 0.62%)</title><rect x="582" y="388" width="8" height="15" fill="rgb(212,187,45)"/><text x="585.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (13 samples, 0.48%)</title><rect x="590" y="372" width="5" height="15" fill="rgb(210,103,37)"/><text x="593.00" y="382.50"></text></g><g><title>0x7f4d3aa83e7a (libc-2.29.so) (3 samples, 0.11%)</title><rect x="607" y="452" width="1" height="15" fill="rgb(205,78,15)"/><text x="610.00" y="462.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (18 samples, 0.66%)</title><rect x="602" y="420" width="8" height="15" fill="rgb(242,30,54)"/><text x="605.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (18 samples, 0.66%)</title><rect x="602" y="436" width="8" height="15" fill="rgb(205,210,48)"/><text x="605.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (4 samples, 0.15%)</title><rect x="608" y="452" width="2" height="15" fill="rgb(222,143,19)"/><text x="611.00" y="462.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (22 samples, 0.80%)</title><rect x="601" y="388" width="10" height="15" fill="rgb(210,9,3)"/><text x="604.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (22 samples, 0.80%)</title><rect x="601" y="404" width="10" height="15" fill="rgb(241,225,41)"/><text x="604.00" y="414.50"></text></g><g><title>0x7f4d3aa83730 (libc-2.29.so) (3 samples, 0.11%)</title><rect x="622" y="420" width="1" height="15" fill="rgb(211,23,48)"/><text x="625.00" y="430.50"></text></g><g><title>unicode_eq (python3.7) (4 samples, 0.15%)</title><rect x="624" y="420" width="2" height="15" fill="rgb(224,199,9)"/><text x="627.00" y="430.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (34 samples, 1.24%)</title><rect x="612" y="404" width="14" height="15" fill="rgb(209,192,51)"/><text x="615.00" y="414.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4519) (3 samples, 0.11%)</title><rect x="626" y="404" width="2" height="15" fill="rgb(220,147,11)"/><text x="629.00" y="414.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4564) (4 samples, 0.15%)</title><rect x="629" y="404" width="2" height="15" fill="rgb(239,131,15)"/><text x="632.00" y="414.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (4 samples, 0.15%)</title><rect x="629" y="420" width="2" height="15" fill="rgb(223,30,12)"/><text x="632.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (4 samples, 0.15%)</title><rect x="629" y="436" width="2" height="15" fill="rgb(208,87,13)"/><text x="632.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:864) (3 samples, 0.11%)</title><rect x="629" y="452" width="2" height="15" fill="rgb(238,193,28)"/><text x="632.00" y="462.50"></text></g><g><title>_get_identity (ufunc_object.c:2464) (3 samples, 0.11%)</title><rect x="631" y="436" width="1" height="15" fill="rgb(241,202,53)"/><text x="634.00" y="446.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3635) (4 samples, 0.15%)</title><rect x="631" y="420" width="2" height="15" fill="rgb(205,114,41)"/><text x="634.00" y="430.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2076) (3 samples, 0.11%)</title><rect x="635" y="468" width="2" height="15" fill="rgb(226,105,5)"/><text x="638.00" y="478.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2194) (3 samples, 0.11%)</title><rect x="638" y="468" width="1" height="15" fill="rgb(234,193,32)"/><text x="641.00" y="478.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2200) (4 samples, 0.15%)</title><rect x="639" y="468" width="2" height="15" fill="rgb(240,150,4)"/><text x="642.00" y="478.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (16 samples, 0.59%)</title><rect x="634" y="436" width="7" height="15" fill="rgb(212,15,34)"/><text x="637.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (14 samples, 0.51%)</title><rect x="635" y="452" width="6" height="15" fill="rgb(239,14,38)"/><text x="638.00" y="462.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (20 samples, 0.73%)</title><rect x="633" y="420" width="9" height="15" fill="rgb(220,68,40)"/><text x="636.00" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (9 samples, 0.33%)</title><rect x="644" y="468" width="3" height="15" fill="rgb(225,95,19)"/><text x="647.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (7 samples, 0.26%)</title><rect x="644" y="484" width="3" height="15" fill="rgb(246,47,31)"/><text x="647.00" y="494.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.11%)</title><rect x="646" y="500" width="1" height="15" fill="rgb(247,130,19)"/><text x="649.00" y="510.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (10 samples, 0.37%)</title><rect x="649" y="500" width="4" height="15" fill="rgb(242,166,2)"/><text x="652.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (8 samples, 0.29%)</title><rect x="650" y="516" width="3" height="15" fill="rgb(216,34,27)"/><text x="653.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (8 samples, 0.29%)</title><rect x="650" y="532" width="3" height="15" fill="rgb(246,100,20)"/><text x="653.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.26%)</title><rect x="650" y="548" width="3" height="15" fill="rgb(211,36,54)"/><text x="653.00" y="558.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (6 samples, 0.22%)</title><rect x="654" y="532" width="2" height="15" fill="rgb(226,161,0)"/><text x="657.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (6 samples, 0.22%)</title><rect x="654" y="548" width="2" height="15" fill="rgb(226,155,36)"/><text x="657.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.22%)</title><rect x="654" y="564" width="2" height="15" fill="rgb(251,25,17)"/><text x="657.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (10 samples, 0.37%)</title><rect x="654" y="500" width="4" height="15" fill="rgb(225,39,4)"/><text x="657.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (10 samples, 0.37%)</title><rect x="654" y="516" width="4" height="15" fill="rgb(252,201,28)"/><text x="657.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (4 samples, 0.15%)</title><rect x="656" y="532" width="2" height="15" fill="rgb(247,72,42)"/><text x="659.00" y="542.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (36 samples, 1.32%)</title><rect x="643" y="436" width="16" height="15" fill="rgb(237,183,50)"/><text x="646.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (36 samples, 1.32%)</title><rect x="643" y="452" width="16" height="15" fill="rgb(224,133,18)"/><text x="646.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (25 samples, 0.91%)</title><rect x="648" y="468" width="11" height="15" fill="rgb(243,96,7)"/><text x="651.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (24 samples, 0.88%)</title><rect x="648" y="484" width="11" height="15" fill="rgb(253,71,13)"/><text x="651.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:415) (4 samples, 0.15%)</title><rect x="661" y="452" width="2" height="15" fill="rgb(214,24,30)"/><text x="664.00" y="462.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c:3839) (4 samples, 0.15%)</title><rect x="665" y="500" width="1" height="15" fill="rgb(243,156,29)"/><text x="668.00" y="510.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c:3869) (4 samples, 0.15%)</title><rect x="666" y="500" width="2" height="15" fill="rgb(206,143,35)"/><text x="669.00" y="510.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.11%)</title><rect x="667" y="516" width="1" height="15" fill="rgb(210,160,33)"/><text x="670.00" y="526.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:57) (9 samples, 0.33%)</title><rect x="665" y="484" width="4" height="15" fill="rgb(221,96,8)"/><text x="668.00" y="494.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (14 samples, 0.51%)</title><rect x="669" y="484" width="6" height="15" fill="rgb(252,6,41)"/><text x="672.00" y="494.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c:741) (6 samples, 0.22%)</title><rect x="672" y="500" width="3" height="15" fill="rgb(217,189,51)"/><text x="675.00" y="510.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src:955) (4 samples, 0.15%)</title><rect x="673" y="516" width="2" height="15" fill="rgb(234,211,7)"/><text x="676.00" y="526.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:83) (3 samples, 0.11%)</title><rect x="675" y="484" width="2" height="15" fill="rgb(243,39,32)"/><text x="678.00" y="494.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (33 samples, 1.21%)</title><rect x="664" y="468" width="14" height="15" fill="rgb(247,141,32)"/><text x="667.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:87) (3 samples, 0.11%)</title><rect x="677" y="484" width="1" height="15" fill="rgb(237,147,53)"/><text x="680.00" y="494.50"></text></g><g><title>_aligned_cast_longlong_to_float (lowlevel_strided_loops.c.src:816) (3 samples, 0.11%)</title><rect x="677" y="500" width="1" height="15" fill="rgb(209,216,54)"/><text x="680.00" y="510.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (47 samples, 1.72%)</title><rect x="659" y="436" width="20" height="15" fill="rgb(232,30,29)"/><text x="662.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (38 samples, 1.39%)</title><rect x="663" y="452" width="16" height="15" fill="rgb(234,32,52)"/><text x="666.00" y="462.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c:1106) (3 samples, 0.11%)</title><rect x="683" y="484" width="2" height="15" fill="rgb(212,120,28)"/><text x="686.00" y="494.50"></text></g><g><title>PyArray_AdaptFlexibleDType (convert_datatype.c:148) (3 samples, 0.11%)</title><rect x="683" y="500" width="2" height="15" fill="rgb(213,96,50)"/><text x="686.00" y="510.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (6 samples, 0.22%)</title><rect x="683" y="468" width="2" height="15" fill="rgb(235,28,43)"/><text x="686.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (11 samples, 0.40%)</title><rect x="681" y="452" width="5" height="15" fill="rgb(242,166,40)"/><text x="684.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (8 samples, 0.29%)</title><rect x="687" y="452" width="3" height="15" fill="rgb(217,132,0)"/><text x="690.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (8 samples, 0.29%)</title><rect x="693" y="452" width="3" height="15" fill="rgb(249,73,38)"/><text x="696.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (3 samples, 0.11%)</title><rect x="696" y="452" width="1" height="15" fill="rgb(248,119,6)"/><text x="699.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (3 samples, 0.11%)</title><rect x="697" y="452" width="2" height="15" fill="rgb(239,80,46)"/><text x="700.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (49 samples, 1.79%)</title><rect x="680" y="436" width="21" height="15" fill="rgb(221,12,7)"/><text x="683.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (5 samples, 0.18%)</title><rect x="699" y="452" width="2" height="15" fill="rgb(210,43,23)"/><text x="702.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:550) (5 samples, 0.18%)</title><rect x="701" y="436" width="2" height="15" fill="rgb(209,39,50)"/><text x="704.00" y="446.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (4 samples, 0.15%)</title><rect x="701" y="452" width="2" height="15" fill="rgb(205,83,33)"/><text x="704.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1741) (4 samples, 0.15%)</title><rect x="707" y="468" width="2" height="15" fill="rgb(242,136,25)"/><text x="710.00" y="478.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c:1874) (3 samples, 0.11%)</title><rect x="711" y="484" width="2" height="15" fill="rgb(250,147,29)"/><text x="714.00" y="494.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (19 samples, 0.69%)</title><rect x="707" y="452" width="8" height="15" fill="rgb(206,162,46)"/><text x="710.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:255) (12 samples, 0.44%)</title><rect x="710" y="468" width="5" height="15" fill="rgb(224,48,12)"/><text x="713.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (26 samples, 0.95%)</title><rect x="704" y="436" width="12" height="15" fill="rgb(243,149,41)"/><text x="707.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:583) (3 samples, 0.11%)</title><rect x="716" y="436" width="1" height="15" fill="rgb(231,205,53)"/><text x="719.00" y="446.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (7 samples, 0.26%)</title><rect x="717" y="452" width="3" height="15" fill="rgb(237,159,16)"/><text x="720.00" y="462.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.11%)</title><rect x="719" y="468" width="1" height="15" fill="rgb(238,90,35)"/><text x="722.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (11 samples, 0.40%)</title><rect x="717" y="436" width="5" height="15" fill="rgb(220,16,13)"/><text x="720.00" y="446.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (3 samples, 0.11%)</title><rect x="720" y="452" width="2" height="15" fill="rgb(245,34,3)"/><text x="723.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (213 samples, 7.79%)</title><rect x="631" y="404" width="92" height="15" fill="rgb(235,192,22)"/><text x="634.00" y="414.50">PyUFunc_Ge..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (187 samples, 6.84%)</title><rect x="642" y="420" width="81" height="15" fill="rgb(215,96,8)"/><text x="645.00" y="430.50">PyUFunc_R..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (459 samples, 16.79%)</title><rect x="527" y="340" width="198" height="15" fill="rgb(248,50,21)"/><text x="530.00" y="350.50">array_implement_array_fun..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (411 samples, 15.03%)</title><rect x="548" y="356" width="177" height="15" fill="rgb(230,82,18)"/><text x="551.00" y="366.50">sum (numpy/core/fromnum..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (301 samples, 11.01%)</title><rect x="595" y="372" width="130" height="15" fill="rgb(211,148,16)"/><text x="598.00" y="382.50">_wrapreduction (..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (265 samples, 9.69%)</title><rect x="611" y="388" width="114" height="15" fill="rgb(209,206,29)"/><text x="614.00" y="398.50">ufunc_reduce (..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4694) (3 samples, 0.11%)</title><rect x="724" y="404" width="1" height="15" fill="rgb(246,205,19)"/><text x="727.00" y="414.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (814 samples, 29.77%)</title><rect x="374" y="292" width="352" height="15" fill="rgb(252,209,7)"/><text x="377.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py:269)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (567 samples, 20.74%)</title><rect x="481" y="308" width="245" height="15" fill="rgb(233,134,22)"/><text x="484.00" y="318.50">_run (mlprodict/onnxrt/ops_cpu/o..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (482 samples, 17.63%)</title><rect x="517" y="324" width="209" height="15" fill="rgb(220,22,22)"/><text x="520.00" y="334.50">sum (&lt;__array_function__ in..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (852 samples, 31.16%)</title><rect x="359" y="276" width="368" height="15" fill="rgb(252,33,8)"/><text x="362.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py:348)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:274) (3 samples, 0.11%)</title><rect x="726" y="292" width="1" height="15" fill="rgb(247,203,3)"/><text x="729.00" y="302.50"></text></g><g><title>arraydescr_richcompare (descriptor.c:3222) (4 samples, 0.15%)</title><rect x="738" y="292" width="2" height="15" fill="rgb(222,184,54)"/><text x="741.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (32 samples, 1.17%)</title><rect x="727" y="276" width="14" height="15" fill="rgb(240,50,44)"/><text x="730.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:353) (3 samples, 0.11%)</title><rect x="741" y="276" width="1" height="15" fill="rgb(217,68,10)"/><text x="744.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (11 samples, 0.40%)</title><rect x="745" y="292" width="4" height="15" fill="rgb(253,162,23)"/><text x="748.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:519) (9 samples, 0.33%)</title><rect x="754" y="308" width="3" height="15" fill="rgb(211,42,53)"/><text x="757.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:527) (8 samples, 0.29%)</title><rect x="757" y="308" width="4" height="15" fill="rgb(216,73,16)"/><text x="760.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (7 samples, 0.26%)</title><rect x="767" y="324" width="3" height="15" fill="rgb(250,135,54)"/><text x="770.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (6 samples, 0.22%)</title><rect x="767" y="340" width="3" height="15" fill="rgb(225,189,25)"/><text x="770.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (3 samples, 0.11%)</title><rect x="768" y="356" width="2" height="15" fill="rgb(237,18,49)"/><text x="771.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3105) (3 samples, 0.11%)</title><rect x="770" y="340" width="1" height="15" fill="rgb(214,66,14)"/><text x="773.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (4 samples, 0.15%)</title><rect x="771" y="340" width="2" height="15" fill="rgb(231,140,42)"/><text x="774.00" y="350.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src:4417) (4 samples, 0.15%)</title><rect x="775" y="420" width="1" height="15" fill="rgb(228,75,17)"/><text x="778.00" y="430.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1905) (6 samples, 0.22%)</title><rect x="775" y="388" width="2" height="15" fill="rgb(228,188,4)"/><text x="778.00" y="398.50"></text></g><g><title>promote_types (convert_datatype.c:1043) (6 samples, 0.22%)</title><rect x="775" y="404" width="2" height="15" fill="rgb(219,12,49)"/><text x="778.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (11 samples, 0.40%)</title><rect x="773" y="372" width="5" height="15" fill="rgb(232,66,32)"/><text x="776.00" y="382.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:563) (4 samples, 0.15%)</title><rect x="778" y="372" width="1" height="15" fill="rgb(251,221,20)"/><text x="781.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (16 samples, 0.59%)</title><rect x="773" y="340" width="7" height="15" fill="rgb(250,102,1)"/><text x="776.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (16 samples, 0.59%)</title><rect x="773" y="356" width="7" height="15" fill="rgb(222,10,31)"/><text x="776.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3196) (3 samples, 0.11%)</title><rect x="780" y="340" width="1" height="15" fill="rgb(236,198,21)"/><text x="783.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3215) (4 samples, 0.15%)</title><rect x="781" y="340" width="2" height="15" fill="rgb(252,163,53)"/><text x="784.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (5 samples, 0.18%)</title><rect x="784" y="340" width="2" height="15" fill="rgb(226,81,39)"/><text x="787.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (5 samples, 0.18%)</title><rect x="789" y="388" width="2" height="15" fill="rgb(207,78,14)"/><text x="792.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.15%)</title><rect x="789" y="404" width="2" height="15" fill="rgb(236,37,25)"/><text x="792.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (4 samples, 0.15%)</title><rect x="792" y="388" width="1" height="15" fill="rgb(230,146,49)"/><text x="795.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (11 samples, 0.40%)</title><rect x="794" y="388" width="4" height="15" fill="rgb(238,33,37)"/><text x="797.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.11%)</title><rect x="805" y="452" width="2" height="15" fill="rgb(215,183,38)"/><text x="808.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (3 samples, 0.11%)</title><rect x="808" y="452" width="1" height="15" fill="rgb(219,193,28)"/><text x="811.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (14 samples, 0.51%)</title><rect x="804" y="404" width="6" height="15" fill="rgb(224,179,37)"/><text x="807.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (12 samples, 0.44%)</title><rect x="805" y="420" width="5" height="15" fill="rgb(230,208,19)"/><text x="808.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (11 samples, 0.40%)</title><rect x="805" y="436" width="5" height="15" fill="rgb(232,128,39)"/><text x="808.00" y="446.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2858) (3 samples, 0.11%)</title><rect x="810" y="404" width="1" height="15" fill="rgb(210,46,13)"/><text x="813.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (30 samples, 1.10%)</title><rect x="800" y="388" width="13" height="15" fill="rgb(232,188,17)"/><text x="803.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (63 samples, 2.30%)</title><rect x="788" y="372" width="27" height="15" fill="rgb(242,176,2)"/><text x="791.00" y="382.50">i..</text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:318) (3 samples, 0.11%)</title><rect x="817" y="388" width="1" height="15" fill="rgb(210,58,14)"/><text x="820.00" y="398.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:319) (3 samples, 0.11%)</title><rect x="818" y="388" width="2" height="15" fill="rgb(214,95,42)"/><text x="821.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (9 samples, 0.33%)</title><rect x="816" y="372" width="4" height="15" fill="rgb(231,140,45)"/><text x="819.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c:1574) (3 samples, 0.11%)</title><rect x="820" y="372" width="2" height="15" fill="rgb(229,28,43)"/><text x="823.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (7 samples, 0.26%)</title><rect x="822" y="372" width="3" height="15" fill="rgb(205,52,18)"/><text x="825.00" y="382.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:309) (3 samples, 0.11%)</title><rect x="824" y="388" width="1" height="15" fill="rgb(245,66,2)"/><text x="827.00" y="398.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (3 samples, 0.11%)</title><rect x="826" y="388" width="1" height="15" fill="rgb(222,93,6)"/><text x="829.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1586) (9 samples, 0.33%)</title><rect x="825" y="372" width="4" height="15" fill="rgb(225,216,9)"/><text x="828.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (4 samples, 0.15%)</title><rect x="827" y="388" width="2" height="15" fill="rgb(254,24,0)"/><text x="830.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (98 samples, 3.58%)</title><rect x="787" y="356" width="43" height="15" fill="rgb(251,46,28)"/><text x="790.00" y="366.50">exec..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (107 samples, 3.91%)</title><rect x="786" y="340" width="46" height="15" fill="rgb(229,83,34)"/><text x="789.00" y="350.50">PyUF..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (5 samples, 0.18%)</title><rect x="830" y="356" width="2" height="15" fill="rgb(227,41,54)"/><text x="833.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (5 samples, 0.18%)</title><rect x="830" y="372" width="2" height="15" fill="rgb(205,221,13)"/><text x="833.00" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (3 samples, 0.11%)</title><rect x="831" y="388" width="1" height="15" fill="rgb(222,122,45)"/><text x="834.00" y="398.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (148 samples, 5.41%)</title><rect x="770" y="324" width="63" height="15" fill="rgb(210,156,22)"/><text x="773.00" y="334.50">ufunc_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4751) (3 samples, 0.11%)</title><rect x="833" y="324" width="2" height="15" fill="rgb(214,149,6)"/><text x="836.00" y="334.50"></text></g><g><title>_find_array_wrap (ufunc_object.c:424) (3 samples, 0.11%)</title><rect x="835" y="340" width="1" height="15" fill="rgb(215,18,48)"/><text x="838.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4754) (5 samples, 0.18%)</title><rect x="835" y="324" width="2" height="15" fill="rgb(241,51,36)"/><text x="838.00" y="334.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (206 samples, 7.53%)</title><rect x="749" y="292" width="89" height="15" fill="rgb(207,163,15)"/><text x="752.00" y="302.50">run (mlpro..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (179 samples, 6.55%)</title><rect x="761" y="308" width="77" height="15" fill="rgb(251,226,50)"/><text x="764.00" y="318.50">_run (ml..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (225 samples, 8.23%)</title><rect x="742" y="276" width="97" height="15" fill="rgb(210,34,23)"/><text x="745.00" y="286.50">run (mlprod..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,192 samples, 43.60%)</title><rect x="327" y="260" width="515" height="15" fill="rgb(229,170,26)"/><text x="330.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (6 samples, 0.22%)</title><rect x="839" y="276" width="3" height="15" fill="rgb(227,85,29)"/><text x="842.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (48 samples, 1.76%)</title><rect x="842" y="260" width="20" height="15" fill="rgb(240,57,26)"/><text x="845.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (41 samples, 1.50%)</title><rect x="862" y="260" width="18" height="15" fill="rgb(238,119,6)"/><text x="865.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (12 samples, 0.44%)</title><rect x="880" y="260" width="5" height="15" fill="rgb(215,97,44)"/><text x="883.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (105 samples, 3.84%)</title><rect x="885" y="260" width="46" height="15" fill="rgb(214,176,50)"/><text x="888.00" y="270.50">run ..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,704 samples, 62.33%)</title><rect x="205" y="244" width="736" height="15" fill="rgb(218,111,38)"/><text x="208.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (24 samples, 0.88%)</title><rect x="931" y="260" width="10" height="15" fill="rgb(233,151,1)"/><text x="934.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:534) (4 samples, 0.15%)</title><rect x="941" y="244" width="2" height="15" fill="rgb(218,14,43)"/><text x="944.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (48 samples, 1.76%)</title><rect x="943" y="244" width="20" height="15" fill="rgb(219,79,12)"/><text x="946.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (23 samples, 0.84%)</title><rect x="953" y="260" width="10" height="15" fill="rgb(241,171,24)"/><text x="956.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:546) (3 samples, 0.11%)</title><rect x="963" y="244" width="2" height="15" fill="rgb(236,48,53)"/><text x="966.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (6 samples, 0.22%)</title><rect x="965" y="276" width="3" height="15" fill="rgb(244,76,39)"/><text x="968.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (10 samples, 0.37%)</title><rect x="965" y="244" width="4" height="15" fill="rgb(254,26,23)"/><text x="968.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (9 samples, 0.33%)</title><rect x="965" y="260" width="4" height="15" fill="rgb(223,163,28)"/><text x="968.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (3 samples, 0.11%)</title><rect x="968" y="276" width="1" height="15" fill="rgb(217,228,4)"/><text x="971.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (1,931 samples, 70.63%)</title><rect x="136" y="212" width="834" height="15" fill="rgb(215,46,10)"/><text x="139.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,871 samples, 68.43%)</title><rect x="162" y="228" width="808" height="15" fill="rgb(243,83,33)"/><text x="165.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (23 samples, 0.84%)</title><rect x="970" y="212" width="10" height="15" fill="rgb(235,39,48)"/><text x="973.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (9 samples, 0.33%)</title><rect x="976" y="228" width="4" height="15" fill="rgb(230,156,41)"/><text x="979.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (17 samples, 0.62%)</title><rect x="980" y="212" width="7" height="15" fill="rgb(209,38,40)"/><text x="983.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (14 samples, 0.51%)</title><rect x="1002" y="228" width="6" height="15" fill="rgb(207,151,54)"/><text x="1005.00" y="238.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (8 samples, 0.29%)</title><rect x="1017" y="260" width="3" height="15" fill="rgb(241,2,19)"/><text x="1020.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (21 samples, 0.77%)</title><rect x="1026" y="276" width="9" height="15" fill="rgb(246,216,21)"/><text x="1029.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (36 samples, 1.32%)</title><rect x="1020" y="260" width="16" height="15" fill="rgb(227,168,45)"/><text x="1023.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:576) (7 samples, 0.26%)</title><rect x="1036" y="260" width="3" height="15" fill="rgb(250,166,49)"/><text x="1039.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (22 samples, 0.80%)</title><rect x="1039" y="260" width="9" height="15" fill="rgb(250,192,29)"/><text x="1042.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:583) (4 samples, 0.15%)</title><rect x="1048" y="260" width="2" height="15" fill="rgb(219,215,10)"/><text x="1051.00" y="270.50"></text></g><g><title>array_reshape (methods.c:186) (7 samples, 0.26%)</title><rect x="1064" y="276" width="3" height="15" fill="rgb(207,77,22)"/><text x="1067.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:53) (5 samples, 0.18%)</title><rect x="1065" y="292" width="2" height="15" fill="rgb(219,102,43)"/><text x="1068.00" y="302.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (4 samples, 0.15%)</title><rect x="1073" y="340" width="2" height="15" fill="rgb(214,45,5)"/><text x="1076.00" y="350.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c:958) (6 samples, 0.22%)</title><rect x="1073" y="308" width="3" height="15" fill="rgb(239,126,31)"/><text x="1076.00" y="318.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c:909) (6 samples, 0.22%)</title><rect x="1073" y="324" width="3" height="15" fill="rgb(220,179,5)"/><text x="1076.00" y="334.50"></text></g><g><title>array_reshape (methods.c:195) (21 samples, 0.77%)</title><rect x="1067" y="276" width="9" height="15" fill="rgb(241,96,16)"/><text x="1070.00" y="286.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (8 samples, 0.29%)</title><rect x="1073" y="292" width="3" height="15" fill="rgb(248,42,12)"/><text x="1076.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1052) (3 samples, 0.11%)</title><rect x="1078" y="324" width="1" height="15" fill="rgb(243,70,9)"/><text x="1081.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (217 samples, 7.94%)</title><rect x="987" y="212" width="94" height="15" fill="rgb(218,53,7)"/><text x="990.00" y="222.50">_run (mlpro..</text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (167 samples, 6.11%)</title><rect x="1009" y="228" width="72" height="15" fill="rgb(218,218,30)"/><text x="1012.00" y="238.50">expand_d..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (155 samples, 5.67%)</title><rect x="1014" y="244" width="67" height="15" fill="rgb(249,2,4)"/><text x="1017.00" y="254.50">array_i..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (71 samples, 2.60%)</title><rect x="1050" y="260" width="31" height="15" fill="rgb(254,37,51)"/><text x="1053.00" y="270.50">ex..</text></g><g><title>array_reshape (methods.c:210) (11 samples, 0.40%)</title><rect x="1076" y="276" width="5" height="15" fill="rgb(216,174,45)"/><text x="1079.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (11 samples, 0.40%)</title><rect x="1076" y="292" width="5" height="15" fill="rgb(218,207,4)"/><text x="1079.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (9 samples, 0.33%)</title><rect x="1077" y="308" width="4" height="15" fill="rgb(235,73,3)"/><text x="1080.00" y="318.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (12 samples, 0.44%)</title><rect x="1082" y="308" width="6" height="15" fill="rgb(216,14,1)"/><text x="1085.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (6 samples, 0.22%)</title><rect x="1085" y="324" width="3" height="15" fill="rgb(241,39,45)"/><text x="1088.00" y="334.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:123) (5 samples, 0.18%)</title><rect x="1088" y="308" width="2" height="15" fill="rgb(226,216,17)"/><text x="1091.00" y="318.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (19 samples, 0.69%)</title><rect x="1082" y="260" width="8" height="15" fill="rgb(221,65,54)"/><text x="1085.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (19 samples, 0.69%)</title><rect x="1082" y="276" width="8" height="15" fill="rgb(229,96,29)"/><text x="1085.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (19 samples, 0.69%)</title><rect x="1082" y="292" width="8" height="15" fill="rgb(249,98,51)"/><text x="1085.00" y="302.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (3 samples, 0.11%)</title><rect x="1093" y="388" width="1" height="15" fill="rgb(217,102,7)"/><text x="1096.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (32 samples, 1.17%)</title><rect x="1081" y="212" width="14" height="15" fill="rgb(206,58,22)"/><text x="1084.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (31 samples, 1.13%)</title><rect x="1081" y="228" width="14" height="15" fill="rgb(243,64,23)"/><text x="1084.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (30 samples, 1.10%)</title><rect x="1082" y="244" width="13" height="15" fill="rgb(244,196,44)"/><text x="1085.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (10 samples, 0.37%)</title><rect x="1090" y="260" width="5" height="15" fill="rgb(245,142,36)"/><text x="1093.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (10 samples, 0.37%)</title><rect x="1090" y="276" width="5" height="15" fill="rgb(209,198,14)"/><text x="1093.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (9 samples, 0.33%)</title><rect x="1091" y="292" width="4" height="15" fill="rgb(235,56,54)"/><text x="1094.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (9 samples, 0.33%)</title><rect x="1091" y="308" width="4" height="15" fill="rgb(236,28,13)"/><text x="1094.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (8 samples, 0.29%)</title><rect x="1091" y="324" width="4" height="15" fill="rgb(244,193,48)"/><text x="1094.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (7 samples, 0.26%)</title><rect x="1092" y="340" width="3" height="15" fill="rgb(229,30,34)"/><text x="1095.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (7 samples, 0.26%)</title><rect x="1092" y="356" width="3" height="15" fill="rgb(212,171,2)"/><text x="1095.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (4 samples, 0.15%)</title><rect x="1093" y="372" width="2" height="15" fill="rgb(222,219,52)"/><text x="1096.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_shape.py:18) (4 samples, 0.15%)</title><rect x="1095" y="212" width="1" height="15" fill="rgb(219,56,32)"/><text x="1098.00" y="222.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (5 samples, 0.18%)</title><rect x="1098" y="244" width="2" height="15" fill="rgb(211,104,50)"/><text x="1101.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (4 samples, 0.15%)</title><rect x="1098" y="260" width="2" height="15" fill="rgb(243,39,26)"/><text x="1101.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.15%)</title><rect x="1098" y="276" width="2" height="15" fill="rgb(244,191,37)"/><text x="1101.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (4 samples, 0.15%)</title><rect x="1098" y="292" width="2" height="15" fill="rgb(218,20,39)"/><text x="1101.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.11%)</title><rect x="1098" y="308" width="2" height="15" fill="rgb(230,175,19)"/><text x="1101.00" y="318.50"></text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.11%)</title><rect x="1101" y="260" width="1" height="15" fill="rgb(213,9,21)"/><text x="1104.00" y="270.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (5 samples, 0.18%)</title><rect x="1101" y="244" width="2" height="15" fill="rgb(208,127,15)"/><text x="1104.00" y="254.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (17 samples, 0.62%)</title><rect x="1097" y="228" width="7" height="15" fill="rgb(241,198,37)"/><text x="1100.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:39) (3 samples, 0.11%)</title><rect x="1103" y="244" width="1" height="15" fill="rgb(240,47,33)"/><text x="1106.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (20 samples, 0.73%)</title><rect x="1096" y="212" width="9" height="15" fill="rgb(246,86,4)"/><text x="1099.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (5 samples, 0.18%)</title><rect x="1106" y="228" width="2" height="15" fill="rgb(247,21,9)"/><text x="1109.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (4 samples, 0.15%)</title><rect x="1107" y="244" width="1" height="15" fill="rgb(249,101,43)"/><text x="1110.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (3 samples, 0.11%)</title><rect x="1107" y="260" width="1" height="15" fill="rgb(237,190,46)"/><text x="1110.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (2,378 samples, 86.98%)</title><rect x="83" y="196" width="1026" height="15" fill="rgb(207,101,17)"/><text x="86.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>array_dealloc (arrayobject.c:520) (8 samples, 0.29%)</title><rect x="1106" y="212" width="3" height="15" fill="rgb(211,33,27)"/><text x="1109.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (8 samples, 0.29%)</title><rect x="1109" y="196" width="4" height="15" fill="rgb(229,33,48)"/><text x="1112.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py:24) (8 samples, 0.29%)</title><rect x="1109" y="212" width="4" height="15" fill="rgb(218,200,3)"/><text x="1112.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:6) (5 samples, 0.18%)</title><rect x="1111" y="228" width="2" height="15" fill="rgb(246,137,46)"/><text x="1114.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.18%)</title><rect x="1111" y="244" width="2" height="15" fill="rgb(210,9,41)"/><text x="1114.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py:2911) (4 samples, 0.15%)</title><rect x="1111" y="260" width="2" height="15" fill="rgb(208,41,20)"/><text x="1114.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (3 samples, 0.11%)</title><rect x="1111" y="276" width="2" height="15" fill="rgb(213,33,27)"/><text x="1114.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (3 samples, 0.11%)</title><rect x="1111" y="292" width="2" height="15" fill="rgb(238,102,43)"/><text x="1114.00" y="302.50"></text></g><g><title>_mean (numpy/core/_methods.py:151) (3 samples, 0.11%)</title><rect x="1114" y="292" width="1" height="15" fill="rgb(244,79,9)"/><text x="1117.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py:29) (9 samples, 0.33%)</title><rect x="1113" y="228" width="4" height="15" fill="rgb(238,90,19)"/><text x="1116.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (9 samples, 0.33%)</title><rect x="1113" y="244" width="4" height="15" fill="rgb(240,181,13)"/><text x="1116.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (9 samples, 0.33%)</title><rect x="1113" y="260" width="4" height="15" fill="rgb(239,156,12)"/><text x="1116.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (9 samples, 0.33%)</title><rect x="1113" y="276" width="4" height="15" fill="rgb(232,46,32)"/><text x="1116.00" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py:154) (5 samples, 0.18%)</title><rect x="1115" y="292" width="2" height="15" fill="rgb(252,199,11)"/><text x="1118.00" y="302.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.18%)</title><rect x="1115" y="308" width="2" height="15" fill="rgb(243,126,34)"/><text x="1118.00" y="318.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (2,408 samples, 88.08%)</title><rect x="81" y="180" width="1039" height="15" fill="rgb(215,170,25)"/><text x="84.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (17 samples, 0.62%)</title><rect x="1113" y="196" width="7" height="15" fill="rgb(217,173,20)"/><text x="1116.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (17 samples, 0.62%)</title><rect x="1113" y="212" width="7" height="15" fill="rgb(218,87,6)"/><text x="1116.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_transpose.py:25) (3 samples, 0.11%)</title><rect x="1119" y="228" width="1" height="15" fill="rgb(209,172,50)"/><text x="1122.00" y="238.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:61) (2,429 samples, 88.84%)</title><rect x="74" y="52" width="1048" height="15" fill="rgb(218,182,33)"/><text x="77.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:61)</text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:60) (2,429 samples, 88.84%)</title><rect x="74" y="68" width="1048" height="15" fill="rgb(222,15,46)"/><text x="77.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:60)</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:37) (2,428 samples, 88.81%)</title><rect x="74" y="84" width="1048" height="15" fill="rgb(210,43,18)"/><text x="77.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:37)</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:31) (2,428 samples, 88.81%)</title><rect x="74" y="100" width="1048" height="15" fill="rgb(205,204,5)"/><text x="77.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (2,427 samples, 88.77%)</title><rect x="75" y="116" width="1047" height="15" fill="rgb(245,180,31)"/><text x="78.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (2,427 samples, 88.77%)</title><rect x="75" y="132" width="1047" height="15" fill="rgb(243,141,13)"/><text x="78.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,426 samples, 88.73%)</title><rect x="75" y="148" width="1047" height="15" fill="rgb(244,142,34)"/><text x="78.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (2,423 samples, 88.62%)</title><rect x="76" y="164" width="1046" height="15" fill="rgb(239,84,41)"/><text x="79.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (4 samples, 0.15%)</title><rect x="1120" y="180" width="2" height="15" fill="rgb(234,176,35)"/><text x="1123.00" y="190.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.22%)</title><rect x="1128" y="388" width="2" height="15" fill="rgb(206,216,35)"/><text x="1131.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.11%)</title><rect x="1129" y="404" width="1" height="15" fill="rgb(228,229,49)"/><text x="1132.00" y="414.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="1130" y="388" width="2" height="15" fill="rgb(213,83,17)"/><text x="1133.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="1130" y="404" width="2" height="15" fill="rgb(206,17,22)"/><text x="1133.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="1136" y="452" width="3" height="15" fill="rgb(250,21,22)"/><text x="1139.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="1137" y="468" width="2" height="15" fill="rgb(226,223,48)"/><text x="1140.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1139" y="452" width="2" height="15" fill="rgb(206,214,48)"/><text x="1142.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.48%)</title><rect x="1136" y="436" width="6" height="15" fill="rgb(212,103,51)"/><text x="1139.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.48%)</title><rect x="1142" y="436" width="5" height="15" fill="rgb(221,198,4)"/><text x="1145.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.48%)</title><rect x="1142" y="452" width="5" height="15" fill="rgb(249,197,1)"/><text x="1145.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.37%)</title><rect x="1143" y="468" width="4" height="15" fill="rgb(205,61,36)"/><text x="1146.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.33%)</title><rect x="1143" y="484" width="4" height="15" fill="rgb(246,183,16)"/><text x="1146.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.33%)</title><rect x="1143" y="500" width="4" height="15" fill="rgb(216,120,10)"/><text x="1146.00" y="510.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="1145" y="516" width="2" height="15" fill="rgb(238,155,44)"/><text x="1148.00" y="526.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="1145" y="532" width="2" height="15" fill="rgb(244,120,20)"/><text x="1148.00" y="542.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1146" y="548" width="1" height="15" fill="rgb(211,7,33)"/><text x="1149.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOutputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1147" y="436" width="1" height="15" fill="rgb(213,22,9)"/><text x="1150.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.26%)</title><rect x="1148" y="436" width="4" height="15" fill="rgb(210,174,49)"/><text x="1151.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.26%)</title><rect x="1148" y="452" width="4" height="15" fill="rgb(217,166,31)"/><text x="1151.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="1149" y="468" width="3" height="15" fill="rgb(240,204,32)"/><text x="1152.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="1152" y="436" width="1" height="15" fill="rgb(240,164,13)"/><text x="1155.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="1153" y="436" width="2" height="15" fill="rgb(233,152,19)"/><text x="1156.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="1153" y="452" width="2" height="15" fill="rgb(245,67,9)"/><text x="1156.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="1153" y="468" width="2" height="15" fill="rgb(252,113,13)"/><text x="1156.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1164" y="564" width="1" height="15" fill="rgb(239,67,38)"/><text x="1167.00" y="574.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.33%)</title><rect x="1161" y="468" width="4" height="15" fill="rgb(227,134,7)"/><text x="1164.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.33%)</title><rect x="1161" y="484" width="4" height="15" fill="rgb(217,169,13)"/><text x="1164.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.33%)</title><rect x="1161" y="500" width="4" height="15" fill="rgb(225,218,10)"/><text x="1164.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.29%)</title><rect x="1162" y="516" width="3" height="15" fill="rgb(208,148,13)"/><text x="1165.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.22%)</title><rect x="1163" y="532" width="2" height="15" fill="rgb(242,211,28)"/><text x="1166.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.22%)</title><rect x="1163" y="548" width="2" height="15" fill="rgb(235,165,36)"/><text x="1166.00" y="558.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (28 samples, 1.02%)</title><rect x="1156" y="436" width="12" height="15" fill="rgb(248,38,23)"/><text x="1159.00" y="446.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 0.91%)</title><rect x="1157" y="452" width="11" height="15" fill="rgb(221,52,54)"/><text x="1160.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1167" y="468" width="1" height="15" fill="rgb(215,29,8)"/><text x="1170.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.11%)</title><rect x="1167" y="484" width="1" height="15" fill="rgb(254,229,40)"/><text x="1170.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.11%)</title><rect x="1167" y="500" width="1" height="15" fill="rgb(235,60,6)"/><text x="1170.00" y="510.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="1171" y="468" width="2" height="15" fill="rgb(220,171,44)"/><text x="1174.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2248] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="1173" y="468" width="1" height="15" fill="rgb(248,139,19)"/><text x="1176.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="1176" y="564" width="2" height="15" fill="rgb(219,111,9)"/><text x="1179.00" y="574.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="1178" y="564" width="2" height="15" fill="rgb(250,117,17)"/><text x="1181.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="1178" y="580" width="2" height="15" fill="rgb(243,72,33)"/><text x="1181.00" y="590.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.55%)</title><rect x="1174" y="468" width="7" height="15" fill="rgb(237,206,44)"/><text x="1177.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 0.51%)</title><rect x="1175" y="484" width="6" height="15" fill="rgb(222,169,29)"/><text x="1178.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 0.51%)</title><rect x="1175" y="500" width="6" height="15" fill="rgb(217,189,7)"/><text x="1178.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.48%)</title><rect x="1175" y="516" width="6" height="15" fill="rgb(243,30,45)"/><text x="1178.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.40%)</title><rect x="1176" y="532" width="5" height="15" fill="rgb(223,194,23)"/><text x="1179.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.40%)</title><rect x="1176" y="548" width="5" height="15" fill="rgb(250,59,41)"/><text x="1179.00" y="558.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.29%)</title><rect x="1183" y="500" width="3" height="15" fill="rgb(217,53,43)"/><text x="1186.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (6 samples, 0.22%)</title><rect x="1183" y="516" width="3" height="15" fill="rgb(219,111,19)"/><text x="1186.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.22%)</title><rect x="1183" y="532" width="3" height="15" fill="rgb(215,213,54)"/><text x="1186.00" y="542.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (140 samples, 5.12%)</title><rect x="1126" y="356" width="61" height="15" fill="rgb(249,180,24)"/><text x="1129.00" y="366.50">onnxru..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (140 samples, 5.12%)</title><rect x="1126" y="372" width="61" height="15" fill="rgb(218,34,0)"/><text x="1129.00" y="382.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (127 samples, 4.65%)</title><rect x="1132" y="388" width="55" height="15" fill="rgb(226,8,28)"/><text x="1135.00" y="398.50">onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (127 samples, 4.65%)</title><rect x="1132" y="404" width="55" height="15" fill="rgb(232,139,39)"/><text x="1135.00" y="414.50">onnxr..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (123 samples, 4.50%)</title><rect x="1134" y="420" width="53" height="15" fill="rgb(206,70,21)"/><text x="1137.00" y="430.50">onnxr..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (44 samples, 1.61%)</title><rect x="1168" y="436" width="19" height="15" fill="rgb(252,92,3)"/><text x="1171.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (43 samples, 1.57%)</title><rect x="1168" y="452" width="19" height="15" fill="rgb(217,131,21)"/><text x="1171.00" y="462.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 0.51%)</title><rect x="1181" y="468" width="6" height="15" fill="rgb(251,180,16)"/><text x="1184.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.48%)</title><rect x="1181" y="484" width="6" height="15" fill="rgb(208,24,29)"/><text x="1184.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (142 samples, 5.19%)</title><rect x="1126" y="340" width="62" height="15" fill="rgb(229,155,3)"/><text x="1129.00" y="350.50">onnxru..</text></g><g><title>all (2,734 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(242,31,33)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:68) (156 samples, 5.71%)</title><rect x="1122" y="52" width="68" height="15" fill="rgb(219,194,51)"/><text x="1125.00" y="62.50">&lt;module..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:67) (156 samples, 5.71%)</title><rect x="1122" y="68" width="68" height="15" fill="rgb(234,170,42)"/><text x="1125.00" y="78.50">profile..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:37) (156 samples, 5.71%)</title><rect x="1122" y="84" width="68" height="15" fill="rgb(208,41,22)"/><text x="1125.00" y="94.50">setup_p..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_m_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:31) (156 samples, 5.71%)</title><rect x="1122" y="100" width="68" height="15" fill="rgb(215,226,48)"/><text x="1125.00" y="110.50">profile..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (156 samples, 5.71%)</title><rect x="1122" y="116" width="68" height="15" fill="rgb(224,186,41)"/><text x="1125.00" y="126.50">time_pr..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (156 samples, 5.71%)</title><rect x="1122" y="132" width="68" height="15" fill="rgb(245,103,8)"/><text x="1125.00" y="142.50">&lt;lambda..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (155 samples, 5.67%)</title><rect x="1123" y="148" width="67" height="15" fill="rgb(212,206,14)"/><text x="1126.00" y="158.50">run (ml..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (155 samples, 5.67%)</title><rect x="1123" y="164" width="67" height="15" fill="rgb(243,80,2)"/><text x="1126.00" y="174.50">_run_wh..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (155 samples, 5.67%)</title><rect x="1123" y="180" width="67" height="15" fill="rgb(230,166,45)"/><text x="1126.00" y="190.50">run (ml..</text></g><g><title>run (onnxruntime/capi/session.py:136) (153 samples, 5.60%)</title><rect x="1123" y="196" width="67" height="15" fill="rgb(219,169,9)"/><text x="1126.00" y="206.50">run (on..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.52%)</title><rect x="1124" y="212" width="66" height="15" fill="rgb(240,113,19)"/><text x="1127.00" y="222.50">pybind1..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.52%)</title><rect x="1124" y="228" width="66" height="15" fill="rgb(206,191,2)"/><text x="1127.00" y="238.50">void py..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.52%)</title><rect x="1124" y="244" width="66" height="15" fill="rgb(205,169,33)"/><text x="1127.00" y="254.50">onnxrun..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.52%)</title><rect x="1124" y="260" width="66" height="15" fill="rgb(242,208,0)"/><text x="1127.00" y="270.50">onnxrun..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.52%)</title><rect x="1124" y="276" width="66" height="15" fill="rgb(233,147,9)"/><text x="1127.00" y="286.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.52%)</title><rect x="1124" y="292" width="66" height="15" fill="rgb(206,150,48)"/><text x="1127.00" y="302.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.52%)</title><rect x="1124" y="308" width="66" height="15" fill="rgb(205,103,42)"/><text x="1127.00" y="318.50">onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 5.52%)</title><rect x="1124" y="324" width="66" height="15" fill="rgb(252,30,42)"/><text x="1127.00" y="334.50">onnxrun..</text></g></g></svg>