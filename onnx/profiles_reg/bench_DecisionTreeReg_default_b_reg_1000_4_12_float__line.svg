<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="789.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="789.00"> </text><svg id="frames" x="10" width="1180"><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 1.02%)</title><rect x="0.6803%" y="180" width="1.0204%" height="15" fill="rgb(227,0,7)"/><text x="0.9303%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.02%)</title><rect x="0.6803%" y="196" width="1.0204%" height="15" fill="rgb(217,0,24)"/><text x="0.9303%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.02%)</title><rect x="0.6803%" y="212" width="1.0204%" height="15" fill="rgb(221,193,54)"/><text x="0.9303%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.02%)</title><rect x="0.6803%" y="228" width="1.0204%" height="15" fill="rgb(248,212,6)"/><text x="0.9303%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.02%)</title><rect x="0.6803%" y="244" width="1.0204%" height="15" fill="rgb(208,68,35)"/><text x="0.9303%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.02%)</title><rect x="0.6803%" y="260" width="1.0204%" height="15" fill="rgb(232,128,0)"/><text x="0.9303%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.02%)</title><rect x="0.6803%" y="276" width="1.0204%" height="15" fill="rgb(207,160,47)"/><text x="0.9303%" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:82) (3 samples, 1.02%)</title><rect x="0.6803%" y="292" width="1.0204%" height="15" fill="rgb(228,23,34)"/><text x="0.9303%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.02%)</title><rect x="0.6803%" y="308" width="1.0204%" height="15" fill="rgb(218,30,26)"/><text x="0.9303%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.02%)</title><rect x="0.6803%" y="324" width="1.0204%" height="15" fill="rgb(220,122,19)"/><text x="0.9303%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.02%)</title><rect x="0.6803%" y="340" width="1.0204%" height="15" fill="rgb(250,228,42)"/><text x="0.9303%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.02%)</title><rect x="0.6803%" y="356" width="1.0204%" height="15" fill="rgb(240,193,28)"/><text x="0.9303%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.02%)</title><rect x="0.6803%" y="372" width="1.0204%" height="15" fill="rgb(216,20,37)"/><text x="0.9303%" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (3 samples, 1.02%)</title><rect x="0.6803%" y="388" width="1.0204%" height="15" fill="rgb(206,188,39)"/><text x="0.9303%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.02%)</title><rect x="0.6803%" y="404" width="1.0204%" height="15" fill="rgb(217,207,13)"/><text x="0.9303%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.02%)</title><rect x="0.6803%" y="420" width="1.0204%" height="15" fill="rgb(231,73,38)"/><text x="0.9303%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.02%)</title><rect x="0.6803%" y="436" width="1.0204%" height="15" fill="rgb(225,20,46)"/><text x="0.9303%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.02%)</title><rect x="0.6803%" y="452" width="1.0204%" height="15" fill="rgb(210,31,41)"/><text x="0.9303%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.02%)</title><rect x="0.6803%" y="468" width="1.0204%" height="15" fill="rgb(221,200,47)"/><text x="0.9303%" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:27) (3 samples, 1.02%)</title><rect x="0.6803%" y="484" width="1.0204%" height="15" fill="rgb(226,26,5)"/><text x="0.9303%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.02%)</title><rect x="0.6803%" y="500" width="1.0204%" height="15" fill="rgb(249,33,26)"/><text x="0.9303%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.02%)</title><rect x="0.6803%" y="516" width="1.0204%" height="15" fill="rgb(235,183,28)"/><text x="0.9303%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.02%)</title><rect x="0.6803%" y="532" width="1.0204%" height="15" fill="rgb(221,5,38)"/><text x="0.9303%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.02%)</title><rect x="0.6803%" y="548" width="1.0204%" height="15" fill="rgb(247,18,42)"/><text x="0.9303%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.02%)</title><rect x="0.6803%" y="564" width="1.0204%" height="15" fill="rgb(241,131,45)"/><text x="0.9303%" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (3 samples, 1.02%)</title><rect x="0.6803%" y="580" width="1.0204%" height="15" fill="rgb(249,31,29)"/><text x="0.9303%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.02%)</title><rect x="0.6803%" y="596" width="1.0204%" height="15" fill="rgb(225,111,53)"/><text x="0.9303%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.02%)</title><rect x="0.6803%" y="612" width="1.0204%" height="15" fill="rgb(238,160,17)"/><text x="0.9303%" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.02%)</title><rect x="0.6803%" y="628" width="1.0204%" height="15" fill="rgb(214,148,48)"/><text x="0.9303%" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.02%)</title><rect x="0.6803%" y="644" width="1.0204%" height="15" fill="rgb(232,36,49)"/><text x="0.9303%" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.02%)</title><rect x="0.6803%" y="660" width="1.0204%" height="15" fill="rgb(209,103,24)"/><text x="0.9303%" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:384) (3 samples, 1.02%)</title><rect x="0.6803%" y="676" width="1.0204%" height="15" fill="rgb(229,88,8)"/><text x="0.9303%" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.02%)</title><rect x="0.6803%" y="692" width="1.0204%" height="15" fill="rgb(213,181,19)"/><text x="0.9303%" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.02%)</title><rect x="0.6803%" y="708" width="1.0204%" height="15" fill="rgb(254,191,54)"/><text x="0.9303%" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.02%)</title><rect x="0.6803%" y="724" width="1.0204%" height="15" fill="rgb(241,83,37)"/><text x="0.9303%" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.02%)</title><rect x="0.6803%" y="740" width="1.0204%" height="15" fill="rgb(233,36,39)"/><text x="0.9303%" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.02%)</title><rect x="0.6803%" y="756" width="1.0204%" height="15" fill="rgb(226,3,54)"/><text x="0.9303%" y="766.50"></text></g><g><title>&lt;module&gt; (profiles/benches/tree/DecisionTreeRegressor/bench_DecisionTreeReg_default_b_reg.py:4) (4 samples, 1.36%)</title><rect x="0.6803%" y="148" width="1.3605%" height="15" fill="rgb(245,192,40)"/><text x="0.9303%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.36%)</title><rect x="0.6803%" y="164" width="1.3605%" height="15" fill="rgb(238,167,29)"/><text x="0.9303%" y="174.50"></text></g><g><title>&lt;module&gt; (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:4) (10 samples, 3.40%)</title><rect x="0.0000%" y="52" width="3.4014%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="62.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 3.40%)</title><rect x="0.0000%" y="68" width="3.4014%" height="15" fill="rgb(231,60,39)"/><text x="0.2500%" y="78.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 3.40%)</title><rect x="0.0000%" y="84" width="3.4014%" height="15" fill="rgb(208,69,12)"/><text x="0.2500%" y="94.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 3.40%)</title><rect x="0.0000%" y="100" width="3.4014%" height="15" fill="rgb(235,93,37)"/><text x="0.2500%" y="110.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 3.40%)</title><rect x="0.0000%" y="116" width="3.4014%" height="15" fill="rgb(213,116,39)"/><text x="0.2500%" y="126.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 3.40%)</title><rect x="0.0000%" y="132" width="3.4014%" height="15" fill="rgb(222,207,29)"/><text x="0.2500%" y="142.50">_ca..</text></g><g><title>&lt;module&gt; (profiles/benches/tree/DecisionTreeRegressor/bench_DecisionTreeReg_default_b_reg.py:7) (4 samples, 1.36%)</title><rect x="2.0408%" y="148" width="1.3605%" height="15" fill="rgb(206,96,30)"/><text x="2.2908%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.36%)</title><rect x="2.0408%" y="164" width="1.3605%" height="15" fill="rgb(218,138,4)"/><text x="2.2908%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.36%)</title><rect x="2.0408%" y="180" width="1.3605%" height="15" fill="rgb(250,191,14)"/><text x="2.2908%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.36%)</title><rect x="2.0408%" y="196" width="1.3605%" height="15" fill="rgb(239,60,40)"/><text x="2.2908%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.36%)</title><rect x="2.0408%" y="212" width="1.3605%" height="15" fill="rgb(206,27,48)"/><text x="2.2908%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.36%)</title><rect x="2.0408%" y="228" width="1.3605%" height="15" fill="rgb(225,35,8)"/><text x="2.2908%" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (3 samples, 1.02%)</title><rect x="2.3810%" y="244" width="1.0204%" height="15" fill="rgb(250,213,24)"/><text x="2.6310%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.02%)</title><rect x="2.3810%" y="260" width="1.0204%" height="15" fill="rgb(247,123,22)"/><text x="2.6310%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.02%)</title><rect x="2.3810%" y="276" width="1.0204%" height="15" fill="rgb(231,138,38)"/><text x="2.6310%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.02%)</title><rect x="2.3810%" y="292" width="1.0204%" height="15" fill="rgb(231,145,46)"/><text x="2.6310%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.02%)</title><rect x="2.3810%" y="308" width="1.0204%" height="15" fill="rgb(251,118,11)"/><text x="2.6310%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.02%)</title><rect x="2.3810%" y="324" width="1.0204%" height="15" fill="rgb(217,147,25)"/><text x="2.6310%" y="334.50"></text></g><g><title>predict (sklearn/tree/_classes.py:418) (10 samples, 3.40%)</title><rect x="5.7823%" y="148" width="3.4014%" height="15" fill="rgb(247,81,37)"/><text x="6.0323%" y="158.50">pre..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:963) (5 samples, 1.70%)</title><rect x="7.4830%" y="164" width="1.7007%" height="15" fill="rgb(209,12,38)"/><text x="7.7330%" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:964) (4 samples, 1.36%)</title><rect x="7.8231%" y="180" width="1.3605%" height="15" fill="rgb(227,1,9)"/><text x="8.0731%" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:506) (4 samples, 1.36%)</title><rect x="9.8639%" y="180" width="1.3605%" height="15" fill="rgb(248,47,43)"/><text x="10.1139%" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:518) (7 samples, 2.38%)</title><rect x="11.2245%" y="180" width="2.3810%" height="15" fill="rgb(221,10,30)"/><text x="11.4745%" y="190.50">ch..</text></g><g><title>_add_filter (warnings.py:186) (3 samples, 1.02%)</title><rect x="14.2857%" y="212" width="1.0204%" height="15" fill="rgb(210,229,1)"/><text x="14.5357%" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py:520) (7 samples, 2.38%)</title><rect x="13.6054%" y="180" width="2.3810%" height="15" fill="rgb(222,148,37)"/><text x="13.8554%" y="190.50">ch..</text></g><g><title>simplefilter (warnings.py:179) (6 samples, 2.04%)</title><rect x="13.9456%" y="196" width="2.0408%" height="15" fill="rgb(234,67,33)"/><text x="14.1956%" y="206.50">s..</text></g><g><title>check_array (sklearn/utils/validation.py:521) (4 samples, 1.36%)</title><rect x="15.9864%" y="180" width="1.3605%" height="15" fill="rgb(247,98,35)"/><text x="16.2364%" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:534) (3 samples, 1.02%)</title><rect x="18.0272%" y="180" width="1.0204%" height="15" fill="rgb(247,138,52)"/><text x="18.2772%" y="190.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (8 samples, 2.72%)</title><rect x="23.1293%" y="212" width="2.7211%" height="15" fill="rgb(213,79,30)"/><text x="23.3793%" y="222.50">_h..</text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (16 samples, 5.44%)</title><rect x="20.7483%" y="196" width="5.4422%" height="15" fill="rgb(246,177,23)"/><text x="20.9983%" y="206.50">_assert..</text></g><g><title>check_array (sklearn/utils/validation.py:578) (18 samples, 6.12%)</title><rect x="20.4082%" y="180" width="6.1224%" height="15" fill="rgb(230,62,27)"/><text x="20.6582%" y="190.50">check_ar..</text></g><g><title>_num_samples (sklearn/utils/validation.py:138) (4 samples, 1.36%)</title><rect x="27.2109%" y="196" width="1.3605%" height="15" fill="rgb(216,154,8)"/><text x="27.4609%" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:155) (5 samples, 1.70%)</title><rect x="29.5918%" y="196" width="1.7007%" height="15" fill="rgb(244,35,45)"/><text x="29.8418%" y="206.50"></text></g><g><title>__instancecheck__ (abc.py:139) (3 samples, 1.02%)</title><rect x="30.2721%" y="212" width="1.0204%" height="15" fill="rgb(251,115,12)"/><text x="30.5221%" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py:581) (15 samples, 5.10%)</title><rect x="26.5306%" y="180" width="5.1020%" height="15" fill="rgb(240,54,50)"/><text x="26.7806%" y="190.50">check_..</text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py:380) (69 samples, 23.47%)</title><rect x="9.1837%" y="164" width="23.4694%" height="15" fill="rgb(233,84,52)"/><text x="9.4337%" y="174.50">_validate_X_predict (sklearn/tree/_cl..</text></g><g><title>predict (sklearn/tree/_classes.py:419) (71 samples, 24.15%)</title><rect x="9.1837%" y="148" width="24.1497%" height="15" fill="rgb(207,117,47)"/><text x="9.4337%" y="158.50">predict (sklearn/tree/_classes.py:419)</text></g><g><title>0x7f4525678d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 1.02%)</title><rect x="34.3537%" y="228" width="1.0204%" height="15" fill="rgb(249,43,39)"/><text x="34.6037%" y="238.50"></text></g><g><title>0x7f45256942df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 1.70%)</title><rect x="34.0136%" y="212" width="1.7007%" height="15" fill="rgb(209,38,44)"/><text x="34.2636%" y="222.50"></text></g><g><title>0x7f4525694592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 1.36%)</title><rect x="35.7143%" y="212" width="1.3605%" height="15" fill="rgb(236,212,23)"/><text x="35.9643%" y="222.50"></text></g><g><title>0x7f45256946ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 1.70%)</title><rect x="39.4558%" y="212" width="1.7007%" height="15" fill="rgb(242,79,21)"/><text x="39.7058%" y="222.50"></text></g><g><title>0x7f45256946b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 1.36%)</title><rect x="41.1565%" y="212" width="1.3605%" height="15" fill="rgb(211,96,35)"/><text x="41.4065%" y="222.50"></text></g><g><title>0x7f4525695405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (36 samples, 12.24%)</title><rect x="33.6735%" y="196" width="12.2449%" height="15" fill="rgb(253,215,40)"/><text x="33.9235%" y="206.50">0x7f4525695405 (sk..</text></g><g><title>0x7f4525685fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (37 samples, 12.59%)</title><rect x="33.6735%" y="180" width="12.5850%" height="15" fill="rgb(211,81,21)"/><text x="33.9235%" y="190.50">0x7f4525685fa6 (skl..</text></g><g><title>array_take (methods.c:138) (4 samples, 1.36%)</title><rect x="46.2585%" y="196" width="1.3605%" height="15" fill="rgb(208,190,38)"/><text x="46.5085%" y="206.50"></text></g><g><title>0x7f452568605a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 3.06%)</title><rect x="46.2585%" y="180" width="3.0612%" height="15" fill="rgb(235,213,38)"/><text x="46.5085%" y="190.50">0x7..</text></g><g><title>array_take (methods.c:145) (5 samples, 1.70%)</title><rect x="47.6190%" y="196" width="1.7007%" height="15" fill="rgb(237,122,38)"/><text x="47.8690%" y="206.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:234) (5 samples, 1.70%)</title><rect x="47.6190%" y="212" width="1.7007%" height="15" fill="rgb(244,218,35)"/><text x="47.8690%" y="222.50"></text></g><g><title>predict (sklearn/tree/_classes.py:420) (53 samples, 18.03%)</title><rect x="33.3333%" y="148" width="18.0272%" height="15" fill="rgb(240,68,47)"/><text x="33.5833%" y="158.50">predict (sklearn/tree/_class..</text></g><g><title>0x7f4525686d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (53 samples, 18.03%)</title><rect x="33.3333%" y="164" width="18.0272%" height="15" fill="rgb(210,16,53)"/><text x="33.5833%" y="174.50">0x7f4525686d2e (sklearn/tree..</text></g><g><title>0x7f4525686328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 1.02%)</title><rect x="50.3401%" y="180" width="1.0204%" height="15" fill="rgb(235,124,12)"/><text x="50.5901%" y="190.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:375) (141 samples, 47.96%)</title><rect x="5.4422%" y="132" width="47.9592%" height="15" fill="rgb(224,169,11)"/><text x="5.6922%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:375)</text></g><g><title>predict (sklearn/tree/_classes.py:442) (5 samples, 1.70%)</title><rect x="51.7007%" y="148" width="1.7007%" height="15" fill="rgb(250,166,2)"/><text x="51.9507%" y="158.50"></text></g><g><title>&lt;module&gt; (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:54) (148 samples, 50.34%)</title><rect x="3.4014%" y="52" width="50.3401%" height="15" fill="rgb(242,216,29)"/><text x="3.6514%" y="62.50">&lt;module&gt; (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:54)</text></g><g><title>profile_skl (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:53) (148 samples, 50.34%)</title><rect x="3.4014%" y="68" width="50.3401%" height="15" fill="rgb(230,116,27)"/><text x="3.6514%" y="78.50">profile_skl (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:53)</text></g><g><title>setup_profile (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:37) (148 samples, 50.34%)</title><rect x="3.4014%" y="84" width="50.3401%" height="15" fill="rgb(228,99,48)"/><text x="3.6514%" y="94.50">setup_profile (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:37)</text></g><g><title>profile (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:31) (148 samples, 50.34%)</title><rect x="3.4014%" y="100" width="50.3401%" height="15" fill="rgb(253,11,6)"/><text x="3.6514%" y="110.50">profile (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (144 samples, 48.98%)</title><rect x="4.7619%" y="116" width="48.9796%" height="15" fill="rgb(247,143,39)"/><text x="5.0119%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182)</text></g><g><title>0x7f4512928ea0 (libgomp.so.1.0.0) (3 samples, 1.02%)</title><rect x="54.7619%" y="436" width="1.0204%" height="15" fill="rgb(236,97,10)"/><text x="55.0119%" y="446.50"></text></g><g><title>0x7f4512928ea9 (libgomp.so.1.0.0) (11 samples, 3.74%)</title><rect x="55.7823%" y="436" width="3.7415%" height="15" fill="rgb(233,208,19)"/><text x="56.0323%" y="446.50">0x7f..</text></g><g><title>0x7f4512928eab (libgomp.so.1.0.0) (8 samples, 2.72%)</title><rect x="59.5238%" y="436" width="2.7211%" height="15" fill="rgb(216,164,2)"/><text x="59.7738%" y="446.50">0x..</text></g><g><title>&lt;module&gt; (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:61) (35 samples, 11.90%)</title><rect x="53.7415%" y="52" width="11.9048%" height="15" fill="rgb(220,129,5)"/><text x="53.9915%" y="62.50">&lt;module&gt; (bench_De..</text></g><g><title>profile_pyrtc (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:60) (35 samples, 11.90%)</title><rect x="53.7415%" y="68" width="11.9048%" height="15" fill="rgb(242,17,10)"/><text x="53.9915%" y="78.50">profile_pyrtc (ben..</text></g><g><title>setup_profile (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:37) (33 samples, 11.22%)</title><rect x="54.4218%" y="84" width="11.2245%" height="15" fill="rgb(242,107,0)"/><text x="54.6718%" y="94.50">setup_profile (be..</text></g><g><title>profile (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:31) (33 samples, 11.22%)</title><rect x="54.4218%" y="100" width="11.2245%" height="15" fill="rgb(251,28,31)"/><text x="54.6718%" y="110.50">profile (bench_De..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (33 samples, 11.22%)</title><rect x="54.4218%" y="116" width="11.2245%" height="15" fill="rgb(233,223,10)"/><text x="54.6718%" y="126.50">time_predict (mlp..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:379) (33 samples, 11.22%)</title><rect x="54.4218%" y="132" width="11.2245%" height="15" fill="rgb(215,21,27)"/><text x="54.6718%" y="142.50">&lt;lambda&gt; (mlprodi..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:472) (33 samples, 11.22%)</title><rect x="54.4218%" y="148" width="11.2245%" height="15" fill="rgb(232,23,21)"/><text x="54.6718%" y="158.50">run (mlprodict/on..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (33 samples, 11.22%)</title><rect x="54.4218%" y="164" width="11.2245%" height="15" fill="rgb(244,5,23)"/><text x="54.6718%" y="174.50">_run_sequence_run..</text></g><g><title>compiled_run (&lt;string&gt;:4) (33 samples, 11.22%)</title><rect x="54.4218%" y="180" width="11.2245%" height="15" fill="rgb(226,81,46)"/><text x="54.6718%" y="190.50">compiled_run (&lt;st..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py:78) (33 samples, 11.22%)</title><rect x="54.4218%" y="196" width="11.2245%" height="15" fill="rgb(247,70,30)"/><text x="54.6718%" y="206.50">_run (mlprodict/o..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (32 samples, 10.88%)</title><rect x="54.7619%" y="212" width="10.8844%" height="15" fill="rgb(212,68,19)"/><text x="55.0119%" y="222.50">pybind11::cpp_fu..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (32 samples, 10.88%)</title><rect x="54.7619%" y="228" width="10.8844%" height="15" fill="rgb(240,187,13)"/><text x="55.0119%" y="238.50">void pybind11::c..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::array_t&lt;float, 16&gt; (*)(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (32 samples, 10.88%)</title><rect x="54.7619%" y="244" width="10.8844%" height="15" fill="rgb(223,113,26)"/><text x="55.0119%" y="254.50">void pybind11::c..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (32 samples, 10.88%)</title><rect x="54.7619%" y="260" width="10.8844%" height="15" fill="rgb(206,192,2)"/><text x="55.0119%" y="270.50">pybind11::detail..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::array_t&lt;float, 16&gt;, pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (32 samples, 10.88%)</title><rect x="54.7619%" y="276" width="10.8844%" height="15" fill="rgb(241,108,4)"/><text x="55.0119%" y="286.50">pybind11::detail..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::array_t&lt;float, 16&gt;, RuntimeTreeEnsembleRegressorPFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleRegressorPFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (32 samples, 10.88%)</title><rect x="54.7619%" y="292" width="10.8844%" height="15" fill="rgb(247,173,49)"/><text x="55.0119%" y="302.50">pybind11::cpp_fu..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (32 samples, 10.88%)</title><rect x="54.7619%" y="308" width="10.8844%" height="15" fill="rgb(224,114,35)"/><text x="55.0119%" y="318.50">pybind11::array_..</text></g><g><title>pybind11::array::~array (numpy.h:538) (32 samples, 10.88%)</title><rect x="54.7619%" y="324" width="10.8844%" height="15" fill="rgb(245,159,27)"/><text x="55.0119%" y="334.50">pybind11::array:..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (32 samples, 10.88%)</title><rect x="54.7619%" y="340" width="10.8844%" height="15" fill="rgb(245,172,44)"/><text x="55.0119%" y="350.50">pybind11::buffer..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (32 samples, 10.88%)</title><rect x="54.7619%" y="356" width="10.8844%" height="15" fill="rgb(236,23,11)"/><text x="55.0119%" y="366.50">pybind11::object..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (32 samples, 10.88%)</title><rect x="54.7619%" y="372" width="10.8844%" height="15" fill="rgb(205,117,38)"/><text x="55.0119%" y="382.50">pybind11::handle..</text></g><g><title>RuntimeTreeEnsembleRegressorP&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_p_.cpp:531) (32 samples, 10.88%)</title><rect x="54.7619%" y="388" width="10.8844%" height="15" fill="rgb(237,72,25)"/><text x="55.0119%" y="398.50">RuntimeTreeEnsem..</text></g><g><title>RuntimeTreeEnsembleRegressorP&lt;float&gt;::compute_gil_free&lt;_AggregatorSum&lt;float&gt; &gt; (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor_p_.cpp:643) (32 samples, 10.88%)</title><rect x="54.7619%" y="404" width="10.8844%" height="15" fill="rgb(244,70,9)"/><text x="55.0119%" y="414.50">RuntimeTreeEnsem..</text></g><g><title>0x7f4512927ab9 (libgomp.so.1.0.0) (32 samples, 10.88%)</title><rect x="54.7619%" y="420" width="10.8844%" height="15" fill="rgb(217,125,39)"/><text x="55.0119%" y="430.50">0x7f4512927ab9 (..</text></g><g><title>0x7f4512928ead (libgomp.so.1.0.0) (10 samples, 3.40%)</title><rect x="62.2449%" y="436" width="3.4014%" height="15" fill="rgb(235,36,10)"/><text x="62.4949%" y="446.50">0x7..</text></g><g><title>run (onnxruntime/capi/session.py:140) (4 samples, 1.36%)</title><rect x="71.0884%" y="196" width="1.3605%" height="15" fill="rgb(251,123,47)"/><text x="71.3384%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py:140) (3 samples, 1.02%)</title><rect x="71.4286%" y="212" width="1.0204%" height="15" fill="rgb(221,13,13)"/><text x="71.6786%" y="222.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.02%)</title><rect x="74.4898%" y="244" width="1.0204%" height="15" fill="rgb(238,131,9)"/><text x="74.7398%" y="254.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.02%)</title><rect x="74.4898%" y="260" width="1.0204%" height="15" fill="rgb(211,50,8)"/><text x="74.7398%" y="270.50"></text></g><g><title>onnxruntime::FeedsFetchesManager::FeedsFetchesManager (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.02%)</title><rect x="76.5306%" y="276" width="1.0204%" height="15" fill="rgb(245,182,24)"/><text x="76.7806%" y="286.50"></text></g><g><title>std::vector&lt;onnxruntime::MLValueCopyInfo, std::allocator&lt;onnxruntime::MLValueCopyInfo&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.02%)</title><rect x="76.5306%" y="292" width="1.0204%" height="15" fill="rgb(242,14,37)"/><text x="76.7806%" y="302.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 1.02%)</title><rect x="76.5306%" y="308" width="1.0204%" height="15" fill="rgb(246,228,12)"/><text x="76.7806%" y="318.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 1.02%)</title><rect x="76.5306%" y="324" width="1.0204%" height="15" fill="rgb(213,55,15)"/><text x="76.7806%" y="334.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.36%)</title><rect x="78.5714%" y="324" width="1.3605%" height="15" fill="rgb(209,9,3)"/><text x="78.8214%" y="334.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.70%)</title><rect x="85.0340%" y="340" width="1.7007%" height="15" fill="rgb(230,59,30)"/><text x="85.2840%" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.70%)</title><rect x="85.0340%" y="356" width="1.7007%" height="15" fill="rgb(209,121,21)"/><text x="85.2840%" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.70%)</title><rect x="85.0340%" y="372" width="1.7007%" height="15" fill="rgb(220,109,13)"/><text x="85.2840%" y="382.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.02%)</title><rect x="85.7143%" y="388" width="1.0204%" height="15" fill="rgb(232,18,1)"/><text x="85.9643%" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.02%)</title><rect x="85.7143%" y="404" width="1.0204%" height="15" fill="rgb(215,41,42)"/><text x="85.9643%" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.02%)</title><rect x="85.7143%" y="420" width="1.0204%" height="15" fill="rgb(224,123,36)"/><text x="85.9643%" y="430.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.02%)</title><rect x="85.7143%" y="436" width="1.0204%" height="15" fill="rgb(240,125,3)"/><text x="85.9643%" y="446.50"></text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (51 samples, 17.35%)</title><rect x="78.2313%" y="292" width="17.3469%" height="15" fill="rgb(205,98,50)"/><text x="78.4813%" y="302.50">onnxruntime::utils::Execute..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (51 samples, 17.35%)</title><rect x="78.2313%" y="308" width="17.3469%" height="15" fill="rgb(205,185,37)"/><text x="78.4813%" y="318.50">onnxruntime::SequentialExec..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (46 samples, 15.65%)</title><rect x="79.9320%" y="324" width="15.6463%" height="15" fill="rgb(238,207,15)"/><text x="80.1820%" y="334.50">onnxruntime::ml::TreeEns..</text></g><g><title>onnxruntime::ml::TreeEnsembleRegressor&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 8.84%)</title><rect x="86.7347%" y="340" width="8.8435%" height="15" fill="rgb(213,199,42)"/><text x="86.9847%" y="350.50">onnxruntime:..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (52 samples, 17.69%)</title><rect x="78.2313%" y="276" width="17.6871%" height="15" fill="rgb(235,201,11)"/><text x="78.4813%" y="286.50">onnxruntime::utils::Execute..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 20.75%)</title><rect x="75.5102%" y="244" width="20.7483%" height="15" fill="rgb(207,46,11)"/><text x="75.7602%" y="254.50">onnxruntime::InferenceSession::Ru..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (60 samples, 20.41%)</title><rect x="75.8503%" y="260" width="20.4082%" height="15" fill="rgb(241,35,35)"/><text x="76.1003%" y="270.50">onnxruntime::InferenceSession::R..</text></g><g><title>onnxruntime::python::CreateGenericMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.02%)</title><rect x="96.9388%" y="244" width="1.0204%" height="15" fill="rgb(243,32,47)"/><text x="97.1888%" y="254.50"></text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:680) (84 samples, 28.57%)</title><rect x="70.0680%" y="164" width="28.5714%" height="15" fill="rgb(247,202,23)"/><text x="70.3180%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_infe..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (83 samples, 28.23%)</title><rect x="70.4082%" y="180" width="28.2313%" height="15" fill="rgb(219,102,11)"/><text x="70.6582%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:142) (77 samples, 26.19%)</title><rect x="72.4490%" y="196" width="26.1905%" height="15" fill="rgb(243,110,44)"/><text x="72.6990%" y="206.50">run (onnxruntime/capi/session.py:142)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (74 samples, 25.17%)</title><rect x="73.4694%" y="212" width="25.1701%" height="15" fill="rgb(222,74,54)"/><text x="73.7194%" y="222.50">pybind11::cpp_function::dispatcher (onnx..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (74 samples, 25.17%)</title><rect x="73.4694%" y="228" width="25.1701%" height="15" fill="rgb(216,99,12)"/><text x="73.7194%" y="238.50">void pybind11::cpp_function::initialize&lt;..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:379) (94 samples, 31.97%)</title><rect x="67.6871%" y="132" width="31.9728%" height="15" fill="rgb(226,22,26)"/><text x="67.9371%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:472) (88 samples, 29.93%)</title><rect x="69.7279%" y="148" width="29.9320%" height="15" fill="rgb(217,163,10)"/><text x="69.9779%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:472)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:681) (3 samples, 1.02%)</title><rect x="98.6395%" y="164" width="1.0204%" height="15" fill="rgb(213,25,53)"/><text x="98.8895%" y="174.50"></text></g><g><title>all (294 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:68) (101 samples, 34.35%)</title><rect x="65.6463%" y="52" width="34.3537%" height="15" fill="rgb(220,39,43)"/><text x="65.8963%" y="62.50">&lt;module&gt; (bench_DecisionTreeReg_default_b_reg_1000_4_12_..</text></g><g><title>profile_ort (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:67) (101 samples, 34.35%)</title><rect x="65.6463%" y="68" width="34.3537%" height="15" fill="rgb(229,68,48)"/><text x="65.8963%" y="78.50">profile_ort (bench_DecisionTreeReg_default_b_reg_1000_4_..</text></g><g><title>setup_profile (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:37) (101 samples, 34.35%)</title><rect x="65.6463%" y="84" width="34.3537%" height="15" fill="rgb(252,8,32)"/><text x="65.8963%" y="94.50">setup_profile (bench_DecisionTreeReg_default_b_reg_1000_..</text></g><g><title>profile (bench_DecisionTreeReg_default_b_reg_1000_4_12_float_.py:31) (101 samples, 34.35%)</title><rect x="65.6463%" y="100" width="34.3537%" height="15" fill="rgb(223,20,43)"/><text x="65.8963%" y="110.50">profile (bench_DecisionTreeReg_default_b_reg_1000_4_12_f..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (98 samples, 33.33%)</title><rect x="66.6667%" y="116" width="33.3333%" height="15" fill="rgb(229,81,49)"/><text x="66.9167%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.p..</text></g></svg></svg>