<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="885.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="885.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (onnx/__init__.py) (6 samples, 1.21%)</title><rect x="0.0000%" y="292" width="1.2121%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="308" width="1.2121%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="324" width="1.2121%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="340" width="1.2121%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="356" width="1.2121%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="372" width="1.2121%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (6 samples, 1.21%)</title><rect x="0.0000%" y="388" width="1.2121%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="404" width="1.2121%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="420" width="1.2121%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="436" width="1.2121%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="452" width="1.2121%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="468" width="1.2121%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (6 samples, 1.21%)</title><rect x="0.0000%" y="484" width="1.2121%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="500" width="1.2121%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="516" width="1.2121%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="532" width="1.2121%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="548" width="1.2121%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="564" width="1.2121%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (6 samples, 1.21%)</title><rect x="0.0000%" y="580" width="1.2121%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="596" width="1.2121%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="612" width="1.2121%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="628" width="1.2121%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="644" width="1.2121%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="660" width="1.2121%" height="15" fill="rgb(247,18,42)"/><text x="0.2500%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="676" width="1.2121%" height="15" fill="rgb(241,131,45)"/><text x="0.2500%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="692" width="1.2121%" height="15" fill="rgb(249,31,29)"/><text x="0.2500%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="708" width="1.2121%" height="15" fill="rgb(225,111,53)"/><text x="0.2500%" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (6 samples, 1.21%)</title><rect x="0.0000%" y="724" width="1.2121%" height="15" fill="rgb(238,160,17)"/><text x="0.2500%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="740" width="1.2121%" height="15" fill="rgb(214,148,48)"/><text x="0.2500%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="756" width="1.2121%" height="15" fill="rgb(232,36,49)"/><text x="0.2500%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="772" width="1.2121%" height="15" fill="rgb(209,103,24)"/><text x="0.2500%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="788" width="1.2121%" height="15" fill="rgb(229,88,8)"/><text x="0.2500%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="0.0000%" y="804" width="1.2121%" height="15" fill="rgb(213,181,19)"/><text x="0.2500%" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (6 samples, 1.21%)</title><rect x="0.0000%" y="820" width="1.2121%" height="15" fill="rgb(254,191,54)"/><text x="0.2500%" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (6 samples, 1.21%)</title><rect x="0.0000%" y="836" width="1.2121%" height="15" fill="rgb(241,83,37)"/><text x="0.2500%" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (6 samples, 1.21%)</title><rect x="0.0000%" y="852" width="1.2121%" height="15" fill="rgb(233,36,39)"/><text x="0.2500%" y="862.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.62%)</title><rect x="0.0000%" y="196" width="1.6162%" height="15" fill="rgb(226,3,54)"/><text x="0.2500%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.62%)</title><rect x="0.0000%" y="212" width="1.6162%" height="15" fill="rgb(245,192,40)"/><text x="0.2500%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.62%)</title><rect x="0.0000%" y="228" width="1.6162%" height="15" fill="rgb(238,167,29)"/><text x="0.2500%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.62%)</title><rect x="0.0000%" y="244" width="1.6162%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.62%)</title><rect x="0.0000%" y="260" width="1.6162%" height="15" fill="rgb(231,60,39)"/><text x="0.2500%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.62%)</title><rect x="0.0000%" y="276" width="1.6162%" height="15" fill="rgb(208,69,12)"/><text x="0.2500%" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (5 samples, 1.01%)</title><rect x="1.6162%" y="436" width="1.0101%" height="15" fill="rgb(235,93,37)"/><text x="1.8662%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.01%)</title><rect x="1.6162%" y="452" width="1.0101%" height="15" fill="rgb(213,116,39)"/><text x="1.8662%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.01%)</title><rect x="1.6162%" y="468" width="1.0101%" height="15" fill="rgb(222,207,29)"/><text x="1.8662%" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (6 samples, 1.21%)</title><rect x="1.6162%" y="340" width="1.2121%" height="15" fill="rgb(206,96,30)"/><text x="1.8662%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="1.6162%" y="356" width="1.2121%" height="15" fill="rgb(218,138,4)"/><text x="1.8662%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="1.6162%" y="372" width="1.2121%" height="15" fill="rgb(250,191,14)"/><text x="1.8662%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="1.6162%" y="388" width="1.2121%" height="15" fill="rgb(239,60,40)"/><text x="1.8662%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.21%)</title><rect x="1.6162%" y="404" width="1.2121%" height="15" fill="rgb(206,27,48)"/><text x="1.8662%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.21%)</title><rect x="1.6162%" y="420" width="1.2121%" height="15" fill="rgb(225,35,8)"/><text x="1.8662%" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (10 samples, 2.02%)</title><rect x="1.6162%" y="244" width="2.0202%" height="15" fill="rgb(250,213,24)"/><text x="1.8662%" y="254.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (10 samples, 2.02%)</title><rect x="1.6162%" y="260" width="2.0202%" height="15" fill="rgb(247,123,22)"/><text x="1.8662%" y="270.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 2.02%)</title><rect x="1.6162%" y="276" width="2.0202%" height="15" fill="rgb(231,138,38)"/><text x="1.8662%" y="286.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 2.02%)</title><rect x="1.6162%" y="292" width="2.0202%" height="15" fill="rgb(231,145,46)"/><text x="1.8662%" y="302.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (10 samples, 2.02%)</title><rect x="1.6162%" y="308" width="2.0202%" height="15" fill="rgb(251,118,11)"/><text x="1.8662%" y="318.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (10 samples, 2.02%)</title><rect x="1.6162%" y="324" width="2.0202%" height="15" fill="rgb(217,147,25)"/><text x="1.8662%" y="334.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.84%)</title><rect x="0.0000%" y="68" width="3.8384%" height="15" fill="rgb(247,81,37)"/><text x="0.2500%" y="78.50">_fin..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.84%)</title><rect x="0.0000%" y="84" width="3.8384%" height="15" fill="rgb(209,12,38)"/><text x="0.2500%" y="94.50">_fin..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.84%)</title><rect x="0.0000%" y="100" width="3.8384%" height="15" fill="rgb(227,1,9)"/><text x="0.2500%" y="110.50">_loa..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (19 samples, 3.84%)</title><rect x="0.0000%" y="116" width="3.8384%" height="15" fill="rgb(248,47,43)"/><text x="0.2500%" y="126.50">exec..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.84%)</title><rect x="0.0000%" y="132" width="3.8384%" height="15" fill="rgb(221,10,30)"/><text x="0.2500%" y="142.50">_cal..</text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LinearRegression/bench_LinearRegression_default_m_reg.py) (19 samples, 3.84%)</title><rect x="0.0000%" y="148" width="3.8384%" height="15" fill="rgb(210,229,1)"/><text x="0.2500%" y="158.50">&lt;mod..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.84%)</title><rect x="0.0000%" y="164" width="3.8384%" height="15" fill="rgb(222,148,37)"/><text x="0.2500%" y="174.50">_fin..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.84%)</title><rect x="0.0000%" y="180" width="3.8384%" height="15" fill="rgb(234,67,33)"/><text x="0.2500%" y="190.50">_fin..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.22%)</title><rect x="1.6162%" y="196" width="2.2222%" height="15" fill="rgb(247,98,35)"/><text x="1.8662%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (11 samples, 2.22%)</title><rect x="1.6162%" y="212" width="2.2222%" height="15" fill="rgb(247,138,52)"/><text x="1.8662%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.22%)</title><rect x="1.6162%" y="228" width="2.2222%" height="15" fill="rgb(213,79,30)"/><text x="1.8662%" y="238.50">_..</text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.01%)</title><rect x="13.9394%" y="324" width="1.0101%" height="15" fill="rgb(246,177,23)"/><text x="14.1894%" y="334.50"></text></g><g><title>free (libc-2.29.so) (5 samples, 1.01%)</title><rect x="32.7273%" y="340" width="1.0101%" height="15" fill="rgb(230,62,27)"/><text x="32.9773%" y="350.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (141 samples, 28.48%)</title><rect x="12.5253%" y="260" width="28.4848%" height="15" fill="rgb(216,154,8)"/><text x="12.7753%" y="270.50">onnxruntime::InferenceSession::Run (onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (135 samples, 27.27%)</title><rect x="13.7374%" y="276" width="27.2727%" height="15" fill="rgb(244,35,45)"/><text x="13.9874%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (135 samples, 27.27%)</title><rect x="13.7374%" y="292" width="27.2727%" height="15" fill="rgb(251,115,12)"/><text x="13.9874%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (onnxru..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (135 samples, 27.27%)</title><rect x="13.7374%" y="308" width="27.2727%" height="15" fill="rgb(240,54,50)"/><text x="13.9874%" y="318.50">onnxruntime::SequentialExecutor::Execute (on..</text></g><g><title>onnxruntime::ml::LinearRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (127 samples, 25.66%)</title><rect x="15.3535%" y="324" width="25.6566%" height="15" fill="rgb(233,84,52)"/><text x="15.6035%" y="334.50">onnxruntime::ml::LinearRegressor&lt;float&gt;::..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (31 samples, 6.26%)</title><rect x="34.7475%" y="340" width="6.2626%" height="15" fill="rgb(207,117,47)"/><text x="34.9975%" y="350.50">std::vec..</text></g><g><title>operator new (libstdc++.so.6.0.28) (20 samples, 4.04%)</title><rect x="36.9697%" y="356" width="4.0404%" height="15" fill="rgb(249,43,39)"/><text x="37.2197%" y="366.50">oper..</text></g><g><title>malloc (libc-2.29.so) (15 samples, 3.03%)</title><rect x="37.9798%" y="372" width="3.0303%" height="15" fill="rgb(209,38,44)"/><text x="38.2298%" y="382.50">mal..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (142 samples, 28.69%)</title><rect x="12.5253%" y="244" width="28.6869%" height="15" fill="rgb(236,212,23)"/><text x="12.7753%" y="254.50">onnxruntime::InferenceSession::Run (onnxruntim..</text></g><g><title>onnxruntime::python::AddTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 1.21%)</title><rect x="41.2121%" y="244" width="1.2121%" height="15" fill="rgb(242,79,21)"/><text x="41.4621%" y="254.50"></text></g><g><title>run (onnxruntime/capi/session.py) (180 samples, 36.36%)</title><rect x="7.8788%" y="196" width="36.3636%" height="15" fill="rgb(211,96,35)"/><text x="8.1288%" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (167 samples, 33.74%)</title><rect x="10.5051%" y="212" width="33.7374%" height="15" fill="rgb(253,215,40)"/><text x="10.7551%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/on..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (167 samples, 33.74%)</title><rect x="10.5051%" y="228" width="33.7374%" height="15" fill="rgb(211,81,21)"/><text x="10.7551%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::py..</text></g><g><title>profile_ort (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (201 samples, 40.61%)</title><rect x="3.8384%" y="68" width="40.6061%" height="15" fill="rgb(208,190,38)"/><text x="4.0884%" y="78.50">profile_ort (bench_LinearRegression_default_m_reg_1000_4_12_float_..</text></g><g><title>setup_profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (201 samples, 40.61%)</title><rect x="3.8384%" y="84" width="40.6061%" height="15" fill="rgb(235,213,38)"/><text x="4.0884%" y="94.50">setup_profile (bench_LinearRegression_default_m_reg_1000_4_12_floa..</text></g><g><title>profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (201 samples, 40.61%)</title><rect x="3.8384%" y="100" width="40.6061%" height="15" fill="rgb(237,122,38)"/><text x="4.0884%" y="110.50">profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (197 samples, 39.80%)</title><rect x="4.6465%" y="116" width="39.7980%" height="15" fill="rgb(244,218,35)"/><text x="4.8965%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (195 samples, 39.39%)</title><rect x="5.0505%" y="132" width="39.3939%" height="15" fill="rgb(240,68,47)"/><text x="5.3005%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (193 samples, 38.99%)</title><rect x="5.4545%" y="148" width="38.9899%" height="15" fill="rgb(210,16,53)"/><text x="5.7045%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (189 samples, 38.18%)</title><rect x="6.2626%" y="164" width="38.1818%" height="15" fill="rgb(235,124,12)"/><text x="6.5126%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (181 samples, 36.57%)</title><rect x="7.8788%" y="180" width="36.5657%" height="15" fill="rgb(224,169,11)"/><text x="8.1288%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>gemv (cblasfuncs.c) (17 samples, 3.43%)</title><rect x="49.0909%" y="308" width="3.4343%" height="15" fill="rgb(250,166,2)"/><text x="49.3409%" y="318.50">gem..</text></g><g><title>cblas_sgemv (libopenblasp-r0-34a18dc3.3.7.so) (17 samples, 3.43%)</title><rect x="49.0909%" y="324" width="3.4343%" height="15" fill="rgb(242,216,29)"/><text x="49.3409%" y="334.50">cbl..</text></g><g><title>sgemv_t_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (17 samples, 3.43%)</title><rect x="49.0909%" y="340" width="3.4343%" height="15" fill="rgb(230,116,27)"/><text x="49.3409%" y="350.50">sge..</text></g><g><title>sgemv_kernel_4x4 (libopenblasp-r0-34a18dc3.3.7.so) (12 samples, 2.42%)</title><rect x="50.1010%" y="356" width="2.4242%" height="15" fill="rgb(228,99,48)"/><text x="50.3510%" y="366.50">sg..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py) (29 samples, 5.86%)</title><rect x="47.4747%" y="212" width="5.8586%" height="15" fill="rgb(253,11,6)"/><text x="47.7247%" y="222.50">numpy_d..</text></g><g><title>dot (&lt;__array_function__ internals&gt;) (26 samples, 5.25%)</title><rect x="48.0808%" y="228" width="5.2525%" height="15" fill="rgb(247,143,39)"/><text x="48.3308%" y="238.50">dot (&lt;..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (24 samples, 4.85%)</title><rect x="48.4848%" y="244" width="4.8485%" height="15" fill="rgb(236,97,10)"/><text x="48.7348%" y="254.50">array_..</text></g><g><title>array_matrixproduct (multiarraymodule.c) (23 samples, 4.65%)</title><rect x="48.6869%" y="260" width="4.6465%" height="15" fill="rgb(233,208,19)"/><text x="48.9369%" y="270.50">array..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c) (22 samples, 4.44%)</title><rect x="48.8889%" y="276" width="4.4444%" height="15" fill="rgb(216,164,2)"/><text x="49.1389%" y="286.50">PyArr..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c) (22 samples, 4.44%)</title><rect x="48.8889%" y="292" width="4.4444%" height="15" fill="rgb(220,129,5)"/><text x="49.1389%" y="302.50">cblas..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (8 samples, 1.62%)</title><rect x="54.1414%" y="276" width="1.6162%" height="15" fill="rgb(242,17,10)"/><text x="54.3914%" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (17 samples, 3.43%)</title><rect x="53.5354%" y="228" width="3.4343%" height="15" fill="rgb(242,107,0)"/><text x="53.7854%" y="238.50">PyU..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (15 samples, 3.03%)</title><rect x="53.9394%" y="244" width="3.0303%" height="15" fill="rgb(251,28,31)"/><text x="54.1894%" y="254.50">exe..</text></g><g><title>iterator_loop (ufunc_object.c) (14 samples, 2.83%)</title><rect x="54.1414%" y="260" width="2.8283%" height="15" fill="rgb(233,223,10)"/><text x="54.3914%" y="270.50">it..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (58 samples, 11.72%)</title><rect x="45.4545%" y="132" width="11.7172%" height="15" fill="rgb(215,21,27)"/><text x="45.7045%" y="142.50">&lt;lambda&gt; (mlprodi..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (56 samples, 11.31%)</title><rect x="45.8586%" y="148" width="11.3131%" height="15" fill="rgb(232,23,21)"/><text x="46.1086%" y="158.50">run (mlprodict/on..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py) (51 samples, 10.30%)</title><rect x="46.8687%" y="164" width="10.3030%" height="15" fill="rgb(244,5,23)"/><text x="47.1187%" y="174.50">_run_sequence_r..</text></g><g><title>compiled_run (&lt;string&gt;) (49 samples, 9.90%)</title><rect x="47.2727%" y="180" width="9.8990%" height="15" fill="rgb(226,81,46)"/><text x="47.5227%" y="190.50">compiled_run (..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_regressor.py) (49 samples, 9.90%)</title><rect x="47.2727%" y="196" width="9.8990%" height="15" fill="rgb(247,70,30)"/><text x="47.5227%" y="206.50">_run (mlprodic..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (19 samples, 3.84%)</title><rect x="53.3333%" y="212" width="3.8384%" height="15" fill="rgb(212,68,19)"/><text x="53.5833%" y="222.50">ufun..</text></g><g><title>profile_pyrtc (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (66 samples, 13.33%)</title><rect x="44.4444%" y="68" width="13.3333%" height="15" fill="rgb(240,187,13)"/><text x="44.6944%" y="78.50">profile_pyrtc (bench..</text></g><g><title>setup_profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (66 samples, 13.33%)</title><rect x="44.4444%" y="84" width="13.3333%" height="15" fill="rgb(223,113,26)"/><text x="44.6944%" y="94.50">setup_profile (bench..</text></g><g><title>profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (66 samples, 13.33%)</title><rect x="44.4444%" y="100" width="13.3333%" height="15" fill="rgb(206,192,2)"/><text x="44.6944%" y="110.50">profile (bench_Linea..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (61 samples, 12.32%)</title><rect x="45.4545%" y="116" width="12.3232%" height="15" fill="rgb(241,108,4)"/><text x="45.7045%" y="126.50">time_predict (mlpr..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (6 samples, 1.21%)</title><rect x="61.8182%" y="228" width="1.2121%" height="15" fill="rgb(247,173,49)"/><text x="62.0682%" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (13 samples, 2.63%)</title><rect x="61.0101%" y="212" width="2.6263%" height="15" fill="rgb(224,114,35)"/><text x="61.2601%" y="222.50">Py..</text></g><g><title>array_add (number.c) (18 samples, 3.64%)</title><rect x="60.4040%" y="180" width="3.6364%" height="15" fill="rgb(245,159,27)"/><text x="60.6540%" y="190.50">arra..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (18 samples, 3.64%)</title><rect x="60.4040%" y="196" width="3.6364%" height="15" fill="rgb(245,172,44)"/><text x="60.6540%" y="206.50">ufun..</text></g><g><title>__enter__ (warnings.py) (8 samples, 1.62%)</title><rect x="68.6869%" y="196" width="1.6162%" height="15" fill="rgb(236,23,11)"/><text x="68.9369%" y="206.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.41%)</title><rect x="73.1313%" y="212" width="1.4141%" height="15" fill="rgb(205,117,38)"/><text x="73.3813%" y="222.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (19 samples, 3.84%)</title><rect x="70.9091%" y="196" width="3.8384%" height="15" fill="rgb(237,72,25)"/><text x="71.1591%" y="206.50">_ass..</text></g><g><title>_num_samples (sklearn/utils/validation.py) (20 samples, 4.04%)</title><rect x="75.5556%" y="196" width="4.0404%" height="15" fill="rgb(244,70,9)"/><text x="75.8056%" y="206.50">_num..</text></g><g><title>asarray (numpy/core/_asarray.py) (6 samples, 1.21%)</title><rect x="79.5960%" y="196" width="1.2121%" height="15" fill="rgb(217,125,39)"/><text x="79.8460%" y="206.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py) (13 samples, 2.63%)</title><rect x="81.2121%" y="196" width="2.6263%" height="15" fill="rgb(235,36,10)"/><text x="81.4621%" y="206.50">is..</text></g><g><title>issubclass_ (numpy/core/numerictypes.py) (7 samples, 1.41%)</title><rect x="82.4242%" y="212" width="1.4141%" height="15" fill="rgb(251,123,47)"/><text x="82.6742%" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (111 samples, 22.42%)</title><rect x="64.0404%" y="180" width="22.4242%" height="15" fill="rgb(221,13,13)"/><text x="64.2904%" y="190.50">check_array (sklearn/utils/validatio..</text></g><g><title>simplefilter (warnings.py) (13 samples, 2.63%)</title><rect x="83.8384%" y="196" width="2.6263%" height="15" fill="rgb(238,131,9)"/><text x="84.0884%" y="206.50">si..</text></g><g><title>_add_filter (warnings.py) (9 samples, 1.82%)</title><rect x="84.6465%" y="212" width="1.8182%" height="15" fill="rgb(211,50,8)"/><text x="84.8965%" y="222.50">_..</text></g><g><title>unicode_endswith (python3.7) (6 samples, 1.21%)</title><rect x="88.4848%" y="212" width="1.2121%" height="15" fill="rgb(245,182,24)"/><text x="88.7348%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (10 samples, 2.02%)</title><rect x="87.8788%" y="196" width="2.0202%" height="15" fill="rgb(242,14,37)"/><text x="88.1288%" y="206.50">&lt;..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (20 samples, 4.04%)</title><rect x="86.4646%" y="180" width="4.0404%" height="15" fill="rgb(246,228,12)"/><text x="86.7146%" y="190.50">chec..</text></g><g><title>dgemv_t_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (9 samples, 1.82%)</title><rect x="91.1111%" y="196" width="1.8182%" height="15" fill="rgb(213,55,15)"/><text x="91.3611%" y="206.50">d..</text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src) (5 samples, 1.01%)</title><rect x="94.7475%" y="308" width="1.0101%" height="15" fill="rgb(209,9,3)"/><text x="94.9975%" y="318.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (8 samples, 1.62%)</title><rect x="94.3434%" y="276" width="1.6162%" height="15" fill="rgb(230,59,30)"/><text x="94.5934%" y="286.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (7 samples, 1.41%)</title><rect x="94.5455%" y="292" width="1.4141%" height="15" fill="rgb(209,121,21)"/><text x="94.7955%" y="302.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (15 samples, 3.03%)</title><rect x="94.1414%" y="260" width="3.0303%" height="15" fill="rgb(220,109,13)"/><text x="94.3914%" y="270.50">npy..</text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (5 samples, 1.01%)</title><rect x="96.1616%" y="276" width="1.0101%" height="15" fill="rgb(232,18,1)"/><text x="96.4116%" y="286.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (5 samples, 1.01%)</title><rect x="96.1616%" y="292" width="1.0101%" height="15" fill="rgb(215,41,42)"/><text x="96.4116%" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 1.01%)</title><rect x="96.1616%" y="308" width="1.0101%" height="15" fill="rgb(224,123,36)"/><text x="96.4116%" y="318.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (18 samples, 3.64%)</title><rect x="93.7374%" y="244" width="3.6364%" height="15" fill="rgb(240,125,3)"/><text x="93.9874%" y="254.50">NpyI..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (43 samples, 8.69%)</title><rect x="90.5051%" y="180" width="8.6869%" height="15" fill="rgb(205,98,50)"/><text x="90.7551%" y="190.50">safe_sparse_..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (30 samples, 6.06%)</title><rect x="93.1313%" y="196" width="6.0606%" height="15" fill="rgb(205,185,37)"/><text x="93.3813%" y="206.50">ufunc_ge..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (30 samples, 6.06%)</title><rect x="93.1313%" y="212" width="6.0606%" height="15" fill="rgb(238,207,15)"/><text x="93.3813%" y="222.50">PyUFunc_..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (30 samples, 6.06%)</title><rect x="93.1313%" y="228" width="6.0606%" height="15" fill="rgb(213,199,42)"/><text x="93.3813%" y="238.50">PyUFunc_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (203 samples, 41.01%)</title><rect x="58.3838%" y="132" width="41.0101%" height="15" fill="rgb(235,201,11)"/><text x="58.6338%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict (sklearn/linear_model/_base.py) (202 samples, 40.81%)</title><rect x="58.5859%" y="148" width="40.8081%" height="15" fill="rgb(207,46,11)"/><text x="58.8359%" y="158.50">predict (sklearn/linear_model/_base.py)</text></g><g><title>_decision_function (sklearn/linear_model/_base.py) (201 samples, 40.61%)</title><rect x="58.7879%" y="164" width="40.6061%" height="15" fill="rgb(241,35,35)"/><text x="59.0379%" y="174.50">_decision_function (sklearn/linear_model/_base.py)</text></g><g><title>&lt;module&gt; (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (494 samples, 99.80%)</title><rect x="0.0000%" y="52" width="99.7980%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="62.50">&lt;module&gt; (bench_LinearRegression_default_m_reg_1000_4_12_float_.py)</text></g><g><title>profile_skl (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (208 samples, 42.02%)</title><rect x="57.7778%" y="68" width="42.0202%" height="15" fill="rgb(247,202,23)"/><text x="58.0278%" y="78.50">profile_skl (bench_LinearRegression_default_m_reg_1000_4_12_float_.py)</text></g><g><title>setup_profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (208 samples, 42.02%)</title><rect x="57.7778%" y="84" width="42.0202%" height="15" fill="rgb(219,102,11)"/><text x="58.0278%" y="94.50">setup_profile (bench_LinearRegression_default_m_reg_1000_4_12_float_...</text></g><g><title>profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (208 samples, 42.02%)</title><rect x="57.7778%" y="100" width="42.0202%" height="15" fill="rgb(243,110,44)"/><text x="58.0278%" y="110.50">profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (207 samples, 41.82%)</title><rect x="57.9798%" y="116" width="41.8182%" height="15" fill="rgb(222,74,54)"/><text x="58.2298%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>all (495 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>