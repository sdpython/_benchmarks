<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2230" onload="init(evt)" viewBox="0 0 1200 2230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="2230" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="2213.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="2213.00"> </text><g id="frames"><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (1 samples, 0.23%)</title><rect x="10" y="868" width="2" height="15" fill="rgb(216,156,38)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (1 samples, 0.23%)</title><rect x="10" y="884" width="2" height="15" fill="rgb(254,189,24)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (1 samples, 0.23%)</title><rect x="10" y="900" width="2" height="15" fill="rgb(230,86,19)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (1 samples, 0.23%)</title><rect x="10" y="916" width="2" height="15" fill="rgb(224,226,15)"/><text x="13.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="10" y="932" width="2" height="15" fill="rgb(217,191,41)"/><text x="13.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="10" y="948" width="2" height="15" fill="rgb(215,91,22)"/><text x="13.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="10" y="964" width="2" height="15" fill="rgb(217,8,45)"/><text x="13.00" y="974.50"></text></g><g><title>unicode_concatenate (python3.7) (1 samples, 0.23%)</title><rect x="10" y="980" width="2" height="15" fill="rgb(245,9,21)"/><text x="13.00" y="990.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (2 samples, 0.47%)</title><rect x="10" y="836" width="5" height="15" fill="rgb(247,84,13)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (2 samples, 0.47%)</title><rect x="10" y="852" width="5" height="15" fill="rgb(236,143,3)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (1 samples, 0.23%)</title><rect x="12" y="868" width="3" height="15" fill="rgb(238,147,3)"/><text x="15.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (1 samples, 0.23%)</title><rect x="12" y="884" width="3" height="15" fill="rgb(219,129,17)"/><text x="15.00" y="894.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (1 samples, 0.23%)</title><rect x="12" y="900" width="3" height="15" fill="rgb(252,178,36)"/><text x="15.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (1 samples, 0.23%)</title><rect x="12" y="916" width="3" height="15" fill="rgb(229,60,24)"/><text x="15.00" y="926.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (1 samples, 0.23%)</title><rect x="12" y="932" width="3" height="15" fill="rgb(218,154,26)"/><text x="15.00" y="942.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.23%)</title><rect x="12" y="948" width="3" height="15" fill="rgb(251,219,34)"/><text x="15.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.23%)</title><rect x="12" y="964" width="3" height="15" fill="rgb(252,1,11)"/><text x="15.00" y="974.50"></text></g><g><title>_legacy_cmpkey (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.23%)</title><rect x="12" y="980" width="3" height="15" fill="rgb(218,161,50)"/><text x="15.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="196" width="8" height="15" fill="rgb(237,66,29)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="212" width="8" height="15" fill="rgb(250,110,36)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="228" width="8" height="15" fill="rgb(222,165,39)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="244" width="8" height="15" fill="rgb(253,27,39)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="10" y="260" width="8" height="15" fill="rgb(219,45,30)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="276" width="8" height="15" fill="rgb(227,47,5)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (3 samples, 0.70%)</title><rect x="10" y="292" width="8" height="15" fill="rgb(246,102,47)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="308" width="8" height="15" fill="rgb(247,168,2)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="324" width="8" height="15" fill="rgb(238,23,30)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="340" width="8" height="15" fill="rgb(221,135,44)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="10" y="356" width="8" height="15" fill="rgb(240,171,10)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="372" width="8" height="15" fill="rgb(248,76,0)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (3 samples, 0.70%)</title><rect x="10" y="388" width="8" height="15" fill="rgb(253,20,9)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="404" width="8" height="15" fill="rgb(239,124,23)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="420" width="8" height="15" fill="rgb(224,212,45)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="436" width="8" height="15" fill="rgb(214,220,6)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="10" y="452" width="8" height="15" fill="rgb(220,80,5)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="468" width="8" height="15" fill="rgb(240,26,48)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (3 samples, 0.70%)</title><rect x="10" y="484" width="8" height="15" fill="rgb(250,209,48)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="500" width="8" height="15" fill="rgb(243,119,36)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="516" width="8" height="15" fill="rgb(253,81,28)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="532" width="8" height="15" fill="rgb(236,96,14)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="10" y="548" width="8" height="15" fill="rgb(230,166,37)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="564" width="8" height="15" fill="rgb(216,62,45)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (3 samples, 0.70%)</title><rect x="10" y="580" width="8" height="15" fill="rgb(241,192,24)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="596" width="8" height="15" fill="rgb(215,113,31)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="612" width="8" height="15" fill="rgb(235,29,40)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="628" width="8" height="15" fill="rgb(212,223,10)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="644" width="8" height="15" fill="rgb(208,23,21)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="660" width="8" height="15" fill="rgb(228,2,45)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="676" width="8" height="15" fill="rgb(254,223,32)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="10" y="692" width="8" height="15" fill="rgb(211,59,50)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="708" width="8" height="15" fill="rgb(240,227,11)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (3 samples, 0.70%)</title><rect x="10" y="724" width="8" height="15" fill="rgb(221,40,11)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="740" width="8" height="15" fill="rgb(247,81,14)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="756" width="8" height="15" fill="rgb(253,25,44)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="772" width="8" height="15" fill="rgb(247,212,13)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="10" y="788" width="8" height="15" fill="rgb(229,52,20)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="10" y="804" width="8" height="15" fill="rgb(205,52,46)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (3 samples, 0.70%)</title><rect x="10" y="820" width="8" height="15" fill="rgb(238,120,35)"/><text x="13.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="836" width="3" height="15" fill="rgb(206,41,31)"/><text x="18.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="852" width="3" height="15" fill="rgb(216,43,7)"/><text x="18.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="868" width="3" height="15" fill="rgb(219,168,34)"/><text x="18.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="15" y="884" width="3" height="15" fill="rgb(246,106,28)"/><text x="18.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="900" width="3" height="15" fill="rgb(253,75,11)"/><text x="18.00" y="910.50"></text></g><g><title>&lt;module&gt; (pkg_resources/_vendor/packaging/requirements.py) (1 samples, 0.23%)</title><rect x="15" y="916" width="3" height="15" fill="rgb(223,214,24)"/><text x="18.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="932" width="3" height="15" fill="rgb(213,205,29)"/><text x="18.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="948" width="3" height="15" fill="rgb(229,179,51)"/><text x="18.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="964" width="3" height="15" fill="rgb(231,94,20)"/><text x="18.00" y="974.50"></text></g><g><title>_load_backward_compatible (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="980" width="3" height="15" fill="rgb(242,49,46)"/><text x="18.00" y="990.50"></text></g><g><title>load_module (pkg_resources/extern/__init__.py) (1 samples, 0.23%)</title><rect x="15" y="996" width="3" height="15" fill="rgb(218,159,3)"/><text x="18.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="1012" width="3" height="15" fill="rgb(219,141,46)"/><text x="18.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="1028" width="3" height="15" fill="rgb(232,0,17)"/><text x="18.00" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="1044" width="3" height="15" fill="rgb(239,163,43)"/><text x="18.00" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="15" y="1060" width="3" height="15" fill="rgb(214,150,31)"/><text x="18.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="15" y="1076" width="3" height="15" fill="rgb(234,212,31)"/><text x="18.00" y="1086.50"></text></g><g><title>&lt;module&gt; (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.23%)</title><rect x="15" y="1092" width="3" height="15" fill="rgb(236,114,42)"/><text x="18.00" y="1102.50"></text></g><g><title>__init__ (pkg_resources/_vendor/pyparsing.py) (1 samples, 0.23%)</title><rect x="15" y="1108" width="3" height="15" fill="rgb(220,8,37)"/><text x="18.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="18" y="1124" width="3" height="15" fill="rgb(229,211,17)"/><text x="21.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="18" y="1140" width="3" height="15" fill="rgb(231,211,26)"/><text x="21.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="18" y="1156" width="3" height="15" fill="rgb(252,168,36)"/><text x="21.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="18" y="1172" width="3" height="15" fill="rgb(235,167,51)"/><text x="21.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="18" y="1188" width="3" height="15" fill="rgb(253,177,5)"/><text x="21.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py) (1 samples, 0.23%)</title><rect x="18" y="1204" width="3" height="15" fill="rgb(246,213,10)"/><text x="21.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="18" y="1220" width="3" height="15" fill="rgb(224,130,50)"/><text x="21.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="18" y="1236" width="3" height="15" fill="rgb(249,222,31)"/><text x="21.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="18" y="1252" width="3" height="15" fill="rgb(236,68,0)"/><text x="21.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="18" y="1268" width="3" height="15" fill="rgb(241,125,10)"/><text x="21.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="18" y="1284" width="3" height="15" fill="rgb(254,118,23)"/><text x="21.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_container.py) (1 samples, 0.23%)</title><rect x="18" y="1300" width="3" height="15" fill="rgb(248,83,19)"/><text x="21.00" y="1310.50"></text></g><g><title>_get_operation_list (skl2onnx/common/_container.py) (1 samples, 0.23%)</title><rect x="18" y="1316" width="3" height="15" fill="rgb(217,221,2)"/><text x="21.00" y="1326.50"></text></g><g><title>getsource (inspect.py) (1 samples, 0.23%)</title><rect x="18" y="1332" width="3" height="15" fill="rgb(223,30,23)"/><text x="21.00" y="1342.50"></text></g><g><title>getsourcelines (inspect.py) (1 samples, 0.23%)</title><rect x="18" y="1348" width="3" height="15" fill="rgb(214,170,54)"/><text x="21.00" y="1358.50"></text></g><g><title>getblock (inspect.py) (1 samples, 0.23%)</title><rect x="18" y="1364" width="3" height="15" fill="rgb(212,182,26)"/><text x="21.00" y="1374.50"></text></g><g><title>_tokenize (tokenize.py) (1 samples, 0.23%)</title><rect x="18" y="1380" width="3" height="15" fill="rgb(230,80,9)"/><text x="21.00" y="1390.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="484" width="5" height="15" fill="rgb(234,80,38)"/><text x="21.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="500" width="5" height="15" fill="rgb(218,90,1)"/><text x="21.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="516" width="5" height="15" fill="rgb(232,103,19)"/><text x="21.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="532" width="5" height="15" fill="rgb(228,223,52)"/><text x="21.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.47%)</title><rect x="18" y="548" width="5" height="15" fill="rgb(236,150,53)"/><text x="21.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="564" width="5" height="15" fill="rgb(251,204,14)"/><text x="21.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (2 samples, 0.47%)</title><rect x="18" y="580" width="5" height="15" fill="rgb(206,100,32)"/><text x="21.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="596" width="5" height="15" fill="rgb(249,92,8)"/><text x="21.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="612" width="5" height="15" fill="rgb(247,227,3)"/><text x="21.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="628" width="5" height="15" fill="rgb(216,214,16)"/><text x="21.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.47%)</title><rect x="18" y="644" width="5" height="15" fill="rgb(248,115,21)"/><text x="21.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="660" width="5" height="15" fill="rgb(230,130,20)"/><text x="21.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (2 samples, 0.47%)</title><rect x="18" y="676" width="5" height="15" fill="rgb(252,48,7)"/><text x="21.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="692" width="5" height="15" fill="rgb(242,182,18)"/><text x="21.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="708" width="5" height="15" fill="rgb(231,109,32)"/><text x="21.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="724" width="5" height="15" fill="rgb(230,27,13)"/><text x="21.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.47%)</title><rect x="18" y="740" width="5" height="15" fill="rgb(247,173,19)"/><text x="21.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="756" width="5" height="15" fill="rgb(225,205,51)"/><text x="21.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (2 samples, 0.47%)</title><rect x="18" y="772" width="5" height="15" fill="rgb(218,14,20)"/><text x="21.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="788" width="5" height="15" fill="rgb(220,159,0)"/><text x="21.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="804" width="5" height="15" fill="rgb(234,139,3)"/><text x="21.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="820" width="5" height="15" fill="rgb(250,79,11)"/><text x="21.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.47%)</title><rect x="18" y="836" width="5" height="15" fill="rgb(252,220,16)"/><text x="21.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="852" width="5" height="15" fill="rgb(228,208,7)"/><text x="21.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (2 samples, 0.47%)</title><rect x="18" y="868" width="5" height="15" fill="rgb(239,59,39)"/><text x="21.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="884" width="5" height="15" fill="rgb(210,212,46)"/><text x="21.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="900" width="5" height="15" fill="rgb(240,226,41)"/><text x="21.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="916" width="5" height="15" fill="rgb(207,58,14)"/><text x="21.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="932" width="5" height="15" fill="rgb(240,82,38)"/><text x="21.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="948" width="5" height="15" fill="rgb(228,81,24)"/><text x="21.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="964" width="5" height="15" fill="rgb(215,143,50)"/><text x="21.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.47%)</title><rect x="18" y="980" width="5" height="15" fill="rgb(253,187,23)"/><text x="21.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="996" width="5" height="15" fill="rgb(243,89,3)"/><text x="21.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (2 samples, 0.47%)</title><rect x="18" y="1012" width="5" height="15" fill="rgb(248,22,29)"/><text x="21.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="1028" width="5" height="15" fill="rgb(250,139,39)"/><text x="21.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="1044" width="5" height="15" fill="rgb(241,113,41)"/><text x="21.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="1060" width="5" height="15" fill="rgb(226,227,6)"/><text x="21.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.47%)</title><rect x="18" y="1076" width="5" height="15" fill="rgb(208,185,40)"/><text x="21.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="18" y="1092" width="5" height="15" fill="rgb(240,166,28)"/><text x="21.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (2 samples, 0.47%)</title><rect x="18" y="1108" width="5" height="15" fill="rgb(237,211,45)"/><text x="21.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1124" width="2" height="15" fill="rgb(241,33,29)"/><text x="24.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1140" width="2" height="15" fill="rgb(243,148,46)"/><text x="24.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1156" width="2" height="15" fill="rgb(237,97,45)"/><text x="24.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1172" width="2" height="15" fill="rgb(210,20,23)"/><text x="24.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1188" width="2" height="15" fill="rgb(238,172,38)"/><text x="24.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="21" y="1204" width="2" height="15" fill="rgb(206,199,34)"/><text x="24.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1220" width="2" height="15" fill="rgb(219,88,49)"/><text x="24.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (1 samples, 0.23%)</title><rect x="21" y="1236" width="2" height="15" fill="rgb(245,175,13)"/><text x="24.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1252" width="2" height="15" fill="rgb(213,209,14)"/><text x="24.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1268" width="2" height="15" fill="rgb(206,84,32)"/><text x="24.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1284" width="2" height="15" fill="rgb(221,47,52)"/><text x="24.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1300" width="2" height="15" fill="rgb(244,112,42)"/><text x="24.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1316" width="2" height="15" fill="rgb(238,16,36)"/><text x="24.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="21" y="1332" width="2" height="15" fill="rgb(213,7,25)"/><text x="24.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1348" width="2" height="15" fill="rgb(235,171,41)"/><text x="24.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (1 samples, 0.23%)</title><rect x="21" y="1364" width="2" height="15" fill="rgb(253,96,11)"/><text x="24.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1380" width="2" height="15" fill="rgb(217,197,7)"/><text x="24.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1396" width="2" height="15" fill="rgb(224,88,0)"/><text x="24.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1412" width="2" height="15" fill="rgb(217,61,19)"/><text x="24.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="21" y="1428" width="2" height="15" fill="rgb(237,67,32)"/><text x="24.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="21" y="1444" width="2" height="15" fill="rgb(213,62,33)"/><text x="24.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.23%)</title><rect x="21" y="1460" width="2" height="15" fill="rgb(225,95,9)"/><text x="24.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.23%)</title><rect x="21" y="1476" width="2" height="15" fill="rgb(246,153,31)"/><text x="24.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.23%)</title><rect x="21" y="1492" width="2" height="15" fill="rgb(251,63,31)"/><text x="24.00" y="1502.50"></text></g><g><title>0x7f7df82ed0e9 (?) (1 samples, 0.23%)</title><rect x="21" y="1508" width="2" height="15" fill="rgb(231,203,7)"/><text x="24.00" y="1518.50"></text></g><g><title>0x7f7df82d3bc1 (?) (1 samples, 0.23%)</title><rect x="21" y="1524" width="2" height="15" fill="rgb(237,22,44)"/><text x="24.00" y="1534.50"></text></g><g><title>0x7f7df83b1cc9 (?) (1 samples, 0.23%)</title><rect x="21" y="1540" width="2" height="15" fill="rgb(211,41,26)"/><text x="24.00" y="1550.50"></text></g><g><title>0x7f7df83b650b (?) (1 samples, 0.23%)</title><rect x="21" y="1556" width="2" height="15" fill="rgb(245,139,5)"/><text x="24.00" y="1566.50"></text></g><g><title>0x7f7df837918b (?) (1 samples, 0.23%)</title><rect x="21" y="1572" width="2" height="15" fill="rgb(234,216,39)"/><text x="24.00" y="1582.50"></text></g><g><title>0x7f7df82f9ede (?) (1 samples, 0.23%)</title><rect x="21" y="1588" width="2" height="15" fill="rgb(228,26,29)"/><text x="24.00" y="1598.50"></text></g><g><title>0x7f7df82f9bbd (?) (1 samples, 0.23%)</title><rect x="21" y="1604" width="2" height="15" fill="rgb(212,156,26)"/><text x="24.00" y="1614.50"></text></g><g><title>0x7f7df82f9be2 (?) (1 samples, 0.23%)</title><rect x="21" y="1620" width="2" height="15" fill="rgb(235,222,23)"/><text x="24.00" y="1630.50"></text></g><g><title>0x7f7df7d0d6f5 (?) (1 samples, 0.23%)</title><rect x="21" y="1636" width="2" height="15" fill="rgb(239,220,48)"/><text x="24.00" y="1646.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.23%)</title><rect x="21" y="1652" width="2" height="15" fill="rgb(248,102,50)"/><text x="24.00" y="1662.50"></text></g><g><title>0x7f7e082338a4 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="21" y="1668" width="2" height="15" fill="rgb(213,103,37)"/><text x="24.00" y="1678.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference_exports.py) (1 samples, 0.23%)</title><rect x="23" y="628" width="3" height="15" fill="rgb(238,205,5)"/><text x="26.00" y="638.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="23" y="644" width="3" height="15" fill="rgb(238,129,26)"/><text x="26.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="23" y="660" width="3" height="15" fill="rgb(247,187,8)"/><text x="26.00" y="670.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="23" y="676" width="3" height="15" fill="rgb(220,163,25)"/><text x="26.00" y="686.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="23" y="692" width="3" height="15" fill="rgb(231,170,8)"/><text x="26.00" y="702.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="23" y="708" width="3" height="15" fill="rgb(248,71,52)"/><text x="26.00" y="718.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="23" y="724" width="3" height="15" fill="rgb(226,87,45)"/><text x="26.00" y="734.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="23" y="740" width="3" height="15" fill="rgb(220,177,3)"/><text x="26.00" y="750.50"></text></g><g><title>&lt;module&gt; (onnx/numpy_helper.py) (1 samples, 0.23%)</title><rect x="23" y="756" width="3" height="15" fill="rgb(246,106,3)"/><text x="26.00" y="766.50"></text></g><g><title>system (platform.py) (1 samples, 0.23%)</title><rect x="23" y="772" width="3" height="15" fill="rgb(244,46,20)"/><text x="26.00" y="782.50"></text></g><g><title>uname (platform.py) (1 samples, 0.23%)</title><rect x="23" y="788" width="3" height="15" fill="rgb(213,105,44)"/><text x="26.00" y="798.50"></text></g><g><title>_syscmd_uname (platform.py) (1 samples, 0.23%)</title><rect x="23" y="804" width="3" height="15" fill="rgb(239,42,12)"/><text x="26.00" y="814.50"></text></g><g><title>popen (os.py) (1 samples, 0.23%)</title><rect x="23" y="820" width="3" height="15" fill="rgb(240,129,15)"/><text x="26.00" y="830.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="26" y="1860" width="3" height="15" fill="rgb(207,16,44)"/><text x="29.00" y="1870.50"></text></g><g><title>&lt;module&gt; (matplotlib/patches.py) (1 samples, 0.23%)</title><rect x="26" y="1876" width="3" height="15" fill="rgb(252,208,11)"/><text x="29.00" y="1886.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="26" y="1892" width="3" height="15" fill="rgb(205,155,20)"/><text x="29.00" y="1902.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="26" y="1908" width="3" height="15" fill="rgb(238,183,17)"/><text x="29.00" y="1918.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="26" y="1924" width="3" height="15" fill="rgb(208,49,52)"/><text x="29.00" y="1934.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="26" y="1940" width="3" height="15" fill="rgb(245,39,33)"/><text x="29.00" y="1950.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="26" y="1956" width="3" height="15" fill="rgb(246,202,8)"/><text x="29.00" y="1966.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="26" y="1972" width="3" height="15" fill="rgb(250,181,4)"/><text x="29.00" y="1982.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="26" y="1988" width="3" height="15" fill="rgb(213,122,3)"/><text x="29.00" y="1998.50"></text></g><g><title>&lt;module&gt; (matplotlib/lines.py) (1 samples, 0.23%)</title><rect x="26" y="2004" width="3" height="15" fill="rgb(213,211,25)"/><text x="29.00" y="2014.50"></text></g><g><title>kwdoc (matplotlib/artist.py) (1 samples, 0.23%)</title><rect x="26" y="2020" width="3" height="15" fill="rgb(221,52,43)"/><text x="29.00" y="2030.50"></text></g><g><title>pprint_setters (matplotlib/artist.py) (1 samples, 0.23%)</title><rect x="26" y="2036" width="3" height="15" fill="rgb(227,118,18)"/><text x="29.00" y="2046.50"></text></g><g><title>get_valid_values (matplotlib/artist.py) (1 samples, 0.23%)</title><rect x="26" y="2052" width="3" height="15" fill="rgb(205,108,20)"/><text x="29.00" y="2062.50"></text></g><g><title>search (re.py) (1 samples, 0.23%)</title><rect x="26" y="2068" width="3" height="15" fill="rgb(229,122,40)"/><text x="29.00" y="2078.50"></text></g><g><title>_compile (re.py) (1 samples, 0.23%)</title><rect x="26" y="2084" width="3" height="15" fill="rgb(235,207,42)"/><text x="29.00" y="2094.50"></text></g><g><title>compile (sre_compile.py) (1 samples, 0.23%)</title><rect x="26" y="2100" width="3" height="15" fill="rgb(251,148,42)"/><text x="29.00" y="2110.50"></text></g><g><title>parse (sre_parse.py) (1 samples, 0.23%)</title><rect x="26" y="2116" width="3" height="15" fill="rgb(230,145,50)"/><text x="29.00" y="2126.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.23%)</title><rect x="26" y="2132" width="3" height="15" fill="rgb(210,63,34)"/><text x="29.00" y="2142.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.23%)</title><rect x="26" y="2148" width="3" height="15" fill="rgb(233,32,11)"/><text x="29.00" y="2158.50"></text></g><g><title>closegroup (sre_parse.py) (1 samples, 0.23%)</title><rect x="26" y="2164" width="3" height="15" fill="rgb(214,227,26)"/><text x="29.00" y="2174.50"></text></g><g><title>getwidth (sre_parse.py) (1 samples, 0.23%)</title><rect x="26" y="2180" width="3" height="15" fill="rgb(244,224,14)"/><text x="29.00" y="2190.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1508" width="6" height="15" fill="rgb(206,143,44)"/><text x="29.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1524" width="6" height="15" fill="rgb(230,4,5)"/><text x="29.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1540" width="6" height="15" fill="rgb(252,196,35)"/><text x="29.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.47%)</title><rect x="26" y="1556" width="6" height="15" fill="rgb(206,16,17)"/><text x="29.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1572" width="6" height="15" fill="rgb(207,149,7)"/><text x="29.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py) (2 samples, 0.47%)</title><rect x="26" y="1588" width="6" height="15" fill="rgb(245,99,26)"/><text x="29.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1604" width="6" height="15" fill="rgb(213,182,24)"/><text x="29.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1620" width="6" height="15" fill="rgb(247,110,32)"/><text x="29.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1636" width="6" height="15" fill="rgb(225,157,16)"/><text x="29.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.47%)</title><rect x="26" y="1652" width="6" height="15" fill="rgb(252,138,14)"/><text x="29.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1668" width="6" height="15" fill="rgb(254,77,44)"/><text x="29.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/tools.py) (2 samples, 0.47%)</title><rect x="26" y="1684" width="6" height="15" fill="rgb(241,109,48)"/><text x="29.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1700" width="6" height="15" fill="rgb(228,157,6)"/><text x="29.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1716" width="6" height="15" fill="rgb(215,23,30)"/><text x="29.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1732" width="6" height="15" fill="rgb(243,164,42)"/><text x="29.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.47%)</title><rect x="26" y="1748" width="6" height="15" fill="rgb(237,71,37)"/><text x="29.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1764" width="6" height="15" fill="rgb(254,84,3)"/><text x="29.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/table.py) (2 samples, 0.47%)</title><rect x="26" y="1780" width="6" height="15" fill="rgb(216,117,44)"/><text x="29.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1796" width="6" height="15" fill="rgb(252,217,47)"/><text x="29.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1812" width="6" height="15" fill="rgb(216,210,52)"/><text x="29.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="26" y="1828" width="6" height="15" fill="rgb(234,9,52)"/><text x="29.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.47%)</title><rect x="26" y="1844" width="6" height="15" fill="rgb(227,70,1)"/><text x="29.00" y="1854.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="29" y="1860" width="3" height="15" fill="rgb(210,190,13)"/><text x="32.00" y="1870.50"></text></g><g><title>path_stats (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="29" y="1876" width="3" height="15" fill="rgb(232,43,23)"/><text x="32.00" y="1886.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="29" y="1892" width="3" height="15" fill="rgb(254,225,1)"/><text x="32.00" y="1902.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.23%)</title><rect x="29" y="1908" width="3" height="15" fill="rgb(206,6,5)"/><text x="32.00" y="1918.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 2.10%)</title><rect x="10" y="68" width="24" height="15" fill="rgb(207,113,28)"/><text x="13.00" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 2.10%)</title><rect x="10" y="84" width="24" height="15" fill="rgb(209,108,23)"/><text x="13.00" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 2.10%)</title><rect x="10" y="100" width="24" height="15" fill="rgb(212,0,31)"/><text x="13.00" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 2.10%)</title><rect x="10" y="116" width="24" height="15" fill="rgb(221,60,31)"/><text x="13.00" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 2.10%)</title><rect x="10" y="132" width="24" height="15" fill="rgb(224,101,28)"/><text x="13.00" y="142.50">_..</text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LinearRegression/bench_LinearRegression_default_m_reg.py) (9 samples, 2.10%)</title><rect x="10" y="148" width="24" height="15" fill="rgb(251,26,11)"/><text x="13.00" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 2.10%)</title><rect x="10" y="164" width="24" height="15" fill="rgb(252,193,14)"/><text x="13.00" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 2.10%)</title><rect x="10" y="180" width="24" height="15" fill="rgb(219,63,18)"/><text x="13.00" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="196" width="16" height="15" fill="rgb(238,112,3)"/><text x="21.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.40%)</title><rect x="18" y="212" width="16" height="15" fill="rgb(227,123,35)"/><text x="21.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="228" width="16" height="15" fill="rgb(223,95,37)"/><text x="21.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (6 samples, 1.40%)</title><rect x="18" y="244" width="16" height="15" fill="rgb(226,35,37)"/><text x="21.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="260" width="16" height="15" fill="rgb(253,158,18)"/><text x="21.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="276" width="16" height="15" fill="rgb(240,59,21)"/><text x="21.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="292" width="16" height="15" fill="rgb(205,220,17)"/><text x="21.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.40%)</title><rect x="18" y="308" width="16" height="15" fill="rgb(233,80,13)"/><text x="21.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="324" width="16" height="15" fill="rgb(224,212,51)"/><text x="21.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (6 samples, 1.40%)</title><rect x="18" y="340" width="16" height="15" fill="rgb(228,3,13)"/><text x="21.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="356" width="16" height="15" fill="rgb(240,136,20)"/><text x="21.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="372" width="16" height="15" fill="rgb(241,174,49)"/><text x="21.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="388" width="16" height="15" fill="rgb(233,38,15)"/><text x="21.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.40%)</title><rect x="18" y="404" width="16" height="15" fill="rgb(211,195,51)"/><text x="21.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="420" width="16" height="15" fill="rgb(220,167,41)"/><text x="21.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (6 samples, 1.40%)</title><rect x="18" y="436" width="16" height="15" fill="rgb(245,58,11)"/><text x="21.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="452" width="16" height="15" fill="rgb(244,36,17)"/><text x="21.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.40%)</title><rect x="18" y="468" width="16" height="15" fill="rgb(210,166,10)"/><text x="21.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.93%)</title><rect x="23" y="484" width="11" height="15" fill="rgb(243,185,3)"/><text x="26.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.93%)</title><rect x="23" y="500" width="11" height="15" fill="rgb(214,79,12)"/><text x="26.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.93%)</title><rect x="23" y="516" width="11" height="15" fill="rgb(250,117,24)"/><text x="26.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (4 samples, 0.93%)</title><rect x="23" y="532" width="11" height="15" fill="rgb(230,130,7)"/><text x="26.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.93%)</title><rect x="23" y="548" width="11" height="15" fill="rgb(211,138,51)"/><text x="26.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.93%)</title><rect x="23" y="564" width="11" height="15" fill="rgb(232,161,17)"/><text x="26.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.93%)</title><rect x="23" y="580" width="11" height="15" fill="rgb(206,200,9)"/><text x="26.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.93%)</title><rect x="23" y="596" width="11" height="15" fill="rgb(227,108,21)"/><text x="26.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.93%)</title><rect x="23" y="612" width="11" height="15" fill="rgb(227,95,14)"/><text x="26.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (3 samples, 0.70%)</title><rect x="26" y="628" width="8" height="15" fill="rgb(249,85,17)"/><text x="29.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="644" width="8" height="15" fill="rgb(213,137,19)"/><text x="29.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="660" width="8" height="15" fill="rgb(224,228,0)"/><text x="29.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="676" width="8" height="15" fill="rgb(244,191,12)"/><text x="29.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="26" y="692" width="8" height="15" fill="rgb(244,183,34)"/><text x="29.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="708" width="8" height="15" fill="rgb(225,104,30)"/><text x="29.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (3 samples, 0.70%)</title><rect x="26" y="724" width="8" height="15" fill="rgb(225,106,34)"/><text x="29.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="740" width="8" height="15" fill="rgb(253,120,34)"/><text x="29.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="756" width="8" height="15" fill="rgb(232,112,32)"/><text x="29.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="772" width="8" height="15" fill="rgb(240,153,6)"/><text x="29.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="26" y="788" width="8" height="15" fill="rgb(233,216,41)"/><text x="29.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="804" width="8" height="15" fill="rgb(205,33,46)"/><text x="29.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (3 samples, 0.70%)</title><rect x="26" y="820" width="8" height="15" fill="rgb(237,133,0)"/><text x="29.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="836" width="8" height="15" fill="rgb(219,156,47)"/><text x="29.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="852" width="8" height="15" fill="rgb(213,169,19)"/><text x="29.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="868" width="8" height="15" fill="rgb(207,12,51)"/><text x="29.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="26" y="884" width="8" height="15" fill="rgb(229,61,37)"/><text x="29.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="900" width="8" height="15" fill="rgb(232,166,5)"/><text x="29.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (3 samples, 0.70%)</title><rect x="26" y="916" width="8" height="15" fill="rgb(225,51,2)"/><text x="29.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="932" width="8" height="15" fill="rgb(246,99,43)"/><text x="29.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="948" width="8" height="15" fill="rgb(240,41,50)"/><text x="29.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="964" width="8" height="15" fill="rgb(254,14,41)"/><text x="29.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="26" y="980" width="8" height="15" fill="rgb(234,117,50)"/><text x="29.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="996" width="8" height="15" fill="rgb(223,98,9)"/><text x="29.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (3 samples, 0.70%)</title><rect x="26" y="1012" width="8" height="15" fill="rgb(250,100,53)"/><text x="29.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1028" width="8" height="15" fill="rgb(222,69,44)"/><text x="29.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1044" width="8" height="15" fill="rgb(253,68,3)"/><text x="29.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1060" width="8" height="15" fill="rgb(249,162,7)"/><text x="29.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="26" y="1076" width="8" height="15" fill="rgb(254,119,34)"/><text x="29.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1092" width="8" height="15" fill="rgb(228,107,18)"/><text x="29.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (3 samples, 0.70%)</title><rect x="26" y="1108" width="8" height="15" fill="rgb(246,174,11)"/><text x="29.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1124" width="8" height="15" fill="rgb(229,79,52)"/><text x="29.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1140" width="8" height="15" fill="rgb(231,224,50)"/><text x="29.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1156" width="8" height="15" fill="rgb(235,202,11)"/><text x="29.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="26" y="1172" width="8" height="15" fill="rgb(253,158,24)"/><text x="29.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1188" width="8" height="15" fill="rgb(207,18,24)"/><text x="29.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (3 samples, 0.70%)</title><rect x="26" y="1204" width="8" height="15" fill="rgb(216,210,10)"/><text x="29.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1220" width="8" height="15" fill="rgb(211,101,0)"/><text x="29.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1236" width="8" height="15" fill="rgb(246,154,27)"/><text x="29.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1252" width="8" height="15" fill="rgb(221,13,32)"/><text x="29.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="26" y="1268" width="8" height="15" fill="rgb(234,210,29)"/><text x="29.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1284" width="8" height="15" fill="rgb(222,48,11)"/><text x="29.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (3 samples, 0.70%)</title><rect x="26" y="1300" width="8" height="15" fill="rgb(238,48,21)"/><text x="29.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1316" width="8" height="15" fill="rgb(211,183,6)"/><text x="29.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1332" width="8" height="15" fill="rgb(211,66,37)"/><text x="29.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1348" width="8" height="15" fill="rgb(252,146,6)"/><text x="29.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="26" y="1364" width="8" height="15" fill="rgb(241,57,49)"/><text x="29.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1380" width="8" height="15" fill="rgb(226,150,48)"/><text x="29.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (3 samples, 0.70%)</title><rect x="26" y="1396" width="8" height="15" fill="rgb(233,92,45)"/><text x="29.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1412" width="8" height="15" fill="rgb(247,30,53)"/><text x="29.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1428" width="8" height="15" fill="rgb(214,219,24)"/><text x="29.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1444" width="8" height="15" fill="rgb(222,213,49)"/><text x="29.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.70%)</title><rect x="26" y="1460" width="8" height="15" fill="rgb(252,221,1)"/><text x="29.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.70%)</title><rect x="26" y="1476" width="8" height="15" fill="rgb(247,103,1)"/><text x="29.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (3 samples, 0.70%)</title><rect x="26" y="1492" width="8" height="15" fill="rgb(225,91,34)"/><text x="29.00" y="1502.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1508" width="2" height="15" fill="rgb(248,147,0)"/><text x="35.00" y="1518.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1524" width="2" height="15" fill="rgb(230,24,16)"/><text x="35.00" y="1534.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1540" width="2" height="15" fill="rgb(222,94,14)"/><text x="35.00" y="1550.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1556" width="2" height="15" fill="rgb(237,1,52)"/><text x="35.00" y="1566.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1572" width="2" height="15" fill="rgb(211,50,30)"/><text x="35.00" y="1582.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="32" y="1588" width="2" height="15" fill="rgb(227,178,4)"/><text x="35.00" y="1598.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1604" width="2" height="15" fill="rgb(236,2,3)"/><text x="35.00" y="1614.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/converter.py) (1 samples, 0.23%)</title><rect x="32" y="1620" width="2" height="15" fill="rgb(242,159,53)"/><text x="35.00" y="1630.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1636" width="2" height="15" fill="rgb(242,221,21)"/><text x="35.00" y="1646.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1652" width="2" height="15" fill="rgb(230,91,40)"/><text x="35.00" y="1662.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1668" width="2" height="15" fill="rgb(229,217,34)"/><text x="35.00" y="1678.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="32" y="1684" width="2" height="15" fill="rgb(206,100,3)"/><text x="35.00" y="1694.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1700" width="2" height="15" fill="rgb(238,227,11)"/><text x="35.00" y="1710.50"></text></g><g><title>&lt;module&gt; (matplotlib/dates.py) (1 samples, 0.23%)</title><rect x="32" y="1716" width="2" height="15" fill="rgb(227,49,46)"/><text x="35.00" y="1726.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1732" width="2" height="15" fill="rgb(225,81,4)"/><text x="35.00" y="1742.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1748" width="2" height="15" fill="rgb(254,96,31)"/><text x="35.00" y="1758.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="32" y="1764" width="2" height="15" fill="rgb(243,102,26)"/><text x="35.00" y="1774.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="32" y="1780" width="2" height="15" fill="rgb(229,200,51)"/><text x="35.00" y="1790.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="32" y="1796" width="2" height="15" fill="rgb(213,132,21)"/><text x="35.00" y="1806.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="32" y="1812" width="2" height="15" fill="rgb(229,27,15)"/><text x="35.00" y="1822.50"></text></g><g><title>0x7f7e08231eb0 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="40" y="180" width="3" height="15" fill="rgb(248,207,25)"/><text x="43.00" y="190.50"></text></g><g><title>0x7f7e08230b9b (libc-2.29.so) (1 samples, 0.23%)</title><rect x="40" y="196" width="3" height="15" fill="rgb(233,138,19)"/><text x="43.00" y="206.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.47%)</title><rect x="40" y="116" width="5" height="15" fill="rgb(239,118,1)"/><text x="43.00" y="126.50"></text></g><g><title>npy_free_cache (alloc.c) (2 samples, 0.47%)</title><rect x="40" y="132" width="5" height="15" fill="rgb(243,6,31)"/><text x="43.00" y="142.50"></text></g><g><title>_npy_free_cache (alloc.c) (2 samples, 0.47%)</title><rect x="40" y="148" width="5" height="15" fill="rgb(213,7,12)"/><text x="43.00" y="158.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (2 samples, 0.47%)</title><rect x="40" y="164" width="5" height="15" fill="rgb(240,215,45)"/><text x="43.00" y="174.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.23%)</title><rect x="43" y="180" width="2" height="15" fill="rgb(213,49,12)"/><text x="46.00" y="190.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.47%)</title><rect x="89" y="180" width="6" height="15" fill="rgb(251,135,2)"/><text x="92.00" y="190.50"></text></g><g><title>0x7f7dc62e1ff9 (?) (1 samples, 0.23%)</title><rect x="117" y="212" width="3" height="15" fill="rgb(243,158,52)"/><text x="120.00" y="222.50"></text></g><g><title>0x7f7dc62dcef6 (?) (1 samples, 0.23%)</title><rect x="117" y="228" width="3" height="15" fill="rgb(225,225,50)"/><text x="120.00" y="238.50"></text></g><g><title>0x7f7dc62d1962 (?) (1 samples, 0.23%)</title><rect x="117" y="244" width="3" height="15" fill="rgb(243,229,50)"/><text x="120.00" y="254.50"></text></g><g><title>0x7f7dc63057a7 (?) (1 samples, 0.23%)</title><rect x="117" y="260" width="3" height="15" fill="rgb(224,150,6)"/><text x="120.00" y="270.50"></text></g><g><title>0x7f7dc6305379 (?) (1 samples, 0.23%)</title><rect x="117" y="276" width="3" height="15" fill="rgb(254,171,21)"/><text x="120.00" y="286.50"></text></g><g><title>0x7f7dc67638b8 (?) (1 samples, 0.23%)</title><rect x="117" y="292" width="3" height="15" fill="rgb(241,50,45)"/><text x="120.00" y="302.50"></text></g><g><title>0x7f7dc6761c7f (?) (1 samples, 0.23%)</title><rect x="117" y="308" width="3" height="15" fill="rgb(248,100,27)"/><text x="120.00" y="318.50"></text></g><g><title>0x7f7dc677499c (?) (1 samples, 0.23%)</title><rect x="117" y="324" width="3" height="15" fill="rgb(213,177,19)"/><text x="120.00" y="334.50"></text></g><g><title>0x7f7dc645bdd0 (?) (1 samples, 0.23%)</title><rect x="117" y="340" width="3" height="15" fill="rgb(234,82,42)"/><text x="120.00" y="350.50"></text></g><g><title>0x7f7e08231bc0 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="117" y="356" width="3" height="15" fill="rgb(234,190,49)"/><text x="120.00" y="366.50"></text></g><g><title>pybind11::detail::function_call::~function_call [clone .lto_priv.656] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="120" y="244" width="3" height="15" fill="rgb(244,132,51)"/><text x="123.00" y="254.50"></text></g><g><title>0x7f7e08231900 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="120" y="260" width="3" height="15" fill="rgb(207,17,18)"/><text x="123.00" y="270.50"></text></g><g><title>pybind11::detail::loader_life_support::~loader_life_support [clone .constprop.289] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="123" y="244" width="2" height="15" fill="rgb(243,191,26)"/><text x="126.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py) (3 samples, 0.70%)</title><rect x="120" y="212" width="8" height="15" fill="rgb(213,90,6)"/><text x="123.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.70%)</title><rect x="120" y="228" width="8" height="15" fill="rgb(220,83,4)"/><text x="123.00" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg const*, &gt;(pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; (*)(onnxruntime::NodeArg const*), const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="125" y="244" width="3" height="15" fill="rgb(210,95,44)"/><text x="128.00" y="254.50"></text></g><g><title>onnxruntime::NodeArg::Name[abi:cxx11] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="125" y="260" width="3" height="15" fill="rgb(213,173,36)"/><text x="128.00" y="270.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.23%)</title><rect x="134" y="260" width="2" height="15" fill="rgb(227,65,7)"/><text x="137.00" y="270.50"></text></g><g><title>0x7f7e08231938 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="142" y="276" width="3" height="15" fill="rgb(227,81,46)"/><text x="145.00" y="286.50"></text></g><g><title>0x7f7e08233033 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="147" y="340" width="3" height="15" fill="rgb(240,116,14)"/><text x="150.00" y="350.50"></text></g><g><title>0x7f7e08233077 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="150" y="340" width="3" height="15" fill="rgb(219,200,34)"/><text x="153.00" y="350.50"></text></g><g><title>onnxruntime::FeedsFetchesManager::FeedsFetchesManager (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.93%)</title><rect x="145" y="292" width="11" height="15" fill="rgb(228,64,22)"/><text x="148.00" y="302.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.93%)</title><rect x="145" y="308" width="11" height="15" fill="rgb(242,145,7)"/><text x="148.00" y="318.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.93%)</title><rect x="145" y="324" width="11" height="15" fill="rgb(232,0,22)"/><text x="148.00" y="334.50"></text></g><g><title>0x7f7e0823380d (libc-2.29.so) (1 samples, 0.23%)</title><rect x="153" y="340" width="3" height="15" fill="rgb(209,152,43)"/><text x="156.00" y="350.50"></text></g><g><title>onnxruntime::IExecutionProvider::OnRunStart (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="156" y="292" width="2" height="15" fill="rgb(236,140,10)"/><text x="159.00" y="302.50"></text></g><g><title>onnxruntime::InferenceSession::ValidateInputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="158" y="292" width="3" height="15" fill="rgb(213,89,21)"/><text x="161.00" y="302.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="164" y="356" width="3" height="15" fill="rgb(240,30,12)"/><text x="167.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="164" y="372" width="3" height="15" fill="rgb(240,120,20)"/><text x="167.00" y="382.50"></text></g><g><title>onnxruntime::SessionState::GetNodeIndexInfo (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="167" y="356" width="2" height="15" fill="rgb(219,212,0)"/><text x="170.00" y="366.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.93%)</title><rect x="161" y="340" width="11" height="15" fill="rgb(251,200,2)"/><text x="164.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.23%)</title><rect x="169" y="356" width="3" height="15" fill="rgb(240,0,20)"/><text x="172.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.23%)</title><rect x="169" y="372" width="3" height="15" fill="rgb(238,216,39)"/><text x="172.00" y="382.50"></text></g><g><title>0x7f7dc62a8850 (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.70%)</title><rect x="271" y="356" width="9" height="15" fill="rgb(221,151,26)"/><text x="274.00" y="366.50"></text></g><g><title>0x7f7df7cfe7a0 (libstdc++.so.6.0.28) (1 samples, 0.23%)</title><rect x="280" y="356" width="2" height="15" fill="rgb(252,227,18)"/><text x="283.00" y="366.50"></text></g><g><title>0x7f7e08231925 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="282" y="356" width="3" height="15" fill="rgb(246,178,31)"/><text x="285.00" y="366.50"></text></g><g><title>0x7f7e08231929 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="285" y="356" width="3" height="15" fill="rgb(235,97,18)"/><text x="288.00" y="366.50"></text></g><g><title>0x7f7e08231945 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="288" y="356" width="3" height="15" fill="rgb(206,125,54)"/><text x="291.00" y="366.50"></text></g><g><title>0x7f7e0823195e (libc-2.29.so) (1 samples, 0.23%)</title><rect x="291" y="356" width="2" height="15" fill="rgb(239,32,0)"/><text x="294.00" y="366.50"></text></g><g><title>0x7f7e08231965 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="293" y="356" width="3" height="15" fill="rgb(218,92,19)"/><text x="296.00" y="366.50"></text></g><g><title>0x7f7e0823196a (libc-2.29.so) (1 samples, 0.23%)</title><rect x="296" y="356" width="3" height="15" fill="rgb(230,197,4)"/><text x="299.00" y="366.50"></text></g><g><title>0x7f7e08231971 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="299" y="356" width="3" height="15" fill="rgb(206,119,24)"/><text x="302.00" y="366.50"></text></g><g><title>0x7f7e0823197c (libc-2.29.so) (1 samples, 0.23%)</title><rect x="302" y="356" width="3" height="15" fill="rgb(239,73,50)"/><text x="305.00" y="366.50"></text></g><g><title>0x7f7e08231991 (libc-2.29.so) (6 samples, 1.40%)</title><rect x="305" y="356" width="16" height="15" fill="rgb(239,192,24)"/><text x="308.00" y="366.50"></text></g><g><title>0x7f7e08231998 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="321" y="356" width="3" height="15" fill="rgb(253,119,43)"/><text x="324.00" y="366.50"></text></g><g><title>0x7f7e08231a41 (libc-2.29.so) (4 samples, 0.93%)</title><rect x="324" y="356" width="11" height="15" fill="rgb(250,202,47)"/><text x="327.00" y="366.50"></text></g><g><title>0x7f7e08231a4f (libc-2.29.so) (1 samples, 0.23%)</title><rect x="335" y="356" width="3" height="15" fill="rgb(227,180,40)"/><text x="338.00" y="366.50"></text></g><g><title>0x7f7e08231bc0 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="338" y="356" width="2" height="15" fill="rgb(234,84,18)"/><text x="341.00" y="366.50"></text></g><g><title>0x7f7e08231bd4 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="340" y="356" width="3" height="15" fill="rgb(249,56,20)"/><text x="343.00" y="366.50"></text></g><g><title>0x7f7e08231bd8 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="343" y="356" width="3" height="15" fill="rgb(220,209,20)"/><text x="346.00" y="366.50"></text></g><g><title>0x7f7e08251d50 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="346" y="356" width="3" height="15" fill="rgb(215,88,47)"/><text x="349.00" y="366.50"></text></g><g><title>0x7f7e08251d97 (libc-2.29.so) (2 samples, 0.47%)</title><rect x="349" y="356" width="5" height="15" fill="rgb(224,102,7)"/><text x="352.00" y="366.50"></text></g><g><title>0x7f7e08251dbf (libc-2.29.so) (1 samples, 0.23%)</title><rect x="354" y="356" width="3" height="15" fill="rgb(217,102,34)"/><text x="357.00" y="366.50"></text></g><g><title>free (libc-2.29.so) (10 samples, 2.34%)</title><rect x="357" y="356" width="27" height="15" fill="rgb(228,67,17)"/><text x="360.00" y="366.50">f..</text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="390" y="468" width="3" height="15" fill="rgb(212,63,20)"/><text x="393.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::RoundedBytes (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="390" y="484" width="3" height="15" fill="rgb(211,207,28)"/><text x="393.00" y="494.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.93%)</title><rect x="384" y="356" width="11" height="15" fill="rgb(252,216,1)"/><text x="387.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.93%)</title><rect x="384" y="372" width="11" height="15" fill="rgb(224,18,54)"/><text x="387.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.93%)</title><rect x="384" y="388" width="11" height="15" fill="rgb(240,174,9)"/><text x="387.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.93%)</title><rect x="384" y="404" width="11" height="15" fill="rgb(232,143,4)"/><text x="387.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.70%)</title><rect x="387" y="420" width="8" height="15" fill="rgb(229,154,14)"/><text x="390.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.70%)</title><rect x="387" y="436" width="8" height="15" fill="rgb(215,139,1)"/><text x="390.00" y="446.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.47%)</title><rect x="390" y="452" width="5" height="15" fill="rgb(208,151,42)"/><text x="393.00" y="462.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="393" y="468" width="2" height="15" fill="rgb(227,99,9)"/><text x="396.00" y="478.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::operator= (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="393" y="484" width="2" height="15" fill="rgb(215,121,43)"/><text x="396.00" y="494.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.23%)</title><rect x="393" y="500" width="2" height="15" fill="rgb(210,229,42)"/><text x="396.00" y="510.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.23%)</title><rect x="393" y="516" width="2" height="15" fill="rgb(254,34,49)"/><text x="396.00" y="526.50"></text></g><g><title>operator delete (libstdc++.so.6.0.28) (1 samples, 0.23%)</title><rect x="395" y="356" width="3" height="15" fill="rgb(223,42,1)"/><text x="398.00" y="366.50"></text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (112 samples, 26.17%)</title><rect x="161" y="308" width="309" height="15" fill="rgb(238,162,47)"/><text x="164.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onn..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (112 samples, 26.17%)</title><rect x="161" y="324" width="309" height="15" fill="rgb(247,225,23)"/><text x="164.00" y="334.50">onnxruntime::SequentialExecutor::Execute ..</text></g><g><title>onnxruntime::ml::LinearRegressor&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (108 samples, 25.23%)</title><rect x="172" y="340" width="298" height="15" fill="rgb(205,112,12)"/><text x="175.00" y="350.50">onnxruntime::ml::LinearRegressor&lt;float&gt;:..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 6.07%)</title><rect x="398" y="356" width="72" height="15" fill="rgb(241,113,34)"/><text x="401.00" y="366.50">std::vec..</text></g><g><title>operator new (libstdc++.so.6.0.28) (17 samples, 3.97%)</title><rect x="423" y="372" width="47" height="15" fill="rgb(238,101,14)"/><text x="426.00" y="382.50">oper..</text></g><g><title>malloc (libc-2.29.so) (13 samples, 3.04%)</title><rect x="434" y="388" width="36" height="15" fill="rgb(208,217,28)"/><text x="437.00" y="398.50">mal..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (122 samples, 28.50%)</title><rect x="136" y="260" width="337" height="15" fill="rgb(245,114,23)"/><text x="139.00" y="270.50">onnxruntime::InferenceSession::Run (onnxrunti..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (119 samples, 27.80%)</title><rect x="145" y="276" width="328" height="15" fill="rgb(241,196,44)"/><text x="148.00" y="286.50">onnxruntime::InferenceSession::Run (onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (113 samples, 26.40%)</title><rect x="161" y="292" width="312" height="15" fill="rgb(230,109,31)"/><text x="164.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxrunt..</text></g><g><title>onnxruntime::utils::InitializeFeedFetchCopyInfo (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="470" y="308" width="3" height="15" fill="rgb(236,3,1)"/><text x="473.00" y="318.50"></text></g><g><title>onnxruntime::utils::ProviderIsCpuBased (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="470" y="324" width="3" height="15" fill="rgb(221,89,14)"/><text x="473.00" y="334.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (libstdc++.so.6.0.28) (1 samples, 0.23%)</title><rect x="470" y="340" width="3" height="15" fill="rgb(240,132,16)"/><text x="473.00" y="350.50"></text></g><g><title>0x7f7e0830f130 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="470" y="356" width="3" height="15" fill="rgb(242,145,6)"/><text x="473.00" y="366.50"></text></g><g><title>onnxruntime::python::CreateTensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.70%)</title><rect x="481" y="276" width="8" height="15" fill="rgb(207,103,19)"/><text x="484.00" y="286.50"></text></g><g><title>0x7f7e08231902 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="486" y="292" width="3" height="15" fill="rgb(231,172,44)"/><text x="489.00" y="302.50"></text></g><g><title>onnxruntime::python::CreateGenericMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 1.64%)</title><rect x="473" y="260" width="19" height="15" fill="rgb(220,73,30)"/><text x="476.00" y="270.50"></text></g><g><title>std::__shared_ptr&lt;onnxruntime::IAllocator, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr [clone .localalias.84] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="489" y="276" width="3" height="15" fill="rgb(209,69,12)"/><text x="492.00" y="286.50"></text></g><g><title>0x7f7e08251d94 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="495" y="276" width="2" height="15" fill="rgb(227,16,32)"/><text x="498.00" y="286.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.23%)</title><rect x="500" y="308" width="3" height="15" fill="rgb(222,119,34)"/><text x="503.00" y="318.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (135 samples, 31.54%)</title><rect x="134" y="244" width="372" height="15" fill="rgb(222,219,34)"/><text x="137.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::mo..</text></g><g><title>onnxruntime::python::GetPyObjFromTensor [clone .constprop.374] (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.17%)</title><rect x="492" y="260" width="14" height="15" fill="rgb(245,128,33)"/><text x="495.00" y="270.50"></text></g><g><title>PyArray_New (ctors.c) (3 samples, 0.70%)</title><rect x="497" y="276" width="9" height="15" fill="rgb(239,205,9)"/><text x="500.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.47%)</title><rect x="500" y="292" width="6" height="15" fill="rgb(208,117,35)"/><text x="503.00" y="302.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.23%)</title><rect x="503" y="308" width="3" height="15" fill="rgb(251,181,0)"/><text x="506.00" y="318.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.23%)</title><rect x="503" y="324" width="3" height="15" fill="rgb(237,164,23)"/><text x="506.00" y="334.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.23%)</title><rect x="503" y="340" width="3" height="15" fill="rgb(206,46,10)"/><text x="506.00" y="350.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.23%)</title><rect x="503" y="356" width="3" height="15" fill="rgb(224,147,40)"/><text x="506.00" y="366.50"></text></g><g><title>0x7f7e08233028 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="503" y="372" width="3" height="15" fill="rgb(232,42,5)"/><text x="506.00" y="382.50"></text></g><g><title>0x7f7e08230bab (libc-2.29.so) (1 samples, 0.23%)</title><rect x="503" y="388" width="3" height="15" fill="rgb(227,41,27)"/><text x="506.00" y="398.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (168 samples, 39.25%)</title><rect x="45" y="132" width="464" height="15" fill="rgb(238,83,25)"/><text x="48.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (165 samples, 38.55%)</title><rect x="54" y="148" width="455" height="15" fill="rgb(253,136,31)"/><text x="57.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (161 samples, 37.62%)</title><rect x="65" y="164" width="444" height="15" fill="rgb(254,68,23)"/><text x="68.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (150 samples, 35.05%)</title><rect x="95" y="180" width="414" height="15" fill="rgb(235,195,52)"/><text x="98.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (147 samples, 34.35%)</title><rect x="103" y="196" width="406" height="15" fill="rgb(224,184,53)"/><text x="106.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (138 samples, 32.24%)</title><rect x="128" y="212" width="381" height="15" fill="rgb(215,222,35)"/><text x="131.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/cap..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 31.78%)</title><rect x="134" y="228" width="375" height="15" fill="rgb(243,85,1)"/><text x="137.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntim..</text></g><g><title>pybind11::list::list [clone .lto_priv.504] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.23%)</title><rect x="506" y="244" width="3" height="15" fill="rgb(248,120,48)"/><text x="509.00" y="254.50"></text></g><g><title>profile_ort (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (173 samples, 40.42%)</title><rect x="34" y="68" width="477" height="15" fill="rgb(253,211,40)"/><text x="37.00" y="78.50">profile_ort (bench_LinearRegression_default_m_reg_1000_4_12_float..</text></g><g><title>setup_profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (173 samples, 40.42%)</title><rect x="34" y="84" width="477" height="15" fill="rgb(224,89,54)"/><text x="37.00" y="94.50">setup_profile (bench_LinearRegression_default_m_reg_1000_4_12_flo..</text></g><g><title>profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (173 samples, 40.42%)</title><rect x="34" y="100" width="477" height="15" fill="rgb(216,115,41)"/><text x="37.00" y="110.50">profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (169 samples, 39.49%)</title><rect x="45" y="116" width="466" height="15" fill="rgb(233,130,26)"/><text x="48.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>unicode_concatenate (python3.7) (1 samples, 0.23%)</title><rect x="509" y="132" width="2" height="15" fill="rgb(208,113,42)"/><text x="512.00" y="142.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.70%)</title><rect x="520" y="116" width="8" height="15" fill="rgb(208,202,31)"/><text x="523.00" y="126.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (3 samples, 0.70%)</title><rect x="520" y="132" width="8" height="15" fill="rgb(231,112,25)"/><text x="523.00" y="142.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.47%)</title><rect x="522" y="148" width="6" height="15" fill="rgb(254,53,9)"/><text x="525.00" y="158.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.70%)</title><rect x="569" y="180" width="8" height="15" fill="rgb(248,220,8)"/><text x="572.00" y="190.50"></text></g><g><title>0x7f7e08252120 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="602" y="196" width="3" height="15" fill="rgb(246,126,20)"/><text x="605.00" y="206.50"></text></g><g><title>0x7f7e0825214e (libc-2.29.so) (1 samples, 0.23%)</title><rect x="619" y="244" width="3" height="15" fill="rgb(244,97,25)"/><text x="622.00" y="254.50"></text></g><g><title>PyArray_ObjectType (convert_datatype.c) (1 samples, 0.23%)</title><rect x="638" y="324" width="3" height="15" fill="rgb(216,72,17)"/><text x="641.00" y="334.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (1 samples, 0.23%)</title><rect x="638" y="340" width="3" height="15" fill="rgb(216,134,46)"/><text x="641.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (1 samples, 0.23%)</title><rect x="638" y="356" width="3" height="15" fill="rgb(229,125,52)"/><text x="641.00" y="366.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.23%)</title><rect x="638" y="372" width="3" height="15" fill="rgb(253,77,25)"/><text x="641.00" y="382.50"></text></g><g><title>0x7f7e082520f9 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="649" y="340" width="3" height="15" fill="rgb(250,74,1)"/><text x="652.00" y="350.50"></text></g><g><title>blas_memory_alloc (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.23%)</title><rect x="652" y="372" width="3" height="15" fill="rgb(206,38,2)"/><text x="655.00" y="382.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.23%)</title><rect x="652" y="388" width="3" height="15" fill="rgb(235,9,36)"/><text x="655.00" y="398.50"></text></g><g><title>gemv (cblasfuncs.c) (5 samples, 1.17%)</title><rect x="652" y="340" width="14" height="15" fill="rgb(212,17,30)"/><text x="655.00" y="350.50"></text></g><g><title>cblas_sgemv (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 1.17%)</title><rect x="652" y="356" width="14" height="15" fill="rgb(235,176,46)"/><text x="655.00" y="366.50"></text></g><g><title>sgemv_t_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.93%)</title><rect x="655" y="372" width="11" height="15" fill="rgb(220,224,54)"/><text x="658.00" y="382.50"></text></g><g><title>sgemv_kernel_4x4 (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.47%)</title><rect x="660" y="388" width="6" height="15" fill="rgb(237,34,41)"/><text x="663.00" y="398.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.23%)</title><rect x="666" y="388" width="2" height="15" fill="rgb(222,87,43)"/><text x="669.00" y="398.50"></text></g><g><title>0x7f7e074545b0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.23%)</title><rect x="668" y="420" width="3" height="15" fill="rgb(207,59,44)"/><text x="671.00" y="430.50"></text></g><g><title>0x7f7e08232b68 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="674" y="452" width="3" height="15" fill="rgb(248,45,4)"/><text x="677.00" y="462.50"></text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py) (21 samples, 4.91%)</title><rect x="622" y="244" width="57" height="15" fill="rgb(224,131,13)"/><text x="625.00" y="254.50">numpy_..</text></g><g><title>dot (&lt;__array_function__ internals&gt;) (19 samples, 4.44%)</title><rect x="627" y="260" width="52" height="15" fill="rgb(210,219,49)"/><text x="630.00" y="270.50">dot (..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (17 samples, 3.97%)</title><rect x="633" y="276" width="46" height="15" fill="rgb(233,84,44)"/><text x="636.00" y="286.50">arra..</text></g><g><title>array_matrixproduct (multiarraymodule.c) (17 samples, 3.97%)</title><rect x="633" y="292" width="46" height="15" fill="rgb(254,81,14)"/><text x="636.00" y="302.50">arra..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c) (16 samples, 3.74%)</title><rect x="635" y="308" width="44" height="15" fill="rgb(238,229,39)"/><text x="638.00" y="318.50">PyAr..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c) (14 samples, 3.27%)</title><rect x="641" y="324" width="38" height="15" fill="rgb(249,65,29)"/><text x="644.00" y="334.50">cbl..</text></g><g><title>new_array_for_sum (common.c) (5 samples, 1.17%)</title><rect x="666" y="340" width="13" height="15" fill="rgb(235,185,37)"/><text x="669.00" y="350.50"></text></g><g><title>PyArray_New (ctors.c) (5 samples, 1.17%)</title><rect x="666" y="356" width="13" height="15" fill="rgb(221,56,12)"/><text x="669.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 1.17%)</title><rect x="666" y="372" width="13" height="15" fill="rgb(236,199,21)"/><text x="669.00" y="382.50"></text></g><g><title>npy_alloc_cache (alloc.c) (4 samples, 0.93%)</title><rect x="668" y="388" width="11" height="15" fill="rgb(242,68,51)"/><text x="671.00" y="398.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (4 samples, 0.93%)</title><rect x="668" y="404" width="11" height="15" fill="rgb(234,32,52)"/><text x="671.00" y="414.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (3 samples, 0.70%)</title><rect x="671" y="420" width="8" height="15" fill="rgb(213,209,46)"/><text x="674.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.70%)</title><rect x="671" y="436" width="8" height="15" fill="rgb(208,152,54)"/><text x="674.00" y="446.50"></text></g><g><title>0x7f7e08233700 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="677" y="452" width="2" height="15" fill="rgb(248,177,16)"/><text x="680.00" y="462.50"></text></g><g><title>0x7f7e08230b06 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="677" y="468" width="2" height="15" fill="rgb(219,16,13)"/><text x="680.00" y="478.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.23%)</title><rect x="682" y="276" width="3" height="15" fill="rgb(251,191,5)"/><text x="685.00" y="286.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (1 samples, 0.23%)</title><rect x="685" y="276" width="3" height="15" fill="rgb(249,204,6)"/><text x="688.00" y="286.50"></text></g><g><title>get_global_ext_obj (extobj.c) (1 samples, 0.23%)</title><rect x="685" y="292" width="3" height="15" fill="rgb(221,209,37)"/><text x="688.00" y="302.50"></text></g><g><title>FLOAT_add (loops.c.src) (1 samples, 0.23%)</title><rect x="688" y="308" width="2" height="15" fill="rgb(239,30,17)"/><text x="691.00" y="318.50"></text></g><g><title>0x7f7e0825214a (libc-2.29.so) (1 samples, 0.23%)</title><rect x="693" y="324" width="3" height="15" fill="rgb(205,199,15)"/><text x="696.00" y="334.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.23%)</title><rect x="696" y="324" width="3" height="15" fill="rgb(246,132,53)"/><text x="699.00" y="334.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (4 samples, 0.93%)</title><rect x="690" y="308" width="12" height="15" fill="rgb(242,225,12)"/><text x="693.00" y="318.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.23%)</title><rect x="699" y="324" width="3" height="15" fill="rgb(225,214,23)"/><text x="702.00" y="334.50"></text></g><g><title>IsUintAligned (array_assign.c) (1 samples, 0.23%)</title><rect x="699" y="340" width="3" height="15" fill="rgb(251,57,23)"/><text x="702.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (6 samples, 1.40%)</title><rect x="688" y="276" width="16" height="15" fill="rgb(206,20,34)"/><text x="691.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c) (6 samples, 1.40%)</title><rect x="688" y="292" width="16" height="15" fill="rgb(246,128,27)"/><text x="691.00" y="302.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (1 samples, 0.23%)</title><rect x="702" y="308" width="2" height="15" fill="rgb(238,11,47)"/><text x="705.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.23%)</title><rect x="702" y="324" width="2" height="15" fill="rgb(224,93,26)"/><text x="705.00" y="334.50"></text></g><g><title>profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (71 samples, 16.59%)</title><rect x="511" y="100" width="196" height="15" fill="rgb(252,145,31)"/><text x="514.00" y="110.50">profile (bench_LinearRegr..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (65 samples, 15.19%)</title><rect x="528" y="116" width="179" height="15" fill="rgb(238,40,14)"/><text x="531.00" y="126.50">time_predict (mlprodict..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (64 samples, 14.95%)</title><rect x="531" y="132" width="176" height="15" fill="rgb(210,170,16)"/><text x="534.00" y="142.50">&lt;lambda&gt; (mlprodict/as..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (63 samples, 14.72%)</title><rect x="533" y="148" width="174" height="15" fill="rgb(245,187,12)"/><text x="536.00" y="158.50">run (mlprodict/onnxrt/..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (60 samples, 14.02%)</title><rect x="542" y="164" width="165" height="15" fill="rgb(234,8,10)"/><text x="545.00" y="174.50">_run_sequence_runtime..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (47 samples, 10.98%)</title><rect x="577" y="180" width="130" height="15" fill="rgb(234,62,24)"/><text x="580.00" y="190.50">run (mlprodict/o..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (37 samples, 8.64%)</title><rect x="605" y="196" width="102" height="15" fill="rgb(219,56,37)"/><text x="608.00" y="206.50">run (mlprodi..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (35 samples, 8.18%)</title><rect x="611" y="212" width="96" height="15" fill="rgb(234,129,28)"/><text x="614.00" y="222.50">run (mlprod..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_regressor.py) (34 samples, 7.94%)</title><rect x="613" y="228" width="94" height="15" fill="rgb(210,175,35)"/><text x="616.00" y="238.50">_run (mlpro..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (10 samples, 2.34%)</title><rect x="679" y="244" width="28" height="15" fill="rgb(248,2,39)"/><text x="682.00" y="254.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (10 samples, 2.34%)</title><rect x="679" y="260" width="28" height="15" fill="rgb(212,54,52)"/><text x="682.00" y="270.50">P..</text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.23%)</title><rect x="704" y="276" width="3" height="15" fill="rgb(215,40,43)"/><text x="707.00" y="286.50"></text></g><g><title>profile_pyrt (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (72 samples, 16.82%)</title><rect x="511" y="68" width="199" height="15" fill="rgb(241,44,18)"/><text x="514.00" y="78.50">profile_pyrt (bench_Linear..</text></g><g><title>setup_profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (72 samples, 16.82%)</title><rect x="511" y="84" width="199" height="15" fill="rgb(231,56,33)"/><text x="514.00" y="94.50">setup_profile (bench_Linea..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.23%)</title><rect x="707" y="100" width="3" height="15" fill="rgb(221,85,14)"/><text x="710.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.23%)</title><rect x="707" y="116" width="3" height="15" fill="rgb(223,209,8)"/><text x="710.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.23%)</title><rect x="707" y="132" width="3" height="15" fill="rgb(231,120,6)"/><text x="710.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.23%)</title><rect x="707" y="148" width="3" height="15" fill="rgb(253,30,48)"/><text x="710.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.23%)</title><rect x="707" y="164" width="3" height="15" fill="rgb(207,80,33)"/><text x="710.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (1 samples, 0.23%)</title><rect x="707" y="180" width="3" height="15" fill="rgb(213,91,10)"/><text x="710.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (1 samples, 0.23%)</title><rect x="707" y="196" width="3" height="15" fill="rgb(240,197,16)"/><text x="710.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="707" y="212" width="3" height="15" fill="rgb(249,47,28)"/><text x="710.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="707" y="228" width="3" height="15" fill="rgb(249,183,43)"/><text x="710.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="707" y="244" width="3" height="15" fill="rgb(246,176,54)"/><text x="710.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="707" y="260" width="3" height="15" fill="rgb(213,134,28)"/><text x="710.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="707" y="276" width="3" height="15" fill="rgb(234,160,12)"/><text x="710.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (1 samples, 0.23%)</title><rect x="707" y="292" width="3" height="15" fill="rgb(223,122,41)"/><text x="710.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="707" y="308" width="3" height="15" fill="rgb(239,62,11)"/><text x="710.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="707" y="324" width="3" height="15" fill="rgb(219,11,44)"/><text x="710.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="707" y="340" width="3" height="15" fill="rgb(232,173,8)"/><text x="710.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.23%)</title><rect x="707" y="356" width="3" height="15" fill="rgb(205,131,13)"/><text x="710.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.23%)</title><rect x="707" y="372" width="3" height="15" fill="rgb(237,151,43)"/><text x="710.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (1 samples, 0.23%)</title><rect x="707" y="388" width="3" height="15" fill="rgb(212,186,41)"/><text x="710.00" y="398.50"></text></g><g><title>get_rst_doc (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.23%)</title><rect x="707" y="404" width="3" height="15" fill="rgb(231,74,27)"/><text x="710.00" y="414.50"></text></g><g><title>render (jinja2/asyncsupport.py) (1 samples, 0.23%)</title><rect x="707" y="420" width="3" height="15" fill="rgb(245,76,4)"/><text x="710.00" y="430.50"></text></g><g><title>render (jinja2/environment.py) (1 samples, 0.23%)</title><rect x="707" y="436" width="3" height="15" fill="rgb(235,21,47)"/><text x="710.00" y="446.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.23%)</title><rect x="707" y="452" width="3" height="15" fill="rgb(250,111,33)"/><text x="710.00" y="462.50"></text></g><g><title>root (&lt;template&gt;) (1 samples, 0.23%)</title><rect x="707" y="468" width="3" height="15" fill="rgb(220,202,42)"/><text x="710.00" y="478.50"></text></g><g><title>call (jinja2/runtime.py) (1 samples, 0.23%)</title><rect x="707" y="484" width="3" height="15" fill="rgb(243,88,34)"/><text x="710.00" y="494.50"></text></g><g><title>type_mapping (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.23%)</title><rect x="707" y="500" width="3" height="15" fill="rgb(233,208,5)"/><text x="710.00" y="510.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.23%)</title><rect x="707" y="516" width="3" height="15" fill="rgb(207,201,2)"/><text x="710.00" y="526.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::detail::enum_base::init(bool, bool)::{lambda(pybind11::object)#24}, pybind11::int_, pybind11::object, pybind11::is_method&gt;(pybind11::detail::enum_base::init(bool, bool)::{lambda(pybind11::object&amp;&amp;)#24}, pybind11::int_ (*)(pybind11::object), pybind11::is_method const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.23%)</title><rect x="707" y="532" width="3" height="15" fill="rgb(212,33,42)"/><text x="710.00" y="542.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::detail::enum_base::init(bool, bool)::{lambda(pybind11::object)#24}, pybind11::int_, pybind11::object, pybind11::is_method&gt;(pybind11::detail::enum_base::init(bool, bool)::{lambda(pybind11::object&amp;&amp;)#24}, pybind11::int_ (*)(pybind11::object), pybind11::is_method const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.23%)</title><rect x="707" y="548" width="3" height="15" fill="rgb(244,54,21)"/><text x="710.00" y="558.50"></text></g><g><title>pybind11::int_::int_ (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.23%)</title><rect x="707" y="564" width="3" height="15" fill="rgb(252,87,26)"/><text x="710.00" y="574.50"></text></g><g><title>PyArray_Transpose (shape.c) (1 samples, 0.23%)</title><rect x="746" y="180" width="2" height="15" fill="rgb(209,88,1)"/><text x="749.00" y="190.50"></text></g><g><title>0x7f7e08252124 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="748" y="196" width="3" height="15" fill="rgb(252,154,40)"/><text x="751.00" y="206.50"></text></g><g><title>try_binary_elide (temp_elide.c) (1 samples, 0.23%)</title><rect x="751" y="196" width="3" height="15" fill="rgb(236,229,35)"/><text x="754.00" y="206.50"></text></g><g><title>can_elide_temp (temp_elide.c) (1 samples, 0.23%)</title><rect x="751" y="212" width="3" height="15" fill="rgb(210,122,0)"/><text x="754.00" y="222.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (4 samples, 0.93%)</title><rect x="754" y="212" width="11" height="15" fill="rgb(246,226,26)"/><text x="757.00" y="222.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (4 samples, 0.93%)</title><rect x="754" y="228" width="11" height="15" fill="rgb(208,187,19)"/><text x="757.00" y="238.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (4 samples, 0.93%)</title><rect x="754" y="244" width="11" height="15" fill="rgb(244,212,43)"/><text x="757.00" y="254.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (4 samples, 0.93%)</title><rect x="754" y="260" width="11" height="15" fill="rgb(235,180,11)"/><text x="757.00" y="270.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (4 samples, 0.93%)</title><rect x="754" y="276" width="11" height="15" fill="rgb(240,48,9)"/><text x="757.00" y="286.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (1 samples, 0.23%)</title><rect x="765" y="228" width="3" height="15" fill="rgb(211,149,18)"/><text x="768.00" y="238.50"></text></g><g><title>get_global_ext_obj (extobj.c) (1 samples, 0.23%)</title><rect x="765" y="244" width="3" height="15" fill="rgb(235,52,54)"/><text x="768.00" y="254.50"></text></g><g><title>DOUBLE_add (loops.c.src) (1 samples, 0.23%)</title><rect x="768" y="260" width="2" height="15" fill="rgb(245,173,15)"/><text x="771.00" y="270.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (1 samples, 0.23%)</title><rect x="768" y="276" width="2" height="15" fill="rgb(208,98,9)"/><text x="771.00" y="286.50"></text></g><g><title>sse2_binary_scalar2_add_DOUBLE (simd.inc.src) (1 samples, 0.23%)</title><rect x="768" y="292" width="2" height="15" fill="rgb(254,64,52)"/><text x="771.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.47%)</title><rect x="768" y="228" width="5" height="15" fill="rgb(214,38,36)"/><text x="771.00" y="238.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (2 samples, 0.47%)</title><rect x="768" y="244" width="5" height="15" fill="rgb(212,25,1)"/><text x="771.00" y="254.50"></text></g><g><title>__GI___pthread_mutex_unlock (libpthread-2.29.so) (1 samples, 0.23%)</title><rect x="770" y="260" width="3" height="15" fill="rgb(208,118,24)"/><text x="773.00" y="270.50"></text></g><g><title>PyArray_DescrFromScalar (scalarapi.c) (1 samples, 0.23%)</title><rect x="773" y="276" width="3" height="15" fill="rgb(249,106,6)"/><text x="776.00" y="286.50"></text></g><g><title>PyArray_FromScalar (scalarapi.c) (2 samples, 0.47%)</title><rect x="773" y="260" width="6" height="15" fill="rgb(239,228,50)"/><text x="776.00" y="270.50"></text></g><g><title>scalar_value (scalarapi.c) (1 samples, 0.23%)</title><rect x="776" y="276" width="3" height="15" fill="rgb(254,17,13)"/><text x="779.00" y="286.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.70%)</title><rect x="773" y="228" width="8" height="15" fill="rgb(212,0,13)"/><text x="776.00" y="238.50"></text></g><g><title>PyArray_FromAny (ctors.c) (3 samples, 0.70%)</title><rect x="773" y="244" width="8" height="15" fill="rgb(231,177,38)"/><text x="776.00" y="254.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (1 samples, 0.23%)</title><rect x="779" y="260" width="2" height="15" fill="rgb(251,153,16)"/><text x="782.00" y="270.50"></text></g><g><title>PyArray_DescrFromScalar (scalarapi.c) (1 samples, 0.23%)</title><rect x="779" y="276" width="2" height="15" fill="rgb(227,90,4)"/><text x="782.00" y="286.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (1 samples, 0.23%)</title><rect x="779" y="292" width="2" height="15" fill="rgb(207,70,37)"/><text x="782.00" y="302.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.23%)</title><rect x="779" y="308" width="2" height="15" fill="rgb(245,153,25)"/><text x="782.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 1.64%)</title><rect x="765" y="212" width="19" height="15" fill="rgb(254,65,32)"/><text x="768.00" y="222.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.23%)</title><rect x="781" y="228" width="3" height="15" fill="rgb(205,162,1)"/><text x="784.00" y="238.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.23%)</title><rect x="781" y="244" width="3" height="15" fill="rgb(226,66,46)"/><text x="784.00" y="254.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.23%)</title><rect x="781" y="260" width="3" height="15" fill="rgb(242,154,25)"/><text x="784.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.70%)</title><rect x="784" y="212" width="8" height="15" fill="rgb(238,18,2)"/><text x="787.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.47%)</title><rect x="787" y="228" width="5" height="15" fill="rgb(225,169,35)"/><text x="790.00" y="238.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.23%)</title><rect x="790" y="244" width="2" height="15" fill="rgb(239,183,29)"/><text x="793.00" y="254.50"></text></g><g><title>array_add (number.c) (17 samples, 3.97%)</title><rect x="748" y="180" width="47" height="15" fill="rgb(234,63,44)"/><text x="751.00" y="190.50">arra..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (15 samples, 3.50%)</title><rect x="754" y="196" width="41" height="15" fill="rgb(249,191,6)"/><text x="757.00" y="206.50">ufu..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.23%)</title><rect x="792" y="212" width="3" height="15" fill="rgb(222,93,6)"/><text x="795.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.23%)</title><rect x="795" y="180" width="3" height="15" fill="rgb(210,141,0)"/><text x="798.00" y="190.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.23%)</title><rect x="795" y="196" width="3" height="15" fill="rgb(234,218,49)"/><text x="798.00" y="206.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.23%)</title><rect x="795" y="212" width="3" height="15" fill="rgb(235,171,8)"/><text x="798.00" y="222.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.23%)</title><rect x="795" y="228" width="3" height="15" fill="rgb(213,185,6)"/><text x="798.00" y="238.50"></text></g><g><title>__enter__ (warnings.py) (5 samples, 1.17%)</title><rect x="864" y="196" width="14" height="15" fill="rgb(214,146,31)"/><text x="867.00" y="206.50"></text></g><g><title>__exit__ (warnings.py) (2 samples, 0.47%)</title><rect x="878" y="196" width="5" height="15" fill="rgb(208,22,15)"/><text x="881.00" y="206.50"></text></g><g><title>__init__ (warnings.py) (5 samples, 1.17%)</title><rect x="883" y="196" width="14" height="15" fill="rgb(252,206,34)"/><text x="886.00" y="206.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="906" y="212" width="5" height="15" fill="rgb(220,90,0)"/><text x="909.00" y="222.50"></text></g><g><title>get_config (sklearn/_config.py) (1 samples, 0.23%)</title><rect x="911" y="212" width="3" height="15" fill="rgb(234,93,35)"/><text x="914.00" y="222.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (8 samples, 1.87%)</title><rect x="897" y="196" width="22" height="15" fill="rgb(239,78,29)"/><text x="900.00" y="206.50">_..</text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.47%)</title><rect x="914" y="212" width="5" height="15" fill="rgb(244,2,24)"/><text x="917.00" y="222.50"></text></g><g><title>_ensure_no_complex_data (sklearn/utils/validation.py) (2 samples, 0.47%)</title><rect x="919" y="196" width="6" height="15" fill="rgb(210,211,32)"/><text x="922.00" y="206.50"></text></g><g><title>array_descr_get (getset.c) (1 samples, 0.23%)</title><rect x="922" y="212" width="3" height="15" fill="rgb(208,56,33)"/><text x="925.00" y="222.50"></text></g><g><title>PyArray_DESCR (ndarraytypes.h) (1 samples, 0.23%)</title><rect x="922" y="228" width="3" height="15" fill="rgb(221,69,44)"/><text x="925.00" y="238.50"></text></g><g><title>0x7f7e08247b89 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="955" y="212" width="3" height="15" fill="rgb(220,55,41)"/><text x="958.00" y="222.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.23%)</title><rect x="958" y="212" width="3" height="15" fill="rgb(238,195,15)"/><text x="961.00" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (16 samples, 3.74%)</title><rect x="925" y="196" width="44" height="15" fill="rgb(213,133,6)"/><text x="928.00" y="206.50">_num..</text></g><g><title>__instancecheck__ (abc.py) (3 samples, 0.70%)</title><rect x="961" y="212" width="8" height="15" fill="rgb(233,154,33)"/><text x="964.00" y="222.50"></text></g><g><title>__subclasscheck__ (abc.py) (1 samples, 0.23%)</title><rect x="966" y="228" width="3" height="15" fill="rgb(210,178,36)"/><text x="969.00" y="238.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (4 samples, 0.93%)</title><rect x="969" y="196" width="11" height="15" fill="rgb(223,90,43)"/><text x="972.00" y="206.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (1 samples, 0.23%)</title><rect x="977" y="212" width="3" height="15" fill="rgb(233,175,16)"/><text x="980.00" y="222.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py) (9 samples, 2.10%)</title><rect x="980" y="196" width="25" height="15" fill="rgb(253,5,38)"/><text x="983.00" y="206.50">i..</text></g><g><title>issubclass_ (numpy/core/numerictypes.py) (5 samples, 1.17%)</title><rect x="991" y="212" width="14" height="15" fill="rgb(229,62,26)"/><text x="994.00" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (81 samples, 18.93%)</title><rect x="798" y="180" width="223" height="15" fill="rgb(237,99,21)"/><text x="801.00" y="190.50">check_array (sklearn/utils/va..</text></g><g><title>simplefilter (warnings.py) (6 samples, 1.40%)</title><rect x="1005" y="196" width="16" height="15" fill="rgb(206,101,23)"/><text x="1008.00" y="206.50"></text></g><g><title>_add_filter (warnings.py) (6 samples, 1.40%)</title><rect x="1005" y="212" width="16" height="15" fill="rgb(244,67,20)"/><text x="1008.00" y="222.50"></text></g><g><title>unicode_dealloc (python3.7) (1 samples, 0.23%)</title><rect x="1019" y="228" width="2" height="15" fill="rgb(215,173,19)"/><text x="1022.00" y="238.50"></text></g><g><title>unicode_endswith (python3.7) (2 samples, 0.47%)</title><rect x="1054" y="212" width="6" height="15" fill="rgb(206,127,27)"/><text x="1057.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (9 samples, 2.10%)</title><rect x="1038" y="196" width="25" height="15" fill="rgb(246,178,3)"/><text x="1041.00" y="206.50">&lt;..</text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.23%)</title><rect x="1060" y="212" width="3" height="15" fill="rgb(215,77,39)"/><text x="1063.00" y="222.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (17 samples, 3.97%)</title><rect x="1021" y="180" width="47" height="15" fill="rgb(215,107,12)"/><text x="1024.00" y="190.50">chec..</text></g><g><title>isclass (inspect.py) (2 samples, 0.47%)</title><rect x="1063" y="196" width="5" height="15" fill="rgb(215,158,0)"/><text x="1066.00" y="206.50"></text></g><g><title>dgemv_t_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (6 samples, 1.40%)</title><rect x="1082" y="196" width="17" height="15" fill="rgb(245,61,47)"/><text x="1085.00" y="206.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.23%)</title><rect x="1099" y="196" width="2" height="15" fill="rgb(230,74,51)"/><text x="1102.00" y="206.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src) (3 samples, 0.70%)</title><rect x="1107" y="244" width="8" height="15" fill="rgb(249,228,52)"/><text x="1110.00" y="254.50"></text></g><g><title>DOUBLE_gemv (matmul.c.src) (2 samples, 0.47%)</title><rect x="1110" y="260" width="5" height="15" fill="rgb(223,95,20)"/><text x="1113.00" y="270.50"></text></g><g><title>cblas_dgemv (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.47%)</title><rect x="1110" y="276" width="5" height="15" fill="rgb(236,63,3)"/><text x="1113.00" y="286.50"></text></g><g><title>blas_memory_alloc (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.23%)</title><rect x="1112" y="292" width="3" height="15" fill="rgb(221,70,37)"/><text x="1115.00" y="302.50"></text></g><g><title>PyArray_FailUnlessWriteable (arrayobject.c) (1 samples, 0.23%)</title><rect x="1121" y="292" width="2" height="15" fill="rgb(229,53,46)"/><text x="1124.00" y="302.50"></text></g><g><title>arrays_overlap (array_assign.c) (1 samples, 0.23%)</title><rect x="1123" y="292" width="3" height="15" fill="rgb(226,36,0)"/><text x="1126.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.23%)</title><rect x="1123" y="308" width="3" height="15" fill="rgb(243,225,12)"/><text x="1126.00" y="318.50"></text></g><g><title>broadcast_strides (array_assign.c) (1 samples, 0.23%)</title><rect x="1126" y="292" width="3" height="15" fill="rgb(247,78,14)"/><text x="1129.00" y="302.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (1 samples, 0.23%)</title><rect x="1129" y="308" width="3" height="15" fill="rgb(205,127,14)"/><text x="1132.00" y="318.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (1 samples, 0.23%)</title><rect x="1132" y="308" width="2" height="15" fill="rgb(227,52,49)"/><text x="1135.00" y="318.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (9 samples, 2.10%)</title><rect x="1118" y="276" width="25" height="15" fill="rgb(234,205,4)"/><text x="1121.00" y="286.50">P..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (5 samples, 1.17%)</title><rect x="1129" y="292" width="14" height="15" fill="rgb(244,102,18)"/><text x="1132.00" y="302.50"></text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src) (3 samples, 0.70%)</title><rect x="1134" y="308" width="9" height="15" fill="rgb(236,37,23)"/><text x="1137.00" y="318.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (14 samples, 3.27%)</title><rect x="1118" y="260" width="38" height="15" fill="rgb(210,154,15)"/><text x="1121.00" y="270.50">npy..</text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (5 samples, 1.17%)</title><rect x="1143" y="276" width="13" height="15" fill="rgb(231,118,38)"/><text x="1146.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (4 samples, 0.93%)</title><rect x="1145" y="292" width="11" height="15" fill="rgb(237,117,29)"/><text x="1148.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.93%)</title><rect x="1145" y="308" width="11" height="15" fill="rgb(213,18,41)"/><text x="1148.00" y="318.50"></text></g><g><title>npy_alloc_cache (alloc.c) (3 samples, 0.70%)</title><rect x="1148" y="324" width="8" height="15" fill="rgb(241,134,20)"/><text x="1151.00" y="334.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.70%)</title><rect x="1148" y="340" width="8" height="15" fill="rgb(232,89,21)"/><text x="1151.00" y="350.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (3 samples, 0.70%)</title><rect x="1148" y="356" width="8" height="15" fill="rgb(231,150,22)"/><text x="1151.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.70%)</title><rect x="1148" y="372" width="8" height="15" fill="rgb(209,196,18)"/><text x="1151.00" y="382.50"></text></g><g><title>0x7f7e08233700 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="1154" y="388" width="2" height="15" fill="rgb(212,173,8)"/><text x="1157.00" y="398.50"></text></g><g><title>0x7f7e08230af7 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="1154" y="404" width="2" height="15" fill="rgb(224,12,7)"/><text x="1157.00" y="414.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c) (1 samples, 0.23%)</title><rect x="1156" y="260" width="3" height="15" fill="rgb(247,128,37)"/><text x="1159.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (17 samples, 3.97%)</title><rect x="1115" y="244" width="47" height="15" fill="rgb(219,134,33)"/><text x="1118.00" y="254.50">NpyI..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.23%)</title><rect x="1159" y="260" width="3" height="15" fill="rgb(254,105,39)"/><text x="1162.00" y="270.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (1 samples, 0.23%)</title><rect x="1159" y="276" width="3" height="15" fill="rgb(254,46,12)"/><text x="1162.00" y="286.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (2 samples, 0.47%)</title><rect x="1162" y="244" width="5" height="15" fill="rgb(225,200,26)"/><text x="1165.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.47%)</title><rect x="1162" y="260" width="5" height="15" fill="rgb(227,197,31)"/><text x="1165.00" y="270.50"></text></g><g><title>npy_free_cache (alloc.c) (2 samples, 0.47%)</title><rect x="1162" y="276" width="5" height="15" fill="rgb(213,108,37)"/><text x="1165.00" y="286.50"></text></g><g><title>_npy_free_cache (alloc.c) (2 samples, 0.47%)</title><rect x="1162" y="292" width="5" height="15" fill="rgb(211,41,13)"/><text x="1165.00" y="302.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (2 samples, 0.47%)</title><rect x="1162" y="308" width="5" height="15" fill="rgb(207,135,25)"/><text x="1165.00" y="318.50"></text></g><g><title>0x7f7e08231b63 (libc-2.29.so) (1 samples, 0.23%)</title><rect x="1165" y="324" width="2" height="15" fill="rgb(209,157,8)"/><text x="1168.00" y="334.50"></text></g><g><title>NpyIter_RemoveAxis (nditer_api.c) (1 samples, 0.23%)</title><rect x="1167" y="244" width="3" height="15" fill="rgb(234,228,47)"/><text x="1170.00" y="254.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (2 samples, 0.47%)</title><rect x="1170" y="244" width="6" height="15" fill="rgb(208,76,49)"/><text x="1173.00" y="254.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.23%)</title><rect x="1176" y="244" width="2" height="15" fill="rgb(244,220,48)"/><text x="1179.00" y="254.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (1 samples, 0.23%)</title><rect x="1176" y="260" width="2" height="15" fill="rgb(208,148,50)"/><text x="1179.00" y="270.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (1 samples, 0.23%)</title><rect x="1176" y="276" width="2" height="15" fill="rgb(250,66,37)"/><text x="1179.00" y="286.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.23%)</title><rect x="1176" y="292" width="2" height="15" fill="rgb(239,5,37)"/><text x="1179.00" y="302.50"></text></g><g><title>PyArray_CanCastTo (convert_datatype.c) (1 samples, 0.23%)</title><rect x="1176" y="308" width="2" height="15" fill="rgb(250,196,13)"/><text x="1179.00" y="318.50"></text></g><g><title>_get_coredim_sizes (ufunc_object.c) (1 samples, 0.23%)</title><rect x="1178" y="244" width="3" height="15" fill="rgb(210,60,9)"/><text x="1181.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (29 samples, 6.78%)</title><rect x="1104" y="212" width="80" height="15" fill="rgb(233,219,20)"/><text x="1107.00" y="222.50">PyUFunc_G..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (29 samples, 6.78%)</title><rect x="1104" y="228" width="80" height="15" fill="rgb(217,151,2)"/><text x="1107.00" y="238.50">PyUFunc_G..</text></g><g><title>_initialize_variable_parts (ufunc_object.c) (1 samples, 0.23%)</title><rect x="1181" y="244" width="3" height="15" fill="rgb(216,14,19)"/><text x="1184.00" y="254.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (43 samples, 10.05%)</title><rect x="1068" y="180" width="119" height="15" fill="rgb(219,37,36)"/><text x="1071.00" y="190.50">safe_sparse_do..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (31 samples, 7.24%)</title><rect x="1101" y="196" width="86" height="15" fill="rgb(218,131,35)"/><text x="1104.00" y="206.50">ufunc_gene..</text></g><g><title>_find_array_wrap (ufunc_object.c) (1 samples, 0.23%)</title><rect x="1184" y="212" width="3" height="15" fill="rgb(229,217,27)"/><text x="1187.00" y="222.50"></text></g><g><title>all (428 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(246,203,50)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (428 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(224,82,49)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_LinearRegression_default_m_reg_1000_4_12_float_.py)</text></g><g><title>profile_skl (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (174 samples, 40.65%)</title><rect x="710" y="68" width="480" height="15" fill="rgb(250,24,24)"/><text x="713.00" y="78.50">profile_skl (bench_LinearRegression_default_m_reg_1000_4_12_float..</text></g><g><title>setup_profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (174 samples, 40.65%)</title><rect x="710" y="84" width="480" height="15" fill="rgb(208,161,0)"/><text x="713.00" y="94.50">setup_profile (bench_LinearRegression_default_m_reg_1000_4_12_flo..</text></g><g><title>profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py) (174 samples, 40.65%)</title><rect x="710" y="100" width="480" height="15" fill="rgb(227,79,29)"/><text x="713.00" y="110.50">profile (bench_LinearRegression_default_m_reg_1000_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (174 samples, 40.65%)</title><rect x="710" y="116" width="480" height="15" fill="rgb(253,182,15)"/><text x="713.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (167 samples, 39.02%)</title><rect x="729" y="132" width="461" height="15" fill="rgb(222,80,3)"/><text x="732.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict (sklearn/linear_model/_base.py) (166 samples, 38.79%)</title><rect x="732" y="148" width="458" height="15" fill="rgb(207,215,26)"/><text x="735.00" y="158.50">predict (sklearn/linear_model/_base.py)</text></g><g><title>_decision_function (sklearn/linear_model/_base.py) (166 samples, 38.79%)</title><rect x="732" y="164" width="458" height="15" fill="rgb(250,139,43)"/><text x="735.00" y="174.50">_decision_function (sklearn/linear_model/_base.py)</text></g><g><title>unicode_eq (python3.7) (1 samples, 0.23%)</title><rect x="1187" y="180" width="3" height="15" fill="rgb(239,170,3)"/><text x="1190.00" y="190.50"></text></g></g></svg>