<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1302" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1285.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1285.00"> </text><g id="frames"><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (3 samples, 0.10%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(225,121,13)"/><text x="13.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (3 samples, 0.10%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(229,70,30)"/><text x="13.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (3 samples, 0.10%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(248,70,2)"/><text x="13.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (3 samples, 0.10%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(206,159,53)"/><text x="13.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (3 samples, 0.10%)</title><rect x="10" y="916" width="1" height="15" fill="rgb(212,90,12)"/><text x="13.00" y="926.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py:2) (9 samples, 0.29%)</title><rect x="10" y="148" width="3" height="15" fill="rgb(224,169,44)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 0.29%)</title><rect x="10" y="164" width="3" height="15" fill="rgb(250,165,54)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (9 samples, 0.29%)</title><rect x="10" y="180" width="3" height="15" fill="rgb(205,117,33)"/><text x="13.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.29%)</title><rect x="10" y="196" width="3" height="15" fill="rgb(206,173,18)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 0.29%)</title><rect x="10" y="212" width="3" height="15" fill="rgb(244,123,28)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 0.29%)</title><rect x="10" y="228" width="3" height="15" fill="rgb(254,105,41)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 0.29%)</title><rect x="10" y="244" width="3" height="15" fill="rgb(218,11,37)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 0.29%)</title><rect x="10" y="260" width="3" height="15" fill="rgb(246,197,11)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.29%)</title><rect x="10" y="276" width="3" height="15" fill="rgb(224,126,34)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (9 samples, 0.29%)</title><rect x="10" y="292" width="3" height="15" fill="rgb(210,98,0)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 0.29%)</title><rect x="10" y="308" width="3" height="15" fill="rgb(240,145,2)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 0.29%)</title><rect x="10" y="324" width="3" height="15" fill="rgb(232,27,4)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 0.29%)</title><rect x="10" y="340" width="3" height="15" fill="rgb(245,193,6)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 0.29%)</title><rect x="10" y="356" width="3" height="15" fill="rgb(238,175,1)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.29%)</title><rect x="10" y="372" width="3" height="15" fill="rgb(251,80,38)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (9 samples, 0.29%)</title><rect x="10" y="388" width="3" height="15" fill="rgb(205,125,11)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 0.29%)</title><rect x="10" y="404" width="3" height="15" fill="rgb(249,165,53)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 0.29%)</title><rect x="10" y="420" width="3" height="15" fill="rgb(244,106,50)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 0.29%)</title><rect x="10" y="436" width="3" height="15" fill="rgb(232,25,29)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 0.29%)</title><rect x="10" y="452" width="3" height="15" fill="rgb(247,222,2)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.29%)</title><rect x="10" y="468" width="3" height="15" fill="rgb(240,187,1)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (9 samples, 0.29%)</title><rect x="10" y="484" width="3" height="15" fill="rgb(238,217,50)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 0.29%)</title><rect x="10" y="500" width="3" height="15" fill="rgb(212,163,22)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 0.29%)</title><rect x="10" y="516" width="3" height="15" fill="rgb(242,101,51)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 0.29%)</title><rect x="10" y="532" width="3" height="15" fill="rgb(226,150,18)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 0.29%)</title><rect x="10" y="548" width="3" height="15" fill="rgb(235,221,52)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.29%)</title><rect x="10" y="564" width="3" height="15" fill="rgb(237,167,48)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (9 samples, 0.29%)</title><rect x="10" y="580" width="3" height="15" fill="rgb(251,65,10)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 0.29%)</title><rect x="10" y="596" width="3" height="15" fill="rgb(219,165,14)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (9 samples, 0.29%)</title><rect x="10" y="612" width="3" height="15" fill="rgb(253,116,24)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.29%)</title><rect x="10" y="628" width="3" height="15" fill="rgb(218,226,16)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 0.29%)</title><rect x="10" y="644" width="3" height="15" fill="rgb(225,131,42)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 0.29%)</title><rect x="10" y="660" width="3" height="15" fill="rgb(244,229,45)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 0.29%)</title><rect x="10" y="676" width="3" height="15" fill="rgb(207,110,2)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 0.29%)</title><rect x="10" y="692" width="3" height="15" fill="rgb(230,80,52)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.29%)</title><rect x="10" y="708" width="3" height="15" fill="rgb(206,193,33)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (9 samples, 0.29%)</title><rect x="10" y="724" width="3" height="15" fill="rgb(238,36,34)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 0.29%)</title><rect x="10" y="740" width="3" height="15" fill="rgb(220,216,34)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 0.29%)</title><rect x="10" y="756" width="3" height="15" fill="rgb(220,58,51)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 0.29%)</title><rect x="10" y="772" width="3" height="15" fill="rgb(249,178,5)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 0.29%)</title><rect x="10" y="788" width="3" height="15" fill="rgb(207,144,44)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.29%)</title><rect x="10" y="804" width="3" height="15" fill="rgb(232,168,32)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (9 samples, 0.29%)</title><rect x="10" y="820" width="3" height="15" fill="rgb(213,26,4)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (9 samples, 0.29%)</title><rect x="10" y="836" width="3" height="15" fill="rgb(207,226,47)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (5 samples, 0.16%)</title><rect x="11" y="852" width="2" height="15" fill="rgb(243,4,13)"/><text x="14.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (5 samples, 0.16%)</title><rect x="11" y="868" width="2" height="15" fill="rgb(250,107,41)"/><text x="14.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (3 samples, 0.10%)</title><rect x="12" y="884" width="1" height="15" fill="rgb(250,181,17)"/><text x="15.00" y="894.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:12) (5 samples, 0.16%)</title><rect x="14" y="484" width="2" height="15" fill="rgb(238,40,39)"/><text x="17.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.16%)</title><rect x="14" y="500" width="2" height="15" fill="rgb(213,102,32)"/><text x="17.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.16%)</title><rect x="14" y="516" width="2" height="15" fill="rgb(209,107,46)"/><text x="17.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.16%)</title><rect x="14" y="532" width="2" height="15" fill="rgb(243,12,6)"/><text x="17.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.16%)</title><rect x="14" y="548" width="2" height="15" fill="rgb(228,164,40)"/><text x="17.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.16%)</title><rect x="14" y="564" width="2" height="15" fill="rgb(210,121,36)"/><text x="17.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py:23) (5 samples, 0.16%)</title><rect x="14" y="580" width="2" height="15" fill="rgb(252,62,3)"/><text x="17.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.16%)</title><rect x="14" y="596" width="2" height="15" fill="rgb(219,4,6)"/><text x="17.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.16%)</title><rect x="14" y="612" width="2" height="15" fill="rgb(215,226,12)"/><text x="17.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.16%)</title><rect x="14" y="628" width="2" height="15" fill="rgb(253,103,26)"/><text x="17.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.16%)</title><rect x="14" y="644" width="2" height="15" fill="rgb(207,155,48)"/><text x="17.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.16%)</title><rect x="14" y="660" width="2" height="15" fill="rgb(248,43,9)"/><text x="17.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py:10) (5 samples, 0.16%)</title><rect x="14" y="676" width="2" height="15" fill="rgb(250,70,12)"/><text x="17.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.16%)</title><rect x="14" y="692" width="2" height="15" fill="rgb(226,218,54)"/><text x="17.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.16%)</title><rect x="14" y="708" width="2" height="15" fill="rgb(227,1,25)"/><text x="17.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.16%)</title><rect x="14" y="724" width="2" height="15" fill="rgb(206,123,48)"/><text x="17.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.16%)</title><rect x="14" y="740" width="2" height="15" fill="rgb(205,57,11)"/><text x="17.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.16%)</title><rect x="14" y="756" width="2" height="15" fill="rgb(210,8,24)"/><text x="17.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py:95) (3 samples, 0.10%)</title><rect x="14" y="772" width="2" height="15" fill="rgb(223,175,2)"/><text x="17.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (3 samples, 0.10%)</title><rect x="14" y="788" width="2" height="15" fill="rgb(254,214,0)"/><text x="17.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="14" y="804" width="2" height="15" fill="rgb(219,138,42)"/><text x="17.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="14" y="820" width="2" height="15" fill="rgb(227,1,3)"/><text x="17.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="14" y="836" width="2" height="15" fill="rgb(213,6,41)"/><text x="17.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="14" y="852" width="2" height="15" fill="rgb(227,115,52)"/><text x="17.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="14" y="868" width="2" height="15" fill="rgb(230,185,16)"/><text x="17.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="14" y="884" width="2" height="15" fill="rgb(222,102,8)"/><text x="17.00" y="894.50"></text></g><g><title>&lt;module&gt; (urllib3/contrib/pyopenssl.py:48) (3 samples, 0.10%)</title><rect x="14" y="900" width="2" height="15" fill="rgb(226,189,29)"/><text x="17.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="14" y="916" width="2" height="15" fill="rgb(206,53,38)"/><text x="17.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="14" y="932" width="2" height="15" fill="rgb(231,128,14)"/><text x="17.00" y="942.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="14" y="948" width="2" height="15" fill="rgb(208,156,25)"/><text x="17.00" y="958.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="14" y="964" width="2" height="15" fill="rgb(210,204,33)"/><text x="17.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="14" y="980" width="2" height="15" fill="rgb(244,95,4)"/><text x="17.00" y="990.50"></text></g><g><title>&lt;module&gt; (cryptography/hazmat/backends/openssl/__init__.py:7) (3 samples, 0.10%)</title><rect x="14" y="996" width="2" height="15" fill="rgb(207,102,4)"/><text x="17.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="14" y="1012" width="2" height="15" fill="rgb(231,77,49)"/><text x="17.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="14" y="1028" width="2" height="15" fill="rgb(234,197,25)"/><text x="17.00" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="14" y="1044" width="2" height="15" fill="rgb(227,71,40)"/><text x="17.00" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="14" y="1060" width="2" height="15" fill="rgb(212,65,18)"/><text x="17.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="14" y="1076" width="2" height="15" fill="rgb(237,137,25)"/><text x="17.00" y="1086.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (11 samples, 0.36%)</title><rect x="14" y="244" width="4" height="15" fill="rgb(244,78,49)"/><text x="17.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.36%)</title><rect x="14" y="260" width="4" height="15" fill="rgb(228,76,20)"/><text x="17.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 0.36%)</title><rect x="14" y="276" width="4" height="15" fill="rgb(225,114,22)"/><text x="17.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 0.36%)</title><rect x="14" y="292" width="4" height="15" fill="rgb(218,214,21)"/><text x="17.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 0.36%)</title><rect x="14" y="308" width="4" height="15" fill="rgb(239,30,5)"/><text x="17.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.36%)</title><rect x="14" y="324" width="4" height="15" fill="rgb(216,46,9)"/><text x="17.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (11 samples, 0.36%)</title><rect x="14" y="340" width="4" height="15" fill="rgb(236,95,18)"/><text x="17.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.36%)</title><rect x="14" y="356" width="4" height="15" fill="rgb(223,14,8)"/><text x="17.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (11 samples, 0.36%)</title><rect x="14" y="372" width="4" height="15" fill="rgb(205,169,29)"/><text x="17.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.36%)</title><rect x="14" y="388" width="4" height="15" fill="rgb(236,132,11)"/><text x="17.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.36%)</title><rect x="14" y="404" width="4" height="15" fill="rgb(209,207,44)"/><text x="17.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 0.36%)</title><rect x="14" y="420" width="4" height="15" fill="rgb(206,156,38)"/><text x="17.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 0.36%)</title><rect x="14" y="436" width="4" height="15" fill="rgb(206,59,25)"/><text x="17.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 0.36%)</title><rect x="14" y="452" width="4" height="15" fill="rgb(242,51,49)"/><text x="17.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.36%)</title><rect x="14" y="468" width="4" height="15" fill="rgb(246,4,49)"/><text x="17.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:7) (6 samples, 0.19%)</title><rect x="16" y="484" width="2" height="15" fill="rgb(219,115,52)"/><text x="19.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.19%)</title><rect x="16" y="500" width="2" height="15" fill="rgb(226,89,21)"/><text x="19.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.19%)</title><rect x="16" y="516" width="2" height="15" fill="rgb(251,194,32)"/><text x="19.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.19%)</title><rect x="16" y="532" width="2" height="15" fill="rgb(235,6,37)"/><text x="19.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.19%)</title><rect x="16" y="548" width="2" height="15" fill="rgb(216,99,31)"/><text x="19.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.19%)</title><rect x="16" y="564" width="2" height="15" fill="rgb(216,177,8)"/><text x="19.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/code_helper.py:8) (6 samples, 0.19%)</title><rect x="16" y="580" width="2" height="15" fill="rgb(226,85,46)"/><text x="19.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.19%)</title><rect x="16" y="596" width="2" height="15" fill="rgb(228,192,17)"/><text x="19.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (6 samples, 0.19%)</title><rect x="16" y="612" width="2" height="15" fill="rgb(237,45,8)"/><text x="19.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.19%)</title><rect x="16" y="628" width="2" height="15" fill="rgb(245,169,11)"/><text x="19.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.19%)</title><rect x="16" y="644" width="2" height="15" fill="rgb(252,70,39)"/><text x="19.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.19%)</title><rect x="16" y="660" width="2" height="15" fill="rgb(218,201,27)"/><text x="19.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.19%)</title><rect x="16" y="676" width="2" height="15" fill="rgb(230,40,46)"/><text x="19.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.19%)</title><rect x="16" y="692" width="2" height="15" fill="rgb(213,176,47)"/><text x="19.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.19%)</title><rect x="16" y="708" width="2" height="15" fill="rgb(213,196,53)"/><text x="19.00" y="718.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/__init__.py:6) (6 samples, 0.19%)</title><rect x="16" y="724" width="2" height="15" fill="rgb(249,27,21)"/><text x="19.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.19%)</title><rect x="16" y="740" width="2" height="15" fill="rgb(216,161,10)"/><text x="19.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.19%)</title><rect x="16" y="756" width="2" height="15" fill="rgb(229,13,26)"/><text x="19.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.19%)</title><rect x="16" y="772" width="2" height="15" fill="rgb(222,76,17)"/><text x="19.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.19%)</title><rect x="16" y="788" width="2" height="15" fill="rgb(223,94,25)"/><text x="19.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.19%)</title><rect x="16" y="804" width="2" height="15" fill="rgb(249,183,25)"/><text x="19.00" y="814.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/anyfhelper.py:9) (6 samples, 0.19%)</title><rect x="16" y="820" width="2" height="15" fill="rgb(242,133,13)"/><text x="19.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.19%)</title><rect x="16" y="836" width="2" height="15" fill="rgb(227,158,20)"/><text x="19.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.19%)</title><rect x="16" y="852" width="2" height="15" fill="rgb(225,145,54)"/><text x="19.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.19%)</title><rect x="16" y="868" width="2" height="15" fill="rgb(251,69,39)"/><text x="19.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.19%)</title><rect x="16" y="884" width="2" height="15" fill="rgb(240,7,21)"/><text x="19.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.19%)</title><rect x="16" y="900" width="2" height="15" fill="rgb(215,58,36)"/><text x="19.00" y="910.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/synchelper.py:10) (6 samples, 0.19%)</title><rect x="16" y="916" width="2" height="15" fill="rgb(207,59,37)"/><text x="19.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.19%)</title><rect x="16" y="932" width="2" height="15" fill="rgb(225,181,1)"/><text x="19.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (6 samples, 0.19%)</title><rect x="16" y="948" width="2" height="15" fill="rgb(246,97,11)"/><text x="19.00" y="958.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.19%)</title><rect x="16" y="964" width="2" height="15" fill="rgb(240,33,35)"/><text x="19.00" y="974.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.19%)</title><rect x="16" y="980" width="2" height="15" fill="rgb(236,47,29)"/><text x="19.00" y="990.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.19%)</title><rect x="16" y="996" width="2" height="15" fill="rgb(253,156,41)"/><text x="19.00" y="1006.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.19%)</title><rect x="16" y="1012" width="2" height="15" fill="rgb(237,179,27)"/><text x="19.00" y="1022.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.19%)</title><rect x="16" y="1028" width="2" height="15" fill="rgb(207,182,10)"/><text x="19.00" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.19%)</title><rect x="16" y="1044" width="2" height="15" fill="rgb(208,181,25)"/><text x="19.00" y="1054.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/__init__.py:11) (6 samples, 0.19%)</title><rect x="16" y="1060" width="2" height="15" fill="rgb(245,201,28)"/><text x="19.00" y="1070.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.19%)</title><rect x="16" y="1076" width="2" height="15" fill="rgb(243,108,30)"/><text x="19.00" y="1086.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.19%)</title><rect x="16" y="1092" width="2" height="15" fill="rgb(224,139,34)"/><text x="19.00" y="1102.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.19%)</title><rect x="16" y="1108" width="2" height="15" fill="rgb(206,29,35)"/><text x="19.00" y="1118.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.19%)</title><rect x="16" y="1124" width="2" height="15" fill="rgb(211,214,21)"/><text x="19.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.19%)</title><rect x="16" y="1140" width="2" height="15" fill="rgb(210,58,47)"/><text x="19.00" y="1150.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/pypi_helper.py:6) (6 samples, 0.19%)</title><rect x="16" y="1156" width="2" height="15" fill="rgb(234,182,35)"/><text x="19.00" y="1166.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.19%)</title><rect x="16" y="1172" width="2" height="15" fill="rgb(210,85,4)"/><text x="19.00" y="1182.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.19%)</title><rect x="16" y="1188" width="2" height="15" fill="rgb(211,166,54)"/><text x="19.00" y="1198.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.19%)</title><rect x="16" y="1204" width="2" height="15" fill="rgb(209,15,9)"/><text x="19.00" y="1214.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (6 samples, 0.19%)</title><rect x="16" y="1220" width="2" height="15" fill="rgb(220,69,6)"/><text x="19.00" y="1230.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:857) (6 samples, 0.19%)</title><rect x="16" y="1236" width="2" height="15" fill="rgb(219,206,23)"/><text x="19.00" y="1246.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:525) (6 samples, 0.19%)</title><rect x="16" y="1252" width="2" height="15" fill="rgb(218,91,40)"/><text x="19.00" y="1262.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (4 samples, 0.13%)</title><rect x="18" y="436" width="1" height="15" fill="rgb(232,187,48)"/><text x="21.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.13%)</title><rect x="18" y="452" width="1" height="15" fill="rgb(224,182,11)"/><text x="21.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.13%)</title><rect x="18" y="468" width="1" height="15" fill="rgb(210,14,27)"/><text x="21.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.13%)</title><rect x="18" y="484" width="1" height="15" fill="rgb(237,66,22)"/><text x="21.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.13%)</title><rect x="18" y="500" width="1" height="15" fill="rgb(215,32,3)"/><text x="21.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.13%)</title><rect x="18" y="516" width="1" height="15" fill="rgb(246,227,6)"/><text x="21.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (4 samples, 0.13%)</title><rect x="18" y="532" width="1" height="15" fill="rgb(232,122,52)"/><text x="21.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.13%)</title><rect x="18" y="548" width="1" height="15" fill="rgb(239,56,52)"/><text x="21.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.13%)</title><rect x="18" y="564" width="1" height="15" fill="rgb(240,173,29)"/><text x="21.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.13%)</title><rect x="18" y="580" width="1" height="15" fill="rgb(225,141,46)"/><text x="21.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.13%)</title><rect x="18" y="596" width="1" height="15" fill="rgb(223,2,5)"/><text x="21.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.13%)</title><rect x="18" y="612" width="1" height="15" fill="rgb(234,22,6)"/><text x="21.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (3 samples, 0.10%)</title><rect x="18" y="628" width="1" height="15" fill="rgb(251,69,12)"/><text x="21.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="18" y="644" width="1" height="15" fill="rgb(243,90,23)"/><text x="21.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="18" y="660" width="1" height="15" fill="rgb(215,185,43)"/><text x="21.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="18" y="676" width="1" height="15" fill="rgb(222,134,8)"/><text x="21.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="18" y="692" width="1" height="15" fill="rgb(205,130,19)"/><text x="21.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="18" y="708" width="1" height="15" fill="rgb(238,55,47)"/><text x="21.00" y="718.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:4) (29 samples, 0.94%)</title><rect x="10" y="52" width="11" height="15" fill="rgb(213,76,6)"/><text x="13.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (29 samples, 0.94%)</title><rect x="10" y="68" width="11" height="15" fill="rgb(232,144,42)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (29 samples, 0.94%)</title><rect x="10" y="84" width="11" height="15" fill="rgb(240,65,31)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (29 samples, 0.94%)</title><rect x="10" y="100" width="11" height="15" fill="rgb(227,122,3)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (29 samples, 0.94%)</title><rect x="10" y="116" width="11" height="15" fill="rgb(235,81,15)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (29 samples, 0.94%)</title><rect x="10" y="132" width="11" height="15" fill="rgb(237,185,30)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsRegressor/bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3.py:7) (18 samples, 0.58%)</title><rect x="14" y="148" width="7" height="15" fill="rgb(246,144,25)"/><text x="17.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (18 samples, 0.58%)</title><rect x="14" y="164" width="7" height="15" fill="rgb(244,205,51)"/><text x="17.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (18 samples, 0.58%)</title><rect x="14" y="180" width="7" height="15" fill="rgb(239,158,31)"/><text x="17.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (18 samples, 0.58%)</title><rect x="14" y="196" width="7" height="15" fill="rgb(205,27,9)"/><text x="17.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (18 samples, 0.58%)</title><rect x="14" y="212" width="7" height="15" fill="rgb(248,145,40)"/><text x="17.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (18 samples, 0.58%)</title><rect x="14" y="228" width="7" height="15" fill="rgb(222,47,31)"/><text x="17.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (7 samples, 0.23%)</title><rect x="18" y="244" width="3" height="15" fill="rgb(250,151,23)"/><text x="21.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.23%)</title><rect x="18" y="260" width="3" height="15" fill="rgb(245,87,1)"/><text x="21.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.23%)</title><rect x="18" y="276" width="3" height="15" fill="rgb(208,28,43)"/><text x="21.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.23%)</title><rect x="18" y="292" width="3" height="15" fill="rgb(251,185,38)"/><text x="21.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.23%)</title><rect x="18" y="308" width="3" height="15" fill="rgb(254,80,50)"/><text x="21.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.23%)</title><rect x="18" y="324" width="3" height="15" fill="rgb(240,90,19)"/><text x="21.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (7 samples, 0.23%)</title><rect x="18" y="340" width="3" height="15" fill="rgb(238,88,37)"/><text x="21.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.23%)</title><rect x="18" y="356" width="3" height="15" fill="rgb(245,201,1)"/><text x="21.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.23%)</title><rect x="18" y="372" width="3" height="15" fill="rgb(212,213,24)"/><text x="21.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.23%)</title><rect x="18" y="388" width="3" height="15" fill="rgb(243,32,34)"/><text x="21.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.23%)</title><rect x="18" y="404" width="3" height="15" fill="rgb(242,62,49)"/><text x="21.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.23%)</title><rect x="18" y="420" width="3" height="15" fill="rgb(211,191,29)"/><text x="21.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (3 samples, 0.10%)</title><rect x="19" y="436" width="2" height="15" fill="rgb(232,98,40)"/><text x="22.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="19" y="452" width="2" height="15" fill="rgb(244,128,26)"/><text x="22.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.10%)</title><rect x="19" y="468" width="2" height="15" fill="rgb(233,135,30)"/><text x="22.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="19" y="484" width="2" height="15" fill="rgb(243,96,13)"/><text x="22.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="19" y="500" width="2" height="15" fill="rgb(211,148,42)"/><text x="22.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="19" y="516" width="2" height="15" fill="rgb(233,138,20)"/><text x="22.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="19" y="532" width="2" height="15" fill="rgb(246,127,27)"/><text x="22.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="19" y="548" width="2" height="15" fill="rgb(225,31,54)"/><text x="22.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="19" y="564" width="2" height="15" fill="rgb(232,44,30)"/><text x="22.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (3 samples, 0.10%)</title><rect x="19" y="580" width="2" height="15" fill="rgb(248,136,35)"/><text x="22.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="19" y="596" width="2" height="15" fill="rgb(244,87,14)"/><text x="22.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="19" y="612" width="2" height="15" fill="rgb(205,179,54)"/><text x="22.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="19" y="628" width="2" height="15" fill="rgb(210,210,50)"/><text x="22.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="19" y="644" width="2" height="15" fill="rgb(248,46,11)"/><text x="22.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="19" y="660" width="2" height="15" fill="rgb(248,83,19)"/><text x="22.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (3 samples, 0.10%)</title><rect x="19" y="676" width="2" height="15" fill="rgb(248,11,49)"/><text x="22.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="19" y="692" width="2" height="15" fill="rgb(207,194,12)"/><text x="22.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="19" y="708" width="2" height="15" fill="rgb(251,205,9)"/><text x="22.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="19" y="724" width="2" height="15" fill="rgb(233,122,49)"/><text x="22.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="19" y="740" width="2" height="15" fill="rgb(250,171,11)"/><text x="22.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="19" y="756" width="2" height="15" fill="rgb(254,178,0)"/><text x="22.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (3 samples, 0.10%)</title><rect x="19" y="772" width="2" height="15" fill="rgb(211,180,52)"/><text x="22.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="19" y="788" width="2" height="15" fill="rgb(213,31,4)"/><text x="22.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="19" y="804" width="2" height="15" fill="rgb(217,68,12)"/><text x="22.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="19" y="820" width="2" height="15" fill="rgb(213,153,3)"/><text x="22.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="19" y="836" width="2" height="15" fill="rgb(254,160,5)"/><text x="22.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="19" y="852" width="2" height="15" fill="rgb(209,170,52)"/><text x="22.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (3 samples, 0.10%)</title><rect x="19" y="868" width="2" height="15" fill="rgb(211,114,7)"/><text x="22.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="19" y="884" width="2" height="15" fill="rgb(241,171,8)"/><text x="22.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.10%)</title><rect x="19" y="900" width="2" height="15" fill="rgb(227,200,38)"/><text x="22.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="19" y="916" width="2" height="15" fill="rgb(233,77,18)"/><text x="22.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="19" y="932" width="2" height="15" fill="rgb(226,6,0)"/><text x="22.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="19" y="948" width="2" height="15" fill="rgb(239,132,39)"/><text x="22.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="19" y="964" width="2" height="15" fill="rgb(235,131,41)"/><text x="22.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="19" y="980" width="2" height="15" fill="rgb(234,99,54)"/><text x="22.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="19" y="996" width="2" height="15" fill="rgb(223,25,22)"/><text x="22.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (3 samples, 0.10%)</title><rect x="19" y="1012" width="2" height="15" fill="rgb(208,135,48)"/><text x="22.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="19" y="1028" width="2" height="15" fill="rgb(233,218,54)"/><text x="22.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="19" y="1044" width="2" height="15" fill="rgb(222,138,16)"/><text x="22.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="19" y="1060" width="2" height="15" fill="rgb(207,180,0)"/><text x="22.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="19" y="1076" width="2" height="15" fill="rgb(208,211,3)"/><text x="22.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="19" y="1092" width="2" height="15" fill="rgb(224,192,35)"/><text x="22.00" y="1102.50"></text></g><g><title>check_array (sklearn/utils/validation.py:502) (5 samples, 0.16%)</title><rect x="22" y="164" width="2" height="15" fill="rgb(226,84,7)"/><text x="25.00" y="174.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:172) (18 samples, 0.58%)</title><rect x="21" y="148" width="7" height="15" fill="rgb(232,163,22)"/><text x="24.00" y="158.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (3 samples, 0.10%)</title><rect x="27" y="164" width="1" height="15" fill="rgb(222,107,34)"/><text x="30.00" y="174.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:583) (8 samples, 0.26%)</title><rect x="28" y="164" width="3" height="15" fill="rgb(215,149,28)"/><text x="31.00" y="174.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (7 samples, 0.23%)</title><rect x="29" y="180" width="2" height="15" fill="rgb(235,106,14)"/><text x="32.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (4 samples, 0.13%)</title><rect x="30" y="196" width="1" height="15" fill="rgb(227,203,22)"/><text x="33.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (10 samples, 0.32%)</title><rect x="31" y="164" width="4" height="15" fill="rgb(236,32,42)"/><text x="34.00" y="174.50"></text></g><g><title>get_active_backend (joblib/parallel.py:116) (3 samples, 0.10%)</title><rect x="35" y="196" width="1" height="15" fill="rgb(219,17,36)"/><text x="38.00" y="206.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:276) (3 samples, 0.10%)</title><rect x="35" y="212" width="1" height="15" fill="rgb(231,182,24)"/><text x="38.00" y="222.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:620) (5 samples, 0.16%)</title><rect x="35" y="164" width="2" height="15" fill="rgb(236,5,21)"/><text x="38.00" y="174.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py:388) (5 samples, 0.16%)</title><rect x="35" y="180" width="2" height="15" fill="rgb(244,207,22)"/><text x="38.00" y="190.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1562) (5 samples, 0.16%)</title><rect x="37" y="180" width="2" height="15" fill="rgb(222,77,42)"/><text x="40.00" y="190.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1586) (3 samples, 0.10%)</title><rect x="39" y="180" width="1" height="15" fill="rgb(229,25,4)"/><text x="42.00" y="190.50"></text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1347) (4 samples, 0.13%)</title><rect x="40" y="212" width="2" height="15" fill="rgb(216,159,20)"/><text x="43.00" y="222.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py:389) (3 samples, 0.10%)</title><rect x="41" y="228" width="1" height="15" fill="rgb(248,150,24)"/><text x="44.00" y="238.50"></text></g><g><title>check_array (sklearn/utils/validation.py:515) (5 samples, 0.16%)</title><rect x="44" y="260" width="2" height="15" fill="rgb(227,38,21)"/><text x="47.00" y="270.50"></text></g><g><title>asarray (numpy/core/_asarray.py:85) (4 samples, 0.13%)</title><rect x="45" y="276" width="1" height="15" fill="rgb(245,190,3)"/><text x="48.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1734) (4 samples, 0.13%)</title><rect x="45" y="292" width="1" height="15" fill="rgb(248,170,43)"/><text x="48.00" y="302.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c:2041) (4 samples, 0.13%)</title><rect x="45" y="308" width="1" height="15" fill="rgb(224,31,52)"/><text x="48.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c:1966) (4 samples, 0.13%)</title><rect x="45" y="324" width="1" height="15" fill="rgb(215,167,51)"/><text x="48.00" y="334.50"></text></g><g><title>PyArray_FromArray (ctors.c:2172) (4 samples, 0.13%)</title><rect x="45" y="340" width="1" height="15" fill="rgb(250,114,34)"/><text x="48.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (3 samples, 0.10%)</title><rect x="45" y="356" width="1" height="15" fill="rgb(225,44,14)"/><text x="48.00" y="366.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (5 samples, 0.16%)</title><rect x="48" y="276" width="2" height="15" fill="rgb(227,223,26)"/><text x="51.00" y="286.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (9 samples, 0.29%)</title><rect x="47" y="260" width="4" height="15" fill="rgb(210,76,50)"/><text x="50.00" y="270.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:141) (25 samples, 0.81%)</title><rect x="42" y="244" width="10" height="15" fill="rgb(205,64,32)"/><text x="45.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (3 samples, 0.10%)</title><rect x="51" y="260" width="1" height="15" fill="rgb(216,55,54)"/><text x="54.00" y="270.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:262) (37 samples, 1.20%)</title><rect x="42" y="228" width="14" height="15" fill="rgb(231,159,51)"/><text x="45.00" y="238.50"></text></g><g><title>check_pairwise_arrays (sklearn/metrics/pairwise.py:144) (12 samples, 0.39%)</title><rect x="52" y="244" width="4" height="15" fill="rgb(210,2,10)"/><text x="55.00" y="254.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (5 samples, 0.16%)</title><rect x="55" y="260" width="1" height="15" fill="rgb(240,137,23)"/><text x="58.00" y="270.50"></text></g><g><title>PyArray_EinsteinSum (einsum.c.src:2768) (4 samples, 0.13%)</title><rect x="58" y="324" width="1" height="15" fill="rgb(215,9,35)"/><text x="61.00" y="334.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:279) (8 samples, 0.26%)</title><rect x="57" y="228" width="3" height="15" fill="rgb(239,137,4)"/><text x="60.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (7 samples, 0.23%)</title><rect x="57" y="244" width="3" height="15" fill="rgb(231,187,31)"/><text x="60.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;:6) (7 samples, 0.23%)</title><rect x="57" y="260" width="3" height="15" fill="rgb(208,75,27)"/><text x="60.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.19%)</title><rect x="58" y="276" width="2" height="15" fill="rgb(224,122,22)"/><text x="61.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py:1356) (6 samples, 0.19%)</title><rect x="58" y="292" width="2" height="15" fill="rgb(205,199,13)"/><text x="61.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c:2693) (6 samples, 0.19%)</title><rect x="58" y="308" width="2" height="15" fill="rgb(221,27,29)"/><text x="61.00" y="318.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:295) (6 samples, 0.19%)</title><rect x="60" y="228" width="2" height="15" fill="rgb(210,27,45)"/><text x="63.00" y="238.50"></text></g><g><title>row_norms (sklearn/utils/extmath.py:74) (5 samples, 0.16%)</title><rect x="60" y="244" width="2" height="15" fill="rgb(223,149,12)"/><text x="63.00" y="254.50"></text></g><g><title>einsum (&lt;__array_function__ internals&gt;:6) (4 samples, 0.13%)</title><rect x="61" y="260" width="1" height="15" fill="rgb(211,38,44)"/><text x="64.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.10%)</title><rect x="61" y="276" width="1" height="15" fill="rgb(248,60,46)"/><text x="64.00" y="286.50"></text></g><g><title>einsum (numpy/core/einsumfunc.py:1356) (3 samples, 0.10%)</title><rect x="61" y="292" width="1" height="15" fill="rgb(252,90,26)"/><text x="64.00" y="302.50"></text></g><g><title>array_einsum (multiarraymodule.c:2693) (3 samples, 0.10%)</title><rect x="61" y="308" width="1" height="15" fill="rgb(227,229,46)"/><text x="64.00" y="318.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:303) (5 samples, 0.16%)</title><rect x="62" y="228" width="2" height="15" fill="rgb(249,164,18)"/><text x="65.00" y="238.50"></text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:304) (3 samples, 0.10%)</title><rect x="64" y="228" width="1" height="15" fill="rgb(240,102,28)"/><text x="67.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.10%)</title><rect x="64" y="244" width="1" height="15" fill="rgb(213,10,12)"/><text x="67.00" y="254.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1592) (71 samples, 2.30%)</title><rect x="40" y="180" width="28" height="15" fill="rgb(226,78,12)"/><text x="43.00" y="190.50">p..</text></g><g><title>pairwise_distances (sklearn/metrics/pairwise.py:1749) (71 samples, 2.30%)</title><rect x="40" y="196" width="28" height="15" fill="rgb(235,58,11)"/><text x="43.00" y="206.50">p..</text></g><g><title>_parallel_pairwise (sklearn/metrics/pairwise.py:1348) (67 samples, 2.17%)</title><rect x="42" y="212" width="26" height="15" fill="rgb(223,214,51)"/><text x="45.00" y="222.50">_..</text></g><g><title>euclidean_distances (sklearn/metrics/pairwise.py:306) (4 samples, 0.13%)</title><rect x="66" y="228" width="2" height="15" fill="rgb(223,4,5)"/><text x="69.00" y="238.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1601) (7 samples, 0.23%)</title><rect x="68" y="180" width="2" height="15" fill="rgb(247,110,47)"/><text x="71.00" y="190.50"></text></g><g><title>_kneighbors_reduce_func (sklearn/neighbors/_base.py:521) (4 samples, 0.13%)</title><rect x="69" y="196" width="1" height="15" fill="rgb(241,171,4)"/><text x="72.00" y="206.50"></text></g><g><title>pairwise_distances_chunked (sklearn/metrics/pairwise.py:1602) (8 samples, 0.26%)</title><rect x="70" y="180" width="3" height="15" fill="rgb(208,100,10)"/><text x="73.00" y="190.50"></text></g><g><title>_check_chunk_size (sklearn/metrics/pairwise.py:1419) (5 samples, 0.16%)</title><rect x="71" y="196" width="2" height="15" fill="rgb(231,199,12)"/><text x="74.00" y="206.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/metrics/pairwise.py:1419) (5 samples, 0.16%)</title><rect x="71" y="212" width="2" height="15" fill="rgb(225,196,53)"/><text x="74.00" y="222.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:642) (96 samples, 3.11%)</title><rect x="37" y="164" width="37" height="15" fill="rgb(214,152,40)"/><text x="40.00" y="174.50">kne..</text></g><g><title>predict (sklearn/neighbors/_regression.py:174) (127 samples, 4.11%)</title><rect x="28" y="148" width="48" height="15" fill="rgb(254,176,0)"/><text x="31.00" y="158.50">pred..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:671) (7 samples, 0.23%)</title><rect x="74" y="164" width="2" height="15" fill="rgb(250,39,9)"/><text x="77.00" y="174.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (7 samples, 0.23%)</title><rect x="74" y="180" width="2" height="15" fill="rgb(241,87,34)"/><text x="77.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.23%)</title><rect x="74" y="196" width="2" height="15" fill="rgb(230,78,24)"/><text x="77.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (5 samples, 0.16%)</title><rect x="74" y="212" width="2" height="15" fill="rgb(228,219,9)"/><text x="77.00" y="222.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (3 samples, 0.10%)</title><rect x="75" y="228" width="1" height="15" fill="rgb(250,16,8)"/><text x="78.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.10%)</title><rect x="75" y="244" width="1" height="15" fill="rgb(229,70,31)"/><text x="78.00" y="254.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (3 samples, 0.10%)</title><rect x="75" y="260" width="1" height="15" fill="rgb(220,111,35)"/><text x="78.00" y="270.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (3 samples, 0.10%)</title><rect x="75" y="276" width="1" height="15" fill="rgb(238,0,48)"/><text x="78.00" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py:151) (5 samples, 0.16%)</title><rect x="80" y="212" width="2" height="15" fill="rgb(254,32,16)"/><text x="83.00" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (3 samples, 0.10%)</title><rect x="81" y="228" width="1" height="15" fill="rgb(205,172,38)"/><text x="84.00" y="238.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (3 samples, 0.10%)</title><rect x="81" y="244" width="1" height="15" fill="rgb(242,138,46)"/><text x="84.00" y="254.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (3 samples, 0.10%)</title><rect x="81" y="260" width="1" height="15" fill="rgb(240,99,13)"/><text x="84.00" y="270.50"></text></g><g><title>predict (sklearn/neighbors/_regression.py:183) (14 samples, 0.45%)</title><rect x="77" y="148" width="5" height="15" fill="rgb(219,107,40)"/><text x="80.00" y="158.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (11 samples, 0.36%)</title><rect x="78" y="164" width="4" height="15" fill="rgb(254,160,51)"/><text x="81.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 0.36%)</title><rect x="78" y="180" width="4" height="15" fill="rgb(253,58,20)"/><text x="81.00" y="190.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (11 samples, 0.36%)</title><rect x="78" y="196" width="4" height="15" fill="rgb(236,110,32)"/><text x="81.00" y="206.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:54) (162 samples, 5.24%)</title><rect x="21" y="52" width="61" height="15" fill="rgb(240,92,48)"/><text x="24.00" y="62.50">&lt;modul..</text></g><g><title>profile_skl (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:53) (162 samples, 5.24%)</title><rect x="21" y="68" width="61" height="15" fill="rgb(211,53,14)"/><text x="24.00" y="78.50">profil..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:37) (162 samples, 5.24%)</title><rect x="21" y="84" width="61" height="15" fill="rgb(215,183,19)"/><text x="24.00" y="94.50">setup_..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:31) (162 samples, 5.24%)</title><rect x="21" y="100" width="61" height="15" fill="rgb(248,202,5)"/><text x="24.00" y="110.50">profil..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (161 samples, 5.21%)</title><rect x="21" y="116" width="61" height="15" fill="rgb(252,10,40)"/><text x="24.00" y="126.50">time_p..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:374) (161 samples, 5.21%)</title><rect x="21" y="132" width="61" height="15" fill="rgb(235,147,30)"/><text x="24.00" y="142.50">&lt;lambd..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (5 samples, 0.16%)</title><rect x="84" y="180" width="1" height="15" fill="rgb(213,42,44)"/><text x="87.00" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:30) (3 samples, 0.10%)</title><rect x="88" y="212" width="1" height="15" fill="rgb(221,89,38)"/><text x="91.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (4 samples, 0.13%)</title><rect x="90" y="212" width="1" height="15" fill="rgb(233,86,23)"/><text x="93.00" y="222.50"></text></g><g><title>_common_run_shape (mlprodict/onnxrt/ops_cpu/op_scan.py:50) (3 samples, 0.10%)</title><rect x="92" y="228" width="1" height="15" fill="rgb(245,53,6)"/><text x="95.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:79) (7 samples, 0.23%)</title><rect x="92" y="212" width="3" height="15" fill="rgb(214,103,13)"/><text x="95.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:84) (3 samples, 0.10%)</title><rect x="95" y="212" width="1" height="15" fill="rgb(247,142,24)"/><text x="98.00" y="222.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (5 samples, 0.16%)</title><rect x="101" y="260" width="2" height="15" fill="rgb(242,137,28)"/><text x="104.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (11 samples, 0.36%)</title><rect x="99" y="228" width="4" height="15" fill="rgb(254,72,12)"/><text x="102.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (8 samples, 0.26%)</title><rect x="100" y="244" width="3" height="15" fill="rgb(218,215,12)"/><text x="103.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (23 samples, 0.74%)</title><rect x="96" y="212" width="9" height="15" fill="rgb(235,157,12)"/><text x="99.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (29 samples, 0.94%)</title><rect x="105" y="212" width="11" height="15" fill="rgb(235,150,23)"/><text x="108.00" y="222.50"></text></g><g><title>0x7f2672b31124 (libc-2.29.so) (4 samples, 0.13%)</title><rect x="114" y="228" width="2" height="15" fill="rgb(225,163,4)"/><text x="117.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:87) (5 samples, 0.16%)</title><rect x="116" y="212" width="2" height="15" fill="rgb(254,165,26)"/><text x="119.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (21 samples, 0.68%)</title><rect x="118" y="212" width="8" height="15" fill="rgb(234,62,16)"/><text x="121.00" y="222.50"></text></g><g><title>prepare_index (mapping.c:398) (3 samples, 0.10%)</title><rect x="126" y="244" width="1" height="15" fill="rgb(209,113,31)"/><text x="129.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1539) (11 samples, 0.36%)</title><rect x="126" y="228" width="5" height="15" fill="rgb(246,141,3)"/><text x="129.00" y="238.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (4 samples, 0.13%)</title><rect x="132" y="276" width="2" height="15" fill="rgb(242,177,5)"/><text x="135.00" y="286.50"></text></g><g><title>array_alloc (arrayobject.c:1770) (3 samples, 0.10%)</title><rect x="133" y="292" width="1" height="15" fill="rgb(207,116,29)"/><text x="136.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (26 samples, 0.84%)</title><rect x="126" y="212" width="9" height="15" fill="rgb(208,209,54)"/><text x="129.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1584) (13 samples, 0.42%)</title><rect x="131" y="228" width="4" height="15" fill="rgb(220,23,52)"/><text x="134.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (10 samples, 0.32%)</title><rect x="132" y="244" width="3" height="15" fill="rgb(236,44,53)"/><text x="135.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (8 samples, 0.26%)</title><rect x="132" y="260" width="3" height="15" fill="rgb(242,228,16)"/><text x="135.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:392) (7 samples, 0.23%)</title><rect x="150" y="228" width="3" height="15" fill="rgb(222,39,29)"/><text x="153.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (17 samples, 0.55%)</title><rect x="153" y="228" width="6" height="15" fill="rgb(250,38,7)"/><text x="156.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:401) (4 samples, 0.13%)</title><rect x="159" y="228" width="2" height="15" fill="rgb(210,117,46)"/><text x="162.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:426) (7 samples, 0.23%)</title><rect x="171" y="244" width="2" height="15" fill="rgb(215,191,45)"/><text x="174.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (17 samples, 0.55%)</title><rect x="173" y="244" width="7" height="15" fill="rgb(211,111,16)"/><text x="176.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (22 samples, 0.71%)</title><rect x="180" y="244" width="8" height="15" fill="rgb(250,97,42)"/><text x="183.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (22 samples, 0.71%)</title><rect x="188" y="244" width="9" height="15" fill="rgb(228,175,2)"/><text x="191.00" y="254.50"></text></g><g><title>unicode_eq (python3.7) (3 samples, 0.10%)</title><rect x="195" y="260" width="2" height="15" fill="rgb(252,14,45)"/><text x="198.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:448) (3 samples, 0.10%)</title><rect x="197" y="244" width="1" height="15" fill="rgb(245,147,39)"/><text x="200.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (11 samples, 0.36%)</title><rect x="198" y="244" width="5" height="15" fill="rgb(223,61,7)"/><text x="201.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (9 samples, 0.29%)</title><rect x="239" y="260" width="4" height="15" fill="rgb(231,212,11)"/><text x="242.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (223 samples, 7.21%)</title><rect x="243" y="260" width="85" height="15" fill="rgb(207,211,49)"/><text x="246.00" y="270.50">run (mlpro..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (27 samples, 0.87%)</title><rect x="318" y="276" width="10" height="15" fill="rgb(220,191,41)"/><text x="321.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:268) (4 samples, 0.13%)</title><rect x="374" y="292" width="1" height="15" fill="rgb(231,184,22)"/><text x="377.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (34 samples, 1.10%)</title><rect x="390" y="308" width="13" height="15" fill="rgb(224,84,28)"/><text x="393.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:18) (6 samples, 0.19%)</title><rect x="403" y="308" width="3" height="15" fill="rgb(212,75,45)"/><text x="406.00" y="318.50"></text></g><g><title>array_copy (methods.c:1127) (3 samples, 0.10%)</title><rect x="408" y="324" width="1" height="15" fill="rgb(254,125,22)"/><text x="411.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (5 samples, 0.16%)</title><rect x="411" y="404" width="2" height="15" fill="rgb(217,23,9)"/><text x="414.00" y="414.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (4 samples, 0.13%)</title><rect x="411" y="420" width="2" height="15" fill="rgb(219,209,53)"/><text x="414.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (4 samples, 0.13%)</title><rect x="414" y="404" width="1" height="15" fill="rgb(234,64,52)"/><text x="417.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (3 samples, 0.10%)</title><rect x="414" y="420" width="1" height="15" fill="rgb(208,130,24)"/><text x="417.00" y="430.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (12 samples, 0.39%)</title><rect x="411" y="356" width="5" height="15" fill="rgb(235,150,28)"/><text x="414.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (12 samples, 0.39%)</title><rect x="411" y="372" width="5" height="15" fill="rgb(207,207,15)"/><text x="414.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (12 samples, 0.39%)</title><rect x="411" y="388" width="5" height="15" fill="rgb(227,29,43)"/><text x="414.00" y="398.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (17 samples, 0.55%)</title><rect x="410" y="340" width="6" height="15" fill="rgb(225,182,37)"/><text x="413.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:301) (3 samples, 0.10%)</title><rect x="416" y="356" width="2" height="15" fill="rgb(247,222,2)"/><text x="419.00" y="366.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:333) (3 samples, 0.10%)</title><rect x="418" y="356" width="2" height="15" fill="rgb(249,15,30)"/><text x="421.00" y="366.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c:274) (3 samples, 0.10%)</title><rect x="421" y="404" width="1" height="15" fill="rgb(245,177,15)"/><text x="424.00" y="414.50"></text></g><g><title>PyArray_GetStridedCopyFn (lowlevel_strided_loops.c.src:347) (3 samples, 0.10%)</title><rect x="421" y="420" width="1" height="15" fill="rgb(206,148,45)"/><text x="424.00" y="430.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:120) (5 samples, 0.16%)</title><rect x="420" y="372" width="2" height="15" fill="rgb(243,9,32)"/><text x="423.00" y="382.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c:3673) (4 samples, 0.13%)</title><rect x="421" y="388" width="1" height="15" fill="rgb(206,85,6)"/><text x="424.00" y="398.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (5 samples, 0.16%)</title><rect x="423" y="388" width="2" height="15" fill="rgb(221,142,37)"/><text x="426.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (9 samples, 0.29%)</title><rect x="422" y="372" width="4" height="15" fill="rgb(209,105,54)"/><text x="425.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (5 samples, 0.16%)</title><rect x="427" y="372" width="2" height="15" fill="rgb(250,39,47)"/><text x="430.00" y="382.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (7 samples, 0.23%)</title><rect x="430" y="388" width="2" height="15" fill="rgb(243,151,19)"/><text x="433.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (7 samples, 0.23%)</title><rect x="430" y="404" width="2" height="15" fill="rgb(215,11,12)"/><text x="433.00" y="414.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (33 samples, 1.07%)</title><rect x="420" y="356" width="13" height="15" fill="rgb(213,137,10)"/><text x="423.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (8 samples, 0.26%)</title><rect x="430" y="372" width="3" height="15" fill="rgb(206,120,45)"/><text x="433.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (73 samples, 2.36%)</title><rect x="406" y="308" width="28" height="15" fill="rgb(231,22,35)"/><text x="409.00" y="318.50">_..</text></g><g><title>array_copy (methods.c:1133) (64 samples, 2.07%)</title><rect x="409" y="324" width="25" height="15" fill="rgb(225,11,24)"/><text x="412.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c:560) (46 samples, 1.49%)</title><rect x="416" y="340" width="18" height="15" fill="rgb(214,46,42)"/><text x="419.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (4 samples, 0.13%)</title><rect x="444" y="324" width="1" height="15" fill="rgb(222,227,34)"/><text x="447.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3155) (3 samples, 0.10%)</title><rect x="446" y="340" width="1" height="15" fill="rgb(209,125,42)"/><text x="449.00" y="350.50"></text></g><g><title>PyUFunc_DefaultTypeResolver (ufunc_type_resolution.c:288) (3 samples, 0.10%)</title><rect x="449" y="356" width="1" height="15" fill="rgb(234,165,34)"/><text x="452.00" y="366.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:757) (5 samples, 0.16%)</title><rect x="457" y="404" width="2" height="15" fill="rgb(211,156,24)"/><text x="460.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c:1521) (3 samples, 0.10%)</title><rect x="458" y="420" width="1" height="15" fill="rgb(236,108,20)"/><text x="461.00" y="430.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (14 samples, 0.45%)</title><rect x="455" y="372" width="5" height="15" fill="rgb(207,115,3)"/><text x="458.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (12 samples, 0.39%)</title><rect x="456" y="388" width="4" height="15" fill="rgb(228,121,18)"/><text x="459.00" y="398.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (23 samples, 0.74%)</title><rect x="452" y="356" width="9" height="15" fill="rgb(251,120,36)"/><text x="455.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (34 samples, 1.10%)</title><rect x="449" y="340" width="13" height="15" fill="rgb(247,18,4)"/><text x="452.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3215) (3 samples, 0.10%)</title><rect x="462" y="340" width="1" height="15" fill="rgb(238,39,22)"/><text x="465.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (4 samples, 0.13%)</title><rect x="463" y="340" width="2" height="15" fill="rgb(238,145,28)"/><text x="466.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1616) (5 samples, 0.16%)</title><rect x="465" y="356" width="2" height="15" fill="rgb(227,156,52)"/><text x="468.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (13 samples, 0.42%)</title><rect x="469" y="388" width="5" height="15" fill="rgb(223,219,39)"/><text x="472.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (13 samples, 0.42%)</title><rect x="469" y="404" width="5" height="15" fill="rgb(210,207,43)"/><text x="472.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (13 samples, 0.42%)</title><rect x="469" y="420" width="5" height="15" fill="rgb(210,3,50)"/><text x="472.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (13 samples, 0.42%)</title><rect x="469" y="436" width="5" height="15" fill="rgb(219,150,36)"/><text x="472.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (3 samples, 0.10%)</title><rect x="475" y="388" width="1" height="15" fill="rgb(224,51,42)"/><text x="478.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (25 samples, 0.81%)</title><rect x="468" y="356" width="9" height="15" fill="rgb(247,62,7)"/><text x="471.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (23 samples, 0.74%)</title><rect x="468" y="372" width="9" height="15" fill="rgb(248,218,3)"/><text x="471.00" y="382.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1338) (3 samples, 0.10%)</title><rect x="478" y="372" width="1" height="15" fill="rgb(253,87,35)"/><text x="481.00" y="382.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1341) (4 samples, 0.13%)</title><rect x="479" y="372" width="2" height="15" fill="rgb(210,161,27)"/><text x="482.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (9 samples, 0.29%)</title><rect x="478" y="356" width="3" height="15" fill="rgb(219,15,49)"/><text x="481.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (43 samples, 1.39%)</title><rect x="465" y="340" width="17" height="15" fill="rgb(231,176,27)"/><text x="468.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (97 samples, 3.14%)</title><rect x="446" y="324" width="37" height="15" fill="rgb(235,105,8)"/><text x="449.00" y="334.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (3 samples, 0.10%)</title><rect x="482" y="340" width="1" height="15" fill="rgb(241,109,16)"/><text x="485.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (130 samples, 4.21%)</title><rect x="434" y="308" width="50" height="15" fill="rgb(207,94,6)"/><text x="437.00" y="318.50">_run ..</text></g><g><title>_buffer_clear_info (buffer.c:723) (7 samples, 0.23%)</title><rect x="496" y="356" width="3" height="15" fill="rgb(250,81,39)"/><text x="499.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (7 samples, 0.23%)</title><rect x="499" y="356" width="3" height="15" fill="rgb(228,116,53)"/><text x="502.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (20 samples, 0.65%)</title><rect x="495" y="324" width="7" height="15" fill="rgb(220,103,19)"/><text x="498.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (16 samples, 0.52%)</title><rect x="496" y="340" width="6" height="15" fill="rgb(215,149,28)"/><text x="499.00" y="350.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (23 samples, 0.74%)</title><rect x="504" y="324" width="9" height="15" fill="rgb(254,169,53)"/><text x="507.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py:2042) (7 samples, 0.23%)</title><rect x="510" y="340" width="3" height="15" fill="rgb(217,108,30)"/><text x="513.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (4 samples, 0.13%)</title><rect x="518" y="340" width="1" height="15" fill="rgb(251,175,41)"/><text x="521.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (14 samples, 0.45%)</title><rect x="523" y="356" width="5" height="15" fill="rgb(230,176,37)"/><text x="526.00" y="366.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (9 samples, 0.29%)</title><rect x="528" y="356" width="3" height="15" fill="rgb(216,119,12)"/><text x="531.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (10 samples, 0.32%)</title><rect x="562" y="388" width="4" height="15" fill="rgb(222,225,52)"/><text x="565.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (61 samples, 1.97%)</title><rect x="548" y="372" width="23" height="15" fill="rgb(215,30,2)"/><text x="551.00" y="382.50">_..</text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (14 samples, 0.45%)</title><rect x="566" y="388" width="5" height="15" fill="rgb(206,224,2)"/><text x="569.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (10 samples, 0.32%)</title><rect x="571" y="372" width="4" height="15" fill="rgb(212,80,35)"/><text x="574.00" y="382.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (23 samples, 0.74%)</title><rect x="583" y="436" width="9" height="15" fill="rgb(216,59,4)"/><text x="586.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (7 samples, 0.23%)</title><rect x="589" y="452" width="3" height="15" fill="rgb(207,128,34)"/><text x="592.00" y="462.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (26 samples, 0.84%)</title><rect x="582" y="420" width="10" height="15" fill="rgb(217,75,44)"/><text x="585.00" y="430.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (28 samples, 0.91%)</title><rect x="582" y="388" width="11" height="15" fill="rgb(233,111,0)"/><text x="585.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (28 samples, 0.91%)</title><rect x="582" y="404" width="11" height="15" fill="rgb(221,187,45)"/><text x="585.00" y="414.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (35 samples, 1.13%)</title><rect x="594" y="404" width="14" height="15" fill="rgb(213,155,46)"/><text x="597.00" y="414.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4519) (3 samples, 0.10%)</title><rect x="608" y="404" width="1" height="15" fill="rgb(251,229,33)"/><text x="611.00" y="414.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (4 samples, 0.13%)</title><rect x="610" y="452" width="2" height="15" fill="rgb(221,81,6)"/><text x="613.00" y="462.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:864) (7 samples, 0.23%)</title><rect x="612" y="452" width="3" height="15" fill="rgb(218,139,54)"/><text x="615.00" y="462.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (15 samples, 0.49%)</title><rect x="610" y="420" width="6" height="15" fill="rgb(236,69,25)"/><text x="613.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (15 samples, 0.49%)</title><rect x="610" y="436" width="6" height="15" fill="rgb(248,174,41)"/><text x="613.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:872) (3 samples, 0.10%)</title><rect x="615" y="452" width="1" height="15" fill="rgb(221,93,30)"/><text x="618.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4564) (17 samples, 0.55%)</title><rect x="610" y="404" width="6" height="15" fill="rgb(241,207,48)"/><text x="613.00" y="414.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3619) (3 samples, 0.10%)</title><rect x="618" y="420" width="1" height="15" fill="rgb(219,156,38)"/><text x="621.00" y="430.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3635) (4 samples, 0.13%)</title><rect x="619" y="420" width="2" height="15" fill="rgb(220,228,4)"/><text x="622.00" y="430.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2076) (3 samples, 0.10%)</title><rect x="623" y="468" width="1" height="15" fill="rgb(217,202,3)"/><text x="626.00" y="478.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (17 samples, 0.55%)</title><rect x="622" y="436" width="6" height="15" fill="rgb(221,118,43)"/><text x="625.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (15 samples, 0.49%)</title><rect x="623" y="452" width="5" height="15" fill="rgb(206,114,47)"/><text x="626.00" y="462.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (21 samples, 0.68%)</title><rect x="621" y="420" width="8" height="15" fill="rgb(217,143,52)"/><text x="624.00" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (13 samples, 0.42%)</title><rect x="631" y="468" width="5" height="15" fill="rgb(246,12,33)"/><text x="634.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (10 samples, 0.32%)</title><rect x="632" y="484" width="4" height="15" fill="rgb(228,157,52)"/><text x="635.00" y="494.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.10%)</title><rect x="634" y="500" width="2" height="15" fill="rgb(217,43,4)"/><text x="637.00" y="510.50"></text></g><g><title>allocate_reduce_result (reduction.c:58) (3 samples, 0.10%)</title><rect x="636" y="468" width="1" height="15" fill="rgb(229,178,51)"/><text x="639.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (16 samples, 0.52%)</title><rect x="638" y="500" width="6" height="15" fill="rgb(236,125,51)"/><text x="641.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (14 samples, 0.45%)</title><rect x="639" y="516" width="5" height="15" fill="rgb(230,80,40)"/><text x="642.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (14 samples, 0.45%)</title><rect x="639" y="532" width="5" height="15" fill="rgb(215,228,31)"/><text x="642.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (11 samples, 0.36%)</title><rect x="640" y="548" width="4" height="15" fill="rgb(254,169,6)"/><text x="643.00" y="558.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (5 samples, 0.16%)</title><rect x="646" y="532" width="1" height="15" fill="rgb(231,39,41)"/><text x="649.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (5 samples, 0.16%)</title><rect x="646" y="548" width="1" height="15" fill="rgb(250,33,23)"/><text x="649.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.16%)</title><rect x="646" y="564" width="1" height="15" fill="rgb(212,121,28)"/><text x="649.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (7 samples, 0.23%)</title><rect x="645" y="500" width="3" height="15" fill="rgb(229,229,7)"/><text x="648.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (7 samples, 0.23%)</title><rect x="645" y="516" width="3" height="15" fill="rgb(235,46,2)"/><text x="648.00" y="526.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (51 samples, 1.65%)</title><rect x="630" y="436" width="19" height="15" fill="rgb(220,110,43)"/><text x="633.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (51 samples, 1.65%)</title><rect x="630" y="452" width="19" height="15" fill="rgb(251,26,12)"/><text x="633.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (32 samples, 1.04%)</title><rect x="637" y="468" width="12" height="15" fill="rgb(231,209,33)"/><text x="640.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (31 samples, 1.00%)</title><rect x="637" y="484" width="12" height="15" fill="rgb(235,1,38)"/><text x="640.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (4 samples, 0.13%)</title><rect x="648" y="500" width="1" height="15" fill="rgb(248,148,6)"/><text x="651.00" y="510.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c:69) (3 samples, 0.10%)</title><rect x="648" y="516" width="1" height="15" fill="rgb(238,198,31)"/><text x="651.00" y="526.50"></text></g><g><title>IsAligned (array_assign.c:140) (3 samples, 0.10%)</title><rect x="648" y="532" width="1" height="15" fill="rgb(235,128,15)"/><text x="651.00" y="542.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:49) (3 samples, 0.10%)</title><rect x="654" y="484" width="1" height="15" fill="rgb(208,187,41)"/><text x="657.00" y="494.50"></text></g><g><title>npy_uint_alignment (common.h:216) (3 samples, 0.10%)</title><rect x="654" y="500" width="1" height="15" fill="rgb(229,171,16)"/><text x="657.00" y="510.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c:741) (5 samples, 0.16%)</title><rect x="658" y="500" width="2" height="15" fill="rgb(219,169,17)"/><text x="661.00" y="510.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src:955) (3 samples, 0.10%)</title><rect x="659" y="516" width="1" height="15" fill="rgb(226,207,40)"/><text x="662.00" y="526.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (8 samples, 0.26%)</title><rect x="657" y="484" width="3" height="15" fill="rgb(214,54,46)"/><text x="660.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (31 samples, 1.00%)</title><rect x="650" y="436" width="12" height="15" fill="rgb(252,229,48)"/><text x="653.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (25 samples, 0.81%)</title><rect x="652" y="452" width="10" height="15" fill="rgb(235,23,47)"/><text x="655.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (19 samples, 0.61%)</title><rect x="654" y="468" width="8" height="15" fill="rgb(244,215,48)"/><text x="657.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:110) (4 samples, 0.13%)</title><rect x="662" y="452" width="2" height="15" fill="rgb(240,154,49)"/><text x="665.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (3 samples, 0.10%)</title><rect x="664" y="452" width="1" height="15" fill="rgb(222,161,18)"/><text x="667.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (7 samples, 0.23%)</title><rect x="665" y="468" width="3" height="15" fill="rgb(228,215,26)"/><text x="668.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (8 samples, 0.26%)</title><rect x="665" y="452" width="3" height="15" fill="rgb(243,69,29)"/><text x="668.00" y="462.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c:1455) (3 samples, 0.10%)</title><rect x="670" y="468" width="1" height="15" fill="rgb(211,35,35)"/><text x="673.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (9 samples, 0.29%)</title><rect x="669" y="452" width="3" height="15" fill="rgb(237,28,42)"/><text x="672.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:390) (3 samples, 0.10%)</title><rect x="673" y="452" width="1" height="15" fill="rgb(210,162,51)"/><text x="676.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (5 samples, 0.16%)</title><rect x="674" y="452" width="2" height="15" fill="rgb(233,200,31)"/><text x="677.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (3 samples, 0.10%)</title><rect x="676" y="452" width="1" height="15" fill="rgb(234,52,38)"/><text x="679.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (43 samples, 1.39%)</title><rect x="662" y="436" width="17" height="15" fill="rgb(240,50,41)"/><text x="665.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (3 samples, 0.10%)</title><rect x="678" y="452" width="1" height="15" fill="rgb(205,227,13)"/><text x="681.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1741) (4 samples, 0.13%)</title><rect x="684" y="468" width="2" height="15" fill="rgb(253,178,37)"/><text x="687.00" y="478.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (3 samples, 0.10%)</title><rect x="686" y="468" width="1" height="15" fill="rgb(224,205,49)"/><text x="689.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (20 samples, 0.65%)</title><rect x="682" y="436" width="7" height="15" fill="rgb(210,7,5)"/><text x="685.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (14 samples, 0.45%)</title><rect x="684" y="452" width="5" height="15" fill="rgb(209,155,46)"/><text x="687.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:255) (5 samples, 0.16%)</title><rect x="687" y="468" width="2" height="15" fill="rgb(231,85,23)"/><text x="690.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:583) (3 samples, 0.10%)</title><rect x="689" y="436" width="2" height="15" fill="rgb(235,51,48)"/><text x="692.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (3 samples, 0.10%)</title><rect x="691" y="436" width="1" height="15" fill="rgb(232,83,18)"/><text x="694.00" y="446.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (199 samples, 6.44%)</title><rect x="617" y="404" width="76" height="15" fill="rgb(232,12,49)"/><text x="620.00" y="414.50">PyUFunc_..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (167 samples, 5.40%)</title><rect x="629" y="420" width="64" height="15" fill="rgb(231,143,50)"/><text x="632.00" y="430.50">PyUFunc..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:595) (4 samples, 0.13%)</title><rect x="692" y="436" width="1" height="15" fill="rgb(248,70,30)"/><text x="695.00" y="446.50"></text></g><g><title>PyArray_RemoveAxesInPlace (shape.c:1054) (4 samples, 0.13%)</title><rect x="692" y="452" width="1" height="15" fill="rgb(214,204,30)"/><text x="695.00" y="462.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (460 samples, 14.88%)</title><rect x="519" y="340" width="176" height="15" fill="rgb(206,99,16)"/><text x="522.00" y="350.50">array_implement_array_..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (428 samples, 13.85%)</title><rect x="531" y="356" width="164" height="15" fill="rgb(236,196,24)"/><text x="534.00" y="366.50">sum (numpy/core/fromn..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (314 samples, 10.16%)</title><rect x="575" y="372" width="120" height="15" fill="rgb(225,184,2)"/><text x="578.00" y="382.50">_wrapreduction..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (267 samples, 8.64%)</title><rect x="593" y="388" width="102" height="15" fill="rgb(230,197,35)"/><text x="596.00" y="398.50">ufunc_reduce..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (838 samples, 27.11%)</title><rect x="375" y="292" width="320" height="15" fill="rgb(232,209,52)"/><text x="378.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py:269)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (554 samples, 17.92%)</title><rect x="484" y="308" width="211" height="15" fill="rgb(210,41,51)"/><text x="487.00" y="318.50">_run (mlprodict/onnxrt/ops_..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (477 samples, 15.43%)</title><rect x="513" y="324" width="182" height="15" fill="rgb(250,158,40)"/><text x="516.00" y="334.50">sum (&lt;__array_function_..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (880 samples, 28.47%)</title><rect x="360" y="276" width="336" height="15" fill="rgb(249,215,21)"/><text x="363.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py:348)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:274) (3 samples, 0.10%)</title><rect x="695" y="292" width="1" height="15" fill="rgb(248,30,35)"/><text x="698.00" y="302.50"></text></g><g><title>arraydescr_richcompare (descriptor.c:3248) (3 samples, 0.10%)</title><rect x="708" y="292" width="2" height="15" fill="rgb(226,161,32)"/><text x="711.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (39 samples, 1.26%)</title><rect x="696" y="276" width="15" height="15" fill="rgb(216,120,22)"/><text x="699.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (10 samples, 0.32%)</title><rect x="716" y="292" width="4" height="15" fill="rgb(212,205,21)"/><text x="719.00" y="302.50"></text></g><g><title>arraydescr_richcompare (descriptor.c:3248) (4 samples, 0.13%)</title><rect x="718" y="308" width="2" height="15" fill="rgb(251,137,1)"/><text x="721.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:519) (13 samples, 0.42%)</title><rect x="724" y="308" width="5" height="15" fill="rgb(245,22,15)"/><text x="727.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:527) (7 samples, 0.23%)</title><rect x="729" y="308" width="2" height="15" fill="rgb(220,55,17)"/><text x="732.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4716) (3 samples, 0.10%)</title><rect x="736" y="324" width="1" height="15" fill="rgb(217,128,33)"/><text x="739.00" y="334.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (4 samples, 0.13%)</title><rect x="737" y="356" width="2" height="15" fill="rgb(237,70,16)"/><text x="740.00" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (7 samples, 0.23%)</title><rect x="737" y="324" width="3" height="15" fill="rgb(246,216,20)"/><text x="740.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (7 samples, 0.23%)</title><rect x="737" y="340" width="3" height="15" fill="rgb(233,200,53)"/><text x="740.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3105) (4 samples, 0.13%)</title><rect x="740" y="340" width="1" height="15" fill="rgb(234,66,48)"/><text x="743.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (4 samples, 0.13%)</title><rect x="743" y="340" width="1" height="15" fill="rgb(216,104,51)"/><text x="746.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:866) (4 samples, 0.13%)</title><rect x="745" y="356" width="1" height="15" fill="rgb(253,5,54)"/><text x="748.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1905) (3 samples, 0.10%)</title><rect x="748" y="388" width="1" height="15" fill="rgb(225,144,13)"/><text x="751.00" y="398.50"></text></g><g><title>promote_types (convert_datatype.c:1043) (3 samples, 0.10%)</title><rect x="748" y="404" width="1" height="15" fill="rgb(243,151,29)"/><text x="751.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (9 samples, 0.29%)</title><rect x="747" y="372" width="3" height="15" fill="rgb(206,109,51)"/><text x="750.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (17 samples, 0.55%)</title><rect x="745" y="340" width="6" height="15" fill="rgb(251,80,37)"/><text x="748.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (13 samples, 0.42%)</title><rect x="746" y="356" width="5" height="15" fill="rgb(220,102,32)"/><text x="749.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (5 samples, 0.16%)</title><rect x="753" y="340" width="2" height="15" fill="rgb(213,94,9)"/><text x="756.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1616) (4 samples, 0.13%)</title><rect x="755" y="356" width="2" height="15" fill="rgb(206,186,41)"/><text x="758.00" y="366.50"></text></g><g><title>iterator_loop (ufunc_object.c:1471) (3 samples, 0.10%)</title><rect x="757" y="372" width="2" height="15" fill="rgb(213,218,17)"/><text x="760.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (7 samples, 0.23%)</title><rect x="760" y="388" width="3" height="15" fill="rgb(239,168,30)"/><text x="763.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.19%)</title><rect x="760" y="404" width="3" height="15" fill="rgb(238,152,25)"/><text x="763.00" y="414.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1182) (5 samples, 0.16%)</title><rect x="763" y="404" width="2" height="15" fill="rgb(227,108,42)"/><text x="766.00" y="414.50"></text></g><g><title>npyiter_check_per_op_flags (nditer_constr.c:947) (3 samples, 0.10%)</title><rect x="764" y="420" width="1" height="15" fill="rgb(227,21,26)"/><text x="767.00" y="430.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c:1104) (3 samples, 0.10%)</title><rect x="765" y="420" width="2" height="15" fill="rgb(252,40,19)"/><text x="768.00" y="430.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (10 samples, 0.32%)</title><rect x="763" y="388" width="4" height="15" fill="rgb(250,181,37)"/><text x="766.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (5 samples, 0.16%)</title><rect x="765" y="404" width="2" height="15" fill="rgb(210,36,8)"/><text x="768.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (10 samples, 0.32%)</title><rect x="767" y="388" width="4" height="15" fill="rgb(229,84,19)"/><text x="770.00" y="398.50"></text></g><g><title>npyiter_compute_index_strides (nditer_constr.c:2035) (3 samples, 0.10%)</title><rect x="773" y="404" width="1" height="15" fill="rgb(235,194,38)"/><text x="776.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:282) (7 samples, 0.23%)</title><rect x="771" y="388" width="3" height="15" fill="rgb(222,167,49)"/><text x="774.00" y="398.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2514) (4 samples, 0.13%)</title><rect x="776" y="420" width="2" height="15" fill="rgb(227,140,47)"/><text x="779.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.10%)</title><rect x="778" y="452" width="1" height="15" fill="rgb(207,158,11)"/><text x="781.00" y="462.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c:66) (3 samples, 0.10%)</title><rect x="782" y="468" width="1" height="15" fill="rgb(232,49,45)"/><text x="785.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (4 samples, 0.13%)</title><rect x="782" y="452" width="1" height="15" fill="rgb(254,2,39)"/><text x="785.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (20 samples, 0.65%)</title><rect x="776" y="404" width="8" height="15" fill="rgb(223,13,40)"/><text x="779.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (16 samples, 0.52%)</title><rect x="778" y="420" width="6" height="15" fill="rgb(222,125,4)"/><text x="781.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (15 samples, 0.49%)</title><rect x="778" y="436" width="6" height="15" fill="rgb(235,208,1)"/><text x="781.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (28 samples, 0.91%)</title><rect x="775" y="388" width="11" height="15" fill="rgb(231,220,4)"/><text x="778.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (4 samples, 0.13%)</title><rect x="786" y="388" width="2" height="15" fill="rgb(222,65,15)"/><text x="789.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (77 samples, 2.49%)</title><rect x="759" y="372" width="29" height="15" fill="rgb(247,201,13)"/><text x="762.00" y="382.50">it..</text></g><g><title>iterator_loop (ufunc_object.c:1561) (6 samples, 0.19%)</title><rect x="791" y="372" width="2" height="15" fill="rgb(254,122,45)"/><text x="794.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c:1568) (4 samples, 0.13%)</title><rect x="793" y="372" width="2" height="15" fill="rgb(213,40,50)"/><text x="796.00" y="382.50"></text></g><g><title>NpyIter_GetIterNext (nditer_templ.c.src:350) (4 samples, 0.13%)</title><rect x="793" y="388" width="2" height="15" fill="rgb(240,167,43)"/><text x="796.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1574) (3 samples, 0.10%)</title><rect x="795" y="372" width="1" height="15" fill="rgb(226,121,14)"/><text x="798.00" y="382.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1741) (3 samples, 0.10%)</title><rect x="796" y="388" width="1" height="15" fill="rgb(246,96,42)"/><text x="799.00" y="398.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (6 samples, 0.19%)</title><rect x="797" y="388" width="2" height="15" fill="rgb(221,192,24)"/><text x="800.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (6 samples, 0.19%)</title><rect x="797" y="404" width="2" height="15" fill="rgb(217,196,47)"/><text x="800.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:604) (5 samples, 0.16%)</title><rect x="797" y="420" width="2" height="15" fill="rgb(215,69,30)"/><text x="800.00" y="430.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (5 samples, 0.16%)</title><rect x="797" y="436" width="2" height="15" fill="rgb(252,192,39)"/><text x="800.00" y="446.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:275) (3 samples, 0.10%)</title><rect x="799" y="388" width="1" height="15" fill="rgb(242,8,1)"/><text x="802.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (14 samples, 0.45%)</title><rect x="796" y="372" width="5" height="15" fill="rgb(229,149,34)"/><text x="799.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (7 samples, 0.23%)</title><rect x="802" y="388" width="2" height="15" fill="rgb(237,155,36)"/><text x="805.00" y="398.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.10%)</title><rect x="803" y="404" width="1" height="15" fill="rgb(248,149,39)"/><text x="806.00" y="414.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:675) (3 samples, 0.10%)</title><rect x="804" y="388" width="1" height="15" fill="rgb(248,212,35)"/><text x="807.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (131 samples, 4.24%)</title><rect x="757" y="356" width="50" height="15" fill="rgb(226,7,43)"/><text x="760.00" y="366.50">execu..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (15 samples, 0.49%)</title><rect x="801" y="372" width="6" height="15" fill="rgb(241,149,22)"/><text x="804.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (3 samples, 0.10%)</title><rect x="806" y="388" width="1" height="15" fill="rgb(248,102,30)"/><text x="809.00" y="398.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:793) (4 samples, 0.13%)</title><rect x="807" y="372" width="2" height="15" fill="rgb(249,54,14)"/><text x="810.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (142 samples, 4.59%)</title><rect x="755" y="340" width="54" height="15" fill="rgb(240,151,11)"/><text x="758.00" y="350.50">PyUFu..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (6 samples, 0.19%)</title><rect x="807" y="356" width="2" height="15" fill="rgb(234,98,51)"/><text x="810.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (7 samples, 0.23%)</title><rect x="809" y="340" width="3" height="15" fill="rgb(206,206,7)"/><text x="812.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (191 samples, 6.18%)</title><rect x="740" y="324" width="73" height="15" fill="rgb(208,225,34)"/><text x="743.00" y="334.50">ufunc_ge..</text></g><g><title>_find_array_wrap (ufunc_object.c:424) (5 samples, 0.16%)</title><rect x="814" y="340" width="2" height="15" fill="rgb(220,31,21)"/><text x="817.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4754) (8 samples, 0.26%)</title><rect x="814" y="324" width="3" height="15" fill="rgb(234,66,9)"/><text x="817.00" y="334.50"></text></g><g><title>_find_array_wrap (ufunc_object.c:440) (3 samples, 0.10%)</title><rect x="816" y="340" width="1" height="15" fill="rgb(228,37,40)"/><text x="819.00" y="350.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (277 samples, 8.96%)</title><rect x="712" y="276" width="106" height="15" fill="rgb(254,64,44)"/><text x="715.00" y="286.50">run (mlprodi..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (256 samples, 8.28%)</title><rect x="720" y="292" width="98" height="15" fill="rgb(235,80,31)"/><text x="723.00" y="302.50">run (mlprod..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (227 samples, 7.34%)</title><rect x="731" y="308" width="87" height="15" fill="rgb(205,123,21)"/><text x="734.00" y="318.50">_run (mlpr..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,293 samples, 41.83%)</title><rect x="328" y="260" width="493" height="15" fill="rgb(214,176,9)"/><text x="331.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (9 samples, 0.29%)</title><rect x="818" y="276" width="3" height="15" fill="rgb(241,141,32)"/><text x="821.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (41 samples, 1.33%)</title><rect x="821" y="260" width="16" height="15" fill="rgb(245,10,5)"/><text x="824.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (57 samples, 1.84%)</title><rect x="837" y="260" width="22" height="15" fill="rgb(205,188,40)"/><text x="840.00" y="270.50">r..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (12 samples, 0.39%)</title><rect x="859" y="260" width="4" height="15" fill="rgb(238,133,15)"/><text x="862.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (143 samples, 4.63%)</title><rect x="863" y="260" width="55" height="15" fill="rgb(208,95,2)"/><text x="866.00" y="270.50">run (..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,912 samples, 61.86%)</title><rect x="203" y="244" width="730" height="15" fill="rgb(243,139,23)"/><text x="206.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (38 samples, 1.23%)</title><rect x="918" y="260" width="15" height="15" fill="rgb(226,62,38)"/><text x="921.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (34 samples, 1.10%)</title><rect x="934" y="244" width="13" height="15" fill="rgb(222,83,25)"/><text x="937.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (19 samples, 0.61%)</title><rect x="939" y="260" width="8" height="15" fill="rgb(233,152,36)"/><text x="942.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:546) (5 samples, 0.16%)</title><rect x="947" y="244" width="2" height="15" fill="rgb(235,54,54)"/><text x="950.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:939) (3 samples, 0.10%)</title><rect x="949" y="260" width="1" height="15" fill="rgb(246,112,31)"/><text x="952.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (4 samples, 0.13%)</title><rect x="951" y="276" width="1" height="15" fill="rgb(214,129,50)"/><text x="954.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (15 samples, 0.49%)</title><rect x="949" y="244" width="6" height="15" fill="rgb(227,115,43)"/><text x="952.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (12 samples, 0.39%)</title><rect x="950" y="260" width="5" height="15" fill="rgb(208,5,10)"/><text x="953.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (7 samples, 0.23%)</title><rect x="952" y="276" width="3" height="15" fill="rgb(235,133,40)"/><text x="955.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (2,148 samples, 69.49%)</title><rect x="135" y="212" width="820" height="15" fill="rgb(220,111,38)"/><text x="138.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,082 samples, 67.36%)</title><rect x="161" y="228" width="794" height="15" fill="rgb(218,110,33)"/><text x="164.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (34 samples, 1.10%)</title><rect x="955" y="212" width="13" height="15" fill="rgb(230,158,8)"/><text x="958.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (16 samples, 0.52%)</title><rect x="962" y="228" width="6" height="15" fill="rgb(209,216,23)"/><text x="965.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (21 samples, 0.68%)</title><rect x="968" y="212" width="8" height="15" fill="rgb(224,10,51)"/><text x="971.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (19 samples, 0.61%)</title><rect x="991" y="228" width="7" height="15" fill="rgb(217,66,19)"/><text x="994.00" y="238.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py:509) (7 samples, 0.23%)</title><rect x="995" y="244" width="3" height="15" fill="rgb(235,132,24)"/><text x="998.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (3 samples, 0.10%)</title><rect x="1002" y="244" width="1" height="15" fill="rgb(242,68,20)"/><text x="1005.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (14 samples, 0.45%)</title><rect x="1006" y="260" width="6" height="15" fill="rgb(219,223,24)"/><text x="1009.00" y="270.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1631) (3 samples, 0.10%)</title><rect x="1024" y="292" width="1" height="15" fill="rgb(234,192,35)"/><text x="1027.00" y="302.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (36 samples, 1.16%)</title><rect x="1012" y="260" width="13" height="15" fill="rgb(241,101,42)"/><text x="1015.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (19 samples, 0.61%)</title><rect x="1018" y="276" width="7" height="15" fill="rgb(236,134,49)"/><text x="1021.00" y="286.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c:1175) (3 samples, 0.10%)</title><rect x="1027" y="276" width="1" height="15" fill="rgb(223,61,45)"/><text x="1030.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:576) (11 samples, 0.36%)</title><rect x="1025" y="260" width="5" height="15" fill="rgb(225,43,0)"/><text x="1028.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (19 samples, 0.61%)</title><rect x="1030" y="260" width="7" height="15" fill="rgb(240,94,16)"/><text x="1033.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:583) (4 samples, 0.13%)</title><rect x="1037" y="260" width="1" height="15" fill="rgb(231,51,6)"/><text x="1040.00" y="270.50"></text></g><g><title>array_reshape (methods.c:186) (10 samples, 0.32%)</title><rect x="1053" y="276" width="4" height="15" fill="rgb(249,34,34)"/><text x="1056.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:53) (6 samples, 0.19%)</title><rect x="1055" y="292" width="2" height="15" fill="rgb(251,146,39)"/><text x="1058.00" y="302.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:102) (3 samples, 0.10%)</title><rect x="1061" y="292" width="1" height="15" fill="rgb(217,57,30)"/><text x="1064.00" y="302.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (5 samples, 0.16%)</title><rect x="1062" y="292" width="2" height="15" fill="rgb(225,79,3)"/><text x="1065.00" y="302.50"></text></g><g><title>array_reshape (methods.c:195) (23 samples, 0.74%)</title><rect x="1057" y="276" width="9" height="15" fill="rgb(207,211,34)"/><text x="1060.00" y="286.50"></text></g><g><title>PyArray_Newshape (shape.c:230) (3 samples, 0.10%)</title><rect x="1067" y="308" width="1" height="15" fill="rgb(243,68,28)"/><text x="1070.00" y="318.50"></text></g><g><title>PyArray_Newshape (shape.c:240) (3 samples, 0.10%)</title><rect x="1068" y="308" width="1" height="15" fill="rgb(218,68,4)"/><text x="1071.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1051) (3 samples, 0.10%)</title><rect x="1070" y="324" width="2" height="15" fill="rgb(225,151,43)"/><text x="1073.00" y="334.50"></text></g><g><title>memcpy (libc-2.29.so) (3 samples, 0.10%)</title><rect x="1070" y="340" width="2" height="15" fill="rgb(223,196,54)"/><text x="1073.00" y="350.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (9 samples, 0.29%)</title><rect x="1070" y="308" width="3" height="15" fill="rgb(250,184,8)"/><text x="1073.00" y="318.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (185 samples, 5.99%)</title><rect x="1003" y="244" width="70" height="15" fill="rgb(219,60,5)"/><text x="1006.00" y="254.50">array_i..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (92 samples, 2.98%)</title><rect x="1038" y="260" width="35" height="15" fill="rgb(229,104,15)"/><text x="1041.00" y="270.50">ex..</text></g><g><title>array_reshape (methods.c:210) (19 samples, 0.61%)</title><rect x="1066" y="276" width="7" height="15" fill="rgb(246,41,47)"/><text x="1069.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (19 samples, 0.61%)</title><rect x="1066" y="292" width="7" height="15" fill="rgb(234,149,31)"/><text x="1069.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (199 samples, 6.44%)</title><rect x="998" y="228" width="76" height="15" fill="rgb(224,34,15)"/><text x="1001.00" y="238.50">expand_d..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (257 samples, 8.31%)</title><rect x="976" y="212" width="99" height="15" fill="rgb(212,229,48)"/><text x="979.00" y="222.50">_run (mlpro..</text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (7 samples, 0.23%)</title><rect x="1075" y="308" width="2" height="15" fill="rgb(215,186,42)"/><text x="1078.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (5 samples, 0.16%)</title><rect x="1075" y="324" width="2" height="15" fill="rgb(230,83,49)"/><text x="1078.00" y="334.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (12 samples, 0.39%)</title><rect x="1075" y="276" width="4" height="15" fill="rgb(245,214,49)"/><text x="1078.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (12 samples, 0.39%)</title><rect x="1075" y="292" width="4" height="15" fill="rgb(254,13,5)"/><text x="1078.00" y="302.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (13 samples, 0.42%)</title><rect x="1075" y="260" width="5" height="15" fill="rgb(210,75,18)"/><text x="1078.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (3 samples, 0.10%)</title><rect x="1080" y="372" width="1" height="15" fill="rgb(220,221,42)"/><text x="1083.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (5 samples, 0.16%)</title><rect x="1082" y="372" width="2" height="15" fill="rgb(237,80,30)"/><text x="1085.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (27 samples, 0.87%)</title><rect x="1075" y="212" width="10" height="15" fill="rgb(232,38,34)"/><text x="1078.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (27 samples, 0.87%)</title><rect x="1075" y="228" width="10" height="15" fill="rgb(244,149,48)"/><text x="1078.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (27 samples, 0.87%)</title><rect x="1075" y="244" width="10" height="15" fill="rgb(207,166,6)"/><text x="1078.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (14 samples, 0.45%)</title><rect x="1080" y="260" width="5" height="15" fill="rgb(254,66,45)"/><text x="1083.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (14 samples, 0.45%)</title><rect x="1080" y="276" width="5" height="15" fill="rgb(237,7,30)"/><text x="1083.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (14 samples, 0.45%)</title><rect x="1080" y="292" width="5" height="15" fill="rgb(235,176,3)"/><text x="1083.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (14 samples, 0.45%)</title><rect x="1080" y="308" width="5" height="15" fill="rgb(222,124,3)"/><text x="1083.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (14 samples, 0.45%)</title><rect x="1080" y="324" width="5" height="15" fill="rgb(226,49,37)"/><text x="1083.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (14 samples, 0.45%)</title><rect x="1080" y="340" width="5" height="15" fill="rgb(244,77,13)"/><text x="1083.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (13 samples, 0.42%)</title><rect x="1080" y="356" width="5" height="15" fill="rgb(220,117,21)"/><text x="1083.00" y="366.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (4 samples, 0.13%)</title><rect x="1086" y="260" width="2" height="15" fill="rgb(219,45,36)"/><text x="1089.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.13%)</title><rect x="1086" y="276" width="2" height="15" fill="rgb(251,28,35)"/><text x="1089.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (4 samples, 0.13%)</title><rect x="1086" y="292" width="2" height="15" fill="rgb(221,136,27)"/><text x="1089.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.10%)</title><rect x="1087" y="308" width="1" height="15" fill="rgb(212,6,14)"/><text x="1090.00" y="318.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (10 samples, 0.32%)</title><rect x="1085" y="228" width="4" height="15" fill="rgb(211,197,44)"/><text x="1088.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (6 samples, 0.19%)</title><rect x="1086" y="244" width="3" height="15" fill="rgb(231,219,26)"/><text x="1089.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (11 samples, 0.36%)</title><rect x="1085" y="212" width="4" height="15" fill="rgb(222,193,46)"/><text x="1088.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (2,633 samples, 85.18%)</title><rect x="87" y="196" width="1005" height="15" fill="rgb(231,165,52)"/><text x="90.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>array_dealloc (arrayobject.c:520) (5 samples, 0.16%)</title><rect x="1090" y="212" width="2" height="15" fill="rgb(254,55,30)"/><text x="1093.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py:24) (14 samples, 0.45%)</title><rect x="1092" y="212" width="5" height="15" fill="rgb(252,156,20)"/><text x="1095.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:6) (9 samples, 0.29%)</title><rect x="1094" y="228" width="3" height="15" fill="rgb(215,120,29)"/><text x="1097.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (9 samples, 0.29%)</title><rect x="1094" y="244" width="3" height="15" fill="rgb(241,150,49)"/><text x="1097.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py:2911) (9 samples, 0.29%)</title><rect x="1094" y="260" width="3" height="15" fill="rgb(237,114,41)"/><text x="1097.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (5 samples, 0.16%)</title><rect x="1096" y="276" width="1" height="15" fill="rgb(208,209,27)"/><text x="1099.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 0.13%)</title><rect x="1096" y="292" width="1" height="15" fill="rgb(218,88,12)"/><text x="1099.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (17 samples, 0.55%)</title><rect x="1092" y="196" width="6" height="15" fill="rgb(219,133,50)"/><text x="1095.00" y="206.50"></text></g><g><title>_mean (numpy/core/_methods.py:151) (6 samples, 0.19%)</title><rect x="1099" y="292" width="2" height="15" fill="rgb(246,182,25)"/><text x="1102.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 0.13%)</title><rect x="1100" y="308" width="1" height="15" fill="rgb(243,120,15)"/><text x="1103.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (4 samples, 0.13%)</title><rect x="1100" y="324" width="1" height="15" fill="rgb(252,70,27)"/><text x="1103.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (3 samples, 0.10%)</title><rect x="1100" y="340" width="1" height="15" fill="rgb(207,226,29)"/><text x="1103.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_mean.py:29) (13 samples, 0.42%)</title><rect x="1099" y="228" width="5" height="15" fill="rgb(233,197,28)"/><text x="1102.00" y="238.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (12 samples, 0.39%)</title><rect x="1099" y="244" width="5" height="15" fill="rgb(247,67,25)"/><text x="1102.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (12 samples, 0.39%)</title><rect x="1099" y="260" width="5" height="15" fill="rgb(249,95,35)"/><text x="1102.00" y="270.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3257) (12 samples, 0.39%)</title><rect x="1099" y="276" width="5" height="15" fill="rgb(236,227,41)"/><text x="1102.00" y="286.50"></text></g><g><title>_mean (numpy/core/_methods.py:154) (5 samples, 0.16%)</title><rect x="1102" y="292" width="2" height="15" fill="rgb(239,88,14)"/><text x="1105.00" y="302.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.16%)</title><rect x="1102" y="308" width="2" height="15" fill="rgb(237,206,42)"/><text x="1105.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py:19) (4 samples, 0.13%)</title><rect x="1104" y="228" width="1" height="15" fill="rgb(214,151,20)"/><text x="1107.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (22 samples, 0.71%)</title><rect x="1098" y="196" width="9" height="15" fill="rgb(237,118,21)"/><text x="1101.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (21 samples, 0.68%)</title><rect x="1099" y="212" width="8" height="15" fill="rgb(235,147,27)"/><text x="1102.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_transpose.py:25) (4 samples, 0.13%)</title><rect x="1105" y="228" width="2" height="15" fill="rgb(244,113,42)"/><text x="1108.00" y="238.50"></text></g><g><title>transpose (&lt;__array_function__ internals&gt;:6) (3 samples, 0.10%)</title><rect x="1106" y="244" width="1" height="15" fill="rgb(211,225,26)"/><text x="1109.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (2,679 samples, 86.67%)</title><rect x="85" y="180" width="1023" height="15" fill="rgb(217,132,21)"/><text x="88.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (4 samples, 0.13%)</title><rect x="1107" y="196" width="1" height="15" fill="rgb(239,49,28)"/><text x="1110.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (6 samples, 0.19%)</title><rect x="1109" y="180" width="3" height="15" fill="rgb(229,155,26)"/><text x="1112.00" y="190.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (2,695 samples, 87.19%)</title><rect x="84" y="164" width="1028" height="15" fill="rgb(239,23,42)"/><text x="87.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:61) (2,701 samples, 87.38%)</title><rect x="82" y="52" width="1032" height="15" fill="rgb(236,170,18)"/><text x="85.00" y="62.50">&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:61)</text></g><g><title>profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:60) (2,701 samples, 87.38%)</title><rect x="82" y="68" width="1032" height="15" fill="rgb(244,217,30)"/><text x="85.00" y="78.50">profile_pyrt (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:60)</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:37) (2,701 samples, 87.38%)</title><rect x="82" y="84" width="1032" height="15" fill="rgb(246,5,24)"/><text x="85.00" y="94.50">setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:37)</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:31) (2,701 samples, 87.38%)</title><rect x="82" y="100" width="1032" height="15" fill="rgb(227,108,36)"/><text x="85.00" y="110.50">profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (2,701 samples, 87.38%)</title><rect x="82" y="116" width="1032" height="15" fill="rgb(222,113,52)"/><text x="85.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (2,701 samples, 87.38%)</title><rect x="82" y="132" width="1032" height="15" fill="rgb(208,105,40)"/><text x="85.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,701 samples, 87.38%)</title><rect x="82" y="148" width="1032" height="15" fill="rgb(212,107,40)"/><text x="85.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>onnxruntime::ReduceMean&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1119" y="340" width="1" height="15" fill="rgb(239,159,45)"/><text x="1122.00" y="350.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1119" y="356" width="1" height="15" fill="rgb(212,113,50)"/><text x="1122.00" y="366.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="1122" y="388" width="1" height="15" fill="rgb(244,119,31)"/><text x="1125.00" y="398.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.26%)</title><rect x="1124" y="388" width="3" height="15" fill="rgb(244,99,53)"/><text x="1127.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1124" y="404" width="3" height="15" fill="rgb(234,182,32)"/><text x="1127.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkIterFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1133" y="484" width="2" height="15" fill="rgb(230,141,28)"/><text x="1136.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1133" y="468" width="2" height="15" fill="rgb(213,79,37)"/><text x="1136.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.29%)</title><rect x="1133" y="452" width="3" height="15" fill="rgb(227,121,2)"/><text x="1136.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1137" y="452" width="1" height="15" fill="rgb(249,199,42)"/><text x="1140.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1137" y="468" width="1" height="15" fill="rgb(221,130,24)"/><text x="1140.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.10%)</title><rect x="1139" y="452" width="1" height="15" fill="rgb(212,180,7)"/><text x="1142.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.10%)</title><rect x="1139" y="468" width="1" height="15" fill="rgb(244,21,45)"/><text x="1142.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (24 samples, 0.78%)</title><rect x="1131" y="436" width="10" height="15" fill="rgb(220,202,23)"/><text x="1134.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::InsertFreeChunkIntoBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1142" y="516" width="1" height="15" fill="rgb(234,5,9)"/><text x="1145.00" y="526.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1142" y="484" width="2" height="15" fill="rgb(216,189,43)"/><text x="1145.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="1142" y="500" width="2" height="15" fill="rgb(220,15,45)"/><text x="1145.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.32%)</title><rect x="1141" y="436" width="3" height="15" fill="rgb(251,88,48)"/><text x="1144.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.32%)</title><rect x="1141" y="452" width="3" height="15" fill="rgb(242,179,18)"/><text x="1144.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.32%)</title><rect x="1141" y="468" width="3" height="15" fill="rgb(238,207,45)"/><text x="1144.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOutputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1144" y="436" width="2" height="15" fill="rgb(238,180,44)"/><text x="1147.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1146" y="436" width="2" height="15" fill="rgb(216,158,36)"/><text x="1149.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1146" y="452" width="2" height="15" fill="rgb(222,42,9)"/><text x="1149.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1146" y="468" width="2" height="15" fill="rgb(235,135,34)"/><text x="1149.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="1148" y="436" width="2" height="15" fill="rgb(232,10,54)"/><text x="1151.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1150" y="436" width="2" height="15" fill="rgb(207,2,40)"/><text x="1153.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1151" y="452" width="1" height="15" fill="rgb(244,189,53)"/><text x="1154.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1151" y="468" width="1" height="15" fill="rgb(206,168,41)"/><text x="1154.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OpKernelContext (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="1152" y="436" width="2" height="15" fill="rgb(207,212,45)"/><text x="1155.00" y="446.50"></text></g><g><title>free (libc-2.29.so) (5 samples, 0.16%)</title><rect x="1158" y="468" width="2" height="15" fill="rgb(231,167,20)"/><text x="1161.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1161" y="532" width="1" height="15" fill="rgb(230,51,14)"/><text x="1164.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1161" y="548" width="1" height="15" fill="rgb(231,9,6)"/><text x="1164.00" y="558.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1160" y="468" width="3" height="15" fill="rgb(252,38,38)"/><text x="1163.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1160" y="484" width="3" height="15" fill="rgb(225,211,14)"/><text x="1163.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1160" y="500" width="3" height="15" fill="rgb(207,18,50)"/><text x="1163.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1160" y="516" width="3" height="15" fill="rgb(226,162,20)"/><text x="1163.00" y="526.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.10%)</title><rect x="1163" y="468" width="1" height="15" fill="rgb(219,20,47)"/><text x="1166.00" y="478.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1165" y="468" width="1" height="15" fill="rgb(221,179,42)"/><text x="1168.00" y="478.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1166" y="468" width="1" height="15" fill="rgb(229,128,32)"/><text x="1169.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 1.23%)</title><rect x="1154" y="436" width="15" height="15" fill="rgb(209,145,0)"/><text x="1157.00" y="446.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 1.23%)</title><rect x="1154" y="452" width="15" height="15" fill="rgb(218,114,36)"/><text x="1157.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1167" y="468" width="2" height="15" fill="rgb(248,58,4)"/><text x="1170.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="1170" y="468" width="2" height="15" fill="rgb(245,144,17)"/><text x="1173.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2247] (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1172" y="468" width="3" height="15" fill="rgb(216,11,3)"/><text x="1175.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1176" y="532" width="3" height="15" fill="rgb(240,28,32)"/><text x="1179.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1176" y="548" width="3" height="15" fill="rgb(205,186,31)"/><text x="1179.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1178" y="564" width="1" height="15" fill="rgb(206,66,21)"/><text x="1181.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1178" y="580" width="1" height="15" fill="rgb(215,134,49)"/><text x="1181.00" y="590.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.29%)</title><rect x="1176" y="516" width="3" height="15" fill="rgb(212,118,13)"/><text x="1179.00" y="526.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.36%)</title><rect x="1175" y="468" width="5" height="15" fill="rgb(211,124,30)"/><text x="1178.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.36%)</title><rect x="1175" y="484" width="5" height="15" fill="rgb(221,102,47)"/><text x="1178.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.36%)</title><rect x="1175" y="500" width="5" height="15" fill="rgb(214,46,21)"/><text x="1178.00" y="510.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.23%)</title><rect x="1181" y="500" width="3" height="15" fill="rgb(249,224,12)"/><text x="1184.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (6 samples, 0.19%)</title><rect x="1181" y="516" width="3" height="15" fill="rgb(249,177,32)"/><text x="1184.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.19%)</title><rect x="1181" y="532" width="3" height="15" fill="rgb(218,127,40)"/><text x="1184.00" y="542.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.49%)</title><rect x="1180" y="468" width="5" height="15" fill="rgb(247,207,51)"/><text x="1183.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.49%)</title><rect x="1180" y="484" width="5" height="15" fill="rgb(229,83,38)"/><text x="1183.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1184" y="500" width="1" height="15" fill="rgb(251,111,17)"/><text x="1187.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.13%)</title><rect x="1184" y="516" width="1" height="15" fill="rgb(226,33,37)"/><text x="1187.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.10%)</title><rect x="1184" y="532" width="1" height="15" fill="rgb(222,147,46)"/><text x="1187.00" y="542.50"></text></g><g><title>onnxruntime::Tensor::MutableData&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1185" y="468" width="1" height="15" fill="rgb(250,163,45)"/><text x="1188.00" y="478.50"></text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (158 samples, 5.11%)</title><rect x="1127" y="388" width="60" height="15" fill="rgb(227,206,52)"/><text x="1130.00" y="398.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (158 samples, 5.11%)</title><rect x="1127" y="404" width="60" height="15" fill="rgb(218,37,8)"/><text x="1130.00" y="414.50">onnxru..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 5.01%)</title><rect x="1128" y="420" width="59" height="15" fill="rgb(250,188,36)"/><text x="1131.00" y="430.50">onnxru..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (48 samples, 1.55%)</title><rect x="1169" y="436" width="18" height="15" fill="rgb(230,61,47)"/><text x="1172.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (47 samples, 1.52%)</title><rect x="1169" y="452" width="18" height="15" fill="rgb(246,150,26)"/><text x="1172.00" y="462.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (177 samples, 5.73%)</title><rect x="1120" y="356" width="68" height="15" fill="rgb(209,103,40)"/><text x="1123.00" y="366.50">onnxrun..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (177 samples, 5.73%)</title><rect x="1120" y="372" width="68" height="15" fill="rgb(220,67,21)"/><text x="1123.00" y="382.50">onnxrun..</text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (179 samples, 5.79%)</title><rect x="1120" y="340" width="68" height="15" fill="rgb(209,10,16)"/><text x="1123.00" y="350.50">onnxrun..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (187 samples, 6.05%)</title><rect x="1117" y="244" width="72" height="15" fill="rgb(234,152,54)"/><text x="1120.00" y="254.50">onnxrunt..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (187 samples, 6.05%)</title><rect x="1117" y="260" width="72" height="15" fill="rgb(244,220,43)"/><text x="1120.00" y="270.50">onnxrunt..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (187 samples, 6.05%)</title><rect x="1117" y="276" width="72" height="15" fill="rgb(245,171,43)"/><text x="1120.00" y="286.50">onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (186 samples, 6.02%)</title><rect x="1118" y="292" width="71" height="15" fill="rgb(243,169,52)"/><text x="1121.00" y="302.50">onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (186 samples, 6.02%)</title><rect x="1118" y="308" width="71" height="15" fill="rgb(213,46,44)"/><text x="1121.00" y="318.50">onnxrunt..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (186 samples, 6.02%)</title><rect x="1118" y="324" width="71" height="15" fill="rgb(235,40,43)"/><text x="1121.00" y="334.50">onnxrunt..</text></g><g><title>all (3,091 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(240,192,38)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:68) (199 samples, 6.44%)</title><rect x="1114" y="52" width="76" height="15" fill="rgb(250,201,21)"/><text x="1117.00" y="62.50">&lt;module&gt;..</text></g><g><title>profile_ort (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:67) (199 samples, 6.44%)</title><rect x="1114" y="68" width="76" height="15" fill="rgb(223,31,45)"/><text x="1117.00" y="78.50">profile_..</text></g><g><title>setup_profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:37) (197 samples, 6.37%)</title><rect x="1114" y="84" width="76" height="15" fill="rgb(254,71,29)"/><text x="1117.00" y="94.50">setup_pr..</text></g><g><title>profile (bench_KNeighborsRegressor_default_k3_b_reg_algorithmbrute_n_neighbors3_1_4_12_float_.py:31) (197 samples, 6.37%)</title><rect x="1114" y="100" width="76" height="15" fill="rgb(224,26,47)"/><text x="1117.00" y="110.50">profile ..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (196 samples, 6.34%)</title><rect x="1115" y="116" width="75" height="15" fill="rgb(253,32,2)"/><text x="1118.00" y="126.50">time_pre..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:378) (195 samples, 6.31%)</title><rect x="1115" y="132" width="75" height="15" fill="rgb(207,123,3)"/><text x="1118.00" y="142.50">&lt;lambda&gt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (192 samples, 6.21%)</title><rect x="1116" y="148" width="74" height="15" fill="rgb(227,212,31)"/><text x="1119.00" y="158.50">run (mlp..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (192 samples, 6.21%)</title><rect x="1116" y="164" width="74" height="15" fill="rgb(211,99,1)"/><text x="1119.00" y="174.50">_run_who..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (192 samples, 6.21%)</title><rect x="1116" y="180" width="74" height="15" fill="rgb(212,65,28)"/><text x="1119.00" y="190.50">run (mlp..</text></g><g><title>run (onnxruntime/capi/session.py:136) (191 samples, 6.18%)</title><rect x="1117" y="196" width="73" height="15" fill="rgb(236,183,31)"/><text x="1120.00" y="206.50">run (onn..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (189 samples, 6.11%)</title><rect x="1117" y="212" width="73" height="15" fill="rgb(243,25,9)"/><text x="1120.00" y="222.50">pybind11..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (189 samples, 6.11%)</title><rect x="1117" y="228" width="73" height="15" fill="rgb(216,213,25)"/><text x="1120.00" y="238.50">void pyb..</text></g></g></svg>