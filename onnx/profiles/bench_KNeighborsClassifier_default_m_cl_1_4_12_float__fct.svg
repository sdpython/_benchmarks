<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1158" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1141.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1141.00"> </text><g id="frames"><g><title>_call_aside (pkg_resources/__init__.py) (6 samples, 0.21%)</title><rect x="10" y="836" width="2" height="15" fill="rgb(220,228,0)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (6 samples, 0.21%)</title><rect x="10" y="852" width="2" height="15" fill="rgb(226,219,43)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (3 samples, 0.10%)</title><rect x="11" y="868" width="1" height="15" fill="rgb(235,57,11)"/><text x="14.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (3 samples, 0.10%)</title><rect x="11" y="884" width="1" height="15" fill="rgb(251,158,47)"/><text x="14.00" y="894.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (7 samples, 0.24%)</title><rect x="10" y="292" width="2" height="15" fill="rgb(247,60,6)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="308" width="2" height="15" fill="rgb(233,182,29)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="324" width="2" height="15" fill="rgb(226,83,45)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="340" width="2" height="15" fill="rgb(236,131,14)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.24%)</title><rect x="10" y="356" width="2" height="15" fill="rgb(214,135,11)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="372" width="2" height="15" fill="rgb(207,71,16)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (7 samples, 0.24%)</title><rect x="10" y="388" width="2" height="15" fill="rgb(216,42,26)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="404" width="2" height="15" fill="rgb(239,17,12)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="420" width="2" height="15" fill="rgb(229,63,8)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="436" width="2" height="15" fill="rgb(219,206,46)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.24%)</title><rect x="10" y="452" width="2" height="15" fill="rgb(217,37,8)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="468" width="2" height="15" fill="rgb(251,137,31)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (7 samples, 0.24%)</title><rect x="10" y="484" width="2" height="15" fill="rgb(209,78,41)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="500" width="2" height="15" fill="rgb(249,180,12)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="516" width="2" height="15" fill="rgb(237,65,51)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="532" width="2" height="15" fill="rgb(209,105,33)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.24%)</title><rect x="10" y="548" width="2" height="15" fill="rgb(247,60,8)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="564" width="2" height="15" fill="rgb(249,106,40)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (7 samples, 0.24%)</title><rect x="10" y="580" width="2" height="15" fill="rgb(208,10,47)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="596" width="2" height="15" fill="rgb(248,154,28)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="612" width="2" height="15" fill="rgb(230,229,44)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="628" width="2" height="15" fill="rgb(213,122,7)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="644" width="2" height="15" fill="rgb(215,196,30)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="660" width="2" height="15" fill="rgb(225,8,16)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="676" width="2" height="15" fill="rgb(238,34,16)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.24%)</title><rect x="10" y="692" width="2" height="15" fill="rgb(232,110,34)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="708" width="2" height="15" fill="rgb(217,104,26)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (7 samples, 0.24%)</title><rect x="10" y="724" width="2" height="15" fill="rgb(240,209,30)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="740" width="2" height="15" fill="rgb(223,141,16)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="756" width="2" height="15" fill="rgb(225,187,42)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="772" width="2" height="15" fill="rgb(222,141,50)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.24%)</title><rect x="10" y="788" width="2" height="15" fill="rgb(222,206,3)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="10" y="804" width="2" height="15" fill="rgb(254,85,32)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (7 samples, 0.24%)</title><rect x="10" y="820" width="2" height="15" fill="rgb(220,141,37)"/><text x="13.00" y="830.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.31%)</title><rect x="10" y="196" width="3" height="15" fill="rgb(239,135,12)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.31%)</title><rect x="10" y="212" width="3" height="15" fill="rgb(228,28,33)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.31%)</title><rect x="10" y="228" width="3" height="15" fill="rgb(249,197,36)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.31%)</title><rect x="10" y="244" width="3" height="15" fill="rgb(233,174,17)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 0.31%)</title><rect x="10" y="260" width="3" height="15" fill="rgb(220,76,22)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 0.31%)</title><rect x="10" y="276" width="3" height="15" fill="rgb(236,23,14)"/><text x="13.00" y="286.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="484" width="1" height="15" fill="rgb(237,124,1)"/><text x="16.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="500" width="1" height="15" fill="rgb(227,57,27)"/><text x="16.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="516" width="1" height="15" fill="rgb(221,172,26)"/><text x="16.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="532" width="1" height="15" fill="rgb(232,102,52)"/><text x="16.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.10%)</title><rect x="13" y="548" width="1" height="15" fill="rgb(217,120,41)"/><text x="16.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="564" width="1" height="15" fill="rgb(225,174,29)"/><text x="16.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (3 samples, 0.10%)</title><rect x="13" y="580" width="1" height="15" fill="rgb(228,199,26)"/><text x="16.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="596" width="1" height="15" fill="rgb(241,94,26)"/><text x="16.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="612" width="1" height="15" fill="rgb(247,209,42)"/><text x="16.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="628" width="1" height="15" fill="rgb(234,165,19)"/><text x="16.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.10%)</title><rect x="13" y="644" width="1" height="15" fill="rgb(221,206,29)"/><text x="16.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="660" width="1" height="15" fill="rgb(213,22,20)"/><text x="16.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (3 samples, 0.10%)</title><rect x="13" y="676" width="1" height="15" fill="rgb(241,200,15)"/><text x="16.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="692" width="1" height="15" fill="rgb(216,197,12)"/><text x="16.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="708" width="1" height="15" fill="rgb(230,151,17)"/><text x="16.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="724" width="1" height="15" fill="rgb(246,135,5)"/><text x="16.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.10%)</title><rect x="13" y="740" width="1" height="15" fill="rgb(249,54,26)"/><text x="16.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="756" width="1" height="15" fill="rgb(216,218,0)"/><text x="16.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (3 samples, 0.10%)</title><rect x="13" y="772" width="1" height="15" fill="rgb(247,147,3)"/><text x="16.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="788" width="1" height="15" fill="rgb(245,171,14)"/><text x="16.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="804" width="1" height="15" fill="rgb(237,98,53)"/><text x="16.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="820" width="1" height="15" fill="rgb(240,140,5)"/><text x="16.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.10%)</title><rect x="13" y="836" width="1" height="15" fill="rgb(227,32,41)"/><text x="16.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="852" width="1" height="15" fill="rgb(206,51,36)"/><text x="16.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (3 samples, 0.10%)</title><rect x="13" y="868" width="1" height="15" fill="rgb(241,115,46)"/><text x="16.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="884" width="1" height="15" fill="rgb(206,169,25)"/><text x="16.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="900" width="1" height="15" fill="rgb(206,183,15)"/><text x="16.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="916" width="1" height="15" fill="rgb(234,121,39)"/><text x="16.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="932" width="1" height="15" fill="rgb(243,151,6)"/><text x="16.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="948" width="1" height="15" fill="rgb(226,46,4)"/><text x="16.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="964" width="1" height="15" fill="rgb(249,162,35)"/><text x="16.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.10%)</title><rect x="13" y="980" width="1" height="15" fill="rgb(244,126,14)"/><text x="16.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="996" width="1" height="15" fill="rgb(242,131,29)"/><text x="16.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (3 samples, 0.10%)</title><rect x="13" y="1012" width="1" height="15" fill="rgb(218,128,50)"/><text x="16.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="1028" width="1" height="15" fill="rgb(233,139,29)"/><text x="16.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="1044" width="1" height="15" fill="rgb(221,152,17)"/><text x="16.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="1060" width="1" height="15" fill="rgb(226,25,38)"/><text x="16.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.10%)</title><rect x="13" y="1076" width="1" height="15" fill="rgb(230,45,27)"/><text x="16.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="13" y="1092" width="1" height="15" fill="rgb(249,175,31)"/><text x="16.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (3 samples, 0.10%)</title><rect x="13" y="1108" width="1" height="15" fill="rgb(206,177,37)"/><text x="16.00" y="1118.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (6 samples, 0.21%)</title><rect x="13" y="340" width="3" height="15" fill="rgb(245,56,24)"/><text x="16.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="13" y="356" width="3" height="15" fill="rgb(230,33,47)"/><text x="16.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="13" y="372" width="3" height="15" fill="rgb(251,122,9)"/><text x="16.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="13" y="388" width="3" height="15" fill="rgb(234,21,4)"/><text x="16.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.21%)</title><rect x="13" y="404" width="3" height="15" fill="rgb(248,70,38)"/><text x="16.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="13" y="420" width="3" height="15" fill="rgb(215,100,22)"/><text x="16.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (6 samples, 0.21%)</title><rect x="13" y="436" width="3" height="15" fill="rgb(245,56,11)"/><text x="16.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="13" y="452" width="3" height="15" fill="rgb(209,145,18)"/><text x="16.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.21%)</title><rect x="13" y="468" width="3" height="15" fill="rgb(243,228,1)"/><text x="16.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="14" y="484" width="2" height="15" fill="rgb(223,112,13)"/><text x="17.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.10%)</title><rect x="14" y="500" width="2" height="15" fill="rgb(209,29,41)"/><text x="17.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="14" y="516" width="2" height="15" fill="rgb(232,102,20)"/><text x="17.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.10%)</title><rect x="14" y="532" width="2" height="15" fill="rgb(209,192,26)"/><text x="17.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="14" y="548" width="2" height="15" fill="rgb(238,81,43)"/><text x="17.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="14" y="564" width="2" height="15" fill="rgb(249,173,10)"/><text x="17.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="14" y="580" width="2" height="15" fill="rgb(211,141,32)"/><text x="17.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.10%)</title><rect x="14" y="596" width="2" height="15" fill="rgb(227,41,7)"/><text x="17.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="14" y="612" width="2" height="15" fill="rgb(211,72,41)"/><text x="17.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (3 samples, 0.10%)</title><rect x="14" y="628" width="2" height="15" fill="rgb(228,26,13)"/><text x="17.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="14" y="644" width="2" height="15" fill="rgb(230,1,2)"/><text x="17.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="14" y="660" width="2" height="15" fill="rgb(241,212,43)"/><text x="17.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="14" y="676" width="2" height="15" fill="rgb(224,81,49)"/><text x="17.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.10%)</title><rect x="14" y="692" width="2" height="15" fill="rgb(244,208,28)"/><text x="17.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.10%)</title><rect x="14" y="708" width="2" height="15" fill="rgb(230,121,52)"/><text x="17.00" y="718.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (7 samples, 0.24%)</title><rect x="13" y="244" width="3" height="15" fill="rgb(206,24,21)"/><text x="16.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="13" y="260" width="3" height="15" fill="rgb(230,108,29)"/><text x="16.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="13" y="276" width="3" height="15" fill="rgb(213,8,13)"/><text x="16.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="13" y="292" width="3" height="15" fill="rgb(219,56,25)"/><text x="16.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.24%)</title><rect x="13" y="308" width="3" height="15" fill="rgb(218,33,19)"/><text x="16.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.24%)</title><rect x="13" y="324" width="3" height="15" fill="rgb(212,172,31)"/><text x="16.00" y="334.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.59%)</title><rect x="10" y="68" width="6" height="15" fill="rgb(224,138,51)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.59%)</title><rect x="10" y="84" width="6" height="15" fill="rgb(206,135,12)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.59%)</title><rect x="10" y="100" width="6" height="15" fill="rgb(239,20,9)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (17 samples, 0.59%)</title><rect x="10" y="116" width="6" height="15" fill="rgb(226,52,10)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.59%)</title><rect x="10" y="132" width="6" height="15" fill="rgb(224,98,17)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py) (17 samples, 0.59%)</title><rect x="10" y="148" width="6" height="15" fill="rgb(252,67,36)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.59%)</title><rect x="10" y="164" width="6" height="15" fill="rgb(229,69,21)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.59%)</title><rect x="10" y="180" width="6" height="15" fill="rgb(242,187,45)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.28%)</title><rect x="13" y="196" width="3" height="15" fill="rgb(250,101,34)"/><text x="16.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 0.28%)</title><rect x="13" y="212" width="3" height="15" fill="rgb(253,38,14)"/><text x="16.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 0.28%)</title><rect x="13" y="228" width="3" height="15" fill="rgb(217,50,0)"/><text x="16.00" y="238.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="20" y="340" width="1" height="15" fill="rgb(228,221,13)"/><text x="23.00" y="350.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="24" y="388" width="2" height="15" fill="rgb(251,16,53)"/><text x="27.00" y="398.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="26" y="388" width="2" height="15" fill="rgb(248,158,21)"/><text x="29.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="27" y="404" width="1" height="15" fill="rgb(247,132,31)"/><text x="30.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.17%)</title><rect x="38" y="468" width="2" height="15" fill="rgb(247,35,25)"/><text x="41.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::SplitChunk (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="38" y="484" width="2" height="15" fill="rgb(207,221,8)"/><text x="41.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.38%)</title><rect x="36" y="452" width="4" height="15" fill="rgb(223,68,18)"/><text x="39.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="40" y="452" width="3" height="15" fill="rgb(239,86,27)"/><text x="43.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="41" y="468" width="2" height="15" fill="rgb(214,213,22)"/><text x="44.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (29 samples, 1.00%)</title><rect x="33" y="436" width="12" height="15" fill="rgb(253,27,47)"/><text x="36.00" y="446.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.10%)</title><rect x="43" y="452" width="2" height="15" fill="rgb(206,182,2)"/><text x="46.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::InsertFreeChunkIntoBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="47" y="516" width="1" height="15" fill="rgb(224,82,3)"/><text x="50.00" y="526.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="47" y="484" width="2" height="15" fill="rgb(247,77,48)"/><text x="50.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="47" y="500" width="2" height="15" fill="rgb(243,92,30)"/><text x="50.00" y="510.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="48" y="516" width="1" height="15" fill="rgb(214,49,41)"/><text x="51.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.45%)</title><rect x="45" y="436" width="5" height="15" fill="rgb(254,37,1)"/><text x="48.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.45%)</title><rect x="45" y="452" width="5" height="15" fill="rgb(206,115,10)"/><text x="48.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.35%)</title><rect x="46" y="468" width="4" height="15" fill="rgb(238,48,43)"/><text x="49.00" y="478.50"></text></g><g><title>onnxruntime::GraphViewer::GetNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="50" y="436" width="1" height="15" fill="rgb(254,67,4)"/><text x="53.00" y="446.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="53" y="484" width="1" height="15" fill="rgb(231,192,45)"/><text x="56.00" y="494.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="53" y="500" width="1" height="15" fill="rgb(217,159,45)"/><text x="56.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="52" y="436" width="3" height="15" fill="rgb(223,83,49)"/><text x="55.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="52" y="452" width="3" height="15" fill="rgb(243,176,14)"/><text x="55.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="53" y="468" width="2" height="15" fill="rgb(242,139,50)"/><text x="56.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="55" y="436" width="1" height="15" fill="rgb(246,182,18)"/><text x="58.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.17%)</title><rect x="56" y="436" width="2" height="15" fill="rgb(240,176,24)"/><text x="59.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="57" y="452" width="1" height="15" fill="rgb(211,31,43)"/><text x="60.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="57" y="468" width="1" height="15" fill="rgb(212,163,53)"/><text x="60.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="57" y="484" width="1" height="15" fill="rgb(234,18,40)"/><text x="60.00" y="494.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="68" y="564" width="1" height="15" fill="rgb(243,44,4)"/><text x="71.00" y="574.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="67" y="468" width="3" height="15" fill="rgb(252,121,37)"/><text x="70.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="67" y="484" width="3" height="15" fill="rgb(234,205,48)"/><text x="70.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="67" y="500" width="3" height="15" fill="rgb(240,179,40)"/><text x="70.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.17%)</title><rect x="68" y="516" width="2" height="15" fill="rgb(234,192,51)"/><text x="71.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="68" y="532" width="2" height="15" fill="rgb(206,82,19)"/><text x="71.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="68" y="548" width="2" height="15" fill="rgb(250,0,20)"/><text x="71.00" y="558.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 1.31%)</title><rect x="59" y="436" width="16" height="15" fill="rgb(246,87,29)"/><text x="62.00" y="446.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 1.21%)</title><rect x="60" y="452" width="15" height="15" fill="rgb(215,85,18)"/><text x="63.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.21%)</title><rect x="72" y="468" width="3" height="15" fill="rgb(216,88,13)"/><text x="75.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (6 samples, 0.21%)</title><rect x="72" y="484" width="3" height="15" fill="rgb(236,227,23)"/><text x="75.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.21%)</title><rect x="72" y="500" width="3" height="15" fill="rgb(221,213,46)"/><text x="75.00" y="510.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="76" y="468" width="2" height="15" fill="rgb(251,193,10)"/><text x="79.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="82" y="564" width="2" height="15" fill="rgb(215,127,28)"/><text x="85.00" y="574.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="82" y="580" width="2" height="15" fill="rgb(252,55,48)"/><text x="85.00" y="590.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="82" y="596" width="2" height="15" fill="rgb(208,73,33)"/><text x="85.00" y="606.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="84" y="564" width="1" height="15" fill="rgb(252,185,3)"/><text x="87.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="84" y="580" width="1" height="15" fill="rgb(246,153,32)"/><text x="87.00" y="590.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.59%)</title><rect x="78" y="516" width="7" height="15" fill="rgb(229,185,32)"/><text x="81.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.45%)</title><rect x="80" y="532" width="5" height="15" fill="rgb(211,180,2)"/><text x="83.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.45%)</title><rect x="80" y="548" width="5" height="15" fill="rgb(226,163,8)"/><text x="83.00" y="558.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 0.69%)</title><rect x="78" y="468" width="8" height="15" fill="rgb(229,128,5)"/><text x="81.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 0.69%)</title><rect x="78" y="484" width="8" height="15" fill="rgb(215,99,18)"/><text x="81.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 0.62%)</title><rect x="78" y="500" width="8" height="15" fill="rgb(247,76,17)"/><text x="81.00" y="510.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="88" y="500" width="2" height="15" fill="rgb(233,184,47)"/><text x="91.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.14%)</title><rect x="88" y="516" width="2" height="15" fill="rgb(224,148,42)"/><text x="91.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.14%)</title><rect x="88" y="532" width="2" height="15" fill="rgb(231,101,8)"/><text x="91.00" y="542.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 0.48%)</title><rect x="86" y="484" width="5" height="15" fill="rgb(244,171,5)"/><text x="89.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="90" y="500" width="1" height="15" fill="rgb(213,11,37)"/><text x="93.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.14%)</title><rect x="90" y="516" width="1" height="15" fill="rgb(254,154,45)"/><text x="93.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.10%)</title><rect x="90" y="532" width="1" height="15" fill="rgb(222,190,27)"/><text x="93.00" y="542.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (152 samples, 5.25%)</title><rect x="30" y="420" width="62" height="15" fill="rgb(238,125,41)"/><text x="33.00" y="430.50">onnxru..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (42 samples, 1.45%)</title><rect x="75" y="436" width="17" height="15" fill="rgb(233,176,15)"/><text x="78.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (40 samples, 1.38%)</title><rect x="76" y="452" width="16" height="15" fill="rgb(230,46,34)"/><text x="79.00" y="462.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.52%)</title><rect x="86" y="468" width="6" height="15" fill="rgb(225,8,13)"/><text x="89.00" y="478.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (173 samples, 5.98%)</title><rect x="22" y="356" width="70" height="15" fill="rgb(229,53,37)"/><text x="25.00" y="366.50">onnxrun..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (172 samples, 5.94%)</title><rect x="22" y="372" width="70" height="15" fill="rgb(206,215,3)"/><text x="25.00" y="382.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 5.36%)</title><rect x="29" y="388" width="63" height="15" fill="rgb(248,64,34)"/><text x="32.00" y="398.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (154 samples, 5.32%)</title><rect x="29" y="404" width="63" height="15" fill="rgb(220,50,22)"/><text x="32.00" y="414.50">onnxru..</text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (175 samples, 6.05%)</title><rect x="22" y="340" width="71" height="15" fill="rgb(249,32,30)"/><text x="25.00" y="350.50">onnxrunt..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (187 samples, 6.46%)</title><rect x="18" y="260" width="77" height="15" fill="rgb(236,222,26)"/><text x="21.00" y="270.50">onnxrunt..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (187 samples, 6.46%)</title><rect x="18" y="276" width="77" height="15" fill="rgb(240,143,4)"/><text x="21.00" y="286.50">onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (185 samples, 6.39%)</title><rect x="19" y="292" width="76" height="15" fill="rgb(247,209,43)"/><text x="22.00" y="302.50">onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (185 samples, 6.39%)</title><rect x="19" y="308" width="76" height="15" fill="rgb(227,162,23)"/><text x="22.00" y="318.50">onnxrunt..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (185 samples, 6.39%)</title><rect x="19" y="324" width="76" height="15" fill="rgb(253,189,23)"/><text x="22.00" y="334.50">onnxrunt..</text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="93" y="340" width="2" height="15" fill="rgb(235,105,47)"/><text x="96.00" y="350.50"></text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="93" y="356" width="2" height="15" fill="rgb(251,160,14)"/><text x="96.00" y="366.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (189 samples, 6.53%)</title><rect x="18" y="244" width="78" height="15" fill="rgb(235,210,35)"/><text x="21.00" y="254.50">onnxrunti..</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py) (196 samples, 6.77%)</title><rect x="16" y="68" width="80" height="15" fill="rgb(242,141,11)"/><text x="19.00" y="78.50">profile_o..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py) (196 samples, 6.77%)</title><rect x="16" y="84" width="80" height="15" fill="rgb(229,105,34)"/><text x="19.00" y="94.50">setup_pro..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py) (196 samples, 6.77%)</title><rect x="16" y="100" width="80" height="15" fill="rgb(215,205,31)"/><text x="19.00" y="110.50">profile (..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (196 samples, 6.77%)</title><rect x="16" y="116" width="80" height="15" fill="rgb(250,155,41)"/><text x="19.00" y="126.50">time_pred..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (195 samples, 6.74%)</title><rect x="17" y="132" width="79" height="15" fill="rgb(231,139,52)"/><text x="20.00" y="142.50">&lt;lambda&gt; ..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (195 samples, 6.74%)</title><rect x="17" y="148" width="79" height="15" fill="rgb(228,200,46)"/><text x="20.00" y="158.50">run (mlpr..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (194 samples, 6.70%)</title><rect x="17" y="164" width="79" height="15" fill="rgb(252,163,34)"/><text x="20.00" y="174.50">_run_whol..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (193 samples, 6.67%)</title><rect x="18" y="180" width="78" height="15" fill="rgb(235,82,36)"/><text x="21.00" y="190.50">run (mlpr..</text></g><g><title>run (onnxruntime/capi/session.py) (193 samples, 6.67%)</title><rect x="18" y="196" width="78" height="15" fill="rgb(217,147,4)"/><text x="21.00" y="206.50">run (onnx..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (191 samples, 6.60%)</title><rect x="18" y="212" width="78" height="15" fill="rgb(244,21,30)"/><text x="21.00" y="222.50">pybind11:..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (191 samples, 6.60%)</title><rect x="18" y="228" width="78" height="15" fill="rgb(235,157,10)"/><text x="21.00" y="238.50">void pybi..</text></g><g><title>PyArray_MapIterNew (mapping.c) (4 samples, 0.14%)</title><rect x="122" y="244" width="2" height="15" fill="rgb(224,81,36)"/><text x="125.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (10 samples, 0.35%)</title><rect x="121" y="212" width="4" height="15" fill="rgb(241,207,33)"/><text x="124.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (8 samples, 0.28%)</title><rect x="122" y="228" width="3" height="15" fill="rgb(224,170,18)"/><text x="125.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (3 samples, 0.10%)</title><rect x="124" y="244" width="1" height="15" fill="rgb(241,6,46)"/><text x="127.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (6 samples, 0.21%)</title><rect x="125" y="212" width="3" height="15" fill="rgb(228,115,29)"/><text x="128.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (5 samples, 0.17%)</title><rect x="126" y="228" width="2" height="15" fill="rgb(210,24,1)"/><text x="129.00" y="238.50"></text></g><g><title>array_astype (methods.c) (4 samples, 0.14%)</title><rect x="126" y="244" width="2" height="15" fill="rgb(230,228,22)"/><text x="129.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.10%)</title><rect x="129" y="260" width="2" height="15" fill="rgb(221,48,16)"/><text x="132.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.10%)</title><rect x="129" y="276" width="2" height="15" fill="rgb(214,158,25)"/><text x="132.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.10%)</title><rect x="129" y="292" width="2" height="15" fill="rgb(251,179,37)"/><text x="132.00" y="302.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (3 samples, 0.10%)</title><rect x="129" y="308" width="2" height="15" fill="rgb(219,89,51)"/><text x="132.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_equal.py) (6 samples, 0.21%)</title><rect x="129" y="212" width="2" height="15" fill="rgb(247,111,23)"/><text x="132.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 0.21%)</title><rect x="129" y="228" width="2" height="15" fill="rgb(219,84,27)"/><text x="132.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.17%)</title><rect x="129" y="244" width="2" height="15" fill="rgb(224,141,6)"/><text x="132.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (11 samples, 0.38%)</title><rect x="131" y="212" width="4" height="15" fill="rgb(250,167,40)"/><text x="134.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;) (9 samples, 0.31%)</title><rect x="132" y="228" width="3" height="15" fill="rgb(250,165,36)"/><text x="135.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 0.31%)</title><rect x="132" y="244" width="3" height="15" fill="rgb(208,202,24)"/><text x="135.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py) (9 samples, 0.31%)</title><rect x="132" y="260" width="3" height="15" fill="rgb(220,144,6)"/><text x="135.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (7 samples, 0.24%)</title><rect x="133" y="276" width="2" height="15" fill="rgb(234,53,27)"/><text x="136.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 0.10%)</title><rect x="134" y="292" width="1" height="15" fill="rgb(235,60,42)"/><text x="137.00" y="302.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (14 samples, 0.48%)</title><rect x="198" y="228" width="6" height="15" fill="rgb(221,171,24)"/><text x="201.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (11 samples, 0.38%)</title><rect x="205" y="244" width="5" height="15" fill="rgb(248,187,26)"/><text x="208.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (8 samples, 0.28%)</title><rect x="206" y="260" width="4" height="15" fill="rgb(213,20,51)"/><text x="209.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (14 samples, 0.48%)</title><rect x="204" y="228" width="6" height="15" fill="rgb(207,15,4)"/><text x="207.00" y="238.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (3 samples, 0.10%)</title><rect x="215" y="292" width="1" height="15" fill="rgb(247,43,3)"/><text x="218.00" y="302.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (9 samples, 0.31%)</title><rect x="213" y="260" width="4" height="15" fill="rgb(206,35,6)"/><text x="216.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (9 samples, 0.31%)</title><rect x="213" y="276" width="4" height="15" fill="rgb(250,33,3)"/><text x="216.00" y="286.50"></text></g><g><title>get_view_from_index (mapping.c) (12 samples, 0.41%)</title><rect x="212" y="244" width="5" height="15" fill="rgb(251,99,29)"/><text x="215.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (22 samples, 0.76%)</title><rect x="211" y="228" width="8" height="15" fill="rgb(244,82,31)"/><text x="214.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (6 samples, 0.21%)</title><rect x="217" y="244" width="2" height="15" fill="rgb(229,134,52)"/><text x="220.00" y="254.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (3 samples, 0.10%)</title><rect x="258" y="276" width="1" height="15" fill="rgb(249,103,6)"/><text x="261.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (14 samples, 0.48%)</title><rect x="266" y="292" width="6" height="15" fill="rgb(222,52,9)"/><text x="269.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (7 samples, 0.24%)</title><rect x="274" y="308" width="3" height="15" fill="rgb(232,12,50)"/><text x="277.00" y="318.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (5 samples, 0.17%)</title><rect x="275" y="324" width="2" height="15" fill="rgb(230,214,32)"/><text x="278.00" y="334.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (5 samples, 0.17%)</title><rect x="275" y="340" width="2" height="15" fill="rgb(251,192,33)"/><text x="278.00" y="350.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (14 samples, 0.48%)</title><rect x="272" y="292" width="5" height="15" fill="rgb(218,17,22)"/><text x="275.00" y="302.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (5 samples, 0.17%)</title><rect x="280" y="340" width="2" height="15" fill="rgb(251,181,5)"/><text x="283.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (13 samples, 0.45%)</title><rect x="278" y="324" width="6" height="15" fill="rgb(208,168,7)"/><text x="281.00" y="334.50"></text></g><g><title>array_reshape (methods.c) (61 samples, 2.11%)</title><rect x="259" y="276" width="25" height="15" fill="rgb(216,92,42)"/><text x="262.00" y="286.50">a..</text></g><g><title>npy_free_cache_dim_obj (alloc.h) (16 samples, 0.55%)</title><rect x="277" y="292" width="7" height="15" fill="rgb(254,39,52)"/><text x="280.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (16 samples, 0.55%)</title><rect x="277" y="308" width="7" height="15" fill="rgb(248,39,17)"/><text x="280.00" y="318.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (148 samples, 5.11%)</title><rect x="231" y="260" width="60" height="15" fill="rgb(225,225,40)"/><text x="234.00" y="270.50">expand..</text></g><g><title>asanyarray (numpy/core/_asarray.py) (18 samples, 0.62%)</title><rect x="284" y="276" width="7" height="15" fill="rgb(243,192,13)"/><text x="287.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 0.14%)</title><rect x="290" y="292" width="1" height="15" fill="rgb(240,76,32)"/><text x="293.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (178 samples, 6.15%)</title><rect x="219" y="228" width="73" height="15" fill="rgb(224,127,53)"/><text x="222.00" y="238.50">expand_d..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (158 samples, 5.46%)</title><rect x="228" y="244" width="64" height="15" fill="rgb(221,21,36)"/><text x="231.00" y="254.50">array_i..</text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (22 samples, 0.76%)</title><rect x="394" y="260" width="9" height="15" fill="rgb(238,217,31)"/><text x="397.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (25 samples, 0.86%)</title><rect x="609" y="276" width="10" height="15" fill="rgb(247,31,6)"/><text x="612.00" y="286.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (9 samples, 0.31%)</title><rect x="654" y="292" width="3" height="15" fill="rgb(240,108,50)"/><text x="657.00" y="302.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (11 samples, 0.38%)</title><rect x="697" y="340" width="4" height="15" fill="rgb(231,189,8)"/><text x="700.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (7 samples, 0.24%)</title><rect x="699" y="356" width="2" height="15" fill="rgb(207,219,40)"/><text x="702.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (7 samples, 0.24%)</title><rect x="706" y="388" width="2" height="15" fill="rgb(206,28,7)"/><text x="709.00" y="398.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (9 samples, 0.31%)</title><rect x="706" y="356" width="3" height="15" fill="rgb(222,221,10)"/><text x="709.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (9 samples, 0.31%)</title><rect x="706" y="372" width="3" height="15" fill="rgb(223,199,27)"/><text x="709.00" y="382.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (6 samples, 0.21%)</title><rect x="710" y="356" width="2" height="15" fill="rgb(234,174,52)"/><text x="713.00" y="366.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (3 samples, 0.10%)</title><rect x="713" y="372" width="1" height="15" fill="rgb(217,177,16)"/><text x="716.00" y="382.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (6 samples, 0.21%)</title><rect x="718" y="388" width="2" height="15" fill="rgb(210,86,13)"/><text x="721.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (3 samples, 0.10%)</title><rect x="719" y="404" width="1" height="15" fill="rgb(241,213,33)"/><text x="722.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.14%)</title><rect x="725" y="404" width="1" height="15" fill="rgb(253,210,42)"/><text x="728.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (8 samples, 0.28%)</title><rect x="731" y="420" width="3" height="15" fill="rgb(208,105,23)"/><text x="734.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (6 samples, 0.21%)</title><rect x="732" y="436" width="2" height="15" fill="rgb(221,182,34)"/><text x="735.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 0.17%)</title><rect x="732" y="452" width="2" height="15" fill="rgb(237,157,38)"/><text x="735.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (21 samples, 0.73%)</title><rect x="726" y="404" width="9" height="15" fill="rgb(222,41,21)"/><text x="729.00" y="414.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (4 samples, 0.14%)</title><rect x="735" y="404" width="2" height="15" fill="rgb(227,170,17)"/><text x="738.00" y="414.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c) (8 samples, 0.28%)</title><rect x="738" y="404" width="3" height="15" fill="rgb(219,120,49)"/><text x="741.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (8 samples, 0.28%)</title><rect x="741" y="404" width="4" height="15" fill="rgb(247,63,3)"/><text x="744.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (67 samples, 2.32%)</title><rect x="720" y="388" width="28" height="15" fill="rgb(228,17,14)"/><text x="723.00" y="398.50">N..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (7 samples, 0.24%)</title><rect x="745" y="404" width="3" height="15" fill="rgb(251,83,27)"/><text x="748.00" y="414.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (3 samples, 0.10%)</title><rect x="746" y="420" width="2" height="15" fill="rgb(254,139,28)"/><text x="749.00" y="430.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (6 samples, 0.21%)</title><rect x="748" y="388" width="2" height="15" fill="rgb(243,85,41)"/><text x="751.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (8 samples, 0.28%)</title><rect x="755" y="404" width="4" height="15" fill="rgb(237,227,7)"/><text x="758.00" y="414.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (15 samples, 0.52%)</title><rect x="753" y="388" width="6" height="15" fill="rgb(219,96,22)"/><text x="756.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (119 samples, 4.11%)</title><rect x="712" y="356" width="49" height="15" fill="rgb(226,168,38)"/><text x="715.00" y="366.50">exec..</text></g><g><title>iterator_loop (ufunc_object.c) (114 samples, 3.94%)</title><rect x="714" y="372" width="47" height="15" fill="rgb(252,52,31)"/><text x="717.00" y="382.50">iter..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (5 samples, 0.17%)</title><rect x="759" y="388" width="2" height="15" fill="rgb(248,131,15)"/><text x="762.00" y="398.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (4 samples, 0.14%)</title><rect x="759" y="404" width="2" height="15" fill="rgb(222,116,17)"/><text x="762.00" y="414.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (13 samples, 0.45%)</title><rect x="761" y="356" width="5" height="15" fill="rgb(240,113,28)"/><text x="764.00" y="366.50"></text></g><g><title>PyArray_FromArray (ctors.c) (4 samples, 0.14%)</title><rect x="765" y="372" width="1" height="15" fill="rgb(228,78,9)"/><text x="768.00" y="382.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (6 samples, 0.21%)</title><rect x="766" y="356" width="3" height="15" fill="rgb(231,87,2)"/><text x="769.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (170 samples, 5.87%)</title><rect x="701" y="340" width="70" height="15" fill="rgb(206,142,4)"/><text x="704.00" y="350.50">PyUFunc..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (5 samples, 0.17%)</title><rect x="769" y="356" width="2" height="15" fill="rgb(205,115,27)"/><text x="772.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (3 samples, 0.10%)</title><rect x="770" y="372" width="1" height="15" fill="rgb(228,153,26)"/><text x="773.00" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (3 samples, 0.10%)</title><rect x="770" y="388" width="1" height="15" fill="rgb(254,173,20)"/><text x="773.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (223 samples, 7.71%)</title><rect x="680" y="308" width="91" height="15" fill="rgb(205,87,23)"/><text x="683.00" y="318.50">_run (mlpr..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (187 samples, 6.46%)</title><rect x="695" y="324" width="76" height="15" fill="rgb(249,166,20)"/><text x="698.00" y="334.50">ufunc_ge..</text></g><g><title>PyArray_STRIDES (ndarraytypes.h) (3 samples, 0.10%)</title><rect x="791" y="420" width="1" height="15" fill="rgb(244,31,45)"/><text x="794.00" y="430.50"></text></g><g><title>arrays_overlap (array_assign.c) (8 samples, 0.28%)</title><rect x="790" y="372" width="3" height="15" fill="rgb(219,118,20)"/><text x="793.00" y="382.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (5 samples, 0.17%)</title><rect x="791" y="388" width="2" height="15" fill="rgb(210,15,42)"/><text x="794.00" y="398.50"></text></g><g><title>get_array_memory_extents (mem_overlap.c) (4 samples, 0.14%)</title><rect x="791" y="404" width="2" height="15" fill="rgb(249,81,12)"/><text x="794.00" y="414.50"></text></g><g><title>0x7f82cdeae124 (libc-2.29.so) (3 samples, 0.10%)</title><rect x="796" y="388" width="2" height="15" fill="rgb(241,12,15)"/><text x="799.00" y="398.50"></text></g><g><title>0x7f82cdeadd50 (libc-2.29.so) (5 samples, 0.17%)</title><rect x="801" y="420" width="2" height="15" fill="rgb(217,11,17)"/><text x="804.00" y="430.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (12 samples, 0.41%)</title><rect x="798" y="388" width="5" height="15" fill="rgb(205,85,13)"/><text x="801.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (9 samples, 0.31%)</title><rect x="800" y="404" width="3" height="15" fill="rgb(247,187,1)"/><text x="803.00" y="414.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (3 samples, 0.10%)</title><rect x="803" y="388" width="2" height="15" fill="rgb(247,209,38)"/><text x="806.00" y="398.50"></text></g><g><title>__GI___pthread_mutex_unlock (libpthread-2.29.so) (4 samples, 0.14%)</title><rect x="805" y="388" width="1" height="15" fill="rgb(246,17,30)"/><text x="808.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (51 samples, 1.76%)</title><rect x="789" y="356" width="20" height="15" fill="rgb(227,115,10)"/><text x="792.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (40 samples, 1.38%)</title><rect x="793" y="372" width="16" height="15" fill="rgb(241,110,19)"/><text x="796.00" y="382.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (4 samples, 0.14%)</title><rect x="808" y="388" width="1" height="15" fill="rgb(235,120,46)"/><text x="811.00" y="398.50"></text></g><g><title>PyArray_DESCR (ndarraytypes.h) (3 samples, 0.10%)</title><rect x="811" y="372" width="1" height="15" fill="rgb(252,113,21)"/><text x="814.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (112 samples, 3.87%)</title><rect x="771" y="308" width="46" height="15" fill="rgb(213,160,35)"/><text x="774.00" y="318.50">_run..</text></g><g><title>array_copy (methods.c) (79 samples, 2.73%)</title><rect x="785" y="324" width="32" height="15" fill="rgb(228,85,33)"/><text x="788.00" y="334.50">ar..</text></g><g><title>PyArray_NewCopy (convert.c) (72 samples, 2.49%)</title><rect x="787" y="340" width="30" height="15" fill="rgb(243,24,19)"/><text x="790.00" y="350.50">Py..</text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (17 samples, 0.59%)</title><rect x="810" y="356" width="7" height="15" fill="rgb(249,200,52)"/><text x="813.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (12 samples, 0.41%)</title><rect x="812" y="372" width="5" height="15" fill="rgb(251,63,21)"/><text x="815.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (12 samples, 0.41%)</title><rect x="812" y="388" width="5" height="15" fill="rgb(242,195,44)"/><text x="815.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (12 samples, 0.41%)</title><rect x="812" y="404" width="5" height="15" fill="rgb(232,29,34)"/><text x="815.00" y="414.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (9 samples, 0.31%)</title><rect x="832" y="340" width="4" height="15" fill="rgb(238,94,28)"/><text x="835.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (9 samples, 0.31%)</title><rect x="832" y="356" width="4" height="15" fill="rgb(215,50,3)"/><text x="835.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c) (13 samples, 0.45%)</title><rect x="832" y="324" width="5" height="15" fill="rgb(212,121,29)"/><text x="835.00" y="334.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (23 samples, 0.79%)</title><rect x="906" y="388" width="9" height="15" fill="rgb(231,35,54)"/><text x="909.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (3 samples, 0.10%)</title><rect x="916" y="436" width="2" height="15" fill="rgb(234,136,30)"/><text x="919.00" y="446.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (27 samples, 0.93%)</title><rect x="915" y="404" width="12" height="15" fill="rgb(214,4,40)"/><text x="918.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (26 samples, 0.90%)</title><rect x="916" y="420" width="11" height="15" fill="rgb(207,80,5)"/><text x="919.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (22 samples, 0.76%)</title><rect x="918" y="436" width="9" height="15" fill="rgb(208,213,48)"/><text x="921.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (8 samples, 0.28%)</title><rect x="923" y="452" width="4" height="15" fill="rgb(220,143,11)"/><text x="926.00" y="462.50"></text></g><g><title>PyArray_FromAny (ctors.c) (3 samples, 0.10%)</title><rect x="937" y="420" width="1" height="15" fill="rgb(232,17,0)"/><text x="940.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (18 samples, 0.62%)</title><rect x="939" y="420" width="7" height="15" fill="rgb(252,170,35)"/><text x="942.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (17 samples, 0.59%)</title><rect x="940" y="436" width="6" height="15" fill="rgb(241,157,5)"/><text x="943.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (17 samples, 0.59%)</title><rect x="940" y="452" width="6" height="15" fill="rgb(253,76,19)"/><text x="943.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (6 samples, 0.21%)</title><rect x="955" y="468" width="2" height="15" fill="rgb(220,4,31)"/><text x="958.00" y="478.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (4 samples, 0.14%)</title><rect x="958" y="468" width="2" height="15" fill="rgb(208,204,52)"/><text x="961.00" y="478.50"></text></g><g><title>npyiter_compute_index_strides (nditer_constr.c) (3 samples, 0.10%)</title><rect x="960" y="468" width="1" height="15" fill="rgb(227,146,10)"/><text x="963.00" y="478.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (11 samples, 0.38%)</title><rect x="961" y="468" width="5" height="15" fill="rgb(224,138,27)"/><text x="964.00" y="478.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (9 samples, 0.31%)</title><rect x="966" y="468" width="3" height="15" fill="rgb(252,46,43)"/><text x="969.00" y="478.50"></text></g><g><title>PyArray_AdaptFlexibleDType (convert_datatype.c) (3 samples, 0.10%)</title><rect x="973" y="500" width="1" height="15" fill="rgb(227,140,3)"/><text x="976.00" y="510.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (58 samples, 2.00%)</title><rect x="951" y="452" width="24" height="15" fill="rgb(240,217,6)"/><text x="954.00" y="462.50">N..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (12 samples, 0.41%)</title><rect x="970" y="468" width="5" height="15" fill="rgb(206,5,7)"/><text x="973.00" y="478.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (11 samples, 0.38%)</title><rect x="970" y="484" width="5" height="15" fill="rgb(247,227,17)"/><text x="973.00" y="494.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (4 samples, 0.14%)</title><rect x="975" y="452" width="1" height="15" fill="rgb(210,97,0)"/><text x="978.00" y="462.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (3 samples, 0.10%)</title><rect x="979" y="516" width="1" height="15" fill="rgb(250,11,25)"/><text x="982.00" y="526.50"></text></g><g><title>npy_alloc_cache (alloc.c) (7 samples, 0.24%)</title><rect x="981" y="516" width="3" height="15" fill="rgb(222,120,44)"/><text x="984.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (7 samples, 0.24%)</title><rect x="981" y="532" width="3" height="15" fill="rgb(250,167,29)"/><text x="984.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (4 samples, 0.14%)</title><rect x="982" y="548" width="2" height="15" fill="rgb(221,178,1)"/><text x="985.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.10%)</title><rect x="982" y="564" width="2" height="15" fill="rgb(250,14,0)"/><text x="985.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (29 samples, 1.00%)</title><rect x="977" y="484" width="12" height="15" fill="rgb(205,28,20)"/><text x="980.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (29 samples, 1.00%)</title><rect x="977" y="500" width="12" height="15" fill="rgb(218,170,42)"/><text x="980.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (14 samples, 0.48%)</title><rect x="984" y="516" width="5" height="15" fill="rgb(220,19,4)"/><text x="987.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (13 samples, 0.45%)</title><rect x="984" y="532" width="5" height="15" fill="rgb(234,229,17)"/><text x="987.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (9 samples, 0.31%)</title><rect x="986" y="548" width="3" height="15" fill="rgb(230,119,19)"/><text x="989.00" y="558.50"></text></g><g><title>0x7f82cdeadd50 (libc-2.29.so) (4 samples, 0.14%)</title><rect x="990" y="500" width="2" height="15" fill="rgb(234,46,49)"/><text x="993.00" y="510.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (37 samples, 1.28%)</title><rect x="977" y="452" width="16" height="15" fill="rgb(239,158,10)"/><text x="980.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (37 samples, 1.28%)</title><rect x="977" y="468" width="16" height="15" fill="rgb(222,42,54)"/><text x="980.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (8 samples, 0.28%)</title><rect x="989" y="484" width="4" height="15" fill="rgb(225,82,21)"/><text x="992.00" y="494.50"></text></g><g><title>can_cast_scalar_to (convert_datatype.c) (3 samples, 0.10%)</title><rect x="998" y="484" width="1" height="15" fill="rgb(243,55,1)"/><text x="1001.00" y="494.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (5 samples, 0.17%)</title><rect x="1001" y="500" width="2" height="15" fill="rgb(251,107,24)"/><text x="1004.00" y="510.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c) (4 samples, 0.14%)</title><rect x="1003" y="500" width="1" height="15" fill="rgb(235,174,36)"/><text x="1006.00" y="510.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (33 samples, 1.14%)</title><rect x="993" y="452" width="13" height="15" fill="rgb(219,220,17)"/><text x="996.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (23 samples, 0.79%)</title><rect x="997" y="468" width="9" height="15" fill="rgb(253,119,12)"/><text x="1000.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (17 samples, 0.59%)</title><rect x="999" y="484" width="7" height="15" fill="rgb(249,26,54)"/><text x="1002.00" y="494.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (4 samples, 0.14%)</title><rect x="1004" y="500" width="2" height="15" fill="rgb(226,60,19)"/><text x="1007.00" y="510.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (4 samples, 0.14%)</title><rect x="1004" y="516" width="2" height="15" fill="rgb(226,57,45)"/><text x="1007.00" y="526.50"></text></g><g><title>FLOAT_add (loops.c.src) (5 samples, 0.17%)</title><rect x="1008" y="468" width="3" height="15" fill="rgb(216,116,21)"/><text x="1011.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (160 samples, 5.53%)</title><rect x="947" y="436" width="66" height="15" fill="rgb(205,177,40)"/><text x="950.00" y="446.50">PyUFunc..</text></g><g><title>reduce_loop (ufunc_object.c) (11 samples, 0.38%)</title><rect x="1008" y="452" width="5" height="15" fill="rgb(213,100,23)"/><text x="1011.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (3 samples, 0.10%)</title><rect x="1011" y="468" width="2" height="15" fill="rgb(241,112,13)"/><text x="1014.00" y="478.50"></text></g><g><title>_get_identity (ufunc_object.c) (4 samples, 0.14%)</title><rect x="1013" y="436" width="1" height="15" fill="rgb(232,206,47)"/><text x="1016.00" y="446.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (5 samples, 0.17%)</title><rect x="1019" y="484" width="3" height="15" fill="rgb(238,45,27)"/><text x="1022.00" y="494.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (18 samples, 0.62%)</title><rect x="1017" y="468" width="8" height="15" fill="rgb(254,79,54)"/><text x="1020.00" y="478.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (6 samples, 0.21%)</title><rect x="1022" y="484" width="3" height="15" fill="rgb(218,33,15)"/><text x="1025.00" y="494.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (5 samples, 0.17%)</title><rect x="1023" y="500" width="2" height="15" fill="rgb(213,217,41)"/><text x="1026.00" y="510.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (27 samples, 0.93%)</title><rect x="1014" y="436" width="11" height="15" fill="rgb(254,217,15)"/><text x="1017.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (21 samples, 0.73%)</title><rect x="1017" y="452" width="8" height="15" fill="rgb(242,221,6)"/><text x="1020.00" y="462.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (192 samples, 6.63%)</title><rect x="947" y="420" width="79" height="15" fill="rgb(241,18,35)"/><text x="950.00" y="430.50">PyUFunc_R..</text></g><g><title>sum (&lt;__array_function__ internals&gt;) (466 samples, 16.10%)</title><rect x="837" y="324" width="190" height="15" fill="rgb(243,23,1)"/><text x="840.00" y="334.50">sum (&lt;__array_function__..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (440 samples, 15.20%)</title><rect x="848" y="340" width="179" height="15" fill="rgb(218,105,33)"/><text x="851.00" y="350.50">array_implement_array_f..</text></g><g><title>sum (numpy/core/fromnumeric.py) (419 samples, 14.48%)</title><rect x="856" y="356" width="171" height="15" fill="rgb(248,196,30)"/><text x="859.00" y="366.50">sum (numpy/core/fromnu..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (362 samples, 12.51%)</title><rect x="880" y="372" width="147" height="15" fill="rgb(250,218,47)"/><text x="883.00" y="382.50">_wrapreduction (nu..</text></g><g><title>ufunc_reduce (ufunc_object.c) (275 samples, 9.50%)</title><rect x="915" y="388" width="112" height="15" fill="rgb(238,3,43)"/><text x="918.00" y="398.50">ufunc_reduce ..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (247 samples, 8.53%)</title><rect x="927" y="404" width="100" height="15" fill="rgb(210,227,18)"/><text x="930.00" y="414.50">PyUFunc_Gene..</text></g><g><title>unicode_eq (python3.7) (3 samples, 0.10%)</title><rect x="1026" y="420" width="1" height="15" fill="rgb(210,114,48)"/><text x="1029.00" y="430.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (7 samples, 0.24%)</title><rect x="1028" y="340" width="2" height="15" fill="rgb(229,147,2)"/><text x="1031.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (5 samples, 0.17%)</title><rect x="1028" y="356" width="2" height="15" fill="rgb(227,209,30)"/><text x="1031.00" y="366.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (3 samples, 0.10%)</title><rect x="1029" y="372" width="1" height="15" fill="rgb(209,125,48)"/><text x="1032.00" y="382.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (4 samples, 0.14%)</title><rect x="1033" y="356" width="2" height="15" fill="rgb(238,219,8)"/><text x="1036.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (18 samples, 0.62%)</title><rect x="1037" y="372" width="7" height="15" fill="rgb(249,150,14)"/><text x="1040.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (17 samples, 0.59%)</title><rect x="1037" y="388" width="7" height="15" fill="rgb(251,179,22)"/><text x="1040.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (10 samples, 0.35%)</title><rect x="1040" y="404" width="4" height="15" fill="rgb(215,133,33)"/><text x="1043.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (10 samples, 0.35%)</title><rect x="1040" y="420" width="4" height="15" fill="rgb(226,29,25)"/><text x="1043.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (9 samples, 0.31%)</title><rect x="1040" y="436" width="4" height="15" fill="rgb(216,179,53)"/><text x="1043.00" y="446.50"></text></g><g><title>_mm_load_ps (xmmintrin.h) (3 samples, 0.10%)</title><rect x="1046" y="404" width="2" height="15" fill="rgb(228,120,35)"/><text x="1049.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (31 samples, 1.07%)</title><rect x="1036" y="356" width="13" height="15" fill="rgb(247,195,32)"/><text x="1039.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (11 samples, 0.38%)</title><rect x="1044" y="372" width="5" height="15" fill="rgb(230,44,44)"/><text x="1047.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (6 samples, 0.21%)</title><rect x="1046" y="388" width="3" height="15" fill="rgb(241,141,47)"/><text x="1049.00" y="398.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.10%)</title><rect x="1049" y="356" width="1" height="15" fill="rgb(222,224,26)"/><text x="1052.00" y="366.50"></text></g><g><title>PyArray_CanCastTo (convert_datatype.c) (7 samples, 0.24%)</title><rect x="1058" y="420" width="3" height="15" fill="rgb(208,160,29)"/><text x="1061.00" y="430.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (15 samples, 0.52%)</title><rect x="1057" y="388" width="7" height="15" fill="rgb(217,164,35)"/><text x="1060.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (15 samples, 0.52%)</title><rect x="1057" y="404" width="7" height="15" fill="rgb(219,108,25)"/><text x="1060.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (6 samples, 0.21%)</title><rect x="1061" y="420" width="3" height="15" fill="rgb(230,134,46)"/><text x="1064.00" y="430.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (4 samples, 0.14%)</title><rect x="1062" y="436" width="2" height="15" fill="rgb(236,7,43)"/><text x="1065.00" y="446.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (40 samples, 1.38%)</title><rect x="1050" y="356" width="16" height="15" fill="rgb(246,56,7)"/><text x="1053.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (26 samples, 0.90%)</title><rect x="1056" y="372" width="10" height="15" fill="rgb(254,38,27)"/><text x="1059.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (7 samples, 0.24%)</title><rect x="1064" y="388" width="2" height="15" fill="rgb(226,197,1)"/><text x="1067.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (91 samples, 3.14%)</title><rect x="1030" y="340" width="38" height="15" fill="rgb(215,159,10)"/><text x="1033.00" y="350.50">PyU..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (619 samples, 21.39%)</title><rect x="817" y="308" width="252" height="15" fill="rgb(237,55,27)"/><text x="820.00" y="318.50">_run (mlprodict/onnxrt/ops_cpu/op..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (103 samples, 3.56%)</title><rect x="1027" y="324" width="42" height="15" fill="rgb(244,175,23)"/><text x="1030.00" y="334.50">ufu..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,637 samples, 56.57%)</title><rect x="403" y="260" width="667" height="15" fill="rgb(236,208,37)"/><text x="406.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,105 samples, 38.18%)</title><rect x="619" y="276" width="451" height="15" fill="rgb(226,160,17)"/><text x="622.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,012 samples, 34.97%)</title><rect x="657" y="292" width="413" height="15" fill="rgb(230,171,39)"/><text x="660.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,854 samples, 64.06%)</title><rect x="316" y="244" width="756" height="15" fill="rgb(224,70,25)"/><text x="319.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>unicode_eq (python3.7) (4 samples, 0.14%)</title><rect x="1070" y="260" width="2" height="15" fill="rgb(207,160,43)"/><text x="1073.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (6 samples, 0.21%)</title><rect x="1072" y="260" width="3" height="15" fill="rgb(239,9,47)"/><text x="1075.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (5 samples, 0.17%)</title><rect x="1072" y="276" width="3" height="15" fill="rgb(211,57,39)"/><text x="1075.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,919 samples, 66.31%)</title><rect x="292" y="228" width="783" height="15" fill="rgb(233,0,52)"/><text x="295.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (8 samples, 0.28%)</title><rect x="1072" y="244" width="3" height="15" fill="rgb(247,46,35)"/><text x="1075.00" y="254.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (26 samples, 0.90%)</title><rect x="1076" y="276" width="11" height="15" fill="rgb(220,175,54)"/><text x="1079.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (25 samples, 0.86%)</title><rect x="1077" y="292" width="10" height="15" fill="rgb(250,84,54)"/><text x="1080.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (25 samples, 0.86%)</title><rect x="1077" y="308" width="10" height="15" fill="rgb(242,198,29)"/><text x="1080.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (11 samples, 0.38%)</title><rect x="1082" y="324" width="5" height="15" fill="rgb(250,89,33)"/><text x="1085.00" y="334.50"></text></g><g><title>arrays_overlap (array_assign.c) (4 samples, 0.14%)</title><rect x="1088" y="372" width="1" height="15" fill="rgb(211,96,20)"/><text x="1091.00" y="382.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (4 samples, 0.14%)</title><rect x="1088" y="388" width="1" height="15" fill="rgb(225,178,39)"/><text x="1091.00" y="398.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (3 samples, 0.10%)</title><rect x="1093" y="388" width="1" height="15" fill="rgb(206,202,2)"/><text x="1096.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (19 samples, 0.66%)</title><rect x="1088" y="356" width="7" height="15" fill="rgb(236,194,48)"/><text x="1091.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (15 samples, 0.52%)</title><rect x="1089" y="372" width="6" height="15" fill="rgb(237,180,19)"/><text x="1092.00" y="382.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (3 samples, 0.10%)</title><rect x="1094" y="388" width="1" height="15" fill="rgb(225,186,7)"/><text x="1097.00" y="398.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (23 samples, 0.79%)</title><rect x="1087" y="276" width="9" height="15" fill="rgb(228,80,1)"/><text x="1090.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (23 samples, 0.79%)</title><rect x="1087" y="292" width="9" height="15" fill="rgb(217,98,31)"/><text x="1090.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (23 samples, 0.79%)</title><rect x="1087" y="308" width="9" height="15" fill="rgb(239,124,48)"/><text x="1090.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (23 samples, 0.79%)</title><rect x="1087" y="324" width="9" height="15" fill="rgb(235,147,42)"/><text x="1090.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (22 samples, 0.76%)</title><rect x="1087" y="340" width="9" height="15" fill="rgb(245,120,18)"/><text x="1090.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (2,356 samples, 81.41%)</title><rect x="136" y="212" width="961" height="15" fill="rgb(220,225,48)"/><text x="139.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (53 samples, 1.83%)</title><rect x="1075" y="228" width="22" height="15" fill="rgb(231,130,4)"/><text x="1078.00" y="238.50">v..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (51 samples, 1.76%)</title><rect x="1076" y="244" width="21" height="15" fill="rgb(205,24,1)"/><text x="1079.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (50 samples, 1.73%)</title><rect x="1076" y="260" width="21" height="15" fill="rgb(225,87,42)"/><text x="1079.00" y="270.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (3 samples, 0.10%)</title><rect x="1098" y="260" width="1" height="15" fill="rgb(238,61,7)"/><text x="1101.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.10%)</title><rect x="1098" y="276" width="1" height="15" fill="rgb(240,16,52)"/><text x="1101.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (3 samples, 0.10%)</title><rect x="1098" y="292" width="1" height="15" fill="rgb(205,129,34)"/><text x="1101.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (3 samples, 0.10%)</title><rect x="1098" y="308" width="1" height="15" fill="rgb(239,159,34)"/><text x="1101.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (3 samples, 0.10%)</title><rect x="1098" y="324" width="1" height="15" fill="rgb(234,219,10)"/><text x="1101.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (3 samples, 0.10%)</title><rect x="1098" y="340" width="1" height="15" fill="rgb(206,98,17)"/><text x="1101.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (3 samples, 0.10%)</title><rect x="1098" y="356" width="1" height="15" fill="rgb(214,102,54)"/><text x="1101.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (16 samples, 0.55%)</title><rect x="1097" y="212" width="6" height="15" fill="rgb(209,145,16)"/><text x="1100.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (15 samples, 0.52%)</title><rect x="1097" y="228" width="6" height="15" fill="rgb(236,83,11)"/><text x="1100.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (14 samples, 0.48%)</title><rect x="1098" y="244" width="5" height="15" fill="rgb(215,8,42)"/><text x="1101.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (6 samples, 0.21%)</title><rect x="1101" y="260" width="2" height="15" fill="rgb(235,191,33)"/><text x="1104.00" y="270.50"></text></g><g><title>get_view_from_index (mapping.c) (3 samples, 0.10%)</title><rect x="1102" y="276" width="1" height="15" fill="rgb(243,5,9)"/><text x="1105.00" y="286.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (3 samples, 0.10%)</title><rect x="1102" y="292" width="1" height="15" fill="rgb(230,167,16)"/><text x="1105.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (3 samples, 0.10%)</title><rect x="1102" y="308" width="1" height="15" fill="rgb(217,207,46)"/><text x="1105.00" y="318.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (5 samples, 0.17%)</title><rect x="1104" y="228" width="2" height="15" fill="rgb(207,98,15)"/><text x="1107.00" y="238.50"></text></g><g><title>_buffer_clear_info (buffer.c) (5 samples, 0.17%)</title><rect x="1104" y="244" width="2" height="15" fill="rgb(218,63,25)"/><text x="1107.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (8 samples, 0.28%)</title><rect x="1104" y="212" width="3" height="15" fill="rgb(233,169,48)"/><text x="1107.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.10%)</title><rect x="1106" y="228" width="1" height="15" fill="rgb(231,102,7)"/><text x="1109.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (5 samples, 0.17%)</title><rect x="1109" y="228" width="2" height="15" fill="rgb(234,96,27)"/><text x="1112.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (5 samples, 0.17%)</title><rect x="1109" y="244" width="2" height="15" fill="rgb(210,21,43)"/><text x="1112.00" y="254.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py) (5 samples, 0.17%)</title><rect x="1109" y="260" width="2" height="15" fill="rgb(219,224,11)"/><text x="1112.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (4 samples, 0.14%)</title><rect x="1111" y="244" width="2" height="15" fill="rgb(238,62,54)"/><text x="1114.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_div.py) (6 samples, 0.21%)</title><rect x="1111" y="228" width="2" height="15" fill="rgb(225,163,18)"/><text x="1114.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (18 samples, 0.62%)</title><rect x="1113" y="228" width="8" height="15" fill="rgb(241,194,29)"/><text x="1116.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (16 samples, 0.55%)</title><rect x="1114" y="244" width="7" height="15" fill="rgb(220,203,41)"/><text x="1117.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (15 samples, 0.52%)</title><rect x="1114" y="260" width="7" height="15" fill="rgb(243,118,25)"/><text x="1117.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (14 samples, 0.48%)</title><rect x="1115" y="276" width="6" height="15" fill="rgb(254,96,46)"/><text x="1118.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (12 samples, 0.41%)</title><rect x="1116" y="292" width="5" height="15" fill="rgb(214,128,48)"/><text x="1119.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (6 samples, 0.21%)</title><rect x="1118" y="308" width="3" height="15" fill="rgb(208,139,31)"/><text x="1121.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 0.14%)</title><rect x="1119" y="324" width="2" height="15" fill="rgb(205,8,2)"/><text x="1122.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (3 samples, 0.10%)</title><rect x="1119" y="340" width="2" height="15" fill="rgb(239,38,31)"/><text x="1122.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (3 samples, 0.10%)</title><rect x="1119" y="356" width="2" height="15" fill="rgb(252,39,32)"/><text x="1122.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (3 samples, 0.10%)</title><rect x="1121" y="228" width="1" height="15" fill="rgb(236,73,36)"/><text x="1124.00" y="238.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py) (2,517 samples, 86.97%)</title><rect x="96" y="100" width="1027" height="15" fill="rgb(250,164,23)"/><text x="99.00" y="110.50">profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (2,517 samples, 86.97%)</title><rect x="96" y="116" width="1027" height="15" fill="rgb(237,58,16)"/><text x="99.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (2,516 samples, 86.94%)</title><rect x="97" y="132" width="1026" height="15" fill="rgb(224,83,22)"/><text x="100.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (2,515 samples, 86.90%)</title><rect x="97" y="148" width="1026" height="15" fill="rgb(250,84,11)"/><text x="100.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (2,513 samples, 86.83%)</title><rect x="98" y="164" width="1025" height="15" fill="rgb(220,115,7)"/><text x="101.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (2,506 samples, 86.59%)</title><rect x="101" y="180" width="1022" height="15" fill="rgb(208,126,35)"/><text x="104.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (2,462 samples, 85.07%)</title><rect x="119" y="196" width="1004" height="15" fill="rgb(249,2,9)"/><text x="122.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (37 samples, 1.28%)</title><rect x="1108" y="212" width="15" height="15" fill="rgb(238,8,1)"/><text x="1111.00" y="222.50"></text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py) (2,518 samples, 87.01%)</title><rect x="96" y="68" width="1027" height="15" fill="rgb(222,202,52)"/><text x="99.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py) (2,518 samples, 87.01%)</title><rect x="96" y="84" width="1027" height="15" fill="rgb(230,62,22)"/><text x="99.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py)</text></g><g><title>array_assign_subscript (mapping.c) (4 samples, 0.14%)</title><rect x="1126" y="164" width="2" height="15" fill="rgb(213,184,7)"/><text x="1129.00" y="174.50"></text></g><g><title>array_richcompare (arrayobject.c) (4 samples, 0.14%)</title><rect x="1128" y="164" width="2" height="15" fill="rgb(222,41,48)"/><text x="1131.00" y="174.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.14%)</title><rect x="1128" y="180" width="2" height="15" fill="rgb(209,85,12)"/><text x="1131.00" y="190.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.14%)</title><rect x="1128" y="196" width="2" height="15" fill="rgb(236,75,25)"/><text x="1131.00" y="206.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.10%)</title><rect x="1129" y="212" width="1" height="15" fill="rgb(222,31,50)"/><text x="1132.00" y="222.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (4 samples, 0.14%)</title><rect x="1130" y="228" width="2" height="15" fill="rgb(246,149,10)"/><text x="1133.00" y="238.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (6 samples, 0.21%)</title><rect x="1130" y="196" width="2" height="15" fill="rgb(238,220,6)"/><text x="1133.00" y="206.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (6 samples, 0.21%)</title><rect x="1130" y="212" width="2" height="15" fill="rgb(244,50,12)"/><text x="1133.00" y="222.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (7 samples, 0.24%)</title><rect x="1130" y="180" width="3" height="15" fill="rgb(229,53,35)"/><text x="1133.00" y="190.50"></text></g><g><title>array_subscript (mapping.c) (8 samples, 0.28%)</title><rect x="1130" y="164" width="3" height="15" fill="rgb(227,206,51)"/><text x="1133.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (11 samples, 0.38%)</title><rect x="1134" y="164" width="5" height="15" fill="rgb(205,114,0)"/><text x="1137.00" y="174.50"></text></g><g><title>_initialize_backend (joblib/parallel.py) (4 samples, 0.14%)</title><rect x="1141" y="196" width="2" height="15" fill="rgb(240,55,31)"/><text x="1144.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (3 samples, 0.10%)</title><rect x="1149" y="372" width="1" height="15" fill="rgb(214,173,17)"/><text x="1152.00" y="382.50"></text></g><g><title>0x7f82a82a132c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.21%)</title><rect x="1149" y="324" width="2" height="15" fill="rgb(222,48,3)"/><text x="1152.00" y="334.50"></text></g><g><title>0x7f82a826c5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.21%)</title><rect x="1149" y="340" width="2" height="15" fill="rgb(214,203,18)"/><text x="1152.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (6 samples, 0.21%)</title><rect x="1149" y="356" width="2" height="15" fill="rgb(246,82,33)"/><text x="1152.00" y="366.50"></text></g><g><title>0x7f82a829c877 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.14%)</title><rect x="1152" y="356" width="2" height="15" fill="rgb(219,48,13)"/><text x="1155.00" y="366.50"></text></g><g><title>0x7f82a829cab9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.17%)</title><rect x="1154" y="372" width="2" height="15" fill="rgb(246,5,28)"/><text x="1157.00" y="382.50"></text></g><g><title>full (numpy/core/numeric.py) (4 samples, 0.14%)</title><rect x="1154" y="388" width="2" height="15" fill="rgb(246,174,11)"/><text x="1157.00" y="398.50"></text></g><g><title>0x7f82a82a1708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 0.45%)</title><rect x="1152" y="324" width="6" height="15" fill="rgb(228,3,20)"/><text x="1155.00" y="334.50"></text></g><g><title>0x7f82a826c5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 0.45%)</title><rect x="1152" y="340" width="6" height="15" fill="rgb(240,124,3)"/><text x="1155.00" y="350.50"></text></g><g><title>0x7f82a829d73a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.31%)</title><rect x="1154" y="356" width="4" height="15" fill="rgb(231,107,44)"/><text x="1157.00" y="366.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (30 samples, 1.04%)</title><rect x="1149" y="276" width="12" height="15" fill="rgb(218,182,38)"/><text x="1152.00" y="286.50"></text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py) (30 samples, 1.04%)</title><rect x="1149" y="292" width="12" height="15" fill="rgb(212,219,26)"/><text x="1152.00" y="302.50"></text></g><g><title>0x7f82a82a5e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (30 samples, 1.04%)</title><rect x="1149" y="308" width="12" height="15" fill="rgb(239,150,41)"/><text x="1152.00" y="318.50"></text></g><g><title>0x7f82a82a48cc (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.10%)</title><rect x="1160" y="324" width="1" height="15" fill="rgb(207,36,29)"/><text x="1163.00" y="334.50"></text></g><g><title>0x7f82a826dd53 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.10%)</title><rect x="1160" y="340" width="1" height="15" fill="rgb(209,50,0)"/><text x="1163.00" y="350.50"></text></g><g><title>0x7f82a8704e62 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.10%)</title><rect x="1160" y="356" width="1" height="15" fill="rgb(205,217,15)"/><text x="1163.00" y="366.50"></text></g><g><title>0x7f82a86e6654 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.10%)</title><rect x="1160" y="372" width="1" height="15" fill="rgb(248,54,2)"/><text x="1163.00" y="382.50"></text></g><g><title>0x7f82a86edeaf (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.10%)</title><rect x="1160" y="388" width="1" height="15" fill="rgb(220,18,14)"/><text x="1163.00" y="398.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.10%)</title><rect x="1160" y="404" width="1" height="15" fill="rgb(252,5,28)"/><text x="1163.00" y="414.50"></text></g><g><title>_dispatch (joblib/parallel.py) (39 samples, 1.35%)</title><rect x="1146" y="212" width="16" height="15" fill="rgb(242,61,45)"/><text x="1149.00" y="222.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (38 samples, 1.31%)</title><rect x="1147" y="228" width="15" height="15" fill="rgb(217,113,54)"/><text x="1150.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (36 samples, 1.24%)</title><rect x="1148" y="244" width="14" height="15" fill="rgb(213,214,32)"/><text x="1151.00" y="254.50"></text></g><g><title>__call__ (joblib/parallel.py) (34 samples, 1.17%)</title><rect x="1148" y="260" width="14" height="15" fill="rgb(239,140,33)"/><text x="1151.00" y="270.50"></text></g><g><title>__init__ (joblib/parallel.py) (3 samples, 0.10%)</title><rect x="1161" y="276" width="1" height="15" fill="rgb(214,197,13)"/><text x="1164.00" y="286.50"></text></g><g><title>get (queue.py) (3 samples, 0.10%)</title><rect x="1162" y="212" width="1" height="15" fill="rgb(239,141,54)"/><text x="1165.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (53 samples, 1.83%)</title><rect x="1143" y="196" width="22" height="15" fill="rgb(222,228,38)"/><text x="1146.00" y="206.50">d..</text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (3 samples, 0.10%)</title><rect x="1163" y="212" width="2" height="15" fill="rgb(247,14,10)"/><text x="1166.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py) (62 samples, 2.14%)</title><rect x="1141" y="180" width="25" height="15" fill="rgb(214,20,23)"/><text x="1144.00" y="190.50">_..</text></g><g><title>__init__ (distutils/version.py) (5 samples, 0.17%)</title><rect x="1166" y="180" width="2" height="15" fill="rgb(235,223,4)"/><text x="1169.00" y="190.50"></text></g><g><title>parse (distutils/version.py) (3 samples, 0.10%)</title><rect x="1167" y="196" width="1" height="15" fill="rgb(244,209,32)"/><text x="1170.00" y="206.50"></text></g><g><title>__init__ (threading.py) (4 samples, 0.14%)</title><rect x="1169" y="212" width="2" height="15" fill="rgb(240,52,43)"/><text x="1172.00" y="222.50"></text></g><g><title>__init__ (queue.py) (5 samples, 0.17%)</title><rect x="1169" y="196" width="2" height="15" fill="rgb(225,133,24)"/><text x="1172.00" y="206.50"></text></g><g><title>__init__ (joblib/parallel.py) (12 samples, 0.41%)</title><rect x="1168" y="180" width="5" height="15" fill="rgb(254,71,22)"/><text x="1171.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (10 samples, 0.35%)</title><rect x="1173" y="180" width="4" height="15" fill="rgb(226,168,33)"/><text x="1176.00" y="190.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (3 samples, 0.10%)</title><rect x="1177" y="180" width="1" height="15" fill="rgb(249,103,50)"/><text x="1180.00" y="190.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (3 samples, 0.10%)</title><rect x="1181" y="228" width="1" height="15" fill="rgb(250,37,54)"/><text x="1184.00" y="238.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (109 samples, 3.77%)</title><rect x="1139" y="164" width="44" height="15" fill="rgb(241,205,18)"/><text x="1142.00" y="174.50">knei..</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (8 samples, 0.28%)</title><rect x="1180" y="180" width="3" height="15" fill="rgb(251,97,49)"/><text x="1183.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 0.24%)</title><rect x="1180" y="196" width="3" height="15" fill="rgb(236,142,41)"/><text x="1183.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (6 samples, 0.21%)</title><rect x="1181" y="212" width="2" height="15" fill="rgb(210,73,4)"/><text x="1184.00" y="222.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (3 samples, 0.10%)</title><rect x="1182" y="228" width="1" height="15" fill="rgb(231,72,16)"/><text x="1185.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.10%)</title><rect x="1182" y="244" width="1" height="15" fill="rgb(217,157,19)"/><text x="1185.00" y="254.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (3 samples, 0.10%)</title><rect x="1182" y="260" width="1" height="15" fill="rgb(249,25,21)"/><text x="1185.00" y="270.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (3 samples, 0.10%)</title><rect x="1182" y="276" width="1" height="15" fill="rgb(237,12,21)"/><text x="1185.00" y="286.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (3 samples, 0.10%)</title><rect x="1182" y="292" width="1" height="15" fill="rgb(208,125,46)"/><text x="1185.00" y="302.50"></text></g><g><title>ones_like (&lt;__array_function__ internals&gt;) (3 samples, 0.10%)</title><rect x="1183" y="164" width="1" height="15" fill="rgb(238,49,5)"/><text x="1186.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.10%)</title><rect x="1183" y="180" width="1" height="15" fill="rgb(222,96,27)"/><text x="1186.00" y="190.50"></text></g><g><title>ones_like (numpy/core/numeric.py) (3 samples, 0.10%)</title><rect x="1183" y="196" width="1" height="15" fill="rgb(238,225,32)"/><text x="1186.00" y="206.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (3 samples, 0.10%)</title><rect x="1185" y="196" width="2" height="15" fill="rgb(210,150,31)"/><text x="1188.00" y="206.50"></text></g><g><title>PyArray_CastToType (convert_datatype.c) (3 samples, 0.10%)</title><rect x="1185" y="212" width="2" height="15" fill="rgb(253,43,14)"/><text x="1188.00" y="222.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.10%)</title><rect x="1187" y="228" width="1" height="15" fill="rgb(230,32,50)"/><text x="1190.00" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.14%)</title><rect x="1187" y="196" width="1" height="15" fill="rgb(235,39,25)"/><text x="1190.00" y="206.50"></text></g><g><title>iterator_loop (ufunc_object.c) (4 samples, 0.14%)</title><rect x="1187" y="212" width="1" height="15" fill="rgb(228,129,13)"/><text x="1190.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (12 samples, 0.41%)</title><rect x="1184" y="180" width="5" height="15" fill="rgb(208,210,42)"/><text x="1187.00" y="190.50"></text></g><g><title>all (2,894 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(210,226,18)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py) (2,894 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(207,93,25)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py) (163 samples, 5.63%)</title><rect x="1123" y="68" width="67" height="15" fill="rgb(241,154,39)"/><text x="1126.00" y="78.50">profile..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py) (163 samples, 5.63%)</title><rect x="1123" y="84" width="67" height="15" fill="rgb(220,130,45)"/><text x="1126.00" y="94.50">setup_p..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py) (163 samples, 5.63%)</title><rect x="1123" y="100" width="67" height="15" fill="rgb(242,70,24)"/><text x="1126.00" y="110.50">profile..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (163 samples, 5.63%)</title><rect x="1123" y="116" width="67" height="15" fill="rgb(241,192,26)"/><text x="1126.00" y="126.50">time_pr..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (162 samples, 5.60%)</title><rect x="1123" y="132" width="67" height="15" fill="rgb(241,78,19)"/><text x="1126.00" y="142.50">&lt;lambda..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py) (162 samples, 5.60%)</title><rect x="1123" y="148" width="67" height="15" fill="rgb(254,131,25)"/><text x="1126.00" y="158.50">predict..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (13 samples, 0.45%)</title><rect x="1184" y="164" width="6" height="15" fill="rgb(228,169,39)"/><text x="1187.00" y="174.50"></text></g></g></svg>