<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1926" onload="init(evt)" viewBox="0 0 1200 1926" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1926" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1909.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1909.00"> </text><g id="frames"><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:31) (1 samples, 0.16%)</title><rect x="10" y="52" width="1" height="15" fill="rgb(209,19,47)"/><text x="13.00" y="62.50"></text></g><g><title>start (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:11) (1 samples, 0.16%)</title><rect x="10" y="68" width="1" height="15" fill="rgb(218,224,17)"/><text x="13.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_m_cl.py:39) (1 samples, 0.16%)</title><rect x="10" y="84" width="1" height="15" fill="rgb(234,43,7)"/><text x="13.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py:151) (1 samples, 0.16%)</title><rect x="10" y="100" width="1" height="15" fill="rgb(225,113,48)"/><text x="13.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_forest.py:369) (1 samples, 0.16%)</title><rect x="10" y="116" width="1" height="15" fill="rgb(231,105,52)"/><text x="13.00" y="126.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_forest.py:369) (1 samples, 0.16%)</title><rect x="10" y="132" width="1" height="15" fill="rgb(228,91,54)"/><text x="13.00" y="142.50"></text></g><g><title>_make_estimator (sklearn/ensemble/_base.py:151) (1 samples, 0.16%)</title><rect x="10" y="148" width="1" height="15" fill="rgb(205,82,5)"/><text x="13.00" y="158.50"></text></g><g><title>set_params (sklearn/base.py:227) (1 samples, 0.16%)</title><rect x="10" y="164" width="1" height="15" fill="rgb(224,96,28)"/><text x="13.00" y="174.50"></text></g><g><title>get_params (sklearn/base.py:189) (1 samples, 0.16%)</title><rect x="10" y="180" width="1" height="15" fill="rgb(247,76,37)"/><text x="13.00" y="190.50"></text></g><g><title>_get_param_names (sklearn/base.py:158) (1 samples, 0.16%)</title><rect x="10" y="196" width="1" height="15" fill="rgb(239,3,51)"/><text x="13.00" y="206.50"></text></g><g><title>signature (inspect.py:3083) (1 samples, 0.16%)</title><rect x="10" y="212" width="1" height="15" fill="rgb(219,185,31)"/><text x="13.00" y="222.50"></text></g><g><title>from_callable (inspect.py:2833) (1 samples, 0.16%)</title><rect x="10" y="228" width="1" height="15" fill="rgb(247,212,1)"/><text x="13.00" y="238.50"></text></g><g><title>_signature_from_callable (inspect.py:2284) (1 samples, 0.16%)</title><rect x="10" y="244" width="1" height="15" fill="rgb(213,26,10)"/><text x="13.00" y="254.50"></text></g><g><title>_signature_from_function (inspect.py:2161) (1 samples, 0.16%)</title><rect x="10" y="260" width="1" height="15" fill="rgb(227,63,32)"/><text x="13.00" y="270.50"></text></g><g><title>__init__ (inspect.py:2469) (1 samples, 0.16%)</title><rect x="10" y="276" width="1" height="15" fill="rgb(240,82,10)"/><text x="13.00" y="286.50"></text></g><g><title>__call__ (enum.py:309) (1 samples, 0.16%)</title><rect x="10" y="292" width="1" height="15" fill="rgb(241,150,13)"/><text x="13.00" y="302.50"></text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:656) (1 samples, 0.16%)</title><rect x="11" y="148" width="2" height="15" fill="rgb(238,140,11)"/><text x="14.00" y="158.50"></text></g><g><title>_validate_X_predict (sklearn/ensemble/_forest.py:412) (1 samples, 0.16%)</title><rect x="11" y="164" width="2" height="15" fill="rgb(239,96,50)"/><text x="14.00" y="174.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py:380) (1 samples, 0.16%)</title><rect x="11" y="180" width="2" height="15" fill="rgb(252,107,38)"/><text x="14.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:448) (1 samples, 0.16%)</title><rect x="11" y="196" width="2" height="15" fill="rgb(237,178,13)"/><text x="14.00" y="206.50"></text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:666) (1 samples, 0.16%)</title><rect x="13" y="148" width="2" height="15" fill="rgb(212,116,48)"/><text x="16.00" y="158.50"></text></g><g><title>_joblib_parallel_args (sklearn/utils/fixes.py:223) (1 samples, 0.16%)</title><rect x="13" y="164" width="2" height="15" fill="rgb(228,48,5)"/><text x="16.00" y="174.50"></text></g><g><title>__init__ (distutils/version.py:304) (1 samples, 0.16%)</title><rect x="13" y="180" width="2" height="15" fill="rgb(223,49,20)"/><text x="16.00" y="190.50"></text></g><g><title>parse (distutils/version.py:312) (1 samples, 0.16%)</title><rect x="13" y="196" width="2" height="15" fill="rgb(223,164,47)"/><text x="16.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (1 samples, 0.16%)</title><rect x="15" y="164" width="2" height="15" fill="rgb(232,100,36)"/><text x="18.00" y="174.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (1 samples, 0.16%)</title><rect x="15" y="180" width="2" height="15" fill="rgb(241,193,27)"/><text x="18.00" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (1 samples, 0.16%)</title><rect x="15" y="196" width="2" height="15" fill="rgb(242,41,2)"/><text x="18.00" y="206.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (1 samples, 0.16%)</title><rect x="15" y="212" width="2" height="15" fill="rgb(220,52,2)"/><text x="18.00" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (1 samples, 0.16%)</title><rect x="15" y="228" width="2" height="15" fill="rgb(231,188,17)"/><text x="18.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (1 samples, 0.16%)</title><rect x="15" y="244" width="2" height="15" fill="rgb(207,26,50)"/><text x="18.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (1 samples, 0.16%)</title><rect x="15" y="260" width="2" height="15" fill="rgb(235,43,48)"/><text x="18.00" y="270.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:452) (1 samples, 0.16%)</title><rect x="15" y="276" width="2" height="15" fill="rgb(227,60,10)"/><text x="18.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.16%)</title><rect x="15" y="292" width="2" height="15" fill="rgb(221,72,32)"/><text x="18.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.16%)</title><rect x="15" y="308" width="2" height="15" fill="rgb(238,184,12)"/><text x="18.00" y="318.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1616) (1 samples, 0.16%)</title><rect x="15" y="324" width="2" height="15" fill="rgb(241,98,36)"/><text x="18.00" y="334.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c:1478) (1 samples, 0.16%)</title><rect x="15" y="340" width="2" height="15" fill="rgb(244,35,26)"/><text x="18.00" y="350.50"></text></g><g><title>get (queue.py:164) (1 samples, 0.16%)</title><rect x="21" y="196" width="2" height="15" fill="rgb(205,189,8)"/><text x="24.00" y="206.50"></text></g><g><title>__enter__ (threading.py:241) (1 samples, 0.16%)</title><rect x="21" y="212" width="2" height="15" fill="rgb(206,215,45)"/><text x="24.00" y="222.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (1 samples, 0.16%)</title><rect x="21" y="228" width="2" height="15" fill="rgb(210,31,14)"/><text x="24.00" y="238.50"></text></g><g><title>PyThread_acquire_lock_timed (python3.7) (1 samples, 0.16%)</title><rect x="21" y="244" width="2" height="15" fill="rgb(231,65,20)"/><text x="24.00" y="254.50"></text></g><g><title>get (queue.py:166) (1 samples, 0.16%)</title><rect x="23" y="196" width="2" height="15" fill="rgb(242,96,30)"/><text x="26.00" y="206.50"></text></g><g><title>_qsize (queue.py:209) (1 samples, 0.16%)</title><rect x="23" y="212" width="2" height="15" fill="rgb(232,149,25)"/><text x="26.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:796) (5 samples, 0.81%)</title><rect x="17" y="180" width="10" height="15" fill="rgb(215,155,14)"/><text x="20.00" y="190.50"></text></g><g><title>get (queue.py:182) (1 samples, 0.16%)</title><rect x="25" y="196" width="2" height="15" fill="rgb(211,201,41)"/><text x="28.00" y="206.50"></text></g><g><title>__exit__ (threading.py:244) (1 samples, 0.16%)</title><rect x="25" y="212" width="2" height="15" fill="rgb(222,190,12)"/><text x="28.00" y="222.50"></text></g><g><title>delayed (joblib/parallel.py:297) (1 samples, 0.16%)</title><rect x="30" y="212" width="2" height="15" fill="rgb(227,119,0)"/><text x="33.00" y="222.50"></text></g><g><title>update_wrapper (functools.py:52) (1 samples, 0.16%)</title><rect x="36" y="228" width="2" height="15" fill="rgb(235,188,43)"/><text x="39.00" y="238.50"></text></g><g><title>update_wrapper (functools.py:58) (2 samples, 0.32%)</title><rect x="38" y="228" width="4" height="15" fill="rgb(230,25,2)"/><text x="41.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:807) (9 samples, 1.45%)</title><rect x="27" y="180" width="17" height="15" fill="rgb(206,211,5)"/><text x="30.00" y="190.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py:669) (7 samples, 1.13%)</title><rect x="30" y="196" width="14" height="15" fill="rgb(253,80,22)"/><text x="33.00" y="206.50"></text></g><g><title>delayed (joblib/parallel.py:308) (6 samples, 0.97%)</title><rect x="32" y="212" width="12" height="15" fill="rgb(246,83,7)"/><text x="35.00" y="222.50"></text></g><g><title>update_wrapper (functools.py:63) (1 samples, 0.16%)</title><rect x="42" y="228" width="2" height="15" fill="rgb(235,69,13)"/><text x="45.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:822) (1 samples, 0.16%)</title><rect x="44" y="180" width="2" height="15" fill="rgb(212,107,15)"/><text x="47.00" y="190.50"></text></g><g><title>0x7f7941c1713a (libc-2.29.so) (1 samples, 0.16%)</title><rect x="51" y="212" width="2" height="15" fill="rgb(209,14,49)"/><text x="54.00" y="222.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (2 samples, 0.32%)</title><rect x="53" y="212" width="4" height="15" fill="rgb(243,123,21)"/><text x="56.00" y="222.50"></text></g><g><title>0x7f7941b5a1f2 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="55" y="228" width="2" height="15" fill="rgb(250,213,2)"/><text x="58.00" y="238.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:208) (7 samples, 1.13%)</title><rect x="46" y="196" width="13" height="15" fill="rgb(230,189,9)"/><text x="49.00" y="206.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;:419) (1 samples, 0.16%)</title><rect x="57" y="212" width="2" height="15" fill="rgb(221,106,37)"/><text x="60.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:824) (8 samples, 1.29%)</title><rect x="46" y="180" width="15" height="15" fill="rgb(216,20,6)"/><text x="49.00" y="190.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:212) (1 samples, 0.16%)</title><rect x="59" y="196" width="2" height="15" fill="rgb(208,84,0)"/><text x="62.00" y="206.50"></text></g><g><title>get_active_backend (joblib/parallel.py:83) (1 samples, 0.16%)</title><rect x="59" y="212" width="2" height="15" fill="rgb(218,212,40)"/><text x="62.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:825) (1 samples, 0.16%)</title><rect x="61" y="180" width="2" height="15" fill="rgb(225,36,13)"/><text x="64.00" y="190.50"></text></g><g><title>__init__ (joblib/parallel.py:241) (1 samples, 0.16%)</title><rect x="61" y="196" width="2" height="15" fill="rgb(243,93,2)"/><text x="64.00" y="206.50"></text></g><g><title>put (queue.py:132) (2 samples, 0.32%)</title><rect x="65" y="196" width="3" height="15" fill="rgb(252,67,29)"/><text x="68.00" y="206.50"></text></g><g><title>__enter__ (threading.py:241) (2 samples, 0.32%)</title><rect x="65" y="212" width="3" height="15" fill="rgb(208,22,45)"/><text x="68.00" y="222.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (1 samples, 0.16%)</title><rect x="67" y="228" width="1" height="15" fill="rgb(217,62,53)"/><text x="70.00" y="238.50"></text></g><g><title>PyThread_acquire_lock_timed (python3.7) (1 samples, 0.16%)</title><rect x="67" y="244" width="1" height="15" fill="rgb(215,23,34)"/><text x="70.00" y="254.50"></text></g><g><title>sem_trywait@@GLIBC_2.2.5 (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="67" y="260" width="1" height="15" fill="rgb(248,56,48)"/><text x="70.00" y="270.50"></text></g><g><title>__exit__ (threading.py:244) (2 samples, 0.32%)</title><rect x="68" y="212" width="4" height="15" fill="rgb(253,46,3)"/><text x="71.00" y="222.50"></text></g><g><title>lock_PyThread_release_lock (python3.7) (1 samples, 0.16%)</title><rect x="70" y="228" width="2" height="15" fill="rgb(234,186,36)"/><text x="73.00" y="238.50"></text></g><g><title>notify (threading.py:345) (1 samples, 0.16%)</title><rect x="72" y="212" width="2" height="15" fill="rgb(243,131,48)"/><text x="75.00" y="222.50"></text></g><g><title>_is_owned (threading.py:255) (1 samples, 0.16%)</title><rect x="72" y="228" width="2" height="15" fill="rgb(228,84,35)"/><text x="75.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:826) (8 samples, 1.29%)</title><rect x="63" y="180" width="15" height="15" fill="rgb(242,46,34)"/><text x="66.00" y="190.50"></text></g><g><title>put (queue.py:151) (5 samples, 0.81%)</title><rect x="68" y="196" width="10" height="15" fill="rgb(228,5,16)"/><text x="71.00" y="206.50"></text></g><g><title>notify (threading.py:348) (2 samples, 0.32%)</title><rect x="74" y="212" width="4" height="15" fill="rgb(249,215,7)"/><text x="77.00" y="222.50"></text></g><g><title>get (queue.py:180) (5 samples, 0.81%)</title><rect x="78" y="196" width="9" height="15" fill="rgb(213,43,45)"/><text x="81.00" y="206.50"></text></g><g><title>_get (queue.py:217) (5 samples, 0.81%)</title><rect x="78" y="212" width="9" height="15" fill="rgb(212,206,52)"/><text x="81.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:829) (6 samples, 0.97%)</title><rect x="78" y="180" width="11" height="15" fill="rgb(232,149,50)"/><text x="81.00" y="190.50"></text></g><g><title>get (queue.py:182) (1 samples, 0.16%)</title><rect x="87" y="196" width="2" height="15" fill="rgb(249,151,22)"/><text x="90.00" y="206.50"></text></g><g><title>__exit__ (threading.py:244) (1 samples, 0.16%)</title><rect x="87" y="212" width="2" height="15" fill="rgb(245,19,49)"/><text x="90.00" y="222.50"></text></g><g><title>_dispatch (joblib/parallel.py:750) (1 samples, 0.16%)</title><rect x="89" y="196" width="2" height="15" fill="rgb(245,8,34)"/><text x="92.00" y="206.50"></text></g><g><title>__init__ (joblib/parallel.py:327) (1 samples, 0.16%)</title><rect x="89" y="212" width="2" height="15" fill="rgb(208,119,12)"/><text x="92.00" y="222.50"></text></g><g><title>_dispatch (joblib/parallel.py:751) (1 samples, 0.16%)</title><rect x="91" y="196" width="2" height="15" fill="rgb(218,93,27)"/><text x="94.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:254) (3 samples, 0.48%)</title><rect x="93" y="244" width="6" height="15" fill="rgb(227,125,36)"/><text x="96.00" y="254.50"></text></g><g><title>__init__ (joblib/parallel.py:209) (2 samples, 0.32%)</title><rect x="95" y="260" width="4" height="15" fill="rgb(217,216,53)"/><text x="98.00" y="270.50"></text></g><g><title>__call__ (joblib/parallel.py:255) (1 samples, 0.16%)</title><rect x="99" y="244" width="2" height="15" fill="rgb(252,207,26)"/><text x="102.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:255) (1 samples, 0.16%)</title><rect x="101" y="260" width="2" height="15" fill="rgb(208,94,11)"/><text x="104.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:520) (1 samples, 0.16%)</title><rect x="106" y="292" width="2" height="15" fill="rgb(239,36,54)"/><text x="109.00" y="302.50"></text></g><g><title>array_dealloc (arrayobject.c:538) (1 samples, 0.16%)</title><rect x="106" y="308" width="2" height="15" fill="rgb(226,13,22)"/><text x="109.00" y="318.50"></text></g><g><title>0x7f7941b39991 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="106" y="324" width="2" height="15" fill="rgb(253,161,18)"/><text x="109.00" y="334.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:938) (1 samples, 0.16%)</title><rect x="110" y="308" width="2" height="15" fill="rgb(211,24,40)"/><text x="113.00" y="318.50"></text></g><g><title>isclass (inspect.py:78) (1 samples, 0.16%)</title><rect x="110" y="324" width="2" height="15" fill="rgb(224,160,16)"/><text x="113.00" y="334.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (3 samples, 0.48%)</title><rect x="112" y="308" width="6" height="15" fill="rgb(215,124,37)"/><text x="115.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (3 samples, 0.48%)</title><rect x="112" y="324" width="6" height="15" fill="rgb(216,85,27)"/><text x="115.00" y="334.50"></text></g><g><title>unicode_endswith (python3.7) (1 samples, 0.16%)</title><rect x="116" y="340" width="2" height="15" fill="rgb(223,170,3)"/><text x="119.00" y="350.50"></text></g><g><title>0x7f7941c17130 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="116" y="356" width="2" height="15" fill="rgb(230,31,10)"/><text x="119.00" y="366.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:906) (6 samples, 0.97%)</title><rect x="108" y="292" width="12" height="15" fill="rgb(244,44,10)"/><text x="111.00" y="302.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:952) (1 samples, 0.16%)</title><rect x="118" y="308" width="2" height="15" fill="rgb(213,197,16)"/><text x="121.00" y="318.50"></text></g><g><title>0x7f791b57cf55 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="120" y="324" width="2" height="15" fill="rgb(227,178,39)"/><text x="123.00" y="334.50"></text></g><g><title>0x7f791b56cd33 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="120" y="340" width="2" height="15" fill="rgb(253,165,42)"/><text x="123.00" y="350.50"></text></g><g><title>PyArray_New (ctors.c:1378) (1 samples, 0.16%)</title><rect x="120" y="356" width="2" height="15" fill="rgb(222,212,14)"/><text x="123.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (1 samples, 0.16%)</title><rect x="120" y="372" width="2" height="15" fill="rgb(206,210,0)"/><text x="123.00" y="382.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (1 samples, 0.16%)</title><rect x="120" y="388" width="2" height="15" fill="rgb(219,117,33)"/><text x="123.00" y="398.50"></text></g><g><title>0x7f791b57cf81 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="122" y="324" width="2" height="15" fill="rgb(207,7,46)"/><text x="125.00" y="334.50"></text></g><g><title>0x7f791b58b2df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="124" y="356" width="1" height="15" fill="rgb(245,74,4)"/><text x="127.00" y="366.50"></text></g><g><title>0x7f791b56fd04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="124" y="372" width="1" height="15" fill="rgb(237,208,54)"/><text x="127.00" y="382.50"></text></g><g><title>0x7f791b56f666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="124" y="388" width="1" height="15" fill="rgb(218,192,41)"/><text x="127.00" y="398.50"></text></g><g><title>0x7f791b5652fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="124" y="404" width="1" height="15" fill="rgb(234,193,41)"/><text x="127.00" y="414.50"></text></g><g><title>array_getbuffer (buffer.c:782) (1 samples, 0.16%)</title><rect x="124" y="420" width="1" height="15" fill="rgb(224,134,48)"/><text x="127.00" y="430.50"></text></g><g><title>_buffer_get_info (buffer.c:645) (1 samples, 0.16%)</title><rect x="124" y="436" width="1" height="15" fill="rgb(213,143,43)"/><text x="127.00" y="446.50"></text></g><g><title>0x7f7941b3b210 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="125" y="484" width="2" height="15" fill="rgb(219,58,2)"/><text x="128.00" y="494.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c:139) (2 samples, 0.32%)</title><rect x="125" y="436" width="4" height="15" fill="rgb(233,23,38)"/><text x="128.00" y="446.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c:253) (2 samples, 0.32%)</title><rect x="125" y="452" width="4" height="15" fill="rgb(244,193,10)"/><text x="128.00" y="462.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (2 samples, 0.32%)</title><rect x="125" y="468" width="4" height="15" fill="rgb(235,177,11)"/><text x="128.00" y="478.50"></text></g><g><title>0x7f7941b5a103 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="127" y="484" width="2" height="15" fill="rgb(241,200,7)"/><text x="130.00" y="494.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c:140) (1 samples, 0.16%)</title><rect x="129" y="436" width="2" height="15" fill="rgb(212,136,31)"/><text x="132.00" y="446.50"></text></g><g><title>0x7f791b58b592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.64%)</title><rect x="125" y="356" width="8" height="15" fill="rgb(221,21,51)"/><text x="128.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c:1996) (4 samples, 0.64%)</title><rect x="125" y="372" width="8" height="15" fill="rgb(235,200,10)"/><text x="128.00" y="382.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (4 samples, 0.64%)</title><rect x="125" y="388" width="8" height="15" fill="rgb(225,119,5)"/><text x="128.00" y="398.50"></text></g><g><title>PyArray_Zeros (ctors.c:3071) (4 samples, 0.64%)</title><rect x="125" y="404" width="8" height="15" fill="rgb(228,199,25)"/><text x="128.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1085) (4 samples, 0.64%)</title><rect x="125" y="420" width="8" height="15" fill="rgb(232,76,30)"/><text x="128.00" y="430.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c:142) (1 samples, 0.16%)</title><rect x="131" y="436" width="2" height="15" fill="rgb(250,227,37)"/><text x="134.00" y="446.50"></text></g><g><title>0x7f791b58b6aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="133" y="356" width="4" height="15" fill="rgb(252,49,32)"/><text x="136.00" y="366.50"></text></g><g><title>0x7f791b58b6ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="137" y="356" width="2" height="15" fill="rgb(212,193,40)"/><text x="140.00" y="366.50"></text></g><g><title>0x7f791b58b6b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.64%)</title><rect x="139" y="356" width="7" height="15" fill="rgb(236,53,34)"/><text x="142.00" y="366.50"></text></g><g><title>0x7f791b58b6b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="146" y="356" width="4" height="15" fill="rgb(212,43,38)"/><text x="149.00" y="366.50"></text></g><g><title>0x7f791b58b6fc (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="150" y="356" width="2" height="15" fill="rgb(215,159,48)"/><text x="153.00" y="366.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="150" y="372" width="2" height="15" fill="rgb(249,79,32)"/><text x="153.00" y="382.50"></text></g><g><title>0x7f791b58b7a4 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="152" y="356" width="2" height="15" fill="rgb(206,4,37)"/><text x="155.00" y="366.50"></text></g><g><title>0x7f791b58b7b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="154" y="356" width="2" height="15" fill="rgb(222,117,36)"/><text x="157.00" y="366.50"></text></g><g><title>0x7f791b58c405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (18 samples, 2.90%)</title><rect x="124" y="340" width="34" height="15" fill="rgb(225,170,6)"/><text x="127.00" y="350.50">0x..</text></g><g><title>0x7f791b58b92f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="156" y="356" width="2" height="15" fill="rgb(252,178,26)"/><text x="159.00" y="366.50"></text></g><g><title>0x7f791b560a05 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="156" y="372" width="2" height="15" fill="rgb(206,196,42)"/><text x="159.00" y="382.50"></text></g><g><title>0x7f791b5604dd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="158" y="372" width="2" height="15" fill="rgb(237,142,47)"/><text x="161.00" y="382.50"></text></g><g><title>0x7f791b57cfa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (20 samples, 3.22%)</title><rect x="124" y="324" width="38" height="15" fill="rgb(210,39,2)"/><text x="127.00" y="334.50">0x7..</text></g><g><title>0x7f791b58c540 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="158" y="340" width="4" height="15" fill="rgb(234,121,24)"/><text x="161.00" y="350.50"></text></g><g><title>0x7f791b5612f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="158" y="356" width="4" height="15" fill="rgb(239,80,5)"/><text x="161.00" y="366.50"></text></g><g><title>0x7f791b560530 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="160" y="372" width="2" height="15" fill="rgb(246,170,19)"/><text x="163.00" y="382.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py:1216) (1 samples, 0.16%)</title><rect x="160" y="388" width="2" height="15" fill="rgb(212,43,52)"/><text x="163.00" y="398.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3950) (2 samples, 0.32%)</title><rect x="162" y="372" width="3" height="15" fill="rgb(239,228,51)"/><text x="165.00" y="382.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3960) (1 samples, 0.16%)</title><rect x="165" y="372" width="2" height="15" fill="rgb(247,194,25)"/><text x="168.00" y="382.50"></text></g><g><title>0x7f791b57d05a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.64%)</title><rect x="162" y="324" width="7" height="15" fill="rgb(217,141,22)"/><text x="165.00" y="334.50"></text></g><g><title>array_take (methods.c:145) (4 samples, 0.64%)</title><rect x="162" y="340" width="7" height="15" fill="rgb(212,94,45)"/><text x="165.00" y="350.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:234) (4 samples, 0.64%)</title><rect x="162" y="356" width="7" height="15" fill="rgb(234,156,40)"/><text x="165.00" y="366.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3961) (1 samples, 0.16%)</title><rect x="167" y="372" width="2" height="15" fill="rgb(218,166,34)"/><text x="170.00" y="382.50"></text></g><g><title>0x7f791b57d2d6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="169" y="324" width="2" height="15" fill="rgb(217,88,44)"/><text x="172.00" y="334.50"></text></g><g><title>array_reshape (methods.c:186) (1 samples, 0.16%)</title><rect x="171" y="340" width="2" height="15" fill="rgb(238,118,38)"/><text x="174.00" y="350.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:45) (1 samples, 0.16%)</title><rect x="171" y="356" width="2" height="15" fill="rgb(240,7,24)"/><text x="174.00" y="366.50"></text></g><g><title>0x7f7940d5ca80 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="171" y="372" width="2" height="15" fill="rgb(228,201,33)"/><text x="174.00" y="382.50"></text></g><g><title>0x7f791b57d328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="171" y="324" width="4" height="15" fill="rgb(222,35,14)"/><text x="174.00" y="334.50"></text></g><g><title>array_reshape (methods.c:201) (1 samples, 0.16%)</title><rect x="173" y="340" width="2" height="15" fill="rgb(209,178,25)"/><text x="176.00" y="350.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (1 samples, 0.16%)</title><rect x="173" y="356" width="2" height="15" fill="rgb(223,21,18)"/><text x="176.00" y="366.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c:954) (1 samples, 0.16%)</title><rect x="173" y="372" width="2" height="15" fill="rgb(244,145,24)"/><text x="176.00" y="382.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:908) (30 samples, 4.83%)</title><rect x="120" y="292" width="57" height="15" fill="rgb(253,142,42)"/><text x="123.00" y="302.50">predic..</text></g><g><title>0x7f791b57dd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (30 samples, 4.83%)</title><rect x="120" y="308" width="57" height="15" fill="rgb(235,161,10)"/><text x="123.00" y="318.50">0x7f79..</text></g><g><title>0x7f791b57d522 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="175" y="324" width="2" height="15" fill="rgb(252,166,9)"/><text x="178.00" y="334.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:910) (1 samples, 0.16%)</title><rect x="177" y="292" width="2" height="15" fill="rgb(228,108,21)"/><text x="180.00" y="302.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:911) (1 samples, 0.16%)</title><rect x="179" y="292" width="2" height="15" fill="rgb(240,11,28)"/><text x="182.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (1 samples, 0.16%)</title><rect x="186" y="356" width="2" height="15" fill="rgb(248,112,7)"/><text x="189.00" y="366.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (1 samples, 0.16%)</title><rect x="186" y="372" width="2" height="15" fill="rgb(207,63,49)"/><text x="189.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (1 samples, 0.16%)</title><rect x="186" y="388" width="2" height="15" fill="rgb(252,30,50)"/><text x="189.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:37) (1 samples, 0.16%)</title><rect x="186" y="404" width="2" height="15" fill="rgb(241,192,4)"/><text x="189.00" y="414.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h:106) (1 samples, 0.16%)</title><rect x="186" y="420" width="2" height="15" fill="rgb(214,65,27)"/><text x="189.00" y="430.50"></text></g><g><title>maybe_get_attr (get_attr_string.h:80) (1 samples, 0.16%)</title><rect x="186" y="436" width="2" height="15" fill="rgb(242,67,24)"/><text x="189.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:478) (1 samples, 0.16%)</title><rect x="188" y="404" width="2" height="15" fill="rgb(209,220,48)"/><text x="191.00" y="414.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (1 samples, 0.16%)</title><rect x="190" y="404" width="2" height="15" fill="rgb(234,225,48)"/><text x="193.00" y="414.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (1 samples, 0.16%)</title><rect x="190" y="420" width="2" height="15" fill="rgb(205,38,50)"/><text x="193.00" y="430.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (1 samples, 0.16%)</title><rect x="190" y="436" width="2" height="15" fill="rgb(245,93,54)"/><text x="193.00" y="446.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:87) (1 samples, 0.16%)</title><rect x="190" y="452" width="2" height="15" fill="rgb(254,145,2)"/><text x="193.00" y="462.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:228) (1 samples, 0.16%)</title><rect x="190" y="468" width="2" height="15" fill="rgb(245,177,50)"/><text x="193.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:232) (1 samples, 0.16%)</title><rect x="192" y="420" width="2" height="15" fill="rgb(219,118,19)"/><text x="195.00" y="430.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:471) (1 samples, 0.16%)</title><rect x="194" y="420" width="2" height="15" fill="rgb(227,160,44)"/><text x="197.00" y="430.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1720) (1 samples, 0.16%)</title><rect x="194" y="436" width="2" height="15" fill="rgb(252,6,40)"/><text x="197.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="194" y="452" width="2" height="15" fill="rgb(254,22,10)"/><text x="197.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (3 samples, 0.48%)</title><rect x="192" y="404" width="6" height="15" fill="rgb(212,208,8)"/><text x="195.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (1 samples, 0.16%)</title><rect x="196" y="420" width="2" height="15" fill="rgb(220,33,30)"/><text x="199.00" y="430.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2039) (1 samples, 0.16%)</title><rect x="196" y="436" width="2" height="15" fill="rgb(207,185,22)"/><text x="199.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3541) (1 samples, 0.16%)</title><rect x="198" y="420" width="2" height="15" fill="rgb(216,68,24)"/><text x="201.00" y="430.50"></text></g><g><title>DOUBLE_add (loops.c.src:1741) (1 samples, 0.16%)</title><rect x="200" y="436" width="1" height="15" fill="rgb(209,210,50)"/><text x="203.00" y="446.50"></text></g><g><title>DOUBLE_add (loops.c.src:1747) (7 samples, 1.13%)</title><rect x="201" y="436" width="14" height="15" fill="rgb(236,63,15)"/><text x="204.00" y="446.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1667) (4 samples, 0.64%)</title><rect x="207" y="452" width="8" height="15" fill="rgb(220,17,35)"/><text x="210.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:235) (1 samples, 0.16%)</title><rect x="215" y="436" width="2" height="15" fill="rgb(245,22,2)"/><text x="218.00" y="446.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:239) (2 samples, 0.32%)</title><rect x="217" y="436" width="3" height="15" fill="rgb(214,92,7)"/><text x="220.00" y="446.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (1 samples, 0.16%)</title><rect x="220" y="436" width="2" height="15" fill="rgb(220,206,26)"/><text x="223.00" y="446.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:912) (23 samples, 3.70%)</title><rect x="181" y="292" width="43" height="15" fill="rgb(210,126,14)"/><text x="184.00" y="302.50">pred..</text></g><g><title>array_sum (methods.c:2215) (20 samples, 3.22%)</title><rect x="186" y="308" width="38" height="15" fill="rgb(214,103,54)"/><text x="189.00" y="318.50">arr..</text></g><g><title>forward_ndarray_method (methods.c:108) (20 samples, 3.22%)</title><rect x="186" y="324" width="38" height="15" fill="rgb(234,146,22)"/><text x="189.00" y="334.50">for..</text></g><g><title>_sum (numpy/core/_methods.py:38) (20 samples, 3.22%)</title><rect x="186" y="340" width="38" height="15" fill="rgb(210,36,1)"/><text x="189.00" y="350.50">_su..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (19 samples, 3.06%)</title><rect x="188" y="356" width="36" height="15" fill="rgb(228,32,33)"/><text x="191.00" y="366.50">ufu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (19 samples, 3.06%)</title><rect x="188" y="372" width="36" height="15" fill="rgb(215,174,27)"/><text x="191.00" y="382.50">PyU..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (19 samples, 3.06%)</title><rect x="188" y="388" width="36" height="15" fill="rgb(213,132,6)"/><text x="191.00" y="398.50">PyU..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (14 samples, 2.25%)</title><rect x="198" y="404" width="26" height="15" fill="rgb(245,18,52)"/><text x="201.00" y="414.50">P..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (13 samples, 2.09%)</title><rect x="200" y="420" width="24" height="15" fill="rgb(219,172,36)"/><text x="203.00" y="430.50">r..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:268) (1 samples, 0.16%)</title><rect x="222" y="436" width="2" height="15" fill="rgb(215,74,4)"/><text x="225.00" y="446.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1875) (1 samples, 0.16%)</title><rect x="226" y="372" width="2" height="15" fill="rgb(223,200,7)"/><text x="229.00" y="382.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.32%)</title><rect x="226" y="324" width="4" height="15" fill="rgb(251,49,46)"/><text x="229.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (2 samples, 0.32%)</title><rect x="226" y="340" width="4" height="15" fill="rgb(214,189,22)"/><text x="229.00" y="350.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c:363) (2 samples, 0.32%)</title><rect x="226" y="356" width="4" height="15" fill="rgb(218,132,26)"/><text x="229.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1893) (1 samples, 0.16%)</title><rect x="228" y="372" width="2" height="15" fill="rgb(227,0,16)"/><text x="231.00" y="382.50"></text></g><g><title>PyArray_MinScalarType_internal (convert_datatype.c:1722) (1 samples, 0.16%)</title><rect x="228" y="388" width="2" height="15" fill="rgb(218,166,6)"/><text x="231.00" y="398.50"></text></g><g><title>DOUBLE_copyswap (arraytypes.c.src:1924) (1 samples, 0.16%)</title><rect x="228" y="404" width="2" height="15" fill="rgb(229,28,7)"/><text x="231.00" y="414.50"></text></g><g><title>_basic_copy (arraytypes.c.src:1890) (1 samples, 0.16%)</title><rect x="228" y="420" width="2" height="15" fill="rgb(209,177,26)"/><text x="231.00" y="430.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:913) (4 samples, 0.64%)</title><rect x="224" y="292" width="8" height="15" fill="rgb(244,111,48)"/><text x="227.00" y="302.50"></text></g><g><title>array_richcompare (arrayobject.c:1445) (4 samples, 0.64%)</title><rect x="224" y="308" width="8" height="15" fill="rgb(238,2,29)"/><text x="227.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4731) (1 samples, 0.16%)</title><rect x="230" y="324" width="2" height="15" fill="rgb(247,215,0)"/><text x="233.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.16%)</title><rect x="230" y="340" width="2" height="15" fill="rgb(224,119,16)"/><text x="233.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.16%)</title><rect x="230" y="356" width="2" height="15" fill="rgb(206,189,31)"/><text x="233.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (1 samples, 0.16%)</title><rect x="230" y="372" width="2" height="15" fill="rgb(237,99,37)"/><text x="233.00" y="382.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (1 samples, 0.16%)</title><rect x="232" y="404" width="2" height="15" fill="rgb(233,219,9)"/><text x="235.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:226) (1 samples, 0.16%)</title><rect x="234" y="420" width="2" height="15" fill="rgb(248,51,7)"/><text x="237.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (4 samples, 0.64%)</title><rect x="232" y="356" width="7" height="15" fill="rgb(228,118,22)"/><text x="235.00" y="366.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (4 samples, 0.64%)</title><rect x="232" y="372" width="7" height="15" fill="rgb(250,221,16)"/><text x="235.00" y="382.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (4 samples, 0.64%)</title><rect x="232" y="388" width="7" height="15" fill="rgb(222,70,5)"/><text x="235.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (3 samples, 0.48%)</title><rect x="234" y="404" width="5" height="15" fill="rgb(228,124,20)"/><text x="237.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:234) (2 samples, 0.32%)</title><rect x="236" y="420" width="3" height="15" fill="rgb(235,49,37)"/><text x="239.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (4 samples, 0.64%)</title><rect x="239" y="356" width="8" height="15" fill="rgb(225,147,8)"/><text x="242.00" y="366.50"></text></g><g><title>DOUBLE_divide (loops.c.src:1755) (4 samples, 0.64%)</title><rect x="239" y="372" width="8" height="15" fill="rgb(208,6,28)"/><text x="242.00" y="382.50"></text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src:250) (4 samples, 0.64%)</title><rect x="239" y="388" width="8" height="15" fill="rgb(222,45,53)"/><text x="242.00" y="398.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:604) (4 samples, 0.64%)</title><rect x="239" y="404" width="8" height="15" fill="rgb(224,100,10)"/><text x="242.00" y="414.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (4 samples, 0.64%)</title><rect x="239" y="420" width="8" height="15" fill="rgb(205,143,50)"/><text x="242.00" y="430.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (1 samples, 0.16%)</title><rect x="247" y="372" width="2" height="15" fill="rgb(207,145,42)"/><text x="250.00" y="382.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:449) (76 samples, 12.24%)</title><rect x="106" y="276" width="145" height="15" fill="rgb(226,121,9)"/><text x="109.00" y="286.50">_accumulate_predic..</text></g><g><title>predict_proba (sklearn/tree/_classes.py:914) (10 samples, 1.61%)</title><rect x="232" y="292" width="19" height="15" fill="rgb(246,15,27)"/><text x="235.00" y="302.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 1.61%)</title><rect x="232" y="308" width="19" height="15" fill="rgb(210,41,8)"/><text x="235.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (10 samples, 1.61%)</title><rect x="232" y="324" width="19" height="15" fill="rgb(231,173,25)"/><text x="235.00" y="334.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (10 samples, 1.61%)</title><rect x="232" y="340" width="19" height="15" fill="rgb(242,204,3)"/><text x="235.00" y="350.50"></text></g><g><title>iterator_loop (ufunc_object.c:1586) (2 samples, 0.32%)</title><rect x="247" y="356" width="4" height="15" fill="rgb(228,49,7)"/><text x="250.00" y="366.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="249" y="372" width="2" height="15" fill="rgb(234,45,16)"/><text x="252.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1717) (1 samples, 0.16%)</title><rect x="253" y="324" width="2" height="15" fill="rgb(228,204,4)"/><text x="256.00" y="334.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h:721) (1 samples, 0.16%)</title><rect x="253" y="340" width="2" height="15" fill="rgb(218,81,35)"/><text x="256.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c:835) (1 samples, 0.16%)</title><rect x="253" y="356" width="2" height="15" fill="rgb(233,140,46)"/><text x="256.00" y="366.50"></text></g><g><title>solve_diophantine (mem_overlap.c:551) (1 samples, 0.16%)</title><rect x="253" y="372" width="2" height="15" fill="rgb(235,208,14)"/><text x="256.00" y="382.50"></text></g><g><title>diophantine_precompute (mem_overlap.c:266) (1 samples, 0.16%)</title><rect x="253" y="388" width="2" height="15" fill="rgb(216,171,48)"/><text x="256.00" y="398.50"></text></g><g><title>euclid (mem_overlap.c:224) (1 samples, 0.16%)</title><rect x="253" y="404" width="2" height="15" fill="rgb(248,159,42)"/><text x="256.00" y="414.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:600) (1 samples, 0.16%)</title><rect x="255" y="388" width="2" height="15" fill="rgb(244,226,20)"/><text x="258.00" y="398.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:452) (4 samples, 0.64%)</title><rect x="251" y="276" width="7" height="15" fill="rgb(215,17,53)"/><text x="254.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.48%)</title><rect x="253" y="292" width="5" height="15" fill="rgb(218,104,20)"/><text x="256.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.48%)</title><rect x="253" y="308" width="5" height="15" fill="rgb(210,169,2)"/><text x="256.00" y="318.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (2 samples, 0.32%)</title><rect x="255" y="324" width="3" height="15" fill="rgb(232,103,24)"/><text x="258.00" y="334.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (2 samples, 0.32%)</title><rect x="255" y="340" width="3" height="15" fill="rgb(224,2,15)"/><text x="258.00" y="350.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (2 samples, 0.32%)</title><rect x="255" y="356" width="3" height="15" fill="rgb(215,29,27)"/><text x="258.00" y="366.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (2 samples, 0.32%)</title><rect x="255" y="372" width="3" height="15" fill="rgb(208,16,40)"/><text x="258.00" y="382.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:603) (1 samples, 0.16%)</title><rect x="257" y="388" width="1" height="15" fill="rgb(234,101,37)"/><text x="260.00" y="398.50"></text></g><g><title>_mm_add_pd (emmintrin.h:229) (1 samples, 0.16%)</title><rect x="257" y="404" width="1" height="15" fill="rgb(248,218,37)"/><text x="260.00" y="414.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (83 samples, 13.37%)</title><rect x="103" y="260" width="157" height="15" fill="rgb(238,29,43)"/><text x="106.00" y="270.50">&lt;listcomp&gt; (joblib/p..</text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:455) (1 samples, 0.16%)</title><rect x="258" y="276" width="2" height="15" fill="rgb(210,207,31)"/><text x="261.00" y="286.50"></text></g><g><title>unregister (joblib/parallel.py:218) (1 samples, 0.16%)</title><rect x="260" y="276" width="2" height="15" fill="rgb(239,68,28)"/><text x="263.00" y="286.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (90 samples, 14.49%)</title><rect x="93" y="212" width="171" height="15" fill="rgb(222,199,39)"/><text x="96.00" y="222.50">apply_async (joblib/_p..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (90 samples, 14.49%)</title><rect x="93" y="228" width="171" height="15" fill="rgb(208,48,28)"/><text x="96.00" y="238.50">__init__ (joblib/_para..</text></g><g><title>__call__ (joblib/parallel.py:256) (86 samples, 13.85%)</title><rect x="101" y="244" width="163" height="15" fill="rgb(251,161,30)"/><text x="104.00" y="254.50">__call__ (joblib/para..</text></g><g><title>__exit__ (joblib/parallel.py:215) (2 samples, 0.32%)</title><rect x="260" y="260" width="4" height="15" fill="rgb(241,118,39)"/><text x="263.00" y="270.50"></text></g><g><title>unregister (joblib/parallel.py:219) (1 samples, 0.16%)</title><rect x="262" y="276" width="2" height="15" fill="rgb(252,125,53)"/><text x="265.00" y="286.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (91 samples, 14.65%)</title><rect x="93" y="196" width="173" height="15" fill="rgb(240,82,3)"/><text x="96.00" y="206.50">_dispatch (joblib/para..</text></g><g><title>apply_async (joblib/_parallel_backends.py:203) (1 samples, 0.16%)</title><rect x="264" y="212" width="2" height="15" fill="rgb(246,135,24)"/><text x="267.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py:333) (1 samples, 0.16%)</title><rect x="264" y="228" width="2" height="15" fill="rgb(250,160,21)"/><text x="267.00" y="238.50"></text></g><g><title>time_time (python3.7) (1 samples, 0.16%)</title><rect x="264" y="244" width="2" height="15" fill="rgb(230,150,33)"/><text x="267.00" y="254.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (94 samples, 15.14%)</title><rect x="89" y="180" width="179" height="15" fill="rgb(242,158,49)"/><text x="92.00" y="190.50">dispatch_one_batch (job..</text></g><g><title>_dispatch (joblib/parallel.py:758) (1 samples, 0.16%)</title><rect x="266" y="196" width="2" height="15" fill="rgb(244,123,40)"/><text x="269.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:1006) (133 samples, 21.42%)</title><rect x="17" y="164" width="253" height="15" fill="rgb(218,30,24)"/><text x="20.00" y="174.50">__call__ (joblib/parallel.py:1006)</text></g><g><title>dispatch_one_batch (joblib/parallel.py:835) (1 samples, 0.16%)</title><rect x="268" y="180" width="2" height="15" fill="rgb(239,36,29)"/><text x="271.00" y="190.50"></text></g><g><title>PyThread_release_lock (python3.7) (1 samples, 0.16%)</title><rect x="268" y="196" width="2" height="15" fill="rgb(214,121,20)"/><text x="271.00" y="206.50"></text></g><g><title>sem_post@@GLIBC_2.2.5 (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="268" y="212" width="2" height="15" fill="rgb(209,187,42)"/><text x="271.00" y="222.50"></text></g><g><title>retrieve (joblib/parallel.py:895) (1 samples, 0.16%)</title><rect x="270" y="180" width="2" height="15" fill="rgb(221,67,30)"/><text x="273.00" y="190.50"></text></g><g><title>retrieve (joblib/parallel.py:896) (1 samples, 0.16%)</title><rect x="272" y="180" width="2" height="15" fill="rgb(240,71,49)"/><text x="275.00" y="190.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:18) (139 samples, 22.38%)</title><rect x="11" y="100" width="265" height="15" fill="rgb(242,164,8)"/><text x="14.00" y="110.50">profile (bench_RandomForestClassifi..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (139 samples, 22.38%)</title><rect x="11" y="116" width="265" height="15" fill="rgb(219,90,41)"/><text x="14.00" y="126.50">time_predict (mlprodict/asv_benchma..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (139 samples, 22.38%)</title><rect x="11" y="132" width="265" height="15" fill="rgb(216,92,41)"/><text x="14.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/c..</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:669) (137 samples, 22.06%)</title><rect x="15" y="148" width="261" height="15" fill="rgb(247,99,45)"/><text x="18.00" y="158.50">predict_proba (sklearn/ensemble/_f..</text></g><g><title>__call__ (joblib/parallel.py:1016) (3 samples, 0.48%)</title><rect x="270" y="164" width="6" height="15" fill="rgb(254,156,7)"/><text x="273.00" y="174.50"></text></g><g><title>retrieve (joblib/parallel.py:907) (1 samples, 0.16%)</title><rect x="274" y="180" width="2" height="15" fill="rgb(234,201,52)"/><text x="277.00" y="190.50"></text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:659) (1 samples, 0.16%)</title><rect x="277" y="148" width="2" height="15" fill="rgb(227,173,28)"/><text x="280.00" y="158.50"></text></g><g><title>_partition_estimators (sklearn/ensemble/_base.py:181) (1 samples, 0.16%)</title><rect x="277" y="164" width="2" height="15" fill="rgb(228,29,31)"/><text x="280.00" y="174.50"></text></g><g><title>0x7f791b58c405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="279" y="340" width="2" height="15" fill="rgb(210,128,27)"/><text x="282.00" y="350.50"></text></g><g><title>0x7f791b58b6b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="279" y="356" width="2" height="15" fill="rgb(233,220,54)"/><text x="282.00" y="366.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:908) (2 samples, 0.32%)</title><rect x="279" y="292" width="4" height="15" fill="rgb(244,88,30)"/><text x="282.00" y="302.50"></text></g><g><title>0x7f791b57dd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="279" y="308" width="4" height="15" fill="rgb(223,113,22)"/><text x="282.00" y="318.50"></text></g><g><title>0x7f791b57cfa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="279" y="324" width="4" height="15" fill="rgb(212,4,24)"/><text x="282.00" y="334.50"></text></g><g><title>0x7f791b58c540 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="281" y="340" width="2" height="15" fill="rgb(210,25,47)"/><text x="284.00" y="350.50"></text></g><g><title>0x7f791b5612f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="281" y="356" width="2" height="15" fill="rgb(221,28,23)"/><text x="284.00" y="366.50"></text></g><g><title>0x7f791b560530 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="281" y="372" width="2" height="15" fill="rgb(235,96,35)"/><text x="284.00" y="382.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py:1216) (1 samples, 0.16%)</title><rect x="281" y="388" width="2" height="15" fill="rgb(205,124,41)"/><text x="284.00" y="398.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:911) (1 samples, 0.16%)</title><rect x="283" y="292" width="2" height="15" fill="rgb(217,107,22)"/><text x="286.00" y="302.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.16%)</title><rect x="283" y="308" width="2" height="15" fill="rgb(208,106,53)"/><text x="286.00" y="318.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.16%)</title><rect x="283" y="324" width="2" height="15" fill="rgb(213,164,52)"/><text x="286.00" y="334.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (1 samples, 0.16%)</title><rect x="283" y="340" width="2" height="15" fill="rgb(245,103,1)"/><text x="286.00" y="350.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (1 samples, 0.16%)</title><rect x="285" y="420" width="2" height="15" fill="rgb(243,90,15)"/><text x="288.00" y="430.50"></text></g><g><title>DOUBLE_add (loops.c.src:1747) (1 samples, 0.16%)</title><rect x="285" y="436" width="2" height="15" fill="rgb(235,63,22)"/><text x="288.00" y="446.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1667) (1 samples, 0.16%)</title><rect x="285" y="452" width="2" height="15" fill="rgb(214,24,11)"/><text x="288.00" y="462.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (5 samples, 0.81%)</title><rect x="279" y="164" width="10" height="15" fill="rgb(248,152,8)"/><text x="282.00" y="174.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (5 samples, 0.81%)</title><rect x="279" y="180" width="10" height="15" fill="rgb(224,163,25)"/><text x="282.00" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (5 samples, 0.81%)</title><rect x="279" y="196" width="10" height="15" fill="rgb(227,58,9)"/><text x="282.00" y="206.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (5 samples, 0.81%)</title><rect x="279" y="212" width="10" height="15" fill="rgb(232,187,46)"/><text x="282.00" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (5 samples, 0.81%)</title><rect x="279" y="228" width="10" height="15" fill="rgb(224,39,33)"/><text x="282.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (5 samples, 0.81%)</title><rect x="279" y="244" width="10" height="15" fill="rgb(254,88,51)"/><text x="282.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (5 samples, 0.81%)</title><rect x="279" y="260" width="10" height="15" fill="rgb(228,206,25)"/><text x="282.00" y="270.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:449) (5 samples, 0.81%)</title><rect x="279" y="276" width="10" height="15" fill="rgb(253,108,39)"/><text x="282.00" y="286.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:912) (2 samples, 0.32%)</title><rect x="285" y="292" width="4" height="15" fill="rgb(231,213,15)"/><text x="288.00" y="302.50"></text></g><g><title>array_sum (methods.c:2215) (2 samples, 0.32%)</title><rect x="285" y="308" width="4" height="15" fill="rgb(234,226,30)"/><text x="288.00" y="318.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (2 samples, 0.32%)</title><rect x="285" y="324" width="4" height="15" fill="rgb(219,191,17)"/><text x="288.00" y="334.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (2 samples, 0.32%)</title><rect x="285" y="340" width="4" height="15" fill="rgb(217,154,32)"/><text x="288.00" y="350.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (2 samples, 0.32%)</title><rect x="285" y="356" width="4" height="15" fill="rgb(232,138,51)"/><text x="288.00" y="366.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (2 samples, 0.32%)</title><rect x="285" y="372" width="4" height="15" fill="rgb(239,115,52)"/><text x="288.00" y="382.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (2 samples, 0.32%)</title><rect x="285" y="388" width="4" height="15" fill="rgb(216,33,42)"/><text x="288.00" y="398.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (2 samples, 0.32%)</title><rect x="285" y="404" width="4" height="15" fill="rgb(229,109,10)"/><text x="288.00" y="414.50"></text></g><g><title>reduce_loop (ufunc_object.c:3574) (1 samples, 0.16%)</title><rect x="287" y="420" width="2" height="15" fill="rgb(211,140,23)"/><text x="290.00" y="430.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:788) (2 samples, 0.32%)</title><rect x="291" y="180" width="4" height="15" fill="rgb(217,71,6)"/><text x="294.00" y="190.50"></text></g><g><title>PyThread_acquire_lock_timed (python3.7) (1 samples, 0.16%)</title><rect x="293" y="196" width="2" height="15" fill="rgb(238,43,54)"/><text x="296.00" y="206.50"></text></g><g><title>get (queue.py:164) (2 samples, 0.32%)</title><rect x="295" y="196" width="3" height="15" fill="rgb(236,50,27)"/><text x="298.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:796) (3 samples, 0.48%)</title><rect x="295" y="180" width="5" height="15" fill="rgb(223,87,5)"/><text x="298.00" y="190.50"></text></g><g><title>get (queue.py:182) (1 samples, 0.16%)</title><rect x="298" y="196" width="2" height="15" fill="rgb(236,54,20)"/><text x="301.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:797) (2 samples, 0.32%)</title><rect x="300" y="180" width="4" height="15" fill="rgb(243,109,37)"/><text x="303.00" y="190.50"></text></g><g><title>update_wrapper (functools.py:54) (1 samples, 0.16%)</title><rect x="306" y="228" width="2" height="15" fill="rgb(239,127,21)"/><text x="309.00" y="238.50"></text></g><g><title>update_wrapper (functools.py:58) (1 samples, 0.16%)</title><rect x="308" y="228" width="2" height="15" fill="rgb(234,135,12)"/><text x="311.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:807) (4 samples, 0.64%)</title><rect x="304" y="180" width="8" height="15" fill="rgb(229,212,24)"/><text x="307.00" y="190.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py:669) (4 samples, 0.64%)</title><rect x="304" y="196" width="8" height="15" fill="rgb(245,111,13)"/><text x="307.00" y="206.50"></text></g><g><title>delayed (joblib/parallel.py:308) (4 samples, 0.64%)</title><rect x="304" y="212" width="8" height="15" fill="rgb(218,216,5)"/><text x="307.00" y="222.50"></text></g><g><title>update_wrapper (functools.py:60) (1 samples, 0.16%)</title><rect x="310" y="228" width="2" height="15" fill="rgb(249,122,0)"/><text x="313.00" y="238.50"></text></g><g><title>0x7f7941c17130 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="317" y="212" width="2" height="15" fill="rgb(234,13,33)"/><text x="320.00" y="222.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (3 samples, 0.48%)</title><rect x="319" y="212" width="6" height="15" fill="rgb(244,36,8)"/><text x="322.00" y="222.50"></text></g><g><title>0x7f7941b4fe7a (libc-2.29.so) (2 samples, 0.32%)</title><rect x="321" y="228" width="4" height="15" fill="rgb(247,9,32)"/><text x="324.00" y="238.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:208) (8 samples, 1.29%)</title><rect x="312" y="196" width="15" height="15" fill="rgb(219,100,46)"/><text x="315.00" y="206.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;:419) (1 samples, 0.16%)</title><rect x="325" y="212" width="2" height="15" fill="rgb(212,165,17)"/><text x="328.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py:116) (1 samples, 0.16%)</title><rect x="327" y="212" width="2" height="15" fill="rgb(249,26,10)"/><text x="330.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py:117) (1 samples, 0.16%)</title><rect x="329" y="212" width="2" height="15" fill="rgb(220,73,34)"/><text x="332.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py:120) (1 samples, 0.16%)</title><rect x="331" y="212" width="2" height="15" fill="rgb(234,72,24)"/><text x="334.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:824) (12 samples, 1.93%)</title><rect x="312" y="180" width="22" height="15" fill="rgb(252,170,6)"/><text x="315.00" y="190.50">d..</text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:212) (4 samples, 0.64%)</title><rect x="327" y="196" width="7" height="15" fill="rgb(214,15,18)"/><text x="330.00" y="206.50"></text></g><g><title>get_active_backend (joblib/parallel.py:83) (1 samples, 0.16%)</title><rect x="333" y="212" width="1" height="15" fill="rgb(226,169,0)"/><text x="336.00" y="222.50"></text></g><g><title>__init__ (joblib/parallel.py:241) (1 samples, 0.16%)</title><rect x="334" y="196" width="2" height="15" fill="rgb(250,4,45)"/><text x="337.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:825) (2 samples, 0.32%)</title><rect x="334" y="180" width="4" height="15" fill="rgb(243,60,40)"/><text x="337.00" y="190.50"></text></g><g><title>__init__ (joblib/parallel.py:243) (1 samples, 0.16%)</title><rect x="336" y="196" width="2" height="15" fill="rgb(237,103,39)"/><text x="339.00" y="206.50"></text></g><g><title>put (queue.py:149) (1 samples, 0.16%)</title><rect x="342" y="196" width="2" height="15" fill="rgb(254,44,47)"/><text x="345.00" y="206.50"></text></g><g><title>_put (queue.py:213) (1 samples, 0.16%)</title><rect x="342" y="212" width="2" height="15" fill="rgb(209,17,7)"/><text x="345.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:826) (5 samples, 0.81%)</title><rect x="338" y="180" width="10" height="15" fill="rgb(238,46,19)"/><text x="341.00" y="190.50"></text></g><g><title>put (queue.py:151) (2 samples, 0.32%)</title><rect x="344" y="196" width="4" height="15" fill="rgb(234,29,34)"/><text x="347.00" y="206.50"></text></g><g><title>notify (threading.py:348) (1 samples, 0.16%)</title><rect x="346" y="212" width="2" height="15" fill="rgb(210,3,17)"/><text x="349.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:829) (1 samples, 0.16%)</title><rect x="348" y="180" width="2" height="15" fill="rgb(251,30,10)"/><text x="351.00" y="190.50"></text></g><g><title>get (queue.py:181) (1 samples, 0.16%)</title><rect x="348" y="196" width="2" height="15" fill="rgb(226,142,50)"/><text x="351.00" y="206.50"></text></g><g><title>notify (threading.py:345) (1 samples, 0.16%)</title><rect x="348" y="212" width="2" height="15" fill="rgb(213,155,18)"/><text x="351.00" y="222.50"></text></g><g><title>_is_owned (threading.py:258) (1 samples, 0.16%)</title><rect x="348" y="228" width="2" height="15" fill="rgb(235,19,24)"/><text x="351.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:830) (1 samples, 0.16%)</title><rect x="350" y="180" width="2" height="15" fill="rgb(226,23,28)"/><text x="353.00" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:746) (1 samples, 0.16%)</title><rect x="353" y="196" width="2" height="15" fill="rgb(244,191,27)"/><text x="356.00" y="206.50"></text></g><g><title>__len__ (joblib/parallel.py:259) (1 samples, 0.16%)</title><rect x="353" y="212" width="2" height="15" fill="rgb(224,133,16)"/><text x="356.00" y="222.50"></text></g><g><title>_dispatch (joblib/parallel.py:749) (1 samples, 0.16%)</title><rect x="355" y="196" width="2" height="15" fill="rgb(214,171,39)"/><text x="358.00" y="206.50"></text></g><g><title>0x55ee9bbd89c0 (?) (1 samples, 0.16%)</title><rect x="355" y="212" width="2" height="15" fill="rgb(218,125,42)"/><text x="358.00" y="222.50"></text></g><g><title>clock_gettime (libc-2.29.so) (1 samples, 0.16%)</title><rect x="355" y="228" width="2" height="15" fill="rgb(215,206,3)"/><text x="358.00" y="238.50"></text></g><g><title>0x7ffec0548a5e ([vdso]) (1 samples, 0.16%)</title><rect x="355" y="244" width="2" height="15" fill="rgb(226,212,25)"/><text x="358.00" y="254.50"></text></g><g><title>_dispatch (joblib/parallel.py:750) (1 samples, 0.16%)</title><rect x="357" y="196" width="2" height="15" fill="rgb(225,8,44)"/><text x="360.00" y="206.50"></text></g><g><title>__init__ (joblib/parallel.py:327) (1 samples, 0.16%)</title><rect x="357" y="212" width="2" height="15" fill="rgb(246,218,37)"/><text x="360.00" y="222.50"></text></g><g><title>__init__ (joblib/parallel.py:181) (1 samples, 0.16%)</title><rect x="359" y="260" width="2" height="15" fill="rgb(232,21,10)"/><text x="362.00" y="270.50"></text></g><g><title>__call__ (joblib/parallel.py:254) (2 samples, 0.32%)</title><rect x="359" y="244" width="4" height="15" fill="rgb(224,209,49)"/><text x="362.00" y="254.50"></text></g><g><title>__init__ (joblib/parallel.py:209) (1 samples, 0.16%)</title><rect x="361" y="260" width="2" height="15" fill="rgb(236,51,27)"/><text x="364.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.16%)</title><rect x="371" y="292" width="1" height="15" fill="rgb(218,82,45)"/><text x="374.00" y="302.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.16%)</title><rect x="371" y="308" width="1" height="15" fill="rgb(242,153,30)"/><text x="374.00" y="318.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (1 samples, 0.16%)</title><rect x="371" y="324" width="1" height="15" fill="rgb(240,154,9)"/><text x="374.00" y="334.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:938) (1 samples, 0.16%)</title><rect x="374" y="308" width="2" height="15" fill="rgb(232,88,1)"/><text x="377.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:947) (1 samples, 0.16%)</title><rect x="376" y="324" width="2" height="15" fill="rgb(245,197,11)"/><text x="379.00" y="334.50"></text></g><g><title>unicode_endswith (python3.7) (1 samples, 0.16%)</title><rect x="384" y="340" width="2" height="15" fill="rgb(246,22,13)"/><text x="387.00" y="350.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (8 samples, 1.29%)</title><rect x="378" y="324" width="15" height="15" fill="rgb(237,33,46)"/><text x="381.00" y="334.50"></text></g><g><title>unicode_startswith (python3.7) (4 samples, 0.64%)</title><rect x="386" y="340" width="7" height="15" fill="rgb(239,105,25)"/><text x="389.00" y="350.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:906) (12 samples, 1.93%)</title><rect x="372" y="292" width="23" height="15" fill="rgb(242,118,46)"/><text x="375.00" y="302.50">p..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (10 samples, 1.61%)</title><rect x="376" y="308" width="19" height="15" fill="rgb(211,98,8)"/><text x="379.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:949) (1 samples, 0.16%)</title><rect x="393" y="324" width="2" height="15" fill="rgb(214,99,12)"/><text x="396.00" y="334.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:907) (3 samples, 0.48%)</title><rect x="395" y="292" width="6" height="15" fill="rgb(249,194,33)"/><text x="398.00" y="302.50"></text></g><g><title>0x7f791b57cf55 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="405" y="324" width="2" height="15" fill="rgb(239,147,38)"/><text x="408.00" y="334.50"></text></g><g><title>0x7f791b56cd15 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="405" y="340" width="2" height="15" fill="rgb(221,145,36)"/><text x="408.00" y="350.50"></text></g><g><title>0x7f791b58af32 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="407" y="356" width="2" height="15" fill="rgb(226,36,11)"/><text x="410.00" y="366.50"></text></g><g><title>0x7f791b58b1dd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="409" y="356" width="1" height="15" fill="rgb(209,189,13)"/><text x="412.00" y="366.50"></text></g><g><title>array_descr_get (getset.c:208) (1 samples, 0.16%)</title><rect x="409" y="372" width="1" height="15" fill="rgb(250,56,54)"/><text x="412.00" y="382.50"></text></g><g><title>0x7f791b58b2ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="410" y="356" width="2" height="15" fill="rgb(226,68,9)"/><text x="413.00" y="366.50"></text></g><g><title>0x7f791b56f604 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="412" y="388" width="2" height="15" fill="rgb(205,42,30)"/><text x="415.00" y="398.50"></text></g><g><title>0x7f791b58b2df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="412" y="356" width="4" height="15" fill="rgb(223,203,42)"/><text x="415.00" y="366.50"></text></g><g><title>0x7f791b56fd04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="412" y="372" width="4" height="15" fill="rgb(236,225,44)"/><text x="415.00" y="382.50"></text></g><g><title>0x7f791b56f666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="414" y="388" width="2" height="15" fill="rgb(252,68,1)"/><text x="417.00" y="398.50"></text></g><g><title>0x7f791b56510c (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="414" y="404" width="2" height="15" fill="rgb(240,78,7)"/><text x="417.00" y="414.50"></text></g><g><title>0x7f791b58b511 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="416" y="356" width="2" height="15" fill="rgb(209,135,40)"/><text x="419.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c:1973) (1 samples, 0.16%)</title><rect x="418" y="372" width="2" height="15" fill="rgb(252,214,49)"/><text x="421.00" y="382.50"></text></g><g><title>0x7f791b58b592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="418" y="356" width="4" height="15" fill="rgb(216,125,31)"/><text x="421.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c:1996) (1 samples, 0.16%)</title><rect x="420" y="372" width="2" height="15" fill="rgb(240,38,53)"/><text x="423.00" y="382.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (1 samples, 0.16%)</title><rect x="420" y="388" width="2" height="15" fill="rgb(232,134,11)"/><text x="423.00" y="398.50"></text></g><g><title>PyArray_Zeros (ctors.c:3071) (1 samples, 0.16%)</title><rect x="420" y="404" width="2" height="15" fill="rgb(216,189,33)"/><text x="423.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1085) (1 samples, 0.16%)</title><rect x="420" y="420" width="2" height="15" fill="rgb(219,71,16)"/><text x="423.00" y="430.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c:139) (1 samples, 0.16%)</title><rect x="420" y="436" width="2" height="15" fill="rgb(233,51,51)"/><text x="423.00" y="446.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c:253) (1 samples, 0.16%)</title><rect x="420" y="452" width="2" height="15" fill="rgb(208,158,3)"/><text x="423.00" y="462.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="420" y="468" width="2" height="15" fill="rgb(231,20,36)"/><text x="423.00" y="478.50"></text></g><g><title>0x7f7941b5a103 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="420" y="484" width="2" height="15" fill="rgb(223,139,10)"/><text x="423.00" y="494.50"></text></g><g><title>0x7f791b58b687 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="422" y="356" width="2" height="15" fill="rgb(208,107,51)"/><text x="425.00" y="366.50"></text></g><g><title>0x7f791b58b693 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="424" y="356" width="4" height="15" fill="rgb(239,1,26)"/><text x="427.00" y="366.50"></text></g><g><title>0x7f791b58b698 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="428" y="356" width="3" height="15" fill="rgb(234,23,20)"/><text x="431.00" y="366.50"></text></g><g><title>0x7f791b58b6aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="431" y="356" width="4" height="15" fill="rgb(233,17,11)"/><text x="434.00" y="366.50"></text></g><g><title>0x7f791b58b6ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.64%)</title><rect x="435" y="356" width="8" height="15" fill="rgb(232,119,13)"/><text x="438.00" y="366.50"></text></g><g><title>0x7f791b58b6b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="443" y="356" width="4" height="15" fill="rgb(245,108,15)"/><text x="446.00" y="366.50"></text></g><g><title>0x7f791b58b6b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="447" y="356" width="1" height="15" fill="rgb(239,175,7)"/><text x="450.00" y="366.50"></text></g><g><title>0x7f791b58b6cf (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="448" y="356" width="4" height="15" fill="rgb(252,146,43)"/><text x="451.00" y="366.50"></text></g><g><title>0x7f791b58b7b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.48%)</title><rect x="452" y="356" width="6" height="15" fill="rgb(208,148,13)"/><text x="455.00" y="366.50"></text></g><g><title>0x7f791b58c405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (28 samples, 4.51%)</title><rect x="407" y="340" width="53" height="15" fill="rgb(241,165,17)"/><text x="410.00" y="350.50">0x7f7..</text></g><g><title>0x7f791b58bc27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="458" y="356" width="2" height="15" fill="rgb(245,101,21)"/><text x="461.00" y="366.50"></text></g><g><title>0x7f791b563529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="458" y="372" width="2" height="15" fill="rgb(209,194,16)"/><text x="461.00" y="382.50"></text></g><g><title>array_getbuffer (buffer.c:857) (1 samples, 0.16%)</title><rect x="458" y="388" width="2" height="15" fill="rgb(238,194,29)"/><text x="461.00" y="398.50"></text></g><g><title>0x7f791b57cfa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (29 samples, 4.67%)</title><rect x="407" y="324" width="55" height="15" fill="rgb(221,165,10)"/><text x="410.00" y="334.50">0x7f7..</text></g><g><title>0x7f791b58c540 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="460" y="340" width="2" height="15" fill="rgb(246,139,6)"/><text x="463.00" y="350.50"></text></g><g><title>0x7f791b5612f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="460" y="356" width="2" height="15" fill="rgb(222,38,53)"/><text x="463.00" y="366.50"></text></g><g><title>0x7f791b560570 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="460" y="372" width="2" height="15" fill="rgb(213,13,35)"/><text x="463.00" y="382.50"></text></g><g><title>array_take (methods.c:138) (1 samples, 0.16%)</title><rect x="462" y="340" width="2" height="15" fill="rgb(252,211,40)"/><text x="465.00" y="350.50"></text></g><g><title>PyArray_AxisConverter (conversion_utils.c:229) (1 samples, 0.16%)</title><rect x="462" y="356" width="2" height="15" fill="rgb(205,117,44)"/><text x="465.00" y="366.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (1 samples, 0.16%)</title><rect x="462" y="372" width="2" height="15" fill="rgb(231,151,43)"/><text x="465.00" y="382.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (1 samples, 0.16%)</title><rect x="462" y="388" width="2" height="15" fill="rgb(231,97,0)"/><text x="465.00" y="398.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3956) (2 samples, 0.32%)</title><rect x="464" y="372" width="3" height="15" fill="rgb(214,185,50)"/><text x="467.00" y="382.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:234) (4 samples, 0.64%)</title><rect x="464" y="356" width="7" height="15" fill="rgb(234,70,22)"/><text x="467.00" y="366.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3960) (2 samples, 0.32%)</title><rect x="467" y="372" width="4" height="15" fill="rgb(208,146,44)"/><text x="470.00" y="382.50"></text></g><g><title>0x7f791b57d05a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.97%)</title><rect x="462" y="324" width="11" height="15" fill="rgb(247,138,17)"/><text x="465.00" y="334.50"></text></g><g><title>array_take (methods.c:145) (5 samples, 0.81%)</title><rect x="464" y="340" width="9" height="15" fill="rgb(209,23,40)"/><text x="467.00" y="350.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:86) (1 samples, 0.16%)</title><rect x="471" y="356" width="2" height="15" fill="rgb(235,58,12)"/><text x="474.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.16%)</title><rect x="471" y="372" width="2" height="15" fill="rgb(225,158,14)"/><text x="474.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (1 samples, 0.16%)</title><rect x="471" y="388" width="2" height="15" fill="rgb(238,180,4)"/><text x="474.00" y="398.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (1 samples, 0.16%)</title><rect x="471" y="404" width="2" height="15" fill="rgb(252,145,54)"/><text x="474.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (1 samples, 0.16%)</title><rect x="471" y="420" width="2" height="15" fill="rgb(210,80,27)"/><text x="474.00" y="430.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (1 samples, 0.16%)</title><rect x="471" y="436" width="2" height="15" fill="rgb(243,125,50)"/><text x="474.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="471" y="452" width="2" height="15" fill="rgb(213,115,46)"/><text x="474.00" y="462.50"></text></g><g><title>0x7f791b57d14f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.48%)</title><rect x="473" y="324" width="6" height="15" fill="rgb(232,61,19)"/><text x="476.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (3 samples, 0.48%)</title><rect x="473" y="340" width="6" height="15" fill="rgb(242,17,2)"/><text x="476.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (2 samples, 0.32%)</title><rect x="475" y="356" width="4" height="15" fill="rgb(216,73,19)"/><text x="478.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (2 samples, 0.32%)</title><rect x="475" y="372" width="4" height="15" fill="rgb(209,183,52)"/><text x="478.00" y="382.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:908) (42 samples, 6.76%)</title><rect x="401" y="292" width="80" height="15" fill="rgb(222,135,7)"/><text x="404.00" y="302.50">predict_p..</text></g><g><title>0x7f791b57dd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (40 samples, 6.44%)</title><rect x="405" y="308" width="76" height="15" fill="rgb(254,77,26)"/><text x="408.00" y="318.50">0x7f791b..</text></g><g><title>0x7f791b57d1bf (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="479" y="324" width="2" height="15" fill="rgb(234,174,30)"/><text x="482.00" y="334.50"></text></g><g><title>array_shape_get (getset.c:42) (1 samples, 0.16%)</title><rect x="479" y="340" width="2" height="15" fill="rgb(233,140,36)"/><text x="482.00" y="350.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:911) (1 samples, 0.16%)</title><rect x="481" y="292" width="2" height="15" fill="rgb(245,169,2)"/><text x="484.00" y="302.50"></text></g><g><title>array_subscript (mapping.c:1584) (1 samples, 0.16%)</title><rect x="481" y="308" width="2" height="15" fill="rgb(217,55,45)"/><text x="484.00" y="318.50"></text></g><g><title>get_view_from_index (mapping.c:955) (1 samples, 0.16%)</title><rect x="481" y="324" width="2" height="15" fill="rgb(238,19,30)"/><text x="484.00" y="334.50"></text></g><g><title>long_index (scalartypes.c.src:3032) (1 samples, 0.16%)</title><rect x="481" y="340" width="2" height="15" fill="rgb(246,18,36)"/><text x="484.00" y="350.50"></text></g><g><title>0x7f7940d5c780 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="485" y="340" width="1" height="15" fill="rgb(218,19,19)"/><text x="488.00" y="350.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (1 samples, 0.16%)</title><rect x="486" y="356" width="2" height="15" fill="rgb(211,183,2)"/><text x="489.00" y="366.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (1 samples, 0.16%)</title><rect x="486" y="372" width="2" height="15" fill="rgb(210,102,13)"/><text x="489.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (1 samples, 0.16%)</title><rect x="486" y="388" width="2" height="15" fill="rgb(236,88,38)"/><text x="489.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:37) (1 samples, 0.16%)</title><rect x="486" y="404" width="2" height="15" fill="rgb(243,132,4)"/><text x="489.00" y="414.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h:106) (1 samples, 0.16%)</title><rect x="486" y="420" width="2" height="15" fill="rgb(216,21,18)"/><text x="489.00" y="430.50"></text></g><g><title>maybe_get_attr (get_attr_string.h:80) (1 samples, 0.16%)</title><rect x="486" y="436" width="2" height="15" fill="rgb(237,115,10)"/><text x="489.00" y="446.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (1 samples, 0.16%)</title><rect x="488" y="388" width="2" height="15" fill="rgb(232,169,20)"/><text x="491.00" y="398.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (1 samples, 0.16%)</title><rect x="488" y="404" width="2" height="15" fill="rgb(245,159,43)"/><text x="491.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (1 samples, 0.16%)</title><rect x="488" y="420" width="2" height="15" fill="rgb(244,153,41)"/><text x="491.00" y="430.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2215) (1 samples, 0.16%)</title><rect x="488" y="436" width="2" height="15" fill="rgb(252,137,40)"/><text x="491.00" y="446.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (1 samples, 0.16%)</title><rect x="488" y="452" width="2" height="15" fill="rgb(246,192,21)"/><text x="491.00" y="462.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:965) (1 samples, 0.16%)</title><rect x="488" y="468" width="2" height="15" fill="rgb(216,52,19)"/><text x="491.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (1 samples, 0.16%)</title><rect x="490" y="468" width="2" height="15" fill="rgb(209,4,32)"/><text x="493.00" y="478.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (1 samples, 0.16%)</title><rect x="490" y="484" width="2" height="15" fill="rgb(231,104,19)"/><text x="493.00" y="494.50"></text></g><g><title>_npy_alloc_cache (alloc.c:73) (1 samples, 0.16%)</title><rect x="490" y="500" width="2" height="15" fill="rgb(251,75,27)"/><text x="493.00" y="510.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (2 samples, 0.32%)</title><rect x="490" y="404" width="4" height="15" fill="rgb(251,90,33)"/><text x="493.00" y="414.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (2 samples, 0.32%)</title><rect x="490" y="420" width="4" height="15" fill="rgb(247,151,21)"/><text x="493.00" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (2 samples, 0.32%)</title><rect x="490" y="436" width="4" height="15" fill="rgb(250,130,43)"/><text x="493.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (2 samples, 0.32%)</title><rect x="490" y="452" width="4" height="15" fill="rgb(210,159,12)"/><text x="493.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1051) (1 samples, 0.16%)</title><rect x="492" y="468" width="2" height="15" fill="rgb(219,160,42)"/><text x="495.00" y="478.50"></text></g><g><title>memcpy (libc-2.29.so) (1 samples, 0.16%)</title><rect x="492" y="484" width="2" height="15" fill="rgb(240,175,49)"/><text x="495.00" y="494.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:199) (1 samples, 0.16%)</title><rect x="494" y="436" width="2" height="15" fill="rgb(238,222,8)"/><text x="497.00" y="446.50"></text></g><g><title>PyArray_FailUnlessWriteable (arrayobject.c:700) (1 samples, 0.16%)</title><rect x="494" y="452" width="2" height="15" fill="rgb(243,157,40)"/><text x="497.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:255) (1 samples, 0.16%)</title><rect x="496" y="436" width="2" height="15" fill="rgb(217,22,12)"/><text x="499.00" y="446.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c:3799) (1 samples, 0.16%)</title><rect x="496" y="452" width="2" height="15" fill="rgb(249,24,49)"/><text x="499.00" y="462.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c:3501) (1 samples, 0.16%)</title><rect x="496" y="468" width="2" height="15" fill="rgb(227,83,54)"/><text x="499.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:80) (1 samples, 0.16%)</title><rect x="498" y="452" width="2" height="15" fill="rgb(240,10,16)"/><text x="501.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (5 samples, 0.81%)</title><rect x="494" y="404" width="10" height="15" fill="rgb(208,153,18)"/><text x="497.00" y="414.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (5 samples, 0.81%)</title><rect x="494" y="420" width="10" height="15" fill="rgb(214,225,16)"/><text x="497.00" y="430.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (3 samples, 0.48%)</title><rect x="498" y="436" width="6" height="15" fill="rgb(225,223,35)"/><text x="501.00" y="446.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:87) (2 samples, 0.32%)</title><rect x="500" y="452" width="4" height="15" fill="rgb(238,176,9)"/><text x="503.00" y="462.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:228) (2 samples, 0.32%)</title><rect x="500" y="468" width="4" height="15" fill="rgb(205,168,53)"/><text x="503.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (1 samples, 0.16%)</title><rect x="504" y="420" width="1" height="15" fill="rgb(216,108,45)"/><text x="507.00" y="430.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (1 samples, 0.16%)</title><rect x="504" y="436" width="1" height="15" fill="rgb(224,87,49)"/><text x="507.00" y="446.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c:1104) (1 samples, 0.16%)</title><rect x="504" y="452" width="1" height="15" fill="rgb(231,188,28)"/><text x="507.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:319) (1 samples, 0.16%)</title><rect x="505" y="420" width="2" height="15" fill="rgb(239,204,23)"/><text x="508.00" y="430.50"></text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c:2277) (1 samples, 0.16%)</title><rect x="505" y="436" width="2" height="15" fill="rgb(206,5,13)"/><text x="508.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (1 samples, 0.16%)</title><rect x="507" y="420" width="2" height="15" fill="rgb(247,103,26)"/><text x="510.00" y="430.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2995) (1 samples, 0.16%)</title><rect x="507" y="436" width="2" height="15" fill="rgb(234,76,26)"/><text x="510.00" y="446.50"></text></g><g><title>IsUintAligned (array_assign.c:148) (1 samples, 0.16%)</title><rect x="507" y="452" width="2" height="15" fill="rgb(215,147,9)"/><text x="510.00" y="462.50"></text></g><g><title>npy_uint_alignment (array_assign.c:151) (1 samples, 0.16%)</title><rect x="507" y="468" width="2" height="15" fill="rgb(223,23,35)"/><text x="510.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:471) (1 samples, 0.16%)</title><rect x="509" y="420" width="2" height="15" fill="rgb(230,184,30)"/><text x="512.00" y="430.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1720) (1 samples, 0.16%)</title><rect x="509" y="436" width="2" height="15" fill="rgb(215,46,9)"/><text x="512.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="509" y="452" width="2" height="15" fill="rgb(240,35,38)"/><text x="512.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (5 samples, 0.81%)</title><rect x="504" y="404" width="9" height="15" fill="rgb(254,2,5)"/><text x="507.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (1 samples, 0.16%)</title><rect x="511" y="420" width="2" height="15" fill="rgb(250,56,23)"/><text x="514.00" y="430.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2525) (1 samples, 0.16%)</title><rect x="511" y="436" width="2" height="15" fill="rgb(218,148,25)"/><text x="514.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3535) (1 samples, 0.16%)</title><rect x="513" y="420" width="2" height="15" fill="rgb(229,162,42)"/><text x="516.00" y="430.50"></text></g><g><title>reduce_loop (ufunc_object.c:3537) (1 samples, 0.16%)</title><rect x="515" y="420" width="2" height="15" fill="rgb(214,133,7)"/><text x="518.00" y="430.50"></text></g><g><title>reduce_loop (ufunc_object.c:3538) (1 samples, 0.16%)</title><rect x="517" y="420" width="2" height="15" fill="rgb(215,110,49)"/><text x="520.00" y="430.50"></text></g><g><title>reduce_loop (ufunc_object.c:3541) (1 samples, 0.16%)</title><rect x="519" y="420" width="2" height="15" fill="rgb(241,74,38)"/><text x="522.00" y="430.50"></text></g><g><title>DOUBLE_add (loops.c.src:1741) (2 samples, 0.32%)</title><rect x="521" y="436" width="3" height="15" fill="rgb(236,204,49)"/><text x="524.00" y="446.50"></text></g><g><title>DOUBLE_add (loops.c.src:1742) (1 samples, 0.16%)</title><rect x="524" y="436" width="2" height="15" fill="rgb(239,29,37)"/><text x="527.00" y="446.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1662) (1 samples, 0.16%)</title><rect x="532" y="452" width="2" height="15" fill="rgb(216,9,26)"/><text x="535.00" y="462.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1663) (1 samples, 0.16%)</title><rect x="534" y="452" width="2" height="15" fill="rgb(205,25,50)"/><text x="537.00" y="462.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1667) (5 samples, 0.81%)</title><rect x="536" y="452" width="9" height="15" fill="rgb(208,95,31)"/><text x="539.00" y="462.50"></text></g><g><title>DOUBLE_add (loops.c.src:1747) (11 samples, 1.77%)</title><rect x="526" y="436" width="21" height="15" fill="rgb(234,25,41)"/><text x="529.00" y="446.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1721) (1 samples, 0.16%)</title><rect x="545" y="452" width="2" height="15" fill="rgb(224,45,26)"/><text x="548.00" y="462.50"></text></g><g><title>DOUBLE_add (loops.c.src:1762) (1 samples, 0.16%)</title><rect x="547" y="436" width="2" height="15" fill="rgb(206,114,47)"/><text x="550.00" y="446.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:240) (1 samples, 0.16%)</title><rect x="549" y="436" width="2" height="15" fill="rgb(252,80,52)"/><text x="552.00" y="446.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (3 samples, 0.48%)</title><rect x="551" y="436" width="6" height="15" fill="rgb(242,93,41)"/><text x="554.00" y="446.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:243) (1 samples, 0.16%)</title><rect x="557" y="436" width="2" height="15" fill="rgb(236,183,41)"/><text x="560.00" y="446.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:912) (41 samples, 6.60%)</title><rect x="483" y="292" width="78" height="15" fill="rgb(216,138,0)"/><text x="486.00" y="302.50">predict_p..</text></g><g><title>array_sum (methods.c:2215) (40 samples, 6.44%)</title><rect x="485" y="308" width="76" height="15" fill="rgb(236,179,32)"/><text x="488.00" y="318.50">array_su..</text></g><g><title>forward_ndarray_method (methods.c:108) (40 samples, 6.44%)</title><rect x="485" y="324" width="76" height="15" fill="rgb(224,84,10)"/><text x="488.00" y="334.50">forward_..</text></g><g><title>_sum (numpy/core/_methods.py:38) (39 samples, 6.28%)</title><rect x="486" y="340" width="75" height="15" fill="rgb(218,74,1)"/><text x="489.00" y="350.50">_sum (nu..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (38 samples, 6.12%)</title><rect x="488" y="356" width="73" height="15" fill="rgb(216,184,42)"/><text x="491.00" y="366.50">ufunc_re..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (38 samples, 6.12%)</title><rect x="488" y="372" width="73" height="15" fill="rgb(219,12,38)"/><text x="491.00" y="382.50">PyUFunc_..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (37 samples, 5.96%)</title><rect x="490" y="388" width="71" height="15" fill="rgb(205,65,41)"/><text x="493.00" y="398.50">PyUFunc_..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (25 samples, 4.03%)</title><rect x="513" y="404" width="48" height="15" fill="rgb(248,227,30)"/><text x="516.00" y="414.50">PyUF..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (21 samples, 3.38%)</title><rect x="521" y="420" width="40" height="15" fill="rgb(232,42,52)"/><text x="524.00" y="430.50">red..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:255) (1 samples, 0.16%)</title><rect x="559" y="436" width="2" height="15" fill="rgb(225,66,9)"/><text x="562.00" y="446.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c:1881) (1 samples, 0.16%)</title><rect x="559" y="452" width="2" height="15" fill="rgb(209,194,49)"/><text x="562.00" y="462.50"></text></g><g><title>array_assign_subscript (mapping.c:1801) (1 samples, 0.16%)</title><rect x="561" y="308" width="1" height="15" fill="rgb(248,129,7)"/><text x="564.00" y="318.50"></text></g><g><title>PyArray_FailUnlessWriteable (arrayobject.c:691) (1 samples, 0.16%)</title><rect x="561" y="324" width="1" height="15" fill="rgb(240,222,43)"/><text x="564.00" y="334.50"></text></g><g><title>count_boolean_trues (item_selection.c:2049) (2 samples, 0.32%)</title><rect x="562" y="340" width="4" height="15" fill="rgb(241,209,7)"/><text x="565.00" y="350.50"></text></g><g><title>array_assign_subscript (mapping.c:1859) (3 samples, 0.48%)</title><rect x="562" y="308" width="6" height="15" fill="rgb(215,117,3)"/><text x="565.00" y="318.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c:1191) (3 samples, 0.48%)</title><rect x="562" y="324" width="6" height="15" fill="rgb(206,58,16)"/><text x="565.00" y="334.50"></text></g><g><title>count_boolean_trues (item_selection.c:2080) (1 samples, 0.16%)</title><rect x="566" y="340" width="2" height="15" fill="rgb(243,159,40)"/><text x="569.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c:525) (1 samples, 0.16%)</title><rect x="568" y="324" width="2" height="15" fill="rgb(233,53,24)"/><text x="571.00" y="334.50"></text></g><g><title>array_assign_subscript (mapping.c:2065) (2 samples, 0.32%)</title><rect x="568" y="308" width="4" height="15" fill="rgb(242,188,23)"/><text x="571.00" y="318.50"></text></g><g><title>array_dealloc (arrayobject.c:538) (1 samples, 0.16%)</title><rect x="570" y="324" width="2" height="15" fill="rgb(227,164,52)"/><text x="573.00" y="334.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.16%)</title><rect x="570" y="340" width="2" height="15" fill="rgb(226,59,11)"/><text x="573.00" y="350.50"></text></g><g><title>array_richcompare (arrayobject.c:1398) (1 samples, 0.16%)</title><rect x="572" y="308" width="2" height="15" fill="rgb(211,158,51)"/><text x="575.00" y="318.50"></text></g><g><title>binop_should_defer (binop_override.h:121) (1 samples, 0.16%)</title><rect x="572" y="324" width="2" height="15" fill="rgb(219,183,46)"/><text x="575.00" y="334.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:913) (9 samples, 1.45%)</title><rect x="561" y="292" width="17" height="15" fill="rgb(227,112,15)"/><text x="564.00" y="302.50"></text></g><g><title>array_richcompare (arrayobject.c:1445) (2 samples, 0.32%)</title><rect x="574" y="308" width="4" height="15" fill="rgb(253,216,18)"/><text x="577.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.16%)</title><rect x="576" y="324" width="2" height="15" fill="rgb(221,81,12)"/><text x="579.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.16%)</title><rect x="576" y="340" width="2" height="15" fill="rgb(208,180,30)"/><text x="579.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1699) (1 samples, 0.16%)</title><rect x="576" y="356" width="2" height="15" fill="rgb(205,23,50)"/><text x="579.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.16%)</title><rect x="576" y="372" width="2" height="15" fill="rgb(223,34,47)"/><text x="579.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (1 samples, 0.16%)</title><rect x="576" y="388" width="2" height="15" fill="rgb(244,90,10)"/><text x="579.00" y="398.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (1 samples, 0.16%)</title><rect x="576" y="404" width="2" height="15" fill="rgb(215,222,5)"/><text x="579.00" y="414.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4707) (1 samples, 0.16%)</title><rect x="580" y="308" width="1" height="15" fill="rgb(205,142,6)"/><text x="583.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3171) (1 samples, 0.16%)</title><rect x="581" y="324" width="2" height="15" fill="rgb(214,128,46)"/><text x="584.00" y="334.50"></text></g><g><title>_get_bufsize_errmask (extobj.c:310) (1 samples, 0.16%)</title><rect x="581" y="340" width="2" height="15" fill="rgb(205,151,36)"/><text x="584.00" y="350.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (1 samples, 0.16%)</title><rect x="583" y="356" width="2" height="15" fill="rgb(215,91,35)"/><text x="586.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (1 samples, 0.16%)</title><rect x="583" y="372" width="2" height="15" fill="rgb(228,3,14)"/><text x="586.00" y="382.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c:1647) (1 samples, 0.16%)</title><rect x="583" y="388" width="2" height="15" fill="rgb(226,172,6)"/><text x="586.00" y="398.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:324) (1 samples, 0.16%)</title><rect x="585" y="372" width="2" height="15" fill="rgb(249,139,46)"/><text x="588.00" y="382.50"></text></g><g><title>npyiter_goto_iterindex (nditer_api.c:1752) (1 samples, 0.16%)</title><rect x="585" y="388" width="2" height="15" fill="rgb(229,204,8)"/><text x="588.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (2 samples, 0.32%)</title><rect x="587" y="404" width="4" height="15" fill="rgb(219,67,41)"/><text x="590.00" y="414.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (1 samples, 0.16%)</title><rect x="591" y="404" width="2" height="15" fill="rgb(236,70,18)"/><text x="594.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:226) (2 samples, 0.32%)</title><rect x="595" y="420" width="4" height="15" fill="rgb(212,31,50)"/><text x="598.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (10 samples, 1.61%)</title><rect x="585" y="356" width="19" height="15" fill="rgb(243,85,28)"/><text x="588.00" y="366.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (9 samples, 1.45%)</title><rect x="587" y="372" width="17" height="15" fill="rgb(240,4,32)"/><text x="590.00" y="382.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (9 samples, 1.45%)</title><rect x="587" y="388" width="17" height="15" fill="rgb(233,210,20)"/><text x="590.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (6 samples, 0.97%)</title><rect x="593" y="404" width="11" height="15" fill="rgb(244,28,20)"/><text x="596.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:234) (3 samples, 0.48%)</title><rect x="599" y="420" width="5" height="15" fill="rgb(249,167,4)"/><text x="602.00" y="430.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:603) (3 samples, 0.48%)</title><rect x="604" y="404" width="6" height="15" fill="rgb(253,26,0)"/><text x="607.00" y="414.50"></text></g><g><title>_mm_div_pd (emmintrin.h:265) (3 samples, 0.48%)</title><rect x="604" y="420" width="6" height="15" fill="rgb(236,89,36)"/><text x="607.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (12 samples, 1.93%)</title><rect x="604" y="356" width="23" height="15" fill="rgb(233,82,39)"/><text x="607.00" y="366.50">i..</text></g><g><title>DOUBLE_divide (loops.c.src:1755) (12 samples, 1.93%)</title><rect x="604" y="372" width="23" height="15" fill="rgb(227,155,50)"/><text x="607.00" y="382.50">D..</text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src:250) (12 samples, 1.93%)</title><rect x="604" y="388" width="23" height="15" fill="rgb(221,114,47)"/><text x="607.00" y="398.50">r..</text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:604) (9 samples, 1.45%)</title><rect x="610" y="404" width="17" height="15" fill="rgb(245,206,24)"/><text x="613.00" y="414.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (9 samples, 1.45%)</title><rect x="610" y="420" width="17" height="15" fill="rgb(246,128,5)"/><text x="613.00" y="430.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:449) (136 samples, 21.90%)</title><rect x="371" y="276" width="258" height="15" fill="rgb(243,205,6)"/><text x="374.00" y="286.50">_accumulate_prediction (sklearn/en..</text></g><g><title>predict_proba (sklearn/tree/_classes.py:914) (27 samples, 4.35%)</title><rect x="578" y="292" width="51" height="15" fill="rgb(214,83,15)"/><text x="581.00" y="302.50">predi..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (25 samples, 4.03%)</title><rect x="581" y="308" width="48" height="15" fill="rgb(244,196,36)"/><text x="584.00" y="318.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (24 samples, 3.86%)</title><rect x="583" y="324" width="46" height="15" fill="rgb(222,190,3)"/><text x="586.00" y="334.50">PyUF..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (24 samples, 3.86%)</title><rect x="583" y="340" width="46" height="15" fill="rgb(226,162,47)"/><text x="586.00" y="350.50">exec..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (1 samples, 0.16%)</title><rect x="627" y="356" width="2" height="15" fill="rgb(211,189,25)"/><text x="630.00" y="366.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (1 samples, 0.16%)</title><rect x="627" y="372" width="2" height="15" fill="rgb(243,5,16)"/><text x="630.00" y="382.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:451) (1 samples, 0.16%)</title><rect x="629" y="276" width="2" height="15" fill="rgb(211,42,15)"/><text x="632.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (1 samples, 0.16%)</title><rect x="631" y="292" width="2" height="15" fill="rgb(241,122,43)"/><text x="634.00" y="302.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (1 samples, 0.16%)</title><rect x="631" y="308" width="2" height="15" fill="rgb(207,37,26)"/><text x="634.00" y="318.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (1 samples, 0.16%)</title><rect x="631" y="324" width="2" height="15" fill="rgb(224,109,12)"/><text x="634.00" y="334.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:19) (1 samples, 0.16%)</title><rect x="631" y="340" width="2" height="15" fill="rgb(220,227,6)"/><text x="634.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (1 samples, 0.16%)</title><rect x="633" y="308" width="2" height="15" fill="rgb(211,164,53)"/><text x="636.00" y="318.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:563) (1 samples, 0.16%)</title><rect x="633" y="324" width="2" height="15" fill="rgb(252,170,18)"/><text x="636.00" y="334.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c:242) (1 samples, 0.16%)</title><rect x="633" y="340" width="2" height="15" fill="rgb(247,19,35)"/><text x="636.00" y="350.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:975) (1 samples, 0.16%)</title><rect x="633" y="356" width="2" height="15" fill="rgb(231,101,15)"/><text x="636.00" y="366.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:452) (3 samples, 0.48%)</title><rect x="631" y="276" width="6" height="15" fill="rgb(222,119,8)"/><text x="634.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.32%)</title><rect x="633" y="292" width="4" height="15" fill="rgb(228,217,50)"/><text x="636.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.16%)</title><rect x="635" y="308" width="2" height="15" fill="rgb(237,180,50)"/><text x="638.00" y="318.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1717) (1 samples, 0.16%)</title><rect x="635" y="324" width="2" height="15" fill="rgb(218,75,35)"/><text x="638.00" y="334.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h:721) (1 samples, 0.16%)</title><rect x="635" y="340" width="2" height="15" fill="rgb(221,159,3)"/><text x="638.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c:835) (1 samples, 0.16%)</title><rect x="635" y="356" width="2" height="15" fill="rgb(239,50,41)"/><text x="638.00" y="366.50"></text></g><g><title>solve_diophantine (mem_overlap.c:546) (1 samples, 0.16%)</title><rect x="635" y="372" width="2" height="15" fill="rgb(234,114,16)"/><text x="638.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="635" y="388" width="2" height="15" fill="rgb(246,176,8)"/><text x="638.00" y="398.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:455) (1 samples, 0.16%)</title><rect x="637" y="276" width="1" height="15" fill="rgb(206,97,15)"/><text x="640.00" y="286.50"></text></g><g><title>lock_PyThread_release_lock (python3.7) (1 samples, 0.16%)</title><rect x="637" y="292" width="1" height="15" fill="rgb(244,154,18)"/><text x="640.00" y="302.50"></text></g><g><title>PyThread_release_lock (python3.7) (1 samples, 0.16%)</title><rect x="637" y="308" width="1" height="15" fill="rgb(222,99,46)"/><text x="640.00" y="318.50"></text></g><g><title>sem_post@@GLIBC_2.2.5 (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="637" y="324" width="1" height="15" fill="rgb(206,43,19)"/><text x="640.00" y="334.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (144 samples, 23.19%)</title><rect x="367" y="260" width="273" height="15" fill="rgb(249,11,21)"/><text x="370.00" y="270.50">&lt;listcomp&gt; (joblib/parallel.py:256)</text></g><g><title>array_dealloc (arrayobject.c:520) (1 samples, 0.16%)</title><rect x="638" y="276" width="2" height="15" fill="rgb(231,151,43)"/><text x="641.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.16%)</title><rect x="638" y="292" width="2" height="15" fill="rgb(243,72,17)"/><text x="641.00" y="302.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.16%)</title><rect x="638" y="308" width="2" height="15" fill="rgb(232,189,7)"/><text x="641.00" y="318.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (1 samples, 0.16%)</title><rect x="638" y="324" width="2" height="15" fill="rgb(230,103,19)"/><text x="641.00" y="334.50"></text></g><g><title>unregister (joblib/parallel.py:217) (1 samples, 0.16%)</title><rect x="640" y="276" width="2" height="15" fill="rgb(246,111,44)"/><text x="643.00" y="286.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (150 samples, 24.15%)</title><rect x="359" y="212" width="285" height="15" fill="rgb(206,115,38)"/><text x="362.00" y="222.50">apply_async (joblib/_parallel_backends..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (150 samples, 24.15%)</title><rect x="359" y="228" width="285" height="15" fill="rgb(232,21,21)"/><text x="362.00" y="238.50">__init__ (joblib/_parallel_backends.py..</text></g><g><title>__call__ (joblib/parallel.py:256) (148 samples, 23.83%)</title><rect x="363" y="244" width="281" height="15" fill="rgb(209,142,42)"/><text x="366.00" y="254.50">__call__ (joblib/parallel.py:256)</text></g><g><title>__exit__ (joblib/parallel.py:215) (2 samples, 0.32%)</title><rect x="640" y="260" width="4" height="15" fill="rgb(243,131,35)"/><text x="643.00" y="270.50"></text></g><g><title>unregister (joblib/parallel.py:220) (1 samples, 0.16%)</title><rect x="642" y="276" width="2" height="15" fill="rgb(211,192,7)"/><text x="645.00" y="286.50"></text></g><g><title>__call__ (joblib/parallel.py:332) (1 samples, 0.16%)</title><rect x="644" y="228" width="2" height="15" fill="rgb(206,216,9)"/><text x="647.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:333) (1 samples, 0.16%)</title><rect x="646" y="228" width="2" height="15" fill="rgb(220,49,47)"/><text x="649.00" y="238.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:38) (336 samples, 54.11%)</title><rect x="11" y="52" width="639" height="15" fill="rgb(243,185,15)"/><text x="14.00" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:38)</text></g><g><title>profile_skl (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:37) (336 samples, 54.11%)</title><rect x="11" y="68" width="639" height="15" fill="rgb(240,185,42)"/><text x="14.00" y="78.50">profile_skl (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:37)</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:29) (336 samples, 54.11%)</title><rect x="11" y="84" width="639" height="15" fill="rgb(213,2,1)"/><text x="14.00" y="94.50">setup_profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:29)</text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:23) (197 samples, 31.72%)</title><rect x="276" y="100" width="374" height="15" fill="rgb(237,33,23)"/><text x="279.00" y="110.50">profile (bench_RandomForestClassifier_default_m_cl..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (197 samples, 31.72%)</title><rect x="276" y="116" width="374" height="15" fill="rgb(236,137,54)"/><text x="279.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_s..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (196 samples, 31.56%)</title><rect x="277" y="132" width="373" height="15" fill="rgb(237,165,13)"/><text x="280.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.p..</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:669) (195 samples, 31.40%)</title><rect x="279" y="148" width="371" height="15" fill="rgb(224,201,8)"/><text x="282.00" y="158.50">predict_proba (sklearn/ensemble/_forest.py:669)</text></g><g><title>__call__ (joblib/parallel.py:1006) (190 samples, 30.60%)</title><rect x="289" y="164" width="361" height="15" fill="rgb(236,220,27)"/><text x="292.00" y="174.50">__call__ (joblib/parallel.py:1006)</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (157 samples, 25.28%)</title><rect x="352" y="180" width="298" height="15" fill="rgb(213,64,21)"/><text x="355.00" y="190.50">dispatch_one_batch (joblib/parallel.py:8..</text></g><g><title>_dispatch (joblib/parallel.py:753) (153 samples, 24.64%)</title><rect x="359" y="196" width="291" height="15" fill="rgb(241,153,11)"/><text x="362.00" y="206.50">_dispatch (joblib/parallel.py:753)</text></g><g><title>apply_async (joblib/_parallel_backends.py:203) (3 samples, 0.48%)</title><rect x="644" y="212" width="6" height="15" fill="rgb(252,87,18)"/><text x="647.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py:335) (1 samples, 0.16%)</title><rect x="648" y="228" width="2" height="15" fill="rgb(218,7,48)"/><text x="651.00" y="238.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_m_cl.py:1) (1 samples, 0.16%)</title><rect x="650" y="148" width="2" height="15" fill="rgb(227,33,13)"/><text x="653.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="650" y="164" width="2" height="15" fill="rgb(207,208,42)"/><text x="653.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="650" y="180" width="2" height="15" fill="rgb(228,140,24)"/><text x="653.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="650" y="196" width="2" height="15" fill="rgb(211,156,11)"/><text x="653.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="650" y="212" width="2" height="15" fill="rgb(216,178,53)"/><text x="653.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="650" y="228" width="2" height="15" fill="rgb(213,120,26)"/><text x="653.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py:187) (1 samples, 0.16%)</title><rect x="650" y="244" width="2" height="15" fill="rgb(251,85,5)"/><text x="653.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="650" y="260" width="2" height="15" fill="rgb(229,187,37)"/><text x="653.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="650" y="276" width="2" height="15" fill="rgb(234,90,48)"/><text x="653.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="650" y="292" width="2" height="15" fill="rgb(244,151,35)"/><text x="653.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="650" y="308" width="2" height="15" fill="rgb(251,96,37)"/><text x="653.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="650" y="324" width="2" height="15" fill="rgb(226,158,51)"/><text x="653.00" y="334.50"></text></g><g><title>&lt;module&gt; (numpy/testing/__init__.py:10) (1 samples, 0.16%)</title><rect x="650" y="340" width="2" height="15" fill="rgb(254,122,6)"/><text x="653.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="650" y="356" width="2" height="15" fill="rgb(206,202,20)"/><text x="653.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="650" y="372" width="2" height="15" fill="rgb(232,100,38)"/><text x="653.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="650" y="388" width="2" height="15" fill="rgb(224,47,23)"/><text x="653.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="650" y="404" width="2" height="15" fill="rgb(239,113,9)"/><text x="653.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="650" y="420" width="2" height="15" fill="rgb(220,83,8)"/><text x="653.00" y="430.50"></text></g><g><title>&lt;module&gt; (unittest/__init__.py:64) (1 samples, 0.16%)</title><rect x="650" y="436" width="2" height="15" fill="rgb(242,119,0)"/><text x="653.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="650" y="452" width="2" height="15" fill="rgb(215,19,40)"/><text x="653.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="650" y="468" width="2" height="15" fill="rgb(244,157,39)"/><text x="653.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="650" y="484" width="2" height="15" fill="rgb(252,170,13)"/><text x="653.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="650" y="500" width="2" height="15" fill="rgb(214,49,33)"/><text x="653.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="650" y="516" width="2" height="15" fill="rgb(252,103,30)"/><text x="653.00" y="526.50"></text></g><g><title>&lt;module&gt; (unittest/main.py:4) (1 samples, 0.16%)</title><rect x="650" y="532" width="2" height="15" fill="rgb(233,105,14)"/><text x="653.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="650" y="548" width="2" height="15" fill="rgb(239,224,14)"/><text x="653.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="650" y="564" width="2" height="15" fill="rgb(247,156,10)"/><text x="653.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="650" y="580" width="2" height="15" fill="rgb(235,106,39)"/><text x="653.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="650" y="596" width="2" height="15" fill="rgb(248,93,40)"/><text x="653.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="650" y="612" width="2" height="15" fill="rgb(240,196,50)"/><text x="653.00" y="622.50"></text></g><g><title>&lt;module&gt; (argparse.py:90) (1 samples, 0.16%)</title><rect x="650" y="628" width="2" height="15" fill="rgb(253,107,41)"/><text x="653.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="650" y="644" width="2" height="15" fill="rgb(241,48,40)"/><text x="653.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="650" y="660" width="2" height="15" fill="rgb(226,183,3)"/><text x="653.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="650" y="676" width="2" height="15" fill="rgb(247,159,52)"/><text x="653.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="650" y="692" width="2" height="15" fill="rgb(247,121,16)"/><text x="653.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="650" y="708" width="2" height="15" fill="rgb(238,218,14)"/><text x="653.00" y="718.50"></text></g><g><title>&lt;module&gt; (gettext.py:84) (1 samples, 0.16%)</title><rect x="650" y="724" width="2" height="15" fill="rgb(223,75,36)"/><text x="653.00" y="734.50"></text></g><g><title>compile (re.py:234) (1 samples, 0.16%)</title><rect x="650" y="740" width="2" height="15" fill="rgb(233,184,13)"/><text x="653.00" y="750.50"></text></g><g><title>_compile (re.py:286) (1 samples, 0.16%)</title><rect x="650" y="756" width="2" height="15" fill="rgb(210,113,48)"/><text x="653.00" y="766.50"></text></g><g><title>compile (sre_compile.py:764) (1 samples, 0.16%)</title><rect x="650" y="772" width="2" height="15" fill="rgb(238,208,29)"/><text x="653.00" y="782.50"></text></g><g><title>parse (sre_parse.py:930) (1 samples, 0.16%)</title><rect x="650" y="788" width="2" height="15" fill="rgb(248,95,11)"/><text x="653.00" y="798.50"></text></g><g><title>_parse_sub (sre_parse.py:426) (1 samples, 0.16%)</title><rect x="650" y="804" width="2" height="15" fill="rgb(224,13,41)"/><text x="653.00" y="814.50"></text></g><g><title>_parse (sre_parse.py:497) (1 samples, 0.16%)</title><rect x="650" y="820" width="2" height="15" fill="rgb(247,5,30)"/><text x="653.00" y="830.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (1 samples, 0.16%)</title><rect x="652" y="852" width="2" height="15" fill="rgb(246,112,1)"/><text x="655.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (1 samples, 0.16%)</title><rect x="652" y="868" width="2" height="15" fill="rgb(209,112,4)"/><text x="655.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (1 samples, 0.16%)</title><rect x="652" y="884" width="2" height="15" fill="rgb(239,58,51)"/><text x="655.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:624) (1 samples, 0.16%)</title><rect x="652" y="900" width="2" height="15" fill="rgb(230,30,5)"/><text x="655.00" y="910.50"></text></g><g><title>add (pkg_resources/__init__.py:704) (1 samples, 0.16%)</title><rect x="652" y="916" width="2" height="15" fill="rgb(250,90,46)"/><text x="655.00" y="926.50"></text></g><g><title>key (pkg_resources/__init__.py:2642) (1 samples, 0.16%)</title><rect x="652" y="932" width="2" height="15" fill="rgb(231,0,4)"/><text x="655.00" y="942.50"></text></g><g><title>unicode_lower (python3.7) (1 samples, 0.16%)</title><rect x="652" y="948" width="2" height="15" fill="rgb(253,145,20)"/><text x="655.00" y="958.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_m_cl.py:2) (2 samples, 0.32%)</title><rect x="652" y="148" width="4" height="15" fill="rgb(234,166,19)"/><text x="655.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="652" y="164" width="4" height="15" fill="rgb(211,116,10)"/><text x="655.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.32%)</title><rect x="652" y="180" width="4" height="15" fill="rgb(221,54,0)"/><text x="655.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="652" y="196" width="4" height="15" fill="rgb(217,181,31)"/><text x="655.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="652" y="212" width="4" height="15" fill="rgb(210,174,42)"/><text x="655.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="652" y="228" width="4" height="15" fill="rgb(225,82,31)"/><text x="655.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="652" y="244" width="4" height="15" fill="rgb(212,91,0)"/><text x="655.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="652" y="260" width="4" height="15" fill="rgb(253,13,2)"/><text x="655.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="652" y="276" width="4" height="15" fill="rgb(216,135,21)"/><text x="655.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (2 samples, 0.32%)</title><rect x="652" y="292" width="4" height="15" fill="rgb(227,67,18)"/><text x="655.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="652" y="308" width="4" height="15" fill="rgb(216,108,3)"/><text x="655.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="652" y="324" width="4" height="15" fill="rgb(245,190,17)"/><text x="655.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="652" y="340" width="4" height="15" fill="rgb(230,91,17)"/><text x="655.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="652" y="356" width="4" height="15" fill="rgb(249,72,13)"/><text x="655.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="652" y="372" width="4" height="15" fill="rgb(213,86,1)"/><text x="655.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (2 samples, 0.32%)</title><rect x="652" y="388" width="4" height="15" fill="rgb(239,77,50)"/><text x="655.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="652" y="404" width="4" height="15" fill="rgb(221,142,47)"/><text x="655.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="652" y="420" width="4" height="15" fill="rgb(254,66,16)"/><text x="655.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="652" y="436" width="4" height="15" fill="rgb(243,217,37)"/><text x="655.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="652" y="452" width="4" height="15" fill="rgb(235,77,2)"/><text x="655.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="652" y="468" width="4" height="15" fill="rgb(249,66,38)"/><text x="655.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (2 samples, 0.32%)</title><rect x="652" y="484" width="4" height="15" fill="rgb(220,44,0)"/><text x="655.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="652" y="500" width="4" height="15" fill="rgb(245,180,53)"/><text x="655.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="652" y="516" width="4" height="15" fill="rgb(243,35,34)"/><text x="655.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="652" y="532" width="4" height="15" fill="rgb(234,156,37)"/><text x="655.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="652" y="548" width="4" height="15" fill="rgb(239,50,20)"/><text x="655.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="652" y="564" width="4" height="15" fill="rgb(227,92,0)"/><text x="655.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (2 samples, 0.32%)</title><rect x="652" y="580" width="4" height="15" fill="rgb(226,170,48)"/><text x="655.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="652" y="596" width="4" height="15" fill="rgb(205,16,41)"/><text x="655.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.32%)</title><rect x="652" y="612" width="4" height="15" fill="rgb(246,68,50)"/><text x="655.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="652" y="628" width="4" height="15" fill="rgb(245,170,3)"/><text x="655.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="652" y="644" width="4" height="15" fill="rgb(250,141,3)"/><text x="655.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="652" y="660" width="4" height="15" fill="rgb(240,225,47)"/><text x="655.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="652" y="676" width="4" height="15" fill="rgb(244,180,9)"/><text x="655.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="652" y="692" width="4" height="15" fill="rgb(226,136,39)"/><text x="655.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="652" y="708" width="4" height="15" fill="rgb(208,60,31)"/><text x="655.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (2 samples, 0.32%)</title><rect x="652" y="724" width="4" height="15" fill="rgb(210,25,7)"/><text x="655.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="652" y="740" width="4" height="15" fill="rgb(207,178,10)"/><text x="655.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="652" y="756" width="4" height="15" fill="rgb(227,1,51)"/><text x="655.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="652" y="772" width="4" height="15" fill="rgb(205,155,1)"/><text x="655.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="652" y="788" width="4" height="15" fill="rgb(208,113,5)"/><text x="655.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="652" y="804" width="4" height="15" fill="rgb(240,60,24)"/><text x="655.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (2 samples, 0.32%)</title><rect x="652" y="820" width="4" height="15" fill="rgb(252,139,40)"/><text x="655.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (2 samples, 0.32%)</title><rect x="652" y="836" width="4" height="15" fill="rgb(205,188,53)"/><text x="655.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (1 samples, 0.16%)</title><rect x="654" y="852" width="2" height="15" fill="rgb(236,143,3)"/><text x="657.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:624) (1 samples, 0.16%)</title><rect x="654" y="868" width="2" height="15" fill="rgb(212,46,38)"/><text x="657.00" y="878.50"></text></g><g><title>add (pkg_resources/__init__.py:706) (1 samples, 0.16%)</title><rect x="654" y="884" width="2" height="15" fill="rgb(209,170,13)"/><text x="657.00" y="894.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:12) (1 samples, 0.16%)</title><rect x="656" y="484" width="1" height="15" fill="rgb(229,196,46)"/><text x="659.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="656" y="500" width="1" height="15" fill="rgb(250,59,54)"/><text x="659.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="656" y="516" width="1" height="15" fill="rgb(242,35,25)"/><text x="659.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="656" y="532" width="1" height="15" fill="rgb(211,125,51)"/><text x="659.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="656" y="548" width="1" height="15" fill="rgb(245,181,13)"/><text x="659.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="656" y="564" width="1" height="15" fill="rgb(207,88,37)"/><text x="659.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py:23) (1 samples, 0.16%)</title><rect x="656" y="580" width="1" height="15" fill="rgb(236,182,0)"/><text x="659.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="656" y="596" width="1" height="15" fill="rgb(239,208,15)"/><text x="659.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="656" y="612" width="1" height="15" fill="rgb(237,146,15)"/><text x="659.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="656" y="628" width="1" height="15" fill="rgb(238,122,20)"/><text x="659.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="656" y="644" width="1" height="15" fill="rgb(251,77,54)"/><text x="659.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="656" y="660" width="1" height="15" fill="rgb(225,95,28)"/><text x="659.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py:10) (1 samples, 0.16%)</title><rect x="656" y="676" width="1" height="15" fill="rgb(224,104,3)"/><text x="659.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="656" y="692" width="1" height="15" fill="rgb(209,4,3)"/><text x="659.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="656" y="708" width="1" height="15" fill="rgb(210,97,18)"/><text x="659.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="656" y="724" width="1" height="15" fill="rgb(233,72,44)"/><text x="659.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="656" y="740" width="1" height="15" fill="rgb(235,191,48)"/><text x="659.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="656" y="756" width="1" height="15" fill="rgb(242,133,43)"/><text x="659.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py:43) (1 samples, 0.16%)</title><rect x="656" y="772" width="1" height="15" fill="rgb(217,36,29)"/><text x="659.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="656" y="788" width="1" height="15" fill="rgb(253,46,17)"/><text x="659.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="656" y="804" width="1" height="15" fill="rgb(215,204,49)"/><text x="659.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="656" y="820" width="1" height="15" fill="rgb(229,7,24)"/><text x="659.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="656" y="836" width="1" height="15" fill="rgb(207,108,15)"/><text x="659.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="656" y="852" width="1" height="15" fill="rgb(216,155,6)"/><text x="659.00" y="862.50"></text></g><g><title>&lt;module&gt; (urllib3/__init__.py:7) (1 samples, 0.16%)</title><rect x="656" y="868" width="1" height="15" fill="rgb(205,177,31)"/><text x="659.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="656" y="884" width="1" height="15" fill="rgb(235,223,1)"/><text x="659.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="656" y="900" width="1" height="15" fill="rgb(205,77,10)"/><text x="659.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="656" y="916" width="1" height="15" fill="rgb(247,187,1)"/><text x="659.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="656" y="932" width="1" height="15" fill="rgb(242,69,39)"/><text x="659.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="656" y="948" width="1" height="15" fill="rgb(242,3,11)"/><text x="659.00" y="958.50"></text></g><g><title>&lt;module&gt; (urllib3/connectionpool.py:38) (1 samples, 0.16%)</title><rect x="656" y="964" width="1" height="15" fill="rgb(247,58,35)"/><text x="659.00" y="974.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="656" y="980" width="1" height="15" fill="rgb(225,173,50)"/><text x="659.00" y="990.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="656" y="996" width="1" height="15" fill="rgb(214,199,5)"/><text x="659.00" y="1006.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="656" y="1012" width="1" height="15" fill="rgb(228,217,17)"/><text x="659.00" y="1022.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="656" y="1028" width="1" height="15" fill="rgb(250,162,40)"/><text x="659.00" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="656" y="1044" width="1" height="15" fill="rgb(214,69,42)"/><text x="659.00" y="1054.50"></text></g><g><title>&lt;module&gt; (urllib3/request.py:3) (1 samples, 0.16%)</title><rect x="656" y="1060" width="1" height="15" fill="rgb(208,178,26)"/><text x="659.00" y="1070.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="656" y="1076" width="1" height="15" fill="rgb(234,104,48)"/><text x="659.00" y="1086.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="656" y="1092" width="1" height="15" fill="rgb(219,69,26)"/><text x="659.00" y="1102.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="656" y="1108" width="1" height="15" fill="rgb(224,36,38)"/><text x="659.00" y="1118.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="656" y="1124" width="1" height="15" fill="rgb(209,28,0)"/><text x="659.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="656" y="1140" width="1" height="15" fill="rgb(228,212,10)"/><text x="659.00" y="1150.50"></text></g><g><title>&lt;module&gt; (urllib3/filepost.py:10) (1 samples, 0.16%)</title><rect x="656" y="1156" width="1" height="15" fill="rgb(215,80,20)"/><text x="659.00" y="1166.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="656" y="1172" width="1" height="15" fill="rgb(205,49,38)"/><text x="659.00" y="1182.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="656" y="1188" width="1" height="15" fill="rgb(247,54,23)"/><text x="659.00" y="1198.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="656" y="1204" width="1" height="15" fill="rgb(244,161,17)"/><text x="659.00" y="1214.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="656" y="1220" width="1" height="15" fill="rgb(245,190,32)"/><text x="659.00" y="1230.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="656" y="1236" width="1" height="15" fill="rgb(250,119,8)"/><text x="659.00" y="1246.50"></text></g><g><title>&lt;module&gt; (urllib3/fields.py:3) (1 samples, 0.16%)</title><rect x="656" y="1252" width="1" height="15" fill="rgb(248,10,13)"/><text x="659.00" y="1262.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="656" y="1268" width="1" height="15" fill="rgb(237,27,30)"/><text x="659.00" y="1278.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="656" y="1284" width="1" height="15" fill="rgb(227,34,42)"/><text x="659.00" y="1294.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="656" y="1300" width="1" height="15" fill="rgb(231,180,22)"/><text x="659.00" y="1310.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 0.16%)</title><rect x="656" y="1316" width="1" height="15" fill="rgb(217,53,7)"/><text x="659.00" y="1326.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:857) (1 samples, 0.16%)</title><rect x="656" y="1332" width="1" height="15" fill="rgb(205,21,5)"/><text x="659.00" y="1342.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:525) (1 samples, 0.16%)</title><rect x="656" y="1348" width="1" height="15" fill="rgb(232,108,22)"/><text x="659.00" y="1358.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/code_helper.py:7) (1 samples, 0.16%)</title><rect x="657" y="580" width="2" height="15" fill="rgb(205,226,14)"/><text x="660.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="657" y="596" width="2" height="15" fill="rgb(233,59,4)"/><text x="660.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="657" y="612" width="2" height="15" fill="rgb(232,177,20)"/><text x="660.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="657" y="628" width="2" height="15" fill="rgb(242,124,22)"/><text x="660.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="657" y="644" width="2" height="15" fill="rgb(252,66,17)"/><text x="660.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="657" y="660" width="2" height="15" fill="rgb(230,21,35)"/><text x="660.00" y="670.50"></text></g><g><title>&lt;module&gt; (autopep8.py:62) (1 samples, 0.16%)</title><rect x="657" y="676" width="2" height="15" fill="rgb(252,183,46)"/><text x="660.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="657" y="692" width="2" height="15" fill="rgb(252,193,13)"/><text x="660.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="657" y="708" width="2" height="15" fill="rgb(243,213,37)"/><text x="660.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="657" y="724" width="2" height="15" fill="rgb(239,228,2)"/><text x="660.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="657" y="740" width="2" height="15" fill="rgb(209,225,35)"/><text x="660.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="657" y="756" width="2" height="15" fill="rgb(245,8,44)"/><text x="660.00" y="766.50"></text></g><g><title>&lt;module&gt; (pycodestyle.py:143) (1 samples, 0.16%)</title><rect x="657" y="772" width="2" height="15" fill="rgb(254,40,35)"/><text x="660.00" y="782.50"></text></g><g><title>compile (re.py:234) (1 samples, 0.16%)</title><rect x="657" y="788" width="2" height="15" fill="rgb(206,106,16)"/><text x="660.00" y="798.50"></text></g><g><title>_compile (re.py:286) (1 samples, 0.16%)</title><rect x="657" y="804" width="2" height="15" fill="rgb(210,178,19)"/><text x="660.00" y="814.50"></text></g><g><title>compile (sre_compile.py:764) (1 samples, 0.16%)</title><rect x="657" y="820" width="2" height="15" fill="rgb(220,210,26)"/><text x="660.00" y="830.50"></text></g><g><title>parse (sre_parse.py:930) (1 samples, 0.16%)</title><rect x="657" y="836" width="2" height="15" fill="rgb(209,52,46)"/><text x="660.00" y="846.50"></text></g><g><title>_parse_sub (sre_parse.py:426) (1 samples, 0.16%)</title><rect x="657" y="852" width="2" height="15" fill="rgb(229,206,30)"/><text x="660.00" y="862.50"></text></g><g><title>_parse (sre_parse.py:816) (1 samples, 0.16%)</title><rect x="657" y="868" width="2" height="15" fill="rgb(211,221,48)"/><text x="660.00" y="878.50"></text></g><g><title>_parse_sub (sre_parse.py:426) (1 samples, 0.16%)</title><rect x="657" y="884" width="2" height="15" fill="rgb(212,184,38)"/><text x="660.00" y="894.50"></text></g><g><title>_parse (sre_parse.py:646) (1 samples, 0.16%)</title><rect x="657" y="900" width="2" height="15" fill="rgb(229,79,26)"/><text x="660.00" y="910.50"></text></g><g><title>__getitem__ (sre_parse.py:166) (1 samples, 0.16%)</title><rect x="657" y="916" width="2" height="15" fill="rgb(214,226,21)"/><text x="660.00" y="926.50"></text></g><g><title>__init__ (sre_parse.py:112) (1 samples, 0.16%)</title><rect x="657" y="932" width="2" height="15" fill="rgb(232,70,8)"/><text x="660.00" y="942.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (3 samples, 0.48%)</title><rect x="656" y="244" width="5" height="15" fill="rgb(247,220,45)"/><text x="659.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="656" y="260" width="5" height="15" fill="rgb(211,147,30)"/><text x="659.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.48%)</title><rect x="656" y="276" width="5" height="15" fill="rgb(232,220,24)"/><text x="659.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.48%)</title><rect x="656" y="292" width="5" height="15" fill="rgb(253,62,23)"/><text x="659.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.48%)</title><rect x="656" y="308" width="5" height="15" fill="rgb(231,101,22)"/><text x="659.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="656" y="324" width="5" height="15" fill="rgb(213,28,7)"/><text x="659.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (3 samples, 0.48%)</title><rect x="656" y="340" width="5" height="15" fill="rgb(253,98,48)"/><text x="659.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="656" y="356" width="5" height="15" fill="rgb(210,110,46)"/><text x="659.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.48%)</title><rect x="656" y="372" width="5" height="15" fill="rgb(221,54,41)"/><text x="659.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="656" y="388" width="5" height="15" fill="rgb(238,226,18)"/><text x="659.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="656" y="404" width="5" height="15" fill="rgb(240,9,36)"/><text x="659.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.48%)</title><rect x="656" y="420" width="5" height="15" fill="rgb(251,22,6)"/><text x="659.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.48%)</title><rect x="656" y="436" width="5" height="15" fill="rgb(217,1,21)"/><text x="659.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.48%)</title><rect x="656" y="452" width="5" height="15" fill="rgb(206,99,47)"/><text x="659.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="656" y="468" width="5" height="15" fill="rgb(253,9,19)"/><text x="659.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:7) (2 samples, 0.32%)</title><rect x="657" y="484" width="4" height="15" fill="rgb(228,87,23)"/><text x="660.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="657" y="500" width="4" height="15" fill="rgb(253,19,38)"/><text x="660.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="657" y="516" width="4" height="15" fill="rgb(206,179,49)"/><text x="660.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="657" y="532" width="4" height="15" fill="rgb(223,165,23)"/><text x="660.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="657" y="548" width="4" height="15" fill="rgb(216,119,27)"/><text x="660.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="657" y="564" width="4" height="15" fill="rgb(219,187,15)"/><text x="660.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/code_helper.py:8) (1 samples, 0.16%)</title><rect x="659" y="580" width="2" height="15" fill="rgb(232,63,20)"/><text x="662.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="659" y="596" width="2" height="15" fill="rgb(245,99,7)"/><text x="662.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.16%)</title><rect x="659" y="612" width="2" height="15" fill="rgb(215,135,46)"/><text x="662.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="659" y="628" width="2" height="15" fill="rgb(240,215,29)"/><text x="662.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="659" y="644" width="2" height="15" fill="rgb(231,151,45)"/><text x="662.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="659" y="660" width="2" height="15" fill="rgb(239,73,47)"/><text x="662.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="659" y="676" width="2" height="15" fill="rgb(205,162,6)"/><text x="662.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="659" y="692" width="2" height="15" fill="rgb(233,25,6)"/><text x="662.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="659" y="708" width="2" height="15" fill="rgb(246,59,40)"/><text x="662.00" y="718.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/__init__.py:6) (1 samples, 0.16%)</title><rect x="659" y="724" width="2" height="15" fill="rgb(230,45,4)"/><text x="662.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="659" y="740" width="2" height="15" fill="rgb(211,210,20)"/><text x="662.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="659" y="756" width="2" height="15" fill="rgb(240,137,22)"/><text x="662.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="659" y="772" width="2" height="15" fill="rgb(234,182,51)"/><text x="662.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="659" y="788" width="2" height="15" fill="rgb(233,199,15)"/><text x="662.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="659" y="804" width="2" height="15" fill="rgb(229,124,32)"/><text x="662.00" y="814.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/anyfhelper.py:9) (1 samples, 0.16%)</title><rect x="659" y="820" width="2" height="15" fill="rgb(250,208,22)"/><text x="662.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="659" y="836" width="2" height="15" fill="rgb(246,153,34)"/><text x="662.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="659" y="852" width="2" height="15" fill="rgb(227,149,40)"/><text x="662.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="659" y="868" width="2" height="15" fill="rgb(209,141,37)"/><text x="662.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="659" y="884" width="2" height="15" fill="rgb(242,8,17)"/><text x="662.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="659" y="900" width="2" height="15" fill="rgb(212,211,41)"/><text x="662.00" y="910.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/synchelper.py:10) (1 samples, 0.16%)</title><rect x="659" y="916" width="2" height="15" fill="rgb(243,116,39)"/><text x="662.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="659" y="932" width="2" height="15" fill="rgb(212,7,52)"/><text x="662.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.16%)</title><rect x="659" y="948" width="2" height="15" fill="rgb(248,104,25)"/><text x="662.00" y="958.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="659" y="964" width="2" height="15" fill="rgb(205,211,19)"/><text x="662.00" y="974.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="659" y="980" width="2" height="15" fill="rgb(210,28,31)"/><text x="662.00" y="990.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="659" y="996" width="2" height="15" fill="rgb(245,47,15)"/><text x="662.00" y="1006.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="659" y="1012" width="2" height="15" fill="rgb(209,7,50)"/><text x="662.00" y="1022.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="659" y="1028" width="2" height="15" fill="rgb(229,77,33)"/><text x="662.00" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="659" y="1044" width="2" height="15" fill="rgb(248,61,53)"/><text x="662.00" y="1054.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/__init__.py:7) (1 samples, 0.16%)</title><rect x="659" y="1060" width="2" height="15" fill="rgb(211,224,13)"/><text x="662.00" y="1070.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="659" y="1076" width="2" height="15" fill="rgb(242,99,43)"/><text x="662.00" y="1086.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:963) (1 samples, 0.16%)</title><rect x="659" y="1092" width="2" height="15" fill="rgb(231,198,35)"/><text x="662.00" y="1102.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;:906) (1 samples, 0.16%)</title><rect x="659" y="1108" width="2" height="15" fill="rgb(230,40,23)"/><text x="662.00" y="1118.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1280) (1 samples, 0.16%)</title><rect x="659" y="1124" width="2" height="15" fill="rgb(227,119,7)"/><text x="662.00" y="1134.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1252) (1 samples, 0.16%)</title><rect x="659" y="1140" width="2" height="15" fill="rgb(206,96,45)"/><text x="662.00" y="1150.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1392) (1 samples, 0.16%)</title><rect x="659" y="1156" width="2" height="15" fill="rgb(212,27,53)"/><text x="662.00" y="1166.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:30) (1 samples, 0.16%)</title><rect x="661" y="628" width="2" height="15" fill="rgb(250,53,47)"/><text x="664.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="661" y="644" width="2" height="15" fill="rgb(234,10,10)"/><text x="664.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="661" y="660" width="2" height="15" fill="rgb(242,27,3)"/><text x="664.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="661" y="676" width="2" height="15" fill="rgb(210,17,11)"/><text x="664.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="661" y="692" width="2" height="15" fill="rgb(217,71,48)"/><text x="664.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="661" y="708" width="2" height="15" fill="rgb(250,160,36)"/><text x="664.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/_libs/__init__.py:3) (1 samples, 0.16%)</title><rect x="661" y="724" width="2" height="15" fill="rgb(208,24,34)"/><text x="664.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="661" y="740" width="2" height="15" fill="rgb(225,226,1)"/><text x="664.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="661" y="756" width="2" height="15" fill="rgb(220,79,31)"/><text x="664.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="661" y="772" width="2" height="15" fill="rgb(211,198,27)"/><text x="664.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="661" y="788" width="2" height="15" fill="rgb(207,153,13)"/><text x="664.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="661" y="804" width="2" height="15" fill="rgb(205,20,17)"/><text x="664.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/_libs/tslibs/__init__.py:3) (1 samples, 0.16%)</title><rect x="661" y="820" width="2" height="15" fill="rgb(225,38,32)"/><text x="664.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="661" y="836" width="2" height="15" fill="rgb(217,175,11)"/><text x="664.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="661" y="852" width="2" height="15" fill="rgb(231,96,48)"/><text x="664.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="661" y="868" width="2" height="15" fill="rgb(210,145,16)"/><text x="664.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.16%)</title><rect x="661" y="884" width="2" height="15" fill="rgb(231,208,29)"/><text x="664.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="661" y="900" width="2" height="15" fill="rgb(242,194,30)"/><text x="664.00" y="910.50"></text></g><g><title>0x7f791706a40e (?) (1 samples, 0.16%)</title><rect x="661" y="916" width="2" height="15" fill="rgb(213,183,21)"/><text x="664.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="661" y="932" width="2" height="15" fill="rgb(244,200,37)"/><text x="664.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="661" y="948" width="2" height="15" fill="rgb(211,4,22)"/><text x="664.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="661" y="964" width="2" height="15" fill="rgb(216,211,4)"/><text x="664.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.16%)</title><rect x="661" y="980" width="2" height="15" fill="rgb(213,222,6)"/><text x="664.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="661" y="996" width="2" height="15" fill="rgb(229,31,44)"/><text x="664.00" y="1006.50"></text></g><g><title>0x7f7916e23cd2 (?) (1 samples, 0.16%)</title><rect x="661" y="1012" width="2" height="15" fill="rgb(232,174,24)"/><text x="664.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="661" y="1028" width="2" height="15" fill="rgb(228,33,26)"/><text x="664.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="661" y="1044" width="2" height="15" fill="rgb(217,168,0)"/><text x="664.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="661" y="1060" width="2" height="15" fill="rgb(236,8,45)"/><text x="664.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.16%)</title><rect x="661" y="1076" width="2" height="15" fill="rgb(238,60,50)"/><text x="664.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="661" y="1092" width="2" height="15" fill="rgb(247,98,21)"/><text x="664.00" y="1102.50"></text></g><g><title>0x7f79165190e5 (?) (1 samples, 0.16%)</title><rect x="661" y="1108" width="2" height="15" fill="rgb(224,102,21)"/><text x="664.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="661" y="1124" width="2" height="15" fill="rgb(240,53,2)"/><text x="664.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="661" y="1140" width="2" height="15" fill="rgb(251,188,3)"/><text x="664.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="661" y="1156" width="2" height="15" fill="rgb(223,193,8)"/><text x="664.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.16%)</title><rect x="661" y="1172" width="2" height="15" fill="rgb(238,116,27)"/><text x="664.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="661" y="1188" width="2" height="15" fill="rgb(217,20,27)"/><text x="664.00" y="1198.50"></text></g><g><title>0x7f791629de68 (?) (1 samples, 0.16%)</title><rect x="661" y="1204" width="2" height="15" fill="rgb(218,208,35)"/><text x="664.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="661" y="1220" width="2" height="15" fill="rgb(223,157,48)"/><text x="664.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="661" y="1236" width="2" height="15" fill="rgb(227,198,16)"/><text x="664.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="661" y="1252" width="2" height="15" fill="rgb(214,51,6)"/><text x="664.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.16%)</title><rect x="661" y="1268" width="2" height="15" fill="rgb(219,100,13)"/><text x="664.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="661" y="1284" width="2" height="15" fill="rgb(240,77,47)"/><text x="664.00" y="1294.50"></text></g><g><title>0x7f791602e2fb (?) (1 samples, 0.16%)</title><rect x="661" y="1300" width="2" height="15" fill="rgb(238,82,8)"/><text x="664.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="661" y="1316" width="2" height="15" fill="rgb(240,155,29)"/><text x="664.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="661" y="1332" width="2" height="15" fill="rgb(234,224,25)"/><text x="664.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="661" y="1348" width="2" height="15" fill="rgb(215,163,11)"/><text x="664.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.16%)</title><rect x="661" y="1364" width="2" height="15" fill="rgb(238,174,41)"/><text x="664.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="661" y="1380" width="2" height="15" fill="rgb(227,6,46)"/><text x="664.00" y="1390.50"></text></g><g><title>0x7f7915e12153 (?) (1 samples, 0.16%)</title><rect x="661" y="1396" width="2" height="15" fill="rgb(252,129,19)"/><text x="664.00" y="1406.50"></text></g><g><title>0x7f7915e10c13 (?) (1 samples, 0.16%)</title><rect x="661" y="1412" width="2" height="15" fill="rgb(231,69,43)"/><text x="664.00" y="1422.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="661" y="1428" width="2" height="15" fill="rgb(252,213,47)"/><text x="664.00" y="1438.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="661" y="1444" width="2" height="15" fill="rgb(219,126,48)"/><text x="664.00" y="1454.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="661" y="1460" width="2" height="15" fill="rgb(207,75,9)"/><text x="664.00" y="1470.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.16%)</title><rect x="661" y="1476" width="2" height="15" fill="rgb(249,187,53)"/><text x="664.00" y="1486.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="661" y="1492" width="2" height="15" fill="rgb(249,75,13)"/><text x="664.00" y="1502.50"></text></g><g><title>0x7f7915bad181 (?) (1 samples, 0.16%)</title><rect x="661" y="1508" width="2" height="15" fill="rgb(231,57,24)"/><text x="664.00" y="1518.50"></text></g><g><title>0x7f7915bb01c9 (?) (1 samples, 0.16%)</title><rect x="661" y="1524" width="2" height="15" fill="rgb(219,215,9)"/><text x="664.00" y="1534.50"></text></g><g><title>0x7f7915bdc167 (?) (1 samples, 0.16%)</title><rect x="661" y="1540" width="2" height="15" fill="rgb(254,162,50)"/><text x="664.00" y="1550.50"></text></g><g><title>0x7f7915bd7b64 (?) (1 samples, 0.16%)</title><rect x="661" y="1556" width="2" height="15" fill="rgb(251,158,35)"/><text x="664.00" y="1566.50"></text></g><g><title>0x7f7915bbb07b (?) (1 samples, 0.16%)</title><rect x="661" y="1572" width="2" height="15" fill="rgb(247,148,49)"/><text x="664.00" y="1582.50"></text></g><g><title>_lazy (pytz/lazy.py:101) (1 samples, 0.16%)</title><rect x="661" y="1588" width="2" height="15" fill="rgb(214,92,36)"/><text x="664.00" y="1598.50"></text></g><g><title>&lt;genexpr&gt; (pytz/__init__.py:1104) (1 samples, 0.16%)</title><rect x="661" y="1604" width="2" height="15" fill="rgb(233,185,31)"/><text x="664.00" y="1614.50"></text></g><g><title>resource_exists (pytz/__init__.py:114) (1 samples, 0.16%)</title><rect x="661" y="1620" width="2" height="15" fill="rgb(231,180,7)"/><text x="664.00" y="1630.50"></text></g><g><title>open_resource (pytz/__init__.py:97) (1 samples, 0.16%)</title><rect x="661" y="1636" width="2" height="15" fill="rgb(233,169,36)"/><text x="664.00" y="1646.50"></text></g><g><title>exists (genericpath.py:19) (1 samples, 0.16%)</title><rect x="661" y="1652" width="2" height="15" fill="rgb(220,61,45)"/><text x="664.00" y="1662.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.16%)</title><rect x="661" y="1668" width="2" height="15" fill="rgb(240,158,54)"/><text x="664.00" y="1678.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (2 samples, 0.32%)</title><rect x="661" y="436" width="4" height="15" fill="rgb(227,41,10)"/><text x="664.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="661" y="452" width="4" height="15" fill="rgb(234,59,12)"/><text x="664.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="661" y="468" width="4" height="15" fill="rgb(254,73,48)"/><text x="664.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="661" y="484" width="4" height="15" fill="rgb(247,226,40)"/><text x="664.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="661" y="500" width="4" height="15" fill="rgb(253,228,47)"/><text x="664.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="661" y="516" width="4" height="15" fill="rgb(242,222,9)"/><text x="664.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (2 samples, 0.32%)</title><rect x="661" y="532" width="4" height="15" fill="rgb(219,196,43)"/><text x="664.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="661" y="548" width="4" height="15" fill="rgb(217,53,54)"/><text x="664.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="661" y="564" width="4" height="15" fill="rgb(253,49,51)"/><text x="664.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="661" y="580" width="4" height="15" fill="rgb(254,190,45)"/><text x="664.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="661" y="596" width="4" height="15" fill="rgb(214,177,15)"/><text x="664.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="661" y="612" width="4" height="15" fill="rgb(248,215,12)"/><text x="664.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (1 samples, 0.16%)</title><rect x="663" y="628" width="2" height="15" fill="rgb(209,53,37)"/><text x="666.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="644" width="2" height="15" fill="rgb(243,211,36)"/><text x="666.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="660" width="2" height="15" fill="rgb(247,66,17)"/><text x="666.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="676" width="2" height="15" fill="rgb(210,186,12)"/><text x="666.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="692" width="2" height="15" fill="rgb(253,122,54)"/><text x="666.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="708" width="2" height="15" fill="rgb(249,36,41)"/><text x="666.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (1 samples, 0.16%)</title><rect x="663" y="724" width="2" height="15" fill="rgb(205,22,5)"/><text x="666.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="740" width="2" height="15" fill="rgb(211,61,54)"/><text x="666.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="756" width="2" height="15" fill="rgb(232,68,41)"/><text x="666.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="772" width="2" height="15" fill="rgb(245,201,1)"/><text x="666.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="788" width="2" height="15" fill="rgb(229,31,31)"/><text x="666.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="804" width="2" height="15" fill="rgb(236,69,5)"/><text x="666.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (1 samples, 0.16%)</title><rect x="663" y="820" width="2" height="15" fill="rgb(227,100,0)"/><text x="666.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="836" width="2" height="15" fill="rgb(250,176,42)"/><text x="666.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="852" width="2" height="15" fill="rgb(208,125,26)"/><text x="666.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="868" width="2" height="15" fill="rgb(248,90,47)"/><text x="666.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="884" width="2" height="15" fill="rgb(239,87,10)"/><text x="666.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="900" width="2" height="15" fill="rgb(246,213,1)"/><text x="666.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:44) (1 samples, 0.16%)</title><rect x="663" y="916" width="2" height="15" fill="rgb(249,163,33)"/><text x="666.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="932" width="2" height="15" fill="rgb(239,125,4)"/><text x="666.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="948" width="2" height="15" fill="rgb(230,149,39)"/><text x="666.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="964" width="2" height="15" fill="rgb(222,105,24)"/><text x="666.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="980" width="2" height="15" fill="rgb(221,96,43)"/><text x="666.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="996" width="2" height="15" fill="rgb(254,138,13)"/><text x="666.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py:115) (1 samples, 0.16%)</title><rect x="663" y="1012" width="2" height="15" fill="rgb(230,197,21)"/><text x="666.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="1028" width="2" height="15" fill="rgb(221,124,14)"/><text x="666.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="1044" width="2" height="15" fill="rgb(240,189,19)"/><text x="666.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="1060" width="2" height="15" fill="rgb(214,200,51)"/><text x="666.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="1076" width="2" height="15" fill="rgb(234,64,39)"/><text x="666.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="1092" width="2" height="15" fill="rgb(245,225,30)"/><text x="666.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py:84) (1 samples, 0.16%)</title><rect x="663" y="1108" width="2" height="15" fill="rgb(237,82,24)"/><text x="666.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="1124" width="2" height="15" fill="rgb(221,78,50)"/><text x="666.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="1140" width="2" height="15" fill="rgb(227,0,38)"/><text x="666.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="1156" width="2" height="15" fill="rgb(252,46,41)"/><text x="666.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="1172" width="2" height="15" fill="rgb(237,60,8)"/><text x="666.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="1188" width="2" height="15" fill="rgb(244,177,19)"/><text x="666.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py:59) (1 samples, 0.16%)</title><rect x="663" y="1204" width="2" height="15" fill="rgb(227,106,25)"/><text x="666.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="1220" width="2" height="15" fill="rgb(213,40,42)"/><text x="666.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="1236" width="2" height="15" fill="rgb(242,95,2)"/><text x="666.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="1252" width="2" height="15" fill="rgb(222,118,23)"/><text x="666.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="1268" width="2" height="15" fill="rgb(205,94,0)"/><text x="666.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="1284" width="2" height="15" fill="rgb(214,168,44)"/><text x="666.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py:17) (1 samples, 0.16%)</title><rect x="663" y="1300" width="2" height="15" fill="rgb(224,47,23)"/><text x="666.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="1316" width="2" height="15" fill="rgb(226,180,28)"/><text x="666.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="1332" width="2" height="15" fill="rgb(252,192,3)"/><text x="666.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="1348" width="2" height="15" fill="rgb(251,167,3)"/><text x="666.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="1364" width="2" height="15" fill="rgb(248,207,42)"/><text x="666.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="1380" width="2" height="15" fill="rgb(229,83,18)"/><text x="666.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py:3) (1 samples, 0.16%)</title><rect x="663" y="1396" width="2" height="15" fill="rgb(224,146,12)"/><text x="666.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="1412" width="2" height="15" fill="rgb(243,17,42)"/><text x="666.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="1428" width="2" height="15" fill="rgb(214,206,2)"/><text x="666.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="1444" width="2" height="15" fill="rgb(254,130,32)"/><text x="666.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="1460" width="2" height="15" fill="rgb(239,206,14)"/><text x="666.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="1476" width="2" height="15" fill="rgb(207,108,35)"/><text x="666.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py:13) (1 samples, 0.16%)</title><rect x="663" y="1492" width="2" height="15" fill="rgb(251,76,18)"/><text x="666.00" y="1502.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.16%)</title><rect x="663" y="1508" width="2" height="15" fill="rgb(213,41,1)"/><text x="666.00" y="1518.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="1524" width="2" height="15" fill="rgb(215,18,24)"/><text x="666.00" y="1534.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="1540" width="2" height="15" fill="rgb(246,169,2)"/><text x="666.00" y="1550.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="1556" width="2" height="15" fill="rgb(244,6,13)"/><text x="666.00" y="1566.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="1572" width="2" height="15" fill="rgb(250,209,27)"/><text x="666.00" y="1582.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="1588" width="2" height="15" fill="rgb(246,94,53)"/><text x="666.00" y="1598.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="1604" width="2" height="15" fill="rgb(242,83,40)"/><text x="666.00" y="1614.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/converter.py:6) (1 samples, 0.16%)</title><rect x="663" y="1620" width="2" height="15" fill="rgb(229,177,25)"/><text x="666.00" y="1630.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="1636" width="2" height="15" fill="rgb(209,84,45)"/><text x="666.00" y="1646.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="1652" width="2" height="15" fill="rgb(252,43,5)"/><text x="666.00" y="1662.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="1668" width="2" height="15" fill="rgb(254,68,12)"/><text x="666.00" y="1678.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="1684" width="2" height="15" fill="rgb(222,185,44)"/><text x="666.00" y="1694.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="1700" width="2" height="15" fill="rgb(214,59,8)"/><text x="666.00" y="1710.50"></text></g><g><title>&lt;module&gt; (matplotlib/dates.py:159) (1 samples, 0.16%)</title><rect x="663" y="1716" width="2" height="15" fill="rgb(228,115,32)"/><text x="666.00" y="1726.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="663" y="1732" width="2" height="15" fill="rgb(216,208,12)"/><text x="666.00" y="1742.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="663" y="1748" width="2" height="15" fill="rgb(218,14,19)"/><text x="666.00" y="1758.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="663" y="1764" width="2" height="15" fill="rgb(216,178,2)"/><text x="666.00" y="1774.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="663" y="1780" width="2" height="15" fill="rgb(233,74,31)"/><text x="666.00" y="1790.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="663" y="1796" width="2" height="15" fill="rgb(209,18,44)"/><text x="666.00" y="1806.50"></text></g><g><title>&lt;module&gt; (matplotlib/ticker.py:839) (1 samples, 0.16%)</title><rect x="663" y="1812" width="2" height="15" fill="rgb(218,75,33)"/><text x="666.00" y="1822.50"></text></g><g><title>LogFormatter (matplotlib/ticker.py:1041) (1 samples, 0.16%)</title><rect x="663" y="1828" width="2" height="15" fill="rgb(211,140,49)"/><text x="666.00" y="1838.50"></text></g><g><title>deprecate (matplotlib/cbook/deprecation.py:264) (1 samples, 0.16%)</title><rect x="663" y="1844" width="2" height="15" fill="rgb(217,93,28)"/><text x="666.00" y="1854.50"></text></g><g><title>finalize (matplotlib/cbook/deprecation.py:238) (1 samples, 0.16%)</title><rect x="663" y="1860" width="2" height="15" fill="rgb(250,143,20)"/><text x="666.00" y="1870.50"></text></g><g><title>update_wrapper (functools.py:60) (1 samples, 0.16%)</title><rect x="663" y="1876" width="2" height="15" fill="rgb(212,151,17)"/><text x="666.00" y="1886.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:963) (1 samples, 0.16%)</title><rect x="665" y="1236" width="2" height="15" fill="rgb(229,174,1)"/><text x="668.00" y="1246.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;:906) (1 samples, 0.16%)</title><rect x="665" y="1252" width="2" height="15" fill="rgb(232,199,28)"/><text x="668.00" y="1262.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1280) (1 samples, 0.16%)</title><rect x="665" y="1268" width="2" height="15" fill="rgb(216,135,20)"/><text x="668.00" y="1278.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1252) (1 samples, 0.16%)</title><rect x="665" y="1284" width="2" height="15" fill="rgb(250,130,17)"/><text x="668.00" y="1294.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1364) (1 samples, 0.16%)</title><rect x="665" y="1300" width="2" height="15" fill="rgb(240,223,15)"/><text x="668.00" y="1310.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;:81) (1 samples, 0.16%)</title><rect x="665" y="1316" width="2" height="15" fill="rgb(221,229,6)"/><text x="668.00" y="1326.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.16%)</title><rect x="665" y="1332" width="2" height="15" fill="rgb(213,181,47)"/><text x="668.00" y="1342.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:10) (2 samples, 0.32%)</title><rect x="665" y="1108" width="4" height="15" fill="rgb(208,211,32)"/><text x="668.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="665" y="1124" width="4" height="15" fill="rgb(254,168,26)"/><text x="668.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="665" y="1140" width="4" height="15" fill="rgb(240,4,24)"/><text x="668.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="665" y="1156" width="4" height="15" fill="rgb(240,138,39)"/><text x="668.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="665" y="1172" width="4" height="15" fill="rgb(239,48,4)"/><text x="668.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="665" y="1188" width="4" height="15" fill="rgb(254,141,19)"/><text x="668.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py:27) (2 samples, 0.32%)</title><rect x="665" y="1204" width="4" height="15" fill="rgb(219,208,54)"/><text x="668.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="665" y="1220" width="4" height="15" fill="rgb(222,126,25)"/><text x="668.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="667" y="1236" width="2" height="15" fill="rgb(205,12,17)"/><text x="670.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="667" y="1252" width="2" height="15" fill="rgb(214,148,53)"/><text x="670.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="667" y="1268" width="2" height="15" fill="rgb(241,113,25)"/><text x="670.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="667" y="1284" width="2" height="15" fill="rgb(247,78,36)"/><text x="670.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_container.py:70) (1 samples, 0.16%)</title><rect x="667" y="1300" width="2" height="15" fill="rgb(245,204,35)"/><text x="670.00" y="1310.50"></text></g><g><title>_get_operation_list (skl2onnx/common/_container.py:49) (1 samples, 0.16%)</title><rect x="667" y="1316" width="2" height="15" fill="rgb(233,40,13)"/><text x="670.00" y="1326.50"></text></g><g><title>getsource (inspect.py:973) (1 samples, 0.16%)</title><rect x="667" y="1332" width="2" height="15" fill="rgb(242,76,16)"/><text x="670.00" y="1342.50"></text></g><g><title>getsourcelines (inspect.py:965) (1 samples, 0.16%)</title><rect x="667" y="1348" width="2" height="15" fill="rgb(212,198,24)"/><text x="670.00" y="1358.50"></text></g><g><title>getblock (inspect.py:940) (1 samples, 0.16%)</title><rect x="667" y="1364" width="2" height="15" fill="rgb(221,125,14)"/><text x="670.00" y="1374.50"></text></g><g><title>_tokenize (tokenize.py:628) (1 samples, 0.16%)</title><rect x="667" y="1380" width="2" height="15" fill="rgb(241,25,29)"/><text x="670.00" y="1390.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:4) (11 samples, 1.77%)</title><rect x="650" y="52" width="21" height="15" fill="rgb(234,73,22)"/><text x="653.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 1.77%)</title><rect x="650" y="68" width="21" height="15" fill="rgb(210,185,23)"/><text x="653.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 1.77%)</title><rect x="650" y="84" width="21" height="15" fill="rgb(235,118,5)"/><text x="653.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 1.77%)</title><rect x="650" y="100" width="21" height="15" fill="rgb(220,56,49)"/><text x="653.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 1.77%)</title><rect x="650" y="116" width="21" height="15" fill="rgb(224,109,37)"/><text x="653.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 1.77%)</title><rect x="650" y="132" width="21" height="15" fill="rgb(250,186,31)"/><text x="653.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_m_cl.py:7) (8 samples, 1.29%)</title><rect x="656" y="148" width="15" height="15" fill="rgb(206,102,41)"/><text x="659.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.29%)</title><rect x="656" y="164" width="15" height="15" fill="rgb(206,58,35)"/><text x="659.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 1.29%)</title><rect x="656" y="180" width="15" height="15" fill="rgb(211,144,13)"/><text x="659.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 1.29%)</title><rect x="656" y="196" width="15" height="15" fill="rgb(212,184,36)"/><text x="659.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 1.29%)</title><rect x="656" y="212" width="15" height="15" fill="rgb(237,19,50)"/><text x="659.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.29%)</title><rect x="656" y="228" width="15" height="15" fill="rgb(239,15,49)"/><text x="659.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (5 samples, 0.81%)</title><rect x="661" y="244" width="10" height="15" fill="rgb(235,62,19)"/><text x="664.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.81%)</title><rect x="661" y="260" width="10" height="15" fill="rgb(217,52,34)"/><text x="664.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.81%)</title><rect x="661" y="276" width="10" height="15" fill="rgb(249,185,19)"/><text x="664.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.81%)</title><rect x="661" y="292" width="10" height="15" fill="rgb(242,3,21)"/><text x="664.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.81%)</title><rect x="661" y="308" width="10" height="15" fill="rgb(220,113,32)"/><text x="664.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.81%)</title><rect x="661" y="324" width="10" height="15" fill="rgb(217,29,52)"/><text x="664.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (5 samples, 0.81%)</title><rect x="661" y="340" width="10" height="15" fill="rgb(236,60,26)"/><text x="664.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.81%)</title><rect x="661" y="356" width="10" height="15" fill="rgb(227,117,40)"/><text x="664.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.81%)</title><rect x="661" y="372" width="10" height="15" fill="rgb(207,95,47)"/><text x="664.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.81%)</title><rect x="661" y="388" width="10" height="15" fill="rgb(222,226,17)"/><text x="664.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.81%)</title><rect x="661" y="404" width="10" height="15" fill="rgb(237,86,20)"/><text x="664.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.81%)</title><rect x="661" y="420" width="10" height="15" fill="rgb(245,226,46)"/><text x="664.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (3 samples, 0.48%)</title><rect x="665" y="436" width="6" height="15" fill="rgb(230,4,54)"/><text x="668.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="665" y="452" width="6" height="15" fill="rgb(218,157,46)"/><text x="668.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.48%)</title><rect x="665" y="468" width="6" height="15" fill="rgb(253,1,42)"/><text x="668.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="665" y="484" width="6" height="15" fill="rgb(209,228,25)"/><text x="668.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="665" y="500" width="6" height="15" fill="rgb(223,189,28)"/><text x="668.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.48%)</title><rect x="665" y="516" width="6" height="15" fill="rgb(214,169,27)"/><text x="668.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.48%)</title><rect x="665" y="532" width="6" height="15" fill="rgb(208,111,48)"/><text x="668.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.48%)</title><rect x="665" y="548" width="6" height="15" fill="rgb(207,145,45)"/><text x="668.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="665" y="564" width="6" height="15" fill="rgb(209,38,18)"/><text x="668.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (3 samples, 0.48%)</title><rect x="665" y="580" width="6" height="15" fill="rgb(229,76,15)"/><text x="668.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="665" y="596" width="6" height="15" fill="rgb(242,87,53)"/><text x="668.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.48%)</title><rect x="665" y="612" width="6" height="15" fill="rgb(212,131,14)"/><text x="668.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.48%)</title><rect x="665" y="628" width="6" height="15" fill="rgb(228,120,39)"/><text x="668.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.48%)</title><rect x="665" y="644" width="6" height="15" fill="rgb(240,77,52)"/><text x="668.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="665" y="660" width="6" height="15" fill="rgb(205,214,26)"/><text x="668.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (3 samples, 0.48%)</title><rect x="665" y="676" width="6" height="15" fill="rgb(212,215,13)"/><text x="668.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="665" y="692" width="6" height="15" fill="rgb(211,209,45)"/><text x="668.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.48%)</title><rect x="665" y="708" width="6" height="15" fill="rgb(248,104,8)"/><text x="668.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.48%)</title><rect x="665" y="724" width="6" height="15" fill="rgb(246,172,20)"/><text x="668.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.48%)</title><rect x="665" y="740" width="6" height="15" fill="rgb(237,23,47)"/><text x="668.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="665" y="756" width="6" height="15" fill="rgb(215,137,17)"/><text x="668.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (3 samples, 0.48%)</title><rect x="665" y="772" width="6" height="15" fill="rgb(235,88,20)"/><text x="668.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="665" y="788" width="6" height="15" fill="rgb(219,30,52)"/><text x="668.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.48%)</title><rect x="665" y="804" width="6" height="15" fill="rgb(239,114,53)"/><text x="668.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.48%)</title><rect x="665" y="820" width="6" height="15" fill="rgb(224,97,47)"/><text x="668.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.48%)</title><rect x="665" y="836" width="6" height="15" fill="rgb(238,210,52)"/><text x="668.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="665" y="852" width="6" height="15" fill="rgb(221,181,5)"/><text x="668.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (3 samples, 0.48%)</title><rect x="665" y="868" width="6" height="15" fill="rgb(220,137,32)"/><text x="668.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="665" y="884" width="6" height="15" fill="rgb(218,184,14)"/><text x="668.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.48%)</title><rect x="665" y="900" width="6" height="15" fill="rgb(248,221,11)"/><text x="668.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="665" y="916" width="6" height="15" fill="rgb(233,119,32)"/><text x="668.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="665" y="932" width="6" height="15" fill="rgb(217,17,36)"/><text x="668.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.48%)</title><rect x="665" y="948" width="6" height="15" fill="rgb(215,171,41)"/><text x="668.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.48%)</title><rect x="665" y="964" width="6" height="15" fill="rgb(220,80,27)"/><text x="668.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.48%)</title><rect x="665" y="980" width="6" height="15" fill="rgb(241,89,42)"/><text x="668.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="665" y="996" width="6" height="15" fill="rgb(219,49,23)"/><text x="668.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (3 samples, 0.48%)</title><rect x="665" y="1012" width="6" height="15" fill="rgb(210,131,5)"/><text x="668.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="665" y="1028" width="6" height="15" fill="rgb(221,203,36)"/><text x="668.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.48%)</title><rect x="665" y="1044" width="6" height="15" fill="rgb(244,23,1)"/><text x="668.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.48%)</title><rect x="665" y="1060" width="6" height="15" fill="rgb(245,185,31)"/><text x="668.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.48%)</title><rect x="665" y="1076" width="6" height="15" fill="rgb(216,109,42)"/><text x="668.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="665" y="1092" width="6" height="15" fill="rgb(236,139,37)"/><text x="668.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:11) (1 samples, 0.16%)</title><rect x="669" y="1108" width="2" height="15" fill="rgb(207,53,34)"/><text x="672.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="669" y="1124" width="2" height="15" fill="rgb(248,207,31)"/><text x="672.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="669" y="1140" width="2" height="15" fill="rgb(238,59,43)"/><text x="672.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="669" y="1156" width="2" height="15" fill="rgb(254,54,22)"/><text x="672.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="669" y="1172" width="2" height="15" fill="rgb(206,221,21)"/><text x="672.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="669" y="1188" width="2" height="15" fill="rgb(242,72,4)"/><text x="672.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/_parse.py:9) (1 samples, 0.16%)</title><rect x="669" y="1204" width="2" height="15" fill="rgb(214,79,6)"/><text x="672.00" y="1214.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.16%)</title><rect x="669" y="1220" width="2" height="15" fill="rgb(235,215,12)"/><text x="672.00" y="1230.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="669" y="1236" width="2" height="15" fill="rgb(215,199,36)"/><text x="672.00" y="1246.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="669" y="1252" width="2" height="15" fill="rgb(208,212,7)"/><text x="672.00" y="1262.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:963) (1 samples, 0.16%)</title><rect x="669" y="1268" width="2" height="15" fill="rgb(254,89,33)"/><text x="672.00" y="1278.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;:906) (1 samples, 0.16%)</title><rect x="669" y="1284" width="2" height="15" fill="rgb(208,211,21)"/><text x="672.00" y="1294.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1280) (1 samples, 0.16%)</title><rect x="669" y="1300" width="2" height="15" fill="rgb(214,156,7)"/><text x="672.00" y="1310.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;:1252) (1 samples, 0.16%)</title><rect x="669" y="1316" width="2" height="15" fill="rgb(239,110,45)"/><text x="672.00" y="1326.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1375) (1 samples, 0.16%)</title><rect x="669" y="1332" width="2" height="15" fill="rgb(241,126,33)"/><text x="672.00" y="1342.50"></text></g><g><title>change_style (mlprodict/tools/code_helper.py:16) (1 samples, 0.16%)</title><rect x="671" y="500" width="2" height="15" fill="rgb(245,217,38)"/><text x="674.00" y="510.50"></text></g><g><title>sub (re.py:192) (1 samples, 0.16%)</title><rect x="671" y="516" width="2" height="15" fill="rgb(219,141,35)"/><text x="674.00" y="526.50"></text></g><g><title>_sre_SRE_Pattern_sub (python3.7) (1 samples, 0.16%)</title><rect x="671" y="532" width="2" height="15" fill="rgb(209,18,15)"/><text x="674.00" y="542.50"></text></g><g><title>sre_search.cold.44 (python3.7) (1 samples, 0.16%)</title><rect x="671" y="548" width="2" height="15" fill="rgb(207,220,24)"/><text x="674.00" y="558.50"></text></g><g><title>sre_ucs1_match (python3.7) (1 samples, 0.16%)</title><rect x="671" y="564" width="2" height="15" fill="rgb(244,142,14)"/><text x="674.00" y="574.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="671" y="580" width="2" height="15" fill="rgb(223,121,28)"/><text x="674.00" y="590.50"></text></g><g><title>setup_profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:28) (2 samples, 0.32%)</title><rect x="671" y="84" width="4" height="15" fill="rgb(226,33,7)"/><text x="674.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (2 samples, 0.32%)</title><rect x="671" y="100" width="4" height="15" fill="rgb(215,98,7)"/><text x="674.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:230) (2 samples, 0.32%)</title><rect x="671" y="116" width="4" height="15" fill="rgb(206,206,10)"/><text x="674.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py:114) (2 samples, 0.32%)</title><rect x="671" y="132" width="4" height="15" fill="rgb(235,17,36)"/><text x="674.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py:62) (2 samples, 0.32%)</title><rect x="671" y="148" width="4" height="15" fill="rgb(216,217,22)"/><text x="674.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py:115) (2 samples, 0.32%)</title><rect x="671" y="164" width="4" height="15" fill="rgb(249,24,17)"/><text x="674.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py:101) (2 samples, 0.32%)</title><rect x="671" y="180" width="4" height="15" fill="rgb(229,209,10)"/><text x="674.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py:28) (2 samples, 0.32%)</title><rect x="671" y="196" width="4" height="15" fill="rgb(228,160,5)"/><text x="674.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="671" y="212" width="4" height="15" fill="rgb(217,213,32)"/><text x="674.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="671" y="228" width="4" height="15" fill="rgb(223,146,2)"/><text x="674.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="671" y="244" width="4" height="15" fill="rgb(206,134,0)"/><text x="674.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="671" y="260" width="4" height="15" fill="rgb(211,35,11)"/><text x="674.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="671" y="276" width="4" height="15" fill="rgb(245,65,28)"/><text x="674.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py:7) (2 samples, 0.32%)</title><rect x="671" y="292" width="4" height="15" fill="rgb(249,108,42)"/><text x="674.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="671" y="308" width="4" height="15" fill="rgb(251,41,0)"/><text x="674.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="671" y="324" width="4" height="15" fill="rgb(207,71,51)"/><text x="674.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="671" y="340" width="4" height="15" fill="rgb(228,225,38)"/><text x="674.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="671" y="356" width="4" height="15" fill="rgb(217,64,48)"/><text x="674.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="671" y="372" width="4" height="15" fill="rgb(223,171,43)"/><text x="674.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py:88) (2 samples, 0.32%)</title><rect x="671" y="388" width="4" height="15" fill="rgb(219,81,34)"/><text x="674.00" y="398.50"></text></g><g><title>get_rst_doc (mlprodict/onnxrt/doc/doc_helper.py:268) (2 samples, 0.32%)</title><rect x="671" y="404" width="4" height="15" fill="rgb(220,121,19)"/><text x="674.00" y="414.50"></text></g><g><title>render (jinja2/asyncsupport.py:76) (2 samples, 0.32%)</title><rect x="671" y="420" width="4" height="15" fill="rgb(236,106,33)"/><text x="674.00" y="430.50"></text></g><g><title>render (jinja2/environment.py:1005) (2 samples, 0.32%)</title><rect x="671" y="436" width="4" height="15" fill="rgb(239,209,45)"/><text x="674.00" y="446.50"></text></g><g><title>unicode_join (python3.7) (2 samples, 0.32%)</title><rect x="671" y="452" width="4" height="15" fill="rgb(206,204,14)"/><text x="674.00" y="462.50"></text></g><g><title>root (&lt;template&gt;:149) (2 samples, 0.32%)</title><rect x="671" y="468" width="4" height="15" fill="rgb(249,178,22)"/><text x="674.00" y="478.50"></text></g><g><title>call (jinja2/runtime.py:262) (2 samples, 0.32%)</title><rect x="671" y="484" width="4" height="15" fill="rgb(212,226,26)"/><text x="674.00" y="494.50"></text></g><g><title>change_style (mlprodict/tools/code_helper.py:17) (1 samples, 0.16%)</title><rect x="673" y="500" width="2" height="15" fill="rgb(231,91,15)"/><text x="676.00" y="510.50"></text></g><g><title>sub (re.py:192) (1 samples, 0.16%)</title><rect x="673" y="516" width="2" height="15" fill="rgb(253,107,6)"/><text x="676.00" y="526.50"></text></g><g><title>_sre_SRE_Pattern_sub (python3.7) (1 samples, 0.16%)</title><rect x="673" y="532" width="2" height="15" fill="rgb(239,189,36)"/><text x="676.00" y="542.50"></text></g><g><title>0x7f79027d7422 (?) (1 samples, 0.16%)</title><rect x="675" y="244" width="1" height="15" fill="rgb(226,69,54)"/><text x="678.00" y="254.50"></text></g><g><title>0x7f79027dd89e (?) (1 samples, 0.16%)</title><rect x="675" y="260" width="1" height="15" fill="rgb(212,171,40)"/><text x="678.00" y="270.50"></text></g><g><title>0x7f79027dd74f (?) (1 samples, 0.16%)</title><rect x="675" y="276" width="1" height="15" fill="rgb(224,185,23)"/><text x="678.00" y="286.50"></text></g><g><title>0x7f79027e3a3a (?) (1 samples, 0.16%)</title><rect x="675" y="292" width="1" height="15" fill="rgb(236,57,39)"/><text x="678.00" y="302.50"></text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (1 samples, 0.16%)</title><rect x="675" y="308" width="1" height="15" fill="rgb(225,15,14)"/><text x="678.00" y="318.50"></text></g><g><title>0x7f79027de78c (?) (1 samples, 0.16%)</title><rect x="675" y="324" width="1" height="15" fill="rgb(218,69,30)"/><text x="678.00" y="334.50"></text></g><g><title>0x7f79027ca3d2 (?) (1 samples, 0.16%)</title><rect x="675" y="340" width="1" height="15" fill="rgb(208,141,30)"/><text x="678.00" y="350.50"></text></g><g><title>0x7f790bb00ea9 (libgomp.so.1.0.0) (1 samples, 0.16%)</title><rect x="676" y="468" width="2" height="15" fill="rgb(232,207,11)"/><text x="679.00" y="478.50"></text></g><g><title>0x7f790baffab9 (libgomp.so.1.0.0) (2 samples, 0.32%)</title><rect x="676" y="452" width="4" height="15" fill="rgb(237,141,0)"/><text x="679.00" y="462.50"></text></g><g><title>0x7f790bb00eab (libgomp.so.1.0.0) (1 samples, 0.16%)</title><rect x="678" y="468" width="2" height="15" fill="rgb(235,4,5)"/><text x="681.00" y="478.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:423) (1 samples, 0.16%)</title><rect x="680" y="468" width="2" height="15" fill="rgb(248,49,52)"/><text x="683.00" y="478.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::~vector (stl_vector.h:426) (1 samples, 0.16%)</title><rect x="680" y="484" width="2" height="15" fill="rgb(230,94,37)"/><text x="683.00" y="494.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.16%)</title><rect x="680" y="500" width="2" height="15" fill="rgb(228,150,51)"/><text x="683.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:525) (6 samples, 0.97%)</title><rect x="682" y="484" width="12" height="15" fill="rgb(219,146,27)"/><text x="685.00" y="494.50"></text></g><g><title>std::isnan (cmath:642) (2 samples, 0.32%)</title><rect x="690" y="500" width="4" height="15" fill="rgb(223,101,30)"/><text x="693.00" y="510.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1669) (1 samples, 0.16%)</title><rect x="694" y="532" width="1" height="15" fill="rgb(227,70,34)"/><text x="697.00" y="542.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:605) (8 samples, 1.29%)</title><rect x="694" y="484" width="15" height="15" fill="rgb(245,143,12)"/><text x="697.00" y="494.50"></text></g><g><title>std::map&lt;long, long, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_map.h:1105) (8 samples, 1.29%)</title><rect x="694" y="500" width="15" height="15" fill="rgb(227,65,17)"/><text x="697.00" y="510.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h:2334) (8 samples, 1.29%)</title><rect x="694" y="516" width="15" height="15" fill="rgb(244,40,0)"/><text x="697.00" y="526.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1670) (7 samples, 1.13%)</title><rect x="695" y="532" width="14" height="15" fill="rgb(217,131,18)"/><text x="698.00" y="542.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:615) (3 samples, 0.48%)</title><rect x="709" y="484" width="5" height="15" fill="rgb(234,171,9)"/><text x="712.00" y="494.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:18) (22 samples, 3.54%)</title><rect x="675" y="100" width="41" height="15" fill="rgb(209,58,25)"/><text x="678.00" y="110.50">pro..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (22 samples, 3.54%)</title><rect x="675" y="116" width="41" height="15" fill="rgb(249,2,16)"/><text x="678.00" y="126.50">tim..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (22 samples, 3.54%)</title><rect x="675" y="132" width="41" height="15" fill="rgb(254,182,33)"/><text x="678.00" y="142.50">&lt;la..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (22 samples, 3.54%)</title><rect x="675" y="148" width="41" height="15" fill="rgb(232,132,8)"/><text x="678.00" y="158.50">run..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (22 samples, 3.54%)</title><rect x="675" y="164" width="41" height="15" fill="rgb(218,101,12)"/><text x="678.00" y="174.50">_ru..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (22 samples, 3.54%)</title><rect x="675" y="180" width="41" height="15" fill="rgb(212,28,23)"/><text x="678.00" y="190.50">run..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:381) (22 samples, 3.54%)</title><rect x="675" y="196" width="41" height="15" fill="rgb(226,142,48)"/><text x="678.00" y="206.50">run..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (22 samples, 3.54%)</title><rect x="675" y="212" width="41" height="15" fill="rgb(231,217,0)"/><text x="678.00" y="222.50">run..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py:59) (22 samples, 3.54%)</title><rect x="675" y="228" width="41" height="15" fill="rgb(215,178,1)"/><text x="678.00" y="238.50">_ru..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (21 samples, 3.38%)</title><rect x="676" y="244" width="40" height="15" fill="rgb(207,170,3)"/><text x="679.00" y="254.50">pyb..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (21 samples, 3.38%)</title><rect x="676" y="260" width="40" height="15" fill="rgb(221,101,44)"/><text x="679.00" y="270.50">voi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (21 samples, 3.38%)</title><rect x="676" y="276" width="40" height="15" fill="rgb(226,105,19)"/><text x="679.00" y="286.50">voi..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (21 samples, 3.38%)</title><rect x="676" y="292" width="40" height="15" fill="rgb(237,188,34)"/><text x="679.00" y="302.50">pyb..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (21 samples, 3.38%)</title><rect x="676" y="308" width="40" height="15" fill="rgb(226,82,43)"/><text x="679.00" y="318.50">pyb..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (21 samples, 3.38%)</title><rect x="676" y="324" width="40" height="15" fill="rgb(222,51,19)"/><text x="679.00" y="334.50">pyb..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (21 samples, 3.38%)</title><rect x="676" y="340" width="40" height="15" fill="rgb(213,164,4)"/><text x="679.00" y="350.50">pyb..</text></g><g><title>pybind11::array::~array (numpy.h:538) (21 samples, 3.38%)</title><rect x="676" y="356" width="40" height="15" fill="rgb(246,75,8)"/><text x="679.00" y="366.50">pyb..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (21 samples, 3.38%)</title><rect x="676" y="372" width="40" height="15" fill="rgb(248,142,33)"/><text x="679.00" y="382.50">pyb..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (21 samples, 3.38%)</title><rect x="676" y="388" width="40" height="15" fill="rgb(246,91,28)"/><text x="679.00" y="398.50">pyb..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (21 samples, 3.38%)</title><rect x="676" y="404" width="40" height="15" fill="rgb(254,58,10)"/><text x="679.00" y="414.50">pyb..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:392) (21 samples, 3.38%)</title><rect x="676" y="420" width="40" height="15" fill="rgb(250,140,15)"/><text x="679.00" y="430.50">Run..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h:1983) (21 samples, 3.38%)</title><rect x="676" y="436" width="40" height="15" fill="rgb(254,35,38)"/><text x="679.00" y="446.50">pyb..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (19 samples, 3.06%)</title><rect x="680" y="452" width="36" height="15" fill="rgb(219,64,4)"/><text x="683.00" y="462.50">GOM..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:427) (18 samples, 2.90%)</title><rect x="682" y="468" width="34" height="15" fill="rgb(233,22,16)"/><text x="685.00" y="478.50">Ru..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:618) (1 samples, 0.16%)</title><rect x="714" y="484" width="2" height="15" fill="rgb(247,62,19)"/><text x="717.00" y="494.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (stl_bvector.h:856) (1 samples, 0.16%)</title><rect x="714" y="500" width="2" height="15" fill="rgb(249,166,0)"/><text x="717.00" y="510.50"></text></g><g><title>0x7f790bb00cfb (libgomp.so.1.0.0) (1 samples, 0.16%)</title><rect x="716" y="484" width="2" height="15" fill="rgb(221,52,48)"/><text x="719.00" y="494.50"></text></g><g><title>0x7f790bafedaa (libgomp.so.1.0.0) (2 samples, 0.32%)</title><rect x="716" y="468" width="4" height="15" fill="rgb(218,107,19)"/><text x="719.00" y="478.50"></text></g><g><title>0x7f790bb00cfd (libgomp.so.1.0.0) (1 samples, 0.16%)</title><rect x="718" y="484" width="2" height="15" fill="rgb(216,223,21)"/><text x="721.00" y="494.50"></text></g><g><title>std::isnan (cmath:642) (4 samples, 0.64%)</title><rect x="728" y="500" width="7" height="15" fill="rgb(245,214,38)"/><text x="731.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:525) (9 samples, 1.45%)</title><rect x="720" y="484" width="17" height="15" fill="rgb(214,17,22)"/><text x="723.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::size (stl_vector.h:656) (1 samples, 0.16%)</title><rect x="735" y="500" width="2" height="15" fill="rgb(247,128,22)"/><text x="738.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:604) (2 samples, 0.32%)</title><rect x="737" y="484" width="4" height="15" fill="rgb(233,76,7)"/><text x="740.00" y="494.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1669) (2 samples, 0.32%)</title><rect x="741" y="532" width="4" height="15" fill="rgb(253,25,15)"/><text x="744.00" y="542.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:605) (18 samples, 2.90%)</title><rect x="741" y="484" width="34" height="15" fill="rgb(228,138,34)"/><text x="744.00" y="494.50">Ru..</text></g><g><title>std::map&lt;long, long, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_map.h:1105) (18 samples, 2.90%)</title><rect x="741" y="500" width="34" height="15" fill="rgb(243,73,32)"/><text x="744.00" y="510.50">st..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h:2334) (18 samples, 2.90%)</title><rect x="741" y="516" width="34" height="15" fill="rgb(233,194,9)"/><text x="744.00" y="526.50">st..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1670) (16 samples, 2.58%)</title><rect x="745" y="532" width="30" height="15" fill="rgb(220,11,15)"/><text x="748.00" y="542.50">st..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:609) (1 samples, 0.16%)</title><rect x="775" y="484" width="2" height="15" fill="rgb(253,219,50)"/><text x="778.00" y="494.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:611) (1 samples, 0.16%)</title><rect x="777" y="484" width="2" height="15" fill="rgb(254,6,10)"/><text x="780.00" y="494.50"></text></g><g><title>std::vector&lt;std::tuple&lt;long, long, long, float&gt;, std::allocator&lt;std::tuple&lt;long, long, long, float&gt; &gt; &gt;::operator[] (stl_vector.h:796) (1 samples, 0.16%)</title><rect x="777" y="500" width="2" height="15" fill="rgb(219,167,53)"/><text x="780.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:612) (1 samples, 0.16%)</title><rect x="779" y="484" width="2" height="15" fill="rgb(207,164,4)"/><text x="782.00" y="494.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:615) (4 samples, 0.64%)</title><rect x="781" y="484" width="8" height="15" fill="rgb(254,187,45)"/><text x="784.00" y="494.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:618) (1 samples, 0.16%)</title><rect x="789" y="484" width="1" height="15" fill="rgb(243,17,26)"/><text x="792.00" y="494.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:626) (2 samples, 0.32%)</title><rect x="790" y="484" width="4" height="15" fill="rgb(227,157,51)"/><text x="793.00" y="494.50"></text></g><g><title>std::vector&lt;std::tuple&lt;long, long, long, float&gt;, std::allocator&lt;std::tuple&lt;long, long, long, float&gt; &gt; &gt;::size (stl_vector.h:656) (2 samples, 0.32%)</title><rect x="790" y="500" width="4" height="15" fill="rgb(216,9,41)"/><text x="793.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:629) (1 samples, 0.16%)</title><rect x="794" y="484" width="2" height="15" fill="rgb(215,43,48)"/><text x="797.00" y="494.50"></text></g><g><title>std::vector&lt;std::tuple&lt;long, long, long, float&gt;, std::allocator&lt;std::tuple&lt;long, long, long, float&gt; &gt; &gt;::operator[] (stl_vector.h:796) (1 samples, 0.16%)</title><rect x="794" y="500" width="2" height="15" fill="rgb(253,42,20)"/><text x="797.00" y="510.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:45) (67 samples, 10.79%)</title><rect x="671" y="52" width="127" height="15" fill="rgb(250,63,4)"/><text x="674.00" y="62.50">&lt;module&gt; (bench..</text></g><g><title>profile_pyrt (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:44) (67 samples, 10.79%)</title><rect x="671" y="68" width="127" height="15" fill="rgb(244,1,48)"/><text x="674.00" y="78.50">profile_pyrt (b..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:29) (65 samples, 10.47%)</title><rect x="675" y="84" width="123" height="15" fill="rgb(254,216,3)"/><text x="678.00" y="94.50">setup_profile (..</text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:23) (43 samples, 6.92%)</title><rect x="716" y="100" width="82" height="15" fill="rgb(246,146,36)"/><text x="719.00" y="110.50">profile (..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (43 samples, 6.92%)</title><rect x="716" y="116" width="82" height="15" fill="rgb(211,132,14)"/><text x="719.00" y="126.50">time_pred..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (43 samples, 6.92%)</title><rect x="716" y="132" width="82" height="15" fill="rgb(220,83,45)"/><text x="719.00" y="142.50">&lt;lambda&gt; ..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (43 samples, 6.92%)</title><rect x="716" y="148" width="82" height="15" fill="rgb(231,99,18)"/><text x="719.00" y="158.50">run (mlpr..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (43 samples, 6.92%)</title><rect x="716" y="164" width="82" height="15" fill="rgb(248,44,47)"/><text x="719.00" y="174.50">_run_sequ..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (43 samples, 6.92%)</title><rect x="716" y="180" width="82" height="15" fill="rgb(226,104,39)"/><text x="719.00" y="190.50">run (mlpr..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:381) (43 samples, 6.92%)</title><rect x="716" y="196" width="82" height="15" fill="rgb(221,120,30)"/><text x="719.00" y="206.50">run (mlpr..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (43 samples, 6.92%)</title><rect x="716" y="212" width="82" height="15" fill="rgb(211,131,5)"/><text x="719.00" y="222.50">run (mlpr..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py:59) (43 samples, 6.92%)</title><rect x="716" y="228" width="82" height="15" fill="rgb(222,33,29)"/><text x="719.00" y="238.50">_run (mlp..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (43 samples, 6.92%)</title><rect x="716" y="244" width="82" height="15" fill="rgb(220,195,23)"/><text x="719.00" y="254.50">pybind11:..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (43 samples, 6.92%)</title><rect x="716" y="260" width="82" height="15" fill="rgb(226,220,37)"/><text x="719.00" y="270.50">void pybi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (43 samples, 6.92%)</title><rect x="716" y="276" width="82" height="15" fill="rgb(248,161,19)"/><text x="719.00" y="286.50">void pybi..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (43 samples, 6.92%)</title><rect x="716" y="292" width="82" height="15" fill="rgb(222,73,32)"/><text x="719.00" y="302.50">pybind11:..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (43 samples, 6.92%)</title><rect x="716" y="308" width="82" height="15" fill="rgb(248,64,26)"/><text x="719.00" y="318.50">pybind11:..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (43 samples, 6.92%)</title><rect x="716" y="324" width="82" height="15" fill="rgb(225,77,15)"/><text x="719.00" y="334.50">pybind11:..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (43 samples, 6.92%)</title><rect x="716" y="340" width="82" height="15" fill="rgb(228,195,2)"/><text x="719.00" y="350.50">pybind11:..</text></g><g><title>pybind11::array::~array (numpy.h:538) (43 samples, 6.92%)</title><rect x="716" y="356" width="82" height="15" fill="rgb(246,103,35)"/><text x="719.00" y="366.50">pybind11:..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (43 samples, 6.92%)</title><rect x="716" y="372" width="82" height="15" fill="rgb(242,107,17)"/><text x="719.00" y="382.50">pybind11:..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (43 samples, 6.92%)</title><rect x="716" y="388" width="82" height="15" fill="rgb(237,180,26)"/><text x="719.00" y="398.50">pybind11:..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (43 samples, 6.92%)</title><rect x="716" y="404" width="82" height="15" fill="rgb(212,64,7)"/><text x="719.00" y="414.50">pybind11:..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:392) (43 samples, 6.92%)</title><rect x="716" y="420" width="82" height="15" fill="rgb(238,64,25)"/><text x="719.00" y="430.50">RuntimeTr..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h:1983) (43 samples, 6.92%)</title><rect x="716" y="436" width="82" height="15" fill="rgb(219,123,45)"/><text x="719.00" y="446.50">pybind11:..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (43 samples, 6.92%)</title><rect x="716" y="452" width="82" height="15" fill="rgb(238,44,39)"/><text x="719.00" y="462.50">GOMP_para..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:427) (41 samples, 6.60%)</title><rect x="720" y="468" width="78" height="15" fill="rgb(250,69,39)"/><text x="723.00" y="478.50">RuntimeTr..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:644) (1 samples, 0.16%)</title><rect x="796" y="484" width="2" height="15" fill="rgb(236,65,45)"/><text x="799.00" y="494.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:222) (1 samples, 0.16%)</title><rect x="798" y="116" width="2" height="15" fill="rgb(247,7,9)"/><text x="801.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py:110) (1 samples, 0.16%)</title><rect x="798" y="132" width="2" height="15" fill="rgb(207,201,8)"/><text x="801.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py:346) (1 samples, 0.16%)</title><rect x="798" y="148" width="2" height="15" fill="rgb(226,8,36)"/><text x="801.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py:139) (1 samples, 0.16%)</title><rect x="798" y="164" width="2" height="15" fill="rgb(236,140,7)"/><text x="801.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py:973) (1 samples, 0.16%)</title><rect x="798" y="180" width="2" height="15" fill="rgb(227,49,24)"/><text x="801.00" y="190.50"></text></g><g><title>convert_sklearn_random_forest_classifier (skl2onnx/operator_converters/random_forest.py:60) (1 samples, 0.16%)</title><rect x="798" y="196" width="2" height="15" fill="rgb(215,107,49)"/><text x="801.00" y="206.50"></text></g><g><title>add_tree_to_attribute_pairs (skl2onnx/common/tree_ensemble.py:172) (1 samples, 0.16%)</title><rect x="798" y="212" width="2" height="15" fill="rgb(220,180,32)"/><text x="801.00" y="222.50"></text></g><g><title>0x7f791b56bcd2 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="798" y="228" width="2" height="15" fill="rgb(238,198,25)"/><text x="801.00" y="238.50"></text></g><g><title>array_subscript (mapping.c:1584) (1 samples, 0.16%)</title><rect x="798" y="244" width="2" height="15" fill="rgb(214,18,24)"/><text x="801.00" y="254.50"></text></g><g><title>get_view_from_index (mapping.c:988) (1 samples, 0.16%)</title><rect x="798" y="260" width="2" height="15" fill="rgb(243,132,44)"/><text x="801.00" y="270.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (1 samples, 0.16%)</title><rect x="798" y="276" width="2" height="15" fill="rgb(231,17,22)"/><text x="801.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (1 samples, 0.16%)</title><rect x="798" y="292" width="2" height="15" fill="rgb(210,137,54)"/><text x="801.00" y="302.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (1 samples, 0.16%)</title><rect x="798" y="308" width="2" height="15" fill="rgb(209,45,20)"/><text x="801.00" y="318.50"></text></g><g><title>setup_profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:28) (2 samples, 0.32%)</title><rect x="798" y="84" width="4" height="15" fill="rgb(227,60,50)"/><text x="801.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (2 samples, 0.32%)</title><rect x="798" y="100" width="4" height="15" fill="rgb(224,114,42)"/><text x="801.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:230) (1 samples, 0.16%)</title><rect x="800" y="116" width="2" height="15" fill="rgb(231,105,12)"/><text x="803.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py:114) (1 samples, 0.16%)</title><rect x="800" y="132" width="2" height="15" fill="rgb(225,3,13)"/><text x="803.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py:62) (1 samples, 0.16%)</title><rect x="800" y="148" width="2" height="15" fill="rgb(230,129,7)"/><text x="803.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py:90) (1 samples, 0.16%)</title><rect x="800" y="164" width="2" height="15" fill="rgb(219,114,28)"/><text x="803.00" y="174.50"></text></g><g><title>to_sequence (mlprodict/onnxrt/onnx_inference.py:264) (1 samples, 0.16%)</title><rect x="800" y="180" width="2" height="15" fill="rgb(228,149,14)"/><text x="803.00" y="190.50"></text></g><g><title>_var_as_dict (mlprodict/onnxrt/onnx2py_helper.py:186) (1 samples, 0.16%)</title><rect x="800" y="196" width="2" height="15" fill="rgb(207,39,47)"/><text x="803.00" y="206.50"></text></g><g><title>_var_as_dict (mlprodict/onnxrt/onnx2py_helper.py:160) (1 samples, 0.16%)</title><rect x="800" y="212" width="2" height="15" fill="rgb(237,93,7)"/><text x="803.00" y="222.50"></text></g><g><title>_numpy_array (mlprodict/onnxrt/onnx2py_helper.py:24) (1 samples, 0.16%)</title><rect x="800" y="228" width="2" height="15" fill="rgb(250,5,33)"/><text x="803.00" y="238.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1734) (1 samples, 0.16%)</title><rect x="800" y="244" width="2" height="15" fill="rgb(205,143,8)"/><text x="803.00" y="254.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c:2041) (1 samples, 0.16%)</title><rect x="800" y="260" width="2" height="15" fill="rgb(244,157,40)"/><text x="803.00" y="270.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (1 samples, 0.16%)</title><rect x="800" y="276" width="2" height="15" fill="rgb(251,40,45)"/><text x="803.00" y="286.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (1 samples, 0.16%)</title><rect x="800" y="292" width="2" height="15" fill="rgb(207,202,30)"/><text x="803.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (1 samples, 0.16%)</title><rect x="800" y="308" width="2" height="15" fill="rgb(225,171,51)"/><text x="803.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:448) (1 samples, 0.16%)</title><rect x="800" y="324" width="2" height="15" fill="rgb(206,20,42)"/><text x="803.00" y="334.50"></text></g><g><title>0x7f792fe838f1 (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="800" y="340" width="2" height="15" fill="rgb(251,154,6)"/><text x="803.00" y="350.50"></text></g><g><title>google::protobuf::python::ToStringObject (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="800" y="356" width="2" height="15" fill="rgb(218,223,22)"/><text x="803.00" y="366.50"></text></g><g><title>0x7f7901af7ff9 (?) (1 samples, 0.16%)</title><rect x="802" y="212" width="2" height="15" fill="rgb(226,133,18)"/><text x="805.00" y="222.50"></text></g><g><title>0x7f7901af2ef6 (?) (1 samples, 0.16%)</title><rect x="802" y="228" width="2" height="15" fill="rgb(227,186,16)"/><text x="805.00" y="238.50"></text></g><g><title>0x7f7901ae7962 (?) (1 samples, 0.16%)</title><rect x="802" y="244" width="2" height="15" fill="rgb(207,122,28)"/><text x="805.00" y="254.50"></text></g><g><title>0x7f7901b1b7a7 (?) (1 samples, 0.16%)</title><rect x="802" y="260" width="2" height="15" fill="rgb(254,60,7)"/><text x="805.00" y="270.50"></text></g><g><title>0x7f7901b1b379 (?) (1 samples, 0.16%)</title><rect x="802" y="276" width="2" height="15" fill="rgb(220,203,43)"/><text x="805.00" y="286.50"></text></g><g><title>0x7f7901f798b8 (?) (1 samples, 0.16%)</title><rect x="802" y="292" width="2" height="15" fill="rgb(242,218,25)"/><text x="805.00" y="302.50"></text></g><g><title>0x7f7901f77c7f (?) (1 samples, 0.16%)</title><rect x="802" y="308" width="2" height="15" fill="rgb(244,157,26)"/><text x="805.00" y="318.50"></text></g><g><title>0x7f7901f8a99c (?) (1 samples, 0.16%)</title><rect x="802" y="324" width="2" height="15" fill="rgb(248,22,35)"/><text x="805.00" y="334.50"></text></g><g><title>0x7f7901ca819e (?) (1 samples, 0.16%)</title><rect x="802" y="340" width="2" height="15" fill="rgb(242,174,9)"/><text x="805.00" y="350.50"></text></g><g><title>0x7f7901ca4ed7 (?) (1 samples, 0.16%)</title><rect x="802" y="356" width="2" height="15" fill="rgb(220,43,40)"/><text x="805.00" y="366.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (74 samples, 11.92%)</title><rect x="811" y="356" width="141" height="15" fill="rgb(244,6,20)"/><text x="814.00" y="366.50">onnxruntime::ml::..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;long, float&gt;&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="950" y="372" width="2" height="15" fill="rgb(245,75,15)"/><text x="953.00" y="382.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (libstdc++.so.6.0.28) (1 samples, 0.16%)</title><rect x="950" y="388" width="2" height="15" fill="rgb(211,14,31)"/><text x="953.00" y="398.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:18) (80 samples, 12.88%)</title><rect x="802" y="100" width="152" height="15" fill="rgb(226,99,31)"/><text x="805.00" y="110.50">profile (bench_Rand..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (80 samples, 12.88%)</title><rect x="802" y="116" width="152" height="15" fill="rgb(225,226,27)"/><text x="805.00" y="126.50">time_predict (mlpro..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (80 samples, 12.88%)</title><rect x="802" y="132" width="152" height="15" fill="rgb(241,171,27)"/><text x="805.00" y="142.50">&lt;lambda&gt; (mlprodict..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (80 samples, 12.88%)</title><rect x="802" y="148" width="152" height="15" fill="rgb(219,185,7)"/><text x="805.00" y="158.50">run (mlprodict/onnx..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (80 samples, 12.88%)</title><rect x="802" y="164" width="152" height="15" fill="rgb(229,96,9)"/><text x="805.00" y="174.50">_run_whole_runtime ..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (80 samples, 12.88%)</title><rect x="802" y="180" width="152" height="15" fill="rgb(222,124,11)"/><text x="805.00" y="190.50">run (mlprodict/onnx..</text></g><g><title>run (onnxruntime/capi/session.py:136) (80 samples, 12.88%)</title><rect x="802" y="196" width="152" height="15" fill="rgb(239,79,51)"/><text x="805.00" y="206.50">run (onnxruntime/ca..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (79 samples, 12.72%)</title><rect x="804" y="212" width="150" height="15" fill="rgb(207,22,48)"/><text x="807.00" y="222.50">pybind11::cpp_funct..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (79 samples, 12.72%)</title><rect x="804" y="228" width="150" height="15" fill="rgb(244,31,14)"/><text x="807.00" y="238.50">void pybind11::cpp_..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (79 samples, 12.72%)</title><rect x="804" y="244" width="150" height="15" fill="rgb(241,184,21)"/><text x="807.00" y="254.50">onnxruntime::python..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (79 samples, 12.72%)</title><rect x="804" y="260" width="150" height="15" fill="rgb(225,125,0)"/><text x="807.00" y="270.50">onnxruntime::Infere..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (79 samples, 12.72%)</title><rect x="804" y="276" width="150" height="15" fill="rgb(213,119,5)"/><text x="807.00" y="286.50">onnxruntime::Infere..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (78 samples, 12.56%)</title><rect x="806" y="292" width="148" height="15" fill="rgb(217,110,27)"/><text x="809.00" y="302.50">onnxruntime::utils..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (78 samples, 12.56%)</title><rect x="806" y="308" width="148" height="15" fill="rgb(229,42,9)"/><text x="809.00" y="318.50">onnxruntime::utils..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (78 samples, 12.56%)</title><rect x="806" y="324" width="148" height="15" fill="rgb(237,25,47)"/><text x="809.00" y="334.50">onnxruntime::Seque..</text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (78 samples, 12.56%)</title><rect x="806" y="340" width="148" height="15" fill="rgb(253,32,38)"/><text x="809.00" y="350.50">onnxruntime::ml::T..</text></g><g><title>std::_Rb_tree_increment (libstdc++.so.6.0.28) (1 samples, 0.16%)</title><rect x="952" y="356" width="2" height="15" fill="rgb(237,63,26)"/><text x="955.00" y="366.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (108 samples, 17.39%)</title><rect x="967" y="356" width="205" height="15" fill="rgb(208,220,51)"/><text x="970.00" y="366.50">onnxruntime::ml::TreeEnsem..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;long, float&gt;&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="1170" y="372" width="2" height="15" fill="rgb(227,33,7)"/><text x="1173.00" y="382.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (114 samples, 18.36%)</title><rect x="958" y="340" width="216" height="15" fill="rgb(207,77,36)"/><text x="961.00" y="350.50">onnxruntime::ml::TreeEnsembl..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="1172" y="356" width="2" height="15" fill="rgb(218,21,53)"/><text x="1175.00" y="366.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.16%)</title><rect x="1172" y="372" width="2" height="15" fill="rgb(241,10,37)"/><text x="1175.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (118 samples, 19.00%)</title><rect x="958" y="260" width="224" height="15" fill="rgb(225,62,32)"/><text x="961.00" y="270.50">onnxruntime::InferenceSession..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (118 samples, 19.00%)</title><rect x="958" y="276" width="224" height="15" fill="rgb(253,118,30)"/><text x="961.00" y="286.50">onnxruntime::InferenceSession..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (118 samples, 19.00%)</title><rect x="958" y="292" width="224" height="15" fill="rgb(241,174,19)"/><text x="961.00" y="302.50">onnxruntime::utils::ExecuteGr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (118 samples, 19.00%)</title><rect x="958" y="308" width="224" height="15" fill="rgb(207,1,41)"/><text x="961.00" y="318.50">onnxruntime::utils::ExecuteGr..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (118 samples, 19.00%)</title><rect x="958" y="324" width="224" height="15" fill="rgb(216,75,8)"/><text x="961.00" y="334.50">onnxruntime::SequentialExecut..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.64%)</title><rect x="1174" y="340" width="8" height="15" fill="rgb(244,171,43)"/><text x="1177.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.64%)</title><rect x="1174" y="356" width="8" height="15" fill="rgb(231,180,0)"/><text x="1177.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.64%)</title><rect x="1174" y="372" width="8" height="15" fill="rgb(247,9,3)"/><text x="1177.00" y="382.50"></text></g><g><title>0x7f7941b3b384 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="1180" y="388" width="2" height="15" fill="rgb(246,135,22)"/><text x="1183.00" y="398.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.32%)</title><rect x="1182" y="260" width="4" height="15" fill="rgb(238,227,22)"/><text x="1185.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="1184" y="276" width="2" height="15" fill="rgb(252,140,4)"/><text x="1187.00" y="286.50"></text></g><g><title>all (621 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(209,180,28)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:52) (206 samples, 33.17%)</title><rect x="798" y="52" width="392" height="15" fill="rgb(241,123,33)"/><text x="801.00" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_m_cl_1..</text></g><g><title>profile_ort (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:51) (206 samples, 33.17%)</title><rect x="798" y="68" width="392" height="15" fill="rgb(231,174,15)"/><text x="801.00" y="78.50">profile_ort (bench_RandomForestClassifier_default_m_c..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:29) (204 samples, 32.85%)</title><rect x="802" y="84" width="388" height="15" fill="rgb(237,87,47)"/><text x="805.00" y="94.50">setup_profile (bench_RandomForestClassifier_default_..</text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_4_12_float_.py:23) (124 samples, 19.97%)</title><rect x="954" y="100" width="236" height="15" fill="rgb(244,220,4)"/><text x="957.00" y="110.50">profile (bench_RandomForestClas..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (122 samples, 19.65%)</title><rect x="958" y="116" width="232" height="15" fill="rgb(241,20,43)"/><text x="961.00" y="126.50">time_predict (mlprodict/asv_be..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (122 samples, 19.65%)</title><rect x="958" y="132" width="232" height="15" fill="rgb(222,182,53)"/><text x="961.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchm..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (122 samples, 19.65%)</title><rect x="958" y="148" width="232" height="15" fill="rgb(224,210,3)"/><text x="961.00" y="158.50">run (mlprodict/onnxrt/onnx_inf..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (122 samples, 19.65%)</title><rect x="958" y="164" width="232" height="15" fill="rgb(239,32,45)"/><text x="961.00" y="174.50">_run_whole_runtime (mlprodict/..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (122 samples, 19.65%)</title><rect x="958" y="180" width="232" height="15" fill="rgb(206,81,37)"/><text x="961.00" y="190.50">run (mlprodict/onnxrt/ops_whol..</text></g><g><title>run (onnxruntime/capi/session.py:136) (122 samples, 19.65%)</title><rect x="958" y="196" width="232" height="15" fill="rgb(207,97,26)"/><text x="961.00" y="206.50">run (onnxruntime/capi/session...</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (122 samples, 19.65%)</title><rect x="958" y="212" width="232" height="15" fill="rgb(246,116,47)"/><text x="961.00" y="222.50">pybind11::cpp_function::dispat..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (122 samples, 19.65%)</title><rect x="958" y="228" width="232" height="15" fill="rgb(206,162,54)"/><text x="961.00" y="238.50">void pybind11::cpp_function::i..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (122 samples, 19.65%)</title><rect x="958" y="244" width="232" height="15" fill="rgb(235,130,30)"/><text x="961.00" y="254.50">onnxruntime::python::addObject..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.32%)</title><rect x="1186" y="260" width="4" height="15" fill="rgb(217,181,5)"/><text x="1189.00" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.32%)</title><rect x="1186" y="276" width="4" height="15" fill="rgb(254,157,27)"/><text x="1189.00" y="286.50"></text></g><g><title>0x7f7941b39d07 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="1188" y="292" width="2" height="15" fill="rgb(231,209,22)"/><text x="1191.00" y="302.50"></text></g></g></svg>