<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1158" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1141.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1141.00"> </text><g id="frames"><g><title>&lt;module&gt; (onnx/__init__.py) (3 samples, 0.09%)</title><rect x="10" y="292" width="1" height="15" fill="rgb(241,24,30)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="308" width="1" height="15" fill="rgb(233,66,16)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="324" width="1" height="15" fill="rgb(214,118,24)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="340" width="1" height="15" fill="rgb(247,19,3)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="10" y="356" width="1" height="15" fill="rgb(240,207,33)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="372" width="1" height="15" fill="rgb(215,20,33)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (3 samples, 0.09%)</title><rect x="10" y="388" width="1" height="15" fill="rgb(225,212,29)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="404" width="1" height="15" fill="rgb(211,154,22)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="420" width="1" height="15" fill="rgb(206,129,45)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="436" width="1" height="15" fill="rgb(233,197,50)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="10" y="452" width="1" height="15" fill="rgb(234,102,46)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="468" width="1" height="15" fill="rgb(244,90,38)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (3 samples, 0.09%)</title><rect x="10" y="484" width="1" height="15" fill="rgb(225,75,4)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="500" width="1" height="15" fill="rgb(211,31,0)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="516" width="1" height="15" fill="rgb(212,85,32)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="532" width="1" height="15" fill="rgb(253,27,18)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="10" y="548" width="1" height="15" fill="rgb(228,110,29)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="564" width="1" height="15" fill="rgb(205,103,39)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (3 samples, 0.09%)</title><rect x="10" y="580" width="1" height="15" fill="rgb(230,95,3)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="596" width="1" height="15" fill="rgb(234,36,34)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="612" width="1" height="15" fill="rgb(250,182,38)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="628" width="1" height="15" fill="rgb(235,63,50)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="644" width="1" height="15" fill="rgb(248,59,29)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="660" width="1" height="15" fill="rgb(221,229,30)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="676" width="1" height="15" fill="rgb(206,118,43)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="10" y="692" width="1" height="15" fill="rgb(250,103,42)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="708" width="1" height="15" fill="rgb(211,40,32)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (3 samples, 0.09%)</title><rect x="10" y="724" width="1" height="15" fill="rgb(243,33,7)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="740" width="1" height="15" fill="rgb(242,120,39)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="756" width="1" height="15" fill="rgb(243,218,17)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="772" width="1" height="15" fill="rgb(211,55,48)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="10" y="788" width="1" height="15" fill="rgb(213,198,23)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="10" y="804" width="1" height="15" fill="rgb(232,139,47)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (3 samples, 0.09%)</title><rect x="10" y="820" width="1" height="15" fill="rgb(216,135,51)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (3 samples, 0.09%)</title><rect x="10" y="836" width="1" height="15" fill="rgb(232,175,36)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (3 samples, 0.09%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(205,204,39)"/><text x="13.00" y="862.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.16%)</title><rect x="10" y="196" width="1" height="15" fill="rgb(225,26,31)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.16%)</title><rect x="10" y="212" width="1" height="15" fill="rgb(254,120,1)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.16%)</title><rect x="10" y="228" width="1" height="15" fill="rgb(227,95,35)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.16%)</title><rect x="10" y="244" width="1" height="15" fill="rgb(224,102,53)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.16%)</title><rect x="10" y="260" width="1" height="15" fill="rgb(226,188,15)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.16%)</title><rect x="10" y="276" width="1" height="15" fill="rgb(221,87,10)"/><text x="13.00" y="286.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="484" width="1" height="15" fill="rgb(211,3,4)"/><text x="14.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="500" width="1" height="15" fill="rgb(226,86,19)"/><text x="14.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="516" width="1" height="15" fill="rgb(230,43,29)"/><text x="14.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="532" width="1" height="15" fill="rgb(228,157,42)"/><text x="14.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="11" y="548" width="1" height="15" fill="rgb(238,12,3)"/><text x="14.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="564" width="1" height="15" fill="rgb(214,170,46)"/><text x="14.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (3 samples, 0.09%)</title><rect x="11" y="580" width="1" height="15" fill="rgb(248,205,17)"/><text x="14.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="596" width="1" height="15" fill="rgb(246,183,49)"/><text x="14.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="612" width="1" height="15" fill="rgb(239,190,6)"/><text x="14.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="628" width="1" height="15" fill="rgb(220,32,17)"/><text x="14.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="11" y="644" width="1" height="15" fill="rgb(209,91,39)"/><text x="14.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="660" width="1" height="15" fill="rgb(246,175,15)"/><text x="14.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (3 samples, 0.09%)</title><rect x="11" y="676" width="1" height="15" fill="rgb(242,78,25)"/><text x="14.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="692" width="1" height="15" fill="rgb(234,208,8)"/><text x="14.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="708" width="1" height="15" fill="rgb(251,103,44)"/><text x="14.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="724" width="1" height="15" fill="rgb(228,135,9)"/><text x="14.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="11" y="740" width="1" height="15" fill="rgb(221,148,24)"/><text x="14.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="756" width="1" height="15" fill="rgb(210,177,22)"/><text x="14.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (3 samples, 0.09%)</title><rect x="11" y="772" width="1" height="15" fill="rgb(233,173,29)"/><text x="14.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="788" width="1" height="15" fill="rgb(245,111,3)"/><text x="14.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="804" width="1" height="15" fill="rgb(221,64,8)"/><text x="14.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="820" width="1" height="15" fill="rgb(222,204,0)"/><text x="14.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="11" y="836" width="1" height="15" fill="rgb(236,209,53)"/><text x="14.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="852" width="1" height="15" fill="rgb(226,186,22)"/><text x="14.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (3 samples, 0.09%)</title><rect x="11" y="868" width="1" height="15" fill="rgb(216,39,41)"/><text x="14.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="884" width="1" height="15" fill="rgb(215,48,50)"/><text x="14.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="900" width="1" height="15" fill="rgb(242,208,43)"/><text x="14.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="916" width="1" height="15" fill="rgb(232,201,22)"/><text x="14.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="932" width="1" height="15" fill="rgb(242,43,30)"/><text x="14.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="948" width="1" height="15" fill="rgb(213,94,18)"/><text x="14.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="964" width="1" height="15" fill="rgb(233,153,13)"/><text x="14.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="11" y="980" width="1" height="15" fill="rgb(210,213,48)"/><text x="14.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="996" width="1" height="15" fill="rgb(244,105,9)"/><text x="14.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (3 samples, 0.09%)</title><rect x="11" y="1012" width="1" height="15" fill="rgb(215,126,44)"/><text x="14.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="1028" width="1" height="15" fill="rgb(225,221,50)"/><text x="14.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="1044" width="1" height="15" fill="rgb(234,80,24)"/><text x="14.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="1060" width="1" height="15" fill="rgb(238,54,52)"/><text x="14.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="11" y="1076" width="1" height="15" fill="rgb(210,143,40)"/><text x="14.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="11" y="1092" width="1" height="15" fill="rgb(232,72,38)"/><text x="14.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (3 samples, 0.09%)</title><rect x="11" y="1108" width="1" height="15" fill="rgb(245,99,30)"/><text x="14.00" y="1118.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (7 samples, 0.22%)</title><rect x="11" y="340" width="3" height="15" fill="rgb(246,41,4)"/><text x="14.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.22%)</title><rect x="11" y="356" width="3" height="15" fill="rgb(221,208,24)"/><text x="14.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.22%)</title><rect x="11" y="372" width="3" height="15" fill="rgb(205,99,30)"/><text x="14.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.22%)</title><rect x="11" y="388" width="3" height="15" fill="rgb(215,129,38)"/><text x="14.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.22%)</title><rect x="11" y="404" width="3" height="15" fill="rgb(252,216,52)"/><text x="14.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.22%)</title><rect x="11" y="420" width="3" height="15" fill="rgb(230,207,3)"/><text x="14.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (7 samples, 0.22%)</title><rect x="11" y="436" width="3" height="15" fill="rgb(234,28,26)"/><text x="14.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.22%)</title><rect x="11" y="452" width="3" height="15" fill="rgb(244,8,32)"/><text x="14.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.22%)</title><rect x="11" y="468" width="3" height="15" fill="rgb(254,171,36)"/><text x="14.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="484" width="2" height="15" fill="rgb(237,49,54)"/><text x="15.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.13%)</title><rect x="12" y="500" width="2" height="15" fill="rgb(246,4,31)"/><text x="15.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="516" width="2" height="15" fill="rgb(254,117,36)"/><text x="15.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (4 samples, 0.13%)</title><rect x="12" y="532" width="2" height="15" fill="rgb(243,56,10)"/><text x="15.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="548" width="2" height="15" fill="rgb(244,224,16)"/><text x="15.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="564" width="2" height="15" fill="rgb(240,141,47)"/><text x="15.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="580" width="2" height="15" fill="rgb(248,9,49)"/><text x="15.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.13%)</title><rect x="12" y="596" width="2" height="15" fill="rgb(245,50,43)"/><text x="15.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="612" width="2" height="15" fill="rgb(242,167,3)"/><text x="15.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (4 samples, 0.13%)</title><rect x="12" y="628" width="2" height="15" fill="rgb(213,43,4)"/><text x="15.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="644" width="2" height="15" fill="rgb(247,33,7)"/><text x="15.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="660" width="2" height="15" fill="rgb(243,40,35)"/><text x="15.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="676" width="2" height="15" fill="rgb(225,53,32)"/><text x="15.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.13%)</title><rect x="12" y="692" width="2" height="15" fill="rgb(249,40,35)"/><text x="15.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="708" width="2" height="15" fill="rgb(225,21,1)"/><text x="15.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (4 samples, 0.13%)</title><rect x="12" y="724" width="2" height="15" fill="rgb(233,178,24)"/><text x="15.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="740" width="2" height="15" fill="rgb(212,169,51)"/><text x="15.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.13%)</title><rect x="12" y="756" width="2" height="15" fill="rgb(236,209,5)"/><text x="15.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="13" y="772" width="1" height="15" fill="rgb(234,116,3)"/><text x="16.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="13" y="788" width="1" height="15" fill="rgb(220,223,30)"/><text x="16.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="13" y="804" width="1" height="15" fill="rgb(220,58,47)"/><text x="16.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (3 samples, 0.09%)</title><rect x="13" y="820" width="1" height="15" fill="rgb(221,14,27)"/><text x="16.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="13" y="836" width="1" height="15" fill="rgb(228,144,35)"/><text x="16.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="13" y="852" width="1" height="15" fill="rgb(248,36,1)"/><text x="16.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="13" y="868" width="1" height="15" fill="rgb(250,78,34)"/><text x="16.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="13" y="884" width="1" height="15" fill="rgb(222,143,37)"/><text x="16.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="13" y="900" width="1" height="15" fill="rgb(243,77,23)"/><text x="16.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (3 samples, 0.09%)</title><rect x="13" y="916" width="1" height="15" fill="rgb(254,215,42)"/><text x="16.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="13" y="932" width="1" height="15" fill="rgb(252,28,14)"/><text x="16.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="13" y="948" width="1" height="15" fill="rgb(213,124,33)"/><text x="16.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="13" y="964" width="1" height="15" fill="rgb(253,3,34)"/><text x="16.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="13" y="980" width="1" height="15" fill="rgb(237,202,20)"/><text x="16.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="13" y="996" width="1" height="15" fill="rgb(235,135,28)"/><text x="16.00" y="1006.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (10 samples, 0.31%)</title><rect x="11" y="244" width="4" height="15" fill="rgb(228,57,44)"/><text x="14.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (10 samples, 0.31%)</title><rect x="11" y="260" width="4" height="15" fill="rgb(253,78,18)"/><text x="14.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 0.31%)</title><rect x="11" y="276" width="4" height="15" fill="rgb(222,126,23)"/><text x="14.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 0.31%)</title><rect x="11" y="292" width="4" height="15" fill="rgb(249,64,10)"/><text x="14.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (10 samples, 0.31%)</title><rect x="11" y="308" width="4" height="15" fill="rgb(216,71,21)"/><text x="14.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (10 samples, 0.31%)</title><rect x="11" y="324" width="4" height="15" fill="rgb(220,136,51)"/><text x="14.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py) (3 samples, 0.09%)</title><rect x="14" y="340" width="1" height="15" fill="rgb(254,162,16)"/><text x="17.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="14" y="356" width="1" height="15" fill="rgb(226,118,8)"/><text x="17.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="14" y="372" width="1" height="15" fill="rgb(205,188,13)"/><text x="17.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="14" y="388" width="1" height="15" fill="rgb(235,170,19)"/><text x="17.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="14" y="404" width="1" height="15" fill="rgb(245,47,24)"/><text x="17.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="14" y="420" width="1" height="15" fill="rgb(230,174,43)"/><text x="17.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="14" y="436" width="1" height="15" fill="rgb(216,82,46)"/><text x="17.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="14" y="452" width="1" height="15" fill="rgb(238,132,4)"/><text x="17.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="14" y="468" width="1" height="15" fill="rgb(232,222,34)"/><text x="17.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py) (3 samples, 0.09%)</title><rect x="14" y="484" width="1" height="15" fill="rgb(221,132,45)"/><text x="17.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="14" y="500" width="1" height="15" fill="rgb(213,51,21)"/><text x="17.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="14" y="516" width="1" height="15" fill="rgb(234,112,46)"/><text x="17.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="14" y="532" width="1" height="15" fill="rgb(221,209,53)"/><text x="17.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.09%)</title><rect x="14" y="548" width="1" height="15" fill="rgb(244,50,48)"/><text x="17.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.09%)</title><rect x="14" y="564" width="1" height="15" fill="rgb(217,223,40)"/><text x="17.00" y="574.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.53%)</title><rect x="10" y="68" width="6" height="15" fill="rgb(216,218,16)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.53%)</title><rect x="10" y="84" width="6" height="15" fill="rgb(224,161,27)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.53%)</title><rect x="10" y="100" width="6" height="15" fill="rgb(237,196,14)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (17 samples, 0.53%)</title><rect x="10" y="116" width="6" height="15" fill="rgb(227,14,33)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.53%)</title><rect x="10" y="132" width="6" height="15" fill="rgb(227,215,2)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py) (17 samples, 0.53%)</title><rect x="10" y="148" width="6" height="15" fill="rgb(225,45,53)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.53%)</title><rect x="10" y="164" width="6" height="15" fill="rgb(234,177,50)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (17 samples, 0.53%)</title><rect x="10" y="180" width="6" height="15" fill="rgb(227,82,35)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.38%)</title><rect x="11" y="196" width="5" height="15" fill="rgb(254,217,31)"/><text x="14.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (12 samples, 0.38%)</title><rect x="11" y="212" width="5" height="15" fill="rgb(230,84,52)"/><text x="14.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.38%)</title><rect x="11" y="228" width="5" height="15" fill="rgb(233,97,40)"/><text x="14.00" y="238.50"></text></g><g><title>onnxruntime::Equal&lt;long&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="22" y="340" width="1" height="15" fill="rgb(210,38,6)"/><text x="25.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;long, bool, onnxruntime::Equal&lt;long&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, long, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Equal&lt;long&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, long)#2}, onnxruntime::Equal&lt;long&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;bool, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;long, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="22" y="356" width="1" height="15" fill="rgb(231,176,2)"/><text x="25.00" y="366.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="27" y="388" width="1" height="15" fill="rgb(219,208,17)"/><text x="30.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.13%)</title><rect x="31" y="420" width="2" height="15" fill="rgb(251,29,44)"/><text x="34.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.09%)</title><rect x="31" y="436" width="2" height="15" fill="rgb(226,0,7)"/><text x="34.00" y="446.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.38%)</title><rect x="28" y="388" width="5" height="15" fill="rgb(254,112,50)"/><text x="31.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.35%)</title><rect x="29" y="404" width="4" height="15" fill="rgb(224,90,21)"/><text x="32.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="37" y="468" width="1" height="15" fill="rgb(216,114,14)"/><text x="40.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::SplitChunk (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="37" y="484" width="1" height="15" fill="rgb(207,111,10)"/><text x="40.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="37" y="452" width="2" height="15" fill="rgb(210,181,16)"/><text x="40.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="40" y="468" width="1" height="15" fill="rgb(239,23,18)"/><text x="43.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.22%)</title><rect x="40" y="452" width="2" height="15" fill="rgb(249,52,34)"/><text x="43.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 0.63%)</title><rect x="35" y="436" width="8" height="15" fill="rgb(237,189,49)"/><text x="38.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::InsertFreeChunkIntoBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="45" y="516" width="2" height="15" fill="rgb(240,211,19)"/><text x="48.00" y="526.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::_M_insert_unique&lt;unsigned long const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="46" y="532" width="1" height="15" fill="rgb(237,127,48)"/><text x="49.00" y="542.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.47%)</title><rect x="45" y="484" width="5" height="15" fill="rgb(209,93,12)"/><text x="48.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.47%)</title><rect x="45" y="500" width="5" height="15" fill="rgb(253,129,1)"/><text x="48.00" y="510.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="48" y="516" width="2" height="15" fill="rgb(208,135,32)"/><text x="51.00" y="526.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="49" y="532" width="1" height="15" fill="rgb(222,193,48)"/><text x="52.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (21 samples, 0.66%)</title><rect x="43" y="436" width="8" height="15" fill="rgb(226,135,34)"/><text x="46.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (21 samples, 0.66%)</title><rect x="43" y="452" width="8" height="15" fill="rgb(249,185,24)"/><text x="46.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 0.57%)</title><rect x="44" y="468" width="7" height="15" fill="rgb(213,211,31)"/><text x="47.00" y="478.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="52" y="484" width="1" height="15" fill="rgb(217,47,38)"/><text x="55.00" y="494.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="52" y="500" width="1" height="15" fill="rgb(229,93,25)"/><text x="55.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="52" y="436" width="2" height="15" fill="rgb(232,72,24)"/><text x="55.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="52" y="452" width="2" height="15" fill="rgb(249,218,23)"/><text x="55.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="52" y="468" width="2" height="15" fill="rgb(217,193,51)"/><text x="55.00" y="478.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="54" y="436" width="2" height="15" fill="rgb(207,48,43)"/><text x="57.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::OpKernelContext (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="56" y="436" width="1" height="15" fill="rgb(219,146,25)"/><text x="59.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="64" y="468" width="2" height="15" fill="rgb(216,118,47)"/><text x="67.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="64" y="484" width="2" height="15" fill="rgb(249,227,15)"/><text x="67.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="64" y="500" width="2" height="15" fill="rgb(232,175,30)"/><text x="67.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="64" y="516" width="2" height="15" fill="rgb(252,61,30)"/><text x="67.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="64" y="532" width="2" height="15" fill="rgb(253,221,1)"/><text x="67.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="64" y="548" width="2" height="15" fill="rgb(247,177,47)"/><text x="67.00" y="558.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="67" y="468" width="1" height="15" fill="rgb(235,35,34)"/><text x="70.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (33 samples, 1.04%)</title><rect x="57" y="436" width="13" height="15" fill="rgb(211,155,41)"/><text x="60.00" y="446.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 0.79%)</title><rect x="60" y="452" width="10" height="15" fill="rgb(254,66,13)"/><text x="63.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="68" y="468" width="2" height="15" fill="rgb(249,119,36)"/><text x="71.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.09%)</title><rect x="68" y="484" width="2" height="15" fill="rgb(229,129,35)"/><text x="71.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.09%)</title><rect x="68" y="500" width="2" height="15" fill="rgb(225,193,33)"/><text x="71.00" y="510.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.09%)</title><rect x="71" y="484" width="1" height="15" fill="rgb(211,6,7)"/><text x="74.00" y="494.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="71" y="468" width="1" height="15" fill="rgb(221,176,38)"/><text x="74.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2247] (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="72" y="468" width="2" height="15" fill="rgb(233,14,51)"/><text x="75.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="74" y="516" width="3" height="15" fill="rgb(248,210,17)"/><text x="77.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="74" y="532" width="3" height="15" fill="rgb(214,57,54)"/><text x="77.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="74" y="548" width="3" height="15" fill="rgb(249,50,24)"/><text x="77.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="76" y="564" width="1" height="15" fill="rgb(240,160,16)"/><text x="79.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="76" y="580" width="1" height="15" fill="rgb(238,137,21)"/><text x="79.00" y="590.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.31%)</title><rect x="74" y="500" width="4" height="15" fill="rgb(221,36,48)"/><text x="77.00" y="510.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.35%)</title><rect x="74" y="484" width="4" height="15" fill="rgb(248,60,50)"/><text x="77.00" y="494.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.38%)</title><rect x="74" y="468" width="5" height="15" fill="rgb(223,49,47)"/><text x="77.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastIterator::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="79" y="500" width="1" height="15" fill="rgb(220,157,52)"/><text x="82.00" y="510.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.41%)</title><rect x="79" y="468" width="4" height="15" fill="rgb(242,220,46)"/><text x="82.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.41%)</title><rect x="79" y="484" width="4" height="15" fill="rgb(221,147,50)"/><text x="82.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="80" y="500" width="3" height="15" fill="rgb(208,147,9)"/><text x="83.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (8 samples, 0.25%)</title><rect x="80" y="516" width="3" height="15" fill="rgb(233,26,49)"/><text x="83.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (8 samples, 0.25%)</title><rect x="80" y="532" width="3" height="15" fill="rgb(238,135,24)"/><text x="83.00" y="542.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (140 samples, 4.40%)</title><rect x="33" y="420" width="52" height="15" fill="rgb(238,71,30)"/><text x="36.00" y="430.50">onnxr..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (42 samples, 1.32%)</title><rect x="70" y="436" width="15" height="15" fill="rgb(251,79,38)"/><text x="73.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (42 samples, 1.32%)</title><rect x="70" y="452" width="15" height="15" fill="rgb(223,125,44)"/><text x="73.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="84" y="468" width="1" height="15" fill="rgb(254,48,26)"/><text x="87.00" y="478.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (165 samples, 5.19%)</title><rect x="24" y="356" width="62" height="15" fill="rgb(230,152,45)"/><text x="27.00" y="366.50">onnxru..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (164 samples, 5.16%)</title><rect x="25" y="372" width="61" height="15" fill="rgb(241,144,36)"/><text x="28.00" y="382.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (142 samples, 4.47%)</title><rect x="33" y="388" width="53" height="15" fill="rgb(254,75,15)"/><text x="36.00" y="398.50">onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (142 samples, 4.47%)</title><rect x="33" y="404" width="53" height="15" fill="rgb(241,172,39)"/><text x="36.00" y="414.50">onnxr..</text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (167 samples, 5.25%)</title><rect x="24" y="340" width="62" height="15" fill="rgb(221,205,35)"/><text x="27.00" y="350.50">onnxru..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (181 samples, 5.69%)</title><rect x="20" y="260" width="67" height="15" fill="rgb(233,208,18)"/><text x="23.00" y="270.50">onnxrun..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (181 samples, 5.69%)</title><rect x="20" y="276" width="67" height="15" fill="rgb(226,178,20)"/><text x="23.00" y="286.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (177 samples, 5.57%)</title><rect x="21" y="292" width="66" height="15" fill="rgb(243,200,22)"/><text x="24.00" y="302.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (177 samples, 5.57%)</title><rect x="21" y="308" width="66" height="15" fill="rgb(205,95,48)"/><text x="24.00" y="318.50">onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (177 samples, 5.57%)</title><rect x="21" y="324" width="66" height="15" fill="rgb(243,44,49)"/><text x="24.00" y="334.50">onnxrun..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (184 samples, 5.79%)</title><rect x="19" y="244" width="68" height="15" fill="rgb(213,58,13)"/><text x="22.00" y="254.50">onnxrun..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py) (194 samples, 6.10%)</title><rect x="16" y="100" width="72" height="15" fill="rgb(249,185,38)"/><text x="19.00" y="110.50">profile ..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (193 samples, 6.07%)</title><rect x="16" y="116" width="72" height="15" fill="rgb(207,55,28)"/><text x="19.00" y="126.50">time_pre..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (192 samples, 6.04%)</title><rect x="17" y="132" width="71" height="15" fill="rgb(230,182,3)"/><text x="20.00" y="142.50">&lt;lambda&gt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (191 samples, 6.01%)</title><rect x="17" y="148" width="71" height="15" fill="rgb(209,226,39)"/><text x="20.00" y="158.50">run (mlp..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (191 samples, 6.01%)</title><rect x="17" y="164" width="71" height="15" fill="rgb(247,60,4)"/><text x="20.00" y="174.50">_run_who..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (190 samples, 5.97%)</title><rect x="17" y="180" width="71" height="15" fill="rgb(231,112,1)"/><text x="20.00" y="190.50">run (mlp..</text></g><g><title>run (onnxruntime/capi/session.py) (190 samples, 5.97%)</title><rect x="17" y="196" width="71" height="15" fill="rgb(224,210,34)"/><text x="20.00" y="206.50">run (onn..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (188 samples, 5.91%)</title><rect x="18" y="212" width="70" height="15" fill="rgb(216,108,22)"/><text x="21.00" y="222.50">pybind1..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (186 samples, 5.85%)</title><rect x="19" y="228" width="69" height="15" fill="rgb(247,79,40)"/><text x="22.00" y="238.50">void py..</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py) (195 samples, 6.13%)</title><rect x="16" y="68" width="72" height="15" fill="rgb(226,221,24)"/><text x="19.00" y="78.50">profile_..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py) (195 samples, 6.13%)</title><rect x="16" y="84" width="72" height="15" fill="rgb(217,190,36)"/><text x="19.00" y="94.50">setup_pr..</text></g><g><title>PyArray_FromAny (ctors.c) (3 samples, 0.09%)</title><rect x="107" y="260" width="1" height="15" fill="rgb(231,147,15)"/><text x="110.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (7 samples, 0.22%)</title><rect x="106" y="212" width="3" height="15" fill="rgb(236,209,46)"/><text x="109.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (6 samples, 0.19%)</title><rect x="107" y="228" width="2" height="15" fill="rgb(221,127,6)"/><text x="110.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (5 samples, 0.16%)</title><rect x="107" y="244" width="2" height="15" fill="rgb(219,100,32)"/><text x="110.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (4 samples, 0.13%)</title><rect x="109" y="212" width="1" height="15" fill="rgb(241,142,33)"/><text x="112.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (3 samples, 0.09%)</title><rect x="109" y="228" width="1" height="15" fill="rgb(227,151,19)"/><text x="112.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_equal.py) (5 samples, 0.16%)</title><rect x="111" y="212" width="2" height="15" fill="rgb(206,26,32)"/><text x="114.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.13%)</title><rect x="112" y="228" width="1" height="15" fill="rgb(250,68,3)"/><text x="115.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.09%)</title><rect x="112" y="244" width="1" height="15" fill="rgb(253,182,14)"/><text x="115.00" y="254.50"></text></g><g><title>gentype_generic_method (scalartypes.c.src) (3 samples, 0.09%)</title><rect x="113" y="228" width="2" height="15" fill="rgb(244,21,39)"/><text x="116.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (11 samples, 0.35%)</title><rect x="113" y="212" width="4" height="15" fill="rgb(222,34,20)"/><text x="116.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;) (7 samples, 0.22%)</title><rect x="115" y="228" width="2" height="15" fill="rgb(206,114,24)"/><text x="118.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 0.22%)</title><rect x="115" y="244" width="2" height="15" fill="rgb(230,218,19)"/><text x="118.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py) (7 samples, 0.22%)</title><rect x="115" y="260" width="2" height="15" fill="rgb(235,39,54)"/><text x="118.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (5 samples, 0.16%)</title><rect x="115" y="276" width="2" height="15" fill="rgb(221,52,43)"/><text x="118.00" y="286.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (12 samples, 0.38%)</title><rect x="184" y="228" width="4" height="15" fill="rgb(228,86,18)"/><text x="187.00" y="238.50"></text></g><g><title>unicode_eq (python3.7) (3 samples, 0.09%)</title><rect x="187" y="244" width="1" height="15" fill="rgb(237,132,42)"/><text x="190.00" y="254.50"></text></g><g><title>_common_run_shape (mlprodict/onnxrt/ops_cpu/op_scan.py) (3 samples, 0.09%)</title><rect x="188" y="228" width="1" height="15" fill="rgb(250,205,18)"/><text x="191.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (10 samples, 0.31%)</title><rect x="190" y="244" width="4" height="15" fill="rgb(245,44,37)"/><text x="193.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (9 samples, 0.28%)</title><rect x="191" y="260" width="3" height="15" fill="rgb(223,226,16)"/><text x="194.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (13 samples, 0.41%)</title><rect x="189" y="228" width="5" height="15" fill="rgb(251,221,2)"/><text x="192.00" y="238.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (7 samples, 0.22%)</title><rect x="196" y="260" width="2" height="15" fill="rgb(222,160,42)"/><text x="199.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 0.16%)</title><rect x="197" y="276" width="1" height="15" fill="rgb(221,181,11)"/><text x="200.00" y="286.50"></text></g><g><title>get_view_from_index (mapping.c) (11 samples, 0.35%)</title><rect x="195" y="244" width="4" height="15" fill="rgb(234,10,5)"/><text x="198.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (22 samples, 0.69%)</title><rect x="195" y="228" width="8" height="15" fill="rgb(247,41,11)"/><text x="198.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (10 samples, 0.31%)</title><rect x="199" y="244" width="4" height="15" fill="rgb(213,215,36)"/><text x="202.00" y="254.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py) (3 samples, 0.09%)</title><rect x="210" y="244" width="1" height="15" fill="rgb(230,114,34)"/><text x="213.00" y="254.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (7 samples, 0.22%)</title><rect x="257" y="292" width="3" height="15" fill="rgb(234,170,29)"/><text x="260.00" y="302.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (10 samples, 0.31%)</title><rect x="260" y="292" width="3" height="15" fill="rgb(239,39,46)"/><text x="263.00" y="302.50"></text></g><g><title>PyArray_SetBaseObject (arrayobject.c) (6 samples, 0.19%)</title><rect x="264" y="340" width="3" height="15" fill="rgb(224,60,41)"/><text x="267.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (17 samples, 0.53%)</title><rect x="264" y="324" width="6" height="15" fill="rgb(237,145,41)"/><text x="267.00" y="334.50"></text></g><g><title>array_alloc (arrayobject.c) (6 samples, 0.19%)</title><rect x="268" y="340" width="2" height="15" fill="rgb(205,142,40)"/><text x="271.00" y="350.50"></text></g><g><title>array_reshape (methods.c) (49 samples, 1.54%)</title><rect x="252" y="276" width="18" height="15" fill="rgb(246,119,17)"/><text x="255.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (19 samples, 0.60%)</title><rect x="263" y="292" width="7" height="15" fill="rgb(251,142,46)"/><text x="266.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (19 samples, 0.60%)</title><rect x="263" y="308" width="7" height="15" fill="rgb(223,100,36)"/><text x="266.00" y="318.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (175 samples, 5.50%)</title><rect x="216" y="260" width="65" height="15" fill="rgb(211,67,28)"/><text x="219.00" y="270.50">expand_..</text></g><g><title>asanyarray (numpy/core/_asarray.py) (28 samples, 0.88%)</title><rect x="271" y="276" width="10" height="15" fill="rgb(211,34,8)"/><text x="274.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (12 samples, 0.38%)</title><rect x="277" y="292" width="4" height="15" fill="rgb(211,208,40)"/><text x="280.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (213 samples, 6.70%)</title><rect x="203" y="228" width="79" height="15" fill="rgb(249,10,9)"/><text x="206.00" y="238.50">expand_di..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (191 samples, 6.01%)</title><rect x="211" y="244" width="71" height="15" fill="rgb(219,3,14)"/><text x="214.00" y="254.50">array_im..</text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (43 samples, 1.35%)</title><rect x="390" y="260" width="16" height="15" fill="rgb(224,131,17)"/><text x="393.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (37 samples, 1.16%)</title><rect x="626" y="276" width="14" height="15" fill="rgb(239,123,9)"/><text x="629.00" y="286.50"></text></g><g><title>array_descr_get (getset.c) (3 samples, 0.09%)</title><rect x="675" y="292" width="1" height="15" fill="rgb(218,131,45)"/><text x="678.00" y="302.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (4 samples, 0.13%)</title><rect x="676" y="292" width="1" height="15" fill="rgb(236,100,38)"/><text x="679.00" y="302.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (7 samples, 0.22%)</title><rect x="707" y="340" width="3" height="15" fill="rgb(212,15,16)"/><text x="710.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (5 samples, 0.16%)</title><rect x="708" y="356" width="2" height="15" fill="rgb(221,214,45)"/><text x="711.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (12 samples, 0.38%)</title><rect x="715" y="388" width="4" height="15" fill="rgb(240,65,43)"/><text x="718.00" y="398.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (3 samples, 0.09%)</title><rect x="718" y="404" width="1" height="15" fill="rgb(219,24,23)"/><text x="721.00" y="414.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (15 samples, 0.47%)</title><rect x="714" y="356" width="5" height="15" fill="rgb(237,122,52)"/><text x="717.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (14 samples, 0.44%)</title><rect x="714" y="372" width="5" height="15" fill="rgb(220,106,5)"/><text x="717.00" y="382.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (9 samples, 0.28%)</title><rect x="720" y="356" width="3" height="15" fill="rgb(242,20,26)"/><text x="723.00" y="366.50"></text></g><g><title>_find_array_method (ufunc_object.c) (3 samples, 0.09%)</title><rect x="722" y="372" width="1" height="15" fill="rgb(210,161,26)"/><text x="725.00" y="382.50"></text></g><g><title>_ufunc_setup_flags (ufunc_object.c) (3 samples, 0.09%)</title><rect x="723" y="356" width="1" height="15" fill="rgb(218,33,20)"/><text x="726.00" y="366.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (3 samples, 0.09%)</title><rect x="726" y="372" width="1" height="15" fill="rgb(231,176,10)"/><text x="729.00" y="382.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (6 samples, 0.19%)</title><rect x="728" y="388" width="2" height="15" fill="rgb(210,205,22)"/><text x="731.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (5 samples, 0.16%)</title><rect x="728" y="404" width="2" height="15" fill="rgb(206,224,13)"/><text x="731.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (3 samples, 0.09%)</title><rect x="729" y="420" width="1" height="15" fill="rgb(218,63,33)"/><text x="732.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.22%)</title><rect x="734" y="404" width="3" height="15" fill="rgb(238,117,54)"/><text x="737.00" y="414.50"></text></g><g><title>IsUintAligned (array_assign.c) (6 samples, 0.19%)</title><rect x="740" y="420" width="2" height="15" fill="rgb(245,184,52)"/><text x="743.00" y="430.50"></text></g><g><title>npy_uint_alignment (common.h) (5 samples, 0.16%)</title><rect x="741" y="436" width="1" height="15" fill="rgb(235,137,2)"/><text x="744.00" y="446.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (4 samples, 0.13%)</title><rect x="743" y="452" width="1" height="15" fill="rgb(209,36,44)"/><text x="746.00" y="462.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (12 samples, 0.38%)</title><rect x="742" y="420" width="5" height="15" fill="rgb(253,102,51)"/><text x="745.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (11 samples, 0.35%)</title><rect x="743" y="436" width="4" height="15" fill="rgb(219,201,42)"/><text x="746.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (7 samples, 0.22%)</title><rect x="744" y="452" width="3" height="15" fill="rgb(208,197,13)"/><text x="747.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (30 samples, 0.94%)</title><rect x="737" y="404" width="11" height="15" fill="rgb(253,219,3)"/><text x="740.00" y="414.50"></text></g><g><title>npyiter_replace_axisdata (nditer_constr.c) (3 samples, 0.09%)</title><rect x="747" y="420" width="1" height="15" fill="rgb(254,31,25)"/><text x="750.00" y="430.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (4 samples, 0.13%)</title><rect x="748" y="404" width="1" height="15" fill="rgb(254,184,22)"/><text x="751.00" y="414.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c) (3 samples, 0.09%)</title><rect x="749" y="404" width="2" height="15" fill="rgb(245,84,21)"/><text x="752.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (6 samples, 0.19%)</title><rect x="752" y="404" width="2" height="15" fill="rgb(220,177,16)"/><text x="755.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (75 samples, 2.36%)</title><rect x="730" y="388" width="28" height="15" fill="rgb(222,81,44)"/><text x="733.00" y="398.50">N..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (7 samples, 0.22%)</title><rect x="755" y="404" width="3" height="15" fill="rgb(221,113,13)"/><text x="758.00" y="414.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (4 samples, 0.13%)</title><rect x="756" y="420" width="2" height="15" fill="rgb(216,160,40)"/><text x="759.00" y="430.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (9 samples, 0.28%)</title><rect x="758" y="388" width="3" height="15" fill="rgb(240,67,10)"/><text x="761.00" y="398.50"></text></g><g><title>NpyIter_GetInnerStrideArray (nditer_api.c) (4 samples, 0.13%)</title><rect x="761" y="388" width="2" height="15" fill="rgb(242,74,3)"/><text x="764.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (5 samples, 0.16%)</title><rect x="765" y="404" width="2" height="15" fill="rgb(220,111,52)"/><text x="768.00" y="414.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (11 samples, 0.35%)</title><rect x="764" y="388" width="4" height="15" fill="rgb(219,68,17)"/><text x="767.00" y="398.50"></text></g><g><title>npyiter_goto_iterindex (nditer_api.c) (3 samples, 0.09%)</title><rect x="767" y="404" width="1" height="15" fill="rgb(251,27,18)"/><text x="770.00" y="414.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (5 samples, 0.16%)</title><rect x="768" y="388" width="2" height="15" fill="rgb(253,127,41)"/><text x="771.00" y="398.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (3 samples, 0.09%)</title><rect x="769" y="404" width="1" height="15" fill="rgb(234,25,15)"/><text x="772.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (122 samples, 3.84%)</title><rect x="725" y="356" width="45" height="15" fill="rgb(207,173,12)"/><text x="728.00" y="366.50">exec..</text></g><g><title>iterator_loop (ufunc_object.c) (116 samples, 3.65%)</title><rect x="727" y="372" width="43" height="15" fill="rgb(210,206,51)"/><text x="730.00" y="382.50">iter..</text></g><g><title>get_ufunc_arguments (ufunc_object.c) (7 samples, 0.22%)</title><rect x="770" y="356" width="3" height="15" fill="rgb(217,90,40)"/><text x="773.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (174 samples, 5.47%)</title><rect x="710" y="340" width="65" height="15" fill="rgb(248,10,53)"/><text x="713.00" y="350.50">PyUFunc..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (3 samples, 0.09%)</title><rect x="774" y="356" width="1" height="15" fill="rgb(245,20,23)"/><text x="777.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (3 samples, 0.09%)</title><rect x="774" y="372" width="1" height="15" fill="rgb(236,10,37)"/><text x="777.00" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (3 samples, 0.09%)</title><rect x="774" y="388" width="1" height="15" fill="rgb(215,56,47)"/><text x="777.00" y="398.50"></text></g><g><title>_find_array_wrap (ufunc_object.c) (3 samples, 0.09%)</title><rect x="775" y="340" width="1" height="15" fill="rgb(223,7,54)"/><text x="778.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (211 samples, 6.64%)</title><rect x="699" y="308" width="79" height="15" fill="rgb(251,102,12)"/><text x="702.00" y="318.50">_run (mlp..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (193 samples, 6.07%)</title><rect x="706" y="324" width="72" height="15" fill="rgb(218,42,5)"/><text x="709.00" y="334.50">ufunc_ge..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (4 samples, 0.13%)</title><rect x="776" y="340" width="2" height="15" fill="rgb(253,100,53)"/><text x="779.00" y="350.50"></text></g><g><title>0x7f2b31273730 (libc-2.29.so) (3 samples, 0.09%)</title><rect x="792" y="340" width="1" height="15" fill="rgb(233,123,29)"/><text x="795.00" y="350.50"></text></g><g><title>arrays_overlap (array_assign.c) (3 samples, 0.09%)</title><rect x="794" y="372" width="1" height="15" fill="rgb(236,53,45)"/><text x="797.00" y="382.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (20 samples, 0.63%)</title><rect x="800" y="388" width="7" height="15" fill="rgb(228,132,50)"/><text x="803.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (10 samples, 0.31%)</title><rect x="803" y="404" width="4" height="15" fill="rgb(251,3,54)"/><text x="806.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.09%)</title><rect x="806" y="420" width="1" height="15" fill="rgb(245,181,6)"/><text x="809.00" y="430.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (6 samples, 0.19%)</title><rect x="807" y="388" width="2" height="15" fill="rgb(236,191,4)"/><text x="810.00" y="398.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (3 samples, 0.09%)</title><rect x="810" y="388" width="1" height="15" fill="rgb(215,174,48)"/><text x="813.00" y="398.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (4 samples, 0.13%)</title><rect x="811" y="388" width="1" height="15" fill="rgb(238,41,35)"/><text x="814.00" y="398.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (3 samples, 0.09%)</title><rect x="812" y="388" width="1" height="15" fill="rgb(234,178,0)"/><text x="815.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (54 samples, 1.70%)</title><rect x="794" y="356" width="20" height="15" fill="rgb(230,51,47)"/><text x="797.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (50 samples, 1.57%)</title><rect x="795" y="372" width="19" height="15" fill="rgb(248,214,4)"/><text x="798.00" y="382.50"></text></g><g><title>PyArray_NewLikeArray (ctors.c) (4 samples, 0.13%)</title><rect x="814" y="356" width="1" height="15" fill="rgb(210,78,11)"/><text x="817.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (112 samples, 3.52%)</title><rect x="778" y="308" width="41" height="15" fill="rgb(239,209,47)"/><text x="781.00" y="318.50">_ru..</text></g><g><title>array_copy (methods.c) (80 samples, 2.52%)</title><rect x="789" y="324" width="30" height="15" fill="rgb(226,1,11)"/><text x="792.00" y="334.50">ar..</text></g><g><title>PyArray_NewCopy (convert.c) (69 samples, 2.17%)</title><rect x="794" y="340" width="25" height="15" fill="rgb(234,63,42)"/><text x="797.00" y="350.50">P..</text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (11 samples, 0.35%)</title><rect x="815" y="356" width="4" height="15" fill="rgb(242,59,31)"/><text x="818.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (7 samples, 0.22%)</title><rect x="817" y="372" width="2" height="15" fill="rgb(239,107,8)"/><text x="820.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (7 samples, 0.22%)</title><rect x="817" y="388" width="2" height="15" fill="rgb(254,119,32)"/><text x="820.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (7 samples, 0.22%)</title><rect x="817" y="404" width="2" height="15" fill="rgb(254,213,16)"/><text x="820.00" y="414.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (13 samples, 0.41%)</title><rect x="838" y="340" width="5" height="15" fill="rgb(229,122,11)"/><text x="841.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (11 samples, 0.35%)</title><rect x="839" y="356" width="4" height="15" fill="rgb(229,8,25)"/><text x="842.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c) (18 samples, 0.57%)</title><rect x="838" y="324" width="6" height="15" fill="rgb(226,219,48)"/><text x="841.00" y="334.50"></text></g><g><title>npy_free_cache (alloc.c) (3 samples, 0.09%)</title><rect x="843" y="340" width="1" height="15" fill="rgb(228,174,30)"/><text x="846.00" y="350.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py) (6 samples, 0.19%)</title><rect x="857" y="340" width="3" height="15" fill="rgb(242,60,50)"/><text x="860.00" y="350.50"></text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (6 samples, 0.19%)</title><rect x="867" y="356" width="2" height="15" fill="rgb(254,54,20)"/><text x="870.00" y="366.50"></text></g><g><title>get_array_function (arrayfunction_override.c) (3 samples, 0.09%)</title><rect x="868" y="372" width="1" height="15" fill="rgb(210,122,17)"/><text x="871.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (23 samples, 0.72%)</title><rect x="919" y="388" width="9" height="15" fill="rgb(238,125,8)"/><text x="922.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (3 samples, 0.09%)</title><rect x="929" y="436" width="1" height="15" fill="rgb(238,219,45)"/><text x="932.00" y="446.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (21 samples, 0.66%)</title><rect x="928" y="404" width="8" height="15" fill="rgb(245,217,43)"/><text x="931.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (21 samples, 0.66%)</title><rect x="928" y="420" width="8" height="15" fill="rgb(240,194,26)"/><text x="931.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (16 samples, 0.50%)</title><rect x="930" y="436" width="6" height="15" fill="rgb(211,43,25)"/><text x="933.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (5 samples, 0.16%)</title><rect x="934" y="452" width="2" height="15" fill="rgb(248,42,12)"/><text x="937.00" y="462.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (3 samples, 0.09%)</title><rect x="948" y="420" width="1" height="15" fill="rgb(252,137,27)"/><text x="951.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (10 samples, 0.31%)</title><rect x="949" y="420" width="4" height="15" fill="rgb(245,13,45)"/><text x="952.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (8 samples, 0.25%)</title><rect x="950" y="436" width="3" height="15" fill="rgb(232,225,6)"/><text x="953.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (8 samples, 0.25%)</title><rect x="950" y="452" width="3" height="15" fill="rgb(211,192,32)"/><text x="953.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (7 samples, 0.22%)</title><rect x="960" y="468" width="3" height="15" fill="rgb(232,147,6)"/><text x="963.00" y="478.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (4 samples, 0.13%)</title><rect x="963" y="468" width="1" height="15" fill="rgb(226,216,35)"/><text x="966.00" y="478.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (4 samples, 0.13%)</title><rect x="964" y="468" width="2" height="15" fill="rgb(209,223,25)"/><text x="967.00" y="478.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (11 samples, 0.35%)</title><rect x="967" y="468" width="4" height="15" fill="rgb(217,201,4)"/><text x="970.00" y="478.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (8 samples, 0.25%)</title><rect x="971" y="468" width="3" height="15" fill="rgb(222,91,38)"/><text x="974.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (48 samples, 1.51%)</title><rect x="957" y="452" width="18" height="15" fill="rgb(205,42,24)"/><text x="960.00" y="462.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (8 samples, 0.25%)</title><rect x="975" y="452" width="3" height="15" fill="rgb(231,221,22)"/><text x="978.00" y="462.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.09%)</title><rect x="977" y="468" width="1" height="15" fill="rgb(242,21,10)"/><text x="980.00" y="478.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (5 samples, 0.16%)</title><rect x="981" y="516" width="2" height="15" fill="rgb(236,2,45)"/><text x="984.00" y="526.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (3 samples, 0.09%)</title><rect x="982" y="532" width="1" height="15" fill="rgb(208,85,42)"/><text x="985.00" y="542.50"></text></g><g><title>npy_alloc_cache (alloc.c) (10 samples, 0.31%)</title><rect x="984" y="516" width="4" height="15" fill="rgb(236,57,48)"/><text x="987.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (10 samples, 0.31%)</title><rect x="984" y="532" width="4" height="15" fill="rgb(251,113,7)"/><text x="987.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (5 samples, 0.16%)</title><rect x="986" y="548" width="2" height="15" fill="rgb(231,169,5)"/><text x="989.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.16%)</title><rect x="986" y="564" width="2" height="15" fill="rgb(224,91,23)"/><text x="989.00" y="574.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (13 samples, 0.41%)</title><rect x="988" y="516" width="4" height="15" fill="rgb(244,219,38)"/><text x="991.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (13 samples, 0.41%)</title><rect x="988" y="532" width="4" height="15" fill="rgb(253,107,27)"/><text x="991.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (12 samples, 0.38%)</title><rect x="988" y="548" width="4" height="15" fill="rgb(213,228,40)"/><text x="991.00" y="558.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (35 samples, 1.10%)</title><rect x="980" y="484" width="13" height="15" fill="rgb(222,45,24)"/><text x="983.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (35 samples, 1.10%)</title><rect x="980" y="500" width="13" height="15" fill="rgb(247,32,10)"/><text x="983.00" y="510.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (52 samples, 1.64%)</title><rect x="979" y="452" width="19" height="15" fill="rgb(250,222,3)"/><text x="982.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (52 samples, 1.64%)</title><rect x="979" y="468" width="19" height="15" fill="rgb(234,156,22)"/><text x="982.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (13 samples, 0.41%)</title><rect x="993" y="484" width="5" height="15" fill="rgb(241,28,3)"/><text x="996.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (33 samples, 1.04%)</title><rect x="998" y="452" width="12" height="15" fill="rgb(208,100,53)"/><text x="1001.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (29 samples, 0.91%)</title><rect x="1000" y="468" width="10" height="15" fill="rgb(221,6,16)"/><text x="1003.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (24 samples, 0.75%)</title><rect x="1001" y="484" width="9" height="15" fill="rgb(241,220,5)"/><text x="1004.00" y="494.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (9 samples, 0.28%)</title><rect x="1007" y="500" width="3" height="15" fill="rgb(209,15,25)"/><text x="1010.00" y="510.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (8 samples, 0.25%)</title><rect x="1007" y="516" width="3" height="15" fill="rgb(234,137,49)"/><text x="1010.00" y="526.50"></text></g><g><title>_check_ufunc_fperr (extobj.c) (4 samples, 0.13%)</title><rect x="1012" y="452" width="1" height="15" fill="rgb(241,113,12)"/><text x="1015.00" y="462.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (3 samples, 0.09%)</title><rect x="1013" y="452" width="1" height="15" fill="rgb(227,137,27)"/><text x="1016.00" y="462.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (4 samples, 0.13%)</title><rect x="1016" y="468" width="1" height="15" fill="rgb(227,174,48)"/><text x="1019.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (175 samples, 5.50%)</title><rect x="953" y="436" width="65" height="15" fill="rgb(236,119,14)"/><text x="956.00" y="446.50">PyUFunc..</text></g><g><title>reduce_loop (ufunc_object.c) (11 samples, 0.35%)</title><rect x="1014" y="452" width="4" height="15" fill="rgb(245,171,18)"/><text x="1017.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (3 samples, 0.09%)</title><rect x="1017" y="468" width="1" height="15" fill="rgb(251,144,52)"/><text x="1020.00" y="478.50"></text></g><g><title>_get_identity (ufunc_object.c) (4 samples, 0.13%)</title><rect x="1018" y="436" width="2" height="15" fill="rgb(249,172,17)"/><text x="1021.00" y="446.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (27 samples, 0.85%)</title><rect x="1020" y="436" width="10" height="15" fill="rgb(210,61,45)"/><text x="1023.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (17 samples, 0.53%)</title><rect x="1024" y="452" width="6" height="15" fill="rgb(248,3,16)"/><text x="1027.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (15 samples, 0.47%)</title><rect x="1024" y="468" width="6" height="15" fill="rgb(208,6,6)"/><text x="1027.00" y="478.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (208 samples, 6.54%)</title><rect x="953" y="420" width="77" height="15" fill="rgb(212,128,3)"/><text x="956.00" y="430.50">PyUFunc_..</text></g><g><title>sum (&lt;__array_function__ internals&gt;) (503 samples, 15.82%)</title><rect x="845" y="324" width="186" height="15" fill="rgb(221,142,15)"/><text x="848.00" y="334.50">sum (&lt;__array_function__..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (463 samples, 14.56%)</title><rect x="860" y="340" width="171" height="15" fill="rgb(211,157,12)"/><text x="863.00" y="350.50">array_implement_array_..</text></g><g><title>sum (numpy/core/fromnumeric.py) (437 samples, 13.74%)</title><rect x="869" y="356" width="162" height="15" fill="rgb(221,43,50)"/><text x="872.00" y="366.50">sum (numpy/core/from..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (375 samples, 11.79%)</title><rect x="892" y="372" width="139" height="15" fill="rgb(225,34,14)"/><text x="895.00" y="382.50">_wrapreduction (n..</text></g><g><title>ufunc_reduce (ufunc_object.c) (280 samples, 8.81%)</title><rect x="928" y="388" width="103" height="15" fill="rgb(223,28,34)"/><text x="931.00" y="398.50">ufunc_reduce..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (258 samples, 8.11%)</title><rect x="936" y="404" width="95" height="15" fill="rgb(221,53,5)"/><text x="939.00" y="414.50">PyUFunc_Gen..</text></g><g><title>unicode_eq (python3.7) (3 samples, 0.09%)</title><rect x="1030" y="420" width="1" height="15" fill="rgb(212,90,48)"/><text x="1033.00" y="430.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (6 samples, 0.19%)</title><rect x="1032" y="340" width="2" height="15" fill="rgb(238,222,28)"/><text x="1035.00" y="350.50"></text></g><g><title>PyUFunc_DefaultTypeResolver (ufunc_type_resolution.c) (3 samples, 0.09%)</title><rect x="1036" y="356" width="1" height="15" fill="rgb(217,108,45)"/><text x="1039.00" y="366.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (4 samples, 0.13%)</title><rect x="1037" y="356" width="1" height="15" fill="rgb(221,220,9)"/><text x="1040.00" y="366.50"></text></g><g><title>_find_array_method (ufunc_object.c) (3 samples, 0.09%)</title><rect x="1037" y="372" width="1" height="15" fill="rgb(215,62,23)"/><text x="1040.00" y="382.50"></text></g><g><title>array_alloc (arrayobject.c) (3 samples, 0.09%)</title><rect x="1041" y="404" width="2" height="15" fill="rgb(246,37,22)"/><text x="1044.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (23 samples, 0.72%)</title><rect x="1040" y="372" width="8" height="15" fill="rgb(223,188,47)"/><text x="1043.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (23 samples, 0.72%)</title><rect x="1040" y="388" width="8" height="15" fill="rgb(240,156,51)"/><text x="1043.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (12 samples, 0.38%)</title><rect x="1044" y="404" width="4" height="15" fill="rgb(237,212,47)"/><text x="1047.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (11 samples, 0.35%)</title><rect x="1044" y="420" width="4" height="15" fill="rgb(218,52,48)"/><text x="1047.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (10 samples, 0.31%)</title><rect x="1044" y="436" width="4" height="15" fill="rgb(244,139,37)"/><text x="1047.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (33 samples, 1.04%)</title><rect x="1039" y="356" width="12" height="15" fill="rgb(214,23,33)"/><text x="1042.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (6 samples, 0.19%)</title><rect x="1049" y="372" width="2" height="15" fill="rgb(218,212,53)"/><text x="1052.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (3 samples, 0.09%)</title><rect x="1050" y="388" width="1" height="15" fill="rgb(229,144,18)"/><text x="1053.00" y="398.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (6 samples, 0.19%)</title><rect x="1051" y="356" width="2" height="15" fill="rgb(222,187,42)"/><text x="1054.00" y="366.50"></text></g><g><title>PyArray_FromArray (ctors.c) (3 samples, 0.09%)</title><rect x="1052" y="372" width="1" height="15" fill="rgb(218,29,7)"/><text x="1055.00" y="382.50"></text></g><g><title>set_ufunc_loop_data_types (ufunc_type_resolution.c) (4 samples, 0.13%)</title><rect x="1058" y="372" width="2" height="15" fill="rgb(234,151,5)"/><text x="1061.00" y="382.50"></text></g><g><title>PyArray_CanCastTo (convert_datatype.c) (8 samples, 0.25%)</title><rect x="1064" y="420" width="3" height="15" fill="rgb(235,68,45)"/><text x="1067.00" y="430.50"></text></g><g><title>PyArray_CanCastSafely (convert_datatype.c) (5 samples, 0.16%)</title><rect x="1065" y="436" width="2" height="15" fill="rgb(224,1,6)"/><text x="1068.00" y="446.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (25 samples, 0.79%)</title><rect x="1062" y="388" width="10" height="15" fill="rgb(228,133,9)"/><text x="1065.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (24 samples, 0.75%)</title><rect x="1063" y="404" width="9" height="15" fill="rgb(253,124,20)"/><text x="1066.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (13 samples, 0.41%)</title><rect x="1067" y="420" width="5" height="15" fill="rgb(238,202,24)"/><text x="1070.00" y="430.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (7 samples, 0.22%)</title><rect x="1069" y="436" width="3" height="15" fill="rgb(234,91,11)"/><text x="1072.00" y="446.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (53 samples, 1.67%)</title><rect x="1053" y="356" width="20" height="15" fill="rgb(238,193,33)"/><text x="1056.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (34 samples, 1.07%)</title><rect x="1060" y="372" width="13" height="15" fill="rgb(238,215,28)"/><text x="1063.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (4 samples, 0.13%)</title><rect x="1072" y="388" width="1" height="15" fill="rgb(206,12,3)"/><text x="1075.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (687 samples, 21.60%)</title><rect x="819" y="308" width="255" height="15" fill="rgb(250,18,21)"/><text x="822.00" y="318.50">_run (mlprodict/onnxrt/ops_cpu/op_..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (115 samples, 3.62%)</title><rect x="1031" y="324" width="43" height="15" fill="rgb(251,87,16)"/><text x="1034.00" y="334.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (107 samples, 3.36%)</title><rect x="1034" y="340" width="40" height="15" fill="rgb(221,71,29)"/><text x="1037.00" y="350.50">PyU..</text></g><g><title>array_descr_get (getset.c) (4 samples, 0.13%)</title><rect x="1074" y="308" width="2" height="15" fill="rgb(244,86,6)"/><text x="1077.00" y="318.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,806 samples, 56.79%)</title><rect x="406" y="260" width="670" height="15" fill="rgb(235,28,45)"/><text x="409.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,177 samples, 37.01%)</title><rect x="640" y="276" width="436" height="15" fill="rgb(224,81,23)"/><text x="643.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,075 samples, 33.81%)</title><rect x="677" y="292" width="399" height="15" fill="rgb(207,50,15)"/><text x="680.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (2,093 samples, 65.82%)</title><rect x="301" y="244" width="777" height="15" fill="rgb(214,24,26)"/><text x="304.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>unicode_eq (python3.7) (4 samples, 0.13%)</title><rect x="1076" y="260" width="2" height="15" fill="rgb(235,73,12)"/><text x="1079.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (6 samples, 0.19%)</title><rect x="1078" y="260" width="2" height="15" fill="rgb(241,70,24)"/><text x="1081.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (5 samples, 0.16%)</title><rect x="1079" y="276" width="1" height="15" fill="rgb(218,147,22)"/><text x="1082.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (2,153 samples, 67.70%)</title><rect x="282" y="228" width="799" height="15" fill="rgb(227,130,31)"/><text x="285.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (8 samples, 0.25%)</title><rect x="1078" y="244" width="3" height="15" fill="rgb(215,15,49)"/><text x="1081.00" y="254.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (19 samples, 0.60%)</title><rect x="1082" y="308" width="7" height="15" fill="rgb(238,36,46)"/><text x="1085.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (7 samples, 0.22%)</title><rect x="1086" y="324" width="3" height="15" fill="rgb(214,227,14)"/><text x="1089.00" y="334.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (21 samples, 0.66%)</title><rect x="1082" y="276" width="7" height="15" fill="rgb(250,172,47)"/><text x="1085.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (20 samples, 0.63%)</title><rect x="1082" y="292" width="7" height="15" fill="rgb(230,144,4)"/><text x="1085.00" y="302.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (11 samples, 0.35%)</title><rect x="1091" y="356" width="4" height="15" fill="rgb(231,53,40)"/><text x="1094.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (10 samples, 0.31%)</title><rect x="1092" y="372" width="3" height="15" fill="rgb(205,21,20)"/><text x="1095.00" y="382.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (3 samples, 0.09%)</title><rect x="1094" y="388" width="1" height="15" fill="rgb(230,29,8)"/><text x="1097.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (2,637 samples, 82.92%)</title><rect x="117" y="212" width="979" height="15" fill="rgb(247,104,49)"/><text x="120.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (40 samples, 1.26%)</title><rect x="1081" y="228" width="15" height="15" fill="rgb(218,225,30)"/><text x="1084.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (39 samples, 1.23%)</title><rect x="1081" y="244" width="15" height="15" fill="rgb(231,126,19)"/><text x="1084.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (38 samples, 1.19%)</title><rect x="1082" y="260" width="14" height="15" fill="rgb(209,214,53)"/><text x="1085.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (17 samples, 0.53%)</title><rect x="1089" y="276" width="7" height="15" fill="rgb(254,72,42)"/><text x="1092.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (14 samples, 0.44%)</title><rect x="1090" y="292" width="6" height="15" fill="rgb(246,6,47)"/><text x="1093.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (14 samples, 0.44%)</title><rect x="1090" y="308" width="6" height="15" fill="rgb(250,198,42)"/><text x="1093.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (14 samples, 0.44%)</title><rect x="1090" y="324" width="6" height="15" fill="rgb(222,19,18)"/><text x="1093.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (14 samples, 0.44%)</title><rect x="1090" y="340" width="6" height="15" fill="rgb(220,26,10)"/><text x="1093.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_shape.py) (3 samples, 0.09%)</title><rect x="1096" y="212" width="1" height="15" fill="rgb(245,201,30)"/><text x="1099.00" y="222.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (6 samples, 0.19%)</title><rect x="1099" y="260" width="2" height="15" fill="rgb(241,117,50)"/><text x="1102.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.09%)</title><rect x="1100" y="276" width="1" height="15" fill="rgb(207,0,42)"/><text x="1103.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (3 samples, 0.09%)</title><rect x="1100" y="292" width="1" height="15" fill="rgb(230,185,13)"/><text x="1103.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (3 samples, 0.09%)</title><rect x="1100" y="308" width="1" height="15" fill="rgb(221,216,43)"/><text x="1103.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (3 samples, 0.09%)</title><rect x="1100" y="324" width="1" height="15" fill="rgb(215,204,23)"/><text x="1103.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (3 samples, 0.09%)</title><rect x="1100" y="340" width="1" height="15" fill="rgb(223,105,42)"/><text x="1103.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (18 samples, 0.57%)</title><rect x="1097" y="212" width="6" height="15" fill="rgb(211,11,15)"/><text x="1100.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (18 samples, 0.57%)</title><rect x="1097" y="228" width="6" height="15" fill="rgb(237,202,20)"/><text x="1100.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (15 samples, 0.47%)</title><rect x="1098" y="244" width="5" height="15" fill="rgb(211,35,7)"/><text x="1101.00" y="254.50"></text></g><g><title>array_subscript (mapping.c) (3 samples, 0.09%)</title><rect x="1102" y="260" width="1" height="15" fill="rgb(216,195,20)"/><text x="1105.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (5 samples, 0.16%)</title><rect x="1104" y="212" width="2" height="15" fill="rgb(218,170,2)"/><text x="1107.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.09%)</title><rect x="1105" y="228" width="1" height="15" fill="rgb(205,18,4)"/><text x="1108.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (3 samples, 0.09%)</title><rect x="1105" y="244" width="1" height="15" fill="rgb(231,40,32)"/><text x="1108.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (3 samples, 0.09%)</title><rect x="1105" y="260" width="1" height="15" fill="rgb(247,31,52)"/><text x="1108.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (7 samples, 0.22%)</title><rect x="1106" y="228" width="3" height="15" fill="rgb(232,128,10)"/><text x="1109.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (6 samples, 0.19%)</title><rect x="1106" y="244" width="3" height="15" fill="rgb(212,188,43)"/><text x="1109.00" y="254.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py) (5 samples, 0.16%)</title><rect x="1107" y="260" width="2" height="15" fill="rgb(209,129,26)"/><text x="1110.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.09%)</title><rect x="1112" y="372" width="1" height="15" fill="rgb(246,167,1)"/><text x="1115.00" y="382.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (5 samples, 0.16%)</title><rect x="1112" y="356" width="2" height="15" fill="rgb(228,119,26)"/><text x="1115.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (13 samples, 0.41%)</title><rect x="1109" y="228" width="5" height="15" fill="rgb(243,10,4)"/><text x="1112.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (12 samples, 0.38%)</title><rect x="1110" y="244" width="4" height="15" fill="rgb(213,116,14)"/><text x="1113.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (11 samples, 0.35%)</title><rect x="1110" y="260" width="4" height="15" fill="rgb(224,179,2)"/><text x="1113.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (10 samples, 0.31%)</title><rect x="1110" y="276" width="4" height="15" fill="rgb(220,175,23)"/><text x="1113.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (9 samples, 0.28%)</title><rect x="1111" y="292" width="3" height="15" fill="rgb(221,193,1)"/><text x="1114.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (8 samples, 0.25%)</title><rect x="1111" y="308" width="3" height="15" fill="rgb(208,97,36)"/><text x="1114.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (7 samples, 0.22%)</title><rect x="1112" y="324" width="2" height="15" fill="rgb(207,57,41)"/><text x="1115.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (6 samples, 0.19%)</title><rect x="1112" y="340" width="2" height="15" fill="rgb(236,117,47)"/><text x="1115.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (3 samples, 0.09%)</title><rect x="1114" y="228" width="1" height="15" fill="rgb(218,206,30)"/><text x="1117.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.09%)</title><rect x="1114" y="244" width="1" height="15" fill="rgb(233,54,33)"/><text x="1117.00" y="254.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (2,770 samples, 87.11%)</title><rect x="89" y="132" width="1027" height="15" fill="rgb(225,37,37)"/><text x="92.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (2,769 samples, 87.08%)</title><rect x="89" y="148" width="1027" height="15" fill="rgb(232,169,21)"/><text x="92.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (2,769 samples, 87.08%)</title><rect x="89" y="164" width="1027" height="15" fill="rgb(249,207,35)"/><text x="92.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (2,757 samples, 86.70%)</title><rect x="93" y="180" width="1023" height="15" fill="rgb(244,218,0)"/><text x="96.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (2,729 samples, 85.82%)</title><rect x="104" y="196" width="1012" height="15" fill="rgb(254,60,51)"/><text x="107.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (28 samples, 0.88%)</title><rect x="1106" y="212" width="10" height="15" fill="rgb(235,8,16)"/><text x="1109.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_transpose.py) (3 samples, 0.09%)</title><rect x="1115" y="228" width="1" height="15" fill="rgb(218,214,1)"/><text x="1118.00" y="238.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py) (2,773 samples, 87.20%)</title><rect x="88" y="100" width="1029" height="15" fill="rgb(241,182,0)"/><text x="91.00" y="110.50">profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (2,772 samples, 87.17%)</title><rect x="89" y="116" width="1028" height="15" fill="rgb(220,144,7)"/><text x="92.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py) (2,774 samples, 87.23%)</title><rect x="88" y="68" width="1030" height="15" fill="rgb(207,213,43)"/><text x="91.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py) (2,774 samples, 87.23%)</title><rect x="88" y="84" width="1030" height="15" fill="rgb(231,150,48)"/><text x="91.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py)</text></g><g><title>_num_samples (sklearn/utils/validation.py) (5 samples, 0.16%)</title><rect x="1119" y="164" width="2" height="15" fill="rgb(251,29,23)"/><text x="1122.00" y="174.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (3 samples, 0.09%)</title><rect x="1124" y="180" width="1" height="15" fill="rgb(245,70,25)"/><text x="1127.00" y="190.50"></text></g><g><title>array_subscript (mapping.c) (7 samples, 0.22%)</title><rect x="1124" y="164" width="2" height="15" fill="rgb(230,149,25)"/><text x="1127.00" y="174.50"></text></g><g><title>array_sum (methods.c) (5 samples, 0.16%)</title><rect x="1126" y="164" width="2" height="15" fill="rgb(251,58,2)"/><text x="1129.00" y="174.50"></text></g><g><title>forward_ndarray_method (methods.c) (5 samples, 0.16%)</title><rect x="1126" y="180" width="2" height="15" fill="rgb(248,60,15)"/><text x="1129.00" y="190.50"></text></g><g><title>_sum (numpy/core/_methods.py) (4 samples, 0.13%)</title><rect x="1127" y="196" width="1" height="15" fill="rgb(243,35,48)"/><text x="1130.00" y="206.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 0.09%)</title><rect x="1127" y="212" width="1" height="15" fill="rgb(218,217,19)"/><text x="1130.00" y="222.50"></text></g><g><title>array_zeros (multiarraymodule.c) (3 samples, 0.09%)</title><rect x="1128" y="164" width="1" height="15" fill="rgb(246,124,51)"/><text x="1131.00" y="174.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (3 samples, 0.09%)</title><rect x="1131" y="180" width="1" height="15" fill="rgb(226,52,38)"/><text x="1134.00" y="190.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (3 samples, 0.09%)</title><rect x="1132" y="180" width="1" height="15" fill="rgb(226,210,24)"/><text x="1135.00" y="190.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py) (4 samples, 0.13%)</title><rect x="1133" y="180" width="2" height="15" fill="rgb(229,201,24)"/><text x="1136.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (19 samples, 0.60%)</title><rect x="1129" y="164" width="7" height="15" fill="rgb(217,136,34)"/><text x="1132.00" y="174.50"></text></g><g><title>simplefilter (warnings.py) (4 samples, 0.13%)</title><rect x="1135" y="180" width="1" height="15" fill="rgb(238,13,11)"/><text x="1138.00" y="190.50"></text></g><g><title>_initialize_backend (joblib/parallel.py) (4 samples, 0.13%)</title><rect x="1141" y="196" width="1" height="15" fill="rgb(238,70,49)"/><text x="1144.00" y="206.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (3 samples, 0.09%)</title><rect x="1150" y="372" width="1" height="15" fill="rgb(234,156,21)"/><text x="1153.00" y="382.50"></text></g><g><title>0x7f2b0b67132c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (15 samples, 0.47%)</title><rect x="1147" y="324" width="5" height="15" fill="rgb(205,177,51)"/><text x="1150.00" y="334.50"></text></g><g><title>0x7f2b0b63c5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (15 samples, 0.47%)</title><rect x="1147" y="340" width="5" height="15" fill="rgb(220,25,49)"/><text x="1150.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (15 samples, 0.47%)</title><rect x="1147" y="356" width="5" height="15" fill="rgb(234,85,38)"/><text x="1150.00" y="366.50"></text></g><g><title>simplefilter (warnings.py) (3 samples, 0.09%)</title><rect x="1151" y="372" width="1" height="15" fill="rgb(226,19,6)"/><text x="1154.00" y="382.50"></text></g><g><title>_add_filter (warnings.py) (3 samples, 0.09%)</title><rect x="1151" y="388" width="1" height="15" fill="rgb(247,136,10)"/><text x="1154.00" y="398.50"></text></g><g><title>0x7f2b0b671708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.22%)</title><rect x="1153" y="324" width="3" height="15" fill="rgb(228,46,21)"/><text x="1156.00" y="334.50"></text></g><g><title>0x7f2b0b63c5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.22%)</title><rect x="1153" y="340" width="3" height="15" fill="rgb(244,32,28)"/><text x="1156.00" y="350.50"></text></g><g><title>0x7f2b0b66d73a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.16%)</title><rect x="1154" y="356" width="2" height="15" fill="rgb(236,60,29)"/><text x="1157.00" y="366.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (35 samples, 1.10%)</title><rect x="1146" y="276" width="13" height="15" fill="rgb(229,14,41)"/><text x="1149.00" y="286.50"></text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py) (35 samples, 1.10%)</title><rect x="1146" y="292" width="13" height="15" fill="rgb(210,50,28)"/><text x="1149.00" y="302.50"></text></g><g><title>0x7f2b0b675e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (33 samples, 1.04%)</title><rect x="1147" y="308" width="12" height="15" fill="rgb(231,3,42)"/><text x="1150.00" y="318.50"></text></g><g><title>0x7f2b0b6748cc (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.19%)</title><rect x="1157" y="324" width="2" height="15" fill="rgb(212,144,34)"/><text x="1160.00" y="334.50"></text></g><g><title>0x7f2b0b63dd53 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.19%)</title><rect x="1157" y="340" width="2" height="15" fill="rgb(211,161,2)"/><text x="1160.00" y="350.50"></text></g><g><title>0x7f2b0bad4e62 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.19%)</title><rect x="1157" y="356" width="2" height="15" fill="rgb(230,92,18)"/><text x="1160.00" y="366.50"></text></g><g><title>0x7f2b0bab6654 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.19%)</title><rect x="1157" y="372" width="2" height="15" fill="rgb(242,221,26)"/><text x="1160.00" y="382.50"></text></g><g><title>0x7f2b0babdeaf (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.19%)</title><rect x="1157" y="388" width="2" height="15" fill="rgb(228,77,13)"/><text x="1160.00" y="398.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 0.19%)</title><rect x="1157" y="404" width="2" height="15" fill="rgb(208,183,37)"/><text x="1160.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (6 samples, 0.19%)</title><rect x="1157" y="420" width="2" height="15" fill="rgb(210,191,42)"/><text x="1160.00" y="430.50"></text></g><g><title>_dispatch (joblib/parallel.py) (37 samples, 1.16%)</title><rect x="1146" y="212" width="13" height="15" fill="rgb(236,100,18)"/><text x="1149.00" y="222.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (37 samples, 1.16%)</title><rect x="1146" y="228" width="13" height="15" fill="rgb(250,5,26)"/><text x="1149.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (37 samples, 1.16%)</title><rect x="1146" y="244" width="13" height="15" fill="rgb(224,136,54)"/><text x="1149.00" y="254.50"></text></g><g><title>__call__ (joblib/parallel.py) (37 samples, 1.16%)</title><rect x="1146" y="260" width="13" height="15" fill="rgb(213,47,50)"/><text x="1149.00" y="270.50"></text></g><g><title>get (queue.py) (9 samples, 0.28%)</title><rect x="1159" y="212" width="4" height="15" fill="rgb(244,98,36)"/><text x="1162.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py) (74 samples, 2.33%)</title><rect x="1138" y="180" width="27" height="15" fill="rgb(238,122,34)"/><text x="1141.00" y="190.50">_..</text></g><g><title>dispatch_one_batch (joblib/parallel.py) (62 samples, 1.95%)</title><rect x="1142" y="196" width="23" height="15" fill="rgb(206,101,2)"/><text x="1145.00" y="206.50">d..</text></g><g><title>put (queue.py) (5 samples, 0.16%)</title><rect x="1164" y="212" width="1" height="15" fill="rgb(235,103,29)"/><text x="1167.00" y="222.50"></text></g><g><title>notify (threading.py) (3 samples, 0.09%)</title><rect x="1164" y="228" width="1" height="15" fill="rgb(213,79,6)"/><text x="1167.00" y="238.50"></text></g><g><title>__init__ (distutils/version.py) (3 samples, 0.09%)</title><rect x="1165" y="180" width="1" height="15" fill="rgb(223,57,44)"/><text x="1168.00" y="190.50"></text></g><g><title>parse (distutils/version.py) (3 samples, 0.09%)</title><rect x="1165" y="196" width="1" height="15" fill="rgb(221,66,18)"/><text x="1168.00" y="206.50"></text></g><g><title>__init__ (queue.py) (4 samples, 0.13%)</title><rect x="1169" y="196" width="2" height="15" fill="rgb(224,81,17)"/><text x="1172.00" y="206.50"></text></g><g><title>__init__ (threading.py) (4 samples, 0.13%)</title><rect x="1169" y="212" width="2" height="15" fill="rgb(234,114,30)"/><text x="1172.00" y="222.50"></text></g><g><title>__init__ (joblib/parallel.py) (14 samples, 0.44%)</title><rect x="1166" y="180" width="6" height="15" fill="rgb(249,134,6)"/><text x="1169.00" y="190.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (3 samples, 0.09%)</title><rect x="1174" y="196" width="1" height="15" fill="rgb(205,27,40)"/><text x="1177.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (14 samples, 0.44%)</title><rect x="1172" y="180" width="5" height="15" fill="rgb(246,30,54)"/><text x="1175.00" y="190.50"></text></g><g><title>simplefilter (warnings.py) (4 samples, 0.13%)</title><rect x="1175" y="196" width="2" height="15" fill="rgb(236,176,25)"/><text x="1178.00" y="206.50"></text></g><g><title>_add_filter (warnings.py) (3 samples, 0.09%)</title><rect x="1176" y="212" width="1" height="15" fill="rgb(231,184,27)"/><text x="1179.00" y="222.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (3 samples, 0.09%)</title><rect x="1177" y="180" width="1" height="15" fill="rgb(216,168,6)"/><text x="1180.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (3 samples, 0.09%)</title><rect x="1177" y="196" width="1" height="15" fill="rgb(211,119,24)"/><text x="1180.00" y="206.50"></text></g><g><title>update_wrapper (functools.py) (3 samples, 0.09%)</title><rect x="1178" y="196" width="1" height="15" fill="rgb(250,167,30)"/><text x="1181.00" y="206.50"></text></g><g><title>delayed (joblib/parallel.py) (4 samples, 0.13%)</title><rect x="1178" y="180" width="1" height="15" fill="rgb(229,166,9)"/><text x="1181.00" y="190.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py) (8 samples, 0.25%)</title><rect x="1179" y="180" width="3" height="15" fill="rgb(250,147,42)"/><text x="1182.00" y="190.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (6 samples, 0.19%)</title><rect x="1180" y="196" width="2" height="15" fill="rgb(232,1,14)"/><text x="1183.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (132 samples, 4.15%)</title><rect x="1136" y="164" width="49" height="15" fill="rgb(210,224,52)"/><text x="1139.00" y="174.50">knei..</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (8 samples, 0.25%)</title><rect x="1182" y="180" width="3" height="15" fill="rgb(238,74,38)"/><text x="1185.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.19%)</title><rect x="1183" y="196" width="2" height="15" fill="rgb(246,85,23)"/><text x="1186.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (5 samples, 0.16%)</title><rect x="1184" y="212" width="1" height="15" fill="rgb(252,9,52)"/><text x="1187.00" y="222.50"></text></g><g><title>ones_like (&lt;__array_function__ internals&gt;) (4 samples, 0.13%)</title><rect x="1185" y="164" width="2" height="15" fill="rgb(207,37,36)"/><text x="1188.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (4 samples, 0.13%)</title><rect x="1185" y="180" width="2" height="15" fill="rgb(228,173,14)"/><text x="1188.00" y="190.50"></text></g><g><title>ones_like (numpy/core/numeric.py) (4 samples, 0.13%)</title><rect x="1185" y="196" width="2" height="15" fill="rgb(216,84,27)"/><text x="1188.00" y="206.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py) (193 samples, 6.07%)</title><rect x="1118" y="100" width="71" height="15" fill="rgb(212,34,10)"/><text x="1121.00" y="110.50">profile ..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (193 samples, 6.07%)</title><rect x="1118" y="116" width="71" height="15" fill="rgb(221,114,41)"/><text x="1121.00" y="126.50">time_pre..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (192 samples, 6.04%)</title><rect x="1118" y="132" width="71" height="15" fill="rgb(248,64,4)"/><text x="1121.00" y="142.50">&lt;lambda&gt;..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py) (191 samples, 6.01%)</title><rect x="1118" y="148" width="71" height="15" fill="rgb(254,217,52)"/><text x="1121.00" y="158.50">predict_..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 0.19%)</title><rect x="1187" y="164" width="2" height="15" fill="rgb(215,224,38)"/><text x="1190.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (6 samples, 0.19%)</title><rect x="1187" y="180" width="2" height="15" fill="rgb(222,194,21)"/><text x="1190.00" y="190.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.09%)</title><rect x="1188" y="196" width="1" height="15" fill="rgb(228,197,49)"/><text x="1191.00" y="206.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.09%)</title><rect x="1188" y="212" width="1" height="15" fill="rgb(231,112,5)"/><text x="1191.00" y="222.50"></text></g><g><title>all (3,180 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(208,188,52)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py) (3,180 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(251,185,47)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py) (194 samples, 6.10%)</title><rect x="1118" y="68" width="72" height="15" fill="rgb(254,73,9)"/><text x="1121.00" y="78.50">profile_..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py) (194 samples, 6.10%)</title><rect x="1118" y="84" width="72" height="15" fill="rgb(251,167,23)"/><text x="1121.00" y="94.50">setup_pr..</text></g></g></svg>