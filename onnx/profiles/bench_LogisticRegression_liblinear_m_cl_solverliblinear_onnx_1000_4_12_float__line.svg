<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx.py:4) (11 samples, 1.40%)</title><rect x="1.0191%" y="148" width="1.4013%" height="15" fill="rgb(227,0,7)"/><text x="1.2691%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 1.40%)</title><rect x="1.0191%" y="164" width="1.4013%" height="15" fill="rgb(217,0,24)"/><text x="1.2691%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (11 samples, 1.40%)</title><rect x="1.0191%" y="180" width="1.4013%" height="15" fill="rgb(221,193,54)"/><text x="1.2691%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 1.40%)</title><rect x="1.0191%" y="196" width="1.4013%" height="15" fill="rgb(248,212,6)"/><text x="1.2691%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 1.40%)</title><rect x="1.0191%" y="212" width="1.4013%" height="15" fill="rgb(208,68,35)"/><text x="1.2691%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 1.40%)</title><rect x="1.0191%" y="228" width="1.4013%" height="15" fill="rgb(232,128,0)"/><text x="1.2691%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 1.40%)</title><rect x="1.0191%" y="244" width="1.4013%" height="15" fill="rgb(207,160,47)"/><text x="1.2691%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 1.40%)</title><rect x="1.0191%" y="260" width="1.4013%" height="15" fill="rgb(228,23,34)"/><text x="1.2691%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 1.40%)</title><rect x="1.0191%" y="276" width="1.4013%" height="15" fill="rgb(218,30,26)"/><text x="1.2691%" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (8 samples, 1.02%)</title><rect x="1.4013%" y="292" width="1.0191%" height="15" fill="rgb(220,122,19)"/><text x="1.6513%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.02%)</title><rect x="1.4013%" y="308" width="1.0191%" height="15" fill="rgb(250,228,42)"/><text x="1.6513%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (8 samples, 1.02%)</title><rect x="1.4013%" y="324" width="1.0191%" height="15" fill="rgb(240,193,28)"/><text x="1.6513%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.02%)</title><rect x="1.4013%" y="340" width="1.0191%" height="15" fill="rgb(216,20,37)"/><text x="1.6513%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.02%)</title><rect x="1.4013%" y="356" width="1.0191%" height="15" fill="rgb(206,188,39)"/><text x="1.6513%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 1.02%)</title><rect x="1.4013%" y="372" width="1.0191%" height="15" fill="rgb(217,207,13)"/><text x="1.6513%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 1.02%)</title><rect x="1.4013%" y="388" width="1.0191%" height="15" fill="rgb(231,73,38)"/><text x="1.6513%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 1.02%)</title><rect x="1.4013%" y="404" width="1.0191%" height="15" fill="rgb(225,20,46)"/><text x="1.6513%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.02%)</title><rect x="1.4013%" y="420" width="1.0191%" height="15" fill="rgb(210,31,41)"/><text x="1.6513%" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (8 samples, 1.02%)</title><rect x="1.4013%" y="436" width="1.0191%" height="15" fill="rgb(221,200,47)"/><text x="1.6513%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 1.02%)</title><rect x="1.4013%" y="452" width="1.0191%" height="15" fill="rgb(226,26,5)"/><text x="1.6513%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 1.02%)</title><rect x="1.4013%" y="468" width="1.0191%" height="15" fill="rgb(249,33,26)"/><text x="1.6513%" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 1.02%)</title><rect x="1.4013%" y="484" width="1.0191%" height="15" fill="rgb(235,183,28)"/><text x="1.6513%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 1.02%)</title><rect x="1.4013%" y="500" width="1.0191%" height="15" fill="rgb(221,5,38)"/><text x="1.6513%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 1.02%)</title><rect x="1.4013%" y="516" width="1.0191%" height="15" fill="rgb(247,18,42)"/><text x="1.6513%" y="526.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:4) (24 samples, 3.06%)</title><rect x="0.0000%" y="52" width="3.0573%" height="15" fill="rgb(241,131,45)"/><text x="0.2500%" y="62.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (24 samples, 3.06%)</title><rect x="0.0000%" y="68" width="3.0573%" height="15" fill="rgb(249,31,29)"/><text x="0.2500%" y="78.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (24 samples, 3.06%)</title><rect x="0.0000%" y="84" width="3.0573%" height="15" fill="rgb(225,111,53)"/><text x="0.2500%" y="94.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (24 samples, 3.06%)</title><rect x="0.0000%" y="100" width="3.0573%" height="15" fill="rgb(238,160,17)"/><text x="0.2500%" y="110.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (24 samples, 3.06%)</title><rect x="0.0000%" y="116" width="3.0573%" height="15" fill="rgb(214,148,48)"/><text x="0.2500%" y="126.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (24 samples, 3.06%)</title><rect x="0.0000%" y="132" width="3.0573%" height="15" fill="rgb(232,36,49)"/><text x="0.2500%" y="142.50">_ca..</text></g><g><title>decision_function (sklearn/linear_model/_base.py:268) (24 samples, 3.06%)</title><rect x="5.0955%" y="180" width="3.0573%" height="15" fill="rgb(209,103,24)"/><text x="5.3455%" y="190.50">dec..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (11 samples, 1.40%)</title><rect x="8.5350%" y="212" width="1.4013%" height="15" fill="rgb(229,88,8)"/><text x="8.7850%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (11 samples, 1.40%)</title><rect x="8.5350%" y="228" width="1.4013%" height="15" fill="rgb(213,181,19)"/><text x="8.7850%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (10 samples, 1.27%)</title><rect x="8.6624%" y="244" width="1.2739%" height="15" fill="rgb(254,191,54)"/><text x="8.9124%" y="254.50"></text></g><g><title>array_add (number.c:330) (13 samples, 1.66%)</title><rect x="8.4076%" y="196" width="1.6561%" height="15" fill="rgb(241,83,37)"/><text x="8.6576%" y="206.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (18 samples, 2.29%)</title><rect x="10.1911%" y="196" width="2.2930%" height="15" fill="rgb(233,36,39)"/><text x="10.4411%" y="206.50">s..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (12 samples, 1.53%)</title><rect x="10.9554%" y="212" width="1.5287%" height="15" fill="rgb(226,3,54)"/><text x="11.2054%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (12 samples, 1.53%)</title><rect x="10.9554%" y="228" width="1.5287%" height="15" fill="rgb(245,192,40)"/><text x="11.2054%" y="238.50"></text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:307) (66 samples, 8.41%)</title><rect x="4.2038%" y="164" width="8.4076%" height="15" fill="rgb(238,167,29)"/><text x="4.4538%" y="174.50">_predict_pro..</text></g><g><title>decision_function (sklearn/linear_model/_base.py:276) (33 samples, 4.20%)</title><rect x="8.4076%" y="180" width="4.2038%" height="15" fill="rgb(232,182,51)"/><text x="8.6576%" y="190.50">decis..</text></g><g><title>0x7fce3bead225 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (20 samples, 2.55%)</title><rect x="13.5032%" y="260" width="2.5478%" height="15" fill="rgb(231,60,39)"/><text x="13.7532%" y="270.50">0x..</text></g><g><title>exp (libm-2.29.so) (18 samples, 2.29%)</title><rect x="13.7580%" y="276" width="2.2930%" height="15" fill="rgb(208,69,12)"/><text x="14.0080%" y="286.50">e..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (32 samples, 4.08%)</title><rect x="13.2484%" y="196" width="4.0764%" height="15" fill="rgb(235,93,37)"/><text x="13.4984%" y="206.50">PyUF..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (32 samples, 4.08%)</title><rect x="13.2484%" y="212" width="4.0764%" height="15" fill="rgb(213,116,39)"/><text x="13.4984%" y="222.50">exec..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (32 samples, 4.08%)</title><rect x="13.2484%" y="228" width="4.0764%" height="15" fill="rgb(222,207,29)"/><text x="13.4984%" y="238.50">triv..</text></g><g><title>0x7fce3be8c63d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (31 samples, 3.95%)</title><rect x="13.3758%" y="244" width="3.9490%" height="15" fill="rgb(206,96,30)"/><text x="13.6258%" y="254.50">0x7f..</text></g><g><title>0x7fce3bead239 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (9 samples, 1.15%)</title><rect x="16.1783%" y="260" width="1.1465%" height="15" fill="rgb(218,138,4)"/><text x="16.4283%" y="270.50"></text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:308) (38 samples, 4.84%)</title><rect x="12.6115%" y="164" width="4.8408%" height="15" fill="rgb(250,191,14)"/><text x="12.8615%" y="174.50">_predi..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (35 samples, 4.46%)</title><rect x="12.9936%" y="180" width="4.4586%" height="15" fill="rgb(239,60,40)"/><text x="13.2436%" y="190.50">ufunc..</text></g><g><title>array_sum (methods.c:2215) (20 samples, 2.55%)</title><rect x="17.8344%" y="180" width="2.5478%" height="15" fill="rgb(206,27,48)"/><text x="18.0844%" y="190.50">ar..</text></g><g><title>forward_ndarray_method (methods.c:108) (20 samples, 2.55%)</title><rect x="17.8344%" y="196" width="2.5478%" height="15" fill="rgb(225,35,8)"/><text x="18.0844%" y="206.50">fo..</text></g><g><title>_sum (numpy/core/_methods.py:38) (20 samples, 2.55%)</title><rect x="17.8344%" y="212" width="2.5478%" height="15" fill="rgb(250,213,24)"/><text x="18.0844%" y="222.50">_s..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (18 samples, 2.29%)</title><rect x="18.0892%" y="228" width="2.2930%" height="15" fill="rgb(247,123,22)"/><text x="18.3392%" y="238.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (18 samples, 2.29%)</title><rect x="18.0892%" y="244" width="2.2930%" height="15" fill="rgb(231,138,38)"/><text x="18.3392%" y="254.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (17 samples, 2.17%)</title><rect x="18.2166%" y="260" width="2.1656%" height="15" fill="rgb(231,145,46)"/><text x="18.4666%" y="270.50">P..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (14 samples, 1.78%)</title><rect x="18.5987%" y="276" width="1.7834%" height="15" fill="rgb(251,118,11)"/><text x="18.8487%" y="286.50">P..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (11 samples, 1.40%)</title><rect x="18.9809%" y="292" width="1.4013%" height="15" fill="rgb(217,147,25)"/><text x="19.2309%" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (13 samples, 1.66%)</title><rect x="20.5096%" y="196" width="1.6561%" height="15" fill="rgb(247,81,37)"/><text x="20.7596%" y="206.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (13 samples, 1.66%)</title><rect x="20.5096%" y="212" width="1.6561%" height="15" fill="rgb(209,12,38)"/><text x="20.7596%" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228) (148 samples, 18.85%)</title><rect x="3.4395%" y="132" width="18.8535%" height="15" fill="rgb(227,1,9)"/><text x="3.6895%" y="142.50">&lt;lambda&gt; (mlprodict/asv_bench..</text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py:1651) (143 samples, 18.22%)</title><rect x="4.0764%" y="148" width="18.2166%" height="15" fill="rgb(248,47,43)"/><text x="4.3264%" y="158.50">predict_proba (sklearn/linea..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:313) (38 samples, 4.84%)</title><rect x="17.4522%" y="164" width="4.8408%" height="15" fill="rgb(221,10,30)"/><text x="17.7022%" y="174.50">_predi..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (15 samples, 1.91%)</title><rect x="20.3822%" y="180" width="1.9108%" height="15" fill="rgb(210,229,1)"/><text x="20.6322%" y="190.50">u..</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:54) (152 samples, 19.36%)</title><rect x="3.0573%" y="52" width="19.3631%" height="15" fill="rgb(222,148,37)"/><text x="3.3073%" y="62.50">&lt;module&gt; (bench_LogisticRegres..</text></g><g><title>profile_skl (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:53) (152 samples, 19.36%)</title><rect x="3.0573%" y="68" width="19.3631%" height="15" fill="rgb(234,67,33)"/><text x="3.3073%" y="78.50">profile_skl (bench_LogisticReg..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (152 samples, 19.36%)</title><rect x="3.0573%" y="84" width="19.3631%" height="15" fill="rgb(247,98,35)"/><text x="3.3073%" y="94.50">setup_profile (bench_LogisticR..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (152 samples, 19.36%)</title><rect x="3.0573%" y="100" width="19.3631%" height="15" fill="rgb(247,138,52)"/><text x="3.3073%" y="110.50">profile (bench_LogisticRegress..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (151 samples, 19.24%)</title><rect x="3.1847%" y="116" width="19.2357%" height="15" fill="rgb(213,79,30)"/><text x="3.4347%" y="126.50">time_predict (mlprodict/asv_be..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:39) (14 samples, 1.78%)</title><rect x="22.9299%" y="196" width="1.7834%" height="15" fill="rgb(246,177,23)"/><text x="23.1799%" y="206.50">_..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (12 samples, 1.53%)</title><rect x="23.1847%" y="212" width="1.5287%" height="15" fill="rgb(230,62,27)"/><text x="23.4347%" y="222.50"></text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (11 samples, 1.40%)</title><rect x="23.3121%" y="228" width="1.4013%" height="15" fill="rgb(216,154,8)"/><text x="23.5621%" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:41) (11 samples, 1.40%)</title><rect x="24.7134%" y="196" width="1.4013%" height="15" fill="rgb(244,35,45)"/><text x="24.9634%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 1.27%)</title><rect x="24.8408%" y="212" width="1.2739%" height="15" fill="rgb(251,115,12)"/><text x="25.0908%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (10 samples, 1.27%)</title><rect x="24.8408%" y="228" width="1.2739%" height="15" fill="rgb(240,54,50)"/><text x="25.0908%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (10 samples, 1.27%)</title><rect x="24.8408%" y="244" width="1.2739%" height="15" fill="rgb(233,84,52)"/><text x="25.0908%" y="254.50"></text></g><g><title>0x7fce3bead1d4 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (19 samples, 2.42%)</title><rect x="27.1338%" y="292" width="2.4204%" height="15" fill="rgb(207,117,47)"/><text x="27.3838%" y="302.50">0x..</text></g><g><title>expf (libm-2.29.so) (18 samples, 2.29%)</title><rect x="27.2611%" y="308" width="2.2930%" height="15" fill="rgb(249,43,39)"/><text x="27.5111%" y="318.50">e..</text></g><g><title>0x7fce3be8af9d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (28 samples, 3.57%)</title><rect x="27.0064%" y="276" width="3.5669%" height="15" fill="rgb(209,38,44)"/><text x="27.2564%" y="286.50">0x7f..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (33 samples, 4.20%)</title><rect x="26.6242%" y="228" width="4.2038%" height="15" fill="rgb(236,212,23)"/><text x="26.8742%" y="238.50">PyUFu..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (31 samples, 3.95%)</title><rect x="26.8790%" y="244" width="3.9490%" height="15" fill="rgb(242,79,21)"/><text x="27.1290%" y="254.50">exec..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (31 samples, 3.95%)</title><rect x="26.8790%" y="260" width="3.9490%" height="15" fill="rgb(211,96,35)"/><text x="27.1290%" y="270.50">triv..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:46) (38 samples, 4.84%)</title><rect x="26.1146%" y="196" width="4.8408%" height="15" fill="rgb(253,215,40)"/><text x="26.3646%" y="206.50">_run (..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (34 samples, 4.33%)</title><rect x="26.6242%" y="212" width="4.3312%" height="15" fill="rgb(211,81,21)"/><text x="26.8742%" y="222.50">ufunc..</text></g><g><title>compiled_run (&lt;string&gt;:4) (75 samples, 9.55%)</title><rect x="22.9299%" y="180" width="9.5541%" height="15" fill="rgb(208,190,38)"/><text x="23.1799%" y="190.50">compiled_run (..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:60) (12 samples, 1.53%)</title><rect x="30.9554%" y="196" width="1.5287%" height="15" fill="rgb(235,213,38)"/><text x="31.2054%" y="206.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (11 samples, 1.40%)</title><rect x="31.0828%" y="212" width="1.4013%" height="15" fill="rgb(237,122,38)"/><text x="31.3328%" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (10 samples, 1.27%)</title><rect x="31.2102%" y="228" width="1.2739%" height="15" fill="rgb(244,218,35)"/><text x="31.4602%" y="238.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py:1153) (10 samples, 1.27%)</title><rect x="31.2102%" y="244" width="1.2739%" height="15" fill="rgb(240,68,47)"/><text x="31.4602%" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (10 samples, 1.27%)</title><rect x="31.2102%" y="260" width="1.2739%" height="15" fill="rgb(210,16,53)"/><text x="31.4602%" y="270.50"></text></g><g><title>array_argmax (methods.c:302) (8 samples, 1.02%)</title><rect x="31.4650%" y="276" width="1.0191%" height="15" fill="rgb(235,124,12)"/><text x="31.7150%" y="286.50"></text></g><g><title>array_sum (methods.c:2215) (20 samples, 2.55%)</title><rect x="32.7389%" y="228" width="2.5478%" height="15" fill="rgb(224,169,11)"/><text x="32.9889%" y="238.50">ar..</text></g><g><title>forward_ndarray_method (methods.c:108) (19 samples, 2.42%)</title><rect x="32.8662%" y="244" width="2.4204%" height="15" fill="rgb(250,166,2)"/><text x="33.1162%" y="254.50">fo..</text></g><g><title>_sum (numpy/core/_methods.py:38) (19 samples, 2.42%)</title><rect x="32.8662%" y="260" width="2.4204%" height="15" fill="rgb(242,216,29)"/><text x="33.1162%" y="270.50">_s..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (18 samples, 2.29%)</title><rect x="32.9936%" y="276" width="2.2930%" height="15" fill="rgb(230,116,27)"/><text x="33.2436%" y="286.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (18 samples, 2.29%)</title><rect x="32.9936%" y="292" width="2.2930%" height="15" fill="rgb(228,99,48)"/><text x="33.2436%" y="302.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (15 samples, 1.91%)</title><rect x="33.3758%" y="308" width="1.9108%" height="15" fill="rgb(253,11,6)"/><text x="33.6258%" y="318.50">P..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (12 samples, 1.53%)</title><rect x="33.7580%" y="324" width="1.5287%" height="15" fill="rgb(247,143,39)"/><text x="34.0080%" y="334.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (10 samples, 1.27%)</title><rect x="34.0127%" y="340" width="1.2739%" height="15" fill="rgb(236,97,10)"/><text x="34.2627%" y="350.50"></text></g><g><title>array_true_divide (number.c:826) (10 samples, 1.27%)</title><rect x="35.2866%" y="228" width="1.2739%" height="15" fill="rgb(233,208,19)"/><text x="35.5366%" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 1.27%)</title><rect x="35.2866%" y="244" width="1.2739%" height="15" fill="rgb(216,164,2)"/><text x="35.5366%" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (10 samples, 1.27%)</title><rect x="35.2866%" y="260" width="1.2739%" height="15" fill="rgb(220,129,5)"/><text x="35.5366%" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (10 samples, 1.27%)</title><rect x="35.2866%" y="276" width="1.2739%" height="15" fill="rgb(242,17,10)"/><text x="35.5366%" y="286.50"></text></g><g><title>compiled_run (&lt;string&gt;:5) (33 samples, 4.20%)</title><rect x="32.4841%" y="180" width="4.2038%" height="15" fill="rgb(242,107,0)"/><text x="32.7341%" y="190.50">compi..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_normalizer.py:67) (33 samples, 4.20%)</title><rect x="32.4841%" y="196" width="4.2038%" height="15" fill="rgb(251,28,31)"/><text x="32.7341%" y="206.50">_run ..</text></g><g><title>norm_l1 (mlprodict/onnxrt/ops_cpu/op_normalizer.py:47) (33 samples, 4.20%)</title><rect x="32.4841%" y="212" width="4.2038%" height="15" fill="rgb(233,223,10)"/><text x="32.7341%" y="222.50">norm_..</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:61) (119 samples, 15.16%)</title><rect x="22.4204%" y="52" width="15.1592%" height="15" fill="rgb(215,21,27)"/><text x="22.6704%" y="62.50">&lt;module&gt; (bench_Logisti..</text></g><g><title>profile_pyrtc (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:60) (119 samples, 15.16%)</title><rect x="22.4204%" y="68" width="15.1592%" height="15" fill="rgb(232,23,21)"/><text x="22.6704%" y="78.50">profile_pyrtc (bench_Lo..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (119 samples, 15.16%)</title><rect x="22.4204%" y="84" width="15.1592%" height="15" fill="rgb(244,5,23)"/><text x="22.6704%" y="94.50">setup_profile (bench_Lo..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (119 samples, 15.16%)</title><rect x="22.4204%" y="100" width="15.1592%" height="15" fill="rgb(226,81,46)"/><text x="22.6704%" y="110.50">profile (bench_Logistic..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (119 samples, 15.16%)</title><rect x="22.4204%" y="116" width="15.1592%" height="15" fill="rgb(247,70,30)"/><text x="22.6704%" y="126.50">time_predict (mlprodict..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (119 samples, 15.16%)</title><rect x="22.4204%" y="132" width="15.1592%" height="15" fill="rgb(212,68,19)"/><text x="22.6704%" y="142.50">&lt;lambda&gt; (mlprodict/asv..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (118 samples, 15.03%)</title><rect x="22.5478%" y="148" width="15.0318%" height="15" fill="rgb(240,187,13)"/><text x="22.7978%" y="158.50">run (mlprodict/onnxrt/o..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (117 samples, 14.90%)</title><rect x="22.6752%" y="164" width="14.9045%" height="15" fill="rgb(223,113,26)"/><text x="22.9252%" y="174.50">_run_sequence_runtime_c..</text></g><g><title>0x7fce5c518ec0 (libc-2.29.so) (21 samples, 2.68%)</title><rect x="41.5287%" y="116" width="2.6752%" height="15" fill="rgb(206,192,2)"/><text x="41.7787%" y="126.50">0x..</text></g><g><title>onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (60 samples, 7.64%)</title><rect x="46.2420%" y="324" width="7.6433%" height="15" fill="rgb(241,108,4)"/><text x="46.4920%" y="334.50">onnxruntim..</text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; [clone .constprop.182] (onnxruntime/capi/onnxruntime_pybind11_state.so) (36 samples, 4.59%)</title><rect x="49.2994%" y="340" width="4.5860%" height="15" fill="rgb(247,173,49)"/><text x="49.5494%" y="350.50">onnxr..</text></g><g><title>onnxruntime::ml::Normalizer::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 2.17%)</title><rect x="53.8854%" y="324" width="2.1656%" height="15" fill="rgb(224,114,35)"/><text x="54.1354%" y="334.50">o..</text></g><g><title>onnxruntime::ml::Normalizer::Normalize&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 2.17%)</title><rect x="53.8854%" y="340" width="2.1656%" height="15" fill="rgb(245,159,27)"/><text x="54.1354%" y="350.50">o..</text></g><g><title>operator new (libstdc++.so.6.0.28) (97 samples, 12.36%)</title><rect x="58.8535%" y="340" width="12.3567%" height="15" fill="rgb(245,172,44)"/><text x="59.1035%" y="350.50">operator new (libs..</text></g><g><title>malloc (libc-2.29.so) (96 samples, 12.23%)</title><rect x="58.9809%" y="356" width="12.2293%" height="15" fill="rgb(236,23,11)"/><text x="59.2309%" y="366.50">malloc (libc-2.29...</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (217 samples, 27.64%)</title><rect x="45.8599%" y="292" width="27.6433%" height="15" fill="rgb(205,117,38)"/><text x="46.1099%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (onnxru..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (217 samples, 27.64%)</title><rect x="45.8599%" y="308" width="27.6433%" height="15" fill="rgb(237,72,25)"/><text x="46.1099%" y="318.50">onnxruntime::SequentialExecutor::Execute (on..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (137 samples, 17.45%)</title><rect x="56.0510%" y="324" width="17.4522%" height="15" fill="rgb(244,70,9)"/><text x="56.3010%" y="334.50">onnxruntime::ml::ZipMapOp::..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (220 samples, 28.03%)</title><rect x="45.6051%" y="244" width="28.0255%" height="15" fill="rgb(217,125,39)"/><text x="45.8551%" y="254.50">onnxruntime::InferenceSession::Run (onnxrunti..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (220 samples, 28.03%)</title><rect x="45.6051%" y="260" width="28.0255%" height="15" fill="rgb(235,36,10)"/><text x="45.8551%" y="270.50">onnxruntime::InferenceSession::Run (onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (218 samples, 27.77%)</title><rect x="45.8599%" y="276" width="27.7707%" height="15" fill="rgb(251,123,47)"/><text x="46.1099%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxruntime..</text></g><g><title>0x7fce5c518d17 (libc-2.29.so) (11 samples, 1.40%)</title><rect x="75.0318%" y="260" width="1.4013%" height="15" fill="rgb(221,13,13)"/><text x="75.2818%" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (44 samples, 5.61%)</title><rect x="73.6306%" y="244" width="5.6051%" height="15" fill="rgb(238,131,9)"/><text x="73.8806%" y="254.50">onnxrun..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 2.29%)</title><rect x="76.9427%" y="260" width="2.2930%" height="15" fill="rgb(211,50,8)"/><text x="77.1927%" y="270.50">s..</text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 4.84%)</title><rect x="93.1210%" y="292" width="4.8408%" height="15" fill="rgb(245,182,24)"/><text x="93.3710%" y="302.50">pybind..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 19.24%)</title><rect x="79.6178%" y="276" width="19.2357%" height="15" fill="rgb(242,14,37)"/><text x="79.8678%" y="286.50">pybind11::detail::map_caster&lt;s..</text></g><g><title>onnxruntime::python::AddNonTensor&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 19.75%)</title><rect x="79.2357%" y="260" width="19.7452%" height="15" fill="rgb(246,228,12)"/><text x="79.4857%" y="270.50">onnxruntime::python::AddNonTens..</text></g><g><title>onnxruntime::python::AddNonTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (156 samples, 19.87%)</title><rect x="79.2357%" y="244" width="19.8726%" height="15" fill="rgb(213,55,15)"/><text x="79.4857%" y="254.50">onnxruntime::python::AddNonTens..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (434 samples, 55.29%)</title><rect x="44.4586%" y="164" width="55.2866%" height="15" fill="rgb(209,9,3)"/><text x="44.7086%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (434 samples, 55.29%)</title><rect x="44.4586%" y="180" width="55.2866%" height="15" fill="rgb(230,59,30)"/><text x="44.7086%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:142) (427 samples, 54.39%)</title><rect x="45.3503%" y="196" width="54.3949%" height="15" fill="rgb(209,121,21)"/><text x="45.6003%" y="206.50">run (onnxruntime/capi/session.py:142)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (426 samples, 54.27%)</title><rect x="45.4777%" y="212" width="54.2675%" height="15" fill="rgb(220,109,13)"/><text x="45.7277%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (426 samples, 54.27%)</title><rect x="45.4777%" y="228" width="54.2675%" height="15" fill="rgb(232,18,1)"/><text x="45.7277%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::m..</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:68) (489 samples, 62.29%)</title><rect x="37.5796%" y="52" width="62.2930%" height="15" fill="rgb(215,41,42)"/><text x="37.8296%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:68)</text></g><g><title>profile_ort (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:67) (489 samples, 62.29%)</title><rect x="37.5796%" y="68" width="62.2930%" height="15" fill="rgb(224,123,36)"/><text x="37.8296%" y="78.50">profile_ort (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:67)</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (489 samples, 62.29%)</title><rect x="37.5796%" y="84" width="62.2930%" height="15" fill="rgb(240,125,3)"/><text x="37.8296%" y="94.50">setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:37)</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (489 samples, 62.29%)</title><rect x="37.5796%" y="100" width="62.2930%" height="15" fill="rgb(205,98,50)"/><text x="37.8296%" y="110.50">profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (437 samples, 55.67%)</title><rect x="44.2038%" y="116" width="55.6688%" height="15" fill="rgb(205,185,37)"/><text x="44.4538%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (437 samples, 55.67%)</title><rect x="44.2038%" y="132" width="55.6688%" height="15" fill="rgb(238,207,15)"/><text x="44.4538%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (436 samples, 55.54%)</title><rect x="44.3312%" y="148" width="55.5414%" height="15" fill="rgb(213,199,42)"/><text x="44.5812%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>all (785 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>