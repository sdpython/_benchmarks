<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:4) (11 samples, 1.40%)</title><rect x="0.0000%" y="52" width="1.4049%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 1.40%)</title><rect x="0.0000%" y="68" width="1.4049%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 1.40%)</title><rect x="0.0000%" y="84" width="1.4049%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 1.40%)</title><rect x="0.0000%" y="100" width="1.4049%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 1.40%)</title><rect x="0.0000%" y="116" width="1.4049%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 1.40%)</title><rect x="0.0000%" y="132" width="1.4049%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="142.50"></text></g><g><title>decision_function (sklearn/linear_model/_base.py:268) (30 samples, 3.83%)</title><rect x="3.7037%" y="180" width="3.8314%" height="15" fill="rgb(207,160,47)"/><text x="3.9537%" y="190.50">deci..</text></g><g><title>array_add (number.c:330) (11 samples, 1.40%)</title><rect x="7.6628%" y="196" width="1.4049%" height="15" fill="rgb(228,23,34)"/><text x="7.9128%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (11 samples, 1.40%)</title><rect x="7.6628%" y="212" width="1.4049%" height="15" fill="rgb(218,30,26)"/><text x="7.9128%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (10 samples, 1.28%)</title><rect x="7.7905%" y="228" width="1.2771%" height="15" fill="rgb(220,122,19)"/><text x="8.0405%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (10 samples, 1.28%)</title><rect x="7.7905%" y="244" width="1.2771%" height="15" fill="rgb(250,228,42)"/><text x="8.0405%" y="254.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (21 samples, 2.68%)</title><rect x="9.1954%" y="196" width="2.6820%" height="15" fill="rgb(240,193,28)"/><text x="9.4454%" y="206.50">sa..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (11 samples, 1.40%)</title><rect x="10.4725%" y="212" width="1.4049%" height="15" fill="rgb(216,20,37)"/><text x="10.7225%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (11 samples, 1.40%)</title><rect x="10.4725%" y="228" width="1.4049%" height="15" fill="rgb(206,188,39)"/><text x="10.7225%" y="238.50"></text></g><g><title>decision_function (sklearn/linear_model/_base.py:276) (35 samples, 4.47%)</title><rect x="7.6628%" y="180" width="4.4700%" height="15" fill="rgb(217,207,13)"/><text x="7.9128%" y="190.50">decis..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:307) (74 samples, 9.45%)</title><rect x="2.8097%" y="164" width="9.4508%" height="15" fill="rgb(231,73,38)"/><text x="3.0597%" y="174.50">_predict_proba..</text></g><g><title>0x7f6bd07b9265 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (18 samples, 2.30%)</title><rect x="12.8991%" y="260" width="2.2989%" height="15" fill="rgb(225,20,46)"/><text x="13.1491%" y="270.50">0..</text></g><g><title>exp (libm-2.29.so) (14 samples, 1.79%)</title><rect x="13.4100%" y="276" width="1.7880%" height="15" fill="rgb(210,31,41)"/><text x="13.6600%" y="286.50">e..</text></g><g><title>0x7f6bd07989dd (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (30 samples, 3.83%)</title><rect x="12.8991%" y="244" width="3.8314%" height="15" fill="rgb(221,200,47)"/><text x="13.1491%" y="254.50">0x7f..</text></g><g><title>0x7f6bd07b9279 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (11 samples, 1.40%)</title><rect x="15.3257%" y="260" width="1.4049%" height="15" fill="rgb(226,26,5)"/><text x="15.5757%" y="270.50"></text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:308) (36 samples, 4.60%)</title><rect x="12.2605%" y="164" width="4.5977%" height="15" fill="rgb(249,33,26)"/><text x="12.5105%" y="174.50">_pred..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (35 samples, 4.47%)</title><rect x="12.3883%" y="180" width="4.4700%" height="15" fill="rgb(235,183,28)"/><text x="12.6383%" y="190.50">ufunc..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (33 samples, 4.21%)</title><rect x="12.6437%" y="196" width="4.2146%" height="15" fill="rgb(221,5,38)"/><text x="12.8937%" y="206.50">PyUFu..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (31 samples, 3.96%)</title><rect x="12.8991%" y="212" width="3.9591%" height="15" fill="rgb(247,18,42)"/><text x="13.1491%" y="222.50">exec..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (31 samples, 3.96%)</title><rect x="12.8991%" y="228" width="3.9591%" height="15" fill="rgb(241,131,45)"/><text x="13.1491%" y="238.50">triv..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (12 samples, 1.53%)</title><rect x="17.7522%" y="276" width="1.5326%" height="15" fill="rgb(249,31,29)"/><text x="18.0022%" y="286.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (11 samples, 1.40%)</title><rect x="17.8799%" y="292" width="1.4049%" height="15" fill="rgb(225,111,53)"/><text x="18.1299%" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (16 samples, 2.04%)</title><rect x="17.3691%" y="244" width="2.0434%" height="15" fill="rgb(238,160,17)"/><text x="17.6191%" y="254.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (16 samples, 2.04%)</title><rect x="17.3691%" y="260" width="2.0434%" height="15" fill="rgb(214,148,48)"/><text x="17.6191%" y="270.50">P..</text></g><g><title>array_sum (methods.c:2215) (19 samples, 2.43%)</title><rect x="17.1137%" y="180" width="2.4266%" height="15" fill="rgb(232,36,49)"/><text x="17.3637%" y="190.50">ar..</text></g><g><title>forward_ndarray_method (methods.c:108) (19 samples, 2.43%)</title><rect x="17.1137%" y="196" width="2.4266%" height="15" fill="rgb(209,103,24)"/><text x="17.3637%" y="206.50">fo..</text></g><g><title>_sum (numpy/core/_methods.py:38) (19 samples, 2.43%)</title><rect x="17.1137%" y="212" width="2.4266%" height="15" fill="rgb(229,88,8)"/><text x="17.3637%" y="222.50">_s..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (19 samples, 2.43%)</title><rect x="17.1137%" y="228" width="2.4266%" height="15" fill="rgb(213,181,19)"/><text x="17.3637%" y="238.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (13 samples, 1.66%)</title><rect x="19.7957%" y="196" width="1.6603%" height="15" fill="rgb(254,191,54)"/><text x="20.0457%" y="206.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (13 samples, 1.66%)</title><rect x="19.7957%" y="212" width="1.6603%" height="15" fill="rgb(241,83,37)"/><text x="20.0457%" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229) (155 samples, 19.80%)</title><rect x="1.9157%" y="132" width="19.7957%" height="15" fill="rgb(233,36,39)"/><text x="2.1657%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchma..</text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py:1649) (149 samples, 19.03%)</title><rect x="2.6820%" y="148" width="19.0294%" height="15" fill="rgb(226,3,54)"/><text x="2.9320%" y="158.50">predict_proba (sklearn/linear_..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:313) (38 samples, 4.85%)</title><rect x="16.8582%" y="164" width="4.8531%" height="15" fill="rgb(245,192,40)"/><text x="17.1082%" y="174.50">_predi..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (17 samples, 2.17%)</title><rect x="19.5402%" y="180" width="2.1711%" height="15" fill="rgb(238,167,29)"/><text x="19.7902%" y="190.50">u..</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:54) (160 samples, 20.43%)</title><rect x="1.4049%" y="52" width="20.4342%" height="15" fill="rgb(232,182,51)"/><text x="1.6549%" y="62.50">&lt;module&gt; (bench_LogisticRegressi..</text></g><g><title>profile_skl (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:53) (160 samples, 20.43%)</title><rect x="1.4049%" y="68" width="20.4342%" height="15" fill="rgb(231,60,39)"/><text x="1.6549%" y="78.50">profile_skl (bench_LogisticRegre..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (160 samples, 20.43%)</title><rect x="1.4049%" y="84" width="20.4342%" height="15" fill="rgb(208,69,12)"/><text x="1.6549%" y="94.50">setup_profile (bench_LogisticReg..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (160 samples, 20.43%)</title><rect x="1.4049%" y="100" width="20.4342%" height="15" fill="rgb(235,93,37)"/><text x="1.6549%" y="110.50">profile (bench_LogisticRegressio..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (158 samples, 20.18%)</title><rect x="1.6603%" y="116" width="20.1788%" height="15" fill="rgb(213,116,39)"/><text x="1.9103%" y="126.50">time_predict (mlprodict/asv_benc..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 1.02%)</title><rect x="23.1162%" y="244" width="1.0217%" height="15" fill="rgb(222,207,29)"/><text x="23.3662%" y="254.50"></text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (8 samples, 1.02%)</title><rect x="23.1162%" y="260" width="1.0217%" height="15" fill="rgb(206,96,30)"/><text x="23.3662%" y="270.50"></text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (8 samples, 1.02%)</title><rect x="23.1162%" y="276" width="1.0217%" height="15" fill="rgb(218,138,4)"/><text x="23.3662%" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:39) (25 samples, 3.19%)</title><rect x="22.7331%" y="196" width="3.1928%" height="15" fill="rgb(250,191,14)"/><text x="22.9831%" y="206.50">_ru..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (24 samples, 3.07%)</title><rect x="22.8608%" y="212" width="3.0651%" height="15" fill="rgb(239,60,40)"/><text x="23.1108%" y="222.50">num..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (22 samples, 2.81%)</title><rect x="23.1162%" y="228" width="2.8097%" height="15" fill="rgb(206,27,48)"/><text x="23.3662%" y="238.50">do..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (12 samples, 1.53%)</title><rect x="24.3934%" y="244" width="1.5326%" height="15" fill="rgb(225,35,8)"/><text x="24.6434%" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:41) (10 samples, 1.28%)</title><rect x="25.9259%" y="196" width="1.2771%" height="15" fill="rgb(250,213,24)"/><text x="26.1759%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (9 samples, 1.15%)</title><rect x="26.0536%" y="212" width="1.1494%" height="15" fill="rgb(247,123,22)"/><text x="26.3036%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (9 samples, 1.15%)</title><rect x="26.0536%" y="228" width="1.1494%" height="15" fill="rgb(231,138,38)"/><text x="26.3036%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (9 samples, 1.15%)</title><rect x="26.0536%" y="244" width="1.1494%" height="15" fill="rgb(231,145,46)"/><text x="26.3036%" y="254.50"></text></g><g><title>0x7f6bd07b9214 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (17 samples, 2.17%)</title><rect x="28.0971%" y="292" width="2.1711%" height="15" fill="rgb(251,118,11)"/><text x="28.3471%" y="302.50">0..</text></g><g><title>expf (libm-2.29.so) (13 samples, 1.66%)</title><rect x="28.6079%" y="308" width="1.6603%" height="15" fill="rgb(217,147,25)"/><text x="28.8579%" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:46) (28 samples, 3.58%)</title><rect x="27.4585%" y="196" width="3.5760%" height="15" fill="rgb(247,81,37)"/><text x="27.7085%" y="206.50">_run..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (26 samples, 3.32%)</title><rect x="27.7139%" y="212" width="3.3206%" height="15" fill="rgb(209,12,38)"/><text x="27.9639%" y="222.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (24 samples, 3.07%)</title><rect x="27.9693%" y="228" width="3.0651%" height="15" fill="rgb(227,1,9)"/><text x="28.2193%" y="238.50">PyU..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (24 samples, 3.07%)</title><rect x="27.9693%" y="244" width="3.0651%" height="15" fill="rgb(248,47,43)"/><text x="28.2193%" y="254.50">exe..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (24 samples, 3.07%)</title><rect x="27.9693%" y="260" width="3.0651%" height="15" fill="rgb(221,10,30)"/><text x="28.2193%" y="270.50">tri..</text></g><g><title>0x7f6bd079733d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (23 samples, 2.94%)</title><rect x="28.0971%" y="276" width="2.9374%" height="15" fill="rgb(210,229,1)"/><text x="28.3471%" y="286.50">0x..</text></g><g><title>compiled_run (&lt;string&gt;:4) (78 samples, 9.96%)</title><rect x="22.6054%" y="180" width="9.9617%" height="15" fill="rgb(222,148,37)"/><text x="22.8554%" y="190.50">compiled_run (..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:60) (12 samples, 1.53%)</title><rect x="31.0345%" y="196" width="1.5326%" height="15" fill="rgb(234,67,33)"/><text x="31.2845%" y="206.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (8 samples, 1.02%)</title><rect x="31.5453%" y="212" width="1.0217%" height="15" fill="rgb(247,98,35)"/><text x="31.7953%" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 1.02%)</title><rect x="31.5453%" y="228" width="1.0217%" height="15" fill="rgb(247,138,52)"/><text x="31.7953%" y="238.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py:1153) (8 samples, 1.02%)</title><rect x="31.5453%" y="244" width="1.0217%" height="15" fill="rgb(213,79,30)"/><text x="31.7953%" y="254.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (8 samples, 1.02%)</title><rect x="33.0779%" y="324" width="1.0217%" height="15" fill="rgb(246,177,23)"/><text x="33.3279%" y="334.50"></text></g><g><title>array_sum (methods.c:2215) (13 samples, 1.66%)</title><rect x="32.5670%" y="228" width="1.6603%" height="15" fill="rgb(230,62,27)"/><text x="32.8170%" y="238.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (13 samples, 1.66%)</title><rect x="32.5670%" y="244" width="1.6603%" height="15" fill="rgb(216,154,8)"/><text x="32.8170%" y="254.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (13 samples, 1.66%)</title><rect x="32.5670%" y="260" width="1.6603%" height="15" fill="rgb(244,35,45)"/><text x="32.8170%" y="270.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (12 samples, 1.53%)</title><rect x="32.6948%" y="276" width="1.5326%" height="15" fill="rgb(251,115,12)"/><text x="32.9448%" y="286.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (12 samples, 1.53%)</title><rect x="32.6948%" y="292" width="1.5326%" height="15" fill="rgb(240,54,50)"/><text x="32.9448%" y="302.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (12 samples, 1.53%)</title><rect x="32.6948%" y="308" width="1.5326%" height="15" fill="rgb(233,84,52)"/><text x="32.9448%" y="318.50"></text></g><g><title>compiled_run (&lt;string&gt;:5) (22 samples, 2.81%)</title><rect x="32.5670%" y="180" width="2.8097%" height="15" fill="rgb(207,117,47)"/><text x="32.8170%" y="190.50">co..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_normalizer.py:67) (22 samples, 2.81%)</title><rect x="32.5670%" y="196" width="2.8097%" height="15" fill="rgb(249,43,39)"/><text x="32.8170%" y="206.50">_r..</text></g><g><title>norm_l1 (mlprodict/onnxrt/ops_cpu/op_normalizer.py:47) (22 samples, 2.81%)</title><rect x="32.5670%" y="212" width="2.8097%" height="15" fill="rgb(209,38,44)"/><text x="32.8170%" y="222.50">no..</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:61) (109 samples, 13.92%)</title><rect x="21.8391%" y="52" width="13.9208%" height="15" fill="rgb(236,212,23)"/><text x="22.0891%" y="62.50">&lt;module&gt; (bench_Logis..</text></g><g><title>profile_pyrtc (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:60) (109 samples, 13.92%)</title><rect x="21.8391%" y="68" width="13.9208%" height="15" fill="rgb(242,79,21)"/><text x="22.0891%" y="78.50">profile_pyrtc (bench_..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (109 samples, 13.92%)</title><rect x="21.8391%" y="84" width="13.9208%" height="15" fill="rgb(211,96,35)"/><text x="22.0891%" y="94.50">setup_profile (bench_..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (109 samples, 13.92%)</title><rect x="21.8391%" y="100" width="13.9208%" height="15" fill="rgb(253,215,40)"/><text x="22.0891%" y="110.50">profile (bench_Logist..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (109 samples, 13.92%)</title><rect x="21.8391%" y="116" width="13.9208%" height="15" fill="rgb(211,81,21)"/><text x="22.0891%" y="126.50">time_predict (mlprodi..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (109 samples, 13.92%)</title><rect x="21.8391%" y="132" width="13.9208%" height="15" fill="rgb(208,190,38)"/><text x="22.0891%" y="142.50">&lt;lambda&gt; (mlprodict/a..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (105 samples, 13.41%)</title><rect x="22.3499%" y="148" width="13.4100%" height="15" fill="rgb(235,213,38)"/><text x="22.5999%" y="158.50">run (mlprodict/onnxr..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (104 samples, 13.28%)</title><rect x="22.4777%" y="164" width="13.2822%" height="15" fill="rgb(237,122,38)"/><text x="22.7277%" y="174.50">_run_sequence_runtim..</text></g><g><title>0x7f6bee392eb0 (libc-2.29.so) (20 samples, 2.55%)</title><rect x="41.1239%" y="116" width="2.5543%" height="15" fill="rgb(244,218,35)"/><text x="41.3739%" y="126.50">0x..</text></g><g><title>onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (72 samples, 9.20%)</title><rect x="45.9770%" y="324" width="9.1954%" height="15" fill="rgb(240,68,47)"/><text x="46.2270%" y="334.50">onnxruntime::..</text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; [clone .constprop.182] (onnxruntime/capi/onnxruntime_pybind11_state.so) (39 samples, 4.98%)</title><rect x="50.1916%" y="340" width="4.9808%" height="15" fill="rgb(210,16,53)"/><text x="50.4416%" y="350.50">onnxru..</text></g><g><title>onnxruntime::ml::Normalizer::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (32 samples, 4.09%)</title><rect x="55.1724%" y="324" width="4.0868%" height="15" fill="rgb(235,124,12)"/><text x="55.4224%" y="334.50">onnx..</text></g><g><title>onnxruntime::ml::Normalizer::Normalize&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (32 samples, 4.09%)</title><rect x="55.1724%" y="340" width="4.0868%" height="15" fill="rgb(224,169,11)"/><text x="55.4224%" y="350.50">onnx..</text></g><g><title>operator new (libstdc++.so.6.0.28) (80 samples, 10.22%)</title><rect x="61.0473%" y="340" width="10.2171%" height="15" fill="rgb(250,166,2)"/><text x="61.2973%" y="350.50">operator new (l..</text></g><g><title>malloc (libc-2.29.so) (78 samples, 9.96%)</title><rect x="61.3027%" y="356" width="9.9617%" height="15" fill="rgb(242,216,29)"/><text x="61.5527%" y="366.50">malloc (libc-2..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 1.02%)</title><rect x="71.6475%" y="340" width="1.0217%" height="15" fill="rgb(230,116,27)"/><text x="71.8975%" y="350.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (223 samples, 28.48%)</title><rect x="45.2107%" y="244" width="28.4802%" height="15" fill="rgb(228,99,48)"/><text x="45.4607%" y="254.50">onnxruntime::InferenceSession::Run (onnxruntim..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (223 samples, 28.48%)</title><rect x="45.2107%" y="260" width="28.4802%" height="15" fill="rgb(253,11,6)"/><text x="45.4607%" y="270.50">onnxruntime::InferenceSession::Run (onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (222 samples, 28.35%)</title><rect x="45.3384%" y="276" width="28.3525%" height="15" fill="rgb(247,143,39)"/><text x="45.5884%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxruntime/..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (222 samples, 28.35%)</title><rect x="45.3384%" y="292" width="28.3525%" height="15" fill="rgb(236,97,10)"/><text x="45.5884%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (onnxrunt..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (221 samples, 28.22%)</title><rect x="45.4662%" y="308" width="28.2248%" height="15" fill="rgb(233,208,19)"/><text x="45.7162%" y="318.50">onnxruntime::SequentialExecutor::Execute (onn..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (113 samples, 14.43%)</title><rect x="59.2593%" y="324" width="14.4317%" height="15" fill="rgb(216,164,2)"/><text x="59.5093%" y="334.50">onnxruntime::ml::ZipMa..</text></g><g><title>0x7f6bee392d07 (libc-2.29.so) (9 samples, 1.15%)</title><rect x="75.7344%" y="260" width="1.1494%" height="15" fill="rgb(220,129,5)"/><text x="75.9844%" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (46 samples, 5.87%)</title><rect x="73.6909%" y="244" width="5.8748%" height="15" fill="rgb(242,17,10)"/><text x="73.9409%" y="254.50">onnxrun..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 1.92%)</title><rect x="77.6501%" y="260" width="1.9157%" height="15" fill="rgb(242,107,0)"/><text x="77.9001%" y="270.50">s..</text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 4.85%)</title><rect x="93.6143%" y="292" width="4.8531%" height="15" fill="rgb(251,28,31)"/><text x="93.8643%" y="302.50">pybind..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 19.28%)</title><rect x="79.8212%" y="276" width="19.2848%" height="15" fill="rgb(233,223,10)"/><text x="80.0712%" y="286.50">pybind11::detail::map_caster&lt;s..</text></g><g><title>onnxruntime::python::AddNonTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (156 samples, 19.92%)</title><rect x="79.5658%" y="244" width="19.9234%" height="15" fill="rgb(215,21,27)"/><text x="79.8158%" y="254.50">onnxruntime::python::AddNonTens..</text></g><g><title>onnxruntime::python::AddNonTensor&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (156 samples, 19.92%)</title><rect x="79.5658%" y="260" width="19.9234%" height="15" fill="rgb(232,23,21)"/><text x="79.8158%" y="270.50">onnxruntime::python::AddNonTens..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (435 samples, 55.56%)</title><rect x="44.1890%" y="164" width="55.5556%" height="15" fill="rgb(244,5,23)"/><text x="44.4390%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (435 samples, 55.56%)</title><rect x="44.1890%" y="180" width="55.5556%" height="15" fill="rgb(226,81,46)"/><text x="44.4390%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:140) (430 samples, 54.92%)</title><rect x="44.8276%" y="196" width="54.9170%" height="15" fill="rgb(247,70,30)"/><text x="45.0776%" y="206.50">run (onnxruntime/capi/session.py:140)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (428 samples, 54.66%)</title><rect x="45.0830%" y="212" width="54.6616%" height="15" fill="rgb(212,68,19)"/><text x="45.3330%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (428 samples, 54.66%)</title><rect x="45.0830%" y="228" width="54.6616%" height="15" fill="rgb(240,187,13)"/><text x="45.3330%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::mo..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (437 samples, 55.81%)</title><rect x="44.0613%" y="132" width="55.8110%" height="15" fill="rgb(223,113,26)"/><text x="44.3113%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (437 samples, 55.81%)</title><rect x="44.0613%" y="148" width="55.8110%" height="15" fill="rgb(206,192,2)"/><text x="44.3113%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>all (783 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:68) (503 samples, 64.24%)</title><rect x="35.7599%" y="52" width="64.2401%" height="15" fill="rgb(247,173,49)"/><text x="36.0099%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:68)</text></g><g><title>profile_ort (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:67) (503 samples, 64.24%)</title><rect x="35.7599%" y="68" width="64.2401%" height="15" fill="rgb(224,114,35)"/><text x="36.0099%" y="78.50">profile_ort (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:67)</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:37) (503 samples, 64.24%)</title><rect x="35.7599%" y="84" width="64.2401%" height="15" fill="rgb(245,159,27)"/><text x="36.0099%" y="94.50">setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:37)</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:31) (502 samples, 64.11%)</title><rect x="35.8876%" y="100" width="64.1124%" height="15" fill="rgb(245,172,44)"/><text x="36.1376%" y="110.50">profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1000_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (439 samples, 56.07%)</title><rect x="43.9336%" y="116" width="56.0664%" height="15" fill="rgb(236,23,11)"/><text x="44.1836%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183)</text></g></svg></svg>