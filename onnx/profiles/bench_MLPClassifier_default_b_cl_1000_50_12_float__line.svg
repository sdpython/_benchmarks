<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1542" onload="init(evt)" viewBox="0 0 1200 1542" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1542" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1525.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1525.00"> </text><g id="frames"><g><title>_fit_stochastic (sklearn/neural_network/_multilayer_perceptron.py:515) (1 samples, 0.15%)</title><rect x="10" y="148" width="1" height="15" fill="rgb(253,229,13)"/><text x="13.00" y="158.50"></text></g><g><title>shuffle (sklearn/utils/__init__.py:699) (1 samples, 0.15%)</title><rect x="10" y="164" width="1" height="15" fill="rgb(222,47,41)"/><text x="13.00" y="174.50"></text></g><g><title>resample (sklearn/utils/__init__.py:582) (1 samples, 0.15%)</title><rect x="10" y="180" width="1" height="15" fill="rgb(248,44,47)"/><text x="13.00" y="190.50"></text></g><g><title>check_consistent_length (sklearn/utils/validation.py:208) (1 samples, 0.15%)</title><rect x="10" y="196" width="1" height="15" fill="rgb(239,177,13)"/><text x="13.00" y="206.50"></text></g><g><title>array_add (number.c:330) (1 samples, 0.15%)</title><rect x="11" y="212" width="2" height="15" fill="rgb(252,57,17)"/><text x="14.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="11" y="228" width="2" height="15" fill="rgb(250,147,10)"/><text x="14.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.15%)</title><rect x="11" y="244" width="2" height="15" fill="rgb(229,60,50)"/><text x="14.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (1 samples, 0.15%)</title><rect x="11" y="260" width="2" height="15" fill="rgb(233,82,39)"/><text x="14.00" y="270.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (1 samples, 0.15%)</title><rect x="11" y="276" width="2" height="15" fill="rgb(234,164,33)"/><text x="14.00" y="286.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (1 samples, 0.15%)</title><rect x="11" y="292" width="2" height="15" fill="rgb(246,17,33)"/><text x="14.00" y="302.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (1 samples, 0.15%)</title><rect x="11" y="308" width="2" height="15" fill="rgb(232,13,26)"/><text x="14.00" y="318.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:604) (1 samples, 0.15%)</title><rect x="11" y="324" width="2" height="15" fill="rgb(229,35,24)"/><text x="14.00" y="334.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (1 samples, 0.15%)</title><rect x="11" y="340" width="2" height="15" fill="rgb(242,70,5)"/><text x="14.00" y="350.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:31) (3 samples, 0.46%)</title><rect x="10" y="52" width="5" height="15" fill="rgb(242,3,53)"/><text x="13.00" y="62.50"></text></g><g><title>start (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:11) (3 samples, 0.46%)</title><rect x="10" y="68" width="5" height="15" fill="rgb(227,178,0)"/><text x="13.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:39) (3 samples, 0.46%)</title><rect x="10" y="84" width="5" height="15" fill="rgb(254,96,8)"/><text x="13.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py:151) (3 samples, 0.46%)</title><rect x="10" y="100" width="5" height="15" fill="rgb(229,7,52)"/><text x="13.00" y="110.50"></text></g><g><title>fit (sklearn/neural_network/_multilayer_perceptron.py:995) (3 samples, 0.46%)</title><rect x="10" y="116" width="5" height="15" fill="rgb(241,73,36)"/><text x="13.00" y="126.50"></text></g><g><title>_fit (sklearn/neural_network/_multilayer_perceptron.py:370) (3 samples, 0.46%)</title><rect x="10" y="132" width="5" height="15" fill="rgb(216,111,7)"/><text x="13.00" y="142.50"></text></g><g><title>_fit_stochastic (sklearn/neural_network/_multilayer_perceptron.py:527) (2 samples, 0.30%)</title><rect x="11" y="148" width="4" height="15" fill="rgb(238,70,48)"/><text x="14.00" y="158.50"></text></g><g><title>update_params (sklearn/neural_network/_stochastic_optimizers.py:43) (2 samples, 0.30%)</title><rect x="11" y="164" width="4" height="15" fill="rgb(206,66,43)"/><text x="14.00" y="174.50"></text></g><g><title>_get_updates (sklearn/neural_network/_stochastic_optimizers.py:260) (2 samples, 0.30%)</title><rect x="11" y="180" width="4" height="15" fill="rgb(226,82,43)"/><text x="14.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/neural_network/_stochastic_optimizers.py:260) (2 samples, 0.30%)</title><rect x="11" y="196" width="4" height="15" fill="rgb(222,31,34)"/><text x="14.00" y="206.50"></text></g><g><title>array_multiply (number.c:354) (1 samples, 0.15%)</title><rect x="13" y="212" width="2" height="15" fill="rgb(223,105,5)"/><text x="16.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="13" y="228" width="2" height="15" fill="rgb(237,123,20)"/><text x="16.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.15%)</title><rect x="13" y="244" width="2" height="15" fill="rgb(250,204,33)"/><text x="16.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1699) (1 samples, 0.15%)</title><rect x="13" y="260" width="2" height="15" fill="rgb(229,80,30)"/><text x="16.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.15%)</title><rect x="13" y="276" width="2" height="15" fill="rgb(221,192,35)"/><text x="16.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (1 samples, 0.15%)</title><rect x="13" y="292" width="2" height="15" fill="rgb(208,70,27)"/><text x="16.00" y="302.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (1 samples, 0.15%)</title><rect x="13" y="308" width="2" height="15" fill="rgb(233,145,22)"/><text x="16.00" y="318.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (1 samples, 0.15%)</title><rect x="13" y="324" width="2" height="15" fill="rgb(249,205,2)"/><text x="16.00" y="334.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (1 samples, 0.15%)</title><rect x="13" y="340" width="2" height="15" fill="rgb(240,72,52)"/><text x="16.00" y="350.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="13" y="356" width="2" height="15" fill="rgb(229,211,38)"/><text x="16.00" y="366.50"></text></g><g><title>0x7f4bc322c700 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="13" y="372" width="2" height="15" fill="rgb(221,137,18)"/><text x="16.00" y="382.50"></text></g><g><title>0x7f4bc3229b0a (libc-2.29.so) (1 samples, 0.15%)</title><rect x="13" y="388" width="2" height="15" fill="rgb(213,145,49)"/><text x="16.00" y="398.50"></text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1071) (1 samples, 0.15%)</title><rect x="15" y="148" width="2" height="15" fill="rgb(244,10,27)"/><text x="18.00" y="158.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:938) (1 samples, 0.15%)</title><rect x="15" y="164" width="2" height="15" fill="rgb(222,49,13)"/><text x="18.00" y="174.50"></text></g><g><title>isclass (inspect.py:78) (1 samples, 0.15%)</title><rect x="15" y="180" width="2" height="15" fill="rgb(233,13,8)"/><text x="18.00" y="190.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="17" y="212" width="1" height="15" fill="rgb(226,184,27)"/><text x="20.00" y="222.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:104) (2 samples, 0.30%)</title><rect x="17" y="180" width="3" height="15" fill="rgb(253,87,16)"/><text x="20.00" y="190.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (2 samples, 0.30%)</title><rect x="17" y="196" width="3" height="15" fill="rgb(248,210,10)"/><text x="20.00" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="18" y="212" width="2" height="15" fill="rgb(253,213,13)"/><text x="21.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (1 samples, 0.15%)</title><rect x="18" y="228" width="2" height="15" fill="rgb(206,40,23)"/><text x="21.00" y="238.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (1 samples, 0.15%)</title><rect x="18" y="244" width="2" height="15" fill="rgb(209,161,32)"/><text x="21.00" y="254.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (1 samples, 0.15%)</title><rect x="18" y="260" width="2" height="15" fill="rgb(208,228,36)"/><text x="21.00" y="270.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="18" y="276" width="2" height="15" fill="rgb(212,134,49)"/><text x="21.00" y="286.50"></text></g><g><title>dgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="18" y="292" width="2" height="15" fill="rgb(237,7,45)"/><text x="21.00" y="302.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="18" y="308" width="2" height="15" fill="rgb(233,173,47)"/><text x="21.00" y="318.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="18" y="324" width="2" height="15" fill="rgb(246,186,46)"/><text x="21.00" y="334.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="18" y="340" width="2" height="15" fill="rgb(233,16,54)"/><text x="21.00" y="350.50"></text></g><g><title>sched_yield (libc-2.29.so) (1 samples, 0.15%)</title><rect x="18" y="356" width="2" height="15" fill="rgb(220,103,20)"/><text x="21.00" y="366.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1014) (1 samples, 0.15%)</title><rect x="20" y="292" width="2" height="15" fill="rgb(206,147,47)"/><text x="23.00" y="302.50"></text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:18) (5 samples, 0.76%)</title><rect x="15" y="100" width="9" height="15" fill="rgb(214,91,28)"/><text x="18.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (5 samples, 0.76%)</title><rect x="15" y="116" width="9" height="15" fill="rgb(251,77,2)"/><text x="18.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (5 samples, 0.76%)</title><rect x="15" y="132" width="9" height="15" fill="rgb(237,186,13)"/><text x="18.00" y="142.50"></text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1072) (4 samples, 0.61%)</title><rect x="17" y="148" width="7" height="15" fill="rgb(228,229,1)"/><text x="20.00" y="158.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:685) (4 samples, 0.61%)</title><rect x="17" y="164" width="7" height="15" fill="rgb(228,138,4)"/><text x="20.00" y="174.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:105) (2 samples, 0.30%)</title><rect x="20" y="180" width="4" height="15" fill="rgb(205,222,25)"/><text x="23.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.30%)</title><rect x="20" y="196" width="4" height="15" fill="rgb(225,121,17)"/><text x="23.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (2 samples, 0.30%)</title><rect x="20" y="212" width="4" height="15" fill="rgb(248,163,38)"/><text x="23.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (2 samples, 0.30%)</title><rect x="20" y="228" width="4" height="15" fill="rgb(229,189,5)"/><text x="23.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (2 samples, 0.30%)</title><rect x="20" y="244" width="4" height="15" fill="rgb(214,202,10)"/><text x="23.00" y="254.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (2 samples, 0.30%)</title><rect x="20" y="260" width="4" height="15" fill="rgb(234,44,33)"/><text x="23.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (2 samples, 0.30%)</title><rect x="20" y="276" width="4" height="15" fill="rgb(247,133,49)"/><text x="23.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (1 samples, 0.15%)</title><rect x="22" y="292" width="2" height="15" fill="rgb(242,17,47)"/><text x="25.00" y="302.50"></text></g><g><title>0x7f4bc324af53 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="22" y="308" width="2" height="15" fill="rgb(206,117,41)"/><text x="25.00" y="318.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:938) (1 samples, 0.15%)</title><rect x="24" y="164" width="2" height="15" fill="rgb(242,13,39)"/><text x="27.00" y="174.50"></text></g><g><title>isclass (inspect.py:78) (1 samples, 0.15%)</title><rect x="24" y="180" width="2" height="15" fill="rgb(221,96,37)"/><text x="27.00" y="190.50"></text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1071) (3 samples, 0.46%)</title><rect x="24" y="148" width="5" height="15" fill="rgb(251,70,41)"/><text x="27.00" y="158.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (2 samples, 0.30%)</title><rect x="26" y="164" width="3" height="15" fill="rgb(217,125,5)"/><text x="29.00" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (1 samples, 0.15%)</title><rect x="27" y="180" width="2" height="15" fill="rgb(222,75,10)"/><text x="30.00" y="190.50"></text></g><g><title>unicode_endswith (python3.7) (1 samples, 0.15%)</title><rect x="27" y="196" width="2" height="15" fill="rgb(208,168,4)"/><text x="30.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:490) (1 samples, 0.15%)</title><rect x="29" y="180" width="2" height="15" fill="rgb(206,92,14)"/><text x="32.00" y="190.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py:1216) (1 samples, 0.15%)</title><rect x="29" y="196" width="2" height="15" fill="rgb(218,173,0)"/><text x="32.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:502) (1 samples, 0.15%)</title><rect x="31" y="180" width="2" height="15" fill="rgb(249,119,10)"/><text x="34.00" y="190.50"></text></g><g><title>__enter__ (warnings.py:479) (1 samples, 0.15%)</title><rect x="31" y="196" width="2" height="15" fill="rgb(239,44,30)"/><text x="34.00" y="206.50"></text></g><g><title>simplefilter (warnings.py:177) (1 samples, 0.15%)</title><rect x="33" y="196" width="2" height="15" fill="rgb(213,15,37)"/><text x="36.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:504) (3 samples, 0.46%)</title><rect x="33" y="180" width="5" height="15" fill="rgb(230,14,50)"/><text x="36.00" y="190.50"></text></g><g><title>simplefilter (warnings.py:179) (2 samples, 0.30%)</title><rect x="35" y="196" width="3" height="15" fill="rgb(241,165,24)"/><text x="38.00" y="206.50"></text></g><g><title>_add_filter (warnings.py:186) (1 samples, 0.15%)</title><rect x="36" y="212" width="2" height="15" fill="rgb(225,36,12)"/><text x="39.00" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py:515) (1 samples, 0.15%)</title><rect x="38" y="180" width="2" height="15" fill="rgb(233,217,3)"/><text x="41.00" y="190.50"></text></g><g><title>asarray (numpy/core/_asarray.py:85) (1 samples, 0.15%)</title><rect x="38" y="196" width="2" height="15" fill="rgb(248,122,10)"/><text x="41.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:518) (1 samples, 0.15%)</title><rect x="40" y="180" width="2" height="15" fill="rgb(237,228,1)"/><text x="43.00" y="190.50"></text></g><g><title>__exit__ (warnings.py:498) (1 samples, 0.15%)</title><rect x="40" y="196" width="2" height="15" fill="rgb(208,19,9)"/><text x="43.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:543) (1 samples, 0.15%)</title><rect x="42" y="180" width="2" height="15" fill="rgb(251,158,25)"/><text x="45.00" y="190.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py:392) (1 samples, 0.15%)</title><rect x="42" y="196" width="2" height="15" fill="rgb(242,227,21)"/><text x="45.00" y="206.50"></text></g><g><title>issubclass_ (numpy/core/numerictypes.py:328) (1 samples, 0.15%)</title><rect x="42" y="212" width="2" height="15" fill="rgb(238,94,15)"/><text x="45.00" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (2 samples, 0.30%)</title><rect x="44" y="180" width="3" height="15" fill="rgb(232,174,53)"/><text x="47.00" y="190.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (1 samples, 0.15%)</title><rect x="45" y="196" width="2" height="15" fill="rgb(243,134,6)"/><text x="48.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (1 samples, 0.15%)</title><rect x="47" y="180" width="2" height="15" fill="rgb(243,120,34)"/><text x="50.00" y="190.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:155) (1 samples, 0.15%)</title><rect x="47" y="196" width="2" height="15" fill="rgb(220,54,13)"/><text x="50.00" y="206.50"></text></g><g><title>__instancecheck__ (abc.py:139) (1 samples, 0.15%)</title><rect x="47" y="212" width="2" height="15" fill="rgb(220,34,11)"/><text x="50.00" y="222.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:667) (12 samples, 1.83%)</title><rect x="29" y="164" width="22" height="15" fill="rgb(247,93,21)"/><text x="32.00" y="174.50">_..</text></g><g><title>check_array (sklearn/utils/validation.py:566) (1 samples, 0.15%)</title><rect x="49" y="180" width="2" height="15" fill="rgb(221,35,10)"/><text x="52.00" y="190.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:681) (1 samples, 0.15%)</title><rect x="51" y="164" width="2" height="15" fill="rgb(215,83,17)"/><text x="54.00" y="174.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:682) (1 samples, 0.15%)</title><rect x="53" y="164" width="1" height="15" fill="rgb(237,104,30)"/><text x="56.00" y="174.50"></text></g><g><title>array_empty (multiarraymodule.c:1805) (1 samples, 0.15%)</title><rect x="54" y="180" width="2" height="15" fill="rgb(217,31,29)"/><text x="57.00" y="190.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:683) (2 samples, 0.30%)</title><rect x="54" y="164" width="4" height="15" fill="rgb(218,144,33)"/><text x="57.00" y="174.50"></text></g><g><title>array_empty (multiarraymodule.c:1814) (1 samples, 0.15%)</title><rect x="56" y="180" width="2" height="15" fill="rgb(221,111,51)"/><text x="59.00" y="190.50"></text></g><g><title>0x7f4bc3240757 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="56" y="196" width="2" height="15" fill="rgb(221,135,49)"/><text x="59.00" y="206.50"></text></g><g><title>dgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.30%)</title><rect x="58" y="212" width="4" height="15" fill="rgb(248,0,27)"/><text x="61.00" y="222.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (42 samples, 6.40%)</title><rect x="62" y="212" width="75" height="15" fill="rgb(254,2,41)"/><text x="65.00" y="222.50">dgemm_ke..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2689) (1 samples, 0.15%)</title><rect x="137" y="244" width="2" height="15" fill="rgb(233,106,11)"/><text x="140.00" y="254.50"></text></g><g><title>_get_coredim_sizes (ufunc_object.c:2394) (1 samples, 0.15%)</title><rect x="137" y="260" width="2" height="15" fill="rgb(217,94,21)"/><text x="140.00" y="270.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2871) (7 samples, 1.07%)</title><rect x="139" y="244" width="13" height="15" fill="rgb(219,157,5)"/><text x="142.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (7 samples, 1.07%)</title><rect x="139" y="260" width="13" height="15" fill="rgb(208,115,0)"/><text x="142.00" y="270.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2942) (7 samples, 1.07%)</title><rect x="139" y="276" width="13" height="15" fill="rgb(221,149,24)"/><text x="142.00" y="286.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (7 samples, 1.07%)</title><rect x="139" y="292" width="13" height="15" fill="rgb(243,137,21)"/><text x="142.00" y="302.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (7 samples, 1.07%)</title><rect x="139" y="308" width="13" height="15" fill="rgb(241,175,1)"/><text x="142.00" y="318.50"></text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src:855) (7 samples, 1.07%)</title><rect x="139" y="324" width="13" height="15" fill="rgb(223,45,34)"/><text x="142.00" y="334.50"></text></g><g><title>blas_memory_alloc (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="152" y="292" width="1" height="15" fill="rgb(230,155,38)"/><text x="155.00" y="302.50"></text></g><g><title>exec_blas_async (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.30%)</title><rect x="155" y="340" width="4" height="15" fill="rgb(247,122,4)"/><text x="158.00" y="350.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (2 samples, 0.30%)</title><rect x="155" y="356" width="4" height="15" fill="rgb(217,39,9)"/><text x="158.00" y="366.50"></text></g><g><title>__lll_lock_wait (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="157" y="372" width="2" height="15" fill="rgb(225,100,48)"/><text x="160.00" y="382.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="159" y="356" width="2" height="15" fill="rgb(227,177,32)"/><text x="162.00" y="366.50"></text></g><g><title>__lll_unlock_wake (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="159" y="372" width="2" height="15" fill="rgb(215,100,22)"/><text x="162.00" y="382.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (30 samples, 4.57%)</title><rect x="159" y="340" width="54" height="15" fill="rgb(246,104,46)"/><text x="162.00" y="350.50">exec_..</text></g><g><title>sched_yield (libc-2.29.so) (29 samples, 4.42%)</title><rect x="161" y="356" width="52" height="15" fill="rgb(218,148,24)"/><text x="164.00" y="366.50">sched..</text></g><g><title>dgemm_itcopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (3 samples, 0.46%)</title><rect x="215" y="356" width="5" height="15" fill="rgb(223,54,29)"/><text x="218.00" y="366.50"></text></g><g><title>dgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.30%)</title><rect x="220" y="356" width="4" height="15" fill="rgb(217,228,4)"/><text x="223.00" y="366.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:104) (93 samples, 14.18%)</title><rect x="58" y="180" width="167" height="15" fill="rgb(213,116,53)"/><text x="61.00" y="190.50">_forward_pass (sklear..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (93 samples, 14.18%)</title><rect x="58" y="196" width="167" height="15" fill="rgb(238,216,7)"/><text x="61.00" y="206.50">safe_sparse_dot (skle..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (49 samples, 7.47%)</title><rect x="137" y="212" width="88" height="15" fill="rgb(253,184,46)"/><text x="140.00" y="222.50">ufunc_gene..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (49 samples, 7.47%)</title><rect x="137" y="228" width="88" height="15" fill="rgb(221,19,41)"/><text x="140.00" y="238.50">PyUFunc_Ge..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (41 samples, 6.25%)</title><rect x="152" y="244" width="73" height="15" fill="rgb(238,88,30)"/><text x="155.00" y="254.50">PyUFunc_..</text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (41 samples, 6.25%)</title><rect x="152" y="260" width="73" height="15" fill="rgb(240,91,47)"/><text x="155.00" y="270.50">DOUBLE_m..</text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (41 samples, 6.25%)</title><rect x="152" y="276" width="73" height="15" fill="rgb(252,110,42)"/><text x="155.00" y="286.50">cblas_dg..</text></g><g><title>dgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (40 samples, 6.10%)</title><rect x="153" y="292" width="72" height="15" fill="rgb(232,144,34)"/><text x="156.00" y="302.50">dgemm_th..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (40 samples, 6.10%)</title><rect x="153" y="308" width="72" height="15" fill="rgb(241,183,28)"/><text x="156.00" y="318.50">gemm_dri..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (39 samples, 5.95%)</title><rect x="155" y="324" width="70" height="15" fill="rgb(241,135,34)"/><text x="158.00" y="334.50">exec_bl..</text></g><g><title>inner_thread (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 1.07%)</title><rect x="213" y="340" width="12" height="15" fill="rgb(212,95,31)"/><text x="216.00" y="350.50"></text></g><g><title>sched_yield (libc-2.29.so) (1 samples, 0.15%)</title><rect x="224" y="356" width="1" height="15" fill="rgb(221,180,43)"/><text x="227.00" y="366.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:603) (9 samples, 1.37%)</title><rect x="225" y="292" width="17" height="15" fill="rgb(246,213,6)"/><text x="228.00" y="302.50"></text></g><g><title>_mm_add_pd (emmintrin.h:229) (9 samples, 1.37%)</title><rect x="225" y="308" width="17" height="15" fill="rgb(254,12,1)"/><text x="228.00" y="318.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (10 samples, 1.52%)</title><rect x="225" y="260" width="18" height="15" fill="rgb(219,180,19)"/><text x="228.00" y="270.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (10 samples, 1.52%)</title><rect x="225" y="276" width="18" height="15" fill="rgb(245,128,15)"/><text x="228.00" y="286.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:604) (1 samples, 0.15%)</title><rect x="242" y="292" width="1" height="15" fill="rgb(236,153,0)"/><text x="245.00" y="302.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (1 samples, 0.15%)</title><rect x="242" y="308" width="1" height="15" fill="rgb(208,140,23)"/><text x="245.00" y="318.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:319) (1 samples, 0.15%)</title><rect x="243" y="260" width="2" height="15" fill="rgb(211,137,13)"/><text x="246.00" y="270.50"></text></g><g><title>npyiter_goto_iterindex (nditer_api.c:1794) (1 samples, 0.15%)</title><rect x="243" y="276" width="2" height="15" fill="rgb(239,132,48)"/><text x="246.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (1 samples, 0.15%)</title><rect x="245" y="292" width="2" height="15" fill="rgb(218,99,4)"/><text x="248.00" y="302.50"></text></g><g><title>0x7f4bc324af36 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="247" y="308" width="2" height="15" fill="rgb(222,168,34)"/><text x="250.00" y="318.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:105) (14 samples, 2.13%)</title><rect x="225" y="180" width="26" height="15" fill="rgb(247,42,49)"/><text x="228.00" y="190.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (14 samples, 2.13%)</title><rect x="225" y="196" width="26" height="15" fill="rgb(237,73,24)"/><text x="228.00" y="206.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (14 samples, 2.13%)</title><rect x="225" y="212" width="26" height="15" fill="rgb(251,79,46)"/><text x="228.00" y="222.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (14 samples, 2.13%)</title><rect x="225" y="228" width="26" height="15" fill="rgb(240,45,28)"/><text x="228.00" y="238.50">e..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (14 samples, 2.13%)</title><rect x="225" y="244" width="26" height="15" fill="rgb(232,217,26)"/><text x="228.00" y="254.50">i..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (3 samples, 0.46%)</title><rect x="245" y="260" width="6" height="15" fill="rgb(252,132,49)"/><text x="248.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (3 samples, 0.46%)</title><rect x="245" y="276" width="6" height="15" fill="rgb(229,27,29)"/><text x="248.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (2 samples, 0.30%)</title><rect x="247" y="292" width="4" height="15" fill="rgb(236,73,44)"/><text x="250.00" y="302.50"></text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src:329) (1 samples, 0.15%)</title><rect x="249" y="308" width="2" height="15" fill="rgb(241,9,16)"/><text x="252.00" y="318.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;:4) (2 samples, 0.30%)</title><rect x="252" y="212" width="4" height="15" fill="rgb(242,151,29)"/><text x="255.00" y="222.50"></text></g><g><title>_clip_dispatcher (numpy/core/fromnumeric.py:1971) (1 samples, 0.15%)</title><rect x="254" y="228" width="2" height="15" fill="rgb(235,6,1)"/><text x="257.00" y="238.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:56) (1 samples, 0.15%)</title><rect x="256" y="260" width="2" height="15" fill="rgb(246,199,33)"/><text x="259.00" y="270.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:65) (1 samples, 0.15%)</title><rect x="258" y="324" width="2" height="15" fill="rgb(215,62,22)"/><text x="261.00" y="334.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (1 samples, 0.15%)</title><rect x="258" y="340" width="2" height="15" fill="rgb(236,113,15)"/><text x="261.00" y="350.50"></text></g><g><title>_clip (numpy/core/_methods.py:106) (2 samples, 0.30%)</title><rect x="258" y="308" width="3" height="15" fill="rgb(242,14,30)"/><text x="261.00" y="318.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:69) (1 samples, 0.15%)</title><rect x="260" y="324" width="1" height="15" fill="rgb(252,28,54)"/><text x="263.00" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="260" y="340" width="1" height="15" fill="rgb(227,105,46)"/><text x="263.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3196) (1 samples, 0.15%)</title><rect x="260" y="356" width="1" height="15" fill="rgb(233,195,23)"/><text x="263.00" y="366.50"></text></g><g><title>_ufunc_setup_flags (ufunc_object.c:370) (1 samples, 0.15%)</title><rect x="260" y="372" width="1" height="15" fill="rgb(212,73,10)"/><text x="263.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (1 samples, 0.15%)</title><rect x="261" y="356" width="2" height="15" fill="rgb(214,21,14)"/><text x="264.00" y="366.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c:1313) (1 samples, 0.15%)</title><rect x="261" y="372" width="2" height="15" fill="rgb(234,3,8)"/><text x="264.00" y="382.50"></text></g><g><title>PyArray_CastToType (convert_datatype.c:65) (1 samples, 0.15%)</title><rect x="261" y="388" width="2" height="15" fill="rgb(211,25,38)"/><text x="264.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:264) (1 samples, 0.15%)</title><rect x="261" y="404" width="2" height="15" fill="rgb(230,99,2)"/><text x="264.00" y="414.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (1 samples, 0.15%)</title><rect x="261" y="420" width="2" height="15" fill="rgb(240,167,14)"/><text x="264.00" y="430.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (1 samples, 0.15%)</title><rect x="261" y="436" width="2" height="15" fill="rgb(253,211,49)"/><text x="264.00" y="446.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c:741) (1 samples, 0.15%)</title><rect x="261" y="452" width="2" height="15" fill="rgb(233,60,25)"/><text x="264.00" y="462.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src:955) (1 samples, 0.15%)</title><rect x="261" y="468" width="2" height="15" fill="rgb(238,171,14)"/><text x="264.00" y="478.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (1 samples, 0.15%)</title><rect x="263" y="388" width="2" height="15" fill="rgb(213,127,5)"/><text x="266.00" y="398.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:306) (1 samples, 0.15%)</title><rect x="263" y="404" width="2" height="15" fill="rgb(233,81,27)"/><text x="266.00" y="414.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1720) (1 samples, 0.15%)</title><rect x="263" y="420" width="2" height="15" fill="rgb(207,156,23)"/><text x="266.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="263" y="436" width="2" height="15" fill="rgb(246,123,11)"/><text x="266.00" y="446.50"></text></g><g><title>0x7f4bc322bc95 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="263" y="452" width="2" height="15" fill="rgb(231,65,43)"/><text x="266.00" y="462.50"></text></g><g><title>DOUBLE_clip (clip.c.src:96) (8 samples, 1.22%)</title><rect x="265" y="404" width="14" height="15" fill="rgb(250,56,26)"/><text x="268.00" y="414.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (33 samples, 5.03%)</title><rect x="261" y="340" width="60" height="15" fill="rgb(248,120,52)"/><text x="264.00" y="350.50">ufunc_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (32 samples, 4.88%)</title><rect x="263" y="356" width="58" height="15" fill="rgb(221,37,4)"/><text x="266.00" y="366.50">PyUFun..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (32 samples, 4.88%)</title><rect x="263" y="372" width="58" height="15" fill="rgb(223,35,1)"/><text x="266.00" y="382.50">execut..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (31 samples, 4.73%)</title><rect x="265" y="388" width="56" height="15" fill="rgb(254,116,14)"/><text x="268.00" y="398.50">itera..</text></g><g><title>DOUBLE_clip (clip.c.src:97) (23 samples, 3.51%)</title><rect x="279" y="404" width="42" height="15" fill="rgb(214,45,4)"/><text x="282.00" y="414.50">DOU..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:109) (40 samples, 6.10%)</title><rect x="251" y="180" width="71" height="15" fill="rgb(215,91,21)"/><text x="254.00" y="190.50">_forward..</text></g><g><title>relu (sklearn/neural_network/_base.py:75) (39 samples, 5.95%)</title><rect x="252" y="196" width="70" height="15" fill="rgb(217,179,47)"/><text x="255.00" y="206.50">relu (s..</text></g><g><title>clip (&lt;__array_function__ internals&gt;:6) (37 samples, 5.64%)</title><rect x="256" y="212" width="66" height="15" fill="rgb(220,135,35)"/><text x="259.00" y="222.50">clip (&lt;..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (37 samples, 5.64%)</title><rect x="256" y="228" width="66" height="15" fill="rgb(254,138,35)"/><text x="259.00" y="238.50">array_i..</text></g><g><title>clip (numpy/core/fromnumeric.py:2037) (37 samples, 5.64%)</title><rect x="256" y="244" width="66" height="15" fill="rgb(206,121,27)"/><text x="259.00" y="254.50">clip (n..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (36 samples, 5.49%)</title><rect x="258" y="260" width="64" height="15" fill="rgb(222,8,27)"/><text x="261.00" y="270.50">_wrapfu..</text></g><g><title>array_clip (methods.c:2381) (36 samples, 5.49%)</title><rect x="258" y="276" width="64" height="15" fill="rgb(212,205,10)"/><text x="261.00" y="286.50">array_c..</text></g><g><title>forward_ndarray_method (methods.c:108) (36 samples, 5.49%)</title><rect x="258" y="292" width="64" height="15" fill="rgb(235,148,31)"/><text x="261.00" y="302.50">forward..</text></g><g><title>_clip (numpy/core/_methods.py:132) (34 samples, 5.18%)</title><rect x="261" y="308" width="61" height="15" fill="rgb(213,136,22)"/><text x="264.00" y="318.50">_clip ..</text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:85) (34 samples, 5.18%)</title><rect x="261" y="324" width="61" height="15" fill="rgb(211,42,41)"/><text x="264.00" y="334.50">_clip_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4754) (1 samples, 0.15%)</title><rect x="321" y="340" width="1" height="15" fill="rgb(209,133,38)"/><text x="324.00" y="350.50"></text></g><g><title>_find_array_wrap (ufunc_object.c:424) (1 samples, 0.15%)</title><rect x="321" y="356" width="1" height="15" fill="rgb(223,170,43)"/><text x="324.00" y="366.50"></text></g><g><title>_find_array_method (ufunc_object.c:176) (1 samples, 0.15%)</title><rect x="321" y="372" width="1" height="15" fill="rgb(224,160,40)"/><text x="324.00" y="382.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:810) (1 samples, 0.15%)</title><rect x="326" y="356" width="2" height="15" fill="rgb(238,191,40)"/><text x="329.00" y="366.50"></text></g><g><title>array_max (methods.c:323) (4 samples, 0.61%)</title><rect x="324" y="212" width="7" height="15" fill="rgb(242,132,31)"/><text x="327.00" y="222.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (4 samples, 0.61%)</title><rect x="324" y="228" width="7" height="15" fill="rgb(252,101,15)"/><text x="327.00" y="238.50"></text></g><g><title>_amax (numpy/core/_methods.py:30) (4 samples, 0.61%)</title><rect x="324" y="244" width="7" height="15" fill="rgb(230,185,16)"/><text x="327.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (3 samples, 0.46%)</title><rect x="326" y="260" width="5" height="15" fill="rgb(225,103,44)"/><text x="329.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (3 samples, 0.46%)</title><rect x="326" y="276" width="5" height="15" fill="rgb(228,5,37)"/><text x="329.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (3 samples, 0.46%)</title><rect x="326" y="292" width="5" height="15" fill="rgb(212,171,51)"/><text x="329.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (3 samples, 0.46%)</title><rect x="326" y="308" width="5" height="15" fill="rgb(224,169,9)"/><text x="329.00" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (3 samples, 0.46%)</title><rect x="326" y="324" width="5" height="15" fill="rgb(224,174,0)"/><text x="329.00" y="334.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1876) (3 samples, 0.46%)</title><rect x="326" y="340" width="5" height="15" fill="rgb(207,148,2)"/><text x="329.00" y="350.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (2 samples, 0.30%)</title><rect x="328" y="356" width="3" height="15" fill="rgb(205,20,37)"/><text x="331.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (2 samples, 0.30%)</title><rect x="328" y="372" width="3" height="15" fill="rgb(252,155,53)"/><text x="331.00" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (2 samples, 0.30%)</title><rect x="328" y="388" width="3" height="15" fill="rgb(225,142,47)"/><text x="331.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (1 samples, 0.15%)</title><rect x="331" y="276" width="2" height="15" fill="rgb(208,99,33)"/><text x="334.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (1 samples, 0.15%)</title><rect x="331" y="292" width="2" height="15" fill="rgb(206,170,25)"/><text x="334.00" y="302.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="331" y="308" width="2" height="15" fill="rgb(215,122,20)"/><text x="334.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.30%)</title><rect x="331" y="228" width="4" height="15" fill="rgb(249,222,3)"/><text x="334.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (2 samples, 0.30%)</title><rect x="331" y="244" width="4" height="15" fill="rgb(235,182,40)"/><text x="334.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (2 samples, 0.30%)</title><rect x="331" y="260" width="4" height="15" fill="rgb(223,71,47)"/><text x="334.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (1 samples, 0.15%)</title><rect x="333" y="276" width="2" height="15" fill="rgb(235,117,24)"/><text x="336.00" y="286.50"></text></g><g><title>DOUBLE_subtract (loops.c.src:1755) (1 samples, 0.15%)</title><rect x="333" y="292" width="2" height="15" fill="rgb(247,225,48)"/><text x="336.00" y="302.50"></text></g><g><title>run_binary_simd_subtract_DOUBLE (simd.inc.src:250) (1 samples, 0.15%)</title><rect x="333" y="308" width="2" height="15" fill="rgb(251,229,14)"/><text x="336.00" y="318.50"></text></g><g><title>sse2_binary_subtract_DOUBLE (simd.inc.src:603) (1 samples, 0.15%)</title><rect x="333" y="324" width="2" height="15" fill="rgb(238,58,38)"/><text x="336.00" y="334.50"></text></g><g><title>_mm_sub_pd (emmintrin.h:241) (1 samples, 0.15%)</title><rect x="333" y="340" width="2" height="15" fill="rgb(236,78,14)"/><text x="336.00" y="350.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py:92) (8 samples, 1.22%)</title><rect x="322" y="196" width="15" height="15" fill="rgb(223,14,47)"/><text x="325.00" y="206.50"></text></g><g><title>array_subtract (number.c:342) (3 samples, 0.46%)</title><rect x="331" y="212" width="6" height="15" fill="rgb(214,62,38)"/><text x="334.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4775) (1 samples, 0.15%)</title><rect x="335" y="228" width="2" height="15" fill="rgb(216,170,53)"/><text x="338.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3196) (1 samples, 0.15%)</title><rect x="337" y="228" width="2" height="15" fill="rgb(243,133,36)"/><text x="340.00" y="238.50"></text></g><g><title>0x7f4bc33fcbf9 (libm-2.29.so) (1 samples, 0.15%)</title><rect x="342" y="308" width="2" height="15" fill="rgb(216,82,25)"/><text x="345.00" y="318.50"></text></g><g><title>0x7f4bc33fcc0c (libm-2.29.so) (1 samples, 0.15%)</title><rect x="344" y="308" width="2" height="15" fill="rgb(208,13,5)"/><text x="347.00" y="318.50"></text></g><g><title>0x7f4bc33fcc2e (libm-2.29.so) (1 samples, 0.15%)</title><rect x="346" y="308" width="2" height="15" fill="rgb(241,4,39)"/><text x="349.00" y="318.50"></text></g><g><title>0x7f4bc33fcc6e (libm-2.29.so) (1 samples, 0.15%)</title><rect x="348" y="308" width="1" height="15" fill="rgb(229,127,33)"/><text x="351.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 1.22%)</title><rect x="337" y="212" width="14" height="15" fill="rgb(228,76,6)"/><text x="340.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (7 samples, 1.07%)</title><rect x="339" y="228" width="12" height="15" fill="rgb(227,82,15)"/><text x="342.00" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (7 samples, 1.07%)</title><rect x="339" y="244" width="12" height="15" fill="rgb(233,56,22)"/><text x="342.00" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (7 samples, 1.07%)</title><rect x="339" y="260" width="12" height="15" fill="rgb(245,99,54)"/><text x="342.00" y="270.50"></text></g><g><title>PyUFunc_d_d (loops.c.src:190) (7 samples, 1.07%)</title><rect x="339" y="276" width="12" height="15" fill="rgb(244,90,6)"/><text x="342.00" y="286.50"></text></g><g><title>exp (libm-2.29.so) (6 samples, 0.91%)</title><rect x="340" y="292" width="11" height="15" fill="rgb(241,215,52)"/><text x="343.00" y="302.50"></text></g><g><title>0x7f4bc33fcc7b (libm-2.29.so) (1 samples, 0.15%)</title><rect x="349" y="308" width="2" height="15" fill="rgb(224,66,20)"/><text x="352.00" y="318.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py:93) (9 samples, 1.37%)</title><rect x="337" y="196" width="16" height="15" fill="rgb(212,91,47)"/><text x="340.00" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4751) (1 samples, 0.15%)</title><rect x="351" y="212" width="2" height="15" fill="rgb(246,97,17)"/><text x="354.00" y="222.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (1 samples, 0.15%)</title><rect x="353" y="308" width="2" height="15" fill="rgb(209,86,48)"/><text x="356.00" y="318.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:235) (1 samples, 0.15%)</title><rect x="353" y="324" width="2" height="15" fill="rgb(248,147,34)"/><text x="356.00" y="334.50"></text></g><g><title>0x7f4bc324b120 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="353" y="340" width="2" height="15" fill="rgb(228,205,53)"/><text x="356.00" y="350.50"></text></g><g><title>reduce_loop (ufunc_object.c:3533) (2 samples, 0.30%)</title><rect x="355" y="324" width="3" height="15" fill="rgb(247,60,10)"/><text x="358.00" y="334.50"></text></g><g><title>DOUBLE_add (loops.c.src:1741) (2 samples, 0.30%)</title><rect x="358" y="340" width="4" height="15" fill="rgb(228,193,23)"/><text x="361.00" y="350.50"></text></g><g><title>array_sum (methods.c:2215) (6 samples, 0.91%)</title><rect x="353" y="212" width="11" height="15" fill="rgb(247,1,43)"/><text x="356.00" y="222.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (6 samples, 0.91%)</title><rect x="353" y="228" width="11" height="15" fill="rgb(227,64,0)"/><text x="356.00" y="238.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (6 samples, 0.91%)</title><rect x="353" y="244" width="11" height="15" fill="rgb(219,1,3)"/><text x="356.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (6 samples, 0.91%)</title><rect x="353" y="260" width="11" height="15" fill="rgb(214,56,31)"/><text x="356.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (6 samples, 0.91%)</title><rect x="353" y="276" width="11" height="15" fill="rgb(219,105,21)"/><text x="356.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (6 samples, 0.91%)</title><rect x="353" y="292" width="11" height="15" fill="rgb(219,129,43)"/><text x="356.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (5 samples, 0.76%)</title><rect x="355" y="308" width="9" height="15" fill="rgb(218,91,20)"/><text x="358.00" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (3 samples, 0.46%)</title><rect x="358" y="324" width="6" height="15" fill="rgb(227,11,36)"/><text x="361.00" y="334.50"></text></g><g><title>DOUBLE_add (loops.c.src:1742) (1 samples, 0.15%)</title><rect x="362" y="340" width="2" height="15" fill="rgb(243,26,6)"/><text x="365.00" y="350.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (1 samples, 0.15%)</title><rect x="364" y="260" width="2" height="15" fill="rgb(231,138,41)"/><text x="367.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (1 samples, 0.15%)</title><rect x="364" y="276" width="2" height="15" fill="rgb(219,180,18)"/><text x="367.00" y="286.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:306) (1 samples, 0.15%)</title><rect x="366" y="276" width="1" height="15" fill="rgb(229,115,6)"/><text x="369.00" y="286.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1720) (1 samples, 0.15%)</title><rect x="366" y="292" width="1" height="15" fill="rgb(238,209,9)"/><text x="369.00" y="302.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="366" y="308" width="1" height="15" fill="rgb(242,190,53)"/><text x="369.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (1 samples, 0.15%)</title><rect x="367" y="308" width="2" height="15" fill="rgb(205,204,50)"/><text x="370.00" y="318.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (3 samples, 0.46%)</title><rect x="366" y="260" width="5" height="15" fill="rgb(246,68,47)"/><text x="369.00" y="270.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (2 samples, 0.30%)</title><rect x="367" y="276" width="4" height="15" fill="rgb(248,127,21)"/><text x="370.00" y="286.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (2 samples, 0.30%)</title><rect x="367" y="292" width="4" height="15" fill="rgb(241,59,4)"/><text x="370.00" y="302.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (1 samples, 0.15%)</title><rect x="369" y="308" width="2" height="15" fill="rgb(249,119,25)"/><text x="372.00" y="318.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:226) (1 samples, 0.15%)</title><rect x="369" y="324" width="2" height="15" fill="rgb(222,185,18)"/><text x="372.00" y="334.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 0.76%)</title><rect x="364" y="244" width="9" height="15" fill="rgb(246,31,34)"/><text x="367.00" y="254.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (1 samples, 0.15%)</title><rect x="371" y="260" width="2" height="15" fill="rgb(240,62,54)"/><text x="374.00" y="270.50"></text></g><g><title>DOUBLE_divide (loops.c.src:1755) (1 samples, 0.15%)</title><rect x="371" y="276" width="2" height="15" fill="rgb(230,195,16)"/><text x="374.00" y="286.50"></text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src:250) (1 samples, 0.15%)</title><rect x="371" y="292" width="2" height="15" fill="rgb(224,78,26)"/><text x="374.00" y="302.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:604) (1 samples, 0.15%)</title><rect x="371" y="308" width="2" height="15" fill="rgb(206,134,40)"/><text x="374.00" y="318.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (1 samples, 0.15%)</title><rect x="371" y="324" width="2" height="15" fill="rgb(209,192,27)"/><text x="374.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 0.91%)</title><rect x="364" y="228" width="11" height="15" fill="rgb(220,27,31)"/><text x="367.00" y="238.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:810) (1 samples, 0.15%)</title><rect x="373" y="244" width="2" height="15" fill="rgb(229,190,12)"/><text x="376.00" y="254.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (196 samples, 29.88%)</title><rect x="24" y="132" width="352" height="15" fill="rgb(254,108,1)"/><text x="27.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_sk..</text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1072) (193 samples, 29.42%)</title><rect x="29" y="148" width="347" height="15" fill="rgb(245,189,30)"/><text x="32.00" y="158.50">predict_proba (sklearn/neural_network/_multilay..</text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:685) (177 samples, 26.98%)</title><rect x="58" y="164" width="318" height="15" fill="rgb(247,144,34)"/><text x="61.00" y="174.50">_predict (sklearn/neural_network/_multilay..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:113) (30 samples, 4.57%)</title><rect x="322" y="180" width="54" height="15" fill="rgb(228,126,4)"/><text x="325.00" y="190.50">_forw..</text></g><g><title>softmax (sklearn/neural_network/_base.py:94) (13 samples, 1.98%)</title><rect x="353" y="196" width="23" height="15" fill="rgb(236,209,34)"/><text x="356.00" y="206.50">s..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 1.07%)</title><rect x="364" y="212" width="12" height="15" fill="rgb(218,92,15)"/><text x="367.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3285) (1 samples, 0.15%)</title><rect x="375" y="228" width="1" height="15" fill="rgb(223,9,34)"/><text x="378.00" y="238.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:38) (203 samples, 30.95%)</title><rect x="15" y="52" width="365" height="15" fill="rgb(208,90,11)"/><text x="18.00" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_5..</text></g><g><title>profile_skl (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:37) (203 samples, 30.95%)</title><rect x="15" y="68" width="365" height="15" fill="rgb(246,0,5)"/><text x="18.00" y="78.50">profile_skl (bench_MLPClassifier_default_b_cl_100..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:29) (203 samples, 30.95%)</title><rect x="15" y="84" width="365" height="15" fill="rgb(225,110,26)"/><text x="18.00" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:23) (198 samples, 30.18%)</title><rect x="24" y="100" width="356" height="15" fill="rgb(222,98,15)"/><text x="27.00" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_5..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (198 samples, 30.18%)</title><rect x="24" y="116" width="356" height="15" fill="rgb(253,74,25)"/><text x="27.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv..</text></g><g><title>unicode_concatenate (python3.7) (2 samples, 0.30%)</title><rect x="376" y="132" width="4" height="15" fill="rgb(217,162,15)"/><text x="379.00" y="142.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py:150) (1 samples, 0.15%)</title><rect x="380" y="244" width="2" height="15" fill="rgb(225,28,21)"/><text x="383.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.15%)</title><rect x="380" y="260" width="2" height="15" fill="rgb(234,72,1)"/><text x="383.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="380" y="276" width="2" height="15" fill="rgb(231,157,32)"/><text x="383.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="380" y="292" width="2" height="15" fill="rgb(219,119,3)"/><text x="383.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="380" y="308" width="2" height="15" fill="rgb(249,214,28)"/><text x="383.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="380" y="324" width="2" height="15" fill="rgb(215,112,36)"/><text x="383.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="380" y="340" width="2" height="15" fill="rgb(212,198,43)"/><text x="383.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="380" y="356" width="2" height="15" fill="rgb(240,141,5)"/><text x="383.00" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/random/__init__.py:181) (1 samples, 0.15%)</title><rect x="380" y="372" width="2" height="15" fill="rgb(228,199,44)"/><text x="383.00" y="382.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.15%)</title><rect x="380" y="388" width="2" height="15" fill="rgb(239,103,47)"/><text x="383.00" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="380" y="404" width="2" height="15" fill="rgb(230,23,1)"/><text x="383.00" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="380" y="420" width="2" height="15" fill="rgb(216,97,22)"/><text x="383.00" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="380" y="436" width="2" height="15" fill="rgb(250,106,49)"/><text x="383.00" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="380" y="452" width="2" height="15" fill="rgb(209,102,10)"/><text x="383.00" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="380" y="468" width="2" height="15" fill="rgb(213,46,52)"/><text x="383.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="380" y="484" width="2" height="15" fill="rgb(246,218,50)"/><text x="383.00" y="494.50"></text></g><g><title>&lt;module&gt; (numpy/random/_pickle.py:1) (1 samples, 0.15%)</title><rect x="380" y="500" width="2" height="15" fill="rgb(242,200,8)"/><text x="383.00" y="510.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="380" y="516" width="2" height="15" fill="rgb(221,37,51)"/><text x="383.00" y="526.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="380" y="532" width="2" height="15" fill="rgb(215,175,44)"/><text x="383.00" y="542.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="380" y="548" width="2" height="15" fill="rgb(247,9,13)"/><text x="383.00" y="558.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.15%)</title><rect x="380" y="564" width="2" height="15" fill="rgb(240,221,15)"/><text x="383.00" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="380" y="580" width="2" height="15" fill="rgb(206,53,42)"/><text x="383.00" y="590.50"></text></g><g><title>0x7f4bb5af1585 (?) (1 samples, 0.15%)</title><rect x="380" y="596" width="2" height="15" fill="rgb(240,99,38)"/><text x="383.00" y="606.50"></text></g><g><title>0x7f4bb5af7075 (?) (1 samples, 0.15%)</title><rect x="380" y="612" width="2" height="15" fill="rgb(240,158,3)"/><text x="383.00" y="622.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="380" y="628" width="2" height="15" fill="rgb(233,116,3)"/><text x="383.00" y="638.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="380" y="644" width="2" height="15" fill="rgb(206,13,17)"/><text x="383.00" y="654.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="380" y="660" width="2" height="15" fill="rgb(242,143,5)"/><text x="383.00" y="670.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.15%)</title><rect x="380" y="676" width="2" height="15" fill="rgb(218,161,52)"/><text x="383.00" y="686.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="380" y="692" width="2" height="15" fill="rgb(242,164,8)"/><text x="383.00" y="702.50"></text></g><g><title>0x7f4bb542e543 (?) (1 samples, 0.15%)</title><rect x="380" y="708" width="2" height="15" fill="rgb(243,109,35)"/><text x="383.00" y="718.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="380" y="724" width="2" height="15" fill="rgb(244,223,45)"/><text x="383.00" y="734.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="380" y="740" width="2" height="15" fill="rgb(226,2,33)"/><text x="383.00" y="750.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="380" y="756" width="2" height="15" fill="rgb(237,147,39)"/><text x="383.00" y="766.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.15%)</title><rect x="380" y="772" width="2" height="15" fill="rgb(217,63,38)"/><text x="383.00" y="782.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="380" y="788" width="2" height="15" fill="rgb(236,79,7)"/><text x="383.00" y="798.50"></text></g><g><title>0x7f4bb5203b9c (?) (1 samples, 0.15%)</title><rect x="380" y="804" width="2" height="15" fill="rgb(213,64,23)"/><text x="383.00" y="814.50"></text></g><g><title>0x7f4bb5207885 (?) (1 samples, 0.15%)</title><rect x="380" y="820" width="2" height="15" fill="rgb(207,163,39)"/><text x="383.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="380" y="836" width="2" height="15" fill="rgb(218,13,50)"/><text x="383.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="380" y="852" width="2" height="15" fill="rgb(236,154,7)"/><text x="383.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="380" y="868" width="2" height="15" fill="rgb(254,172,24)"/><text x="383.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="380" y="884" width="2" height="15" fill="rgb(206,74,45)"/><text x="383.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="380" y="900" width="2" height="15" fill="rgb(247,45,13)"/><text x="383.00" y="910.50"></text></g><g><title>&lt;module&gt; (secrets.py:20) (1 samples, 0.15%)</title><rect x="380" y="916" width="2" height="15" fill="rgb(230,147,17)"/><text x="383.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="380" y="932" width="2" height="15" fill="rgb(216,49,41)"/><text x="383.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="380" y="948" width="2" height="15" fill="rgb(214,77,38)"/><text x="383.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="380" y="964" width="2" height="15" fill="rgb(229,6,49)"/><text x="383.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="380" y="980" width="2" height="15" fill="rgb(251,147,45)"/><text x="383.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="380" y="996" width="2" height="15" fill="rgb(223,154,47)"/><text x="383.00" y="1006.50"></text></g><g><title>&lt;module&gt; (random.py:669) (1 samples, 0.15%)</title><rect x="380" y="1012" width="2" height="15" fill="rgb(222,52,21)"/><text x="383.00" y="1022.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:1) (2 samples, 0.30%)</title><rect x="380" y="148" width="4" height="15" fill="rgb(226,70,5)"/><text x="383.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="380" y="164" width="4" height="15" fill="rgb(209,22,36)"/><text x="383.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="380" y="180" width="4" height="15" fill="rgb(229,229,37)"/><text x="383.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="380" y="196" width="4" height="15" fill="rgb(245,117,13)"/><text x="383.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="380" y="212" width="4" height="15" fill="rgb(248,192,29)"/><text x="383.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="380" y="228" width="4" height="15" fill="rgb(238,14,45)"/><text x="383.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py:187) (1 samples, 0.15%)</title><rect x="382" y="244" width="2" height="15" fill="rgb(223,83,19)"/><text x="385.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="382" y="260" width="2" height="15" fill="rgb(221,33,52)"/><text x="385.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="382" y="276" width="2" height="15" fill="rgb(236,141,46)"/><text x="385.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="382" y="292" width="2" height="15" fill="rgb(214,136,11)"/><text x="385.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="382" y="308" width="2" height="15" fill="rgb(253,177,1)"/><text x="385.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="382" y="324" width="2" height="15" fill="rgb(237,160,49)"/><text x="385.00" y="334.50"></text></g><g><title>&lt;module&gt; (numpy/testing/__init__.py:10) (1 samples, 0.15%)</title><rect x="382" y="340" width="2" height="15" fill="rgb(221,72,39)"/><text x="385.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="382" y="356" width="2" height="15" fill="rgb(241,122,47)"/><text x="385.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="382" y="372" width="2" height="15" fill="rgb(228,96,24)"/><text x="385.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="382" y="388" width="2" height="15" fill="rgb(212,103,25)"/><text x="385.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="382" y="404" width="2" height="15" fill="rgb(240,20,21)"/><text x="385.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="382" y="420" width="2" height="15" fill="rgb(253,187,38)"/><text x="385.00" y="430.50"></text></g><g><title>&lt;module&gt; (unittest/__init__.py:59) (1 samples, 0.15%)</title><rect x="382" y="436" width="2" height="15" fill="rgb(234,175,39)"/><text x="385.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="382" y="452" width="2" height="15" fill="rgb(248,96,8)"/><text x="385.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="382" y="468" width="2" height="15" fill="rgb(232,83,0)"/><text x="385.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="382" y="484" width="2" height="15" fill="rgb(247,217,37)"/><text x="385.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="382" y="500" width="2" height="15" fill="rgb(235,130,51)"/><text x="385.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="382" y="516" width="2" height="15" fill="rgb(235,109,29)"/><text x="385.00" y="526.50"></text></g><g><title>&lt;module&gt; (unittest/case.py:6) (1 samples, 0.15%)</title><rect x="382" y="532" width="2" height="15" fill="rgb(254,115,13)"/><text x="385.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="382" y="548" width="2" height="15" fill="rgb(253,99,10)"/><text x="385.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="382" y="564" width="2" height="15" fill="rgb(234,143,42)"/><text x="385.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="382" y="580" width="2" height="15" fill="rgb(228,168,49)"/><text x="385.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="382" y="596" width="2" height="15" fill="rgb(246,48,48)"/><text x="385.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="382" y="612" width="2" height="15" fill="rgb(221,201,42)"/><text x="385.00" y="622.50"></text></g><g><title>&lt;module&gt; (logging/__init__.py:28) (1 samples, 0.15%)</title><rect x="382" y="628" width="2" height="15" fill="rgb(249,63,39)"/><text x="385.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="382" y="644" width="2" height="15" fill="rgb(242,52,37)"/><text x="385.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="382" y="660" width="2" height="15" fill="rgb(221,88,32)"/><text x="385.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="382" y="676" width="2" height="15" fill="rgb(252,19,50)"/><text x="385.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="382" y="692" width="2" height="15" fill="rgb(208,212,2)"/><text x="385.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="382" y="708" width="2" height="15" fill="rgb(225,115,50)"/><text x="385.00" y="718.50"></text></g><g><title>&lt;module&gt; (string.py:78) (1 samples, 0.15%)</title><rect x="382" y="724" width="2" height="15" fill="rgb(214,49,6)"/><text x="385.00" y="734.50"></text></g><g><title>__init__ (string.py:75) (1 samples, 0.15%)</title><rect x="382" y="740" width="2" height="15" fill="rgb(221,52,28)"/><text x="385.00" y="750.50"></text></g><g><title>compile (re.py:234) (1 samples, 0.15%)</title><rect x="382" y="756" width="2" height="15" fill="rgb(245,4,30)"/><text x="385.00" y="766.50"></text></g><g><title>_compile (re.py:286) (1 samples, 0.15%)</title><rect x="382" y="772" width="2" height="15" fill="rgb(231,205,4)"/><text x="385.00" y="782.50"></text></g><g><title>compile (sre_compile.py:764) (1 samples, 0.15%)</title><rect x="382" y="788" width="2" height="15" fill="rgb(242,220,54)"/><text x="385.00" y="798.50"></text></g><g><title>parse (sre_parse.py:930) (1 samples, 0.15%)</title><rect x="382" y="804" width="2" height="15" fill="rgb(212,87,26)"/><text x="385.00" y="814.50"></text></g><g><title>_parse_sub (sre_parse.py:426) (1 samples, 0.15%)</title><rect x="382" y="820" width="2" height="15" fill="rgb(227,142,23)"/><text x="385.00" y="830.50"></text></g><g><title>_parse (sre_parse.py:816) (1 samples, 0.15%)</title><rect x="382" y="836" width="2" height="15" fill="rgb(240,147,17)"/><text x="385.00" y="846.50"></text></g><g><title>_parse_sub (sre_parse.py:426) (1 samples, 0.15%)</title><rect x="382" y="852" width="2" height="15" fill="rgb(233,7,48)"/><text x="385.00" y="862.50"></text></g><g><title>_parse (sre_parse.py:493) (1 samples, 0.15%)</title><rect x="382" y="868" width="2" height="15" fill="rgb(245,182,38)"/><text x="385.00" y="878.50"></text></g><g><title>get (sre_parse.py:255) (1 samples, 0.15%)</title><rect x="382" y="884" width="2" height="15" fill="rgb(253,141,47)"/><text x="385.00" y="894.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (2 samples, 0.30%)</title><rect x="384" y="852" width="3" height="15" fill="rgb(247,161,10)"/><text x="387.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (2 samples, 0.30%)</title><rect x="384" y="868" width="3" height="15" fill="rgb(242,130,22)"/><text x="387.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (2 samples, 0.30%)</title><rect x="384" y="884" width="3" height="15" fill="rgb(235,221,4)"/><text x="387.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (2 samples, 0.30%)</title><rect x="384" y="900" width="3" height="15" fill="rgb(229,226,30)"/><text x="387.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2061) (2 samples, 0.30%)</title><rect x="384" y="916" width="3" height="15" fill="rgb(211,129,18)"/><text x="387.00" y="926.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py:2034) (2 samples, 0.30%)</title><rect x="384" y="932" width="3" height="15" fill="rgb(248,216,27)"/><text x="387.00" y="942.50"></text></g><g><title>_by_version (pkg_resources/__init__.py:2032) (1 samples, 0.15%)</title><rect x="385" y="948" width="2" height="15" fill="rgb(243,160,18)"/><text x="388.00" y="958.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py:2032) (1 samples, 0.15%)</title><rect x="385" y="964" width="2" height="15" fill="rgb(207,185,46)"/><text x="388.00" y="974.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py:33) (1 samples, 0.15%)</title><rect x="385" y="980" width="2" height="15" fill="rgb(209,87,25)"/><text x="388.00" y="990.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py:76) (1 samples, 0.15%)</title><rect x="385" y="996" width="2" height="15" fill="rgb(244,189,49)"/><text x="388.00" y="1006.50"></text></g><g><title>_legacy_cmpkey (pkg_resources/_vendor/packaging/version.py:153) (1 samples, 0.15%)</title><rect x="385" y="1012" width="2" height="15" fill="rgb(245,216,27)"/><text x="388.00" y="1022.50"></text></g><g><title>__exit__ (warnings.py:499) (1 samples, 0.15%)</title><rect x="387" y="932" width="2" height="15" fill="rgb(238,55,30)"/><text x="390.00" y="942.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1382) (1 samples, 0.15%)</title><rect x="389" y="964" width="2" height="15" fill="rgb(245,5,27)"/><text x="392.00" y="974.50"></text></g><g><title>_path_join (&lt;frozen importlib._bootstrap_external&gt;:59) (1 samples, 0.15%)</title><rect x="389" y="980" width="2" height="15" fill="rgb(254,25,13)"/><text x="392.00" y="990.50"></text></g><g><title>&lt;listcomp&gt; (&lt;frozen importlib._bootstrap_external&gt;:59) (1 samples, 0.15%)</title><rect x="389" y="996" width="2" height="15" fill="rgb(224,184,32)"/><text x="392.00" y="1006.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3279) (3 samples, 0.46%)</title><rect x="387" y="852" width="6" height="15" fill="rgb(236,110,22)"/><text x="390.00" y="862.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py:3279) (3 samples, 0.46%)</title><rect x="387" y="868" width="6" height="15" fill="rgb(211,198,25)"/><text x="390.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py:2782) (3 samples, 0.46%)</title><rect x="387" y="884" width="6" height="15" fill="rgb(239,198,13)"/><text x="390.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py:2295) (3 samples, 0.46%)</title><rect x="387" y="900" width="6" height="15" fill="rgb(219,21,21)"/><text x="390.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py:2201) (3 samples, 0.46%)</title><rect x="387" y="916" width="6" height="15" fill="rgb(253,157,31)"/><text x="390.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;:431) (2 samples, 0.30%)</title><rect x="389" y="932" width="4" height="15" fill="rgb(214,160,8)"/><text x="392.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;:1346) (2 samples, 0.30%)</title><rect x="389" y="948" width="4" height="15" fill="rgb(231,223,1)"/><text x="392.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1383) (1 samples, 0.15%)</title><rect x="391" y="964" width="2" height="15" fill="rgb(236,4,38)"/><text x="394.00" y="974.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;:95) (1 samples, 0.15%)</title><rect x="391" y="980" width="2" height="15" fill="rgb(224,96,37)"/><text x="394.00" y="990.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;:87) (1 samples, 0.15%)</title><rect x="391" y="996" width="2" height="15" fill="rgb(231,159,33)"/><text x="394.00" y="1006.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;:81) (1 samples, 0.15%)</title><rect x="391" y="1012" width="2" height="15" fill="rgb(209,35,27)"/><text x="394.00" y="1022.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.15%)</title><rect x="391" y="1028" width="2" height="15" fill="rgb(233,150,42)"/><text x="394.00" y="1038.50"></text></g><g><title>unicode_decode_locale (python3.7) (1 samples, 0.15%)</title><rect x="391" y="1044" width="2" height="15" fill="rgb(246,54,20)"/><text x="394.00" y="1054.50"></text></g><g><title>mbstowcs (libc-2.29.so) (1 samples, 0.15%)</title><rect x="391" y="1060" width="2" height="15" fill="rgb(210,102,53)"/><text x="394.00" y="1070.50"></text></g><g><title>0x7f4bc3258541 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="391" y="1076" width="2" height="15" fill="rgb(214,194,1)"/><text x="394.00" y="1086.50"></text></g><g><title>0x7f4bc31d33ef (libc-2.29.so) (1 samples, 0.15%)</title><rect x="391" y="1092" width="2" height="15" fill="rgb(247,95,32)"/><text x="394.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (6 samples, 0.91%)</title><rect x="384" y="820" width="10" height="15" fill="rgb(228,12,13)"/><text x="387.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (6 samples, 0.91%)</title><rect x="384" y="836" width="10" height="15" fill="rgb(240,87,18)"/><text x="387.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (1 samples, 0.15%)</title><rect x="393" y="852" width="1" height="15" fill="rgb(232,104,39)"/><text x="396.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (1 samples, 0.15%)</title><rect x="393" y="868" width="1" height="15" fill="rgb(250,54,12)"/><text x="396.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (1 samples, 0.15%)</title><rect x="393" y="884" width="1" height="15" fill="rgb(225,164,12)"/><text x="396.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py:2134) (1 samples, 0.15%)</title><rect x="393" y="900" width="1" height="15" fill="rgb(227,138,38)"/><text x="396.00" y="910.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:2) (7 samples, 1.07%)</title><rect x="384" y="148" width="12" height="15" fill="rgb(239,166,24)"/><text x="387.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.07%)</title><rect x="384" y="164" width="12" height="15" fill="rgb(217,110,4)"/><text x="387.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 1.07%)</title><rect x="384" y="180" width="12" height="15" fill="rgb(241,123,30)"/><text x="387.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.07%)</title><rect x="384" y="196" width="12" height="15" fill="rgb(222,77,46)"/><text x="387.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.07%)</title><rect x="384" y="212" width="12" height="15" fill="rgb(230,138,9)"/><text x="387.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.07%)</title><rect x="384" y="228" width="12" height="15" fill="rgb(235,222,22)"/><text x="387.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.07%)</title><rect x="384" y="244" width="12" height="15" fill="rgb(233,131,33)"/><text x="387.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.07%)</title><rect x="384" y="260" width="12" height="15" fill="rgb(245,96,3)"/><text x="387.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.07%)</title><rect x="384" y="276" width="12" height="15" fill="rgb(213,225,45)"/><text x="387.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (7 samples, 1.07%)</title><rect x="384" y="292" width="12" height="15" fill="rgb(223,11,0)"/><text x="387.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.07%)</title><rect x="384" y="308" width="12" height="15" fill="rgb(239,141,22)"/><text x="387.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.07%)</title><rect x="384" y="324" width="12" height="15" fill="rgb(219,150,14)"/><text x="387.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.07%)</title><rect x="384" y="340" width="12" height="15" fill="rgb(210,129,11)"/><text x="387.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.07%)</title><rect x="384" y="356" width="12" height="15" fill="rgb(237,33,34)"/><text x="387.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.07%)</title><rect x="384" y="372" width="12" height="15" fill="rgb(234,199,6)"/><text x="387.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (7 samples, 1.07%)</title><rect x="384" y="388" width="12" height="15" fill="rgb(242,141,34)"/><text x="387.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.07%)</title><rect x="384" y="404" width="12" height="15" fill="rgb(209,187,38)"/><text x="387.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.07%)</title><rect x="384" y="420" width="12" height="15" fill="rgb(214,10,53)"/><text x="387.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.07%)</title><rect x="384" y="436" width="12" height="15" fill="rgb(244,126,9)"/><text x="387.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.07%)</title><rect x="384" y="452" width="12" height="15" fill="rgb(234,21,42)"/><text x="387.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.07%)</title><rect x="384" y="468" width="12" height="15" fill="rgb(242,110,14)"/><text x="387.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (7 samples, 1.07%)</title><rect x="384" y="484" width="12" height="15" fill="rgb(232,41,31)"/><text x="387.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.07%)</title><rect x="384" y="500" width="12" height="15" fill="rgb(221,8,6)"/><text x="387.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.07%)</title><rect x="384" y="516" width="12" height="15" fill="rgb(217,37,25)"/><text x="387.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.07%)</title><rect x="384" y="532" width="12" height="15" fill="rgb(207,90,26)"/><text x="387.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.07%)</title><rect x="384" y="548" width="12" height="15" fill="rgb(235,197,9)"/><text x="387.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.07%)</title><rect x="384" y="564" width="12" height="15" fill="rgb(248,2,4)"/><text x="387.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (7 samples, 1.07%)</title><rect x="384" y="580" width="12" height="15" fill="rgb(243,173,35)"/><text x="387.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.07%)</title><rect x="384" y="596" width="12" height="15" fill="rgb(247,193,10)"/><text x="387.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 1.07%)</title><rect x="384" y="612" width="12" height="15" fill="rgb(245,90,51)"/><text x="387.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.07%)</title><rect x="384" y="628" width="12" height="15" fill="rgb(245,117,9)"/><text x="387.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.07%)</title><rect x="384" y="644" width="12" height="15" fill="rgb(211,147,20)"/><text x="387.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.07%)</title><rect x="384" y="660" width="12" height="15" fill="rgb(237,61,16)"/><text x="387.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.07%)</title><rect x="384" y="676" width="12" height="15" fill="rgb(208,137,35)"/><text x="387.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.07%)</title><rect x="384" y="692" width="12" height="15" fill="rgb(250,162,18)"/><text x="387.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.07%)</title><rect x="384" y="708" width="12" height="15" fill="rgb(248,59,12)"/><text x="387.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (7 samples, 1.07%)</title><rect x="384" y="724" width="12" height="15" fill="rgb(239,25,4)"/><text x="387.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.07%)</title><rect x="384" y="740" width="12" height="15" fill="rgb(252,173,18)"/><text x="387.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.07%)</title><rect x="384" y="756" width="12" height="15" fill="rgb(206,4,48)"/><text x="387.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.07%)</title><rect x="384" y="772" width="12" height="15" fill="rgb(224,142,50)"/><text x="387.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.07%)</title><rect x="384" y="788" width="12" height="15" fill="rgb(214,159,50)"/><text x="387.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.07%)</title><rect x="384" y="804" width="12" height="15" fill="rgb(217,224,11)"/><text x="387.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:36) (1 samples, 0.15%)</title><rect x="394" y="820" width="2" height="15" fill="rgb(247,173,19)"/><text x="397.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="394" y="836" width="2" height="15" fill="rgb(243,106,36)"/><text x="397.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="394" y="852" width="2" height="15" fill="rgb(215,49,42)"/><text x="397.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="394" y="868" width="2" height="15" fill="rgb(212,86,37)"/><text x="397.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="394" y="884" width="2" height="15" fill="rgb(254,199,9)"/><text x="397.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="394" y="900" width="2" height="15" fill="rgb(228,142,53)"/><text x="397.00" y="910.50"></text></g><g><title>&lt;module&gt; (email/parser.py:12) (1 samples, 0.15%)</title><rect x="394" y="916" width="2" height="15" fill="rgb(205,170,27)"/><text x="397.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="394" y="932" width="2" height="15" fill="rgb(240,154,1)"/><text x="397.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="394" y="948" width="2" height="15" fill="rgb(211,33,12)"/><text x="397.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="394" y="964" width="2" height="15" fill="rgb(231,35,30)"/><text x="397.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="394" y="980" width="2" height="15" fill="rgb(217,139,2)"/><text x="397.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="394" y="996" width="2" height="15" fill="rgb(254,144,46)"/><text x="397.00" y="1006.50"></text></g><g><title>&lt;module&gt; (email/feedparser.py:26) (1 samples, 0.15%)</title><rect x="394" y="1012" width="2" height="15" fill="rgb(223,178,8)"/><text x="397.00" y="1022.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.15%)</title><rect x="394" y="1028" width="2" height="15" fill="rgb(210,35,12)"/><text x="397.00" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="394" y="1044" width="2" height="15" fill="rgb(206,29,42)"/><text x="397.00" y="1054.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="394" y="1060" width="2" height="15" fill="rgb(222,156,5)"/><text x="397.00" y="1070.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="394" y="1076" width="2" height="15" fill="rgb(222,16,50)"/><text x="397.00" y="1086.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="394" y="1092" width="2" height="15" fill="rgb(222,18,27)"/><text x="397.00" y="1102.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="394" y="1108" width="2" height="15" fill="rgb(206,208,44)"/><text x="397.00" y="1118.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="394" y="1124" width="2" height="15" fill="rgb(223,135,12)"/><text x="397.00" y="1134.50"></text></g><g><title>&lt;module&gt; (email/errors.py:107) (1 samples, 0.15%)</title><rect x="394" y="1140" width="2" height="15" fill="rgb(210,148,5)"/><text x="397.00" y="1150.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:4) (1 samples, 0.15%)</title><rect x="396" y="148" width="2" height="15" fill="rgb(226,135,50)"/><text x="399.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="396" y="164" width="2" height="15" fill="rgb(241,85,51)"/><text x="399.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.15%)</title><rect x="396" y="180" width="2" height="15" fill="rgb(231,181,19)"/><text x="399.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="396" y="196" width="2" height="15" fill="rgb(208,136,48)"/><text x="399.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="396" y="212" width="2" height="15" fill="rgb(226,36,16)"/><text x="399.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="396" y="228" width="2" height="15" fill="rgb(219,198,7)"/><text x="399.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="396" y="244" width="2" height="15" fill="rgb(226,18,11)"/><text x="399.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="396" y="260" width="2" height="15" fill="rgb(208,1,12)"/><text x="399.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="396" y="276" width="2" height="15" fill="rgb(229,82,54)"/><text x="399.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (1 samples, 0.15%)</title><rect x="396" y="292" width="2" height="15" fill="rgb(206,72,27)"/><text x="399.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="396" y="308" width="2" height="15" fill="rgb(214,215,4)"/><text x="399.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="396" y="324" width="2" height="15" fill="rgb(228,117,15)"/><text x="399.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="396" y="340" width="2" height="15" fill="rgb(251,34,33)"/><text x="399.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="396" y="356" width="2" height="15" fill="rgb(206,132,31)"/><text x="399.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="396" y="372" width="2" height="15" fill="rgb(221,195,7)"/><text x="399.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (1 samples, 0.15%)</title><rect x="396" y="388" width="2" height="15" fill="rgb(242,95,24)"/><text x="399.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="396" y="404" width="2" height="15" fill="rgb(248,23,50)"/><text x="399.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="396" y="420" width="2" height="15" fill="rgb(237,208,54)"/><text x="399.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="396" y="436" width="2" height="15" fill="rgb(239,89,43)"/><text x="399.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="396" y="452" width="2" height="15" fill="rgb(222,180,53)"/><text x="399.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="396" y="468" width="2" height="15" fill="rgb(254,68,22)"/><text x="399.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:18) (1 samples, 0.15%)</title><rect x="396" y="484" width="2" height="15" fill="rgb(229,49,6)"/><text x="399.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="396" y="500" width="2" height="15" fill="rgb(243,111,48)"/><text x="399.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="396" y="516" width="2" height="15" fill="rgb(218,133,28)"/><text x="399.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="396" y="532" width="2" height="15" fill="rgb(230,93,31)"/><text x="399.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="396" y="548" width="2" height="15" fill="rgb(252,15,22)"/><text x="399.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="396" y="564" width="2" height="15" fill="rgb(240,198,29)"/><text x="399.00" y="574.50"></text></g><g><title>&lt;module&gt; (scipy/sparse/__init__.py:237) (1 samples, 0.15%)</title><rect x="396" y="580" width="2" height="15" fill="rgb(237,48,35)"/><text x="399.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="396" y="596" width="2" height="15" fill="rgb(237,221,4)"/><text x="399.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="396" y="612" width="2" height="15" fill="rgb(222,111,47)"/><text x="399.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="396" y="628" width="2" height="15" fill="rgb(231,129,28)"/><text x="399.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 0.15%)</title><rect x="396" y="644" width="2" height="15" fill="rgb(229,31,47)"/><text x="399.00" y="654.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:857) (1 samples, 0.15%)</title><rect x="396" y="660" width="2" height="15" fill="rgb(217,208,47)"/><text x="399.00" y="670.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:525) (1 samples, 0.15%)</title><rect x="396" y="676" width="2" height="15" fill="rgb(234,85,36)"/><text x="399.00" y="686.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py:43) (1 samples, 0.15%)</title><rect x="398" y="772" width="2" height="15" fill="rgb(230,172,38)"/><text x="401.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="398" y="788" width="2" height="15" fill="rgb(246,139,13)"/><text x="401.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="398" y="804" width="2" height="15" fill="rgb(209,85,8)"/><text x="401.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="398" y="820" width="2" height="15" fill="rgb(237,205,33)"/><text x="401.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="398" y="836" width="2" height="15" fill="rgb(216,26,25)"/><text x="401.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="398" y="852" width="2" height="15" fill="rgb(247,149,37)"/><text x="401.00" y="862.50"></text></g><g><title>&lt;module&gt; (urllib3/__init__.py:7) (1 samples, 0.15%)</title><rect x="398" y="868" width="2" height="15" fill="rgb(244,97,31)"/><text x="401.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="398" y="884" width="2" height="15" fill="rgb(235,197,39)"/><text x="401.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="398" y="900" width="2" height="15" fill="rgb(244,46,46)"/><text x="401.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="398" y="916" width="2" height="15" fill="rgb(244,30,54)"/><text x="401.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="398" y="932" width="2" height="15" fill="rgb(230,226,1)"/><text x="401.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="398" y="948" width="2" height="15" fill="rgb(251,95,9)"/><text x="401.00" y="958.50"></text></g><g><title>&lt;module&gt; (urllib3/connectionpool.py:29) (1 samples, 0.15%)</title><rect x="398" y="964" width="2" height="15" fill="rgb(244,102,44)"/><text x="401.00" y="974.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="398" y="980" width="2" height="15" fill="rgb(215,101,42)"/><text x="401.00" y="990.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="398" y="996" width="2" height="15" fill="rgb(223,101,30)"/><text x="401.00" y="1006.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="398" y="1012" width="2" height="15" fill="rgb(225,114,27)"/><text x="401.00" y="1022.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="398" y="1028" width="2" height="15" fill="rgb(210,220,25)"/><text x="401.00" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="398" y="1044" width="2" height="15" fill="rgb(225,161,5)"/><text x="401.00" y="1054.50"></text></g><g><title>&lt;module&gt; (urllib3/connection.py:40) (1 samples, 0.15%)</title><rect x="398" y="1060" width="2" height="15" fill="rgb(249,48,52)"/><text x="401.00" y="1070.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="398" y="1076" width="2" height="15" fill="rgb(216,180,10)"/><text x="401.00" y="1086.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.15%)</title><rect x="398" y="1092" width="2" height="15" fill="rgb(232,18,21)"/><text x="401.00" y="1102.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="398" y="1108" width="2" height="15" fill="rgb(229,123,48)"/><text x="401.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="398" y="1124" width="2" height="15" fill="rgb(243,18,19)"/><text x="401.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="398" y="1140" width="2" height="15" fill="rgb(219,103,14)"/><text x="401.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="398" y="1156" width="2" height="15" fill="rgb(223,137,17)"/><text x="401.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="398" y="1172" width="2" height="15" fill="rgb(205,99,40)"/><text x="401.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="398" y="1188" width="2" height="15" fill="rgb(248,107,53)"/><text x="401.00" y="1198.50"></text></g><g><title>&lt;module&gt; (urllib3/util/__init__.py:18) (1 samples, 0.15%)</title><rect x="398" y="1204" width="2" height="15" fill="rgb(218,136,20)"/><text x="401.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="398" y="1220" width="2" height="15" fill="rgb(214,144,19)"/><text x="401.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="398" y="1236" width="2" height="15" fill="rgb(247,66,39)"/><text x="401.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="398" y="1252" width="2" height="15" fill="rgb(227,190,36)"/><text x="401.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="398" y="1268" width="2" height="15" fill="rgb(217,197,24)"/><text x="401.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="398" y="1284" width="2" height="15" fill="rgb(206,78,30)"/><text x="401.00" y="1294.50"></text></g><g><title>&lt;module&gt; (urllib3/util/timeout.py:19) (1 samples, 0.15%)</title><rect x="398" y="1300" width="2" height="15" fill="rgb(253,131,17)"/><text x="401.00" y="1310.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (2 samples, 0.30%)</title><rect x="398" y="244" width="4" height="15" fill="rgb(251,5,32)"/><text x="401.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="398" y="260" width="4" height="15" fill="rgb(224,229,29)"/><text x="401.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="398" y="276" width="4" height="15" fill="rgb(214,228,3)"/><text x="401.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="398" y="292" width="4" height="15" fill="rgb(219,0,44)"/><text x="401.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="398" y="308" width="4" height="15" fill="rgb(210,48,1)"/><text x="401.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="398" y="324" width="4" height="15" fill="rgb(221,151,20)"/><text x="401.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (2 samples, 0.30%)</title><rect x="398" y="340" width="4" height="15" fill="rgb(223,48,38)"/><text x="401.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="398" y="356" width="4" height="15" fill="rgb(216,188,47)"/><text x="401.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.30%)</title><rect x="398" y="372" width="4" height="15" fill="rgb(206,134,34)"/><text x="401.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="398" y="388" width="4" height="15" fill="rgb(231,216,52)"/><text x="401.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="398" y="404" width="4" height="15" fill="rgb(227,123,20)"/><text x="401.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="398" y="420" width="4" height="15" fill="rgb(227,109,3)"/><text x="401.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="398" y="436" width="4" height="15" fill="rgb(214,43,27)"/><text x="401.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="398" y="452" width="4" height="15" fill="rgb(215,225,6)"/><text x="401.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="398" y="468" width="4" height="15" fill="rgb(216,173,46)"/><text x="401.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:12) (2 samples, 0.30%)</title><rect x="398" y="484" width="4" height="15" fill="rgb(215,112,28)"/><text x="401.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="398" y="500" width="4" height="15" fill="rgb(229,143,21)"/><text x="401.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="398" y="516" width="4" height="15" fill="rgb(216,101,39)"/><text x="401.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="398" y="532" width="4" height="15" fill="rgb(223,19,3)"/><text x="401.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="398" y="548" width="4" height="15" fill="rgb(246,97,47)"/><text x="401.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="398" y="564" width="4" height="15" fill="rgb(220,191,33)"/><text x="401.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py:23) (2 samples, 0.30%)</title><rect x="398" y="580" width="4" height="15" fill="rgb(242,32,3)"/><text x="401.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="398" y="596" width="4" height="15" fill="rgb(246,216,51)"/><text x="401.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="398" y="612" width="4" height="15" fill="rgb(232,33,17)"/><text x="401.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="398" y="628" width="4" height="15" fill="rgb(210,21,20)"/><text x="401.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="398" y="644" width="4" height="15" fill="rgb(240,212,36)"/><text x="401.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="398" y="660" width="4" height="15" fill="rgb(250,179,0)"/><text x="401.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py:10) (2 samples, 0.30%)</title><rect x="398" y="676" width="4" height="15" fill="rgb(226,41,19)"/><text x="401.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="398" y="692" width="4" height="15" fill="rgb(223,37,39)"/><text x="401.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="398" y="708" width="4" height="15" fill="rgb(241,43,8)"/><text x="401.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="398" y="724" width="4" height="15" fill="rgb(246,4,19)"/><text x="401.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="398" y="740" width="4" height="15" fill="rgb(235,44,22)"/><text x="401.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="398" y="756" width="4" height="15" fill="rgb(237,123,25)"/><text x="401.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py:44) (1 samples, 0.15%)</title><rect x="400" y="772" width="2" height="15" fill="rgb(235,35,27)"/><text x="403.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="400" y="788" width="2" height="15" fill="rgb(242,210,34)"/><text x="403.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="400" y="804" width="2" height="15" fill="rgb(250,115,52)"/><text x="403.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="400" y="820" width="2" height="15" fill="rgb(251,27,33)"/><text x="403.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="400" y="836" width="2" height="15" fill="rgb(232,215,19)"/><text x="403.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="400" y="852" width="2" height="15" fill="rgb(238,108,41)"/><text x="403.00" y="862.50"></text></g><g><title>&lt;module&gt; (chardet/__init__.py:20) (1 samples, 0.15%)</title><rect x="400" y="868" width="2" height="15" fill="rgb(224,34,36)"/><text x="403.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="400" y="884" width="2" height="15" fill="rgb(245,12,18)"/><text x="403.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="400" y="900" width="2" height="15" fill="rgb(211,159,3)"/><text x="403.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="400" y="916" width="2" height="15" fill="rgb(225,110,48)"/><text x="403.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="400" y="932" width="2" height="15" fill="rgb(213,171,29)"/><text x="403.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="400" y="948" width="2" height="15" fill="rgb(230,71,53)"/><text x="403.00" y="958.50"></text></g><g><title>&lt;module&gt; (chardet/universaldetector.py:48) (1 samples, 0.15%)</title><rect x="400" y="964" width="2" height="15" fill="rgb(243,185,8)"/><text x="403.00" y="974.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="400" y="980" width="2" height="15" fill="rgb(210,194,50)"/><text x="403.00" y="990.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="400" y="996" width="2" height="15" fill="rgb(212,52,25)"/><text x="403.00" y="1006.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="400" y="1012" width="2" height="15" fill="rgb(209,203,6)"/><text x="403.00" y="1022.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="400" y="1028" width="2" height="15" fill="rgb(229,18,3)"/><text x="403.00" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="400" y="1044" width="2" height="15" fill="rgb(247,197,52)"/><text x="403.00" y="1054.50"></text></g><g><title>&lt;module&gt; (chardet/sbcsgroupprober.py:38) (1 samples, 0.15%)</title><rect x="400" y="1060" width="2" height="15" fill="rgb(231,171,2)"/><text x="403.00" y="1070.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="400" y="1076" width="2" height="15" fill="rgb(236,26,51)"/><text x="403.00" y="1086.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="400" y="1092" width="2" height="15" fill="rgb(243,191,16)"/><text x="403.00" y="1102.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="400" y="1108" width="2" height="15" fill="rgb(218,120,38)"/><text x="403.00" y="1118.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 0.15%)</title><rect x="400" y="1124" width="2" height="15" fill="rgb(235,101,38)"/><text x="403.00" y="1134.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:857) (1 samples, 0.15%)</title><rect x="400" y="1140" width="2" height="15" fill="rgb(237,103,35)"/><text x="403.00" y="1150.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:525) (1 samples, 0.15%)</title><rect x="400" y="1156" width="2" height="15" fill="rgb(235,4,48)"/><text x="403.00" y="1166.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="400" y="1172" width="2" height="15" fill="rgb(241,224,23)"/><text x="403.00" y="1182.50"></text></g><g><title>0x7f4bc322c8cb (libc-2.29.so) (1 samples, 0.15%)</title><rect x="400" y="1188" width="2" height="15" fill="rgb(254,188,53)"/><text x="403.00" y="1198.50"></text></g><g><title>0x7f4bc322b43f (libc-2.29.so) (1 samples, 0.15%)</title><rect x="400" y="1204" width="2" height="15" fill="rgb(216,145,36)"/><text x="403.00" y="1214.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:10) (1 samples, 0.15%)</title><rect x="402" y="1108" width="1" height="15" fill="rgb(209,207,5)"/><text x="405.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="402" y="1124" width="1" height="15" fill="rgb(230,94,52)"/><text x="405.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.15%)</title><rect x="402" y="1140" width="1" height="15" fill="rgb(221,102,28)"/><text x="405.00" y="1150.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="402" y="1156" width="1" height="15" fill="rgb(207,16,49)"/><text x="405.00" y="1166.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="402" y="1172" width="1" height="15" fill="rgb(240,67,54)"/><text x="405.00" y="1182.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="402" y="1188" width="1" height="15" fill="rgb(248,194,42)"/><text x="405.00" y="1198.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:670) (1 samples, 0.15%)</title><rect x="402" y="1204" width="1" height="15" fill="rgb(245,136,38)"/><text x="405.00" y="1214.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:589) (1 samples, 0.15%)</title><rect x="402" y="1220" width="1" height="15" fill="rgb(215,129,47)"/><text x="405.00" y="1230.50"></text></g><g><title>_init_module_attrs (&lt;frozen importlib._bootstrap&gt;:568) (1 samples, 0.15%)</title><rect x="402" y="1236" width="1" height="15" fill="rgb(206,30,40)"/><text x="405.00" y="1246.50"></text></g><g><title>cached (&lt;frozen importlib._bootstrap&gt;:409) (1 samples, 0.15%)</title><rect x="402" y="1252" width="1" height="15" fill="rgb(236,35,50)"/><text x="405.00" y="1262.50"></text></g><g><title>_get_cached (&lt;frozen importlib._bootstrap_external&gt;:370) (1 samples, 0.15%)</title><rect x="402" y="1268" width="1" height="15" fill="rgb(217,207,48)"/><text x="405.00" y="1278.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:4) (14 samples, 2.13%)</title><rect x="380" y="52" width="25" height="15" fill="rgb(239,124,44)"/><text x="383.00" y="62.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (14 samples, 2.13%)</title><rect x="380" y="68" width="25" height="15" fill="rgb(210,181,14)"/><text x="383.00" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (14 samples, 2.13%)</title><rect x="380" y="84" width="25" height="15" fill="rgb(217,146,42)"/><text x="383.00" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (14 samples, 2.13%)</title><rect x="380" y="100" width="25" height="15" fill="rgb(207,128,40)"/><text x="383.00" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (14 samples, 2.13%)</title><rect x="380" y="116" width="25" height="15" fill="rgb(251,229,1)"/><text x="383.00" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (14 samples, 2.13%)</title><rect x="380" y="132" width="25" height="15" fill="rgb(226,50,36)"/><text x="383.00" y="142.50">_..</text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:7) (4 samples, 0.61%)</title><rect x="398" y="148" width="7" height="15" fill="rgb(237,50,8)"/><text x="401.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.61%)</title><rect x="398" y="164" width="7" height="15" fill="rgb(231,184,21)"/><text x="401.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.61%)</title><rect x="398" y="180" width="7" height="15" fill="rgb(243,102,10)"/><text x="401.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.61%)</title><rect x="398" y="196" width="7" height="15" fill="rgb(212,86,24)"/><text x="401.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.61%)</title><rect x="398" y="212" width="7" height="15" fill="rgb(216,182,40)"/><text x="401.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.61%)</title><rect x="398" y="228" width="7" height="15" fill="rgb(207,170,6)"/><text x="401.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (2 samples, 0.30%)</title><rect x="402" y="244" width="3" height="15" fill="rgb(225,5,8)"/><text x="405.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="402" y="260" width="3" height="15" fill="rgb(231,70,22)"/><text x="405.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="402" y="276" width="3" height="15" fill="rgb(214,173,23)"/><text x="405.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="402" y="292" width="3" height="15" fill="rgb(222,43,6)"/><text x="405.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="402" y="308" width="3" height="15" fill="rgb(254,5,11)"/><text x="405.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="402" y="324" width="3" height="15" fill="rgb(253,223,25)"/><text x="405.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (2 samples, 0.30%)</title><rect x="402" y="340" width="3" height="15" fill="rgb(233,113,54)"/><text x="405.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="402" y="356" width="3" height="15" fill="rgb(228,34,21)"/><text x="405.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="402" y="372" width="3" height="15" fill="rgb(217,121,53)"/><text x="405.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="402" y="388" width="3" height="15" fill="rgb(237,81,38)"/><text x="405.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="402" y="404" width="3" height="15" fill="rgb(206,74,34)"/><text x="405.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="402" y="420" width="3" height="15" fill="rgb(207,122,23)"/><text x="405.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (2 samples, 0.30%)</title><rect x="402" y="436" width="3" height="15" fill="rgb(249,84,27)"/><text x="405.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="402" y="452" width="3" height="15" fill="rgb(242,137,11)"/><text x="405.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.30%)</title><rect x="402" y="468" width="3" height="15" fill="rgb(247,225,41)"/><text x="405.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="402" y="484" width="3" height="15" fill="rgb(250,209,15)"/><text x="405.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="402" y="500" width="3" height="15" fill="rgb(225,229,24)"/><text x="405.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="402" y="516" width="3" height="15" fill="rgb(228,79,44)"/><text x="405.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="402" y="532" width="3" height="15" fill="rgb(214,199,21)"/><text x="405.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="402" y="548" width="3" height="15" fill="rgb(242,98,26)"/><text x="405.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="402" y="564" width="3" height="15" fill="rgb(227,116,0)"/><text x="405.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (2 samples, 0.30%)</title><rect x="402" y="580" width="3" height="15" fill="rgb(210,149,3)"/><text x="405.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="402" y="596" width="3" height="15" fill="rgb(217,24,29)"/><text x="405.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="402" y="612" width="3" height="15" fill="rgb(208,170,24)"/><text x="405.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="402" y="628" width="3" height="15" fill="rgb(210,60,29)"/><text x="405.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="402" y="644" width="3" height="15" fill="rgb(205,222,1)"/><text x="405.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="402" y="660" width="3" height="15" fill="rgb(227,205,34)"/><text x="405.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (2 samples, 0.30%)</title><rect x="402" y="676" width="3" height="15" fill="rgb(251,171,41)"/><text x="405.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="402" y="692" width="3" height="15" fill="rgb(241,215,52)"/><text x="405.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="402" y="708" width="3" height="15" fill="rgb(230,46,21)"/><text x="405.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="402" y="724" width="3" height="15" fill="rgb(215,6,52)"/><text x="405.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="402" y="740" width="3" height="15" fill="rgb(240,55,0)"/><text x="405.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="402" y="756" width="3" height="15" fill="rgb(210,223,12)"/><text x="405.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (2 samples, 0.30%)</title><rect x="402" y="772" width="3" height="15" fill="rgb(229,76,49)"/><text x="405.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="402" y="788" width="3" height="15" fill="rgb(229,10,43)"/><text x="405.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="402" y="804" width="3" height="15" fill="rgb(229,148,48)"/><text x="405.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="402" y="820" width="3" height="15" fill="rgb(222,31,8)"/><text x="405.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="402" y="836" width="3" height="15" fill="rgb(218,7,27)"/><text x="405.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="402" y="852" width="3" height="15" fill="rgb(214,53,47)"/><text x="405.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (2 samples, 0.30%)</title><rect x="402" y="868" width="3" height="15" fill="rgb(244,193,11)"/><text x="405.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="402" y="884" width="3" height="15" fill="rgb(254,226,37)"/><text x="405.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.30%)</title><rect x="402" y="900" width="3" height="15" fill="rgb(227,59,20)"/><text x="405.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="402" y="916" width="3" height="15" fill="rgb(229,95,5)"/><text x="405.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="402" y="932" width="3" height="15" fill="rgb(244,192,8)"/><text x="405.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="402" y="948" width="3" height="15" fill="rgb(216,228,41)"/><text x="405.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="402" y="964" width="3" height="15" fill="rgb(252,182,1)"/><text x="405.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="402" y="980" width="3" height="15" fill="rgb(210,104,45)"/><text x="405.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="402" y="996" width="3" height="15" fill="rgb(221,156,23)"/><text x="405.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (2 samples, 0.30%)</title><rect x="402" y="1012" width="3" height="15" fill="rgb(224,78,31)"/><text x="405.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.30%)</title><rect x="402" y="1028" width="3" height="15" fill="rgb(214,111,18)"/><text x="405.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.30%)</title><rect x="402" y="1044" width="3" height="15" fill="rgb(231,24,37)"/><text x="405.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.30%)</title><rect x="402" y="1060" width="3" height="15" fill="rgb(232,95,20)"/><text x="405.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.30%)</title><rect x="402" y="1076" width="3" height="15" fill="rgb(224,110,15)"/><text x="405.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.30%)</title><rect x="402" y="1092" width="3" height="15" fill="rgb(237,153,37)"/><text x="405.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (1 samples, 0.15%)</title><rect x="403" y="1108" width="2" height="15" fill="rgb(254,145,23)"/><text x="406.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.15%)</title><rect x="403" y="1124" width="2" height="15" fill="rgb(218,218,32)"/><text x="406.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="403" y="1140" width="2" height="15" fill="rgb(247,26,15)"/><text x="406.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="403" y="1156" width="2" height="15" fill="rgb(238,167,50)"/><text x="406.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="403" y="1172" width="2" height="15" fill="rgb(214,210,7)"/><text x="406.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="403" y="1188" width="2" height="15" fill="rgb(233,37,33)"/><text x="406.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="403" y="1204" width="2" height="15" fill="rgb(209,189,17)"/><text x="406.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="403" y="1220" width="2" height="15" fill="rgb(228,68,18)"/><text x="406.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (1 samples, 0.15%)</title><rect x="403" y="1236" width="2" height="15" fill="rgb(248,205,22)"/><text x="406.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.15%)</title><rect x="403" y="1252" width="2" height="15" fill="rgb(233,140,27)"/><text x="406.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="403" y="1268" width="2" height="15" fill="rgb(243,154,23)"/><text x="406.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="403" y="1284" width="2" height="15" fill="rgb(236,24,6)"/><text x="406.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="403" y="1300" width="2" height="15" fill="rgb(214,209,31)"/><text x="406.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="403" y="1316" width="2" height="15" fill="rgb(248,40,35)"/><text x="406.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="403" y="1332" width="2" height="15" fill="rgb(232,6,6)"/><text x="406.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="403" y="1348" width="2" height="15" fill="rgb(243,159,15)"/><text x="406.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (1 samples, 0.15%)</title><rect x="403" y="1364" width="2" height="15" fill="rgb(254,140,31)"/><text x="406.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="403" y="1380" width="2" height="15" fill="rgb(222,123,47)"/><text x="406.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="403" y="1396" width="2" height="15" fill="rgb(235,23,37)"/><text x="406.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="403" y="1412" width="2" height="15" fill="rgb(241,57,35)"/><text x="406.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="403" y="1428" width="2" height="15" fill="rgb(250,216,9)"/><text x="406.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="403" y="1444" width="2" height="15" fill="rgb(229,83,16)"/><text x="406.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py:159) (1 samples, 0.15%)</title><rect x="403" y="1460" width="2" height="15" fill="rgb(253,182,42)"/><text x="406.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py:153) (1 samples, 0.15%)</title><rect x="403" y="1476" width="2" height="15" fill="rgb(226,89,48)"/><text x="406.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py:119) (1 samples, 0.15%)</title><rect x="403" y="1492" width="2" height="15" fill="rgb(221,40,41)"/><text x="406.00" y="1502.50"></text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:28) (1 samples, 0.15%)</title><rect x="405" y="84" width="2" height="15" fill="rgb(229,24,33)"/><text x="408.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (1 samples, 0.15%)</title><rect x="405" y="100" width="2" height="15" fill="rgb(219,82,6)"/><text x="408.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:230) (1 samples, 0.15%)</title><rect x="405" y="116" width="2" height="15" fill="rgb(211,193,44)"/><text x="408.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py:114) (1 samples, 0.15%)</title><rect x="405" y="132" width="2" height="15" fill="rgb(225,107,37)"/><text x="408.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py:62) (1 samples, 0.15%)</title><rect x="405" y="148" width="2" height="15" fill="rgb(251,19,50)"/><text x="408.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py:115) (1 samples, 0.15%)</title><rect x="405" y="164" width="2" height="15" fill="rgb(225,183,52)"/><text x="408.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py:101) (1 samples, 0.15%)</title><rect x="405" y="180" width="2" height="15" fill="rgb(241,169,28)"/><text x="408.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py:28) (1 samples, 0.15%)</title><rect x="405" y="196" width="2" height="15" fill="rgb(211,154,24)"/><text x="408.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="405" y="212" width="2" height="15" fill="rgb(245,118,29)"/><text x="408.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="405" y="228" width="2" height="15" fill="rgb(205,64,24)"/><text x="408.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="405" y="244" width="2" height="15" fill="rgb(206,3,40)"/><text x="408.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="405" y="260" width="2" height="15" fill="rgb(229,11,4)"/><text x="408.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="405" y="276" width="2" height="15" fill="rgb(222,38,22)"/><text x="408.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py:7) (1 samples, 0.15%)</title><rect x="405" y="292" width="2" height="15" fill="rgb(208,166,52)"/><text x="408.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="405" y="308" width="2" height="15" fill="rgb(222,189,30)"/><text x="408.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="405" y="324" width="2" height="15" fill="rgb(212,10,6)"/><text x="408.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="405" y="340" width="2" height="15" fill="rgb(253,165,18)"/><text x="408.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="405" y="356" width="2" height="15" fill="rgb(216,67,20)"/><text x="408.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="405" y="372" width="2" height="15" fill="rgb(217,210,40)"/><text x="408.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py:8) (1 samples, 0.15%)</title><rect x="405" y="388" width="2" height="15" fill="rgb(224,149,31)"/><text x="408.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="405" y="404" width="2" height="15" fill="rgb(239,22,15)"/><text x="408.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="405" y="420" width="2" height="15" fill="rgb(226,113,41)"/><text x="408.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="405" y="436" width="2" height="15" fill="rgb(225,172,15)"/><text x="408.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="405" y="452" width="2" height="15" fill="rgb(240,47,13)"/><text x="408.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="405" y="468" width="2" height="15" fill="rgb(213,143,38)"/><text x="408.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op.py:25) (1 samples, 0.15%)</title><rect x="405" y="484" width="2" height="15" fill="rgb(242,98,44)"/><text x="408.00" y="494.50"></text></g><g><title>_build_schemas (mlprodict/onnxrt/ops_cpu/_op.py:13) (1 samples, 0.15%)</title><rect x="405" y="500" width="2" height="15" fill="rgb(231,146,36)"/><text x="408.00" y="510.50"></text></g><g><title>0x7f4bb32e60e9 (?) (1 samples, 0.15%)</title><rect x="405" y="516" width="2" height="15" fill="rgb(217,26,16)"/><text x="408.00" y="526.50"></text></g><g><title>0x7f4bb32ccc76 (?) (1 samples, 0.15%)</title><rect x="405" y="532" width="2" height="15" fill="rgb(236,28,42)"/><text x="408.00" y="542.50"></text></g><g><title>0x7f4bb32f3de1 (?) (1 samples, 0.15%)</title><rect x="405" y="548" width="2" height="15" fill="rgb(222,179,53)"/><text x="408.00" y="558.50"></text></g><g><title>0x7f4bb32cc62a (?) (1 samples, 0.15%)</title><rect x="405" y="564" width="2" height="15" fill="rgb(213,165,31)"/><text x="408.00" y="574.50"></text></g><g><title>0x7f4bb32eefdc (?) (1 samples, 0.15%)</title><rect x="405" y="580" width="2" height="15" fill="rgb(253,197,3)"/><text x="408.00" y="590.50"></text></g><g><title>0x7f4bb32df566 (?) (1 samples, 0.15%)</title><rect x="405" y="596" width="2" height="15" fill="rgb(238,83,25)"/><text x="408.00" y="606.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (1 samples, 0.15%)</title><rect x="409" y="180" width="2" height="15" fill="rgb(254,20,17)"/><text x="412.00" y="190.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (1 samples, 0.15%)</title><rect x="412" y="276" width="2" height="15" fill="rgb(245,207,52)"/><text x="415.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (1 samples, 0.15%)</title><rect x="412" y="292" width="2" height="15" fill="rgb(207,171,19)"/><text x="415.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (1 samples, 0.15%)</title><rect x="412" y="308" width="2" height="15" fill="rgb(253,118,0)"/><text x="415.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:528) (1 samples, 0.15%)</title><rect x="412" y="324" width="2" height="15" fill="rgb(222,0,41)"/><text x="415.00" y="334.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (2 samples, 0.30%)</title><rect x="412" y="196" width="4" height="15" fill="rgb(216,68,42)"/><text x="415.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (2 samples, 0.30%)</title><rect x="412" y="212" width="4" height="15" fill="rgb(223,82,45)"/><text x="415.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1539) (2 samples, 0.30%)</title><rect x="412" y="228" width="4" height="15" fill="rgb(238,30,12)"/><text x="415.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:516) (2 samples, 0.30%)</title><rect x="412" y="244" width="4" height="15" fill="rgb(229,204,50)"/><text x="415.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (2 samples, 0.30%)</title><rect x="412" y="260" width="4" height="15" fill="rgb(248,97,29)"/><text x="415.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (1 samples, 0.15%)</title><rect x="414" y="276" width="2" height="15" fill="rgb(210,9,39)"/><text x="417.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c:884) (1 samples, 0.15%)</title><rect x="414" y="292" width="2" height="15" fill="rgb(222,204,7)"/><text x="417.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c:693) (1 samples, 0.15%)</title><rect x="414" y="308" width="2" height="15" fill="rgb(206,8,38)"/><text x="417.00" y="318.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (4 samples, 0.61%)</title><rect x="416" y="196" width="7" height="15" fill="rgb(217,129,50)"/><text x="419.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (4 samples, 0.61%)</title><rect x="416" y="212" width="7" height="15" fill="rgb(228,171,4)"/><text x="419.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py:19) (4 samples, 0.61%)</title><rect x="416" y="228" width="7" height="15" fill="rgb(224,160,19)"/><text x="419.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 0.61%)</title><rect x="416" y="244" width="7" height="15" fill="rgb(242,89,1)"/><text x="419.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 0.61%)</title><rect x="416" y="260" width="7" height="15" fill="rgb(206,163,27)"/><text x="419.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (4 samples, 0.61%)</title><rect x="416" y="276" width="7" height="15" fill="rgb(238,51,43)"/><text x="419.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (4 samples, 0.61%)</title><rect x="416" y="292" width="7" height="15" fill="rgb(205,144,7)"/><text x="419.00" y="302.50"></text></g><g><title>FLOAT_maximum (loops.c.src:1871) (4 samples, 0.61%)</title><rect x="416" y="308" width="7" height="15" fill="rgb(242,23,6)"/><text x="419.00" y="318.50"></text></g><g><title>cblas_matrixproduct (cblasfuncs.c:367) (1 samples, 0.15%)</title><rect x="423" y="324" width="2" height="15" fill="rgb(211,87,30)"/><text x="426.00" y="334.50"></text></g><g><title>0x7f4bc324b103 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="423" y="340" width="2" height="15" fill="rgb(241,18,52)"/><text x="426.00" y="350.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="425" y="420" width="2" height="15" fill="rgb(221,13,54)"/><text x="428.00" y="430.50"></text></g><g><title>sched_yield (libc-2.29.so) (1 samples, 0.15%)</title><rect x="425" y="436" width="2" height="15" fill="rgb(253,128,53)"/><text x="428.00" y="446.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.76%)</title><rect x="423" y="276" width="9" height="15" fill="rgb(208,159,54)"/><text x="426.00" y="286.50"></text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (5 samples, 0.76%)</title><rect x="423" y="292" width="9" height="15" fill="rgb(228,52,23)"/><text x="426.00" y="302.50"></text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (5 samples, 0.76%)</title><rect x="423" y="308" width="9" height="15" fill="rgb(214,170,29)"/><text x="426.00" y="318.50"></text></g><g><title>cblas_matrixproduct (cblasfuncs.c:674) (4 samples, 0.61%)</title><rect x="425" y="324" width="7" height="15" fill="rgb(210,8,46)"/><text x="428.00" y="334.50"></text></g><g><title>gemm (cblasfuncs.c:40) (4 samples, 0.61%)</title><rect x="425" y="340" width="7" height="15" fill="rgb(222,92,14)"/><text x="428.00" y="350.50"></text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.61%)</title><rect x="425" y="356" width="7" height="15" fill="rgb(228,199,52)"/><text x="428.00" y="366.50"></text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.61%)</title><rect x="425" y="372" width="7" height="15" fill="rgb(231,16,44)"/><text x="428.00" y="382.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.61%)</title><rect x="425" y="388" width="7" height="15" fill="rgb(241,199,18)"/><text x="428.00" y="398.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.61%)</title><rect x="425" y="404" width="7" height="15" fill="rgb(215,169,16)"/><text x="428.00" y="414.50"></text></g><g><title>inner_thread (libopenblasp-r0-34a18dc3.3.7.so) (3 samples, 0.46%)</title><rect x="427" y="420" width="5" height="15" fill="rgb(234,46,15)"/><text x="430.00" y="430.50"></text></g><g><title>sgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.30%)</title><rect x="429" y="436" width="3" height="15" fill="rgb(238,74,37)"/><text x="432.00" y="446.50"></text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:18) (15 samples, 2.29%)</title><rect x="407" y="100" width="27" height="15" fill="rgb(241,141,26)"/><text x="410.00" y="110.50">p..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (15 samples, 2.29%)</title><rect x="407" y="116" width="27" height="15" fill="rgb(238,225,41)"/><text x="410.00" y="126.50">t..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (15 samples, 2.29%)</title><rect x="407" y="132" width="27" height="15" fill="rgb(211,57,4)"/><text x="410.00" y="142.50">&lt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (15 samples, 2.29%)</title><rect x="407" y="148" width="27" height="15" fill="rgb(207,118,12)"/><text x="410.00" y="158.50">r..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (15 samples, 2.29%)</title><rect x="407" y="164" width="27" height="15" fill="rgb(206,175,33)"/><text x="410.00" y="174.50">_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (13 samples, 1.98%)</title><rect x="411" y="180" width="23" height="15" fill="rgb(254,3,8)"/><text x="414.00" y="190.50">r..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (6 samples, 0.91%)</title><rect x="423" y="196" width="11" height="15" fill="rgb(215,78,39)"/><text x="426.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (6 samples, 0.91%)</title><rect x="423" y="212" width="11" height="15" fill="rgb(244,71,39)"/><text x="426.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (6 samples, 0.91%)</title><rect x="423" y="228" width="11" height="15" fill="rgb(242,192,17)"/><text x="426.00" y="238.50"></text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:40) (6 samples, 0.91%)</title><rect x="423" y="244" width="11" height="15" fill="rgb(218,17,24)"/><text x="426.00" y="254.50"></text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (6 samples, 0.91%)</title><rect x="423" y="260" width="11" height="15" fill="rgb(241,62,44)"/><text x="426.00" y="270.50"></text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="432" y="276" width="2" height="15" fill="rgb(234,164,33)"/><text x="435.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (2 samples, 0.30%)</title><rect x="436" y="180" width="3" height="15" fill="rgb(253,20,45)"/><text x="439.00" y="190.50"></text></g><g><title>LONG_getitem (arraytypes.c.src:204) (1 samples, 0.15%)</title><rect x="443" y="260" width="2" height="15" fill="rgb(248,23,48)"/><text x="446.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:39) (2 samples, 0.30%)</title><rect x="443" y="212" width="4" height="15" fill="rgb(211,47,51)"/><text x="446.00" y="222.50"></text></g><g><title>PyArray_ToList (convert.c:120) (2 samples, 0.30%)</title><rect x="443" y="228" width="4" height="15" fill="rgb(246,70,29)"/><text x="446.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c:102) (2 samples, 0.30%)</title><rect x="443" y="244" width="4" height="15" fill="rgb(237,46,42)"/><text x="446.00" y="254.50"></text></g><g><title>recursive_tolist (convert.c:112) (1 samples, 0.15%)</title><rect x="445" y="260" width="2" height="15" fill="rgb(249,45,52)"/><text x="448.00" y="270.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:138) (1 samples, 0.15%)</title><rect x="447" y="324" width="1" height="15" fill="rgb(223,140,48)"/><text x="450.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c:44) (2 samples, 0.30%)</title><rect x="448" y="340" width="4" height="15" fill="rgb(225,47,37)"/><text x="451.00" y="350.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (6 samples, 0.91%)</title><rect x="447" y="276" width="10" height="15" fill="rgb(227,104,16)"/><text x="450.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (6 samples, 0.91%)</title><rect x="447" y="292" width="10" height="15" fill="rgb(214,83,24)"/><text x="450.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (6 samples, 0.91%)</title><rect x="447" y="308" width="10" height="15" fill="rgb(231,31,46)"/><text x="450.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (5 samples, 0.76%)</title><rect x="448" y="324" width="9" height="15" fill="rgb(248,60,40)"/><text x="451.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c:47) (3 samples, 0.46%)</title><rect x="452" y="340" width="5" height="15" fill="rgb(230,148,0)"/><text x="455.00" y="350.50"></text></g><g><title>0x7f4bc244c950 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="456" y="356" width="1" height="15" fill="rgb(240,131,17)"/><text x="459.00" y="366.50"></text></g><g><title>discover_dimensions (ctors.c:693) (4 samples, 0.61%)</title><rect x="457" y="308" width="8" height="15" fill="rgb(210,178,52)"/><text x="460.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (11 samples, 1.68%)</title><rect x="447" y="260" width="19" height="15" fill="rgb(233,60,40)"/><text x="450.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (5 samples, 0.76%)</title><rect x="457" y="276" width="9" height="15" fill="rgb(242,52,16)"/><text x="460.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c:884) (5 samples, 0.76%)</title><rect x="457" y="292" width="9" height="15" fill="rgb(218,38,3)"/><text x="460.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c:699) (1 samples, 0.15%)</title><rect x="465" y="308" width="1" height="15" fill="rgb(223,158,27)"/><text x="468.00" y="318.50"></text></g><g><title>setArrayFromSequence (ctors.c:536) (1 samples, 0.15%)</title><rect x="466" y="292" width="2" height="15" fill="rgb(223,4,4)"/><text x="469.00" y="302.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:212) (3 samples, 0.46%)</title><rect x="468" y="324" width="6" height="15" fill="rgb(235,186,7)"/><text x="471.00" y="334.50"></text></g><g><title>0x7f4bc244d0a0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="472" y="340" width="2" height="15" fill="rgb(239,33,3)"/><text x="475.00" y="350.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:216) (1 samples, 0.15%)</title><rect x="474" y="324" width="1" height="15" fill="rgb(219,213,20)"/><text x="477.00" y="334.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src:123) (1 samples, 0.15%)</title><rect x="474" y="340" width="1" height="15" fill="rgb(253,118,7)"/><text x="477.00" y="350.50"></text></g><g><title>array_subscript (mapping.c:1539) (18 samples, 2.74%)</title><rect x="447" y="228" width="32" height="15" fill="rgb(239,210,37)"/><text x="450.00" y="238.50">ar..</text></g><g><title>prepare_index (mapping.c:516) (18 samples, 2.74%)</title><rect x="447" y="244" width="32" height="15" fill="rgb(217,97,27)"/><text x="450.00" y="254.50">pr..</text></g><g><title>PyArray_FromAny (ctors.c:1938) (7 samples, 1.07%)</title><rect x="466" y="260" width="13" height="15" fill="rgb(219,165,2)"/><text x="469.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (7 samples, 1.07%)</title><rect x="466" y="276" width="13" height="15" fill="rgb(209,118,29)"/><text x="469.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c:550) (6 samples, 0.91%)</title><rect x="468" y="292" width="11" height="15" fill="rgb(246,224,39)"/><text x="471.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (6 samples, 0.91%)</title><rect x="468" y="308" width="11" height="15" fill="rgb(211,211,50)"/><text x="471.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:233) (2 samples, 0.30%)</title><rect x="475" y="324" width="4" height="15" fill="rgb(221,109,9)"/><text x="478.00" y="334.50"></text></g><g><title>PyArray_DESCR (ndarraytypes.h:1528) (1 samples, 0.15%)</title><rect x="477" y="340" width="2" height="15" fill="rgb(244,111,41)"/><text x="480.00" y="350.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1572) (2 samples, 0.30%)</title><rect x="479" y="244" width="4" height="15" fill="rgb(225,89,37)"/><text x="482.00" y="254.50"></text></g><g><title>check_and_adjust_index (common.h:110) (2 samples, 0.30%)</title><rect x="479" y="260" width="4" height="15" fill="rgb(238,142,38)"/><text x="482.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (22 samples, 3.35%)</title><rect x="447" y="212" width="39" height="15" fill="rgb(222,72,20)"/><text x="450.00" y="222.50">_ru..</text></g><g><title>array_subscript (mapping.c:1676) (4 samples, 0.61%)</title><rect x="479" y="228" width="7" height="15" fill="rgb(214,113,41)"/><text x="482.00" y="238.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1609) (2 samples, 0.30%)</title><rect x="483" y="244" width="3" height="15" fill="rgb(205,23,23)"/><text x="486.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:37) (4 samples, 0.61%)</title><rect x="486" y="212" width="7" height="15" fill="rgb(249,9,26)"/><text x="489.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (4 samples, 0.61%)</title><rect x="486" y="228" width="7" height="15" fill="rgb(211,197,31)"/><text x="489.00" y="238.50"></text></g><g><title>array_astype (methods.c:845) (3 samples, 0.46%)</title><rect x="488" y="244" width="5" height="15" fill="rgb(210,201,11)"/><text x="491.00" y="254.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (3 samples, 0.46%)</title><rect x="488" y="260" width="5" height="15" fill="rgb(234,67,16)"/><text x="491.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (3 samples, 0.46%)</title><rect x="488" y="276" width="5" height="15" fill="rgb(221,11,23)"/><text x="491.00" y="286.50"></text></g><g><title>0x7f4bc324ad94 (libc-2.29.so) (3 samples, 0.46%)</title><rect x="488" y="292" width="5" height="15" fill="rgb(213,149,37)"/><text x="491.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reshape.py:17) (1 samples, 0.15%)</title><rect x="493" y="212" width="2" height="15" fill="rgb(214,52,24)"/><text x="496.00" y="222.50"></text></g><g><title>array_reshape (methods.c:210) (1 samples, 0.15%)</title><rect x="493" y="228" width="2" height="15" fill="rgb(226,78,51)"/><text x="496.00" y="238.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (1 samples, 0.15%)</title><rect x="493" y="244" width="2" height="15" fill="rgb(229,40,9)"/><text x="496.00" y="254.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (1 samples, 0.15%)</title><rect x="493" y="260" width="2" height="15" fill="rgb(221,115,38)"/><text x="496.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1052) (1 samples, 0.15%)</title><rect x="493" y="276" width="2" height="15" fill="rgb(224,140,28)"/><text x="496.00" y="286.50"></text></g><g><title>_array_fill_strides (ctors.c:4130) (1 samples, 0.15%)</title><rect x="493" y="292" width="2" height="15" fill="rgb(238,70,25)"/><text x="496.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (30 samples, 4.57%)</title><rect x="443" y="196" width="54" height="15" fill="rgb(208,122,30)"/><text x="446.00" y="206.50">run (..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_zipmap.py:166) (1 samples, 0.15%)</title><rect x="495" y="212" width="2" height="15" fill="rgb(234,170,43)"/><text x="498.00" y="222.50"></text></g><g><title>__init__ (mlprodict/onnxrt/ops_cpu/op_zipmap.py:107) (1 samples, 0.15%)</title><rect x="495" y="228" width="2" height="15" fill="rgb(239,66,37)"/><text x="498.00" y="238.50"></text></g><g><title>0x7f4bc324b16d (libc-2.29.so) (1 samples, 0.15%)</title><rect x="495" y="244" width="2" height="15" fill="rgb(221,146,42)"/><text x="498.00" y="254.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;:4) (1 samples, 0.15%)</title><rect x="499" y="276" width="2" height="15" fill="rgb(237,143,12)"/><text x="502.00" y="286.50"></text></g><g><title>array_argmax (methods.c:297) (1 samples, 0.15%)</title><rect x="501" y="340" width="1" height="15" fill="rgb(252,34,31)"/><text x="504.00" y="350.50"></text></g><g><title>FLOAT_argmax (arraytypes.c.src:3109) (1 samples, 0.15%)</title><rect x="502" y="372" width="2" height="15" fill="rgb(234,163,25)"/><text x="505.00" y="382.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:13) (4 samples, 0.61%)</title><rect x="499" y="260" width="7" height="15" fill="rgb(227,56,35)"/><text x="502.00" y="270.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (3 samples, 0.46%)</title><rect x="501" y="276" width="5" height="15" fill="rgb(247,6,6)"/><text x="504.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.46%)</title><rect x="501" y="292" width="5" height="15" fill="rgb(213,196,3)"/><text x="504.00" y="302.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py:1153) (3 samples, 0.46%)</title><rect x="501" y="308" width="5" height="15" fill="rgb(254,164,35)"/><text x="504.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.46%)</title><rect x="501" y="324" width="5" height="15" fill="rgb(209,161,51)"/><text x="504.00" y="334.50"></text></g><g><title>array_argmax (methods.c:302) (2 samples, 0.30%)</title><rect x="502" y="340" width="4" height="15" fill="rgb(247,39,23)"/><text x="505.00" y="350.50"></text></g><g><title>PyArray_ArgMax (calculation.c:131) (2 samples, 0.30%)</title><rect x="502" y="356" width="4" height="15" fill="rgb(252,212,19)"/><text x="505.00" y="366.50"></text></g><g><title>FLOAT_argmax (arraytypes.c.src:3129) (1 samples, 0.15%)</title><rect x="504" y="372" width="2" height="15" fill="rgb(222,10,0)"/><text x="507.00" y="382.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:15) (1 samples, 0.15%)</title><rect x="506" y="260" width="2" height="15" fill="rgb(242,226,8)"/><text x="509.00" y="270.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (1 samples, 0.15%)</title><rect x="506" y="276" width="2" height="15" fill="rgb(229,36,3)"/><text x="509.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (1 samples, 0.15%)</title><rect x="506" y="292" width="2" height="15" fill="rgb(227,160,12)"/><text x="509.00" y="302.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (1 samples, 0.15%)</title><rect x="506" y="308" width="2" height="15" fill="rgb(237,55,3)"/><text x="509.00" y="318.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:312) (7 samples, 1.07%)</title><rect x="497" y="196" width="13" height="15" fill="rgb(209,120,16)"/><text x="500.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (7 samples, 1.07%)</title><rect x="497" y="212" width="13" height="15" fill="rgb(233,142,48)"/><text x="500.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (6 samples, 0.91%)</title><rect x="499" y="228" width="11" height="15" fill="rgb(245,178,22)"/><text x="502.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (6 samples, 0.91%)</title><rect x="499" y="244" width="11" height="15" fill="rgb(233,37,39)"/><text x="502.00" y="254.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:16) (1 samples, 0.15%)</title><rect x="508" y="260" width="2" height="15" fill="rgb(209,169,5)"/><text x="511.00" y="270.50"></text></g><g><title>0x7f4bc3308e02 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="508" y="276" width="2" height="15" fill="rgb(251,42,4)"/><text x="511.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4716) (1 samples, 0.15%)</title><rect x="511" y="244" width="2" height="15" fill="rgb(252,180,5)"/><text x="514.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (1 samples, 0.15%)</title><rect x="513" y="244" width="2" height="15" fill="rgb(220,12,2)"/><text x="516.00" y="254.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (1 samples, 0.15%)</title><rect x="513" y="260" width="2" height="15" fill="rgb(235,201,21)"/><text x="516.00" y="270.50"></text></g><g><title>get_array_ufunc_overrides (override.c:35) (1 samples, 0.15%)</title><rect x="513" y="276" width="2" height="15" fill="rgb(253,90,7)"/><text x="516.00" y="286.50"></text></g><g><title>FLOAT_maximum (loops.c.src:1867) (9 samples, 1.37%)</title><rect x="515" y="308" width="16" height="15" fill="rgb(237,114,1)"/><text x="518.00" y="318.50"></text></g><g><title>FLOAT_maximum (loops.c.src:1868) (4 samples, 0.61%)</title><rect x="531" y="308" width="7" height="15" fill="rgb(216,220,34)"/><text x="534.00" y="318.50"></text></g><g><title>FLOAT_maximum (loops.c.src:1869) (1 samples, 0.15%)</title><rect x="538" y="308" width="2" height="15" fill="rgb(223,67,48)"/><text x="541.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py:19) (30 samples, 4.57%)</title><rect x="511" y="228" width="54" height="15" fill="rgb(208,175,27)"/><text x="514.00" y="238.50">_run ..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (28 samples, 4.27%)</title><rect x="515" y="244" width="50" height="15" fill="rgb(238,24,54)"/><text x="518.00" y="254.50">ufunc..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (28 samples, 4.27%)</title><rect x="515" y="260" width="50" height="15" fill="rgb(216,161,26)"/><text x="518.00" y="270.50">PyUFu..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (28 samples, 4.27%)</title><rect x="515" y="276" width="50" height="15" fill="rgb(241,174,26)"/><text x="518.00" y="286.50">execu..</text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (28 samples, 4.27%)</title><rect x="515" y="292" width="50" height="15" fill="rgb(212,19,32)"/><text x="518.00" y="302.50">trivi..</text></g><g><title>FLOAT_maximum (loops.c.src:1871) (14 samples, 2.13%)</title><rect x="540" y="308" width="25" height="15" fill="rgb(235,120,18)"/><text x="543.00" y="318.50">F..</text></g><g><title>reduce_loop (ufunc_object.c:3536) (1 samples, 0.15%)</title><rect x="569" y="356" width="2" height="15" fill="rgb(219,88,51)"/><text x="572.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (3 samples, 0.46%)</title><rect x="573" y="436" width="5" height="15" fill="rgb(213,217,47)"/><text x="576.00" y="446.50"></text></g><g><title>fetestexcept (libm-2.29.so) (3 samples, 0.46%)</title><rect x="573" y="452" width="5" height="15" fill="rgb(242,146,9)"/><text x="576.00" y="462.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:803) (1 samples, 0.15%)</title><rect x="578" y="436" width="2" height="15" fill="rgb(216,106,31)"/><text x="581.00" y="446.50"></text></g><g><title>FLOAT_maximum (loops.c.src:1857) (6 samples, 0.91%)</title><rect x="571" y="372" width="11" height="15" fill="rgb(229,175,30)"/><text x="574.00" y="382.50"></text></g><g><title>run_unary_reduce_simd_maximum_FLOAT (simd.inc.src:195) (6 samples, 0.91%)</title><rect x="571" y="388" width="11" height="15" fill="rgb(219,94,34)"/><text x="574.00" y="398.50"></text></g><g><title>sse2_maximum_FLOAT (simd.inc.src:1117) (6 samples, 0.91%)</title><rect x="571" y="404" width="11" height="15" fill="rgb(216,20,50)"/><text x="574.00" y="414.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (5 samples, 0.76%)</title><rect x="573" y="420" width="9" height="15" fill="rgb(219,171,22)"/><text x="576.00" y="430.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:805) (1 samples, 0.15%)</title><rect x="580" y="436" width="2" height="15" fill="rgb(254,224,9)"/><text x="583.00" y="446.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (1 samples, 0.15%)</title><rect x="582" y="388" width="1" height="15" fill="rgb(205,96,44)"/><text x="585.00" y="398.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:806) (1 samples, 0.15%)</title><rect x="582" y="404" width="1" height="15" fill="rgb(248,199,18)"/><text x="585.00" y="414.50"></text></g><g><title>FLOAT_maximum (loops.c.src:1876) (2 samples, 0.30%)</title><rect x="582" y="372" width="3" height="15" fill="rgb(215,229,50)"/><text x="585.00" y="382.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:819) (1 samples, 0.15%)</title><rect x="583" y="388" width="2" height="15" fill="rgb(221,157,4)"/><text x="586.00" y="398.50"></text></g><g><title>array_max (methods.c:323) (11 samples, 1.68%)</title><rect x="567" y="244" width="20" height="15" fill="rgb(206,217,30)"/><text x="570.00" y="254.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (11 samples, 1.68%)</title><rect x="567" y="260" width="20" height="15" fill="rgb(207,63,36)"/><text x="570.00" y="270.50"></text></g><g><title>_amax (numpy/core/_methods.py:30) (10 samples, 1.52%)</title><rect x="569" y="276" width="18" height="15" fill="rgb(244,129,39)"/><text x="572.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (10 samples, 1.52%)</title><rect x="569" y="292" width="18" height="15" fill="rgb(245,133,9)"/><text x="572.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (10 samples, 1.52%)</title><rect x="569" y="308" width="18" height="15" fill="rgb(244,112,9)"/><text x="572.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (10 samples, 1.52%)</title><rect x="569" y="324" width="18" height="15" fill="rgb(253,29,29)"/><text x="572.00" y="334.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (10 samples, 1.52%)</title><rect x="569" y="340" width="18" height="15" fill="rgb(245,51,33)"/><text x="572.00" y="350.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (9 samples, 1.37%)</title><rect x="571" y="356" width="16" height="15" fill="rgb(250,69,18)"/><text x="574.00" y="366.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:240) (1 samples, 0.15%)</title><rect x="585" y="372" width="2" height="15" fill="rgb(211,103,36)"/><text x="588.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (1 samples, 0.15%)</title><rect x="587" y="260" width="2" height="15" fill="rgb(215,136,1)"/><text x="590.00" y="270.50"></text></g><g><title>_find_array_prepare (ufunc_object.c:303) (1 samples, 0.15%)</title><rect x="587" y="276" width="2" height="15" fill="rgb(221,105,22)"/><text x="590.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (1 samples, 0.15%)</title><rect x="589" y="292" width="2" height="15" fill="rgb(225,161,20)"/><text x="592.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:505) (1 samples, 0.15%)</title><rect x="589" y="308" width="2" height="15" fill="rgb(215,163,42)"/><text x="592.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (1 samples, 0.15%)</title><rect x="591" y="340" width="1" height="15" fill="rgb(247,180,44)"/><text x="594.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:22) (16 samples, 2.44%)</title><rect x="565" y="228" width="29" height="15" fill="rgb(205,85,47)"/><text x="568.00" y="238.50">_r..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 0.61%)</title><rect x="587" y="244" width="7" height="15" fill="rgb(231,177,5)"/><text x="590.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.46%)</title><rect x="589" y="260" width="5" height="15" fill="rgb(228,4,51)"/><text x="592.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 0.46%)</title><rect x="589" y="276" width="5" height="15" fill="rgb(248,92,33)"/><text x="592.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (2 samples, 0.30%)</title><rect x="591" y="292" width="3" height="15" fill="rgb(254,78,31)"/><text x="594.00" y="302.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (2 samples, 0.30%)</title><rect x="591" y="308" width="3" height="15" fill="rgb(233,219,11)"/><text x="594.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (2 samples, 0.30%)</title><rect x="591" y="324" width="3" height="15" fill="rgb(243,170,10)"/><text x="594.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (1 samples, 0.15%)</title><rect x="592" y="340" width="2" height="15" fill="rgb(210,5,30)"/><text x="595.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1657) (1 samples, 0.15%)</title><rect x="594" y="276" width="2" height="15" fill="rgb(230,195,49)"/><text x="597.00" y="286.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h:721) (1 samples, 0.15%)</title><rect x="594" y="292" width="2" height="15" fill="rgb(240,12,18)"/><text x="597.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c:835) (1 samples, 0.15%)</title><rect x="594" y="308" width="2" height="15" fill="rgb(211,208,34)"/><text x="597.00" y="318.50"></text></g><g><title>solve_diophantine (mem_overlap.c:555) (1 samples, 0.15%)</title><rect x="594" y="324" width="2" height="15" fill="rgb(239,91,32)"/><text x="597.00" y="334.50"></text></g><g><title>diophantine_dfs (mem_overlap.c:373) (1 samples, 0.15%)</title><rect x="594" y="340" width="2" height="15" fill="rgb(224,116,4)"/><text x="597.00" y="350.50"></text></g><g><title>ceildiv_128_64 (npy_extint128.h:312) (1 samples, 0.15%)</title><rect x="594" y="356" width="2" height="15" fill="rgb(226,166,19)"/><text x="597.00" y="366.50"></text></g><g><title>add_128 (npy_extint128.h:154) (1 samples, 0.15%)</title><rect x="594" y="372" width="2" height="15" fill="rgb(219,50,20)"/><text x="597.00" y="382.50"></text></g><g><title>0x7f4bc33761a0 (libm-2.29.so) (1 samples, 0.15%)</title><rect x="598" y="340" width="2" height="15" fill="rgb(238,220,9)"/><text x="601.00" y="350.50"></text></g><g><title>0x7f4bc33a9e0e (libm-2.29.so) (2 samples, 0.30%)</title><rect x="600" y="340" width="3" height="15" fill="rgb(207,147,28)"/><text x="603.00" y="350.50"></text></g><g><title>0x7f4bc33a9e62 (libm-2.29.so) (1 samples, 0.15%)</title><rect x="603" y="340" width="2" height="15" fill="rgb(251,39,18)"/><text x="606.00" y="350.50"></text></g><g><title>FLOAT_exp (loops.c.src:1602) (6 samples, 0.91%)</title><rect x="596" y="308" width="11" height="15" fill="rgb(223,86,31)"/><text x="599.00" y="318.50"></text></g><g><title>expf (libm-2.29.so) (6 samples, 0.91%)</title><rect x="596" y="324" width="11" height="15" fill="rgb(242,38,33)"/><text x="599.00" y="334.50"></text></g><g><title>0x7f4bc33a9ea6 (libm-2.29.so) (1 samples, 0.15%)</title><rect x="605" y="340" width="2" height="15" fill="rgb(213,170,29)"/><text x="608.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 1.22%)</title><rect x="594" y="244" width="14" height="15" fill="rgb(252,48,54)"/><text x="597.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (8 samples, 1.22%)</title><rect x="594" y="260" width="14" height="15" fill="rgb(248,190,6)"/><text x="597.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (7 samples, 1.07%)</title><rect x="596" y="276" width="12" height="15" fill="rgb(242,139,35)"/><text x="599.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (7 samples, 1.07%)</title><rect x="596" y="292" width="12" height="15" fill="rgb(241,1,38)"/><text x="599.00" y="302.50"></text></g><g><title>FLOAT_exp (loops.c.src:1604) (1 samples, 0.15%)</title><rect x="607" y="308" width="1" height="15" fill="rgb(223,214,52)"/><text x="610.00" y="318.50"></text></g><g><title>npy_expf (npy_math_internal.h.src:469) (1 samples, 0.15%)</title><rect x="607" y="324" width="1" height="15" fill="rgb(252,8,8)"/><text x="610.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:23) (9 samples, 1.37%)</title><rect x="594" y="228" width="16" height="15" fill="rgb(225,65,8)"/><text x="597.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4751) (1 samples, 0.15%)</title><rect x="608" y="244" width="2" height="15" fill="rgb(222,168,46)"/><text x="611.00" y="254.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c:1962) (1 samples, 0.15%)</title><rect x="608" y="260" width="2" height="15" fill="rgb(246,112,9)"/><text x="611.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4577) (1 samples, 0.15%)</title><rect x="610" y="308" width="2" height="15" fill="rgb(207,181,22)"/><text x="613.00" y="318.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (1 samples, 0.15%)</title><rect x="610" y="324" width="2" height="15" fill="rgb(220,79,27)"/><text x="613.00" y="334.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (1 samples, 0.15%)</title><rect x="610" y="340" width="2" height="15" fill="rgb(232,21,0)"/><text x="613.00" y="350.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (1 samples, 0.15%)</title><rect x="610" y="356" width="2" height="15" fill="rgb(225,148,48)"/><text x="613.00" y="366.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (1 samples, 0.15%)</title><rect x="612" y="340" width="2" height="15" fill="rgb(247,38,21)"/><text x="615.00" y="350.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (1 samples, 0.15%)</title><rect x="612" y="356" width="2" height="15" fill="rgb(243,36,48)"/><text x="615.00" y="366.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (1 samples, 0.15%)</title><rect x="612" y="372" width="2" height="15" fill="rgb(251,46,49)"/><text x="615.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.15%)</title><rect x="612" y="388" width="2" height="15" fill="rgb(216,63,19)"/><text x="615.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (1 samples, 0.15%)</title><rect x="612" y="404" width="2" height="15" fill="rgb(237,1,11)"/><text x="615.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (1 samples, 0.15%)</title><rect x="612" y="420" width="2" height="15" fill="rgb(240,71,43)"/><text x="615.00" y="430.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (1 samples, 0.15%)</title><rect x="612" y="436" width="2" height="15" fill="rgb(207,87,42)"/><text x="615.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:183) (1 samples, 0.15%)</title><rect x="614" y="356" width="2" height="15" fill="rgb(229,119,42)"/><text x="617.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (1 samples, 0.15%)</title><rect x="616" y="356" width="1" height="15" fill="rgb(209,42,29)"/><text x="619.00" y="366.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c:1632) (1 samples, 0.15%)</title><rect x="616" y="372" width="1" height="15" fill="rgb(221,193,32)"/><text x="619.00" y="382.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (3 samples, 0.46%)</title><rect x="614" y="340" width="5" height="15" fill="rgb(206,109,14)"/><text x="617.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:471) (1 samples, 0.15%)</title><rect x="617" y="356" width="2" height="15" fill="rgb(224,35,8)"/><text x="620.00" y="366.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1720) (1 samples, 0.15%)</title><rect x="617" y="372" width="2" height="15" fill="rgb(248,173,51)"/><text x="620.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="617" y="388" width="2" height="15" fill="rgb(243,175,50)"/><text x="620.00" y="398.50"></text></g><g><title>0x7f4bc322c214 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="617" y="404" width="2" height="15" fill="rgb(216,95,20)"/><text x="620.00" y="414.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (2 samples, 0.30%)</title><rect x="619" y="372" width="4" height="15" fill="rgb(237,5,16)"/><text x="622.00" y="382.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1663) (1 samples, 0.15%)</title><rect x="621" y="388" width="2" height="15" fill="rgb(230,219,21)"/><text x="624.00" y="398.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:229) (1 samples, 0.15%)</title><rect x="623" y="372" width="2" height="15" fill="rgb(234,157,46)"/><text x="626.00" y="382.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (4 samples, 0.61%)</title><rect x="619" y="340" width="7" height="15" fill="rgb(237,160,26)"/><text x="622.00" y="350.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (4 samples, 0.61%)</title><rect x="619" y="356" width="7" height="15" fill="rgb(247,45,16)"/><text x="622.00" y="366.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (1 samples, 0.15%)</title><rect x="625" y="372" width="1" height="15" fill="rgb(230,57,16)"/><text x="628.00" y="382.50"></text></g><g><title>array_sum (methods.c:2215) (10 samples, 1.52%)</title><rect x="610" y="244" width="18" height="15" fill="rgb(227,210,28)"/><text x="613.00" y="254.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (10 samples, 1.52%)</title><rect x="610" y="260" width="18" height="15" fill="rgb(241,169,2)"/><text x="613.00" y="270.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (10 samples, 1.52%)</title><rect x="610" y="276" width="18" height="15" fill="rgb(245,90,6)"/><text x="613.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (10 samples, 1.52%)</title><rect x="610" y="292" width="18" height="15" fill="rgb(229,40,52)"/><text x="613.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (9 samples, 1.37%)</title><rect x="612" y="308" width="16" height="15" fill="rgb(205,32,36)"/><text x="615.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (9 samples, 1.37%)</title><rect x="612" y="324" width="16" height="15" fill="rgb(213,176,50)"/><text x="615.00" y="334.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:594) (1 samples, 0.15%)</title><rect x="626" y="340" width="2" height="15" fill="rgb(232,200,53)"/><text x="629.00" y="350.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:306) (1 samples, 0.15%)</title><rect x="628" y="308" width="2" height="15" fill="rgb(208,182,15)"/><text x="631.00" y="318.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1710) (1 samples, 0.15%)</title><rect x="628" y="324" width="2" height="15" fill="rgb(243,119,42)"/><text x="631.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (2 samples, 0.30%)</title><rect x="630" y="340" width="4" height="15" fill="rgb(243,159,31)"/><text x="633.00" y="350.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (6 samples, 0.91%)</title><rect x="628" y="292" width="11" height="15" fill="rgb(223,59,40)"/><text x="631.00" y="302.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (5 samples, 0.76%)</title><rect x="630" y="308" width="9" height="15" fill="rgb(253,188,9)"/><text x="633.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (5 samples, 0.76%)</title><rect x="630" y="324" width="9" height="15" fill="rgb(219,15,19)"/><text x="633.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (3 samples, 0.46%)</title><rect x="634" y="340" width="5" height="15" fill="rgb(247,62,23)"/><text x="637.00" y="350.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (73 samples, 11.13%)</title><rect x="510" y="196" width="131" height="15" fill="rgb(239,26,14)"/><text x="513.00" y="206.50">run (mlprodict/o..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (72 samples, 10.98%)</title><rect x="511" y="212" width="130" height="15" fill="rgb(205,187,5)"/><text x="514.00" y="222.50">run (mlprodict/o..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:24) (17 samples, 2.59%)</title><rect x="610" y="228" width="31" height="15" fill="rgb(218,127,50)"/><text x="613.00" y="238.50">_r..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 1.07%)</title><rect x="628" y="244" width="13" height="15" fill="rgb(253,136,8)"/><text x="631.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (7 samples, 1.07%)</title><rect x="628" y="260" width="13" height="15" fill="rgb(210,127,39)"/><text x="631.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (7 samples, 1.07%)</title><rect x="628" y="276" width="13" height="15" fill="rgb(209,74,32)"/><text x="631.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (1 samples, 0.15%)</title><rect x="639" y="292" width="2" height="15" fill="rgb(243,213,16)"/><text x="642.00" y="302.50"></text></g><g><title>FLOAT_divide (loops.c.src:1755) (1 samples, 0.15%)</title><rect x="639" y="308" width="2" height="15" fill="rgb(243,111,40)"/><text x="642.00" y="318.50"></text></g><g><title>run_binary_simd_divide_FLOAT (simd.inc.src:250) (1 samples, 0.15%)</title><rect x="639" y="324" width="2" height="15" fill="rgb(222,101,36)"/><text x="642.00" y="334.50"></text></g><g><title>sse2_binary_divide_FLOAT (simd.inc.src:604) (1 samples, 0.15%)</title><rect x="639" y="340" width="2" height="15" fill="rgb(242,18,25)"/><text x="642.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (1 samples, 0.15%)</title><rect x="639" y="356" width="2" height="15" fill="rgb(236,129,33)"/><text x="642.00" y="366.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (1 samples, 0.15%)</title><rect x="641" y="196" width="2" height="15" fill="rgb(208,111,18)"/><text x="644.00" y="206.50"></text></g><g><title>iterator_loop (ufunc_object.c:1568) (1 samples, 0.15%)</title><rect x="643" y="292" width="1" height="15" fill="rgb(220,139,16)"/><text x="646.00" y="302.50"></text></g><g><title>NpyIter_GetIterNext (nditer_templ.c.src:372) (1 samples, 0.15%)</title><rect x="643" y="308" width="1" height="15" fill="rgb(220,28,37)"/><text x="646.00" y="318.50"></text></g><g><title>FLOAT_add (loops.c.src:1755) (1 samples, 0.15%)</title><rect x="644" y="308" width="2" height="15" fill="rgb(234,114,34)"/><text x="647.00" y="318.50"></text></g><g><title>run_binary_simd_add_FLOAT (simd.inc.src:250) (1 samples, 0.15%)</title><rect x="644" y="324" width="2" height="15" fill="rgb(252,54,14)"/><text x="647.00" y="334.50"></text></g><g><title>sse2_binary_add_FLOAT (simd.inc.src:600) (1 samples, 0.15%)</title><rect x="644" y="340" width="2" height="15" fill="rgb(246,155,44)"/><text x="647.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:523) (3 samples, 0.46%)</title><rect x="643" y="228" width="5" height="15" fill="rgb(209,42,42)"/><text x="646.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.46%)</title><rect x="643" y="244" width="5" height="15" fill="rgb(221,31,20)"/><text x="646.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.46%)</title><rect x="643" y="260" width="5" height="15" fill="rgb(228,127,2)"/><text x="646.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 0.46%)</title><rect x="643" y="276" width="5" height="15" fill="rgb(224,118,25)"/><text x="646.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (2 samples, 0.30%)</title><rect x="644" y="292" width="4" height="15" fill="rgb(216,71,12)"/><text x="647.00" y="302.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (1 samples, 0.15%)</title><rect x="646" y="308" width="2" height="15" fill="rgb(245,72,19)"/><text x="649.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (1 samples, 0.15%)</title><rect x="646" y="324" width="2" height="15" fill="rgb(238,114,8)"/><text x="649.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (1 samples, 0.15%)</title><rect x="646" y="340" width="2" height="15" fill="rgb(211,120,25)"/><text x="649.00" y="350.50"></text></g><g><title>0x7f4bc324af4e (libc-2.29.so) (1 samples, 0.15%)</title><rect x="646" y="356" width="2" height="15" fill="rgb(233,98,12)"/><text x="649.00" y="366.50"></text></g><g><title>cblas_matrixproduct (cblasfuncs.c:367) (3 samples, 0.46%)</title><rect x="648" y="324" width="5" height="15" fill="rgb(210,18,49)"/><text x="651.00" y="334.50"></text></g><g><title>0x7f4bc324b103 (libc-2.29.so) (3 samples, 0.46%)</title><rect x="648" y="340" width="5" height="15" fill="rgb(223,34,36)"/><text x="651.00" y="350.50"></text></g><g><title>blas_memory_alloc (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="653" y="372" width="2" height="15" fill="rgb(213,9,48)"/><text x="656.00" y="382.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (34 samples, 5.18%)</title><rect x="657" y="420" width="61" height="15" fill="rgb(208,100,6)"/><text x="660.00" y="430.50">exec_b..</text></g><g><title>sched_yield (libc-2.29.so) (34 samples, 5.18%)</title><rect x="657" y="436" width="61" height="15" fill="rgb(244,65,26)"/><text x="660.00" y="446.50">sched_..</text></g><g><title>sched_yield (libc-2.29.so) (1 samples, 0.15%)</title><rect x="718" y="436" width="2" height="15" fill="rgb(208,63,20)"/><text x="721.00" y="446.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (45 samples, 6.86%)</title><rect x="648" y="276" width="81" height="15" fill="rgb(226,33,23)"/><text x="651.00" y="286.50">array_imp..</text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (45 samples, 6.86%)</title><rect x="648" y="292" width="81" height="15" fill="rgb(208,23,12)"/><text x="651.00" y="302.50">array_mat..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (45 samples, 6.86%)</title><rect x="648" y="308" width="81" height="15" fill="rgb(213,81,11)"/><text x="651.00" y="318.50">PyArray_M..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c:674) (42 samples, 6.40%)</title><rect x="653" y="324" width="76" height="15" fill="rgb(254,153,38)"/><text x="656.00" y="334.50">cblas_ma..</text></g><g><title>gemm (cblasfuncs.c:40) (42 samples, 6.40%)</title><rect x="653" y="340" width="76" height="15" fill="rgb(226,180,50)"/><text x="656.00" y="350.50">gemm (cb..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (42 samples, 6.40%)</title><rect x="653" y="356" width="76" height="15" fill="rgb(251,47,50)"/><text x="656.00" y="366.50">cblas_sg..</text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (41 samples, 6.25%)</title><rect x="655" y="372" width="74" height="15" fill="rgb(253,24,37)"/><text x="658.00" y="382.50">sgemm_th..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (41 samples, 6.25%)</title><rect x="655" y="388" width="74" height="15" fill="rgb(230,105,35)"/><text x="658.00" y="398.50">gemm_dri..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (41 samples, 6.25%)</title><rect x="655" y="404" width="74" height="15" fill="rgb(240,111,51)"/><text x="658.00" y="414.50">exec_bla..</text></g><g><title>inner_thread (libopenblasp-r0-34a18dc3.3.7.so) (6 samples, 0.91%)</title><rect x="718" y="420" width="11" height="15" fill="rgb(224,209,19)"/><text x="721.00" y="430.50"></text></g><g><title>sgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.76%)</title><rect x="720" y="436" width="9" height="15" fill="rgb(244,216,13)"/><text x="723.00" y="446.50"></text></g><g><title>sgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.76%)</title><rect x="729" y="276" width="9" height="15" fill="rgb(205,48,7)"/><text x="732.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (193 samples, 29.42%)</title><rect x="439" y="180" width="348" height="15" fill="rgb(216,4,6)"/><text x="442.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:13..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (80 samples, 12.20%)</title><rect x="643" y="196" width="144" height="15" fill="rgb(233,98,5)"/><text x="646.00" y="206.50">run (mlprodict/onn..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (80 samples, 12.20%)</title><rect x="643" y="212" width="144" height="15" fill="rgb(218,226,23)"/><text x="646.00" y="222.50">run (mlprodict/onn..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (77 samples, 11.74%)</title><rect x="648" y="228" width="139" height="15" fill="rgb(241,158,7)"/><text x="651.00" y="238.50">_run (mlprodict/o..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:40) (77 samples, 11.74%)</title><rect x="648" y="244" width="139" height="15" fill="rgb(248,94,41)"/><text x="651.00" y="254.50">numpy_dot_inplace..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (77 samples, 11.74%)</title><rect x="648" y="260" width="139" height="15" fill="rgb(243,41,44)"/><text x="651.00" y="270.50">dot (&lt;__array_fun..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (27 samples, 4.12%)</title><rect x="738" y="276" width="49" height="15" fill="rgb(221,11,32)"/><text x="741.00" y="286.50">sgem..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (1 samples, 0.15%)</title><rect x="787" y="180" width="1" height="15" fill="rgb(211,53,48)"/><text x="790.00" y="190.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:45) (214 samples, 32.62%)</title><rect x="405" y="52" width="385" height="15" fill="rgb(238,224,13)"/><text x="408.00" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_1..</text></g><g><title>profile_pyrt (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:44) (214 samples, 32.62%)</title><rect x="405" y="68" width="385" height="15" fill="rgb(222,51,49)"/><text x="408.00" y="78.50">profile_pyrt (bench_MLPClassifier_default_b_cl_1000_..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:29) (213 samples, 32.47%)</title><rect x="407" y="84" width="383" height="15" fill="rgb(229,125,26)"/><text x="410.00" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1000..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:23) (198 samples, 30.18%)</title><rect x="434" y="100" width="356" height="15" fill="rgb(246,1,39)"/><text x="437.00" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_5..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (198 samples, 30.18%)</title><rect x="434" y="116" width="356" height="15" fill="rgb(227,106,45)"/><text x="437.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (198 samples, 30.18%)</title><rect x="434" y="132" width="356" height="15" fill="rgb(213,52,19)"/><text x="437.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (198 samples, 30.18%)</title><rect x="434" y="148" width="356" height="15" fill="rgb(253,76,11)"/><text x="437.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (198 samples, 30.18%)</title><rect x="434" y="164" width="356" height="15" fill="rgb(244,93,14)"/><text x="437.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inf..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (1 samples, 0.15%)</title><rect x="788" y="180" width="2" height="15" fill="rgb(227,87,44)"/><text x="791.00" y="190.50"></text></g><g><title>0x7f4b811edff9 (?) (1 samples, 0.15%)</title><rect x="790" y="212" width="2" height="15" fill="rgb(254,4,37)"/><text x="793.00" y="222.50"></text></g><g><title>0x7f4b811e8ef6 (?) (1 samples, 0.15%)</title><rect x="790" y="228" width="2" height="15" fill="rgb(248,196,26)"/><text x="793.00" y="238.50"></text></g><g><title>0x7f4b811ddd49 (?) (1 samples, 0.15%)</title><rect x="790" y="244" width="2" height="15" fill="rgb(221,45,8)"/><text x="793.00" y="254.50"></text></g><g><title>0x7f4b811ebc1a (?) (1 samples, 0.15%)</title><rect x="790" y="260" width="2" height="15" fill="rgb(244,19,22)"/><text x="793.00" y="270.50"></text></g><g><title>0x7f4b81614678 (?) (1 samples, 0.15%)</title><rect x="790" y="276" width="2" height="15" fill="rgb(210,75,36)"/><text x="793.00" y="286.50"></text></g><g><title>0x7f4bc322a9ff (libc-2.29.so) (1 samples, 0.15%)</title><rect x="790" y="292" width="2" height="15" fill="rgb(215,141,19)"/><text x="793.00" y="302.50"></text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.30%)</title><rect x="792" y="340" width="4" height="15" fill="rgb(247,48,47)"/><text x="795.00" y="350.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="792" y="260" width="5" height="15" fill="rgb(234,141,19)"/><text x="795.00" y="270.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="792" y="276" width="5" height="15" fill="rgb(236,42,9)"/><text x="795.00" y="286.50"></text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="792" y="292" width="5" height="15" fill="rgb(221,151,41)"/><text x="795.00" y="302.50"></text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="792" y="308" width="5" height="15" fill="rgb(223,129,1)"/><text x="795.00" y="318.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="792" y="324" width="5" height="15" fill="rgb(233,1,13)"/><text x="795.00" y="334.50"></text></g><g><title>onnxruntime::Softmax&lt;float, false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="796" y="340" width="1" height="15" fill="rgb(239,223,10)"/><text x="799.00" y="350.50"></text></g><g><title>onnxruntime::ComputeSoftMax&lt;Eigen::ThreadPoolDevice, float&gt; [clone .constprop.656] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="796" y="356" width="1" height="15" fill="rgb(223,115,51)"/><text x="799.00" y="366.50"></text></g><g><title>Eigen::internal::TensorExecutor&lt;Eigen::TensorEvalToOp&lt;Eigen::TensorReductionOp&lt;Eigen::internal::MaxReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice, true, false&gt;::run (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="796" y="372" width="1" height="15" fill="rgb(220,172,27)"/><text x="799.00" y="382.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="796" y="388" width="1" height="15" fill="rgb(235,51,23)"/><text x="799.00" y="398.50"></text></g><g><title>std::_Function_handler&lt;void (long, long), Eigen::internal::TensorExecutor&lt;Eigen::TensorEvalToOp&lt;Eigen::TensorReductionOp&lt;Eigen::internal::MaxReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice, true, false&gt;::run(Eigen::TensorEvalToOp&lt;Eigen::TensorReductionOp&lt;Eigen::internal::MaxReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const&amp;, Eigen::ThreadPoolDevice const&amp;)::{lambda(long, long)#1}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="796" y="404" width="1" height="15" fill="rgb(239,7,19)"/><text x="799.00" y="414.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="797" y="260" width="2" height="15" fill="rgb(236,102,5)"/><text x="800.00" y="270.50"></text></g><g><title>0x7f4bc322aa4b (libc-2.29.so) (1 samples, 0.15%)</title><rect x="799" y="292" width="2" height="15" fill="rgb(225,159,12)"/><text x="802.00" y="302.50"></text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:18) (7 samples, 1.07%)</title><rect x="790" y="100" width="13" height="15" fill="rgb(206,31,26)"/><text x="793.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (7 samples, 1.07%)</title><rect x="790" y="116" width="13" height="15" fill="rgb(249,45,23)"/><text x="793.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (7 samples, 1.07%)</title><rect x="790" y="132" width="13" height="15" fill="rgb(232,128,31)"/><text x="793.00" y="142.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (7 samples, 1.07%)</title><rect x="790" y="148" width="13" height="15" fill="rgb(209,149,51)"/><text x="793.00" y="158.50"></text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (7 samples, 1.07%)</title><rect x="790" y="164" width="13" height="15" fill="rgb(244,137,4)"/><text x="793.00" y="174.50"></text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (7 samples, 1.07%)</title><rect x="790" y="180" width="13" height="15" fill="rgb(212,212,15)"/><text x="793.00" y="190.50"></text></g><g><title>run (onnxruntime/capi/session.py:136) (7 samples, 1.07%)</title><rect x="790" y="196" width="13" height="15" fill="rgb(252,35,13)"/><text x="793.00" y="206.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.91%)</title><rect x="792" y="212" width="11" height="15" fill="rgb(207,153,22)"/><text x="795.00" y="222.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.91%)</title><rect x="792" y="228" width="11" height="15" fill="rgb(239,15,18)"/><text x="795.00" y="238.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.91%)</title><rect x="792" y="244" width="11" height="15" fill="rgb(232,25,52)"/><text x="795.00" y="254.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.30%)</title><rect x="799" y="260" width="4" height="15" fill="rgb(240,229,51)"/><text x="802.00" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.30%)</title><rect x="799" y="276" width="4" height="15" fill="rgb(218,135,16)"/><text x="802.00" y="286.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="801" y="292" width="2" height="15" fill="rgb(229,106,17)"/><text x="804.00" y="302.50"></text></g><g><title>0x7f4bc322a9ed (libc-2.29.so) (1 samples, 0.15%)</title><rect x="801" y="308" width="2" height="15" fill="rgb(213,213,17)"/><text x="804.00" y="318.50"></text></g><g><title>0x7f4bc3229bc6 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="826" y="132" width="2" height="15" fill="rgb(252,158,54)"/><text x="829.00" y="142.50"></text></g><g><title>0x7f4bc3229bd1 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="828" y="132" width="2" height="15" fill="rgb(253,218,6)"/><text x="831.00" y="142.50"></text></g><g><title>0x7f4bc3229c14 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="830" y="132" width="2" height="15" fill="rgb(213,129,37)"/><text x="833.00" y="142.50"></text></g><g><title>0x7f4bc3229c6a (libc-2.29.so) (1 samples, 0.15%)</title><rect x="832" y="132" width="1" height="15" fill="rgb(254,47,15)"/><text x="835.00" y="142.50"></text></g><g><title>0x7f4bc3229ab9 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="833" y="148" width="2" height="15" fill="rgb(245,187,14)"/><text x="836.00" y="158.50"></text></g><g><title>0x7f4bc322aeb0 (libc-2.29.so) (6 samples, 0.91%)</title><rect x="826" y="116" width="11" height="15" fill="rgb(217,183,42)"/><text x="829.00" y="126.50"></text></g><g><title>0x7f4bc3229c73 (libc-2.29.so) (2 samples, 0.30%)</title><rect x="833" y="132" width="4" height="15" fill="rgb(246,64,45)"/><text x="836.00" y="142.50"></text></g><g><title>0x7f4bc3229ad5 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="835" y="148" width="2" height="15" fill="rgb(237,119,7)"/><text x="838.00" y="158.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:392) (3 samples, 0.46%)</title><rect x="837" y="148" width="5" height="15" fill="rgb(207,38,9)"/><text x="840.00" y="158.50"></text></g><g><title>run (onnxruntime/capi/session.py:134) (2 samples, 0.30%)</title><rect x="842" y="196" width="4" height="15" fill="rgb(205,213,7)"/><text x="845.00" y="206.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py:134) (1 samples, 0.15%)</title><rect x="844" y="212" width="2" height="15" fill="rgb(221,97,5)"/><text x="847.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="844" y="228" width="2" height="15" fill="rgb(231,53,54)"/><text x="847.00" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg const*, &gt;(pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; (*)(onnxruntime::NodeArg const*), const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="844" y="244" width="2" height="15" fill="rgb(205,105,20)"/><text x="847.00" y="254.50"></text></g><g><title>pybind11::detail::argument_loader&lt;onnxruntime::SessionOptions const&amp;&gt;::load_impl_sequence&lt;(unsigned long)0&gt; [clone .isra.1217] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="844" y="260" width="2" height="15" fill="rgb(252,13,23)"/><text x="847.00" y="270.50"></text></g><g><title>pybind11::detail::type_caster_generic::load_impl&lt;pybind11::detail::type_caster_generic&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="844" y="276" width="2" height="15" fill="rgb(225,186,20)"/><text x="847.00" y="286.50"></text></g><g><title>pybind11::detail::instance::get_value_and_holder (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="844" y="292" width="2" height="15" fill="rgb(208,144,51)"/><text x="847.00" y="302.50"></text></g><g><title>mkl_blas_avx_sgemm_kernel_0 (onnxruntime/capi/libmklml_intel.so) (19 samples, 2.90%)</title><rect x="846" y="212" width="34" height="15" fill="rgb(219,202,43)"/><text x="849.00" y="222.50">mk..</text></g><g><title>onnxruntime::InferenceSession::GetModelInputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="880" y="260" width="2" height="15" fill="rgb(212,190,3)"/><text x="883.00" y="270.50"></text></g><g><title>onnxruntime::Model::MainGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="880" y="276" width="2" height="15" fill="rgb(246,105,6)"/><text x="883.00" y="286.50"></text></g><g><title>onnxruntime::ArgMax&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.76%)</title><rect x="882" y="340" width="9" height="15" fill="rgb(225,120,53)"/><text x="885.00" y="350.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="886" y="356" width="5" height="15" fill="rgb(213,218,34)"/><text x="889.00" y="366.50"></text></g><g><title>onnxruntime::Cast&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.76%)</title><rect x="891" y="340" width="9" height="15" fill="rgb(247,98,8)"/><text x="894.00" y="350.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="900" y="340" width="2" height="15" fill="rgb(244,21,32)"/><text x="903.00" y="350.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="900" y="356" width="2" height="15" fill="rgb(244,87,5)"/><text x="903.00" y="366.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="900" y="372" width="2" height="15" fill="rgb(244,184,54)"/><text x="903.00" y="382.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="900" y="388" width="2" height="15" fill="rgb(239,148,40)"/><text x="903.00" y="398.50"></text></g><g><title>0x7f4b7932fda0 (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.15%)</title><rect x="916" y="564" width="2" height="15" fill="rgb(225,179,20)"/><text x="919.00" y="574.50"></text></g><g><title>mkl_blas_avx_sgemm_copybn (onnxruntime/capi/libmklml_intel.so) (2 samples, 0.30%)</title><rect x="918" y="564" width="3" height="15" fill="rgb(245,189,13)"/><text x="921.00" y="574.50"></text></g><g><title>__kmp_fork_call (libiomp5.so) (4 samples, 0.61%)</title><rect x="916" y="452" width="7" height="15" fill="rgb(244,224,42)"/><text x="919.00" y="462.50"></text></g><g><title>__kmp_invoke_task_func (libiomp5.so) (4 samples, 0.61%)</title><rect x="916" y="468" width="7" height="15" fill="rgb(234,26,45)"/><text x="919.00" y="478.50"></text></g><g><title>__kmp_invoke_microtask (libiomp5.so) (4 samples, 0.61%)</title><rect x="916" y="484" width="7" height="15" fill="rgb(220,20,37)"/><text x="919.00" y="494.50"></text></g><g><title>mkl_blas_sgemm_omp_driver_v1 (onnxruntime/capi/libmklml_intel.so) (4 samples, 0.61%)</title><rect x="916" y="500" width="7" height="15" fill="rgb(227,111,30)"/><text x="919.00" y="510.50"></text></g><g><title>mkl_blas_sgemm_2D_bsrc (onnxruntime/capi/libmklml_intel.so) (4 samples, 0.61%)</title><rect x="916" y="516" width="7" height="15" fill="rgb(243,79,33)"/><text x="919.00" y="526.50"></text></g><g><title>mkl_blas_xsgemm_par (onnxruntime/capi/libmklml_intel.so) (4 samples, 0.61%)</title><rect x="916" y="532" width="7" height="15" fill="rgb(223,109,18)"/><text x="919.00" y="542.50"></text></g><g><title>mkl_blas_avx_xsgemm_par (onnxruntime/capi/libmklml_intel.so) (4 samples, 0.61%)</title><rect x="916" y="548" width="7" height="15" fill="rgb(251,20,31)"/><text x="919.00" y="558.50"></text></g><g><title>mkl_blas_avx_sgemm_ker0 (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.15%)</title><rect x="921" y="564" width="2" height="15" fill="rgb(218,193,33)"/><text x="924.00" y="574.50"></text></g><g><title>mkl_blas_avx_sgemm_ker0_pst (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.15%)</title><rect x="921" y="580" width="2" height="15" fill="rgb(241,199,9)"/><text x="924.00" y="590.50"></text></g><g><title>__kmpc_fork_call (libiomp5.so) (31 samples, 4.73%)</title><rect x="916" y="436" width="56" height="15" fill="rgb(229,35,38)"/><text x="919.00" y="446.50">__kmp..</text></g><g><title>__kmp_join_call (libiomp5.so) (27 samples, 4.12%)</title><rect x="923" y="452" width="49" height="15" fill="rgb(250,11,11)"/><text x="926.00" y="462.50">__km..</text></g><g><title>__kmp_internal_join (libiomp5.so) (27 samples, 4.12%)</title><rect x="923" y="468" width="49" height="15" fill="rgb(215,161,13)"/><text x="926.00" y="478.50">__km..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (27 samples, 4.12%)</title><rect x="923" y="484" width="49" height="15" fill="rgb(206,163,51)"/><text x="926.00" y="494.50">__km..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (27 samples, 4.12%)</title><rect x="923" y="500" width="49" height="15" fill="rgb(212,139,17)"/><text x="926.00" y="510.50">_INT..</text></g><g><title>sched_yield (libc-2.29.so) (2 samples, 0.30%)</title><rect x="968" y="516" width="4" height="15" fill="rgb(232,176,24)"/><text x="971.00" y="526.50"></text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 10.37%)</title><rect x="902" y="340" width="122" height="15" fill="rgb(209,59,42)"/><text x="905.00" y="350.50">onnxruntime::Ge..</text></g><g><title>onnxruntime::math::Gemm&lt;float, onnxruntime::concurrency::ThreadPool&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 9.30%)</title><rect x="914" y="356" width="110" height="15" fill="rgb(230,103,20)"/><text x="917.00" y="366.50">onnxruntime::..</text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (61 samples, 9.30%)</title><rect x="914" y="372" width="110" height="15" fill="rgb(251,210,19)"/><text x="917.00" y="382.50">cblas_sgemm (..</text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (60 samples, 9.15%)</title><rect x="916" y="388" width="108" height="15" fill="rgb(210,138,47)"/><text x="919.00" y="398.50">sgemm_ (onnxr..</text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (60 samples, 9.15%)</title><rect x="916" y="404" width="108" height="15" fill="rgb(253,162,42)"/><text x="919.00" y="414.50">mkl_blas_sgem..</text></g><g><title>mkl_blas_sgemm_omp_driver_v1 (onnxruntime/capi/libmklml_intel.so) (60 samples, 9.15%)</title><rect x="916" y="420" width="108" height="15" fill="rgb(222,88,47)"/><text x="919.00" y="430.50">mkl_blas_sgem..</text></g><g><title>mkl_blas_xsgemm (onnxruntime/capi/libmklml_intel.so) (29 samples, 4.42%)</title><rect x="972" y="436" width="52" height="15" fill="rgb(226,70,4)"/><text x="975.00" y="446.50">mkl_b..</text></g><g><title>mkl_blas_avx_xsgemm (onnxruntime/capi/libmklml_intel.so) (29 samples, 4.42%)</title><rect x="972" y="452" width="52" height="15" fill="rgb(244,25,3)"/><text x="975.00" y="462.50">mkl_b..</text></g><g><title>mkl_blas_avx_sgemm_pst (onnxruntime/capi/libmklml_intel.so) (29 samples, 4.42%)</title><rect x="972" y="468" width="52" height="15" fill="rgb(252,132,42)"/><text x="975.00" y="478.50">mkl_b..</text></g><g><title>onnxruntime::Softmax&lt;float, false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="1024" y="340" width="5" height="15" fill="rgb(247,137,35)"/><text x="1027.00" y="350.50"></text></g><g><title>onnxruntime::ComputeSoftMax&lt;Eigen::ThreadPoolDevice, float&gt; [clone .constprop.656] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="1024" y="356" width="5" height="15" fill="rgb(235,223,13)"/><text x="1027.00" y="366.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="1024" y="372" width="5" height="15" fill="rgb(232,27,18)"/><text x="1027.00" y="382.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="1024" y="388" width="5" height="15" fill="rgb(244,60,33)"/><text x="1027.00" y="398.50"></text></g><g><title>_ZNSt17_Function_handlerIFvllEZN5Eigen8internal14TensorExecutorIKNS1_14TensorAssignOpINS1_9TensorMapINS1_6TensorIfLi2ELi1ElEELi16ENS1_11MakePointerEEEKNS1_18TensorCwiseUnaryOpINS2_13scalar_exp_opIfEEKNS1_19TensorCwiseBinaryOpINS2_20scalar_difference_opIKfSF_EEKNS5_INS6_ISF_Li2ELi1ElEELi16ES8_EEKNS1_20TensorBroadcastingOpIKNS1_9IndexListINS1_10type2indexILl1EEEJiEEEKNS1_17TensorReshapingOpIKNSL_IiJSN_EEEKNS1_18TensorForcedEvalOpIKNS1_17TensorReductionOpINS2_10MaxReducerIfEEKNSL_ISN_JEEESJ_S8_EEEEEEEEEEEEEENS1_16ThreadPoolDeviceELb1ELb1EE3runERS1C_RKS1D_EUlllE_E9_M_invokeERKSt9_Any_dataOlS1N_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="1024" y="404" width="5" height="15" fill="rgb(252,97,37)"/><text x="1027.00" y="414.50"></text></g><g><title>Eigen::internal::TensorBlockCwiseUnaryIO&lt;Eigen::internal::scalar_exp_op&lt;float&gt;, long, float, 2, 1&gt;::Run&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="1024" y="420" width="5" height="15" fill="rgb(214,138,11)"/><text x="1027.00" y="430.50"></text></g><g><title>onnxruntime::ml::ArrayFeatureExtractorOp&lt;int&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.30%)</title><rect x="1029" y="340" width="4" height="15" fill="rgb(237,125,18)"/><text x="1032.00" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::GetInputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1031" y="356" width="2" height="15" fill="rgb(214,30,29)"/><text x="1034.00" y="366.50"></text></g><g><title>0x7f4bc322bd67 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1069" y="388" width="2" height="15" fill="rgb(208,88,41)"/><text x="1072.00" y="398.50"></text></g><g><title>0x7f4bc322bdd2 (libc-2.29.so) (2 samples, 0.30%)</title><rect x="1071" y="388" width="3" height="15" fill="rgb(230,100,1)"/><text x="1074.00" y="398.50"></text></g><g><title>0x7f4bc322bdec (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1074" y="388" width="2" height="15" fill="rgb(222,38,5)"/><text x="1077.00" y="398.50"></text></g><g><title>0x7f4bc322bfe6 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1076" y="388" width="2" height="15" fill="rgb(250,140,52)"/><text x="1079.00" y="398.50"></text></g><g><title>0x7f4bc322c033 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1078" y="388" width="2" height="15" fill="rgb(233,107,15)"/><text x="1081.00" y="398.50"></text></g><g><title>0x7f4bc322c06d (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1080" y="388" width="2" height="15" fill="rgb(233,4,12)"/><text x="1083.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (25 samples, 3.81%)</title><rect x="1038" y="356" width="45" height="15" fill="rgb(222,126,25)"/><text x="1041.00" y="366.50">oper..</text></g><g><title>malloc (libc-2.29.so) (25 samples, 3.81%)</title><rect x="1038" y="372" width="45" height="15" fill="rgb(223,189,19)"/><text x="1041.00" y="382.50">mall..</text></g><g><title>0x7f4bc322c3c4 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1082" y="388" width="1" height="15" fill="rgb(225,211,11)"/><text x="1085.00" y="398.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_get_insert_hint_unique_pos [clone .localalias.55] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1083" y="356" width="2" height="15" fill="rgb(250,119,8)"/><text x="1086.00" y="366.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (libstdc++.so.6.0.28) (2 samples, 0.30%)</title><rect x="1085" y="356" width="4" height="15" fill="rgb(245,90,10)"/><text x="1088.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (116 samples, 17.68%)</title><rect x="882" y="260" width="209" height="15" fill="rgb(237,164,25)"/><text x="885.00" y="270.50">onnxruntime::InferenceSessi..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (116 samples, 17.68%)</title><rect x="882" y="276" width="209" height="15" fill="rgb(239,151,52)"/><text x="885.00" y="286.50">onnxruntime::InferenceSessi..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (116 samples, 17.68%)</title><rect x="882" y="292" width="209" height="15" fill="rgb(212,94,8)"/><text x="885.00" y="302.50">onnxruntime::utils::Execute..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (116 samples, 17.68%)</title><rect x="882" y="308" width="209" height="15" fill="rgb(236,223,50)"/><text x="885.00" y="318.50">onnxruntime::utils::Execute..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (116 samples, 17.68%)</title><rect x="882" y="324" width="209" height="15" fill="rgb(242,6,3)"/><text x="885.00" y="334.50">onnxruntime::SequentialExec..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (32 samples, 4.88%)</title><rect x="1033" y="340" width="58" height="15" fill="rgb(225,42,3)"/><text x="1036.00" y="350.50">onnxru..</text></g><g><title>std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1089" y="356" width="2" height="15" fill="rgb(246,111,25)"/><text x="1092.00" y="366.50"></text></g><g><title>onnxruntime::python::GetPyObjFromTensor [clone .constprop.374] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1091" y="260" width="1" height="15" fill="rgb(207,1,5)"/><text x="1094.00" y="270.50"></text></g><g><title>0x7f4b811b5870 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1136" y="276" width="1" height="15" fill="rgb(246,209,18)"/><text x="1139.00" y="286.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 5.79%)</title><rect x="1092" y="260" width="69" height="15" fill="rgb(239,138,42)"/><text x="1095.00" y="270.50">pybind1..</text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 1.98%)</title><rect x="1137" y="276" width="24" height="15" fill="rgb(214,85,39)"/><text x="1140.00" y="286.50">p..</text></g><g><title>pybind11::list::list [clone .lto_priv.504] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1161" y="260" width="2" height="15" fill="rgb(231,99,5)"/><text x="1164.00" y="270.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1161" y="276" width="2" height="15" fill="rgb(243,90,12)"/><text x="1164.00" y="286.50"></text></g><g><title>0x7f4bb2cf77a0 (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="1164" y="292" width="2" height="15" fill="rgb(244,99,32)"/><text x="1167.00" y="302.50"></text></g><g><title>0x7f4bc322a945 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1166" y="292" width="2" height="15" fill="rgb(219,164,43)"/><text x="1169.00" y="302.50"></text></g><g><title>0x7f4bc322a961 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1168" y="292" width="2" height="15" fill="rgb(217,94,43)"/><text x="1171.00" y="302.50"></text></g><g><title>0x7f4bc322a9ff (libc-2.29.so) (2 samples, 0.30%)</title><rect x="1170" y="292" width="3" height="15" fill="rgb(226,144,24)"/><text x="1173.00" y="302.50"></text></g><g><title>0x7f4bc322ad07 (libc-2.29.so) (6 samples, 0.91%)</title><rect x="1173" y="292" width="11" height="15" fill="rgb(239,164,28)"/><text x="1176.00" y="302.50"></text></g><g><title>all (656 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(205,185,36)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:52) (222 samples, 33.84%)</title><rect x="790" y="52" width="400" height="15" fill="rgb(216,203,45)"/><text x="793.00" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_..</text></g><g><title>profile_ort (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:51) (222 samples, 33.84%)</title><rect x="790" y="68" width="400" height="15" fill="rgb(225,176,52)"/><text x="793.00" y="78.50">profile_ort (bench_MLPClassifier_default_b_cl_1000_50_..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:29) (222 samples, 33.84%)</title><rect x="790" y="84" width="400" height="15" fill="rgb(237,135,42)"/><text x="793.00" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1000_5..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:23) (215 samples, 32.77%)</title><rect x="803" y="100" width="387" height="15" fill="rgb(211,124,5)"/><text x="806.00" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_50_12..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (196 samples, 29.88%)</title><rect x="837" y="116" width="353" height="15" fill="rgb(247,110,34)"/><text x="840.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_as..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (196 samples, 29.88%)</title><rect x="837" y="132" width="353" height="15" fill="rgb(235,84,33)"/><text x="840.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_sk..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (193 samples, 29.42%)</title><rect x="842" y="148" width="348" height="15" fill="rgb(228,76,8)"/><text x="845.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (193 samples, 29.42%)</title><rect x="842" y="164" width="348" height="15" fill="rgb(234,80,8)"/><text x="845.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_infer..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (193 samples, 29.42%)</title><rect x="842" y="180" width="348" height="15" fill="rgb(240,104,12)"/><text x="845.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:136) (191 samples, 29.12%)</title><rect x="846" y="196" width="344" height="15" fill="rgb(245,96,22)"/><text x="849.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (172 samples, 26.22%)</title><rect x="880" y="212" width="310" height="15" fill="rgb(236,18,20)"/><text x="883.00" y="222.50">pybind11::cpp_function::dispatcher (onnxr..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (172 samples, 26.22%)</title><rect x="880" y="228" width="310" height="15" fill="rgb(217,22,54)"/><text x="883.00" y="238.50">void pybind11::cpp_function::initialize&lt;o..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (172 samples, 26.22%)</title><rect x="880" y="244" width="310" height="15" fill="rgb(230,142,36)"/><text x="883.00" y="254.50">onnxruntime::python::addObjectMethods(pyb..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 2.29%)</title><rect x="1163" y="260" width="27" height="15" fill="rgb(213,161,17)"/><text x="1166.00" y="270.50">s..</text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 2.29%)</title><rect x="1163" y="276" width="27" height="15" fill="rgb(246,24,26)"/><text x="1166.00" y="286.50">o..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.46%)</title><rect x="1184" y="292" width="6" height="15" fill="rgb(210,90,22)"/><text x="1187.00" y="302.50"></text></g><g><title>0x7f4bc322a961 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1188" y="308" width="2" height="15" fill="rgb(253,42,13)"/><text x="1191.00" y="318.50"></text></g></g></svg>