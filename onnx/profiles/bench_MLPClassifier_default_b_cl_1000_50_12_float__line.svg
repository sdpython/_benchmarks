<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="533.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:4) (16 samples, 3.14%)</title><rect x="0.0000%" y="52" width="3.1434%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="62.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (16 samples, 3.14%)</title><rect x="0.0000%" y="68" width="3.1434%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="78.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (16 samples, 3.14%)</title><rect x="0.0000%" y="84" width="3.1434%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="94.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (16 samples, 3.14%)</title><rect x="0.0000%" y="100" width="3.1434%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="110.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (16 samples, 3.14%)</title><rect x="0.0000%" y="116" width="3.1434%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="126.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (16 samples, 3.14%)</title><rect x="0.0000%" y="132" width="3.1434%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="142.50">_ca..</text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:7) (7 samples, 1.38%)</title><rect x="1.7682%" y="148" width="1.3752%" height="15" fill="rgb(207,160,47)"/><text x="2.0182%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.38%)</title><rect x="1.7682%" y="164" width="1.3752%" height="15" fill="rgb(228,23,34)"/><text x="2.0182%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.38%)</title><rect x="1.7682%" y="180" width="1.3752%" height="15" fill="rgb(218,30,26)"/><text x="2.0182%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.38%)</title><rect x="1.7682%" y="196" width="1.3752%" height="15" fill="rgb(220,122,19)"/><text x="2.0182%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.38%)</title><rect x="1.7682%" y="212" width="1.3752%" height="15" fill="rgb(250,228,42)"/><text x="2.0182%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.38%)</title><rect x="1.7682%" y="228" width="1.3752%" height="15" fill="rgb(240,193,28)"/><text x="2.0182%" y="238.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:40) (6 samples, 1.18%)</title><rect x="3.1434%" y="52" width="1.1788%" height="15" fill="rgb(216,20,37)"/><text x="3.3934%" y="62.50"></text></g><g><title>start (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:11) (6 samples, 1.18%)</title><rect x="3.1434%" y="68" width="1.1788%" height="15" fill="rgb(206,188,39)"/><text x="3.3934%" y="78.50"></text></g><g><title>setup_cache (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:39) (6 samples, 1.18%)</title><rect x="3.1434%" y="84" width="1.1788%" height="15" fill="rgb(217,207,13)"/><text x="3.3934%" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py:153) (6 samples, 1.18%)</title><rect x="3.1434%" y="100" width="1.1788%" height="15" fill="rgb(231,73,38)"/><text x="3.3934%" y="110.50"></text></g><g><title>fit (sklearn/neural_network/_multilayer_perceptron.py:995) (6 samples, 1.18%)</title><rect x="3.1434%" y="116" width="1.1788%" height="15" fill="rgb(225,20,46)"/><text x="3.3934%" y="126.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (15 samples, 2.95%)</title><rect x="7.8585%" y="212" width="2.9470%" height="15" fill="rgb(210,31,41)"/><text x="8.1085%" y="222.50">dg..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2871) (6 samples, 1.18%)</title><rect x="10.8055%" y="244" width="1.1788%" height="15" fill="rgb(221,200,47)"/><text x="11.0555%" y="254.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (80 samples, 15.72%)</title><rect x="12.1807%" y="340" width="15.7171%" height="15" fill="rgb(226,26,5)"/><text x="12.4307%" y="350.50">exec_blas_async_wait (li..</text></g><g><title>sched_yield (libc-2.29.so) (80 samples, 15.72%)</title><rect x="12.1807%" y="356" width="15.7171%" height="15" fill="rgb(249,33,26)"/><text x="12.4307%" y="366.50">sched_yield (libc-2.29.s..</text></g><g><title>dgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 1.38%)</title><rect x="28.0943%" y="356" width="1.3752%" height="15" fill="rgb(235,183,28)"/><text x="28.3443%" y="366.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:104) (140 samples, 27.50%)</title><rect x="7.2692%" y="180" width="27.5049%" height="15" fill="rgb(221,5,38)"/><text x="7.5192%" y="190.50">_forward_pass (sklearn/neural_network/_multi..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (138 samples, 27.11%)</title><rect x="7.6621%" y="196" width="27.1120%" height="15" fill="rgb(247,18,42)"/><text x="7.9121%" y="206.50">safe_sparse_dot (sklearn/utils/extmath.py:1..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (122 samples, 23.97%)</title><rect x="10.8055%" y="212" width="23.9686%" height="15" fill="rgb(241,131,45)"/><text x="11.0555%" y="222.50">ufunc_generic_call (ufunc_object.c:472..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (122 samples, 23.97%)</title><rect x="10.8055%" y="228" width="23.9686%" height="15" fill="rgb(249,31,29)"/><text x="11.0555%" y="238.50">PyUFunc_GenericFunction (ufunc_object...</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (115 samples, 22.59%)</title><rect x="12.1807%" y="244" width="22.5933%" height="15" fill="rgb(225,111,53)"/><text x="12.4307%" y="254.50">PyUFunc_GeneralizedFunction (ufunc_o..</text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (115 samples, 22.59%)</title><rect x="12.1807%" y="260" width="22.5933%" height="15" fill="rgb(238,160,17)"/><text x="12.4307%" y="270.50">DOUBLE_matmul (matmul.c.src:471)</text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (115 samples, 22.59%)</title><rect x="12.1807%" y="276" width="22.5933%" height="15" fill="rgb(214,148,48)"/><text x="12.4307%" y="286.50">cblas_dgemm (libopenblasp-r0-34a18dc..</text></g><g><title>dgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (115 samples, 22.59%)</title><rect x="12.1807%" y="292" width="22.5933%" height="15" fill="rgb(232,36,49)"/><text x="12.4307%" y="302.50">dgemm_thread_nn (libopenblasp-r0-34a..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (115 samples, 22.59%)</title><rect x="12.1807%" y="308" width="22.5933%" height="15" fill="rgb(209,103,24)"/><text x="12.4307%" y="318.50">gemm_driver (libopenblasp-r0-34a18dc..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (115 samples, 22.59%)</title><rect x="12.1807%" y="324" width="22.5933%" height="15" fill="rgb(229,88,8)"/><text x="12.4307%" y="334.50">exec_blas (libopenblasp-r0-34a18dc3...</text></g><g><title>inner_thread (libopenblasp-r0-34a18dc3.3.7.so) (35 samples, 6.88%)</title><rect x="27.8978%" y="340" width="6.8762%" height="15" fill="rgb(213,181,19)"/><text x="28.1478%" y="350.50">inner_thr..</text></g><g><title>sched_yield (libc-2.29.so) (27 samples, 5.30%)</title><rect x="29.4695%" y="356" width="5.3045%" height="15" fill="rgb(254,191,54)"/><text x="29.7195%" y="366.50">sched_..</text></g><g><title>DOUBLE_add (loops.c.src:1755) (10 samples, 1.96%)</title><rect x="34.9705%" y="260" width="1.9646%" height="15" fill="rgb(241,83,37)"/><text x="35.2205%" y="270.50">D..</text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (10 samples, 1.96%)</title><rect x="34.9705%" y="276" width="1.9646%" height="15" fill="rgb(233,36,39)"/><text x="35.2205%" y="286.50">r..</text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:604) (7 samples, 1.38%)</title><rect x="35.5599%" y="292" width="1.3752%" height="15" fill="rgb(226,3,54)"/><text x="35.8099%" y="302.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (7 samples, 1.38%)</title><rect x="35.5599%" y="308" width="1.3752%" height="15" fill="rgb(245,192,40)"/><text x="35.8099%" y="318.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:105) (17 samples, 3.34%)</title><rect x="34.7741%" y="180" width="3.3399%" height="15" fill="rgb(238,167,29)"/><text x="35.0241%" y="190.50">_fo..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (17 samples, 3.34%)</title><rect x="34.7741%" y="196" width="3.3399%" height="15" fill="rgb(232,182,51)"/><text x="35.0241%" y="206.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (17 samples, 3.34%)</title><rect x="34.7741%" y="212" width="3.3399%" height="15" fill="rgb(231,60,39)"/><text x="35.0241%" y="222.50">PyU..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (17 samples, 3.34%)</title><rect x="34.7741%" y="228" width="3.3399%" height="15" fill="rgb(208,69,12)"/><text x="35.0241%" y="238.50">exe..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (16 samples, 3.14%)</title><rect x="34.9705%" y="244" width="3.1434%" height="15" fill="rgb(235,93,37)"/><text x="35.2205%" y="254.50">ite..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (6 samples, 1.18%)</title><rect x="36.9352%" y="260" width="1.1788%" height="15" fill="rgb(213,116,39)"/><text x="37.1852%" y="270.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:109) (14 samples, 2.75%)</title><rect x="38.1139%" y="180" width="2.7505%" height="15" fill="rgb(222,207,29)"/><text x="38.3639%" y="190.50">_f..</text></g><g><title>relu (sklearn/neural_network/_base.py:75) (14 samples, 2.75%)</title><rect x="38.1139%" y="196" width="2.7505%" height="15" fill="rgb(206,96,30)"/><text x="38.3639%" y="206.50">re..</text></g><g><title>clip (&lt;__array_function__ internals&gt;:6) (12 samples, 2.36%)</title><rect x="38.5069%" y="212" width="2.3576%" height="15" fill="rgb(218,138,4)"/><text x="38.7569%" y="222.50">c..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 2.16%)</title><rect x="38.7033%" y="228" width="2.1611%" height="15" fill="rgb(250,191,14)"/><text x="38.9533%" y="238.50">a..</text></g><g><title>clip (numpy/core/fromnumeric.py:2037) (11 samples, 2.16%)</title><rect x="38.7033%" y="244" width="2.1611%" height="15" fill="rgb(239,60,40)"/><text x="38.9533%" y="254.50">c..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (11 samples, 2.16%)</title><rect x="38.7033%" y="260" width="2.1611%" height="15" fill="rgb(206,27,48)"/><text x="38.9533%" y="270.50">_..</text></g><g><title>array_clip (methods.c:2381) (11 samples, 2.16%)</title><rect x="38.7033%" y="276" width="2.1611%" height="15" fill="rgb(225,35,8)"/><text x="38.9533%" y="286.50">a..</text></g><g><title>forward_ndarray_method (methods.c:108) (11 samples, 2.16%)</title><rect x="38.7033%" y="292" width="2.1611%" height="15" fill="rgb(250,213,24)"/><text x="38.9533%" y="302.50">f..</text></g><g><title>_clip (numpy/core/_methods.py:132) (9 samples, 1.77%)</title><rect x="39.0963%" y="308" width="1.7682%" height="15" fill="rgb(247,123,22)"/><text x="39.3463%" y="318.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:85) (9 samples, 1.77%)</title><rect x="39.0963%" y="324" width="1.7682%" height="15" fill="rgb(231,138,38)"/><text x="39.3463%" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (9 samples, 1.77%)</title><rect x="39.0963%" y="340" width="1.7682%" height="15" fill="rgb(231,145,46)"/><text x="39.3463%" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (9 samples, 1.77%)</title><rect x="39.0963%" y="356" width="1.7682%" height="15" fill="rgb(251,118,11)"/><text x="39.3463%" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (9 samples, 1.77%)</title><rect x="39.0963%" y="372" width="1.7682%" height="15" fill="rgb(217,147,25)"/><text x="39.3463%" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (9 samples, 1.77%)</title><rect x="39.0963%" y="388" width="1.7682%" height="15" fill="rgb(247,81,37)"/><text x="39.3463%" y="398.50"></text></g><g><title>DOUBLE_clip (clip.c.src:97) (8 samples, 1.57%)</title><rect x="39.2927%" y="404" width="1.5717%" height="15" fill="rgb(209,12,38)"/><text x="39.5427%" y="414.50"></text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1072) (192 samples, 37.72%)</title><rect x="5.8939%" y="148" width="37.7210%" height="15" fill="rgb(227,1,9)"/><text x="6.1439%" y="158.50">predict_proba (sklearn/neural_network/_multilayer_perceptron...</text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:685) (185 samples, 36.35%)</title><rect x="7.2692%" y="164" width="36.3458%" height="15" fill="rgb(248,47,43)"/><text x="7.5192%" y="174.50">_predict (sklearn/neural_network/_multilayer_perceptron.py:..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:113) (14 samples, 2.75%)</title><rect x="40.8644%" y="180" width="2.7505%" height="15" fill="rgb(221,10,30)"/><text x="41.1144%" y="190.50">_f..</text></g><g><title>softmax (sklearn/neural_network/_base.py:94) (6 samples, 1.18%)</title><rect x="42.4361%" y="196" width="1.1788%" height="15" fill="rgb(210,229,1)"/><text x="42.6861%" y="206.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:54) (198 samples, 38.90%)</title><rect x="4.9116%" y="52" width="38.8998%" height="15" fill="rgb(222,148,37)"/><text x="5.1616%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py..</text></g><g><title>profile_skl (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:53) (198 samples, 38.90%)</title><rect x="4.9116%" y="68" width="38.8998%" height="15" fill="rgb(234,67,33)"/><text x="5.1616%" y="78.50">profile_skl (bench_MLPClassifier_default_b_cl_1000_50_12_float_..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:37) (198 samples, 38.90%)</title><rect x="4.9116%" y="84" width="38.8998%" height="15" fill="rgb(247,98,35)"/><text x="5.1616%" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1000_50_12_floa..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:31) (198 samples, 38.90%)</title><rect x="4.9116%" y="100" width="38.8998%" height="15" fill="rgb(247,138,52)"/><text x="5.1616%" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (197 samples, 38.70%)</title><rect x="5.1081%" y="116" width="38.7033%" height="15" fill="rgb(213,79,30)"/><text x="5.3581%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229) (197 samples, 38.70%)</title><rect x="5.1081%" y="132" width="38.7033%" height="15" fill="rgb(246,177,23)"/><text x="5.3581%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229)</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (25 samples, 4.91%)</title><rect x="44.2043%" y="388" width="4.9116%" height="15" fill="rgb(230,62,27)"/><text x="44.4543%" y="398.50">exec_b..</text></g><g><title>sched_yield (libc-2.29.so) (24 samples, 4.72%)</title><rect x="44.4008%" y="404" width="4.7151%" height="15" fill="rgb(216,154,8)"/><text x="44.6508%" y="414.50">sched..</text></g><g><title>sched_yield (libc-2.29.so) (13 samples, 2.55%)</title><rect x="49.1159%" y="404" width="2.5540%" height="15" fill="rgb(244,35,45)"/><text x="49.3659%" y="414.50">sc..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (40 samples, 7.86%)</title><rect x="44.0079%" y="244" width="7.8585%" height="15" fill="rgb(251,115,12)"/><text x="44.2579%" y="254.50">array_imple..</text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (40 samples, 7.86%)</title><rect x="44.0079%" y="260" width="7.8585%" height="15" fill="rgb(240,54,50)"/><text x="44.2579%" y="270.50">array_matri..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (40 samples, 7.86%)</title><rect x="44.0079%" y="276" width="7.8585%" height="15" fill="rgb(233,84,52)"/><text x="44.2579%" y="286.50">PyArray_Mat..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c:674) (39 samples, 7.66%)</title><rect x="44.2043%" y="292" width="7.6621%" height="15" fill="rgb(207,117,47)"/><text x="44.4543%" y="302.50">cblas_matr..</text></g><g><title>gemm (cblasfuncs.c:40) (39 samples, 7.66%)</title><rect x="44.2043%" y="308" width="7.6621%" height="15" fill="rgb(249,43,39)"/><text x="44.4543%" y="318.50">gemm (cbla..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (39 samples, 7.66%)</title><rect x="44.2043%" y="324" width="7.6621%" height="15" fill="rgb(209,38,44)"/><text x="44.4543%" y="334.50">cblas_sgem..</text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (39 samples, 7.66%)</title><rect x="44.2043%" y="340" width="7.6621%" height="15" fill="rgb(236,212,23)"/><text x="44.4543%" y="350.50">sgemm_thre..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (39 samples, 7.66%)</title><rect x="44.2043%" y="356" width="7.6621%" height="15" fill="rgb(242,79,21)"/><text x="44.4543%" y="366.50">gemm_drive..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (39 samples, 7.66%)</title><rect x="44.2043%" y="372" width="7.6621%" height="15" fill="rgb(211,96,35)"/><text x="44.4543%" y="382.50">exec_blas ..</text></g><g><title>inner_thread (libopenblasp-r0-34a18dc3.3.7.so) (14 samples, 2.75%)</title><rect x="49.1159%" y="388" width="2.7505%" height="15" fill="rgb(253,215,40)"/><text x="49.3659%" y="398.50">in..</text></g><g><title>compiled_run (&lt;string&gt;:11) (45 samples, 8.84%)</title><rect x="44.0079%" y="180" width="8.8409%" height="15" fill="rgb(211,81,21)"/><text x="44.2579%" y="190.50">compiled_run..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (45 samples, 8.84%)</title><rect x="44.0079%" y="196" width="8.8409%" height="15" fill="rgb(208,190,38)"/><text x="44.2579%" y="206.50">_run (mlprod..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (45 samples, 8.84%)</title><rect x="44.0079%" y="212" width="8.8409%" height="15" fill="rgb(235,213,38)"/><text x="44.2579%" y="222.50">numpy_dot_in..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (45 samples, 8.84%)</title><rect x="44.0079%" y="228" width="8.8409%" height="15" fill="rgb(237,122,38)"/><text x="44.2579%" y="238.50">dot (&lt;__arra..</text></g><g><title>compiled_run (&lt;string&gt;:13) (15 samples, 2.95%)</title><rect x="53.8310%" y="180" width="2.9470%" height="15" fill="rgb(244,218,35)"/><text x="54.0810%" y="190.50">co..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py:20) (15 samples, 2.95%)</title><rect x="53.8310%" y="196" width="2.9470%" height="15" fill="rgb(240,68,47)"/><text x="54.0810%" y="206.50">_r..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (15 samples, 2.95%)</title><rect x="53.8310%" y="212" width="2.9470%" height="15" fill="rgb(210,16,53)"/><text x="54.0810%" y="222.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (14 samples, 2.75%)</title><rect x="54.0275%" y="228" width="2.7505%" height="15" fill="rgb(235,124,12)"/><text x="54.2775%" y="238.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (14 samples, 2.75%)</title><rect x="54.0275%" y="244" width="2.7505%" height="15" fill="rgb(224,169,11)"/><text x="54.2775%" y="254.50">ex..</text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (14 samples, 2.75%)</title><rect x="54.0275%" y="260" width="2.7505%" height="15" fill="rgb(250,166,2)"/><text x="54.2775%" y="270.50">tr..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (28 samples, 5.50%)</title><rect x="56.9745%" y="244" width="5.5010%" height="15" fill="rgb(242,216,29)"/><text x="57.2245%" y="254.50">array_i..</text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (28 samples, 5.50%)</title><rect x="56.9745%" y="260" width="5.5010%" height="15" fill="rgb(230,116,27)"/><text x="57.2245%" y="270.50">array_m..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (28 samples, 5.50%)</title><rect x="56.9745%" y="276" width="5.5010%" height="15" fill="rgb(228,99,48)"/><text x="57.2245%" y="286.50">PyArray..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c:674) (28 samples, 5.50%)</title><rect x="56.9745%" y="292" width="5.5010%" height="15" fill="rgb(253,11,6)"/><text x="57.2245%" y="302.50">cblas_m..</text></g><g><title>gemm (cblasfuncs.c:40) (28 samples, 5.50%)</title><rect x="56.9745%" y="308" width="5.5010%" height="15" fill="rgb(247,143,39)"/><text x="57.2245%" y="318.50">gemm (c..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (28 samples, 5.50%)</title><rect x="56.9745%" y="324" width="5.5010%" height="15" fill="rgb(236,97,10)"/><text x="57.2245%" y="334.50">cblas_s..</text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (28 samples, 5.50%)</title><rect x="56.9745%" y="340" width="5.5010%" height="15" fill="rgb(233,208,19)"/><text x="57.2245%" y="350.50">sgemm_t..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (28 samples, 5.50%)</title><rect x="56.9745%" y="356" width="5.5010%" height="15" fill="rgb(216,164,2)"/><text x="57.2245%" y="366.50">gemm_dr..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (28 samples, 5.50%)</title><rect x="56.9745%" y="372" width="5.5010%" height="15" fill="rgb(220,129,5)"/><text x="57.2245%" y="382.50">exec_bl..</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (28 samples, 5.50%)</title><rect x="56.9745%" y="388" width="5.5010%" height="15" fill="rgb(242,17,10)"/><text x="57.2245%" y="398.50">exec_bl..</text></g><g><title>sched_yield (libc-2.29.so) (28 samples, 5.50%)</title><rect x="56.9745%" y="404" width="5.5010%" height="15" fill="rgb(242,107,0)"/><text x="57.2245%" y="414.50">sched_y..</text></g><g><title>compiled_run (&lt;string&gt;:14) (34 samples, 6.68%)</title><rect x="56.7780%" y="180" width="6.6798%" height="15" fill="rgb(251,28,31)"/><text x="57.0280%" y="190.50">compiled_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (34 samples, 6.68%)</title><rect x="56.7780%" y="196" width="6.6798%" height="15" fill="rgb(233,223,10)"/><text x="57.0280%" y="206.50">_run (mlp..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (34 samples, 6.68%)</title><rect x="56.7780%" y="212" width="6.6798%" height="15" fill="rgb(215,21,27)"/><text x="57.0280%" y="222.50">numpy_dot..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (33 samples, 6.48%)</title><rect x="56.9745%" y="228" width="6.4833%" height="15" fill="rgb(232,23,21)"/><text x="57.2245%" y="238.50">dot (&lt;__..</text></g><g><title>compiled_run (&lt;string&gt;:16) (11 samples, 2.16%)</title><rect x="63.4578%" y="180" width="2.1611%" height="15" fill="rgb(244,5,23)"/><text x="63.7078%" y="190.50">c..</text></g><g><title>compiled_run (&lt;string&gt;:18) (7 samples, 1.38%)</title><rect x="65.6189%" y="180" width="1.3752%" height="15" fill="rgb(226,81,46)"/><text x="65.8689%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (7 samples, 1.38%)</title><rect x="65.6189%" y="196" width="1.3752%" height="15" fill="rgb(247,70,30)"/><text x="65.8689%" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (7 samples, 1.38%)</title><rect x="65.6189%" y="212" width="1.3752%" height="15" fill="rgb(212,68,19)"/><text x="65.8689%" y="222.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (6 samples, 1.18%)</title><rect x="66.9941%" y="244" width="1.1788%" height="15" fill="rgb(240,187,13)"/><text x="67.2441%" y="254.50"></text></g><g><title>array_subscript (mapping.c:1539) (9 samples, 1.77%)</title><rect x="66.9941%" y="212" width="1.7682%" height="15" fill="rgb(223,113,26)"/><text x="67.2441%" y="222.50"></text></g><g><title>prepare_index (mapping.c:516) (9 samples, 1.77%)</title><rect x="66.9941%" y="228" width="1.7682%" height="15" fill="rgb(206,192,2)"/><text x="67.2441%" y="238.50"></text></g><g><title>compiled_run (&lt;string&gt;:19) (10 samples, 1.96%)</title><rect x="66.9941%" y="180" width="1.9646%" height="15" fill="rgb(241,108,4)"/><text x="67.2441%" y="190.50">c..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (10 samples, 1.96%)</title><rect x="66.9941%" y="196" width="1.9646%" height="15" fill="rgb(247,173,49)"/><text x="67.2441%" y="206.50">_..</text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:61) (129 samples, 25.34%)</title><rect x="43.8114%" y="52" width="25.3438%" height="15" fill="rgb(224,114,35)"/><text x="44.0614%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_..</text></g><g><title>profile_pyrtc (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:60) (129 samples, 25.34%)</title><rect x="43.8114%" y="68" width="25.3438%" height="15" fill="rgb(245,159,27)"/><text x="44.0614%" y="78.50">profile_pyrtc (bench_MLPClassifier_defau..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:37) (129 samples, 25.34%)</title><rect x="43.8114%" y="84" width="25.3438%" height="15" fill="rgb(245,172,44)"/><text x="44.0614%" y="94.50">setup_profile (bench_MLPClassifier_defau..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:31) (129 samples, 25.34%)</title><rect x="43.8114%" y="100" width="25.3438%" height="15" fill="rgb(236,23,11)"/><text x="44.0614%" y="110.50">profile (bench_MLPClassifier_default_b_c..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (129 samples, 25.34%)</title><rect x="43.8114%" y="116" width="25.3438%" height="15" fill="rgb(205,117,38)"/><text x="44.0614%" y="126.50">time_predict (mlprodict/asv_benchmark/co..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (129 samples, 25.34%)</title><rect x="43.8114%" y="132" width="25.3438%" height="15" fill="rgb(237,72,25)"/><text x="44.0614%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (129 samples, 25.34%)</title><rect x="43.8114%" y="148" width="25.3438%" height="15" fill="rgb(244,70,9)"/><text x="44.0614%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (129 samples, 25.34%)</title><rect x="43.8114%" y="164" width="25.3438%" height="15" fill="rgb(217,125,39)"/><text x="44.0614%" y="174.50">_run_sequence_runtime_compiled (mlprodic..</text></g><g><title>onnxruntime::FunctionKernel::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 2.36%)</title><rect x="72.6916%" y="324" width="2.3576%" height="15" fill="rgb(235,36,10)"/><text x="72.9416%" y="334.50">o..</text></g><g><title>std::_Function_handler&lt;onnxruntime::common::Status(void*, OrtApi const*, OrtKernelContext*), onnxruntime::DNNLExecutionProvider::Compile(std::vector&lt;onnxruntime::Node*, std::allocator&lt;onnxruntime::Node*&gt; &gt; const&amp;, std::vector&lt;onnxruntime::NodeComputeInfo, std::allocator&lt;onnxruntime::NodeComputeInfo&gt; &gt;&amp;)::{lambda(void*, OrtApi const*, OrtKernelContext*)#3}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 2.36%)</title><rect x="72.6916%" y="340" width="2.3576%" height="15" fill="rgb(251,123,47)"/><text x="72.9416%" y="350.50">s..</text></g><g><title>onnxruntime::ort_dnnl::DnnlFuncKernel&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 2.36%)</title><rect x="72.6916%" y="356" width="2.3576%" height="15" fill="rgb(221,13,13)"/><text x="72.9416%" y="366.50">o..</text></g><g><title>dnnl_primitive_execute (onnxruntime/capi/libdnnl.so.1) (12 samples, 2.36%)</title><rect x="72.6916%" y="372" width="2.3576%" height="15" fill="rgb(238,131,9)"/><text x="72.9416%" y="382.50">d..</text></g><g><title>dnnl_primitive::execute (onnxruntime/capi/libdnnl.so.1) (12 samples, 2.36%)</title><rect x="72.6916%" y="388" width="2.3576%" height="15" fill="rgb(211,50,8)"/><text x="72.9416%" y="398.50">d..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute (onnxruntime/capi/libdnnl.so.1) (12 samples, 2.36%)</title><rect x="72.6916%" y="404" width="2.3576%" height="15" fill="rgb(245,182,24)"/><text x="72.9416%" y="414.50">d..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute_forward (onnxruntime/capi/libdnnl.so.1) (12 samples, 2.36%)</title><rect x="72.6916%" y="420" width="2.3576%" height="15" fill="rgb(242,14,37)"/><text x="72.9416%" y="430.50">d..</text></g><g><title>GOMP_parallel@GOMP_4.0 (libiomp5.so) (12 samples, 2.36%)</title><rect x="72.6916%" y="436" width="2.3576%" height="15" fill="rgb(246,228,12)"/><text x="72.9416%" y="446.50">G..</text></g><g><title>__kmp_join_call (libiomp5.so) (12 samples, 2.36%)</title><rect x="72.6916%" y="452" width="2.3576%" height="15" fill="rgb(213,55,15)"/><text x="72.9416%" y="462.50">_..</text></g><g><title>__kmp_internal_join (libiomp5.so) (12 samples, 2.36%)</title><rect x="72.6916%" y="468" width="2.3576%" height="15" fill="rgb(209,9,3)"/><text x="72.9416%" y="478.50">_..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (12 samples, 2.36%)</title><rect x="72.6916%" y="484" width="2.3576%" height="15" fill="rgb(230,59,30)"/><text x="72.9416%" y="494.50">_..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (12 samples, 2.36%)</title><rect x="72.6916%" y="500" width="2.3576%" height="15" fill="rgb(209,121,21)"/><text x="72.9416%" y="510.50">_..</text></g><g><title>__kmpc_fork_call (libiomp5.so) (64 samples, 12.57%)</title><rect x="75.8350%" y="420" width="12.5737%" height="15" fill="rgb(220,109,13)"/><text x="76.0850%" y="430.50">__kmpc_fork_call (l..</text></g><g><title>__kmp_join_call (libiomp5.so) (64 samples, 12.57%)</title><rect x="75.8350%" y="436" width="12.5737%" height="15" fill="rgb(232,18,1)"/><text x="76.0850%" y="446.50">__kmp_join_call (li..</text></g><g><title>__kmp_internal_join (libiomp5.so) (64 samples, 12.57%)</title><rect x="75.8350%" y="452" width="12.5737%" height="15" fill="rgb(215,41,42)"/><text x="76.0850%" y="462.50">__kmp_internal_join..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (64 samples, 12.57%)</title><rect x="75.8350%" y="468" width="12.5737%" height="15" fill="rgb(224,123,36)"/><text x="76.0850%" y="478.50">__kmp_join_barrier ..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (64 samples, 12.57%)</title><rect x="75.8350%" y="484" width="12.5737%" height="15" fill="rgb(240,125,3)"/><text x="76.0850%" y="494.50">_INTERNAL_25_______..</text></g><g><title>sched_yield (libc-2.29.so) (44 samples, 8.64%)</title><rect x="79.7642%" y="500" width="8.6444%" height="15" fill="rgb(205,98,50)"/><text x="80.0142%" y="510.50">sched_yield ..</text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (81 samples, 15.91%)</title><rect x="75.0491%" y="324" width="15.9136%" height="15" fill="rgb(205,185,37)"/><text x="75.2991%" y="334.50">onnxruntime::Gemm&lt;float&gt;..</text></g><g><title>onnxruntime::math::Gemm&lt;float, onnxruntime::concurrency::ThreadPool&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (77 samples, 15.13%)</title><rect x="75.8350%" y="340" width="15.1277%" height="15" fill="rgb(238,207,15)"/><text x="76.0850%" y="350.50">onnxruntime::math::Gemm..</text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (77 samples, 15.13%)</title><rect x="75.8350%" y="356" width="15.1277%" height="15" fill="rgb(213,199,42)"/><text x="76.0850%" y="366.50">cblas_sgemm (onnxruntim..</text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (77 samples, 15.13%)</title><rect x="75.8350%" y="372" width="15.1277%" height="15" fill="rgb(235,201,11)"/><text x="76.0850%" y="382.50">sgemm_ (onnxruntime/cap..</text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (77 samples, 15.13%)</title><rect x="75.8350%" y="388" width="15.1277%" height="15" fill="rgb(207,46,11)"/><text x="76.0850%" y="398.50">mkl_blas_sgemm (onnxrun..</text></g><g><title>mkl_blas_sgemm_omp_driver_v1 (onnxruntime/capi/libmklml_intel.so) (77 samples, 15.13%)</title><rect x="75.8350%" y="404" width="15.1277%" height="15" fill="rgb(241,35,35)"/><text x="76.0850%" y="414.50">mkl_blas_sgemm_omp_driv..</text></g><g><title>mkl_blas_xsgemm (onnxruntime/capi/libmklml_intel.so) (13 samples, 2.55%)</title><rect x="88.4086%" y="420" width="2.5540%" height="15" fill="rgb(243,32,47)"/><text x="88.6586%" y="430.50">mk..</text></g><g><title>mkl_blas_avx_xsgemm (onnxruntime/capi/libmklml_intel.so) (13 samples, 2.55%)</title><rect x="88.4086%" y="436" width="2.5540%" height="15" fill="rgb(247,202,23)"/><text x="88.6586%" y="446.50">mk..</text></g><g><title>mkl_blas_avx_sgemm_pst (onnxruntime/capi/libmklml_intel.so) (13 samples, 2.55%)</title><rect x="88.4086%" y="452" width="2.5540%" height="15" fill="rgb(219,102,11)"/><text x="88.6586%" y="462.50">mk..</text></g><g><title>operator new (libstdc++.so.6.0.28) (14 samples, 2.75%)</title><rect x="92.1415%" y="340" width="2.7505%" height="15" fill="rgb(243,110,44)"/><text x="92.3915%" y="350.50">op..</text></g><g><title>malloc (libc-2.29.so) (13 samples, 2.55%)</title><rect x="92.3379%" y="356" width="2.5540%" height="15" fill="rgb(222,74,54)"/><text x="92.5879%" y="366.50">ma..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (121 samples, 23.77%)</title><rect x="71.7092%" y="244" width="23.7721%" height="15" fill="rgb(216,99,12)"/><text x="71.9592%" y="254.50">onnxruntime::InferenceSession::Run (on..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (121 samples, 23.77%)</title><rect x="71.7092%" y="260" width="23.7721%" height="15" fill="rgb(226,22,26)"/><text x="71.9592%" y="270.50">onnxruntime::InferenceSession::Run (on..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (121 samples, 23.77%)</title><rect x="71.7092%" y="276" width="23.7721%" height="15" fill="rgb(217,163,10)"/><text x="71.9592%" y="286.50">onnxruntime::utils::ExecuteGraph (onnx..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (121 samples, 23.77%)</title><rect x="71.7092%" y="292" width="23.7721%" height="15" fill="rgb(213,25,53)"/><text x="71.9592%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (121 samples, 23.77%)</title><rect x="71.7092%" y="308" width="23.7721%" height="15" fill="rgb(252,105,26)"/><text x="71.9592%" y="318.50">onnxruntime::SequentialExecutor::Execu..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 3.54%)</title><rect x="91.9450%" y="324" width="3.5363%" height="15" fill="rgb(220,39,43)"/><text x="92.1950%" y="334.50">onn..</text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 1.38%)</title><rect x="95.4813%" y="244" width="1.3752%" height="15" fill="rgb(229,68,48)"/><text x="95.7313%" y="254.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 1.38%)</title><rect x="98.0354%" y="292" width="1.3752%" height="15" fill="rgb(252,8,32)"/><text x="98.2854%" y="302.50"></text></g><g><title>onnxruntime::python::AddNonTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 2.75%)</title><rect x="96.8566%" y="244" width="2.7505%" height="15" fill="rgb(223,20,43)"/><text x="97.1066%" y="254.50">on..</text></g><g><title>onnxruntime::python::AddNonTensor&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 2.75%)</title><rect x="96.8566%" y="260" width="2.7505%" height="15" fill="rgb(229,81,49)"/><text x="97.1066%" y="270.50">on..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 2.75%)</title><rect x="96.8566%" y="276" width="2.7505%" height="15" fill="rgb(236,28,36)"/><text x="97.1066%" y="286.50">py..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (146 samples, 28.68%)</title><rect x="71.1198%" y="164" width="28.6837%" height="15" fill="rgb(249,185,26)"/><text x="71.3698%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_infe..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (146 samples, 28.68%)</title><rect x="71.1198%" y="180" width="28.6837%" height="15" fill="rgb(249,174,33)"/><text x="71.3698%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:140) (145 samples, 28.49%)</title><rect x="71.3163%" y="196" width="28.4872%" height="15" fill="rgb(233,201,37)"/><text x="71.5663%" y="206.50">run (onnxruntime/capi/session.py:140)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (143 samples, 28.09%)</title><rect x="71.7092%" y="212" width="28.0943%" height="15" fill="rgb(221,78,26)"/><text x="71.9592%" y="222.50">pybind11::cpp_function::dispatcher (onnxrunti..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (143 samples, 28.09%)</title><rect x="71.7092%" y="228" width="28.0943%" height="15" fill="rgb(250,127,30)"/><text x="71.9592%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxr..</text></g><g><title>all (509 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:68) (157 samples, 30.84%)</title><rect x="69.1552%" y="52" width="30.8448%" height="15" fill="rgb(229,67,23)"/><text x="69.4052%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_50..</text></g><g><title>profile_ort (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:67) (157 samples, 30.84%)</title><rect x="69.1552%" y="68" width="30.8448%" height="15" fill="rgb(249,83,47)"/><text x="69.4052%" y="78.50">profile_ort (bench_MLPClassifier_default_b_cl_1000..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:37) (156 samples, 30.65%)</title><rect x="69.3517%" y="84" width="30.6483%" height="15" fill="rgb(215,43,3)"/><text x="69.6017%" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_50_12_float_.py:31) (156 samples, 30.65%)</title><rect x="69.3517%" y="100" width="30.6483%" height="15" fill="rgb(238,154,13)"/><text x="69.6017%" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_50..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (147 samples, 28.88%)</title><rect x="71.1198%" y="116" width="28.8802%" height="15" fill="rgb(219,56,2)"/><text x="71.3698%" y="126.50">time_predict (mlprodict/asv_benchmark/common_a..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (147 samples, 28.88%)</title><rect x="71.1198%" y="132" width="28.8802%" height="15" fill="rgb(233,0,4)"/><text x="71.3698%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_s..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (147 samples, 28.88%)</title><rect x="71.1198%" y="148" width="28.8802%" height="15" fill="rgb(235,30,7)"/><text x="71.3698%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g></svg></svg>