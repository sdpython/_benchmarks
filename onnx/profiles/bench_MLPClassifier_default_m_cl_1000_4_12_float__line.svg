<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="533.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:4) (20 samples, 2.68%)</title><rect x="0.0000%" y="52" width="2.6774%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="62.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (20 samples, 2.68%)</title><rect x="0.0000%" y="68" width="2.6774%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="78.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (20 samples, 2.68%)</title><rect x="0.0000%" y="84" width="2.6774%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="94.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (20 samples, 2.68%)</title><rect x="0.0000%" y="100" width="2.6774%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="110.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (20 samples, 2.68%)</title><rect x="0.0000%" y="116" width="2.6774%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="126.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (20 samples, 2.68%)</title><rect x="0.0000%" y="132" width="2.6774%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="142.50">_c..</text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_m_cl.py:7) (9 samples, 1.20%)</title><rect x="1.4726%" y="148" width="1.2048%" height="15" fill="rgb(207,160,47)"/><text x="1.7226%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 1.20%)</title><rect x="1.4726%" y="164" width="1.2048%" height="15" fill="rgb(228,23,34)"/><text x="1.7226%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 1.20%)</title><rect x="1.4726%" y="180" width="1.2048%" height="15" fill="rgb(218,30,26)"/><text x="1.7226%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 1.20%)</title><rect x="1.4726%" y="196" width="1.2048%" height="15" fill="rgb(220,122,19)"/><text x="1.7226%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 1.20%)</title><rect x="1.4726%" y="212" width="1.2048%" height="15" fill="rgb(250,228,42)"/><text x="1.7226%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 1.20%)</title><rect x="1.4726%" y="228" width="1.2048%" height="15" fill="rgb(240,193,28)"/><text x="1.7226%" y="238.50"></text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1071) (8 samples, 1.07%)</title><rect x="3.7483%" y="148" width="1.0710%" height="15" fill="rgb(216,20,37)"/><text x="3.9983%" y="158.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (8 samples, 1.07%)</title><rect x="3.7483%" y="164" width="1.0710%" height="15" fill="rgb(206,188,39)"/><text x="3.9983%" y="174.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:667) (18 samples, 2.41%)</title><rect x="4.8193%" y="164" width="2.4096%" height="15" fill="rgb(217,207,13)"/><text x="5.0693%" y="174.50">_p..</text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (19 samples, 2.54%)</title><rect x="8.4337%" y="212" width="2.5435%" height="15" fill="rgb(231,73,38)"/><text x="8.6837%" y="222.50">dg..</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (30 samples, 4.02%)</title><rect x="12.3159%" y="340" width="4.0161%" height="15" fill="rgb(225,20,46)"/><text x="12.5659%" y="350.50">exec..</text></g><g><title>sched_yield (libc-2.29.so) (29 samples, 3.88%)</title><rect x="12.4498%" y="356" width="3.8822%" height="15" fill="rgb(210,31,41)"/><text x="12.6998%" y="366.50">sche..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (72 samples, 9.64%)</title><rect x="7.6305%" y="196" width="9.6386%" height="15" fill="rgb(221,200,47)"/><text x="7.8805%" y="206.50">safe_sparse_do..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (44 samples, 5.89%)</title><rect x="11.3788%" y="212" width="5.8902%" height="15" fill="rgb(226,26,5)"/><text x="11.6288%" y="222.50">ufunc_g..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (44 samples, 5.89%)</title><rect x="11.3788%" y="228" width="5.8902%" height="15" fill="rgb(249,33,26)"/><text x="11.6288%" y="238.50">PyUFunc..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (42 samples, 5.62%)</title><rect x="11.6466%" y="244" width="5.6225%" height="15" fill="rgb(235,183,28)"/><text x="11.8966%" y="254.50">PyUFunc..</text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (42 samples, 5.62%)</title><rect x="11.6466%" y="260" width="5.6225%" height="15" fill="rgb(221,5,38)"/><text x="11.8966%" y="270.50">DOUBLE_..</text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (42 samples, 5.62%)</title><rect x="11.6466%" y="276" width="5.6225%" height="15" fill="rgb(247,18,42)"/><text x="11.8966%" y="286.50">cblas_d..</text></g><g><title>dgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (42 samples, 5.62%)</title><rect x="11.6466%" y="292" width="5.6225%" height="15" fill="rgb(241,131,45)"/><text x="11.8966%" y="302.50">dgemm_t..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (42 samples, 5.62%)</title><rect x="11.6466%" y="308" width="5.6225%" height="15" fill="rgb(249,31,29)"/><text x="11.8966%" y="318.50">gemm_dr..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (41 samples, 5.49%)</title><rect x="11.7805%" y="324" width="5.4886%" height="15" fill="rgb(225,111,53)"/><text x="12.0305%" y="334.50">exec_bl..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:104) (73 samples, 9.77%)</title><rect x="7.6305%" y="180" width="9.7724%" height="15" fill="rgb(238,160,17)"/><text x="7.8805%" y="190.50">_forward_pass ..</text></g><g><title>DOUBLE_add (loops.c.src:1755) (12 samples, 1.61%)</title><rect x="17.4029%" y="260" width="1.6064%" height="15" fill="rgb(214,148,48)"/><text x="17.6529%" y="270.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (12 samples, 1.61%)</title><rect x="17.4029%" y="276" width="1.6064%" height="15" fill="rgb(232,36,49)"/><text x="17.6529%" y="286.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:604) (8 samples, 1.07%)</title><rect x="17.9384%" y="292" width="1.0710%" height="15" fill="rgb(209,103,24)"/><text x="18.1884%" y="302.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (8 samples, 1.07%)</title><rect x="17.9384%" y="308" width="1.0710%" height="15" fill="rgb(229,88,8)"/><text x="18.1884%" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (20 samples, 2.68%)</title><rect x="17.4029%" y="196" width="2.6774%" height="15" fill="rgb(213,181,19)"/><text x="17.6529%" y="206.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (20 samples, 2.68%)</title><rect x="17.4029%" y="212" width="2.6774%" height="15" fill="rgb(254,191,54)"/><text x="17.6529%" y="222.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (20 samples, 2.68%)</title><rect x="17.4029%" y="228" width="2.6774%" height="15" fill="rgb(241,83,37)"/><text x="17.6529%" y="238.50">ex..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (20 samples, 2.68%)</title><rect x="17.4029%" y="244" width="2.6774%" height="15" fill="rgb(233,36,39)"/><text x="17.6529%" y="254.50">it..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:105) (21 samples, 2.81%)</title><rect x="17.4029%" y="180" width="2.8112%" height="15" fill="rgb(226,3,54)"/><text x="17.6529%" y="190.50">_f..</text></g><g><title>DOUBLE_clip (clip.c.src:96) (15 samples, 2.01%)</title><rect x="22.8916%" y="404" width="2.0080%" height="15" fill="rgb(245,192,40)"/><text x="23.1416%" y="414.50">D..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (46 samples, 6.16%)</title><rect x="22.6238%" y="340" width="6.1580%" height="15" fill="rgb(238,167,29)"/><text x="22.8738%" y="350.50">ufunc_ge..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (45 samples, 6.02%)</title><rect x="22.7577%" y="356" width="6.0241%" height="15" fill="rgb(232,182,51)"/><text x="23.0077%" y="366.50">PyUFunc_..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (45 samples, 6.02%)</title><rect x="22.7577%" y="372" width="6.0241%" height="15" fill="rgb(231,60,39)"/><text x="23.0077%" y="382.50">execute_..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (44 samples, 5.89%)</title><rect x="22.8916%" y="388" width="5.8902%" height="15" fill="rgb(208,69,12)"/><text x="23.1416%" y="398.50">iterato..</text></g><g><title>DOUBLE_clip (clip.c.src:97) (29 samples, 3.88%)</title><rect x="24.8996%" y="404" width="3.8822%" height="15" fill="rgb(235,93,37)"/><text x="25.1496%" y="414.50">DOUB..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:109) (64 samples, 8.57%)</title><rect x="20.3481%" y="180" width="8.5676%" height="15" fill="rgb(213,116,39)"/><text x="20.5981%" y="190.50">_forward_pas..</text></g><g><title>relu (sklearn/neural_network/_base.py:75) (64 samples, 8.57%)</title><rect x="20.3481%" y="196" width="8.5676%" height="15" fill="rgb(222,207,29)"/><text x="20.5981%" y="206.50">relu (sklear..</text></g><g><title>clip (&lt;__array_function__ internals&gt;:6) (60 samples, 8.03%)</title><rect x="20.8835%" y="212" width="8.0321%" height="15" fill="rgb(206,96,30)"/><text x="21.1335%" y="222.50">clip (&lt;__ar..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (59 samples, 7.90%)</title><rect x="21.0174%" y="228" width="7.8983%" height="15" fill="rgb(218,138,4)"/><text x="21.2674%" y="238.50">array_imple..</text></g><g><title>clip (numpy/core/fromnumeric.py:2037) (59 samples, 7.90%)</title><rect x="21.0174%" y="244" width="7.8983%" height="15" fill="rgb(250,191,14)"/><text x="21.2674%" y="254.50">clip (numpy..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (58 samples, 7.76%)</title><rect x="21.1513%" y="260" width="7.7644%" height="15" fill="rgb(239,60,40)"/><text x="21.4013%" y="270.50">_wrapfunc (..</text></g><g><title>array_clip (methods.c:2381) (57 samples, 7.63%)</title><rect x="21.2851%" y="276" width="7.6305%" height="15" fill="rgb(206,27,48)"/><text x="21.5351%" y="286.50">array_clip..</text></g><g><title>forward_ndarray_method (methods.c:108) (57 samples, 7.63%)</title><rect x="21.2851%" y="292" width="7.6305%" height="15" fill="rgb(225,35,8)"/><text x="21.5351%" y="302.50">forward_nd..</text></g><g><title>_clip (numpy/core/_methods.py:132) (47 samples, 6.29%)</title><rect x="22.6238%" y="308" width="6.2918%" height="15" fill="rgb(250,213,24)"/><text x="22.8738%" y="318.50">_clip (n..</text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:85) (47 samples, 6.29%)</title><rect x="22.6238%" y="324" width="6.2918%" height="15" fill="rgb(247,123,22)"/><text x="22.8738%" y="334.50">_clip_de..</text></g><g><title>exp (libm-2.29.so) (10 samples, 1.34%)</title><rect x="30.3882%" y="292" width="1.3387%" height="15" fill="rgb(231,138,38)"/><text x="30.6382%" y="302.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py:93) (14 samples, 1.87%)</title><rect x="29.9866%" y="196" width="1.8742%" height="15" fill="rgb(231,145,46)"/><text x="30.2366%" y="206.50">s..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (13 samples, 1.74%)</title><rect x="30.1205%" y="212" width="1.7403%" height="15" fill="rgb(251,118,11)"/><text x="30.3705%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (12 samples, 1.61%)</title><rect x="30.2544%" y="228" width="1.6064%" height="15" fill="rgb(217,147,25)"/><text x="30.5044%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (11 samples, 1.47%)</title><rect x="30.3882%" y="244" width="1.4726%" height="15" fill="rgb(247,81,37)"/><text x="30.6382%" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (11 samples, 1.47%)</title><rect x="30.3882%" y="260" width="1.4726%" height="15" fill="rgb(209,12,38)"/><text x="30.6382%" y="270.50"></text></g><g><title>PyUFunc_d_d (loops.c.src:190) (11 samples, 1.47%)</title><rect x="30.3882%" y="276" width="1.4726%" height="15" fill="rgb(227,1,9)"/><text x="30.6382%" y="286.50"></text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1072) (213 samples, 28.51%)</title><rect x="4.8193%" y="148" width="28.5141%" height="15" fill="rgb(248,47,43)"/><text x="5.0693%" y="158.50">predict_proba (sklearn/neural_network/_multila..</text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:685) (192 samples, 25.70%)</title><rect x="7.6305%" y="164" width="25.7028%" height="15" fill="rgb(221,10,30)"/><text x="7.8805%" y="174.50">_predict (sklearn/neural_network/_multila..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:113) (33 samples, 4.42%)</title><rect x="28.9157%" y="180" width="4.4177%" height="15" fill="rgb(210,229,1)"/><text x="29.1657%" y="190.50">_forw..</text></g><g><title>softmax (sklearn/neural_network/_base.py:94) (11 samples, 1.47%)</title><rect x="31.8608%" y="196" width="1.4726%" height="15" fill="rgb(222,148,37)"/><text x="32.1108%" y="206.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:54) (223 samples, 29.85%)</title><rect x="3.6145%" y="52" width="29.8527%" height="15" fill="rgb(234,67,33)"/><text x="3.8645%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_m_cl_1000_..</text></g><g><title>profile_skl (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:53) (223 samples, 29.85%)</title><rect x="3.6145%" y="68" width="29.8527%" height="15" fill="rgb(247,98,35)"/><text x="3.8645%" y="78.50">profile_skl (bench_MLPClassifier_default_m_cl_10..</text></g><g><title>setup_profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:37) (223 samples, 29.85%)</title><rect x="3.6145%" y="84" width="29.8527%" height="15" fill="rgb(247,138,52)"/><text x="3.8645%" y="94.50">setup_profile (bench_MLPClassifier_default_m_cl_..</text></g><g><title>profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:31) (223 samples, 29.85%)</title><rect x="3.6145%" y="100" width="29.8527%" height="15" fill="rgb(213,79,30)"/><text x="3.8645%" y="110.50">profile (bench_MLPClassifier_default_m_cl_1000_4..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (223 samples, 29.85%)</title><rect x="3.6145%" y="116" width="29.8527%" height="15" fill="rgb(246,177,23)"/><text x="3.8645%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229) (222 samples, 29.72%)</title><rect x="3.7483%" y="132" width="29.7189%" height="15" fill="rgb(230,62,27)"/><text x="3.9983%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl..</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (16 samples, 2.14%)</title><rect x="34.4043%" y="388" width="2.1419%" height="15" fill="rgb(216,154,8)"/><text x="34.6543%" y="398.50">e..</text></g><g><title>sched_yield (libc-2.29.so) (16 samples, 2.14%)</title><rect x="34.4043%" y="404" width="2.1419%" height="15" fill="rgb(244,35,45)"/><text x="34.6543%" y="414.50">s..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (19 samples, 2.54%)</title><rect x="34.1365%" y="244" width="2.5435%" height="15" fill="rgb(251,115,12)"/><text x="34.3865%" y="254.50">ar..</text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (19 samples, 2.54%)</title><rect x="34.1365%" y="260" width="2.5435%" height="15" fill="rgb(240,54,50)"/><text x="34.3865%" y="270.50">ar..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (19 samples, 2.54%)</title><rect x="34.1365%" y="276" width="2.5435%" height="15" fill="rgb(233,84,52)"/><text x="34.3865%" y="286.50">Py..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c:674) (17 samples, 2.28%)</title><rect x="34.4043%" y="292" width="2.2758%" height="15" fill="rgb(207,117,47)"/><text x="34.6543%" y="302.50">c..</text></g><g><title>gemm (cblasfuncs.c:40) (17 samples, 2.28%)</title><rect x="34.4043%" y="308" width="2.2758%" height="15" fill="rgb(249,43,39)"/><text x="34.6543%" y="318.50">g..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (17 samples, 2.28%)</title><rect x="34.4043%" y="324" width="2.2758%" height="15" fill="rgb(209,38,44)"/><text x="34.6543%" y="334.50">c..</text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (17 samples, 2.28%)</title><rect x="34.4043%" y="340" width="2.2758%" height="15" fill="rgb(236,212,23)"/><text x="34.6543%" y="350.50">s..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (17 samples, 2.28%)</title><rect x="34.4043%" y="356" width="2.2758%" height="15" fill="rgb(242,79,21)"/><text x="34.6543%" y="366.50">g..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (17 samples, 2.28%)</title><rect x="34.4043%" y="372" width="2.2758%" height="15" fill="rgb(211,96,35)"/><text x="34.6543%" y="382.50">e..</text></g><g><title>sgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (10 samples, 1.34%)</title><rect x="36.6801%" y="244" width="1.3387%" height="15" fill="rgb(253,215,40)"/><text x="36.9301%" y="254.50"></text></g><g><title>compiled_run (&lt;string&gt;:11) (37 samples, 4.95%)</title><rect x="34.0027%" y="180" width="4.9531%" height="15" fill="rgb(211,81,21)"/><text x="34.2527%" y="190.50">compil..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (37 samples, 4.95%)</title><rect x="34.0027%" y="196" width="4.9531%" height="15" fill="rgb(208,190,38)"/><text x="34.2527%" y="206.50">_run (..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (37 samples, 4.95%)</title><rect x="34.0027%" y="212" width="4.9531%" height="15" fill="rgb(235,213,38)"/><text x="34.2527%" y="222.50">numpy_..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (37 samples, 4.95%)</title><rect x="34.0027%" y="228" width="4.9531%" height="15" fill="rgb(237,122,38)"/><text x="34.2527%" y="238.50">dot (&lt;..</text></g><g><title>FLOAT_maximum (loops.c.src:1867) (16 samples, 2.14%)</title><rect x="39.2236%" y="276" width="2.1419%" height="15" fill="rgb(244,218,35)"/><text x="39.4736%" y="286.50">F..</text></g><g><title>FLOAT_maximum (loops.c.src:1871) (24 samples, 3.21%)</title><rect x="42.1687%" y="276" width="3.2129%" height="15" fill="rgb(240,68,47)"/><text x="42.4187%" y="286.50">FLO..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (50 samples, 6.69%)</title><rect x="39.0897%" y="212" width="6.6934%" height="15" fill="rgb(210,16,53)"/><text x="39.3397%" y="222.50">ufunc_gen..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (49 samples, 6.56%)</title><rect x="39.2236%" y="228" width="6.5596%" height="15" fill="rgb(235,124,12)"/><text x="39.4736%" y="238.50">PyUFunc_G..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (49 samples, 6.56%)</title><rect x="39.2236%" y="244" width="6.5596%" height="15" fill="rgb(224,169,11)"/><text x="39.4736%" y="254.50">execute_l..</text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (49 samples, 6.56%)</title><rect x="39.2236%" y="260" width="6.5596%" height="15" fill="rgb(250,166,2)"/><text x="39.4736%" y="270.50">trivial_t..</text></g><g><title>compiled_run (&lt;string&gt;:13) (51 samples, 6.83%)</title><rect x="39.0897%" y="180" width="6.8273%" height="15" fill="rgb(242,216,29)"/><text x="39.3397%" y="190.50">compiled_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py:20) (51 samples, 6.83%)</title><rect x="39.0897%" y="196" width="6.8273%" height="15" fill="rgb(230,116,27)"/><text x="39.3397%" y="206.50">_run (mlp..</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (25 samples, 3.35%)</title><rect x="46.8541%" y="388" width="3.3467%" height="15" fill="rgb(228,99,48)"/><text x="47.1041%" y="398.50">exe..</text></g><g><title>sched_yield (libc-2.29.so) (25 samples, 3.35%)</title><rect x="46.8541%" y="404" width="3.3467%" height="15" fill="rgb(253,11,6)"/><text x="47.1041%" y="414.50">sch..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (35 samples, 4.69%)</title><rect x="45.9170%" y="244" width="4.6854%" height="15" fill="rgb(247,143,39)"/><text x="46.1670%" y="254.50">array..</text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (35 samples, 4.69%)</title><rect x="45.9170%" y="260" width="4.6854%" height="15" fill="rgb(236,97,10)"/><text x="46.1670%" y="270.50">array..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (35 samples, 4.69%)</title><rect x="45.9170%" y="276" width="4.6854%" height="15" fill="rgb(233,208,19)"/><text x="46.1670%" y="286.50">PyArr..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c:674) (33 samples, 4.42%)</title><rect x="46.1847%" y="292" width="4.4177%" height="15" fill="rgb(216,164,2)"/><text x="46.4347%" y="302.50">cblas..</text></g><g><title>gemm (cblasfuncs.c:40) (33 samples, 4.42%)</title><rect x="46.1847%" y="308" width="4.4177%" height="15" fill="rgb(220,129,5)"/><text x="46.4347%" y="318.50">gemm ..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (33 samples, 4.42%)</title><rect x="46.1847%" y="324" width="4.4177%" height="15" fill="rgb(242,17,10)"/><text x="46.4347%" y="334.50">cblas..</text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (33 samples, 4.42%)</title><rect x="46.1847%" y="340" width="4.4177%" height="15" fill="rgb(242,107,0)"/><text x="46.4347%" y="350.50">sgemm..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (33 samples, 4.42%)</title><rect x="46.1847%" y="356" width="4.4177%" height="15" fill="rgb(251,28,31)"/><text x="46.4347%" y="366.50">gemm_..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (33 samples, 4.42%)</title><rect x="46.1847%" y="372" width="4.4177%" height="15" fill="rgb(233,223,10)"/><text x="46.4347%" y="382.50">exec_..</text></g><g><title>compiled_run (&lt;string&gt;:14) (43 samples, 5.76%)</title><rect x="45.9170%" y="180" width="5.7564%" height="15" fill="rgb(215,21,27)"/><text x="46.1670%" y="190.50">compile..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (43 samples, 5.76%)</title><rect x="45.9170%" y="196" width="5.7564%" height="15" fill="rgb(232,23,21)"/><text x="46.1670%" y="206.50">_run (m..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (43 samples, 5.76%)</title><rect x="45.9170%" y="212" width="5.7564%" height="15" fill="rgb(244,5,23)"/><text x="46.1670%" y="222.50">numpy_d..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (43 samples, 5.76%)</title><rect x="45.9170%" y="228" width="5.7564%" height="15" fill="rgb(226,81,46)"/><text x="46.1670%" y="238.50">dot (&lt;_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:24) (14 samples, 1.87%)</title><rect x="52.3427%" y="196" width="1.8742%" height="15" fill="rgb(247,70,30)"/><text x="52.5927%" y="206.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (14 samples, 1.87%)</title><rect x="52.3427%" y="212" width="1.8742%" height="15" fill="rgb(212,68,19)"/><text x="52.5927%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (13 samples, 1.74%)</title><rect x="52.4766%" y="228" width="1.7403%" height="15" fill="rgb(240,187,13)"/><text x="52.7266%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (13 samples, 1.74%)</title><rect x="52.4766%" y="244" width="1.7403%" height="15" fill="rgb(223,113,26)"/><text x="52.7266%" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (13 samples, 1.74%)</title><rect x="52.4766%" y="260" width="1.7403%" height="15" fill="rgb(206,192,2)"/><text x="52.7266%" y="270.50"></text></g><g><title>FLOAT_exp (loops.c.src:1602) (13 samples, 1.74%)</title><rect x="52.4766%" y="276" width="1.7403%" height="15" fill="rgb(241,108,4)"/><text x="52.7266%" y="286.50"></text></g><g><title>expf (libm-2.29.so) (12 samples, 1.61%)</title><rect x="52.6104%" y="292" width="1.6064%" height="15" fill="rgb(247,173,49)"/><text x="52.8604%" y="302.50"></text></g><g><title>compiled_run (&lt;string&gt;:16) (34 samples, 4.55%)</title><rect x="51.6734%" y="180" width="4.5515%" height="15" fill="rgb(224,114,35)"/><text x="51.9234%" y="190.50">compi..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:25) (15 samples, 2.01%)</title><rect x="54.2169%" y="196" width="2.0080%" height="15" fill="rgb(245,159,27)"/><text x="54.4669%" y="206.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 1.07%)</title><rect x="55.1539%" y="212" width="1.0710%" height="15" fill="rgb(245,172,44)"/><text x="55.4039%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (8 samples, 1.07%)</title><rect x="55.1539%" y="228" width="1.0710%" height="15" fill="rgb(236,23,11)"/><text x="55.4039%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (8 samples, 1.07%)</title><rect x="55.1539%" y="244" width="1.0710%" height="15" fill="rgb(205,117,38)"/><text x="55.4039%" y="254.50"></text></g><g><title>compiled_run (&lt;string&gt;:18) (11 samples, 1.47%)</title><rect x="56.3588%" y="180" width="1.4726%" height="15" fill="rgb(237,72,25)"/><text x="56.6088%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (11 samples, 1.47%)</title><rect x="56.3588%" y="196" width="1.4726%" height="15" fill="rgb(244,70,9)"/><text x="56.6088%" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (10 samples, 1.34%)</title><rect x="56.4926%" y="212" width="1.3387%" height="15" fill="rgb(217,125,39)"/><text x="56.7426%" y="222.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (8 samples, 1.07%)</title><rect x="59.1700%" y="308" width="1.0710%" height="15" fill="rgb(235,36,10)"/><text x="59.4200%" y="318.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (13 samples, 1.74%)</title><rect x="58.7684%" y="260" width="1.7403%" height="15" fill="rgb(251,123,47)"/><text x="59.0184%" y="270.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (13 samples, 1.74%)</title><rect x="58.7684%" y="276" width="1.7403%" height="15" fill="rgb(221,13,13)"/><text x="59.0184%" y="286.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (11 samples, 1.47%)</title><rect x="59.0361%" y="292" width="1.4726%" height="15" fill="rgb(238,131,9)"/><text x="59.2861%" y="302.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (18 samples, 2.41%)</title><rect x="58.6345%" y="244" width="2.4096%" height="15" fill="rgb(211,50,8)"/><text x="58.8845%" y="254.50">Py..</text></g><g><title>array_subscript (mapping.c:1539) (23 samples, 3.08%)</title><rect x="58.6345%" y="212" width="3.0790%" height="15" fill="rgb(245,182,24)"/><text x="58.8845%" y="222.50">arr..</text></g><g><title>prepare_index (mapping.c:516) (23 samples, 3.08%)</title><rect x="58.6345%" y="228" width="3.0790%" height="15" fill="rgb(242,14,37)"/><text x="58.8845%" y="238.50">pre..</text></g><g><title>compiled_run (&lt;string&gt;:19) (31 samples, 4.15%)</title><rect x="57.8313%" y="180" width="4.1499%" height="15" fill="rgb(246,228,12)"/><text x="58.0813%" y="190.50">compi..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (25 samples, 3.35%)</title><rect x="58.6345%" y="196" width="3.3467%" height="15" fill="rgb(213,55,15)"/><text x="58.8845%" y="206.50">_ru..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (213 samples, 28.51%)</title><rect x="33.6011%" y="132" width="28.5141%" height="15" fill="rgb(209,9,3)"/><text x="33.8511%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_s..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (213 samples, 28.51%)</title><rect x="33.6011%" y="148" width="28.5141%" height="15" fill="rgb(230,59,30)"/><text x="33.8511%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (212 samples, 28.38%)</title><rect x="33.7349%" y="164" width="28.3802%" height="15" fill="rgb(209,121,21)"/><text x="33.9849%" y="174.50">_run_sequence_runtime_compiled (mlprodict/onnx..</text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:61) (216 samples, 28.92%)</title><rect x="33.4672%" y="52" width="28.9157%" height="15" fill="rgb(220,109,13)"/><text x="33.7172%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_m_cl_1000..</text></g><g><title>profile_pyrtc (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:60) (216 samples, 28.92%)</title><rect x="33.4672%" y="68" width="28.9157%" height="15" fill="rgb(232,18,1)"/><text x="33.7172%" y="78.50">profile_pyrtc (bench_MLPClassifier_default_m_cl..</text></g><g><title>setup_profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:37) (216 samples, 28.92%)</title><rect x="33.4672%" y="84" width="28.9157%" height="15" fill="rgb(215,41,42)"/><text x="33.7172%" y="94.50">setup_profile (bench_MLPClassifier_default_m_cl..</text></g><g><title>profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:31) (216 samples, 28.92%)</title><rect x="33.4672%" y="100" width="28.9157%" height="15" fill="rgb(224,123,36)"/><text x="33.7172%" y="110.50">profile (bench_MLPClassifier_default_m_cl_1000_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (215 samples, 28.78%)</title><rect x="33.6011%" y="116" width="28.7818%" height="15" fill="rgb(240,125,3)"/><text x="33.8511%" y="126.50">time_predict (mlprodict/asv_benchmark/common_a..</text></g><g><title>mkl_blas_avx_sgemm_kernel_0 (onnxruntime/capi/libmklml_intel.so) (10 samples, 1.34%)</title><rect x="65.3280%" y="212" width="1.3387%" height="15" fill="rgb(205,98,50)"/><text x="65.5780%" y="222.50"></text></g><g><title>onnxruntime::FunctionKernel::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 5.09%)</title><rect x="67.8715%" y="324" width="5.0870%" height="15" fill="rgb(205,185,37)"/><text x="68.1215%" y="334.50">onnxru..</text></g><g><title>std::_Function_handler&lt;onnxruntime::common::Status(void*, OrtApi const*, OrtKernelContext*), onnxruntime::DNNLExecutionProvider::Compile(std::vector&lt;onnxruntime::Node*, std::allocator&lt;onnxruntime::Node*&gt; &gt; const&amp;, std::vector&lt;onnxruntime::NodeComputeInfo, std::allocator&lt;onnxruntime::NodeComputeInfo&gt; &gt;&amp;)::{lambda(void*, OrtApi const*, OrtKernelContext*)#3}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 5.09%)</title><rect x="67.8715%" y="340" width="5.0870%" height="15" fill="rgb(238,207,15)"/><text x="68.1215%" y="350.50">std::_..</text></g><g><title>onnxruntime::ort_dnnl::DnnlFuncKernel&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 5.09%)</title><rect x="67.8715%" y="356" width="5.0870%" height="15" fill="rgb(213,199,42)"/><text x="68.1215%" y="366.50">onnxru..</text></g><g><title>dnnl_primitive_execute (onnxruntime/capi/libdnnl.so.1) (37 samples, 4.95%)</title><rect x="68.0054%" y="372" width="4.9531%" height="15" fill="rgb(235,201,11)"/><text x="68.2554%" y="382.50">dnnl_p..</text></g><g><title>dnnl_primitive::execute (onnxruntime/capi/libdnnl.so.1) (36 samples, 4.82%)</title><rect x="68.1392%" y="388" width="4.8193%" height="15" fill="rgb(207,46,11)"/><text x="68.3892%" y="398.50">dnnl_p..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute (onnxruntime/capi/libdnnl.so.1) (36 samples, 4.82%)</title><rect x="68.1392%" y="404" width="4.8193%" height="15" fill="rgb(241,35,35)"/><text x="68.3892%" y="414.50">dnnl::..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute_forward (onnxruntime/capi/libdnnl.so.1) (36 samples, 4.82%)</title><rect x="68.1392%" y="420" width="4.8193%" height="15" fill="rgb(243,32,47)"/><text x="68.3892%" y="430.50">dnnl::..</text></g><g><title>GOMP_parallel@GOMP_4.0 (libiomp5.so) (36 samples, 4.82%)</title><rect x="68.1392%" y="436" width="4.8193%" height="15" fill="rgb(247,202,23)"/><text x="68.3892%" y="446.50">GOMP_p..</text></g><g><title>__kmp_join_call (libiomp5.so) (35 samples, 4.69%)</title><rect x="68.2731%" y="452" width="4.6854%" height="15" fill="rgb(219,102,11)"/><text x="68.5231%" y="462.50">__kmp..</text></g><g><title>__kmp_internal_join (libiomp5.so) (35 samples, 4.69%)</title><rect x="68.2731%" y="468" width="4.6854%" height="15" fill="rgb(243,110,44)"/><text x="68.5231%" y="478.50">__kmp..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (35 samples, 4.69%)</title><rect x="68.2731%" y="484" width="4.6854%" height="15" fill="rgb(222,74,54)"/><text x="68.5231%" y="494.50">__kmp..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (35 samples, 4.69%)</title><rect x="68.2731%" y="500" width="4.6854%" height="15" fill="rgb(216,99,12)"/><text x="68.5231%" y="510.50">_INTE..</text></g><g><title>mkl_blas_avx_sgemm_pst (onnxruntime/capi/libmklml_intel.so) (40 samples, 5.35%)</title><rect x="74.4311%" y="452" width="5.3548%" height="15" fill="rgb(226,22,26)"/><text x="74.6811%" y="462.50">mkl_bla..</text></g><g><title>mkl_blas_xsgemm (onnxruntime/capi/libmklml_intel.so) (44 samples, 5.89%)</title><rect x="74.1633%" y="420" width="5.8902%" height="15" fill="rgb(217,163,10)"/><text x="74.4133%" y="430.50">mkl_bla..</text></g><g><title>mkl_blas_avx_xsgemm (onnxruntime/capi/libmklml_intel.so) (44 samples, 5.89%)</title><rect x="74.1633%" y="436" width="5.8902%" height="15" fill="rgb(213,25,53)"/><text x="74.4133%" y="446.50">mkl_bla..</text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (54 samples, 7.23%)</title><rect x="72.9585%" y="324" width="7.2289%" height="15" fill="rgb(252,105,26)"/><text x="73.2085%" y="334.50">onnxruntim..</text></g><g><title>onnxruntime::math::Gemm&lt;float, onnxruntime::concurrency::ThreadPool&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (45 samples, 6.02%)</title><rect x="74.1633%" y="340" width="6.0241%" height="15" fill="rgb(220,39,43)"/><text x="74.4133%" y="350.50">onnxrunt..</text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (45 samples, 6.02%)</title><rect x="74.1633%" y="356" width="6.0241%" height="15" fill="rgb(229,68,48)"/><text x="74.4133%" y="366.50">cblas_sg..</text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (45 samples, 6.02%)</title><rect x="74.1633%" y="372" width="6.0241%" height="15" fill="rgb(252,8,32)"/><text x="74.4133%" y="382.50">sgemm_ (..</text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (45 samples, 6.02%)</title><rect x="74.1633%" y="388" width="6.0241%" height="15" fill="rgb(223,20,43)"/><text x="74.4133%" y="398.50">mkl_blas..</text></g><g><title>mkl_blas_sgemm_omp_driver_v1 (onnxruntime/capi/libmklml_intel.so) (45 samples, 6.02%)</title><rect x="74.1633%" y="404" width="6.0241%" height="15" fill="rgb(229,81,49)"/><text x="74.4133%" y="414.50">mkl_blas..</text></g><g><title>Eigen::internal::aligned_malloc (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.20%)</title><rect x="81.3922%" y="356" width="1.2048%" height="15" fill="rgb(236,28,36)"/><text x="81.6422%" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (9 samples, 1.20%)</title><rect x="81.3922%" y="372" width="1.2048%" height="15" fill="rgb(249,185,26)"/><text x="81.6422%" y="382.50"></text></g><g><title>0x7f36b8b1e028 (libc-2.29.so) (9 samples, 1.20%)</title><rect x="81.3922%" y="388" width="1.2048%" height="15" fill="rgb(249,174,33)"/><text x="81.6422%" y="398.50"></text></g><g><title>onnxruntime::Softmax&lt;float, false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 2.41%)</title><rect x="80.3213%" y="324" width="2.4096%" height="15" fill="rgb(233,201,37)"/><text x="80.5713%" y="334.50">on..</text></g><g><title>onnxruntime::ComputeSoftMax&lt;Eigen::ThreadPoolDevice, float&gt; [clone .constprop.656] (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 2.41%)</title><rect x="80.3213%" y="340" width="2.4096%" height="15" fill="rgb(221,78,26)"/><text x="80.5713%" y="350.50">on..</text></g><g><title>operator new (libstdc++.so.6.0.28) (39 samples, 5.22%)</title><rect x="83.8019%" y="340" width="5.2209%" height="15" fill="rgb(250,127,30)"/><text x="84.0519%" y="350.50">operat..</text></g><g><title>malloc (libc-2.29.so) (37 samples, 4.95%)</title><rect x="84.0696%" y="356" width="4.9531%" height="15" fill="rgb(230,49,44)"/><text x="84.3196%" y="366.50">malloc..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (173 samples, 23.16%)</title><rect x="66.6667%" y="244" width="23.1593%" height="15" fill="rgb(229,67,23)"/><text x="66.9167%" y="254.50">onnxruntime::InferenceSession::Run (o..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (173 samples, 23.16%)</title><rect x="66.6667%" y="260" width="23.1593%" height="15" fill="rgb(249,83,47)"/><text x="66.9167%" y="270.50">onnxruntime::InferenceSession::Run (o..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (171 samples, 22.89%)</title><rect x="66.9344%" y="276" width="22.8916%" height="15" fill="rgb(215,43,3)"/><text x="67.1844%" y="286.50">onnxruntime::utils::ExecuteGraph (on..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (171 samples, 22.89%)</title><rect x="66.9344%" y="292" width="22.8916%" height="15" fill="rgb(238,154,13)"/><text x="67.1844%" y="302.50">onnxruntime::utils::ExecuteGraphImpl..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (171 samples, 22.89%)</title><rect x="66.9344%" y="308" width="22.8916%" height="15" fill="rgb(219,56,2)"/><text x="67.1844%" y="318.50">onnxruntime::SequentialExecutor::Exe..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (53 samples, 7.10%)</title><rect x="82.7309%" y="324" width="7.0950%" height="15" fill="rgb(233,0,4)"/><text x="82.9809%" y="334.50">onnxruntim..</text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 2.28%)</title><rect x="89.8260%" y="244" width="2.2758%" height="15" fill="rgb(235,30,7)"/><text x="90.0760%" y="254.50">o..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.20%)</title><rect x="90.8969%" y="260" width="1.2048%" height="15" fill="rgb(250,79,13)"/><text x="91.1469%" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 1.61%)</title><rect x="97.8581%" y="292" width="1.6064%" height="15" fill="rgb(211,146,34)"/><text x="98.1081%" y="302.50"></text></g><g><title>onnxruntime::python::AddNonTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 7.63%)</title><rect x="92.1017%" y="244" width="7.6305%" height="15" fill="rgb(228,22,38)"/><text x="92.3517%" y="254.50">onnxruntim..</text></g><g><title>onnxruntime::python::AddNonTensor&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 7.63%)</title><rect x="92.1017%" y="260" width="7.6305%" height="15" fill="rgb(235,168,5)"/><text x="92.3517%" y="270.50">onnxruntim..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (56 samples, 7.50%)</title><rect x="92.2356%" y="276" width="7.4967%" height="15" fill="rgb(221,155,16)"/><text x="92.4856%" y="286.50">pybind11::..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (262 samples, 35.07%)</title><rect x="64.7925%" y="164" width="35.0736%" height="15" fill="rgb(215,215,53)"/><text x="65.0425%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:65..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (262 samples, 35.07%)</title><rect x="64.7925%" y="180" width="35.0736%" height="15" fill="rgb(223,4,10)"/><text x="65.0425%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:140) (262 samples, 35.07%)</title><rect x="64.7925%" y="196" width="35.0736%" height="15" fill="rgb(234,103,6)"/><text x="65.0425%" y="206.50">run (onnxruntime/capi/session.py:140)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (248 samples, 33.20%)</title><rect x="66.6667%" y="212" width="33.1995%" height="15" fill="rgb(227,97,0)"/><text x="66.9167%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/o..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (248 samples, 33.20%)</title><rect x="66.6667%" y="228" width="33.1995%" height="15" fill="rgb(234,150,53)"/><text x="66.9167%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::p..</text></g><g><title>all (747 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:68) (281 samples, 37.62%)</title><rect x="62.3829%" y="52" width="37.6171%" height="15" fill="rgb(222,22,37)"/><text x="62.6329%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_m_cl_1000_4_12_float_.p..</text></g><g><title>profile_ort (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:67) (281 samples, 37.62%)</title><rect x="62.3829%" y="68" width="37.6171%" height="15" fill="rgb(237,53,32)"/><text x="62.6329%" y="78.50">profile_ort (bench_MLPClassifier_default_m_cl_1000_4_12_float..</text></g><g><title>setup_profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:37) (280 samples, 37.48%)</title><rect x="62.5167%" y="84" width="37.4833%" height="15" fill="rgb(233,25,53)"/><text x="62.7667%" y="94.50">setup_profile (bench_MLPClassifier_default_m_cl_1000_4_12_flo..</text></g><g><title>profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py:31) (280 samples, 37.48%)</title><rect x="62.5167%" y="100" width="37.4833%" height="15" fill="rgb(210,40,34)"/><text x="62.7667%" y="110.50">profile (bench_MLPClassifier_default_m_cl_1000_4_12_float_.py..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (264 samples, 35.34%)</title><rect x="64.6586%" y="116" width="35.3414%" height="15" fill="rgb(241,220,44)"/><text x="64.9086%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:1..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (263 samples, 35.21%)</title><rect x="64.7925%" y="132" width="35.2075%" height="15" fill="rgb(235,28,35)"/><text x="65.0425%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (263 samples, 35.21%)</title><rect x="64.7925%" y="148" width="35.2075%" height="15" fill="rgb(210,56,17)"/><text x="65.0425%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g></svg></svg>