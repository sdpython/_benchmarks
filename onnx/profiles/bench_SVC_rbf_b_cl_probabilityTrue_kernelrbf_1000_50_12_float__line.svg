<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1334" onload="init(evt)" viewBox="0 0 1200 1334" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1334" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1317.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1317.00"> </text><g id="frames"><g><title>&lt;module&gt; (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:31) (1 samples, 0.12%)</title><rect x="10" y="52" width="1" height="15" fill="rgb(214,94,47)"/><text x="13.00" y="62.50"></text></g><g><title>start (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:11) (1 samples, 0.12%)</title><rect x="10" y="68" width="1" height="15" fill="rgb(228,71,48)"/><text x="13.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/svm/SVC/bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf.py:39) (1 samples, 0.12%)</title><rect x="10" y="84" width="1" height="15" fill="rgb(215,87,23)"/><text x="13.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py:148) (1 samples, 0.12%)</title><rect x="10" y="100" width="1" height="15" fill="rgb(242,11,7)"/><text x="13.00" y="110.50"></text></g><g><title>_get_dataset (mlprodict/asv_benchmark/common_asv_skl.py:88) (1 samples, 0.12%)</title><rect x="10" y="116" width="1" height="15" fill="rgb(252,51,40)"/><text x="13.00" y="126.50"></text></g><g><title>_modify_dimension (mlprodict/onnxrt/validate/validate_problems.py:89) (1 samples, 0.12%)</title><rect x="10" y="132" width="1" height="15" fill="rgb(214,41,54)"/><text x="13.00" y="142.50"></text></g><g><title>var (&lt;__array_function__ internals&gt;:6) (1 samples, 0.12%)</title><rect x="10" y="148" width="1" height="15" fill="rgb(247,124,10)"/><text x="13.00" y="158.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (1 samples, 0.12%)</title><rect x="10" y="164" width="1" height="15" fill="rgb(245,128,44)"/><text x="13.00" y="174.50"></text></g><g><title>var (numpy/core/fromnumeric.py:3506) (1 samples, 0.12%)</title><rect x="10" y="180" width="1" height="15" fill="rgb(222,161,31)"/><text x="13.00" y="190.50"></text></g><g><title>_var (numpy/core/_methods.py:193) (1 samples, 0.12%)</title><rect x="10" y="196" width="1" height="15" fill="rgb(250,102,45)"/><text x="13.00" y="206.50"></text></g><g><title>array_subtract (number.c:342) (1 samples, 0.12%)</title><rect x="10" y="212" width="1" height="15" fill="rgb(207,14,22)"/><text x="13.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.12%)</title><rect x="10" y="228" width="1" height="15" fill="rgb(234,178,21)"/><text x="13.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.12%)</title><rect x="10" y="244" width="1" height="15" fill="rgb(237,93,29)"/><text x="13.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (1 samples, 0.12%)</title><rect x="10" y="260" width="1" height="15" fill="rgb(205,82,1)"/><text x="13.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (1 samples, 0.12%)</title><rect x="10" y="276" width="1" height="15" fill="rgb(244,178,45)"/><text x="13.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (1 samples, 0.12%)</title><rect x="10" y="292" width="1" height="15" fill="rgb(237,59,47)"/><text x="13.00" y="302.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2832) (1 samples, 0.12%)</title><rect x="10" y="308" width="1" height="15" fill="rgb(243,222,35)"/><text x="13.00" y="318.50"></text></g><g><title>_predict_proba (sklearn/svm/_base.py:640) (1 samples, 0.12%)</title><rect x="11" y="148" width="1" height="15" fill="rgb(243,63,50)"/><text x="14.00" y="158.50"></text></g><g><title>_validate_for_predict (sklearn/svm/_base.py:444) (1 samples, 0.12%)</title><rect x="11" y="164" width="1" height="15" fill="rgb(250,84,40)"/><text x="14.00" y="174.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (1 samples, 0.12%)</title><rect x="11" y="180" width="1" height="15" fill="rgb(219,141,17)"/><text x="14.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (1 samples, 0.12%)</title><rect x="11" y="196" width="1" height="15" fill="rgb(208,177,8)"/><text x="14.00" y="206.50"></text></g><g><title>_dense_predict_proba (sklearn/svm/_base.py:688) (1 samples, 0.12%)</title><rect x="12" y="164" width="2" height="15" fill="rgb(222,158,2)"/><text x="15.00" y="174.50"></text></g><g><title>0x7f80c2e673fd (?) (1 samples, 0.12%)</title><rect x="14" y="180" width="1" height="15" fill="rgb(225,133,13)"/><text x="17.00" y="190.50"></text></g><g><title>0x7f80c2e65553 (?) (1 samples, 0.12%)</title><rect x="14" y="196" width="1" height="15" fill="rgb(215,112,30)"/><text x="17.00" y="206.50"></text></g><g><title>0x7f80c2e60a09 (?) (1 samples, 0.12%)</title><rect x="14" y="212" width="1" height="15" fill="rgb(242,175,20)"/><text x="17.00" y="222.50"></text></g><g><title>0x7f80c2e73979 (?) (1 samples, 0.12%)</title><rect x="14" y="228" width="1" height="15" fill="rgb(218,195,9)"/><text x="17.00" y="238.50"></text></g><g><title>0x7f80e8376a33 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="14" y="244" width="1" height="15" fill="rgb(244,23,28)"/><text x="17.00" y="254.50"></text></g><g><title>0x7f80e8376d07 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="20" y="244" width="1" height="15" fill="rgb(205,21,21)"/><text x="23.00" y="254.50"></text></g><g><title>exp (libm-2.29.so) (1 samples, 0.12%)</title><rect x="21" y="244" width="2" height="15" fill="rgb(216,187,38)"/><text x="24.00" y="254.50"></text></g><g><title>0x7f80e8548c52 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="21" y="260" width="2" height="15" fill="rgb(207,6,49)"/><text x="24.00" y="270.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="23" y="244" width="1" height="15" fill="rgb(246,9,6)"/><text x="26.00" y="254.50"></text></g><g><title>0x7f80e84c21b0 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="26" y="276" width="1" height="15" fill="rgb(228,48,10)"/><text x="29.00" y="286.50"></text></g><g><title>0x7f80e8548ba0 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="27" y="276" width="1" height="15" fill="rgb(230,165,54)"/><text x="30.00" y="286.50"></text></g><g><title>0x7f80e8548c04 (libm-2.29.so) (2 samples, 0.25%)</title><rect x="28" y="276" width="3" height="15" fill="rgb(222,175,48)"/><text x="31.00" y="286.50"></text></g><g><title>0x7f80e8548c0c (libm-2.29.so) (1 samples, 0.12%)</title><rect x="31" y="276" width="2" height="15" fill="rgb(222,63,32)"/><text x="34.00" y="286.50"></text></g><g><title>0x7f80e8548c2e (libm-2.29.so) (1 samples, 0.12%)</title><rect x="33" y="276" width="1" height="15" fill="rgb(207,82,42)"/><text x="36.00" y="286.50"></text></g><g><title>0x7f80e8548c46 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="34" y="276" width="2" height="15" fill="rgb(214,168,13)"/><text x="37.00" y="286.50"></text></g><g><title>0x7f80e8548c6e (libm-2.29.so) (1 samples, 0.12%)</title><rect x="36" y="276" width="1" height="15" fill="rgb(221,183,40)"/><text x="39.00" y="286.50"></text></g><g><title>exp (libm-2.29.so) (14 samples, 1.73%)</title><rect x="24" y="260" width="21" height="15" fill="rgb(219,221,50)"/><text x="27.00" y="270.50"></text></g><g><title>0x7f80e8548c7f (libm-2.29.so) (5 samples, 0.62%)</title><rect x="37" y="276" width="8" height="15" fill="rgb(219,121,43)"/><text x="40.00" y="286.50"></text></g><g><title>profile (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:18) (43 samples, 5.32%)</title><rect x="11" y="100" width="63" height="15" fill="rgb(230,129,31)"/><text x="14.00" y="110.50">profil..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (43 samples, 5.32%)</title><rect x="11" y="116" width="63" height="15" fill="rgb(212,220,15)"/><text x="14.00" y="126.50">time_p..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (43 samples, 5.32%)</title><rect x="11" y="132" width="63" height="15" fill="rgb(211,18,45)"/><text x="14.00" y="142.50">&lt;lambd..</text></g><g><title>_predict_proba (sklearn/svm/_base.py:646) (42 samples, 5.20%)</title><rect x="12" y="148" width="62" height="15" fill="rgb(213,152,11)"/><text x="15.00" y="158.50">_predi..</text></g><g><title>_dense_predict_proba (sklearn/svm/_base.py:694) (41 samples, 5.07%)</title><rect x="14" y="164" width="60" height="15" fill="rgb(221,18,23)"/><text x="17.00" y="174.50">_dense..</text></g><g><title>0x7f80c2e673fd (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (40 samples, 4.95%)</title><rect x="15" y="180" width="59" height="15" fill="rgb(213,31,32)"/><text x="18.00" y="190.50">0x7f80..</text></g><g><title>0x7f80c2e65553 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (40 samples, 4.95%)</title><rect x="15" y="196" width="59" height="15" fill="rgb(248,76,30)"/><text x="18.00" y="206.50">0x7f80..</text></g><g><title>copy_predict_proba (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (40 samples, 4.95%)</title><rect x="15" y="212" width="59" height="15" fill="rgb(224,25,38)"/><text x="18.00" y="222.50">copy_p..</text></g><g><title>svm_predict_probability (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (40 samples, 4.95%)</title><rect x="15" y="228" width="59" height="15" fill="rgb(216,217,30)"/><text x="18.00" y="238.50">svm_pr..</text></g><g><title>svm_predict_values (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (34 samples, 4.21%)</title><rect x="24" y="244" width="50" height="15" fill="rgb(217,205,14)"/><text x="27.00" y="254.50">svm_p..</text></g><g><title>svm::Kernel::k_function (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (20 samples, 2.48%)</title><rect x="45" y="260" width="29" height="15" fill="rgb(235,105,30)"/><text x="48.00" y="270.50">sv..</text></g><g><title>check_array (sklearn/utils/validation.py:502) (1 samples, 0.12%)</title><rect x="74" y="180" width="1" height="15" fill="rgb(205,104,20)"/><text x="77.00" y="190.50"></text></g><g><title>__init__ (warnings.py:462) (1 samples, 0.12%)</title><rect x="74" y="196" width="1" height="15" fill="rgb(211,75,43)"/><text x="77.00" y="206.50"></text></g><g><title>_predict_proba (sklearn/svm/_base.py:640) (2 samples, 0.25%)</title><rect x="74" y="148" width="3" height="15" fill="rgb(248,48,30)"/><text x="77.00" y="158.50"></text></g><g><title>_validate_for_predict (sklearn/svm/_base.py:447) (2 samples, 0.25%)</title><rect x="74" y="164" width="3" height="15" fill="rgb(243,31,52)"/><text x="77.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:515) (1 samples, 0.12%)</title><rect x="75" y="180" width="2" height="15" fill="rgb(225,44,3)"/><text x="78.00" y="190.50"></text></g><g><title>asarray (numpy/core/_asarray.py:85) (1 samples, 0.12%)</title><rect x="75" y="196" width="2" height="15" fill="rgb(218,83,10)"/><text x="78.00" y="206.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1734) (1 samples, 0.12%)</title><rect x="75" y="212" width="2" height="15" fill="rgb(209,114,47)"/><text x="78.00" y="222.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c:2041) (1 samples, 0.12%)</title><rect x="75" y="228" width="2" height="15" fill="rgb(225,105,4)"/><text x="78.00" y="238.50"></text></g><g><title>PyArray_FromAny (ctors.c:1966) (1 samples, 0.12%)</title><rect x="75" y="244" width="2" height="15" fill="rgb(250,11,35)"/><text x="78.00" y="254.50"></text></g><g><title>PyArray_FromArray (ctors.c:2172) (1 samples, 0.12%)</title><rect x="75" y="260" width="2" height="15" fill="rgb(244,18,48)"/><text x="78.00" y="270.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (1 samples, 0.12%)</title><rect x="75" y="276" width="2" height="15" fill="rgb(248,177,21)"/><text x="78.00" y="286.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (1 samples, 0.12%)</title><rect x="75" y="292" width="2" height="15" fill="rgb(251,120,22)"/><text x="78.00" y="302.50"></text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src:855) (1 samples, 0.12%)</title><rect x="75" y="308" width="2" height="15" fill="rgb(250,79,30)"/><text x="78.00" y="318.50"></text></g><g><title>0x7f80c2e48020 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="102" y="244" width="1" height="15" fill="rgb(237,29,13)"/><text x="105.00" y="254.50"></text></g><g><title>0x7f80e837692c (libc-2.29.so) (2 samples, 0.25%)</title><rect x="103" y="244" width="3" height="15" fill="rgb(211,159,17)"/><text x="106.00" y="254.50"></text></g><g><title>0x7f80e8376945 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="106" y="244" width="1" height="15" fill="rgb(217,98,48)"/><text x="109.00" y="254.50"></text></g><g><title>exp (libm-2.29.so) (1 samples, 0.12%)</title><rect x="107" y="244" width="2" height="15" fill="rgb(213,66,50)"/><text x="110.00" y="254.50"></text></g><g><title>0x7f80e8548c56 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="107" y="260" width="2" height="15" fill="rgb(249,1,3)"/><text x="110.00" y="270.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.12%)</title><rect x="109" y="244" width="1" height="15" fill="rgb(224,1,48)"/><text x="112.00" y="254.50"></text></g><g><title>0x7f80e8377c23 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="115" y="260" width="1" height="15" fill="rgb(226,2,19)"/><text x="118.00" y="270.50"></text></g><g><title>0x7f80e8377c38 (libc-2.29.so) (2 samples, 0.25%)</title><rect x="116" y="260" width="3" height="15" fill="rgb(254,186,46)"/><text x="119.00" y="270.50"></text></g><g><title>0x7f80e8377c41 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="119" y="260" width="1" height="15" fill="rgb(245,10,18)"/><text x="122.00" y="270.50"></text></g><g><title>malloc (libc-2.29.so) (8 samples, 0.99%)</title><rect x="110" y="244" width="12" height="15" fill="rgb(232,74,13)"/><text x="113.00" y="254.50"></text></g><g><title>0x7f80e837800a (libc-2.29.so) (1 samples, 0.12%)</title><rect x="120" y="260" width="2" height="15" fill="rgb(243,32,25)"/><text x="123.00" y="270.50"></text></g><g><title>0x7f80e8376982 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="135" y="260" width="2" height="15" fill="rgb(217,30,25)"/><text x="138.00" y="270.50"></text></g><g><title>0x7f80e8376bd8 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="137" y="260" width="1" height="15" fill="rgb(236,222,1)"/><text x="140.00" y="270.50"></text></g><g><title>0x7f80e8548ba0 (libm-2.29.so) (4 samples, 0.50%)</title><rect x="147" y="276" width="6" height="15" fill="rgb(232,213,21)"/><text x="150.00" y="286.50"></text></g><g><title>0x7f80e8548be7 (libm-2.29.so) (2 samples, 0.25%)</title><rect x="153" y="276" width="3" height="15" fill="rgb(233,166,34)"/><text x="156.00" y="286.50"></text></g><g><title>0x7f80e8548bf9 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="156" y="276" width="1" height="15" fill="rgb(253,100,49)"/><text x="159.00" y="286.50"></text></g><g><title>0x7f80e8548c04 (libm-2.29.so) (3 samples, 0.37%)</title><rect x="157" y="276" width="4" height="15" fill="rgb(245,132,51)"/><text x="160.00" y="286.50"></text></g><g><title>0x7f80e8548c0c (libm-2.29.so) (3 samples, 0.37%)</title><rect x="161" y="276" width="5" height="15" fill="rgb(227,36,43)"/><text x="164.00" y="286.50"></text></g><g><title>0x7f80e8548c32 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="166" y="276" width="1" height="15" fill="rgb(253,204,31)"/><text x="169.00" y="286.50"></text></g><g><title>0x7f80e8548c3a (libm-2.29.so) (1 samples, 0.12%)</title><rect x="167" y="276" width="2" height="15" fill="rgb(236,61,53)"/><text x="170.00" y="286.50"></text></g><g><title>0x7f80e8548c3e (libm-2.29.so) (1 samples, 0.12%)</title><rect x="169" y="276" width="1" height="15" fill="rgb(243,160,16)"/><text x="172.00" y="286.50"></text></g><g><title>0x7f80e8548c46 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="170" y="276" width="2" height="15" fill="rgb(216,85,19)"/><text x="173.00" y="286.50"></text></g><g><title>0x7f80e8548c52 (libm-2.29.so) (2 samples, 0.25%)</title><rect x="172" y="276" width="3" height="15" fill="rgb(241,229,27)"/><text x="175.00" y="286.50"></text></g><g><title>0x7f80e8548c5a (libm-2.29.so) (1 samples, 0.12%)</title><rect x="175" y="276" width="1" height="15" fill="rgb(253,153,50)"/><text x="178.00" y="286.50"></text></g><g><title>0x7f80e8548c7b (libm-2.29.so) (4 samples, 0.50%)</title><rect x="176" y="276" width="6" height="15" fill="rgb(228,168,8)"/><text x="179.00" y="286.50"></text></g><g><title>exp (libm-2.29.so) (33 samples, 4.08%)</title><rect x="138" y="260" width="48" height="15" fill="rgb(217,212,50)"/><text x="141.00" y="270.50">exp ..</text></g><g><title>0x7f80e8548c7f (libm-2.29.so) (3 samples, 0.37%)</title><rect x="182" y="276" width="4" height="15" fill="rgb(220,146,26)"/><text x="185.00" y="286.50"></text></g><g><title>&lt;module&gt; (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:38) (221 samples, 27.35%)</title><rect x="11" y="52" width="323" height="15" fill="rgb(240,196,41)"/><text x="14.00" y="62.50">&lt;module&gt; (bench_SVC_rbf_b_cl_probabilityTru..</text></g><g><title>profile_skl (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:37) (221 samples, 27.35%)</title><rect x="11" y="68" width="323" height="15" fill="rgb(207,124,38)"/><text x="14.00" y="78.50">profile_skl (bench_SVC_rbf_b_cl_probability..</text></g><g><title>setup_profile (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:29) (221 samples, 27.35%)</title><rect x="11" y="84" width="323" height="15" fill="rgb(208,187,40)"/><text x="14.00" y="94.50">setup_profile (bench_SVC_rbf_b_cl_probabili..</text></g><g><title>profile (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:23) (178 samples, 22.03%)</title><rect x="74" y="100" width="260" height="15" fill="rgb(244,89,42)"/><text x="77.00" y="110.50">profile (bench_SVC_rbf_b_cl_probab..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (178 samples, 22.03%)</title><rect x="74" y="116" width="260" height="15" fill="rgb(213,0,22)"/><text x="77.00" y="126.50">time_predict (mlprodict/asv_benchm..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (178 samples, 22.03%)</title><rect x="74" y="132" width="260" height="15" fill="rgb(251,168,19)"/><text x="77.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/..</text></g><g><title>_predict_proba (sklearn/svm/_base.py:646) (176 samples, 21.78%)</title><rect x="77" y="148" width="257" height="15" fill="rgb(249,149,32)"/><text x="80.00" y="158.50">_predict_proba (sklearn/svm/_base...</text></g><g><title>_dense_predict_proba (sklearn/svm/_base.py:694) (176 samples, 21.78%)</title><rect x="77" y="164" width="257" height="15" fill="rgb(222,64,45)"/><text x="80.00" y="174.50">_dense_predict_proba (sklearn/svm/..</text></g><g><title>0x7f80c2e673fd (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (176 samples, 21.78%)</title><rect x="77" y="180" width="257" height="15" fill="rgb(221,142,24)"/><text x="80.00" y="190.50">0x7f80c2e673fd (sklearn/svm/_libsv..</text></g><g><title>0x7f80c2e65553 (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (176 samples, 21.78%)</title><rect x="77" y="196" width="257" height="15" fill="rgb(211,131,37)"/><text x="80.00" y="206.50">0x7f80c2e65553 (sklearn/svm/_libsv..</text></g><g><title>copy_predict_proba (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (176 samples, 21.78%)</title><rect x="77" y="212" width="257" height="15" fill="rgb(232,174,18)"/><text x="80.00" y="222.50">copy_predict_proba (sklearn/svm/_l..</text></g><g><title>svm_predict_probability (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (176 samples, 21.78%)</title><rect x="77" y="228" width="257" height="15" fill="rgb(227,165,47)"/><text x="80.00" y="238.50">svm_predict_probability (sklearn/s..</text></g><g><title>svm_predict_values (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (145 samples, 17.95%)</title><rect x="122" y="244" width="212" height="15" fill="rgb(235,54,28)"/><text x="125.00" y="254.50">svm_predict_values (sklearn..</text></g><g><title>svm::Kernel::k_function (sklearn/svm/_libsvm.cpython-37m-x86_64-linux-gnu.so) (101 samples, 12.50%)</title><rect x="186" y="260" width="148" height="15" fill="rgb(226,38,42)"/><text x="189.00" y="270.50">svm::Kernel::k_fun..</text></g><g><title>add_entry (pkg_resources/__init__.py:623) (1 samples, 0.12%)</title><rect x="334" y="900" width="1" height="15" fill="rgb(229,157,53)"/><text x="337.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2061) (1 samples, 0.12%)</title><rect x="334" y="916" width="1" height="15" fill="rgb(251,170,32)"/><text x="337.00" y="926.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py:2034) (1 samples, 0.12%)</title><rect x="334" y="932" width="1" height="15" fill="rgb(242,56,9)"/><text x="337.00" y="942.50"></text></g><g><title>_by_version (pkg_resources/__init__.py:2032) (1 samples, 0.12%)</title><rect x="334" y="948" width="1" height="15" fill="rgb(216,206,2)"/><text x="337.00" y="958.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py:2032) (1 samples, 0.12%)</title><rect x="334" y="964" width="1" height="15" fill="rgb(212,124,49)"/><text x="337.00" y="974.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py:33) (1 samples, 0.12%)</title><rect x="334" y="980" width="1" height="15" fill="rgb(249,148,46)"/><text x="337.00" y="990.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py:76) (1 samples, 0.12%)</title><rect x="334" y="996" width="1" height="15" fill="rgb(215,223,45)"/><text x="337.00" y="1006.50"></text></g><g><title>_legacy_cmpkey (pkg_resources/_vendor/packaging/version.py:145) (1 samples, 0.12%)</title><rect x="334" y="1012" width="1" height="15" fill="rgb(212,13,14)"/><text x="337.00" y="1022.50"></text></g><g><title>add (pkg_resources/__init__.py:704) (1 samples, 0.12%)</title><rect x="335" y="916" width="2" height="15" fill="rgb(222,93,47)"/><text x="338.00" y="926.50"></text></g><g><title>key (pkg_resources/__init__.py:2640) (1 samples, 0.12%)</title><rect x="335" y="932" width="2" height="15" fill="rgb(242,40,17)"/><text x="338.00" y="942.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (3 samples, 0.37%)</title><rect x="334" y="852" width="4" height="15" fill="rgb(217,25,31)"/><text x="337.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (3 samples, 0.37%)</title><rect x="334" y="868" width="4" height="15" fill="rgb(227,75,8)"/><text x="337.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (3 samples, 0.37%)</title><rect x="334" y="884" width="4" height="15" fill="rgb(221,90,40)"/><text x="337.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:624) (2 samples, 0.25%)</title><rect x="335" y="900" width="3" height="15" fill="rgb(227,183,24)"/><text x="338.00" y="910.50"></text></g><g><title>add (pkg_resources/__init__.py:711) (1 samples, 0.12%)</title><rect x="337" y="916" width="1" height="15" fill="rgb(210,192,26)"/><text x="340.00" y="926.50"></text></g><g><title>&lt;module&gt; (profiles/benches/svm/SVC/bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf.py:2) (4 samples, 0.50%)</title><rect x="334" y="148" width="6" height="15" fill="rgb(251,200,49)"/><text x="337.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.50%)</title><rect x="334" y="164" width="6" height="15" fill="rgb(248,123,45)"/><text x="337.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.50%)</title><rect x="334" y="180" width="6" height="15" fill="rgb(225,208,11)"/><text x="337.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.50%)</title><rect x="334" y="196" width="6" height="15" fill="rgb(235,137,44)"/><text x="337.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.50%)</title><rect x="334" y="212" width="6" height="15" fill="rgb(228,52,18)"/><text x="337.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.50%)</title><rect x="334" y="228" width="6" height="15" fill="rgb(217,45,4)"/><text x="337.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.50%)</title><rect x="334" y="244" width="6" height="15" fill="rgb(243,95,26)"/><text x="337.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.50%)</title><rect x="334" y="260" width="6" height="15" fill="rgb(227,99,47)"/><text x="337.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.50%)</title><rect x="334" y="276" width="6" height="15" fill="rgb(219,98,18)"/><text x="337.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (4 samples, 0.50%)</title><rect x="334" y="292" width="6" height="15" fill="rgb(238,174,36)"/><text x="337.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.50%)</title><rect x="334" y="308" width="6" height="15" fill="rgb(211,59,13)"/><text x="337.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.50%)</title><rect x="334" y="324" width="6" height="15" fill="rgb(207,186,22)"/><text x="337.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.50%)</title><rect x="334" y="340" width="6" height="15" fill="rgb(245,102,41)"/><text x="337.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.50%)</title><rect x="334" y="356" width="6" height="15" fill="rgb(234,181,52)"/><text x="337.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.50%)</title><rect x="334" y="372" width="6" height="15" fill="rgb(222,161,25)"/><text x="337.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (4 samples, 0.50%)</title><rect x="334" y="388" width="6" height="15" fill="rgb(233,197,5)"/><text x="337.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.50%)</title><rect x="334" y="404" width="6" height="15" fill="rgb(224,197,29)"/><text x="337.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.50%)</title><rect x="334" y="420" width="6" height="15" fill="rgb(224,225,24)"/><text x="337.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.50%)</title><rect x="334" y="436" width="6" height="15" fill="rgb(226,136,34)"/><text x="337.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.50%)</title><rect x="334" y="452" width="6" height="15" fill="rgb(250,6,27)"/><text x="337.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.50%)</title><rect x="334" y="468" width="6" height="15" fill="rgb(235,137,35)"/><text x="337.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (4 samples, 0.50%)</title><rect x="334" y="484" width="6" height="15" fill="rgb(246,18,12)"/><text x="337.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.50%)</title><rect x="334" y="500" width="6" height="15" fill="rgb(248,73,54)"/><text x="337.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.50%)</title><rect x="334" y="516" width="6" height="15" fill="rgb(249,198,27)"/><text x="337.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.50%)</title><rect x="334" y="532" width="6" height="15" fill="rgb(224,86,29)"/><text x="337.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.50%)</title><rect x="334" y="548" width="6" height="15" fill="rgb(222,89,26)"/><text x="337.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.50%)</title><rect x="334" y="564" width="6" height="15" fill="rgb(233,14,41)"/><text x="337.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (4 samples, 0.50%)</title><rect x="334" y="580" width="6" height="15" fill="rgb(251,106,9)"/><text x="337.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.50%)</title><rect x="334" y="596" width="6" height="15" fill="rgb(215,180,17)"/><text x="337.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.50%)</title><rect x="334" y="612" width="6" height="15" fill="rgb(229,97,37)"/><text x="337.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.50%)</title><rect x="334" y="628" width="6" height="15" fill="rgb(242,206,40)"/><text x="337.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.50%)</title><rect x="334" y="644" width="6" height="15" fill="rgb(224,2,37)"/><text x="337.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.50%)</title><rect x="334" y="660" width="6" height="15" fill="rgb(234,127,37)"/><text x="337.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.50%)</title><rect x="334" y="676" width="6" height="15" fill="rgb(229,91,40)"/><text x="337.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.50%)</title><rect x="334" y="692" width="6" height="15" fill="rgb(226,42,47)"/><text x="337.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.50%)</title><rect x="334" y="708" width="6" height="15" fill="rgb(228,1,13)"/><text x="337.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (4 samples, 0.50%)</title><rect x="334" y="724" width="6" height="15" fill="rgb(218,27,11)"/><text x="337.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.50%)</title><rect x="334" y="740" width="6" height="15" fill="rgb(214,23,28)"/><text x="337.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.50%)</title><rect x="334" y="756" width="6" height="15" fill="rgb(228,120,38)"/><text x="337.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.50%)</title><rect x="334" y="772" width="6" height="15" fill="rgb(240,213,19)"/><text x="337.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.50%)</title><rect x="334" y="788" width="6" height="15" fill="rgb(211,136,37)"/><text x="337.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.50%)</title><rect x="334" y="804" width="6" height="15" fill="rgb(251,41,25)"/><text x="337.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (4 samples, 0.50%)</title><rect x="334" y="820" width="6" height="15" fill="rgb(249,182,49)"/><text x="337.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (4 samples, 0.50%)</title><rect x="334" y="836" width="6" height="15" fill="rgb(222,147,27)"/><text x="337.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (1 samples, 0.12%)</title><rect x="338" y="852" width="2" height="15" fill="rgb(242,218,24)"/><text x="341.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (1 samples, 0.12%)</title><rect x="338" y="868" width="2" height="15" fill="rgb(229,30,14)"/><text x="341.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (1 samples, 0.12%)</title><rect x="338" y="884" width="2" height="15" fill="rgb(227,83,13)"/><text x="341.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py:2135) (1 samples, 0.12%)</title><rect x="338" y="900" width="2" height="15" fill="rgb(233,83,17)"/><text x="341.00" y="910.50"></text></g><g><title>from_location (pkg_resources/__init__.py:2592) (1 samples, 0.12%)</title><rect x="338" y="916" width="2" height="15" fill="rgb(245,13,35)"/><text x="341.00" y="926.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:2571) (1 samples, 0.12%)</title><rect x="338" y="932" width="2" height="15" fill="rgb(230,141,39)"/><text x="341.00" y="942.50"></text></g><g><title>safe_version (pkg_resources/__init__.py:1331) (1 samples, 0.12%)</title><rect x="338" y="948" width="2" height="15" fill="rgb(250,171,1)"/><text x="341.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py:220) (1 samples, 0.12%)</title><rect x="338" y="964" width="2" height="15" fill="rgb(218,185,18)"/><text x="341.00" y="974.50"></text></g><g><title>&lt;module&gt; (profiles/benches/svm/SVC/bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf.py:4) (1 samples, 0.12%)</title><rect x="340" y="148" width="1" height="15" fill="rgb(226,97,52)"/><text x="343.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="340" y="164" width="1" height="15" fill="rgb(226,180,23)"/><text x="343.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.12%)</title><rect x="340" y="180" width="1" height="15" fill="rgb(208,69,0)"/><text x="343.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="340" y="196" width="1" height="15" fill="rgb(232,59,9)"/><text x="343.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="340" y="212" width="1" height="15" fill="rgb(241,118,27)"/><text x="343.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="340" y="228" width="1" height="15" fill="rgb(219,187,38)"/><text x="343.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="340" y="244" width="1" height="15" fill="rgb(244,113,4)"/><text x="343.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="340" y="260" width="1" height="15" fill="rgb(249,143,52)"/><text x="343.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="340" y="276" width="1" height="15" fill="rgb(240,24,28)"/><text x="343.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (1 samples, 0.12%)</title><rect x="340" y="292" width="1" height="15" fill="rgb(216,168,24)"/><text x="343.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="340" y="308" width="1" height="15" fill="rgb(247,42,31)"/><text x="343.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="340" y="324" width="1" height="15" fill="rgb(243,133,23)"/><text x="343.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="340" y="340" width="1" height="15" fill="rgb(206,196,47)"/><text x="343.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="340" y="356" width="1" height="15" fill="rgb(211,88,18)"/><text x="343.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="340" y="372" width="1" height="15" fill="rgb(211,30,45)"/><text x="343.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (1 samples, 0.12%)</title><rect x="340" y="388" width="1" height="15" fill="rgb(224,84,32)"/><text x="343.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="340" y="404" width="1" height="15" fill="rgb(211,178,50)"/><text x="343.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="340" y="420" width="1" height="15" fill="rgb(248,61,22)"/><text x="343.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="340" y="436" width="1" height="15" fill="rgb(236,94,27)"/><text x="343.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="340" y="452" width="1" height="15" fill="rgb(209,19,2)"/><text x="343.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="340" y="468" width="1" height="15" fill="rgb(251,217,49)"/><text x="343.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:25) (1 samples, 0.12%)</title><rect x="340" y="484" width="1" height="15" fill="rgb(241,88,0)"/><text x="343.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="340" y="500" width="1" height="15" fill="rgb(238,183,25)"/><text x="343.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="340" y="516" width="1" height="15" fill="rgb(222,138,53)"/><text x="343.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="340" y="532" width="1" height="15" fill="rgb(225,170,53)"/><text x="343.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="340" y="548" width="1" height="15" fill="rgb(244,122,26)"/><text x="343.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="340" y="564" width="1" height="15" fill="rgb(240,0,28)"/><text x="343.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (1 samples, 0.12%)</title><rect x="340" y="580" width="1" height="15" fill="rgb(248,130,6)"/><text x="343.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="340" y="596" width="1" height="15" fill="rgb(245,136,30)"/><text x="343.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="340" y="612" width="1" height="15" fill="rgb(254,140,18)"/><text x="343.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="340" y="628" width="1" height="15" fill="rgb(249,152,40)"/><text x="343.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="340" y="644" width="1" height="15" fill="rgb(213,213,7)"/><text x="343.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="340" y="660" width="1" height="15" fill="rgb(205,62,31)"/><text x="343.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:379) (1 samples, 0.12%)</title><rect x="340" y="676" width="1" height="15" fill="rgb(227,152,50)"/><text x="343.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="340" y="692" width="1" height="15" fill="rgb(217,120,29)"/><text x="343.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="340" y="708" width="1" height="15" fill="rgb(249,69,11)"/><text x="343.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="340" y="724" width="1" height="15" fill="rgb(248,133,23)"/><text x="343.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="340" y="740" width="1" height="15" fill="rgb(222,87,32)"/><text x="343.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="340" y="756" width="1" height="15" fill="rgb(226,41,18)"/><text x="343.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py:182) (1 samples, 0.12%)</title><rect x="340" y="772" width="1" height="15" fill="rgb(205,90,20)"/><text x="343.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.12%)</title><rect x="340" y="788" width="1" height="15" fill="rgb(221,76,26)"/><text x="343.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="340" y="804" width="1" height="15" fill="rgb(222,87,3)"/><text x="343.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="340" y="820" width="1" height="15" fill="rgb(227,162,5)"/><text x="343.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="340" y="836" width="1" height="15" fill="rgb(253,90,53)"/><text x="343.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="340" y="852" width="1" height="15" fill="rgb(223,36,34)"/><text x="343.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="340" y="868" width="1" height="15" fill="rgb(219,128,1)"/><text x="343.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="340" y="884" width="1" height="15" fill="rgb(235,61,13)"/><text x="343.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py:13) (1 samples, 0.12%)</title><rect x="340" y="900" width="1" height="15" fill="rgb(241,131,50)"/><text x="343.00" y="910.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.12%)</title><rect x="340" y="916" width="1" height="15" fill="rgb(249,172,8)"/><text x="343.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="340" y="932" width="1" height="15" fill="rgb(237,40,51)"/><text x="343.00" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="340" y="948" width="1" height="15" fill="rgb(238,179,13)"/><text x="343.00" y="958.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="340" y="964" width="1" height="15" fill="rgb(251,14,38)"/><text x="343.00" y="974.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="340" y="980" width="1" height="15" fill="rgb(253,203,32)"/><text x="343.00" y="990.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="340" y="996" width="1" height="15" fill="rgb(248,83,33)"/><text x="343.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="340" y="1012" width="1" height="15" fill="rgb(227,25,53)"/><text x="343.00" y="1022.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_continuous_distns.py:2784) (1 samples, 0.12%)</title><rect x="340" y="1028" width="1" height="15" fill="rgb(205,214,0)"/><text x="343.00" y="1038.50"></text></g><g><title>__init__ (scipy/stats/_distn_infrastructure.py:1581) (1 samples, 0.12%)</title><rect x="340" y="1044" width="1" height="15" fill="rgb(251,118,5)"/><text x="343.00" y="1054.50"></text></g><g><title>_construct_argparser (scipy/stats/_distn_infrastructure.py:657) (1 samples, 0.12%)</title><rect x="340" y="1060" width="1" height="15" fill="rgb(225,9,50)"/><text x="343.00" y="1070.50"></text></g><g><title>getargspec_no_self (scipy/_lib/_util.py:291) (1 samples, 0.12%)</title><rect x="340" y="1076" width="1" height="15" fill="rgb(222,120,54)"/><text x="343.00" y="1086.50"></text></g><g><title>signature (inspect.py:3083) (1 samples, 0.12%)</title><rect x="340" y="1092" width="1" height="15" fill="rgb(242,168,16)"/><text x="343.00" y="1102.50"></text></g><g><title>from_callable (inspect.py:2833) (1 samples, 0.12%)</title><rect x="340" y="1108" width="1" height="15" fill="rgb(247,50,10)"/><text x="343.00" y="1118.50"></text></g><g><title>_signature_from_callable (inspect.py:2217) (1 samples, 0.12%)</title><rect x="340" y="1124" width="1" height="15" fill="rgb(243,45,54)"/><text x="343.00" y="1134.50"></text></g><g><title>_signature_from_callable (inspect.py:2251) (1 samples, 0.12%)</title><rect x="340" y="1140" width="1" height="15" fill="rgb(244,219,54)"/><text x="343.00" y="1150.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py:112) (1 samples, 0.12%)</title><rect x="341" y="772" width="1" height="15" fill="rgb(214,191,42)"/><text x="344.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.12%)</title><rect x="341" y="788" width="1" height="15" fill="rgb(250,161,15)"/><text x="344.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="341" y="804" width="1" height="15" fill="rgb(217,5,1)"/><text x="344.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="341" y="820" width="1" height="15" fill="rgb(207,28,15)"/><text x="344.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="341" y="836" width="1" height="15" fill="rgb(243,174,20)"/><text x="344.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="341" y="852" width="1" height="15" fill="rgb(250,197,31)"/><text x="344.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="341" y="868" width="1" height="15" fill="rgb(212,19,34)"/><text x="344.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="341" y="884" width="1" height="15" fill="rgb(220,86,48)"/><text x="344.00" y="894.50"></text></g><g><title>&lt;module&gt; (requests/utils.py:26) (1 samples, 0.12%)</title><rect x="341" y="900" width="1" height="15" fill="rgb(229,163,53)"/><text x="344.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="341" y="916" width="1" height="15" fill="rgb(243,208,31)"/><text x="344.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="341" y="932" width="1" height="15" fill="rgb(212,34,54)"/><text x="344.00" y="942.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="341" y="948" width="1" height="15" fill="rgb(228,48,12)"/><text x="344.00" y="958.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="341" y="964" width="1" height="15" fill="rgb(209,60,24)"/><text x="344.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="341" y="980" width="1" height="15" fill="rgb(216,59,26)"/><text x="344.00" y="990.50"></text></g><g><title>&lt;module&gt; (requests/_internal_utils.py:11) (1 samples, 0.12%)</title><rect x="341" y="996" width="1" height="15" fill="rgb(234,119,25)"/><text x="344.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="341" y="1012" width="1" height="15" fill="rgb(212,100,18)"/><text x="344.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="341" y="1028" width="1" height="15" fill="rgb(250,24,43)"/><text x="344.00" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="341" y="1044" width="1" height="15" fill="rgb(251,71,50)"/><text x="344.00" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="341" y="1060" width="1" height="15" fill="rgb(243,129,28)"/><text x="344.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="341" y="1076" width="1" height="15" fill="rgb(244,181,3)"/><text x="344.00" y="1086.50"></text></g><g><title>&lt;module&gt; (requests/compat.py:29) (1 samples, 0.12%)</title><rect x="341" y="1092" width="1" height="15" fill="rgb(210,124,25)"/><text x="344.00" y="1102.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="341" y="1108" width="1" height="15" fill="rgb(230,124,12)"/><text x="344.00" y="1118.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="341" y="1124" width="1" height="15" fill="rgb(227,118,9)"/><text x="344.00" y="1134.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="341" y="1140" width="1" height="15" fill="rgb(240,21,11)"/><text x="344.00" y="1150.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="341" y="1156" width="1" height="15" fill="rgb(243,151,19)"/><text x="344.00" y="1166.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="341" y="1172" width="1" height="15" fill="rgb(210,36,17)"/><text x="344.00" y="1182.50"></text></g><g><title>&lt;module&gt; (simplejson/__init__.py:132) (1 samples, 0.12%)</title><rect x="341" y="1188" width="1" height="15" fill="rgb(227,50,8)"/><text x="344.00" y="1198.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="341" y="1204" width="1" height="15" fill="rgb(239,40,50)"/><text x="344.00" y="1214.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="341" y="1220" width="1" height="15" fill="rgb(222,113,18)"/><text x="344.00" y="1230.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="341" y="1236" width="1" height="15" fill="rgb(250,62,12)"/><text x="344.00" y="1246.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="341" y="1252" width="1" height="15" fill="rgb(237,168,40)"/><text x="344.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="341" y="1268" width="1" height="15" fill="rgb(232,228,10)"/><text x="344.00" y="1278.50"></text></g><g><title>&lt;module&gt; (simplejson/errors.py:26) (1 samples, 0.12%)</title><rect x="341" y="1284" width="1" height="15" fill="rgb(208,122,14)"/><text x="344.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:12) (2 samples, 0.25%)</title><rect x="341" y="484" width="3" height="15" fill="rgb(232,215,0)"/><text x="344.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.25%)</title><rect x="341" y="500" width="3" height="15" fill="rgb(247,51,12)"/><text x="344.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.25%)</title><rect x="341" y="516" width="3" height="15" fill="rgb(227,4,20)"/><text x="344.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.25%)</title><rect x="341" y="532" width="3" height="15" fill="rgb(252,13,34)"/><text x="344.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.25%)</title><rect x="341" y="548" width="3" height="15" fill="rgb(240,123,12)"/><text x="344.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.25%)</title><rect x="341" y="564" width="3" height="15" fill="rgb(235,151,22)"/><text x="344.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py:23) (2 samples, 0.25%)</title><rect x="341" y="580" width="3" height="15" fill="rgb(234,71,33)"/><text x="344.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.25%)</title><rect x="341" y="596" width="3" height="15" fill="rgb(253,15,51)"/><text x="344.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.25%)</title><rect x="341" y="612" width="3" height="15" fill="rgb(243,88,3)"/><text x="344.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.25%)</title><rect x="341" y="628" width="3" height="15" fill="rgb(221,35,21)"/><text x="344.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.25%)</title><rect x="341" y="644" width="3" height="15" fill="rgb(240,137,27)"/><text x="344.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.25%)</title><rect x="341" y="660" width="3" height="15" fill="rgb(225,40,42)"/><text x="344.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py:10) (2 samples, 0.25%)</title><rect x="341" y="676" width="3" height="15" fill="rgb(240,148,7)"/><text x="344.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.25%)</title><rect x="341" y="692" width="3" height="15" fill="rgb(218,218,4)"/><text x="344.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.25%)</title><rect x="341" y="708" width="3" height="15" fill="rgb(232,105,50)"/><text x="344.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.25%)</title><rect x="341" y="724" width="3" height="15" fill="rgb(229,114,36)"/><text x="344.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.25%)</title><rect x="341" y="740" width="3" height="15" fill="rgb(254,218,6)"/><text x="344.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.25%)</title><rect x="341" y="756" width="3" height="15" fill="rgb(230,224,6)"/><text x="344.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py:95) (1 samples, 0.12%)</title><rect x="342" y="772" width="2" height="15" fill="rgb(245,60,26)"/><text x="345.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.12%)</title><rect x="342" y="788" width="2" height="15" fill="rgb(210,121,3)"/><text x="345.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="342" y="804" width="2" height="15" fill="rgb(254,120,3)"/><text x="345.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="342" y="820" width="2" height="15" fill="rgb(249,159,10)"/><text x="345.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="342" y="836" width="2" height="15" fill="rgb(238,109,35)"/><text x="345.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="342" y="852" width="2" height="15" fill="rgb(221,76,48)"/><text x="345.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="342" y="868" width="2" height="15" fill="rgb(218,94,2)"/><text x="345.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="342" y="884" width="2" height="15" fill="rgb(250,192,11)"/><text x="345.00" y="894.50"></text></g><g><title>&lt;module&gt; (urllib3/contrib/pyopenssl.py:48) (1 samples, 0.12%)</title><rect x="342" y="900" width="2" height="15" fill="rgb(253,218,40)"/><text x="345.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="342" y="916" width="2" height="15" fill="rgb(214,171,48)"/><text x="345.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="342" y="932" width="2" height="15" fill="rgb(218,155,23)"/><text x="345.00" y="942.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="342" y="948" width="2" height="15" fill="rgb(247,94,20)"/><text x="345.00" y="958.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="342" y="964" width="2" height="15" fill="rgb(241,25,48)"/><text x="345.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="342" y="980" width="2" height="15" fill="rgb(243,78,34)"/><text x="345.00" y="990.50"></text></g><g><title>&lt;module&gt; (cryptography/hazmat/backends/openssl/__init__.py:7) (1 samples, 0.12%)</title><rect x="342" y="996" width="2" height="15" fill="rgb(205,73,18)"/><text x="345.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="342" y="1012" width="2" height="15" fill="rgb(241,181,2)"/><text x="345.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="342" y="1028" width="2" height="15" fill="rgb(208,11,37)"/><text x="345.00" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="342" y="1044" width="2" height="15" fill="rgb(249,93,22)"/><text x="345.00" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="342" y="1060" width="2" height="15" fill="rgb(218,140,4)"/><text x="345.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="342" y="1076" width="2" height="15" fill="rgb(215,147,46)"/><text x="345.00" y="1086.50"></text></g><g><title>&lt;module&gt; (cryptography/hazmat/backends/openssl/backend.py:47) (1 samples, 0.12%)</title><rect x="342" y="1092" width="2" height="15" fill="rgb(237,104,54)"/><text x="345.00" y="1102.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="342" y="1108" width="2" height="15" fill="rgb(247,190,48)"/><text x="345.00" y="1118.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="342" y="1124" width="2" height="15" fill="rgb(252,19,48)"/><text x="345.00" y="1134.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="342" y="1140" width="2" height="15" fill="rgb(245,156,53)"/><text x="345.00" y="1150.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 0.12%)</title><rect x="342" y="1156" width="2" height="15" fill="rgb(227,30,31)"/><text x="345.00" y="1166.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:857) (1 samples, 0.12%)</title><rect x="342" y="1172" width="2" height="15" fill="rgb(210,66,19)"/><text x="345.00" y="1182.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:525) (1 samples, 0.12%)</title><rect x="342" y="1188" width="2" height="15" fill="rgb(238,210,30)"/><text x="345.00" y="1198.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (3 samples, 0.37%)</title><rect x="341" y="244" width="4" height="15" fill="rgb(253,155,53)"/><text x="344.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.37%)</title><rect x="341" y="260" width="4" height="15" fill="rgb(221,99,39)"/><text x="344.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.37%)</title><rect x="341" y="276" width="4" height="15" fill="rgb(208,195,2)"/><text x="344.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.37%)</title><rect x="341" y="292" width="4" height="15" fill="rgb(238,94,17)"/><text x="344.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.37%)</title><rect x="341" y="308" width="4" height="15" fill="rgb(240,100,29)"/><text x="344.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.37%)</title><rect x="341" y="324" width="4" height="15" fill="rgb(222,191,34)"/><text x="344.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (3 samples, 0.37%)</title><rect x="341" y="340" width="4" height="15" fill="rgb(208,65,32)"/><text x="344.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.37%)</title><rect x="341" y="356" width="4" height="15" fill="rgb(248,84,28)"/><text x="344.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.37%)</title><rect x="341" y="372" width="4" height="15" fill="rgb(252,128,23)"/><text x="344.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.37%)</title><rect x="341" y="388" width="4" height="15" fill="rgb(213,124,5)"/><text x="344.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.37%)</title><rect x="341" y="404" width="4" height="15" fill="rgb(250,115,37)"/><text x="344.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.37%)</title><rect x="341" y="420" width="4" height="15" fill="rgb(243,25,16)"/><text x="344.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.37%)</title><rect x="341" y="436" width="4" height="15" fill="rgb(254,9,32)"/><text x="344.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.37%)</title><rect x="341" y="452" width="4" height="15" fill="rgb(248,122,29)"/><text x="344.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.37%)</title><rect x="341" y="468" width="4" height="15" fill="rgb(217,209,8)"/><text x="344.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:7) (1 samples, 0.12%)</title><rect x="344" y="484" width="1" height="15" fill="rgb(206,199,13)"/><text x="347.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="344" y="500" width="1" height="15" fill="rgb(245,210,17)"/><text x="347.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="344" y="516" width="1" height="15" fill="rgb(208,108,7)"/><text x="347.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="344" y="532" width="1" height="15" fill="rgb(219,88,11)"/><text x="347.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="344" y="548" width="1" height="15" fill="rgb(239,146,10)"/><text x="347.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="344" y="564" width="1" height="15" fill="rgb(238,74,20)"/><text x="347.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/code_helper.py:7) (1 samples, 0.12%)</title><rect x="344" y="580" width="1" height="15" fill="rgb(221,160,19)"/><text x="347.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="344" y="596" width="1" height="15" fill="rgb(228,114,27)"/><text x="347.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="344" y="612" width="1" height="15" fill="rgb(238,229,24)"/><text x="347.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="344" y="628" width="1" height="15" fill="rgb(237,93,30)"/><text x="347.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="344" y="644" width="1" height="15" fill="rgb(206,10,39)"/><text x="347.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="344" y="660" width="1" height="15" fill="rgb(242,40,18)"/><text x="347.00" y="670.50"></text></g><g><title>&lt;module&gt; (autopep8.py:62) (1 samples, 0.12%)</title><rect x="344" y="676" width="1" height="15" fill="rgb(209,38,30)"/><text x="347.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="344" y="692" width="1" height="15" fill="rgb(223,187,47)"/><text x="347.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="344" y="708" width="1" height="15" fill="rgb(217,144,29)"/><text x="347.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="344" y="724" width="1" height="15" fill="rgb(224,196,4)"/><text x="347.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="344" y="740" width="1" height="15" fill="rgb(205,178,45)"/><text x="347.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="344" y="756" width="1" height="15" fill="rgb(208,77,26)"/><text x="347.00" y="766.50"></text></g><g><title>&lt;module&gt; (pycodestyle.py:141) (1 samples, 0.12%)</title><rect x="344" y="772" width="1" height="15" fill="rgb(221,141,19)"/><text x="347.00" y="782.50"></text></g><g><title>compile (re.py:234) (1 samples, 0.12%)</title><rect x="344" y="788" width="1" height="15" fill="rgb(216,177,28)"/><text x="347.00" y="798.50"></text></g><g><title>_compile (re.py:286) (1 samples, 0.12%)</title><rect x="344" y="804" width="1" height="15" fill="rgb(224,141,51)"/><text x="347.00" y="814.50"></text></g><g><title>compile (sre_compile.py:768) (1 samples, 0.12%)</title><rect x="344" y="820" width="1" height="15" fill="rgb(243,76,17)"/><text x="347.00" y="830.50"></text></g><g><title>_code (sre_compile.py:604) (1 samples, 0.12%)</title><rect x="344" y="836" width="1" height="15" fill="rgb(207,223,28)"/><text x="347.00" y="846.50"></text></g><g><title>_compile_info (sre_compile.py:540) (1 samples, 0.12%)</title><rect x="344" y="852" width="1" height="15" fill="rgb(236,90,46)"/><text x="347.00" y="862.50"></text></g><g><title>getwidth (sre_parse.py:220) (1 samples, 0.12%)</title><rect x="344" y="868" width="1" height="15" fill="rgb(220,187,43)"/><text x="347.00" y="878.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:147) (1 samples, 0.12%)</title><rect x="345" y="628" width="2" height="15" fill="rgb(228,30,13)"/><text x="348.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="345" y="644" width="2" height="15" fill="rgb(233,34,24)"/><text x="348.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="345" y="660" width="2" height="15" fill="rgb(238,120,11)"/><text x="348.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="345" y="676" width="2" height="15" fill="rgb(239,121,38)"/><text x="348.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="345" y="692" width="2" height="15" fill="rgb(220,195,10)"/><text x="348.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="345" y="708" width="2" height="15" fill="rgb(253,92,47)"/><text x="348.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/io/api.py:21) (1 samples, 0.12%)</title><rect x="345" y="724" width="2" height="15" fill="rgb(238,174,33)"/><text x="348.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="345" y="740" width="2" height="15" fill="rgb(235,158,12)"/><text x="348.00" y="750.50"></text></g><g><title>__exit__ (&lt;frozen importlib._bootstrap&gt;:152) (1 samples, 0.12%)</title><rect x="345" y="756" width="2" height="15" fill="rgb(223,173,15)"/><text x="348.00" y="766.50"></text></g><g><title>release (&lt;frozen importlib._bootstrap&gt;:104) (1 samples, 0.12%)</title><rect x="345" y="772" width="2" height="15" fill="rgb(236,47,4)"/><text x="348.00" y="782.50"></text></g><g><title>thread_get_ident (python3.7) (1 samples, 0.12%)</title><rect x="345" y="788" width="2" height="15" fill="rgb(237,12,46)"/><text x="348.00" y="798.50"></text></g><g><title>PyThread_get_thread_ident (python3.7) (1 samples, 0.12%)</title><rect x="345" y="804" width="2" height="15" fill="rgb(214,223,43)"/><text x="348.00" y="814.50"></text></g><g><title>&lt;module&gt; (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:4) (10 samples, 1.24%)</title><rect x="334" y="52" width="14" height="15" fill="rgb(254,188,6)"/><text x="337.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 1.24%)</title><rect x="334" y="68" width="14" height="15" fill="rgb(216,127,4)"/><text x="337.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 1.24%)</title><rect x="334" y="84" width="14" height="15" fill="rgb(235,168,18)"/><text x="337.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 1.24%)</title><rect x="334" y="100" width="14" height="15" fill="rgb(244,24,12)"/><text x="337.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 1.24%)</title><rect x="334" y="116" width="14" height="15" fill="rgb(214,174,8)"/><text x="337.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 1.24%)</title><rect x="334" y="132" width="14" height="15" fill="rgb(239,84,13)"/><text x="337.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/svm/SVC/bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf.py:7) (5 samples, 0.62%)</title><rect x="341" y="148" width="7" height="15" fill="rgb(246,137,12)"/><text x="344.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.62%)</title><rect x="341" y="164" width="7" height="15" fill="rgb(218,180,5)"/><text x="344.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.62%)</title><rect x="341" y="180" width="7" height="15" fill="rgb(234,215,16)"/><text x="344.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.62%)</title><rect x="341" y="196" width="7" height="15" fill="rgb(232,219,31)"/><text x="344.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.62%)</title><rect x="341" y="212" width="7" height="15" fill="rgb(217,139,14)"/><text x="344.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.62%)</title><rect x="341" y="228" width="7" height="15" fill="rgb(213,28,46)"/><text x="344.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (2 samples, 0.25%)</title><rect x="345" y="244" width="3" height="15" fill="rgb(207,104,35)"/><text x="348.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.25%)</title><rect x="345" y="260" width="3" height="15" fill="rgb(218,148,3)"/><text x="348.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.25%)</title><rect x="345" y="276" width="3" height="15" fill="rgb(238,51,21)"/><text x="348.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.25%)</title><rect x="345" y="292" width="3" height="15" fill="rgb(219,3,16)"/><text x="348.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.25%)</title><rect x="345" y="308" width="3" height="15" fill="rgb(253,160,6)"/><text x="348.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.25%)</title><rect x="345" y="324" width="3" height="15" fill="rgb(239,190,24)"/><text x="348.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (2 samples, 0.25%)</title><rect x="345" y="340" width="3" height="15" fill="rgb(214,212,9)"/><text x="348.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.25%)</title><rect x="345" y="356" width="3" height="15" fill="rgb(253,152,27)"/><text x="348.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.25%)</title><rect x="345" y="372" width="3" height="15" fill="rgb(243,75,17)"/><text x="348.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.25%)</title><rect x="345" y="388" width="3" height="15" fill="rgb(231,77,26)"/><text x="348.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.25%)</title><rect x="345" y="404" width="3" height="15" fill="rgb(221,1,53)"/><text x="348.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.25%)</title><rect x="345" y="420" width="3" height="15" fill="rgb(232,183,45)"/><text x="348.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (2 samples, 0.25%)</title><rect x="345" y="436" width="3" height="15" fill="rgb(234,182,4)"/><text x="348.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.25%)</title><rect x="345" y="452" width="3" height="15" fill="rgb(232,26,27)"/><text x="348.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.25%)</title><rect x="345" y="468" width="3" height="15" fill="rgb(219,193,37)"/><text x="348.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.25%)</title><rect x="345" y="484" width="3" height="15" fill="rgb(233,171,1)"/><text x="348.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.25%)</title><rect x="345" y="500" width="3" height="15" fill="rgb(218,45,15)"/><text x="348.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.25%)</title><rect x="345" y="516" width="3" height="15" fill="rgb(251,145,13)"/><text x="348.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (2 samples, 0.25%)</title><rect x="345" y="532" width="3" height="15" fill="rgb(216,163,11)"/><text x="348.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.25%)</title><rect x="345" y="548" width="3" height="15" fill="rgb(244,221,23)"/><text x="348.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.25%)</title><rect x="345" y="564" width="3" height="15" fill="rgb(218,200,25)"/><text x="348.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.25%)</title><rect x="345" y="580" width="3" height="15" fill="rgb(235,139,5)"/><text x="348.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.25%)</title><rect x="345" y="596" width="3" height="15" fill="rgb(235,98,8)"/><text x="348.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.25%)</title><rect x="345" y="612" width="3" height="15" fill="rgb(213,142,12)"/><text x="348.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (1 samples, 0.12%)</title><rect x="347" y="628" width="1" height="15" fill="rgb(227,151,47)"/><text x="350.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="347" y="644" width="1" height="15" fill="rgb(237,122,48)"/><text x="350.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="347" y="660" width="1" height="15" fill="rgb(239,14,4)"/><text x="350.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="347" y="676" width="1" height="15" fill="rgb(236,228,37)"/><text x="350.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="347" y="692" width="1" height="15" fill="rgb(238,203,32)"/><text x="350.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="347" y="708" width="1" height="15" fill="rgb(205,119,50)"/><text x="350.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (1 samples, 0.12%)</title><rect x="347" y="724" width="1" height="15" fill="rgb(218,108,48)"/><text x="350.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="347" y="740" width="1" height="15" fill="rgb(226,19,9)"/><text x="350.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="347" y="756" width="1" height="15" fill="rgb(248,64,33)"/><text x="350.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="347" y="772" width="1" height="15" fill="rgb(237,160,34)"/><text x="350.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="347" y="788" width="1" height="15" fill="rgb(237,36,0)"/><text x="350.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="347" y="804" width="1" height="15" fill="rgb(219,148,6)"/><text x="350.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (1 samples, 0.12%)</title><rect x="347" y="820" width="1" height="15" fill="rgb(250,107,17)"/><text x="350.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="347" y="836" width="1" height="15" fill="rgb(216,120,6)"/><text x="350.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="347" y="852" width="1" height="15" fill="rgb(206,74,30)"/><text x="350.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="347" y="868" width="1" height="15" fill="rgb(207,98,37)"/><text x="350.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="347" y="884" width="1" height="15" fill="rgb(214,134,37)"/><text x="350.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="347" y="900" width="1" height="15" fill="rgb(230,112,29)"/><text x="350.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:44) (1 samples, 0.12%)</title><rect x="347" y="916" width="1" height="15" fill="rgb(253,194,15)"/><text x="350.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="347" y="932" width="1" height="15" fill="rgb(208,223,7)"/><text x="350.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="347" y="948" width="1" height="15" fill="rgb(205,179,29)"/><text x="350.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="347" y="964" width="1" height="15" fill="rgb(222,56,23)"/><text x="350.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="347" y="980" width="1" height="15" fill="rgb(205,68,42)"/><text x="350.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="347" y="996" width="1" height="15" fill="rgb(241,161,45)"/><text x="350.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py:104) (1 samples, 0.12%)</title><rect x="347" y="1012" width="1" height="15" fill="rgb(229,17,0)"/><text x="350.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="347" y="1028" width="1" height="15" fill="rgb(247,80,25)"/><text x="350.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="347" y="1044" width="1" height="15" fill="rgb(237,188,34)"/><text x="350.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="347" y="1060" width="1" height="15" fill="rgb(246,137,16)"/><text x="350.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 0.12%)</title><rect x="347" y="1076" width="1" height="15" fill="rgb(210,91,53)"/><text x="350.00" y="1086.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:857) (1 samples, 0.12%)</title><rect x="347" y="1092" width="1" height="15" fill="rgb(237,136,27)"/><text x="350.00" y="1102.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:525) (1 samples, 0.12%)</title><rect x="347" y="1108" width="1" height="15" fill="rgb(241,40,42)"/><text x="350.00" y="1118.50"></text></g><g><title>setup_profile (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:28) (1 samples, 0.12%)</title><rect x="348" y="84" width="2" height="15" fill="rgb(247,119,9)"/><text x="351.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (1 samples, 0.12%)</title><rect x="348" y="100" width="2" height="15" fill="rgb(219,13,38)"/><text x="351.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:230) (1 samples, 0.12%)</title><rect x="348" y="116" width="2" height="15" fill="rgb(227,122,15)"/><text x="351.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py:114) (1 samples, 0.12%)</title><rect x="348" y="132" width="2" height="15" fill="rgb(220,143,53)"/><text x="351.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py:62) (1 samples, 0.12%)</title><rect x="348" y="148" width="2" height="15" fill="rgb(224,148,53)"/><text x="351.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py:115) (1 samples, 0.12%)</title><rect x="348" y="164" width="2" height="15" fill="rgb(212,86,28)"/><text x="351.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py:101) (1 samples, 0.12%)</title><rect x="348" y="180" width="2" height="15" fill="rgb(238,228,19)"/><text x="351.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py:28) (1 samples, 0.12%)</title><rect x="348" y="196" width="2" height="15" fill="rgb(229,79,35)"/><text x="351.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="348" y="212" width="2" height="15" fill="rgb(219,28,18)"/><text x="351.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="348" y="228" width="2" height="15" fill="rgb(213,146,12)"/><text x="351.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="348" y="244" width="2" height="15" fill="rgb(208,84,3)"/><text x="351.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="348" y="260" width="2" height="15" fill="rgb(211,140,39)"/><text x="351.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="348" y="276" width="2" height="15" fill="rgb(244,128,25)"/><text x="351.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py:7) (1 samples, 0.12%)</title><rect x="348" y="292" width="2" height="15" fill="rgb(241,28,13)"/><text x="351.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.12%)</title><rect x="348" y="308" width="2" height="15" fill="rgb(228,27,7)"/><text x="351.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.12%)</title><rect x="348" y="324" width="2" height="15" fill="rgb(206,90,32)"/><text x="351.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.12%)</title><rect x="348" y="340" width="2" height="15" fill="rgb(208,163,43)"/><text x="351.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.12%)</title><rect x="348" y="356" width="2" height="15" fill="rgb(206,136,21)"/><text x="351.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.12%)</title><rect x="348" y="372" width="2" height="15" fill="rgb(209,204,36)"/><text x="351.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py:88) (1 samples, 0.12%)</title><rect x="348" y="388" width="2" height="15" fill="rgb(223,174,53)"/><text x="351.00" y="398.50"></text></g><g><title>get_rst_doc (mlprodict/onnxrt/doc/doc_helper.py:268) (1 samples, 0.12%)</title><rect x="348" y="404" width="2" height="15" fill="rgb(222,60,28)"/><text x="351.00" y="414.50"></text></g><g><title>render (jinja2/asyncsupport.py:76) (1 samples, 0.12%)</title><rect x="348" y="420" width="2" height="15" fill="rgb(239,209,14)"/><text x="351.00" y="430.50"></text></g><g><title>render (jinja2/environment.py:1005) (1 samples, 0.12%)</title><rect x="348" y="436" width="2" height="15" fill="rgb(229,199,35)"/><text x="351.00" y="446.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.12%)</title><rect x="348" y="452" width="2" height="15" fill="rgb(249,197,25)"/><text x="351.00" y="462.50"></text></g><g><title>root (&lt;template&gt;:25) (1 samples, 0.12%)</title><rect x="348" y="468" width="2" height="15" fill="rgb(248,113,7)"/><text x="351.00" y="478.50"></text></g><g><title>call (jinja2/runtime.py:262) (1 samples, 0.12%)</title><rect x="348" y="484" width="2" height="15" fill="rgb(239,150,17)"/><text x="351.00" y="494.50"></text></g><g><title>process_documentation (mlprodict/onnxrt/doc/doc_helper.py:204) (1 samples, 0.12%)</title><rect x="348" y="500" width="2" height="15" fill="rgb(229,193,23)"/><text x="351.00" y="510.50"></text></g><g><title>unicode_replace (python3.7) (1 samples, 0.12%)</title><rect x="348" y="516" width="2" height="15" fill="rgb(206,188,12)"/><text x="351.00" y="526.50"></text></g><g><title>0x7f80a94e5c29 (?) (1 samples, 0.12%)</title><rect x="350" y="244" width="1" height="15" fill="rgb(222,174,18)"/><text x="353.00" y="254.50"></text></g><g><title>0x7f80a94ecd9e (?) (1 samples, 0.12%)</title><rect x="350" y="260" width="1" height="15" fill="rgb(218,126,9)"/><text x="353.00" y="270.50"></text></g><g><title>0x7f80a94ecc56 (?) (1 samples, 0.12%)</title><rect x="350" y="276" width="1" height="15" fill="rgb(216,45,12)"/><text x="353.00" y="286.50"></text></g><g><title>0x7f80a94f2ac7 (?) (1 samples, 0.12%)</title><rect x="350" y="292" width="1" height="15" fill="rgb(249,155,46)"/><text x="353.00" y="302.50"></text></g><g><title>0x7f80a94f1c5c (?) (1 samples, 0.12%)</title><rect x="350" y="308" width="1" height="15" fill="rgb(215,205,25)"/><text x="353.00" y="318.50"></text></g><g><title>0x7f80a94db338 (?) (1 samples, 0.12%)</title><rect x="350" y="324" width="1" height="15" fill="rgb(239,41,47)"/><text x="353.00" y="334.50"></text></g><g><title>expf32x (libm-2.29.so) (1 samples, 0.12%)</title><rect x="350" y="340" width="1" height="15" fill="rgb(222,178,29)"/><text x="353.00" y="350.50"></text></g><g><title>0x7f80e8548be2 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="350" y="356" width="1" height="15" fill="rgb(227,10,45)"/><text x="353.00" y="366.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:406) (1 samples, 0.12%)</title><rect x="351" y="452" width="2" height="15" fill="rgb(219,155,43)"/><text x="354.00" y="462.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:412) (1 samples, 0.12%)</title><rect x="351" y="468" width="2" height="15" fill="rgb(252,179,47)"/><text x="354.00" y="478.50"></text></g><g><title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_M_allocate (stl_vector.h:170) (1 samples, 0.12%)</title><rect x="351" y="484" width="2" height="15" fill="rgb(247,32,8)"/><text x="354.00" y="494.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;float&gt; &gt;::allocate (alloc_traits.h:436) (1 samples, 0.12%)</title><rect x="351" y="500" width="2" height="15" fill="rgb(205,173,22)"/><text x="354.00" y="510.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;float&gt;::allocate (new_allocator.h:104) (1 samples, 0.12%)</title><rect x="351" y="516" width="2" height="15" fill="rgb(237,45,46)"/><text x="354.00" y="526.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="351" y="532" width="2" height="15" fill="rgb(230,17,29)"/><text x="354.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="351" y="548" width="2" height="15" fill="rgb(248,64,25)"/><text x="354.00" y="558.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:292) (10 samples, 1.24%)</title><rect x="356" y="468" width="14" height="15" fill="rgb(243,30,47)"/><text x="359.00" y="478.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:293) (8 samples, 0.99%)</title><rect x="370" y="468" width="12" height="15" fill="rgb(211,25,15)"/><text x="373.00" y="478.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:294) (7 samples, 0.87%)</title><rect x="382" y="468" width="10" height="15" fill="rgb(252,75,3)"/><text x="385.00" y="478.50"></text></g><g><title>0x7f80e8548bb4 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="399" y="500" width="2" height="15" fill="rgb(252,18,5)"/><text x="402.00" y="510.50"></text></g><g><title>0x7f80e8548c04 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="401" y="500" width="1" height="15" fill="rgb(213,147,14)"/><text x="404.00" y="510.50"></text></g><g><title>0x7f80e8548c28 (libm-2.29.so) (2 samples, 0.25%)</title><rect x="402" y="500" width="3" height="15" fill="rgb(233,58,36)"/><text x="405.00" y="510.50"></text></g><g><title>0x7f80e8548c5a (libm-2.29.so) (2 samples, 0.25%)</title><rect x="405" y="500" width="3" height="15" fill="rgb(226,34,5)"/><text x="408.00" y="510.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:407) (39 samples, 4.83%)</title><rect x="353" y="452" width="57" height="15" fill="rgb(209,48,32)"/><text x="356.00" y="462.50">Runtim..</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:296) (12 samples, 1.49%)</title><rect x="392" y="468" width="18" height="15" fill="rgb(216,74,32)"/><text x="395.00" y="478.50"></text></g><g><title>expf32x (libm-2.29.so) (8 samples, 0.99%)</title><rect x="398" y="484" width="12" height="15" fill="rgb(251,191,33)"/><text x="401.00" y="494.50"></text></g><g><title>0x7f80e8548c7f (libm-2.29.so) (1 samples, 0.12%)</title><rect x="408" y="500" width="2" height="15" fill="rgb(217,68,27)"/><text x="411.00" y="510.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:426) (2 samples, 0.25%)</title><rect x="410" y="452" width="3" height="15" fill="rgb(235,44,30)"/><text x="413.00" y="462.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:431) (1 samples, 0.12%)</title><rect x="413" y="452" width="1" height="15" fill="rgb(252,51,29)"/><text x="416.00" y="462.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:411) (1 samples, 0.12%)</title><rect x="414" y="500" width="1" height="15" fill="rgb(250,24,28)"/><text x="417.00" y="510.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_check_len (stl_vector.h:1422) (1 samples, 0.12%)</title><rect x="414" y="516" width="1" height="15" fill="rgb(210,204,10)"/><text x="417.00" y="526.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::size (stl_vector.h:656) (1 samples, 0.12%)</title><rect x="414" y="532" width="1" height="15" fill="rgb(244,65,15)"/><text x="417.00" y="542.50"></text></g><g><title>multiclass_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:310) (2 samples, 0.25%)</title><rect x="414" y="484" width="3" height="15" fill="rgb(216,1,54)"/><text x="417.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:441) (1 samples, 0.12%)</title><rect x="415" y="500" width="2" height="15" fill="rgb(214,42,16)"/><text x="418.00" y="510.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.12%)</title><rect x="415" y="516" width="2" height="15" fill="rgb(205,131,25)"/><text x="418.00" y="526.50"></text></g><g><title>multiclass_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:324) (1 samples, 0.12%)</title><rect x="417" y="484" width="1" height="15" fill="rgb(243,54,14)"/><text x="420.00" y="494.50"></text></g><g><title>multiclass_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:354) (1 samples, 0.12%)</title><rect x="418" y="484" width="2" height="15" fill="rgb(245,101,15)"/><text x="421.00" y="494.50"></text></g><g><title>profile (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:18) (49 samples, 6.06%)</title><rect x="350" y="100" width="71" height="15" fill="rgb(253,164,10)"/><text x="353.00" y="110.50">profile ..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (49 samples, 6.06%)</title><rect x="350" y="116" width="71" height="15" fill="rgb(243,224,36)"/><text x="353.00" y="126.50">time_pre..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (49 samples, 6.06%)</title><rect x="350" y="132" width="71" height="15" fill="rgb(216,122,6)"/><text x="353.00" y="142.50">&lt;lambda&gt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (49 samples, 6.06%)</title><rect x="350" y="148" width="71" height="15" fill="rgb(232,160,36)"/><text x="353.00" y="158.50">run (mlp..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (49 samples, 6.06%)</title><rect x="350" y="164" width="71" height="15" fill="rgb(219,16,53)"/><text x="353.00" y="174.50">_run_seq..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (49 samples, 6.06%)</title><rect x="350" y="180" width="71" height="15" fill="rgb(205,114,43)"/><text x="353.00" y="190.50">run (mlp..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:381) (49 samples, 6.06%)</title><rect x="350" y="196" width="71" height="15" fill="rgb(208,122,4)"/><text x="353.00" y="206.50">run (mlp..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (49 samples, 6.06%)</title><rect x="350" y="212" width="71" height="15" fill="rgb(214,215,27)"/><text x="353.00" y="222.50">run (mlp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_svm_classifier.py:59) (49 samples, 6.06%)</title><rect x="350" y="228" width="71" height="15" fill="rgb(235,139,48)"/><text x="353.00" y="238.50">_run (ml..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (48 samples, 5.94%)</title><rect x="351" y="244" width="70" height="15" fill="rgb(227,71,13)"/><text x="354.00" y="254.50">pybind1..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (48 samples, 5.94%)</title><rect x="351" y="260" width="70" height="15" fill="rgb(251,189,28)"/><text x="354.00" y="270.50">void py..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (48 samples, 5.94%)</title><rect x="351" y="276" width="70" height="15" fill="rgb(249,206,9)"/><text x="354.00" y="286.50">void py..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (48 samples, 5.94%)</title><rect x="351" y="292" width="70" height="15" fill="rgb(223,193,14)"/><text x="354.00" y="302.50">pybind1..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (48 samples, 5.94%)</title><rect x="351" y="308" width="70" height="15" fill="rgb(224,197,0)"/><text x="354.00" y="318.50">pybind1..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (48 samples, 5.94%)</title><rect x="351" y="324" width="70" height="15" fill="rgb(224,87,18)"/><text x="354.00" y="334.50">pybind1..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (48 samples, 5.94%)</title><rect x="351" y="340" width="70" height="15" fill="rgb(241,175,49)"/><text x="354.00" y="350.50">pybind1..</text></g><g><title>pybind11::array::~array (numpy.h:538) (48 samples, 5.94%)</title><rect x="351" y="356" width="70" height="15" fill="rgb(216,133,49)"/><text x="354.00" y="366.50">pybind1..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (48 samples, 5.94%)</title><rect x="351" y="372" width="70" height="15" fill="rgb(246,217,49)"/><text x="354.00" y="382.50">pybind1..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (48 samples, 5.94%)</title><rect x="351" y="388" width="70" height="15" fill="rgb(251,193,9)"/><text x="354.00" y="398.50">pybind1..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (48 samples, 5.94%)</title><rect x="351" y="404" width="70" height="15" fill="rgb(215,30,36)"/><text x="354.00" y="414.50">pybind1..</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:260) (48 samples, 5.94%)</title><rect x="351" y="420" width="70" height="15" fill="rgb(244,204,8)"/><text x="354.00" y="430.50">Runtime..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h:1983) (48 samples, 5.94%)</title><rect x="351" y="436" width="70" height="15" fill="rgb(214,70,36)"/><text x="354.00" y="446.50">pybind1..</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:463) (5 samples, 0.62%)</title><rect x="414" y="452" width="7" height="15" fill="rgb(226,107,32)"/><text x="417.00" y="462.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::size (stl_vector.h:656) (5 samples, 0.62%)</title><rect x="414" y="468" width="7" height="15" fill="rgb(253,136,34)"/><text x="417.00" y="478.50"></text></g><g><title>multiclass_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:358) (1 samples, 0.12%)</title><rect x="420" y="484" width="1" height="15" fill="rgb(253,184,17)"/><text x="423.00" y="494.50"></text></g><g><title>0x7f80e8376998 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="420" y="500" width="1" height="15" fill="rgb(245,74,40)"/><text x="423.00" y="510.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:389) (1 samples, 0.12%)</title><rect x="421" y="452" width="2" height="15" fill="rgb(240,75,29)"/><text x="424.00" y="462.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::~vector (stl_vector.h:426) (1 samples, 0.12%)</title><rect x="421" y="468" width="2" height="15" fill="rgb(249,162,33)"/><text x="424.00" y="478.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.12%)</title><rect x="421" y="484" width="2" height="15" fill="rgb(207,102,13)"/><text x="424.00" y="494.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:390) (1 samples, 0.12%)</title><rect x="423" y="452" width="1" height="15" fill="rgb(233,44,3)"/><text x="426.00" y="462.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::~vector (stl_vector.h:426) (1 samples, 0.12%)</title><rect x="423" y="468" width="1" height="15" fill="rgb(239,152,49)"/><text x="426.00" y="478.50"></text></g><g><title>0x7f80a94d52a0 (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="423" y="484" width="1" height="15" fill="rgb(218,11,31)"/><text x="426.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:407) (1 samples, 0.12%)</title><rect x="427" y="468" width="2" height="15" fill="rgb(245,94,9)"/><text x="430.00" y="478.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:412) (1 samples, 0.12%)</title><rect x="429" y="468" width="1" height="15" fill="rgb(223,129,6)"/><text x="432.00" y="478.50"></text></g><g><title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_M_allocate (stl_vector.h:170) (1 samples, 0.12%)</title><rect x="429" y="484" width="1" height="15" fill="rgb(242,40,26)"/><text x="432.00" y="494.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;float&gt; &gt;::allocate (alloc_traits.h:436) (1 samples, 0.12%)</title><rect x="429" y="500" width="1" height="15" fill="rgb(212,49,13)"/><text x="432.00" y="510.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;float&gt;::allocate (new_allocator.h:104) (1 samples, 0.12%)</title><rect x="429" y="516" width="1" height="15" fill="rgb(206,146,36)"/><text x="432.00" y="526.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="429" y="532" width="1" height="15" fill="rgb(212,198,21)"/><text x="432.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="429" y="548" width="1" height="15" fill="rgb(245,204,9)"/><text x="432.00" y="558.50"></text></g><g><title>0x7f80e8396d62 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="432" y="484" width="1" height="15" fill="rgb(225,151,41)"/><text x="435.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:425) (3 samples, 0.37%)</title><rect x="430" y="468" width="4" height="15" fill="rgb(246,9,36)"/><text x="433.00" y="478.50"></text></g><g><title>0x7f80e8396de6 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="433" y="484" width="1" height="15" fill="rgb(217,29,49)"/><text x="436.00" y="494.50"></text></g><g><title>0x7f80e837696a (libc-2.29.so) (1 samples, 0.12%)</title><rect x="434" y="484" width="2" height="15" fill="rgb(229,114,38)"/><text x="437.00" y="494.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:406) (11 samples, 1.36%)</title><rect x="424" y="452" width="16" height="15" fill="rgb(205,110,4)"/><text x="427.00" y="462.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:441) (4 samples, 0.50%)</title><rect x="434" y="468" width="6" height="15" fill="rgb(215,159,16)"/><text x="437.00" y="478.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.37%)</title><rect x="436" y="484" width="4" height="15" fill="rgb(253,40,42)"/><text x="439.00" y="494.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:267) (1 samples, 0.12%)</title><rect x="445" y="468" width="1" height="15" fill="rgb(235,209,6)"/><text x="448.00" y="478.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:272) (1 samples, 0.12%)</title><rect x="446" y="468" width="2" height="15" fill="rgb(224,154,52)"/><text x="449.00" y="478.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:274) (3 samples, 0.37%)</title><rect x="448" y="468" width="4" height="15" fill="rgb(251,176,7)"/><text x="451.00" y="478.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:292) (48 samples, 5.94%)</title><rect x="452" y="468" width="70" height="15" fill="rgb(209,48,34)"/><text x="455.00" y="478.50">Runtime..</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:293) (47 samples, 5.82%)</title><rect x="522" y="468" width="69" height="15" fill="rgb(239,96,24)"/><text x="525.00" y="478.50">Runtime..</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:294) (28 samples, 3.47%)</title><rect x="591" y="468" width="41" height="15" fill="rgb(210,29,9)"/><text x="594.00" y="478.50">Run..</text></g><g><title>0x7f80e8548ba0 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="670" y="500" width="1" height="15" fill="rgb(213,121,14)"/><text x="673.00" y="510.50"></text></g><g><title>0x7f80e8548bb4 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="671" y="500" width="2" height="15" fill="rgb(230,147,43)"/><text x="674.00" y="510.50"></text></g><g><title>0x7f80e8548beb (libm-2.29.so) (2 samples, 0.25%)</title><rect x="673" y="500" width="2" height="15" fill="rgb(206,105,41)"/><text x="676.00" y="510.50"></text></g><g><title>0x7f80e8548c04 (libm-2.29.so) (3 samples, 0.37%)</title><rect x="675" y="500" width="5" height="15" fill="rgb(226,8,0)"/><text x="678.00" y="510.50"></text></g><g><title>0x7f80e8548c0c (libm-2.29.so) (2 samples, 0.25%)</title><rect x="680" y="500" width="3" height="15" fill="rgb(243,115,7)"/><text x="683.00" y="510.50"></text></g><g><title>0x7f80e8548c10 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="683" y="500" width="1" height="15" fill="rgb(238,106,3)"/><text x="686.00" y="510.50"></text></g><g><title>0x7f80e8548c28 (libm-2.29.so) (2 samples, 0.25%)</title><rect x="684" y="500" width="3" height="15" fill="rgb(221,83,46)"/><text x="687.00" y="510.50"></text></g><g><title>0x7f80e8548c32 (libm-2.29.so) (4 samples, 0.50%)</title><rect x="687" y="500" width="6" height="15" fill="rgb(232,177,33)"/><text x="690.00" y="510.50"></text></g><g><title>0x7f80e8548c3e (libm-2.29.so) (2 samples, 0.25%)</title><rect x="693" y="500" width="3" height="15" fill="rgb(245,45,29)"/><text x="696.00" y="510.50"></text></g><g><title>0x7f80e8548c52 (libm-2.29.so) (4 samples, 0.50%)</title><rect x="696" y="500" width="6" height="15" fill="rgb(222,132,41)"/><text x="699.00" y="510.50"></text></g><g><title>0x7f80e8548c5a (libm-2.29.so) (1 samples, 0.12%)</title><rect x="702" y="500" width="1" height="15" fill="rgb(207,50,54)"/><text x="705.00" y="510.50"></text></g><g><title>0x7f80e8548c7b (libm-2.29.so) (3 samples, 0.37%)</title><rect x="703" y="500" width="5" height="15" fill="rgb(248,122,16)"/><text x="706.00" y="510.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:407) (185 samples, 22.90%)</title><rect x="440" y="452" width="270" height="15" fill="rgb(210,201,38)"/><text x="443.00" y="462.50">RuntimeSVMClassifier&lt;float&gt;::compute..</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::kernel_dot_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:296) (54 samples, 6.68%)</title><rect x="632" y="468" width="78" height="15" fill="rgb(211,146,25)"/><text x="635.00" y="478.50">RuntimeSV..</text></g><g><title>expf32x (libm-2.29.so) (41 samples, 5.07%)</title><rect x="651" y="484" width="59" height="15" fill="rgb(221,222,53)"/><text x="654.00" y="494.50">expf32..</text></g><g><title>0x7f80e8548c7f (libm-2.29.so) (2 samples, 0.25%)</title><rect x="708" y="500" width="2" height="15" fill="rgb(246,203,31)"/><text x="711.00" y="510.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:410) (1 samples, 0.12%)</title><rect x="710" y="452" width="2" height="15" fill="rgb(213,46,21)"/><text x="713.00" y="462.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::push_back (stl_vector.h:920) (1 samples, 0.12%)</title><rect x="710" y="468" width="2" height="15" fill="rgb(233,177,49)"/><text x="713.00" y="478.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:412) (1 samples, 0.12%)</title><rect x="712" y="452" width="1" height="15" fill="rgb(223,190,18)"/><text x="715.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::resize (stl_vector.h:697) (1 samples, 0.12%)</title><rect x="712" y="468" width="1" height="15" fill="rgb(236,126,41)"/><text x="715.00" y="478.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::insert (stl_vector.h:1055) (1 samples, 0.12%)</title><rect x="712" y="484" width="1" height="15" fill="rgb(238,180,25)"/><text x="715.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (vector.tcc:491) (1 samples, 0.12%)</title><rect x="712" y="500" width="1" height="15" fill="rgb(222,60,19)"/><text x="715.00" y="510.50"></text></g><g><title>std::_Vector_base&lt;long, std::allocator&lt;long&gt; &gt;::_M_allocate (stl_vector.h:170) (1 samples, 0.12%)</title><rect x="712" y="516" width="1" height="15" fill="rgb(221,222,30)"/><text x="715.00" y="526.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;long&gt; &gt;::allocate (alloc_traits.h:436) (1 samples, 0.12%)</title><rect x="712" y="532" width="1" height="15" fill="rgb(210,108,38)"/><text x="715.00" y="542.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;long&gt;::allocate (new_allocator.h:104) (1 samples, 0.12%)</title><rect x="712" y="548" width="1" height="15" fill="rgb(243,214,37)"/><text x="715.00" y="558.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="712" y="564" width="1" height="15" fill="rgb(232,16,7)"/><text x="715.00" y="574.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="712" y="580" width="1" height="15" fill="rgb(211,177,34)"/><text x="715.00" y="590.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:426) (1 samples, 0.12%)</title><rect x="713" y="452" width="2" height="15" fill="rgb(244,112,34)"/><text x="716.00" y="462.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:431) (3 samples, 0.37%)</title><rect x="715" y="452" width="4" height="15" fill="rgb(228,130,33)"/><text x="718.00" y="462.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:435) (1 samples, 0.12%)</title><rect x="719" y="452" width="2" height="15" fill="rgb(231,168,36)"/><text x="722.00" y="462.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::push_back (stl_vector.h:933) (1 samples, 0.12%)</title><rect x="719" y="468" width="2" height="15" fill="rgb(254,99,12)"/><text x="722.00" y="478.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::emplace_back&lt;float&gt; (vector.tcc:101) (1 samples, 0.12%)</title><rect x="719" y="484" width="2" height="15" fill="rgb(220,11,41)"/><text x="722.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:441) (1 samples, 0.12%)</title><rect x="719" y="500" width="2" height="15" fill="rgb(227,16,13)"/><text x="722.00" y="510.50"></text></g><g><title>0x7f80e8376929 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="719" y="516" width="2" height="15" fill="rgb(206,54,34)"/><text x="722.00" y="526.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:450) (1 samples, 0.12%)</title><rect x="721" y="452" width="1" height="15" fill="rgb(211,31,22)"/><text x="724.00" y="462.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:452) (1 samples, 0.12%)</title><rect x="722" y="452" width="2" height="15" fill="rgb(205,171,49)"/><text x="725.00" y="462.50"></text></g><g><title>sigmoid_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_common_.hpp:103) (1 samples, 0.12%)</title><rect x="722" y="468" width="2" height="15" fill="rgb(226,204,41)"/><text x="725.00" y="478.50"></text></g><g><title>ComputeLogistic (mlprodict/onnxrt/ops_cpu/op_common_.hpp:80) (1 samples, 0.12%)</title><rect x="722" y="484" width="2" height="15" fill="rgb(249,13,51)"/><text x="725.00" y="494.50"></text></g><g><title>0x7f80e84f5ea6 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="722" y="500" width="2" height="15" fill="rgb(253,71,44)"/><text x="725.00" y="510.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:407) (1 samples, 0.12%)</title><rect x="724" y="500" width="1" height="15" fill="rgb(246,69,20)"/><text x="727.00" y="510.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:412) (1 samples, 0.12%)</title><rect x="725" y="500" width="2" height="15" fill="rgb(235,156,27)"/><text x="728.00" y="510.50"></text></g><g><title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_M_allocate (stl_vector.h:170) (1 samples, 0.12%)</title><rect x="725" y="516" width="2" height="15" fill="rgb(249,93,29)"/><text x="728.00" y="526.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;float&gt; &gt;::allocate (alloc_traits.h:436) (1 samples, 0.12%)</title><rect x="725" y="532" width="2" height="15" fill="rgb(240,128,7)"/><text x="728.00" y="542.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;float&gt;::allocate (new_allocator.h:104) (1 samples, 0.12%)</title><rect x="725" y="548" width="2" height="15" fill="rgb(206,69,36)"/><text x="728.00" y="558.50"></text></g><g><title>0x7f80a94d52d0 (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="725" y="564" width="2" height="15" fill="rgb(221,48,40)"/><text x="728.00" y="574.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:416) (1 samples, 0.12%)</title><rect x="727" y="500" width="1" height="15" fill="rgb(211,1,20)"/><text x="730.00" y="510.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::size (stl_vector.h:656) (1 samples, 0.12%)</title><rect x="727" y="516" width="1" height="15" fill="rgb(207,187,5)"/><text x="730.00" y="526.50"></text></g><g><title>0x7f80e837691c (libc-2.29.so) (1 samples, 0.12%)</title><rect x="728" y="516" width="1" height="15" fill="rgb(212,219,24)"/><text x="731.00" y="526.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:441) (2 samples, 0.25%)</title><rect x="728" y="500" width="3" height="15" fill="rgb(225,62,13)"/><text x="731.00" y="510.50"></text></g><g><title>0x7f80e8376a55 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="729" y="516" width="2" height="15" fill="rgb(208,75,2)"/><text x="732.00" y="526.50"></text></g><g><title>multiclass_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:310) (6 samples, 0.74%)</title><rect x="724" y="484" width="8" height="15" fill="rgb(244,165,38)"/><text x="727.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:442) (1 samples, 0.12%)</title><rect x="731" y="500" width="1" height="15" fill="rgb(224,47,12)"/><text x="734.00" y="510.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:412) (1 samples, 0.12%)</title><rect x="732" y="500" width="2" height="15" fill="rgb(239,144,6)"/><text x="735.00" y="510.50"></text></g><g><title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_M_allocate (stl_vector.h:170) (1 samples, 0.12%)</title><rect x="732" y="516" width="2" height="15" fill="rgb(236,114,16)"/><text x="735.00" y="526.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;float&gt; &gt;::allocate (alloc_traits.h:436) (1 samples, 0.12%)</title><rect x="732" y="532" width="2" height="15" fill="rgb(251,104,48)"/><text x="735.00" y="542.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;float&gt;::allocate (new_allocator.h:104) (1 samples, 0.12%)</title><rect x="732" y="548" width="2" height="15" fill="rgb(227,100,39)"/><text x="735.00" y="558.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="732" y="564" width="2" height="15" fill="rgb(225,42,50)"/><text x="735.00" y="574.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="732" y="580" width="2" height="15" fill="rgb(246,33,21)"/><text x="735.00" y="590.50"></text></g><g><title>multiclass_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:313) (2 samples, 0.25%)</title><rect x="732" y="484" width="3" height="15" fill="rgb(216,172,46)"/><text x="735.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float&gt; (vector.tcc:441) (1 samples, 0.12%)</title><rect x="734" y="500" width="1" height="15" fill="rgb(246,18,3)"/><text x="737.00" y="510.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.12%)</title><rect x="734" y="516" width="1" height="15" fill="rgb(218,175,52)"/><text x="737.00" y="526.50"></text></g><g><title>multiclass_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:314) (1 samples, 0.12%)</title><rect x="735" y="484" width="2" height="15" fill="rgb(233,89,44)"/><text x="738.00" y="494.50"></text></g><g><title>multiclass_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:331) (1 samples, 0.12%)</title><rect x="737" y="484" width="1" height="15" fill="rgb(233,131,40)"/><text x="740.00" y="494.50"></text></g><g><title>multiclass_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:334) (1 samples, 0.12%)</title><rect x="738" y="484" width="2" height="15" fill="rgb(234,189,45)"/><text x="741.00" y="494.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:463) (15 samples, 1.86%)</title><rect x="724" y="452" width="22" height="15" fill="rgb(211,158,7)"/><text x="727.00" y="462.50">R..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::size (stl_vector.h:656) (15 samples, 1.86%)</title><rect x="724" y="468" width="22" height="15" fill="rgb(250,175,45)"/><text x="727.00" y="478.50">s..</text></g><g><title>multiclass_probability&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:351) (4 samples, 0.50%)</title><rect x="740" y="484" width="6" height="15" fill="rgb(224,124,25)"/><text x="743.00" y="494.50"></text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:469) (1 samples, 0.12%)</title><rect x="746" y="452" width="1" height="15" fill="rgb(227,159,44)"/><text x="749.00" y="462.50"></text></g><g><title>std::max_element&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; &gt; (stl_algo.h:5549) (1 samples, 0.12%)</title><rect x="746" y="468" width="1" height="15" fill="rgb(206,207,48)"/><text x="749.00" y="478.50"></text></g><g><title>std::__max_element&lt;__gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_less_iter&gt; (stl_algo.h:5524) (1 samples, 0.12%)</title><rect x="746" y="484" width="1" height="15" fill="rgb(243,35,44)"/><text x="749.00" y="494.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (224 samples, 27.72%)</title><rect x="421" y="164" width="327" height="15" fill="rgb(252,154,51)"/><text x="424.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (224 samples, 27.72%)</title><rect x="421" y="180" width="327" height="15" fill="rgb(246,101,40)"/><text x="424.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:381) (224 samples, 27.72%)</title><rect x="421" y="196" width="327" height="15" fill="rgb(252,61,27)"/><text x="424.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:381)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (224 samples, 27.72%)</title><rect x="421" y="212" width="327" height="15" fill="rgb(227,142,5)"/><text x="424.00" y="222.50">run (mlprodict/onnxrt/ops_cpu/_op.py:269)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_svm_classifier.py:59) (224 samples, 27.72%)</title><rect x="421" y="228" width="327" height="15" fill="rgb(236,163,20)"/><text x="424.00" y="238.50">_run (mlprodict/onnxrt/ops_cpu/op_svm_classi..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (224 samples, 27.72%)</title><rect x="421" y="244" width="327" height="15" fill="rgb(207,218,35)"/><text x="424.00" y="254.50">pybind11::cpp_function::dispatcher (pybind11..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (224 samples, 27.72%)</title><rect x="421" y="260" width="327" height="15" fill="rgb(210,191,28)"/><text x="424.00" y="270.50">void pybind11::cpp_function::initialize&lt;pybi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (224 samples, 27.72%)</title><rect x="421" y="276" width="327" height="15" fill="rgb(247,102,6)"/><text x="424.00" y="286.50">void pybind11::cpp_function::initialize&lt;pybi..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (224 samples, 27.72%)</title><rect x="421" y="292" width="327" height="15" fill="rgb(220,39,32)"/><text x="424.00" y="302.50">pybind11::detail::argument_loader&lt;RuntimeSVM..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (224 samples, 27.72%)</title><rect x="421" y="308" width="327" height="15" fill="rgb(212,59,50)"/><text x="424.00" y="318.50">pybind11::detail::argument_loader&lt;RuntimeSVM..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeSVMClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [49]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [49])::{lambda(RuntimeSVMClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (224 samples, 27.72%)</title><rect x="421" y="324" width="327" height="15" fill="rgb(212,154,24)"/><text x="424.00" y="334.50">pybind11::cpp_function::cpp_function&lt;pybind1..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (224 samples, 27.72%)</title><rect x="421" y="340" width="327" height="15" fill="rgb(206,206,19)"/><text x="424.00" y="350.50">pybind11::array_t&lt;float, 16&gt;::~array_t (nump..</text></g><g><title>pybind11::array::~array (numpy.h:538) (224 samples, 27.72%)</title><rect x="421" y="356" width="327" height="15" fill="rgb(208,152,6)"/><text x="424.00" y="366.50">pybind11::array::~array (numpy.h:538)</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (224 samples, 27.72%)</title><rect x="421" y="372" width="327" height="15" fill="rgb(228,74,27)"/><text x="424.00" y="382.50">pybind11::buffer::~buffer (pytypes.h:1311)</text></g><g><title>pybind11::object::~object (pytypes.h:240) (224 samples, 27.72%)</title><rect x="421" y="388" width="327" height="15" fill="rgb(252,10,14)"/><text x="424.00" y="398.50">pybind11::object::~object (pytypes.h:240)</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (224 samples, 27.72%)</title><rect x="421" y="404" width="327" height="15" fill="rgb(220,67,45)"/><text x="424.00" y="414.50">pybind11::handle::dec_ref &amp; (pytypes.h:197)</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:260) (224 samples, 27.72%)</title><rect x="421" y="420" width="327" height="15" fill="rgb(224,164,18)"/><text x="424.00" y="430.50">RuntimeSVMClassifier&lt;float&gt;::compute (mlprod..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h:1983) (224 samples, 27.72%)</title><rect x="421" y="436" width="327" height="15" fill="rgb(218,170,10)"/><text x="424.00" y="446.50">pybind11::gil_scoped_release::~gil_scoped_re..</text></g><g><title>RuntimeSVMClassifier&lt;float&gt;::compute_gil_free (mlprodict/onnxrt/ops_cpu/op_svm_classifier_.cpp:491) (1 samples, 0.12%)</title><rect x="747" y="452" width="1" height="15" fill="rgb(216,68,7)"/><text x="750.00" y="462.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::size (stl_vector.h:656) (1 samples, 0.12%)</title><rect x="747" y="468" width="1" height="15" fill="rgb(223,41,26)"/><text x="750.00" y="478.50"></text></g><g><title>write_scores&lt;float&gt; (mlprodict/onnxrt/ops_cpu/op_common_.hpp:169) (1 samples, 0.12%)</title><rect x="747" y="484" width="1" height="15" fill="rgb(221,73,22)"/><text x="750.00" y="494.50"></text></g><g><title>&lt;module&gt; (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:45) (275 samples, 34.03%)</title><rect x="348" y="52" width="402" height="15" fill="rgb(242,211,10)"/><text x="351.00" y="62.50">&lt;module&gt; (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf..</text></g><g><title>profile_pyrt (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:44) (275 samples, 34.03%)</title><rect x="348" y="68" width="402" height="15" fill="rgb(216,86,27)"/><text x="351.00" y="78.50">profile_pyrt (bench_SVC_rbf_b_cl_probabilityTrue_kerne..</text></g><g><title>setup_profile (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:29) (274 samples, 33.91%)</title><rect x="350" y="84" width="400" height="15" fill="rgb(238,18,17)"/><text x="353.00" y="94.50">setup_profile (bench_SVC_rbf_b_cl_probabilityTrue_kern..</text></g><g><title>profile (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:23) (225 samples, 27.85%)</title><rect x="421" y="100" width="329" height="15" fill="rgb(212,117,22)"/><text x="424.00" y="110.50">profile (bench_SVC_rbf_b_cl_probabilityTrue_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (225 samples, 27.85%)</title><rect x="421" y="116" width="329" height="15" fill="rgb(252,227,51)"/><text x="424.00" y="126.50">time_predict (mlprodict/asv_benchmark/common..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (225 samples, 27.85%)</title><rect x="421" y="132" width="329" height="15" fill="rgb(243,74,15)"/><text x="424.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (225 samples, 27.85%)</title><rect x="421" y="148" width="329" height="15" fill="rgb(249,203,44)"/><text x="424.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>array_dealloc (arrayobject.c:537) (1 samples, 0.12%)</title><rect x="748" y="164" width="2" height="15" fill="rgb(228,70,1)"/><text x="751.00" y="174.50"></text></g><g><title>npy_free_cache (alloc.c:147) (1 samples, 0.12%)</title><rect x="748" y="180" width="2" height="15" fill="rgb(216,77,8)"/><text x="751.00" y="190.50"></text></g><g><title>_npy_free_cache (alloc.c:112) (1 samples, 0.12%)</title><rect x="748" y="196" width="2" height="15" fill="rgb(226,198,8)"/><text x="751.00" y="206.50"></text></g><g><title>PyDataMem_FREE (alloc.c:273) (1 samples, 0.12%)</title><rect x="748" y="212" width="2" height="15" fill="rgb(230,103,14)"/><text x="751.00" y="222.50"></text></g><g><title>0x7f80e7598380 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.12%)</title><rect x="748" y="228" width="2" height="15" fill="rgb(213,40,37)"/><text x="751.00" y="238.50"></text></g><g><title>0x7f80a83a6ff9 (?) (1 samples, 0.12%)</title><rect x="751" y="212" width="2" height="15" fill="rgb(232,211,13)"/><text x="754.00" y="222.50"></text></g><g><title>0x7f80a83a1ef6 (?) (1 samples, 0.12%)</title><rect x="751" y="228" width="2" height="15" fill="rgb(217,222,34)"/><text x="754.00" y="238.50"></text></g><g><title>0x7f80a8396962 (?) (1 samples, 0.12%)</title><rect x="751" y="244" width="2" height="15" fill="rgb(220,17,38)"/><text x="754.00" y="254.50"></text></g><g><title>0x7f80a83ca7a7 (?) (1 samples, 0.12%)</title><rect x="751" y="260" width="2" height="15" fill="rgb(235,212,47)"/><text x="754.00" y="270.50"></text></g><g><title>0x7f80a83ca379 (?) (1 samples, 0.12%)</title><rect x="751" y="276" width="2" height="15" fill="rgb(213,40,22)"/><text x="754.00" y="286.50"></text></g><g><title>0x7f80a88288b8 (?) (1 samples, 0.12%)</title><rect x="751" y="292" width="2" height="15" fill="rgb(213,190,3)"/><text x="754.00" y="302.50"></text></g><g><title>0x7f80a8826c7f (?) (1 samples, 0.12%)</title><rect x="751" y="308" width="2" height="15" fill="rgb(215,35,34)"/><text x="754.00" y="318.50"></text></g><g><title>0x7f80a883999c (?) (1 samples, 0.12%)</title><rect x="751" y="324" width="2" height="15" fill="rgb(254,75,2)"/><text x="754.00" y="334.50"></text></g><g><title>0x7f80a853ec62 (?) (1 samples, 0.12%)</title><rect x="751" y="340" width="2" height="15" fill="rgb(248,217,2)"/><text x="754.00" y="350.50"></text></g><g><title>expf32x (libm-2.29.so) (1 samples, 0.12%)</title><rect x="751" y="356" width="2" height="15" fill="rgb(228,177,22)"/><text x="754.00" y="366.50"></text></g><g><title>0x7f80e84c21b0 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="808" y="372" width="2" height="15" fill="rgb(246,177,13)"/><text x="811.00" y="382.50"></text></g><g><title>0x7f80e8548bc3 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="810" y="372" width="1" height="15" fill="rgb(240,42,35)"/><text x="813.00" y="382.50"></text></g><g><title>0x7f80e8548beb (libm-2.29.so) (2 samples, 0.25%)</title><rect x="811" y="372" width="3" height="15" fill="rgb(237,98,54)"/><text x="814.00" y="382.50"></text></g><g><title>0x7f80e8548c04 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="814" y="372" width="2" height="15" fill="rgb(214,65,26)"/><text x="817.00" y="382.50"></text></g><g><title>0x7f80e8548c28 (libm-2.29.so) (2 samples, 0.25%)</title><rect x="816" y="372" width="3" height="15" fill="rgb(224,86,46)"/><text x="819.00" y="382.50"></text></g><g><title>0x7f80e8548c32 (libm-2.29.so) (2 samples, 0.25%)</title><rect x="819" y="372" width="2" height="15" fill="rgb(224,118,53)"/><text x="822.00" y="382.50"></text></g><g><title>0x7f80e8548c6e (libm-2.29.so) (1 samples, 0.12%)</title><rect x="821" y="372" width="2" height="15" fill="rgb(212,217,17)"/><text x="824.00" y="382.50"></text></g><g><title>expf32x (libm-2.29.so) (13 samples, 1.61%)</title><rect x="805" y="356" width="19" height="15" fill="rgb(208,35,35)"/><text x="808.00" y="366.50"></text></g><g><title>0x7f80e8548c7b (libm-2.29.so) (1 samples, 0.12%)</title><rect x="823" y="372" width="1" height="15" fill="rgb(228,74,21)"/><text x="826.00" y="382.50"></text></g><g><title>onnxruntime::Tensor::MutableData&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="824" y="356" width="2" height="15" fill="rgb(250,99,50)"/><text x="827.00" y="366.50"></text></g><g><title>0x7f80e8376998 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="827" y="372" width="2" height="15" fill="rgb(219,91,14)"/><text x="830.00" y="382.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.12%)</title><rect x="829" y="388" width="1" height="15" fill="rgb(245,40,32)"/><text x="832.00" y="398.50"></text></g><g><title>onnxruntime::ml::SVMClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (54 samples, 6.68%)</title><rect x="753" y="340" width="79" height="15" fill="rgb(206,210,49)"/><text x="756.00" y="350.50">onnxrunti..</text></g><g><title>onnxruntime::ml::multiclass_probability (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.50%)</title><rect x="826" y="356" width="6" height="15" fill="rgb(246,130,1)"/><text x="829.00" y="366.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.25%)</title><rect x="829" y="372" width="3" height="15" fill="rgb(243,128,4)"/><text x="832.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="830" y="388" width="2" height="15" fill="rgb(215,20,31)"/><text x="833.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="830" y="404" width="2" height="15" fill="rgb(226,184,20)"/><text x="833.00" y="414.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 7.05%)</title><rect x="753" y="260" width="83" height="15" fill="rgb(211,200,52)"/><text x="756.00" y="270.50">onnxrunti..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 7.05%)</title><rect x="753" y="276" width="83" height="15" fill="rgb(242,41,24)"/><text x="756.00" y="286.50">onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 7.05%)</title><rect x="753" y="292" width="83" height="15" fill="rgb(244,214,43)"/><text x="756.00" y="302.50">onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 7.05%)</title><rect x="753" y="308" width="83" height="15" fill="rgb(227,221,44)"/><text x="756.00" y="318.50">onnxrunti..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (57 samples, 7.05%)</title><rect x="753" y="324" width="83" height="15" fill="rgb(247,48,51)"/><text x="756.00" y="334.50">onnxrunti..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.37%)</title><rect x="832" y="340" width="4" height="15" fill="rgb(219,159,9)"/><text x="835.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.25%)</title><rect x="833" y="356" width="3" height="15" fill="rgb(253,14,21)"/><text x="836.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.25%)</title><rect x="833" y="372" width="3" height="15" fill="rgb(239,104,47)"/><text x="836.00" y="382.50"></text></g><g><title>0x7f80e8377d36 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="835" y="388" width="1" height="15" fill="rgb(222,108,14)"/><text x="838.00" y="398.50"></text></g><g><title>profile (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:18) (63 samples, 7.80%)</title><rect x="750" y="100" width="92" height="15" fill="rgb(211,88,30)"/><text x="753.00" y="110.50">profile (b..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (62 samples, 7.67%)</title><rect x="751" y="116" width="91" height="15" fill="rgb(246,147,35)"/><text x="754.00" y="126.50">time_predi..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (62 samples, 7.67%)</title><rect x="751" y="132" width="91" height="15" fill="rgb(235,213,38)"/><text x="754.00" y="142.50">&lt;lambda&gt; (..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (62 samples, 7.67%)</title><rect x="751" y="148" width="91" height="15" fill="rgb(254,72,23)"/><text x="754.00" y="158.50">run (mlpro..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (62 samples, 7.67%)</title><rect x="751" y="164" width="91" height="15" fill="rgb(206,56,21)"/><text x="754.00" y="174.50">_run_whole..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (62 samples, 7.67%)</title><rect x="751" y="180" width="91" height="15" fill="rgb(235,42,38)"/><text x="754.00" y="190.50">run (mlpro..</text></g><g><title>run (onnxruntime/capi/session.py:136) (62 samples, 7.67%)</title><rect x="751" y="196" width="91" height="15" fill="rgb(246,130,7)"/><text x="754.00" y="206.50">run (onnxr..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 7.55%)</title><rect x="753" y="212" width="89" height="15" fill="rgb(249,9,12)"/><text x="756.00" y="222.50">pybind11::..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 7.55%)</title><rect x="753" y="228" width="89" height="15" fill="rgb(243,198,16)"/><text x="756.00" y="238.50">void pybin..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (61 samples, 7.55%)</title><rect x="753" y="244" width="89" height="15" fill="rgb(227,179,27)"/><text x="756.00" y="254.50">onnxruntim..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.50%)</title><rect x="836" y="260" width="6" height="15" fill="rgb(247,126,40)"/><text x="839.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="840" y="276" width="2" height="15" fill="rgb(232,175,5)"/><text x="843.00" y="286.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="846" y="340" width="2" height="15" fill="rgb(227,109,14)"/><text x="849.00" y="350.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="846" y="356" width="2" height="15" fill="rgb(214,196,23)"/><text x="849.00" y="366.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="846" y="372" width="2" height="15" fill="rgb(228,8,37)"/><text x="849.00" y="382.50"></text></g><g><title>0x7f80d7e437a0 (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="1060" y="356" width="1" height="15" fill="rgb(224,116,11)"/><text x="1063.00" y="366.50"></text></g><g><title>0x7f80e837692c (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1061" y="356" width="1" height="15" fill="rgb(221,16,6)"/><text x="1064.00" y="366.50"></text></g><g><title>0x7f80e8548bb4 (libm-2.29.so) (3 samples, 0.37%)</title><rect x="1074" y="372" width="5" height="15" fill="rgb(224,39,32)"/><text x="1077.00" y="382.50"></text></g><g><title>0x7f80e8548bde (libm-2.29.so) (1 samples, 0.12%)</title><rect x="1079" y="372" width="1" height="15" fill="rgb(250,198,9)"/><text x="1082.00" y="382.50"></text></g><g><title>0x7f80e8548be2 (libm-2.29.so) (3 samples, 0.37%)</title><rect x="1080" y="372" width="4" height="15" fill="rgb(244,170,29)"/><text x="1083.00" y="382.50"></text></g><g><title>0x7f80e8548beb (libm-2.29.so) (3 samples, 0.37%)</title><rect x="1084" y="372" width="5" height="15" fill="rgb(233,159,11)"/><text x="1087.00" y="382.50"></text></g><g><title>0x7f80e8548bfc (libm-2.29.so) (1 samples, 0.12%)</title><rect x="1089" y="372" width="1" height="15" fill="rgb(214,133,3)"/><text x="1092.00" y="382.50"></text></g><g><title>0x7f80e8548c04 (libm-2.29.so) (2 samples, 0.25%)</title><rect x="1090" y="372" width="3" height="15" fill="rgb(214,62,22)"/><text x="1093.00" y="382.50"></text></g><g><title>0x7f80e8548c0c (libm-2.29.so) (1 samples, 0.12%)</title><rect x="1093" y="372" width="2" height="15" fill="rgb(209,168,43)"/><text x="1096.00" y="382.50"></text></g><g><title>0x7f80e8548c28 (libm-2.29.so) (2 samples, 0.25%)</title><rect x="1095" y="372" width="2" height="15" fill="rgb(215,108,8)"/><text x="1098.00" y="382.50"></text></g><g><title>0x7f80e8548c32 (libm-2.29.so) (5 samples, 0.62%)</title><rect x="1097" y="372" width="8" height="15" fill="rgb(242,28,41)"/><text x="1100.00" y="382.50"></text></g><g><title>0x7f80e8548c46 (libm-2.29.so) (1 samples, 0.12%)</title><rect x="1105" y="372" width="1" height="15" fill="rgb(234,24,37)"/><text x="1108.00" y="382.50"></text></g><g><title>0x7f80e8548c52 (libm-2.29.so) (5 samples, 0.62%)</title><rect x="1106" y="372" width="8" height="15" fill="rgb(243,140,25)"/><text x="1109.00" y="382.50"></text></g><g><title>0x7f80e8548c5a (libm-2.29.so) (2 samples, 0.25%)</title><rect x="1114" y="372" width="2" height="15" fill="rgb(241,59,49)"/><text x="1117.00" y="382.50"></text></g><g><title>0x7f80e8548c6e (libm-2.29.so) (2 samples, 0.25%)</title><rect x="1116" y="372" width="3" height="15" fill="rgb(210,146,54)"/><text x="1119.00" y="382.50"></text></g><g><title>0x7f80e8548c7b (libm-2.29.so) (8 samples, 0.99%)</title><rect x="1119" y="372" width="12" height="15" fill="rgb(210,15,15)"/><text x="1122.00" y="382.50"></text></g><g><title>expf32x (libm-2.29.so) (51 samples, 6.31%)</title><rect x="1062" y="356" width="75" height="15" fill="rgb(212,182,4)"/><text x="1065.00" y="366.50">expf32x ..</text></g><g><title>0x7f80e8548c7f (libm-2.29.so) (4 samples, 0.50%)</title><rect x="1131" y="372" width="6" height="15" fill="rgb(217,182,39)"/><text x="1134.00" y="382.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1137" y="356" width="1" height="15" fill="rgb(210,92,46)"/><text x="1140.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1138" y="356" width="2" height="15" fill="rgb(236,219,18)"/><text x="1141.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1138" y="372" width="2" height="15" fill="rgb(247,97,7)"/><text x="1141.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1138" y="388" width="2" height="15" fill="rgb(209,53,24)"/><text x="1141.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1138" y="404" width="2" height="15" fill="rgb(210,17,51)"/><text x="1141.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1138" y="420" width="2" height="15" fill="rgb(254,119,32)"/><text x="1141.00" y="430.50"></text></g><g><title>0x7f80e837690e (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1153" y="388" width="1" height="15" fill="rgb(240,201,36)"/><text x="1156.00" y="398.50"></text></g><g><title>0x7f80e837691c (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1154" y="388" width="2" height="15" fill="rgb(208,228,51)"/><text x="1157.00" y="398.50"></text></g><g><title>0x7f80e837693b (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1156" y="388" width="1" height="15" fill="rgb(244,198,14)"/><text x="1159.00" y="398.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1157" y="388" width="2" height="15" fill="rgb(223,19,24)"/><text x="1160.00" y="398.50"></text></g><g><title>operator delete (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="1159" y="388" width="1" height="15" fill="rgb(252,65,16)"/><text x="1162.00" y="398.50"></text></g><g><title>onnxruntime::ml::multiclass_probability (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 1.98%)</title><rect x="1140" y="356" width="23" height="15" fill="rgb(240,113,28)"/><text x="1143.00" y="366.50">o..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.87%)</title><rect x="1153" y="372" width="10" height="15" fill="rgb(233,128,18)"/><text x="1156.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.25%)</title><rect x="1160" y="388" width="3" height="15" fill="rgb(249,159,51)"/><text x="1163.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.25%)</title><rect x="1160" y="404" width="3" height="15" fill="rgb(217,60,34)"/><text x="1163.00" y="414.50"></text></g><g><title>0x7f80e8376906 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1163" y="372" width="2" height="15" fill="rgb(248,66,5)"/><text x="1166.00" y="382.50"></text></g><g><title>0x7f80e8376957 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1165" y="372" width="1" height="15" fill="rgb(224,78,19)"/><text x="1168.00" y="382.50"></text></g><g><title>0x7f80e8376bc0 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1166" y="372" width="2" height="15" fill="rgb(250,24,30)"/><text x="1169.00" y="382.50"></text></g><g><title>0x7f80e8396e1b (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1168" y="372" width="1" height="15" fill="rgb(246,150,28)"/><text x="1171.00" y="382.50"></text></g><g><title>onnxruntime::ml::SVMClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (221 samples, 27.35%)</title><rect x="848" y="340" width="323" height="15" fill="rgb(253,78,34)"/><text x="851.00" y="350.50">onnxruntime::ml::SVMClassifier&lt;float&gt;::Comp..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_emplace_back_aux&lt;float const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.62%)</title><rect x="1163" y="356" width="8" height="15" fill="rgb(209,187,38)"/><text x="1166.00" y="366.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1169" y="372" width="2" height="15" fill="rgb(214,108,14)"/><text x="1172.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="1172" y="356" width="1" height="15" fill="rgb(230,125,16)"/><text x="1175.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1172" y="372" width="1" height="15" fill="rgb(248,134,6)"/><text x="1175.00" y="382.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_get_insert_hint_unique_pos [clone .localalias.55] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1173" y="356" width="2" height="15" fill="rgb(236,154,37)"/><text x="1176.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (226 samples, 27.97%)</title><rect x="846" y="260" width="330" height="15" fill="rgb(213,174,5)"/><text x="849.00" y="270.50">onnxruntime::InferenceSession::Run (onnxrunt..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (226 samples, 27.97%)</title><rect x="846" y="276" width="330" height="15" fill="rgb(212,43,52)"/><text x="849.00" y="286.50">onnxruntime::InferenceSession::Run (onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (226 samples, 27.97%)</title><rect x="846" y="292" width="330" height="15" fill="rgb(208,126,13)"/><text x="849.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (226 samples, 27.97%)</title><rect x="846" y="308" width="330" height="15" fill="rgb(208,17,0)"/><text x="849.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxru..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (226 samples, 27.97%)</title><rect x="846" y="324" width="330" height="15" fill="rgb(241,174,19)"/><text x="849.00" y="334.50">onnxruntime::SequentialExecutor::Execute (on..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.50%)</title><rect x="1171" y="340" width="5" height="15" fill="rgb(217,212,39)"/><text x="1174.00" y="350.50"></text></g><g><title>std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1175" y="356" width="1" height="15" fill="rgb(225,147,18)"/><text x="1178.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.12%)</title><rect x="1175" y="372" width="1" height="15" fill="rgb(211,23,31)"/><text x="1178.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1175" y="388" width="1" height="15" fill="rgb(212,216,41)"/><text x="1178.00" y="398.50"></text></g><g><title>0x7f80e8378028 (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1175" y="404" width="1" height="15" fill="rgb(215,161,17)"/><text x="1178.00" y="414.50"></text></g><g><title>0x7f80e8375c6a (libc-2.29.so) (1 samples, 0.12%)</title><rect x="1175" y="420" width="1" height="15" fill="rgb(228,74,31)"/><text x="1178.00" y="430.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.99%)</title><rect x="1176" y="260" width="12" height="15" fill="rgb(236,194,36)"/><text x="1179.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1187" y="276" width="1" height="15" fill="rgb(232,118,11)"/><text x="1190.00" y="286.50"></text></g><g><title>all (808 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(227,130,15)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:52) (301 samples, 37.25%)</title><rect x="750" y="52" width="440" height="15" fill="rgb(254,49,8)"/><text x="753.00" y="62.50">&lt;module&gt; (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_..</text></g><g><title>profile_ort (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:51) (301 samples, 37.25%)</title><rect x="750" y="68" width="440" height="15" fill="rgb(211,30,28)"/><text x="753.00" y="78.50">profile_ort (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_10..</text></g><g><title>setup_profile (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:29) (301 samples, 37.25%)</title><rect x="750" y="84" width="440" height="15" fill="rgb(232,94,50)"/><text x="753.00" y="94.50">setup_profile (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_..</text></g><g><title>profile (bench_SVC_rbf_b_cl_probabilityTrue_kernelrbf_1000_50_12_float_.py:23) (238 samples, 29.46%)</title><rect x="842" y="100" width="348" height="15" fill="rgb(239,60,46)"/><text x="845.00" y="110.50">profile (bench_SVC_rbf_b_cl_probabilityTrue_ker..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (237 samples, 29.33%)</title><rect x="843" y="116" width="347" height="15" fill="rgb(243,211,6)"/><text x="846.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_as..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (237 samples, 29.33%)</title><rect x="843" y="132" width="347" height="15" fill="rgb(215,73,27)"/><text x="846.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_sk..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (237 samples, 29.33%)</title><rect x="843" y="148" width="347" height="15" fill="rgb(224,81,35)"/><text x="846.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (237 samples, 29.33%)</title><rect x="843" y="164" width="347" height="15" fill="rgb(233,125,12)"/><text x="846.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_infer..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (237 samples, 29.33%)</title><rect x="843" y="180" width="347" height="15" fill="rgb(228,220,39)"/><text x="846.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:136) (237 samples, 29.33%)</title><rect x="843" y="196" width="347" height="15" fill="rgb(227,151,9)"/><text x="846.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (236 samples, 29.21%)</title><rect x="845" y="212" width="345" height="15" fill="rgb(208,92,43)"/><text x="848.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntim..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (236 samples, 29.21%)</title><rect x="845" y="228" width="345" height="15" fill="rgb(226,99,44)"/><text x="848.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxru..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (236 samples, 29.21%)</title><rect x="845" y="244" width="345" height="15" fill="rgb(216,204,16)"/><text x="848.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1188" y="260" width="2" height="15" fill="rgb(209,227,19)"/><text x="1191.00" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.12%)</title><rect x="1188" y="276" width="2" height="15" fill="rgb(237,68,37)"/><text x="1191.00" y="286.50"></text></g></g></svg>