<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1990" onload="init(evt)" viewBox="0 0 1200 1990" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1990" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1973.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1973.00"> </text><g id="frames"><g><title>_build_master (pkg_resources/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="868" width="4" height="15" fill="rgb(229,70,27)"/><text x="13.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="884" width="4" height="15" fill="rgb(231,151,49)"/><text x="13.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="900" width="4" height="15" fill="rgb(234,41,7)"/><text x="13.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="916" width="4" height="15" fill="rgb(217,112,35)"/><text x="13.00" y="926.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="932" width="4" height="15" fill="rgb(210,198,21)"/><text x="13.00" y="942.50"></text></g><g><title>isdir (genericpath.py) (1 samples, 0.19%)</title><rect x="12" y="948" width="2" height="15" fill="rgb(253,62,11)"/><text x="15.00" y="958.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (3 samples, 0.56%)</title><rect x="10" y="292" width="6" height="15" fill="rgb(252,13,34)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="308" width="6" height="15" fill="rgb(234,183,51)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="324" width="6" height="15" fill="rgb(221,42,40)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="340" width="6" height="15" fill="rgb(241,55,0)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.56%)</title><rect x="10" y="356" width="6" height="15" fill="rgb(221,156,44)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="372" width="6" height="15" fill="rgb(244,117,6)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (3 samples, 0.56%)</title><rect x="10" y="388" width="6" height="15" fill="rgb(229,103,51)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="404" width="6" height="15" fill="rgb(226,1,45)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="420" width="6" height="15" fill="rgb(206,140,35)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="436" width="6" height="15" fill="rgb(206,127,52)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.56%)</title><rect x="10" y="452" width="6" height="15" fill="rgb(252,16,2)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="468" width="6" height="15" fill="rgb(210,153,50)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (3 samples, 0.56%)</title><rect x="10" y="484" width="6" height="15" fill="rgb(254,25,46)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="500" width="6" height="15" fill="rgb(218,215,22)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="516" width="6" height="15" fill="rgb(248,109,53)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="532" width="6" height="15" fill="rgb(251,162,9)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.56%)</title><rect x="10" y="548" width="6" height="15" fill="rgb(225,139,53)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="564" width="6" height="15" fill="rgb(234,176,30)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (3 samples, 0.56%)</title><rect x="10" y="580" width="6" height="15" fill="rgb(233,1,41)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="596" width="6" height="15" fill="rgb(211,67,12)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="612" width="6" height="15" fill="rgb(221,96,41)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="628" width="6" height="15" fill="rgb(223,211,39)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="644" width="6" height="15" fill="rgb(215,105,15)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="660" width="6" height="15" fill="rgb(206,40,8)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="676" width="6" height="15" fill="rgb(249,124,28)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.56%)</title><rect x="10" y="692" width="6" height="15" fill="rgb(225,179,10)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="708" width="6" height="15" fill="rgb(213,181,10)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (3 samples, 0.56%)</title><rect x="10" y="724" width="6" height="15" fill="rgb(207,223,13)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="740" width="6" height="15" fill="rgb(235,169,22)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="756" width="6" height="15" fill="rgb(246,215,37)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="772" width="6" height="15" fill="rgb(221,14,54)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.56%)</title><rect x="10" y="788" width="6" height="15" fill="rgb(245,189,50)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="10" y="804" width="6" height="15" fill="rgb(230,222,16)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (3 samples, 0.56%)</title><rect x="10" y="820" width="6" height="15" fill="rgb(252,72,17)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (3 samples, 0.56%)</title><rect x="10" y="836" width="6" height="15" fill="rgb(220,25,48)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (3 samples, 0.56%)</title><rect x="10" y="852" width="6" height="15" fill="rgb(227,178,12)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (1 samples, 0.19%)</title><rect x="14" y="868" width="2" height="15" fill="rgb(253,47,1)"/><text x="17.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (1 samples, 0.19%)</title><rect x="14" y="884" width="2" height="15" fill="rgb(239,5,27)"/><text x="17.00" y="894.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (1 samples, 0.19%)</title><rect x="14" y="900" width="2" height="15" fill="rgb(216,201,12)"/><text x="17.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (1 samples, 0.19%)</title><rect x="14" y="916" width="2" height="15" fill="rgb(230,148,22)"/><text x="17.00" y="926.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (1 samples, 0.19%)</title><rect x="14" y="932" width="2" height="15" fill="rgb(245,198,18)"/><text x="17.00" y="942.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.19%)</title><rect x="14" y="948" width="2" height="15" fill="rgb(207,92,19)"/><text x="17.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.19%)</title><rect x="14" y="964" width="2" height="15" fill="rgb(253,201,39)"/><text x="17.00" y="974.50"></text></g><g><title>_legacy_cmpkey (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.19%)</title><rect x="14" y="980" width="2" height="15" fill="rgb(226,146,21)"/><text x="17.00" y="990.50"></text></g><g><title>_parse_version_parts (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.19%)</title><rect x="14" y="996" width="2" height="15" fill="rgb(229,170,42)"/><text x="17.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="10" y="196" width="8" height="15" fill="rgb(205,165,4)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="10" y="212" width="8" height="15" fill="rgb(247,79,51)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="10" y="228" width="8" height="15" fill="rgb(239,130,31)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="10" y="244" width="8" height="15" fill="rgb(232,102,41)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.74%)</title><rect x="10" y="260" width="8" height="15" fill="rgb(226,117,4)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="10" y="276" width="8" height="15" fill="rgb(227,154,21)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (1 samples, 0.19%)</title><rect x="16" y="292" width="2" height="15" fill="rgb(224,135,25)"/><text x="19.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="308" width="2" height="15" fill="rgb(225,17,21)"/><text x="19.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="324" width="2" height="15" fill="rgb(209,65,27)"/><text x="19.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="340" width="2" height="15" fill="rgb(236,93,31)"/><text x="19.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="16" y="356" width="2" height="15" fill="rgb(230,9,18)"/><text x="19.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="372" width="2" height="15" fill="rgb(209,14,3)"/><text x="19.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (1 samples, 0.19%)</title><rect x="16" y="388" width="2" height="15" fill="rgb(251,13,51)"/><text x="19.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="404" width="2" height="15" fill="rgb(206,202,12)"/><text x="19.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="420" width="2" height="15" fill="rgb(247,67,0)"/><text x="19.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="436" width="2" height="15" fill="rgb(245,65,36)"/><text x="19.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="16" y="452" width="2" height="15" fill="rgb(230,125,1)"/><text x="19.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="468" width="2" height="15" fill="rgb(226,132,46)"/><text x="19.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (1 samples, 0.19%)</title><rect x="16" y="484" width="2" height="15" fill="rgb(206,97,54)"/><text x="19.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="500" width="2" height="15" fill="rgb(227,229,1)"/><text x="19.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="516" width="2" height="15" fill="rgb(238,170,29)"/><text x="19.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="532" width="2" height="15" fill="rgb(252,145,15)"/><text x="19.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="16" y="548" width="2" height="15" fill="rgb(207,219,26)"/><text x="19.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="564" width="2" height="15" fill="rgb(249,138,50)"/><text x="19.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (1 samples, 0.19%)</title><rect x="16" y="580" width="2" height="15" fill="rgb(227,80,48)"/><text x="19.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="596" width="2" height="15" fill="rgb(228,177,8)"/><text x="19.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="612" width="2" height="15" fill="rgb(208,97,22)"/><text x="19.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="628" width="2" height="15" fill="rgb(222,47,37)"/><text x="19.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="16" y="644" width="2" height="15" fill="rgb(241,24,43)"/><text x="19.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="660" width="2" height="15" fill="rgb(230,174,43)"/><text x="19.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (1 samples, 0.19%)</title><rect x="16" y="676" width="2" height="15" fill="rgb(235,168,2)"/><text x="19.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="692" width="2" height="15" fill="rgb(216,196,51)"/><text x="19.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="708" width="2" height="15" fill="rgb(254,110,10)"/><text x="19.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="724" width="2" height="15" fill="rgb(205,46,32)"/><text x="19.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="16" y="740" width="2" height="15" fill="rgb(206,142,38)"/><text x="19.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="756" width="2" height="15" fill="rgb(210,172,48)"/><text x="19.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (1 samples, 0.19%)</title><rect x="16" y="772" width="2" height="15" fill="rgb(225,13,27)"/><text x="19.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="788" width="2" height="15" fill="rgb(217,41,11)"/><text x="19.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="804" width="2" height="15" fill="rgb(249,226,27)"/><text x="19.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="820" width="2" height="15" fill="rgb(209,8,19)"/><text x="19.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="836" width="2" height="15" fill="rgb(214,21,20)"/><text x="19.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="852" width="2" height="15" fill="rgb(217,39,28)"/><text x="19.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="16" y="868" width="2" height="15" fill="rgb(222,163,1)"/><text x="19.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="884" width="2" height="15" fill="rgb(244,81,43)"/><text x="19.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (1 samples, 0.19%)</title><rect x="16" y="900" width="2" height="15" fill="rgb(250,174,41)"/><text x="19.00" y="910.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="916" width="2" height="15" fill="rgb(205,167,39)"/><text x="19.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="932" width="2" height="15" fill="rgb(247,155,34)"/><text x="19.00" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="948" width="2" height="15" fill="rgb(226,145,8)"/><text x="19.00" y="958.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="964" width="2" height="15" fill="rgb(214,57,40)"/><text x="19.00" y="974.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="980" width="2" height="15" fill="rgb(248,159,7)"/><text x="19.00" y="990.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="16" y="996" width="2" height="15" fill="rgb(244,54,10)"/><text x="19.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="16" y="1012" width="2" height="15" fill="rgb(212,205,38)"/><text x="19.00" y="1022.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_continuous_distns.py) (1 samples, 0.19%)</title><rect x="16" y="1028" width="2" height="15" fill="rgb(245,213,5)"/><text x="19.00" y="1038.50"></text></g><g><title>__init__ (scipy/stats/_distn_infrastructure.py) (1 samples, 0.19%)</title><rect x="16" y="1044" width="2" height="15" fill="rgb(231,74,40)"/><text x="19.00" y="1054.50"></text></g><g><title>_construct_doc (scipy/stats/_distn_infrastructure.py) (1 samples, 0.19%)</title><rect x="16" y="1060" width="2" height="15" fill="rgb(229,155,33)"/><text x="19.00" y="1070.50"></text></g><g><title>docformat (scipy/_lib/doccer.py) (1 samples, 0.19%)</title><rect x="16" y="1076" width="2" height="15" fill="rgb(229,47,26)"/><text x="19.00" y="1086.50"></text></g><g><title>unicode_expandtabs (python3.7) (1 samples, 0.19%)</title><rect x="16" y="1092" width="2" height="15" fill="rgb(220,52,35)"/><text x="19.00" y="1102.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="18" y="1124" width="5" height="15" fill="rgb(219,213,31)"/><text x="21.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="18" y="1140" width="5" height="15" fill="rgb(247,107,40)"/><text x="21.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="18" y="1156" width="5" height="15" fill="rgb(243,207,51)"/><text x="21.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="18" y="1172" width="5" height="15" fill="rgb(254,60,29)"/><text x="21.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="18" y="1188" width="5" height="15" fill="rgb(254,149,41)"/><text x="21.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py) (2 samples, 0.37%)</title><rect x="18" y="1204" width="5" height="15" fill="rgb(209,20,51)"/><text x="21.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="18" y="1220" width="5" height="15" fill="rgb(231,58,7)"/><text x="21.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="18" y="1236" width="5" height="15" fill="rgb(237,100,2)"/><text x="21.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="18" y="1252" width="5" height="15" fill="rgb(241,194,13)"/><text x="21.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="18" y="1268" width="5" height="15" fill="rgb(250,227,30)"/><text x="21.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="18" y="1284" width="5" height="15" fill="rgb(222,148,14)"/><text x="21.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_container.py) (2 samples, 0.37%)</title><rect x="18" y="1300" width="5" height="15" fill="rgb(248,74,34)"/><text x="21.00" y="1310.50"></text></g><g><title>_get_operation_list (skl2onnx/common/_container.py) (2 samples, 0.37%)</title><rect x="18" y="1316" width="5" height="15" fill="rgb(229,187,49)"/><text x="21.00" y="1326.50"></text></g><g><title>getsource (inspect.py) (2 samples, 0.37%)</title><rect x="18" y="1332" width="5" height="15" fill="rgb(244,128,40)"/><text x="21.00" y="1342.50"></text></g><g><title>getsourcelines (inspect.py) (2 samples, 0.37%)</title><rect x="18" y="1348" width="5" height="15" fill="rgb(236,104,37)"/><text x="21.00" y="1358.50"></text></g><g><title>getblock (inspect.py) (2 samples, 0.37%)</title><rect x="18" y="1364" width="5" height="15" fill="rgb(231,92,1)"/><text x="21.00" y="1374.50"></text></g><g><title>_tokenize (tokenize.py) (2 samples, 0.37%)</title><rect x="18" y="1380" width="5" height="15" fill="rgb(219,74,26)"/><text x="21.00" y="1390.50"></text></g><g><title>_sre_SRE_Pattern_match (python3.7) (2 samples, 0.37%)</title><rect x="18" y="1396" width="5" height="15" fill="rgb(244,226,45)"/><text x="21.00" y="1406.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py) (2 samples, 0.37%)</title><rect x="23" y="1508" width="4" height="15" fill="rgb(253,65,34)"/><text x="26.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py) (2 samples, 0.37%)</title><rect x="23" y="1524" width="4" height="15" fill="rgb(244,32,14)"/><text x="26.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py) (2 samples, 0.37%)</title><rect x="23" y="1540" width="4" height="15" fill="rgb(218,201,40)"/><text x="26.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (2 samples, 0.37%)</title><rect x="23" y="1556" width="4" height="15" fill="rgb(249,25,7)"/><text x="26.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;) (2 samples, 0.37%)</title><rect x="23" y="1572" width="4" height="15" fill="rgb(232,174,42)"/><text x="26.00" y="1582.50"></text></g><g><title>call (jinja2/runtime.py) (1 samples, 0.19%)</title><rect x="25" y="1588" width="2" height="15" fill="rgb(223,86,29)"/><text x="28.00" y="1598.50"></text></g><g><title>process_documentation (skl2onnx/algebra/automation.py) (1 samples, 0.19%)</title><rect x="25" y="1604" width="2" height="15" fill="rgb(220,17,41)"/><text x="28.00" y="1614.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (3 samples, 0.56%)</title><rect x="23" y="1236" width="6" height="15" fill="rgb(238,215,50)"/><text x="26.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="23" y="1252" width="6" height="15" fill="rgb(217,93,48)"/><text x="26.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="23" y="1268" width="6" height="15" fill="rgb(218,30,34)"/><text x="26.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="23" y="1284" width="6" height="15" fill="rgb(232,146,33)"/><text x="26.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="23" y="1300" width="6" height="15" fill="rgb(213,228,37)"/><text x="26.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="23" y="1316" width="6" height="15" fill="rgb(250,40,26)"/><text x="26.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.56%)</title><rect x="23" y="1332" width="6" height="15" fill="rgb(244,54,47)"/><text x="26.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="23" y="1348" width="6" height="15" fill="rgb(222,164,26)"/><text x="26.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (3 samples, 0.56%)</title><rect x="23" y="1364" width="6" height="15" fill="rgb(223,19,51)"/><text x="26.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="23" y="1380" width="6" height="15" fill="rgb(238,215,28)"/><text x="26.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="23" y="1396" width="6" height="15" fill="rgb(235,209,42)"/><text x="26.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="23" y="1412" width="6" height="15" fill="rgb(236,1,14)"/><text x="26.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.56%)</title><rect x="23" y="1428" width="6" height="15" fill="rgb(225,132,0)"/><text x="26.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="23" y="1444" width="6" height="15" fill="rgb(223,56,30)"/><text x="26.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (3 samples, 0.56%)</title><rect x="23" y="1460" width="6" height="15" fill="rgb(230,179,31)"/><text x="26.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (3 samples, 0.56%)</title><rect x="23" y="1476" width="6" height="15" fill="rgb(219,48,23)"/><text x="26.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (3 samples, 0.56%)</title><rect x="23" y="1492" width="6" height="15" fill="rgb(218,70,36)"/><text x="26.00" y="1502.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.19%)</title><rect x="27" y="1508" width="2" height="15" fill="rgb(227,207,50)"/><text x="30.00" y="1518.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnx::OpSchema, , &gt;( const&amp;)::{lambda(onnx::OpSchema const*)#1}, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnx::OpSchema const*, &gt;(pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnx::OpSchema, , &gt;( const&amp;)::{lambda(onnx::OpSchema const*)#1}&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; (*)(onnx::OpSchema const*), const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.19%)</title><rect x="27" y="1524" width="2" height="15" fill="rgb(220,49,38)"/><text x="30.00" y="1534.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic [clone .constprop.1345] (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.19%)</title><rect x="27" y="1540" width="2" height="15" fill="rgb(240,107,45)"/><text x="30.00" y="1550.50"></text></g><g><title>pybind11::detail::get_type_info (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.19%)</title><rect x="27" y="1556" width="2" height="15" fill="rgb(241,31,23)"/><text x="30.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="484" width="16" height="15" fill="rgb(236,158,1)"/><text x="21.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="500" width="16" height="15" fill="rgb(245,157,35)"/><text x="21.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="516" width="16" height="15" fill="rgb(226,150,45)"/><text x="21.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="532" width="16" height="15" fill="rgb(218,23,47)"/><text x="21.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 1.30%)</title><rect x="18" y="548" width="16" height="15" fill="rgb(226,116,9)"/><text x="21.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="564" width="16" height="15" fill="rgb(231,113,3)"/><text x="21.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (7 samples, 1.30%)</title><rect x="18" y="580" width="16" height="15" fill="rgb(206,83,20)"/><text x="21.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="596" width="16" height="15" fill="rgb(239,41,54)"/><text x="21.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="612" width="16" height="15" fill="rgb(217,21,20)"/><text x="21.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="628" width="16" height="15" fill="rgb(210,135,42)"/><text x="21.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 1.30%)</title><rect x="18" y="644" width="16" height="15" fill="rgb(229,14,12)"/><text x="21.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="660" width="16" height="15" fill="rgb(206,60,9)"/><text x="21.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (7 samples, 1.30%)</title><rect x="18" y="676" width="16" height="15" fill="rgb(225,204,5)"/><text x="21.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="692" width="16" height="15" fill="rgb(211,218,54)"/><text x="21.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="708" width="16" height="15" fill="rgb(233,82,22)"/><text x="21.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="724" width="16" height="15" fill="rgb(213,40,16)"/><text x="21.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 1.30%)</title><rect x="18" y="740" width="16" height="15" fill="rgb(237,222,4)"/><text x="21.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="756" width="16" height="15" fill="rgb(231,153,2)"/><text x="21.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (7 samples, 1.30%)</title><rect x="18" y="772" width="16" height="15" fill="rgb(240,102,1)"/><text x="21.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="788" width="16" height="15" fill="rgb(223,115,19)"/><text x="21.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="804" width="16" height="15" fill="rgb(252,29,52)"/><text x="21.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="820" width="16" height="15" fill="rgb(244,116,30)"/><text x="21.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 1.30%)</title><rect x="18" y="836" width="16" height="15" fill="rgb(222,128,36)"/><text x="21.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="852" width="16" height="15" fill="rgb(205,176,19)"/><text x="21.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (7 samples, 1.30%)</title><rect x="18" y="868" width="16" height="15" fill="rgb(225,207,14)"/><text x="21.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="884" width="16" height="15" fill="rgb(221,12,41)"/><text x="21.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="900" width="16" height="15" fill="rgb(209,59,16)"/><text x="21.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="916" width="16" height="15" fill="rgb(205,42,25)"/><text x="21.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="932" width="16" height="15" fill="rgb(253,2,54)"/><text x="21.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="948" width="16" height="15" fill="rgb(249,99,46)"/><text x="21.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="964" width="16" height="15" fill="rgb(238,114,33)"/><text x="21.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 1.30%)</title><rect x="18" y="980" width="16" height="15" fill="rgb(226,101,46)"/><text x="21.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="996" width="16" height="15" fill="rgb(221,114,35)"/><text x="21.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (7 samples, 1.30%)</title><rect x="18" y="1012" width="16" height="15" fill="rgb(231,169,24)"/><text x="21.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="1028" width="16" height="15" fill="rgb(250,127,45)"/><text x="21.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="1044" width="16" height="15" fill="rgb(227,55,24)"/><text x="21.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="1060" width="16" height="15" fill="rgb(224,138,8)"/><text x="21.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 1.30%)</title><rect x="18" y="1076" width="16" height="15" fill="rgb(239,10,36)"/><text x="21.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.30%)</title><rect x="18" y="1092" width="16" height="15" fill="rgb(228,24,51)"/><text x="21.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (7 samples, 1.30%)</title><rect x="18" y="1108" width="16" height="15" fill="rgb(212,97,9)"/><text x="21.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="23" y="1124" width="11" height="15" fill="rgb(229,208,43)"/><text x="26.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="23" y="1140" width="11" height="15" fill="rgb(216,66,54)"/><text x="26.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="23" y="1156" width="11" height="15" fill="rgb(220,127,50)"/><text x="26.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="23" y="1172" width="11" height="15" fill="rgb(216,144,26)"/><text x="26.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="23" y="1188" width="11" height="15" fill="rgb(224,151,13)"/><text x="26.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.93%)</title><rect x="23" y="1204" width="11" height="15" fill="rgb(214,111,26)"/><text x="26.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="23" y="1220" width="11" height="15" fill="rgb(244,23,42)"/><text x="26.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/shape_calculators/__init__.py) (2 samples, 0.37%)</title><rect x="29" y="1236" width="5" height="15" fill="rgb(244,98,15)"/><text x="32.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="1252" width="5" height="15" fill="rgb(219,81,47)"/><text x="32.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="1268" width="5" height="15" fill="rgb(215,222,5)"/><text x="32.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="1284" width="5" height="15" fill="rgb(236,134,53)"/><text x="32.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="1300" width="5" height="15" fill="rgb(222,223,2)"/><text x="32.00" y="1310.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="1316" width="5" height="15" fill="rgb(240,68,6)"/><text x="32.00" y="1326.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="29" y="1332" width="5" height="15" fill="rgb(242,157,38)"/><text x="32.00" y="1342.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="29" y="1348" width="5" height="15" fill="rgb(230,187,21)"/><text x="32.00" y="1358.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="29" y="1364" width="5" height="15" fill="rgb(238,202,3)"/><text x="32.00" y="1374.50"></text></g><g><title>&lt;module&gt; (pandas/_libs/__init__.py) (1 samples, 0.19%)</title><rect x="34" y="724" width="2" height="15" fill="rgb(226,119,50)"/><text x="37.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="740" width="2" height="15" fill="rgb(251,8,23)"/><text x="37.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="756" width="2" height="15" fill="rgb(208,174,11)"/><text x="37.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="772" width="2" height="15" fill="rgb(247,14,11)"/><text x="37.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="34" y="788" width="2" height="15" fill="rgb(227,160,52)"/><text x="37.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="804" width="2" height="15" fill="rgb(254,3,13)"/><text x="37.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/_libs/tslibs/__init__.py) (1 samples, 0.19%)</title><rect x="34" y="820" width="2" height="15" fill="rgb(240,193,31)"/><text x="37.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="836" width="2" height="15" fill="rgb(250,102,46)"/><text x="37.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="852" width="2" height="15" fill="rgb(216,162,14)"/><text x="37.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="868" width="2" height="15" fill="rgb(234,2,44)"/><text x="37.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="34" y="884" width="2" height="15" fill="rgb(245,143,4)"/><text x="37.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="900" width="2" height="15" fill="rgb(252,185,6)"/><text x="37.00" y="910.50"></text></g><g><title>0x7f51306b940e (?) (1 samples, 0.19%)</title><rect x="34" y="916" width="2" height="15" fill="rgb(233,16,43)"/><text x="37.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="932" width="2" height="15" fill="rgb(209,67,19)"/><text x="37.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="948" width="2" height="15" fill="rgb(206,189,35)"/><text x="37.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="964" width="2" height="15" fill="rgb(250,187,36)"/><text x="37.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="34" y="980" width="2" height="15" fill="rgb(206,23,32)"/><text x="37.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="996" width="2" height="15" fill="rgb(216,33,27)"/><text x="37.00" y="1006.50"></text></g><g><title>0x7f5130472cd2 (?) (1 samples, 0.19%)</title><rect x="34" y="1012" width="2" height="15" fill="rgb(207,98,12)"/><text x="37.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1028" width="2" height="15" fill="rgb(205,219,7)"/><text x="37.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1044" width="2" height="15" fill="rgb(233,13,17)"/><text x="37.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1060" width="2" height="15" fill="rgb(225,71,35)"/><text x="37.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="34" y="1076" width="2" height="15" fill="rgb(217,182,26)"/><text x="37.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1092" width="2" height="15" fill="rgb(208,5,4)"/><text x="37.00" y="1102.50"></text></g><g><title>0x7f512fb680e5 (?) (1 samples, 0.19%)</title><rect x="34" y="1108" width="2" height="15" fill="rgb(220,130,7)"/><text x="37.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1124" width="2" height="15" fill="rgb(211,138,40)"/><text x="37.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1140" width="2" height="15" fill="rgb(247,9,39)"/><text x="37.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1156" width="2" height="15" fill="rgb(234,138,18)"/><text x="37.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="34" y="1172" width="2" height="15" fill="rgb(228,194,14)"/><text x="37.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1188" width="2" height="15" fill="rgb(240,182,53)"/><text x="37.00" y="1198.50"></text></g><g><title>0x7f512f8ece68 (?) (1 samples, 0.19%)</title><rect x="34" y="1204" width="2" height="15" fill="rgb(240,163,24)"/><text x="37.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1220" width="2" height="15" fill="rgb(234,103,52)"/><text x="37.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1236" width="2" height="15" fill="rgb(238,139,51)"/><text x="37.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1252" width="2" height="15" fill="rgb(243,55,48)"/><text x="37.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="34" y="1268" width="2" height="15" fill="rgb(216,67,1)"/><text x="37.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1284" width="2" height="15" fill="rgb(209,100,17)"/><text x="37.00" y="1294.50"></text></g><g><title>0x7f512f67d2fb (?) (1 samples, 0.19%)</title><rect x="34" y="1300" width="2" height="15" fill="rgb(221,139,12)"/><text x="37.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1316" width="2" height="15" fill="rgb(207,42,9)"/><text x="37.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1332" width="2" height="15" fill="rgb(222,136,43)"/><text x="37.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1348" width="2" height="15" fill="rgb(226,226,30)"/><text x="37.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="34" y="1364" width="2" height="15" fill="rgb(211,191,51)"/><text x="37.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1380" width="2" height="15" fill="rgb(223,142,12)"/><text x="37.00" y="1390.50"></text></g><g><title>0x7f512f461153 (?) (1 samples, 0.19%)</title><rect x="34" y="1396" width="2" height="15" fill="rgb(215,60,10)"/><text x="37.00" y="1406.50"></text></g><g><title>0x7f512f45fc13 (?) (1 samples, 0.19%)</title><rect x="34" y="1412" width="2" height="15" fill="rgb(218,96,53)"/><text x="37.00" y="1422.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1428" width="2" height="15" fill="rgb(214,140,21)"/><text x="37.00" y="1438.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1444" width="2" height="15" fill="rgb(246,44,35)"/><text x="37.00" y="1454.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1460" width="2" height="15" fill="rgb(235,35,47)"/><text x="37.00" y="1470.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="34" y="1476" width="2" height="15" fill="rgb(252,79,24)"/><text x="37.00" y="1486.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="34" y="1492" width="2" height="15" fill="rgb(229,217,27)"/><text x="37.00" y="1502.50"></text></g><g><title>0x7f512f1bc181 (?) (1 samples, 0.19%)</title><rect x="34" y="1508" width="2" height="15" fill="rgb(206,138,3)"/><text x="37.00" y="1518.50"></text></g><g><title>0x7f512f1bf1c9 (?) (1 samples, 0.19%)</title><rect x="34" y="1524" width="2" height="15" fill="rgb(253,128,39)"/><text x="37.00" y="1534.50"></text></g><g><title>0x7f512f1eb167 (?) (1 samples, 0.19%)</title><rect x="34" y="1540" width="2" height="15" fill="rgb(241,209,3)"/><text x="37.00" y="1550.50"></text></g><g><title>0x7f512f1e6b64 (?) (1 samples, 0.19%)</title><rect x="34" y="1556" width="2" height="15" fill="rgb(226,170,28)"/><text x="37.00" y="1566.50"></text></g><g><title>0x7f512f1ca07b (?) (1 samples, 0.19%)</title><rect x="34" y="1572" width="2" height="15" fill="rgb(230,24,22)"/><text x="37.00" y="1582.50"></text></g><g><title>_lazy (pytz/lazy.py) (1 samples, 0.19%)</title><rect x="34" y="1588" width="2" height="15" fill="rgb(243,24,22)"/><text x="37.00" y="1598.50"></text></g><g><title>&lt;genexpr&gt; (pytz/__init__.py) (1 samples, 0.19%)</title><rect x="34" y="1604" width="2" height="15" fill="rgb(216,206,33)"/><text x="37.00" y="1614.50"></text></g><g><title>resource_exists (pytz/__init__.py) (1 samples, 0.19%)</title><rect x="34" y="1620" width="2" height="15" fill="rgb(224,201,45)"/><text x="37.00" y="1630.50"></text></g><g><title>__close (libpthread-2.29.so) (1 samples, 0.19%)</title><rect x="34" y="1636" width="2" height="15" fill="rgb(243,196,32)"/><text x="37.00" y="1646.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="36" y="868" width="2" height="15" fill="rgb(228,61,25)"/><text x="39.00" y="878.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="36" y="884" width="2" height="15" fill="rgb(248,204,30)"/><text x="39.00" y="894.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="36" y="900" width="2" height="15" fill="rgb(253,14,11)"/><text x="39.00" y="910.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="36" y="916" width="2" height="15" fill="rgb(232,197,5)"/><text x="39.00" y="926.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="36" y="932" width="2" height="15" fill="rgb(244,119,53)"/><text x="39.00" y="942.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.19%)</title><rect x="36" y="948" width="2" height="15" fill="rgb(230,217,33)"/><text x="39.00" y="958.50"></text></g><g><title>__xstat (libc-2.29.so) (1 samples, 0.19%)</title><rect x="36" y="964" width="2" height="15" fill="rgb(228,155,24)"/><text x="39.00" y="974.50"></text></g><g><title>&lt;module&gt; (pandas/core/index.py) (1 samples, 0.19%)</title><rect x="38" y="1204" width="2" height="15" fill="rgb(250,98,32)"/><text x="41.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="38" y="1220" width="2" height="15" fill="rgb(224,181,21)"/><text x="41.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="38" y="1236" width="2" height="15" fill="rgb(228,123,26)"/><text x="41.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="38" y="1252" width="2" height="15" fill="rgb(234,126,35)"/><text x="41.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="38" y="1268" width="2" height="15" fill="rgb(239,142,44)"/><text x="41.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="38" y="1284" width="2" height="15" fill="rgb(243,98,1)"/><text x="41.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/api.py) (1 samples, 0.19%)</title><rect x="38" y="1300" width="2" height="15" fill="rgb(222,133,43)"/><text x="41.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="38" y="1316" width="2" height="15" fill="rgb(233,202,25)"/><text x="41.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="38" y="1332" width="2" height="15" fill="rgb(248,73,43)"/><text x="41.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="38" y="1348" width="2" height="15" fill="rgb(245,134,31)"/><text x="41.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="38" y="1364" width="2" height="15" fill="rgb(224,20,32)"/><text x="41.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="38" y="1380" width="2" height="15" fill="rgb(234,68,29)"/><text x="41.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/interval.py) (1 samples, 0.19%)</title><rect x="38" y="1396" width="2" height="15" fill="rgb(205,77,29)"/><text x="41.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="38" y="1412" width="2" height="15" fill="rgb(242,135,24)"/><text x="41.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="38" y="1428" width="2" height="15" fill="rgb(246,166,24)"/><text x="41.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="38" y="1444" width="2" height="15" fill="rgb(219,28,34)"/><text x="41.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="38" y="1460" width="2" height="15" fill="rgb(246,105,6)"/><text x="41.00" y="1470.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="38" y="1476" width="2" height="15" fill="rgb(208,162,6)"/><text x="41.00" y="1486.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="38" y="1492" width="2" height="15" fill="rgb(244,2,11)"/><text x="41.00" y="1502.50"></text></g><g><title>&lt;module&gt; (pandas/core/generic.py) (2 samples, 0.37%)</title><rect x="38" y="1108" width="4" height="15" fill="rgb(211,151,34)"/><text x="41.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="38" y="1124" width="4" height="15" fill="rgb(230,170,19)"/><text x="41.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="38" y="1140" width="4" height="15" fill="rgb(246,47,36)"/><text x="41.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="38" y="1156" width="4" height="15" fill="rgb(212,32,40)"/><text x="41.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="38" y="1172" width="4" height="15" fill="rgb(205,224,51)"/><text x="41.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="38" y="1188" width="4" height="15" fill="rgb(248,199,1)"/><text x="41.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/io/formats/format.py) (1 samples, 0.19%)</title><rect x="40" y="1204" width="2" height="15" fill="rgb(217,83,22)"/><text x="43.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="40" y="1220" width="2" height="15" fill="rgb(246,167,8)"/><text x="43.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="40" y="1236" width="2" height="15" fill="rgb(238,140,41)"/><text x="43.00" y="1246.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="40" y="1252" width="2" height="15" fill="rgb(245,173,27)"/><text x="43.00" y="1262.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="40" y="1268" width="2" height="15" fill="rgb(240,19,52)"/><text x="43.00" y="1278.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="40" y="1284" width="2" height="15" fill="rgb(239,39,28)"/><text x="43.00" y="1294.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="40" y="1300" width="2" height="15" fill="rgb(248,138,39)"/><text x="43.00" y="1310.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (12 samples, 2.23%)</title><rect x="18" y="436" width="27" height="15" fill="rgb(217,145,17)"/><text x="21.00" y="446.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 2.23%)</title><rect x="18" y="452" width="27" height="15" fill="rgb(208,163,34)"/><text x="21.00" y="462.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 2.23%)</title><rect x="18" y="468" width="27" height="15" fill="rgb(214,148,42)"/><text x="21.00" y="478.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="34" y="484" width="11" height="15" fill="rgb(218,98,13)"/><text x="37.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.93%)</title><rect x="34" y="500" width="11" height="15" fill="rgb(238,147,24)"/><text x="37.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="34" y="516" width="11" height="15" fill="rgb(228,47,16)"/><text x="37.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (5 samples, 0.93%)</title><rect x="34" y="532" width="11" height="15" fill="rgb(218,52,32)"/><text x="37.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="34" y="548" width="11" height="15" fill="rgb(250,9,43)"/><text x="37.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="34" y="564" width="11" height="15" fill="rgb(225,66,6)"/><text x="37.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="34" y="580" width="11" height="15" fill="rgb(243,222,22)"/><text x="37.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.93%)</title><rect x="34" y="596" width="11" height="15" fill="rgb(213,107,21)"/><text x="37.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="34" y="612" width="11" height="15" fill="rgb(234,184,31)"/><text x="37.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (5 samples, 0.93%)</title><rect x="34" y="628" width="11" height="15" fill="rgb(246,11,17)"/><text x="37.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="34" y="644" width="11" height="15" fill="rgb(249,167,16)"/><text x="37.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="34" y="660" width="11" height="15" fill="rgb(232,143,6)"/><text x="37.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="34" y="676" width="11" height="15" fill="rgb(241,120,23)"/><text x="37.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.93%)</title><rect x="34" y="692" width="11" height="15" fill="rgb(241,157,48)"/><text x="37.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.93%)</title><rect x="34" y="708" width="11" height="15" fill="rgb(228,163,5)"/><text x="37.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (4 samples, 0.74%)</title><rect x="36" y="724" width="9" height="15" fill="rgb(205,150,22)"/><text x="39.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="36" y="740" width="9" height="15" fill="rgb(235,2,41)"/><text x="39.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="36" y="756" width="9" height="15" fill="rgb(233,43,43)"/><text x="39.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="36" y="772" width="9" height="15" fill="rgb(207,164,44)"/><text x="39.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.74%)</title><rect x="36" y="788" width="9" height="15" fill="rgb(238,190,24)"/><text x="39.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="36" y="804" width="9" height="15" fill="rgb(229,42,36)"/><text x="39.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (4 samples, 0.74%)</title><rect x="36" y="820" width="9" height="15" fill="rgb(213,202,26)"/><text x="39.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="36" y="836" width="9" height="15" fill="rgb(207,199,13)"/><text x="39.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="36" y="852" width="9" height="15" fill="rgb(248,222,35)"/><text x="39.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="38" y="868" width="7" height="15" fill="rgb(245,229,23)"/><text x="41.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.56%)</title><rect x="38" y="884" width="7" height="15" fill="rgb(214,103,45)"/><text x="41.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="38" y="900" width="7" height="15" fill="rgb(221,191,39)"/><text x="41.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (3 samples, 0.56%)</title><rect x="38" y="916" width="7" height="15" fill="rgb(234,178,46)"/><text x="41.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="38" y="932" width="7" height="15" fill="rgb(237,50,50)"/><text x="41.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="38" y="948" width="7" height="15" fill="rgb(241,199,31)"/><text x="41.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="38" y="964" width="7" height="15" fill="rgb(243,213,5)"/><text x="41.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.56%)</title><rect x="38" y="980" width="7" height="15" fill="rgb(209,54,17)"/><text x="41.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="38" y="996" width="7" height="15" fill="rgb(236,97,32)"/><text x="41.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (3 samples, 0.56%)</title><rect x="38" y="1012" width="7" height="15" fill="rgb(229,46,31)"/><text x="41.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="38" y="1028" width="7" height="15" fill="rgb(209,190,21)"/><text x="41.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="38" y="1044" width="7" height="15" fill="rgb(214,40,28)"/><text x="41.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="38" y="1060" width="7" height="15" fill="rgb(236,111,23)"/><text x="41.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.56%)</title><rect x="38" y="1076" width="7" height="15" fill="rgb(216,22,26)"/><text x="41.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.56%)</title><rect x="38" y="1092" width="7" height="15" fill="rgb(231,41,42)"/><text x="41.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (1 samples, 0.19%)</title><rect x="42" y="1108" width="3" height="15" fill="rgb(212,82,23)"/><text x="45.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1124" width="3" height="15" fill="rgb(229,74,3)"/><text x="45.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1140" width="3" height="15" fill="rgb(236,21,35)"/><text x="45.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1156" width="3" height="15" fill="rgb(205,61,42)"/><text x="45.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="42" y="1172" width="3" height="15" fill="rgb(253,204,44)"/><text x="45.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1188" width="3" height="15" fill="rgb(220,155,48)"/><text x="45.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (1 samples, 0.19%)</title><rect x="42" y="1204" width="3" height="15" fill="rgb(210,162,9)"/><text x="45.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1220" width="3" height="15" fill="rgb(235,171,11)"/><text x="45.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1236" width="3" height="15" fill="rgb(253,128,19)"/><text x="45.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1252" width="3" height="15" fill="rgb(216,45,9)"/><text x="45.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="42" y="1268" width="3" height="15" fill="rgb(254,80,2)"/><text x="45.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1284" width="3" height="15" fill="rgb(232,29,51)"/><text x="45.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (1 samples, 0.19%)</title><rect x="42" y="1300" width="3" height="15" fill="rgb(241,105,40)"/><text x="45.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1316" width="3" height="15" fill="rgb(218,160,33)"/><text x="45.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1332" width="3" height="15" fill="rgb(216,0,39)"/><text x="45.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1348" width="3" height="15" fill="rgb(240,65,4)"/><text x="45.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="42" y="1364" width="3" height="15" fill="rgb(210,122,36)"/><text x="45.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1380" width="3" height="15" fill="rgb(242,150,10)"/><text x="45.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (1 samples, 0.19%)</title><rect x="42" y="1396" width="3" height="15" fill="rgb(211,38,15)"/><text x="45.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1412" width="3" height="15" fill="rgb(228,144,16)"/><text x="45.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1428" width="3" height="15" fill="rgb(238,210,26)"/><text x="45.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1444" width="3" height="15" fill="rgb(212,37,15)"/><text x="45.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="42" y="1460" width="3" height="15" fill="rgb(221,145,46)"/><text x="45.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1476" width="3" height="15" fill="rgb(213,203,19)"/><text x="45.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (1 samples, 0.19%)</title><rect x="42" y="1492" width="3" height="15" fill="rgb(222,125,28)"/><text x="45.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1508" width="3" height="15" fill="rgb(217,1,10)"/><text x="45.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1524" width="3" height="15" fill="rgb(208,33,52)"/><text x="45.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1540" width="3" height="15" fill="rgb(215,4,40)"/><text x="45.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="42" y="1556" width="3" height="15" fill="rgb(246,191,30)"/><text x="45.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1572" width="3" height="15" fill="rgb(227,176,13)"/><text x="45.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py) (1 samples, 0.19%)</title><rect x="42" y="1588" width="3" height="15" fill="rgb(213,208,47)"/><text x="45.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1604" width="3" height="15" fill="rgb(245,63,16)"/><text x="45.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1620" width="3" height="15" fill="rgb(247,201,46)"/><text x="45.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1636" width="3" height="15" fill="rgb(205,132,49)"/><text x="45.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="42" y="1652" width="3" height="15" fill="rgb(237,1,5)"/><text x="45.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1668" width="3" height="15" fill="rgb(214,18,2)"/><text x="45.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/tools.py) (1 samples, 0.19%)</title><rect x="42" y="1684" width="3" height="15" fill="rgb(243,5,30)"/><text x="45.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1700" width="3" height="15" fill="rgb(236,105,44)"/><text x="45.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1716" width="3" height="15" fill="rgb(238,150,27)"/><text x="45.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1732" width="3" height="15" fill="rgb(249,120,15)"/><text x="45.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="42" y="1748" width="3" height="15" fill="rgb(232,190,45)"/><text x="45.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1764" width="3" height="15" fill="rgb(213,143,32)"/><text x="45.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/table.py) (1 samples, 0.19%)</title><rect x="42" y="1780" width="3" height="15" fill="rgb(235,229,17)"/><text x="45.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1796" width="3" height="15" fill="rgb(206,65,5)"/><text x="45.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1812" width="3" height="15" fill="rgb(235,67,3)"/><text x="45.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1828" width="3" height="15" fill="rgb(211,79,11)"/><text x="45.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="42" y="1844" width="3" height="15" fill="rgb(244,161,18)"/><text x="45.00" y="1854.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="42" y="1860" width="3" height="15" fill="rgb(246,158,25)"/><text x="45.00" y="1870.50"></text></g><g><title>&lt;module&gt; (matplotlib/patches.py) (1 samples, 0.19%)</title><rect x="42" y="1876" width="3" height="15" fill="rgb(235,68,3)"/><text x="45.00" y="1886.50"></text></g><g><title>BoxStyle (matplotlib/patches.py) (1 samples, 0.19%)</title><rect x="42" y="1892" width="3" height="15" fill="rgb(243,111,7)"/><text x="45.00" y="1902.50"></text></g><g><title>_pprint_styles (matplotlib/patches.py) (1 samples, 0.19%)</title><rect x="42" y="1908" width="3" height="15" fill="rgb(243,112,7)"/><text x="45.00" y="1918.50"></text></g><g><title>getfullargspec (inspect.py) (1 samples, 0.19%)</title><rect x="42" y="1924" width="3" height="15" fill="rgb(229,187,35)"/><text x="45.00" y="1934.50"></text></g><g><title>name (inspect.py) (1 samples, 0.19%)</title><rect x="42" y="1940" width="3" height="15" fill="rgb(222,219,27)"/><text x="45.00" y="1950.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (13 samples, 2.41%)</title><rect x="18" y="340" width="29" height="15" fill="rgb(234,9,28)"/><text x="21.00" y="350.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.41%)</title><rect x="18" y="356" width="29" height="15" fill="rgb(233,64,8)"/><text x="21.00" y="366.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.41%)</title><rect x="18" y="372" width="29" height="15" fill="rgb(227,151,32)"/><text x="21.00" y="382.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.41%)</title><rect x="18" y="388" width="29" height="15" fill="rgb(209,86,7)"/><text x="21.00" y="398.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (13 samples, 2.41%)</title><rect x="18" y="404" width="29" height="15" fill="rgb(215,191,46)"/><text x="21.00" y="414.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (13 samples, 2.41%)</title><rect x="18" y="420" width="29" height="15" fill="rgb(236,164,40)"/><text x="21.00" y="430.50">_c..</text></g><g><title>&lt;module&gt; (sklearn/datasets/__init__.py) (1 samples, 0.19%)</title><rect x="45" y="436" width="2" height="15" fill="rgb(249,221,53)"/><text x="48.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="452" width="2" height="15" fill="rgb(240,198,12)"/><text x="48.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="468" width="2" height="15" fill="rgb(211,211,48)"/><text x="48.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="484" width="2" height="15" fill="rgb(227,78,15)"/><text x="48.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="45" y="500" width="2" height="15" fill="rgb(232,125,21)"/><text x="48.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="516" width="2" height="15" fill="rgb(249,212,2)"/><text x="48.00" y="526.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/_base.py) (1 samples, 0.19%)</title><rect x="45" y="532" width="2" height="15" fill="rgb(254,202,0)"/><text x="48.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="548" width="2" height="15" fill="rgb(224,7,13)"/><text x="48.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="564" width="2" height="15" fill="rgb(237,62,49)"/><text x="48.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="580" width="2" height="15" fill="rgb(217,188,28)"/><text x="48.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="45" y="596" width="2" height="15" fill="rgb(214,78,34)"/><text x="48.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="612" width="2" height="15" fill="rgb(237,207,6)"/><text x="48.00" y="622.50"></text></g><g><title>&lt;module&gt; (urllib/request.py) (1 samples, 0.19%)</title><rect x="45" y="628" width="2" height="15" fill="rgb(205,203,0)"/><text x="48.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="644" width="2" height="15" fill="rgb(217,104,14)"/><text x="48.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="660" width="2" height="15" fill="rgb(213,143,23)"/><text x="48.00" y="670.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="676" width="2" height="15" fill="rgb(252,36,13)"/><text x="48.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="692" width="2" height="15" fill="rgb(235,80,10)"/><text x="48.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="708" width="2" height="15" fill="rgb(232,164,52)"/><text x="48.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="724" width="2" height="15" fill="rgb(205,138,21)"/><text x="48.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="45" y="740" width="2" height="15" fill="rgb(212,150,9)"/><text x="48.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="45" y="756" width="2" height="15" fill="rgb(225,203,7)"/><text x="48.00" y="766.50"></text></g><g><title>&lt;module&gt; (http/__init__.py) (1 samples, 0.19%)</title><rect x="45" y="772" width="2" height="15" fill="rgb(251,76,50)"/><text x="48.00" y="782.50"></text></g><g><title>__prepare__ (enum.py) (1 samples, 0.19%)</title><rect x="45" y="788" width="2" height="15" fill="rgb(208,107,14)"/><text x="48.00" y="798.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (14 samples, 2.60%)</title><rect x="18" y="244" width="31" height="15" fill="rgb(241,162,42)"/><text x="21.00" y="254.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (14 samples, 2.60%)</title><rect x="18" y="260" width="31" height="15" fill="rgb(221,19,6)"/><text x="21.00" y="270.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (14 samples, 2.60%)</title><rect x="18" y="276" width="31" height="15" fill="rgb(226,149,1)"/><text x="21.00" y="286.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (14 samples, 2.60%)</title><rect x="18" y="292" width="31" height="15" fill="rgb(229,101,23)"/><text x="21.00" y="302.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (14 samples, 2.60%)</title><rect x="18" y="308" width="31" height="15" fill="rgb(210,183,5)"/><text x="21.00" y="318.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (14 samples, 2.60%)</title><rect x="18" y="324" width="31" height="15" fill="rgb(234,167,3)"/><text x="21.00" y="334.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py) (1 samples, 0.19%)</title><rect x="47" y="340" width="2" height="15" fill="rgb(213,110,17)"/><text x="50.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="356" width="2" height="15" fill="rgb(243,37,31)"/><text x="50.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="372" width="2" height="15" fill="rgb(208,166,49)"/><text x="50.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="388" width="2" height="15" fill="rgb(214,88,27)"/><text x="50.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="404" width="2" height="15" fill="rgb(223,82,31)"/><text x="50.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="420" width="2" height="15" fill="rgb(222,43,23)"/><text x="50.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="436" width="2" height="15" fill="rgb(253,129,32)"/><text x="50.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="47" y="452" width="2" height="15" fill="rgb(217,103,51)"/><text x="50.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="468" width="2" height="15" fill="rgb(219,181,8)"/><text x="50.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py) (1 samples, 0.19%)</title><rect x="47" y="484" width="2" height="15" fill="rgb(235,24,32)"/><text x="50.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="500" width="2" height="15" fill="rgb(247,218,53)"/><text x="50.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="516" width="2" height="15" fill="rgb(228,98,41)"/><text x="50.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="532" width="2" height="15" fill="rgb(244,221,25)"/><text x="50.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="47" y="548" width="2" height="15" fill="rgb(254,113,43)"/><text x="50.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="564" width="2" height="15" fill="rgb(220,56,6)"/><text x="50.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py) (1 samples, 0.19%)</title><rect x="47" y="580" width="2" height="15" fill="rgb(219,97,6)"/><text x="50.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="596" width="2" height="15" fill="rgb(238,1,22)"/><text x="50.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="612" width="2" height="15" fill="rgb(216,22,50)"/><text x="50.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="47" y="628" width="2" height="15" fill="rgb(227,198,26)"/><text x="50.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="47" y="644" width="2" height="15" fill="rgb(221,102,18)"/><text x="50.00" y="654.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="47" y="660" width="2" height="15" fill="rgb(249,187,42)"/><text x="50.00" y="670.50"></text></g><g><title>_classify_pyc (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="47" y="676" width="2" height="15" fill="rgb(216,101,19)"/><text x="50.00" y="686.50"></text></g><g><title>_r_long (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="47" y="692" width="2" height="15" fill="rgb(248,143,35)"/><text x="50.00" y="702.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.53%)</title><rect x="10" y="68" width="41" height="15" fill="rgb(232,141,41)"/><text x="13.00" y="78.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.53%)</title><rect x="10" y="84" width="41" height="15" fill="rgb(246,125,31)"/><text x="13.00" y="94.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.53%)</title><rect x="10" y="100" width="41" height="15" fill="rgb(221,75,7)"/><text x="13.00" y="110.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (19 samples, 3.53%)</title><rect x="10" y="116" width="41" height="15" fill="rgb(212,227,5)"/><text x="13.00" y="126.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.53%)</title><rect x="10" y="132" width="41" height="15" fill="rgb(230,62,30)"/><text x="13.00" y="142.50">_ca..</text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py) (19 samples, 3.53%)</title><rect x="10" y="148" width="41" height="15" fill="rgb(209,154,24)"/><text x="13.00" y="158.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.53%)</title><rect x="10" y="164" width="41" height="15" fill="rgb(248,127,0)"/><text x="13.00" y="174.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (19 samples, 3.53%)</title><rect x="10" y="180" width="41" height="15" fill="rgb(235,91,36)"/><text x="13.00" y="190.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (15 samples, 2.78%)</title><rect x="18" y="196" width="33" height="15" fill="rgb(229,34,10)"/><text x="21.00" y="206.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (15 samples, 2.78%)</title><rect x="18" y="212" width="33" height="15" fill="rgb(208,170,7)"/><text x="21.00" y="222.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (15 samples, 2.78%)</title><rect x="18" y="228" width="33" height="15" fill="rgb(252,136,39)"/><text x="21.00" y="238.50">_c..</text></g><g><title>&lt;module&gt; (numpy/__init__.py) (1 samples, 0.19%)</title><rect x="49" y="244" width="2" height="15" fill="rgb(221,60,25)"/><text x="52.00" y="254.50"></text></g><g><title>_register_known_types (numpy/core/getlimits.py) (1 samples, 0.19%)</title><rect x="49" y="260" width="2" height="15" fill="rgb(236,12,12)"/><text x="52.00" y="270.50"></text></g><g><title>__init__ (numpy/core/getlimits.py) (1 samples, 0.19%)</title><rect x="49" y="276" width="2" height="15" fill="rgb(246,69,1)"/><text x="52.00" y="286.50"></text></g><g><title>longdouble_int (scalarmath.c.src) (1 samples, 0.19%)</title><rect x="49" y="292" width="2" height="15" fill="rgb(213,188,50)"/><text x="52.00" y="302.50"></text></g><g><title>npy_longdouble_to_PyLong (npy_longdouble.c) (1 samples, 0.19%)</title><rect x="49" y="308" width="2" height="15" fill="rgb(241,95,7)"/><text x="52.00" y="318.50"></text></g><g><title>0x7fff3616ca01 ([vdso]) (1 samples, 0.19%)</title><rect x="73" y="212" width="2" height="15" fill="rgb(245,34,45)"/><text x="76.00" y="222.50"></text></g><g><title>std::_Bvector_base&lt;std::allocator&lt;bool&gt; &gt;::_M_deallocate [clone .localalias.21] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="77" y="244" width="3" height="15" fill="rgb(240,117,29)"/><text x="80.00" y="254.50"></text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::cast [clone .isra.698] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="80" y="260" width="2" height="15" fill="rgb(236,116,46)"/><text x="83.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py) (5 samples, 0.93%)</title><rect x="75" y="212" width="11" height="15" fill="rgb(224,70,50)"/><text x="78.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.74%)</title><rect x="77" y="228" width="9" height="15" fill="rgb(248,113,34)"/><text x="80.00" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg const*, &gt;(pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; (*)(onnxruntime::NodeArg const*), const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.56%)</title><rect x="80" y="244" width="6" height="15" fill="rgb(219,8,2)"/><text x="83.00" y="254.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic [clone .lto_priv.471] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="82" y="260" width="4" height="15" fill="rgb(207,110,27)"/><text x="85.00" y="270.50"></text></g><g><title>pybind11::detail::get_type_info [clone .constprop.384] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="82" y="276" width="4" height="15" fill="rgb(230,186,12)"/><text x="85.00" y="286.50"></text></g><g><title>0x7f5157e26e63 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="84" y="292" width="2" height="15" fill="rgb(251,182,2)"/><text x="87.00" y="302.50"></text></g><g><title>clock_gettime (libc-2.29.so) (1 samples, 0.19%)</title><rect x="86" y="212" width="2" height="15" fill="rgb(216,88,11)"/><text x="89.00" y="222.50"></text></g><g><title>0x7fff3616cbb2 ([vdso]) (1 samples, 0.19%)</title><rect x="86" y="228" width="2" height="15" fill="rgb(243,228,5)"/><text x="89.00" y="238.50"></text></g><g><title>0x7fff3616c949 ([vdso]) (1 samples, 0.19%)</title><rect x="86" y="244" width="2" height="15" fill="rgb(227,210,49)"/><text x="89.00" y="254.50"></text></g><g><title>OrtValue::Get&lt;onnxruntime::Tensor&gt; [clone .localalias.13] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="91" y="260" width="2" height="15" fill="rgb(210,3,19)"/><text x="94.00" y="270.50"></text></g><g><title>onnxruntime::FeedsFetchesManager::FeedsFetchesManager (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="93" y="292" width="2" height="15" fill="rgb(214,81,53)"/><text x="96.00" y="302.50"></text></g><g><title>std::vector&lt;onnxruntime::MLValueCopyInfo, std::allocator&lt;onnxruntime::MLValueCopyInfo&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="93" y="308" width="2" height="15" fill="rgb(242,148,0)"/><text x="96.00" y="318.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="101" y="372" width="3" height="15" fill="rgb(217,148,17)"/><text x="104.00" y="382.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="101" y="388" width="3" height="15" fill="rgb(211,198,48)"/><text x="104.00" y="398.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="101" y="404" width="3" height="15" fill="rgb(240,170,12)"/><text x="104.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="101" y="420" width="3" height="15" fill="rgb(205,206,3)"/><text x="104.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="101" y="436" width="3" height="15" fill="rgb(226,69,43)"/><text x="104.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="101" y="452" width="3" height="15" fill="rgb(218,209,25)"/><text x="104.00" y="462.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="101" y="468" width="3" height="15" fill="rgb(217,199,43)"/><text x="104.00" y="478.50"></text></g><g><title>0x7f5157e1f6a0 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="101" y="484" width="3" height="15" fill="rgb(206,43,33)"/><text x="104.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="104" y="372" width="2" height="15" fill="rgb(247,94,22)"/><text x="107.00" y="382.50"></text></g><g><title>onnxruntime::ArgMax&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.56%)</title><rect x="101" y="340" width="7" height="15" fill="rgb(232,52,33)"/><text x="104.00" y="350.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.56%)</title><rect x="101" y="356" width="7" height="15" fill="rgb(229,162,36)"/><text x="104.00" y="366.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="106" y="372" width="2" height="15" fill="rgb(231,203,13)"/><text x="109.00" y="382.50"></text></g><g><title>onnxruntime::Cast&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.74%)</title><rect x="108" y="340" width="9" height="15" fill="rgb(215,226,53)"/><text x="111.00" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.56%)</title><rect x="110" y="356" width="7" height="15" fill="rgb(233,229,28)"/><text x="113.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.56%)</title><rect x="110" y="372" width="7" height="15" fill="rgb(208,203,47)"/><text x="113.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.56%)</title><rect x="110" y="388" width="7" height="15" fill="rgb(246,62,47)"/><text x="113.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.56%)</title><rect x="110" y="404" width="7" height="15" fill="rgb(211,141,50)"/><text x="113.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.56%)</title><rect x="110" y="420" width="7" height="15" fill="rgb(216,38,53)"/><text x="113.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.56%)</title><rect x="110" y="436" width="7" height="15" fill="rgb(234,112,45)"/><text x="113.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="115" y="452" width="2" height="15" fill="rgb(239,92,9)"/><text x="118.00" y="462.50"></text></g><g><title>onnxruntime::TensorTypeBase::GetDeleteFunc (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="115" y="468" width="2" height="15" fill="rgb(234,83,29)"/><text x="118.00" y="478.50"></text></g><g><title>onnxruntime::Cast&lt;long&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="117" y="340" width="2" height="15" fill="rgb(228,166,26)"/><text x="120.00" y="350.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="117" y="356" width="2" height="15" fill="rgb(237,121,34)"/><text x="120.00" y="366.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="119" y="340" width="2" height="15" fill="rgb(232,10,25)"/><text x="122.00" y="350.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="119" y="356" width="2" height="15" fill="rgb(212,207,17)"/><text x="122.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="119" y="372" width="2" height="15" fill="rgb(240,125,9)"/><text x="122.00" y="382.50"></text></g><g><title>onnxruntime::GemmHelper::GemmHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="121" y="356" width="2" height="15" fill="rgb(252,229,15)"/><text x="124.00" y="366.50"></text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (3 samples, 0.56%)</title><rect x="123" y="404" width="7" height="15" fill="rgb(248,160,34)"/><text x="126.00" y="414.50"></text></g><g><title>mkl_blas_sgemv (onnxruntime/capi/libmklml_intel.so) (2 samples, 0.37%)</title><rect x="126" y="420" width="4" height="15" fill="rgb(236,138,23)"/><text x="129.00" y="430.50"></text></g><g><title>mkl_blas_xsgemv (onnxruntime/capi/libmklml_intel.so) (2 samples, 0.37%)</title><rect x="126" y="436" width="4" height="15" fill="rgb(211,106,54)"/><text x="129.00" y="446.50"></text></g><g><title>mkl_blas_avx_xsgemv (onnxruntime/capi/libmklml_intel.so) (2 samples, 0.37%)</title><rect x="126" y="452" width="4" height="15" fill="rgb(217,143,2)"/><text x="129.00" y="462.50"></text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.93%)</title><rect x="121" y="340" width="11" height="15" fill="rgb(210,31,14)"/><text x="124.00" y="350.50"></text></g><g><title>onnxruntime::math::Gemm&lt;float, onnxruntime::concurrency::ThreadPool&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.74%)</title><rect x="123" y="356" width="9" height="15" fill="rgb(219,164,35)"/><text x="126.00" y="366.50"></text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (4 samples, 0.74%)</title><rect x="123" y="372" width="9" height="15" fill="rgb(236,186,45)"/><text x="126.00" y="382.50"></text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (4 samples, 0.74%)</title><rect x="123" y="388" width="9" height="15" fill="rgb(211,135,44)"/><text x="126.00" y="398.50"></text></g><g><title>mkl_set_xerbla_interface (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.19%)</title><rect x="130" y="404" width="2" height="15" fill="rgb(239,88,26)"/><text x="133.00" y="414.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="132" y="372" width="4" height="15" fill="rgb(213,66,12)"/><text x="135.00" y="382.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="132" y="388" width="4" height="15" fill="rgb(246,179,24)"/><text x="135.00" y="398.50"></text></g><g><title>_ZNSt17_Function_handlerIFvllEZN5Eigen8internal14TensorExecutorIKNS1_14TensorAssignOpINS1_9TensorMapINS1_6TensorIfLi2ELi1ElEELi16ENS1_11MakePointerEEEKNS1_18TensorCwiseUnaryOpINS2_13scalar_exp_opIfEEKNS1_19TensorCwiseBinaryOpINS2_20scalar_difference_opIKfSF_EEKNS5_INS6_ISF_Li2ELi1ElEELi16ES8_EEKNS1_20TensorBroadcastingOpIKNS1_9IndexListINS1_10type2indexILl1EEEJiEEEKNS1_17TensorReshapingOpIKNSL_IiJSN_EEEKNS1_18TensorForcedEvalOpIKNS1_17TensorReductionOpINS2_10MaxReducerIfEEKNSL_ISN_JEEESJ_S8_EEEEEEEEEEEEEENS1_16ThreadPoolDeviceELb1ELb1EE3runERS1C_RKS1D_EUlllE_E9_M_invokeERKSt9_Any_dataOlS1N_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="132" y="404" width="4" height="15" fill="rgb(252,189,47)"/><text x="135.00" y="414.50"></text></g><g><title>Eigen::internal::TensorBlockCwiseUnaryIO&lt;Eigen::internal::scalar_exp_op&lt;float&gt;, long, float, 2, 1&gt;::Run&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="134" y="420" width="2" height="15" fill="rgb(205,226,52)"/><text x="137.00" y="430.50"></text></g><g><title>0x7f5157f8fe00 (libm-2.29.so) (1 samples, 0.19%)</title><rect x="134" y="436" width="2" height="15" fill="rgb(224,32,34)"/><text x="137.00" y="446.50"></text></g><g><title>Eigen::ThreadPoolDevice::allocate [clone .isra.64] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="136" y="388" width="3" height="15" fill="rgb(242,109,20)"/><text x="139.00" y="398.50"></text></g><g><title>onnxruntime::ComputeSoftMax&lt;Eigen::ThreadPoolDevice, float&gt; [clone .constprop.656] (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.74%)</title><rect x="132" y="356" width="9" height="15" fill="rgb(222,8,1)"/><text x="135.00" y="366.50"></text></g><g><title>_ZN5Eigen8internal14TensorExecutorIKNS_14TensorAssignOpINS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEEKNS_19TensorCwiseBinaryOpINS0_17scalar_product_opIffEEKS7_KNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNSD_IiJSF_EEEKNS_18TensorForcedEvalOpIKNS_18TensorCwiseUnaryOpINS0_17scalar_inverse_opIfEEKNS_17TensorReductionOpINS0_10SumReducerIfEEKNSD_ISF_JEEESB_S6_EEEEEEEEEEEEEENS_16ThreadPoolDeviceELb1ELb1EE3runERS17_RKS18_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="136" y="372" width="5" height="15" fill="rgb(210,137,0)"/><text x="139.00" y="382.50"></text></g><g><title>Eigen::internal::TensorExecutor&lt;Eigen::TensorEvalToOp&lt;Eigen::TensorCwiseUnaryOp&lt;Eigen::internal::scalar_inverse_op&lt;float&gt;, Eigen::TensorReductionOp&lt;Eigen::internal::SumReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const&gt; const, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice, true, false&gt;::run (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="139" y="388" width="2" height="15" fill="rgb(214,157,32)"/><text x="142.00" y="398.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="139" y="404" width="2" height="15" fill="rgb(220,27,52)"/><text x="142.00" y="414.50"></text></g><g><title>_ZNSt17_Function_handlerIFvllEZN5Eigen8internal14TensorExecutorIKNS1_14TensorEvalToOpIKNS1_18TensorCwiseUnaryOpINS2_17scalar_inverse_opIfEEKNS1_17TensorReductionOpINS2_10SumReducerIfEEKNS1_9IndexListINS1_10type2indexILl1EEEJEEEKNS1_9TensorMapINS1_6TensorIfLi2ELi1ElEELi16ENS1_11MakePointerEEESJ_EEEESJ_EENS1_16ThreadPoolDeviceELb1ELb0EE3runERSR_RKSS_EUlllE_E9_M_invokeERKSt9_Any_dataOlS12_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="139" y="420" width="2" height="15" fill="rgb(207,114,24)"/><text x="142.00" y="430.50"></text></g><g><title>onnxruntime::Softmax&lt;float, false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.93%)</title><rect x="132" y="340" width="11" height="15" fill="rgb(235,170,19)"/><text x="135.00" y="350.50"></text></g><g><title>onnxruntime::Tensor::Data&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="141" y="356" width="2" height="15" fill="rgb(250,150,17)"/><text x="144.00" y="366.50"></text></g><g><title>onnxruntime::DataTypeImpl::GetType&lt;int&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="145" y="420" width="2" height="15" fill="rgb(230,117,38)"/><text x="148.00" y="430.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 4.82%)</title><rect x="93" y="260" width="57" height="15" fill="rgb(213,1,33)"/><text x="96.00" y="270.50">onnxru..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 4.82%)</title><rect x="93" y="276" width="57" height="15" fill="rgb(237,123,37)"/><text x="96.00" y="286.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 4.64%)</title><rect x="95" y="292" width="55" height="15" fill="rgb(228,122,0)"/><text x="98.00" y="302.50">onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 4.64%)</title><rect x="95" y="308" width="55" height="15" fill="rgb(232,11,25)"/><text x="98.00" y="318.50">onnxr..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 4.64%)</title><rect x="95" y="324" width="55" height="15" fill="rgb(232,25,22)"/><text x="98.00" y="334.50">onnxr..</text></g><g><title>onnxruntime::ml::ArrayFeatureExtractorOp&lt;int&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.56%)</title><rect x="143" y="340" width="7" height="15" fill="rgb(236,109,41)"/><text x="146.00" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.56%)</title><rect x="143" y="356" width="7" height="15" fill="rgb(235,86,38)"/><text x="146.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="145" y="372" width="5" height="15" fill="rgb(235,67,11)"/><text x="148.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="145" y="388" width="5" height="15" fill="rgb(235,179,50)"/><text x="148.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="145" y="404" width="5" height="15" fill="rgb(246,94,12)"/><text x="148.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="147" y="420" width="3" height="15" fill="rgb(231,67,42)"/><text x="150.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="147" y="436" width="3" height="15" fill="rgb(246,76,35)"/><text x="150.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="147" y="452" width="3" height="15" fill="rgb(248,143,10)"/><text x="150.00" y="462.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="147" y="468" width="3" height="15" fill="rgb(226,221,49)"/><text x="150.00" y="478.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="147" y="484" width="3" height="15" fill="rgb(247,217,8)"/><text x="150.00" y="494.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (32 samples, 5.94%)</title><rect x="88" y="244" width="70" height="15" fill="rgb(231,23,13)"/><text x="91.00" y="254.50">onnxrun..</text></g><g><title>onnxruntime::python::CreateGenericMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.74%)</title><rect x="150" y="260" width="8" height="15" fill="rgb(207,22,35)"/><text x="153.00" y="270.50"></text></g><g><title>onnxruntime::python::CreateTensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="156" y="276" width="2" height="15" fill="rgb(231,93,39)"/><text x="159.00" y="286.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="156" y="292" width="2" height="15" fill="rgb(213,10,7)"/><text x="159.00" y="302.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="156" y="308" width="2" height="15" fill="rgb(220,217,41)"/><text x="159.00" y="318.50"></text></g><g><title>pybind11::detail::list_caster&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::load (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="158" y="244" width="5" height="15" fill="rgb(208,116,48)"/><text x="161.00" y="254.50"></text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::load [clone .constprop.387] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="161" y="260" width="2" height="15" fill="rgb(254,176,41)"/><text x="164.00" y="270.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; [clone .isra.154] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="161" y="276" width="2" height="15" fill="rgb(221,71,39)"/><text x="164.00" y="286.50"></text></g><g><title>0x7f5157e30d50 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="161" y="292" width="2" height="15" fill="rgb(222,38,54)"/><text x="164.00" y="302.50"></text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::load [clone .constprop.387] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="163" y="244" width="2" height="15" fill="rgb(207,41,50)"/><text x="166.00" y="254.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (libstdc++.so.6.0.28) (1 samples, 0.19%)</title><rect x="163" y="260" width="2" height="15" fill="rgb(230,116,54)"/><text x="166.00" y="270.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (52 samples, 9.65%)</title><rect x="53" y="132" width="114" height="15" fill="rgb(210,159,33)"/><text x="56.00" y="142.50">&lt;lambda&gt; (mlpr..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (52 samples, 9.65%)</title><rect x="53" y="148" width="114" height="15" fill="rgb(224,134,49)"/><text x="56.00" y="158.50">run (mlprodict..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (49 samples, 9.09%)</title><rect x="60" y="164" width="107" height="15" fill="rgb(205,115,4)"/><text x="63.00" y="174.50">_run_whole_ru..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (46 samples, 8.53%)</title><rect x="66" y="180" width="101" height="15" fill="rgb(228,68,40)"/><text x="69.00" y="190.50">run (mlprodi..</text></g><g><title>run (onnxruntime/capi/session.py) (44 samples, 8.16%)</title><rect x="71" y="196" width="96" height="15" fill="rgb(225,188,36)"/><text x="74.00" y="206.50">run (onnxru..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (36 samples, 6.68%)</title><rect x="88" y="212" width="79" height="15" fill="rgb(247,217,13)"/><text x="91.00" y="222.50">pybind11:..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (36 samples, 6.68%)</title><rect x="88" y="228" width="79" height="15" fill="rgb(206,2,41)"/><text x="91.00" y="238.50">void pybi..</text></g><g><title>pybind11::detail::type_caster_generic::load_impl&lt;pybind11::detail::type_caster_generic&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="165" y="244" width="2" height="15" fill="rgb(233,226,54)"/><text x="168.00" y="254.50"></text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1_50_12_float_.py) (54 samples, 10.02%)</title><rect x="51" y="100" width="118" height="15" fill="rgb(240,66,13)"/><text x="54.00" y="110.50">profile (bench..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (53 samples, 9.83%)</title><rect x="53" y="116" width="116" height="15" fill="rgb(243,116,41)"/><text x="56.00" y="126.50">time_predict (..</text></g><g><title>unicode_hash (python3.7) (1 samples, 0.19%)</title><rect x="167" y="132" width="2" height="15" fill="rgb(222,172,0)"/><text x="170.00" y="142.50"></text></g><g><title>0x7f5115e53ff9 (?) (1 samples, 0.19%)</title><rect x="169" y="228" width="3" height="15" fill="rgb(241,128,8)"/><text x="172.00" y="238.50"></text></g><g><title>0x7f5115e4e57e (?) (1 samples, 0.19%)</title><rect x="169" y="244" width="3" height="15" fill="rgb(224,202,17)"/><text x="172.00" y="254.50"></text></g><g><title>0x7f5115e7b426 (?) (1 samples, 0.19%)</title><rect x="169" y="260" width="3" height="15" fill="rgb(247,25,10)"/><text x="172.00" y="270.50"></text></g><g><title>0x7f511629f0b2 (?) (1 samples, 0.19%)</title><rect x="169" y="276" width="3" height="15" fill="rgb(235,125,7)"/><text x="172.00" y="286.50"></text></g><g><title>0x7f5115ef49fc (?) (1 samples, 0.19%)</title><rect x="169" y="292" width="3" height="15" fill="rgb(229,150,44)"/><text x="172.00" y="302.50"></text></g><g><title>0x7f5115ef46a4 (?) (1 samples, 0.19%)</title><rect x="169" y="308" width="3" height="15" fill="rgb(254,203,5)"/><text x="172.00" y="318.50"></text></g><g><title>0x7f5115ef41af (?) (1 samples, 0.19%)</title><rect x="169" y="324" width="3" height="15" fill="rgb(228,228,32)"/><text x="172.00" y="334.50"></text></g><g><title>0x7f51161b5b4a (?) (1 samples, 0.19%)</title><rect x="169" y="340" width="3" height="15" fill="rgb(246,161,54)"/><text x="172.00" y="350.50"></text></g><g><title>0x7f51162974a4 (?) (1 samples, 0.19%)</title><rect x="169" y="356" width="3" height="15" fill="rgb(242,211,0)"/><text x="172.00" y="366.50"></text></g><g><title>0x7f51162973db (?) (1 samples, 0.19%)</title><rect x="169" y="372" width="3" height="15" fill="rgb(253,159,32)"/><text x="172.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.19%)</title><rect x="169" y="388" width="3" height="15" fill="rgb(211,102,17)"/><text x="172.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.19%)</title><rect x="169" y="404" width="3" height="15" fill="rgb(223,20,6)"/><text x="172.00" y="414.50"></text></g><g><title>profile_ort (bench_MLPClassifier_default_b_cl_1_50_12_float_.py) (56 samples, 10.39%)</title><rect x="51" y="68" width="123" height="15" fill="rgb(246,66,49)"/><text x="54.00" y="78.50">profile_ort (be..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1_50_12_float_.py) (56 samples, 10.39%)</title><rect x="51" y="84" width="123" height="15" fill="rgb(206,221,39)"/><text x="54.00" y="94.50">setup_profile (..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.37%)</title><rect x="169" y="100" width="5" height="15" fill="rgb(221,37,48)"/><text x="172.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.37%)</title><rect x="169" y="116" width="5" height="15" fill="rgb(245,220,14)"/><text x="172.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.37%)</title><rect x="169" y="132" width="5" height="15" fill="rgb(217,23,42)"/><text x="172.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.37%)</title><rect x="169" y="148" width="5" height="15" fill="rgb(207,56,21)"/><text x="172.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.37%)</title><rect x="169" y="164" width="5" height="15" fill="rgb(239,173,27)"/><text x="172.00" y="174.50"></text></g><g><title>__init__ (mlprodict/onnxrt/ops_whole/session.py) (2 samples, 0.37%)</title><rect x="169" y="180" width="5" height="15" fill="rgb(245,89,1)"/><text x="172.00" y="190.50"></text></g><g><title>__init__ (onnxruntime/capi/session.py) (2 samples, 0.37%)</title><rect x="169" y="196" width="5" height="15" fill="rgb(206,73,19)"/><text x="172.00" y="206.50"></text></g><g><title>_load_model (onnxruntime/capi/session.py) (2 samples, 0.37%)</title><rect x="169" y="212" width="5" height="15" fill="rgb(222,61,23)"/><text x="172.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="172" y="228" width="2" height="15" fill="rgb(241,200,44)"/><text x="175.00" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, pybind11::bytes const&amp;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;)#7}, void, onnxruntime::InferenceSession*, pybind11::bytes const&amp;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;, pybind11::name, pybind11::is_method, pybind11::sibling, char [40]&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, pybind11::bytes const&amp;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;)#7}&amp;&amp;, void (*)(onnxruntime::InferenceSession*, pybind11::bytes const&amp;, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [40])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.539] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="172" y="244" width="2" height="15" fill="rgb(229,224,13)"/><text x="175.00" y="254.50"></text></g><g><title>onnxruntime::InferenceSession::Initialize (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="172" y="260" width="2" height="15" fill="rgb(248,217,3)"/><text x="175.00" y="270.50"></text></g><g><title>onnxruntime::KernelRegistryManager::RegisterKernels (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="172" y="276" width="2" height="15" fill="rgb(232,66,22)"/><text x="175.00" y="286.50"></text></g><g><title>onnxruntime::CPUExecutionProvider::GetKernelRegistry (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="172" y="292" width="2" height="15" fill="rgb(236,138,5)"/><text x="175.00" y="302.50"></text></g><g><title>onnxruntime::GetCpuKernelRegistry (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="172" y="308" width="2" height="15" fill="rgb(242,198,4)"/><text x="175.00" y="318.50"></text></g><g><title>onnxruntime::RegisterOnnxOperatorKernels (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="172" y="324" width="2" height="15" fill="rgb(232,164,19)"/><text x="175.00" y="334.50"></text></g><g><title>onnxruntime::KernelRegistry::Register (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="172" y="340" width="2" height="15" fill="rgb(214,211,39)"/><text x="175.00" y="350.50"></text></g><g><title>onnxruntime::KernelDef::IsConflict (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="172" y="356" width="2" height="15" fill="rgb(246,43,51)"/><text x="175.00" y="366.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;onnxruntime::DataTypeImpl const*, std::allocator&lt;onnxruntime::DataTypeImpl const*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;onnxruntime::DataTypeImpl const*, std::allocator&lt;onnxruntime::DataTypeImpl const*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;onnxruntime::DataTypeImpl const*, std::allocator&lt;onnxruntime::DataTypeImpl const*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;onnxruntime::DataTypeImpl const*, std::allocator&lt;onnxruntime::DataTypeImpl const*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable(std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;onnxruntime::DataTypeImpl const*, std::allocator&lt;onnxruntime::DataTypeImpl const*&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;onnxruntime::DataTypeImpl const*, std::allocator&lt;onnxruntime::DataTypeImpl const*&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt; const&amp;)::{lambda(std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::vector&lt;onnxruntime::DataTypeImpl const*, std::allocator&lt;onnxruntime::DataTypeImpl const*&gt; &gt; &gt;, true&gt; const*)#1}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.19%)</title><rect x="172" y="372" width="2" height="15" fill="rgb(226,84,1)"/><text x="175.00" y="382.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.19%)</title><rect x="176" y="116" width="2" height="15" fill="rgb(227,184,50)"/><text x="179.00" y="126.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (6 samples, 1.11%)</title><rect x="323" y="196" width="13" height="15" fill="rgb(221,55,8)"/><text x="326.00" y="206.50"></text></g><g><title>PyArray_ToList (convert.c) (1 samples, 0.19%)</title><rect x="360" y="228" width="2" height="15" fill="rgb(232,194,13)"/><text x="363.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.19%)</title><rect x="362" y="228" width="2" height="15" fill="rgb(213,6,43)"/><text x="365.00" y="238.50"></text></g><g><title>npy_free_cache_dim (alloc.c) (1 samples, 0.19%)</title><rect x="362" y="244" width="2" height="15" fill="rgb(244,186,50)"/><text x="365.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.19%)</title><rect x="362" y="260" width="2" height="15" fill="rgb(208,56,27)"/><text x="365.00" y="270.50"></text></g><g><title>array_ravel (methods.c) (1 samples, 0.19%)</title><rect x="364" y="228" width="2" height="15" fill="rgb(205,46,13)"/><text x="367.00" y="238.50"></text></g><g><title>PyArray_Ravel (shape.c) (1 samples, 0.19%)</title><rect x="364" y="244" width="2" height="15" fill="rgb(239,197,13)"/><text x="367.00" y="254.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.19%)</title><rect x="364" y="260" width="2" height="15" fill="rgb(246,20,14)"/><text x="367.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.19%)</title><rect x="364" y="276" width="2" height="15" fill="rgb(213,14,21)"/><text x="367.00" y="286.50"></text></g><g><title>array_reshape (methods.c) (2 samples, 0.37%)</title><rect x="366" y="228" width="5" height="15" fill="rgb(218,73,40)"/><text x="369.00" y="238.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (1 samples, 0.19%)</title><rect x="369" y="244" width="2" height="15" fill="rgb(225,109,15)"/><text x="372.00" y="254.50"></text></g><g><title>0x7f5157e26730 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="369" y="260" width="2" height="15" fill="rgb(207,158,28)"/><text x="372.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.19%)</title><rect x="371" y="260" width="2" height="15" fill="rgb(248,63,31)"/><text x="374.00" y="270.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.19%)</title><rect x="371" y="276" width="2" height="15" fill="rgb(234,109,18)"/><text x="374.00" y="286.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.19%)</title><rect x="373" y="260" width="2" height="15" fill="rgb(207,118,47)"/><text x="376.00" y="270.50"></text></g><g><title>NpyIter_GetIterNext (nditer_templ.c.src) (1 samples, 0.19%)</title><rect x="375" y="260" width="2" height="15" fill="rgb(254,0,49)"/><text x="378.00" y="270.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.19%)</title><rect x="379" y="292" width="3" height="15" fill="rgb(233,171,23)"/><text x="382.00" y="302.50"></text></g><g><title>PyUnicode_ConcatAndDel (npy_3kcompat.h) (1 samples, 0.19%)</title><rect x="379" y="308" width="3" height="15" fill="rgb(242,114,7)"/><text x="382.00" y="318.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (3 samples, 0.56%)</title><rect x="377" y="260" width="7" height="15" fill="rgb(251,98,1)"/><text x="380.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.56%)</title><rect x="377" y="276" width="7" height="15" fill="rgb(252,188,9)"/><text x="380.00" y="286.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.19%)</title><rect x="382" y="292" width="2" height="15" fill="rgb(228,206,24)"/><text x="385.00" y="302.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (1 samples, 0.19%)</title><rect x="382" y="308" width="2" height="15" fill="rgb(248,179,4)"/><text x="385.00" y="318.50"></text></g><g><title>PyArray_CreateSortedStridePerm (shape.c) (1 samples, 0.19%)</title><rect x="384" y="260" width="2" height="15" fill="rgb(242,142,14)"/><text x="387.00" y="270.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (8 samples, 1.48%)</title><rect x="371" y="244" width="17" height="15" fill="rgb(227,212,20)"/><text x="374.00" y="254.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.19%)</title><rect x="386" y="260" width="2" height="15" fill="rgb(231,128,47)"/><text x="389.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (2 samples, 0.37%)</title><rect x="390" y="276" width="5" height="15" fill="rgb(214,98,9)"/><text x="393.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c) (2 samples, 0.37%)</title><rect x="390" y="292" width="5" height="15" fill="rgb(226,77,54)"/><text x="393.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (1 samples, 0.19%)</title><rect x="401" y="292" width="3" height="15" fill="rgb(233,200,16)"/><text x="404.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (1 samples, 0.19%)</title><rect x="401" y="308" width="3" height="15" fill="rgb(239,163,12)"/><text x="404.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c) (8 samples, 1.48%)</title><rect x="390" y="260" width="18" height="15" fill="rgb(214,151,54)"/><text x="393.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (6 samples, 1.11%)</title><rect x="395" y="276" width="13" height="15" fill="rgb(230,95,4)"/><text x="398.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c) (2 samples, 0.37%)</title><rect x="404" y="292" width="4" height="15" fill="rgb(244,3,13)"/><text x="407.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c) (1 samples, 0.19%)</title><rect x="406" y="308" width="2" height="15" fill="rgb(252,150,7)"/><text x="409.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (23 samples, 4.27%)</title><rect x="360" y="212" width="50" height="15" fill="rgb(241,135,1)"/><text x="363.00" y="222.50">_run ..</text></g><g><title>array_subscript (mapping.c) (18 samples, 3.34%)</title><rect x="371" y="228" width="39" height="15" fill="rgb(228,135,22)"/><text x="374.00" y="238.50">arr..</text></g><g><title>prepare_index (mapping.c) (10 samples, 1.86%)</title><rect x="388" y="244" width="22" height="15" fill="rgb(239,77,12)"/><text x="391.00" y="254.50">p..</text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (1 samples, 0.19%)</title><rect x="408" y="260" width="2" height="15" fill="rgb(253,225,38)"/><text x="411.00" y="270.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (1 samples, 0.19%)</title><rect x="408" y="276" width="2" height="15" fill="rgb(237,107,31)"/><text x="411.00" y="286.50"></text></g><g><title>0x7f5157e26757 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="415" y="260" width="2" height="15" fill="rgb(242,205,41)"/><text x="418.00" y="270.50"></text></g><g><title>arrays_overlap (array_assign.c) (1 samples, 0.19%)</title><rect x="417" y="276" width="2" height="15" fill="rgb(206,3,25)"/><text x="420.00" y="286.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.19%)</title><rect x="417" y="292" width="2" height="15" fill="rgb(239,150,26)"/><text x="420.00" y="302.50"></text></g><g><title>get_array_memory_extents (mem_overlap.c) (1 samples, 0.19%)</title><rect x="417" y="308" width="2" height="15" fill="rgb(254,82,31)"/><text x="420.00" y="318.50"></text></g><g><title>offset_bounds_from_strides (mem_overlap.c) (1 samples, 0.19%)</title><rect x="417" y="324" width="2" height="15" fill="rgb(211,145,25)"/><text x="420.00" y="334.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (1 samples, 0.19%)</title><rect x="421" y="292" width="2" height="15" fill="rgb(234,2,47)"/><text x="424.00" y="302.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.19%)</title><rect x="423" y="292" width="2" height="15" fill="rgb(228,198,12)"/><text x="426.00" y="302.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (5 samples, 0.93%)</title><rect x="417" y="260" width="11" height="15" fill="rgb(210,143,52)"/><text x="420.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (4 samples, 0.74%)</title><rect x="419" y="276" width="9" height="15" fill="rgb(229,200,28)"/><text x="422.00" y="286.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (1 samples, 0.19%)</title><rect x="425" y="292" width="3" height="15" fill="rgb(245,226,4)"/><text x="428.00" y="302.50"></text></g><g><title>npy_uint_alignment (common.h) (1 samples, 0.19%)</title><rect x="425" y="308" width="3" height="15" fill="rgb(224,183,34)"/><text x="428.00" y="318.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (1 samples, 0.19%)</title><rect x="428" y="260" width="2" height="15" fill="rgb(249,90,20)"/><text x="431.00" y="270.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.19%)</title><rect x="428" y="276" width="2" height="15" fill="rgb(244,150,6)"/><text x="431.00" y="286.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.19%)</title><rect x="430" y="260" width="2" height="15" fill="rgb(210,9,1)"/><text x="433.00" y="270.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (1 samples, 0.19%)</title><rect x="430" y="276" width="2" height="15" fill="rgb(233,177,32)"/><text x="433.00" y="286.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.19%)</title><rect x="430" y="292" width="2" height="15" fill="rgb(209,173,53)"/><text x="433.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (11 samples, 2.04%)</title><rect x="410" y="212" width="24" height="15" fill="rgb(245,193,49)"/><text x="413.00" y="222.50">_..</text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (10 samples, 1.86%)</title><rect x="412" y="228" width="22" height="15" fill="rgb(251,60,46)"/><text x="415.00" y="238.50">&lt;..</text></g><g><title>array_astype (methods.c) (10 samples, 1.86%)</title><rect x="412" y="244" width="22" height="15" fill="rgb(219,208,42)"/><text x="415.00" y="254.50">a..</text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (1 samples, 0.19%)</title><rect x="432" y="260" width="2" height="15" fill="rgb(239,166,14)"/><text x="435.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.19%)</title><rect x="432" y="276" width="2" height="15" fill="rgb(251,213,51)"/><text x="435.00" y="286.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.19%)</title><rect x="432" y="292" width="2" height="15" fill="rgb(252,32,41)"/><text x="435.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.19%)</title><rect x="432" y="308" width="2" height="15" fill="rgb(227,174,46)"/><text x="435.00" y="318.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.19%)</title><rect x="432" y="324" width="2" height="15" fill="rgb(224,50,7)"/><text x="435.00" y="334.50"></text></g><g><title>0x7f5157e31120 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="436" y="228" width="3" height="15" fill="rgb(236,49,11)"/><text x="439.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reshape.py) (3 samples, 0.56%)</title><rect x="434" y="212" width="7" height="15" fill="rgb(206,26,21)"/><text x="437.00" y="222.50"></text></g><g><title>array_reshape (methods.c) (1 samples, 0.19%)</title><rect x="439" y="228" width="2" height="15" fill="rgb(248,79,21)"/><text x="442.00" y="238.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.19%)</title><rect x="439" y="244" width="2" height="15" fill="rgb(223,194,51)"/><text x="442.00" y="254.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.19%)</title><rect x="439" y="260" width="2" height="15" fill="rgb(231,129,1)"/><text x="442.00" y="270.50"></text></g><g><title>array_item (mapping.c) (1 samples, 0.19%)</title><rect x="439" y="276" width="2" height="15" fill="rgb(228,193,24)"/><text x="442.00" y="286.50"></text></g><g><title>PyArray_Scalar (scalarapi.c) (1 samples, 0.19%)</title><rect x="439" y="292" width="2" height="15" fill="rgb(253,122,15)"/><text x="442.00" y="302.50"></text></g><g><title>LONG_copyswap (arraytypes.c.src) (1 samples, 0.19%)</title><rect x="439" y="308" width="2" height="15" fill="rgb(216,228,10)"/><text x="442.00" y="318.50"></text></g><g><title>_basic_copy (arraytypes.c.src) (1 samples, 0.19%)</title><rect x="439" y="324" width="2" height="15" fill="rgb(232,201,39)"/><text x="442.00" y="334.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.19%)</title><rect x="443" y="228" width="2" height="15" fill="rgb(216,50,20)"/><text x="446.00" y="238.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (3 samples, 0.56%)</title><rect x="441" y="212" width="6" height="15" fill="rgb(228,164,0)"/><text x="444.00" y="222.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (1 samples, 0.19%)</title><rect x="445" y="228" width="2" height="15" fill="rgb(207,215,15)"/><text x="448.00" y="238.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.19%)</title><rect x="465" y="244" width="2" height="15" fill="rgb(242,202,49)"/><text x="468.00" y="254.50"></text></g><g><title>unicode_dealloc (python3.7) (1 samples, 0.19%)</title><rect x="467" y="308" width="2" height="15" fill="rgb(233,207,21)"/><text x="470.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.37%)</title><rect x="467" y="260" width="4" height="15" fill="rgb(207,122,45)"/><text x="470.00" y="270.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.37%)</title><rect x="467" y="276" width="4" height="15" fill="rgb(232,48,7)"/><text x="470.00" y="286.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (2 samples, 0.37%)</title><rect x="467" y="292" width="4" height="15" fill="rgb(228,46,30)"/><text x="470.00" y="302.50"></text></g><g><title>unicode_eq (python3.7) (1 samples, 0.19%)</title><rect x="469" y="308" width="2" height="15" fill="rgb(213,222,17)"/><text x="472.00" y="318.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (1 samples, 0.19%)</title><rect x="471" y="276" width="3" height="15" fill="rgb(241,100,47)"/><text x="474.00" y="286.50"></text></g><g><title>diophantine_simplify (mem_overlap.c) (2 samples, 0.37%)</title><rect x="474" y="324" width="4" height="15" fill="rgb(226,178,2)"/><text x="477.00" y="334.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.19%)</title><rect x="476" y="340" width="2" height="15" fill="rgb(216,36,43)"/><text x="479.00" y="350.50"></text></g><g><title>0x7f5157dc87a5 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="476" y="356" width="2" height="15" fill="rgb(216,104,49)"/><text x="479.00" y="366.50"></text></g><g><title>0x7f5157dc89e8 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="476" y="372" width="2" height="15" fill="rgb(217,154,15)"/><text x="479.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.74%)</title><rect x="471" y="260" width="9" height="15" fill="rgb(207,35,29)"/><text x="474.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.56%)</title><rect x="474" y="276" width="6" height="15" fill="rgb(211,198,2)"/><text x="477.00" y="286.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (3 samples, 0.56%)</title><rect x="474" y="292" width="6" height="15" fill="rgb(225,43,15)"/><text x="477.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (3 samples, 0.56%)</title><rect x="474" y="308" width="6" height="15" fill="rgb(253,190,41)"/><text x="477.00" y="318.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (1 samples, 0.19%)</title><rect x="478" y="324" width="2" height="15" fill="rgb(248,26,27)"/><text x="481.00" y="334.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.19%)</title><rect x="478" y="340" width="2" height="15" fill="rgb(243,36,22)"/><text x="481.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (13 samples, 2.41%)</title><rect x="454" y="228" width="28" height="15" fill="rgb(209,182,45)"/><text x="457.00" y="238.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (7 samples, 1.30%)</title><rect x="467" y="244" width="15" height="15" fill="rgb(235,29,22)"/><text x="470.00" y="254.50"></text></g><g><title>_find_array_wrap (ufunc_object.c) (1 samples, 0.19%)</title><rect x="480" y="260" width="2" height="15" fill="rgb(247,228,1)"/><text x="483.00" y="270.50"></text></g><g><title>_find_array_method (ufunc_object.c) (1 samples, 0.19%)</title><rect x="480" y="276" width="2" height="15" fill="rgb(219,49,22)"/><text x="483.00" y="286.50"></text></g><g><title>0x7f5157032b20 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.19%)</title><rect x="504" y="372" width="2" height="15" fill="rgb(235,178,11)"/><text x="507.00" y="382.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.19%)</title><rect x="506" y="372" width="3" height="15" fill="rgb(207,228,32)"/><text x="509.00" y="382.50"></text></g><g><title>PyArray_FromArray (ctors.c) (1 samples, 0.19%)</title><rect x="506" y="388" width="3" height="15" fill="rgb(212,202,11)"/><text x="509.00" y="398.50"></text></g><g><title>PyArray_ArgMax (calculation.c) (3 samples, 0.56%)</title><rect x="504" y="356" width="7" height="15" fill="rgb(235,143,26)"/><text x="507.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.19%)</title><rect x="509" y="372" width="2" height="15" fill="rgb(241,70,26)"/><text x="512.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.19%)</title><rect x="509" y="388" width="2" height="15" fill="rgb(207,168,11)"/><text x="512.00" y="398.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.19%)</title><rect x="509" y="404" width="2" height="15" fill="rgb(225,9,47)"/><text x="512.00" y="414.50"></text></g><g><title>PyArray_AxisConverter (conversion_utils.c) (1 samples, 0.19%)</title><rect x="511" y="356" width="2" height="15" fill="rgb(237,129,16)"/><text x="514.00" y="366.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (1 samples, 0.19%)</title><rect x="511" y="372" width="2" height="15" fill="rgb(238,191,7)"/><text x="514.00" y="382.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (1 samples, 0.19%)</title><rect x="511" y="388" width="2" height="15" fill="rgb(247,75,28)"/><text x="514.00" y="398.50"></text></g><g><title>unicode_eq (python3.7) (1 samples, 0.19%)</title><rect x="513" y="356" width="2" height="15" fill="rgb(205,68,9)"/><text x="516.00" y="366.50"></text></g><g><title>0x7f5157eee14d (libc-2.29.so) (1 samples, 0.19%)</title><rect x="513" y="372" width="2" height="15" fill="rgb(228,166,4)"/><text x="516.00" y="382.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;) (10 samples, 1.86%)</title><rect x="496" y="276" width="21" height="15" fill="rgb(247,42,48)"/><text x="499.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (10 samples, 1.86%)</title><rect x="496" y="292" width="21" height="15" fill="rgb(235,108,35)"/><text x="499.00" y="302.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py) (10 samples, 1.86%)</title><rect x="496" y="308" width="21" height="15" fill="rgb(250,175,40)"/><text x="499.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (8 samples, 1.48%)</title><rect x="500" y="324" width="17" height="15" fill="rgb(239,145,5)"/><text x="503.00" y="334.50"></text></g><g><title>array_argmax (methods.c) (7 samples, 1.30%)</title><rect x="502" y="340" width="15" height="15" fill="rgb(241,188,42)"/><text x="505.00" y="350.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.19%)</title><rect x="515" y="356" width="2" height="15" fill="rgb(214,62,28)"/><text x="518.00" y="366.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.37%)</title><rect x="517" y="292" width="5" height="15" fill="rgb(245,178,24)"/><text x="520.00" y="302.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.37%)</title><rect x="517" y="308" width="5" height="15" fill="rgb(254,217,50)"/><text x="520.00" y="318.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.19%)</title><rect x="520" y="324" width="2" height="15" fill="rgb(206,156,47)"/><text x="523.00" y="334.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c) (1 samples, 0.19%)</title><rect x="520" y="340" width="2" height="15" fill="rgb(216,213,31)"/><text x="523.00" y="350.50"></text></g><g><title>PyArray_GetStridedCopyFn (lowlevel_strided_loops.c.src) (1 samples, 0.19%)</title><rect x="520" y="356" width="2" height="15" fill="rgb(220,10,24)"/><text x="523.00" y="366.50"></text></g><g><title>array_astype (methods.c) (3 samples, 0.56%)</title><rect x="517" y="276" width="7" height="15" fill="rgb(243,150,6)"/><text x="520.00" y="286.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (1 samples, 0.19%)</title><rect x="522" y="292" width="2" height="15" fill="rgb(235,35,54)"/><text x="525.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.19%)</title><rect x="522" y="308" width="2" height="15" fill="rgb(248,181,13)"/><text x="525.00" y="318.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.19%)</title><rect x="522" y="324" width="2" height="15" fill="rgb(227,132,47)"/><text x="525.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.19%)</title><rect x="522" y="340" width="2" height="15" fill="rgb(241,195,32)"/><text x="525.00" y="350.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.19%)</title><rect x="522" y="356" width="2" height="15" fill="rgb(253,218,9)"/><text x="525.00" y="366.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (3 samples, 0.56%)</title><rect x="531" y="340" width="6" height="15" fill="rgb(245,14,3)"/><text x="534.00" y="350.50"></text></g><g><title>array_reshape (methods.c) (5 samples, 0.93%)</title><rect x="528" y="324" width="11" height="15" fill="rgb(244,42,31)"/><text x="531.00" y="334.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.19%)</title><rect x="537" y="340" width="2" height="15" fill="rgb(209,199,41)"/><text x="540.00" y="350.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.19%)</title><rect x="537" y="356" width="2" height="15" fill="rgb(217,108,47)"/><text x="540.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.19%)</title><rect x="537" y="372" width="2" height="15" fill="rgb(219,136,8)"/><text x="540.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (27 samples, 5.01%)</title><rect x="482" y="228" width="59" height="15" fill="rgb(232,20,26)"/><text x="485.00" y="238.50">_run (..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (26 samples, 4.82%)</title><rect x="485" y="244" width="56" height="15" fill="rgb(235,100,9)"/><text x="488.00" y="254.50">_run ..</text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py) (25 samples, 4.64%)</title><rect x="487" y="260" width="54" height="15" fill="rgb(216,81,14)"/><text x="490.00" y="270.50">_argm..</text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (8 samples, 1.48%)</title><rect x="524" y="276" width="17" height="15" fill="rgb(210,112,27)"/><text x="527.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (8 samples, 1.48%)</title><rect x="524" y="292" width="17" height="15" fill="rgb(232,159,13)"/><text x="527.00" y="302.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (8 samples, 1.48%)</title><rect x="524" y="308" width="17" height="15" fill="rgb(210,166,17)"/><text x="527.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (1 samples, 0.19%)</title><rect x="539" y="324" width="2" height="15" fill="rgb(254,9,14)"/><text x="542.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (1 samples, 0.19%)</title><rect x="541" y="228" width="3" height="15" fill="rgb(231,218,53)"/><text x="544.00" y="238.50"></text></g><g><title>array_subscript (mapping.c) (1 samples, 0.19%)</title><rect x="566" y="260" width="2" height="15" fill="rgb(238,157,54)"/><text x="569.00" y="270.50"></text></g><g><title>get_view_from_index (mapping.c) (1 samples, 0.19%)</title><rect x="566" y="276" width="2" height="15" fill="rgb(239,38,29)"/><text x="569.00" y="286.50"></text></g><g><title>0x7f5157e3112b (libc-2.29.so) (1 samples, 0.19%)</title><rect x="570" y="276" width="2" height="15" fill="rgb(231,104,44)"/><text x="573.00" y="286.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.19%)</title><rect x="577" y="324" width="2" height="15" fill="rgb(221,91,40)"/><text x="580.00" y="334.50"></text></g><g><title>PyArray_AdaptFlexibleDType (convert_datatype.c) (1 samples, 0.19%)</title><rect x="577" y="340" width="2" height="15" fill="rgb(216,104,32)"/><text x="580.00" y="350.50"></text></g><g><title>gemv (cblasfuncs.c) (7 samples, 1.30%)</title><rect x="581" y="340" width="15" height="15" fill="rgb(243,23,46)"/><text x="584.00" y="350.50"></text></g><g><title>cblas_sgemv (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 1.30%)</title><rect x="581" y="356" width="15" height="15" fill="rgb(225,76,44)"/><text x="584.00" y="366.50"></text></g><g><title>sgemv_n_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.93%)</title><rect x="585" y="372" width="11" height="15" fill="rgb(222,148,36)"/><text x="588.00" y="382.50"></text></g><g><title>sgemv_kernel_4x8 (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.93%)</title><rect x="585" y="388" width="11" height="15" fill="rgb(205,199,33)"/><text x="588.00" y="398.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (1 samples, 0.19%)</title><rect x="596" y="356" width="2" height="15" fill="rgb(247,118,21)"/><text x="599.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.19%)</title><rect x="596" y="372" width="2" height="15" fill="rgb(207,146,8)"/><text x="599.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.19%)</title><rect x="596" y="388" width="2" height="15" fill="rgb(208,215,44)"/><text x="599.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.19%)</title><rect x="596" y="404" width="2" height="15" fill="rgb(225,188,17)"/><text x="599.00" y="414.50"></text></g><g><title>ceildiv_128_64 (npy_extint128.h) (1 samples, 0.19%)</title><rect x="598" y="404" width="3" height="15" fill="rgb(254,127,33)"/><text x="601.00" y="414.50"></text></g><g><title>divmod_128_64 (npy_extint128.h) (1 samples, 0.19%)</title><rect x="598" y="420" width="3" height="15" fill="rgb(220,198,8)"/><text x="601.00" y="430.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py) (27 samples, 5.01%)</title><rect x="544" y="228" width="59" height="15" fill="rgb(240,219,48)"/><text x="547.00" y="238.50">_run (..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py) (26 samples, 4.82%)</title><rect x="546" y="244" width="57" height="15" fill="rgb(253,154,47)"/><text x="549.00" y="254.50">numpy_..</text></g><g><title>dot (&lt;__array_function__ internals&gt;) (16 samples, 2.97%)</title><rect x="568" y="260" width="35" height="15" fill="rgb(210,18,29)"/><text x="571.00" y="270.50">do..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (14 samples, 2.60%)</title><rect x="572" y="276" width="31" height="15" fill="rgb(218,106,29)"/><text x="575.00" y="286.50">ar..</text></g><g><title>array_matrixproduct (multiarraymodule.c) (13 samples, 2.41%)</title><rect x="574" y="292" width="29" height="15" fill="rgb(240,174,1)"/><text x="577.00" y="302.50">ar..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c) (12 samples, 2.23%)</title><rect x="577" y="308" width="26" height="15" fill="rgb(234,168,35)"/><text x="580.00" y="318.50">P..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c) (11 samples, 2.04%)</title><rect x="579" y="324" width="24" height="15" fill="rgb(220,16,45)"/><text x="582.00" y="334.50">c..</text></g><g><title>new_array_for_sum (common.c) (3 samples, 0.56%)</title><rect x="596" y="340" width="7" height="15" fill="rgb(246,178,23)"/><text x="599.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (2 samples, 0.37%)</title><rect x="598" y="356" width="5" height="15" fill="rgb(248,215,44)"/><text x="601.00" y="366.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (2 samples, 0.37%)</title><rect x="598" y="372" width="5" height="15" fill="rgb(244,36,42)"/><text x="601.00" y="382.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (2 samples, 0.37%)</title><rect x="598" y="388" width="5" height="15" fill="rgb(241,138,51)"/><text x="601.00" y="398.50"></text></g><g><title>safe_sub (npy_extint128.h) (1 samples, 0.19%)</title><rect x="601" y="404" width="2" height="15" fill="rgb(252,69,41)"/><text x="604.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.37%)</title><rect x="605" y="276" width="4" height="15" fill="rgb(225,126,29)"/><text x="608.00" y="286.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (1 samples, 0.19%)</title><rect x="607" y="292" width="2" height="15" fill="rgb(246,39,40)"/><text x="610.00" y="302.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (1 samples, 0.19%)</title><rect x="607" y="308" width="2" height="15" fill="rgb(246,67,10)"/><text x="610.00" y="318.50"></text></g><g><title>can_cast_scalar_to (convert_datatype.c) (1 samples, 0.19%)</title><rect x="607" y="324" width="2" height="15" fill="rgb(249,74,29)"/><text x="610.00" y="334.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.19%)</title><rect x="607" y="340" width="2" height="15" fill="rgb(252,104,47)"/><text x="610.00" y="350.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (1 samples, 0.19%)</title><rect x="607" y="356" width="2" height="15" fill="rgb(241,108,25)"/><text x="610.00" y="366.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (2 samples, 0.37%)</title><rect x="609" y="276" width="5" height="15" fill="rgb(223,44,29)"/><text x="612.00" y="286.50"></text></g><g><title>PyArray_CastToType (convert_datatype.c) (1 samples, 0.19%)</title><rect x="612" y="292" width="2" height="15" fill="rgb(236,149,46)"/><text x="615.00" y="302.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.19%)</title><rect x="612" y="308" width="2" height="15" fill="rgb(214,148,33)"/><text x="615.00" y="318.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.19%)</title><rect x="612" y="324" width="2" height="15" fill="rgb(216,13,13)"/><text x="615.00" y="334.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.19%)</title><rect x="612" y="340" width="2" height="15" fill="rgb(213,200,8)"/><text x="615.00" y="350.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (1 samples, 0.19%)</title><rect x="612" y="356" width="2" height="15" fill="rgb(251,209,16)"/><text x="615.00" y="366.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (1 samples, 0.19%)</title><rect x="612" y="372" width="2" height="15" fill="rgb(223,64,36)"/><text x="615.00" y="382.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (1 samples, 0.19%)</title><rect x="614" y="292" width="2" height="15" fill="rgb(236,81,32)"/><text x="617.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.19%)</title><rect x="614" y="308" width="2" height="15" fill="rgb(217,99,6)"/><text x="617.00" y="318.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (1 samples, 0.19%)</title><rect x="614" y="324" width="2" height="15" fill="rgb(209,225,47)"/><text x="617.00" y="334.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (1 samples, 0.19%)</title><rect x="614" y="340" width="2" height="15" fill="rgb(242,140,5)"/><text x="617.00" y="350.50"></text></g><g><title>mul_64_64 (npy_extint128.h) (1 samples, 0.19%)</title><rect x="614" y="356" width="2" height="15" fill="rgb(248,144,36)"/><text x="617.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py) (8 samples, 1.48%)</title><rect x="603" y="228" width="17" height="15" fill="rgb(247,163,43)"/><text x="606.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (8 samples, 1.48%)</title><rect x="603" y="244" width="17" height="15" fill="rgb(223,182,30)"/><text x="606.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (8 samples, 1.48%)</title><rect x="603" y="260" width="17" height="15" fill="rgb(241,150,49)"/><text x="606.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.56%)</title><rect x="614" y="276" width="6" height="15" fill="rgb(241,27,46)"/><text x="617.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (2 samples, 0.37%)</title><rect x="616" y="292" width="4" height="15" fill="rgb(213,91,3)"/><text x="619.00" y="302.50"></text></g><g><title>FLOAT_maximum (loops.c.src) (2 samples, 0.37%)</title><rect x="616" y="308" width="4" height="15" fill="rgb(251,199,33)"/><text x="619.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.37%)</title><rect x="640" y="308" width="4" height="15" fill="rgb(250,9,37)"/><text x="643.00" y="318.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.37%)</title><rect x="640" y="324" width="4" height="15" fill="rgb(214,195,13)"/><text x="643.00" y="334.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (2 samples, 0.37%)</title><rect x="640" y="340" width="4" height="15" fill="rgb(253,48,16)"/><text x="643.00" y="350.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (2 samples, 0.37%)</title><rect x="640" y="356" width="4" height="15" fill="rgb(240,183,19)"/><text x="643.00" y="366.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (2 samples, 0.37%)</title><rect x="640" y="372" width="4" height="15" fill="rgb(209,212,33)"/><text x="643.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.19%)</title><rect x="644" y="356" width="3" height="15" fill="rgb(246,81,48)"/><text x="647.00" y="366.50"></text></g><g><title>npyiter_apply_forced_iteration_order (nditer_constr.c) (1 samples, 0.19%)</title><rect x="644" y="372" width="3" height="15" fill="rgb(248,115,22)"/><text x="647.00" y="382.50"></text></g><g><title>PyArray_InitializeReduceResult (reduction.c) (1 samples, 0.19%)</title><rect x="647" y="356" width="2" height="15" fill="rgb(213,14,54)"/><text x="650.00" y="366.50"></text></g><g><title>array_max (methods.c) (8 samples, 1.48%)</title><rect x="633" y="244" width="18" height="15" fill="rgb(227,182,6)"/><text x="636.00" y="254.50"></text></g><g><title>forward_ndarray_method (methods.c) (8 samples, 1.48%)</title><rect x="633" y="260" width="18" height="15" fill="rgb(244,155,44)"/><text x="636.00" y="270.50"></text></g><g><title>_amax (numpy/core/_methods.py) (6 samples, 1.11%)</title><rect x="638" y="276" width="13" height="15" fill="rgb(227,51,11)"/><text x="641.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (5 samples, 0.93%)</title><rect x="640" y="292" width="11" height="15" fill="rgb(254,70,15)"/><text x="643.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.56%)</title><rect x="644" y="308" width="7" height="15" fill="rgb(235,122,17)"/><text x="647.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (3 samples, 0.56%)</title><rect x="644" y="324" width="7" height="15" fill="rgb(226,208,16)"/><text x="647.00" y="334.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (3 samples, 0.56%)</title><rect x="644" y="340" width="7" height="15" fill="rgb(214,121,0)"/><text x="647.00" y="350.50"></text></g><g><title>reduce_loop (ufunc_object.c) (1 samples, 0.19%)</title><rect x="649" y="356" width="2" height="15" fill="rgb(242,85,37)"/><text x="652.00" y="366.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (1 samples, 0.19%)</title><rect x="649" y="372" width="2" height="15" fill="rgb(254,90,49)"/><text x="652.00" y="382.50"></text></g><g><title>array_subscript (mapping.c) (1 samples, 0.19%)</title><rect x="651" y="244" width="2" height="15" fill="rgb(241,74,23)"/><text x="654.00" y="254.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.19%)</title><rect x="658" y="308" width="2" height="15" fill="rgb(206,3,28)"/><text x="661.00" y="318.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.19%)</title><rect x="658" y="324" width="2" height="15" fill="rgb(246,118,54)"/><text x="661.00" y="334.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.19%)</title><rect x="658" y="340" width="2" height="15" fill="rgb(219,10,10)"/><text x="661.00" y="350.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.19%)</title><rect x="658" y="356" width="2" height="15" fill="rgb(251,179,22)"/><text x="661.00" y="366.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.19%)</title><rect x="658" y="372" width="2" height="15" fill="rgb(228,43,12)"/><text x="661.00" y="382.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.19%)</title><rect x="658" y="388" width="2" height="15" fill="rgb(250,189,53)"/><text x="661.00" y="398.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (1 samples, 0.19%)</title><rect x="662" y="356" width="2" height="15" fill="rgb(247,32,45)"/><text x="665.00" y="366.50"></text></g><g><title>allocate_reduce_result (reduction.c) (1 samples, 0.19%)</title><rect x="662" y="372" width="2" height="15" fill="rgb(239,39,3)"/><text x="665.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.19%)</title><rect x="662" y="388" width="2" height="15" fill="rgb(233,56,21)"/><text x="665.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.19%)</title><rect x="662" y="404" width="2" height="15" fill="rgb(208,99,29)"/><text x="665.00" y="414.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (1 samples, 0.19%)</title><rect x="664" y="356" width="2" height="15" fill="rgb(227,136,35)"/><text x="667.00" y="366.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.19%)</title><rect x="664" y="372" width="2" height="15" fill="rgb(233,175,4)"/><text x="667.00" y="382.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.19%)</title><rect x="664" y="388" width="2" height="15" fill="rgb(226,6,29)"/><text x="667.00" y="398.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.19%)</title><rect x="664" y="404" width="2" height="15" fill="rgb(246,129,19)"/><text x="667.00" y="414.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (3 samples, 0.56%)</title><rect x="662" y="340" width="6" height="15" fill="rgb(230,149,20)"/><text x="665.00" y="350.50"></text></g><g><title>reduce_loop (ufunc_object.c) (1 samples, 0.19%)</title><rect x="666" y="356" width="2" height="15" fill="rgb(251,167,30)"/><text x="669.00" y="366.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (1 samples, 0.19%)</title><rect x="666" y="372" width="2" height="15" fill="rgb(251,148,18)"/><text x="669.00" y="382.50"></text></g><g><title>array_sum (methods.c) (8 samples, 1.48%)</title><rect x="653" y="244" width="18" height="15" fill="rgb(240,3,21)"/><text x="656.00" y="254.50"></text></g><g><title>forward_ndarray_method (methods.c) (8 samples, 1.48%)</title><rect x="653" y="260" width="18" height="15" fill="rgb(205,78,15)"/><text x="656.00" y="270.50"></text></g><g><title>_sum (numpy/core/_methods.py) (7 samples, 1.30%)</title><rect x="655" y="276" width="16" height="15" fill="rgb(241,65,52)"/><text x="658.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (6 samples, 1.11%)</title><rect x="658" y="292" width="13" height="15" fill="rgb(231,36,48)"/><text x="661.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (5 samples, 0.93%)</title><rect x="660" y="308" width="11" height="15" fill="rgb(231,158,36)"/><text x="663.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (4 samples, 0.74%)</title><rect x="662" y="324" width="9" height="15" fill="rgb(219,220,19)"/><text x="665.00" y="334.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (1 samples, 0.19%)</title><rect x="668" y="340" width="3" height="15" fill="rgb(205,139,3)"/><text x="671.00" y="350.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.19%)</title><rect x="668" y="356" width="3" height="15" fill="rgb(252,205,25)"/><text x="671.00" y="366.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.19%)</title><rect x="668" y="372" width="3" height="15" fill="rgb(226,45,43)"/><text x="671.00" y="382.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.19%)</title><rect x="671" y="260" width="2" height="15" fill="rgb(207,118,52)"/><text x="674.00" y="270.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.19%)</title><rect x="671" y="276" width="2" height="15" fill="rgb(247,206,38)"/><text x="674.00" y="286.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (1 samples, 0.19%)</title><rect x="675" y="276" width="2" height="15" fill="rgb(227,216,20)"/><text x="678.00" y="286.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (1 samples, 0.19%)</title><rect x="675" y="292" width="2" height="15" fill="rgb(252,70,54)"/><text x="678.00" y="302.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (1 samples, 0.19%)</title><rect x="677" y="292" width="2" height="15" fill="rgb(238,191,47)"/><text x="680.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.19%)</title><rect x="677" y="308" width="2" height="15" fill="rgb(243,41,9)"/><text x="680.00" y="318.50"></text></g><g><title>diophantine_simplify (mem_overlap.c) (1 samples, 0.19%)</title><rect x="677" y="324" width="2" height="15" fill="rgb(217,108,52)"/><text x="680.00" y="334.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.19%)</title><rect x="677" y="340" width="2" height="15" fill="rgb(253,150,50)"/><text x="680.00" y="350.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (2 samples, 0.37%)</title><rect x="679" y="292" width="5" height="15" fill="rgb(236,22,35)"/><text x="682.00" y="302.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (1 samples, 0.19%)</title><rect x="684" y="308" width="2" height="15" fill="rgb(208,0,45)"/><text x="687.00" y="318.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (1 samples, 0.19%)</title><rect x="684" y="324" width="2" height="15" fill="rgb(215,207,37)"/><text x="687.00" y="334.50"></text></g><g><title>sse2_binary_scalar2_subtract_FLOAT (simd.inc.src) (1 samples, 0.19%)</title><rect x="684" y="340" width="2" height="15" fill="rgb(206,11,25)"/><text x="687.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.19%)</title><rect x="686" y="308" width="2" height="15" fill="rgb(216,162,22)"/><text x="689.00" y="318.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.19%)</title><rect x="686" y="324" width="2" height="15" fill="rgb(250,153,46)"/><text x="689.00" y="334.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.56%)</title><rect x="684" y="292" width="6" height="15" fill="rgb(232,100,21)"/><text x="687.00" y="302.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (1 samples, 0.19%)</title><rect x="688" y="308" width="2" height="15" fill="rgb(214,23,53)"/><text x="691.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.19%)</title><rect x="688" y="324" width="2" height="15" fill="rgb(247,136,15)"/><text x="691.00" y="334.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (7 samples, 1.30%)</title><rect x="677" y="276" width="16" height="15" fill="rgb(224,96,23)"/><text x="680.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (1 samples, 0.19%)</title><rect x="690" y="292" width="3" height="15" fill="rgb(227,93,22)"/><text x="693.00" y="302.50"></text></g><g><title>FLOAT_exp (loops.c.src) (1 samples, 0.19%)</title><rect x="690" y="308" width="3" height="15" fill="rgb(215,96,16)"/><text x="693.00" y="318.50"></text></g><g><title>expf (libm-2.29.so) (1 samples, 0.19%)</title><rect x="690" y="324" width="3" height="15" fill="rgb(253,164,35)"/><text x="693.00" y="334.50"></text></g><g><title>0x7f5157f8fe00 (libm-2.29.so) (1 samples, 0.19%)</title><rect x="690" y="340" width="3" height="15" fill="rgb(232,224,46)"/><text x="693.00" y="350.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (232 samples, 43.04%)</title><rect x="187" y="164" width="508" height="15" fill="rgb(205,114,21)"/><text x="190.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (223 samples, 41.37%)</title><rect x="207" y="180" width="488" height="15" fill="rgb(239,135,28)"/><text x="210.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (164 samples, 30.43%)</title><rect x="336" y="196" width="359" height="15" fill="rgb(212,136,33)"/><text x="339.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (113 samples, 20.96%)</title><rect x="447" y="212" width="248" height="15" fill="rgb(207,223,33)"/><text x="450.00" y="222.50">run (mlprodict/onnxrt/ops_cpu/_op..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py) (34 samples, 6.31%)</title><rect x="620" y="228" width="75" height="15" fill="rgb(248,78,0)"/><text x="623.00" y="238.50">_run (ml..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (11 samples, 2.04%)</title><rect x="671" y="244" width="24" height="15" fill="rgb(251,72,20)"/><text x="674.00" y="254.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (10 samples, 1.86%)</title><rect x="673" y="260" width="22" height="15" fill="rgb(231,162,22)"/><text x="676.00" y="270.50">P..</text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (1 samples, 0.19%)</title><rect x="693" y="276" width="2" height="15" fill="rgb(253,126,11)"/><text x="696.00" y="286.50"></text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1_50_12_float_.py) (239 samples, 44.34%)</title><rect x="174" y="100" width="523" height="15" fill="rgb(213,95,43)"/><text x="177.00" y="110.50">profile (bench_MLPClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (237 samples, 43.97%)</title><rect x="178" y="116" width="519" height="15" fill="rgb(213,34,17)"/><text x="181.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (237 samples, 43.97%)</title><rect x="178" y="132" width="519" height="15" fill="rgb(211,220,5)"/><text x="181.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (236 samples, 43.78%)</title><rect x="180" y="148" width="517" height="15" fill="rgb(212,224,34)"/><text x="183.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.19%)</title><rect x="695" y="164" width="2" height="15" fill="rgb(242,30,13)"/><text x="698.00" y="174.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.19%)</title><rect x="695" y="180" width="2" height="15" fill="rgb(206,220,28)"/><text x="698.00" y="190.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.19%)</title><rect x="695" y="196" width="2" height="15" fill="rgb(227,101,38)"/><text x="698.00" y="206.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.19%)</title><rect x="695" y="212" width="2" height="15" fill="rgb(209,224,44)"/><text x="698.00" y="222.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="697" y="404" width="2" height="15" fill="rgb(254,171,53)"/><text x="700.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="697" y="420" width="2" height="15" fill="rgb(213,201,20)"/><text x="700.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="697" y="436" width="2" height="15" fill="rgb(218,5,14)"/><text x="700.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.19%)</title><rect x="697" y="452" width="2" height="15" fill="rgb(210,29,42)"/><text x="700.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="697" y="468" width="2" height="15" fill="rgb(239,72,49)"/><text x="700.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.19%)</title><rect x="697" y="484" width="2" height="15" fill="rgb(206,211,21)"/><text x="700.00" y="494.50"></text></g><g><title>_get_doc_template (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.19%)</title><rect x="697" y="500" width="2" height="15" fill="rgb(240,222,24)"/><text x="700.00" y="510.50"></text></g><g><title>__new__ (jinja2/environment.py) (1 samples, 0.19%)</title><rect x="697" y="516" width="2" height="15" fill="rgb(225,163,34)"/><text x="700.00" y="526.50"></text></g><g><title>from_string (jinja2/environment.py) (1 samples, 0.19%)</title><rect x="697" y="532" width="2" height="15" fill="rgb(252,174,18)"/><text x="700.00" y="542.50"></text></g><g><title>compile (jinja2/environment.py) (1 samples, 0.19%)</title><rect x="697" y="548" width="2" height="15" fill="rgb(241,172,54)"/><text x="700.00" y="558.50"></text></g><g><title>_parse (jinja2/environment.py) (1 samples, 0.19%)</title><rect x="697" y="564" width="2" height="15" fill="rgb(239,41,24)"/><text x="700.00" y="574.50"></text></g><g><title>parse (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="580" width="2" height="15" fill="rgb(248,60,50)"/><text x="700.00" y="590.50"></text></g><g><title>subparse (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="596" width="2" height="15" fill="rgb(249,52,46)"/><text x="700.00" y="606.50"></text></g><g><title>parse_statement (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="612" width="2" height="15" fill="rgb(227,170,35)"/><text x="700.00" y="622.50"></text></g><g><title>parse_for (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="628" width="2" height="15" fill="rgb(232,115,48)"/><text x="700.00" y="638.50"></text></g><g><title>parse_statements (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="644" width="2" height="15" fill="rgb(245,97,11)"/><text x="700.00" y="654.50"></text></g><g><title>subparse (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="660" width="2" height="15" fill="rgb(221,83,8)"/><text x="700.00" y="670.50"></text></g><g><title>parse_statement (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="676" width="2" height="15" fill="rgb(208,136,27)"/><text x="700.00" y="686.50"></text></g><g><title>parse_if (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="692" width="2" height="15" fill="rgb(241,213,51)"/><text x="700.00" y="702.50"></text></g><g><title>parse_statements (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="708" width="2" height="15" fill="rgb(223,133,36)"/><text x="700.00" y="718.50"></text></g><g><title>subparse (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="724" width="2" height="15" fill="rgb(207,141,50)"/><text x="700.00" y="734.50"></text></g><g><title>parse_statement (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="740" width="2" height="15" fill="rgb(240,56,6)"/><text x="700.00" y="750.50"></text></g><g><title>parse_for (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="756" width="2" height="15" fill="rgb(213,111,41)"/><text x="700.00" y="766.50"></text></g><g><title>parse_statements (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="772" width="2" height="15" fill="rgb(213,45,28)"/><text x="700.00" y="782.50"></text></g><g><title>subparse (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="788" width="2" height="15" fill="rgb(219,53,9)"/><text x="700.00" y="798.50"></text></g><g><title>parse_tuple (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="804" width="2" height="15" fill="rgb(244,224,7)"/><text x="700.00" y="814.50"></text></g><g><title>parse_expression (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="820" width="2" height="15" fill="rgb(234,62,29)"/><text x="700.00" y="830.50"></text></g><g><title>parse_condexpr (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="836" width="2" height="15" fill="rgb(211,198,12)"/><text x="700.00" y="846.50"></text></g><g><title>parse_or (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="852" width="2" height="15" fill="rgb(247,162,49)"/><text x="700.00" y="862.50"></text></g><g><title>parse_and (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="868" width="2" height="15" fill="rgb(238,111,18)"/><text x="700.00" y="878.50"></text></g><g><title>parse_not (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="884" width="2" height="15" fill="rgb(218,132,42)"/><text x="700.00" y="894.50"></text></g><g><title>parse_compare (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="900" width="2" height="15" fill="rgb(238,63,37)"/><text x="700.00" y="910.50"></text></g><g><title>parse_math1 (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="916" width="2" height="15" fill="rgb(223,167,30)"/><text x="700.00" y="926.50"></text></g><g><title>parse_concat (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="932" width="2" height="15" fill="rgb(252,190,25)"/><text x="700.00" y="942.50"></text></g><g><title>parse_math2 (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="948" width="2" height="15" fill="rgb(233,145,16)"/><text x="700.00" y="958.50"></text></g><g><title>parse_pow (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="964" width="2" height="15" fill="rgb(232,142,15)"/><text x="700.00" y="974.50"></text></g><g><title>parse_unary (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="980" width="2" height="15" fill="rgb(220,110,14)"/><text x="700.00" y="990.50"></text></g><g><title>parse_postfix (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="996" width="2" height="15" fill="rgb(233,157,6)"/><text x="700.00" y="1006.50"></text></g><g><title>parse_call (jinja2/parser.py) (1 samples, 0.19%)</title><rect x="697" y="1012" width="2" height="15" fill="rgb(234,173,27)"/><text x="700.00" y="1022.50"></text></g><g><title>expect (jinja2/lexer.py) (1 samples, 0.19%)</title><rect x="697" y="1028" width="2" height="15" fill="rgb(242,217,20)"/><text x="700.00" y="1038.50"></text></g><g><title>__next__ (jinja2/lexer.py) (1 samples, 0.19%)</title><rect x="697" y="1044" width="2" height="15" fill="rgb(249,103,29)"/><text x="700.00" y="1054.50"></text></g><g><title>wrap (jinja2/lexer.py) (1 samples, 0.19%)</title><rect x="697" y="1060" width="2" height="15" fill="rgb(208,7,52)"/><text x="700.00" y="1070.50"></text></g><g><title>profile_pyrt (bench_MLPClassifier_default_b_cl_1_50_12_float_.py) (241 samples, 44.71%)</title><rect x="174" y="68" width="527" height="15" fill="rgb(207,40,39)"/><text x="177.00" y="78.50">profile_pyrt (bench_MLPClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1_50_12_float_.py) (241 samples, 44.71%)</title><rect x="174" y="84" width="527" height="15" fill="rgb(220,109,3)"/><text x="177.00" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.37%)</title><rect x="697" y="100" width="4" height="15" fill="rgb(228,129,27)"/><text x="700.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.37%)</title><rect x="697" y="116" width="4" height="15" fill="rgb(213,91,34)"/><text x="700.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.37%)</title><rect x="697" y="132" width="4" height="15" fill="rgb(226,65,38)"/><text x="700.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.37%)</title><rect x="697" y="148" width="4" height="15" fill="rgb(234,150,8)"/><text x="700.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.37%)</title><rect x="697" y="164" width="4" height="15" fill="rgb(230,7,15)"/><text x="700.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (2 samples, 0.37%)</title><rect x="697" y="180" width="4" height="15" fill="rgb(234,39,0)"/><text x="700.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (2 samples, 0.37%)</title><rect x="697" y="196" width="4" height="15" fill="rgb(253,193,24)"/><text x="700.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="697" y="212" width="4" height="15" fill="rgb(247,110,24)"/><text x="700.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="697" y="228" width="4" height="15" fill="rgb(221,12,5)"/><text x="700.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="697" y="244" width="4" height="15" fill="rgb(226,192,7)"/><text x="700.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="697" y="260" width="4" height="15" fill="rgb(243,213,2)"/><text x="700.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="697" y="276" width="4" height="15" fill="rgb(223,209,32)"/><text x="700.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (2 samples, 0.37%)</title><rect x="697" y="292" width="4" height="15" fill="rgb(245,17,16)"/><text x="700.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="697" y="308" width="4" height="15" fill="rgb(251,130,30)"/><text x="700.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="697" y="324" width="4" height="15" fill="rgb(210,115,22)"/><text x="700.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="697" y="340" width="4" height="15" fill="rgb(221,217,51)"/><text x="700.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="697" y="356" width="4" height="15" fill="rgb(209,81,32)"/><text x="700.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="697" y="372" width="4" height="15" fill="rgb(229,90,27)"/><text x="700.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (2 samples, 0.37%)</title><rect x="697" y="388" width="4" height="15" fill="rgb(216,20,3)"/><text x="700.00" y="398.50"></text></g><g><title>get_rst_doc (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.19%)</title><rect x="699" y="404" width="2" height="15" fill="rgb(252,14,4)"/><text x="702.00" y="414.50"></text></g><g><title>render (jinja2/asyncsupport.py) (1 samples, 0.19%)</title><rect x="699" y="420" width="2" height="15" fill="rgb(214,174,16)"/><text x="702.00" y="430.50"></text></g><g><title>render (jinja2/environment.py) (1 samples, 0.19%)</title><rect x="699" y="436" width="2" height="15" fill="rgb(215,104,41)"/><text x="702.00" y="446.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.19%)</title><rect x="699" y="452" width="2" height="15" fill="rgb(246,222,32)"/><text x="702.00" y="462.50"></text></g><g><title>root (&lt;template&gt;) (1 samples, 0.19%)</title><rect x="699" y="468" width="2" height="15" fill="rgb(219,13,15)"/><text x="702.00" y="478.50"></text></g><g><title>call (jinja2/runtime.py) (1 samples, 0.19%)</title><rect x="699" y="484" width="2" height="15" fill="rgb(247,172,4)"/><text x="702.00" y="494.50"></text></g><g><title>change_style (mlprodict/tools/code_helper.py) (1 samples, 0.19%)</title><rect x="699" y="500" width="2" height="15" fill="rgb(210,2,32)"/><text x="702.00" y="510.50"></text></g><g><title>sub (re.py) (1 samples, 0.19%)</title><rect x="699" y="516" width="2" height="15" fill="rgb(221,10,14)"/><text x="702.00" y="526.50"></text></g><g><title>_sre_SRE_Pattern_sub (python3.7) (1 samples, 0.19%)</title><rect x="699" y="532" width="2" height="15" fill="rgb(205,120,29)"/><text x="702.00" y="542.50"></text></g><g><title>_subx (re.py) (1 samples, 0.19%)</title><rect x="699" y="548" width="2" height="15" fill="rgb(218,188,50)"/><text x="702.00" y="558.50"></text></g><g><title>__new__ (numpy/core/getlimits.py) (5 samples, 0.93%)</title><rect x="747" y="212" width="11" height="15" fill="rgb(254,121,45)"/><text x="750.00" y="222.50"></text></g><g><title>arraydescr_new (descriptor.c) (2 samples, 0.37%)</title><rect x="754" y="228" width="4" height="15" fill="rgb(219,167,43)"/><text x="757.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.19%)</title><rect x="758" y="212" width="2" height="15" fill="rgb(231,111,33)"/><text x="761.00" y="222.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;) (1 samples, 0.19%)</title><rect x="758" y="228" width="2" height="15" fill="rgb(240,1,49)"/><text x="761.00" y="238.50"></text></g><g><title>clip (numpy/core/fromnumeric.py) (1 samples, 0.19%)</title><rect x="758" y="244" width="2" height="15" fill="rgb(239,163,50)"/><text x="761.00" y="254.50"></text></g><g><title>array_clip (methods.c) (1 samples, 0.19%)</title><rect x="758" y="260" width="2" height="15" fill="rgb(227,200,15)"/><text x="761.00" y="270.50"></text></g><g><title>forward_ndarray_method (methods.c) (1 samples, 0.19%)</title><rect x="758" y="276" width="2" height="15" fill="rgb(214,216,31)"/><text x="761.00" y="286.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (1 samples, 0.19%)</title><rect x="758" y="292" width="2" height="15" fill="rgb(218,96,36)"/><text x="761.00" y="302.50"></text></g><g><title>_clip (numpy/core/_methods.py) (1 samples, 0.19%)</title><rect x="758" y="308" width="2" height="15" fill="rgb(246,58,19)"/><text x="761.00" y="318.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (1 samples, 0.19%)</title><rect x="758" y="324" width="2" height="15" fill="rgb(236,154,9)"/><text x="761.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.19%)</title><rect x="780" y="356" width="2" height="15" fill="rgb(236,167,14)"/><text x="783.00" y="366.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.19%)</title><rect x="780" y="372" width="2" height="15" fill="rgb(229,172,32)"/><text x="783.00" y="382.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.19%)</title><rect x="780" y="388" width="2" height="15" fill="rgb(225,196,24)"/><text x="783.00" y="398.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.19%)</title><rect x="780" y="404" width="2" height="15" fill="rgb(229,106,40)"/><text x="783.00" y="414.50"></text></g><g><title>_is_basic_python_type (get_attr_string.h) (1 samples, 0.19%)</title><rect x="780" y="420" width="2" height="15" fill="rgb(234,210,9)"/><text x="783.00" y="430.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.37%)</title><rect x="782" y="372" width="5" height="15" fill="rgb(250,82,18)"/><text x="785.00" y="382.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (2 samples, 0.37%)</title><rect x="782" y="388" width="5" height="15" fill="rgb(216,158,9)"/><text x="785.00" y="398.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (1 samples, 0.19%)</title><rect x="784" y="404" width="3" height="15" fill="rgb(225,203,31)"/><text x="787.00" y="414.50"></text></g><g><title>can_cast_scalar_to (convert_datatype.c) (1 samples, 0.19%)</title><rect x="784" y="420" width="3" height="15" fill="rgb(231,207,32)"/><text x="787.00" y="430.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (1 samples, 0.19%)</title><rect x="789" y="420" width="2" height="15" fill="rgb(228,18,16)"/><text x="792.00" y="430.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.56%)</title><rect x="787" y="372" width="6" height="15" fill="rgb(215,211,25)"/><text x="790.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.56%)</title><rect x="787" y="388" width="6" height="15" fill="rgb(243,193,47)"/><text x="790.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.56%)</title><rect x="787" y="404" width="6" height="15" fill="rgb(232,175,41)"/><text x="790.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.19%)</title><rect x="791" y="420" width="2" height="15" fill="rgb(230,162,15)"/><text x="794.00" y="430.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (6 samples, 1.11%)</title><rect x="782" y="356" width="13" height="15" fill="rgb(244,147,53)"/><text x="785.00" y="366.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.19%)</title><rect x="793" y="372" width="2" height="15" fill="rgb(247,100,1)"/><text x="796.00" y="382.50"></text></g><g><title>parse_ufunc_keywords (ufunc_object.c) (1 samples, 0.19%)</title><rect x="793" y="388" width="2" height="15" fill="rgb(228,69,34)"/><text x="796.00" y="398.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (9 samples, 1.67%)</title><rect x="778" y="324" width="20" height="15" fill="rgb(225,24,45)"/><text x="781.00" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (8 samples, 1.48%)</title><rect x="780" y="340" width="18" height="15" fill="rgb(220,126,16)"/><text x="783.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.19%)</title><rect x="795" y="356" width="3" height="15" fill="rgb(229,153,44)"/><text x="798.00" y="366.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.19%)</title><rect x="795" y="372" width="3" height="15" fill="rgb(234,14,21)"/><text x="798.00" y="382.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.19%)</title><rect x="795" y="388" width="3" height="15" fill="rgb(239,143,17)"/><text x="798.00" y="398.50"></text></g><g><title>_clip_dep_is_byte_swapped (numpy/core/_methods.py) (2 samples, 0.37%)</title><rect x="798" y="324" width="4" height="15" fill="rgb(232,147,12)"/><text x="801.00" y="334.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="804" y="340" width="9" height="15" fill="rgb(212,32,53)"/><text x="807.00" y="350.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (1 samples, 0.19%)</title><rect x="824" y="420" width="2" height="15" fill="rgb(220,93,33)"/><text x="827.00" y="430.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.19%)</title><rect x="824" y="436" width="2" height="15" fill="rgb(215,145,2)"/><text x="827.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.19%)</title><rect x="824" y="452" width="2" height="15" fill="rgb(244,169,42)"/><text x="827.00" y="462.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;) (7 samples, 1.30%)</title><rect x="813" y="340" width="15" height="15" fill="rgb(249,219,43)"/><text x="816.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (7 samples, 1.30%)</title><rect x="813" y="356" width="15" height="15" fill="rgb(225,189,17)"/><text x="816.00" y="366.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py) (7 samples, 1.30%)</title><rect x="813" y="372" width="15" height="15" fill="rgb(232,16,4)"/><text x="816.00" y="382.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (4 samples, 0.74%)</title><rect x="820" y="388" width="8" height="15" fill="rgb(236,2,51)"/><text x="823.00" y="398.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 0.74%)</title><rect x="820" y="404" width="8" height="15" fill="rgb(231,58,39)"/><text x="823.00" y="414.50"></text></g><g><title>unicode_dealloc (python3.7) (1 samples, 0.19%)</title><rect x="826" y="420" width="2" height="15" fill="rgb(247,86,44)"/><text x="829.00" y="430.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.19%)</title><rect x="830" y="356" width="3" height="15" fill="rgb(219,162,54)"/><text x="833.00" y="366.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.19%)</title><rect x="830" y="372" width="3" height="15" fill="rgb(212,6,29)"/><text x="833.00" y="382.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.19%)</title><rect x="830" y="388" width="3" height="15" fill="rgb(230,73,46)"/><text x="833.00" y="398.50"></text></g><g><title>PyArray_FromScalar (scalarapi.c) (1 samples, 0.19%)</title><rect x="837" y="404" width="2" height="15" fill="rgb(254,174,8)"/><text x="840.00" y="414.50"></text></g><g><title>memcpy (libc-2.29.so) (1 samples, 0.19%)</title><rect x="837" y="420" width="2" height="15" fill="rgb(243,85,5)"/><text x="840.00" y="430.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (4 samples, 0.74%)</title><rect x="833" y="372" width="8" height="15" fill="rgb(227,136,34)"/><text x="836.00" y="382.50"></text></g><g><title>PyArray_FromAny (ctors.c) (3 samples, 0.56%)</title><rect x="835" y="388" width="6" height="15" fill="rgb(250,101,44)"/><text x="838.00" y="398.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (1 samples, 0.19%)</title><rect x="839" y="404" width="2" height="15" fill="rgb(219,30,36)"/><text x="842.00" y="414.50"></text></g><g><title>PyArray_DescrFromScalar (scalarapi.c) (1 samples, 0.19%)</title><rect x="839" y="420" width="2" height="15" fill="rgb(243,140,39)"/><text x="842.00" y="430.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (1 samples, 0.19%)</title><rect x="839" y="436" width="2" height="15" fill="rgb(221,70,12)"/><text x="842.00" y="446.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.19%)</title><rect x="839" y="452" width="2" height="15" fill="rgb(213,65,12)"/><text x="842.00" y="462.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (1 samples, 0.19%)</title><rect x="844" y="388" width="2" height="15" fill="rgb(215,168,7)"/><text x="847.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (8 samples, 1.48%)</title><rect x="833" y="356" width="17" height="15" fill="rgb(247,142,23)"/><text x="836.00" y="366.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (4 samples, 0.74%)</title><rect x="841" y="372" width="9" height="15" fill="rgb(231,198,36)"/><text x="844.00" y="382.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (2 samples, 0.37%)</title><rect x="846" y="388" width="4" height="15" fill="rgb(245,212,39)"/><text x="849.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.19%)</title><rect x="848" y="404" width="2" height="15" fill="rgb(209,227,6)"/><text x="851.00" y="414.50"></text></g><g><title>relu (sklearn/neural_network/_base.py) (54 samples, 10.02%)</title><rect x="736" y="196" width="119" height="15" fill="rgb(226,54,45)"/><text x="739.00" y="206.50">relu (sklearn/..</text></g><g><title>clip (&lt;__array_function__ internals&gt;) (43 samples, 7.98%)</title><rect x="760" y="212" width="95" height="15" fill="rgb(233,123,14)"/><text x="763.00" y="222.50">clip (&lt;__ar..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (42 samples, 7.79%)</title><rect x="763" y="228" width="92" height="15" fill="rgb(253,41,29)"/><text x="766.00" y="238.50">array_impl..</text></g><g><title>clip (numpy/core/fromnumeric.py) (42 samples, 7.79%)</title><rect x="763" y="244" width="92" height="15" fill="rgb(216,216,20)"/><text x="766.00" y="254.50">clip (nump..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (41 samples, 7.61%)</title><rect x="765" y="260" width="90" height="15" fill="rgb(223,224,54)"/><text x="768.00" y="270.50">_wrapfunc ..</text></g><g><title>array_clip (methods.c) (40 samples, 7.42%)</title><rect x="767" y="276" width="88" height="15" fill="rgb(241,228,24)"/><text x="770.00" y="286.50">array_clip..</text></g><g><title>forward_ndarray_method (methods.c) (40 samples, 7.42%)</title><rect x="767" y="292" width="88" height="15" fill="rgb(235,207,11)"/><text x="770.00" y="302.50">forward_nd..</text></g><g><title>_clip (numpy/core/_methods.py) (40 samples, 7.42%)</title><rect x="767" y="308" width="88" height="15" fill="rgb(210,224,21)"/><text x="770.00" y="318.50">_clip (num..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (24 samples, 4.45%)</title><rect x="802" y="324" width="53" height="15" fill="rgb(244,17,14)"/><text x="805.00" y="334.50">_clip..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (12 samples, 2.23%)</title><rect x="828" y="340" width="27" height="15" fill="rgb(234,100,3)"/><text x="831.00" y="350.50">u..</text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.37%)</title><rect x="850" y="356" width="5" height="15" fill="rgb(254,43,45)"/><text x="853.00" y="366.50"></text></g><g><title>free (libc-2.29.so) (2 samples, 0.37%)</title><rect x="850" y="372" width="5" height="15" fill="rgb(214,10,42)"/><text x="853.00" y="382.50"></text></g><g><title>dgemv_n_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.93%)</title><rect x="859" y="212" width="11" height="15" fill="rgb(234,193,12)"/><text x="862.00" y="222.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src) (2 samples, 0.37%)</title><rect x="879" y="260" width="4" height="15" fill="rgb(240,106,47)"/><text x="882.00" y="270.50"></text></g><g><title>DOUBLE_gemv (matmul.c.src) (2 samples, 0.37%)</title><rect x="879" y="276" width="4" height="15" fill="rgb(249,104,45)"/><text x="882.00" y="286.50"></text></g><g><title>cblas_dgemv (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.37%)</title><rect x="879" y="292" width="4" height="15" fill="rgb(237,192,40)"/><text x="882.00" y="302.50"></text></g><g><title>dscal_k_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.19%)</title><rect x="881" y="308" width="2" height="15" fill="rgb(208,7,29)"/><text x="884.00" y="318.50"></text></g><g><title>0x7f5157e311d1 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="887" y="324" width="3" height="15" fill="rgb(236,147,6)"/><text x="890.00" y="334.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (1 samples, 0.19%)</title><rect x="890" y="324" width="2" height="15" fill="rgb(252,88,23)"/><text x="893.00" y="334.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.19%)</title><rect x="890" y="340" width="2" height="15" fill="rgb(227,229,22)"/><text x="893.00" y="350.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.19%)</title><rect x="890" y="356" width="2" height="15" fill="rgb(222,60,41)"/><text x="893.00" y="366.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (3 samples, 0.56%)</title><rect x="887" y="292" width="7" height="15" fill="rgb(230,87,48)"/><text x="890.00" y="302.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (3 samples, 0.56%)</title><rect x="887" y="308" width="7" height="15" fill="rgb(249,145,53)"/><text x="890.00" y="318.50"></text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src) (1 samples, 0.19%)</title><rect x="892" y="324" width="2" height="15" fill="rgb(223,42,49)"/><text x="895.00" y="334.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (1 samples, 0.19%)</title><rect x="894" y="292" width="2" height="15" fill="rgb(251,74,40)"/><text x="897.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.19%)</title><rect x="894" y="308" width="2" height="15" fill="rgb(223,64,8)"/><text x="897.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.19%)</title><rect x="894" y="324" width="2" height="15" fill="rgb(210,59,25)"/><text x="897.00" y="334.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.19%)</title><rect x="894" y="340" width="2" height="15" fill="rgb(215,30,10)"/><text x="897.00" y="350.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (5 samples, 0.93%)</title><rect x="887" y="276" width="11" height="15" fill="rgb(217,211,4)"/><text x="890.00" y="286.50"></text></g><g><title>npyiter_replace_axisdata (nditer_constr.c) (1 samples, 0.19%)</title><rect x="896" y="292" width="2" height="15" fill="rgb(228,72,19)"/><text x="899.00" y="302.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c) (1 samples, 0.19%)</title><rect x="898" y="276" width="3" height="15" fill="rgb(220,19,15)"/><text x="901.00" y="286.50"></text></g><g><title>npyiter_check_op_axes (nditer_constr.c) (1 samples, 0.19%)</title><rect x="901" y="276" width="2" height="15" fill="rgb(223,60,3)"/><text x="904.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (10 samples, 1.86%)</title><rect x="883" y="260" width="22" height="15" fill="rgb(214,108,27)"/><text x="886.00" y="270.50">N..</text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c) (1 samples, 0.19%)</title><rect x="903" y="276" width="2" height="15" fill="rgb(232,30,33)"/><text x="906.00" y="286.50"></text></g><g><title>NpyIter_GetOperandArray (nditer_api.c) (1 samples, 0.19%)</title><rect x="905" y="260" width="2" height="15" fill="rgb(242,43,17)"/><text x="908.00" y="270.50"></text></g><g><title>NpyIter_RemoveAxis (nditer_api.c) (1 samples, 0.19%)</title><rect x="907" y="260" width="2" height="15" fill="rgb(254,190,21)"/><text x="910.00" y="270.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (3 samples, 0.56%)</title><rect x="909" y="260" width="7" height="15" fill="rgb(205,211,36)"/><text x="912.00" y="270.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (2 samples, 0.37%)</title><rect x="911" y="276" width="5" height="15" fill="rgb(237,35,27)"/><text x="914.00" y="286.50"></text></g><g><title>_get_coredim_sizes (ufunc_object.c) (2 samples, 0.37%)</title><rect x="916" y="260" width="4" height="15" fill="rgb(230,206,48)"/><text x="919.00" y="270.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.19%)</title><rect x="920" y="260" width="2" height="15" fill="rgb(250,138,9)"/><text x="923.00" y="270.50"></text></g><g><title>PyArray_FromArray (ctors.c) (1 samples, 0.19%)</title><rect x="920" y="276" width="2" height="15" fill="rgb(214,33,15)"/><text x="923.00" y="286.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.19%)</title><rect x="922" y="260" width="3" height="15" fill="rgb(215,175,35)"/><text x="925.00" y="270.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (33 samples, 6.12%)</title><rect x="855" y="196" width="72" height="15" fill="rgb(206,158,29)"/><text x="858.00" y="206.50">safe_spa..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (26 samples, 4.82%)</title><rect x="870" y="212" width="57" height="15" fill="rgb(221,11,13)"/><text x="873.00" y="222.50">ufunc_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (26 samples, 4.82%)</title><rect x="870" y="228" width="57" height="15" fill="rgb(241,198,0)"/><text x="873.00" y="238.50">PyUFun..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (25 samples, 4.64%)</title><rect x="872" y="244" width="55" height="15" fill="rgb(251,30,5)"/><text x="875.00" y="254.50">PyUFu..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.19%)</title><rect x="925" y="260" width="2" height="15" fill="rgb(236,56,2)"/><text x="928.00" y="270.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.19%)</title><rect x="925" y="276" width="2" height="15" fill="rgb(238,10,19)"/><text x="928.00" y="286.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.19%)</title><rect x="925" y="292" width="2" height="15" fill="rgb(215,199,19)"/><text x="928.00" y="302.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.19%)</title><rect x="938" y="276" width="2" height="15" fill="rgb(222,12,17)"/><text x="941.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.19%)</title><rect x="938" y="292" width="2" height="15" fill="rgb(250,108,54)"/><text x="941.00" y="302.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.19%)</title><rect x="938" y="308" width="2" height="15" fill="rgb(216,149,18)"/><text x="941.00" y="318.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.19%)</title><rect x="938" y="324" width="2" height="15" fill="rgb(234,136,5)"/><text x="941.00" y="334.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.19%)</title><rect x="938" y="340" width="2" height="15" fill="rgb(226,65,28)"/><text x="941.00" y="350.50"></text></g><g><title>PyArray_Return (scalarapi.c) (1 samples, 0.19%)</title><rect x="942" y="292" width="2" height="15" fill="rgb(224,121,48)"/><text x="945.00" y="302.50"></text></g><g><title>0x7f5157e311d1 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="944" y="308" width="2" height="15" fill="rgb(217,213,44)"/><text x="947.00" y="318.50"></text></g><g><title>arrays_overlap (array_assign.c) (1 samples, 0.19%)</title><rect x="949" y="356" width="2" height="15" fill="rgb(240,123,19)"/><text x="952.00" y="366.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.19%)</title><rect x="949" y="372" width="2" height="15" fill="rgb(207,109,38)"/><text x="952.00" y="382.50"></text></g><g><title>PyArray_InitializeReduceResult (reduction.c) (3 samples, 0.56%)</title><rect x="949" y="324" width="6" height="15" fill="rgb(238,214,41)"/><text x="952.00" y="334.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (3 samples, 0.56%)</title><rect x="949" y="340" width="6" height="15" fill="rgb(248,31,9)"/><text x="952.00" y="350.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.37%)</title><rect x="951" y="356" width="4" height="15" fill="rgb(242,54,2)"/><text x="954.00" y="366.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (1 samples, 0.19%)</title><rect x="953" y="372" width="2" height="15" fill="rgb(220,85,47)"/><text x="956.00" y="382.50"></text></g><g><title>npy_uint_alignment (common.h) (1 samples, 0.19%)</title><rect x="953" y="388" width="2" height="15" fill="rgb(253,169,34)"/><text x="956.00" y="398.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (5 samples, 0.93%)</title><rect x="946" y="308" width="11" height="15" fill="rgb(251,37,17)"/><text x="949.00" y="318.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.19%)</title><rect x="955" y="324" width="2" height="15" fill="rgb(235,209,3)"/><text x="958.00" y="334.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (1 samples, 0.19%)</title><rect x="957" y="308" width="3" height="15" fill="rgb(208,106,17)"/><text x="960.00" y="318.50"></text></g><g><title>0x7f5157032d50 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.19%)</title><rect x="960" y="324" width="2" height="15" fill="rgb(250,41,41)"/><text x="963.00" y="334.50"></text></g><g><title>array_max (methods.c) (14 samples, 2.60%)</title><rect x="936" y="212" width="30" height="15" fill="rgb(228,200,1)"/><text x="939.00" y="222.50">ar..</text></g><g><title>forward_ndarray_method (methods.c) (14 samples, 2.60%)</title><rect x="936" y="228" width="30" height="15" fill="rgb(224,68,13)"/><text x="939.00" y="238.50">fo..</text></g><g><title>_amax (numpy/core/_methods.py) (13 samples, 2.41%)</title><rect x="938" y="244" width="28" height="15" fill="rgb(211,95,29)"/><text x="941.00" y="254.50">_..</text></g><g><title>ufunc_reduce (ufunc_object.c) (13 samples, 2.41%)</title><rect x="938" y="260" width="28" height="15" fill="rgb(250,7,17)"/><text x="941.00" y="270.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (12 samples, 2.23%)</title><rect x="940" y="276" width="26" height="15" fill="rgb(244,29,54)"/><text x="943.00" y="286.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (10 samples, 1.86%)</title><rect x="944" y="292" width="22" height="15" fill="rgb(223,1,27)"/><text x="947.00" y="302.50">P..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (3 samples, 0.56%)</title><rect x="960" y="308" width="6" height="15" fill="rgb(248,55,40)"/><text x="963.00" y="318.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.37%)</title><rect x="962" y="324" width="4" height="15" fill="rgb(206,72,19)"/><text x="965.00" y="334.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.19%)</title><rect x="964" y="340" width="2" height="15" fill="rgb(223,33,13)"/><text x="967.00" y="350.50"></text></g><g><title>array_subscript (mapping.c) (1 samples, 0.19%)</title><rect x="966" y="212" width="2" height="15" fill="rgb(252,193,10)"/><text x="969.00" y="222.50"></text></g><g><title>prepare_index (mapping.c) (1 samples, 0.19%)</title><rect x="966" y="228" width="2" height="15" fill="rgb(216,76,5)"/><text x="969.00" y="238.50"></text></g><g><title>unpack_indices (mapping.c) (1 samples, 0.19%)</title><rect x="966" y="244" width="2" height="15" fill="rgb(251,146,42)"/><text x="969.00" y="254.50"></text></g><g><title>DOUBLE_subtract (loops.c.src) (1 samples, 0.19%)</title><rect x="971" y="292" width="2" height="15" fill="rgb(218,65,21)"/><text x="974.00" y="302.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.19%)</title><rect x="973" y="308" width="2" height="15" fill="rgb(235,59,8)"/><text x="976.00" y="318.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (1 samples, 0.19%)</title><rect x="973" y="324" width="2" height="15" fill="rgb(208,57,34)"/><text x="976.00" y="334.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.37%)</title><rect x="973" y="292" width="4" height="15" fill="rgb(252,214,7)"/><text x="976.00" y="302.50"></text></g><g><title>npyiter_check_global_flags (nditer_constr.c) (1 samples, 0.19%)</title><rect x="975" y="308" width="2" height="15" fill="rgb(230,84,27)"/><text x="978.00" y="318.50"></text></g><g><title>array_subtract (number.c) (5 samples, 0.93%)</title><rect x="968" y="212" width="11" height="15" fill="rgb(254,5,2)"/><text x="971.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.93%)</title><rect x="968" y="228" width="11" height="15" fill="rgb(214,25,52)"/><text x="971.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.93%)</title><rect x="968" y="244" width="11" height="15" fill="rgb(246,73,22)"/><text x="971.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.74%)</title><rect x="971" y="260" width="8" height="15" fill="rgb(251,65,8)"/><text x="974.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (4 samples, 0.74%)</title><rect x="971" y="276" width="8" height="15" fill="rgb(205,8,31)"/><text x="974.00" y="286.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (1 samples, 0.19%)</title><rect x="977" y="292" width="2" height="15" fill="rgb(216,75,7)"/><text x="980.00" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.19%)</title><rect x="977" y="308" width="2" height="15" fill="rgb(223,9,38)"/><text x="980.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.19%)</title><rect x="982" y="276" width="2" height="15" fill="rgb(235,220,35)"/><text x="985.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.19%)</title><rect x="982" y="292" width="2" height="15" fill="rgb(241,174,22)"/><text x="985.00" y="302.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.19%)</title><rect x="982" y="308" width="2" height="15" fill="rgb(249,227,40)"/><text x="985.00" y="318.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.19%)</title><rect x="982" y="324" width="2" height="15" fill="rgb(235,7,23)"/><text x="985.00" y="334.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.19%)</title><rect x="982" y="340" width="2" height="15" fill="rgb(216,210,0)"/><text x="985.00" y="350.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.19%)</title><rect x="984" y="292" width="2" height="15" fill="rgb(234,79,39)"/><text x="987.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.19%)</title><rect x="986" y="324" width="2" height="15" fill="rgb(239,80,43)"/><text x="989.00" y="334.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (1 samples, 0.19%)</title><rect x="988" y="324" width="2" height="15" fill="rgb(244,97,34)"/><text x="991.00" y="334.50"></text></g><g><title>allocate_reduce_result (reduction.c) (1 samples, 0.19%)</title><rect x="988" y="340" width="2" height="15" fill="rgb(217,46,51)"/><text x="991.00" y="350.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.19%)</title><rect x="988" y="356" width="2" height="15" fill="rgb(207,206,11)"/><text x="991.00" y="366.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (3 samples, 0.56%)</title><rect x="986" y="308" width="6" height="15" fill="rgb(223,161,9)"/><text x="989.00" y="318.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (1 samples, 0.19%)</title><rect x="990" y="324" width="2" height="15" fill="rgb(205,197,18)"/><text x="993.00" y="334.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.19%)</title><rect x="990" y="340" width="2" height="15" fill="rgb(238,165,28)"/><text x="993.00" y="350.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.19%)</title><rect x="990" y="356" width="2" height="15" fill="rgb(226,14,40)"/><text x="993.00" y="366.50"></text></g><g><title>npy_uint_alignment (common.h) (1 samples, 0.19%)</title><rect x="990" y="372" width="2" height="15" fill="rgb(242,180,34)"/><text x="993.00" y="382.50"></text></g><g><title>array_sum (methods.c) (7 samples, 1.30%)</title><rect x="979" y="212" width="16" height="15" fill="rgb(243,124,10)"/><text x="982.00" y="222.50"></text></g><g><title>forward_ndarray_method (methods.c) (7 samples, 1.30%)</title><rect x="979" y="228" width="16" height="15" fill="rgb(247,207,44)"/><text x="982.00" y="238.50"></text></g><g><title>_sum (numpy/core/_methods.py) (6 samples, 1.11%)</title><rect x="982" y="244" width="13" height="15" fill="rgb(206,124,3)"/><text x="985.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (6 samples, 1.11%)</title><rect x="982" y="260" width="13" height="15" fill="rgb(211,214,14)"/><text x="985.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (5 samples, 0.93%)</title><rect x="984" y="276" width="11" height="15" fill="rgb(223,37,6)"/><text x="987.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (4 samples, 0.74%)</title><rect x="986" y="292" width="9" height="15" fill="rgb(214,60,48)"/><text x="989.00" y="302.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (1 samples, 0.19%)</title><rect x="992" y="308" width="3" height="15" fill="rgb(223,144,49)"/><text x="995.00" y="318.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.19%)</title><rect x="992" y="324" width="3" height="15" fill="rgb(244,25,23)"/><text x="995.00" y="334.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.19%)</title><rect x="992" y="340" width="3" height="15" fill="rgb(243,193,0)"/><text x="995.00" y="350.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (1 samples, 0.19%)</title><rect x="992" y="356" width="3" height="15" fill="rgb(232,218,19)"/><text x="995.00" y="366.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.19%)</title><rect x="995" y="228" width="2" height="15" fill="rgb(241,58,4)"/><text x="998.00" y="238.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.19%)</title><rect x="995" y="244" width="2" height="15" fill="rgb(234,172,28)"/><text x="998.00" y="254.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (1 samples, 0.19%)</title><rect x="995" y="260" width="2" height="15" fill="rgb(248,205,38)"/><text x="998.00" y="270.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (2 samples, 0.37%)</title><rect x="997" y="292" width="4" height="15" fill="rgb(211,121,49)"/><text x="1000.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.19%)</title><rect x="999" y="308" width="2" height="15" fill="rgb(219,53,23)"/><text x="1002.00" y="318.50"></text></g><g><title>get_array_memory_extents (mem_overlap.c) (1 samples, 0.19%)</title><rect x="999" y="324" width="2" height="15" fill="rgb(217,65,1)"/><text x="1002.00" y="334.50"></text></g><g><title>offset_bounds_from_strides (mem_overlap.c) (1 samples, 0.19%)</title><rect x="999" y="340" width="2" height="15" fill="rgb(205,99,6)"/><text x="1002.00" y="350.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.19%)</title><rect x="1001" y="292" width="2" height="15" fill="rgb(247,29,46)"/><text x="1004.00" y="302.50"></text></g><g><title>iterator_loop (ufunc_object.c) (4 samples, 0.74%)</title><rect x="997" y="260" width="9" height="15" fill="rgb(215,109,10)"/><text x="1000.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (4 samples, 0.74%)</title><rect x="997" y="276" width="9" height="15" fill="rgb(221,17,30)"/><text x="1000.00" y="286.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.19%)</title><rect x="1003" y="292" width="3" height="15" fill="rgb(249,146,53)"/><text x="1006.00" y="302.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (1 samples, 0.19%)</title><rect x="1003" y="308" width="3" height="15" fill="rgb(232,223,4)"/><text x="1006.00" y="318.50"></text></g><g><title>PyArray_AdaptFlexibleDType (convert_datatype.c) (1 samples, 0.19%)</title><rect x="1003" y="324" width="3" height="15" fill="rgb(222,104,17)"/><text x="1006.00" y="334.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (5 samples, 0.93%)</title><rect x="997" y="244" width="11" height="15" fill="rgb(240,22,10)"/><text x="1000.00" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (1 samples, 0.19%)</title><rect x="1006" y="260" width="2" height="15" fill="rgb(229,192,53)"/><text x="1009.00" y="270.50"></text></g><g><title>PyUFunc_d_d (loops.c.src) (1 samples, 0.19%)</title><rect x="1006" y="276" width="2" height="15" fill="rgb(233,106,17)"/><text x="1009.00" y="286.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py) (38 samples, 7.05%)</title><rect x="927" y="196" width="83" height="15" fill="rgb(233,1,50)"/><text x="930.00" y="206.50">softmax (..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (7 samples, 1.30%)</title><rect x="995" y="212" width="15" height="15" fill="rgb(208,17,39)"/><text x="998.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (6 samples, 1.11%)</title><rect x="997" y="228" width="13" height="15" fill="rgb(212,146,7)"/><text x="1000.00" y="238.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (1 samples, 0.19%)</title><rect x="1008" y="244" width="2" height="15" fill="rgb(236,66,1)"/><text x="1011.00" y="254.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (1 samples, 0.19%)</title><rect x="1008" y="260" width="2" height="15" fill="rgb(253,215,40)"/><text x="1011.00" y="270.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (1 samples, 0.19%)</title><rect x="1008" y="276" width="2" height="15" fill="rgb(221,36,2)"/><text x="1011.00" y="286.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.19%)</title><rect x="1008" y="292" width="2" height="15" fill="rgb(209,73,28)"/><text x="1011.00" y="302.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (1 samples, 0.19%)</title><rect x="1008" y="308" width="2" height="15" fill="rgb(238,190,15)"/><text x="1011.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.19%)</title><rect x="1012" y="212" width="2" height="15" fill="rgb(210,162,46)"/><text x="1015.00" y="222.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.19%)</title><rect x="1012" y="228" width="2" height="15" fill="rgb(243,65,39)"/><text x="1015.00" y="238.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (1 samples, 0.19%)</title><rect x="1012" y="244" width="2" height="15" fill="rgb(221,65,36)"/><text x="1015.00" y="254.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.19%)</title><rect x="1019" y="276" width="2" height="15" fill="rgb(235,20,28)"/><text x="1022.00" y="286.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.19%)</title><rect x="1019" y="292" width="2" height="15" fill="rgb(240,197,12)"/><text x="1022.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.56%)</title><rect x="1017" y="260" width="6" height="15" fill="rgb(235,142,1)"/><text x="1020.00" y="270.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.19%)</title><rect x="1021" y="276" width="2" height="15" fill="rgb(212,207,27)"/><text x="1024.00" y="286.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py) (138 samples, 25.60%)</title><rect x="723" y="180" width="302" height="15" fill="rgb(212,103,27)"/><text x="726.00" y="190.50">_forward_pass (sklearn/neural_network/_m..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (7 samples, 1.30%)</title><rect x="1010" y="196" width="15" height="15" fill="rgb(234,135,35)"/><text x="1013.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.93%)</title><rect x="1014" y="212" width="11" height="15" fill="rgb(246,155,27)"/><text x="1017.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (5 samples, 0.93%)</title><rect x="1014" y="228" width="11" height="15" fill="rgb(240,76,39)"/><text x="1017.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (4 samples, 0.74%)</title><rect x="1017" y="244" width="8" height="15" fill="rgb(205,0,8)"/><text x="1020.00" y="254.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (1 samples, 0.19%)</title><rect x="1023" y="260" width="2" height="15" fill="rgb(239,166,11)"/><text x="1026.00" y="270.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (1 samples, 0.19%)</title><rect x="1023" y="276" width="2" height="15" fill="rgb(205,202,31)"/><text x="1026.00" y="286.50"></text></g><g><title>array_empty (multiarraymodule.c) (2 samples, 0.37%)</title><rect x="1025" y="180" width="5" height="15" fill="rgb(214,219,17)"/><text x="1028.00" y="190.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.19%)</title><rect x="1027" y="196" width="3" height="15" fill="rgb(232,68,5)"/><text x="1030.00" y="206.50"></text></g><g><title>PyArray_Empty (ctors.c) (1 samples, 0.19%)</title><rect x="1027" y="212" width="3" height="15" fill="rgb(208,199,16)"/><text x="1030.00" y="222.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.19%)</title><rect x="1027" y="228" width="3" height="15" fill="rgb(206,187,15)"/><text x="1030.00" y="238.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.19%)</title><rect x="1027" y="244" width="3" height="15" fill="rgb(241,22,12)"/><text x="1030.00" y="254.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (1 samples, 0.19%)</title><rect x="1027" y="260" width="3" height="15" fill="rgb(253,190,4)"/><text x="1030.00" y="270.50"></text></g><g><title>__enter__ (warnings.py) (5 samples, 0.93%)</title><rect x="1065" y="196" width="11" height="15" fill="rgb(229,28,2)"/><text x="1068.00" y="206.50"></text></g><g><title>__exit__ (warnings.py) (1 samples, 0.19%)</title><rect x="1076" y="196" width="2" height="15" fill="rgb(250,36,32)"/><text x="1079.00" y="206.50"></text></g><g><title>__init__ (warnings.py) (1 samples, 0.19%)</title><rect x="1078" y="196" width="2" height="15" fill="rgb(215,22,7)"/><text x="1081.00" y="206.50"></text></g><g><title>0x7f5157e31186 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="1078" y="212" width="2" height="15" fill="rgb(230,126,48)"/><text x="1081.00" y="222.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="1080" y="212" width="9" height="15" fill="rgb(207,178,48)"/><text x="1083.00" y="222.50"></text></g><g><title>0x7f5157e26e7a (libc-2.29.so) (1 samples, 0.19%)</title><rect x="1087" y="228" width="2" height="15" fill="rgb(230,62,36)"/><text x="1090.00" y="238.50"></text></g><g><title>get_config (sklearn/_config.py) (1 samples, 0.19%)</title><rect x="1089" y="212" width="2" height="15" fill="rgb(254,13,43)"/><text x="1092.00" y="222.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (6 samples, 1.11%)</title><rect x="1080" y="196" width="13" height="15" fill="rgb(242,228,43)"/><text x="1083.00" y="206.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.19%)</title><rect x="1091" y="212" width="2" height="15" fill="rgb(231,17,46)"/><text x="1094.00" y="222.50"></text></g><g><title>_ensure_no_complex_data (sklearn/utils/validation.py) (1 samples, 0.19%)</title><rect x="1093" y="196" width="2" height="15" fill="rgb(235,182,15)"/><text x="1096.00" y="206.50"></text></g><g><title>0x7f5157eee134 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="1093" y="212" width="2" height="15" fill="rgb(215,227,41)"/><text x="1096.00" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (9 samples, 1.67%)</title><rect x="1095" y="196" width="20" height="15" fill="rgb(212,28,16)"/><text x="1098.00" y="206.50"></text></g><g><title>__instancecheck__ (abc.py) (4 samples, 0.74%)</title><rect x="1106" y="212" width="9" height="15" fill="rgb(251,135,32)"/><text x="1109.00" y="222.50"></text></g><g><title>__subclasscheck__ (abc.py) (1 samples, 0.19%)</title><rect x="1113" y="228" width="2" height="15" fill="rgb(209,201,24)"/><text x="1116.00" y="238.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (2 samples, 0.37%)</title><rect x="1115" y="196" width="4" height="15" fill="rgb(208,216,53)"/><text x="1118.00" y="206.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py) (4 samples, 0.74%)</title><rect x="1119" y="196" width="9" height="15" fill="rgb(231,46,33)"/><text x="1122.00" y="206.50"></text></g><g><title>issubclass_ (numpy/core/numerictypes.py) (2 samples, 0.37%)</title><rect x="1124" y="212" width="4" height="15" fill="rgb(210,0,8)"/><text x="1127.00" y="222.50"></text></g><g><title>0x7f5157e31124 (libc-2.29.so) (1 samples, 0.19%)</title><rect x="1126" y="228" width="2" height="15" fill="rgb(249,134,9)"/><text x="1129.00" y="238.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py) (193 samples, 35.81%)</title><rect x="714" y="164" width="423" height="15" fill="rgb(242,165,34)"/><text x="717.00" y="174.50">_predict (sklearn/neural_network/_multilayer_perceptron.p..</text></g><g><title>check_array (sklearn/utils/validation.py) (49 samples, 9.09%)</title><rect x="1030" y="180" width="107" height="15" fill="rgb(243,215,4)"/><text x="1033.00" y="190.50">check_array (..</text></g><g><title>simplefilter (warnings.py) (4 samples, 0.74%)</title><rect x="1128" y="196" width="9" height="15" fill="rgb(208,131,0)"/><text x="1131.00" y="206.50"></text></g><g><title>_add_filter (warnings.py) (3 samples, 0.56%)</title><rect x="1130" y="212" width="7" height="15" fill="rgb(205,63,38)"/><text x="1133.00" y="222.50"></text></g><g><title>unicode_endswith (python3.7) (5 samples, 0.93%)</title><rect x="1165" y="196" width="11" height="15" fill="rgb(251,69,3)"/><text x="1168.00" y="206.50"></text></g><g><title>profile_skl (bench_MLPClassifier_default_b_cl_1_50_12_float_.py) (220 samples, 40.82%)</title><rect x="701" y="68" width="482" height="15" fill="rgb(226,166,25)"/><text x="704.00" y="78.50">profile_skl (bench_MLPClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1_50_12_float_.py) (220 samples, 40.82%)</title><rect x="701" y="84" width="482" height="15" fill="rgb(243,57,53)"/><text x="704.00" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1_50_12_float_.py) (220 samples, 40.82%)</title><rect x="701" y="100" width="482" height="15" fill="rgb(212,221,21)"/><text x="704.00" y="110.50">profile (bench_MLPClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (220 samples, 40.82%)</title><rect x="701" y="116" width="482" height="15" fill="rgb(232,181,6)"/><text x="704.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (218 samples, 40.45%)</title><rect x="706" y="132" width="477" height="15" fill="rgb(229,29,0)"/><text x="709.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py) (217 samples, 40.26%)</title><rect x="708" y="148" width="475" height="15" fill="rgb(250,60,45)"/><text x="711.00" y="158.50">predict_proba (sklearn/neural_network/_multilayer_perceptron.py)</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (21 samples, 3.90%)</title><rect x="1137" y="164" width="46" height="15" fill="rgb(220,204,12)"/><text x="1140.00" y="174.50">chec..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (18 samples, 3.34%)</title><rect x="1144" y="180" width="39" height="15" fill="rgb(236,191,36)"/><text x="1147.00" y="190.50">&lt;li..</text></g><g><title>unicode_startswith (python3.7) (3 samples, 0.56%)</title><rect x="1176" y="196" width="7" height="15" fill="rgb(243,129,35)"/><text x="1179.00" y="206.50"></text></g><g><title>_get_dataset (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.19%)</title><rect x="1183" y="116" width="2" height="15" fill="rgb(210,225,16)"/><text x="1186.00" y="126.50"></text></g><g><title>_modify_dimension (mlprodict/onnxrt/validate/validate_problems.py) (1 samples, 0.19%)</title><rect x="1183" y="132" width="2" height="15" fill="rgb(245,162,37)"/><text x="1186.00" y="142.50"></text></g><g><title>var (&lt;__array_function__ internals&gt;) (1 samples, 0.19%)</title><rect x="1183" y="148" width="2" height="15" fill="rgb(244,49,6)"/><text x="1186.00" y="158.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.19%)</title><rect x="1183" y="164" width="2" height="15" fill="rgb(223,9,32)"/><text x="1186.00" y="174.50"></text></g><g><title>var (numpy/core/fromnumeric.py) (1 samples, 0.19%)</title><rect x="1183" y="180" width="2" height="15" fill="rgb(214,58,37)"/><text x="1186.00" y="190.50"></text></g><g><title>_var (numpy/core/_methods.py) (1 samples, 0.19%)</title><rect x="1183" y="196" width="2" height="15" fill="rgb(247,32,20)"/><text x="1186.00" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.19%)</title><rect x="1183" y="212" width="2" height="15" fill="rgb(236,224,35)"/><text x="1186.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.19%)</title><rect x="1183" y="228" width="2" height="15" fill="rgb(243,145,26)"/><text x="1186.00" y="238.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (1 samples, 0.19%)</title><rect x="1183" y="244" width="2" height="15" fill="rgb(223,155,5)"/><text x="1186.00" y="254.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (1 samples, 0.19%)</title><rect x="1183" y="260" width="2" height="15" fill="rgb(242,189,1)"/><text x="1186.00" y="270.50"></text></g><g><title>dtype_kind_to_simplified_ordering (convert_datatype.c) (1 samples, 0.19%)</title><rect x="1183" y="276" width="2" height="15" fill="rgb(211,26,51)"/><text x="1186.00" y="286.50"></text></g><g><title>_backprop (sklearn/neural_network/_multilayer_perceptron.py) (1 samples, 0.19%)</title><rect x="1185" y="164" width="2" height="15" fill="rgb(218,26,22)"/><text x="1188.00" y="174.50"></text></g><g><title>log_loss (sklearn/neural_network/_base.py) (1 samples, 0.19%)</title><rect x="1185" y="180" width="2" height="15" fill="rgb(228,168,46)"/><text x="1188.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.19%)</title><rect x="1185" y="196" width="2" height="15" fill="rgb(217,225,7)"/><text x="1188.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.19%)</title><rect x="1185" y="212" width="2" height="15" fill="rgb(234,64,39)"/><text x="1188.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.19%)</title><rect x="1185" y="228" width="2" height="15" fill="rgb(228,105,1)"/><text x="1188.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (1 samples, 0.19%)</title><rect x="1185" y="244" width="2" height="15" fill="rgb(240,183,16)"/><text x="1188.00" y="254.50"></text></g><g><title>0x7f51430f9590 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.19%)</title><rect x="1185" y="260" width="2" height="15" fill="rgb(245,191,34)"/><text x="1188.00" y="270.50"></text></g><g><title>all (539 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(254,75,41)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1_50_12_float_.py) (539 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(246,33,45)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>start (bench_MLPClassifier_default_b_cl_1_50_12_float_.py) (3 samples, 0.56%)</title><rect x="1183" y="68" width="7" height="15" fill="rgb(233,201,49)"/><text x="1186.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py) (3 samples, 0.56%)</title><rect x="1183" y="84" width="7" height="15" fill="rgb(228,190,26)"/><text x="1186.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.56%)</title><rect x="1183" y="100" width="7" height="15" fill="rgb(237,22,13)"/><text x="1186.00" y="110.50"></text></g><g><title>fit (sklearn/neural_network/_multilayer_perceptron.py) (2 samples, 0.37%)</title><rect x="1185" y="116" width="5" height="15" fill="rgb(252,189,46)"/><text x="1188.00" y="126.50"></text></g><g><title>_fit (sklearn/neural_network/_multilayer_perceptron.py) (2 samples, 0.37%)</title><rect x="1185" y="132" width="5" height="15" fill="rgb(235,0,16)"/><text x="1188.00" y="142.50"></text></g><g><title>_fit_stochastic (sklearn/neural_network/_multilayer_perceptron.py) (2 samples, 0.37%)</title><rect x="1185" y="148" width="5" height="15" fill="rgb(246,126,27)"/><text x="1188.00" y="158.50"></text></g><g><title>update_params (sklearn/neural_network/_stochastic_optimizers.py) (1 samples, 0.19%)</title><rect x="1187" y="164" width="3" height="15" fill="rgb(221,221,23)"/><text x="1190.00" y="174.50"></text></g><g><title>_get_updates (sklearn/neural_network/_stochastic_optimizers.py) (1 samples, 0.19%)</title><rect x="1187" y="180" width="3" height="15" fill="rgb(252,3,20)"/><text x="1190.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/neural_network/_stochastic_optimizers.py) (1 samples, 0.19%)</title><rect x="1187" y="196" width="3" height="15" fill="rgb(207,42,10)"/><text x="1190.00" y="206.50"></text></g></g></svg>