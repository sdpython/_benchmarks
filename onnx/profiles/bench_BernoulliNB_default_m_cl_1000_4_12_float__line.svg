<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1526" onload="init(evt)" viewBox="0 0 1200 1526" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1526" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1509.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1509.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (5 samples, 1.71%)</title><rect x="0.0000%" y="820" width="1.7123%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (5 samples, 1.71%)</title><rect x="0.0000%" y="836" width="1.7123%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (3 samples, 1.03%)</title><rect x="0.6849%" y="852" width="1.0274%" height="15" fill="rgb(221,193,54)"/><text x="0.9349%" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (3 samples, 1.03%)</title><rect x="0.6849%" y="868" width="1.0274%" height="15" fill="rgb(248,212,6)"/><text x="0.9349%" y="878.50"></text></g><g><title>&lt;module&gt; (profiles/benches/naive_bayes/BernoulliNB/bench_BernoulliNB_default_m_cl.py:2) (6 samples, 2.05%)</title><rect x="0.0000%" y="148" width="2.0548%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.05%)</title><rect x="0.0000%" y="164" width="2.0548%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (6 samples, 2.05%)</title><rect x="0.0000%" y="180" width="2.0548%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="190.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.05%)</title><rect x="0.0000%" y="196" width="2.0548%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="206.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.05%)</title><rect x="0.0000%" y="212" width="2.0548%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="222.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.05%)</title><rect x="0.0000%" y="228" width="2.0548%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="238.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.05%)</title><rect x="0.0000%" y="244" width="2.0548%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="254.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.05%)</title><rect x="0.0000%" y="260" width="2.0548%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="270.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.05%)</title><rect x="0.0000%" y="276" width="2.0548%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="286.50">_..</text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (6 samples, 2.05%)</title><rect x="0.0000%" y="292" width="2.0548%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="302.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.05%)</title><rect x="0.0000%" y="308" width="2.0548%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="318.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.05%)</title><rect x="0.0000%" y="324" width="2.0548%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="334.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.05%)</title><rect x="0.0000%" y="340" width="2.0548%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="350.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.05%)</title><rect x="0.0000%" y="356" width="2.0548%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="366.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.05%)</title><rect x="0.0000%" y="372" width="2.0548%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="382.50">_..</text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (6 samples, 2.05%)</title><rect x="0.0000%" y="388" width="2.0548%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="398.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.05%)</title><rect x="0.0000%" y="404" width="2.0548%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="414.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.05%)</title><rect x="0.0000%" y="420" width="2.0548%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="430.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.05%)</title><rect x="0.0000%" y="436" width="2.0548%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="446.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.05%)</title><rect x="0.0000%" y="452" width="2.0548%" height="15" fill="rgb(247,18,42)"/><text x="0.2500%" y="462.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.05%)</title><rect x="0.0000%" y="468" width="2.0548%" height="15" fill="rgb(241,131,45)"/><text x="0.2500%" y="478.50">_..</text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (6 samples, 2.05%)</title><rect x="0.0000%" y="484" width="2.0548%" height="15" fill="rgb(249,31,29)"/><text x="0.2500%" y="494.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.05%)</title><rect x="0.0000%" y="500" width="2.0548%" height="15" fill="rgb(225,111,53)"/><text x="0.2500%" y="510.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.05%)</title><rect x="0.0000%" y="516" width="2.0548%" height="15" fill="rgb(238,160,17)"/><text x="0.2500%" y="526.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.05%)</title><rect x="0.0000%" y="532" width="2.0548%" height="15" fill="rgb(214,148,48)"/><text x="0.2500%" y="542.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.05%)</title><rect x="0.0000%" y="548" width="2.0548%" height="15" fill="rgb(232,36,49)"/><text x="0.2500%" y="558.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.05%)</title><rect x="0.0000%" y="564" width="2.0548%" height="15" fill="rgb(209,103,24)"/><text x="0.2500%" y="574.50">_..</text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (6 samples, 2.05%)</title><rect x="0.0000%" y="580" width="2.0548%" height="15" fill="rgb(229,88,8)"/><text x="0.2500%" y="590.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.05%)</title><rect x="0.0000%" y="596" width="2.0548%" height="15" fill="rgb(213,181,19)"/><text x="0.2500%" y="606.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (6 samples, 2.05%)</title><rect x="0.0000%" y="612" width="2.0548%" height="15" fill="rgb(254,191,54)"/><text x="0.2500%" y="622.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.05%)</title><rect x="0.0000%" y="628" width="2.0548%" height="15" fill="rgb(241,83,37)"/><text x="0.2500%" y="638.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.05%)</title><rect x="0.0000%" y="644" width="2.0548%" height="15" fill="rgb(233,36,39)"/><text x="0.2500%" y="654.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.05%)</title><rect x="0.0000%" y="660" width="2.0548%" height="15" fill="rgb(226,3,54)"/><text x="0.2500%" y="670.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.05%)</title><rect x="0.0000%" y="676" width="2.0548%" height="15" fill="rgb(245,192,40)"/><text x="0.2500%" y="686.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.05%)</title><rect x="0.0000%" y="692" width="2.0548%" height="15" fill="rgb(238,167,29)"/><text x="0.2500%" y="702.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.05%)</title><rect x="0.0000%" y="708" width="2.0548%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="718.50">_..</text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (6 samples, 2.05%)</title><rect x="0.0000%" y="724" width="2.0548%" height="15" fill="rgb(231,60,39)"/><text x="0.2500%" y="734.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.05%)</title><rect x="0.0000%" y="740" width="2.0548%" height="15" fill="rgb(208,69,12)"/><text x="0.2500%" y="750.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.05%)</title><rect x="0.0000%" y="756" width="2.0548%" height="15" fill="rgb(235,93,37)"/><text x="0.2500%" y="766.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.05%)</title><rect x="0.0000%" y="772" width="2.0548%" height="15" fill="rgb(213,116,39)"/><text x="0.2500%" y="782.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.05%)</title><rect x="0.0000%" y="788" width="2.0548%" height="15" fill="rgb(222,207,29)"/><text x="0.2500%" y="798.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.05%)</title><rect x="0.0000%" y="804" width="2.0548%" height="15" fill="rgb(206,96,30)"/><text x="0.2500%" y="814.50">_..</text></g><g><title>&lt;module&gt; (profiles/benches/naive_bayes/BernoulliNB/bench_BernoulliNB_default_m_cl.py:4) (3 samples, 1.03%)</title><rect x="2.0548%" y="148" width="1.0274%" height="15" fill="rgb(218,138,4)"/><text x="2.3048%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="2.0548%" y="164" width="1.0274%" height="15" fill="rgb(250,191,14)"/><text x="2.3048%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 1.03%)</title><rect x="2.0548%" y="180" width="1.0274%" height="15" fill="rgb(239,60,40)"/><text x="2.3048%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="2.0548%" y="196" width="1.0274%" height="15" fill="rgb(206,27,48)"/><text x="2.3048%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="2.0548%" y="212" width="1.0274%" height="15" fill="rgb(225,35,8)"/><text x="2.3048%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="2.0548%" y="228" width="1.0274%" height="15" fill="rgb(250,213,24)"/><text x="2.3048%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="2.0548%" y="244" width="1.0274%" height="15" fill="rgb(247,123,22)"/><text x="2.3048%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="2.0548%" y="260" width="1.0274%" height="15" fill="rgb(231,138,38)"/><text x="2.3048%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="2.0548%" y="276" width="1.0274%" height="15" fill="rgb(231,145,46)"/><text x="2.3048%" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (3 samples, 1.03%)</title><rect x="2.0548%" y="292" width="1.0274%" height="15" fill="rgb(251,118,11)"/><text x="2.3048%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="2.0548%" y="308" width="1.0274%" height="15" fill="rgb(217,147,25)"/><text x="2.3048%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="2.0548%" y="324" width="1.0274%" height="15" fill="rgb(247,81,37)"/><text x="2.3048%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="2.0548%" y="340" width="1.0274%" height="15" fill="rgb(209,12,38)"/><text x="2.3048%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="2.0548%" y="356" width="1.0274%" height="15" fill="rgb(227,1,9)"/><text x="2.3048%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="2.0548%" y="372" width="1.0274%" height="15" fill="rgb(248,47,43)"/><text x="2.3048%" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (3 samples, 1.03%)</title><rect x="2.0548%" y="388" width="1.0274%" height="15" fill="rgb(221,10,30)"/><text x="2.3048%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="2.0548%" y="404" width="1.0274%" height="15" fill="rgb(210,229,1)"/><text x="2.3048%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="2.0548%" y="420" width="1.0274%" height="15" fill="rgb(222,148,37)"/><text x="2.3048%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="2.0548%" y="436" width="1.0274%" height="15" fill="rgb(234,67,33)"/><text x="2.3048%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="2.0548%" y="452" width="1.0274%" height="15" fill="rgb(247,98,35)"/><text x="2.3048%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="2.0548%" y="468" width="1.0274%" height="15" fill="rgb(247,138,52)"/><text x="2.3048%" y="478.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (3 samples, 1.03%)</title><rect x="3.4247%" y="724" width="1.0274%" height="15" fill="rgb(213,79,30)"/><text x="3.6747%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="3.4247%" y="740" width="1.0274%" height="15" fill="rgb(246,177,23)"/><text x="3.6747%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="3.4247%" y="756" width="1.0274%" height="15" fill="rgb(230,62,27)"/><text x="3.6747%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="3.4247%" y="772" width="1.0274%" height="15" fill="rgb(216,154,8)"/><text x="3.6747%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="3.4247%" y="788" width="1.0274%" height="15" fill="rgb(244,35,45)"/><text x="3.6747%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="3.4247%" y="804" width="1.0274%" height="15" fill="rgb(251,115,12)"/><text x="3.6747%" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (3 samples, 1.03%)</title><rect x="3.4247%" y="820" width="1.0274%" height="15" fill="rgb(240,54,50)"/><text x="3.6747%" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.03%)</title><rect x="3.4247%" y="836" width="1.0274%" height="15" fill="rgb(233,84,52)"/><text x="3.6747%" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.03%)</title><rect x="3.4247%" y="852" width="1.0274%" height="15" fill="rgb(207,117,47)"/><text x="3.6747%" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.03%)</title><rect x="3.4247%" y="868" width="1.0274%" height="15" fill="rgb(249,43,39)"/><text x="3.6747%" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.03%)</title><rect x="3.4247%" y="884" width="1.0274%" height="15" fill="rgb(209,38,44)"/><text x="3.6747%" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.03%)</title><rect x="3.4247%" y="900" width="1.0274%" height="15" fill="rgb(236,212,23)"/><text x="3.6747%" y="910.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (4 samples, 1.37%)</title><rect x="3.4247%" y="436" width="1.3699%" height="15" fill="rgb(242,79,21)"/><text x="3.6747%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.37%)</title><rect x="3.4247%" y="452" width="1.3699%" height="15" fill="rgb(211,96,35)"/><text x="3.6747%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.37%)</title><rect x="3.4247%" y="468" width="1.3699%" height="15" fill="rgb(253,215,40)"/><text x="3.6747%" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.37%)</title><rect x="3.4247%" y="484" width="1.3699%" height="15" fill="rgb(211,81,21)"/><text x="3.6747%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.37%)</title><rect x="3.4247%" y="500" width="1.3699%" height="15" fill="rgb(208,190,38)"/><text x="3.6747%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.37%)</title><rect x="3.4247%" y="516" width="1.3699%" height="15" fill="rgb(235,213,38)"/><text x="3.6747%" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:13) (4 samples, 1.37%)</title><rect x="3.4247%" y="532" width="1.3699%" height="15" fill="rgb(237,122,38)"/><text x="3.6747%" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.37%)</title><rect x="3.4247%" y="548" width="1.3699%" height="15" fill="rgb(244,218,35)"/><text x="3.6747%" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.37%)</title><rect x="3.4247%" y="564" width="1.3699%" height="15" fill="rgb(240,68,47)"/><text x="3.6747%" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.37%)</title><rect x="3.4247%" y="580" width="1.3699%" height="15" fill="rgb(210,16,53)"/><text x="3.6747%" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.37%)</title><rect x="3.4247%" y="596" width="1.3699%" height="15" fill="rgb(235,124,12)"/><text x="3.6747%" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.37%)</title><rect x="3.4247%" y="612" width="1.3699%" height="15" fill="rgb(224,169,11)"/><text x="3.6747%" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (4 samples, 1.37%)</title><rect x="3.4247%" y="628" width="1.3699%" height="15" fill="rgb(250,166,2)"/><text x="3.6747%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.37%)</title><rect x="3.4247%" y="644" width="1.3699%" height="15" fill="rgb(242,216,29)"/><text x="3.6747%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.37%)</title><rect x="3.4247%" y="660" width="1.3699%" height="15" fill="rgb(230,116,27)"/><text x="3.6747%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.37%)</title><rect x="3.4247%" y="676" width="1.3699%" height="15" fill="rgb(228,99,48)"/><text x="3.6747%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.37%)</title><rect x="3.4247%" y="692" width="1.3699%" height="15" fill="rgb(253,11,6)"/><text x="3.6747%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.37%)</title><rect x="3.4247%" y="708" width="1.3699%" height="15" fill="rgb(247,143,39)"/><text x="3.6747%" y="718.50"></text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:4) (19 samples, 6.51%)</title><rect x="0.0000%" y="52" width="6.5068%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="62.50">&lt;module&gt; ..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (19 samples, 6.51%)</title><rect x="0.0000%" y="68" width="6.5068%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="78.50">_find_and..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (19 samples, 6.51%)</title><rect x="0.0000%" y="84" width="6.5068%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="94.50">_find_and..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (19 samples, 6.51%)</title><rect x="0.0000%" y="100" width="6.5068%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="110.50">_load_unl..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (19 samples, 6.51%)</title><rect x="0.0000%" y="116" width="6.5068%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="126.50">exec_modu..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (19 samples, 6.51%)</title><rect x="0.0000%" y="132" width="6.5068%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="142.50">_call_wit..</text></g><g><title>&lt;module&gt; (profiles/benches/naive_bayes/BernoulliNB/bench_BernoulliNB_default_m_cl.py:7) (10 samples, 3.42%)</title><rect x="3.0822%" y="148" width="3.4247%" height="15" fill="rgb(251,28,31)"/><text x="3.3322%" y="158.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 3.42%)</title><rect x="3.0822%" y="164" width="3.4247%" height="15" fill="rgb(233,223,10)"/><text x="3.3322%" y="174.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 3.42%)</title><rect x="3.0822%" y="180" width="3.4247%" height="15" fill="rgb(215,21,27)"/><text x="3.3322%" y="190.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 3.42%)</title><rect x="3.0822%" y="196" width="3.4247%" height="15" fill="rgb(232,23,21)"/><text x="3.3322%" y="206.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 3.42%)</title><rect x="3.0822%" y="212" width="3.4247%" height="15" fill="rgb(244,5,23)"/><text x="3.3322%" y="222.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 3.42%)</title><rect x="3.0822%" y="228" width="3.4247%" height="15" fill="rgb(226,81,46)"/><text x="3.3322%" y="238.50">_ca..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (9 samples, 3.08%)</title><rect x="3.4247%" y="244" width="3.0822%" height="15" fill="rgb(247,70,30)"/><text x="3.6747%" y="254.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 3.08%)</title><rect x="3.4247%" y="260" width="3.0822%" height="15" fill="rgb(212,68,19)"/><text x="3.6747%" y="270.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 3.08%)</title><rect x="3.4247%" y="276" width="3.0822%" height="15" fill="rgb(240,187,13)"/><text x="3.6747%" y="286.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 3.08%)</title><rect x="3.4247%" y="292" width="3.0822%" height="15" fill="rgb(223,113,26)"/><text x="3.6747%" y="302.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 3.08%)</title><rect x="3.4247%" y="308" width="3.0822%" height="15" fill="rgb(206,192,2)"/><text x="3.6747%" y="318.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 3.08%)</title><rect x="3.4247%" y="324" width="3.0822%" height="15" fill="rgb(241,108,4)"/><text x="3.6747%" y="334.50">_ca..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (9 samples, 3.08%)</title><rect x="3.4247%" y="340" width="3.0822%" height="15" fill="rgb(247,173,49)"/><text x="3.6747%" y="350.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 3.08%)</title><rect x="3.4247%" y="356" width="3.0822%" height="15" fill="rgb(224,114,35)"/><text x="3.6747%" y="366.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 3.08%)</title><rect x="3.4247%" y="372" width="3.0822%" height="15" fill="rgb(245,159,27)"/><text x="3.6747%" y="382.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 3.08%)</title><rect x="3.4247%" y="388" width="3.0822%" height="15" fill="rgb(245,172,44)"/><text x="3.6747%" y="398.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 3.08%)</title><rect x="3.4247%" y="404" width="3.0822%" height="15" fill="rgb(236,23,11)"/><text x="3.6747%" y="414.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 3.08%)</title><rect x="3.4247%" y="420" width="3.0822%" height="15" fill="rgb(205,117,38)"/><text x="3.6747%" y="430.50">_ca..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (5 samples, 1.71%)</title><rect x="4.7945%" y="436" width="1.7123%" height="15" fill="rgb(237,72,25)"/><text x="5.0445%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.71%)</title><rect x="4.7945%" y="452" width="1.7123%" height="15" fill="rgb(244,70,9)"/><text x="5.0445%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.71%)</title><rect x="4.7945%" y="468" width="1.7123%" height="15" fill="rgb(217,125,39)"/><text x="5.0445%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.71%)</title><rect x="4.7945%" y="484" width="1.7123%" height="15" fill="rgb(235,36,10)"/><text x="5.0445%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.71%)</title><rect x="4.7945%" y="500" width="1.7123%" height="15" fill="rgb(251,123,47)"/><text x="5.0445%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.71%)</title><rect x="4.7945%" y="516" width="1.7123%" height="15" fill="rgb(221,13,13)"/><text x="5.0445%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.71%)</title><rect x="4.7945%" y="532" width="1.7123%" height="15" fill="rgb(238,131,9)"/><text x="5.0445%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.71%)</title><rect x="4.7945%" y="548" width="1.7123%" height="15" fill="rgb(211,50,8)"/><text x="5.0445%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.71%)</title><rect x="4.7945%" y="564" width="1.7123%" height="15" fill="rgb(245,182,24)"/><text x="5.0445%" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (5 samples, 1.71%)</title><rect x="4.7945%" y="580" width="1.7123%" height="15" fill="rgb(242,14,37)"/><text x="5.0445%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.71%)</title><rect x="4.7945%" y="596" width="1.7123%" height="15" fill="rgb(246,228,12)"/><text x="5.0445%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.71%)</title><rect x="4.7945%" y="612" width="1.7123%" height="15" fill="rgb(213,55,15)"/><text x="5.0445%" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.71%)</title><rect x="4.7945%" y="628" width="1.7123%" height="15" fill="rgb(209,9,3)"/><text x="5.0445%" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.71%)</title><rect x="4.7945%" y="644" width="1.7123%" height="15" fill="rgb(230,59,30)"/><text x="5.0445%" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.71%)</title><rect x="4.7945%" y="660" width="1.7123%" height="15" fill="rgb(209,121,21)"/><text x="5.0445%" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (5 samples, 1.71%)</title><rect x="4.7945%" y="676" width="1.7123%" height="15" fill="rgb(220,109,13)"/><text x="5.0445%" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.71%)</title><rect x="4.7945%" y="692" width="1.7123%" height="15" fill="rgb(232,18,1)"/><text x="5.0445%" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.71%)</title><rect x="4.7945%" y="708" width="1.7123%" height="15" fill="rgb(215,41,42)"/><text x="5.0445%" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.71%)</title><rect x="4.7945%" y="724" width="1.7123%" height="15" fill="rgb(224,123,36)"/><text x="5.0445%" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.71%)</title><rect x="4.7945%" y="740" width="1.7123%" height="15" fill="rgb(240,125,3)"/><text x="5.0445%" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.71%)</title><rect x="4.7945%" y="756" width="1.7123%" height="15" fill="rgb(205,98,50)"/><text x="5.0445%" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (5 samples, 1.71%)</title><rect x="4.7945%" y="772" width="1.7123%" height="15" fill="rgb(205,185,37)"/><text x="5.0445%" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.71%)</title><rect x="4.7945%" y="788" width="1.7123%" height="15" fill="rgb(238,207,15)"/><text x="5.0445%" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.71%)</title><rect x="4.7945%" y="804" width="1.7123%" height="15" fill="rgb(213,199,42)"/><text x="5.0445%" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.71%)</title><rect x="4.7945%" y="820" width="1.7123%" height="15" fill="rgb(235,201,11)"/><text x="5.0445%" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.71%)</title><rect x="4.7945%" y="836" width="1.7123%" height="15" fill="rgb(207,46,11)"/><text x="5.0445%" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.71%)</title><rect x="4.7945%" y="852" width="1.7123%" height="15" fill="rgb(241,35,35)"/><text x="5.0445%" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (5 samples, 1.71%)</title><rect x="4.7945%" y="868" width="1.7123%" height="15" fill="rgb(243,32,47)"/><text x="5.0445%" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.71%)</title><rect x="4.7945%" y="884" width="1.7123%" height="15" fill="rgb(247,202,23)"/><text x="5.0445%" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.71%)</title><rect x="4.7945%" y="900" width="1.7123%" height="15" fill="rgb(219,102,11)"/><text x="5.0445%" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.71%)</title><rect x="4.7945%" y="916" width="1.7123%" height="15" fill="rgb(243,110,44)"/><text x="5.0445%" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.71%)</title><rect x="4.7945%" y="932" width="1.7123%" height="15" fill="rgb(222,74,54)"/><text x="5.0445%" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.71%)</title><rect x="4.7945%" y="948" width="1.7123%" height="15" fill="rgb(216,99,12)"/><text x="5.0445%" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.71%)</title><rect x="4.7945%" y="964" width="1.7123%" height="15" fill="rgb(226,22,26)"/><text x="5.0445%" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.71%)</title><rect x="4.7945%" y="980" width="1.7123%" height="15" fill="rgb(217,163,10)"/><text x="5.0445%" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.71%)</title><rect x="4.7945%" y="996" width="1.7123%" height="15" fill="rgb(213,25,53)"/><text x="5.0445%" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (5 samples, 1.71%)</title><rect x="4.7945%" y="1012" width="1.7123%" height="15" fill="rgb(252,105,26)"/><text x="5.0445%" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.71%)</title><rect x="4.7945%" y="1028" width="1.7123%" height="15" fill="rgb(220,39,43)"/><text x="5.0445%" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.71%)</title><rect x="4.7945%" y="1044" width="1.7123%" height="15" fill="rgb(229,68,48)"/><text x="5.0445%" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.71%)</title><rect x="4.7945%" y="1060" width="1.7123%" height="15" fill="rgb(252,8,32)"/><text x="5.0445%" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.71%)</title><rect x="4.7945%" y="1076" width="1.7123%" height="15" fill="rgb(223,20,43)"/><text x="5.0445%" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.71%)</title><rect x="4.7945%" y="1092" width="1.7123%" height="15" fill="rgb(229,81,49)"/><text x="5.0445%" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (4 samples, 1.37%)</title><rect x="5.1370%" y="1108" width="1.3699%" height="15" fill="rgb(236,28,36)"/><text x="5.3870%" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 1.37%)</title><rect x="5.1370%" y="1124" width="1.3699%" height="15" fill="rgb(249,185,26)"/><text x="5.3870%" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.37%)</title><rect x="5.1370%" y="1140" width="1.3699%" height="15" fill="rgb(249,174,33)"/><text x="5.3870%" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.37%)</title><rect x="5.1370%" y="1156" width="1.3699%" height="15" fill="rgb(233,201,37)"/><text x="5.3870%" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.37%)</title><rect x="5.1370%" y="1172" width="1.3699%" height="15" fill="rgb(221,78,26)"/><text x="5.3870%" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.37%)</title><rect x="5.1370%" y="1188" width="1.3699%" height="15" fill="rgb(250,127,30)"/><text x="5.3870%" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.37%)</title><rect x="5.1370%" y="1204" width="1.3699%" height="15" fill="rgb(230,49,44)"/><text x="5.3870%" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.37%)</title><rect x="5.1370%" y="1220" width="1.3699%" height="15" fill="rgb(229,67,23)"/><text x="5.3870%" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (4 samples, 1.37%)</title><rect x="5.1370%" y="1236" width="1.3699%" height="15" fill="rgb(249,83,47)"/><text x="5.3870%" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 1.37%)</title><rect x="5.1370%" y="1252" width="1.3699%" height="15" fill="rgb(215,43,3)"/><text x="5.3870%" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.37%)</title><rect x="5.1370%" y="1268" width="1.3699%" height="15" fill="rgb(238,154,13)"/><text x="5.3870%" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.37%)</title><rect x="5.1370%" y="1284" width="1.3699%" height="15" fill="rgb(219,56,2)"/><text x="5.3870%" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.37%)</title><rect x="5.1370%" y="1300" width="1.3699%" height="15" fill="rgb(233,0,4)"/><text x="5.3870%" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.37%)</title><rect x="5.1370%" y="1316" width="1.3699%" height="15" fill="rgb(235,30,7)"/><text x="5.3870%" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.37%)</title><rect x="5.1370%" y="1332" width="1.3699%" height="15" fill="rgb(250,79,13)"/><text x="5.3870%" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.37%)</title><rect x="5.1370%" y="1348" width="1.3699%" height="15" fill="rgb(211,146,34)"/><text x="5.3870%" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (4 samples, 1.37%)</title><rect x="5.1370%" y="1364" width="1.3699%" height="15" fill="rgb(228,22,38)"/><text x="5.3870%" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.37%)</title><rect x="5.1370%" y="1380" width="1.3699%" height="15" fill="rgb(235,168,5)"/><text x="5.3870%" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.37%)</title><rect x="5.1370%" y="1396" width="1.3699%" height="15" fill="rgb(221,155,16)"/><text x="5.3870%" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.37%)</title><rect x="5.1370%" y="1412" width="1.3699%" height="15" fill="rgb(215,215,53)"/><text x="5.3870%" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.37%)</title><rect x="5.1370%" y="1428" width="1.3699%" height="15" fill="rgb(223,4,10)"/><text x="5.3870%" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.37%)</title><rect x="5.1370%" y="1444" width="1.3699%" height="15" fill="rgb(234,103,6)"/><text x="5.3870%" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py:159) (4 samples, 1.37%)</title><rect x="5.1370%" y="1460" width="1.3699%" height="15" fill="rgb(227,97,0)"/><text x="5.3870%" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py:153) (4 samples, 1.37%)</title><rect x="5.1370%" y="1476" width="1.3699%" height="15" fill="rgb(234,150,53)"/><text x="5.3870%" y="1486.50"></text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:93) (3 samples, 1.03%)</title><rect x="7.1918%" y="164" width="1.0274%" height="15" fill="rgb(228,201,54)"/><text x="7.4418%" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (3 samples, 1.03%)</title><rect x="9.5890%" y="212" width="1.0274%" height="15" fill="rgb(222,22,37)"/><text x="9.8390%" y="222.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (3 samples, 1.03%)</title><rect x="9.5890%" y="228" width="1.0274%" height="15" fill="rgb(237,53,32)"/><text x="9.8390%" y="238.50"></text></g><g><title>_check_X (sklearn/naive_bayes.py:985) (8 samples, 2.74%)</title><rect x="8.2192%" y="180" width="2.7397%" height="15" fill="rgb(233,25,53)"/><text x="8.4692%" y="190.50">_c..</text></g><g><title>_check_X (sklearn/naive_bayes.py:473) (7 samples, 2.40%)</title><rect x="8.5616%" y="196" width="2.3973%" height="15" fill="rgb(210,40,34)"/><text x="8.8116%" y="206.50">_c..</text></g><g><title>check_array (sklearn/utils/validation.py:562) (6 samples, 2.05%)</title><rect x="11.9863%" y="212" width="2.0548%" height="15" fill="rgb(241,220,44)"/><text x="12.2363%" y="222.50">c..</text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (4 samples, 1.37%)</title><rect x="12.6712%" y="228" width="1.3699%" height="15" fill="rgb(235,28,35)"/><text x="12.9212%" y="238.50"></text></g><g><title>binarize (sklearn/preprocessing/_data.py:1862) (15 samples, 5.14%)</title><rect x="10.9589%" y="196" width="5.1370%" height="15" fill="rgb(210,56,17)"/><text x="11.2089%" y="206.50">binari..</text></g><g><title>check_array (sklearn/utils/validation.py:586) (3 samples, 1.03%)</title><rect x="15.0685%" y="212" width="1.0274%" height="15" fill="rgb(224,130,29)"/><text x="15.3185%" y="222.50"></text></g><g><title>binarize (sklearn/preprocessing/_data.py:1873) (5 samples, 1.71%)</title><rect x="16.0959%" y="196" width="1.7123%" height="15" fill="rgb(235,212,8)"/><text x="16.3459%" y="206.50"></text></g><g><title>array_richcompare (arrayobject.c:1504) (4 samples, 1.37%)</title><rect x="16.4384%" y="212" width="1.3699%" height="15" fill="rgb(223,33,50)"/><text x="16.6884%" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.37%)</title><rect x="16.4384%" y="228" width="1.3699%" height="15" fill="rgb(219,149,13)"/><text x="16.6884%" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (3 samples, 1.03%)</title><rect x="16.7808%" y="244" width="1.0274%" height="15" fill="rgb(250,156,29)"/><text x="17.0308%" y="254.50"></text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:94) (32 samples, 10.96%)</title><rect x="8.2192%" y="164" width="10.9589%" height="15" fill="rgb(216,193,19)"/><text x="8.4692%" y="174.50">predict_log_prob..</text></g><g><title>_check_X (sklearn/naive_bayes.py:987) (24 samples, 8.22%)</title><rect x="10.9589%" y="180" width="8.2192%" height="15" fill="rgb(216,135,14)"/><text x="11.2089%" y="190.50">_check_X (s..</text></g><g><title>_joint_log_likelihood (sklearn/naive_bayes.py:1018) (3 samples, 1.03%)</title><rect x="19.5205%" y="180" width="1.0274%" height="15" fill="rgb(241,47,5)"/><text x="19.7705%" y="190.50"></text></g><g><title>_joint_log_likelihood (sklearn/naive_bayes.py:1020) (6 samples, 2.05%)</title><rect x="20.5479%" y="180" width="2.0548%" height="15" fill="rgb(233,42,35)"/><text x="20.7979%" y="190.50">_..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (5 samples, 1.71%)</title><rect x="20.8904%" y="196" width="1.7123%" height="15" fill="rgb(231,13,6)"/><text x="21.1404%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 1.71%)</title><rect x="20.8904%" y="212" width="1.7123%" height="15" fill="rgb(207,181,40)"/><text x="21.1404%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (5 samples, 1.71%)</title><rect x="20.8904%" y="228" width="1.7123%" height="15" fill="rgb(254,173,49)"/><text x="21.1404%" y="238.50"></text></g><g><title>array_sum (methods.c:2215) (3 samples, 1.03%)</title><rect x="23.2877%" y="196" width="1.0274%" height="15" fill="rgb(221,1,38)"/><text x="23.5377%" y="206.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (3 samples, 1.03%)</title><rect x="23.2877%" y="212" width="1.0274%" height="15" fill="rgb(206,124,46)"/><text x="23.5377%" y="222.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (3 samples, 1.03%)</title><rect x="23.2877%" y="228" width="1.0274%" height="15" fill="rgb(249,21,11)"/><text x="23.5377%" y="238.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (3 samples, 1.03%)</title><rect x="23.2877%" y="244" width="1.0274%" height="15" fill="rgb(222,201,40)"/><text x="23.5377%" y="254.50"></text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:95) (19 samples, 6.51%)</title><rect x="19.1781%" y="164" width="6.5068%" height="15" fill="rgb(235,61,29)"/><text x="19.4281%" y="174.50">predict_l..</text></g><g><title>_joint_log_likelihood (sklearn/naive_bayes.py:1021) (9 samples, 3.08%)</title><rect x="22.6027%" y="180" width="3.0822%" height="15" fill="rgb(219,207,3)"/><text x="22.8527%" y="190.50">_jo..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.37%)</title><rect x="24.3151%" y="196" width="1.3699%" height="15" fill="rgb(222,56,46)"/><text x="24.5651%" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 1.03%)</title><rect x="24.6575%" y="212" width="1.0274%" height="15" fill="rgb(239,76,54)"/><text x="24.9075%" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 1.03%)</title><rect x="24.6575%" y="228" width="1.0274%" height="15" fill="rgb(231,124,27)"/><text x="24.9075%" y="238.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (4 samples, 1.37%)</title><rect x="30.4795%" y="404" width="1.3699%" height="15" fill="rgb(249,195,6)"/><text x="30.7295%" y="414.50"></text></g><g><title>fetestexcept (libm-2.29.so) (4 samples, 1.37%)</title><rect x="30.4795%" y="420" width="1.3699%" height="15" fill="rgb(237,174,47)"/><text x="30.7295%" y="430.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1857) (10 samples, 3.42%)</title><rect x="29.1096%" y="340" width="3.4247%" height="15" fill="rgb(206,201,31)"/><text x="29.3596%" y="350.50">DOU..</text></g><g><title>run_unary_reduce_simd_maximum_DOUBLE (simd.inc.src:195) (10 samples, 3.42%)</title><rect x="29.1096%" y="356" width="3.4247%" height="15" fill="rgb(231,57,52)"/><text x="29.3596%" y="366.50">run..</text></g><g><title>sse2_maximum_DOUBLE (simd.inc.src:1117) (8 samples, 2.74%)</title><rect x="29.7945%" y="372" width="2.7397%" height="15" fill="rgb(248,177,22)"/><text x="30.0445%" y="382.50">ss..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (6 samples, 2.05%)</title><rect x="30.4795%" y="388" width="2.0548%" height="15" fill="rgb(215,211,37)"/><text x="30.7295%" y="398.50">n..</text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (4 samples, 1.37%)</title><rect x="33.2192%" y="372" width="1.3699%" height="15" fill="rgb(241,128,51)"/><text x="33.4692%" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (4 samples, 1.37%)</title><rect x="33.2192%" y="388" width="1.3699%" height="15" fill="rgb(227,165,31)"/><text x="33.4692%" y="398.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1876) (7 samples, 2.40%)</title><rect x="32.5342%" y="340" width="2.3973%" height="15" fill="rgb(228,167,24)"/><text x="32.7842%" y="350.50">DO..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (6 samples, 2.05%)</title><rect x="32.8767%" y="356" width="2.0548%" height="15" fill="rgb(228,143,12)"/><text x="33.1267%" y="366.50">n..</text></g><g><title>logsumexp (scipy/special/_logsumexp.py:101) (26 samples, 8.90%)</title><rect x="26.3699%" y="180" width="8.9041%" height="15" fill="rgb(249,149,8)"/><text x="26.6199%" y="190.50">logsumexp (sc..</text></g><g><title>amax (&lt;__array_function__ internals&gt;:6) (26 samples, 8.90%)</title><rect x="26.3699%" y="196" width="8.9041%" height="15" fill="rgb(243,35,44)"/><text x="26.6199%" y="206.50">amax (&lt;__arra..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (26 samples, 8.90%)</title><rect x="26.3699%" y="212" width="8.9041%" height="15" fill="rgb(246,89,9)"/><text x="26.6199%" y="222.50">array_impleme..</text></g><g><title>amax (numpy/core/fromnumeric.py:2621) (26 samples, 8.90%)</title><rect x="26.3699%" y="228" width="8.9041%" height="15" fill="rgb(233,213,13)"/><text x="26.6199%" y="238.50">amax (numpy/c..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (25 samples, 8.56%)</title><rect x="26.7123%" y="244" width="8.5616%" height="15" fill="rgb(233,141,41)"/><text x="26.9623%" y="254.50">_wrapreducti..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (23 samples, 7.88%)</title><rect x="27.3973%" y="260" width="7.8767%" height="15" fill="rgb(239,167,4)"/><text x="27.6473%" y="270.50">ufunc_reduc..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (23 samples, 7.88%)</title><rect x="27.3973%" y="276" width="7.8767%" height="15" fill="rgb(209,217,16)"/><text x="27.6473%" y="286.50">PyUFunc_Gen..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (23 samples, 7.88%)</title><rect x="27.3973%" y="292" width="7.8767%" height="15" fill="rgb(219,88,35)"/><text x="27.6473%" y="302.50">PyUFunc_Red..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (20 samples, 6.85%)</title><rect x="28.4247%" y="308" width="6.8493%" height="15" fill="rgb(220,193,23)"/><text x="28.6747%" y="318.50">PyUFunc_R..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (19 samples, 6.51%)</title><rect x="28.7671%" y="324" width="6.5068%" height="15" fill="rgb(230,90,52)"/><text x="29.0171%" y="334.50">reduce_lo..</text></g><g><title>logsumexp (scipy/special/_logsumexp.py:112) (12 samples, 4.11%)</title><rect x="35.9589%" y="180" width="4.1096%" height="15" fill="rgb(252,106,19)"/><text x="36.2089%" y="190.50">logs..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (11 samples, 3.77%)</title><rect x="36.3014%" y="196" width="3.7671%" height="15" fill="rgb(206,74,20)"/><text x="36.5514%" y="206.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (11 samples, 3.77%)</title><rect x="36.3014%" y="212" width="3.7671%" height="15" fill="rgb(230,138,44)"/><text x="36.5514%" y="222.50">PyUF..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (11 samples, 3.77%)</title><rect x="36.3014%" y="228" width="3.7671%" height="15" fill="rgb(235,182,43)"/><text x="36.5514%" y="238.50">exec..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (11 samples, 3.77%)</title><rect x="36.3014%" y="244" width="3.7671%" height="15" fill="rgb(242,16,51)"/><text x="36.5514%" y="254.50">triv..</text></g><g><title>PyUFunc_d_d (loops.c.src:190) (10 samples, 3.42%)</title><rect x="36.6438%" y="260" width="3.4247%" height="15" fill="rgb(248,9,4)"/><text x="36.8938%" y="270.50">PyU..</text></g><g><title>exp (libm-2.29.so) (10 samples, 3.42%)</title><rect x="36.6438%" y="276" width="3.4247%" height="15" fill="rgb(210,31,22)"/><text x="36.8938%" y="286.50">exp..</text></g><g><title>logsumexp (scipy/special/_logsumexp.py:116) (13 samples, 4.45%)</title><rect x="40.0685%" y="180" width="4.4521%" height="15" fill="rgb(239,54,39)"/><text x="40.3185%" y="190.50">logsu..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (13 samples, 4.45%)</title><rect x="40.0685%" y="196" width="4.4521%" height="15" fill="rgb(230,99,41)"/><text x="40.3185%" y="206.50">sum (..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (13 samples, 4.45%)</title><rect x="40.0685%" y="212" width="4.4521%" height="15" fill="rgb(253,106,12)"/><text x="40.3185%" y="222.50">array..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (11 samples, 3.77%)</title><rect x="40.7534%" y="228" width="3.7671%" height="15" fill="rgb(213,46,41)"/><text x="41.0034%" y="238.50">sum ..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (11 samples, 3.77%)</title><rect x="40.7534%" y="244" width="3.7671%" height="15" fill="rgb(215,133,35)"/><text x="41.0034%" y="254.50">_wra..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (11 samples, 3.77%)</title><rect x="40.7534%" y="260" width="3.7671%" height="15" fill="rgb(213,28,5)"/><text x="41.0034%" y="270.50">ufun..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (10 samples, 3.42%)</title><rect x="41.0959%" y="276" width="3.4247%" height="15" fill="rgb(215,77,49)"/><text x="41.3459%" y="286.50">PyU..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (9 samples, 3.08%)</title><rect x="41.4384%" y="292" width="3.0822%" height="15" fill="rgb(248,100,22)"/><text x="41.6884%" y="302.50">PyU..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (4 samples, 1.37%)</title><rect x="43.1507%" y="308" width="1.3699%" height="15" fill="rgb(208,67,9)"/><text x="43.4007%" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (4 samples, 1.37%)</title><rect x="43.1507%" y="324" width="1.3699%" height="15" fill="rgb(219,133,21)"/><text x="43.4007%" y="334.50"></text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:97) (61 samples, 20.89%)</title><rect x="25.6849%" y="164" width="20.8904%" height="15" fill="rgb(246,46,29)"/><text x="25.9349%" y="174.50">predict_log_proba (sklearn/naive_..</text></g><g><title>logsumexp (scipy/special/_logsumexp.py:120) (6 samples, 2.05%)</title><rect x="44.5205%" y="180" width="2.0548%" height="15" fill="rgb(246,185,52)"/><text x="44.7705%" y="190.50">l..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 1.03%)</title><rect x="45.5479%" y="196" width="1.0274%" height="15" fill="rgb(252,136,11)"/><text x="45.7979%" y="206.50"></text></g><g><title>array_subtract (number.c:342) (3 samples, 1.03%)</title><rect x="46.9178%" y="180" width="1.0274%" height="15" fill="rgb(219,138,53)"/><text x="47.1678%" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 1.03%)</title><rect x="46.9178%" y="196" width="1.0274%" height="15" fill="rgb(211,51,23)"/><text x="47.1678%" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 1.03%)</title><rect x="46.9178%" y="212" width="1.0274%" height="15" fill="rgb(247,221,28)"/><text x="47.1678%" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 1.03%)</title><rect x="46.9178%" y="228" width="1.0274%" height="15" fill="rgb(251,222,45)"/><text x="47.1678%" y="238.50"></text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:98) (5 samples, 1.71%)</title><rect x="46.5753%" y="164" width="1.7123%" height="15" fill="rgb(217,162,53)"/><text x="46.8253%" y="174.50"></text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:54) (133 samples, 45.55%)</title><rect x="6.8493%" y="52" width="45.5479%" height="15" fill="rgb(229,93,14)"/><text x="7.0993%" y="62.50">&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:54)</text></g><g><title>profile_skl (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:53) (133 samples, 45.55%)</title><rect x="6.8493%" y="68" width="45.5479%" height="15" fill="rgb(209,67,49)"/><text x="7.0993%" y="78.50">profile_skl (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:53)</text></g><g><title>setup_profile (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:37) (133 samples, 45.55%)</title><rect x="6.8493%" y="84" width="45.5479%" height="15" fill="rgb(213,87,29)"/><text x="7.0993%" y="94.50">setup_profile (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:37)</text></g><g><title>profile (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:31) (133 samples, 45.55%)</title><rect x="6.8493%" y="100" width="45.5479%" height="15" fill="rgb(205,151,52)"/><text x="7.0993%" y="110.50">profile (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (133 samples, 45.55%)</title><rect x="6.8493%" y="116" width="45.5479%" height="15" fill="rgb(253,215,39)"/><text x="7.0993%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229) (133 samples, 45.55%)</title><rect x="6.8493%" y="132" width="45.5479%" height="15" fill="rgb(221,220,41)"/><text x="7.0993%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229)</text></g><g><title>predict_proba (sklearn/naive_bayes.py:115) (133 samples, 45.55%)</title><rect x="6.8493%" y="148" width="45.5479%" height="15" fill="rgb(218,133,21)"/><text x="7.0993%" y="158.50">predict_proba (sklearn/naive_bayes.py:115)</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (12 samples, 4.11%)</title><rect x="48.2877%" y="164" width="4.1096%" height="15" fill="rgb(221,193,43)"/><text x="48.5377%" y="174.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (12 samples, 4.11%)</title><rect x="48.2877%" y="180" width="4.1096%" height="15" fill="rgb(240,128,52)"/><text x="48.5377%" y="190.50">PyUF..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (12 samples, 4.11%)</title><rect x="48.2877%" y="196" width="4.1096%" height="15" fill="rgb(253,114,12)"/><text x="48.5377%" y="206.50">exec..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (12 samples, 4.11%)</title><rect x="48.2877%" y="212" width="4.1096%" height="15" fill="rgb(215,223,47)"/><text x="48.5377%" y="222.50">triv..</text></g><g><title>PyUFunc_d_d (loops.c.src:190) (12 samples, 4.11%)</title><rect x="48.2877%" y="228" width="4.1096%" height="15" fill="rgb(248,225,23)"/><text x="48.5377%" y="238.50">PyUF..</text></g><g><title>exp (libm-2.29.so) (12 samples, 4.11%)</title><rect x="48.2877%" y="244" width="4.1096%" height="15" fill="rgb(250,108,0)"/><text x="48.5377%" y="254.50">exp ..</text></g><g><title>compiled_run (&lt;string&gt;:12) (3 samples, 1.03%)</title><rect x="53.4247%" y="180" width="1.0274%" height="15" fill="rgb(228,208,7)"/><text x="53.6747%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_greater.py:17) (3 samples, 1.03%)</title><rect x="53.4247%" y="196" width="1.0274%" height="15" fill="rgb(244,45,10)"/><text x="53.6747%" y="206.50"></text></g><g><title>compiled_run (&lt;string&gt;:13) (3 samples, 1.03%)</title><rect x="54.4521%" y="180" width="1.0274%" height="15" fill="rgb(207,125,25)"/><text x="54.7021%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:39) (3 samples, 1.03%)</title><rect x="54.4521%" y="196" width="1.0274%" height="15" fill="rgb(210,195,18)"/><text x="54.7021%" y="206.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (3 samples, 1.03%)</title><rect x="54.4521%" y="212" width="1.0274%" height="15" fill="rgb(249,80,12)"/><text x="54.7021%" y="222.50"></text></g><g><title>compiled_run (&lt;string&gt;:18) (4 samples, 1.37%)</title><rect x="56.1644%" y="180" width="1.3699%" height="15" fill="rgb(221,65,9)"/><text x="56.4144%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (4 samples, 1.37%)</title><rect x="56.1644%" y="196" width="1.3699%" height="15" fill="rgb(235,49,36)"/><text x="56.4144%" y="206.50"></text></g><g><title>compiled_run (&lt;string&gt;:20) (6 samples, 2.05%)</title><rect x="58.2192%" y="180" width="2.0548%" height="15" fill="rgb(225,32,20)"/><text x="58.4692%" y="190.50">c..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (6 samples, 2.05%)</title><rect x="58.2192%" y="196" width="2.0548%" height="15" fill="rgb(215,141,46)"/><text x="58.4692%" y="206.50">_..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (6 samples, 2.05%)</title><rect x="58.2192%" y="212" width="2.0548%" height="15" fill="rgb(250,160,47)"/><text x="58.4692%" y="222.50">n..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (6 samples, 2.05%)</title><rect x="58.2192%" y="228" width="2.0548%" height="15" fill="rgb(216,222,40)"/><text x="58.4692%" y="238.50">d..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (3 samples, 1.03%)</title><rect x="59.2466%" y="244" width="1.0274%" height="15" fill="rgb(234,217,39)"/><text x="59.4966%" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (3 samples, 1.03%)</title><rect x="61.3014%" y="244" width="1.0274%" height="15" fill="rgb(207,178,40)"/><text x="61.5514%" y="254.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c:1316) (3 samples, 1.03%)</title><rect x="61.3014%" y="260" width="1.0274%" height="15" fill="rgb(221,136,13)"/><text x="61.5514%" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (3 samples, 1.03%)</title><rect x="61.3014%" y="276" width="1.0274%" height="15" fill="rgb(249,199,10)"/><text x="61.5514%" y="286.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (3 samples, 1.03%)</title><rect x="61.3014%" y="292" width="1.0274%" height="15" fill="rgb(249,222,13)"/><text x="61.5514%" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 1.03%)</title><rect x="62.3288%" y="260" width="1.0274%" height="15" fill="rgb(244,185,38)"/><text x="62.5788%" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 2.40%)</title><rect x="61.3014%" y="228" width="2.3973%" height="15" fill="rgb(236,202,9)"/><text x="61.5514%" y="238.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 1.37%)</title><rect x="62.3288%" y="244" width="1.3699%" height="15" fill="rgb(250,229,37)"/><text x="62.5788%" y="254.50"></text></g><g><title>compiled_run (&lt;string&gt;:21) (11 samples, 3.77%)</title><rect x="60.2740%" y="180" width="3.7671%" height="15" fill="rgb(206,174,23)"/><text x="60.5240%" y="190.50">comp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sum.py:16) (11 samples, 3.77%)</title><rect x="60.2740%" y="196" width="3.7671%" height="15" fill="rgb(211,33,43)"/><text x="60.5240%" y="206.50">_run..</text></g><g><title>array_add (number.c:330) (11 samples, 3.77%)</title><rect x="60.2740%" y="212" width="3.7671%" height="15" fill="rgb(245,58,50)"/><text x="60.5240%" y="222.50">arra..</text></g><g><title>compiled_run (&lt;string&gt;:23) (4 samples, 1.37%)</title><rect x="64.7260%" y="180" width="1.3699%" height="15" fill="rgb(244,68,36)"/><text x="64.9760%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (4 samples, 1.37%)</title><rect x="64.7260%" y="196" width="1.3699%" height="15" fill="rgb(232,229,15)"/><text x="64.9760%" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (4 samples, 1.37%)</title><rect x="64.7260%" y="212" width="1.3699%" height="15" fill="rgb(254,30,23)"/><text x="64.9760%" y="222.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:13) (4 samples, 1.37%)</title><rect x="64.7260%" y="228" width="1.3699%" height="15" fill="rgb(235,160,14)"/><text x="64.9760%" y="238.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (3 samples, 1.03%)</title><rect x="65.0685%" y="244" width="1.0274%" height="15" fill="rgb(212,155,44)"/><text x="65.3185%" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 1.03%)</title><rect x="65.0685%" y="260" width="1.0274%" height="15" fill="rgb(226,2,50)"/><text x="65.3185%" y="270.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py:1153) (3 samples, 1.03%)</title><rect x="65.0685%" y="276" width="1.0274%" height="15" fill="rgb(234,177,6)"/><text x="65.3185%" y="286.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 1.03%)</title><rect x="65.0685%" y="292" width="1.0274%" height="15" fill="rgb(217,24,9)"/><text x="65.3185%" y="302.50"></text></g><g><title>array_argmax (methods.c:302) (3 samples, 1.03%)</title><rect x="65.0685%" y="308" width="1.0274%" height="15" fill="rgb(220,13,46)"/><text x="65.3185%" y="318.50"></text></g><g><title>PyArray_ArgMax (calculation.c:131) (3 samples, 1.03%)</title><rect x="65.0685%" y="324" width="1.0274%" height="15" fill="rgb(239,221,27)"/><text x="65.3185%" y="334.50"></text></g><g><title>FLOAT_exp (loops.c.src:1602) (10 samples, 3.42%)</title><rect x="66.4384%" y="276" width="3.4247%" height="15" fill="rgb(222,198,25)"/><text x="66.6884%" y="286.50">FLO..</text></g><g><title>expf (libm-2.29.so) (9 samples, 3.08%)</title><rect x="66.7808%" y="292" width="3.0822%" height="15" fill="rgb(211,99,13)"/><text x="67.0308%" y="302.50">exp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_log_sum_exp.py:30) (12 samples, 4.11%)</title><rect x="66.0959%" y="196" width="4.1096%" height="15" fill="rgb(232,111,31)"/><text x="66.3459%" y="206.50">_run..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (12 samples, 4.11%)</title><rect x="66.0959%" y="212" width="4.1096%" height="15" fill="rgb(245,82,37)"/><text x="66.3459%" y="222.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (11 samples, 3.77%)</title><rect x="66.4384%" y="228" width="3.7671%" height="15" fill="rgb(227,149,46)"/><text x="66.6884%" y="238.50">PyUF..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (11 samples, 3.77%)</title><rect x="66.4384%" y="244" width="3.7671%" height="15" fill="rgb(218,36,50)"/><text x="66.6884%" y="254.50">exec..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (11 samples, 3.77%)</title><rect x="66.4384%" y="260" width="3.7671%" height="15" fill="rgb(226,80,48)"/><text x="66.6884%" y="270.50">triv..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (10 samples, 3.42%)</title><rect x="70.5479%" y="212" width="3.4247%" height="15" fill="rgb(238,224,15)"/><text x="70.7979%" y="222.50">sum..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (9 samples, 3.08%)</title><rect x="70.8904%" y="228" width="3.0822%" height="15" fill="rgb(241,136,10)"/><text x="71.1404%" y="238.50">arr..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (9 samples, 3.08%)</title><rect x="70.8904%" y="244" width="3.0822%" height="15" fill="rgb(208,32,45)"/><text x="71.1404%" y="254.50">sum..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (7 samples, 2.40%)</title><rect x="71.5753%" y="260" width="2.3973%" height="15" fill="rgb(207,135,9)"/><text x="71.8253%" y="270.50">_w..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (5 samples, 1.71%)</title><rect x="72.2603%" y="276" width="1.7123%" height="15" fill="rgb(206,86,44)"/><text x="72.5103%" y="286.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (4 samples, 1.37%)</title><rect x="72.6027%" y="292" width="1.3699%" height="15" fill="rgb(245,177,15)"/><text x="72.8527%" y="302.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (4 samples, 1.37%)</title><rect x="72.6027%" y="308" width="1.3699%" height="15" fill="rgb(206,64,50)"/><text x="72.8527%" y="318.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (3 samples, 1.03%)</title><rect x="72.9452%" y="324" width="1.0274%" height="15" fill="rgb(234,36,40)"/><text x="73.1952%" y="334.50"></text></g><g><title>compiled_run (&lt;string&gt;:24) (26 samples, 8.90%)</title><rect x="66.0959%" y="180" width="8.9041%" height="15" fill="rgb(213,64,8)"/><text x="66.3459%" y="190.50">compiled_run ..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_log_sum_exp.py:33) (13 samples, 4.45%)</title><rect x="70.5479%" y="196" width="4.4521%" height="15" fill="rgb(210,75,36)"/><text x="70.7979%" y="206.50">_run ..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 1.03%)</title><rect x="73.9726%" y="212" width="1.0274%" height="15" fill="rgb(229,88,21)"/><text x="74.2226%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 1.03%)</title><rect x="73.9726%" y="228" width="1.0274%" height="15" fill="rgb(252,204,47)"/><text x="74.2226%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (3 samples, 1.03%)</title><rect x="73.9726%" y="244" width="1.0274%" height="15" fill="rgb(208,77,27)"/><text x="74.2226%" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (3 samples, 1.03%)</title><rect x="73.9726%" y="260" width="1.0274%" height="15" fill="rgb(221,76,26)"/><text x="74.2226%" y="270.50"></text></g><g><title>FLOAT_log (loops.c.src:1602) (3 samples, 1.03%)</title><rect x="73.9726%" y="276" width="1.0274%" height="15" fill="rgb(225,139,18)"/><text x="74.2226%" y="286.50"></text></g><g><title>compiled_run (&lt;string&gt;:27) (16 samples, 5.48%)</title><rect x="75.6849%" y="180" width="5.4795%" height="15" fill="rgb(230,137,11)"/><text x="75.9349%" y="190.50">compile..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_exp.py:20) (16 samples, 5.48%)</title><rect x="75.6849%" y="196" width="5.4795%" height="15" fill="rgb(212,28,1)"/><text x="75.9349%" y="206.50">_run (m..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (16 samples, 5.48%)</title><rect x="75.6849%" y="212" width="5.4795%" height="15" fill="rgb(248,164,17)"/><text x="75.9349%" y="222.50">ufunc_g..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (15 samples, 5.14%)</title><rect x="76.0274%" y="228" width="5.1370%" height="15" fill="rgb(222,171,42)"/><text x="76.2774%" y="238.50">PyUFun..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (15 samples, 5.14%)</title><rect x="76.0274%" y="244" width="5.1370%" height="15" fill="rgb(243,84,45)"/><text x="76.2774%" y="254.50">execut..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (15 samples, 5.14%)</title><rect x="76.0274%" y="260" width="5.1370%" height="15" fill="rgb(252,49,23)"/><text x="76.2774%" y="270.50">trivia..</text></g><g><title>FLOAT_exp (loops.c.src:1602) (15 samples, 5.14%)</title><rect x="76.0274%" y="276" width="5.1370%" height="15" fill="rgb(215,19,7)"/><text x="76.2774%" y="286.50">FLOAT_..</text></g><g><title>expf (libm-2.29.so) (14 samples, 4.79%)</title><rect x="76.3699%" y="292" width="4.7945%" height="15" fill="rgb(238,81,41)"/><text x="76.6199%" y="302.50">expf (..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (4 samples, 1.37%)</title><rect x="82.8767%" y="308" width="1.3699%" height="15" fill="rgb(210,199,37)"/><text x="83.1267%" y="318.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (8 samples, 2.74%)</title><rect x="82.1918%" y="260" width="2.7397%" height="15" fill="rgb(244,192,49)"/><text x="82.4418%" y="270.50">Py..</text></g><g><title>PyArray_DTypeFromObject (common.c:108) (8 samples, 2.74%)</title><rect x="82.1918%" y="276" width="2.7397%" height="15" fill="rgb(226,211,11)"/><text x="82.4418%" y="286.50">Py..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (7 samples, 2.40%)</title><rect x="82.5342%" y="292" width="2.3973%" height="15" fill="rgb(236,162,54)"/><text x="82.7842%" y="302.50">Py..</text></g><g><title>PyArray_FromAny (ctors.c:1855) (13 samples, 4.45%)</title><rect x="82.1918%" y="244" width="4.4521%" height="15" fill="rgb(220,229,9)"/><text x="82.4418%" y="254.50">PyArr..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (5 samples, 1.71%)</title><rect x="84.9315%" y="260" width="1.7123%" height="15" fill="rgb(250,87,22)"/><text x="85.1815%" y="270.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:216) (3 samples, 1.03%)</title><rect x="86.9863%" y="308" width="1.0274%" height="15" fill="rgb(239,43,17)"/><text x="87.2363%" y="318.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src:123) (3 samples, 1.03%)</title><rect x="86.9863%" y="324" width="1.0274%" height="15" fill="rgb(231,177,25)"/><text x="87.2363%" y="334.50"></text></g><g><title>array_subscript (mapping.c:1539) (19 samples, 6.51%)</title><rect x="82.1918%" y="212" width="6.5068%" height="15" fill="rgb(219,179,1)"/><text x="82.4418%" y="222.50">array_sub..</text></g><g><title>prepare_index (mapping.c:516) (19 samples, 6.51%)</title><rect x="82.1918%" y="228" width="6.5068%" height="15" fill="rgb(238,219,53)"/><text x="82.4418%" y="238.50">prepare_i..</text></g><g><title>PyArray_FromAny (ctors.c:1938) (6 samples, 2.05%)</title><rect x="86.6438%" y="244" width="2.0548%" height="15" fill="rgb(232,167,36)"/><text x="86.8938%" y="254.50">P..</text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (6 samples, 2.05%)</title><rect x="86.6438%" y="260" width="2.0548%" height="15" fill="rgb(244,19,51)"/><text x="86.8938%" y="270.50">P..</text></g><g><title>setArrayFromSequence (ctors.c:550) (6 samples, 2.05%)</title><rect x="86.6438%" y="276" width="2.0548%" height="15" fill="rgb(224,6,22)"/><text x="86.8938%" y="286.50">s..</text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (6 samples, 2.05%)</title><rect x="86.6438%" y="292" width="2.0548%" height="15" fill="rgb(224,145,5)"/><text x="86.8938%" y="302.50">P..</text></g><g><title>compiled_run (&lt;string&gt;:28) (24 samples, 8.22%)</title><rect x="81.1644%" y="180" width="8.2192%" height="15" fill="rgb(234,130,49)"/><text x="81.4144%" y="190.50">compiled_ru..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (21 samples, 7.19%)</title><rect x="82.1918%" y="196" width="7.1918%" height="15" fill="rgb(254,6,2)"/><text x="82.4418%" y="206.50">_run (mlpr..</text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:61) (112 samples, 38.36%)</title><rect x="52.3973%" y="52" width="38.3562%" height="15" fill="rgb(208,96,46)"/><text x="52.6473%" y="62.50">&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:61)</text></g><g><title>profile_pyrtc (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:60) (112 samples, 38.36%)</title><rect x="52.3973%" y="68" width="38.3562%" height="15" fill="rgb(239,3,39)"/><text x="52.6473%" y="78.50">profile_pyrtc (bench_BernoulliNB_default_m_cl_1000_4_12_float_...</text></g><g><title>setup_profile (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:37) (111 samples, 38.01%)</title><rect x="52.7397%" y="84" width="38.0137%" height="15" fill="rgb(233,210,1)"/><text x="52.9897%" y="94.50">setup_profile (bench_BernoulliNB_default_m_cl_1000_4_12_float_..</text></g><g><title>profile (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:31) (111 samples, 38.01%)</title><rect x="52.7397%" y="100" width="38.0137%" height="15" fill="rgb(244,137,37)"/><text x="52.9897%" y="110.50">profile (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (111 samples, 38.01%)</title><rect x="52.7397%" y="116" width="38.0137%" height="15" fill="rgb(240,136,2)"/><text x="52.9897%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (111 samples, 38.01%)</title><rect x="52.7397%" y="132" width="38.0137%" height="15" fill="rgb(239,18,37)"/><text x="52.9897%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (111 samples, 38.01%)</title><rect x="52.7397%" y="148" width="38.0137%" height="15" fill="rgb(218,185,22)"/><text x="52.9897%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (110 samples, 37.67%)</title><rect x="53.0822%" y="164" width="37.6712%" height="15" fill="rgb(225,218,4)"/><text x="53.3322%" y="174.50">_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inferen..</text></g><g><title>all (292 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(230,182,32)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:68) (27 samples, 9.25%)</title><rect x="90.7534%" y="52" width="9.2466%" height="15" fill="rgb(242,56,43)"/><text x="91.0034%" y="62.50">&lt;module&gt; (ben..</text></g><g><title>profile_ort (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:67) (27 samples, 9.25%)</title><rect x="90.7534%" y="68" width="9.2466%" height="15" fill="rgb(233,99,24)"/><text x="91.0034%" y="78.50">profile_ort (..</text></g><g><title>setup_profile (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:37) (27 samples, 9.25%)</title><rect x="90.7534%" y="84" width="9.2466%" height="15" fill="rgb(234,209,42)"/><text x="91.0034%" y="94.50">setup_profile..</text></g><g><title>profile (bench_BernoulliNB_default_m_cl_1000_4_12_float_.py:31) (27 samples, 9.25%)</title><rect x="90.7534%" y="100" width="9.2466%" height="15" fill="rgb(227,7,12)"/><text x="91.0034%" y="110.50">profile (benc..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (26 samples, 8.90%)</title><rect x="91.0959%" y="116" width="8.9041%" height="15" fill="rgb(245,203,43)"/><text x="91.3459%" y="126.50">time_predict ..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (26 samples, 8.90%)</title><rect x="91.0959%" y="132" width="8.9041%" height="15" fill="rgb(238,205,33)"/><text x="91.3459%" y="142.50">&lt;lambda&gt; (mlp..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (26 samples, 8.90%)</title><rect x="91.0959%" y="148" width="8.9041%" height="15" fill="rgb(231,56,7)"/><text x="91.3459%" y="158.50">run (mlprodic..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (26 samples, 8.90%)</title><rect x="91.0959%" y="164" width="8.9041%" height="15" fill="rgb(244,186,29)"/><text x="91.3459%" y="174.50">_run_whole_ru..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (26 samples, 8.90%)</title><rect x="91.0959%" y="180" width="8.9041%" height="15" fill="rgb(234,111,31)"/><text x="91.3459%" y="190.50">run (mlprodic..</text></g><g><title>run (onnxruntime/capi/session.py:140) (26 samples, 8.90%)</title><rect x="91.0959%" y="196" width="8.9041%" height="15" fill="rgb(241,149,10)"/><text x="91.3459%" y="206.50">run (onnxrunt..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 8.56%)</title><rect x="91.4384%" y="212" width="8.5616%" height="15" fill="rgb(249,206,44)"/><text x="91.6884%" y="222.50">pybind11::cp..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 8.56%)</title><rect x="91.4384%" y="228" width="8.5616%" height="15" fill="rgb(251,153,30)"/><text x="91.6884%" y="238.50">void pybind1..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 8.56%)</title><rect x="91.4384%" y="244" width="8.5616%" height="15" fill="rgb(239,152,38)"/><text x="91.6884%" y="254.50">onnxruntime:..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 8.56%)</title><rect x="91.4384%" y="260" width="8.5616%" height="15" fill="rgb(249,139,47)"/><text x="91.6884%" y="270.50">onnxruntime:..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 8.56%)</title><rect x="91.4384%" y="276" width="8.5616%" height="15" fill="rgb(244,64,35)"/><text x="91.6884%" y="286.50">onnxruntime:..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 8.56%)</title><rect x="91.4384%" y="292" width="8.5616%" height="15" fill="rgb(216,46,15)"/><text x="91.6884%" y="302.50">onnxruntime:..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 8.56%)</title><rect x="91.4384%" y="308" width="8.5616%" height="15" fill="rgb(250,74,19)"/><text x="91.6884%" y="318.50">onnxruntime:..</text></g><g><title>onnxruntime::FunctionKernel::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 8.56%)</title><rect x="91.4384%" y="324" width="8.5616%" height="15" fill="rgb(249,42,33)"/><text x="91.6884%" y="334.50">onnxruntime:..</text></g><g><title>std::_Function_handler&lt;onnxruntime::common::Status(void*, OrtApi const*, OrtKernelContext*), onnxruntime::DNNLExecutionProvider::Compile(std::vector&lt;onnxruntime::Node*, std::allocator&lt;onnxruntime::Node*&gt; &gt; const&amp;, std::vector&lt;onnxruntime::NodeComputeInfo, std::allocator&lt;onnxruntime::NodeComputeInfo&gt; &gt;&amp;)::{lambda(void*, OrtApi const*, OrtKernelContext*)#3}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 8.56%)</title><rect x="91.4384%" y="340" width="8.5616%" height="15" fill="rgb(242,149,17)"/><text x="91.6884%" y="350.50">std::_Functi..</text></g><g><title>onnxruntime::ort_dnnl::DnnlFuncKernel&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 8.56%)</title><rect x="91.4384%" y="356" width="8.5616%" height="15" fill="rgb(244,29,21)"/><text x="91.6884%" y="366.50">onnxruntime:..</text></g><g><title>dnnl_primitive_execute (onnxruntime/capi/libdnnl.so.1) (25 samples, 8.56%)</title><rect x="91.4384%" y="372" width="8.5616%" height="15" fill="rgb(220,130,37)"/><text x="91.6884%" y="382.50">dnnl_primiti..</text></g><g><title>dnnl_primitive::execute (onnxruntime/capi/libdnnl.so.1) (24 samples, 8.22%)</title><rect x="91.7808%" y="388" width="8.2192%" height="15" fill="rgb(211,67,2)"/><text x="92.0308%" y="398.50">dnnl_primit..</text></g><g><title>dnnl::impl::cpu::simple_sum_t&lt;(dnnl_data_type_t)3, (dnnl_data_type_t)3&gt;::execute (onnxruntime/capi/libdnnl.so.1) (24 samples, 8.22%)</title><rect x="91.7808%" y="404" width="8.2192%" height="15" fill="rgb(235,68,52)"/><text x="92.0308%" y="414.50">dnnl::impl:..</text></g><g><title>GOMP_parallel@GOMP_4.0 (libiomp5.so) (24 samples, 8.22%)</title><rect x="91.7808%" y="420" width="8.2192%" height="15" fill="rgb(246,142,3)"/><text x="92.0308%" y="430.50">GOMP_parall..</text></g><g><title>__kmp_join_call (libiomp5.so) (24 samples, 8.22%)</title><rect x="91.7808%" y="436" width="8.2192%" height="15" fill="rgb(241,25,7)"/><text x="92.0308%" y="446.50">__kmp_join_..</text></g><g><title>__kmp_internal_join (libiomp5.so) (24 samples, 8.22%)</title><rect x="91.7808%" y="452" width="8.2192%" height="15" fill="rgb(242,119,39)"/><text x="92.0308%" y="462.50">__kmp_inter..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (24 samples, 8.22%)</title><rect x="91.7808%" y="468" width="8.2192%" height="15" fill="rgb(241,98,45)"/><text x="92.0308%" y="478.50">__kmp_join_..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (24 samples, 8.22%)</title><rect x="91.7808%" y="484" width="8.2192%" height="15" fill="rgb(254,28,30)"/><text x="92.0308%" y="494.50">_INTERNAL_2..</text></g></svg></svg>