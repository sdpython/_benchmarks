<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1206" onload="init(evt)" viewBox="0 0 1200 1206" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1206" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1189.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1189.00"> </text><g id="frames"><g><title>0x7f9abe0da0dd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="12" y="324" width="1" height="15" fill="rgb(226,163,14)"/><text x="15.00" y="334.50"></text></g><g><title>0x7f9abe0b1323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="15" y="356" width="1" height="15" fill="rgb(212,166,9)"/><text x="18.00" y="366.50"></text></g><g><title>0x7f9abe0b1494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.33%)</title><rect x="13" y="340" width="4" height="15" fill="rgb(214,133,24)"/><text x="16.00" y="350.50"></text></g><g><title>0x7f9abe0b150f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.19%)</title><rect x="17" y="340" width="3" height="15" fill="rgb(207,175,10)"/><text x="20.00" y="350.50"></text></g><g><title>0x7f9abe0da100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 0.62%)</title><rect x="13" y="324" width="7" height="15" fill="rgb(250,8,53)"/><text x="16.00" y="334.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (18 samples, 0.85%)</title><rect x="11" y="148" width="10" height="15" fill="rgb(214,217,14)"/><text x="14.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (16 samples, 0.76%)</title><rect x="12" y="164" width="9" height="15" fill="rgb(207,80,26)"/><text x="15.00" y="174.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (16 samples, 0.76%)</title><rect x="12" y="180" width="9" height="15" fill="rgb(237,133,34)"/><text x="15.00" y="190.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (16 samples, 0.76%)</title><rect x="12" y="196" width="9" height="15" fill="rgb(209,82,5)"/><text x="15.00" y="206.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (16 samples, 0.76%)</title><rect x="12" y="212" width="9" height="15" fill="rgb(240,3,28)"/><text x="15.00" y="222.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (16 samples, 0.76%)</title><rect x="12" y="228" width="9" height="15" fill="rgb(232,226,44)"/><text x="15.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (16 samples, 0.76%)</title><rect x="12" y="244" width="9" height="15" fill="rgb(208,144,28)"/><text x="15.00" y="254.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (16 samples, 0.76%)</title><rect x="12" y="260" width="9" height="15" fill="rgb(253,74,25)"/><text x="15.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (16 samples, 0.76%)</title><rect x="12" y="276" width="9" height="15" fill="rgb(217,5,50)"/><text x="15.00" y="286.50"></text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (16 samples, 0.76%)</title><rect x="12" y="292" width="9" height="15" fill="rgb(219,20,34)"/><text x="15.00" y="302.50"></text></g><g><title>0x7f9abe0dce14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (16 samples, 0.76%)</title><rect x="12" y="308" width="9" height="15" fill="rgb(215,229,27)"/><text x="15.00" y="318.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:18) (21 samples, 1.00%)</title><rect x="10" y="100" width="12" height="15" fill="rgb(220,109,13)"/><text x="13.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (21 samples, 1.00%)</title><rect x="10" y="116" width="12" height="15" fill="rgb(210,63,29)"/><text x="13.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (21 samples, 1.00%)</title><rect x="10" y="132" width="12" height="15" fill="rgb(217,112,17)"/><text x="13.00" y="142.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (2 samples, 0.09%)</title><rect x="22" y="164" width="2" height="15" fill="rgb(234,63,44)"/><text x="25.00" y="174.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:660) (3 samples, 0.14%)</title><rect x="25" y="164" width="1" height="15" fill="rgb(248,215,8)"/><text x="28.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:502) (2 samples, 0.09%)</title><rect x="27" y="356" width="2" height="15" fill="rgb(253,194,30)"/><text x="30.00" y="366.50"></text></g><g><title>check_array (sklearn/utils/validation.py:515) (3 samples, 0.14%)</title><rect x="29" y="356" width="1" height="15" fill="rgb(246,185,52)"/><text x="32.00" y="366.50"></text></g><g><title>asarray (numpy/core/_asarray.py:85) (3 samples, 0.14%)</title><rect x="29" y="372" width="1" height="15" fill="rgb(241,84,42)"/><text x="32.00" y="382.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1734) (2 samples, 0.09%)</title><rect x="29" y="388" width="1" height="15" fill="rgb(249,209,3)"/><text x="32.00" y="398.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c:2041) (2 samples, 0.09%)</title><rect x="29" y="404" width="1" height="15" fill="rgb(210,29,3)"/><text x="32.00" y="414.50"></text></g><g><title>PyArray_FromAny (ctors.c:1966) (2 samples, 0.09%)</title><rect x="29" y="420" width="1" height="15" fill="rgb(232,24,29)"/><text x="32.00" y="430.50"></text></g><g><title>0x7f9abe0d832c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.38%)</title><rect x="27" y="324" width="5" height="15" fill="rgb(226,215,8)"/><text x="30.00" y="334.50"></text></g><g><title>0x7f9abe0a35cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.38%)</title><rect x="27" y="340" width="5" height="15" fill="rgb(241,45,41)"/><text x="30.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (2 samples, 0.09%)</title><rect x="31" y="356" width="1" height="15" fill="rgb(235,123,28)"/><text x="34.00" y="366.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (2 samples, 0.09%)</title><rect x="31" y="372" width="1" height="15" fill="rgb(212,33,27)"/><text x="34.00" y="382.50"></text></g><g><title>0x7f9abe0b5f86 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="32" y="356" width="2" height="15" fill="rgb(208,52,19)"/><text x="35.00" y="366.50"></text></g><g><title>0x7f9abe0d8680 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="32" y="324" width="2" height="15" fill="rgb(250,11,16)"/><text x="35.00" y="334.50"></text></g><g><title>0x7f9abe0cc551 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="32" y="340" width="2" height="15" fill="rgb(220,163,33)"/><text x="35.00" y="350.50"></text></g><g><title>0x7f9abe0d3ab9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="34" y="372" width="2" height="15" fill="rgb(243,182,7)"/><text x="37.00" y="382.50"></text></g><g><title>full (numpy/core/numeric.py:333) (3 samples, 0.14%)</title><rect x="34" y="388" width="2" height="15" fill="rgb(216,79,49)"/><text x="37.00" y="398.50"></text></g><g><title>copyto (&lt;__array_function__ internals&gt;:6) (3 samples, 0.14%)</title><rect x="34" y="404" width="2" height="15" fill="rgb(237,209,5)"/><text x="37.00" y="414.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.09%)</title><rect x="35" y="420" width="1" height="15" fill="rgb(220,210,32)"/><text x="38.00" y="430.50"></text></g><g><title>array_copyto (multiarraymodule.c:1788) (2 samples, 0.09%)</title><rect x="35" y="436" width="1" height="15" fill="rgb(253,216,5)"/><text x="38.00" y="446.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:264) (2 samples, 0.09%)</title><rect x="35" y="452" width="1" height="15" fill="rgb(209,64,51)"/><text x="38.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (2 samples, 0.09%)</title><rect x="35" y="468" width="1" height="15" fill="rgb(243,102,6)"/><text x="38.00" y="478.50"></text></g><g><title>0x7f9abe0d8708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.19%)</title><rect x="34" y="324" width="2" height="15" fill="rgb(227,116,29)"/><text x="37.00" y="334.50"></text></g><g><title>0x7f9abe0a35cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.19%)</title><rect x="34" y="340" width="2" height="15" fill="rgb(222,226,12)"/><text x="37.00" y="350.50"></text></g><g><title>0x7f9abe0d473a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.19%)</title><rect x="34" y="356" width="2" height="15" fill="rgb(208,160,15)"/><text x="37.00" y="366.50"></text></g><g><title>0x7f9abe0da0dd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.33%)</title><rect x="36" y="324" width="4" height="15" fill="rgb(216,160,23)"/><text x="39.00" y="334.50"></text></g><g><title>0x7f9abe0aefc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="39" y="340" width="1" height="15" fill="rgb(222,187,30)"/><text x="42.00" y="350.50"></text></g><g><title>pow (libm-2.29.so) (3 samples, 0.14%)</title><rect x="39" y="356" width="1" height="15" fill="rgb(223,20,53)"/><text x="42.00" y="366.50"></text></g><g><title>0x7f9abe0b1426 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.43%)</title><rect x="41" y="340" width="5" height="15" fill="rgb(231,171,52)"/><text x="44.00" y="350.50"></text></g><g><title>0x7f9abe0aefc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.28%)</title><rect x="43" y="356" width="3" height="15" fill="rgb(236,68,27)"/><text x="46.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (6 samples, 0.28%)</title><rect x="43" y="372" width="3" height="15" fill="rgb(227,130,19)"/><text x="46.00" y="382.50"></text></g><g><title>0x7f9ae3e2edc4 (libm-2.29.so) (2 samples, 0.09%)</title><rect x="45" y="388" width="1" height="15" fill="rgb(232,227,3)"/><text x="48.00" y="398.50"></text></g><g><title>0x7f9abe0b1454 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.24%)</title><rect x="46" y="340" width="3" height="15" fill="rgb(230,42,26)"/><text x="49.00" y="350.50"></text></g><g><title>0x7f9abe0aefc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.19%)</title><rect x="46" y="356" width="3" height="15" fill="rgb(232,198,42)"/><text x="49.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (4 samples, 0.19%)</title><rect x="46" y="372" width="3" height="15" fill="rgb(239,114,50)"/><text x="49.00" y="382.50"></text></g><g><title>0x7f9abe0b127d (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="50" y="356" width="2" height="15" fill="rgb(234,160,17)"/><text x="53.00" y="366.50"></text></g><g><title>0x7f9abe0b12ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.43%)</title><rect x="53" y="356" width="5" height="15" fill="rgb(253,105,30)"/><text x="56.00" y="366.50"></text></g><g><title>0x7f9abe0b12b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="58" y="356" width="1" height="15" fill="rgb(216,124,25)"/><text x="61.00" y="366.50"></text></g><g><title>0x7f9abe0b12bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.19%)</title><rect x="59" y="356" width="2" height="15" fill="rgb(208,203,41)"/><text x="62.00" y="366.50"></text></g><g><title>0x7f9abe0b12c1 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="61" y="356" width="2" height="15" fill="rgb(209,130,32)"/><text x="64.00" y="366.50"></text></g><g><title>0x7f9abe0b12d9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="63" y="356" width="1" height="15" fill="rgb(239,215,19)"/><text x="66.00" y="366.50"></text></g><g><title>0x7f9abe0b1312 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="66" y="356" width="1" height="15" fill="rgb(253,95,4)"/><text x="69.00" y="366.50"></text></g><g><title>0x7f9abe0b1323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.19%)</title><rect x="67" y="356" width="2" height="15" fill="rgb(253,65,46)"/><text x="70.00" y="366.50"></text></g><g><title>0x7f9abe0b1494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (42 samples, 1.99%)</title><rect x="49" y="340" width="23" height="15" fill="rgb(254,17,46)"/><text x="52.00" y="350.50">0..</text></g><g><title>0x7f9abe0b12bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="72" y="356" width="2" height="15" fill="rgb(236,66,24)"/><text x="75.00" y="366.50"></text></g><g><title>0x7f9abe0b14bd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.24%)</title><rect x="72" y="340" width="3" height="15" fill="rgb(240,194,50)"/><text x="75.00" y="350.50"></text></g><g><title>0x7f9abe0b1290 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="77" y="356" width="1" height="15" fill="rgb(214,174,22)"/><text x="80.00" y="366.50"></text></g><g><title>0x7f9abe0b12ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="78" y="356" width="2" height="15" fill="rgb(247,16,8)"/><text x="81.00" y="366.50"></text></g><g><title>0x7f9abe0b12b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.19%)</title><rect x="80" y="356" width="2" height="15" fill="rgb(213,97,38)"/><text x="83.00" y="366.50"></text></g><g><title>0x7f9abe0b12bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="82" y="356" width="1" height="15" fill="rgb(238,56,13)"/><text x="85.00" y="366.50"></text></g><g><title>0x7f9abe0b12c1 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="83" y="356" width="1" height="15" fill="rgb(205,212,5)"/><text x="86.00" y="366.50"></text></g><g><title>0x7f9abe0b12fb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="86" y="356" width="1" height="15" fill="rgb(221,52,11)"/><text x="89.00" y="366.50"></text></g><g><title>0x7f9abe0b1320 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="87" y="356" width="1" height="15" fill="rgb(237,122,31)"/><text x="90.00" y="366.50"></text></g><g><title>0x7f9abe0afab4 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.14%)</title><rect x="90" y="372" width="1" height="15" fill="rgb(242,35,7)"/><text x="93.00" y="382.50"></text></g><g><title>0x7f9abe0b1323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.38%)</title><rect x="88" y="356" width="4" height="15" fill="rgb(211,155,52)"/><text x="91.00" y="366.50"></text></g><g><title>0x7f9abe0b134c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="93" y="356" width="1" height="15" fill="rgb(228,225,29)"/><text x="96.00" y="366.50"></text></g><g><title>0x7f9abe0b150f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (35 samples, 1.66%)</title><rect x="75" y="340" width="20" height="15" fill="rgb(213,88,32)"/><text x="78.00" y="350.50"></text></g><g><title>0x7f9abe0da100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (100 samples, 4.75%)</title><rect x="41" y="324" width="56" height="15" fill="rgb(207,198,23)"/><text x="44.00" y="334.50">0x7f9..</text></g><g><title>0x7f9abe0b1538 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.19%)</title><rect x="95" y="340" width="2" height="15" fill="rgb(227,106,35)"/><text x="98.00" y="350.50"></text></g><g><title>0x7f9abe0db8cc (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="97" y="324" width="1" height="15" fill="rgb(225,118,37)"/><text x="100.00" y="334.50"></text></g><g><title>0x7f9abe0a4d53 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="97" y="340" width="1" height="15" fill="rgb(208,49,12)"/><text x="100.00" y="350.50"></text></g><g><title>0x7f9abe53be62 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="97" y="356" width="1" height="15" fill="rgb(211,99,10)"/><text x="100.00" y="366.50"></text></g><g><title>0x7f9abe51d654 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="97" y="372" width="1" height="15" fill="rgb(247,102,39)"/><text x="100.00" y="382.50"></text></g><g><title>0x7f9abe524eaf (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="97" y="388" width="1" height="15" fill="rgb(247,169,29)"/><text x="100.00" y="398.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.09%)</title><rect x="97" y="404" width="1" height="15" fill="rgb(234,222,8)"/><text x="100.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (2 samples, 0.09%)</title><rect x="97" y="420" width="1" height="15" fill="rgb(243,36,45)"/><text x="100.00" y="430.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (2 samples, 0.09%)</title><rect x="97" y="436" width="1" height="15" fill="rgb(222,130,6)"/><text x="100.00" y="446.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (2 samples, 0.09%)</title><rect x="97" y="452" width="1" height="15" fill="rgb(225,209,7)"/><text x="100.00" y="462.50"></text></g><g><title>DOUBLE_sqrt (loops.c.src:1584) (2 samples, 0.09%)</title><rect x="97" y="468" width="1" height="15" fill="rgb(243,127,29)"/><text x="100.00" y="478.50"></text></g><g><title>run_unary_simd_sqrt_DOUBLE (simd.inc.src:195) (2 samples, 0.09%)</title><rect x="97" y="484" width="1" height="15" fill="rgb(234,89,21)"/><text x="100.00" y="494.50"></text></g><g><title>sse2_sqrt_DOUBLE (simd.inc.src:1005) (2 samples, 0.09%)</title><rect x="97" y="500" width="1" height="15" fill="rgb(212,74,25)"/><text x="100.00" y="510.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (2 samples, 0.09%)</title><rect x="97" y="516" width="1" height="15" fill="rgb(233,131,25)"/><text x="100.00" y="526.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (128 samples, 6.07%)</title><rect x="27" y="180" width="72" height="15" fill="rgb(219,86,1)"/><text x="30.00" y="190.50">__call__..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (127 samples, 6.03%)</title><rect x="27" y="196" width="72" height="15" fill="rgb(208,75,19)"/><text x="30.00" y="206.50">dispatch..</text></g><g><title>_dispatch (joblib/parallel.py:753) (127 samples, 6.03%)</title><rect x="27" y="212" width="72" height="15" fill="rgb(244,224,2)"/><text x="30.00" y="222.50">_dispatc..</text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (127 samples, 6.03%)</title><rect x="27" y="228" width="72" height="15" fill="rgb(214,29,29)"/><text x="30.00" y="238.50">apply_as..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (127 samples, 6.03%)</title><rect x="27" y="244" width="72" height="15" fill="rgb(208,170,15)"/><text x="30.00" y="254.50">__init__..</text></g><g><title>__call__ (joblib/parallel.py:256) (127 samples, 6.03%)</title><rect x="27" y="260" width="72" height="15" fill="rgb(208,129,3)"/><text x="30.00" y="270.50">__call__..</text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (127 samples, 6.03%)</title><rect x="27" y="276" width="72" height="15" fill="rgb(245,64,22)"/><text x="30.00" y="286.50">&lt;listcom..</text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (127 samples, 6.03%)</title><rect x="27" y="292" width="72" height="15" fill="rgb(254,204,54)"/><text x="30.00" y="302.50">_tree_qu..</text></g><g><title>0x7f9abe0dce14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (127 samples, 6.03%)</title><rect x="27" y="308" width="72" height="15" fill="rgb(237,221,39)"/><text x="30.00" y="318.50">0x7f9abe..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (139 samples, 6.60%)</title><rect x="22" y="148" width="78" height="15" fill="rgb(224,136,41)"/><text x="25.00" y="158.50">predict_p..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (132 samples, 6.26%)</title><rect x="26" y="164" width="74" height="15" fill="rgb(209,147,10)"/><text x="29.00" y="174.50">kneighbo..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:229) (2 samples, 0.09%)</title><rect x="100" y="148" width="1" height="15" fill="rgb(252,88,33)"/><text x="103.00" y="158.50"></text></g><g><title>array_assign_subscript (mapping.c:2037) (2 samples, 0.09%)</title><rect x="102" y="164" width="2" height="15" fill="rgb(228,185,0)"/><text x="105.00" y="174.50"></text></g><g><title>mapiter_set (lowlevel_strided_loops.c.src:1566) (2 samples, 0.09%)</title><rect x="104" y="180" width="1" height="15" fill="rgb(250,34,27)"/><text x="107.00" y="190.50"></text></g><g><title>array_assign_subscript (mapping.c:2046) (3 samples, 0.14%)</title><rect x="104" y="164" width="1" height="15" fill="rgb(241,196,3)"/><text x="107.00" y="174.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c:2515) (2 samples, 0.09%)</title><rect x="107" y="180" width="1" height="15" fill="rgb(218,200,18)"/><text x="110.00" y="190.50"></text></g><g><title>array_subscript (mapping.c:1666) (4 samples, 0.19%)</title><rect x="107" y="164" width="2" height="15" fill="rgb(209,154,4)"/><text x="110.00" y="174.50"></text></g><g><title>array_subscript (mapping.c:1676) (2 samples, 0.09%)</title><rect x="109" y="164" width="1" height="15" fill="rgb(211,27,33)"/><text x="112.00" y="174.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:239) (19 samples, 0.90%)</title><rect x="101" y="148" width="11" height="15" fill="rgb(253,35,14)"/><text x="104.00" y="158.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:38) (187 samples, 8.88%)</title><rect x="10" y="52" width="105" height="15" fill="rgb(249,59,26)"/><text x="13.00" y="62.50">&lt;module&gt; (be..</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:37) (187 samples, 8.88%)</title><rect x="10" y="68" width="105" height="15" fill="rgb(217,107,6)"/><text x="13.00" y="78.50">profile_skl ..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:29) (187 samples, 8.88%)</title><rect x="10" y="84" width="105" height="15" fill="rgb(238,168,31)"/><text x="13.00" y="94.50">setup_profil..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:23) (166 samples, 7.88%)</title><rect x="22" y="100" width="93" height="15" fill="rgb(230,153,26)"/><text x="25.00" y="110.50">profile (be..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (166 samples, 7.88%)</title><rect x="22" y="116" width="93" height="15" fill="rgb(246,77,15)"/><text x="25.00" y="126.50">time_predic..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (166 samples, 7.88%)</title><rect x="22" y="132" width="93" height="15" fill="rgb(254,130,40)"/><text x="25.00" y="142.50">&lt;lambda&gt; (m..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:244) (4 samples, 0.19%)</title><rect x="113" y="148" width="2" height="15" fill="rgb(224,154,23)"/><text x="116.00" y="158.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 0.19%)</title><rect x="113" y="164" width="2" height="15" fill="rgb(248,70,30)"/><text x="116.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 0.19%)</title><rect x="113" y="180" width="2" height="15" fill="rgb(250,152,45)"/><text x="116.00" y="190.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (4 samples, 0.19%)</title><rect x="113" y="196" width="2" height="15" fill="rgb(219,176,48)"/><text x="116.00" y="206.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (2 samples, 0.09%)</title><rect x="115" y="852" width="1" height="15" fill="rgb(207,1,54)"/><text x="118.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (2 samples, 0.09%)</title><rect x="115" y="868" width="1" height="15" fill="rgb(232,132,0)"/><text x="118.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (2 samples, 0.09%)</title><rect x="115" y="884" width="1" height="15" fill="rgb(211,38,41)"/><text x="118.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (2 samples, 0.09%)</title><rect x="115" y="900" width="1" height="15" fill="rgb(251,88,12)"/><text x="118.00" y="910.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (4 samples, 0.19%)</title><rect x="115" y="820" width="2" height="15" fill="rgb(223,121,14)"/><text x="118.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (4 samples, 0.19%)</title><rect x="115" y="836" width="2" height="15" fill="rgb(234,112,7)"/><text x="118.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (2 samples, 0.09%)</title><rect x="116" y="852" width="1" height="15" fill="rgb(206,195,3)"/><text x="119.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (2 samples, 0.09%)</title><rect x="116" y="868" width="1" height="15" fill="rgb(215,55,23)"/><text x="119.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (2 samples, 0.09%)</title><rect x="116" y="884" width="1" height="15" fill="rgb(236,29,5)"/><text x="119.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py:2135) (2 samples, 0.09%)</title><rect x="116" y="900" width="1" height="15" fill="rgb(225,5,29)"/><text x="119.00" y="910.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py:2) (5 samples, 0.24%)</title><rect x="115" y="148" width="3" height="15" fill="rgb(250,185,3)"/><text x="118.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.24%)</title><rect x="115" y="164" width="3" height="15" fill="rgb(248,49,46)"/><text x="118.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.24%)</title><rect x="115" y="180" width="3" height="15" fill="rgb(234,125,24)"/><text x="118.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.24%)</title><rect x="115" y="196" width="3" height="15" fill="rgb(214,171,24)"/><text x="118.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.24%)</title><rect x="115" y="212" width="3" height="15" fill="rgb(238,177,14)"/><text x="118.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.24%)</title><rect x="115" y="228" width="3" height="15" fill="rgb(213,115,11)"/><text x="118.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.24%)</title><rect x="115" y="244" width="3" height="15" fill="rgb(247,197,2)"/><text x="118.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.24%)</title><rect x="115" y="260" width="3" height="15" fill="rgb(207,217,51)"/><text x="118.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.24%)</title><rect x="115" y="276" width="3" height="15" fill="rgb(251,184,54)"/><text x="118.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (5 samples, 0.24%)</title><rect x="115" y="292" width="3" height="15" fill="rgb(214,14,53)"/><text x="118.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.24%)</title><rect x="115" y="308" width="3" height="15" fill="rgb(214,90,4)"/><text x="118.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.24%)</title><rect x="115" y="324" width="3" height="15" fill="rgb(207,59,33)"/><text x="118.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.24%)</title><rect x="115" y="340" width="3" height="15" fill="rgb(245,201,53)"/><text x="118.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.24%)</title><rect x="115" y="356" width="3" height="15" fill="rgb(209,209,19)"/><text x="118.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.24%)</title><rect x="115" y="372" width="3" height="15" fill="rgb(205,165,43)"/><text x="118.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (5 samples, 0.24%)</title><rect x="115" y="388" width="3" height="15" fill="rgb(244,100,29)"/><text x="118.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.24%)</title><rect x="115" y="404" width="3" height="15" fill="rgb(253,49,12)"/><text x="118.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.24%)</title><rect x="115" y="420" width="3" height="15" fill="rgb(253,94,51)"/><text x="118.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.24%)</title><rect x="115" y="436" width="3" height="15" fill="rgb(229,160,44)"/><text x="118.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.24%)</title><rect x="115" y="452" width="3" height="15" fill="rgb(239,35,32)"/><text x="118.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.24%)</title><rect x="115" y="468" width="3" height="15" fill="rgb(228,161,37)"/><text x="118.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (5 samples, 0.24%)</title><rect x="115" y="484" width="3" height="15" fill="rgb(228,159,43)"/><text x="118.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.24%)</title><rect x="115" y="500" width="3" height="15" fill="rgb(223,183,52)"/><text x="118.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.24%)</title><rect x="115" y="516" width="3" height="15" fill="rgb(219,217,29)"/><text x="118.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.24%)</title><rect x="115" y="532" width="3" height="15" fill="rgb(209,75,41)"/><text x="118.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.24%)</title><rect x="115" y="548" width="3" height="15" fill="rgb(215,7,41)"/><text x="118.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.24%)</title><rect x="115" y="564" width="3" height="15" fill="rgb(217,0,17)"/><text x="118.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (5 samples, 0.24%)</title><rect x="115" y="580" width="3" height="15" fill="rgb(251,221,40)"/><text x="118.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.24%)</title><rect x="115" y="596" width="3" height="15" fill="rgb(207,30,24)"/><text x="118.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.24%)</title><rect x="115" y="612" width="3" height="15" fill="rgb(212,41,51)"/><text x="118.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.24%)</title><rect x="115" y="628" width="3" height="15" fill="rgb(236,119,34)"/><text x="118.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.24%)</title><rect x="115" y="644" width="3" height="15" fill="rgb(253,67,24)"/><text x="118.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.24%)</title><rect x="115" y="660" width="3" height="15" fill="rgb(229,24,17)"/><text x="118.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.24%)</title><rect x="115" y="676" width="3" height="15" fill="rgb(214,25,39)"/><text x="118.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.24%)</title><rect x="115" y="692" width="3" height="15" fill="rgb(237,196,6)"/><text x="118.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.24%)</title><rect x="115" y="708" width="3" height="15" fill="rgb(221,33,35)"/><text x="118.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (5 samples, 0.24%)</title><rect x="115" y="724" width="3" height="15" fill="rgb(210,83,54)"/><text x="118.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.24%)</title><rect x="115" y="740" width="3" height="15" fill="rgb(222,185,35)"/><text x="118.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.24%)</title><rect x="115" y="756" width="3" height="15" fill="rgb(213,37,40)"/><text x="118.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.24%)</title><rect x="115" y="772" width="3" height="15" fill="rgb(235,7,0)"/><text x="118.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.24%)</title><rect x="115" y="788" width="3" height="15" fill="rgb(214,128,31)"/><text x="118.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.24%)</title><rect x="115" y="804" width="3" height="15" fill="rgb(235,81,19)"/><text x="118.00" y="814.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:12) (2 samples, 0.09%)</title><rect x="118" y="484" width="1" height="15" fill="rgb(226,67,11)"/><text x="121.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.09%)</title><rect x="118" y="500" width="1" height="15" fill="rgb(210,202,43)"/><text x="121.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.09%)</title><rect x="118" y="516" width="1" height="15" fill="rgb(207,124,39)"/><text x="121.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.09%)</title><rect x="118" y="532" width="1" height="15" fill="rgb(205,99,42)"/><text x="121.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.09%)</title><rect x="118" y="548" width="1" height="15" fill="rgb(246,162,25)"/><text x="121.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="118" y="564" width="1" height="15" fill="rgb(225,125,32)"/><text x="121.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py:23) (2 samples, 0.09%)</title><rect x="118" y="580" width="1" height="15" fill="rgb(247,84,47)"/><text x="121.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.09%)</title><rect x="118" y="596" width="1" height="15" fill="rgb(231,222,21)"/><text x="121.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.09%)</title><rect x="118" y="612" width="1" height="15" fill="rgb(212,223,52)"/><text x="121.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.09%)</title><rect x="118" y="628" width="1" height="15" fill="rgb(216,203,25)"/><text x="121.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.09%)</title><rect x="118" y="644" width="1" height="15" fill="rgb(223,144,16)"/><text x="121.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="118" y="660" width="1" height="15" fill="rgb(206,44,22)"/><text x="121.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py:10) (2 samples, 0.09%)</title><rect x="118" y="676" width="1" height="15" fill="rgb(226,78,7)"/><text x="121.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.09%)</title><rect x="118" y="692" width="1" height="15" fill="rgb(231,37,17)"/><text x="121.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.09%)</title><rect x="118" y="708" width="1" height="15" fill="rgb(231,64,52)"/><text x="121.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.09%)</title><rect x="118" y="724" width="1" height="15" fill="rgb(244,146,26)"/><text x="121.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.09%)</title><rect x="118" y="740" width="1" height="15" fill="rgb(234,42,5)"/><text x="121.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="118" y="756" width="1" height="15" fill="rgb(253,107,3)"/><text x="121.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py:95) (2 samples, 0.09%)</title><rect x="118" y="772" width="1" height="15" fill="rgb(226,15,50)"/><text x="121.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.09%)</title><rect x="118" y="788" width="1" height="15" fill="rgb(216,53,37)"/><text x="121.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="118" y="804" width="1" height="15" fill="rgb(254,41,18)"/><text x="121.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.09%)</title><rect x="118" y="820" width="1" height="15" fill="rgb(238,76,38)"/><text x="121.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.09%)</title><rect x="118" y="836" width="1" height="15" fill="rgb(219,160,4)"/><text x="121.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.09%)</title><rect x="118" y="852" width="1" height="15" fill="rgb(214,108,6)"/><text x="121.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.09%)</title><rect x="118" y="868" width="1" height="15" fill="rgb(253,227,33)"/><text x="121.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="118" y="884" width="1" height="15" fill="rgb(239,223,19)"/><text x="121.00" y="894.50"></text></g><g><title>&lt;module&gt; (urllib3/contrib/pyopenssl.py:46) (2 samples, 0.09%)</title><rect x="118" y="900" width="1" height="15" fill="rgb(234,89,54)"/><text x="121.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.09%)</title><rect x="118" y="916" width="1" height="15" fill="rgb(237,63,44)"/><text x="121.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.09%)</title><rect x="118" y="932" width="1" height="15" fill="rgb(241,85,37)"/><text x="121.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="118" y="948" width="1" height="15" fill="rgb(206,88,52)"/><text x="121.00" y="958.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.09%)</title><rect x="118" y="964" width="1" height="15" fill="rgb(226,75,18)"/><text x="121.00" y="974.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.09%)</title><rect x="118" y="980" width="1" height="15" fill="rgb(246,182,36)"/><text x="121.00" y="990.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.09%)</title><rect x="118" y="996" width="1" height="15" fill="rgb(231,173,53)"/><text x="121.00" y="1006.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.09%)</title><rect x="118" y="1012" width="1" height="15" fill="rgb(234,105,16)"/><text x="121.00" y="1022.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="118" y="1028" width="1" height="15" fill="rgb(206,138,22)"/><text x="121.00" y="1038.50"></text></g><g><title>&lt;module&gt; (OpenSSL/__init__.py:8) (2 samples, 0.09%)</title><rect x="118" y="1044" width="1" height="15" fill="rgb(250,184,34)"/><text x="121.00" y="1054.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.09%)</title><rect x="118" y="1060" width="1" height="15" fill="rgb(212,104,46)"/><text x="121.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="118" y="1076" width="1" height="15" fill="rgb(223,107,50)"/><text x="121.00" y="1086.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.09%)</title><rect x="118" y="1092" width="1" height="15" fill="rgb(248,174,32)"/><text x="121.00" y="1102.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.09%)</title><rect x="118" y="1108" width="1" height="15" fill="rgb(212,7,15)"/><text x="121.00" y="1118.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.09%)</title><rect x="118" y="1124" width="1" height="15" fill="rgb(252,40,45)"/><text x="121.00" y="1134.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.09%)</title><rect x="118" y="1140" width="1" height="15" fill="rgb(240,61,4)"/><text x="121.00" y="1150.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="118" y="1156" width="1" height="15" fill="rgb(240,203,5)"/><text x="121.00" y="1166.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (3 samples, 0.14%)</title><rect x="118" y="244" width="2" height="15" fill="rgb(213,182,29)"/><text x="121.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="118" y="260" width="2" height="15" fill="rgb(219,8,46)"/><text x="121.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="118" y="276" width="2" height="15" fill="rgb(253,66,26)"/><text x="121.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="118" y="292" width="2" height="15" fill="rgb(249,117,36)"/><text x="121.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="118" y="308" width="2" height="15" fill="rgb(220,125,2)"/><text x="121.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="118" y="324" width="2" height="15" fill="rgb(238,224,23)"/><text x="121.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (3 samples, 0.14%)</title><rect x="118" y="340" width="2" height="15" fill="rgb(217,110,3)"/><text x="121.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="118" y="356" width="2" height="15" fill="rgb(218,218,0)"/><text x="121.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.14%)</title><rect x="118" y="372" width="2" height="15" fill="rgb(205,23,2)"/><text x="121.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="118" y="388" width="2" height="15" fill="rgb(237,57,7)"/><text x="121.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="118" y="404" width="2" height="15" fill="rgb(223,224,34)"/><text x="121.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="118" y="420" width="2" height="15" fill="rgb(215,167,30)"/><text x="121.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="118" y="436" width="2" height="15" fill="rgb(229,161,35)"/><text x="121.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="118" y="452" width="2" height="15" fill="rgb(242,22,33)"/><text x="121.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="118" y="468" width="2" height="15" fill="rgb(242,22,39)"/><text x="121.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (2 samples, 0.09%)</title><rect x="120" y="436" width="1" height="15" fill="rgb(228,162,47)"/><text x="123.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.09%)</title><rect x="120" y="452" width="1" height="15" fill="rgb(208,96,24)"/><text x="123.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.09%)</title><rect x="120" y="468" width="1" height="15" fill="rgb(205,98,10)"/><text x="123.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.09%)</title><rect x="120" y="484" width="1" height="15" fill="rgb(252,155,41)"/><text x="123.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.09%)</title><rect x="120" y="500" width="1" height="15" fill="rgb(238,214,36)"/><text x="123.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="120" y="516" width="1" height="15" fill="rgb(209,159,19)"/><text x="123.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (2 samples, 0.09%)</title><rect x="120" y="532" width="1" height="15" fill="rgb(240,181,43)"/><text x="123.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.09%)</title><rect x="120" y="548" width="1" height="15" fill="rgb(252,32,36)"/><text x="123.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.09%)</title><rect x="120" y="564" width="1" height="15" fill="rgb(205,7,36)"/><text x="123.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.09%)</title><rect x="120" y="580" width="1" height="15" fill="rgb(252,63,29)"/><text x="123.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.09%)</title><rect x="120" y="596" width="1" height="15" fill="rgb(248,29,51)"/><text x="123.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="120" y="612" width="1" height="15" fill="rgb(250,90,47)"/><text x="123.00" y="622.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:4) (14 samples, 0.66%)</title><rect x="115" y="52" width="8" height="15" fill="rgb(229,157,37)"/><text x="118.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (14 samples, 0.66%)</title><rect x="115" y="68" width="8" height="15" fill="rgb(227,64,25)"/><text x="118.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (14 samples, 0.66%)</title><rect x="115" y="84" width="8" height="15" fill="rgb(245,18,10)"/><text x="118.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (14 samples, 0.66%)</title><rect x="115" y="100" width="8" height="15" fill="rgb(233,23,11)"/><text x="118.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (14 samples, 0.66%)</title><rect x="115" y="116" width="8" height="15" fill="rgb(230,155,27)"/><text x="118.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (14 samples, 0.66%)</title><rect x="115" y="132" width="8" height="15" fill="rgb(221,152,35)"/><text x="118.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py:7) (8 samples, 0.38%)</title><rect x="118" y="148" width="5" height="15" fill="rgb(223,19,19)"/><text x="121.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.38%)</title><rect x="118" y="164" width="5" height="15" fill="rgb(233,38,0)"/><text x="121.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.38%)</title><rect x="118" y="180" width="5" height="15" fill="rgb(244,188,28)"/><text x="121.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.38%)</title><rect x="118" y="196" width="5" height="15" fill="rgb(246,212,5)"/><text x="121.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.38%)</title><rect x="118" y="212" width="5" height="15" fill="rgb(209,177,50)"/><text x="121.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.38%)</title><rect x="118" y="228" width="5" height="15" fill="rgb(238,11,20)"/><text x="121.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (5 samples, 0.24%)</title><rect x="120" y="244" width="3" height="15" fill="rgb(218,159,43)"/><text x="123.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.24%)</title><rect x="120" y="260" width="3" height="15" fill="rgb(223,93,52)"/><text x="123.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.24%)</title><rect x="120" y="276" width="3" height="15" fill="rgb(220,187,9)"/><text x="123.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.24%)</title><rect x="120" y="292" width="3" height="15" fill="rgb(224,16,44)"/><text x="123.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.24%)</title><rect x="120" y="308" width="3" height="15" fill="rgb(213,187,42)"/><text x="123.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.24%)</title><rect x="120" y="324" width="3" height="15" fill="rgb(210,116,25)"/><text x="123.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (5 samples, 0.24%)</title><rect x="120" y="340" width="3" height="15" fill="rgb(230,182,1)"/><text x="123.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.24%)</title><rect x="120" y="356" width="3" height="15" fill="rgb(228,89,15)"/><text x="123.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.24%)</title><rect x="120" y="372" width="3" height="15" fill="rgb(253,202,51)"/><text x="123.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.24%)</title><rect x="120" y="388" width="3" height="15" fill="rgb(206,177,49)"/><text x="123.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.24%)</title><rect x="120" y="404" width="3" height="15" fill="rgb(226,11,50)"/><text x="123.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.24%)</title><rect x="120" y="420" width="3" height="15" fill="rgb(210,200,20)"/><text x="123.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (3 samples, 0.14%)</title><rect x="121" y="436" width="2" height="15" fill="rgb(246,164,27)"/><text x="124.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="121" y="452" width="2" height="15" fill="rgb(235,169,27)"/><text x="124.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.14%)</title><rect x="121" y="468" width="2" height="15" fill="rgb(254,66,29)"/><text x="124.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="121" y="484" width="2" height="15" fill="rgb(228,5,54)"/><text x="124.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="121" y="500" width="2" height="15" fill="rgb(247,48,31)"/><text x="124.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="121" y="516" width="2" height="15" fill="rgb(205,5,49)"/><text x="124.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="121" y="532" width="2" height="15" fill="rgb(222,66,38)"/><text x="124.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="121" y="548" width="2" height="15" fill="rgb(221,170,54)"/><text x="124.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="121" y="564" width="2" height="15" fill="rgb(212,196,9)"/><text x="124.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (3 samples, 0.14%)</title><rect x="121" y="580" width="2" height="15" fill="rgb(242,22,8)"/><text x="124.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="121" y="596" width="2" height="15" fill="rgb(237,4,23)"/><text x="124.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="121" y="612" width="2" height="15" fill="rgb(213,169,15)"/><text x="124.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="121" y="628" width="2" height="15" fill="rgb(215,173,39)"/><text x="124.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="121" y="644" width="2" height="15" fill="rgb(227,104,47)"/><text x="124.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="121" y="660" width="2" height="15" fill="rgb(251,155,30)"/><text x="124.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (3 samples, 0.14%)</title><rect x="121" y="676" width="2" height="15" fill="rgb(229,221,21)"/><text x="124.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="121" y="692" width="2" height="15" fill="rgb(219,172,30)"/><text x="124.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="121" y="708" width="2" height="15" fill="rgb(223,222,54)"/><text x="124.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="121" y="724" width="2" height="15" fill="rgb(207,164,48)"/><text x="124.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="121" y="740" width="2" height="15" fill="rgb(240,190,5)"/><text x="124.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="121" y="756" width="2" height="15" fill="rgb(234,48,14)"/><text x="124.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (3 samples, 0.14%)</title><rect x="121" y="772" width="2" height="15" fill="rgb(240,27,42)"/><text x="124.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="121" y="788" width="2" height="15" fill="rgb(209,191,36)"/><text x="124.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="121" y="804" width="2" height="15" fill="rgb(246,37,16)"/><text x="124.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="121" y="820" width="2" height="15" fill="rgb(237,229,32)"/><text x="124.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="121" y="836" width="2" height="15" fill="rgb(252,55,22)"/><text x="124.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="121" y="852" width="2" height="15" fill="rgb(252,190,54)"/><text x="124.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (3 samples, 0.14%)</title><rect x="121" y="868" width="2" height="15" fill="rgb(246,119,12)"/><text x="124.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="121" y="884" width="2" height="15" fill="rgb(252,187,53)"/><text x="124.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.14%)</title><rect x="121" y="900" width="2" height="15" fill="rgb(205,62,54)"/><text x="124.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="121" y="916" width="2" height="15" fill="rgb(244,32,30)"/><text x="124.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="121" y="932" width="2" height="15" fill="rgb(230,11,3)"/><text x="124.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="121" y="948" width="2" height="15" fill="rgb(252,216,27)"/><text x="124.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="121" y="964" width="2" height="15" fill="rgb(231,110,18)"/><text x="124.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="121" y="980" width="2" height="15" fill="rgb(235,154,53)"/><text x="124.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="121" y="996" width="2" height="15" fill="rgb(216,83,3)"/><text x="124.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (3 samples, 0.14%)</title><rect x="121" y="1012" width="2" height="15" fill="rgb(218,1,42)"/><text x="124.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="121" y="1028" width="2" height="15" fill="rgb(211,113,54)"/><text x="124.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="121" y="1044" width="2" height="15" fill="rgb(222,59,3)"/><text x="124.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="121" y="1060" width="2" height="15" fill="rgb(226,158,23)"/><text x="124.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="121" y="1076" width="2" height="15" fill="rgb(228,44,24)"/><text x="124.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="121" y="1092" width="2" height="15" fill="rgb(222,44,11)"/><text x="124.00" y="1102.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py:83) (2 samples, 0.09%)</title><rect x="123" y="452" width="1" height="15" fill="rgb(231,49,27)"/><text x="126.00" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.09%)</title><rect x="123" y="468" width="1" height="15" fill="rgb(208,169,8)"/><text x="126.00" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.09%)</title><rect x="123" y="484" width="1" height="15" fill="rgb(230,37,44)"/><text x="126.00" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.09%)</title><rect x="123" y="500" width="1" height="15" fill="rgb(224,197,35)"/><text x="126.00" y="510.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.09%)</title><rect x="123" y="516" width="1" height="15" fill="rgb(212,119,40)"/><text x="126.00" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.09%)</title><rect x="123" y="532" width="1" height="15" fill="rgb(209,107,43)"/><text x="126.00" y="542.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/doc/doc_helper.py:117) (2 samples, 0.09%)</title><rect x="123" y="548" width="1" height="15" fill="rgb(228,76,1)"/><text x="126.00" y="558.50"></text></g><g><title>_get_doc_template (mlprodict/onnxrt/doc/doc_helper.py:114) (2 samples, 0.09%)</title><rect x="123" y="564" width="1" height="15" fill="rgb(239,131,19)"/><text x="126.00" y="574.50"></text></g><g><title>__new__ (jinja2/environment.py:945) (2 samples, 0.09%)</title><rect x="123" y="580" width="1" height="15" fill="rgb(225,79,8)"/><text x="126.00" y="590.50"></text></g><g><title>from_string (jinja2/environment.py:880) (2 samples, 0.09%)</title><rect x="123" y="596" width="1" height="15" fill="rgb(222,178,17)"/><text x="126.00" y="606.50"></text></g><g><title>compile (jinja2/environment.py:581) (2 samples, 0.09%)</title><rect x="123" y="612" width="1" height="15" fill="rgb(217,160,16)"/><text x="126.00" y="622.50"></text></g><g><title>_generate (jinja2/environment.py:543) (2 samples, 0.09%)</title><rect x="123" y="628" width="1" height="15" fill="rgb(210,83,41)"/><text x="126.00" y="638.50"></text></g><g><title>generate (jinja2/compiler.py:82) (2 samples, 0.09%)</title><rect x="123" y="644" width="1" height="15" fill="rgb(247,149,34)"/><text x="126.00" y="654.50"></text></g><g><title>visit (jinja2/visitor.py:38) (2 samples, 0.09%)</title><rect x="123" y="660" width="1" height="15" fill="rgb(218,20,44)"/><text x="126.00" y="670.50"></text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:28) (3 samples, 0.14%)</title><rect x="123" y="84" width="1" height="15" fill="rgb(248,1,45)"/><text x="126.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (3 samples, 0.14%)</title><rect x="123" y="100" width="1" height="15" fill="rgb(228,5,21)"/><text x="126.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:230) (3 samples, 0.14%)</title><rect x="123" y="116" width="1" height="15" fill="rgb(216,82,9)"/><text x="126.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py:114) (3 samples, 0.14%)</title><rect x="123" y="132" width="1" height="15" fill="rgb(211,3,38)"/><text x="126.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py:62) (3 samples, 0.14%)</title><rect x="123" y="148" width="1" height="15" fill="rgb(219,16,26)"/><text x="126.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py:115) (3 samples, 0.14%)</title><rect x="123" y="164" width="1" height="15" fill="rgb(253,49,26)"/><text x="126.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py:88) (3 samples, 0.14%)</title><rect x="123" y="180" width="1" height="15" fill="rgb(245,208,9)"/><text x="126.00" y="190.50"></text></g><g><title>preprocess_parameters (mlprodict/onnxrt/onnx_inference_node.py:121) (3 samples, 0.14%)</title><rect x="123" y="196" width="1" height="15" fill="rgb(244,34,13)"/><text x="126.00" y="206.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py:62) (3 samples, 0.14%)</title><rect x="123" y="212" width="1" height="15" fill="rgb(211,132,49)"/><text x="126.00" y="222.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py:115) (3 samples, 0.14%)</title><rect x="123" y="228" width="1" height="15" fill="rgb(233,189,11)"/><text x="126.00" y="238.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py:101) (3 samples, 0.14%)</title><rect x="123" y="244" width="1" height="15" fill="rgb(250,107,16)"/><text x="126.00" y="254.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py:28) (3 samples, 0.14%)</title><rect x="123" y="260" width="1" height="15" fill="rgb(252,25,43)"/><text x="126.00" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="123" y="276" width="1" height="15" fill="rgb(222,39,15)"/><text x="126.00" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="123" y="292" width="1" height="15" fill="rgb(230,68,26)"/><text x="126.00" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="123" y="308" width="1" height="15" fill="rgb(225,69,8)"/><text x="126.00" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="123" y="324" width="1" height="15" fill="rgb(242,213,38)"/><text x="126.00" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="123" y="340" width="1" height="15" fill="rgb(250,26,28)"/><text x="126.00" y="350.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py:7) (3 samples, 0.14%)</title><rect x="123" y="356" width="1" height="15" fill="rgb(248,57,34)"/><text x="126.00" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="123" y="372" width="1" height="15" fill="rgb(235,38,44)"/><text x="126.00" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="123" y="388" width="1" height="15" fill="rgb(238,114,18)"/><text x="126.00" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="123" y="404" width="1" height="15" fill="rgb(243,117,43)"/><text x="126.00" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="123" y="420" width="1" height="15" fill="rgb(236,184,23)"/><text x="126.00" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="123" y="436" width="1" height="15" fill="rgb(225,179,28)"/><text x="126.00" y="446.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (3 samples, 0.14%)</title><rect x="125" y="260" width="2" height="15" fill="rgb(208,212,18)"/><text x="128.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (2 samples, 0.09%)</title><rect x="125" y="276" width="2" height="15" fill="rgb(245,80,24)"/><text x="128.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (2 samples, 0.09%)</title><rect x="125" y="292" width="2" height="15" fill="rgb(209,55,13)"/><text x="128.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (2 samples, 0.09%)</title><rect x="125" y="308" width="2" height="15" fill="rgb(230,15,30)"/><text x="128.00" y="318.50"></text></g><g><title>array_subscript (mapping.c:1539) (4 samples, 0.19%)</title><rect x="125" y="228" width="2" height="15" fill="rgb(223,227,37)"/><text x="128.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:516) (4 samples, 0.19%)</title><rect x="125" y="244" width="2" height="15" fill="rgb(226,137,3)"/><text x="128.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (5 samples, 0.24%)</title><rect x="125" y="212" width="3" height="15" fill="rgb(250,167,21)"/><text x="128.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (8 samples, 0.38%)</title><rect x="132" y="260" width="4" height="15" fill="rgb(206,186,14)"/><text x="135.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (4 samples, 0.19%)</title><rect x="139" y="308" width="2" height="15" fill="rgb(225,154,23)"/><text x="142.00" y="318.50"></text></g><g><title>array_copy (methods.c:1133) (3 samples, 0.14%)</title><rect x="139" y="324" width="2" height="15" fill="rgb(229,168,14)"/><text x="142.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c:560) (3 samples, 0.14%)</title><rect x="139" y="340" width="2" height="15" fill="rgb(236,142,14)"/><text x="142.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (3 samples, 0.14%)</title><rect x="139" y="356" width="2" height="15" fill="rgb(239,48,38)"/><text x="142.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (5 samples, 0.24%)</title><rect x="141" y="308" width="3" height="15" fill="rgb(250,79,26)"/><text x="144.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.24%)</title><rect x="141" y="324" width="3" height="15" fill="rgb(214,8,53)"/><text x="144.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.14%)</title><rect x="142" y="340" width="2" height="15" fill="rgb(221,190,24)"/><text x="145.00" y="350.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (2 samples, 0.09%)</title><rect x="145" y="372" width="1" height="15" fill="rgb(242,68,45)"/><text x="148.00" y="382.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (2 samples, 0.09%)</title><rect x="148" y="436" width="1" height="15" fill="rgb(231,112,49)"/><text x="151.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (2 samples, 0.09%)</title><rect x="148" y="452" width="1" height="15" fill="rgb(236,88,17)"/><text x="151.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (2 samples, 0.09%)</title><rect x="149" y="436" width="1" height="15" fill="rgb(235,17,41)"/><text x="152.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (2 samples, 0.09%)</title><rect x="149" y="452" width="1" height="15" fill="rgb(245,181,7)"/><text x="152.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (2 samples, 0.09%)</title><rect x="149" y="468" width="1" height="15" fill="rgb(227,187,36)"/><text x="152.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:80) (2 samples, 0.09%)</title><rect x="149" y="484" width="1" height="15" fill="rgb(244,80,22)"/><text x="152.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (2 samples, 0.09%)</title><rect x="150" y="436" width="1" height="15" fill="rgb(209,31,18)"/><text x="153.00" y="446.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1667) (7 samples, 0.33%)</title><rect x="155" y="484" width="4" height="15" fill="rgb(219,132,24)"/><text x="158.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (10 samples, 0.47%)</title><rect x="154" y="468" width="6" height="15" fill="rgb(211,17,0)"/><text x="157.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:239) (2 samples, 0.09%)</title><rect x="160" y="468" width="1" height="15" fill="rgb(250,48,21)"/><text x="163.00" y="478.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (41 samples, 1.95%)</title><rect x="138" y="276" width="23" height="15" fill="rgb(235,88,1)"/><text x="141.00" y="286.50">r..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (40 samples, 1.90%)</title><rect x="139" y="292" width="22" height="15" fill="rgb(208,15,21)"/><text x="142.00" y="302.50">r..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (31 samples, 1.47%)</title><rect x="144" y="308" width="17" height="15" fill="rgb(228,141,12)"/><text x="147.00" y="318.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (30 samples, 1.42%)</title><rect x="144" y="324" width="17" height="15" fill="rgb(240,150,15)"/><text x="147.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (30 samples, 1.42%)</title><rect x="144" y="340" width="17" height="15" fill="rgb(233,140,52)"/><text x="147.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (30 samples, 1.42%)</title><rect x="144" y="356" width="17" height="15" fill="rgb(232,80,29)"/><text x="147.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (27 samples, 1.28%)</title><rect x="146" y="372" width="15" height="15" fill="rgb(223,157,32)"/><text x="149.00" y="382.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (27 samples, 1.28%)</title><rect x="146" y="388" width="15" height="15" fill="rgb(239,41,23)"/><text x="149.00" y="398.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (25 samples, 1.19%)</title><rect x="147" y="404" width="14" height="15" fill="rgb(233,90,41)"/><text x="150.00" y="414.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (24 samples, 1.14%)</title><rect x="148" y="420" width="13" height="15" fill="rgb(252,193,43)"/><text x="151.00" y="430.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (18 samples, 0.85%)</title><rect x="151" y="436" width="10" height="15" fill="rgb(245,64,13)"/><text x="154.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (15 samples, 0.71%)</title><rect x="153" y="452" width="8" height="15" fill="rgb(245,171,12)"/><text x="156.00" y="462.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (3 samples, 0.14%)</title><rect x="165" y="372" width="1" height="15" fill="rgb(251,111,19)"/><text x="168.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (2 samples, 0.09%)</title><rect x="165" y="388" width="1" height="15" fill="rgb(206,26,21)"/><text x="168.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1014) (2 samples, 0.09%)</title><rect x="166" y="420" width="1" height="15" fill="rgb(205,209,29)"/><text x="169.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (2 samples, 0.09%)</title><rect x="168" y="420" width="1" height="15" fill="rgb(219,147,5)"/><text x="171.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (6 samples, 0.28%)</title><rect x="166" y="372" width="4" height="15" fill="rgb(233,27,35)"/><text x="169.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (6 samples, 0.28%)</title><rect x="166" y="388" width="4" height="15" fill="rgb(247,208,51)"/><text x="169.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (6 samples, 0.28%)</title><rect x="166" y="404" width="4" height="15" fill="rgb(252,10,3)"/><text x="169.00" y="414.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (13 samples, 0.62%)</title><rect x="163" y="324" width="7" height="15" fill="rgb(247,1,13)"/><text x="166.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (12 samples, 0.57%)</title><rect x="164" y="340" width="6" height="15" fill="rgb(206,140,4)"/><text x="167.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (11 samples, 0.52%)</title><rect x="164" y="356" width="6" height="15" fill="rgb(206,130,32)"/><text x="167.00" y="366.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (62 samples, 2.94%)</title><rect x="136" y="260" width="35" height="15" fill="rgb(247,211,45)"/><text x="139.00" y="270.50">ru..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (17 samples, 0.81%)</title><rect x="161" y="276" width="10" height="15" fill="rgb(227,79,26)"/><text x="164.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (15 samples, 0.71%)</title><rect x="162" y="292" width="9" height="15" fill="rgb(245,125,35)"/><text x="165.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (15 samples, 0.71%)</title><rect x="162" y="308" width="9" height="15" fill="rgb(206,192,23)"/><text x="165.00" y="318.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (2 samples, 0.09%)</title><rect x="172" y="260" width="1" height="15" fill="rgb(212,28,51)"/><text x="175.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (78 samples, 3.70%)</title><rect x="130" y="244" width="44" height="15" fill="rgb(247,127,9)"/><text x="133.00" y="254.50">_run..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (82 samples, 3.89%)</title><rect x="128" y="212" width="46" height="15" fill="rgb(234,14,50)"/><text x="131.00" y="222.50">_run..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (80 samples, 3.80%)</title><rect x="129" y="228" width="45" height="15" fill="rgb(246,189,17)"/><text x="132.00" y="238.50">run ..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (5 samples, 0.24%)</title><rect x="175" y="212" width="3" height="15" fill="rgb(233,190,35)"/><text x="178.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (4 samples, 0.19%)</title><rect x="176" y="228" width="2" height="15" fill="rgb(232,22,34)"/><text x="179.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.19%)</title><rect x="176" y="244" width="2" height="15" fill="rgb(217,100,11)"/><text x="179.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (2 samples, 0.09%)</title><rect x="177" y="260" width="1" height="15" fill="rgb(237,212,14)"/><text x="180.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (2 samples, 0.09%)</title><rect x="178" y="212" width="1" height="15" fill="rgb(230,104,4)"/><text x="181.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (2 samples, 0.09%)</title><rect x="178" y="228" width="1" height="15" fill="rgb(243,226,31)"/><text x="181.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.09%)</title><rect x="178" y="244" width="1" height="15" fill="rgb(229,111,52)"/><text x="181.00" y="254.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:201) (3 samples, 0.14%)</title><rect x="180" y="388" width="2" height="15" fill="rgb(212,196,42)"/><text x="183.00" y="398.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (9 samples, 0.43%)</title><rect x="179" y="244" width="5" height="15" fill="rgb(254,72,41)"/><text x="182.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (9 samples, 0.43%)</title><rect x="179" y="260" width="5" height="15" fill="rgb(217,202,8)"/><text x="182.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (9 samples, 0.43%)</title><rect x="179" y="276" width="5" height="15" fill="rgb(232,77,21)"/><text x="182.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (9 samples, 0.43%)</title><rect x="179" y="292" width="5" height="15" fill="rgb(228,124,45)"/><text x="182.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (9 samples, 0.43%)</title><rect x="179" y="308" width="5" height="15" fill="rgb(250,64,17)"/><text x="182.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (9 samples, 0.43%)</title><rect x="179" y="324" width="5" height="15" fill="rgb(247,167,38)"/><text x="182.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (9 samples, 0.43%)</title><rect x="179" y="340" width="5" height="15" fill="rgb(224,122,24)"/><text x="182.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (8 samples, 0.38%)</title><rect x="180" y="356" width="4" height="15" fill="rgb(236,119,3)"/><text x="183.00" y="366.50"></text></g><g><title>aintroselect_float (selection.c.src:380) (7 samples, 0.33%)</title><rect x="180" y="372" width="4" height="15" fill="rgb(225,165,3)"/><text x="183.00" y="382.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:202) (4 samples, 0.19%)</title><rect x="182" y="388" width="2" height="15" fill="rgb(206,51,34)"/><text x="185.00" y="398.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (3 samples, 0.14%)</title><rect x="184" y="244" width="2" height="15" fill="rgb(226,58,46)"/><text x="187.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (110 samples, 5.22%)</title><rect x="125" y="196" width="61" height="15" fill="rgb(208,192,54)"/><text x="128.00" y="206.50">run (m..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (13 samples, 0.62%)</title><rect x="179" y="212" width="7" height="15" fill="rgb(248,194,30)"/><text x="182.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (13 samples, 0.62%)</title><rect x="179" y="228" width="7" height="15" fill="rgb(227,174,15)"/><text x="182.00" y="238.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:18) (112 samples, 5.32%)</title><rect x="124" y="100" width="63" height="15" fill="rgb(214,76,11)"/><text x="127.00" y="110.50">profil..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (112 samples, 5.32%)</title><rect x="124" y="116" width="63" height="15" fill="rgb(231,61,27)"/><text x="127.00" y="126.50">time_p..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (112 samples, 5.32%)</title><rect x="124" y="132" width="63" height="15" fill="rgb(222,200,32)"/><text x="127.00" y="142.50">&lt;lambd..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (112 samples, 5.32%)</title><rect x="124" y="148" width="63" height="15" fill="rgb(233,160,36)"/><text x="127.00" y="158.50">run (m..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (112 samples, 5.32%)</title><rect x="124" y="164" width="63" height="15" fill="rgb(245,7,15)"/><text x="127.00" y="174.50">_run_s..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (111 samples, 5.27%)</title><rect x="125" y="180" width="62" height="15" fill="rgb(232,192,24)"/><text x="128.00" y="190.50">run (m..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (2 samples, 0.09%)</title><rect x="189" y="180" width="1" height="15" fill="rgb(243,108,48)"/><text x="192.00" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:39) (3 samples, 0.14%)</title><rect x="191" y="212" width="2" height="15" fill="rgb(251,193,40)"/><text x="194.00" y="222.50"></text></g><g><title>PyArray_ToList (convert.c:120) (3 samples, 0.14%)</title><rect x="191" y="228" width="2" height="15" fill="rgb(213,64,15)"/><text x="194.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c:102) (3 samples, 0.14%)</title><rect x="191" y="244" width="2" height="15" fill="rgb(223,18,5)"/><text x="194.00" y="254.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:478) (2 samples, 0.09%)</title><rect x="193" y="308" width="1" height="15" fill="rgb(211,140,41)"/><text x="196.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:138) (2 samples, 0.09%)</title><rect x="195" y="324" width="1" height="15" fill="rgb(238,208,21)"/><text x="198.00" y="334.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:154) (2 samples, 0.09%)</title><rect x="196" y="324" width="1" height="15" fill="rgb(206,8,8)"/><text x="199.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c:41) (2 samples, 0.09%)</title><rect x="198" y="340" width="1" height="15" fill="rgb(231,213,53)"/><text x="201.00" y="350.50"></text></g><g><title>_array_find_python_scalar_type (common.c:44) (2 samples, 0.09%)</title><rect x="199" y="340" width="1" height="15" fill="rgb(223,31,27)"/><text x="202.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (9 samples, 0.43%)</title><rect x="197" y="324" width="5" height="15" fill="rgb(210,173,36)"/><text x="200.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c:47) (4 samples, 0.19%)</title><rect x="200" y="340" width="2" height="15" fill="rgb(227,36,43)"/><text x="203.00" y="350.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (17 samples, 0.81%)</title><rect x="193" y="276" width="10" height="15" fill="rgb(234,52,6)"/><text x="196.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (17 samples, 0.81%)</title><rect x="193" y="292" width="10" height="15" fill="rgb(231,65,20)"/><text x="196.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (15 samples, 0.71%)</title><rect x="194" y="308" width="9" height="15" fill="rgb(209,63,28)"/><text x="197.00" y="318.50"></text></g><g><title>discover_dimensions (ctors.c:883) (2 samples, 0.09%)</title><rect x="203" y="292" width="1" height="15" fill="rgb(249,57,49)"/><text x="206.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c:679) (2 samples, 0.09%)</title><rect x="204" y="308" width="1" height="15" fill="rgb(209,44,30)"/><text x="207.00" y="318.50"></text></g><g><title>discover_dimensions (ctors.c:884) (5 samples, 0.24%)</title><rect x="204" y="292" width="3" height="15" fill="rgb(225,133,31)"/><text x="207.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c:699) (2 samples, 0.09%)</title><rect x="206" y="308" width="1" height="15" fill="rgb(206,167,18)"/><text x="209.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (26 samples, 1.23%)</title><rect x="193" y="260" width="14" height="15" fill="rgb(217,159,41)"/><text x="196.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (8 samples, 0.38%)</title><rect x="203" y="276" width="4" height="15" fill="rgb(226,36,23)"/><text x="206.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c:536) (6 samples, 0.28%)</title><rect x="207" y="292" width="4" height="15" fill="rgb(229,182,45)"/><text x="210.00" y="302.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:216) (2 samples, 0.09%)</title><rect x="212" y="324" width="1" height="15" fill="rgb(213,70,40)"/><text x="215.00" y="334.50"></text></g><g><title>array_subscript (mapping.c:1539) (40 samples, 1.90%)</title><rect x="193" y="228" width="22" height="15" fill="rgb(209,24,27)"/><text x="196.00" y="238.50">a..</text></g><g><title>prepare_index (mapping.c:516) (40 samples, 1.90%)</title><rect x="193" y="244" width="22" height="15" fill="rgb(241,50,35)"/><text x="196.00" y="254.50">p..</text></g><g><title>PyArray_FromAny (ctors.c:1938) (14 samples, 0.66%)</title><rect x="207" y="260" width="8" height="15" fill="rgb(253,7,38)"/><text x="210.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (14 samples, 0.66%)</title><rect x="207" y="276" width="8" height="15" fill="rgb(211,67,51)"/><text x="210.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c:550) (7 samples, 0.33%)</title><rect x="211" y="292" width="4" height="15" fill="rgb(236,70,6)"/><text x="214.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (7 samples, 0.33%)</title><rect x="211" y="308" width="4" height="15" fill="rgb(239,85,50)"/><text x="214.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (45 samples, 2.14%)</title><rect x="193" y="212" width="25" height="15" fill="rgb(233,91,53)"/><text x="196.00" y="222.50">_..</text></g><g><title>array_subscript (mapping.c:1676) (5 samples, 0.24%)</title><rect x="215" y="228" width="3" height="15" fill="rgb(248,109,32)"/><text x="218.00" y="238.50"></text></g><g><title>array_astype (methods.c:841) (2 samples, 0.09%)</title><rect x="218" y="244" width="1" height="15" fill="rgb(247,20,16)"/><text x="221.00" y="254.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (2 samples, 0.09%)</title><rect x="218" y="260" width="1" height="15" fill="rgb(252,36,53)"/><text x="221.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (2 samples, 0.09%)</title><rect x="218" y="276" width="1" height="15" fill="rgb(207,191,5)"/><text x="221.00" y="286.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (2 samples, 0.09%)</title><rect x="218" y="292" width="1" height="15" fill="rgb(252,34,13)"/><text x="221.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:37) (6 samples, 0.28%)</title><rect x="218" y="212" width="3" height="15" fill="rgb(211,140,52)"/><text x="221.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (6 samples, 0.28%)</title><rect x="218" y="228" width="3" height="15" fill="rgb(238,228,27)"/><text x="221.00" y="238.50"></text></g><g><title>array_astype (methods.c:845) (4 samples, 0.19%)</title><rect x="219" y="244" width="2" height="15" fill="rgb(215,65,52)"/><text x="222.00" y="254.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (4 samples, 0.19%)</title><rect x="219" y="260" width="2" height="15" fill="rgb(218,161,39)"/><text x="222.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (4 samples, 0.19%)</title><rect x="219" y="276" width="2" height="15" fill="rgb(205,101,54)"/><text x="222.00" y="286.50"></text></g><g><title>_aligned_contig_cast_bool_to_float (lowlevel_strided_loops.c.src:855) (3 samples, 0.14%)</title><rect x="220" y="292" width="1" height="15" fill="rgb(237,73,14)"/><text x="223.00" y="302.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (2 samples, 0.09%)</title><rect x="222" y="260" width="1" height="15" fill="rgb(242,83,53)"/><text x="225.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (3 samples, 0.14%)</title><rect x="222" y="228" width="2" height="15" fill="rgb(230,118,40)"/><text x="225.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (3 samples, 0.14%)</title><rect x="222" y="244" width="2" height="15" fill="rgb(206,91,51)"/><text x="225.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (8 samples, 0.38%)</title><rect x="221" y="212" width="5" height="15" fill="rgb(205,150,0)"/><text x="224.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:537) (3 samples, 0.14%)</title><rect x="224" y="228" width="2" height="15" fill="rgb(215,167,1)"/><text x="227.00" y="238.50"></text></g><g><title>npy_free_cache (alloc.c:147) (3 samples, 0.14%)</title><rect x="224" y="244" width="2" height="15" fill="rgb(209,70,44)"/><text x="227.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c:112) (3 samples, 0.14%)</title><rect x="224" y="260" width="2" height="15" fill="rgb(225,19,40)"/><text x="227.00" y="270.50"></text></g><g><title>PyDataMem_FREE (alloc.c:274) (3 samples, 0.14%)</title><rect x="224" y="276" width="2" height="15" fill="rgb(207,177,16)"/><text x="227.00" y="286.50"></text></g><g><title>free (libc-2.29.so) (2 samples, 0.09%)</title><rect x="225" y="292" width="1" height="15" fill="rgb(211,159,2)"/><text x="228.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (13 samples, 0.62%)</title><rect x="226" y="212" width="7" height="15" fill="rgb(206,11,39)"/><text x="229.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (9 samples, 0.43%)</title><rect x="234" y="212" width="5" height="15" fill="rgb(238,158,45)"/><text x="237.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1539) (2 samples, 0.09%)</title><rect x="241" y="228" width="1" height="15" fill="rgb(254,122,46)"/><text x="244.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (8 samples, 0.38%)</title><rect x="239" y="212" width="4" height="15" fill="rgb(222,175,24)"/><text x="242.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (6 samples, 0.28%)</title><rect x="247" y="228" width="3" height="15" fill="rgb(223,32,3)"/><text x="250.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (2 samples, 0.09%)</title><rect x="254" y="244" width="1" height="15" fill="rgb(244,189,16)"/><text x="257.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (5 samples, 0.24%)</title><rect x="255" y="244" width="3" height="15" fill="rgb(254,151,41)"/><text x="258.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (7 samples, 0.33%)</title><rect x="258" y="244" width="4" height="15" fill="rgb(229,78,42)"/><text x="261.00" y="254.50"></text></g><g><title>unicode_eq (python3.7) (2 samples, 0.09%)</title><rect x="261" y="260" width="1" height="15" fill="rgb(222,134,42)"/><text x="264.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (5 samples, 0.24%)</title><rect x="262" y="244" width="3" height="15" fill="rgb(222,184,30)"/><text x="265.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (6 samples, 0.28%)</title><rect x="278" y="260" width="3" height="15" fill="rgb(244,47,40)"/><text x="281.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (58 samples, 2.75%)</title><rect x="281" y="260" width="33" height="15" fill="rgb(228,42,35)"/><text x="284.00" y="270.50">ru..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (10 samples, 0.47%)</title><rect x="308" y="276" width="6" height="15" fill="rgb(224,40,50)"/><text x="311.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (5 samples, 0.24%)</title><rect x="338" y="308" width="2" height="15" fill="rgb(233,188,11)"/><text x="341.00" y="318.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (2 samples, 0.09%)</title><rect x="345" y="436" width="1" height="15" fill="rgb(206,175,46)"/><text x="348.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (2 samples, 0.09%)</title><rect x="345" y="452" width="1" height="15" fill="rgb(228,226,11)"/><text x="348.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="345" y="468" width="1" height="15" fill="rgb(210,109,19)"/><text x="348.00" y="478.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (4 samples, 0.19%)</title><rect x="344" y="340" width="3" height="15" fill="rgb(233,207,21)"/><text x="347.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (4 samples, 0.19%)</title><rect x="344" y="356" width="3" height="15" fill="rgb(213,159,32)"/><text x="347.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (4 samples, 0.19%)</title><rect x="344" y="372" width="3" height="15" fill="rgb(238,118,50)"/><text x="347.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (4 samples, 0.19%)</title><rect x="344" y="388" width="3" height="15" fill="rgb(248,159,50)"/><text x="347.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (3 samples, 0.14%)</title><rect x="345" y="404" width="2" height="15" fill="rgb(236,207,50)"/><text x="348.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (3 samples, 0.14%)</title><rect x="345" y="420" width="2" height="15" fill="rgb(210,139,31)"/><text x="348.00" y="430.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:333) (2 samples, 0.09%)</title><rect x="347" y="356" width="1" height="15" fill="rgb(227,213,43)"/><text x="350.00" y="366.50"></text></g><g><title>arrays_overlap (array_assign.c:162) (2 samples, 0.09%)</title><rect x="347" y="372" width="1" height="15" fill="rgb(238,161,35)"/><text x="350.00" y="382.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c:758) (2 samples, 0.09%)</title><rect x="347" y="388" width="1" height="15" fill="rgb(234,86,17)"/><text x="350.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (10 samples, 0.47%)</title><rect x="349" y="372" width="5" height="15" fill="rgb(247,52,41)"/><text x="352.00" y="382.50"></text></g><g><title>0x7f9ae3ce4d94 (libc-2.29.so) (10 samples, 0.47%)</title><rect x="349" y="388" width="5" height="15" fill="rgb(214,99,13)"/><text x="352.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (2 samples, 0.09%)</title><rect x="354" y="372" width="2" height="15" fill="rgb(213,186,43)"/><text x="357.00" y="382.50"></text></g><g><title>0x7f9ae3c7ca19 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="357" y="420" width="1" height="15" fill="rgb(208,62,43)"/><text x="360.00" y="430.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (31 samples, 1.47%)</title><rect x="341" y="308" width="17" height="15" fill="rgb(247,123,22)"/><text x="344.00" y="318.50"></text></g><g><title>array_copy (methods.c:1133) (25 samples, 1.19%)</title><rect x="344" y="324" width="14" height="15" fill="rgb(244,163,27)"/><text x="347.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c:560) (21 samples, 1.00%)</title><rect x="347" y="340" width="11" height="15" fill="rgb(235,69,24)"/><text x="350.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (19 samples, 0.90%)</title><rect x="348" y="356" width="10" height="15" fill="rgb(214,35,49)"/><text x="351.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (4 samples, 0.19%)</title><rect x="356" y="372" width="2" height="15" fill="rgb(210,88,23)"/><text x="359.00" y="382.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (4 samples, 0.19%)</title><rect x="356" y="388" width="2" height="15" fill="rgb(251,210,12)"/><text x="359.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.14%)</title><rect x="357" y="404" width="1" height="15" fill="rgb(215,74,48)"/><text x="360.00" y="414.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1665) (2 samples, 0.09%)</title><rect x="363" y="372" width="2" height="15" fill="rgb(227,88,28)"/><text x="366.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src:4482) (2 samples, 0.09%)</title><rect x="363" y="388" width="2" height="15" fill="rgb(242,65,20)"/><text x="366.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (4 samples, 0.19%)</title><rect x="363" y="340" width="3" height="15" fill="rgb(223,227,36)"/><text x="366.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (4 samples, 0.19%)</title><rect x="363" y="356" width="3" height="15" fill="rgb(235,117,34)"/><text x="366.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (2 samples, 0.09%)</title><rect x="365" y="372" width="1" height="15" fill="rgb(227,22,50)"/><text x="368.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (2 samples, 0.09%)</title><rect x="365" y="388" width="1" height="15" fill="rgb(227,48,8)"/><text x="368.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (4 samples, 0.19%)</title><rect x="366" y="340" width="2" height="15" fill="rgb(223,30,8)"/><text x="369.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (2 samples, 0.09%)</title><rect x="370" y="388" width="1" height="15" fill="rgb(227,210,0)"/><text x="373.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (2 samples, 0.09%)</title><rect x="370" y="404" width="1" height="15" fill="rgb(220,41,52)"/><text x="373.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (2 samples, 0.09%)</title><rect x="370" y="420" width="1" height="15" fill="rgb(211,190,7)"/><text x="373.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="370" y="436" width="1" height="15" fill="rgb(218,74,44)"/><text x="373.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (2 samples, 0.09%)</title><rect x="372" y="388" width="1" height="15" fill="rgb(216,92,47)"/><text x="375.00" y="398.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c:69) (2 samples, 0.09%)</title><rect x="372" y="404" width="1" height="15" fill="rgb(241,178,0)"/><text x="375.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (7 samples, 0.33%)</title><rect x="370" y="356" width="4" height="15" fill="rgb(236,124,50)"/><text x="373.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (7 samples, 0.33%)</title><rect x="370" y="372" width="4" height="15" fill="rgb(219,11,27)"/><text x="373.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:593) (2 samples, 0.09%)</title><rect x="375" y="388" width="1" height="15" fill="rgb(239,34,32)"/><text x="378.00" y="398.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:595) (2 samples, 0.09%)</title><rect x="376" y="388" width="1" height="15" fill="rgb(234,133,29)"/><text x="379.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h:169) (2 samples, 0.09%)</title><rect x="376" y="404" width="1" height="15" fill="rgb(251,83,3)"/><text x="379.00" y="414.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:596) (3 samples, 0.14%)</title><rect x="377" y="388" width="2" height="15" fill="rgb(230,42,44)"/><text x="380.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (3 samples, 0.14%)</title><rect x="377" y="404" width="2" height="15" fill="rgb(209,148,18)"/><text x="380.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (19 samples, 0.90%)</title><rect x="368" y="340" width="11" height="15" fill="rgb(228,92,52)"/><text x="371.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (10 samples, 0.47%)</title><rect x="374" y="356" width="5" height="15" fill="rgb(239,164,44)"/><text x="377.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (8 samples, 0.38%)</title><rect x="375" y="372" width="4" height="15" fill="rgb(232,1,52)"/><text x="378.00" y="382.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (32 samples, 1.52%)</title><rect x="362" y="324" width="18" height="15" fill="rgb(208,85,24)"/><text x="365.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (2 samples, 0.09%)</title><rect x="379" y="340" width="1" height="15" fill="rgb(217,173,9)"/><text x="382.00" y="350.50"></text></g><g><title>_check_ufunc_fperr (extobj.c:286) (2 samples, 0.09%)</title><rect x="379" y="356" width="1" height="15" fill="rgb(216,149,30)"/><text x="382.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (42 samples, 1.99%)</title><rect x="358" y="308" width="24" height="15" fill="rgb(251,30,39)"/><text x="361.00" y="318.50">_..</text></g><g><title>0x7f9ae3ce5124 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="388" y="324" width="1" height="15" fill="rgb(230,109,24)"/><text x="391.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (5 samples, 0.24%)</title><rect x="389" y="324" width="3" height="15" fill="rgb(209,162,8)"/><text x="392.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (3 samples, 0.14%)</title><rect x="390" y="340" width="2" height="15" fill="rgb(233,110,2)"/><text x="393.00" y="350.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (5 samples, 0.24%)</title><rect x="393" y="324" width="3" height="15" fill="rgb(234,24,52)"/><text x="396.00" y="334.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (8 samples, 0.38%)</title><rect x="400" y="356" width="5" height="15" fill="rgb(233,120,16)"/><text x="403.00" y="366.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (3 samples, 0.14%)</title><rect x="405" y="356" width="2" height="15" fill="rgb(238,105,22)"/><text x="408.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (9 samples, 0.43%)</title><rect x="409" y="372" width="5" height="15" fill="rgb(232,18,40)"/><text x="412.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (4 samples, 0.19%)</title><rect x="412" y="388" width="2" height="15" fill="rgb(237,79,25)"/><text x="415.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (4 samples, 0.19%)</title><rect x="414" y="372" width="3" height="15" fill="rgb(229,5,38)"/><text x="417.00" y="382.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (2 samples, 0.09%)</title><rect x="423" y="388" width="1" height="15" fill="rgb(215,134,38)"/><text x="426.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (2 samples, 0.09%)</title><rect x="423" y="404" width="1" height="15" fill="rgb(238,160,54)"/><text x="426.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (2 samples, 0.09%)</title><rect x="423" y="420" width="1" height="15" fill="rgb(247,200,21)"/><text x="426.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (2 samples, 0.09%)</title><rect x="423" y="436" width="1" height="15" fill="rgb(239,110,17)"/><text x="426.00" y="446.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (8 samples, 0.38%)</title><rect x="426" y="404" width="4" height="15" fill="rgb(241,86,41)"/><text x="429.00" y="414.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:864) (3 samples, 0.14%)</title><rect x="430" y="452" width="2" height="15" fill="rgb(233,103,49)"/><text x="433.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4564) (4 samples, 0.19%)</title><rect x="430" y="404" width="2" height="15" fill="rgb(228,181,53)"/><text x="433.00" y="414.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (4 samples, 0.19%)</title><rect x="430" y="420" width="2" height="15" fill="rgb(216,67,23)"/><text x="433.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (4 samples, 0.19%)</title><rect x="430" y="436" width="2" height="15" fill="rgb(221,160,39)"/><text x="433.00" y="446.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (5 samples, 0.24%)</title><rect x="432" y="420" width="3" height="15" fill="rgb(228,149,37)"/><text x="435.00" y="430.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (4 samples, 0.19%)</title><rect x="433" y="436" width="2" height="15" fill="rgb(243,2,14)"/><text x="436.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (3 samples, 0.14%)</title><rect x="433" y="452" width="2" height="15" fill="rgb(242,112,21)"/><text x="436.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2076) (3 samples, 0.14%)</title><rect x="433" y="468" width="2" height="15" fill="rgb(244,102,14)"/><text x="436.00" y="478.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c:1803) (2 samples, 0.09%)</title><rect x="434" y="484" width="1" height="15" fill="rgb(223,52,21)"/><text x="437.00" y="494.50"></text></g><g><title>dtype_kind_to_simplified_ordering (convert_datatype.c:1750) (2 samples, 0.09%)</title><rect x="434" y="500" width="1" height="15" fill="rgb(237,146,19)"/><text x="437.00" y="510.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (3 samples, 0.14%)</title><rect x="436" y="468" width="1" height="15" fill="rgb(219,54,45)"/><text x="439.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (2 samples, 0.09%)</title><rect x="436" y="484" width="1" height="15" fill="rgb(235,165,27)"/><text x="439.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (2 samples, 0.09%)</title><rect x="438" y="500" width="1" height="15" fill="rgb(228,50,25)"/><text x="441.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (2 samples, 0.09%)</title><rect x="438" y="516" width="1" height="15" fill="rgb(231,54,24)"/><text x="441.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (2 samples, 0.09%)</title><rect x="438" y="532" width="1" height="15" fill="rgb(215,211,37)"/><text x="441.00" y="542.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (9 samples, 0.43%)</title><rect x="436" y="436" width="5" height="15" fill="rgb(254,152,2)"/><text x="439.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (9 samples, 0.43%)</title><rect x="436" y="452" width="5" height="15" fill="rgb(254,109,54)"/><text x="439.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (6 samples, 0.28%)</title><rect x="437" y="468" width="4" height="15" fill="rgb(212,120,8)"/><text x="440.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (6 samples, 0.28%)</title><rect x="437" y="484" width="4" height="15" fill="rgb(220,107,17)"/><text x="440.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:415) (2 samples, 0.09%)</title><rect x="441" y="452" width="1" height="15" fill="rgb(242,53,10)"/><text x="444.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:255) (3 samples, 0.14%)</title><rect x="442" y="468" width="2" height="15" fill="rgb(241,140,7)"/><text x="445.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (2 samples, 0.09%)</title><rect x="445" y="484" width="1" height="15" fill="rgb(237,151,23)"/><text x="448.00" y="494.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:80) (4 samples, 0.19%)</title><rect x="446" y="484" width="2" height="15" fill="rgb(223,169,25)"/><text x="449.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (15 samples, 0.71%)</title><rect x="441" y="436" width="8" height="15" fill="rgb(239,30,30)"/><text x="444.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (13 samples, 0.62%)</title><rect x="442" y="452" width="7" height="15" fill="rgb(207,20,40)"/><text x="445.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (9 samples, 0.43%)</title><rect x="444" y="468" width="5" height="15" fill="rgb(223,170,34)"/><text x="447.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:87) (2 samples, 0.09%)</title><rect x="448" y="484" width="1" height="15" fill="rgb(235,122,42)"/><text x="451.00" y="494.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (3 samples, 0.14%)</title><rect x="449" y="452" width="2" height="15" fill="rgb(230,77,39)"/><text x="452.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (3 samples, 0.14%)</title><rect x="449" y="468" width="2" height="15" fill="rgb(240,220,52)"/><text x="452.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:235) (2 samples, 0.09%)</title><rect x="451" y="452" width="1" height="15" fill="rgb(235,65,47)"/><text x="454.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (4 samples, 0.19%)</title><rect x="453" y="452" width="2" height="15" fill="rgb(223,3,34)"/><text x="456.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:471) (3 samples, 0.14%)</title><rect x="455" y="452" width="2" height="15" fill="rgb(240,46,6)"/><text x="458.00" y="462.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2131) (3 samples, 0.14%)</title><rect x="457" y="468" width="2" height="15" fill="rgb(226,215,31)"/><text x="460.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (19 samples, 0.90%)</title><rect x="449" y="436" width="11" height="15" fill="rgb(227,67,8)"/><text x="452.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (5 samples, 0.24%)</title><rect x="457" y="452" width="3" height="15" fill="rgb(245,162,6)"/><text x="460.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3534) (4 samples, 0.19%)</title><rect x="461" y="452" width="3" height="15" fill="rgb(205,144,35)"/><text x="464.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3536) (3 samples, 0.14%)</title><rect x="464" y="452" width="2" height="15" fill="rgb(211,151,12)"/><text x="467.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3537) (3 samples, 0.14%)</title><rect x="466" y="452" width="2" height="15" fill="rgb(243,207,40)"/><text x="469.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3540) (4 samples, 0.19%)</title><rect x="468" y="452" width="2" height="15" fill="rgb(231,146,23)"/><text x="471.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3541) (4 samples, 0.19%)</title><rect x="470" y="452" width="3" height="15" fill="rgb(233,91,15)"/><text x="473.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1741) (5 samples, 0.24%)</title><rect x="478" y="468" width="3" height="15" fill="rgb(250,217,37)"/><text x="481.00" y="478.50"></text></g><g><title>FLOAT_add (loops.c.src:1742) (11 samples, 0.52%)</title><rect x="481" y="468" width="6" height="15" fill="rgb(240,25,30)"/><text x="484.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1662) (7 samples, 0.33%)</title><rect x="492" y="484" width="4" height="15" fill="rgb(220,119,48)"/><text x="495.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1667) (43 samples, 2.04%)</title><rect x="496" y="484" width="24" height="15" fill="rgb(224,158,4)"/><text x="499.00" y="494.50">p..</text></g><g><title>FLOAT_add (loops.c.src:1747) (65 samples, 3.08%)</title><rect x="487" y="468" width="37" height="15" fill="rgb(213,9,40)"/><text x="490.00" y="478.50">FLO..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1668) (6 samples, 0.28%)</title><rect x="520" y="484" width="4" height="15" fill="rgb(247,41,7)"/><text x="523.00" y="494.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:194) (6 samples, 0.28%)</title><rect x="524" y="468" width="4" height="15" fill="rgb(230,106,42)"/><text x="527.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:229) (5 samples, 0.24%)</title><rect x="528" y="468" width="3" height="15" fill="rgb(241,142,40)"/><text x="531.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:235) (7 samples, 0.33%)</title><rect x="531" y="468" width="4" height="15" fill="rgb(206,214,35)"/><text x="534.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:239) (7 samples, 0.33%)</title><rect x="535" y="468" width="4" height="15" fill="rgb(217,96,41)"/><text x="538.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (3 samples, 0.14%)</title><rect x="539" y="468" width="2" height="15" fill="rgb(252,0,16)"/><text x="542.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:243) (9 samples, 0.43%)</title><rect x="541" y="468" width="5" height="15" fill="rgb(244,54,23)"/><text x="544.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:244) (2 samples, 0.09%)</title><rect x="546" y="468" width="1" height="15" fill="rgb(214,169,51)"/><text x="549.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (161 samples, 7.64%)</title><rect x="461" y="436" width="90" height="15" fill="rgb(205,138,33)"/><text x="464.00" y="446.50">PyUFunc_Re..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (140 samples, 6.64%)</title><rect x="473" y="452" width="78" height="15" fill="rgb(223,133,47)"/><text x="476.00" y="462.50">reduce_lo..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:268) (7 samples, 0.33%)</title><rect x="547" y="468" width="4" height="15" fill="rgb(252,183,13)"/><text x="550.00" y="478.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (2 samples, 0.09%)</title><rect x="551" y="452" width="1" height="15" fill="rgb(245,74,54)"/><text x="554.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (3 samples, 0.14%)</title><rect x="551" y="436" width="2" height="15" fill="rgb(222,184,47)"/><text x="554.00" y="446.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (404 samples, 19.17%)</title><rect x="327" y="276" width="226" height="15" fill="rgb(252,161,45)"/><text x="330.00" y="286.50">run (mlprodict/onnxrt/ops_cpu..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (395 samples, 18.75%)</title><rect x="332" y="292" width="221" height="15" fill="rgb(234,92,5)"/><text x="335.00" y="302.50">run (mlprodict/onnxrt/ops_cpu..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (306 samples, 14.52%)</title><rect x="382" y="308" width="171" height="15" fill="rgb(246,201,27)"/><text x="385.00" y="318.50">_run (mlprodict/onnxrt..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (281 samples, 13.34%)</title><rect x="396" y="324" width="157" height="15" fill="rgb(223,79,8)"/><text x="399.00" y="334.50">sum (&lt;__array_functi..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (275 samples, 13.05%)</title><rect x="399" y="340" width="154" height="15" fill="rgb(211,218,20)"/><text x="402.00" y="350.50">array_implement_arr..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (262 samples, 12.43%)</title><rect x="407" y="356" width="146" height="15" fill="rgb(253,87,37)"/><text x="410.00" y="366.50">sum (numpy/core/fr..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (244 samples, 11.58%)</title><rect x="417" y="372" width="136" height="15" fill="rgb(252,2,1)"/><text x="420.00" y="382.50">_wrapreduction (n..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (230 samples, 10.92%)</title><rect x="424" y="388" width="129" height="15" fill="rgb(211,139,43)"/><text x="427.00" y="398.50">ufunc_reduce (uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (216 samples, 10.25%)</title><rect x="432" y="404" width="121" height="15" fill="rgb(251,166,11)"/><text x="435.00" y="414.50">PyUFunc_Generic..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (211 samples, 10.01%)</title><rect x="435" y="420" width="118" height="15" fill="rgb(230,109,13)"/><text x="438.00" y="430.50">PyUFunc_Reduce..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (3 samples, 0.14%)</title><rect x="553" y="276" width="2" height="15" fill="rgb(243,153,8)"/><text x="556.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (3 samples, 0.14%)</title><rect x="557" y="292" width="1" height="15" fill="rgb(247,144,21)"/><text x="560.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:527) (3 samples, 0.14%)</title><rect x="561" y="308" width="2" height="15" fill="rgb(250,29,5)"/><text x="564.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (2 samples, 0.09%)</title><rect x="565" y="324" width="1" height="15" fill="rgb(253,203,44)"/><text x="568.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (3 samples, 0.14%)</title><rect x="566" y="340" width="2" height="15" fill="rgb(226,4,35)"/><text x="569.00" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1119) (2 samples, 0.09%)</title><rect x="567" y="356" width="1" height="15" fill="rgb(238,127,11)"/><text x="570.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (2 samples, 0.09%)</title><rect x="568" y="340" width="1" height="15" fill="rgb(246,58,46)"/><text x="571.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (2 samples, 0.09%)</title><rect x="568" y="356" width="1" height="15" fill="rgb(223,71,24)"/><text x="571.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:319) (2 samples, 0.09%)</title><rect x="571" y="388" width="1" height="15" fill="rgb(245,79,15)"/><text x="574.00" y="398.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (4 samples, 0.19%)</title><rect x="575" y="484" width="2" height="15" fill="rgb(239,147,6)"/><text x="578.00" y="494.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (4 samples, 0.19%)</title><rect x="575" y="500" width="2" height="15" fill="rgb(239,134,16)"/><text x="578.00" y="510.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.19%)</title><rect x="575" y="516" width="2" height="15" fill="rgb(231,83,50)"/><text x="578.00" y="526.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (7 samples, 0.33%)</title><rect x="573" y="404" width="4" height="15" fill="rgb(209,36,49)"/><text x="576.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (5 samples, 0.24%)</title><rect x="575" y="420" width="2" height="15" fill="rgb(233,54,34)"/><text x="578.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (5 samples, 0.24%)</title><rect x="575" y="436" width="2" height="15" fill="rgb(225,33,31)"/><text x="578.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (5 samples, 0.24%)</title><rect x="575" y="452" width="2" height="15" fill="rgb(235,223,24)"/><text x="578.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (5 samples, 0.24%)</title><rect x="575" y="468" width="2" height="15" fill="rgb(250,38,17)"/><text x="578.00" y="478.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2858) (2 samples, 0.09%)</title><rect x="577" y="404" width="1" height="15" fill="rgb(222,105,28)"/><text x="580.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (12 samples, 0.57%)</title><rect x="573" y="388" width="7" height="15" fill="rgb(236,217,48)"/><text x="576.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (20 samples, 0.95%)</title><rect x="570" y="372" width="11" height="15" fill="rgb(226,117,31)"/><text x="573.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (2 samples, 0.09%)</title><rect x="580" y="388" width="1" height="15" fill="rgb(218,74,32)"/><text x="583.00" y="398.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:306) (2 samples, 0.09%)</title><rect x="583" y="388" width="1" height="15" fill="rgb(218,193,31)"/><text x="586.00" y="398.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1720) (2 samples, 0.09%)</title><rect x="583" y="404" width="1" height="15" fill="rgb(248,84,39)"/><text x="586.00" y="414.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (8 samples, 0.38%)</title><rect x="585" y="420" width="4" height="15" fill="rgb(209,11,12)"/><text x="588.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1014) (2 samples, 0.09%)</title><rect x="589" y="420" width="1" height="15" fill="rgb(207,192,43)"/><text x="592.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (12 samples, 0.57%)</title><rect x="590" y="420" width="7" height="15" fill="rgb(244,71,36)"/><text x="593.00" y="430.50"></text></g><g><title>0x7f9ae3ce4d5f (libc-2.29.so) (2 samples, 0.09%)</title><rect x="598" y="436" width="1" height="15" fill="rgb(224,101,54)"/><text x="601.00" y="446.50"></text></g><g><title>0x7f9ae3ce4d67 (libc-2.29.so) (5 samples, 0.24%)</title><rect x="599" y="436" width="2" height="15" fill="rgb(232,59,0)"/><text x="602.00" y="446.50"></text></g><g><title>0x7f9ae3ce4d6f (libc-2.29.so) (6 samples, 0.28%)</title><rect x="601" y="436" width="4" height="15" fill="rgb(230,94,49)"/><text x="604.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (19 samples, 0.90%)</title><rect x="597" y="420" width="11" height="15" fill="rgb(217,33,3)"/><text x="600.00" y="430.50"></text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src:330) (5 samples, 0.24%)</title><rect x="605" y="436" width="3" height="15" fill="rgb(249,105,26)"/><text x="608.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1025) (7 samples, 0.33%)</title><rect x="608" y="420" width="4" height="15" fill="rgb(246,219,46)"/><text x="611.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (55 samples, 2.61%)</title><rect x="582" y="372" width="31" height="15" fill="rgb(231,172,1)"/><text x="585.00" y="382.50">it..</text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (51 samples, 2.42%)</title><rect x="584" y="388" width="29" height="15" fill="rgb(225,79,26)"/><text x="587.00" y="398.50">Np..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (50 samples, 2.37%)</title><rect x="585" y="404" width="28" height="15" fill="rgb(231,95,26)"/><text x="588.00" y="414.50">n..</text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:603) (8 samples, 0.38%)</title><rect x="613" y="420" width="5" height="15" fill="rgb(205,171,4)"/><text x="616.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h:163) (8 samples, 0.38%)</title><rect x="613" y="436" width="5" height="15" fill="rgb(254,175,14)"/><text x="616.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (13 samples, 0.62%)</title><rect x="613" y="388" width="8" height="15" fill="rgb(214,150,1)"/><text x="616.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (13 samples, 0.62%)</title><rect x="613" y="404" width="8" height="15" fill="rgb(208,36,25)"/><text x="616.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:604) (5 samples, 0.24%)</title><rect x="618" y="420" width="3" height="15" fill="rgb(237,26,48)"/><text x="621.00" y="430.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (5 samples, 0.24%)</title><rect x="618" y="436" width="3" height="15" fill="rgb(228,28,15)"/><text x="621.00" y="446.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (15 samples, 0.71%)</title><rect x="613" y="372" width="9" height="15" fill="rgb(227,139,17)"/><text x="616.00" y="382.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:275) (2 samples, 0.09%)</title><rect x="621" y="388" width="1" height="15" fill="rgb(218,167,40)"/><text x="624.00" y="398.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (4 samples, 0.19%)</title><rect x="622" y="388" width="2" height="15" fill="rgb(209,227,45)"/><text x="625.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (98 samples, 4.65%)</title><rect x="570" y="356" width="55" height="15" fill="rgb(242,224,54)"/><text x="573.00" y="366.50">execu..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (6 samples, 0.28%)</title><rect x="622" y="372" width="3" height="15" fill="rgb(213,27,53)"/><text x="625.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (2 samples, 0.09%)</title><rect x="624" y="388" width="1" height="15" fill="rgb(242,72,0)"/><text x="627.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (99 samples, 4.70%)</title><rect x="570" y="340" width="56" height="15" fill="rgb(221,12,16)"/><text x="573.00" y="350.50">PyUFu..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (127 samples, 6.03%)</title><rect x="556" y="276" width="71" height="15" fill="rgb(244,182,25)"/><text x="559.00" y="286.50">run (mlp..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (122 samples, 5.79%)</title><rect x="558" y="292" width="69" height="15" fill="rgb(208,126,12)"/><text x="561.00" y="302.50">run (ml..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (114 samples, 5.41%)</title><rect x="563" y="308" width="64" height="15" fill="rgb(246,130,0)"/><text x="566.00" y="318.50">_run (m..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (108 samples, 5.13%)</title><rect x="566" y="324" width="61" height="15" fill="rgb(241,7,39)"/><text x="569.00" y="334.50">ufunc_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (2 samples, 0.09%)</title><rect x="626" y="340" width="1" height="15" fill="rgb(247,62,39)"/><text x="629.00" y="350.50"></text></g><g><title>_check_ufunc_fperr (extobj.c:286) (2 samples, 0.09%)</title><rect x="626" y="356" width="1" height="15" fill="rgb(237,178,39)"/><text x="629.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:793) (2 samples, 0.09%)</title><rect x="626" y="372" width="1" height="15" fill="rgb(241,106,5)"/><text x="629.00" y="382.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (561 samples, 26.63%)</title><rect x="314" y="260" width="314" height="15" fill="rgb(231,25,43)"/><text x="317.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node...</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (2 samples, 0.09%)</title><rect x="627" y="276" width="1" height="15" fill="rgb(211,109,38)"/><text x="630.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (7 samples, 0.33%)</title><rect x="628" y="260" width="4" height="15" fill="rgb(233,136,28)"/><text x="631.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (16 samples, 0.76%)</title><rect x="632" y="260" width="9" height="15" fill="rgb(232,58,34)"/><text x="635.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (3 samples, 0.14%)</title><rect x="641" y="260" width="1" height="15" fill="rgb(234,121,47)"/><text x="644.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (26 samples, 1.23%)</title><rect x="642" y="260" width="15" height="15" fill="rgb(232,205,39)"/><text x="645.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (708 samples, 33.60%)</title><rect x="265" y="244" width="396" height="15" fill="rgb(230,143,46)"/><text x="268.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inferenc..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (8 samples, 0.38%)</title><rect x="657" y="260" width="4" height="15" fill="rgb(210,197,20)"/><text x="660.00" y="270.50"></text></g><g><title>0x7f9ae3da2134 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="668" y="292" width="1" height="15" fill="rgb(212,43,26)"/><text x="671.00" y="302.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (15 samples, 0.71%)</title><rect x="661" y="244" width="9" height="15" fill="rgb(232,201,7)"/><text x="664.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (11 samples, 0.52%)</title><rect x="664" y="260" width="6" height="15" fill="rgb(253,216,25)"/><text x="667.00" y="270.50"></text></g><g><title>unicode_eq (python3.7) (3 samples, 0.14%)</title><rect x="668" y="276" width="2" height="15" fill="rgb(211,138,1)"/><text x="671.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (3 samples, 0.14%)</title><rect x="670" y="244" width="1" height="15" fill="rgb(239,193,34)"/><text x="673.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (2 samples, 0.09%)</title><rect x="670" y="260" width="1" height="15" fill="rgb(209,187,54)"/><text x="673.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (2 samples, 0.09%)</title><rect x="670" y="276" width="1" height="15" fill="rgb(237,165,54)"/><text x="673.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (766 samples, 36.36%)</title><rect x="243" y="212" width="429" height="15" fill="rgb(217,81,29)"/><text x="246.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (753 samples, 35.74%)</title><rect x="250" y="228" width="422" height="15" fill="rgb(252,45,37)"/><text x="253.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (6 samples, 0.28%)</title><rect x="672" y="212" width="3" height="15" fill="rgb(244,126,26)"/><text x="675.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (3 samples, 0.14%)</title><rect x="674" y="228" width="1" height="15" fill="rgb(244,29,40)"/><text x="677.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (6 samples, 0.28%)</title><rect x="675" y="212" width="4" height="15" fill="rgb(237,63,13)"/><text x="678.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (5 samples, 0.24%)</title><rect x="683" y="228" width="3" height="15" fill="rgb(228,226,29)"/><text x="686.00" y="238.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py:509) (2 samples, 0.09%)</title><rect x="685" y="244" width="1" height="15" fill="rgb(245,147,27)"/><text x="688.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (2 samples, 0.09%)</title><rect x="688" y="244" width="1" height="15" fill="rgb(216,42,3)"/><text x="691.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (2 samples, 0.09%)</title><rect x="691" y="260" width="1" height="15" fill="rgb(228,12,27)"/><text x="694.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (9 samples, 0.43%)</title><rect x="692" y="260" width="5" height="15" fill="rgb(223,130,39)"/><text x="695.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (6 samples, 0.28%)</title><rect x="693" y="276" width="4" height="15" fill="rgb(209,134,40)"/><text x="696.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:576) (3 samples, 0.14%)</title><rect x="697" y="260" width="1" height="15" fill="rgb(244,176,34)"/><text x="700.00" y="270.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c:1184) (2 samples, 0.09%)</title><rect x="697" y="276" width="1" height="15" fill="rgb(219,173,5)"/><text x="700.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (8 samples, 0.38%)</title><rect x="698" y="260" width="5" height="15" fill="rgb(215,137,50)"/><text x="701.00" y="270.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (2 samples, 0.09%)</title><rect x="711" y="292" width="1" height="15" fill="rgb(223,80,3)"/><text x="714.00" y="302.50"></text></g><g><title>array_reshape (methods.c:195) (9 samples, 0.43%)</title><rect x="708" y="276" width="5" height="15" fill="rgb(213,135,11)"/><text x="711.00" y="286.50"></text></g><g><title>PyArray_Newshape (shape.c:230) (2 samples, 0.09%)</title><rect x="713" y="308" width="1" height="15" fill="rgb(219,53,42)"/><text x="716.00" y="318.50"></text></g><g><title>_fix_unknown_dimension (shape.c:481) (2 samples, 0.09%)</title><rect x="713" y="324" width="1" height="15" fill="rgb(220,203,44)"/><text x="716.00" y="334.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c:151) (2 samples, 0.09%)</title><rect x="713" y="340" width="1" height="15" fill="rgb(225,51,30)"/><text x="716.00" y="350.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (2 samples, 0.09%)</title><rect x="714" y="308" width="1" height="15" fill="rgb(226,78,33)"/><text x="717.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (67 samples, 3.18%)</title><rect x="679" y="212" width="37" height="15" fill="rgb(230,20,25)"/><text x="682.00" y="222.50">_ru..</text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (54 samples, 2.56%)</title><rect x="686" y="228" width="30" height="15" fill="rgb(209,75,27)"/><text x="689.00" y="238.50">ex..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (48 samples, 2.28%)</title><rect x="689" y="244" width="27" height="15" fill="rgb(243,86,30)"/><text x="692.00" y="254.50">a..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (24 samples, 1.14%)</title><rect x="703" y="260" width="13" height="15" fill="rgb(213,111,36)"/><text x="706.00" y="270.50"></text></g><g><title>array_reshape (methods.c:210) (6 samples, 0.28%)</title><rect x="713" y="276" width="3" height="15" fill="rgb(243,135,29)"/><text x="716.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (6 samples, 0.28%)</title><rect x="713" y="292" width="3" height="15" fill="rgb(243,145,19)"/><text x="716.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c:284) (2 samples, 0.09%)</title><rect x="715" y="308" width="1" height="15" fill="rgb(214,23,4)"/><text x="718.00" y="318.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (2 samples, 0.09%)</title><rect x="716" y="260" width="1" height="15" fill="rgb(225,104,47)"/><text x="719.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (2 samples, 0.09%)</title><rect x="716" y="276" width="1" height="15" fill="rgb(237,122,10)"/><text x="719.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.09%)</title><rect x="716" y="292" width="1" height="15" fill="rgb(236,79,12)"/><text x="719.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (2 samples, 0.09%)</title><rect x="716" y="308" width="1" height="15" fill="rgb(210,37,26)"/><text x="719.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (2 samples, 0.09%)</title><rect x="716" y="324" width="1" height="15" fill="rgb(244,190,40)"/><text x="719.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (4 samples, 0.19%)</title><rect x="716" y="212" width="3" height="15" fill="rgb(233,228,11)"/><text x="719.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (4 samples, 0.19%)</title><rect x="716" y="228" width="3" height="15" fill="rgb(235,193,16)"/><text x="719.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.19%)</title><rect x="716" y="244" width="3" height="15" fill="rgb(224,152,25)"/><text x="719.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (2 samples, 0.09%)</title><rect x="717" y="260" width="2" height="15" fill="rgb(231,17,4)"/><text x="720.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (2 samples, 0.09%)</title><rect x="717" y="276" width="2" height="15" fill="rgb(223,40,11)"/><text x="720.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.09%)</title><rect x="717" y="292" width="2" height="15" fill="rgb(245,99,28)"/><text x="720.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (2 samples, 0.09%)</title><rect x="717" y="308" width="2" height="15" fill="rgb(231,77,39)"/><text x="720.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (2 samples, 0.09%)</title><rect x="717" y="324" width="2" height="15" fill="rgb(247,54,45)"/><text x="720.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (2 samples, 0.09%)</title><rect x="717" y="340" width="2" height="15" fill="rgb(226,140,51)"/><text x="720.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (2 samples, 0.09%)</title><rect x="717" y="356" width="2" height="15" fill="rgb(220,216,53)"/><text x="720.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (2 samples, 0.09%)</title><rect x="717" y="372" width="2" height="15" fill="rgb(213,159,47)"/><text x="720.00" y="382.50"></text></g><g><title>_new_argsortlike (item_selection.c:1048) (14 samples, 0.66%)</title><rect x="721" y="356" width="8" height="15" fill="rgb(225,24,49)"/><text x="724.00" y="366.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src:1915) (14 samples, 0.66%)</title><rect x="721" y="372" width="8" height="15" fill="rgb(218,35,53)"/><text x="724.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c:319) (14 samples, 0.66%)</title><rect x="721" y="388" width="8" height="15" fill="rgb(244,17,35)"/><text x="724.00" y="398.50"></text></g><g><title>_new_argsortlike (item_selection.c:1057) (3 samples, 0.14%)</title><rect x="729" y="356" width="2" height="15" fill="rgb(252,187,11)"/><text x="732.00" y="366.50"></text></g><g><title>amedian3_swap_float (selection.c.src:134) (6 samples, 0.28%)</title><rect x="732" y="388" width="3" height="15" fill="rgb(213,106,31)"/><text x="735.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (6 samples, 0.28%)</title><rect x="732" y="404" width="3" height="15" fill="rgb(250,114,51)"/><text x="735.00" y="414.50"></text></g><g><title>aintroselect_float (selection.c.src:357) (7 samples, 0.33%)</title><rect x="732" y="372" width="4" height="15" fill="rgb(209,228,17)"/><text x="735.00" y="382.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:201) (32 samples, 1.52%)</title><rect x="738" y="388" width="17" height="15" fill="rgb(220,201,29)"/><text x="741.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (19 samples, 0.90%)</title><rect x="745" y="404" width="10" height="15" fill="rgb(253,13,50)"/><text x="748.00" y="414.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:202) (45 samples, 2.14%)</title><rect x="755" y="388" width="26" height="15" fill="rgb(213,208,42)"/><text x="758.00" y="398.50">a..</text></g><g><title>FLOAT_LT (npysort_common.h:123) (32 samples, 1.52%)</title><rect x="763" y="404" width="18" height="15" fill="rgb(242,128,21)"/><text x="766.00" y="414.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:204) (4 samples, 0.19%)</title><rect x="781" y="388" width="2" height="15" fill="rgb(215,130,15)"/><text x="784.00" y="398.50"></text></g><g><title>aintroselect_float (selection.c.src:380) (87 samples, 4.13%)</title><rect x="736" y="372" width="49" height="15" fill="rgb(223,59,48)"/><text x="739.00" y="382.50">aint..</text></g><g><title>aunguarded_partition_float (selection.c.src:207) (3 samples, 0.14%)</title><rect x="783" y="388" width="2" height="15" fill="rgb(214,119,53)"/><text x="786.00" y="398.50"></text></g><g><title>aintroselect_float (selection.c.src:387) (2 samples, 0.09%)</title><rect x="785" y="372" width="1" height="15" fill="rgb(236,114,8)"/><text x="788.00" y="382.50"></text></g><g><title>store_pivot (selection.c.src:54) (2 samples, 0.09%)</title><rect x="785" y="388" width="1" height="15" fill="rgb(230,154,19)"/><text x="788.00" y="398.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (121 samples, 5.74%)</title><rect x="719" y="244" width="68" height="15" fill="rgb(253,199,19)"/><text x="722.00" y="254.50">topk_so..</text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (121 samples, 5.74%)</title><rect x="719" y="260" width="68" height="15" fill="rgb(239,66,38)"/><text x="722.00" y="270.50">argpart..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (120 samples, 5.70%)</title><rect x="720" y="276" width="67" height="15" fill="rgb(212,103,30)"/><text x="723.00" y="286.50">array_i..</text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (120 samples, 5.70%)</title><rect x="720" y="292" width="67" height="15" fill="rgb(206,62,29)"/><text x="723.00" y="302.50">argpart..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (120 samples, 5.70%)</title><rect x="720" y="308" width="67" height="15" fill="rgb(235,93,37)"/><text x="723.00" y="318.50">_wrapfu..</text></g><g><title>array_argpartition (methods.c:1454) (120 samples, 5.70%)</title><rect x="720" y="324" width="67" height="15" fill="rgb(211,81,33)"/><text x="723.00" y="334.50">array_a..</text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (120 samples, 5.70%)</title><rect x="720" y="340" width="67" height="15" fill="rgb(247,170,44)"/><text x="723.00" y="350.50">PyArray..</text></g><g><title>_new_argsortlike (item_selection.c:1084) (99 samples, 4.70%)</title><rect x="731" y="356" width="56" height="15" fill="rgb(222,183,4)"/><text x="734.00" y="366.50">_new_..</text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (3 samples, 0.14%)</title><rect x="789" y="260" width="1" height="15" fill="rgb(240,74,12)"/><text x="792.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.09%)</title><rect x="789" y="276" width="1" height="15" fill="rgb(207,154,49)"/><text x="792.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (2 samples, 0.09%)</title><rect x="789" y="292" width="1" height="15" fill="rgb(225,127,29)"/><text x="792.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (2 samples, 0.09%)</title><rect x="789" y="308" width="1" height="15" fill="rgb(249,72,50)"/><text x="792.00" y="318.50"></text></g><g><title>array_argsort (methods.c:1395) (2 samples, 0.09%)</title><rect x="789" y="324" width="1" height="15" fill="rgb(246,180,30)"/><text x="792.00" y="334.50"></text></g><g><title>PyArray_ArgSort (item_selection.c:1322) (2 samples, 0.09%)</title><rect x="789" y="340" width="1" height="15" fill="rgb(244,36,18)"/><text x="792.00" y="350.50"></text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.14%)</title><rect x="790" y="260" width="2" height="15" fill="rgb(243,145,11)"/><text x="793.00" y="270.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2964) (2 samples, 0.09%)</title><rect x="791" y="276" width="1" height="15" fill="rgb(208,190,14)"/><text x="794.00" y="286.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c:229) (2 samples, 0.09%)</title><rect x="791" y="292" width="1" height="15" fill="rgb(230,188,49)"/><text x="794.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c:281) (2 samples, 0.09%)</title><rect x="791" y="308" width="1" height="15" fill="rgb(220,84,36)"/><text x="794.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (2 samples, 0.09%)</title><rect x="791" y="324" width="1" height="15" fill="rgb(234,173,24)"/><text x="794.00" y="334.50"></text></g><g><title>0x7f9ae3ce4d50 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="792" y="356" width="2" height="15" fill="rgb(246,4,26)"/><text x="795.00" y="366.50"></text></g><g><title>array_subscript (mapping.c:1666) (5 samples, 0.24%)</title><rect x="792" y="260" width="3" height="15" fill="rgb(250,169,42)"/><text x="795.00" y="270.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c:2535) (4 samples, 0.19%)</title><rect x="792" y="276" width="3" height="15" fill="rgb(234,129,23)"/><text x="795.00" y="286.50"></text></g><g><title>NpyIter_New (nditer_constr.c:534) (4 samples, 0.19%)</title><rect x="792" y="292" width="3" height="15" fill="rgb(208,204,28)"/><text x="795.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (4 samples, 0.19%)</title><rect x="792" y="308" width="3" height="15" fill="rgb(232,155,19)"/><text x="795.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (4 samples, 0.19%)</title><rect x="792" y="324" width="3" height="15" fill="rgb(225,191,9)"/><text x="795.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (4 samples, 0.19%)</title><rect x="792" y="340" width="3" height="15" fill="rgb(229,175,7)"/><text x="795.00" y="350.50"></text></g><g><title>0x7f9ae3ce4e48 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="794" y="356" width="1" height="15" fill="rgb(227,184,6)"/><text x="797.00" y="366.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1564) (2 samples, 0.09%)</title><rect x="795" y="276" width="1" height="15" fill="rgb(234,198,31)"/><text x="798.00" y="286.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (18 samples, 0.85%)</title><rect x="787" y="244" width="10" height="15" fill="rgb(244,19,27)"/><text x="790.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (5 samples, 0.24%)</title><rect x="795" y="260" width="2" height="15" fill="rgb(215,30,17)"/><text x="798.00" y="270.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (147 samples, 6.98%)</title><rect x="719" y="228" width="82" height="15" fill="rgb(243,196,28)"/><text x="722.00" y="238.50">_common_r..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:39) (6 samples, 0.28%)</title><rect x="797" y="244" width="4" height="15" fill="rgb(212,80,48)"/><text x="800.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (4 samples, 0.19%)</title><rect x="799" y="260" width="2" height="15" fill="rgb(247,142,6)"/><text x="802.00" y="270.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:76) (2 samples, 0.09%)</title><rect x="801" y="228" width="1" height="15" fill="rgb(243,130,21)"/><text x="804.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (150 samples, 7.12%)</title><rect x="719" y="212" width="84" height="15" fill="rgb(251,22,20)"/><text x="722.00" y="222.50">_run (mlp..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (1,095 samples, 51.97%)</title><rect x="190" y="196" width="614" height="15" fill="rgb(221,163,25)"/><text x="193.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>array_dealloc (arrayobject.c:520) (2 samples, 0.09%)</title><rect x="803" y="212" width="1" height="15" fill="rgb(220,108,41)"/><text x="806.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:537) (2 samples, 0.09%)</title><rect x="803" y="228" width="1" height="15" fill="rgb(249,114,13)"/><text x="806.00" y="238.50"></text></g><g><title>npy_free_cache (alloc.c:147) (2 samples, 0.09%)</title><rect x="803" y="244" width="1" height="15" fill="rgb(205,131,45)"/><text x="806.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c:112) (2 samples, 0.09%)</title><rect x="803" y="260" width="1" height="15" fill="rgb(233,180,39)"/><text x="806.00" y="270.50"></text></g><g><title>PyDataMem_FREE (alloc.c:274) (2 samples, 0.09%)</title><rect x="803" y="276" width="1" height="15" fill="rgb(218,193,51)"/><text x="806.00" y="286.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (2 samples, 0.09%)</title><rect x="806" y="356" width="2" height="15" fill="rgb(223,140,49)"/><text x="809.00" y="366.50"></text></g><g><title>FLOAT_add (loops.c.src:1741) (3 samples, 0.14%)</title><rect x="809" y="388" width="2" height="15" fill="rgb(250,22,20)"/><text x="812.00" y="398.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (5 samples, 0.24%)</title><rect x="811" y="388" width="3" height="15" fill="rgb(209,25,19)"/><text x="814.00" y="398.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1667) (4 samples, 0.19%)</title><rect x="811" y="404" width="3" height="15" fill="rgb(213,82,28)"/><text x="814.00" y="414.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (12 samples, 0.57%)</title><rect x="808" y="356" width="6" height="15" fill="rgb(205,201,32)"/><text x="811.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (10 samples, 0.47%)</title><rect x="809" y="372" width="5" height="15" fill="rgb(233,180,1)"/><text x="812.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (18 samples, 0.85%)</title><rect x="805" y="228" width="10" height="15" fill="rgb(223,163,26)"/><text x="808.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (18 samples, 0.85%)</title><rect x="805" y="244" width="10" height="15" fill="rgb(216,173,25)"/><text x="808.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (18 samples, 0.85%)</title><rect x="805" y="260" width="10" height="15" fill="rgb(218,27,50)"/><text x="808.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (18 samples, 0.85%)</title><rect x="805" y="276" width="10" height="15" fill="rgb(233,27,0)"/><text x="808.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (17 samples, 0.81%)</title><rect x="805" y="292" width="10" height="15" fill="rgb(238,222,28)"/><text x="808.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (17 samples, 0.81%)</title><rect x="805" y="308" width="10" height="15" fill="rgb(228,39,3)"/><text x="808.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (17 samples, 0.81%)</title><rect x="805" y="324" width="10" height="15" fill="rgb(251,22,43)"/><text x="808.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (17 samples, 0.81%)</title><rect x="805" y="340" width="10" height="15" fill="rgb(214,229,1)"/><text x="808.00" y="350.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (24 samples, 1.14%)</title><rect x="805" y="196" width="13" height="15" fill="rgb(210,224,13)"/><text x="808.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (24 samples, 1.14%)</title><rect x="805" y="212" width="13" height="15" fill="rgb(244,146,27)"/><text x="808.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py:19) (6 samples, 0.28%)</title><rect x="815" y="228" width="3" height="15" fill="rgb(241,217,41)"/><text x="818.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 0.28%)</title><rect x="815" y="244" width="3" height="15" fill="rgb(224,218,46)"/><text x="818.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 0.28%)</title><rect x="815" y="260" width="3" height="15" fill="rgb(227,65,21)"/><text x="818.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (5 samples, 0.24%)</title><rect x="815" y="276" width="3" height="15" fill="rgb(250,46,49)"/><text x="818.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (5 samples, 0.24%)</title><rect x="815" y="292" width="3" height="15" fill="rgb(205,67,25)"/><text x="818.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src:1584) (5 samples, 0.24%)</title><rect x="815" y="308" width="3" height="15" fill="rgb(249,66,46)"/><text x="818.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src:195) (5 samples, 0.24%)</title><rect x="815" y="324" width="3" height="15" fill="rgb(249,117,53)"/><text x="818.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src:1005) (5 samples, 0.24%)</title><rect x="815" y="340" width="3" height="15" fill="rgb(224,33,47)"/><text x="818.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (5 samples, 0.24%)</title><rect x="815" y="356" width="3" height="15" fill="rgb(246,75,11)"/><text x="818.00" y="366.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (2 samples, 0.09%)</title><rect x="818" y="196" width="1" height="15" fill="rgb(234,192,1)"/><text x="821.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,127 samples, 53.49%)</title><rect x="190" y="180" width="631" height="15" fill="rgb(254,167,36)"/><text x="193.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (3 samples, 0.14%)</title><rect x="819" y="196" width="2" height="15" fill="rgb(254,46,20)"/><text x="822.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (2 samples, 0.09%)</title><rect x="820" y="212" width="1" height="15" fill="rgb(249,207,38)"/><text x="823.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_div.py:18) (2 samples, 0.09%)</title><rect x="820" y="228" width="1" height="15" fill="rgb(239,90,28)"/><text x="823.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (2 samples, 0.09%)</title><rect x="820" y="244" width="1" height="15" fill="rgb(235,121,9)"/><text x="823.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.09%)</title><rect x="820" y="260" width="1" height="15" fill="rgb(224,44,21)"/><text x="823.00" y="270.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:45) (1,249 samples, 59.28%)</title><rect x="123" y="52" width="699" height="15" fill="rgb(218,24,9)"/><text x="126.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:45)</text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:44) (1,249 samples, 59.28%)</title><rect x="123" y="68" width="699" height="15" fill="rgb(242,193,3)"/><text x="126.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:44)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:29) (1,246 samples, 59.14%)</title><rect x="124" y="84" width="698" height="15" fill="rgb(232,144,37)"/><text x="127.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:29)</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:23) (1,134 samples, 53.82%)</title><rect x="187" y="100" width="635" height="15" fill="rgb(219,30,20)"/><text x="190.00" y="110.50">profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:23)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (1,134 samples, 53.82%)</title><rect x="187" y="116" width="635" height="15" fill="rgb(213,117,37)"/><text x="190.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (1,134 samples, 53.82%)</title><rect x="187" y="132" width="635" height="15" fill="rgb(207,102,53)"/><text x="190.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,133 samples, 53.77%)</title><rect x="188" y="148" width="634" height="15" fill="rgb(237,191,25)"/><text x="191.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,133 samples, 53.77%)</title><rect x="188" y="164" width="634" height="15" fill="rgb(251,142,30)"/><text x="191.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 0.66%)</title><rect x="825" y="436" width="8" height="15" fill="rgb(235,189,46)"/><text x="828.00" y="446.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.57%)</title><rect x="827" y="452" width="6" height="15" fill="rgb(251,196,44)"/><text x="830.00" y="462.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="832" y="468" width="1" height="15" fill="rgb(225,23,12)"/><text x="835.00" y="478.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (28 samples, 1.33%)</title><rect x="823" y="340" width="16" height="15" fill="rgb(242,51,36)"/><text x="826.00" y="350.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (28 samples, 1.33%)</title><rect x="823" y="356" width="16" height="15" fill="rgb(252,55,5)"/><text x="826.00" y="366.50"></text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (28 samples, 1.33%)</title><rect x="823" y="372" width="16" height="15" fill="rgb(213,176,1)"/><text x="826.00" y="382.50"></text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 1.23%)</title><rect x="824" y="388" width="15" height="15" fill="rgb(212,150,4)"/><text x="827.00" y="398.50"></text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 1.23%)</title><rect x="824" y="404" width="15" height="15" fill="rgb(215,116,42)"/><text x="827.00" y="414.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 1.23%)</title><rect x="824" y="420" width="15" height="15" fill="rgb(246,186,3)"/><text x="827.00" y="430.50"></text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.47%)</title><rect x="833" y="436" width="6" height="15" fill="rgb(223,12,50)"/><text x="836.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.47%)</title><rect x="833" y="452" width="6" height="15" fill="rgb(221,224,46)"/><text x="836.00" y="462.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.47%)</title><rect x="833" y="468" width="6" height="15" fill="rgb(244,196,34)"/><text x="836.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="838" y="484" width="1" height="15" fill="rgb(246,72,6)"/><text x="841.00" y="494.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.62%)</title><rect x="839" y="340" width="8" height="15" fill="rgb(208,166,27)"/><text x="842.00" y="350.50"></text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.62%)</title><rect x="839" y="356" width="8" height="15" fill="rgb(254,6,54)"/><text x="842.00" y="366.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.19%)</title><rect x="847" y="340" width="2" height="15" fill="rgb(235,1,7)"/><text x="850.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.19%)</title><rect x="847" y="356" width="2" height="15" fill="rgb(228,114,53)"/><text x="850.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (47 samples, 2.23%)</title><rect x="823" y="260" width="27" height="15" fill="rgb(245,66,27)"/><text x="826.00" y="270.50">o..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (47 samples, 2.23%)</title><rect x="823" y="276" width="27" height="15" fill="rgb(208,162,19)"/><text x="826.00" y="286.50">o..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (47 samples, 2.23%)</title><rect x="823" y="292" width="27" height="15" fill="rgb(211,38,12)"/><text x="826.00" y="302.50">o..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (47 samples, 2.23%)</title><rect x="823" y="308" width="27" height="15" fill="rgb(219,171,25)"/><text x="826.00" y="318.50">o..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (47 samples, 2.23%)</title><rect x="823" y="324" width="27" height="15" fill="rgb(245,146,38)"/><text x="826.00" y="334.50">o..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:18) (49 samples, 2.33%)</title><rect x="823" y="100" width="27" height="15" fill="rgb(231,29,46)"/><text x="826.00" y="110.50">p..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (49 samples, 2.33%)</title><rect x="823" y="116" width="27" height="15" fill="rgb(244,191,16)"/><text x="826.00" y="126.50">t..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (49 samples, 2.33%)</title><rect x="823" y="132" width="27" height="15" fill="rgb(237,208,50)"/><text x="826.00" y="142.50">&lt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (49 samples, 2.33%)</title><rect x="823" y="148" width="27" height="15" fill="rgb(240,47,10)"/><text x="826.00" y="158.50">r..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (49 samples, 2.33%)</title><rect x="823" y="164" width="27" height="15" fill="rgb(223,113,27)"/><text x="826.00" y="174.50">_..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (49 samples, 2.33%)</title><rect x="823" y="180" width="27" height="15" fill="rgb(216,101,48)"/><text x="826.00" y="190.50">r..</text></g><g><title>run (onnxruntime/capi/session.py:136) (49 samples, 2.33%)</title><rect x="823" y="196" width="27" height="15" fill="rgb(245,90,30)"/><text x="826.00" y="206.50">r..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (48 samples, 2.28%)</title><rect x="823" y="212" width="27" height="15" fill="rgb(205,138,38)"/><text x="826.00" y="222.50">p..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (48 samples, 2.28%)</title><rect x="823" y="228" width="27" height="15" fill="rgb(232,80,11)"/><text x="826.00" y="238.50">v..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (48 samples, 2.28%)</title><rect x="823" y="244" width="27" height="15" fill="rgb(216,172,33)"/><text x="826.00" y="254.50">o..</text></g><g><title>onnxruntime::ArgMax&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.24%)</title><rect x="853" y="340" width="3" height="15" fill="rgb(230,127,13)"/><text x="856.00" y="350.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.19%)</title><rect x="854" y="356" width="2" height="15" fill="rgb(228,172,54)"/><text x="857.00" y="366.50"></text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="856" y="340" width="1" height="15" fill="rgb(221,54,33)"/><text x="859.00" y="350.50"></text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="856" y="356" width="1" height="15" fill="rgb(234,199,20)"/><text x="859.00" y="366.50"></text></g><g><title>onnxruntime::Div&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="857" y="340" width="2" height="15" fill="rgb(226,110,10)"/><text x="860.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="857" y="356" width="2" height="15" fill="rgb(246,221,30)"/><text x="860.00" y="366.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="857" y="372" width="2" height="15" fill="rgb(234,61,3)"/><text x="860.00" y="382.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="859" y="340" width="1" height="15" fill="rgb(242,96,21)"/><text x="862.00" y="350.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="859" y="356" width="1" height="15" fill="rgb(210,105,15)"/><text x="862.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="859" y="372" width="1" height="15" fill="rgb(210,214,26)"/><text x="862.00" y="382.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="859" y="388" width="1" height="15" fill="rgb(235,178,2)"/><text x="862.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.09%)</title><rect x="859" y="404" width="1" height="15" fill="rgb(219,56,17)"/><text x="862.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="859" y="420" width="1" height="15" fill="rgb(229,216,29)"/><text x="862.00" y="430.50"></text></g><g><title>0x7f9ae3cc6028 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="859" y="436" width="1" height="15" fill="rgb(232,68,7)"/><text x="862.00" y="446.50"></text></g><g><title>onnxruntime::ReduceSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="860" y="340" width="1" height="15" fill="rgb(214,118,1)"/><text x="863.00" y="350.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="870" y="452" width="1" height="15" fill="rgb(211,216,5)"/><text x="873.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="870" y="468" width="1" height="15" fill="rgb(247,34,6)"/><text x="873.00" y="478.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="870" y="484" width="1" height="15" fill="rgb(210,204,34)"/><text x="873.00" y="494.50"></text></g><g><title>onnxruntime::SessionState::GetMemoryPatternGroup (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="871" y="452" width="2" height="15" fill="rgb(244,165,35)"/><text x="874.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.47%)</title><rect x="867" y="436" width="6" height="15" fill="rgb(237,139,46)"/><text x="870.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="875" y="484" width="1" height="15" fill="rgb(218,201,12)"/><text x="878.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="875" y="500" width="1" height="15" fill="rgb(239,138,43)"/><text x="878.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.28%)</title><rect x="873" y="436" width="3" height="15" fill="rgb(232,150,43)"/><text x="876.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.28%)</title><rect x="873" y="452" width="3" height="15" fill="rgb(240,13,11)"/><text x="876.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.19%)</title><rect x="874" y="468" width="2" height="15" fill="rgb(212,205,51)"/><text x="877.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="877" y="436" width="1" height="15" fill="rgb(220,196,4)"/><text x="880.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="877" y="452" width="1" height="15" fill="rgb(208,224,27)"/><text x="880.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="877" y="468" width="1" height="15" fill="rgb(252,164,16)"/><text x="880.00" y="478.50"></text></g><g><title>0x7f9ae3ce4d94 (libc-2.29.so) (11 samples, 0.52%)</title><rect x="880" y="452" width="6" height="15" fill="rgb(218,43,2)"/><text x="883.00" y="462.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 0.76%)</title><rect x="879" y="436" width="9" height="15" fill="rgb(215,86,6)"/><text x="882.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="886" y="452" width="2" height="15" fill="rgb(225,91,13)"/><text x="889.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="887" y="468" width="1" height="15" fill="rgb(229,182,3)"/><text x="890.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="887" y="484" width="1" height="15" fill="rgb(214,194,32)"/><text x="890.00" y="494.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="972" y="468" width="1" height="15" fill="rgb(251,1,37)"/><text x="975.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="972" y="484" width="1" height="15" fill="rgb(218,173,0)"/><text x="975.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.33%)</title><rect x="973" y="468" width="4" height="15" fill="rgb(244,9,36)"/><text x="976.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (159 samples, 7.55%)</title><rect x="888" y="436" width="89" height="15" fill="rgb(233,29,37)"/><text x="891.00" y="446.50">onnxruntim..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (136 samples, 6.45%)</title><rect x="901" y="452" width="76" height="15" fill="rgb(235,6,7)"/><text x="904.00" y="462.50">onnxrunt..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (137 samples, 6.50%)</title><rect x="977" y="468" width="77" height="15" fill="rgb(219,137,24)"/><text x="980.00" y="478.50">onnxrunt..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (43 samples, 2.04%)</title><rect x="1030" y="484" width="24" height="15" fill="rgb(218,170,40)"/><text x="1033.00" y="494.50">o..</text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="1054" y="468" width="1" height="15" fill="rgb(246,207,9)"/><text x="1057.00" y="478.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (347 samples, 16.47%)</title><rect x="861" y="340" width="195" height="15" fill="rgb(243,53,33)"/><text x="864.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Com..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (347 samples, 16.47%)</title><rect x="861" y="356" width="195" height="15" fill="rgb(208,37,0)"/><text x="864.00" y="366.50">onnxruntime::ScanImpl::Ex..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (346 samples, 16.42%)</title><rect x="862" y="372" width="194" height="15" fill="rgb(238,137,48)"/><text x="865.00" y="382.50">onnxruntime::scan::detail..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (343 samples, 16.28%)</title><rect x="864" y="388" width="192" height="15" fill="rgb(207,21,6)"/><text x="867.00" y="398.50">onnxruntime::utils::Execu..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (343 samples, 16.28%)</title><rect x="864" y="404" width="192" height="15" fill="rgb(254,208,39)"/><text x="867.00" y="414.50">onnxruntime::utils::Execu..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (342 samples, 16.23%)</title><rect x="864" y="420" width="192" height="15" fill="rgb(206,78,22)"/><text x="867.00" y="430.50">onnxruntime::SequentialEx..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (140 samples, 6.64%)</title><rect x="977" y="436" width="79" height="15" fill="rgb(236,205,20)"/><text x="980.00" y="446.50">onnxrunti..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (140 samples, 6.64%)</title><rect x="977" y="452" width="79" height="15" fill="rgb(207,171,43)"/><text x="980.00" y="462.50">onnxrunti..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.38%)</title><rect x="1056" y="340" width="4" height="15" fill="rgb(229,96,21)"/><text x="1059.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (7 samples, 0.33%)</title><rect x="1136" y="372" width="4" height="15" fill="rgb(245,114,20)"/><text x="1139.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.28%)</title><rect x="1137" y="388" width="3" height="15" fill="rgb(225,4,43)"/><text x="1140.00" y="398.50"></text></g><g><title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="1140" y="372" width="1" height="15" fill="rgb(239,24,20)"/><text x="1143.00" y="382.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (148 samples, 7.02%)</title><rect x="1060" y="340" width="83" height="15" fill="rgb(218,161,44)"/><text x="1063.00" y="350.50">onnxrunti..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (148 samples, 7.02%)</title><rect x="1060" y="356" width="83" height="15" fill="rgb(211,62,35)"/><text x="1063.00" y="366.50">onnxrunti..</text></g><g><title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="1141" y="372" width="2" height="15" fill="rgb(252,191,38)"/><text x="1144.00" y="382.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (51 samples, 2.42%)</title><rect x="1143" y="340" width="29" height="15" fill="rgb(219,46,25)"/><text x="1146.00" y="350.50">on..</text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (50 samples, 2.37%)</title><rect x="1144" y="356" width="28" height="15" fill="rgb(247,16,24)"/><text x="1147.00" y="366.50">o..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (581 samples, 27.57%)</title><rect x="853" y="260" width="326" height="15" fill="rgb(250,45,17)"/><text x="856.00" y="270.50">onnxruntime::InferenceSession::Run (onnxrunt..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (581 samples, 27.57%)</title><rect x="853" y="276" width="326" height="15" fill="rgb(219,218,32)"/><text x="856.00" y="286.50">onnxruntime::InferenceSession::Run (onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (581 samples, 27.57%)</title><rect x="853" y="292" width="326" height="15" fill="rgb(210,28,21)"/><text x="856.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (581 samples, 27.57%)</title><rect x="853" y="308" width="326" height="15" fill="rgb(249,19,30)"/><text x="856.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxru..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (581 samples, 27.57%)</title><rect x="853" y="324" width="326" height="15" fill="rgb(249,200,5)"/><text x="856.00" y="334.50">onnxruntime::SequentialExecutor::Execute (on..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.57%)</title><rect x="1172" y="340" width="7" height="15" fill="rgb(252,48,9)"/><text x="1175.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (9 samples, 0.43%)</title><rect x="1174" y="356" width="5" height="15" fill="rgb(207,114,52)"/><text x="1177.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (9 samples, 0.43%)</title><rect x="1174" y="372" width="5" height="15" fill="rgb(227,149,26)"/><text x="1177.00" y="382.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.71%)</title><rect x="1179" y="260" width="8" height="15" fill="rgb(251,52,38)"/><text x="1182.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.14%)</title><rect x="1186" y="276" width="1" height="15" fill="rgb(237,170,0)"/><text x="1189.00" y="286.50"></text></g><g><title>all (2,107 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(205,96,22)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:52) (656 samples, 31.13%)</title><rect x="822" y="52" width="368" height="15" fill="rgb(215,21,50)"/><text x="825.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl..</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:51) (656 samples, 31.13%)</title><rect x="822" y="68" width="368" height="15" fill="rgb(205,33,25)"/><text x="825.00" y="78.50">profile_ort (bench_KNeighborsClassifier_default_b..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:29) (655 samples, 31.09%)</title><rect x="823" y="84" width="367" height="15" fill="rgb(207,52,34)"/><text x="826.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py:23) (606 samples, 28.76%)</title><rect x="850" y="100" width="340" height="15" fill="rgb(245,4,24)"/><text x="853.00" y="110.50">profile (bench_KNeighborsClassifier_default_b_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (601 samples, 28.52%)</title><rect x="853" y="116" width="337" height="15" fill="rgb(235,92,26)"/><text x="856.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (601 samples, 28.52%)</title><rect x="853" y="132" width="337" height="15" fill="rgb(222,64,46)"/><text x="856.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (601 samples, 28.52%)</title><rect x="853" y="148" width="337" height="15" fill="rgb(253,154,52)"/><text x="856.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (601 samples, 28.52%)</title><rect x="853" y="164" width="337" height="15" fill="rgb(236,229,23)"/><text x="856.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inf..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (601 samples, 28.52%)</title><rect x="853" y="180" width="337" height="15" fill="rgb(226,85,23)"/><text x="856.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:136) (601 samples, 28.52%)</title><rect x="853" y="196" width="337" height="15" fill="rgb(231,29,41)"/><text x="856.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (601 samples, 28.52%)</title><rect x="853" y="212" width="337" height="15" fill="rgb(209,59,24)"/><text x="856.00" y="222.50">pybind11::cpp_function::dispatcher (onnxrunti..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (601 samples, 28.52%)</title><rect x="853" y="228" width="337" height="15" fill="rgb(254,10,15)"/><text x="856.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxr..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (600 samples, 28.48%)</title><rect x="853" y="244" width="337" height="15" fill="rgb(233,39,10)"/><text x="856.00" y="254.50">onnxruntime::python::addObjectMethods(pybind1..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.19%)</title><rect x="1187" y="260" width="3" height="15" fill="rgb(224,190,51)"/><text x="1190.00" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.19%)</title><rect x="1187" y="276" width="3" height="15" fill="rgb(232,45,44)"/><text x="1190.00" y="286.50"></text></g></g></svg>