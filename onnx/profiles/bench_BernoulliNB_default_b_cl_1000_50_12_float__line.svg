<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:4) (10 samples, 2.99%)</title><rect x="0.0000%" y="52" width="2.9940%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="62.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 2.99%)</title><rect x="0.0000%" y="68" width="2.9940%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="78.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 2.99%)</title><rect x="0.0000%" y="84" width="2.9940%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="94.50">_fi..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 2.99%)</title><rect x="0.0000%" y="100" width="2.9940%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="110.50">_lo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 2.99%)</title><rect x="0.0000%" y="116" width="2.9940%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="126.50">exe..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 2.99%)</title><rect x="0.0000%" y="132" width="2.9940%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="142.50">_ca..</text></g><g><title>&lt;module&gt; (profiles/benches/naive_bayes/BernoulliNB/bench_BernoulliNB_default_b_cl.py:7) (8 samples, 2.40%)</title><rect x="0.5988%" y="148" width="2.3952%" height="15" fill="rgb(207,160,47)"/><text x="0.8488%" y="158.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 2.40%)</title><rect x="0.5988%" y="164" width="2.3952%" height="15" fill="rgb(228,23,34)"/><text x="0.8488%" y="174.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 2.40%)</title><rect x="0.5988%" y="180" width="2.3952%" height="15" fill="rgb(218,30,26)"/><text x="0.8488%" y="190.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 2.40%)</title><rect x="0.5988%" y="196" width="2.3952%" height="15" fill="rgb(220,122,19)"/><text x="0.8488%" y="206.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 2.40%)</title><rect x="0.5988%" y="212" width="2.3952%" height="15" fill="rgb(250,228,42)"/><text x="0.8488%" y="222.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 2.40%)</title><rect x="0.5988%" y="228" width="2.3952%" height="15" fill="rgb(240,193,28)"/><text x="0.8488%" y="238.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (5 samples, 1.50%)</title><rect x="1.4970%" y="244" width="1.4970%" height="15" fill="rgb(216,20,37)"/><text x="1.7470%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.50%)</title><rect x="1.4970%" y="260" width="1.4970%" height="15" fill="rgb(206,188,39)"/><text x="1.7470%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.50%)</title><rect x="1.4970%" y="276" width="1.4970%" height="15" fill="rgb(217,207,13)"/><text x="1.7470%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.50%)</title><rect x="1.4970%" y="292" width="1.4970%" height="15" fill="rgb(231,73,38)"/><text x="1.7470%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.50%)</title><rect x="1.4970%" y="308" width="1.4970%" height="15" fill="rgb(225,20,46)"/><text x="1.7470%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.50%)</title><rect x="1.4970%" y="324" width="1.4970%" height="15" fill="rgb(210,31,41)"/><text x="1.7470%" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (4 samples, 1.20%)</title><rect x="1.7964%" y="340" width="1.1976%" height="15" fill="rgb(221,200,47)"/><text x="2.0464%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.20%)</title><rect x="1.7964%" y="356" width="1.1976%" height="15" fill="rgb(226,26,5)"/><text x="2.0464%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.20%)</title><rect x="1.7964%" y="372" width="1.1976%" height="15" fill="rgb(249,33,26)"/><text x="2.0464%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.20%)</title><rect x="1.7964%" y="388" width="1.1976%" height="15" fill="rgb(235,183,28)"/><text x="2.0464%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.20%)</title><rect x="1.7964%" y="404" width="1.1976%" height="15" fill="rgb(221,5,38)"/><text x="2.0464%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.20%)</title><rect x="1.7964%" y="420" width="1.1976%" height="15" fill="rgb(247,18,42)"/><text x="2.0464%" y="430.50"></text></g><g><title>_check_X (sklearn/naive_bayes.py:985) (7 samples, 2.10%)</title><rect x="3.8922%" y="180" width="2.0958%" height="15" fill="rgb(241,131,45)"/><text x="4.1422%" y="190.50">_..</text></g><g><title>_check_X (sklearn/naive_bayes.py:473) (7 samples, 2.10%)</title><rect x="3.8922%" y="196" width="2.0958%" height="15" fill="rgb(249,31,29)"/><text x="4.1422%" y="206.50">_..</text></g><g><title>binarize (sklearn/preprocessing/_data.py:1862) (12 samples, 3.59%)</title><rect x="6.2874%" y="196" width="3.5928%" height="15" fill="rgb(225,111,53)"/><text x="6.5374%" y="206.50">bina..</text></g><g><title>check_array (sklearn/utils/validation.py:586) (4 samples, 1.20%)</title><rect x="8.6826%" y="212" width="1.1976%" height="15" fill="rgb(238,160,17)"/><text x="8.9326%" y="222.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c:1287) (4 samples, 1.20%)</title><rect x="11.9760%" y="228" width="1.1976%" height="15" fill="rgb(214,148,48)"/><text x="12.2260%" y="238.50"></text></g><g><title>binarize (sklearn/preprocessing/_data.py:1875) (11 samples, 3.29%)</title><rect x="11.0778%" y="196" width="3.2934%" height="15" fill="rgb(232,36,49)"/><text x="11.3278%" y="206.50">bin..</text></g><g><title>array_assign_subscript (mapping.c:1859) (10 samples, 2.99%)</title><rect x="11.3772%" y="212" width="2.9940%" height="15" fill="rgb(209,103,24)"/><text x="11.6272%" y="222.50">arr..</text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:94) (41 samples, 12.28%)</title><rect x="3.5928%" y="164" width="12.2754%" height="15" fill="rgb(229,88,8)"/><text x="3.8428%" y="174.50">predict_log_proba ..</text></g><g><title>_check_X (sklearn/naive_bayes.py:987) (32 samples, 9.58%)</title><rect x="6.2874%" y="180" width="9.5808%" height="15" fill="rgb(213,181,19)"/><text x="6.5374%" y="190.50">_check_X (skle..</text></g><g><title>binarize (sklearn/preprocessing/_data.py:1876) (5 samples, 1.50%)</title><rect x="14.3713%" y="196" width="1.4970%" height="15" fill="rgb(254,191,54)"/><text x="14.6213%" y="206.50"></text></g><g><title>array_assign_subscript (mapping.c:1859) (5 samples, 1.50%)</title><rect x="14.3713%" y="212" width="1.4970%" height="15" fill="rgb(241,83,37)"/><text x="14.6213%" y="222.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 2.10%)</title><rect x="17.0659%" y="212" width="2.0958%" height="15" fill="rgb(233,36,39)"/><text x="17.3159%" y="222.50">d..</text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (9 samples, 2.69%)</title><rect x="19.1617%" y="308" width="2.6946%" height="15" fill="rgb(226,3,54)"/><text x="19.4117%" y="318.50">ra..</text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src:855) (9 samples, 2.69%)</title><rect x="19.1617%" y="324" width="2.6946%" height="15" fill="rgb(245,192,40)"/><text x="19.4117%" y="334.50">_a..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2871) (11 samples, 3.29%)</title><rect x="19.1617%" y="244" width="3.2934%" height="15" fill="rgb(238,167,29)"/><text x="19.4117%" y="254.50">PyU..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (11 samples, 3.29%)</title><rect x="19.1617%" y="260" width="3.2934%" height="15" fill="rgb(232,182,51)"/><text x="19.4117%" y="270.50">Npy..</text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2942) (11 samples, 3.29%)</title><rect x="19.1617%" y="276" width="3.2934%" height="15" fill="rgb(231,60,39)"/><text x="19.4117%" y="286.50">npy..</text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (11 samples, 3.29%)</title><rect x="19.1617%" y="292" width="3.2934%" height="15" fill="rgb(208,69,12)"/><text x="19.4117%" y="302.50">PyA..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (28 samples, 8.38%)</title><rect x="16.7665%" y="196" width="8.3832%" height="15" fill="rgb(235,93,37)"/><text x="17.0165%" y="206.50">safe_sparse_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (20 samples, 5.99%)</title><rect x="19.1617%" y="212" width="5.9880%" height="15" fill="rgb(213,116,39)"/><text x="19.4117%" y="222.50">ufunc_ge..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (20 samples, 5.99%)</title><rect x="19.1617%" y="228" width="5.9880%" height="15" fill="rgb(222,207,29)"/><text x="19.4117%" y="238.50">PyUFunc_..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (9 samples, 2.69%)</title><rect x="22.4551%" y="244" width="2.6946%" height="15" fill="rgb(206,96,30)"/><text x="22.7051%" y="254.50">Py..</text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (9 samples, 2.69%)</title><rect x="22.4551%" y="260" width="2.6946%" height="15" fill="rgb(218,138,4)"/><text x="22.7051%" y="270.50">DO..</text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (9 samples, 2.69%)</title><rect x="22.4551%" y="276" width="2.6946%" height="15" fill="rgb(250,191,14)"/><text x="22.7051%" y="286.50">cb..</text></g><g><title>dgemm_tn (libopenblasp-r0-34a18dc3.3.7.so) (8 samples, 2.40%)</title><rect x="22.7545%" y="292" width="2.3952%" height="15" fill="rgb(239,60,40)"/><text x="23.0045%" y="302.50">dg..</text></g><g><title>dgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (8 samples, 2.40%)</title><rect x="22.7545%" y="308" width="2.3952%" height="15" fill="rgb(206,27,48)"/><text x="23.0045%" y="318.50">dg..</text></g><g><title>_joint_log_likelihood (sklearn/naive_bayes.py:1020) (29 samples, 8.68%)</title><rect x="16.7665%" y="180" width="8.6826%" height="15" fill="rgb(225,35,8)"/><text x="17.0165%" y="190.50">_joint_log_l..</text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:95) (39 samples, 11.68%)</title><rect x="15.8683%" y="164" width="11.6766%" height="15" fill="rgb(250,213,24)"/><text x="16.1183%" y="174.50">predict_log_proba..</text></g><g><title>_joint_log_likelihood (sklearn/naive_bayes.py:1021) (7 samples, 2.10%)</title><rect x="25.4491%" y="180" width="2.0958%" height="15" fill="rgb(247,123,22)"/><text x="25.6991%" y="190.50">_..</text></g><g><title>array_sum (methods.c:2215) (4 samples, 1.20%)</title><rect x="26.3473%" y="196" width="1.1976%" height="15" fill="rgb(231,138,38)"/><text x="26.5973%" y="206.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (4 samples, 1.20%)</title><rect x="26.3473%" y="212" width="1.1976%" height="15" fill="rgb(231,145,46)"/><text x="26.5973%" y="222.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (4 samples, 1.20%)</title><rect x="26.3473%" y="228" width="1.1976%" height="15" fill="rgb(251,118,11)"/><text x="26.5973%" y="238.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:101) (14 samples, 4.19%)</title><rect x="27.5449%" y="180" width="4.1916%" height="15" fill="rgb(217,147,25)"/><text x="27.7949%" y="190.50">logsu..</text></g><g><title>amax (&lt;__array_function__ internals&gt;:6) (14 samples, 4.19%)</title><rect x="27.5449%" y="196" width="4.1916%" height="15" fill="rgb(247,81,37)"/><text x="27.7949%" y="206.50">amax ..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (14 samples, 4.19%)</title><rect x="27.5449%" y="212" width="4.1916%" height="15" fill="rgb(209,12,38)"/><text x="27.7949%" y="222.50">array..</text></g><g><title>amax (numpy/core/fromnumeric.py:2621) (14 samples, 4.19%)</title><rect x="27.5449%" y="228" width="4.1916%" height="15" fill="rgb(227,1,9)"/><text x="27.7949%" y="238.50">amax ..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (14 samples, 4.19%)</title><rect x="27.5449%" y="244" width="4.1916%" height="15" fill="rgb(248,47,43)"/><text x="27.7949%" y="254.50">_wrap..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (14 samples, 4.19%)</title><rect x="27.5449%" y="260" width="4.1916%" height="15" fill="rgb(221,10,30)"/><text x="27.7949%" y="270.50">ufunc..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (13 samples, 3.89%)</title><rect x="27.8443%" y="276" width="3.8922%" height="15" fill="rgb(210,229,1)"/><text x="28.0943%" y="286.50">PyUF..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (12 samples, 3.59%)</title><rect x="28.1437%" y="292" width="3.5928%" height="15" fill="rgb(222,148,37)"/><text x="28.3937%" y="302.50">PyUF..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (10 samples, 2.99%)</title><rect x="28.7425%" y="308" width="2.9940%" height="15" fill="rgb(234,67,33)"/><text x="28.9925%" y="318.50">PyU..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (8 samples, 2.40%)</title><rect x="29.3413%" y="324" width="2.3952%" height="15" fill="rgb(247,98,35)"/><text x="29.5913%" y="334.50">re..</text></g><g><title>DOUBLE_maximum (loops.c.src:1876) (5 samples, 1.50%)</title><rect x="30.2395%" y="340" width="1.4970%" height="15" fill="rgb(247,138,52)"/><text x="30.4895%" y="350.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (5 samples, 1.50%)</title><rect x="30.2395%" y="356" width="1.4970%" height="15" fill="rgb(213,79,30)"/><text x="30.4895%" y="366.50"></text></g><g><title>array_subtract (number.c:342) (4 samples, 1.20%)</title><rect x="31.7365%" y="196" width="1.1976%" height="15" fill="rgb(246,177,23)"/><text x="31.9865%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.20%)</title><rect x="31.7365%" y="212" width="1.1976%" height="15" fill="rgb(230,62,27)"/><text x="31.9865%" y="222.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:112) (13 samples, 3.89%)</title><rect x="31.7365%" y="180" width="3.8922%" height="15" fill="rgb(216,154,8)"/><text x="31.9865%" y="190.50">logs..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (9 samples, 2.69%)</title><rect x="32.9341%" y="196" width="2.6946%" height="15" fill="rgb(244,35,45)"/><text x="33.1841%" y="206.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (9 samples, 2.69%)</title><rect x="32.9341%" y="212" width="2.6946%" height="15" fill="rgb(251,115,12)"/><text x="33.1841%" y="222.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (9 samples, 2.69%)</title><rect x="32.9341%" y="228" width="2.6946%" height="15" fill="rgb(240,54,50)"/><text x="33.1841%" y="238.50">ex..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (9 samples, 2.69%)</title><rect x="32.9341%" y="244" width="2.6946%" height="15" fill="rgb(233,84,52)"/><text x="33.1841%" y="254.50">tr..</text></g><g><title>PyUFunc_d_d (loops.c.src:190) (9 samples, 2.69%)</title><rect x="32.9341%" y="260" width="2.6946%" height="15" fill="rgb(207,117,47)"/><text x="33.1841%" y="270.50">Py..</text></g><g><title>exp (libm-2.29.so) (9 samples, 2.69%)</title><rect x="32.9341%" y="276" width="2.6946%" height="15" fill="rgb(249,43,39)"/><text x="33.1841%" y="286.50">ex..</text></g><g><title>logsumexp (scipy/special/_logsumexp.py:116) (9 samples, 2.69%)</title><rect x="35.9281%" y="180" width="2.6946%" height="15" fill="rgb(209,38,44)"/><text x="36.1781%" y="190.50">lo..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (9 samples, 2.69%)</title><rect x="35.9281%" y="196" width="2.6946%" height="15" fill="rgb(236,212,23)"/><text x="36.1781%" y="206.50">su..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 2.40%)</title><rect x="36.2275%" y="212" width="2.3952%" height="15" fill="rgb(242,79,21)"/><text x="36.4775%" y="222.50">ar..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (8 samples, 2.40%)</title><rect x="36.2275%" y="228" width="2.3952%" height="15" fill="rgb(211,96,35)"/><text x="36.4775%" y="238.50">su..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (7 samples, 2.10%)</title><rect x="36.5269%" y="244" width="2.0958%" height="15" fill="rgb(253,215,40)"/><text x="36.7769%" y="254.50">_..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (7 samples, 2.10%)</title><rect x="36.5269%" y="260" width="2.0958%" height="15" fill="rgb(211,81,21)"/><text x="36.7769%" y="270.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (7 samples, 2.10%)</title><rect x="36.5269%" y="276" width="2.0958%" height="15" fill="rgb(208,190,38)"/><text x="36.7769%" y="286.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (5 samples, 1.50%)</title><rect x="37.1257%" y="292" width="1.4970%" height="15" fill="rgb(235,213,38)"/><text x="37.3757%" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (4 samples, 1.20%)</title><rect x="37.4251%" y="308" width="1.1976%" height="15" fill="rgb(237,122,38)"/><text x="37.6751%" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (4 samples, 1.20%)</title><rect x="37.4251%" y="324" width="1.1976%" height="15" fill="rgb(244,218,35)"/><text x="37.6751%" y="334.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:120) (11 samples, 3.29%)</title><rect x="38.6228%" y="180" width="3.2934%" height="15" fill="rgb(240,68,47)"/><text x="38.8728%" y="190.50">log..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 2.40%)</title><rect x="39.5210%" y="196" width="2.3952%" height="15" fill="rgb(210,16,53)"/><text x="39.7710%" y="206.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 1.50%)</title><rect x="40.4192%" y="212" width="1.4970%" height="15" fill="rgb(235,124,12)"/><text x="40.6692%" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (5 samples, 1.50%)</title><rect x="40.4192%" y="228" width="1.4970%" height="15" fill="rgb(224,169,11)"/><text x="40.6692%" y="238.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (5 samples, 1.50%)</title><rect x="40.4192%" y="244" width="1.4970%" height="15" fill="rgb(250,166,2)"/><text x="40.6692%" y="254.50"></text></g><g><title>PyUFunc_d_d (loops.c.src:190) (5 samples, 1.50%)</title><rect x="40.4192%" y="260" width="1.4970%" height="15" fill="rgb(242,216,29)"/><text x="40.6692%" y="270.50"></text></g><g><title>predict_log_proba (sklearn/naive_bayes.py:97) (50 samples, 14.97%)</title><rect x="27.5449%" y="164" width="14.9701%" height="15" fill="rgb(230,116,27)"/><text x="27.7949%" y="174.50">predict_log_proba (skle..</text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:54) (141 samples, 42.22%)</title><rect x="3.2934%" y="52" width="42.2156%" height="15" fill="rgb(228,99,48)"/><text x="3.5434%" y="62.50">&lt;module&gt; (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:54)</text></g><g><title>profile_skl (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:53) (141 samples, 42.22%)</title><rect x="3.2934%" y="68" width="42.2156%" height="15" fill="rgb(253,11,6)"/><text x="3.5434%" y="78.50">profile_skl (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:53)</text></g><g><title>setup_profile (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:37) (141 samples, 42.22%)</title><rect x="3.2934%" y="84" width="42.2156%" height="15" fill="rgb(247,143,39)"/><text x="3.5434%" y="94.50">setup_profile (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:37)</text></g><g><title>profile (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:31) (141 samples, 42.22%)</title><rect x="3.2934%" y="100" width="42.2156%" height="15" fill="rgb(236,97,10)"/><text x="3.5434%" y="110.50">profile (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (141 samples, 42.22%)</title><rect x="3.2934%" y="116" width="42.2156%" height="15" fill="rgb(233,208,19)"/><text x="3.5434%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229) (141 samples, 42.22%)</title><rect x="3.2934%" y="132" width="42.2156%" height="15" fill="rgb(216,164,2)"/><text x="3.5434%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229)</text></g><g><title>predict_proba (sklearn/naive_bayes.py:115) (141 samples, 42.22%)</title><rect x="3.2934%" y="148" width="42.2156%" height="15" fill="rgb(220,129,5)"/><text x="3.5434%" y="158.50">predict_proba (sklearn/naive_bayes.py:115)</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 2.10%)</title><rect x="43.4132%" y="164" width="2.0958%" height="15" fill="rgb(242,17,10)"/><text x="43.6632%" y="174.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 1.80%)</title><rect x="43.7126%" y="180" width="1.7964%" height="15" fill="rgb(242,107,0)"/><text x="43.9626%" y="190.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (6 samples, 1.80%)</title><rect x="43.7126%" y="196" width="1.7964%" height="15" fill="rgb(251,28,31)"/><text x="43.9626%" y="206.50">e..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (6 samples, 1.80%)</title><rect x="43.7126%" y="212" width="1.7964%" height="15" fill="rgb(233,223,10)"/><text x="43.9626%" y="222.50">t..</text></g><g><title>PyUFunc_d_d (loops.c.src:190) (6 samples, 1.80%)</title><rect x="43.7126%" y="228" width="1.7964%" height="15" fill="rgb(215,21,27)"/><text x="43.9626%" y="238.50">P..</text></g><g><title>exp (libm-2.29.so) (5 samples, 1.50%)</title><rect x="44.0120%" y="244" width="1.4970%" height="15" fill="rgb(232,23,21)"/><text x="44.2620%" y="254.50"></text></g><g><title>_aligned_contig_cast_bool_to_float (lowlevel_strided_loops.c.src:816) (8 samples, 2.40%)</title><rect x="47.0060%" y="276" width="2.3952%" height="15" fill="rgb(244,5,23)"/><text x="47.2560%" y="286.50">_a..</text></g><g><title>compiled_run (&lt;string&gt;:13) (11 samples, 3.29%)</title><rect x="46.4072%" y="180" width="3.2934%" height="15" fill="rgb(226,81,46)"/><text x="46.6572%" y="190.50">com..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:39) (9 samples, 2.69%)</title><rect x="47.0060%" y="196" width="2.6946%" height="15" fill="rgb(247,70,30)"/><text x="47.2560%" y="206.50">_r..</text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (9 samples, 2.69%)</title><rect x="47.0060%" y="212" width="2.6946%" height="15" fill="rgb(212,68,19)"/><text x="47.2560%" y="222.50">&lt;l..</text></g><g><title>array_astype (methods.c:845) (9 samples, 2.69%)</title><rect x="47.0060%" y="228" width="2.6946%" height="15" fill="rgb(240,187,13)"/><text x="47.2560%" y="238.50">ar..</text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (9 samples, 2.69%)</title><rect x="47.0060%" y="244" width="2.6946%" height="15" fill="rgb(223,113,26)"/><text x="47.2560%" y="254.50">Py..</text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (9 samples, 2.69%)</title><rect x="47.0060%" y="260" width="2.6946%" height="15" fill="rgb(206,192,2)"/><text x="47.2560%" y="270.50">ra..</text></g><g><title>FLOAT_add (loops.c.src:1755) (7 samples, 2.10%)</title><rect x="50.2994%" y="276" width="2.0958%" height="15" fill="rgb(241,108,4)"/><text x="50.5494%" y="286.50">F..</text></g><g><title>run_binary_simd_add_FLOAT (simd.inc.src:250) (7 samples, 2.10%)</title><rect x="50.2994%" y="292" width="2.0958%" height="15" fill="rgb(247,173,49)"/><text x="50.5494%" y="302.50">r..</text></g><g><title>sse2_binary_add_FLOAT (simd.inc.src:604) (5 samples, 1.50%)</title><rect x="50.8982%" y="308" width="1.4970%" height="15" fill="rgb(224,114,35)"/><text x="51.1482%" y="318.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (5 samples, 1.50%)</title><rect x="50.8982%" y="324" width="1.4970%" height="15" fill="rgb(245,159,27)"/><text x="51.1482%" y="334.50"></text></g><g><title>compiled_run (&lt;string&gt;:14) (11 samples, 3.29%)</title><rect x="49.7006%" y="180" width="3.2934%" height="15" fill="rgb(245,172,44)"/><text x="49.9506%" y="190.50">com..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (11 samples, 3.29%)</title><rect x="49.7006%" y="196" width="3.2934%" height="15" fill="rgb(236,23,11)"/><text x="49.9506%" y="206.50">_ru..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 2.99%)</title><rect x="50.0000%" y="212" width="2.9940%" height="15" fill="rgb(205,117,38)"/><text x="50.2500%" y="222.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (9 samples, 2.69%)</title><rect x="50.2994%" y="228" width="2.6946%" height="15" fill="rgb(237,72,25)"/><text x="50.5494%" y="238.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (9 samples, 2.69%)</title><rect x="50.2994%" y="244" width="2.6946%" height="15" fill="rgb(244,70,9)"/><text x="50.5494%" y="254.50">ex..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (9 samples, 2.69%)</title><rect x="50.2994%" y="260" width="2.6946%" height="15" fill="rgb(217,125,39)"/><text x="50.5494%" y="270.50">it..</text></g><g><title>compiled_run (&lt;string&gt;:18) (7 samples, 2.10%)</title><rect x="54.1916%" y="180" width="2.0958%" height="15" fill="rgb(235,36,10)"/><text x="54.4416%" y="190.50">c..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (7 samples, 2.10%)</title><rect x="54.1916%" y="196" width="2.0958%" height="15" fill="rgb(251,123,47)"/><text x="54.4416%" y="206.50">_..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (5 samples, 1.50%)</title><rect x="54.7904%" y="212" width="1.4970%" height="15" fill="rgb(221,13,13)"/><text x="55.0404%" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 1.50%)</title><rect x="54.7904%" y="228" width="1.4970%" height="15" fill="rgb(238,131,9)"/><text x="55.0404%" y="238.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (5 samples, 1.50%)</title><rect x="54.7904%" y="244" width="1.4970%" height="15" fill="rgb(211,50,8)"/><text x="55.0404%" y="254.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (4 samples, 1.20%)</title><rect x="55.0898%" y="260" width="1.1976%" height="15" fill="rgb(245,182,24)"/><text x="55.3398%" y="270.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 1.20%)</title><rect x="55.0898%" y="276" width="1.1976%" height="15" fill="rgb(242,14,37)"/><text x="55.3398%" y="286.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (4 samples, 1.20%)</title><rect x="55.0898%" y="292" width="1.1976%" height="15" fill="rgb(246,228,12)"/><text x="55.3398%" y="302.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (4 samples, 1.20%)</title><rect x="55.0898%" y="308" width="1.1976%" height="15" fill="rgb(213,55,15)"/><text x="55.3398%" y="318.50"></text></g><g><title>compiled_run (&lt;string&gt;:20) (18 samples, 5.39%)</title><rect x="56.5868%" y="180" width="5.3892%" height="15" fill="rgb(209,9,3)"/><text x="56.8368%" y="190.50">compile..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (18 samples, 5.39%)</title><rect x="56.5868%" y="196" width="5.3892%" height="15" fill="rgb(230,59,30)"/><text x="56.8368%" y="206.50">_run (m..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (18 samples, 5.39%)</title><rect x="56.5868%" y="212" width="5.3892%" height="15" fill="rgb(209,121,21)"/><text x="56.8368%" y="222.50">numpy_d..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (18 samples, 5.39%)</title><rect x="56.5868%" y="228" width="5.3892%" height="15" fill="rgb(220,109,13)"/><text x="56.8368%" y="238.50">dot (&lt;_..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (14 samples, 4.19%)</title><rect x="57.7844%" y="244" width="4.1916%" height="15" fill="rgb(232,18,1)"/><text x="58.0344%" y="254.50">sgemm..</text></g><g><title>compiled_run (&lt;string&gt;:21) (5 samples, 1.50%)</title><rect x="61.9760%" y="180" width="1.4970%" height="15" fill="rgb(215,41,42)"/><text x="62.2260%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sum.py:16) (5 samples, 1.50%)</title><rect x="61.9760%" y="196" width="1.4970%" height="15" fill="rgb(224,123,36)"/><text x="62.2260%" y="206.50"></text></g><g><title>array_add (number.c:330) (5 samples, 1.50%)</title><rect x="61.9760%" y="212" width="1.4970%" height="15" fill="rgb(240,125,3)"/><text x="62.2260%" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 1.50%)</title><rect x="61.9760%" y="228" width="1.4970%" height="15" fill="rgb(205,98,50)"/><text x="62.2260%" y="238.50"></text></g><g><title>compiled_run (&lt;string&gt;:22) (5 samples, 1.50%)</title><rect x="63.4731%" y="180" width="1.4970%" height="15" fill="rgb(205,185,37)"/><text x="63.7231%" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sum.py:16) (5 samples, 1.50%)</title><rect x="63.4731%" y="196" width="1.4970%" height="15" fill="rgb(238,207,15)"/><text x="63.7231%" y="206.50"></text></g><g><title>array_add (number.c:330) (4 samples, 1.20%)</title><rect x="63.7725%" y="212" width="1.1976%" height="15" fill="rgb(213,199,42)"/><text x="64.0225%" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.20%)</title><rect x="63.7725%" y="228" width="1.1976%" height="15" fill="rgb(235,201,11)"/><text x="64.0225%" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 1.20%)</title><rect x="63.7725%" y="244" width="1.1976%" height="15" fill="rgb(207,46,11)"/><text x="64.0225%" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (4 samples, 1.20%)</title><rect x="63.7725%" y="260" width="1.1976%" height="15" fill="rgb(241,35,35)"/><text x="64.0225%" y="270.50"></text></g><g><title>compiled_run (&lt;string&gt;:23) (6 samples, 1.80%)</title><rect x="64.9701%" y="180" width="1.7964%" height="15" fill="rgb(243,32,47)"/><text x="65.2201%" y="190.50">c..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (5 samples, 1.50%)</title><rect x="65.2695%" y="196" width="1.4970%" height="15" fill="rgb(247,202,23)"/><text x="65.5195%" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (5 samples, 1.50%)</title><rect x="65.2695%" y="212" width="1.4970%" height="15" fill="rgb(219,102,11)"/><text x="65.5195%" y="222.50"></text></g><g><title>FLOAT_exp (loops.c.src:1602) (8 samples, 2.40%)</title><rect x="66.7665%" y="276" width="2.3952%" height="15" fill="rgb(243,110,44)"/><text x="67.0165%" y="286.50">FL..</text></g><g><title>expf (libm-2.29.so) (7 samples, 2.10%)</title><rect x="67.0659%" y="292" width="2.0958%" height="15" fill="rgb(222,74,54)"/><text x="67.3159%" y="302.50">e..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_log_sum_exp.py:30) (9 samples, 2.69%)</title><rect x="66.7665%" y="196" width="2.6946%" height="15" fill="rgb(216,99,12)"/><text x="67.0165%" y="206.50">_r..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (9 samples, 2.69%)</title><rect x="66.7665%" y="212" width="2.6946%" height="15" fill="rgb(226,22,26)"/><text x="67.0165%" y="222.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (9 samples, 2.69%)</title><rect x="66.7665%" y="228" width="2.6946%" height="15" fill="rgb(217,163,10)"/><text x="67.0165%" y="238.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (9 samples, 2.69%)</title><rect x="66.7665%" y="244" width="2.6946%" height="15" fill="rgb(213,25,53)"/><text x="67.0165%" y="254.50">ex..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (9 samples, 2.69%)</title><rect x="66.7665%" y="260" width="2.6946%" height="15" fill="rgb(252,105,26)"/><text x="67.0165%" y="270.50">tr..</text></g><g><title>compiled_run (&lt;string&gt;:24) (18 samples, 5.39%)</title><rect x="66.7665%" y="180" width="5.3892%" height="15" fill="rgb(220,39,43)"/><text x="67.0165%" y="190.50">compile..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_log_sum_exp.py:33) (9 samples, 2.69%)</title><rect x="69.4611%" y="196" width="2.6946%" height="15" fill="rgb(229,68,48)"/><text x="69.7111%" y="206.50">_r..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 1.50%)</title><rect x="70.6587%" y="212" width="1.4970%" height="15" fill="rgb(252,8,32)"/><text x="70.9087%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 1.20%)</title><rect x="70.9581%" y="228" width="1.1976%" height="15" fill="rgb(223,20,43)"/><text x="71.2081%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (4 samples, 1.20%)</title><rect x="70.9581%" y="244" width="1.1976%" height="15" fill="rgb(229,81,49)"/><text x="71.2081%" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (4 samples, 1.20%)</title><rect x="70.9581%" y="260" width="1.1976%" height="15" fill="rgb(236,28,36)"/><text x="71.2081%" y="270.50"></text></g><g><title>FLOAT_log (loops.c.src:1602) (4 samples, 1.20%)</title><rect x="70.9581%" y="276" width="1.1976%" height="15" fill="rgb(249,185,26)"/><text x="71.2081%" y="286.50"></text></g><g><title>compiled_run (&lt;string&gt;:26) (6 samples, 1.80%)</title><rect x="72.4551%" y="180" width="1.7964%" height="15" fill="rgb(249,174,33)"/><text x="72.7051%" y="190.50">c..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (5 samples, 1.50%)</title><rect x="72.7545%" y="196" width="1.4970%" height="15" fill="rgb(233,201,37)"/><text x="73.0045%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.20%)</title><rect x="73.0539%" y="212" width="1.1976%" height="15" fill="rgb(221,78,26)"/><text x="73.3039%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 1.20%)</title><rect x="73.0539%" y="228" width="1.1976%" height="15" fill="rgb(250,127,30)"/><text x="73.3039%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (4 samples, 1.20%)</title><rect x="73.0539%" y="244" width="1.1976%" height="15" fill="rgb(230,49,44)"/><text x="73.3039%" y="254.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:138) (5 samples, 1.50%)</title><rect x="76.3473%" y="308" width="1.4970%" height="15" fill="rgb(229,67,23)"/><text x="76.5973%" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (6 samples, 1.80%)</title><rect x="77.8443%" y="308" width="1.7964%" height="15" fill="rgb(249,83,47)"/><text x="78.0943%" y="318.50">P..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (14 samples, 4.19%)</title><rect x="76.3473%" y="260" width="4.1916%" height="15" fill="rgb(215,43,3)"/><text x="76.5973%" y="270.50">PyArr..</text></g><g><title>PyArray_DTypeFromObject (common.c:108) (14 samples, 4.19%)</title><rect x="76.3473%" y="276" width="4.1916%" height="15" fill="rgb(238,154,13)"/><text x="76.5973%" y="286.50">PyArr..</text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (14 samples, 4.19%)</title><rect x="76.3473%" y="292" width="4.1916%" height="15" fill="rgb(219,56,2)"/><text x="76.5973%" y="302.50">PyArr..</text></g><g><title>PyArray_FromAny (ctors.c:1855) (21 samples, 6.29%)</title><rect x="76.3473%" y="244" width="6.2874%" height="15" fill="rgb(233,0,4)"/><text x="76.5973%" y="254.50">PyArray_..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (7 samples, 2.10%)</title><rect x="80.5389%" y="260" width="2.0958%" height="15" fill="rgb(235,30,7)"/><text x="80.7889%" y="270.50">P..</text></g><g><title>discover_dimensions (ctors.c:884) (4 samples, 1.20%)</title><rect x="81.4371%" y="276" width="1.1976%" height="15" fill="rgb(250,79,13)"/><text x="81.6871%" y="286.50"></text></g><g><title>discover_dimensions (ctors.c:703) (4 samples, 1.20%)</title><rect x="81.4371%" y="292" width="1.1976%" height="15" fill="rgb(211,146,34)"/><text x="81.6871%" y="302.50"></text></g><g><title>array_subscript (mapping.c:1539) (23 samples, 6.89%)</title><rect x="76.3473%" y="212" width="6.8862%" height="15" fill="rgb(228,22,38)"/><text x="76.5973%" y="222.50">array_sub..</text></g><g><title>prepare_index (mapping.c:516) (23 samples, 6.89%)</title><rect x="76.3473%" y="228" width="6.8862%" height="15" fill="rgb(235,168,5)"/><text x="76.5973%" y="238.50">prepare_i..</text></g><g><title>compiled_run (&lt;string&gt;:28) (29 samples, 8.68%)</title><rect x="75.1497%" y="180" width="8.6826%" height="15" fill="rgb(221,155,16)"/><text x="75.3997%" y="190.50">compiled_run..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (25 samples, 7.49%)</title><rect x="76.3473%" y="196" width="7.4850%" height="15" fill="rgb(215,215,53)"/><text x="76.5973%" y="206.50">_run (mlpr..</text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:61) (132 samples, 39.52%)</title><rect x="45.5090%" y="52" width="39.5210%" height="15" fill="rgb(223,4,10)"/><text x="45.7590%" y="62.50">&lt;module&gt; (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:61)</text></g><g><title>profile_pyrtc (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:60) (132 samples, 39.52%)</title><rect x="45.5090%" y="68" width="39.5210%" height="15" fill="rgb(234,103,6)"/><text x="45.7590%" y="78.50">profile_pyrtc (bench_BernoulliNB_default_b_cl_1000_50_12_float_...</text></g><g><title>setup_profile (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:37) (131 samples, 39.22%)</title><rect x="45.8084%" y="84" width="39.2216%" height="15" fill="rgb(227,97,0)"/><text x="46.0584%" y="94.50">setup_profile (bench_BernoulliNB_default_b_cl_1000_50_12_float_...</text></g><g><title>profile (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:31) (131 samples, 39.22%)</title><rect x="45.8084%" y="100" width="39.2216%" height="15" fill="rgb(234,150,53)"/><text x="46.0584%" y="110.50">profile (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (131 samples, 39.22%)</title><rect x="45.8084%" y="116" width="39.2216%" height="15" fill="rgb(228,201,54)"/><text x="46.0584%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (131 samples, 39.22%)</title><rect x="45.8084%" y="132" width="39.2216%" height="15" fill="rgb(222,22,37)"/><text x="46.0584%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (131 samples, 39.22%)</title><rect x="45.8084%" y="148" width="39.2216%" height="15" fill="rgb(237,53,32)"/><text x="46.0584%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (131 samples, 39.22%)</title><rect x="45.8084%" y="164" width="39.2216%" height="15" fill="rgb(233,25,53)"/><text x="46.0584%" y="174.50">_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference...</text></g><g><title>onnxruntime::Add&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.50%)</title><rect x="85.3293%" y="324" width="1.4970%" height="15" fill="rgb(210,40,34)"/><text x="85.5793%" y="334.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.50%)</title><rect x="85.3293%" y="340" width="1.4970%" height="15" fill="rgb(241,220,44)"/><text x="85.5793%" y="350.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Add&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.50%)</title><rect x="85.3293%" y="356" width="1.4970%" height="15" fill="rgb(235,28,35)"/><text x="85.5793%" y="366.50"></text></g><g><title>onnxruntime::Cast&lt;bool&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 2.10%)</title><rect x="86.8263%" y="324" width="2.0958%" height="15" fill="rgb(210,56,17)"/><text x="87.0763%" y="334.50">o..</text></g><g><title>dnnl_primitive_execute (onnxruntime/capi/libdnnl.so.1) (12 samples, 3.59%)</title><rect x="89.5210%" y="372" width="3.5928%" height="15" fill="rgb(224,130,29)"/><text x="89.7710%" y="382.50">dnnl..</text></g><g><title>dnnl_primitive::execute (onnxruntime/capi/libdnnl.so.1) (12 samples, 3.59%)</title><rect x="89.5210%" y="388" width="3.5928%" height="15" fill="rgb(235,212,8)"/><text x="89.7710%" y="398.50">dnnl..</text></g><g><title>dnnl::impl::cpu::simple_sum_t&lt;(dnnl_data_type_t)3, (dnnl_data_type_t)3&gt;::execute (onnxruntime/capi/libdnnl.so.1) (12 samples, 3.59%)</title><rect x="89.5210%" y="404" width="3.5928%" height="15" fill="rgb(223,33,50)"/><text x="89.7710%" y="414.50">dnnl..</text></g><g><title>GOMP_parallel@GOMP_4.0 (libiomp5.so) (12 samples, 3.59%)</title><rect x="89.5210%" y="420" width="3.5928%" height="15" fill="rgb(219,149,13)"/><text x="89.7710%" y="430.50">GOMP..</text></g><g><title>__kmp_join_call (libiomp5.so) (12 samples, 3.59%)</title><rect x="89.5210%" y="436" width="3.5928%" height="15" fill="rgb(250,156,29)"/><text x="89.7710%" y="446.50">__km..</text></g><g><title>__kmp_internal_join (libiomp5.so) (12 samples, 3.59%)</title><rect x="89.5210%" y="452" width="3.5928%" height="15" fill="rgb(216,193,19)"/><text x="89.7710%" y="462.50">__km..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (12 samples, 3.59%)</title><rect x="89.5210%" y="468" width="3.5928%" height="15" fill="rgb(216,135,14)"/><text x="89.7710%" y="478.50">__km..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (12 samples, 3.59%)</title><rect x="89.5210%" y="484" width="3.5928%" height="15" fill="rgb(241,47,5)"/><text x="89.7710%" y="494.50">_INT..</text></g><g><title>onnxruntime::FunctionKernel::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 4.49%)</title><rect x="88.9222%" y="324" width="4.4910%" height="15" fill="rgb(233,42,35)"/><text x="89.1722%" y="334.50">onnxr..</text></g><g><title>std::_Function_handler&lt;onnxruntime::common::Status(void*, OrtApi const*, OrtKernelContext*), onnxruntime::DNNLExecutionProvider::Compile(std::vector&lt;onnxruntime::Node*, std::allocator&lt;onnxruntime::Node*&gt; &gt; const&amp;, std::vector&lt;onnxruntime::NodeComputeInfo, std::allocator&lt;onnxruntime::NodeComputeInfo&gt; &gt;&amp;)::{lambda(void*, OrtApi const*, OrtKernelContext*)#3}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 4.19%)</title><rect x="89.2216%" y="340" width="4.1916%" height="15" fill="rgb(231,13,6)"/><text x="89.4716%" y="350.50">std::..</text></g><g><title>onnxruntime::ort_dnnl::DnnlFuncKernel&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 4.19%)</title><rect x="89.2216%" y="356" width="4.1916%" height="15" fill="rgb(207,181,40)"/><text x="89.4716%" y="366.50">onnxr..</text></g><g><title>mkl_blas_xsgemm (onnxruntime/capi/libmklml_intel.so) (21 samples, 6.29%)</title><rect x="93.4132%" y="420" width="6.2874%" height="15" fill="rgb(254,173,49)"/><text x="93.6632%" y="430.50">mkl_blas..</text></g><g><title>mkl_blas_avx_xsgemm (onnxruntime/capi/libmklml_intel.so) (21 samples, 6.29%)</title><rect x="93.4132%" y="436" width="6.2874%" height="15" fill="rgb(221,1,38)"/><text x="93.6632%" y="446.50">mkl_blas..</text></g><g><title>mkl_blas_avx_sgemm_pst (onnxruntime/capi/libmklml_intel.so) (20 samples, 5.99%)</title><rect x="93.7126%" y="452" width="5.9880%" height="15" fill="rgb(206,124,46)"/><text x="93.9626%" y="462.50">mkl_blas..</text></g><g><title>all (334 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(249,21,11)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:68) (50 samples, 14.97%)</title><rect x="85.0299%" y="52" width="14.9701%" height="15" fill="rgb(222,201,40)"/><text x="85.2799%" y="62.50">&lt;module&gt; (bench_Bernoul..</text></g><g><title>profile_ort (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:67) (50 samples, 14.97%)</title><rect x="85.0299%" y="68" width="14.9701%" height="15" fill="rgb(235,61,29)"/><text x="85.2799%" y="78.50">profile_ort (bench_Bern..</text></g><g><title>setup_profile (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:37) (50 samples, 14.97%)</title><rect x="85.0299%" y="84" width="14.9701%" height="15" fill="rgb(219,207,3)"/><text x="85.2799%" y="94.50">setup_profile (bench_Be..</text></g><g><title>profile (bench_BernoulliNB_default_b_cl_1000_50_12_float_.py:31) (50 samples, 14.97%)</title><rect x="85.0299%" y="100" width="14.9701%" height="15" fill="rgb(222,56,46)"/><text x="85.2799%" y="110.50">profile (bench_Bernoull..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (50 samples, 14.97%)</title><rect x="85.0299%" y="116" width="14.9701%" height="15" fill="rgb(239,76,54)"/><text x="85.2799%" y="126.50">time_predict (mlprodict..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (50 samples, 14.97%)</title><rect x="85.0299%" y="132" width="14.9701%" height="15" fill="rgb(231,124,27)"/><text x="85.2799%" y="142.50">&lt;lambda&gt; (mlprodict/asv..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (50 samples, 14.97%)</title><rect x="85.0299%" y="148" width="14.9701%" height="15" fill="rgb(249,195,6)"/><text x="85.2799%" y="158.50">run (mlprodict/onnxrt/o..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (50 samples, 14.97%)</title><rect x="85.0299%" y="164" width="14.9701%" height="15" fill="rgb(237,174,47)"/><text x="85.2799%" y="174.50">_run_whole_runtime (mlp..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (50 samples, 14.97%)</title><rect x="85.0299%" y="180" width="14.9701%" height="15" fill="rgb(206,201,31)"/><text x="85.2799%" y="190.50">run (mlprodict/onnxrt/o..</text></g><g><title>run (onnxruntime/capi/session.py:140) (50 samples, 14.97%)</title><rect x="85.0299%" y="196" width="14.9701%" height="15" fill="rgb(231,57,52)"/><text x="85.2799%" y="206.50">run (onnxruntime/capi/s..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (49 samples, 14.67%)</title><rect x="85.3293%" y="212" width="14.6707%" height="15" fill="rgb(248,177,22)"/><text x="85.5793%" y="222.50">pybind11::cpp_function..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (49 samples, 14.67%)</title><rect x="85.3293%" y="228" width="14.6707%" height="15" fill="rgb(215,211,37)"/><text x="85.5793%" y="238.50">void pybind11::cpp_fun..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (49 samples, 14.67%)</title><rect x="85.3293%" y="244" width="14.6707%" height="15" fill="rgb(241,128,51)"/><text x="85.5793%" y="254.50">onnxruntime::Inference..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (49 samples, 14.67%)</title><rect x="85.3293%" y="260" width="14.6707%" height="15" fill="rgb(227,165,31)"/><text x="85.5793%" y="270.50">onnxruntime::Inference..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (49 samples, 14.67%)</title><rect x="85.3293%" y="276" width="14.6707%" height="15" fill="rgb(228,167,24)"/><text x="85.5793%" y="286.50">onnxruntime::utils::Ex..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (49 samples, 14.67%)</title><rect x="85.3293%" y="292" width="14.6707%" height="15" fill="rgb(228,143,12)"/><text x="85.5793%" y="302.50">onnxruntime::utils::Ex..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (49 samples, 14.67%)</title><rect x="85.3293%" y="308" width="14.6707%" height="15" fill="rgb(249,149,8)"/><text x="85.5793%" y="318.50">onnxruntime::Sequentia..</text></g><g><title>onnxruntime::MatMul&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (22 samples, 6.59%)</title><rect x="93.4132%" y="324" width="6.5868%" height="15" fill="rgb(243,35,44)"/><text x="93.6632%" y="334.50">onnxrunti..</text></g><g><title>onnxruntime::math::MatMul&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (22 samples, 6.59%)</title><rect x="93.4132%" y="340" width="6.5868%" height="15" fill="rgb(246,89,9)"/><text x="93.6632%" y="350.50">onnxrunti..</text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (22 samples, 6.59%)</title><rect x="93.4132%" y="356" width="6.5868%" height="15" fill="rgb(233,213,13)"/><text x="93.6632%" y="366.50">cblas_sge..</text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (22 samples, 6.59%)</title><rect x="93.4132%" y="372" width="6.5868%" height="15" fill="rgb(233,141,41)"/><text x="93.6632%" y="382.50">sgemm_ (o..</text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (22 samples, 6.59%)</title><rect x="93.4132%" y="388" width="6.5868%" height="15" fill="rgb(239,167,4)"/><text x="93.6632%" y="398.50">mkl_blas_..</text></g><g><title>mkl_blas_sgemm_omp_driver_v1 (onnxruntime/capi/libmklml_intel.so) (22 samples, 6.59%)</title><rect x="93.4132%" y="404" width="6.5868%" height="15" fill="rgb(209,217,16)"/><text x="93.6632%" y="414.50">mkl_blas_..</text></g></svg></svg>