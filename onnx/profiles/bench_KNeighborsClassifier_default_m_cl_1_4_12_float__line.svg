<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1494" onload="init(evt)" viewBox="0 0 1200 1494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1494" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1477.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1477.00"> </text><g id="frames"><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (5 samples, 0.17%)</title><rect x="10" y="148" width="2" height="15" fill="rgb(236,104,26)"/><text x="13.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (4 samples, 0.14%)</title><rect x="10" y="164" width="2" height="15" fill="rgb(253,29,12)"/><text x="13.00" y="174.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (4 samples, 0.14%)</title><rect x="10" y="180" width="2" height="15" fill="rgb(241,93,8)"/><text x="13.00" y="190.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (3 samples, 0.10%)</title><rect x="10" y="196" width="2" height="15" fill="rgb(228,32,43)"/><text x="13.00" y="206.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (3 samples, 0.10%)</title><rect x="10" y="212" width="2" height="15" fill="rgb(222,154,14)"/><text x="13.00" y="222.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (3 samples, 0.10%)</title><rect x="10" y="228" width="2" height="15" fill="rgb(215,5,42)"/><text x="13.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (3 samples, 0.10%)</title><rect x="10" y="244" width="2" height="15" fill="rgb(211,39,15)"/><text x="13.00" y="254.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:18) (6 samples, 0.21%)</title><rect x="10" y="100" width="2" height="15" fill="rgb(212,72,36)"/><text x="13.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (6 samples, 0.21%)</title><rect x="10" y="116" width="2" height="15" fill="rgb(248,151,8)"/><text x="13.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (6 samples, 0.21%)</title><rect x="10" y="132" width="2" height="15" fill="rgb(207,198,4)"/><text x="13.00" y="142.50"></text></g><g><title>check_array (sklearn/utils/validation.py:543) (4 samples, 0.14%)</title><rect x="15" y="164" width="1" height="15" fill="rgb(222,115,12)"/><text x="18.00" y="174.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (4 samples, 0.14%)</title><rect x="17" y="180" width="1" height="15" fill="rgb(220,40,3)"/><text x="20.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (5 samples, 0.17%)</title><rect x="17" y="164" width="2" height="15" fill="rgb(212,17,11)"/><text x="20.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (3 samples, 0.10%)</title><rect x="19" y="164" width="1" height="15" fill="rgb(245,38,32)"/><text x="22.00" y="174.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:215) (19 samples, 0.65%)</title><rect x="13" y="148" width="7" height="15" fill="rgb(252,44,1)"/><text x="16.00" y="158.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:138) (3 samples, 0.10%)</title><rect x="22" y="196" width="1" height="15" fill="rgb(211,7,30)"/><text x="25.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (7 samples, 0.24%)</title><rect x="21" y="164" width="3" height="15" fill="rgb(226,38,36)"/><text x="24.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (4 samples, 0.14%)</title><rect x="22" y="180" width="2" height="15" fill="rgb(222,45,43)"/><text x="25.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:620) (3 samples, 0.10%)</title><rect x="24" y="164" width="1" height="15" fill="rgb(244,92,52)"/><text x="27.00" y="174.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py:388) (3 samples, 0.10%)</title><rect x="24" y="180" width="1" height="15" fill="rgb(233,157,7)"/><text x="27.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:650) (12 samples, 0.41%)</title><rect x="25" y="164" width="5" height="15" fill="rgb(237,101,31)"/><text x="28.00" y="174.50"></text></g><g><title>__init__ (distutils/version.py:304) (11 samples, 0.38%)</title><rect x="25" y="180" width="5" height="15" fill="rgb(231,172,52)"/><text x="28.00" y="190.50"></text></g><g><title>parse (distutils/version.py:312) (11 samples, 0.38%)</title><rect x="25" y="196" width="5" height="15" fill="rgb(216,159,28)"/><text x="28.00" y="206.50"></text></g><g><title>_sre_SRE_Pattern_split (python3.7) (10 samples, 0.34%)</title><rect x="26" y="212" width="4" height="15" fill="rgb(223,115,34)"/><text x="29.00" y="222.50"></text></g><g><title>sre_ucs1_match (python3.7) (3 samples, 0.10%)</title><rect x="29" y="228" width="1" height="15" fill="rgb(210,187,51)"/><text x="32.00" y="238.50"></text></g><g><title>__init__ (joblib/parallel.py:620) (4 samples, 0.14%)</title><rect x="31" y="180" width="1" height="15" fill="rgb(228,23,4)"/><text x="34.00" y="190.50"></text></g><g><title>get_active_backend (joblib/parallel.py:123) (3 samples, 0.10%)</title><rect x="31" y="196" width="1" height="15" fill="rgb(223,14,27)"/><text x="34.00" y="206.50"></text></g><g><title>__init__ (joblib/parallel.py:634) (5 samples, 0.17%)</title><rect x="33" y="180" width="2" height="15" fill="rgb(250,75,37)"/><text x="36.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:660) (11 samples, 0.38%)</title><rect x="31" y="164" width="4" height="15" fill="rgb(240,156,8)"/><text x="34.00" y="174.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:824) (4 samples, 0.14%)</title><rect x="37" y="196" width="2" height="15" fill="rgb(224,93,12)"/><text x="40.00" y="206.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:212) (3 samples, 0.10%)</title><rect x="37" y="212" width="2" height="15" fill="rgb(215,62,9)"/><text x="40.00" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py:504) (3 samples, 0.10%)</title><rect x="43" y="356" width="1" height="15" fill="rgb(227,129,38)"/><text x="46.00" y="366.50"></text></g><g><title>check_array (sklearn/utils/validation.py:518) (3 samples, 0.10%)</title><rect x="45" y="356" width="1" height="15" fill="rgb(206,198,34)"/><text x="48.00" y="366.50"></text></g><g><title>0x7f78e900132c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (18 samples, 0.62%)</title><rect x="41" y="324" width="7" height="15" fill="rgb(214,102,33)"/><text x="44.00" y="334.50"></text></g><g><title>0x7f78e8fcc5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (18 samples, 0.62%)</title><rect x="41" y="340" width="7" height="15" fill="rgb(224,11,51)"/><text x="44.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (4 samples, 0.14%)</title><rect x="47" y="356" width="1" height="15" fill="rgb(223,177,52)"/><text x="50.00" y="366.50"></text></g><g><title>0x7f78e8ffc877 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.14%)</title><rect x="49" y="356" width="1" height="15" fill="rgb(232,16,17)"/><text x="52.00" y="366.50"></text></g><g><title>0x7f78e9001708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.27%)</title><rect x="49" y="324" width="3" height="15" fill="rgb(205,226,31)"/><text x="52.00" y="334.50"></text></g><g><title>0x7f78e8fcc5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.27%)</title><rect x="49" y="340" width="3" height="15" fill="rgb(228,38,41)"/><text x="52.00" y="350.50"></text></g><g><title>0x7f78e8ffd73a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.14%)</title><rect x="50" y="356" width="2" height="15" fill="rgb(208,102,47)"/><text x="53.00" y="366.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (30 samples, 1.03%)</title><rect x="41" y="276" width="12" height="15" fill="rgb(219,95,2)"/><text x="44.00" y="286.50"></text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (30 samples, 1.03%)</title><rect x="41" y="292" width="12" height="15" fill="rgb(235,45,3)"/><text x="44.00" y="302.50"></text></g><g><title>0x7f78e9005e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (30 samples, 1.03%)</title><rect x="41" y="308" width="12" height="15" fill="rgb(229,157,9)"/><text x="44.00" y="318.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (32 samples, 1.10%)</title><rect x="41" y="228" width="13" height="15" fill="rgb(248,1,51)"/><text x="44.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (32 samples, 1.10%)</title><rect x="41" y="244" width="13" height="15" fill="rgb(234,3,13)"/><text x="44.00" y="254.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (31 samples, 1.06%)</title><rect x="41" y="260" width="13" height="15" fill="rgb(210,141,18)"/><text x="44.00" y="270.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (48 samples, 1.65%)</title><rect x="35" y="180" width="20" height="15" fill="rgb(241,197,45)"/><text x="38.00" y="190.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (36 samples, 1.24%)</title><rect x="40" y="196" width="15" height="15" fill="rgb(205,39,21)"/><text x="43.00" y="206.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (35 samples, 1.20%)</title><rect x="41" y="212" width="14" height="15" fill="rgb(223,101,18)"/><text x="44.00" y="222.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:203) (3 samples, 0.10%)</title><rect x="54" y="228" width="1" height="15" fill="rgb(237,31,12)"/><text x="57.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:1006) (3 samples, 0.10%)</title><rect x="55" y="180" width="1" height="15" fill="rgb(250,63,50)"/><text x="58.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (60 samples, 2.06%)</title><rect x="35" y="164" width="24" height="15" fill="rgb(234,182,43)"/><text x="38.00" y="174.50">k..</text></g><g><title>vstack (numpy/core/shape_base.py:279) (3 samples, 0.10%)</title><rect x="60" y="212" width="1" height="15" fill="rgb(229,65,51)"/><text x="63.00" y="222.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (103 samples, 3.54%)</title><rect x="20" y="148" width="42" height="15" fill="rgb(230,33,28)"/><text x="23.00" y="158.50">pre..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:671) (7 samples, 0.24%)</title><rect x="59" y="164" width="3" height="15" fill="rgb(224,110,11)"/><text x="62.00" y="174.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (6 samples, 0.21%)</title><rect x="60" y="180" width="2" height="15" fill="rgb(219,177,10)"/><text x="63.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.21%)</title><rect x="60" y="196" width="2" height="15" fill="rgb(214,201,33)"/><text x="63.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (3 samples, 0.10%)</title><rect x="61" y="212" width="1" height="15" fill="rgb(223,40,4)"/><text x="64.00" y="222.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:229) (3 samples, 0.10%)</title><rect x="63" y="148" width="1" height="15" fill="rgb(243,184,47)"/><text x="66.00" y="158.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:234) (3 samples, 0.10%)</title><rect x="64" y="148" width="1" height="15" fill="rgb(206,3,1)"/><text x="67.00" y="158.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:238) (4 samples, 0.14%)</title><rect x="65" y="148" width="2" height="15" fill="rgb(225,110,16)"/><text x="68.00" y="158.50"></text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.10%)</title><rect x="69" y="164" width="1" height="15" fill="rgb(227,203,39)"/><text x="72.00" y="174.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2942) (3 samples, 0.10%)</title><rect x="69" y="180" width="1" height="15" fill="rgb(240,79,20)"/><text x="72.00" y="190.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c:517) (3 samples, 0.10%)</title><rect x="69" y="196" width="1" height="15" fill="rgb(240,9,50)"/><text x="72.00" y="206.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:239) (17 samples, 0.58%)</title><rect x="67" y="148" width="7" height="15" fill="rgb(239,149,15)"/><text x="70.00" y="158.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 0.24%)</title><rect x="71" y="164" width="3" height="15" fill="rgb(254,91,39)"/><text x="74.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 0.14%)</title><rect x="72" y="180" width="2" height="15" fill="rgb(244,168,1)"/><text x="75.00" y="190.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 0.10%)</title><rect x="72" y="196" width="2" height="15" fill="rgb(211,31,0)"/><text x="75.00" y="206.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:242) (4 samples, 0.14%)</title><rect x="74" y="148" width="1" height="15" fill="rgb(235,71,14)"/><text x="77.00" y="158.50"></text></g><g><title>array_sum (methods.c:2215) (4 samples, 0.14%)</title><rect x="74" y="164" width="1" height="15" fill="rgb(210,152,50)"/><text x="77.00" y="174.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (4 samples, 0.14%)</title><rect x="74" y="180" width="1" height="15" fill="rgb(244,193,50)"/><text x="77.00" y="190.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (4 samples, 0.14%)</title><rect x="74" y="196" width="1" height="15" fill="rgb(223,40,36)"/><text x="77.00" y="206.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (159 samples, 5.46%)</title><rect x="12" y="132" width="65" height="15" fill="rgb(244,92,17)"/><text x="15.00" y="142.50">&lt;lambda..</text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:38) (167 samples, 5.74%)</title><rect x="10" y="52" width="67" height="15" fill="rgb(205,51,46)"/><text x="13.00" y="62.50">&lt;module..</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:37) (167 samples, 5.74%)</title><rect x="10" y="68" width="67" height="15" fill="rgb(228,113,53)"/><text x="13.00" y="78.50">profile..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:29) (167 samples, 5.74%)</title><rect x="10" y="84" width="67" height="15" fill="rgb(233,46,49)"/><text x="13.00" y="94.50">setup_p..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:23) (161 samples, 5.53%)</title><rect x="12" y="100" width="65" height="15" fill="rgb(226,15,49)"/><text x="15.00" y="110.50">profile..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (161 samples, 5.53%)</title><rect x="12" y="116" width="65" height="15" fill="rgb(237,137,16)"/><text x="15.00" y="126.50">time_pr..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.14%)</title><rect x="78" y="180" width="2" height="15" fill="rgb(208,97,9)"/><text x="81.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="78" y="196" width="2" height="15" fill="rgb(224,42,37)"/><text x="81.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="78" y="212" width="2" height="15" fill="rgb(213,190,41)"/><text x="81.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="78" y="228" width="2" height="15" fill="rgb(251,216,3)"/><text x="81.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="78" y="244" width="2" height="15" fill="rgb(251,225,12)"/><text x="81.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="78" y="260" width="2" height="15" fill="rgb(228,14,36)"/><text x="81.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="78" y="276" width="2" height="15" fill="rgb(247,8,13)"/><text x="81.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (4 samples, 0.14%)</title><rect x="78" y="292" width="2" height="15" fill="rgb(242,93,32)"/><text x="81.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="78" y="308" width="2" height="15" fill="rgb(253,181,37)"/><text x="81.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="78" y="324" width="2" height="15" fill="rgb(208,141,25)"/><text x="81.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="78" y="340" width="2" height="15" fill="rgb(241,182,30)"/><text x="81.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="78" y="356" width="2" height="15" fill="rgb(243,142,40)"/><text x="81.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="78" y="372" width="2" height="15" fill="rgb(238,62,42)"/><text x="81.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (4 samples, 0.14%)</title><rect x="78" y="388" width="2" height="15" fill="rgb(217,173,12)"/><text x="81.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="78" y="404" width="2" height="15" fill="rgb(246,43,51)"/><text x="81.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="78" y="420" width="2" height="15" fill="rgb(211,159,21)"/><text x="81.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="78" y="436" width="2" height="15" fill="rgb(250,17,25)"/><text x="81.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="78" y="452" width="2" height="15" fill="rgb(250,219,0)"/><text x="81.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="78" y="468" width="2" height="15" fill="rgb(228,165,45)"/><text x="81.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:25) (3 samples, 0.10%)</title><rect x="79" y="484" width="1" height="15" fill="rgb(231,114,9)"/><text x="82.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="79" y="500" width="1" height="15" fill="rgb(246,126,34)"/><text x="82.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="79" y="516" width="1" height="15" fill="rgb(239,96,39)"/><text x="82.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="79" y="532" width="1" height="15" fill="rgb(214,47,11)"/><text x="82.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="79" y="548" width="1" height="15" fill="rgb(254,60,13)"/><text x="82.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="79" y="564" width="1" height="15" fill="rgb(243,220,52)"/><text x="82.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (3 samples, 0.10%)</title><rect x="79" y="580" width="1" height="15" fill="rgb(242,100,46)"/><text x="82.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="79" y="596" width="1" height="15" fill="rgb(245,83,51)"/><text x="82.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="79" y="612" width="1" height="15" fill="rgb(219,83,51)"/><text x="82.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="79" y="628" width="1" height="15" fill="rgb(235,111,6)"/><text x="82.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="79" y="644" width="1" height="15" fill="rgb(239,9,21)"/><text x="82.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="79" y="660" width="1" height="15" fill="rgb(209,156,26)"/><text x="82.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:379) (3 samples, 0.10%)</title><rect x="79" y="676" width="1" height="15" fill="rgb(254,47,28)"/><text x="82.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="79" y="692" width="1" height="15" fill="rgb(242,48,44)"/><text x="82.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="79" y="708" width="1" height="15" fill="rgb(235,164,8)"/><text x="82.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="79" y="724" width="1" height="15" fill="rgb(208,100,38)"/><text x="82.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="79" y="740" width="1" height="15" fill="rgb(224,0,37)"/><text x="82.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="79" y="756" width="1" height="15" fill="rgb(238,122,15)"/><text x="82.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py:182) (3 samples, 0.10%)</title><rect x="79" y="772" width="1" height="15" fill="rgb(214,188,0)"/><text x="82.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (3 samples, 0.10%)</title><rect x="79" y="788" width="1" height="15" fill="rgb(251,165,28)"/><text x="82.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="79" y="804" width="1" height="15" fill="rgb(250,10,26)"/><text x="82.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="79" y="820" width="1" height="15" fill="rgb(220,57,47)"/><text x="82.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="79" y="836" width="1" height="15" fill="rgb(215,119,36)"/><text x="82.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="79" y="852" width="1" height="15" fill="rgb(231,85,21)"/><text x="82.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="79" y="868" width="1" height="15" fill="rgb(242,229,20)"/><text x="82.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="79" y="884" width="1" height="15" fill="rgb(213,88,32)"/><text x="82.00" y="894.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py:4) (5 samples, 0.17%)</title><rect x="78" y="148" width="2" height="15" fill="rgb(210,59,30)"/><text x="81.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.17%)</title><rect x="78" y="164" width="2" height="15" fill="rgb(215,128,39)"/><text x="81.00" y="174.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (3 samples, 0.10%)</title><rect x="81" y="436" width="1" height="15" fill="rgb(246,119,29)"/><text x="84.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="81" y="452" width="1" height="15" fill="rgb(237,135,16)"/><text x="84.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="81" y="468" width="1" height="15" fill="rgb(233,58,27)"/><text x="84.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="81" y="484" width="1" height="15" fill="rgb(215,184,54)"/><text x="84.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="81" y="500" width="1" height="15" fill="rgb(237,39,17)"/><text x="84.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="81" y="516" width="1" height="15" fill="rgb(227,189,54)"/><text x="84.00" y="526.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (3 samples, 0.10%)</title><rect x="83" y="1236" width="1" height="15" fill="rgb(238,25,48)"/><text x="86.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (3 samples, 0.10%)</title><rect x="83" y="1252" width="1" height="15" fill="rgb(234,169,27)"/><text x="86.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="83" y="1268" width="1" height="15" fill="rgb(226,84,17)"/><text x="86.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="83" y="1284" width="1" height="15" fill="rgb(227,46,26)"/><text x="86.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="83" y="1300" width="1" height="15" fill="rgb(244,54,31)"/><text x="86.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="83" y="1316" width="1" height="15" fill="rgb(222,169,30)"/><text x="86.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="83" y="1332" width="1" height="15" fill="rgb(236,79,25)"/><text x="86.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="83" y="1348" width="1" height="15" fill="rgb(224,17,6)"/><text x="86.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (3 samples, 0.10%)</title><rect x="83" y="1364" width="1" height="15" fill="rgb(238,92,8)"/><text x="86.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.10%)</title><rect x="83" y="1380" width="1" height="15" fill="rgb(215,80,32)"/><text x="86.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.10%)</title><rect x="83" y="1396" width="1" height="15" fill="rgb(214,16,34)"/><text x="86.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.10%)</title><rect x="83" y="1412" width="1" height="15" fill="rgb(246,202,38)"/><text x="86.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.10%)</title><rect x="83" y="1428" width="1" height="15" fill="rgb(221,107,25)"/><text x="86.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.10%)</title><rect x="83" y="1444" width="1" height="15" fill="rgb(205,202,53)"/><text x="86.00" y="1454.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:4) (18 samples, 0.62%)</title><rect x="77" y="52" width="7" height="15" fill="rgb(223,119,45)"/><text x="80.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (18 samples, 0.62%)</title><rect x="77" y="68" width="7" height="15" fill="rgb(210,173,54)"/><text x="80.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (18 samples, 0.62%)</title><rect x="77" y="84" width="7" height="15" fill="rgb(225,188,16)"/><text x="80.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (18 samples, 0.62%)</title><rect x="77" y="100" width="7" height="15" fill="rgb(225,150,21)"/><text x="80.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (18 samples, 0.62%)</title><rect x="77" y="116" width="7" height="15" fill="rgb(254,169,51)"/><text x="80.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (18 samples, 0.62%)</title><rect x="77" y="132" width="7" height="15" fill="rgb(224,34,54)"/><text x="80.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py:7) (10 samples, 0.34%)</title><rect x="80" y="148" width="4" height="15" fill="rgb(230,144,16)"/><text x="83.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 0.34%)</title><rect x="80" y="164" width="4" height="15" fill="rgb(250,109,27)"/><text x="83.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 0.34%)</title><rect x="80" y="180" width="4" height="15" fill="rgb(214,146,53)"/><text x="83.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 0.34%)</title><rect x="80" y="196" width="4" height="15" fill="rgb(229,67,35)"/><text x="83.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 0.34%)</title><rect x="80" y="212" width="4" height="15" fill="rgb(253,160,2)"/><text x="83.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 0.34%)</title><rect x="80" y="228" width="4" height="15" fill="rgb(222,26,25)"/><text x="83.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (8 samples, 0.27%)</title><rect x="81" y="244" width="3" height="15" fill="rgb(220,97,3)"/><text x="84.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.27%)</title><rect x="81" y="260" width="3" height="15" fill="rgb(244,19,8)"/><text x="84.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.27%)</title><rect x="81" y="276" width="3" height="15" fill="rgb(222,121,54)"/><text x="84.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.27%)</title><rect x="81" y="292" width="3" height="15" fill="rgb(221,2,13)"/><text x="84.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.27%)</title><rect x="81" y="308" width="3" height="15" fill="rgb(210,10,54)"/><text x="84.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.27%)</title><rect x="81" y="324" width="3" height="15" fill="rgb(224,130,44)"/><text x="84.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (8 samples, 0.27%)</title><rect x="81" y="340" width="3" height="15" fill="rgb(216,193,6)"/><text x="84.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 0.27%)</title><rect x="81" y="356" width="3" height="15" fill="rgb(212,123,1)"/><text x="84.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 0.27%)</title><rect x="81" y="372" width="3" height="15" fill="rgb(228,118,10)"/><text x="84.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 0.27%)</title><rect x="81" y="388" width="3" height="15" fill="rgb(217,157,29)"/><text x="84.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 0.27%)</title><rect x="81" y="404" width="3" height="15" fill="rgb(230,172,53)"/><text x="84.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.27%)</title><rect x="81" y="420" width="3" height="15" fill="rgb(214,40,0)"/><text x="84.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (5 samples, 0.17%)</title><rect x="82" y="436" width="2" height="15" fill="rgb(235,95,51)"/><text x="85.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.17%)</title><rect x="82" y="452" width="2" height="15" fill="rgb(241,77,44)"/><text x="85.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.17%)</title><rect x="82" y="468" width="2" height="15" fill="rgb(241,20,12)"/><text x="85.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.17%)</title><rect x="82" y="484" width="2" height="15" fill="rgb(234,20,32)"/><text x="85.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.17%)</title><rect x="82" y="500" width="2" height="15" fill="rgb(251,184,2)"/><text x="85.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.17%)</title><rect x="82" y="516" width="2" height="15" fill="rgb(217,224,27)"/><text x="85.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.17%)</title><rect x="82" y="532" width="2" height="15" fill="rgb(247,223,53)"/><text x="85.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.17%)</title><rect x="82" y="548" width="2" height="15" fill="rgb(247,109,20)"/><text x="85.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.17%)</title><rect x="82" y="564" width="2" height="15" fill="rgb(225,114,6)"/><text x="85.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (5 samples, 0.17%)</title><rect x="82" y="580" width="2" height="15" fill="rgb(215,197,44)"/><text x="85.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.17%)</title><rect x="82" y="596" width="2" height="15" fill="rgb(222,123,39)"/><text x="85.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.17%)</title><rect x="82" y="612" width="2" height="15" fill="rgb(251,175,48)"/><text x="85.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.17%)</title><rect x="82" y="628" width="2" height="15" fill="rgb(246,78,16)"/><text x="85.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.17%)</title><rect x="82" y="644" width="2" height="15" fill="rgb(237,47,33)"/><text x="85.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.17%)</title><rect x="82" y="660" width="2" height="15" fill="rgb(218,129,0)"/><text x="85.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (5 samples, 0.17%)</title><rect x="82" y="676" width="2" height="15" fill="rgb(254,30,52)"/><text x="85.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.17%)</title><rect x="82" y="692" width="2" height="15" fill="rgb(219,163,33)"/><text x="85.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.17%)</title><rect x="82" y="708" width="2" height="15" fill="rgb(235,126,44)"/><text x="85.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.17%)</title><rect x="82" y="724" width="2" height="15" fill="rgb(216,61,3)"/><text x="85.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.17%)</title><rect x="82" y="740" width="2" height="15" fill="rgb(234,213,11)"/><text x="85.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.17%)</title><rect x="82" y="756" width="2" height="15" fill="rgb(209,98,48)"/><text x="85.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (5 samples, 0.17%)</title><rect x="82" y="772" width="2" height="15" fill="rgb(230,189,28)"/><text x="85.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.17%)</title><rect x="82" y="788" width="2" height="15" fill="rgb(215,13,46)"/><text x="85.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.17%)</title><rect x="82" y="804" width="2" height="15" fill="rgb(218,174,37)"/><text x="85.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.17%)</title><rect x="82" y="820" width="2" height="15" fill="rgb(221,136,12)"/><text x="85.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.17%)</title><rect x="82" y="836" width="2" height="15" fill="rgb(225,138,33)"/><text x="85.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.17%)</title><rect x="82" y="852" width="2" height="15" fill="rgb(229,199,53)"/><text x="85.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (5 samples, 0.17%)</title><rect x="82" y="868" width="2" height="15" fill="rgb(241,56,14)"/><text x="85.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.17%)</title><rect x="82" y="884" width="2" height="15" fill="rgb(254,65,36)"/><text x="85.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.17%)</title><rect x="82" y="900" width="2" height="15" fill="rgb(251,74,40)"/><text x="85.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.17%)</title><rect x="82" y="916" width="2" height="15" fill="rgb(237,156,15)"/><text x="85.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.17%)</title><rect x="82" y="932" width="2" height="15" fill="rgb(250,218,31)"/><text x="85.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.17%)</title><rect x="82" y="948" width="2" height="15" fill="rgb(237,61,35)"/><text x="85.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.17%)</title><rect x="82" y="964" width="2" height="15" fill="rgb(206,225,26)"/><text x="85.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.17%)</title><rect x="82" y="980" width="2" height="15" fill="rgb(205,171,8)"/><text x="85.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.17%)</title><rect x="82" y="996" width="2" height="15" fill="rgb(245,132,41)"/><text x="85.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (5 samples, 0.17%)</title><rect x="82" y="1012" width="2" height="15" fill="rgb(239,52,21)"/><text x="85.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.17%)</title><rect x="82" y="1028" width="2" height="15" fill="rgb(228,173,5)"/><text x="85.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.17%)</title><rect x="82" y="1044" width="2" height="15" fill="rgb(206,144,12)"/><text x="85.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.17%)</title><rect x="82" y="1060" width="2" height="15" fill="rgb(222,80,39)"/><text x="85.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.17%)</title><rect x="82" y="1076" width="2" height="15" fill="rgb(211,22,43)"/><text x="85.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.17%)</title><rect x="82" y="1092" width="2" height="15" fill="rgb(206,203,10)"/><text x="85.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (4 samples, 0.14%)</title><rect x="83" y="1108" width="1" height="15" fill="rgb(236,12,36)"/><text x="86.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 0.14%)</title><rect x="83" y="1124" width="1" height="15" fill="rgb(223,79,6)"/><text x="86.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="83" y="1140" width="1" height="15" fill="rgb(212,3,19)"/><text x="86.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.14%)</title><rect x="83" y="1156" width="1" height="15" fill="rgb(240,62,6)"/><text x="86.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.14%)</title><rect x="83" y="1172" width="1" height="15" fill="rgb(208,57,47)"/><text x="86.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.14%)</title><rect x="83" y="1188" width="1" height="15" fill="rgb(238,31,8)"/><text x="86.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.14%)</title><rect x="83" y="1204" width="1" height="15" fill="rgb(221,130,11)"/><text x="86.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.14%)</title><rect x="83" y="1220" width="1" height="15" fill="rgb(227,151,2)"/><text x="86.00" y="1230.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (10 samples, 0.34%)</title><rect x="90" y="260" width="4" height="15" fill="rgb(238,200,7)"/><text x="93.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (3 samples, 0.10%)</title><rect x="95" y="308" width="1" height="15" fill="rgb(216,72,1)"/><text x="98.00" y="318.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (20 samples, 0.69%)</title><rect x="94" y="276" width="8" height="15" fill="rgb(250,199,50)"/><text x="97.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (19 samples, 0.65%)</title><rect x="95" y="292" width="7" height="15" fill="rgb(227,213,53)"/><text x="98.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (15 samples, 0.52%)</title><rect x="96" y="308" width="6" height="15" fill="rgb(246,22,37)"/><text x="99.00" y="318.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (12 samples, 0.41%)</title><rect x="97" y="324" width="5" height="15" fill="rgb(222,109,23)"/><text x="100.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 0.38%)</title><rect x="98" y="340" width="4" height="15" fill="rgb(219,223,15)"/><text x="101.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (10 samples, 0.34%)</title><rect x="98" y="356" width="4" height="15" fill="rgb(207,26,46)"/><text x="101.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (8 samples, 0.27%)</title><rect x="99" y="372" width="3" height="15" fill="rgb(241,48,21)"/><text x="102.00" y="382.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (7 samples, 0.24%)</title><rect x="99" y="388" width="3" height="15" fill="rgb(226,200,42)"/><text x="102.00" y="398.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (6 samples, 0.21%)</title><rect x="100" y="404" width="2" height="15" fill="rgb(229,16,42)"/><text x="103.00" y="414.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (5 samples, 0.17%)</title><rect x="100" y="420" width="2" height="15" fill="rgb(246,33,11)"/><text x="103.00" y="430.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (31 samples, 1.06%)</title><rect x="94" y="260" width="12" height="15" fill="rgb(248,89,35)"/><text x="97.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (8 samples, 0.27%)</title><rect x="103" y="276" width="3" height="15" fill="rgb(232,101,17)"/><text x="106.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (7 samples, 0.24%)</title><rect x="104" y="292" width="2" height="15" fill="rgb(210,47,46)"/><text x="107.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (5 samples, 0.17%)</title><rect x="104" y="308" width="2" height="15" fill="rgb(234,0,52)"/><text x="107.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.17%)</title><rect x="104" y="324" width="2" height="15" fill="rgb(253,211,28)"/><text x="107.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 0.14%)</title><rect x="105" y="340" width="1" height="15" fill="rgb(210,7,18)"/><text x="108.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (4 samples, 0.14%)</title><rect x="105" y="356" width="1" height="15" fill="rgb(206,78,16)"/><text x="108.00" y="366.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (4 samples, 0.14%)</title><rect x="106" y="260" width="2" height="15" fill="rgb(238,88,5)"/><text x="109.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (54 samples, 1.86%)</title><rect x="89" y="244" width="22" height="15" fill="rgb(242,208,4)"/><text x="92.00" y="254.50">_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (4 samples, 0.14%)</title><rect x="109" y="260" width="2" height="15" fill="rgb(240,203,20)"/><text x="112.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (60 samples, 2.06%)</title><rect x="87" y="212" width="24" height="15" fill="rgb(228,174,8)"/><text x="90.00" y="222.50">_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (58 samples, 1.99%)</title><rect x="88" y="228" width="23" height="15" fill="rgb(252,75,53)"/><text x="91.00" y="238.50">r..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (72 samples, 2.47%)</title><rect x="85" y="196" width="29" height="15" fill="rgb(235,48,24)"/><text x="88.00" y="206.50">ru..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:18) (74 samples, 2.54%)</title><rect x="84" y="100" width="30" height="15" fill="rgb(209,156,41)"/><text x="87.00" y="110.50">pr..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (74 samples, 2.54%)</title><rect x="84" y="116" width="30" height="15" fill="rgb(244,59,37)"/><text x="87.00" y="126.50">ti..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (74 samples, 2.54%)</title><rect x="84" y="132" width="30" height="15" fill="rgb(223,163,53)"/><text x="87.00" y="142.50">&lt;l..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (74 samples, 2.54%)</title><rect x="84" y="148" width="30" height="15" fill="rgb(229,218,38)"/><text x="87.00" y="158.50">ru..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (74 samples, 2.54%)</title><rect x="84" y="164" width="30" height="15" fill="rgb(227,218,8)"/><text x="87.00" y="174.50">_r..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (73 samples, 2.51%)</title><rect x="85" y="180" width="29" height="15" fill="rgb(224,156,6)"/><text x="88.00" y="190.50">ru..</text></g><g><title>__munmap (libc-2.29.so) (3 samples, 0.10%)</title><rect x="114" y="116" width="2" height="15" fill="rgb(243,52,53)"/><text x="117.00" y="126.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (3 samples, 0.10%)</title><rect x="121" y="180" width="2" height="15" fill="rgb(241,22,12)"/><text x="124.00" y="190.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (14 samples, 0.48%)</title><rect x="123" y="180" width="5" height="15" fill="rgb(248,116,41)"/><text x="126.00" y="190.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (4 samples, 0.14%)</title><rect x="127" y="196" width="1" height="15" fill="rgb(208,75,3)"/><text x="130.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (5 samples, 0.17%)</title><rect x="134" y="212" width="2" height="15" fill="rgb(220,150,30)"/><text x="137.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.10%)</title><rect x="134" y="228" width="2" height="15" fill="rgb(216,149,38)"/><text x="137.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:37) (7 samples, 0.24%)</title><rect x="136" y="212" width="3" height="15" fill="rgb(216,176,32)"/><text x="139.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (7 samples, 0.24%)</title><rect x="136" y="228" width="3" height="15" fill="rgb(212,204,36)"/><text x="139.00" y="238.50"></text></g><g><title>array_astype (methods.c:845) (3 samples, 0.10%)</title><rect x="138" y="244" width="1" height="15" fill="rgb(236,186,43)"/><text x="141.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_concat.py:30) (3 samples, 0.10%)</title><rect x="139" y="212" width="1" height="15" fill="rgb(243,149,1)"/><text x="142.00" y="222.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (3 samples, 0.10%)</title><rect x="139" y="228" width="1" height="15" fill="rgb(218,150,0)"/><text x="142.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:84) (3 samples, 0.10%)</title><rect x="142" y="212" width="1" height="15" fill="rgb(230,106,51)"/><text x="145.00" y="222.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (3 samples, 0.10%)</title><rect x="146" y="260" width="1" height="15" fill="rgb(209,216,12)"/><text x="149.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (6 samples, 0.21%)</title><rect x="146" y="228" width="2" height="15" fill="rgb(208,222,37)"/><text x="149.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (5 samples, 0.17%)</title><rect x="146" y="244" width="2" height="15" fill="rgb(211,126,35)"/><text x="149.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (16 samples, 0.55%)</title><rect x="143" y="212" width="6" height="15" fill="rgb(212,226,22)"/><text x="146.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (24 samples, 0.82%)</title><rect x="149" y="212" width="10" height="15" fill="rgb(254,215,13)"/><text x="152.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (13 samples, 0.45%)</title><rect x="159" y="212" width="6" height="15" fill="rgb(251,152,18)"/><text x="162.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1539) (7 samples, 0.24%)</title><rect x="168" y="228" width="3" height="15" fill="rgb(242,100,9)"/><text x="171.00" y="238.50"></text></g><g><title>array_subscript (mapping.c:1584) (8 samples, 0.27%)</title><rect x="171" y="228" width="3" height="15" fill="rgb(213,77,7)"/><text x="174.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (7 samples, 0.24%)</title><rect x="171" y="244" width="3" height="15" fill="rgb(245,134,3)"/><text x="174.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (5 samples, 0.17%)</title><rect x="172" y="260" width="2" height="15" fill="rgb(231,117,52)"/><text x="175.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (27 samples, 0.93%)</title><rect x="165" y="212" width="11" height="15" fill="rgb(215,119,49)"/><text x="168.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:392) (10 samples, 0.34%)</title><rect x="189" y="228" width="5" height="15" fill="rgb(215,214,4)"/><text x="192.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (9 samples, 0.31%)</title><rect x="194" y="228" width="3" height="15" fill="rgb(243,28,7)"/><text x="197.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:423) (4 samples, 0.14%)</title><rect x="210" y="244" width="1" height="15" fill="rgb(237,161,28)"/><text x="213.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:426) (8 samples, 0.27%)</title><rect x="211" y="244" width="4" height="15" fill="rgb(250,207,40)"/><text x="214.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (14 samples, 0.48%)</title><rect x="215" y="244" width="5" height="15" fill="rgb(225,21,13)"/><text x="218.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (20 samples, 0.69%)</title><rect x="220" y="244" width="8" height="15" fill="rgb(240,64,13)"/><text x="223.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (21 samples, 0.72%)</title><rect x="228" y="244" width="9" height="15" fill="rgb(236,79,15)"/><text x="231.00" y="254.50"></text></g><g><title>unicode_eq (python3.7) (5 samples, 0.17%)</title><rect x="235" y="260" width="2" height="15" fill="rgb(243,167,30)"/><text x="238.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:447) (4 samples, 0.14%)</title><rect x="237" y="244" width="2" height="15" fill="rgb(207,7,52)"/><text x="240.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (15 samples, 0.52%)</title><rect x="239" y="244" width="6" height="15" fill="rgb(210,194,54)"/><text x="242.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (15 samples, 0.52%)</title><rect x="273" y="260" width="6" height="15" fill="rgb(227,109,4)"/><text x="276.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (179 samples, 6.15%)</title><rect x="279" y="260" width="72" height="15" fill="rgb(214,144,10)"/><text x="282.00" y="270.50">run (mlp..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (31 samples, 1.06%)</title><rect x="339" y="276" width="12" height="15" fill="rgb(206,196,1)"/><text x="342.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (28 samples, 0.96%)</title><rect x="417" y="308" width="11" height="15" fill="rgb(250,162,12)"/><text x="420.00" y="318.50"></text></g><g><title>array_copy (methods.c:1127) (3 samples, 0.10%)</title><rect x="432" y="324" width="1" height="15" fill="rgb(237,178,29)"/><text x="435.00" y="334.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (7 samples, 0.24%)</title><rect x="434" y="356" width="3" height="15" fill="rgb(206,195,1)"/><text x="437.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (7 samples, 0.24%)</title><rect x="434" y="372" width="3" height="15" fill="rgb(225,48,19)"/><text x="437.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (7 samples, 0.24%)</title><rect x="434" y="388" width="3" height="15" fill="rgb(235,47,40)"/><text x="437.00" y="398.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (11 samples, 0.38%)</title><rect x="433" y="340" width="5" height="15" fill="rgb(243,89,22)"/><text x="436.00" y="350.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (3 samples, 0.10%)</title><rect x="444" y="388" width="2" height="15" fill="rgb(254,140,42)"/><text x="447.00" y="398.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (4 samples, 0.14%)</title><rect x="446" y="388" width="1" height="15" fill="rgb(245,196,12)"/><text x="449.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (15 samples, 0.52%)</title><rect x="442" y="372" width="6" height="15" fill="rgb(231,41,4)"/><text x="445.00" y="382.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (4 samples, 0.14%)</title><rect x="451" y="388" width="1" height="15" fill="rgb(210,167,5)"/><text x="454.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (9 samples, 0.31%)</title><rect x="449" y="372" width="4" height="15" fill="rgb(222,92,29)"/><text x="452.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:78) (3 samples, 0.10%)</title><rect x="453" y="372" width="1" height="15" fill="rgb(208,123,7)"/><text x="456.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:93) (3 samples, 0.10%)</title><rect x="454" y="372" width="1" height="15" fill="rgb(220,80,32)"/><text x="457.00" y="382.50"></text></g><g><title>0x7f790ec0dd50 (libc-2.29.so) (3 samples, 0.10%)</title><rect x="457" y="420" width="1" height="15" fill="rgb(244,102,21)"/><text x="460.00" y="430.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (11 samples, 0.38%)</title><rect x="455" y="388" width="4" height="15" fill="rgb(234,200,39)"/><text x="458.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (11 samples, 0.38%)</title><rect x="455" y="404" width="4" height="15" fill="rgb(220,195,53)"/><text x="458.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.10%)</title><rect x="458" y="420" width="1" height="15" fill="rgb(232,52,18)"/><text x="461.00" y="430.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (80 samples, 2.75%)</title><rect x="428" y="308" width="33" height="15" fill="rgb(243,53,0)"/><text x="431.00" y="318.50">_r..</text></g><g><title>array_copy (methods.c:1133) (68 samples, 2.34%)</title><rect x="433" y="324" width="28" height="15" fill="rgb(233,209,47)"/><text x="436.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c:560) (57 samples, 1.96%)</title><rect x="438" y="340" width="23" height="15" fill="rgb(232,96,12)"/><text x="441.00" y="350.50">P..</text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (49 samples, 1.68%)</title><rect x="441" y="356" width="20" height="15" fill="rgb(212,154,13)"/><text x="444.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (14 samples, 0.48%)</title><rect x="455" y="372" width="6" height="15" fill="rgb(248,189,38)"/><text x="458.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (3 samples, 0.10%)</title><rect x="474" y="356" width="1" height="15" fill="rgb(254,204,18)"/><text x="477.00" y="366.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:80) (3 samples, 0.10%)</title><rect x="474" y="372" width="1" height="15" fill="rgb(205,103,36)"/><text x="477.00" y="382.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (5 samples, 0.17%)</title><rect x="474" y="324" width="2" height="15" fill="rgb(205,91,18)"/><text x="477.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (5 samples, 0.17%)</title><rect x="474" y="340" width="2" height="15" fill="rgb(214,183,25)"/><text x="477.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (3 samples, 0.10%)</title><rect x="476" y="340" width="1" height="15" fill="rgb(244,102,32)"/><text x="479.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2006) (9 samples, 0.31%)</title><rect x="480" y="356" width="3" height="15" fill="rgb(207,127,10)"/><text x="483.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1665) (4 samples, 0.14%)</title><rect x="485" y="372" width="1" height="15" fill="rgb(233,227,14)"/><text x="488.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src:4482) (3 samples, 0.10%)</title><rect x="485" y="388" width="1" height="15" fill="rgb(231,71,43)"/><text x="488.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:757) (5 samples, 0.17%)</title><rect x="487" y="404" width="2" height="15" fill="rgb(240,41,54)"/><text x="490.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c:1521) (3 samples, 0.10%)</title><rect x="488" y="420" width="1" height="15" fill="rgb(241,193,5)"/><text x="491.00" y="430.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (9 samples, 0.31%)</title><rect x="487" y="388" width="3" height="15" fill="rgb(217,83,9)"/><text x="490.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (35 samples, 1.20%)</title><rect x="477" y="340" width="14" height="15" fill="rgb(244,192,44)"/><text x="480.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (20 samples, 0.69%)</title><rect x="483" y="356" width="8" height="15" fill="rgb(230,151,11)"/><text x="486.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (13 samples, 0.45%)</title><rect x="486" y="372" width="5" height="15" fill="rgb(244,85,47)"/><text x="489.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:975) (3 samples, 0.10%)</title><rect x="490" y="388" width="1" height="15" fill="rgb(214,140,50)"/><text x="493.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (4 samples, 0.14%)</title><rect x="492" y="340" width="2" height="15" fill="rgb(212,42,51)"/><text x="495.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (12 samples, 0.41%)</title><rect x="496" y="388" width="5" height="15" fill="rgb(208,155,16)"/><text x="499.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (11 samples, 0.38%)</title><rect x="497" y="404" width="4" height="15" fill="rgb(242,108,30)"/><text x="500.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (11 samples, 0.38%)</title><rect x="497" y="420" width="4" height="15" fill="rgb(220,210,29)"/><text x="500.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (11 samples, 0.38%)</title><rect x="497" y="436" width="4" height="15" fill="rgb(243,91,36)"/><text x="500.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (20 samples, 0.69%)</title><rect x="495" y="356" width="8" height="15" fill="rgb(224,222,0)"/><text x="498.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (19 samples, 0.65%)</title><rect x="496" y="372" width="7" height="15" fill="rgb(241,70,50)"/><text x="499.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (4 samples, 0.14%)</title><rect x="502" y="388" width="1" height="15" fill="rgb(217,79,15)"/><text x="505.00" y="398.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1338) (3 samples, 0.10%)</title><rect x="504" y="372" width="1" height="15" fill="rgb(221,35,52)"/><text x="507.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (11 samples, 0.38%)</title><rect x="504" y="356" width="4" height="15" fill="rgb(237,146,21)"/><text x="507.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1355) (6 samples, 0.21%)</title><rect x="506" y="372" width="2" height="15" fill="rgb(218,133,42)"/><text x="509.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (38 samples, 1.31%)</title><rect x="494" y="340" width="15" height="15" fill="rgb(214,151,2)"/><text x="497.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (4 samples, 0.14%)</title><rect x="509" y="340" width="2" height="15" fill="rgb(219,33,39)"/><text x="512.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (88 samples, 3.02%)</title><rect x="476" y="324" width="35" height="15" fill="rgb(221,211,15)"/><text x="479.00" y="334.50">uf..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4754) (3 samples, 0.10%)</title><rect x="511" y="324" width="2" height="15" fill="rgb(212,113,9)"/><text x="514.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (130 samples, 4.47%)</title><rect x="461" y="308" width="52" height="15" fill="rgb(207,95,6)"/><text x="464.00" y="318.50">_run ..</text></g><g><title>_dealloc_cached_buffer_info (buffer.c:932) (3 samples, 0.10%)</title><rect x="526" y="340" width="2" height="15" fill="rgb(245,25,27)"/><text x="529.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (9 samples, 0.31%)</title><rect x="528" y="356" width="3" height="15" fill="rgb(241,171,43)"/><text x="531.00" y="366.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (12 samples, 0.41%)</title><rect x="528" y="340" width="4" height="15" fill="rgb(214,189,18)"/><text x="531.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (3 samples, 0.10%)</title><rect x="531" y="356" width="1" height="15" fill="rgb(224,71,54)"/><text x="534.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (16 samples, 0.55%)</title><rect x="526" y="324" width="7" height="15" fill="rgb(230,214,45)"/><text x="529.00" y="334.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (24 samples, 0.82%)</title><rect x="534" y="324" width="10" height="15" fill="rgb(249,47,28)"/><text x="537.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py:2042) (7 samples, 0.24%)</title><rect x="541" y="340" width="3" height="15" fill="rgb(225,26,34)"/><text x="544.00" y="350.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:5) (4 samples, 0.14%)</title><rect x="544" y="324" width="2" height="15" fill="rgb(253,163,0)"/><text x="547.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:212) (3 samples, 0.10%)</title><rect x="551" y="340" width="1" height="15" fill="rgb(219,90,31)"/><text x="554.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:225) (3 samples, 0.10%)</title><rect x="552" y="340" width="1" height="15" fill="rgb(206,4,10)"/><text x="555.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (7 samples, 0.24%)</title><rect x="561" y="356" width="3" height="15" fill="rgb(211,62,48)"/><text x="564.00" y="366.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (7 samples, 0.24%)</title><rect x="564" y="356" width="2" height="15" fill="rgb(231,140,12)"/><text x="567.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (12 samples, 0.41%)</title><rect x="593" y="388" width="5" height="15" fill="rgb(207,38,0)"/><text x="596.00" y="398.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (15 samples, 0.52%)</title><rect x="598" y="388" width="6" height="15" fill="rgb(253,124,9)"/><text x="601.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (62 samples, 2.13%)</title><rect x="580" y="372" width="25" height="15" fill="rgb(210,164,22)"/><text x="583.00" y="382.50">_..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (17 samples, 0.58%)</title><rect x="605" y="372" width="7" height="15" fill="rgb(243,220,23)"/><text x="608.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (13 samples, 0.45%)</title><rect x="620" y="420" width="6" height="15" fill="rgb(250,59,9)"/><text x="623.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (12 samples, 0.41%)</title><rect x="621" y="436" width="5" height="15" fill="rgb(215,38,4)"/><text x="624.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (5 samples, 0.17%)</title><rect x="624" y="452" width="2" height="15" fill="rgb(210,74,11)"/><text x="627.00" y="462.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (17 samples, 0.58%)</title><rect x="620" y="404" width="7" height="15" fill="rgb(205,227,22)"/><text x="623.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (3 samples, 0.10%)</title><rect x="626" y="420" width="1" height="15" fill="rgb(237,38,28)"/><text x="629.00" y="430.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (18 samples, 0.62%)</title><rect x="620" y="388" width="7" height="15" fill="rgb(247,103,15)"/><text x="623.00" y="398.50"></text></g><g><title>PyArray_OutputConverter (conversion_utils.c:64) (4 samples, 0.14%)</title><rect x="635" y="420" width="2" height="15" fill="rgb(234,163,51)"/><text x="638.00" y="430.50"></text></g><g><title>unicode_eq (python3.7) (3 samples, 0.10%)</title><rect x="637" y="420" width="2" height="15" fill="rgb(221,28,17)"/><text x="640.00" y="430.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (28 samples, 0.96%)</title><rect x="628" y="404" width="11" height="15" fill="rgb(224,215,29)"/><text x="631.00" y="414.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4519) (5 samples, 0.17%)</title><rect x="639" y="404" width="2" height="15" fill="rgb(210,70,19)"/><text x="642.00" y="414.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (3 samples, 0.10%)</title><rect x="642" y="452" width="1" height="15" fill="rgb(249,134,42)"/><text x="645.00" y="462.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:864) (3 samples, 0.10%)</title><rect x="643" y="452" width="2" height="15" fill="rgb(234,146,7)"/><text x="646.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4564) (7 samples, 0.24%)</title><rect x="642" y="404" width="3" height="15" fill="rgb(227,184,52)"/><text x="645.00" y="414.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (7 samples, 0.24%)</title><rect x="642" y="420" width="3" height="15" fill="rgb(227,5,36)"/><text x="645.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (7 samples, 0.24%)</title><rect x="642" y="436" width="3" height="15" fill="rgb(244,116,33)"/><text x="645.00" y="446.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2098) (3 samples, 0.10%)</title><rect x="650" y="468" width="1" height="15" fill="rgb(240,174,31)"/><text x="653.00" y="478.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (15 samples, 0.52%)</title><rect x="648" y="436" width="6" height="15" fill="rgb(207,1,28)"/><text x="651.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (11 samples, 0.38%)</title><rect x="649" y="452" width="5" height="15" fill="rgb(209,164,44)"/><text x="652.00" y="462.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (18 samples, 0.62%)</title><rect x="647" y="420" width="7" height="15" fill="rgb(246,93,54)"/><text x="650.00" y="430.50"></text></g><g><title>0x7f790ec0dd50 (libc-2.29.so) (4 samples, 0.14%)</title><rect x="658" y="500" width="2" height="15" fill="rgb(213,110,46)"/><text x="661.00" y="510.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (15 samples, 0.52%)</title><rect x="655" y="468" width="6" height="15" fill="rgb(245,193,14)"/><text x="658.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (10 samples, 0.34%)</title><rect x="657" y="484" width="4" height="15" fill="rgb(209,223,2)"/><text x="660.00" y="494.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.10%)</title><rect x="660" y="500" width="1" height="15" fill="rgb(239,94,25)"/><text x="663.00" y="510.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.10%)</title><rect x="663" y="500" width="1" height="15" fill="rgb(205,60,40)"/><text x="666.00" y="510.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (3 samples, 0.10%)</title><rect x="663" y="516" width="1" height="15" fill="rgb(217,123,13)"/><text x="666.00" y="526.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (5 samples, 0.17%)</title><rect x="665" y="500" width="2" height="15" fill="rgb(228,119,9)"/><text x="668.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (5 samples, 0.17%)</title><rect x="665" y="516" width="2" height="15" fill="rgb(228,23,53)"/><text x="668.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (5 samples, 0.17%)</title><rect x="665" y="532" width="2" height="15" fill="rgb(212,71,26)"/><text x="668.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.14%)</title><rect x="665" y="548" width="2" height="15" fill="rgb(207,142,22)"/><text x="668.00" y="558.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (5 samples, 0.17%)</title><rect x="667" y="532" width="2" height="15" fill="rgb(220,31,17)"/><text x="670.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (5 samples, 0.17%)</title><rect x="667" y="548" width="2" height="15" fill="rgb(232,174,46)"/><text x="670.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.17%)</title><rect x="667" y="564" width="2" height="15" fill="rgb(238,61,48)"/><text x="670.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (7 samples, 0.24%)</title><rect x="667" y="500" width="3" height="15" fill="rgb(206,65,36)"/><text x="670.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (7 samples, 0.24%)</title><rect x="667" y="516" width="3" height="15" fill="rgb(239,77,5)"/><text x="670.00" y="526.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (41 samples, 1.41%)</title><rect x="654" y="436" width="17" height="15" fill="rgb(248,77,0)"/><text x="657.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (41 samples, 1.41%)</title><rect x="654" y="452" width="17" height="15" fill="rgb(222,106,50)"/><text x="657.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (20 samples, 0.69%)</title><rect x="663" y="468" width="8" height="15" fill="rgb(235,206,5)"/><text x="666.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (19 samples, 0.65%)</title><rect x="663" y="484" width="8" height="15" fill="rgb(249,30,25)"/><text x="666.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:415) (4 samples, 0.14%)</title><rect x="671" y="452" width="2" height="15" fill="rgb(241,54,30)"/><text x="674.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:204) (4 samples, 0.14%)</title><rect x="674" y="468" width="2" height="15" fill="rgb(217,152,29)"/><text x="677.00" y="478.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c:3869) (3 samples, 0.10%)</title><rect x="677" y="500" width="1" height="15" fill="rgb(248,92,13)"/><text x="680.00" y="510.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:57) (7 samples, 0.24%)</title><rect x="676" y="484" width="3" height="15" fill="rgb(231,155,40)"/><text x="679.00" y="494.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (7 samples, 0.24%)</title><rect x="679" y="484" width="3" height="15" fill="rgb(223,136,0)"/><text x="682.00" y="494.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c:741) (3 samples, 0.10%)</title><rect x="681" y="500" width="1" height="15" fill="rgb(228,141,43)"/><text x="684.00" y="510.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (22 samples, 0.76%)</title><rect x="676" y="468" width="9" height="15" fill="rgb(224,82,10)"/><text x="679.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:87) (3 samples, 0.10%)</title><rect x="684" y="484" width="1" height="15" fill="rgb(233,225,39)"/><text x="687.00" y="494.50"></text></g><g><title>_aligned_cast_longlong_to_float (lowlevel_strided_loops.c.src:816) (3 samples, 0.10%)</title><rect x="684" y="500" width="1" height="15" fill="rgb(218,55,37)"/><text x="687.00" y="510.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (36 samples, 1.24%)</title><rect x="671" y="436" width="14" height="15" fill="rgb(229,86,28)"/><text x="674.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (28 samples, 0.96%)</title><rect x="674" y="452" width="11" height="15" fill="rgb(230,17,5)"/><text x="677.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (3 samples, 0.10%)</title><rect x="686" y="452" width="1" height="15" fill="rgb(224,111,9)"/><text x="689.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1187) (3 samples, 0.10%)</title><rect x="688" y="468" width="1" height="15" fill="rgb(215,5,42)"/><text x="691.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (7 samples, 0.24%)</title><rect x="688" y="452" width="3" height="15" fill="rgb(209,122,22)"/><text x="691.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (3 samples, 0.10%)</title><rect x="689" y="468" width="2" height="15" fill="rgb(207,48,9)"/><text x="692.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (9 samples, 0.31%)</title><rect x="691" y="452" width="4" height="15" fill="rgb(248,159,20)"/><text x="694.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:319) (3 samples, 0.10%)</title><rect x="695" y="452" width="1" height="15" fill="rgb(206,222,28)"/><text x="698.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (7 samples, 0.24%)</title><rect x="696" y="452" width="3" height="15" fill="rgb(245,53,53)"/><text x="699.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (5 samples, 0.17%)</title><rect x="699" y="452" width="2" height="15" fill="rgb(223,153,41)"/><text x="702.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (4 samples, 0.14%)</title><rect x="701" y="452" width="2" height="15" fill="rgb(254,98,47)"/><text x="704.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (49 samples, 1.68%)</title><rect x="685" y="436" width="20" height="15" fill="rgb(211,57,26)"/><text x="688.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (5 samples, 0.17%)</title><rect x="703" y="452" width="2" height="15" fill="rgb(225,187,4)"/><text x="706.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:550) (3 samples, 0.10%)</title><rect x="705" y="436" width="1" height="15" fill="rgb(249,200,46)"/><text x="708.00" y="446.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (3 samples, 0.10%)</title><rect x="705" y="452" width="1" height="15" fill="rgb(230,15,44)"/><text x="708.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3486) (5 samples, 0.17%)</title><rect x="708" y="452" width="2" height="15" fill="rgb(235,69,35)"/><text x="711.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1741) (4 samples, 0.14%)</title><rect x="710" y="468" width="2" height="15" fill="rgb(213,204,36)"/><text x="713.00" y="478.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (9 samples, 0.31%)</title><rect x="710" y="452" width="4" height="15" fill="rgb(242,49,36)"/><text x="713.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:255) (4 samples, 0.14%)</title><rect x="712" y="468" width="2" height="15" fill="rgb(208,6,52)"/><text x="715.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (18 samples, 0.62%)</title><rect x="707" y="436" width="7" height="15" fill="rgb(242,228,29)"/><text x="710.00" y="446.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (3 samples, 0.10%)</title><rect x="715" y="452" width="1" height="15" fill="rgb(254,210,18)"/><text x="718.00" y="462.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.10%)</title><rect x="715" y="468" width="1" height="15" fill="rgb(230,145,47)"/><text x="718.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (6 samples, 0.21%)</title><rect x="715" y="436" width="2" height="15" fill="rgb(210,101,11)"/><text x="718.00" y="446.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (3 samples, 0.10%)</title><rect x="716" y="452" width="1" height="15" fill="rgb(210,168,26)"/><text x="719.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (180 samples, 6.18%)</title><rect x="645" y="404" width="73" height="15" fill="rgb(211,104,30)"/><text x="648.00" y="414.50">PyUFunc_..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (158 samples, 5.43%)</title><rect x="654" y="420" width="64" height="15" fill="rgb(213,38,44)"/><text x="657.00" y="430.50">PyUFunc..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (225 samples, 7.73%)</title><rect x="627" y="388" width="91" height="15" fill="rgb(221,113,10)"/><text x="630.00" y="398.50">ufunc_redu..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (406 samples, 13.95%)</title><rect x="554" y="340" width="165" height="15" fill="rgb(224,156,13)"/><text x="557.00" y="350.50">array_implement_array..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (376 samples, 12.92%)</title><rect x="566" y="356" width="153" height="15" fill="rgb(224,61,54)"/><text x="569.00" y="366.50">sum (numpy/core/fro..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (264 samples, 9.07%)</title><rect x="612" y="372" width="107" height="15" fill="rgb(236,222,50)"/><text x="615.00" y="382.50">_wrapreductio..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (792 samples, 27.21%)</title><rect x="400" y="292" width="321" height="15" fill="rgb(253,110,39)"/><text x="403.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py:269)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (512 samples, 17.59%)</title><rect x="513" y="308" width="208" height="15" fill="rgb(240,78,20)"/><text x="516.00" y="318.50">_run (mlprodict/onnxrt/ops_..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (432 samples, 14.84%)</title><rect x="546" y="324" width="175" height="15" fill="rgb(251,185,4)"/><text x="549.00" y="334.50">sum (&lt;__array_function..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:321) (3 samples, 0.10%)</title><rect x="720" y="340" width="1" height="15" fill="rgb(241,20,25)"/><text x="723.00" y="350.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (823 samples, 28.27%)</title><rect x="389" y="276" width="333" height="15" fill="rgb(222,44,25)"/><text x="392.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py:348)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:274) (3 samples, 0.10%)</title><rect x="721" y="292" width="1" height="15" fill="rgb(241,120,50)"/><text x="724.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (49 samples, 1.68%)</title><rect x="722" y="276" width="20" height="15" fill="rgb(235,120,18)"/><text x="725.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:353) (4 samples, 0.14%)</title><rect x="742" y="276" width="2" height="15" fill="rgb(231,103,28)"/><text x="745.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (10 samples, 0.34%)</title><rect x="747" y="292" width="4" height="15" fill="rgb(219,98,32)"/><text x="750.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:431) (3 samples, 0.10%)</title><rect x="751" y="292" width="2" height="15" fill="rgb(228,174,44)"/><text x="754.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:519) (4 samples, 0.14%)</title><rect x="755" y="308" width="2" height="15" fill="rgb(249,161,41)"/><text x="758.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:527) (6 samples, 0.21%)</title><rect x="757" y="308" width="2" height="15" fill="rgb(235,88,33)"/><text x="760.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4716) (3 samples, 0.10%)</title><rect x="762" y="324" width="1" height="15" fill="rgb(228,130,37)"/><text x="765.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (5 samples, 0.17%)</title><rect x="763" y="340" width="2" height="15" fill="rgb(236,180,5)"/><text x="766.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (7 samples, 0.24%)</title><rect x="763" y="324" width="3" height="15" fill="rgb(245,53,15)"/><text x="766.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (3 samples, 0.10%)</title><rect x="766" y="340" width="2" height="15" fill="rgb(210,223,35)"/><text x="769.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3171) (3 samples, 0.10%)</title><rect x="768" y="340" width="1" height="15" fill="rgb(240,43,20)"/><text x="771.00" y="350.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (12 samples, 0.41%)</title><rect x="769" y="372" width="5" height="15" fill="rgb(217,90,40)"/><text x="772.00" y="382.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1905) (5 samples, 0.17%)</title><rect x="772" y="388" width="2" height="15" fill="rgb(217,123,50)"/><text x="775.00" y="398.50"></text></g><g><title>promote_types (convert_datatype.c:1043) (5 samples, 0.17%)</title><rect x="772" y="404" width="2" height="15" fill="rgb(224,61,3)"/><text x="775.00" y="414.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c:1070) (3 samples, 0.10%)</title><rect x="773" y="420" width="1" height="15" fill="rgb(214,220,28)"/><text x="776.00" y="430.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (14 samples, 0.48%)</title><rect x="769" y="340" width="5" height="15" fill="rgb(246,6,16)"/><text x="772.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (13 samples, 0.45%)</title><rect x="769" y="356" width="5" height="15" fill="rgb(220,181,23)"/><text x="772.00" y="366.50"></text></g><g><title>_find_array_prepare (ufunc_object.c:272) (3 samples, 0.10%)</title><rect x="776" y="356" width="1" height="15" fill="rgb(224,7,34)"/><text x="779.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (7 samples, 0.24%)</title><rect x="776" y="340" width="3" height="15" fill="rgb(215,78,34)"/><text x="779.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (4 samples, 0.14%)</title><rect x="784" y="388" width="2" height="15" fill="rgb(217,149,14)"/><text x="787.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.14%)</title><rect x="784" y="404" width="2" height="15" fill="rgb(230,101,31)"/><text x="787.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (6 samples, 0.21%)</title><rect x="786" y="388" width="2" height="15" fill="rgb(212,163,26)"/><text x="789.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (3 samples, 0.10%)</title><rect x="787" y="404" width="1" height="15" fill="rgb(240,227,48)"/><text x="790.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (11 samples, 0.38%)</title><rect x="789" y="388" width="4" height="15" fill="rgb(230,14,37)"/><text x="792.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:390) (3 samples, 0.10%)</title><rect x="793" y="388" width="2" height="15" fill="rgb(227,177,44)"/><text x="796.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.10%)</title><rect x="798" y="452" width="1" height="15" fill="rgb(234,80,37)"/><text x="801.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (3 samples, 0.10%)</title><rect x="800" y="452" width="1" height="15" fill="rgb(220,177,18)"/><text x="803.00" y="462.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (13 samples, 0.45%)</title><rect x="797" y="420" width="5" height="15" fill="rgb(206,115,37)"/><text x="800.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (12 samples, 0.41%)</title><rect x="798" y="436" width="4" height="15" fill="rgb(236,21,14)"/><text x="801.00" y="446.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (18 samples, 0.62%)</title><rect x="795" y="404" width="8" height="15" fill="rgb(209,89,35)"/><text x="798.00" y="414.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2995) (4 samples, 0.14%)</title><rect x="804" y="404" width="1" height="15" fill="rgb(220,41,20)"/><text x="807.00" y="414.50"></text></g><g><title>IsUintAligned (array_assign.c:148) (4 samples, 0.14%)</title><rect x="804" y="420" width="1" height="15" fill="rgb(227,58,46)"/><text x="807.00" y="430.50"></text></g><g><title>npy_uint_alignment (common.h:216) (4 samples, 0.14%)</title><rect x="804" y="436" width="1" height="15" fill="rgb(215,171,24)"/><text x="807.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (32 samples, 1.10%)</title><rect x="795" y="388" width="13" height="15" fill="rgb(253,99,3)"/><text x="798.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (67 samples, 2.30%)</title><rect x="783" y="372" width="27" height="15" fill="rgb(206,70,49)"/><text x="786.00" y="382.50">i..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (3 samples, 0.10%)</title><rect x="808" y="388" width="2" height="15" fill="rgb(220,178,46)"/><text x="811.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2032) (3 samples, 0.10%)</title><rect x="813" y="404" width="2" height="15" fill="rgb(249,124,12)"/><text x="816.00" y="414.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (14 samples, 0.48%)</title><rect x="811" y="372" width="6" height="15" fill="rgb(207,227,15)"/><text x="814.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (8 samples, 0.27%)</title><rect x="813" y="388" width="4" height="15" fill="rgb(243,146,4)"/><text x="816.00" y="398.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (4 samples, 0.14%)</title><rect x="817" y="388" width="2" height="15" fill="rgb(233,105,47)"/><text x="820.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (8 samples, 0.27%)</title><rect x="817" y="372" width="3" height="15" fill="rgb(223,85,39)"/><text x="820.00" y="382.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:309) (3 samples, 0.10%)</title><rect x="819" y="388" width="1" height="15" fill="rgb(249,160,3)"/><text x="822.00" y="398.50"></text></g><g><title>0x7f790ebed902 (libc-2.29.so) (4 samples, 0.14%)</title><rect x="821" y="404" width="2" height="15" fill="rgb(217,148,5)"/><text x="824.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (104 samples, 3.57%)</title><rect x="781" y="356" width="42" height="15" fill="rgb(248,121,29)"/><text x="784.00" y="366.50">exe..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (7 samples, 0.24%)</title><rect x="820" y="372" width="3" height="15" fill="rgb(253,137,50)"/><text x="823.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (5 samples, 0.17%)</title><rect x="821" y="388" width="2" height="15" fill="rgb(209,40,45)"/><text x="824.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (113 samples, 3.88%)</title><rect x="779" y="340" width="46" height="15" fill="rgb(212,92,12)"/><text x="782.00" y="350.50">PyUF..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (147 samples, 5.05%)</title><rect x="766" y="324" width="59" height="15" fill="rgb(253,214,50)"/><text x="769.00" y="334.50">ufunc_..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (207 samples, 7.11%)</title><rect x="744" y="276" width="84" height="15" fill="rgb(212,124,24)"/><text x="747.00" y="286.50">run (mlpr..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (186 samples, 6.39%)</title><rect x="753" y="292" width="75" height="15" fill="rgb(236,72,36)"/><text x="756.00" y="302.50">run (mlp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (169 samples, 5.81%)</title><rect x="759" y="308" width="69" height="15" fill="rgb(241,48,52)"/><text x="762.00" y="318.50">_run (m..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,186 samples, 40.74%)</title><rect x="351" y="260" width="481" height="15" fill="rgb(211,79,41)"/><text x="354.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (10 samples, 0.34%)</title><rect x="828" y="276" width="4" height="15" fill="rgb(250,145,12)"/><text x="831.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (29 samples, 1.00%)</title><rect x="832" y="260" width="12" height="15" fill="rgb(250,28,38)"/><text x="835.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (58 samples, 1.99%)</title><rect x="844" y="260" width="23" height="15" fill="rgb(232,108,33)"/><text x="847.00" y="270.50">r..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (19 samples, 0.65%)</title><rect x="867" y="260" width="8" height="15" fill="rgb(211,151,19)"/><text x="870.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (101 samples, 3.47%)</title><rect x="875" y="260" width="41" height="15" fill="rgb(208,87,49)"/><text x="878.00" y="270.50">run..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,688 samples, 57.99%)</title><rect x="245" y="244" width="684" height="15" fill="rgb(223,200,0)"/><text x="248.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (32 samples, 1.10%)</title><rect x="916" y="260" width="13" height="15" fill="rgb(234,192,48)"/><text x="919.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:534) (3 samples, 0.10%)</title><rect x="929" y="244" width="1" height="15" fill="rgb(240,15,26)"/><text x="932.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (48 samples, 1.65%)</title><rect x="930" y="244" width="20" height="15" fill="rgb(254,54,11)"/><text x="933.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (20 samples, 0.69%)</title><rect x="941" y="260" width="9" height="15" fill="rgb(228,91,50)"/><text x="944.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (9 samples, 0.31%)</title><rect x="951" y="244" width="3" height="15" fill="rgb(223,19,41)"/><text x="954.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (7 samples, 0.24%)</title><rect x="952" y="260" width="2" height="15" fill="rgb(247,28,8)"/><text x="955.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (4 samples, 0.14%)</title><rect x="953" y="276" width="1" height="15" fill="rgb(237,129,31)"/><text x="956.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (1,923 samples, 66.06%)</title><rect x="176" y="212" width="779" height="15" fill="rgb(208,90,22)"/><text x="179.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,868 samples, 64.17%)</title><rect x="198" y="228" width="757" height="15" fill="rgb(251,142,53)"/><text x="201.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (28 samples, 0.96%)</title><rect x="955" y="212" width="12" height="15" fill="rgb(220,27,5)"/><text x="958.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (14 samples, 0.48%)</title><rect x="961" y="228" width="6" height="15" fill="rgb(238,209,50)"/><text x="964.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (16 samples, 0.55%)</title><rect x="967" y="212" width="6" height="15" fill="rgb(251,22,14)"/><text x="970.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (16 samples, 0.55%)</title><rect x="992" y="228" width="7" height="15" fill="rgb(240,212,41)"/><text x="995.00" y="238.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py:509) (3 samples, 0.10%)</title><rect x="998" y="244" width="1" height="15" fill="rgb(248,117,33)"/><text x="1001.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (15 samples, 0.52%)</title><rect x="1010" y="260" width="6" height="15" fill="rgb(208,23,35)"/><text x="1013.00" y="270.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1579) (3 samples, 0.10%)</title><rect x="1025" y="292" width="2" height="15" fill="rgb(220,165,27)"/><text x="1028.00" y="302.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (29 samples, 1.00%)</title><rect x="1016" y="260" width="12" height="15" fill="rgb(225,154,0)"/><text x="1019.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (21 samples, 0.72%)</title><rect x="1020" y="276" width="8" height="15" fill="rgb(250,119,44)"/><text x="1023.00" y="286.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c:1175) (4 samples, 0.14%)</title><rect x="1032" y="276" width="1" height="15" fill="rgb(233,75,37)"/><text x="1035.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:576) (16 samples, 0.55%)</title><rect x="1028" y="260" width="7" height="15" fill="rgb(247,120,14)"/><text x="1031.00" y="270.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c:1184) (3 samples, 0.10%)</title><rect x="1033" y="276" width="2" height="15" fill="rgb(236,33,26)"/><text x="1036.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (13 samples, 0.45%)</title><rect x="1035" y="260" width="5" height="15" fill="rgb(222,157,0)"/><text x="1038.00" y="270.50"></text></g><g><title>array_reshape (methods.c:179) (3 samples, 0.10%)</title><rect x="1055" y="276" width="1" height="15" fill="rgb(230,123,11)"/><text x="1058.00" y="286.50"></text></g><g><title>array_reshape (methods.c:186) (11 samples, 0.38%)</title><rect x="1056" y="276" width="5" height="15" fill="rgb(223,164,38)"/><text x="1059.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:53) (9 samples, 0.31%)</title><rect x="1057" y="292" width="4" height="15" fill="rgb(229,188,9)"/><text x="1060.00" y="302.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:125) (3 samples, 0.10%)</title><rect x="1064" y="292" width="1" height="15" fill="rgb(211,81,38)"/><text x="1067.00" y="302.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:156) (3 samples, 0.10%)</title><rect x="1064" y="308" width="1" height="15" fill="rgb(217,204,14)"/><text x="1067.00" y="318.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (4 samples, 0.14%)</title><rect x="1065" y="292" width="2" height="15" fill="rgb(228,186,0)"/><text x="1068.00" y="302.50"></text></g><g><title>array_reshape (methods.c:195) (17 samples, 0.58%)</title><rect x="1061" y="276" width="6" height="15" fill="rgb(251,110,46)"/><text x="1064.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1052) (3 samples, 0.10%)</title><rect x="1071" y="324" width="1" height="15" fill="rgb(244,152,40)"/><text x="1074.00" y="334.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (13 samples, 0.45%)</title><rect x="1069" y="308" width="5" height="15" fill="rgb(234,138,54)"/><text x="1072.00" y="318.50"></text></g><g><title>array_reshape (methods.c:210) (18 samples, 0.62%)</title><rect x="1067" y="276" width="8" height="15" fill="rgb(232,149,8)"/><text x="1070.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (18 samples, 0.62%)</title><rect x="1067" y="292" width="8" height="15" fill="rgb(235,143,54)"/><text x="1070.00" y="302.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (173 samples, 5.94%)</title><rect x="1005" y="244" width="70" height="15" fill="rgb(224,208,29)"/><text x="1008.00" y="254.50">array_i..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (86 samples, 2.95%)</title><rect x="1040" y="260" width="35" height="15" fill="rgb(228,205,0)"/><text x="1043.00" y="270.50">ex..</text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (187 samples, 6.42%)</title><rect x="1000" y="228" width="76" height="15" fill="rgb(250,214,5)"/><text x="1003.00" y="238.50">expand_d..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (254 samples, 8.73%)</title><rect x="973" y="212" width="103" height="15" fill="rgb(228,153,40)"/><text x="976.00" y="222.50">_run (mlprod..</text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (15 samples, 0.52%)</title><rect x="1080" y="308" width="6" height="15" fill="rgb(220,119,26)"/><text x="1083.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (6 samples, 0.21%)</title><rect x="1084" y="324" width="2" height="15" fill="rgb(228,47,9)"/><text x="1087.00" y="334.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (24 samples, 0.82%)</title><rect x="1078" y="260" width="10" height="15" fill="rgb(249,194,11)"/><text x="1081.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (22 samples, 0.76%)</title><rect x="1079" y="276" width="9" height="15" fill="rgb(246,177,19)"/><text x="1082.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (21 samples, 0.72%)</title><rect x="1080" y="292" width="8" height="15" fill="rgb(241,74,16)"/><text x="1083.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:129) (4 samples, 0.14%)</title><rect x="1087" y="308" width="1" height="15" fill="rgb(227,201,40)"/><text x="1090.00" y="318.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (3 samples, 0.10%)</title><rect x="1090" y="372" width="1" height="15" fill="rgb(217,99,38)"/><text x="1093.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (39 samples, 1.34%)</title><rect x="1076" y="212" width="16" height="15" fill="rgb(247,133,51)"/><text x="1079.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (35 samples, 1.20%)</title><rect x="1078" y="228" width="14" height="15" fill="rgb(253,196,50)"/><text x="1081.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (34 samples, 1.17%)</title><rect x="1078" y="244" width="14" height="15" fill="rgb(248,131,3)"/><text x="1081.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (9 samples, 0.31%)</title><rect x="1088" y="260" width="4" height="15" fill="rgb(248,33,53)"/><text x="1091.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (9 samples, 0.31%)</title><rect x="1088" y="276" width="4" height="15" fill="rgb(235,209,41)"/><text x="1091.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (9 samples, 0.31%)</title><rect x="1088" y="292" width="4" height="15" fill="rgb(244,69,54)"/><text x="1091.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (9 samples, 0.31%)</title><rect x="1088" y="308" width="4" height="15" fill="rgb(247,52,30)"/><text x="1091.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (9 samples, 0.31%)</title><rect x="1088" y="324" width="4" height="15" fill="rgb(251,173,9)"/><text x="1091.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (6 samples, 0.21%)</title><rect x="1089" y="340" width="3" height="15" fill="rgb(218,197,26)"/><text x="1092.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (6 samples, 0.21%)</title><rect x="1089" y="356" width="3" height="15" fill="rgb(208,193,37)"/><text x="1092.00" y="366.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (7 samples, 0.24%)</title><rect x="1093" y="260" width="3" height="15" fill="rgb(239,124,47)"/><text x="1096.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.24%)</title><rect x="1093" y="276" width="3" height="15" fill="rgb(234,149,53)"/><text x="1096.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (7 samples, 0.24%)</title><rect x="1093" y="292" width="3" height="15" fill="rgb(234,223,19)"/><text x="1096.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (7 samples, 0.24%)</title><rect x="1093" y="308" width="3" height="15" fill="rgb(230,36,49)"/><text x="1096.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (6 samples, 0.21%)</title><rect x="1093" y="324" width="3" height="15" fill="rgb(251,105,27)"/><text x="1096.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (5 samples, 0.17%)</title><rect x="1094" y="340" width="2" height="15" fill="rgb(210,0,7)"/><text x="1097.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:997) (5 samples, 0.17%)</title><rect x="1094" y="356" width="2" height="15" fill="rgb(235,65,16)"/><text x="1097.00" y="366.50"></text></g><g><title>PyArray_IterAllButAxis (iterators.c:288) (5 samples, 0.17%)</title><rect x="1094" y="372" width="2" height="15" fill="rgb(227,202,3)"/><text x="1097.00" y="382.50"></text></g><g><title>PyArray_IterNew (iterators.c:183) (5 samples, 0.17%)</title><rect x="1094" y="388" width="2" height="15" fill="rgb(233,105,23)"/><text x="1097.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.17%)</title><rect x="1094" y="404" width="2" height="15" fill="rgb(212,164,40)"/><text x="1097.00" y="414.50"></text></g><g><title>0x7f790ebef028 (libc-2.29.so) (4 samples, 0.14%)</title><rect x="1094" y="420" width="2" height="15" fill="rgb(236,7,32)"/><text x="1097.00" y="430.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (8 samples, 0.27%)</title><rect x="1093" y="244" width="3" height="15" fill="rgb(250,207,13)"/><text x="1096.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.10%)</title><rect x="1097" y="260" width="1" height="15" fill="rgb(234,37,25)"/><text x="1100.00" y="270.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (7 samples, 0.24%)</title><rect x="1096" y="244" width="3" height="15" fill="rgb(238,222,6)"/><text x="1099.00" y="254.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (18 samples, 0.62%)</title><rect x="1093" y="228" width="7" height="15" fill="rgb(228,58,18)"/><text x="1096.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:39) (3 samples, 0.10%)</title><rect x="1099" y="244" width="1" height="15" fill="rgb(217,95,29)"/><text x="1102.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (20 samples, 0.69%)</title><rect x="1093" y="212" width="8" height="15" fill="rgb(250,151,9)"/><text x="1096.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (2,399 samples, 82.41%)</title><rect x="131" y="196" width="972" height="15" fill="rgb(238,100,54)"/><text x="134.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>array_dealloc (arrayobject.c:520) (3 samples, 0.10%)</title><rect x="1102" y="212" width="1" height="15" fill="rgb(242,120,9)"/><text x="1105.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py:24) (8 samples, 0.27%)</title><rect x="1104" y="212" width="3" height="15" fill="rgb(242,52,19)"/><text x="1107.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:6) (6 samples, 0.21%)</title><rect x="1104" y="228" width="3" height="15" fill="rgb(249,178,48)"/><text x="1107.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.21%)</title><rect x="1104" y="244" width="3" height="15" fill="rgb(226,118,4)"/><text x="1107.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py:2911) (6 samples, 0.21%)</title><rect x="1104" y="260" width="3" height="15" fill="rgb(207,100,39)"/><text x="1107.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (4 samples, 0.14%)</title><rect x="1105" y="276" width="2" height="15" fill="rgb(226,90,40)"/><text x="1108.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 0.14%)</title><rect x="1105" y="292" width="2" height="15" fill="rgb(246,138,23)"/><text x="1108.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (10 samples, 0.34%)</title><rect x="1103" y="196" width="4" height="15" fill="rgb(225,154,37)"/><text x="1106.00" y="206.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:13) (3 samples, 0.10%)</title><rect x="1108" y="260" width="1" height="15" fill="rgb(252,215,46)"/><text x="1111.00" y="270.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (3 samples, 0.10%)</title><rect x="1108" y="276" width="1" height="15" fill="rgb(219,147,50)"/><text x="1111.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.10%)</title><rect x="1108" y="292" width="1" height="15" fill="rgb(222,125,41)"/><text x="1111.00" y="302.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py:1153) (3 samples, 0.10%)</title><rect x="1108" y="308" width="1" height="15" fill="rgb(227,78,45)"/><text x="1111.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.10%)</title><rect x="1108" y="324" width="1" height="15" fill="rgb(216,25,39)"/><text x="1111.00" y="334.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:312) (6 samples, 0.21%)</title><rect x="1107" y="196" width="3" height="15" fill="rgb(231,108,21)"/><text x="1110.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (6 samples, 0.21%)</title><rect x="1107" y="212" width="3" height="15" fill="rgb(230,76,43)"/><text x="1110.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (6 samples, 0.21%)</title><rect x="1107" y="228" width="3" height="15" fill="rgb(215,176,54)"/><text x="1110.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (6 samples, 0.21%)</title><rect x="1107" y="244" width="3" height="15" fill="rgb(247,19,30)"/><text x="1110.00" y="254.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (3 samples, 0.10%)</title><rect x="1113" y="324" width="1" height="15" fill="rgb(220,23,7)"/><text x="1116.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (12 samples, 0.41%)</title><rect x="1110" y="228" width="5" height="15" fill="rgb(224,129,49)"/><text x="1113.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (12 samples, 0.41%)</title><rect x="1110" y="244" width="5" height="15" fill="rgb(218,86,49)"/><text x="1113.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (12 samples, 0.41%)</title><rect x="1110" y="260" width="5" height="15" fill="rgb(247,150,10)"/><text x="1113.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (12 samples, 0.41%)</title><rect x="1110" y="276" width="5" height="15" fill="rgb(246,75,45)"/><text x="1113.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (8 samples, 0.27%)</title><rect x="1112" y="292" width="3" height="15" fill="rgb(213,195,21)"/><text x="1115.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (6 samples, 0.21%)</title><rect x="1113" y="308" width="2" height="15" fill="rgb(211,139,28)"/><text x="1116.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (3 samples, 0.10%)</title><rect x="1114" y="324" width="1" height="15" fill="rgb(251,87,10)"/><text x="1117.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py:19) (4 samples, 0.14%)</title><rect x="1115" y="228" width="2" height="15" fill="rgb(249,106,32)"/><text x="1118.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 0.14%)</title><rect x="1115" y="244" width="2" height="15" fill="rgb(241,123,24)"/><text x="1118.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (19 samples, 0.65%)</title><rect x="1110" y="196" width="7" height="15" fill="rgb(223,199,21)"/><text x="1113.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (18 samples, 0.62%)</title><rect x="1110" y="212" width="7" height="15" fill="rgb(229,161,44)"/><text x="1113.00" y="222.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (4 samples, 0.14%)</title><rect x="1119" y="276" width="2" height="15" fill="rgb(219,104,28)"/><text x="1122.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 0.17%)</title><rect x="1119" y="260" width="2" height="15" fill="rgb(221,115,13)"/><text x="1122.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 0.21%)</title><rect x="1119" y="244" width="2" height="15" fill="rgb(214,148,18)"/><text x="1122.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (10 samples, 0.34%)</title><rect x="1118" y="196" width="4" height="15" fill="rgb(207,144,37)"/><text x="1121.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_equal.py:17) (10 samples, 0.34%)</title><rect x="1118" y="212" width="4" height="15" fill="rgb(246,87,6)"/><text x="1121.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (9 samples, 0.31%)</title><rect x="1118" y="228" width="4" height="15" fill="rgb(232,133,47)"/><text x="1121.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (2,455 samples, 84.34%)</title><rect x="128" y="180" width="995" height="15" fill="rgb(219,81,46)"/><text x="131.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (3 samples, 0.10%)</title><rect x="1122" y="196" width="1" height="15" fill="rgb(230,206,2)"/><text x="1125.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (3 samples, 0.10%)</title><rect x="1122" y="212" width="1" height="15" fill="rgb(243,156,42)"/><text x="1125.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_div.py:18) (3 samples, 0.10%)</title><rect x="1122" y="228" width="1" height="15" fill="rgb(214,4,23)"/><text x="1125.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (3 samples, 0.10%)</title><rect x="1123" y="180" width="2" height="15" fill="rgb(246,25,34)"/><text x="1126.00" y="190.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (7 samples, 0.24%)</title><rect x="1126" y="180" width="3" height="15" fill="rgb(235,222,52)"/><text x="1129.00" y="190.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (2,499 samples, 85.85%)</title><rect x="118" y="164" width="1013" height="15" fill="rgb(234,54,14)"/><text x="121.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (5 samples, 0.17%)</title><rect x="1129" y="180" width="2" height="15" fill="rgb(250,32,8)"/><text x="1132.00" y="190.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:45) (2,584 samples, 88.77%)</title><rect x="84" y="52" width="1048" height="15" fill="rgb(219,72,4)"/><text x="87.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:45)</text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:44) (2,584 samples, 88.77%)</title><rect x="84" y="68" width="1048" height="15" fill="rgb(234,183,50)"/><text x="87.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:44)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:29) (2,584 samples, 88.77%)</title><rect x="84" y="84" width="1048" height="15" fill="rgb(245,119,54)"/><text x="87.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:29)</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:23) (2,510 samples, 86.22%)</title><rect x="114" y="100" width="1018" height="15" fill="rgb(224,162,32)"/><text x="117.00" y="110.50">profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:23)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (2,507 samples, 86.12%)</title><rect x="116" y="116" width="1016" height="15" fill="rgb(221,16,18)"/><text x="119.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (2,507 samples, 86.12%)</title><rect x="116" y="132" width="1016" height="15" fill="rgb(207,104,42)"/><text x="119.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,505 samples, 86.05%)</title><rect x="117" y="148" width="1015" height="15" fill="rgb(224,14,3)"/><text x="120.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (3 samples, 0.10%)</title><rect x="1131" y="164" width="1" height="15" fill="rgb(216,133,6)"/><text x="1134.00" y="174.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.17%)</title><rect x="1139" y="388" width="2" height="15" fill="rgb(217,37,12)"/><text x="1142.00" y="398.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkIterFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.17%)</title><rect x="1148" y="484" width="2" height="15" fill="rgb(218,125,32)"/><text x="1151.00" y="494.50"></text></g><g><title>std::_Rb_tree_rebalance_for_erase (libstdc++.so.6.0.28) (3 samples, 0.10%)</title><rect x="1149" y="500" width="1" height="15" fill="rgb(206,115,42)"/><text x="1152.00" y="510.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.31%)</title><rect x="1147" y="452" width="4" height="15" fill="rgb(206,16,30)"/><text x="1150.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.27%)</title><rect x="1147" y="468" width="4" height="15" fill="rgb(220,217,16)"/><text x="1150.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.17%)</title><rect x="1151" y="452" width="2" height="15" fill="rgb(243,40,7)"/><text x="1154.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.17%)</title><rect x="1151" y="468" width="2" height="15" fill="rgb(239,121,2)"/><text x="1154.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 0.55%)</title><rect x="1147" y="436" width="6" height="15" fill="rgb(220,169,46)"/><text x="1150.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::InsertFreeChunkIntoBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="1155" y="516" width="2" height="15" fill="rgb(241,113,11)"/><text x="1158.00" y="526.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::_M_insert_unique&lt;unsigned long const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1155" y="532" width="2" height="15" fill="rgb(208,96,8)"/><text x="1158.00" y="542.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.10%)</title><rect x="1155" y="548" width="2" height="15" fill="rgb(207,5,38)"/><text x="1158.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.10%)</title><rect x="1155" y="564" width="2" height="15" fill="rgb(217,45,48)"/><text x="1158.00" y="574.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.38%)</title><rect x="1153" y="436" width="5" height="15" fill="rgb(248,187,36)"/><text x="1156.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.34%)</title><rect x="1154" y="452" width="4" height="15" fill="rgb(212,172,24)"/><text x="1157.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.31%)</title><rect x="1154" y="468" width="4" height="15" fill="rgb(220,134,29)"/><text x="1157.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="1155" y="484" width="3" height="15" fill="rgb(223,119,43)"/><text x="1158.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="1155" y="500" width="3" height="15" fill="rgb(233,214,50)"/><text x="1158.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOutputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1158" y="436" width="1" height="15" fill="rgb(243,216,13)"/><text x="1161.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.17%)</title><rect x="1159" y="436" width="2" height="15" fill="rgb(238,81,27)"/><text x="1162.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.17%)</title><rect x="1159" y="452" width="2" height="15" fill="rgb(207,178,14)"/><text x="1162.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="1160" y="468" width="1" height="15" fill="rgb(252,162,46)"/><text x="1163.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="1162" y="452" width="2" height="15" fill="rgb(226,177,35)"/><text x="1165.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="1162" y="468" width="2" height="15" fill="rgb(228,61,40)"/><text x="1165.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.14%)</title><rect x="1162" y="484" width="2" height="15" fill="rgb(208,183,54)"/><text x="1165.00" y="494.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="1162" y="436" width="2" height="15" fill="rgb(222,150,9)"/><text x="1165.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1171" y="564" width="1" height="15" fill="rgb(249,3,36)"/><text x="1174.00" y="574.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="1171" y="532" width="3" height="15" fill="rgb(252,183,5)"/><text x="1174.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="1171" y="548" width="3" height="15" fill="rgb(228,168,31)"/><text x="1174.00" y="558.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.27%)</title><rect x="1171" y="468" width="3" height="15" fill="rgb(207,128,16)"/><text x="1174.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.27%)</title><rect x="1171" y="484" width="3" height="15" fill="rgb(224,226,52)"/><text x="1174.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.27%)</title><rect x="1171" y="500" width="3" height="15" fill="rgb(242,59,39)"/><text x="1174.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.27%)</title><rect x="1171" y="516" width="3" height="15" fill="rgb(238,101,25)"/><text x="1174.00" y="526.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (28 samples, 0.96%)</title><rect x="1165" y="436" width="12" height="15" fill="rgb(216,217,4)"/><text x="1168.00" y="446.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 0.86%)</title><rect x="1166" y="452" width="11" height="15" fill="rgb(239,211,35)"/><text x="1169.00" y="462.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1177" y="468" width="1" height="15" fill="rgb(216,50,46)"/><text x="1180.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.34%)</title><rect x="1179" y="468" width="4" height="15" fill="rgb(217,207,14)"/><text x="1182.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.34%)</title><rect x="1179" y="484" width="4" height="15" fill="rgb(214,4,2)"/><text x="1182.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.31%)</title><rect x="1180" y="500" width="3" height="15" fill="rgb(216,114,35)"/><text x="1183.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.31%)</title><rect x="1180" y="516" width="3" height="15" fill="rgb(219,207,54)"/><text x="1183.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="1181" y="532" width="2" height="15" fill="rgb(209,27,53)"/><text x="1184.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.24%)</title><rect x="1181" y="548" width="2" height="15" fill="rgb(206,175,14)"/><text x="1184.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1182" y="564" width="1" height="15" fill="rgb(208,153,21)"/><text x="1185.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.10%)</title><rect x="1182" y="580" width="1" height="15" fill="rgb(219,86,32)"/><text x="1185.00" y="590.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.17%)</title><rect x="1185" y="500" width="2" height="15" fill="rgb(254,187,35)"/><text x="1188.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.14%)</title><rect x="1185" y="516" width="2" height="15" fill="rgb(208,174,6)"/><text x="1188.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.14%)</title><rect x="1185" y="532" width="2" height="15" fill="rgb(248,148,43)"/><text x="1188.00" y="542.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (123 samples, 4.23%)</title><rect x="1138" y="340" width="49" height="15" fill="rgb(223,71,34)"/><text x="1141.00" y="350.50">onnx..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (123 samples, 4.23%)</title><rect x="1138" y="356" width="49" height="15" fill="rgb(210,115,22)"/><text x="1141.00" y="366.50">onnx..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (122 samples, 4.19%)</title><rect x="1138" y="372" width="49" height="15" fill="rgb(241,169,52)"/><text x="1141.00" y="382.50">onnx..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (109 samples, 3.74%)</title><rect x="1143" y="388" width="44" height="15" fill="rgb(244,45,11)"/><text x="1146.00" y="398.50">onnx..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (109 samples, 3.74%)</title><rect x="1143" y="404" width="44" height="15" fill="rgb(237,62,18)"/><text x="1146.00" y="414.50">onnx..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (106 samples, 3.64%)</title><rect x="1145" y="420" width="42" height="15" fill="rgb(246,79,43)"/><text x="1148.00" y="430.50">onn..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 0.93%)</title><rect x="1177" y="436" width="10" height="15" fill="rgb(218,36,26)"/><text x="1180.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 0.89%)</title><rect x="1177" y="452" width="10" height="15" fill="rgb(213,77,20)"/><text x="1180.00" y="462.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.34%)</title><rect x="1183" y="468" width="4" height="15" fill="rgb(250,96,32)"/><text x="1186.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.31%)</title><rect x="1184" y="484" width="3" height="15" fill="rgb(213,55,4)"/><text x="1187.00" y="494.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (132 samples, 4.53%)</title><rect x="1135" y="260" width="53" height="15" fill="rgb(217,222,29)"/><text x="1138.00" y="270.50">onnxr..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (132 samples, 4.53%)</title><rect x="1135" y="276" width="53" height="15" fill="rgb(242,66,27)"/><text x="1138.00" y="286.50">onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (132 samples, 4.53%)</title><rect x="1135" y="292" width="53" height="15" fill="rgb(216,61,39)"/><text x="1138.00" y="302.50">onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (132 samples, 4.53%)</title><rect x="1135" y="308" width="53" height="15" fill="rgb(235,216,12)"/><text x="1138.00" y="318.50">onnxr..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (132 samples, 4.53%)</title><rect x="1135" y="324" width="53" height="15" fill="rgb(254,27,0)"/><text x="1138.00" y="334.50">onnxr..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (139 samples, 4.77%)</title><rect x="1133" y="164" width="56" height="15" fill="rgb(243,9,4)"/><text x="1136.00" y="174.50">_run_..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (138 samples, 4.74%)</title><rect x="1133" y="180" width="56" height="15" fill="rgb(229,173,30)"/><text x="1136.00" y="190.50">run (..</text></g><g><title>run (onnxruntime/capi/session.py:136) (135 samples, 4.64%)</title><rect x="1134" y="196" width="55" height="15" fill="rgb(229,61,12)"/><text x="1137.00" y="206.50">run (..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (134 samples, 4.60%)</title><rect x="1135" y="212" width="54" height="15" fill="rgb(218,221,54)"/><text x="1138.00" y="222.50">pybin..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (134 samples, 4.60%)</title><rect x="1135" y="228" width="54" height="15" fill="rgb(215,192,20)"/><text x="1138.00" y="238.50">void ..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (134 samples, 4.60%)</title><rect x="1135" y="244" width="54" height="15" fill="rgb(228,153,49)"/><text x="1138.00" y="254.50">onnxr..</text></g><g><title>all (2,911 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(239,194,31)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:52) (142 samples, 4.88%)</title><rect x="1132" y="52" width="58" height="15" fill="rgb(209,179,54)"/><text x="1135.00" y="62.50">&lt;modul..</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:51) (142 samples, 4.88%)</title><rect x="1132" y="68" width="58" height="15" fill="rgb(222,60,37)"/><text x="1135.00" y="78.50">profil..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:29) (142 samples, 4.88%)</title><rect x="1132" y="84" width="58" height="15" fill="rgb(236,173,42)"/><text x="1135.00" y="94.50">setup_..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_4_12_float_.py:23) (140 samples, 4.81%)</title><rect x="1133" y="100" width="57" height="15" fill="rgb(243,125,24)"/><text x="1136.00" y="110.50">profil..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (140 samples, 4.81%)</title><rect x="1133" y="116" width="57" height="15" fill="rgb(254,90,42)"/><text x="1136.00" y="126.50">time_p..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (140 samples, 4.81%)</title><rect x="1133" y="132" width="57" height="15" fill="rgb(253,74,53)"/><text x="1136.00" y="142.50">&lt;lambd..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (140 samples, 4.81%)</title><rect x="1133" y="148" width="57" height="15" fill="rgb(237,9,27)"/><text x="1136.00" y="158.50">run (m..</text></g></g></svg>