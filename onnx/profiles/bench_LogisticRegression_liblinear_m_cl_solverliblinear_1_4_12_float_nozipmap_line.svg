<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="885.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="885.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_m_cl_solverliblinear.py:2) (5 samples, 1.58%)</title><rect x="0.9494%" y="148" width="1.5823%" height="15" fill="rgb(227,0,7)"/><text x="1.1994%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="0.9494%" y="164" width="1.5823%" height="15" fill="rgb(217,0,24)"/><text x="1.1994%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.58%)</title><rect x="0.9494%" y="180" width="1.5823%" height="15" fill="rgb(221,193,54)"/><text x="1.1994%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="0.9494%" y="196" width="1.5823%" height="15" fill="rgb(248,212,6)"/><text x="1.1994%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="0.9494%" y="212" width="1.5823%" height="15" fill="rgb(208,68,35)"/><text x="1.1994%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="0.9494%" y="228" width="1.5823%" height="15" fill="rgb(232,128,0)"/><text x="1.1994%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="0.9494%" y="244" width="1.5823%" height="15" fill="rgb(207,160,47)"/><text x="1.1994%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="0.9494%" y="260" width="1.5823%" height="15" fill="rgb(228,23,34)"/><text x="1.1994%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="0.9494%" y="276" width="1.5823%" height="15" fill="rgb(218,30,26)"/><text x="1.1994%" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (5 samples, 1.58%)</title><rect x="0.9494%" y="292" width="1.5823%" height="15" fill="rgb(220,122,19)"/><text x="1.1994%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="0.9494%" y="308" width="1.5823%" height="15" fill="rgb(250,228,42)"/><text x="1.1994%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="0.9494%" y="324" width="1.5823%" height="15" fill="rgb(240,193,28)"/><text x="1.1994%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="0.9494%" y="340" width="1.5823%" height="15" fill="rgb(216,20,37)"/><text x="1.1994%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="0.9494%" y="356" width="1.5823%" height="15" fill="rgb(206,188,39)"/><text x="1.1994%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="0.9494%" y="372" width="1.5823%" height="15" fill="rgb(217,207,13)"/><text x="1.1994%" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (5 samples, 1.58%)</title><rect x="0.9494%" y="388" width="1.5823%" height="15" fill="rgb(231,73,38)"/><text x="1.1994%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="0.9494%" y="404" width="1.5823%" height="15" fill="rgb(225,20,46)"/><text x="1.1994%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="0.9494%" y="420" width="1.5823%" height="15" fill="rgb(210,31,41)"/><text x="1.1994%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="0.9494%" y="436" width="1.5823%" height="15" fill="rgb(221,200,47)"/><text x="1.1994%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="0.9494%" y="452" width="1.5823%" height="15" fill="rgb(226,26,5)"/><text x="1.1994%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="0.9494%" y="468" width="1.5823%" height="15" fill="rgb(249,33,26)"/><text x="1.1994%" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (5 samples, 1.58%)</title><rect x="0.9494%" y="484" width="1.5823%" height="15" fill="rgb(235,183,28)"/><text x="1.1994%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="0.9494%" y="500" width="1.5823%" height="15" fill="rgb(221,5,38)"/><text x="1.1994%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="0.9494%" y="516" width="1.5823%" height="15" fill="rgb(247,18,42)"/><text x="1.1994%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="0.9494%" y="532" width="1.5823%" height="15" fill="rgb(241,131,45)"/><text x="1.1994%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="0.9494%" y="548" width="1.5823%" height="15" fill="rgb(249,31,29)"/><text x="1.1994%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="0.9494%" y="564" width="1.5823%" height="15" fill="rgb(225,111,53)"/><text x="1.1994%" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (5 samples, 1.58%)</title><rect x="0.9494%" y="580" width="1.5823%" height="15" fill="rgb(238,160,17)"/><text x="1.1994%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="0.9494%" y="596" width="1.5823%" height="15" fill="rgb(214,148,48)"/><text x="1.1994%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.58%)</title><rect x="0.9494%" y="612" width="1.5823%" height="15" fill="rgb(232,36,49)"/><text x="1.1994%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="0.9494%" y="628" width="1.5823%" height="15" fill="rgb(209,103,24)"/><text x="1.1994%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="0.9494%" y="644" width="1.5823%" height="15" fill="rgb(229,88,8)"/><text x="1.1994%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="0.9494%" y="660" width="1.5823%" height="15" fill="rgb(213,181,19)"/><text x="1.1994%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="0.9494%" y="676" width="1.5823%" height="15" fill="rgb(254,191,54)"/><text x="1.1994%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="0.9494%" y="692" width="1.5823%" height="15" fill="rgb(241,83,37)"/><text x="1.1994%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="0.9494%" y="708" width="1.5823%" height="15" fill="rgb(233,36,39)"/><text x="1.1994%" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (5 samples, 1.58%)</title><rect x="0.9494%" y="724" width="1.5823%" height="15" fill="rgb(226,3,54)"/><text x="1.1994%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="0.9494%" y="740" width="1.5823%" height="15" fill="rgb(245,192,40)"/><text x="1.1994%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="0.9494%" y="756" width="1.5823%" height="15" fill="rgb(238,167,29)"/><text x="1.1994%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="0.9494%" y="772" width="1.5823%" height="15" fill="rgb(232,182,51)"/><text x="1.1994%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="0.9494%" y="788" width="1.5823%" height="15" fill="rgb(231,60,39)"/><text x="1.1994%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="0.9494%" y="804" width="1.5823%" height="15" fill="rgb(208,69,12)"/><text x="1.1994%" y="814.50"></text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_m_cl_solverliblinear.py:4) (5 samples, 1.58%)</title><rect x="2.5316%" y="148" width="1.5823%" height="15" fill="rgb(235,93,37)"/><text x="2.7816%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="2.5316%" y="164" width="1.5823%" height="15" fill="rgb(213,116,39)"/><text x="2.7816%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.58%)</title><rect x="2.5316%" y="180" width="1.5823%" height="15" fill="rgb(222,207,29)"/><text x="2.7816%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="2.5316%" y="196" width="1.5823%" height="15" fill="rgb(206,96,30)"/><text x="2.7816%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="2.5316%" y="212" width="1.5823%" height="15" fill="rgb(218,138,4)"/><text x="2.7816%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="2.5316%" y="228" width="1.5823%" height="15" fill="rgb(250,191,14)"/><text x="2.7816%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="2.5316%" y="244" width="1.5823%" height="15" fill="rgb(239,60,40)"/><text x="2.7816%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="2.5316%" y="260" width="1.5823%" height="15" fill="rgb(206,27,48)"/><text x="2.7816%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="2.5316%" y="276" width="1.5823%" height="15" fill="rgb(225,35,8)"/><text x="2.7816%" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:82) (5 samples, 1.58%)</title><rect x="2.5316%" y="292" width="1.5823%" height="15" fill="rgb(250,213,24)"/><text x="2.7816%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="2.5316%" y="308" width="1.5823%" height="15" fill="rgb(247,123,22)"/><text x="2.7816%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="2.5316%" y="324" width="1.5823%" height="15" fill="rgb(231,138,38)"/><text x="2.7816%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="2.5316%" y="340" width="1.5823%" height="15" fill="rgb(231,145,46)"/><text x="2.7816%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="2.5316%" y="356" width="1.5823%" height="15" fill="rgb(251,118,11)"/><text x="2.7816%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="2.5316%" y="372" width="1.5823%" height="15" fill="rgb(217,147,25)"/><text x="2.7816%" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (5 samples, 1.58%)</title><rect x="2.5316%" y="388" width="1.5823%" height="15" fill="rgb(247,81,37)"/><text x="2.7816%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="2.5316%" y="404" width="1.5823%" height="15" fill="rgb(209,12,38)"/><text x="2.7816%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="2.5316%" y="420" width="1.5823%" height="15" fill="rgb(227,1,9)"/><text x="2.7816%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="2.5316%" y="436" width="1.5823%" height="15" fill="rgb(248,47,43)"/><text x="2.7816%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="2.5316%" y="452" width="1.5823%" height="15" fill="rgb(221,10,30)"/><text x="2.7816%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="2.5316%" y="468" width="1.5823%" height="15" fill="rgb(210,229,1)"/><text x="2.7816%" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (5 samples, 1.58%)</title><rect x="5.0633%" y="436" width="1.5823%" height="15" fill="rgb(222,148,37)"/><text x="5.3133%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="5.0633%" y="452" width="1.5823%" height="15" fill="rgb(234,67,33)"/><text x="5.3133%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="5.0633%" y="468" width="1.5823%" height="15" fill="rgb(247,98,35)"/><text x="5.3133%" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="5.0633%" y="484" width="1.5823%" height="15" fill="rgb(247,138,52)"/><text x="5.3133%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="5.0633%" y="500" width="1.5823%" height="15" fill="rgb(213,79,30)"/><text x="5.3133%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="5.0633%" y="516" width="1.5823%" height="15" fill="rgb(246,177,23)"/><text x="5.3133%" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:13) (5 samples, 1.58%)</title><rect x="5.0633%" y="532" width="1.5823%" height="15" fill="rgb(230,62,27)"/><text x="5.3133%" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="5.0633%" y="548" width="1.5823%" height="15" fill="rgb(216,154,8)"/><text x="5.3133%" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="5.0633%" y="564" width="1.5823%" height="15" fill="rgb(244,35,45)"/><text x="5.3133%" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="5.0633%" y="580" width="1.5823%" height="15" fill="rgb(251,115,12)"/><text x="5.3133%" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="5.0633%" y="596" width="1.5823%" height="15" fill="rgb(240,54,50)"/><text x="5.3133%" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="5.0633%" y="612" width="1.5823%" height="15" fill="rgb(233,84,52)"/><text x="5.3133%" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (5 samples, 1.58%)</title><rect x="5.0633%" y="628" width="1.5823%" height="15" fill="rgb(207,117,47)"/><text x="5.3133%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.58%)</title><rect x="5.0633%" y="644" width="1.5823%" height="15" fill="rgb(249,43,39)"/><text x="5.3133%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.58%)</title><rect x="5.0633%" y="660" width="1.5823%" height="15" fill="rgb(209,38,44)"/><text x="5.3133%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.58%)</title><rect x="5.0633%" y="676" width="1.5823%" height="15" fill="rgb(236,212,23)"/><text x="5.3133%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.58%)</title><rect x="5.0633%" y="692" width="1.5823%" height="15" fill="rgb(242,79,21)"/><text x="5.3133%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.58%)</title><rect x="5.0633%" y="708" width="1.5823%" height="15" fill="rgb(211,96,35)"/><text x="5.3133%" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:5) (4 samples, 1.27%)</title><rect x="5.3797%" y="724" width="1.2658%" height="15" fill="rgb(253,215,40)"/><text x="5.6297%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.27%)</title><rect x="5.3797%" y="740" width="1.2658%" height="15" fill="rgb(211,81,21)"/><text x="5.6297%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 1.27%)</title><rect x="5.3797%" y="756" width="1.2658%" height="15" fill="rgb(208,190,38)"/><text x="5.6297%" y="766.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.27%)</title><rect x="5.3797%" y="772" width="1.2658%" height="15" fill="rgb(235,213,38)"/><text x="5.6297%" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.27%)</title><rect x="5.3797%" y="788" width="1.2658%" height="15" fill="rgb(237,122,38)"/><text x="5.6297%" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.27%)</title><rect x="5.3797%" y="804" width="1.2658%" height="15" fill="rgb(244,218,35)"/><text x="5.6297%" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.27%)</title><rect x="5.3797%" y="820" width="1.2658%" height="15" fill="rgb(240,68,47)"/><text x="5.6297%" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.27%)</title><rect x="5.3797%" y="836" width="1.2658%" height="15" fill="rgb(210,16,53)"/><text x="5.6297%" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.27%)</title><rect x="5.3797%" y="852" width="1.2658%" height="15" fill="rgb(235,124,12)"/><text x="5.6297%" y="862.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:4) (23 samples, 7.28%)</title><rect x="0.0000%" y="52" width="7.2785%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="62.50">&lt;module&gt; (..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (23 samples, 7.28%)</title><rect x="0.0000%" y="68" width="7.2785%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="78.50">_find_and_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (23 samples, 7.28%)</title><rect x="0.0000%" y="84" width="7.2785%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="94.50">_find_and_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (23 samples, 7.28%)</title><rect x="0.0000%" y="100" width="7.2785%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="110.50">_load_unlo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (23 samples, 7.28%)</title><rect x="0.0000%" y="116" width="7.2785%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="126.50">exec_modul..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (23 samples, 7.28%)</title><rect x="0.0000%" y="132" width="7.2785%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="142.50">_call_with..</text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_m_cl_solverliblinear.py:7) (10 samples, 3.16%)</title><rect x="4.1139%" y="148" width="3.1646%" height="15" fill="rgb(247,143,39)"/><text x="4.3639%" y="158.50">&lt;mo..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 3.16%)</title><rect x="4.1139%" y="164" width="3.1646%" height="15" fill="rgb(236,97,10)"/><text x="4.3639%" y="174.50">_fi..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 2.85%)</title><rect x="4.4304%" y="180" width="2.8481%" height="15" fill="rgb(233,208,19)"/><text x="4.6804%" y="190.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 2.85%)</title><rect x="4.4304%" y="196" width="2.8481%" height="15" fill="rgb(216,164,2)"/><text x="4.6804%" y="206.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 2.85%)</title><rect x="4.4304%" y="212" width="2.8481%" height="15" fill="rgb(220,129,5)"/><text x="4.6804%" y="222.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 2.85%)</title><rect x="4.4304%" y="228" width="2.8481%" height="15" fill="rgb(242,17,10)"/><text x="4.6804%" y="238.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (8 samples, 2.53%)</title><rect x="4.7468%" y="244" width="2.5316%" height="15" fill="rgb(242,107,0)"/><text x="4.9968%" y="254.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (8 samples, 2.53%)</title><rect x="4.7468%" y="260" width="2.5316%" height="15" fill="rgb(251,28,31)"/><text x="4.9968%" y="270.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (8 samples, 2.53%)</title><rect x="4.7468%" y="276" width="2.5316%" height="15" fill="rgb(233,223,10)"/><text x="4.9968%" y="286.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (8 samples, 2.53%)</title><rect x="4.7468%" y="292" width="2.5316%" height="15" fill="rgb(215,21,27)"/><text x="4.9968%" y="302.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (8 samples, 2.53%)</title><rect x="4.7468%" y="308" width="2.5316%" height="15" fill="rgb(232,23,21)"/><text x="4.9968%" y="318.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 2.53%)</title><rect x="4.7468%" y="324" width="2.5316%" height="15" fill="rgb(244,5,23)"/><text x="4.9968%" y="334.50">_c..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:27) (7 samples, 2.22%)</title><rect x="5.0633%" y="340" width="2.2152%" height="15" fill="rgb(226,81,46)"/><text x="5.3133%" y="350.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 2.22%)</title><rect x="5.0633%" y="356" width="2.2152%" height="15" fill="rgb(247,70,30)"/><text x="5.3133%" y="366.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 2.22%)</title><rect x="5.0633%" y="372" width="2.2152%" height="15" fill="rgb(212,68,19)"/><text x="5.3133%" y="382.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 2.22%)</title><rect x="5.0633%" y="388" width="2.2152%" height="15" fill="rgb(240,187,13)"/><text x="5.3133%" y="398.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 2.22%)</title><rect x="5.0633%" y="404" width="2.2152%" height="15" fill="rgb(223,113,26)"/><text x="5.3133%" y="414.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 2.22%)</title><rect x="5.0633%" y="420" width="2.2152%" height="15" fill="rgb(206,192,2)"/><text x="5.3133%" y="430.50">_..</text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py:1645) (9 samples, 2.85%)</title><rect x="9.4937%" y="148" width="2.8481%" height="15" fill="rgb(241,108,4)"/><text x="9.7437%" y="158.50">pr..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:963) (6 samples, 1.90%)</title><rect x="10.4430%" y="164" width="1.8987%" height="15" fill="rgb(247,173,49)"/><text x="10.6930%" y="174.50">c..</text></g><g><title>decision_function (sklearn/linear_model/_base.py:266) (10 samples, 3.16%)</title><rect x="14.8734%" y="180" width="3.1646%" height="15" fill="rgb(224,114,35)"/><text x="15.1234%" y="190.50">dec..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:963) (7 samples, 2.22%)</title><rect x="15.8228%" y="196" width="2.2152%" height="15" fill="rgb(245,159,27)"/><text x="16.0728%" y="206.50">c..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:964) (4 samples, 1.27%)</title><rect x="16.7722%" y="212" width="1.2658%" height="15" fill="rgb(245,172,44)"/><text x="17.0222%" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py:518) (8 samples, 2.53%)</title><rect x="19.3038%" y="196" width="2.5316%" height="15" fill="rgb(236,23,11)"/><text x="19.5538%" y="206.50">ch..</text></g><g><title>check_array (sklearn/utils/validation.py:520) (4 samples, 1.27%)</title><rect x="21.8354%" y="196" width="1.2658%" height="15" fill="rgb(205,117,38)"/><text x="22.0854%" y="206.50"></text></g><g><title>simplefilter (warnings.py:179) (4 samples, 1.27%)</title><rect x="21.8354%" y="212" width="1.2658%" height="15" fill="rgb(237,72,25)"/><text x="22.0854%" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py:531) (5 samples, 1.58%)</title><rect x="23.1013%" y="196" width="1.5823%" height="15" fill="rgb(244,70,9)"/><text x="23.3513%" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:534) (5 samples, 1.58%)</title><rect x="24.6835%" y="196" width="1.5823%" height="15" fill="rgb(217,125,39)"/><text x="24.9335%" y="206.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (9 samples, 2.85%)</title><rect x="28.1646%" y="212" width="2.8481%" height="15" fill="rgb(235,36,10)"/><text x="28.4146%" y="222.50">_a..</text></g><g><title>check_array (sklearn/utils/validation.py:578) (10 samples, 3.16%)</title><rect x="28.1646%" y="196" width="3.1646%" height="15" fill="rgb(251,123,47)"/><text x="28.4146%" y="206.50">che..</text></g><g><title>_num_samples (sklearn/utils/validation.py:138) (4 samples, 1.27%)</title><rect x="31.3291%" y="212" width="1.2658%" height="15" fill="rgb(221,13,13)"/><text x="31.5791%" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:149) (5 samples, 1.58%)</title><rect x="32.9114%" y="212" width="1.5823%" height="15" fill="rgb(238,131,9)"/><text x="33.1614%" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py:581) (14 samples, 4.43%)</title><rect x="31.3291%" y="196" width="4.4304%" height="15" fill="rgb(211,50,8)"/><text x="31.5791%" y="206.50">check..</text></g><g><title>_num_samples (sklearn/utils/validation.py:155) (4 samples, 1.27%)</title><rect x="34.4937%" y="212" width="1.2658%" height="15" fill="rgb(245,182,24)"/><text x="34.7437%" y="222.50"></text></g><g><title>decision_function (sklearn/linear_model/_base.py:268) (58 samples, 18.35%)</title><rect x="18.0380%" y="180" width="18.3544%" height="15" fill="rgb(242,14,37)"/><text x="18.2880%" y="190.50">decision_function (sklearn/li..</text></g><g><title>array_add (number.c:330) (9 samples, 2.85%)</title><rect x="37.3418%" y="196" width="2.8481%" height="15" fill="rgb(246,228,12)"/><text x="37.5918%" y="206.50">ar..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.27%)</title><rect x="38.9241%" y="212" width="1.2658%" height="15" fill="rgb(213,55,15)"/><text x="39.1741%" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (12 samples, 3.80%)</title><rect x="40.5063%" y="212" width="3.7975%" height="15" fill="rgb(209,9,3)"/><text x="40.7563%" y="222.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (12 samples, 3.80%)</title><rect x="40.5063%" y="228" width="3.7975%" height="15" fill="rgb(230,59,30)"/><text x="40.7563%" y="238.50">PyUF..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (14 samples, 4.43%)</title><rect x="40.1899%" y="196" width="4.4304%" height="15" fill="rgb(209,121,21)"/><text x="40.4399%" y="206.50">safe_..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:307) (97 samples, 30.70%)</title><rect x="14.2405%" y="164" width="30.6962%" height="15" fill="rgb(220,109,13)"/><text x="14.4905%" y="174.50">_predict_proba_lr (sklearn/linear_model/_base.py:3..</text></g><g><title>decision_function (sklearn/linear_model/_base.py:276) (24 samples, 7.59%)</title><rect x="37.3418%" y="180" width="7.5949%" height="15" fill="rgb(232,18,1)"/><text x="37.5918%" y="190.50">decision_f..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:308) (13 samples, 4.11%)</title><rect x="44.9367%" y="164" width="4.1139%" height="15" fill="rgb(215,41,42)"/><text x="45.1867%" y="174.50">_pre..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 3.16%)</title><rect x="45.8861%" y="180" width="3.1646%" height="15" fill="rgb(224,123,36)"/><text x="46.1361%" y="190.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (7 samples, 2.22%)</title><rect x="46.8354%" y="196" width="2.2152%" height="15" fill="rgb(240,125,3)"/><text x="47.0854%" y="206.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (4 samples, 1.27%)</title><rect x="47.7848%" y="212" width="1.2658%" height="15" fill="rgb(205,98,50)"/><text x="48.0348%" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (4 samples, 1.27%)</title><rect x="52.5316%" y="228" width="1.2658%" height="15" fill="rgb(205,185,37)"/><text x="52.7816%" y="238.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (4 samples, 1.27%)</title><rect x="52.5316%" y="244" width="1.2658%" height="15" fill="rgb(238,207,15)"/><text x="52.7816%" y="254.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (4 samples, 1.27%)</title><rect x="52.5316%" y="260" width="1.2658%" height="15" fill="rgb(213,199,42)"/><text x="52.7816%" y="270.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:37) (4 samples, 1.27%)</title><rect x="52.5316%" y="276" width="1.2658%" height="15" fill="rgb(235,201,11)"/><text x="52.7816%" y="286.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h:106) (4 samples, 1.27%)</title><rect x="52.5316%" y="292" width="1.2658%" height="15" fill="rgb(207,46,11)"/><text x="52.7816%" y="302.50"></text></g><g><title>array_sum (methods.c:2215) (18 samples, 5.70%)</title><rect x="51.8987%" y="180" width="5.6962%" height="15" fill="rgb(241,35,35)"/><text x="52.1487%" y="190.50">array_s..</text></g><g><title>forward_ndarray_method (methods.c:108) (18 samples, 5.70%)</title><rect x="51.8987%" y="196" width="5.6962%" height="15" fill="rgb(243,32,47)"/><text x="52.1487%" y="206.50">forward..</text></g><g><title>_sum (numpy/core/_methods.py:38) (17 samples, 5.38%)</title><rect x="52.2152%" y="212" width="5.3797%" height="15" fill="rgb(247,202,23)"/><text x="52.4652%" y="222.50">_sum (n..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (12 samples, 3.80%)</title><rect x="53.7975%" y="228" width="3.7975%" height="15" fill="rgb(219,102,11)"/><text x="54.0475%" y="238.50">ufun..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (8 samples, 2.53%)</title><rect x="55.0633%" y="244" width="2.5316%" height="15" fill="rgb(243,110,44)"/><text x="55.3133%" y="254.50">Py..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (7 samples, 2.22%)</title><rect x="55.3797%" y="260" width="2.2152%" height="15" fill="rgb(222,74,54)"/><text x="55.6297%" y="270.50">P..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 1.90%)</title><rect x="57.5949%" y="180" width="1.8987%" height="15" fill="rgb(216,99,12)"/><text x="57.8449%" y="190.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 1.27%)</title><rect x="58.2278%" y="196" width="1.2658%" height="15" fill="rgb(226,22,26)"/><text x="58.4778%" y="206.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:54) (166 samples, 52.53%)</title><rect x="7.2785%" y="52" width="52.5316%" height="15" fill="rgb(217,163,10)"/><text x="7.5285%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap..</text></g><g><title>profile_skl (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:53) (166 samples, 52.53%)</title><rect x="7.2785%" y="68" width="52.5316%" height="15" fill="rgb(213,25,53)"/><text x="7.5285%" y="78.50">profile_skl (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozip..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:37) (166 samples, 52.53%)</title><rect x="7.2785%" y="84" width="52.5316%" height="15" fill="rgb(252,105,26)"/><text x="7.5285%" y="94.50">setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_noz..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:31) (166 samples, 52.53%)</title><rect x="7.2785%" y="100" width="52.5316%" height="15" fill="rgb(220,39,43)"/><text x="7.5285%" y="110.50">profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap...</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (161 samples, 50.95%)</title><rect x="8.8608%" y="116" width="50.9494%" height="15" fill="rgb(229,68,48)"/><text x="9.1108%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228) (159 samples, 50.32%)</title><rect x="9.4937%" y="132" width="50.3165%" height="15" fill="rgb(252,8,32)"/><text x="9.7437%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228)</text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py:1651) (146 samples, 46.20%)</title><rect x="13.6076%" y="148" width="46.2025%" height="15" fill="rgb(223,20,43)"/><text x="13.8576%" y="158.50">predict_proba (sklearn/linear_model/_logistic.py:1651)</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:313) (34 samples, 10.76%)</title><rect x="49.0506%" y="164" width="10.7595%" height="15" fill="rgb(229,81,49)"/><text x="49.3006%" y="174.50">_predict_proba_l..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:39) (8 samples, 2.53%)</title><rect x="63.2911%" y="196" width="2.5316%" height="15" fill="rgb(236,28,36)"/><text x="63.5411%" y="206.50">_r..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (8 samples, 2.53%)</title><rect x="63.2911%" y="212" width="2.5316%" height="15" fill="rgb(249,185,26)"/><text x="63.5411%" y="222.50">nu..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (7 samples, 2.22%)</title><rect x="63.6076%" y="228" width="2.2152%" height="15" fill="rgb(249,174,33)"/><text x="63.8576%" y="238.50">d..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 1.27%)</title><rect x="64.5570%" y="244" width="1.2658%" height="15" fill="rgb(233,201,37)"/><text x="64.8070%" y="254.50"></text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (4 samples, 1.27%)</title><rect x="64.5570%" y="260" width="1.2658%" height="15" fill="rgb(221,78,26)"/><text x="64.8070%" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:41) (5 samples, 1.58%)</title><rect x="65.8228%" y="196" width="1.5823%" height="15" fill="rgb(250,127,30)"/><text x="66.0728%" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:46) (4 samples, 1.27%)</title><rect x="67.7215%" y="196" width="1.2658%" height="15" fill="rgb(230,49,44)"/><text x="67.9715%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.27%)</title><rect x="67.7215%" y="212" width="1.2658%" height="15" fill="rgb(229,67,23)"/><text x="67.9715%" y="222.50"></text></g><g><title>compiled_run (&lt;string&gt;:4) (25 samples, 7.91%)</title><rect x="63.2911%" y="180" width="7.9114%" height="15" fill="rgb(249,83,47)"/><text x="63.5411%" y="190.50">compiled_ru..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:60) (7 samples, 2.22%)</title><rect x="68.9873%" y="196" width="2.2152%" height="15" fill="rgb(215,43,3)"/><text x="69.2373%" y="206.50">_..</text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (5 samples, 1.58%)</title><rect x="69.6203%" y="212" width="1.5823%" height="15" fill="rgb(238,154,13)"/><text x="69.8703%" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 1.27%)</title><rect x="69.9367%" y="228" width="1.2658%" height="15" fill="rgb(219,56,2)"/><text x="70.1867%" y="238.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (4 samples, 1.27%)</title><rect x="74.6835%" y="276" width="1.2658%" height="15" fill="rgb(233,0,4)"/><text x="74.9335%" y="286.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (4 samples, 1.27%)</title><rect x="74.6835%" y="292" width="1.2658%" height="15" fill="rgb(235,30,7)"/><text x="74.9335%" y="302.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (4 samples, 1.27%)</title><rect x="74.6835%" y="308" width="1.2658%" height="15" fill="rgb(250,79,13)"/><text x="74.9335%" y="318.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:37) (4 samples, 1.27%)</title><rect x="74.6835%" y="324" width="1.2658%" height="15" fill="rgb(211,146,34)"/><text x="74.9335%" y="334.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h:106) (4 samples, 1.27%)</title><rect x="74.6835%" y="340" width="1.2658%" height="15" fill="rgb(228,22,38)"/><text x="74.9335%" y="350.50"></text></g><g><title>array_sum (methods.c:2215) (12 samples, 3.80%)</title><rect x="74.3671%" y="228" width="3.7975%" height="15" fill="rgb(235,168,5)"/><text x="74.6171%" y="238.50">arra..</text></g><g><title>forward_ndarray_method (methods.c:108) (12 samples, 3.80%)</title><rect x="74.3671%" y="244" width="3.7975%" height="15" fill="rgb(221,155,16)"/><text x="74.6171%" y="254.50">forw..</text></g><g><title>_sum (numpy/core/_methods.py:38) (12 samples, 3.80%)</title><rect x="74.3671%" y="260" width="3.7975%" height="15" fill="rgb(215,215,53)"/><text x="74.6171%" y="270.50">_sum..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (7 samples, 2.22%)</title><rect x="75.9494%" y="276" width="2.2152%" height="15" fill="rgb(223,4,10)"/><text x="76.1994%" y="286.50">u..</text></g><g><title>array_true_divide (number.c:826) (7 samples, 2.22%)</title><rect x="78.4810%" y="228" width="2.2152%" height="15" fill="rgb(234,103,6)"/><text x="78.7310%" y="238.50">a..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 1.90%)</title><rect x="78.7975%" y="244" width="1.8987%" height="15" fill="rgb(227,97,0)"/><text x="79.0475%" y="254.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 1.27%)</title><rect x="79.4304%" y="260" width="1.2658%" height="15" fill="rgb(234,150,53)"/><text x="79.6804%" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (4 samples, 1.27%)</title><rect x="79.4304%" y="276" width="1.2658%" height="15" fill="rgb(228,201,54)"/><text x="79.6804%" y="286.50"></text></g><g><title>compiled_run (&lt;string&gt;:5) (32 samples, 10.13%)</title><rect x="71.2025%" y="180" width="10.1266%" height="15" fill="rgb(222,22,37)"/><text x="71.4525%" y="190.50">compiled_run (&lt;..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_normalizer.py:67) (29 samples, 9.18%)</title><rect x="72.1519%" y="196" width="9.1772%" height="15" fill="rgb(237,53,32)"/><text x="72.4019%" y="206.50">_run (mlprodi..</text></g><g><title>norm_l1 (mlprodict/onnxrt/ops_cpu/op_normalizer.py:47) (29 samples, 9.18%)</title><rect x="72.1519%" y="212" width="9.1772%" height="15" fill="rgb(233,25,53)"/><text x="72.4019%" y="222.50">norm_l1 (mlpr..</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:61) (71 samples, 22.47%)</title><rect x="59.8101%" y="52" width="22.4684%" height="15" fill="rgb(210,40,34)"/><text x="60.0601%" y="62.50">&lt;module&gt; (bench_LogisticRegression_l..</text></g><g><title>profile_pyrtc (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:60) (71 samples, 22.47%)</title><rect x="59.8101%" y="68" width="22.4684%" height="15" fill="rgb(241,220,44)"/><text x="60.0601%" y="78.50">profile_pyrtc (bench_LogisticRegress..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:37) (70 samples, 22.15%)</title><rect x="60.1266%" y="84" width="22.1519%" height="15" fill="rgb(235,28,35)"/><text x="60.3766%" y="94.50">setup_profile (bench_LogisticRegres..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:31) (70 samples, 22.15%)</title><rect x="60.1266%" y="100" width="22.1519%" height="15" fill="rgb(210,56,17)"/><text x="60.3766%" y="110.50">profile (bench_LogisticRegression_l..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (69 samples, 21.84%)</title><rect x="60.4430%" y="116" width="21.8354%" height="15" fill="rgb(224,130,29)"/><text x="60.6930%" y="126.50">time_predict (mlprodict/asv_benchma..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (67 samples, 21.20%)</title><rect x="61.0759%" y="132" width="21.2025%" height="15" fill="rgb(235,212,8)"/><text x="61.3259%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (63 samples, 19.94%)</title><rect x="62.3418%" y="148" width="19.9367%" height="15" fill="rgb(223,33,50)"/><text x="62.5918%" y="158.50">run (mlprodict/onnxrt/onnx_infe..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (63 samples, 19.94%)</title><rect x="62.3418%" y="164" width="19.9367%" height="15" fill="rgb(219,149,13)"/><text x="62.5918%" y="174.50">_run_sequence_runtime_compiled ..</text></g><g><title>run (onnxruntime/capi/session.py:140) (5 samples, 1.58%)</title><rect x="87.0253%" y="196" width="1.5823%" height="15" fill="rgb(250,156,29)"/><text x="87.2753%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py:140) (5 samples, 1.58%)</title><rect x="87.0253%" y="212" width="1.5823%" height="15" fill="rgb(216,193,19)"/><text x="87.2753%" y="222.50"></text></g><g><title>onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.27%)</title><rect x="92.0886%" y="324" width="1.2658%" height="15" fill="rgb(216,135,14)"/><text x="92.3386%" y="334.50"></text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 3.16%)</title><rect x="90.5063%" y="292" width="3.1646%" height="15" fill="rgb(241,47,5)"/><text x="90.7563%" y="302.50">onn..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 3.16%)</title><rect x="90.5063%" y="308" width="3.1646%" height="15" fill="rgb(233,42,35)"/><text x="90.7563%" y="318.50">onn..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 4.43%)</title><rect x="89.5570%" y="244" width="4.4304%" height="15" fill="rgb(231,13,6)"/><text x="89.8070%" y="254.50">onnxr..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 4.43%)</title><rect x="89.5570%" y="260" width="4.4304%" height="15" fill="rgb(207,181,40)"/><text x="89.8070%" y="270.50">onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 3.48%)</title><rect x="90.5063%" y="276" width="3.4810%" height="15" fill="rgb(254,173,49)"/><text x="90.7563%" y="286.50">onn..</text></g><g><title>onnxruntime::python::CreateTensorMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.27%)</title><rect x="94.9367%" y="260" width="1.2658%" height="15" fill="rgb(221,1,38)"/><text x="95.1867%" y="270.50"></text></g><g><title>onnxruntime::python::CreateTensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.27%)</title><rect x="94.9367%" y="276" width="1.2658%" height="15" fill="rgb(206,124,46)"/><text x="95.1867%" y="286.50"></text></g><g><title>onnxruntime::python::CreateGenericMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.58%)</title><rect x="94.9367%" y="244" width="1.5823%" height="15" fill="rgb(249,21,11)"/><text x="95.1867%" y="254.50"></text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (37 samples, 11.71%)</title><rect x="86.0759%" y="164" width="11.7089%" height="15" fill="rgb(222,201,40)"/><text x="86.3259%" y="174.50">_run_whole_runtim..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (36 samples, 11.39%)</title><rect x="86.3924%" y="180" width="11.3924%" height="15" fill="rgb(235,61,29)"/><text x="86.6424%" y="190.50">run (mlprodict/on..</text></g><g><title>run (onnxruntime/capi/session.py:142) (29 samples, 9.18%)</title><rect x="88.6076%" y="196" width="9.1772%" height="15" fill="rgb(219,207,3)"/><text x="88.8576%" y="206.50">run (onnxrunt..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 8.54%)</title><rect x="89.2405%" y="212" width="8.5443%" height="15" fill="rgb(222,56,46)"/><text x="89.4905%" y="222.50">pybind11::cp..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 8.54%)</title><rect x="89.2405%" y="228" width="8.5443%" height="15" fill="rgb(239,76,54)"/><text x="89.4905%" y="238.50">void pybind1..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (48 samples, 15.19%)</title><rect x="84.4937%" y="132" width="15.1899%" height="15" fill="rgb(231,124,27)"/><text x="84.7437%" y="142.50">&lt;lambda&gt; (mlprodict/asv..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (44 samples, 13.92%)</title><rect x="85.7595%" y="148" width="13.9241%" height="15" fill="rgb(249,195,6)"/><text x="86.0095%" y="158.50">run (mlprodict/onnxrt..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:651) (6 samples, 1.90%)</title><rect x="97.7848%" y="164" width="1.8987%" height="15" fill="rgb(237,174,47)"/><text x="98.0348%" y="174.50">_..</text></g><g><title>all (316 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(206,201,31)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:68) (56 samples, 17.72%)</title><rect x="82.2785%" y="52" width="17.7215%" height="15" fill="rgb(231,57,52)"/><text x="82.5285%" y="62.50">&lt;module&gt; (bench_LogisticRegr..</text></g><g><title>profile_ort (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:67) (56 samples, 17.72%)</title><rect x="82.2785%" y="68" width="17.7215%" height="15" fill="rgb(248,177,22)"/><text x="82.5285%" y="78.50">profile_ort (bench_LogisticR..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:37) (55 samples, 17.41%)</title><rect x="82.5949%" y="84" width="17.4051%" height="15" fill="rgb(215,211,37)"/><text x="82.8449%" y="94.50">setup_profile (bench_Logist..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1_4_12_float_nozipmap.py:31) (55 samples, 17.41%)</title><rect x="82.5949%" y="100" width="17.4051%" height="15" fill="rgb(241,128,51)"/><text x="82.8449%" y="110.50">profile (bench_LogisticRegr..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (53 samples, 16.77%)</title><rect x="83.2278%" y="116" width="16.7722%" height="15" fill="rgb(227,165,31)"/><text x="83.4778%" y="126.50">time_predict (mlprodict/as..</text></g></svg></svg>