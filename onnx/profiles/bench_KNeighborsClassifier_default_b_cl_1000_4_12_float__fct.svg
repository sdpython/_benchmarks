<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1510" onload="init(evt)" viewBox="0 0 1200 1510" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1510" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1493.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1493.00"> </text><g id="frames"><g><title>_by_version_descending (pkg_resources/__init__.py) (2 samples, 0.09%)</title><rect x="10" y="932" width="1" height="15" fill="rgb(218,77,16)"/><text x="13.00" y="942.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (2 samples, 0.09%)</title><rect x="10" y="948" width="1" height="15" fill="rgb(205,212,13)"/><text x="13.00" y="958.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (2 samples, 0.09%)</title><rect x="10" y="964" width="1" height="15" fill="rgb(241,200,54)"/><text x="13.00" y="974.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (2 samples, 0.09%)</title><rect x="10" y="980" width="1" height="15" fill="rgb(249,61,3)"/><text x="13.00" y="990.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (2 samples, 0.09%)</title><rect x="10" y="996" width="1" height="15" fill="rgb(211,228,27)"/><text x="13.00" y="1006.50"></text></g><g><title>_legacy_cmpkey (pkg_resources/_vendor/packaging/version.py) (2 samples, 0.09%)</title><rect x="10" y="1012" width="1" height="15" fill="rgb(253,158,51)"/><text x="13.00" y="1022.50"></text></g><g><title>_build_master (pkg_resources/__init__.py) (3 samples, 0.13%)</title><rect x="10" y="868" width="2" height="15" fill="rgb(232,193,44)"/><text x="13.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (3 samples, 0.13%)</title><rect x="10" y="884" width="2" height="15" fill="rgb(220,16,1)"/><text x="13.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (3 samples, 0.13%)</title><rect x="10" y="900" width="2" height="15" fill="rgb(223,182,36)"/><text x="13.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (3 samples, 0.13%)</title><rect x="10" y="916" width="2" height="15" fill="rgb(243,128,4)"/><text x="13.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="196" width="2" height="15" fill="rgb(234,65,34)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="212" width="2" height="15" fill="rgb(217,201,52)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="228" width="2" height="15" fill="rgb(205,228,53)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="244" width="2" height="15" fill="rgb(250,82,13)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.22%)</title><rect x="10" y="260" width="2" height="15" fill="rgb(206,162,51)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="276" width="2" height="15" fill="rgb(206,83,45)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (5 samples, 0.22%)</title><rect x="10" y="292" width="2" height="15" fill="rgb(241,144,23)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="308" width="2" height="15" fill="rgb(243,188,46)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="324" width="2" height="15" fill="rgb(213,220,40)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="340" width="2" height="15" fill="rgb(233,224,25)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.22%)</title><rect x="10" y="356" width="2" height="15" fill="rgb(209,145,43)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="372" width="2" height="15" fill="rgb(226,224,15)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (5 samples, 0.22%)</title><rect x="10" y="388" width="2" height="15" fill="rgb(222,220,35)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="404" width="2" height="15" fill="rgb(234,201,9)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="420" width="2" height="15" fill="rgb(234,60,41)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="436" width="2" height="15" fill="rgb(208,170,38)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.22%)</title><rect x="10" y="452" width="2" height="15" fill="rgb(213,104,35)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="468" width="2" height="15" fill="rgb(225,6,3)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (5 samples, 0.22%)</title><rect x="10" y="484" width="2" height="15" fill="rgb(208,6,5)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="500" width="2" height="15" fill="rgb(234,131,53)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="516" width="2" height="15" fill="rgb(236,42,20)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="532" width="2" height="15" fill="rgb(248,160,26)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.22%)</title><rect x="10" y="548" width="2" height="15" fill="rgb(244,88,44)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="564" width="2" height="15" fill="rgb(229,139,33)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (5 samples, 0.22%)</title><rect x="10" y="580" width="2" height="15" fill="rgb(216,0,12)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="596" width="2" height="15" fill="rgb(252,84,40)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="612" width="2" height="15" fill="rgb(244,1,16)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="628" width="2" height="15" fill="rgb(247,188,14)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="644" width="2" height="15" fill="rgb(252,152,39)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="660" width="2" height="15" fill="rgb(241,28,9)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="676" width="2" height="15" fill="rgb(219,129,3)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.22%)</title><rect x="10" y="692" width="2" height="15" fill="rgb(224,168,17)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="708" width="2" height="15" fill="rgb(252,120,24)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (5 samples, 0.22%)</title><rect x="10" y="724" width="2" height="15" fill="rgb(210,64,16)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="740" width="2" height="15" fill="rgb(247,163,39)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="756" width="2" height="15" fill="rgb(250,176,40)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="772" width="2" height="15" fill="rgb(234,25,22)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.22%)</title><rect x="10" y="788" width="2" height="15" fill="rgb(216,90,45)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.22%)</title><rect x="10" y="804" width="2" height="15" fill="rgb(232,8,51)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (5 samples, 0.22%)</title><rect x="10" y="820" width="2" height="15" fill="rgb(224,203,49)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (5 samples, 0.22%)</title><rect x="10" y="836" width="2" height="15" fill="rgb(216,75,10)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (5 samples, 0.22%)</title><rect x="10" y="852" width="2" height="15" fill="rgb(218,227,50)"/><text x="13.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.13%)</title><rect x="12" y="340" width="2" height="15" fill="rgb(250,188,31)"/><text x="15.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="356" width="2" height="15" fill="rgb(207,149,2)"/><text x="15.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="372" width="2" height="15" fill="rgb(225,185,34)"/><text x="15.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="388" width="2" height="15" fill="rgb(248,127,15)"/><text x="15.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.13%)</title><rect x="12" y="404" width="2" height="15" fill="rgb(206,15,16)"/><text x="15.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="420" width="2" height="15" fill="rgb(226,132,6)"/><text x="15.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (3 samples, 0.13%)</title><rect x="12" y="436" width="2" height="15" fill="rgb(212,139,30)"/><text x="15.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="452" width="2" height="15" fill="rgb(251,33,31)"/><text x="15.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="468" width="2" height="15" fill="rgb(235,167,16)"/><text x="15.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="484" width="2" height="15" fill="rgb(234,116,27)"/><text x="15.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="500" width="2" height="15" fill="rgb(252,172,24)"/><text x="15.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="516" width="2" height="15" fill="rgb(238,87,19)"/><text x="15.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="532" width="2" height="15" fill="rgb(209,64,29)"/><text x="15.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.13%)</title><rect x="12" y="548" width="2" height="15" fill="rgb(226,110,54)"/><text x="15.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="564" width="2" height="15" fill="rgb(207,34,20)"/><text x="15.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (3 samples, 0.13%)</title><rect x="12" y="580" width="2" height="15" fill="rgb(223,51,9)"/><text x="15.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="596" width="2" height="15" fill="rgb(206,127,42)"/><text x="15.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="612" width="2" height="15" fill="rgb(220,114,32)"/><text x="15.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="628" width="2" height="15" fill="rgb(241,145,6)"/><text x="15.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.13%)</title><rect x="12" y="644" width="2" height="15" fill="rgb(223,49,3)"/><text x="15.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="660" width="2" height="15" fill="rgb(244,186,45)"/><text x="15.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (3 samples, 0.13%)</title><rect x="12" y="676" width="2" height="15" fill="rgb(235,158,10)"/><text x="15.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="692" width="2" height="15" fill="rgb(250,116,42)"/><text x="15.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="708" width="2" height="15" fill="rgb(214,55,21)"/><text x="15.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="724" width="2" height="15" fill="rgb(223,45,49)"/><text x="15.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.13%)</title><rect x="12" y="740" width="2" height="15" fill="rgb(249,191,19)"/><text x="15.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="756" width="2" height="15" fill="rgb(210,110,35)"/><text x="15.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (3 samples, 0.13%)</title><rect x="12" y="772" width="2" height="15" fill="rgb(205,204,46)"/><text x="15.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="788" width="2" height="15" fill="rgb(211,108,38)"/><text x="15.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="804" width="2" height="15" fill="rgb(229,86,20)"/><text x="15.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="820" width="2" height="15" fill="rgb(252,45,25)"/><text x="15.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.13%)</title><rect x="12" y="836" width="2" height="15" fill="rgb(227,226,36)"/><text x="15.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="852" width="2" height="15" fill="rgb(230,91,7)"/><text x="15.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (3 samples, 0.13%)</title><rect x="12" y="868" width="2" height="15" fill="rgb(209,42,52)"/><text x="15.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="884" width="2" height="15" fill="rgb(249,38,23)"/><text x="15.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="900" width="2" height="15" fill="rgb(233,99,26)"/><text x="15.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="916" width="2" height="15" fill="rgb(215,227,54)"/><text x="15.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="932" width="2" height="15" fill="rgb(222,44,3)"/><text x="15.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="948" width="2" height="15" fill="rgb(234,119,4)"/><text x="15.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="964" width="2" height="15" fill="rgb(230,30,21)"/><text x="15.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.13%)</title><rect x="12" y="980" width="2" height="15" fill="rgb(254,18,36)"/><text x="15.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="996" width="2" height="15" fill="rgb(216,45,49)"/><text x="15.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (3 samples, 0.13%)</title><rect x="12" y="1012" width="2" height="15" fill="rgb(251,147,50)"/><text x="15.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="1028" width="2" height="15" fill="rgb(254,70,47)"/><text x="15.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="1044" width="2" height="15" fill="rgb(213,131,24)"/><text x="15.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="1060" width="2" height="15" fill="rgb(235,140,36)"/><text x="15.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.13%)</title><rect x="12" y="1076" width="2" height="15" fill="rgb(229,41,9)"/><text x="15.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.13%)</title><rect x="12" y="1092" width="2" height="15" fill="rgb(225,165,25)"/><text x="15.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (3 samples, 0.13%)</title><rect x="12" y="1108" width="2" height="15" fill="rgb(230,190,0)"/><text x="15.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1124" width="1" height="15" fill="rgb(244,146,9)"/><text x="16.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1140" width="1" height="15" fill="rgb(228,83,4)"/><text x="16.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1156" width="1" height="15" fill="rgb(225,220,45)"/><text x="16.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1172" width="1" height="15" fill="rgb(240,163,44)"/><text x="16.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1188" width="1" height="15" fill="rgb(232,121,5)"/><text x="16.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="13" y="1204" width="1" height="15" fill="rgb(217,103,24)"/><text x="16.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1220" width="1" height="15" fill="rgb(246,31,21)"/><text x="16.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (2 samples, 0.09%)</title><rect x="13" y="1236" width="1" height="15" fill="rgb(244,175,29)"/><text x="16.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1252" width="1" height="15" fill="rgb(246,180,12)"/><text x="16.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1268" width="1" height="15" fill="rgb(254,101,26)"/><text x="16.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1284" width="1" height="15" fill="rgb(215,160,9)"/><text x="16.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1300" width="1" height="15" fill="rgb(222,224,39)"/><text x="16.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1316" width="1" height="15" fill="rgb(251,164,30)"/><text x="16.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="13" y="1332" width="1" height="15" fill="rgb(253,206,28)"/><text x="16.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1348" width="1" height="15" fill="rgb(229,181,10)"/><text x="16.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (2 samples, 0.09%)</title><rect x="13" y="1364" width="1" height="15" fill="rgb(215,4,5)"/><text x="16.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1380" width="1" height="15" fill="rgb(234,167,22)"/><text x="16.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1396" width="1" height="15" fill="rgb(249,56,32)"/><text x="16.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1412" width="1" height="15" fill="rgb(232,133,30)"/><text x="16.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="13" y="1428" width="1" height="15" fill="rgb(206,149,30)"/><text x="16.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="13" y="1444" width="1" height="15" fill="rgb(229,111,6)"/><text x="16.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (2 samples, 0.09%)</title><rect x="13" y="1460" width="1" height="15" fill="rgb(243,21,53)"/><text x="16.00" y="1470.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (4 samples, 0.17%)</title><rect x="12" y="244" width="2" height="15" fill="rgb(250,121,14)"/><text x="15.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="12" y="260" width="2" height="15" fill="rgb(241,107,13)"/><text x="15.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="12" y="276" width="2" height="15" fill="rgb(212,146,14)"/><text x="15.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="12" y="292" width="2" height="15" fill="rgb(222,115,17)"/><text x="15.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.17%)</title><rect x="12" y="308" width="2" height="15" fill="rgb(206,34,21)"/><text x="15.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.17%)</title><rect x="12" y="324" width="2" height="15" fill="rgb(226,150,33)"/><text x="15.00" y="334.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.48%)</title><rect x="10" y="68" width="5" height="15" fill="rgb(246,210,36)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.48%)</title><rect x="10" y="84" width="5" height="15" fill="rgb(206,177,5)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.48%)</title><rect x="10" y="100" width="5" height="15" fill="rgb(249,209,51)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (11 samples, 0.48%)</title><rect x="10" y="116" width="5" height="15" fill="rgb(249,36,32)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.48%)</title><rect x="10" y="132" width="5" height="15" fill="rgb(207,217,51)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py) (11 samples, 0.48%)</title><rect x="10" y="148" width="5" height="15" fill="rgb(250,214,32)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.48%)</title><rect x="10" y="164" width="5" height="15" fill="rgb(243,109,10)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.48%)</title><rect x="10" y="180" width="5" height="15" fill="rgb(235,2,31)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.26%)</title><rect x="12" y="196" width="3" height="15" fill="rgb(208,113,26)"/><text x="15.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.26%)</title><rect x="12" y="212" width="3" height="15" fill="rgb(250,169,49)"/><text x="15.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.26%)</title><rect x="12" y="228" width="3" height="15" fill="rgb(248,119,54)"/><text x="15.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py) (2 samples, 0.09%)</title><rect x="14" y="244" width="1" height="15" fill="rgb(240,128,46)"/><text x="17.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="260" width="1" height="15" fill="rgb(245,108,13)"/><text x="17.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="276" width="1" height="15" fill="rgb(208,20,44)"/><text x="17.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="292" width="1" height="15" fill="rgb(244,206,32)"/><text x="17.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="308" width="1" height="15" fill="rgb(209,60,52)"/><text x="17.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="324" width="1" height="15" fill="rgb(206,45,45)"/><text x="17.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="14" y="340" width="1" height="15" fill="rgb(214,144,36)"/><text x="17.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="356" width="1" height="15" fill="rgb(250,41,19)"/><text x="17.00" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/lib/__init__.py) (2 samples, 0.09%)</title><rect x="14" y="372" width="1" height="15" fill="rgb(236,150,28)"/><text x="17.00" y="382.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="388" width="1" height="15" fill="rgb(252,181,1)"/><text x="17.00" y="398.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="404" width="1" height="15" fill="rgb(248,143,54)"/><text x="17.00" y="414.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="420" width="1" height="15" fill="rgb(211,71,2)"/><text x="17.00" y="430.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.09%)</title><rect x="14" y="436" width="1" height="15" fill="rgb(220,203,2)"/><text x="17.00" y="446.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.09%)</title><rect x="14" y="452" width="1" height="15" fill="rgb(206,210,19)"/><text x="17.00" y="462.50"></text></g><g><title>onnxruntime::Cast&lt;bool&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="21" y="340" width="1" height="15" fill="rgb(250,98,13)"/><text x="24.00" y="350.50"></text></g><g><title>onnxruntime::Concat::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="23" y="340" width="1" height="15" fill="rgb(221,199,33)"/><text x="26.00" y="350.50"></text></g><g><title>onnxruntime::ConcatBase::ComputeImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="23" y="356" width="1" height="15" fill="rgb(223,80,0)"/><text x="26.00" y="366.50"></text></g><g><title>onnxruntime::Div&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="24" y="340" width="1" height="15" fill="rgb(243,227,7)"/><text x="27.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="24" y="356" width="1" height="15" fill="rgb(245,226,13)"/><text x="27.00" y="366.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Div&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="24" y="372" width="1" height="15" fill="rgb(228,159,49)"/><text x="27.00" y="382.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="24" y="388" width="1" height="15" fill="rgb(218,53,10)"/><text x="27.00" y="398.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="32" y="452" width="2" height="15" fill="rgb(240,190,21)"/><text x="35.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="32" y="468" width="2" height="15" fill="rgb(213,110,37)"/><text x="35.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.39%)</title><rect x="30" y="436" width="5" height="15" fill="rgb(246,206,33)"/><text x="33.00" y="446.50"></text></g><g><title>onnxruntime::SessionState::GetMemoryPatternGroup (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="34" y="452" width="1" height="15" fill="rgb(253,223,39)"/><text x="37.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.26%)</title><rect x="35" y="436" width="3" height="15" fill="rgb(210,152,26)"/><text x="38.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.26%)</title><rect x="35" y="452" width="3" height="15" fill="rgb(224,11,27)"/><text x="38.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.22%)</title><rect x="35" y="468" width="3" height="15" fill="rgb(240,216,50)"/><text x="38.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.22%)</title><rect x="35" y="484" width="3" height="15" fill="rgb(214,105,16)"/><text x="38.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.22%)</title><rect x="35" y="500" width="3" height="15" fill="rgb(224,97,22)"/><text x="38.00" y="510.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="36" y="516" width="2" height="15" fill="rgb(223,103,53)"/><text x="39.00" y="526.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="37" y="532" width="1" height="15" fill="rgb(237,17,28)"/><text x="40.00" y="542.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="37" y="548" width="1" height="15" fill="rgb(223,204,33)"/><text x="40.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="39" y="436" width="1" height="15" fill="rgb(213,28,0)"/><text x="42.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.52%)</title><rect x="40" y="436" width="7" height="15" fill="rgb(226,169,36)"/><text x="43.00" y="446.50"></text></g><g><title>0x7f27b8e95d94 (libc-2.29.so) (11 samples, 0.48%)</title><rect x="41" y="452" width="6" height="15" fill="rgb(226,103,44)"/><text x="44.00" y="462.50"></text></g><g><title>onnxruntime::OpKernelContext::OpKernelContext (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="47" y="436" width="1" height="15" fill="rgb(215,133,0)"/><text x="50.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="138" y="468" width="1" height="15" fill="rgb(233,26,49)"/><text x="141.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="139" y="468" width="1" height="15" fill="rgb(207,147,23)"/><text x="142.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="139" y="484" width="1" height="15" fill="rgb(249,195,37)"/><text x="142.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="139" y="500" width="1" height="15" fill="rgb(237,64,15)"/><text x="142.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="139" y="516" width="1" height="15" fill="rgb(207,211,13)"/><text x="142.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="139" y="532" width="1" height="15" fill="rgb(234,160,4)"/><text x="142.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="139" y="548" width="1" height="15" fill="rgb(230,29,14)"/><text x="142.00" y="558.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="139" y="564" width="1" height="15" fill="rgb(248,194,8)"/><text x="142.00" y="574.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.09%)</title><rect x="139" y="580" width="1" height="15" fill="rgb(209,160,1)"/><text x="142.00" y="590.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="139" y="596" width="1" height="15" fill="rgb(233,70,14)"/><text x="142.00" y="606.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.09%)</title><rect x="140" y="468" width="1" height="15" fill="rgb(220,225,26)"/><text x="143.00" y="478.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="140" y="484" width="1" height="15" fill="rgb(234,151,36)"/><text x="143.00" y="494.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (185 samples, 8.09%)</title><rect x="48" y="436" width="95" height="15" fill="rgb(219,76,14)"/><text x="51.00" y="446.50">onnxruntime..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (167 samples, 7.30%)</title><rect x="57" y="452" width="86" height="15" fill="rgb(223,106,2)"/><text x="60.00" y="462.50">onnxruntim..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="141" y="468" width="2" height="15" fill="rgb(236,76,31)"/><text x="144.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (155 samples, 6.77%)</title><rect x="143" y="468" width="80" height="15" fill="rgb(253,101,4)"/><text x="146.00" y="478.50">onnxrunti..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (48 samples, 2.10%)</title><rect x="198" y="484" width="25" height="15" fill="rgb(233,119,46)"/><text x="201.00" y="494.50">o..</text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2247] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="223" y="468" width="1" height="15" fill="rgb(245,116,46)"/><text x="226.00" y="478.50"></text></g><g><title>OrtValue::Get&lt;onnxruntime::Tensor&gt; [clone .localalias.13] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="223" y="484" width="1" height="15" fill="rgb(206,187,19)"/><text x="226.00" y="494.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.26%)</title><rect x="224" y="468" width="3" height="15" fill="rgb(227,161,34)"/><text x="227.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.26%)</title><rect x="224" y="484" width="3" height="15" fill="rgb(228,143,45)"/><text x="227.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="225" y="500" width="2" height="15" fill="rgb(241,224,18)"/><text x="228.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="225" y="516" width="2" height="15" fill="rgb(207,195,5)"/><text x="228.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="226" y="532" width="1" height="15" fill="rgb(253,122,31)"/><text x="229.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="226" y="548" width="1" height="15" fill="rgb(213,112,48)"/><text x="229.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="226" y="564" width="1" height="15" fill="rgb(231,126,45)"/><text x="229.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="226" y="580" width="1" height="15" fill="rgb(214,2,12)"/><text x="229.00" y="590.50"></text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (390 samples, 17.05%)</title><rect x="29" y="388" width="201" height="15" fill="rgb(231,221,53)"/><text x="32.00" y="398.50">onnxruntime::utils::Execut..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (390 samples, 17.05%)</title><rect x="29" y="404" width="201" height="15" fill="rgb(220,32,27)"/><text x="32.00" y="414.50">onnxruntime::utils::Execut..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (390 samples, 17.05%)</title><rect x="29" y="420" width="201" height="15" fill="rgb(253,151,48)"/><text x="32.00" y="430.50">onnxruntime::SequentialExe..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 7.34%)</title><rect x="143" y="436" width="87" height="15" fill="rgb(238,86,6)"/><text x="146.00" y="446.50">onnxruntim..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 7.34%)</title><rect x="143" y="452" width="87" height="15" fill="rgb(222,93,25)"/><text x="146.00" y="462.50">onnxruntim..</text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.22%)</title><rect x="227" y="468" width="3" height="15" fill="rgb(216,160,22)"/><text x="230.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="228" y="484" width="2" height="15" fill="rgb(244,75,51)"/><text x="231.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.09%)</title><rect x="229" y="500" width="1" height="15" fill="rgb(250,128,1)"/><text x="232.00" y="510.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (394 samples, 17.22%)</title><rect x="27" y="340" width="203" height="15" fill="rgb(242,108,28)"/><text x="30.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Comp..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (394 samples, 17.22%)</title><rect x="27" y="356" width="203" height="15" fill="rgb(235,173,16)"/><text x="30.00" y="366.50">onnxruntime::ScanImpl::Exe..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (393 samples, 17.18%)</title><rect x="28" y="372" width="202" height="15" fill="rgb(245,209,35)"/><text x="31.00" y="382.50">onnxruntime::scan::detail:..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.39%)</title><rect x="230" y="340" width="5" height="15" fill="rgb(242,47,16)"/><text x="233.00" y="350.50"></text></g><g><title>0x7f27b8e772f8 (libc-2.29.so) (2 samples, 0.09%)</title><rect x="323" y="404" width="1" height="15" fill="rgb(217,50,7)"/><text x="326.00" y="414.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (10 samples, 0.44%)</title><rect x="319" y="372" width="6" height="15" fill="rgb(221,120,16)"/><text x="322.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (10 samples, 0.44%)</title><rect x="319" y="388" width="6" height="15" fill="rgb(233,39,33)"/><text x="322.00" y="398.50"></text></g><g><title>std::__insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="325" y="372" width="1" height="15" fill="rgb(230,159,3)"/><text x="328.00" y="382.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (181 samples, 7.91%)</title><rect x="235" y="340" width="93" height="15" fill="rgb(228,5,23)"/><text x="238.00" y="350.50">onnxruntime..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (181 samples, 7.91%)</title><rect x="235" y="356" width="93" height="15" fill="rgb(213,220,52)"/><text x="238.00" y="366.50">onnxruntime..</text></g><g><title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;std::pair&lt;float, long&gt;*, std::vector&lt;std::pair&lt;float, long&gt;, std::allocator&lt;std::pair&lt;float, long&gt; &gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;onnxruntime::LesserValueCmp&lt;float&gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="326" y="372" width="2" height="15" fill="rgb(240,178,42)"/><text x="329.00" y="382.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (52 samples, 2.27%)</title><rect x="328" y="340" width="27" height="15" fill="rgb(244,23,54)"/><text x="331.00" y="350.50">o..</text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (52 samples, 2.27%)</title><rect x="328" y="356" width="27" height="15" fill="rgb(224,124,27)"/><text x="331.00" y="366.50">o..</text></g><g><title>0x7f27b8e76d9f (libc-2.29.so) (2 samples, 0.09%)</title><rect x="359" y="388" width="1" height="15" fill="rgb(214,94,39)"/><text x="362.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (10 samples, 0.44%)</title><rect x="357" y="356" width="5" height="15" fill="rgb(252,168,7)"/><text x="360.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (10 samples, 0.44%)</title><rect x="357" y="372" width="5" height="15" fill="rgb(221,111,30)"/><text x="360.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (665 samples, 29.06%)</title><rect x="20" y="260" width="343" height="15" fill="rgb(228,8,26)"/><text x="23.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntim..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (665 samples, 29.06%)</title><rect x="20" y="276" width="343" height="15" fill="rgb(230,67,12)"/><text x="23.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (664 samples, 29.02%)</title><rect x="20" y="292" width="343" height="15" fill="rgb(250,211,14)"/><text x="23.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (664 samples, 29.02%)</title><rect x="20" y="308" width="343" height="15" fill="rgb(221,75,52)"/><text x="23.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxrunt..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (664 samples, 29.02%)</title><rect x="20" y="324" width="343" height="15" fill="rgb(236,199,22)"/><text x="23.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnx..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.66%)</title><rect x="355" y="340" width="8" height="15" fill="rgb(223,95,48)"/><text x="358.00" y="350.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.17%)</title><rect x="369" y="276" width="3" height="15" fill="rgb(218,85,26)"/><text x="372.00" y="286.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 0.70%)</title><rect x="364" y="260" width="8" height="15" fill="rgb(252,158,18)"/><text x="367.00" y="270.50"></text></g><g><title>0x7f27a89427a0 (libstdc++.so.6.0.28) (2 samples, 0.09%)</title><rect x="373" y="292" width="1" height="15" fill="rgb(215,126,41)"/><text x="376.00" y="302.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (690 samples, 30.16%)</title><rect x="20" y="244" width="356" height="15" fill="rgb(215,127,35)"/><text x="23.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.31%)</title><rect x="372" y="260" width="4" height="15" fill="rgb(215,173,2)"/><text x="375.00" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.26%)</title><rect x="373" y="276" width="3" height="15" fill="rgb(232,226,37)"/><text x="376.00" y="286.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.13%)</title><rect x="374" y="292" width="2" height="15" fill="rgb(229,76,14)"/><text x="377.00" y="302.50"></text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py) (700 samples, 30.59%)</title><rect x="15" y="68" width="361" height="15" fill="rgb(246,8,35)"/><text x="18.00" y="78.50">profile_ort (bench_KNeighborsClassifier_default_..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py) (700 samples, 30.59%)</title><rect x="15" y="84" width="361" height="15" fill="rgb(235,166,38)"/><text x="18.00" y="94.50">setup_profile (bench_KNeighborsClassifier_defaul..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py) (700 samples, 30.59%)</title><rect x="15" y="100" width="361" height="15" fill="rgb(221,214,35)"/><text x="18.00" y="110.50">profile (bench_KNeighborsClassifier_default_b_cl..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (694 samples, 30.33%)</title><rect x="18" y="116" width="358" height="15" fill="rgb(224,185,6)"/><text x="21.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (694 samples, 30.33%)</title><rect x="18" y="132" width="358" height="15" fill="rgb(230,77,52)"/><text x="21.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (694 samples, 30.33%)</title><rect x="18" y="148" width="358" height="15" fill="rgb(228,145,1)"/><text x="21.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (694 samples, 30.33%)</title><rect x="18" y="164" width="358" height="15" fill="rgb(237,114,6)"/><text x="21.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_infere..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (692 samples, 30.24%)</title><rect x="19" y="180" width="357" height="15" fill="rgb(248,159,5)"/><text x="22.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (692 samples, 30.24%)</title><rect x="19" y="196" width="357" height="15" fill="rgb(243,25,51)"/><text x="22.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (691 samples, 30.20%)</title><rect x="20" y="212" width="356" height="15" fill="rgb(220,162,42)"/><text x="23.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (691 samples, 30.20%)</title><rect x="20" y="228" width="356" height="15" fill="rgb(236,227,24)"/><text x="23.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxrunt..</text></g><g><title>LONG_getitem (arraytypes.c.src) (2 samples, 0.09%)</title><rect x="385" y="260" width="1" height="15" fill="rgb(243,146,22)"/><text x="388.00" y="270.50"></text></g><g><title>PyArray_ToList (convert.c) (6 samples, 0.26%)</title><rect x="384" y="228" width="4" height="15" fill="rgb(242,93,40)"/><text x="387.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c) (6 samples, 0.26%)</title><rect x="384" y="244" width="4" height="15" fill="rgb(237,60,32)"/><text x="387.00" y="254.50"></text></g><g><title>recursive_tolist (convert.c) (3 samples, 0.13%)</title><rect x="386" y="260" width="2" height="15" fill="rgb(221,169,42)"/><text x="389.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (12 samples, 0.52%)</title><rect x="388" y="276" width="6" height="15" fill="rgb(241,174,18)"/><text x="391.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c) (12 samples, 0.52%)</title><rect x="388" y="292" width="6" height="15" fill="rgb(235,77,4)"/><text x="391.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (10 samples, 0.44%)</title><rect x="389" y="308" width="5" height="15" fill="rgb(230,71,38)"/><text x="392.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src) (10 samples, 0.44%)</title><rect x="389" y="324" width="5" height="15" fill="rgb(246,171,16)"/><text x="392.00" y="334.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src) (7 samples, 0.31%)</title><rect x="391" y="340" width="3" height="15" fill="rgb(224,130,36)"/><text x="394.00" y="350.50"></text></g><g><title>0x7f27b80980a0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="401" y="340" width="1" height="15" fill="rgb(253,122,11)"/><text x="404.00" y="350.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (3 samples, 0.13%)</title><rect x="402" y="340" width="2" height="15" fill="rgb(231,72,0)"/><text x="405.00" y="350.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (2 samples, 0.09%)</title><rect x="406" y="356" width="1" height="15" fill="rgb(215,39,50)"/><text x="409.00" y="366.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (26 samples, 1.14%)</title><rect x="394" y="292" width="14" height="15" fill="rgb(209,74,15)"/><text x="397.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (26 samples, 1.14%)</title><rect x="394" y="308" width="14" height="15" fill="rgb(241,149,7)"/><text x="397.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (25 samples, 1.09%)</title><rect x="395" y="324" width="13" height="15" fill="rgb(241,207,27)"/><text x="398.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c) (8 samples, 0.35%)</title><rect x="404" y="340" width="4" height="15" fill="rgb(231,82,44)"/><text x="407.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (64 samples, 2.80%)</title><rect x="384" y="212" width="33" height="15" fill="rgb(234,45,54)"/><text x="387.00" y="222.50">_r..</text></g><g><title>array_subscript (mapping.c) (57 samples, 2.49%)</title><rect x="388" y="228" width="29" height="15" fill="rgb(237,112,41)"/><text x="391.00" y="238.50">ar..</text></g><g><title>prepare_index (mapping.c) (56 samples, 2.45%)</title><rect x="388" y="244" width="29" height="15" fill="rgb(249,194,7)"/><text x="391.00" y="254.50">pr..</text></g><g><title>PyArray_FromAny (ctors.c) (56 samples, 2.45%)</title><rect x="388" y="260" width="29" height="15" fill="rgb(249,43,46)"/><text x="391.00" y="270.50">Py..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (44 samples, 1.92%)</title><rect x="394" y="276" width="23" height="15" fill="rgb(237,11,19)"/><text x="397.00" y="286.50">P..</text></g><g><title>discover_dimensions (ctors.c) (18 samples, 0.79%)</title><rect x="408" y="292" width="9" height="15" fill="rgb(222,181,21)"/><text x="411.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c) (14 samples, 0.61%)</title><rect x="410" y="308" width="7" height="15" fill="rgb(221,218,8)"/><text x="413.00" y="318.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.09%)</title><rect x="417" y="260" width="1" height="15" fill="rgb(245,132,18)"/><text x="420.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.09%)</title><rect x="417" y="276" width="1" height="15" fill="rgb(234,132,41)"/><text x="420.00" y="286.50"></text></g><g><title>_aligned_contig_cast_bool_to_float (lowlevel_strided_loops.c.src) (2 samples, 0.09%)</title><rect x="417" y="292" width="1" height="15" fill="rgb(252,8,7)"/><text x="420.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (4 samples, 0.17%)</title><rect x="417" y="212" width="2" height="15" fill="rgb(211,63,37)"/><text x="420.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (3 samples, 0.13%)</title><rect x="417" y="228" width="2" height="15" fill="rgb(230,124,31)"/><text x="420.00" y="238.50"></text></g><g><title>array_astype (methods.c) (3 samples, 0.13%)</title><rect x="417" y="244" width="2" height="15" fill="rgb(230,143,48)"/><text x="420.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.09%)</title><rect x="420" y="292" width="1" height="15" fill="rgb(249,66,8)"/><text x="423.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.13%)</title><rect x="420" y="244" width="1" height="15" fill="rgb(239,158,46)"/><text x="423.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.13%)</title><rect x="420" y="260" width="1" height="15" fill="rgb(222,179,19)"/><text x="423.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.13%)</title><rect x="420" y="276" width="1" height="15" fill="rgb(224,223,18)"/><text x="423.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_equal.py) (4 samples, 0.17%)</title><rect x="420" y="212" width="2" height="15" fill="rgb(227,228,23)"/><text x="423.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.17%)</title><rect x="420" y="228" width="2" height="15" fill="rgb(214,33,28)"/><text x="423.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (7 samples, 0.31%)</title><rect x="422" y="212" width="3" height="15" fill="rgb(228,156,49)"/><text x="425.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;) (6 samples, 0.26%)</title><rect x="422" y="228" width="3" height="15" fill="rgb(228,38,18)"/><text x="425.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.26%)</title><rect x="422" y="244" width="3" height="15" fill="rgb(249,208,37)"/><text x="425.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py) (6 samples, 0.26%)</title><rect x="422" y="260" width="3" height="15" fill="rgb(227,133,52)"/><text x="425.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (4 samples, 0.17%)</title><rect x="423" y="276" width="2" height="15" fill="rgb(226,68,14)"/><text x="426.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (3 samples, 0.13%)</title><rect x="424" y="292" width="1" height="15" fill="rgb(217,33,50)"/><text x="427.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.13%)</title><rect x="424" y="308" width="1" height="15" fill="rgb(234,144,14)"/><text x="427.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (2 samples, 0.09%)</title><rect x="424" y="324" width="1" height="15" fill="rgb(245,187,4)"/><text x="427.00" y="334.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (6 samples, 0.26%)</title><rect x="448" y="228" width="3" height="15" fill="rgb(237,13,21)"/><text x="451.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (6 samples, 0.26%)</title><rect x="453" y="244" width="3" height="15" fill="rgb(245,213,41)"/><text x="456.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (3 samples, 0.13%)</title><rect x="455" y="260" width="1" height="15" fill="rgb(250,122,36)"/><text x="458.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (13 samples, 0.57%)</title><rect x="451" y="228" width="7" height="15" fill="rgb(220,194,13)"/><text x="454.00" y="238.50"></text></g><g><title>npy_free_cache (alloc.c) (4 samples, 0.17%)</title><rect x="456" y="244" width="2" height="15" fill="rgb(212,122,38)"/><text x="459.00" y="254.50"></text></g><g><title>_npy_free_cache (alloc.c) (3 samples, 0.13%)</title><rect x="457" y="260" width="1" height="15" fill="rgb(236,42,32)"/><text x="460.00" y="270.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (3 samples, 0.13%)</title><rect x="457" y="276" width="1" height="15" fill="rgb(252,109,13)"/><text x="460.00" y="286.50"></text></g><g><title>free (libc-2.29.so) (2 samples, 0.09%)</title><rect x="457" y="292" width="1" height="15" fill="rgb(225,125,34)"/><text x="460.00" y="302.50"></text></g><g><title>array_subscript (mapping.c) (6 samples, 0.26%)</title><rect x="458" y="228" width="3" height="15" fill="rgb(246,165,37)"/><text x="461.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c) (5 samples, 0.22%)</title><rect x="459" y="244" width="2" height="15" fill="rgb(219,81,9)"/><text x="462.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (3 samples, 0.13%)</title><rect x="460" y="260" width="1" height="15" fill="rgb(237,6,18)"/><text x="463.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (3 samples, 0.13%)</title><rect x="460" y="276" width="1" height="15" fill="rgb(238,37,42)"/><text x="463.00" y="286.50"></text></g><g><title>array_alloc (arrayobject.c) (2 samples, 0.09%)</title><rect x="460" y="292" width="1" height="15" fill="rgb(213,1,4)"/><text x="463.00" y="302.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (2 samples, 0.09%)</title><rect x="479" y="292" width="1" height="15" fill="rgb(227,165,9)"/><text x="482.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.09%)</title><rect x="481" y="324" width="1" height="15" fill="rgb(248,156,21)"/><text x="484.00" y="334.50"></text></g><g><title>array_reshape (methods.c) (8 samples, 0.35%)</title><rect x="478" y="276" width="4" height="15" fill="rgb(225,103,5)"/><text x="481.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (3 samples, 0.13%)</title><rect x="481" y="292" width="1" height="15" fill="rgb(243,66,7)"/><text x="484.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (3 samples, 0.13%)</title><rect x="481" y="308" width="1" height="15" fill="rgb(249,166,15)"/><text x="484.00" y="318.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (36 samples, 1.57%)</title><rect x="468" y="260" width="19" height="15" fill="rgb(209,42,41)"/><text x="471.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (8 samples, 0.35%)</title><rect x="482" y="276" width="5" height="15" fill="rgb(226,21,44)"/><text x="485.00" y="286.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (50 samples, 2.19%)</title><rect x="461" y="228" width="26" height="15" fill="rgb(243,225,41)"/><text x="464.00" y="238.50">e..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (44 samples, 1.92%)</title><rect x="464" y="244" width="23" height="15" fill="rgb(205,123,35)"/><text x="467.00" y="254.50">a..</text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (8 samples, 0.35%)</title><rect x="527" y="260" width="4" height="15" fill="rgb(220,86,41)"/><text x="530.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (12 samples, 0.52%)</title><rect x="618" y="276" width="6" height="15" fill="rgb(245,144,40)"/><text x="621.00" y="286.50"></text></g><g><title>array_descr_get (getset.c) (2 samples, 0.09%)</title><rect x="639" y="292" width="1" height="15" fill="rgb(208,176,35)"/><text x="642.00" y="302.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (3 samples, 0.13%)</title><rect x="640" y="292" width="2" height="15" fill="rgb(246,214,27)"/><text x="643.00" y="302.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (4 samples, 0.17%)</title><rect x="656" y="340" width="2" height="15" fill="rgb(219,117,47)"/><text x="659.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (3 samples, 0.13%)</title><rect x="656" y="356" width="2" height="15" fill="rgb(247,60,31)"/><text x="659.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (2 samples, 0.09%)</title><rect x="659" y="388" width="1" height="15" fill="rgb(208,39,30)"/><text x="662.00" y="398.50"></text></g><g><title>promote_types (convert_datatype.c) (2 samples, 0.09%)</title><rect x="659" y="404" width="1" height="15" fill="rgb(240,219,33)"/><text x="662.00" y="414.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (3 samples, 0.13%)</title><rect x="659" y="356" width="1" height="15" fill="rgb(206,49,54)"/><text x="662.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (3 samples, 0.13%)</title><rect x="659" y="372" width="1" height="15" fill="rgb(240,105,38)"/><text x="662.00" y="382.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (3 samples, 0.13%)</title><rect x="662" y="372" width="1" height="15" fill="rgb(247,169,26)"/><text x="665.00" y="382.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (9 samples, 0.39%)</title><rect x="667" y="436" width="4" height="15" fill="rgb(217,174,26)"/><text x="670.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (14 samples, 0.61%)</title><rect x="665" y="388" width="7" height="15" fill="rgb(239,9,3)"/><text x="668.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (13 samples, 0.57%)</title><rect x="666" y="404" width="6" height="15" fill="rgb(220,118,38)"/><text x="669.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (13 samples, 0.57%)</title><rect x="666" y="420" width="6" height="15" fill="rgb(251,78,4)"/><text x="669.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h) (2 samples, 0.09%)</title><rect x="671" y="436" width="1" height="15" fill="rgb(241,224,0)"/><text x="674.00" y="446.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (2 samples, 0.09%)</title><rect x="676" y="452" width="1" height="15" fill="rgb(248,40,33)"/><text x="679.00" y="462.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (10 samples, 0.44%)</title><rect x="675" y="420" width="5" height="15" fill="rgb(219,50,18)"/><text x="678.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (7 samples, 0.31%)</title><rect x="676" y="436" width="4" height="15" fill="rgb(223,29,20)"/><text x="679.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 0.22%)</title><rect x="677" y="452" width="3" height="15" fill="rgb(253,169,17)"/><text x="680.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c) (3 samples, 0.13%)</title><rect x="678" y="468" width="2" height="15" fill="rgb(235,139,42)"/><text x="681.00" y="478.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.13%)</title><rect x="678" y="484" width="2" height="15" fill="rgb(242,170,36)"/><text x="681.00" y="494.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (12 samples, 0.52%)</title><rect x="674" y="404" width="6" height="15" fill="rgb(227,88,42)"/><text x="677.00" y="414.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c) (2 samples, 0.09%)</title><rect x="682" y="404" width="1" height="15" fill="rgb(249,154,5)"/><text x="685.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (2 samples, 0.09%)</title><rect x="683" y="404" width="1" height="15" fill="rgb(208,226,52)"/><text x="686.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (23 samples, 1.01%)</title><rect x="672" y="388" width="12" height="15" fill="rgb(254,116,8)"/><text x="675.00" y="398.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (2 samples, 0.09%)</title><rect x="684" y="388" width="1" height="15" fill="rgb(235,162,11)"/><text x="687.00" y="398.50"></text></g><g><title>0x7f27b8e95d50 (libc-2.29.so) (5 samples, 0.22%)</title><rect x="709" y="436" width="2" height="15" fill="rgb(252,86,53)"/><text x="712.00" y="446.50"></text></g><g><title>0x7f27b8e95d67 (libc-2.29.so) (4 samples, 0.17%)</title><rect x="711" y="436" width="2" height="15" fill="rgb(246,83,33)"/><text x="714.00" y="446.50"></text></g><g><title>0x7f27b8e95d6f (libc-2.29.so) (7 samples, 0.31%)</title><rect x="713" y="436" width="4" height="15" fill="rgb(221,15,51)"/><text x="716.00" y="446.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (65 samples, 2.84%)</title><rect x="686" y="388" width="34" height="15" fill="rgb(244,104,14)"/><text x="689.00" y="398.50">Np..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (64 samples, 2.80%)</title><rect x="687" y="404" width="33" height="15" fill="rgb(219,95,14)"/><text x="690.00" y="414.50">np..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (60 samples, 2.62%)</title><rect x="689" y="420" width="31" height="15" fill="rgb(232,46,6)"/><text x="692.00" y="430.50">Py..</text></g><g><title>_contig_to_contig (lowlevel_strided_loops.c.src) (5 samples, 0.22%)</title><rect x="717" y="436" width="3" height="15" fill="rgb(216,70,32)"/><text x="720.00" y="446.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (2 samples, 0.09%)</title><rect x="720" y="388" width="1" height="15" fill="rgb(222,201,42)"/><text x="723.00" y="398.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (2 samples, 0.09%)</title><rect x="721" y="388" width="1" height="15" fill="rgb(211,132,49)"/><text x="724.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (119 samples, 5.20%)</title><rect x="661" y="356" width="62" height="15" fill="rgb(234,175,43)"/><text x="664.00" y="366.50">execut..</text></g><g><title>iterator_loop (ufunc_object.c) (115 samples, 5.03%)</title><rect x="663" y="372" width="60" height="15" fill="rgb(206,181,37)"/><text x="666.00" y="382.50">iterat..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (2 samples, 0.09%)</title><rect x="722" y="388" width="1" height="15" fill="rgb(212,59,9)"/><text x="725.00" y="398.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.13%)</title><rect x="723" y="356" width="1" height="15" fill="rgb(231,156,45)"/><text x="726.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (141 samples, 6.16%)</title><rect x="652" y="308" width="73" height="15" fill="rgb(216,190,16)"/><text x="655.00" y="318.50">_run (ml..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (135 samples, 5.90%)</title><rect x="655" y="324" width="70" height="15" fill="rgb(206,63,12)"/><text x="658.00" y="334.50">ufunc_g..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (130 samples, 5.68%)</title><rect x="658" y="340" width="67" height="15" fill="rgb(212,1,17)"/><text x="661.00" y="350.50">PyUFunc..</text></g><g><title>0x7f27b8e95d94 (libc-2.29.so) (7 samples, 0.31%)</title><rect x="739" y="388" width="4" height="15" fill="rgb(219,120,7)"/><text x="742.00" y="398.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (2 samples, 0.09%)</title><rect x="743" y="388" width="1" height="15" fill="rgb(232,49,21)"/><text x="746.00" y="398.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c) (2 samples, 0.09%)</title><rect x="743" y="404" width="1" height="15" fill="rgb(225,99,8)"/><text x="746.00" y="414.50"></text></g><g><title>PyArray_GetStridedCopyFn (lowlevel_strided_loops.c.src) (2 samples, 0.09%)</title><rect x="743" y="420" width="1" height="15" fill="rgb(243,218,43)"/><text x="746.00" y="430.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (4 samples, 0.17%)</title><rect x="744" y="388" width="2" height="15" fill="rgb(207,70,54)"/><text x="747.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (2 samples, 0.09%)</title><rect x="745" y="404" width="1" height="15" fill="rgb(240,55,23)"/><text x="748.00" y="414.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (21 samples, 0.92%)</title><rect x="737" y="356" width="11" height="15" fill="rgb(217,32,19)"/><text x="740.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (21 samples, 0.92%)</title><rect x="737" y="372" width="11" height="15" fill="rgb(213,142,8)"/><text x="740.00" y="382.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (3 samples, 0.13%)</title><rect x="748" y="420" width="2" height="15" fill="rgb(224,116,13)"/><text x="751.00" y="430.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (2 samples, 0.09%)</title><rect x="749" y="436" width="1" height="15" fill="rgb(229,124,34)"/><text x="752.00" y="446.50"></text></g><g><title>PyArray_ENABLEFLAGS (ndarraytypes.h) (2 samples, 0.09%)</title><rect x="749" y="452" width="1" height="15" fill="rgb(240,211,24)"/><text x="752.00" y="462.50"></text></g><g><title>array_alloc (arrayobject.c) (3 samples, 0.13%)</title><rect x="750" y="420" width="2" height="15" fill="rgb(254,168,48)"/><text x="753.00" y="430.50"></text></g><g><title>npy_alloc_cache (alloc.c) (5 samples, 0.22%)</title><rect x="752" y="420" width="2" height="15" fill="rgb(248,12,24)"/><text x="755.00" y="430.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (5 samples, 0.22%)</title><rect x="752" y="436" width="2" height="15" fill="rgb(227,185,38)"/><text x="755.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (4 samples, 0.17%)</title><rect x="752" y="452" width="2" height="15" fill="rgb(207,203,25)"/><text x="755.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="753" y="468" width="1" height="15" fill="rgb(235,9,22)"/><text x="756.00" y="478.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (59 samples, 2.58%)</title><rect x="725" y="308" width="30" height="15" fill="rgb(215,102,43)"/><text x="728.00" y="318.50">_r..</text></g><g><title>array_copy (methods.c) (44 samples, 1.92%)</title><rect x="733" y="324" width="22" height="15" fill="rgb(249,111,31)"/><text x="736.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c) (37 samples, 1.62%)</title><rect x="736" y="340" width="19" height="15" fill="rgb(210,175,27)"/><text x="739.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (15 samples, 0.66%)</title><rect x="748" y="356" width="7" height="15" fill="rgb(221,180,34)"/><text x="751.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (15 samples, 0.66%)</title><rect x="748" y="372" width="7" height="15" fill="rgb(227,67,34)"/><text x="751.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (15 samples, 0.66%)</title><rect x="748" y="388" width="7" height="15" fill="rgb(228,221,50)"/><text x="751.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (15 samples, 0.66%)</title><rect x="748" y="404" width="7" height="15" fill="rgb(209,168,29)"/><text x="751.00" y="414.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (2 samples, 0.09%)</title><rect x="754" y="420" width="1" height="15" fill="rgb(239,154,26)"/><text x="757.00" y="430.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (2 samples, 0.09%)</title><rect x="754" y="436" width="1" height="15" fill="rgb(235,215,14)"/><text x="757.00" y="446.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (4 samples, 0.17%)</title><rect x="764" y="340" width="2" height="15" fill="rgb(219,179,4)"/><text x="767.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (4 samples, 0.17%)</title><rect x="764" y="356" width="2" height="15" fill="rgb(224,157,26)"/><text x="767.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c) (5 samples, 0.22%)</title><rect x="764" y="324" width="3" height="15" fill="rgb(229,112,20)"/><text x="767.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py) (2 samples, 0.09%)</title><rect x="772" y="340" width="1" height="15" fill="rgb(219,128,11)"/><text x="775.00" y="350.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (8 samples, 0.35%)</title><rect x="800" y="388" width="4" height="15" fill="rgb(250,157,35)"/><text x="803.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (4 samples, 0.17%)</title><rect x="804" y="404" width="2" height="15" fill="rgb(233,35,41)"/><text x="807.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (3 samples, 0.13%)</title><rect x="805" y="420" width="1" height="15" fill="rgb(237,221,53)"/><text x="808.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (2 samples, 0.09%)</title><rect x="805" y="436" width="1" height="15" fill="rgb(225,93,23)"/><text x="808.00" y="446.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (4 samples, 0.17%)</title><rect x="809" y="420" width="2" height="15" fill="rgb(240,220,2)"/><text x="812.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (4 samples, 0.17%)</title><rect x="809" y="436" width="2" height="15" fill="rgb(243,217,6)"/><text x="812.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (4 samples, 0.17%)</title><rect x="809" y="452" width="2" height="15" fill="rgb(254,209,29)"/><text x="812.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (3 samples, 0.13%)</title><rect x="814" y="468" width="2" height="15" fill="rgb(251,64,39)"/><text x="817.00" y="478.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (5 samples, 0.22%)</title><rect x="816" y="468" width="2" height="15" fill="rgb(235,191,14)"/><text x="819.00" y="478.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.17%)</title><rect x="816" y="484" width="2" height="15" fill="rgb(252,192,28)"/><text x="819.00" y="494.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (18 samples, 0.79%)</title><rect x="812" y="452" width="10" height="15" fill="rgb(219,76,49)"/><text x="815.00" y="462.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (5 samples, 0.22%)</title><rect x="822" y="452" width="2" height="15" fill="rgb(242,66,34)"/><text x="825.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c) (6 samples, 0.26%)</title><rect x="826" y="516" width="3" height="15" fill="rgb(207,33,39)"/><text x="829.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (6 samples, 0.26%)</title><rect x="826" y="532" width="3" height="15" fill="rgb(223,5,9)"/><text x="829.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (6 samples, 0.26%)</title><rect x="826" y="548" width="3" height="15" fill="rgb(251,145,37)"/><text x="829.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.26%)</title><rect x="826" y="564" width="3" height="15" fill="rgb(225,158,30)"/><text x="829.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (11 samples, 0.48%)</title><rect x="825" y="484" width="6" height="15" fill="rgb(221,157,50)"/><text x="828.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (11 samples, 0.48%)</title><rect x="825" y="500" width="6" height="15" fill="rgb(253,45,22)"/><text x="828.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (4 samples, 0.17%)</title><rect x="829" y="516" width="2" height="15" fill="rgb(231,156,33)"/><text x="832.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (4 samples, 0.17%)</title><rect x="829" y="532" width="2" height="15" fill="rgb(236,36,2)"/><text x="832.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.13%)</title><rect x="830" y="548" width="1" height="15" fill="rgb(227,192,52)"/><text x="833.00" y="558.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (15 samples, 0.66%)</title><rect x="825" y="452" width="8" height="15" fill="rgb(227,140,22)"/><text x="828.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (15 samples, 0.66%)</title><rect x="825" y="468" width="8" height="15" fill="rgb(234,30,30)"/><text x="828.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.13%)</title><rect x="831" y="484" width="2" height="15" fill="rgb(231,105,29)"/><text x="834.00" y="494.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c) (3 samples, 0.13%)</title><rect x="838" y="500" width="1" height="15" fill="rgb(251,12,11)"/><text x="841.00" y="510.50"></text></g><g><title>qsort_r (libc-2.29.so) (2 samples, 0.09%)</title><rect x="838" y="516" width="1" height="15" fill="rgb(213,181,13)"/><text x="841.00" y="526.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (2 samples, 0.09%)</title><rect x="839" y="500" width="1" height="15" fill="rgb(206,155,15)"/><text x="842.00" y="510.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (17 samples, 0.74%)</title><rect x="833" y="452" width="8" height="15" fill="rgb(230,145,52)"/><text x="836.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (14 samples, 0.61%)</title><rect x="834" y="468" width="7" height="15" fill="rgb(246,137,19)"/><text x="837.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (11 samples, 0.48%)</title><rect x="836" y="484" width="5" height="15" fill="rgb(220,218,18)"/><text x="839.00" y="494.50"></text></g><g><title>_aligned_strided_to_contig_size4_srcstride0 (lowlevel_strided_loops.c.src) (2 samples, 0.09%)</title><rect x="840" y="500" width="1" height="15" fill="rgb(234,61,32)"/><text x="843.00" y="510.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (2 samples, 0.09%)</title><rect x="843" y="452" width="1" height="15" fill="rgb(221,114,20)"/><text x="846.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src) (93 samples, 4.06%)</title><rect x="863" y="468" width="48" height="15" fill="rgb(215,81,38)"/><text x="866.00" y="478.50">FLOA..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (48 samples, 2.10%)</title><rect x="886" y="484" width="25" height="15" fill="rgb(233,42,54)"/><text x="889.00" y="494.50">p..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (236 samples, 10.31%)</title><rect x="812" y="436" width="122" height="15" fill="rgb(214,172,17)"/><text x="815.00" y="446.50">PyUFunc_ReduceW..</text></g><g><title>reduce_loop (ufunc_object.c) (174 samples, 7.60%)</title><rect x="844" y="452" width="90" height="15" fill="rgb(214,69,23)"/><text x="847.00" y="462.50">reduce_loo..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (42 samples, 1.84%)</title><rect x="912" y="468" width="22" height="15" fill="rgb(235,69,45)"/><text x="915.00" y="478.50">n..</text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (4 samples, 0.17%)</title><rect x="935" y="452" width="2" height="15" fill="rgb(251,181,37)"/><text x="938.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (4 samples, 0.17%)</title><rect x="935" y="468" width="2" height="15" fill="rgb(226,4,47)"/><text x="938.00" y="478.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (243 samples, 10.62%)</title><rect x="812" y="420" width="125" height="15" fill="rgb(243,141,28)"/><text x="815.00" y="430.50">PyUFunc_Reduce ..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (6 samples, 0.26%)</title><rect x="934" y="436" width="3" height="15" fill="rgb(241,225,41)"/><text x="937.00" y="446.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (332 samples, 14.51%)</title><rect x="767" y="324" width="171" height="15" fill="rgb(231,61,10)"/><text x="770.00" y="334.50">sum (&lt;__array_function..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (320 samples, 13.99%)</title><rect x="773" y="340" width="165" height="15" fill="rgb(235,39,32)"/><text x="776.00" y="350.50">array_implement_array..</text></g><g><title>sum (numpy/core/fromnumeric.py) (311 samples, 13.59%)</title><rect x="777" y="356" width="161" height="15" fill="rgb(248,32,49)"/><text x="780.00" y="366.50">sum (numpy/core/from..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (290 samples, 12.67%)</title><rect x="788" y="372" width="150" height="15" fill="rgb(242,116,44)"/><text x="791.00" y="382.50">_wrapreduction (num..</text></g><g><title>ufunc_reduce (ufunc_object.c) (259 samples, 11.32%)</title><rect x="804" y="388" width="134" height="15" fill="rgb(243,88,40)"/><text x="807.00" y="398.50">ufunc_reduce (uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (255 samples, 11.15%)</title><rect x="806" y="404" width="132" height="15" fill="rgb(240,116,18)"/><text x="809.00" y="414.50">PyUFunc_GenericR..</text></g><g><title>_find_array_prepare (ufunc_object.c) (2 samples, 0.09%)</title><rect x="940" y="356" width="1" height="15" fill="rgb(205,209,37)"/><text x="943.00" y="366.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (2 samples, 0.09%)</title><rect x="941" y="356" width="1" height="15" fill="rgb(228,174,5)"/><text x="944.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (6 samples, 0.26%)</title><rect x="943" y="372" width="3" height="15" fill="rgb(247,224,32)"/><text x="946.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (6 samples, 0.26%)</title><rect x="943" y="388" width="3" height="15" fill="rgb(218,92,15)"/><text x="946.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (2 samples, 0.09%)</title><rect x="945" y="404" width="1" height="15" fill="rgb(214,71,28)"/><text x="948.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (2 samples, 0.09%)</title><rect x="945" y="420" width="1" height="15" fill="rgb(243,146,3)"/><text x="948.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.09%)</title><rect x="945" y="436" width="1" height="15" fill="rgb(230,98,50)"/><text x="948.00" y="446.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (2 samples, 0.09%)</title><rect x="946" y="388" width="1" height="15" fill="rgb(237,8,21)"/><text x="949.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h) (4 samples, 0.17%)</title><rect x="949" y="404" width="2" height="15" fill="rgb(205,195,39)"/><text x="952.00" y="414.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (4 samples, 0.17%)</title><rect x="951" y="404" width="2" height="15" fill="rgb(214,225,12)"/><text x="954.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (22 samples, 0.96%)</title><rect x="942" y="356" width="12" height="15" fill="rgb(231,106,11)"/><text x="945.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (15 samples, 0.66%)</title><rect x="946" y="372" width="8" height="15" fill="rgb(254,109,12)"/><text x="949.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src) (13 samples, 0.57%)</title><rect x="947" y="388" width="7" height="15" fill="rgb(209,59,27)"/><text x="950.00" y="398.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (2 samples, 0.09%)</title><rect x="956" y="388" width="1" height="15" fill="rgb(218,14,40)"/><text x="959.00" y="398.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (8 samples, 0.35%)</title><rect x="954" y="356" width="4" height="15" fill="rgb(207,29,35)"/><text x="957.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (4 samples, 0.17%)</title><rect x="956" y="372" width="2" height="15" fill="rgb(248,214,26)"/><text x="959.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (396 samples, 17.31%)</title><rect x="755" y="308" width="204" height="15" fill="rgb(208,106,43)"/><text x="758.00" y="318.50">_run (mlprodict/onnxrt/ops..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (42 samples, 1.84%)</title><rect x="938" y="324" width="21" height="15" fill="rgb(252,36,1)"/><text x="941.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (40 samples, 1.75%)</title><rect x="939" y="340" width="20" height="15" fill="rgb(232,159,28)"/><text x="942.00" y="350.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (3 samples, 0.13%)</title><rect x="958" y="356" width="1" height="15" fill="rgb(249,174,40)"/><text x="961.00" y="366.50"></text></g><g><title>array_descr_get (getset.c) (2 samples, 0.09%)</title><rect x="959" y="308" width="2" height="15" fill="rgb(230,111,54)"/><text x="962.00" y="318.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (900 samples, 39.34%)</title><rect x="497" y="244" width="465" height="15" fill="rgb(216,172,43)"/><text x="500.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (835 samples, 36.49%)</title><rect x="531" y="260" width="431" height="15" fill="rgb(251,103,19)"/><text x="534.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (654 samples, 28.58%)</title><rect x="624" y="276" width="338" height="15" fill="rgb(240,38,44)"/><text x="627.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (620 samples, 27.10%)</title><rect x="642" y="292" width="320" height="15" fill="rgb(238,99,32)"/><text x="645.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>arraydescr_richcompare (descriptor.c) (2 samples, 0.09%)</title><rect x="961" y="308" width="1" height="15" fill="rgb(206,10,18)"/><text x="964.00" y="318.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (923 samples, 40.34%)</title><rect x="487" y="228" width="476" height="15" fill="rgb(250,98,16)"/><text x="490.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.13%)</title><rect x="962" y="244" width="1" height="15" fill="rgb(205,204,0)"/><text x="965.00" y="254.50"></text></g><g><title>npy_free_cache (alloc.c) (2 samples, 0.09%)</title><rect x="962" y="260" width="1" height="15" fill="rgb(228,90,22)"/><text x="965.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (6 samples, 0.26%)</title><rect x="963" y="276" width="3" height="15" fill="rgb(238,87,34)"/><text x="966.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.26%)</title><rect x="963" y="292" width="3" height="15" fill="rgb(218,25,50)"/><text x="966.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (6 samples, 0.26%)</title><rect x="963" y="308" width="3" height="15" fill="rgb(238,11,46)"/><text x="966.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (5 samples, 0.22%)</title><rect x="964" y="324" width="2" height="15" fill="rgb(226,189,12)"/><text x="967.00" y="334.50"></text></g><g><title>0x7f27b8e95d94 (libc-2.29.so) (7 samples, 0.31%)</title><rect x="966" y="388" width="4" height="15" fill="rgb(241,119,9)"/><text x="969.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (1,058 samples, 46.24%)</title><rect x="425" y="212" width="546" height="15" fill="rgb(224,15,44)"/><text x="428.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (15 samples, 0.66%)</title><rect x="963" y="228" width="8" height="15" fill="rgb(213,34,29)"/><text x="966.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (15 samples, 0.66%)</title><rect x="963" y="244" width="8" height="15" fill="rgb(235,133,31)"/><text x="966.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (15 samples, 0.66%)</title><rect x="963" y="260" width="8" height="15" fill="rgb(234,189,4)"/><text x="966.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (9 samples, 0.39%)</title><rect x="966" y="276" width="5" height="15" fill="rgb(235,25,0)"/><text x="969.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 0.39%)</title><rect x="966" y="292" width="5" height="15" fill="rgb(246,52,0)"/><text x="969.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (9 samples, 0.39%)</title><rect x="966" y="308" width="5" height="15" fill="rgb(247,7,7)"/><text x="969.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (9 samples, 0.39%)</title><rect x="966" y="324" width="5" height="15" fill="rgb(253,129,44)"/><text x="969.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (9 samples, 0.39%)</title><rect x="966" y="340" width="5" height="15" fill="rgb(250,32,30)"/><text x="969.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (9 samples, 0.39%)</title><rect x="966" y="356" width="5" height="15" fill="rgb(229,139,31)"/><text x="969.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (9 samples, 0.39%)</title><rect x="966" y="372" width="5" height="15" fill="rgb(219,73,29)"/><text x="969.00" y="382.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src) (16 samples, 0.70%)</title><rect x="976" y="372" width="8" height="15" fill="rgb(232,162,31)"/><text x="979.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c) (15 samples, 0.66%)</title><rect x="977" y="388" width="7" height="15" fill="rgb(230,199,25)"/><text x="980.00" y="398.50"></text></g><g><title>amedian3_swap_float (selection.c.src) (9 samples, 0.39%)</title><rect x="988" y="388" width="4" height="15" fill="rgb(237,5,45)"/><text x="991.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h) (4 samples, 0.17%)</title><rect x="990" y="404" width="2" height="15" fill="rgb(213,223,8)"/><text x="993.00" y="414.50"></text></g><g><title>aunguarded_partition_float (selection.c.src) (104 samples, 4.55%)</title><rect x="992" y="388" width="54" height="15" fill="rgb(213,200,11)"/><text x="995.00" y="398.50">aungu..</text></g><g><title>FLOAT_LT (npysort_common.h) (62 samples, 2.71%)</title><rect x="1014" y="404" width="32" height="15" fill="rgb(231,214,15)"/><text x="1017.00" y="414.50">FL..</text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (144 samples, 6.29%)</title><rect x="972" y="260" width="75" height="15" fill="rgb(227,94,42)"/><text x="975.00" y="270.50">argparti..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (144 samples, 6.29%)</title><rect x="972" y="276" width="75" height="15" fill="rgb(217,151,51)"/><text x="975.00" y="286.50">array_im..</text></g><g><title>argpartition (numpy/core/fromnumeric.py) (144 samples, 6.29%)</title><rect x="972" y="292" width="75" height="15" fill="rgb(252,163,19)"/><text x="975.00" y="302.50">argparti..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (144 samples, 6.29%)</title><rect x="972" y="308" width="75" height="15" fill="rgb(239,120,5)"/><text x="975.00" y="318.50">_wrapfun..</text></g><g><title>array_argpartition (methods.c) (144 samples, 6.29%)</title><rect x="972" y="324" width="75" height="15" fill="rgb(246,131,35)"/><text x="975.00" y="334.50">array_ar..</text></g><g><title>PyArray_ArgPartition (item_selection.c) (144 samples, 6.29%)</title><rect x="972" y="340" width="75" height="15" fill="rgb(242,92,17)"/><text x="975.00" y="350.50">PyArray_..</text></g><g><title>_new_argsortlike (item_selection.c) (143 samples, 6.25%)</title><rect x="973" y="356" width="74" height="15" fill="rgb(249,164,54)"/><text x="976.00" y="366.50">_new_arg..</text></g><g><title>aintroselect_float (selection.c.src) (121 samples, 5.29%)</title><rect x="984" y="372" width="63" height="15" fill="rgb(218,171,15)"/><text x="987.00" y="382.50">aintro..</text></g><g><title>PyArray_ArgSort (item_selection.c) (4 samples, 0.17%)</title><rect x="1047" y="340" width="2" height="15" fill="rgb(219,7,44)"/><text x="1050.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (4 samples, 0.17%)</title><rect x="1047" y="356" width="2" height="15" fill="rgb(240,226,50)"/><text x="1050.00" y="366.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (6 samples, 0.26%)</title><rect x="1047" y="260" width="3" height="15" fill="rgb(224,1,1)"/><text x="1050.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.26%)</title><rect x="1047" y="276" width="3" height="15" fill="rgb(225,221,9)"/><text x="1050.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (6 samples, 0.26%)</title><rect x="1047" y="292" width="3" height="15" fill="rgb(248,84,29)"/><text x="1050.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (6 samples, 0.26%)</title><rect x="1047" y="308" width="3" height="15" fill="rgb(221,72,11)"/><text x="1050.00" y="318.50"></text></g><g><title>array_argsort (methods.c) (6 samples, 0.26%)</title><rect x="1047" y="324" width="3" height="15" fill="rgb(225,26,32)"/><text x="1050.00" y="334.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (8 samples, 0.35%)</title><rect x="1050" y="276" width="4" height="15" fill="rgb(213,197,15)"/><text x="1053.00" y="286.50"></text></g><g><title>check_and_adjust_index (common.h) (3 samples, 0.13%)</title><rect x="1052" y="292" width="2" height="15" fill="rgb(250,141,34)"/><text x="1055.00" y="302.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (4 samples, 0.17%)</title><rect x="1054" y="292" width="2" height="15" fill="rgb(213,138,35)"/><text x="1057.00" y="302.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (4 samples, 0.17%)</title><rect x="1054" y="308" width="2" height="15" fill="rgb(240,81,0)"/><text x="1057.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (4 samples, 0.17%)</title><rect x="1054" y="324" width="2" height="15" fill="rgb(245,223,48)"/><text x="1057.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (3 samples, 0.13%)</title><rect x="1054" y="340" width="2" height="15" fill="rgb(249,163,22)"/><text x="1057.00" y="350.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (5 samples, 0.22%)</title><rect x="1054" y="276" width="2" height="15" fill="rgb(235,88,15)"/><text x="1057.00" y="286.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (13 samples, 0.57%)</title><rect x="1057" y="276" width="7" height="15" fill="rgb(214,194,1)"/><text x="1060.00" y="286.50"></text></g><g><title>array_subscript (mapping.c) (28 samples, 1.22%)</title><rect x="1050" y="260" width="14" height="15" fill="rgb(229,135,17)"/><text x="1053.00" y="270.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (183 samples, 8.00%)</title><rect x="971" y="228" width="94" height="15" fill="rgb(235,143,31)"/><text x="974.00" y="238.50">_common_run..</text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (181 samples, 7.91%)</title><rect x="972" y="244" width="93" height="15" fill="rgb(216,187,7)"/><text x="975.00" y="254.50">topk_sorted..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (184 samples, 8.04%)</title><rect x="971" y="212" width="95" height="15" fill="rgb(209,74,37)"/><text x="974.00" y="222.50">_run (mlpro..</text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.09%)</title><rect x="1066" y="212" width="1" height="15" fill="rgb(224,10,4)"/><text x="1069.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (2 samples, 0.09%)</title><rect x="1067" y="228" width="1" height="15" fill="rgb(223,22,2)"/><text x="1070.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (2 samples, 0.09%)</title><rect x="1067" y="244" width="1" height="15" fill="rgb(254,216,54)"/><text x="1070.00" y="254.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py) (2 samples, 0.09%)</title><rect x="1067" y="260" width="1" height="15" fill="rgb(225,188,21)"/><text x="1070.00" y="270.50"></text></g><g><title>FLOAT_add (loops.c.src) (3 samples, 0.13%)</title><rect x="1071" y="388" width="1" height="15" fill="rgb(242,142,10)"/><text x="1074.00" y="398.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (2 samples, 0.09%)</title><rect x="1071" y="404" width="1" height="15" fill="rgb(245,96,15)"/><text x="1074.00" y="414.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (12 samples, 0.52%)</title><rect x="1069" y="228" width="6" height="15" fill="rgb(251,92,35)"/><text x="1072.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (12 samples, 0.52%)</title><rect x="1069" y="244" width="6" height="15" fill="rgb(232,156,15)"/><text x="1072.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (12 samples, 0.52%)</title><rect x="1069" y="260" width="6" height="15" fill="rgb(233,74,16)"/><text x="1072.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (12 samples, 0.52%)</title><rect x="1069" y="276" width="6" height="15" fill="rgb(223,78,52)"/><text x="1072.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (12 samples, 0.52%)</title><rect x="1069" y="292" width="6" height="15" fill="rgb(229,127,14)"/><text x="1072.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (12 samples, 0.52%)</title><rect x="1069" y="308" width="6" height="15" fill="rgb(238,66,1)"/><text x="1072.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (11 samples, 0.48%)</title><rect x="1069" y="324" width="6" height="15" fill="rgb(218,33,44)"/><text x="1072.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (10 samples, 0.44%)</title><rect x="1070" y="340" width="5" height="15" fill="rgb(249,118,32)"/><text x="1073.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (10 samples, 0.44%)</title><rect x="1070" y="356" width="5" height="15" fill="rgb(241,195,48)"/><text x="1073.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c) (10 samples, 0.44%)</title><rect x="1070" y="372" width="5" height="15" fill="rgb(213,104,36)"/><text x="1073.00" y="382.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (5 samples, 0.22%)</title><rect x="1072" y="388" width="3" height="15" fill="rgb(238,6,44)"/><text x="1075.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py) (11 samples, 0.48%)</title><rect x="1075" y="228" width="6" height="15" fill="rgb(249,93,25)"/><text x="1078.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (11 samples, 0.48%)</title><rect x="1075" y="244" width="6" height="15" fill="rgb(250,97,47)"/><text x="1078.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (11 samples, 0.48%)</title><rect x="1075" y="260" width="6" height="15" fill="rgb(244,106,4)"/><text x="1078.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (11 samples, 0.48%)</title><rect x="1075" y="276" width="6" height="15" fill="rgb(247,88,52)"/><text x="1078.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (10 samples, 0.44%)</title><rect x="1076" y="292" width="5" height="15" fill="rgb(247,62,11)"/><text x="1079.00" y="302.50"></text></g><g><title>FLOAT_sqrt (loops.c.src) (10 samples, 0.44%)</title><rect x="1076" y="308" width="5" height="15" fill="rgb(231,221,25)"/><text x="1079.00" y="318.50"></text></g><g><title>run_unary_simd_sqrt_FLOAT (simd.inc.src) (10 samples, 0.44%)</title><rect x="1076" y="324" width="5" height="15" fill="rgb(212,204,30)"/><text x="1079.00" y="334.50"></text></g><g><title>sse2_sqrt_FLOAT (simd.inc.src) (10 samples, 0.44%)</title><rect x="1076" y="340" width="5" height="15" fill="rgb(244,147,16)"/><text x="1079.00" y="350.50"></text></g><g><title>_mm_store_ps (xmmintrin.h) (10 samples, 0.44%)</title><rect x="1076" y="356" width="5" height="15" fill="rgb(205,74,18)"/><text x="1079.00" y="366.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,366 samples, 59.70%)</title><rect x="377" y="164" width="704" height="15" fill="rgb(221,52,2)"/><text x="380.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,365 samples, 59.66%)</title><rect x="377" y="180" width="704" height="15" fill="rgb(244,5,3)"/><text x="380.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,355 samples, 59.22%)</title><rect x="382" y="196" width="699" height="15" fill="rgb(221,47,5)"/><text x="385.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (28 samples, 1.22%)</title><rect x="1067" y="212" width="14" height="15" fill="rgb(209,41,17)"/><text x="1070.00" y="222.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py) (1,368 samples, 59.79%)</title><rect x="376" y="100" width="706" height="15" fill="rgb(227,108,27)"/><text x="379.00" y="110.50">profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (1,368 samples, 59.79%)</title><rect x="376" y="116" width="706" height="15" fill="rgb(247,56,34)"/><text x="379.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (1,368 samples, 59.79%)</title><rect x="376" y="132" width="706" height="15" fill="rgb(227,19,39)"/><text x="379.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,368 samples, 59.79%)</title><rect x="376" y="148" width="706" height="15" fill="rgb(207,173,51)"/><text x="379.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py) (1,369 samples, 59.83%)</title><rect x="376" y="68" width="706" height="15" fill="rgb(213,111,29)"/><text x="379.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py) (1,369 samples, 59.83%)</title><rect x="376" y="84" width="706" height="15" fill="rgb(227,47,8)"/><text x="379.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>_num_samples (sklearn/utils/validation.py) (2 samples, 0.09%)</title><rect x="1085" y="164" width="1" height="15" fill="rgb(248,55,22)"/><text x="1088.00" y="174.50"></text></g><g><title>array_assign_subscript (mapping.c) (3 samples, 0.13%)</title><rect x="1087" y="164" width="1" height="15" fill="rgb(213,73,24)"/><text x="1090.00" y="174.50"></text></g><g><title>PyArray_MapIterCheckIndices (mapping.c) (2 samples, 0.09%)</title><rect x="1089" y="180" width="1" height="15" fill="rgb(205,30,13)"/><text x="1092.00" y="190.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src) (7 samples, 0.31%)</title><rect x="1090" y="180" width="4" height="15" fill="rgb(236,112,53)"/><text x="1093.00" y="190.50"></text></g><g><title>array_subscript (mapping.c) (11 samples, 0.48%)</title><rect x="1089" y="164" width="6" height="15" fill="rgb(206,216,40)"/><text x="1092.00" y="174.50"></text></g><g><title>array_sum (methods.c) (2 samples, 0.09%)</title><rect x="1095" y="164" width="1" height="15" fill="rgb(240,8,29)"/><text x="1098.00" y="174.50"></text></g><g><title>forward_ndarray_method (methods.c) (2 samples, 0.09%)</title><rect x="1095" y="180" width="1" height="15" fill="rgb(211,98,43)"/><text x="1098.00" y="190.50"></text></g><g><title>_sum (numpy/core/_methods.py) (2 samples, 0.09%)</title><rect x="1095" y="196" width="1" height="15" fill="rgb(246,215,7)"/><text x="1098.00" y="206.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (2 samples, 0.09%)</title><rect x="1095" y="212" width="1" height="15" fill="rgb(238,212,13)"/><text x="1098.00" y="222.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (2 samples, 0.09%)</title><rect x="1095" y="228" width="1" height="15" fill="rgb(236,75,46)"/><text x="1098.00" y="238.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (2 samples, 0.09%)</title><rect x="1095" y="244" width="1" height="15" fill="rgb(236,23,3)"/><text x="1098.00" y="254.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (2 samples, 0.09%)</title><rect x="1095" y="260" width="1" height="15" fill="rgb(246,21,18)"/><text x="1098.00" y="270.50"></text></g><g><title>reduce_loop (ufunc_object.c) (2 samples, 0.09%)</title><rect x="1095" y="276" width="1" height="15" fill="rgb(216,10,53)"/><text x="1098.00" y="286.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (2 samples, 0.09%)</title><rect x="1096" y="180" width="1" height="15" fill="rgb(236,18,44)"/><text x="1099.00" y="190.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (2 samples, 0.09%)</title><rect x="1097" y="180" width="1" height="15" fill="rgb(229,116,1)"/><text x="1100.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (6 samples, 0.26%)</title><rect x="1096" y="164" width="3" height="15" fill="rgb(242,156,12)"/><text x="1099.00" y="174.50"></text></g><g><title>_initialize_backend (joblib/parallel.py) (3 samples, 0.13%)</title><rect x="1100" y="196" width="2" height="15" fill="rgb(210,227,39)"/><text x="1103.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (2 samples, 0.09%)</title><rect x="1103" y="372" width="1" height="15" fill="rgb(243,64,52)"/><text x="1106.00" y="382.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (2 samples, 0.09%)</title><rect x="1105" y="404" width="1" height="15" fill="rgb(234,195,37)"/><text x="1108.00" y="414.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.09%)</title><rect x="1105" y="420" width="1" height="15" fill="rgb(207,121,32)"/><text x="1108.00" y="430.50"></text></g><g><title>PyArray_FromArray (ctors.c) (2 samples, 0.09%)</title><rect x="1105" y="436" width="1" height="15" fill="rgb(210,213,36)"/><text x="1108.00" y="446.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.09%)</title><rect x="1105" y="452" width="1" height="15" fill="rgb(218,221,13)"/><text x="1108.00" y="462.50"></text></g><g><title>0x7f279328932c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.31%)</title><rect x="1103" y="324" width="3" height="15" fill="rgb(227,128,43)"/><text x="1106.00" y="334.50"></text></g><g><title>0x7f27932545cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.31%)</title><rect x="1103" y="340" width="3" height="15" fill="rgb(220,35,5)"/><text x="1106.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (7 samples, 0.31%)</title><rect x="1103" y="356" width="3" height="15" fill="rgb(231,137,13)"/><text x="1106.00" y="366.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (4 samples, 0.17%)</title><rect x="1104" y="372" width="2" height="15" fill="rgb(243,126,33)"/><text x="1107.00" y="382.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 0.17%)</title><rect x="1104" y="388" width="2" height="15" fill="rgb(230,32,53)"/><text x="1107.00" y="398.50"></text></g><g><title>0x7f2793289680 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1106" y="324" width="1" height="15" fill="rgb(208,81,44)"/><text x="1109.00" y="334.50"></text></g><g><title>0x7f279327d4a2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1106" y="340" width="1" height="15" fill="rgb(246,16,54)"/><text x="1109.00" y="350.50"></text></g><g><title>0x7f2793284877 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1107" y="356" width="2" height="15" fill="rgb(234,192,36)"/><text x="1110.00" y="366.50"></text></g><g><title>0x7f2793284071 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1107" y="372" width="2" height="15" fill="rgb(217,149,38)"/><text x="1110.00" y="382.50"></text></g><g><title>0x7f27932837e2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1107" y="388" width="2" height="15" fill="rgb(215,155,45)"/><text x="1110.00" y="398.50"></text></g><g><title>0x7f279325805e (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1107" y="404" width="2" height="15" fill="rgb(225,57,52)"/><text x="1110.00" y="414.50"></text></g><g><title>array_getbuffer (buffer.c) (3 samples, 0.13%)</title><rect x="1107" y="420" width="2" height="15" fill="rgb(227,12,26)"/><text x="1110.00" y="430.50"></text></g><g><title>_buffer_get_info (buffer.c) (2 samples, 0.09%)</title><rect x="1108" y="436" width="1" height="15" fill="rgb(211,160,15)"/><text x="1111.00" y="446.50"></text></g><g><title>0x7f2793289708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.22%)</title><rect x="1107" y="324" width="3" height="15" fill="rgb(249,59,27)"/><text x="1110.00" y="334.50"></text></g><g><title>0x7f27932545cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.22%)</title><rect x="1107" y="340" width="3" height="15" fill="rgb(219,191,49)"/><text x="1110.00" y="350.50"></text></g><g><title>0x7f279328573a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1109" y="356" width="1" height="15" fill="rgb(209,93,20)"/><text x="1112.00" y="366.50"></text></g><g><title>0x7f2793284ab9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1109" y="372" width="1" height="15" fill="rgb(237,10,25)"/><text x="1112.00" y="382.50"></text></g><g><title>full (numpy/core/numeric.py) (2 samples, 0.09%)</title><rect x="1109" y="388" width="1" height="15" fill="rgb(249,88,26)"/><text x="1112.00" y="398.50"></text></g><g><title>0x7f2793289a72 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1110" y="324" width="2" height="15" fill="rgb(252,128,22)"/><text x="1113.00" y="334.50"></text></g><g><title>0x7f27932545cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1110" y="340" width="2" height="15" fill="rgb(235,89,11)"/><text x="1113.00" y="350.50"></text></g><g><title>0x7f279326085a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1110" y="356" width="2" height="15" fill="rgb(229,228,37)"/><text x="1113.00" y="366.50"></text></g><g><title>0x7f2793269b7d (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1111" y="372" width="1" height="15" fill="rgb(250,133,44)"/><text x="1114.00" y="382.50"></text></g><g><title>0x7f279328b0dd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.35%)</title><rect x="1112" y="324" width="4" height="15" fill="rgb(230,40,41)"/><text x="1115.00" y="334.50"></text></g><g><title>0x7f279325ffc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.22%)</title><rect x="1114" y="340" width="2" height="15" fill="rgb(248,228,44)"/><text x="1117.00" y="350.50"></text></g><g><title>pow (libm-2.29.so) (5 samples, 0.22%)</title><rect x="1114" y="356" width="2" height="15" fill="rgb(242,197,51)"/><text x="1117.00" y="366.50"></text></g><g><title>0x7f279325ffb9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1116" y="356" width="1" height="15" fill="rgb(217,181,49)"/><text x="1119.00" y="366.50"></text></g><g><title>0x7f2793262426 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.39%)</title><rect x="1116" y="340" width="5" height="15" fill="rgb(250,178,51)"/><text x="1119.00" y="350.50"></text></g><g><title>0x7f279325ffc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.31%)</title><rect x="1117" y="356" width="4" height="15" fill="rgb(227,159,10)"/><text x="1120.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (7 samples, 0.31%)</title><rect x="1117" y="372" width="4" height="15" fill="rgb(221,32,21)"/><text x="1120.00" y="382.50"></text></g><g><title>0x7f279325ffb3 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1121" y="356" width="1" height="15" fill="rgb(251,11,31)"/><text x="1124.00" y="366.50"></text></g><g><title>0x7f2793262454 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.44%)</title><rect x="1121" y="340" width="5" height="15" fill="rgb(217,135,17)"/><text x="1124.00" y="350.50"></text></g><g><title>0x7f279325ffc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.31%)</title><rect x="1122" y="356" width="4" height="15" fill="rgb(254,51,8)"/><text x="1125.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (7 samples, 0.31%)</title><rect x="1122" y="372" width="4" height="15" fill="rgb(253,195,43)"/><text x="1125.00" y="382.50"></text></g><g><title>0x7f27932622ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1128" y="356" width="1" height="15" fill="rgb(208,38,51)"/><text x="1131.00" y="366.50"></text></g><g><title>0x7f27932622b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1129" y="356" width="1" height="15" fill="rgb(246,156,32)"/><text x="1132.00" y="366.50"></text></g><g><title>0x7f27932622bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.26%)</title><rect x="1130" y="356" width="3" height="15" fill="rgb(235,113,26)"/><text x="1133.00" y="366.50"></text></g><g><title>0x7f27932622fb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1134" y="356" width="1" height="15" fill="rgb(240,151,49)"/><text x="1137.00" y="366.50"></text></g><g><title>0x7f2793260a50 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1137" y="372" width="1" height="15" fill="rgb(250,52,51)"/><text x="1140.00" y="382.50"></text></g><g><title>0x7f2793262494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (25 samples, 1.09%)</title><rect x="1126" y="340" width="13" height="15" fill="rgb(238,119,9)"/><text x="1129.00" y="350.50"></text></g><g><title>0x7f2793262323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.31%)</title><rect x="1135" y="356" width="4" height="15" fill="rgb(241,61,5)"/><text x="1138.00" y="366.50"></text></g><g><title>0x7f27932624bd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.17%)</title><rect x="1139" y="340" width="2" height="15" fill="rgb(247,10,26)"/><text x="1142.00" y="350.50"></text></g><g><title>0x7f279326226f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1141" y="356" width="2" height="15" fill="rgb(224,221,20)"/><text x="1144.00" y="366.50"></text></g><g><title>0x7f27932622ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.39%)</title><rect x="1144" y="356" width="4" height="15" fill="rgb(206,228,36)"/><text x="1147.00" y="366.50"></text></g><g><title>0x7f27932622b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.22%)</title><rect x="1148" y="356" width="3" height="15" fill="rgb(228,135,45)"/><text x="1151.00" y="366.50"></text></g><g><title>0x7f27932622bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (16 samples, 0.70%)</title><rect x="1151" y="356" width="8" height="15" fill="rgb(205,38,45)"/><text x="1154.00" y="366.50"></text></g><g><title>0x7f27932622c7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1159" y="356" width="2" height="15" fill="rgb(253,124,3)"/><text x="1162.00" y="366.50"></text></g><g><title>0x7f27932622e7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1161" y="356" width="1" height="15" fill="rgb(248,200,31)"/><text x="1164.00" y="366.50"></text></g><g><title>0x7f27932622fb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1162" y="356" width="1" height="15" fill="rgb(233,115,37)"/><text x="1165.00" y="366.50"></text></g><g><title>0x7f27932609cb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.09%)</title><rect x="1163" y="372" width="1" height="15" fill="rgb(226,76,12)"/><text x="1166.00" y="382.50"></text></g><g><title>0x7f2793262323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.44%)</title><rect x="1163" y="356" width="5" height="15" fill="rgb(218,1,0)"/><text x="1166.00" y="366.50"></text></g><g><title>0x7f279326250f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (56 samples, 2.45%)</title><rect x="1141" y="340" width="29" height="15" fill="rgb(222,68,7)"/><text x="1144.00" y="350.50">0x..</text></g><g><title>0x7f27932622bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.13%)</title><rect x="1171" y="356" width="2" height="15" fill="rgb(249,143,30)"/><text x="1174.00" y="366.50"></text></g><g><title>0x7f279328b100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (112 samples, 4.90%)</title><rect x="1116" y="324" width="58" height="15" fill="rgb(216,139,9)"/><text x="1119.00" y="334.50">0x7f27..</text></g><g><title>0x7f2793262538 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.35%)</title><rect x="1170" y="340" width="4" height="15" fill="rgb(238,25,5)"/><text x="1173.00" y="350.50"></text></g><g><title>DOUBLE_sqrt (loops.c.src) (5 samples, 0.22%)</title><rect x="1174" y="468" width="3" height="15" fill="rgb(241,212,46)"/><text x="1177.00" y="478.50"></text></g><g><title>run_unary_simd_sqrt_DOUBLE (simd.inc.src) (5 samples, 0.22%)</title><rect x="1174" y="484" width="3" height="15" fill="rgb(235,124,45)"/><text x="1177.00" y="494.50"></text></g><g><title>sse2_sqrt_DOUBLE (simd.inc.src) (5 samples, 0.22%)</title><rect x="1174" y="500" width="3" height="15" fill="rgb(252,55,35)"/><text x="1177.00" y="510.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (5 samples, 0.22%)</title><rect x="1174" y="516" width="3" height="15" fill="rgb(237,225,29)"/><text x="1177.00" y="526.50"></text></g><g><title>_dispatch (joblib/parallel.py) (144 samples, 6.29%)</title><rect x="1103" y="212" width="74" height="15" fill="rgb(218,148,48)"/><text x="1106.00" y="222.50">_dispatc..</text></g><g><title>apply_async (joblib/_parallel_backends.py) (144 samples, 6.29%)</title><rect x="1103" y="228" width="74" height="15" fill="rgb(227,26,38)"/><text x="1106.00" y="238.50">apply_as..</text></g><g><title>__init__ (joblib/_parallel_backends.py) (144 samples, 6.29%)</title><rect x="1103" y="244" width="74" height="15" fill="rgb(230,160,0)"/><text x="1106.00" y="254.50">__init__..</text></g><g><title>__call__ (joblib/parallel.py) (144 samples, 6.29%)</title><rect x="1103" y="260" width="74" height="15" fill="rgb(250,156,50)"/><text x="1106.00" y="270.50">__call__..</text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (144 samples, 6.29%)</title><rect x="1103" y="276" width="74" height="15" fill="rgb(247,81,17)"/><text x="1106.00" y="286.50">&lt;listcom..</text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py) (144 samples, 6.29%)</title><rect x="1103" y="292" width="74" height="15" fill="rgb(249,132,40)"/><text x="1106.00" y="302.50">_tree_qu..</text></g><g><title>0x7f279328de14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (144 samples, 6.29%)</title><rect x="1103" y="308" width="74" height="15" fill="rgb(246,33,26)"/><text x="1106.00" y="318.50">0x7f2793..</text></g><g><title>0x7f279328c8cc (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.26%)</title><rect x="1174" y="324" width="3" height="15" fill="rgb(253,133,8)"/><text x="1177.00" y="334.50"></text></g><g><title>0x7f2793255d53 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.26%)</title><rect x="1174" y="340" width="3" height="15" fill="rgb(207,16,23)"/><text x="1177.00" y="350.50"></text></g><g><title>0x7f27936ece62 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.26%)</title><rect x="1174" y="356" width="3" height="15" fill="rgb(213,134,5)"/><text x="1177.00" y="366.50"></text></g><g><title>0x7f27936ce654 (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.26%)</title><rect x="1174" y="372" width="3" height="15" fill="rgb(247,122,43)"/><text x="1177.00" y="382.50"></text></g><g><title>0x7f27936d5eaf (sklearn/neighbors/_dist_metrics.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.26%)</title><rect x="1174" y="388" width="3" height="15" fill="rgb(227,163,2)"/><text x="1177.00" y="398.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 0.26%)</title><rect x="1174" y="404" width="3" height="15" fill="rgb(212,150,28)"/><text x="1177.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (6 samples, 0.26%)</title><rect x="1174" y="420" width="3" height="15" fill="rgb(207,130,18)"/><text x="1177.00" y="430.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (6 samples, 0.26%)</title><rect x="1174" y="436" width="3" height="15" fill="rgb(226,70,10)"/><text x="1177.00" y="446.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (6 samples, 0.26%)</title><rect x="1174" y="452" width="3" height="15" fill="rgb(254,37,21)"/><text x="1177.00" y="462.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (2 samples, 0.09%)</title><rect x="1178" y="212" width="1" height="15" fill="rgb(207,181,39)"/><text x="1181.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (150 samples, 6.56%)</title><rect x="1102" y="196" width="77" height="15" fill="rgb(215,2,16)"/><text x="1105.00" y="206.50">dispatch..</text></g><g><title>__call__ (joblib/parallel.py) (156 samples, 6.82%)</title><rect x="1099" y="180" width="81" height="15" fill="rgb(215,37,0)"/><text x="1102.00" y="190.50">__call__ ..</text></g><g><title>__init__ (joblib/parallel.py) (2 samples, 0.09%)</title><rect x="1180" y="180" width="1" height="15" fill="rgb(215,156,32)"/><text x="1183.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (4 samples, 0.17%)</title><rect x="1182" y="180" width="2" height="15" fill="rgb(213,207,54)"/><text x="1185.00" y="190.50"></text></g><g><title>update_wrapper (functools.py) (2 samples, 0.09%)</title><rect x="1184" y="196" width="1" height="15" fill="rgb(227,192,53)"/><text x="1187.00" y="206.50"></text></g><g><title>delayed (joblib/parallel.py) (4 samples, 0.17%)</title><rect x="1184" y="180" width="2" height="15" fill="rgb(232,188,17)"/><text x="1187.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (171 samples, 7.47%)</title><rect x="1099" y="164" width="88" height="15" fill="rgb(236,124,34)"/><text x="1102.00" y="174.50">kneighbors..</text></g><g><title>all (2,288 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(220,5,5)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py) (2,288 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(237,95,31)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py) (208 samples, 9.09%)</title><rect x="1082" y="68" width="108" height="15" fill="rgb(234,162,36)"/><text x="1085.00" y="78.50">profile_skl (..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py) (208 samples, 9.09%)</title><rect x="1082" y="84" width="108" height="15" fill="rgb(225,24,40)"/><text x="1085.00" y="94.50">setup_profile..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_4_12_float_.py) (208 samples, 9.09%)</title><rect x="1082" y="100" width="108" height="15" fill="rgb(236,19,36)"/><text x="1085.00" y="110.50">profile (benc..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (208 samples, 9.09%)</title><rect x="1082" y="116" width="108" height="15" fill="rgb(214,168,21)"/><text x="1085.00" y="126.50">time_predict ..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (208 samples, 9.09%)</title><rect x="1082" y="132" width="108" height="15" fill="rgb(205,176,4)"/><text x="1085.00" y="142.50">&lt;lambda&gt; (mlp..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py) (207 samples, 9.05%)</title><rect x="1083" y="148" width="107" height="15" fill="rgb(215,165,16)"/><text x="1086.00" y="158.50">predict_proba..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.17%)</title><rect x="1187" y="164" width="3" height="15" fill="rgb(248,1,20)"/><text x="1190.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.17%)</title><rect x="1187" y="180" width="3" height="15" fill="rgb(252,148,25)"/><text x="1190.00" y="190.50"></text></g></g></svg>