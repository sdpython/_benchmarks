<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1510" onload="init(evt)" viewBox="0 0 1200 1510" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1510" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1493.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1493.00"> </text><g id="frames"><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(218,53,36)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(219,135,6)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(239,27,46)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="10" y="916" width="1" height="15" fill="rgb(223,60,31)"/><text x="13.00" y="926.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (4 samples, 0.25%)</title><rect x="10" y="292" width="2" height="15" fill="rgb(206,7,49)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="308" width="2" height="15" fill="rgb(239,220,6)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="324" width="2" height="15" fill="rgb(232,29,44)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="340" width="2" height="15" fill="rgb(254,128,36)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.25%)</title><rect x="10" y="356" width="2" height="15" fill="rgb(252,150,50)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="372" width="2" height="15" fill="rgb(241,114,16)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (4 samples, 0.25%)</title><rect x="10" y="388" width="2" height="15" fill="rgb(222,160,54)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="404" width="2" height="15" fill="rgb(243,1,46)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="420" width="2" height="15" fill="rgb(220,19,42)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="436" width="2" height="15" fill="rgb(210,78,15)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.25%)</title><rect x="10" y="452" width="2" height="15" fill="rgb(214,78,26)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="468" width="2" height="15" fill="rgb(244,142,26)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (4 samples, 0.25%)</title><rect x="10" y="484" width="2" height="15" fill="rgb(241,2,22)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="500" width="2" height="15" fill="rgb(244,110,43)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="516" width="2" height="15" fill="rgb(252,173,31)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="532" width="2" height="15" fill="rgb(239,115,35)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.25%)</title><rect x="10" y="548" width="2" height="15" fill="rgb(239,179,54)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="564" width="2" height="15" fill="rgb(248,131,27)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (4 samples, 0.25%)</title><rect x="10" y="580" width="2" height="15" fill="rgb(249,189,25)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="596" width="2" height="15" fill="rgb(237,41,12)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="612" width="2" height="15" fill="rgb(225,52,18)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="628" width="2" height="15" fill="rgb(215,7,49)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="644" width="2" height="15" fill="rgb(241,161,1)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="660" width="2" height="15" fill="rgb(229,6,52)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="676" width="2" height="15" fill="rgb(242,118,9)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.25%)</title><rect x="10" y="692" width="2" height="15" fill="rgb(239,128,44)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="708" width="2" height="15" fill="rgb(216,170,54)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (4 samples, 0.25%)</title><rect x="10" y="724" width="2" height="15" fill="rgb(208,189,8)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="740" width="2" height="15" fill="rgb(213,226,9)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="756" width="2" height="15" fill="rgb(222,42,35)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="772" width="2" height="15" fill="rgb(251,190,41)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.25%)</title><rect x="10" y="788" width="2" height="15" fill="rgb(234,121,15)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="10" y="804" width="2" height="15" fill="rgb(227,110,49)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (4 samples, 0.25%)</title><rect x="10" y="820" width="2" height="15" fill="rgb(238,89,52)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (4 samples, 0.25%)</title><rect x="10" y="836" width="2" height="15" fill="rgb(243,220,5)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (4 samples, 0.25%)</title><rect x="10" y="852" width="2" height="15" fill="rgb(226,120,54)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="11" y="868" width="1" height="15" fill="rgb(230,84,19)"/><text x="14.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.13%)</title><rect x="11" y="884" width="1" height="15" fill="rgb(228,154,47)"/><text x="14.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="196" width="5" height="15" fill="rgb(212,52,11)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="212" width="5" height="15" fill="rgb(252,44,14)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="228" width="5" height="15" fill="rgb(214,100,31)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="244" width="5" height="15" fill="rgb(214,2,31)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 0.44%)</title><rect x="10" y="260" width="5" height="15" fill="rgb(249,19,0)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 0.44%)</title><rect x="10" y="276" width="5" height="15" fill="rgb(210,114,10)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (3 samples, 0.19%)</title><rect x="12" y="292" width="3" height="15" fill="rgb(215,99,51)"/><text x="15.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="308" width="3" height="15" fill="rgb(242,5,8)"/><text x="15.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="324" width="3" height="15" fill="rgb(241,88,31)"/><text x="15.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="340" width="3" height="15" fill="rgb(216,147,34)"/><text x="15.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="12" y="356" width="3" height="15" fill="rgb(235,105,45)"/><text x="15.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="372" width="3" height="15" fill="rgb(207,11,2)"/><text x="15.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (3 samples, 0.19%)</title><rect x="12" y="388" width="3" height="15" fill="rgb(235,223,16)"/><text x="15.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="404" width="3" height="15" fill="rgb(205,69,21)"/><text x="15.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="420" width="3" height="15" fill="rgb(219,220,1)"/><text x="15.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="436" width="3" height="15" fill="rgb(222,77,32)"/><text x="15.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="12" y="452" width="3" height="15" fill="rgb(220,90,18)"/><text x="15.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="468" width="3" height="15" fill="rgb(236,39,44)"/><text x="15.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (3 samples, 0.19%)</title><rect x="12" y="484" width="3" height="15" fill="rgb(213,163,15)"/><text x="15.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="500" width="3" height="15" fill="rgb(231,90,22)"/><text x="15.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="516" width="3" height="15" fill="rgb(234,101,50)"/><text x="15.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="532" width="3" height="15" fill="rgb(217,5,1)"/><text x="15.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="12" y="548" width="3" height="15" fill="rgb(236,138,21)"/><text x="15.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="564" width="3" height="15" fill="rgb(234,205,2)"/><text x="15.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (3 samples, 0.19%)</title><rect x="12" y="580" width="3" height="15" fill="rgb(207,224,13)"/><text x="15.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="596" width="3" height="15" fill="rgb(243,139,52)"/><text x="15.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="612" width="3" height="15" fill="rgb(246,192,35)"/><text x="15.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="628" width="3" height="15" fill="rgb(230,152,36)"/><text x="15.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="12" y="644" width="3" height="15" fill="rgb(213,207,2)"/><text x="15.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="660" width="3" height="15" fill="rgb(211,115,40)"/><text x="15.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (3 samples, 0.19%)</title><rect x="12" y="676" width="3" height="15" fill="rgb(227,25,31)"/><text x="15.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="692" width="3" height="15" fill="rgb(209,191,31)"/><text x="15.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="708" width="3" height="15" fill="rgb(216,58,20)"/><text x="15.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="724" width="3" height="15" fill="rgb(253,125,21)"/><text x="15.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="12" y="740" width="3" height="15" fill="rgb(213,104,1)"/><text x="15.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="12" y="756" width="3" height="15" fill="rgb(210,211,48)"/><text x="15.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (3 samples, 0.19%)</title><rect x="12" y="772" width="3" height="15" fill="rgb(217,130,27)"/><text x="15.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="788" width="2" height="15" fill="rgb(209,191,23)"/><text x="16.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="804" width="2" height="15" fill="rgb(227,127,22)"/><text x="16.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="820" width="2" height="15" fill="rgb(245,67,1)"/><text x="16.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="836" width="2" height="15" fill="rgb(254,76,35)"/><text x="16.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="852" width="2" height="15" fill="rgb(209,47,52)"/><text x="16.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="13" y="868" width="2" height="15" fill="rgb(231,224,37)"/><text x="16.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="13" y="884" width="2" height="15" fill="rgb(235,70,12)"/><text x="16.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (2 samples, 0.13%)</title><rect x="13" y="900" width="2" height="15" fill="rgb(248,215,33)"/><text x="16.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="484" width="1" height="15" fill="rgb(245,101,10)"/><text x="18.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="500" width="1" height="15" fill="rgb(248,53,54)"/><text x="18.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="516" width="1" height="15" fill="rgb(250,87,28)"/><text x="18.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="532" width="1" height="15" fill="rgb(215,225,9)"/><text x="18.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="548" width="1" height="15" fill="rgb(245,162,39)"/><text x="18.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="564" width="1" height="15" fill="rgb(208,59,16)"/><text x="18.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (2 samples, 0.13%)</title><rect x="15" y="580" width="1" height="15" fill="rgb(210,95,41)"/><text x="18.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="596" width="1" height="15" fill="rgb(250,74,42)"/><text x="18.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="612" width="1" height="15" fill="rgb(238,75,23)"/><text x="18.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="628" width="1" height="15" fill="rgb(242,74,49)"/><text x="18.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="644" width="1" height="15" fill="rgb(220,4,46)"/><text x="18.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="660" width="1" height="15" fill="rgb(221,61,24)"/><text x="18.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (2 samples, 0.13%)</title><rect x="15" y="676" width="1" height="15" fill="rgb(250,14,45)"/><text x="18.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="692" width="1" height="15" fill="rgb(228,57,11)"/><text x="18.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="708" width="1" height="15" fill="rgb(213,149,38)"/><text x="18.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="724" width="1" height="15" fill="rgb(251,143,26)"/><text x="18.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="740" width="1" height="15" fill="rgb(210,163,34)"/><text x="18.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="756" width="1" height="15" fill="rgb(251,10,4)"/><text x="18.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (2 samples, 0.13%)</title><rect x="15" y="772" width="1" height="15" fill="rgb(247,192,33)"/><text x="18.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="788" width="1" height="15" fill="rgb(208,160,26)"/><text x="18.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="804" width="1" height="15" fill="rgb(218,219,34)"/><text x="18.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="820" width="1" height="15" fill="rgb(212,132,44)"/><text x="18.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="836" width="1" height="15" fill="rgb(221,0,23)"/><text x="18.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="852" width="1" height="15" fill="rgb(211,127,23)"/><text x="18.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (2 samples, 0.13%)</title><rect x="15" y="868" width="1" height="15" fill="rgb(251,27,8)"/><text x="18.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="884" width="1" height="15" fill="rgb(219,215,29)"/><text x="18.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="900" width="1" height="15" fill="rgb(212,84,40)"/><text x="18.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="916" width="1" height="15" fill="rgb(222,52,7)"/><text x="18.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="932" width="1" height="15" fill="rgb(237,184,14)"/><text x="18.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="948" width="1" height="15" fill="rgb(232,207,45)"/><text x="18.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="964" width="1" height="15" fill="rgb(224,7,49)"/><text x="18.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="980" width="1" height="15" fill="rgb(227,167,15)"/><text x="18.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="996" width="1" height="15" fill="rgb(225,130,22)"/><text x="18.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (2 samples, 0.13%)</title><rect x="15" y="1012" width="1" height="15" fill="rgb(224,176,22)"/><text x="18.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1028" width="1" height="15" fill="rgb(250,98,42)"/><text x="18.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1044" width="1" height="15" fill="rgb(227,156,20)"/><text x="18.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1060" width="1" height="15" fill="rgb(227,152,12)"/><text x="18.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="1076" width="1" height="15" fill="rgb(230,188,31)"/><text x="18.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1092" width="1" height="15" fill="rgb(209,67,43)"/><text x="18.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (2 samples, 0.13%)</title><rect x="15" y="1108" width="1" height="15" fill="rgb(233,72,40)"/><text x="18.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1124" width="1" height="15" fill="rgb(230,105,52)"/><text x="18.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1140" width="1" height="15" fill="rgb(243,185,26)"/><text x="18.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1156" width="1" height="15" fill="rgb(238,45,53)"/><text x="18.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1172" width="1" height="15" fill="rgb(245,166,10)"/><text x="18.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1188" width="1" height="15" fill="rgb(223,41,33)"/><text x="18.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="1204" width="1" height="15" fill="rgb(252,39,6)"/><text x="18.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1220" width="1" height="15" fill="rgb(222,103,28)"/><text x="18.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (2 samples, 0.13%)</title><rect x="15" y="1236" width="1" height="15" fill="rgb(246,196,53)"/><text x="18.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1252" width="1" height="15" fill="rgb(230,203,20)"/><text x="18.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1268" width="1" height="15" fill="rgb(210,227,2)"/><text x="18.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1284" width="1" height="15" fill="rgb(246,8,45)"/><text x="18.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1300" width="1" height="15" fill="rgb(230,209,32)"/><text x="18.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1316" width="1" height="15" fill="rgb(254,211,40)"/><text x="18.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="1332" width="1" height="15" fill="rgb(250,143,34)"/><text x="18.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1348" width="1" height="15" fill="rgb(209,175,1)"/><text x="18.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (2 samples, 0.13%)</title><rect x="15" y="1364" width="1" height="15" fill="rgb(251,212,6)"/><text x="18.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1380" width="1" height="15" fill="rgb(240,46,12)"/><text x="18.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1396" width="1" height="15" fill="rgb(239,153,28)"/><text x="18.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1412" width="1" height="15" fill="rgb(237,85,38)"/><text x="18.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.13%)</title><rect x="15" y="1428" width="1" height="15" fill="rgb(225,160,5)"/><text x="18.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.13%)</title><rect x="15" y="1444" width="1" height="15" fill="rgb(243,16,26)"/><text x="18.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (2 samples, 0.13%)</title><rect x="15" y="1460" width="1" height="15" fill="rgb(208,94,20)"/><text x="18.00" y="1470.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (3 samples, 0.19%)</title><rect x="15" y="244" width="2" height="15" fill="rgb(250,30,14)"/><text x="18.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="15" y="260" width="2" height="15" fill="rgb(235,150,50)"/><text x="18.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="15" y="276" width="2" height="15" fill="rgb(247,146,51)"/><text x="18.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="15" y="292" width="2" height="15" fill="rgb(215,3,22)"/><text x="18.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="15" y="308" width="2" height="15" fill="rgb(205,38,34)"/><text x="18.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="15" y="324" width="2" height="15" fill="rgb(241,111,17)"/><text x="18.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.19%)</title><rect x="15" y="340" width="2" height="15" fill="rgb(248,217,41)"/><text x="18.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="15" y="356" width="2" height="15" fill="rgb(232,65,53)"/><text x="18.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="15" y="372" width="2" height="15" fill="rgb(244,86,13)"/><text x="18.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="15" y="388" width="2" height="15" fill="rgb(241,146,37)"/><text x="18.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.19%)</title><rect x="15" y="404" width="2" height="15" fill="rgb(230,92,51)"/><text x="18.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="15" y="420" width="2" height="15" fill="rgb(248,183,6)"/><text x="18.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (3 samples, 0.19%)</title><rect x="15" y="436" width="2" height="15" fill="rgb(243,137,46)"/><text x="18.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="15" y="452" width="2" height="15" fill="rgb(214,158,4)"/><text x="18.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.19%)</title><rect x="15" y="468" width="2" height="15" fill="rgb(206,120,54)"/><text x="18.00" y="478.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="68" width="8" height="15" fill="rgb(233,37,20)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="84" width="8" height="15" fill="rgb(248,73,32)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="100" width="8" height="15" fill="rgb(233,12,29)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (11 samples, 0.69%)</title><rect x="10" y="116" width="8" height="15" fill="rgb(214,221,53)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="132" width="8" height="15" fill="rgb(205,169,41)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostClassifier/bench_AdaBoostClassifier_default_b_cl.py) (11 samples, 0.69%)</title><rect x="10" y="148" width="8" height="15" fill="rgb(245,141,45)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="164" width="8" height="15" fill="rgb(233,20,28)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 0.69%)</title><rect x="10" y="180" width="8" height="15" fill="rgb(235,80,10)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="15" y="196" width="3" height="15" fill="rgb(232,82,44)"/><text x="18.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.25%)</title><rect x="15" y="212" width="3" height="15" fill="rgb(232,171,1)"/><text x="18.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="15" y="228" width="3" height="15" fill="rgb(206,14,52)"/><text x="18.00" y="238.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="20" y="340" width="1" height="15" fill="rgb(206,106,21)"/><text x="23.00" y="350.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="20" y="356" width="1" height="15" fill="rgb(253,135,19)"/><text x="23.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="20" y="372" width="1" height="15" fill="rgb(234,74,13)"/><text x="23.00" y="382.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="20" y="388" width="1" height="15" fill="rgb(211,146,11)"/><text x="23.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.13%)</title><rect x="20" y="404" width="1" height="15" fill="rgb(244,63,29)"/><text x="23.00" y="414.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="20" y="420" width="1" height="15" fill="rgb(243,229,2)"/><text x="23.00" y="430.50"></text></g><g><title>0x7f22cc313028 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="20" y="436" width="1" height="15" fill="rgb(254,7,28)"/><text x="23.00" y="446.50"></text></g><g><title>onnxruntime::Log&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.69%)</title><rect x="22" y="340" width="8" height="15" fill="rgb(232,149,29)"/><text x="25.00" y="350.50"></text></g><g><title>onnxruntime::Mul&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 1.00%)</title><rect x="30" y="340" width="12" height="15" fill="rgb(212,101,7)"/><text x="33.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 1.00%)</title><rect x="30" y="356" width="12" height="15" fill="rgb(219,109,4)"/><text x="33.00" y="366.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 1.00%)</title><rect x="30" y="372" width="12" height="15" fill="rgb(211,89,22)"/><text x="33.00" y="382.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.25%)</title><rect x="39" y="388" width="3" height="15" fill="rgb(225,29,19)"/><text x="42.00" y="398.50"></text></g><g><title>onnxruntime::ReduceSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.44%)</title><rect x="43" y="340" width="5" height="15" fill="rgb(211,148,38)"/><text x="46.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (21 samples, 1.32%)</title><rect x="49" y="372" width="15" height="15" fill="rgb(216,95,4)"/><text x="52.00" y="382.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.56%)</title><rect x="58" y="388" width="6" height="15" fill="rgb(230,37,1)"/><text x="61.00" y="398.50"></text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 1.44%)</title><rect x="49" y="340" width="17" height="15" fill="rgb(232,93,40)"/><text x="52.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 1.44%)</title><rect x="49" y="356" width="17" height="15" fill="rgb(242,16,43)"/><text x="52.00" y="366.50"></text></g><g><title>onnxruntime::Sum_8&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="66" y="340" width="1" height="15" fill="rgb(216,37,32)"/><text x="69.00" y="350.50"></text></g><g><title>onnxruntime::BroadcastVariadic&lt;float, float, onnxruntime::Sum_8&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sum_8&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sum_8&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; [clone .isra.816] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="66" y="356" width="1" height="15" fill="rgb(237,53,47)"/><text x="69.00" y="366.50"></text></g><g><title>onnxruntime::Tensor::MutableData&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.38%)</title><rect x="97" y="356" width="4" height="15" fill="rgb(246,198,25)"/><text x="100.00" y="366.50"></text></g><g><title>0x7f22875ca930 (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="154" y="388" width="1" height="15" fill="rgb(225,116,33)"/><text x="157.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (20 samples, 1.25%)</title><rect x="156" y="388" width="15" height="15" fill="rgb(221,9,0)"/><text x="159.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (19 samples, 1.19%)</title><rect x="157" y="404" width="14" height="15" fill="rgb(222,15,29)"/><text x="160.00" y="414.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (103 samples, 6.45%)</title><rect x="101" y="356" width="76" height="15" fill="rgb(221,202,4)"/><text x="104.00" y="366.50">onnxrunt..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;long, float&gt;&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (50 samples, 3.13%)</title><rect x="140" y="372" width="37" height="15" fill="rgb(211,46,11)"/><text x="143.00" y="382.50">std..</text></g><g><title>std::_Rb_tree_insert_and_rebalance (libstdc++.so.6.0.28) (9 samples, 0.56%)</title><rect x="171" y="388" width="6" height="15" fill="rgb(232,132,28)"/><text x="174.00" y="398.50"></text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.31%)</title><rect x="177" y="356" width="4" height="15" fill="rgb(233,34,1)"/><text x="180.00" y="366.50"></text></g><g><title>0x7f22bbdde7a0 (libstdc++.so.6.0.28) (2 samples, 0.13%)</title><rect x="183" y="372" width="1" height="15" fill="rgb(207,49,32)"/><text x="186.00" y="382.50"></text></g><g><title>0x7f22cc31192f (libc-2.29.so) (2 samples, 0.13%)</title><rect x="186" y="372" width="2" height="15" fill="rgb(234,36,40)"/><text x="189.00" y="382.50"></text></g><g><title>0x7f22cc311991 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="189" y="372" width="2" height="15" fill="rgb(250,209,53)"/><text x="192.00" y="382.50"></text></g><g><title>0x7f22cc311998 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="191" y="372" width="1" height="15" fill="rgb(241,198,33)"/><text x="194.00" y="382.50"></text></g><g><title>0x7f22cc311bc0 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="193" y="372" width="1" height="15" fill="rgb(234,136,38)"/><text x="196.00" y="382.50"></text></g><g><title>0x7f22cc311be8 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="195" y="372" width="2" height="15" fill="rgb(234,132,3)"/><text x="198.00" y="382.50"></text></g><g><title>free (libc-2.29.so) (7 samples, 0.44%)</title><rect x="197" y="372" width="5" height="15" fill="rgb(238,167,44)"/><text x="200.00" y="382.50"></text></g><g><title>0x7f22cc311965 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="211" y="388" width="1" height="15" fill="rgb(245,202,46)"/><text x="214.00" y="398.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (48 samples, 3.01%)</title><rect x="181" y="356" width="36" height="15" fill="rgb(230,163,32)"/><text x="184.00" y="366.50">std..</text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, OrtMemType&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt; &gt;::_M_erase [clone .localalias.69] (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 1.19%)</title><rect x="202" y="372" width="15" height="15" fill="rgb(221,171,9)"/><text x="205.00" y="382.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.19%)</title><rect x="214" y="388" width="3" height="15" fill="rgb(253,113,6)"/><text x="217.00" y="398.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (211 samples, 13.22%)</title><rect x="67" y="340" width="156" height="15" fill="rgb(248,81,54)"/><text x="70.00" y="350.50">onnxruntime::ml::Tre..</text></g><g><title>std::_Rb_tree_increment (libstdc++.so.6.0.28) (9 samples, 0.56%)</title><rect x="217" y="356" width="6" height="15" fill="rgb(251,77,0)"/><text x="220.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (279 samples, 17.48%)</title><rect x="18" y="260" width="207" height="15" fill="rgb(241,93,40)"/><text x="21.00" y="270.50">onnxruntime::InferenceSessi..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (279 samples, 17.48%)</title><rect x="18" y="276" width="207" height="15" fill="rgb(213,27,29)"/><text x="21.00" y="286.50">onnxruntime::InferenceSessi..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (279 samples, 17.48%)</title><rect x="18" y="292" width="207" height="15" fill="rgb(238,164,40)"/><text x="21.00" y="302.50">onnxruntime::utils::Execute..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (279 samples, 17.48%)</title><rect x="18" y="308" width="207" height="15" fill="rgb(225,90,32)"/><text x="21.00" y="318.50">onnxruntime::utils::Execute..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (279 samples, 17.48%)</title><rect x="18" y="324" width="207" height="15" fill="rgb(213,206,15)"/><text x="21.00" y="334.50">onnxruntime::SequentialExec..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.13%)</title><rect x="223" y="340" width="2" height="15" fill="rgb(218,110,9)"/><text x="226.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.13%)</title><rect x="223" y="356" width="2" height="15" fill="rgb(220,181,22)"/><text x="226.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="223" y="372" width="2" height="15" fill="rgb(253,25,18)"/><text x="226.00" y="382.50"></text></g><g><title>profile (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py) (287 samples, 17.98%)</title><rect x="18" y="100" width="212" height="15" fill="rgb(253,171,29)"/><text x="21.00" y="110.50">profile (bench_AdaBoostClas..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (286 samples, 17.92%)</title><rect x="18" y="116" width="212" height="15" fill="rgb(221,152,54)"/><text x="21.00" y="126.50">time_predict (mlprodict/asv..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (286 samples, 17.92%)</title><rect x="18" y="132" width="212" height="15" fill="rgb(239,123,30)"/><text x="21.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_ben..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (286 samples, 17.92%)</title><rect x="18" y="148" width="212" height="15" fill="rgb(252,49,51)"/><text x="21.00" y="158.50">run (mlprodict/onnxrt/onnx_..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (286 samples, 17.92%)</title><rect x="18" y="164" width="212" height="15" fill="rgb(226,136,27)"/><text x="21.00" y="174.50">_run_whole_runtime (mlprodi..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (286 samples, 17.92%)</title><rect x="18" y="180" width="212" height="15" fill="rgb(252,59,47)"/><text x="21.00" y="190.50">run (mlprodict/onnxrt/ops_w..</text></g><g><title>run (onnxruntime/capi/session.py) (286 samples, 17.92%)</title><rect x="18" y="196" width="212" height="15" fill="rgb(215,73,8)"/><text x="21.00" y="206.50">run (onnxruntime/capi/sessi..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (286 samples, 17.92%)</title><rect x="18" y="212" width="212" height="15" fill="rgb(231,77,49)"/><text x="21.00" y="222.50">pybind11::cpp_function::dis..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (286 samples, 17.92%)</title><rect x="18" y="228" width="212" height="15" fill="rgb(208,47,48)"/><text x="21.00" y="238.50">void pybind11::cpp_function..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (286 samples, 17.92%)</title><rect x="18" y="244" width="212" height="15" fill="rgb(239,202,2)"/><text x="21.00" y="254.50">onnxruntime::python::addObj..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.44%)</title><rect x="225" y="260" width="5" height="15" fill="rgb(247,3,37)"/><text x="228.00" y="270.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.19%)</title><rect x="230" y="132" width="2" height="15" fill="rgb(209,168,54)"/><text x="233.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.19%)</title><rect x="230" y="148" width="2" height="15" fill="rgb(232,19,43)"/><text x="233.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.19%)</title><rect x="230" y="164" width="2" height="15" fill="rgb(242,174,24)"/><text x="233.00" y="174.50"></text></g><g><title>to_sequence (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.13%)</title><rect x="231" y="180" width="1" height="15" fill="rgb(234,15,10)"/><text x="234.00" y="190.50"></text></g><g><title>_var_as_dict (mlprodict/onnxrt/onnx2py_helper.py) (2 samples, 0.13%)</title><rect x="231" y="196" width="1" height="15" fill="rgb(252,191,10)"/><text x="234.00" y="206.50"></text></g><g><title>_var_as_dict (mlprodict/onnxrt/onnx2py_helper.py) (2 samples, 0.13%)</title><rect x="231" y="212" width="1" height="15" fill="rgb(237,45,1)"/><text x="234.00" y="222.50"></text></g><g><title>profile_ort (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py) (291 samples, 18.23%)</title><rect x="18" y="68" width="215" height="15" fill="rgb(237,27,11)"/><text x="21.00" y="78.50">profile_ort (bench_AdaBoostC..</text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py) (291 samples, 18.23%)</title><rect x="18" y="84" width="215" height="15" fill="rgb(229,62,18)"/><text x="21.00" y="94.50">setup_profile (bench_AdaBoos..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 0.25%)</title><rect x="230" y="100" width="3" height="15" fill="rgb(252,225,37)"/><text x="233.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 0.25%)</title><rect x="230" y="116" width="3" height="15" fill="rgb(221,183,0)"/><text x="233.00" y="126.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (3 samples, 0.19%)</title><rect x="264" y="196" width="2" height="15" fill="rgb(254,208,13)"/><text x="267.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (2 samples, 0.13%)</title><rect x="272" y="212" width="1" height="15" fill="rgb(254,140,15)"/><text x="275.00" y="222.50"></text></g><g><title>array_subscript (mapping.c) (2 samples, 0.13%)</title><rect x="272" y="228" width="1" height="15" fill="rgb(212,55,44)"/><text x="275.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (2 samples, 0.13%)</title><rect x="272" y="244" width="1" height="15" fill="rgb(228,184,42)"/><text x="275.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.13%)</title><rect x="272" y="260" width="1" height="15" fill="rgb(242,202,25)"/><text x="275.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (2 samples, 0.13%)</title><rect x="272" y="276" width="1" height="15" fill="rgb(246,114,28)"/><text x="275.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c) (2 samples, 0.13%)</title><rect x="272" y="292" width="1" height="15" fill="rgb(227,97,34)"/><text x="275.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (2 samples, 0.13%)</title><rect x="272" y="308" width="1" height="15" fill="rgb(226,101,43)"/><text x="275.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src) (2 samples, 0.13%)</title><rect x="272" y="324" width="1" height="15" fill="rgb(215,172,10)"/><text x="275.00" y="334.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src) (2 samples, 0.13%)</title><rect x="272" y="340" width="1" height="15" fill="rgb(239,18,6)"/><text x="275.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reshape.py) (5 samples, 0.31%)</title><rect x="273" y="212" width="4" height="15" fill="rgb(222,166,14)"/><text x="276.00" y="222.50"></text></g><g><title>array_reshape (methods.c) (5 samples, 0.31%)</title><rect x="273" y="228" width="4" height="15" fill="rgb(241,166,4)"/><text x="276.00" y="238.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (3 samples, 0.19%)</title><rect x="275" y="244" width="2" height="15" fill="rgb(239,203,9)"/><text x="278.00" y="254.50"></text></g><g><title>PyArray_Newshape (shape.c) (3 samples, 0.19%)</title><rect x="275" y="260" width="2" height="15" fill="rgb(222,0,27)"/><text x="278.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sum.py) (3 samples, 0.19%)</title><rect x="277" y="212" width="2" height="15" fill="rgb(216,33,14)"/><text x="280.00" y="222.50"></text></g><g><title>array_add (number.c) (3 samples, 0.19%)</title><rect x="277" y="228" width="2" height="15" fill="rgb(222,41,38)"/><text x="280.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.13%)</title><rect x="278" y="244" width="1" height="15" fill="rgb(236,116,53)"/><text x="281.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.13%)</title><rect x="278" y="260" width="1" height="15" fill="rgb(214,188,47)"/><text x="281.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="278" y="276" width="1" height="15" fill="rgb(234,87,1)"/><text x="281.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="278" y="292" width="1" height="15" fill="rgb(219,70,46)"/><text x="281.00" y="302.50"></text></g><g><title>FLOAT_add (loops.c.src) (2 samples, 0.13%)</title><rect x="278" y="308" width="1" height="15" fill="rgb(254,206,30)"/><text x="281.00" y="318.50"></text></g><g><title>run_binary_simd_add_FLOAT (simd.inc.src) (2 samples, 0.13%)</title><rect x="278" y="324" width="1" height="15" fill="rgb(215,106,45)"/><text x="281.00" y="334.50"></text></g><g><title>sse2_binary_add_FLOAT (simd.inc.src) (2 samples, 0.13%)</title><rect x="278" y="340" width="1" height="15" fill="rgb(209,157,4)"/><text x="281.00" y="350.50"></text></g><g><title>npyiter_flip_negative_strides (nditer_constr.c) (2 samples, 0.13%)</title><rect x="287" y="324" width="2" height="15" fill="rgb(250,42,13)"/><text x="290.00" y="334.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (6 samples, 0.38%)</title><rect x="285" y="308" width="5" height="15" fill="rgb(240,217,31)"/><text x="288.00" y="318.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (12 samples, 0.75%)</title><rect x="290" y="308" width="9" height="15" fill="rgb(234,47,42)"/><text x="293.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (12 samples, 0.75%)</title><rect x="290" y="324" width="9" height="15" fill="rgb(214,18,38)"/><text x="293.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (12 samples, 0.75%)</title><rect x="290" y="340" width="9" height="15" fill="rgb(227,66,27)"/><text x="293.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size4_srcstride0 (lowlevel_strided_loops.c.src) (7 samples, 0.44%)</title><rect x="294" y="356" width="5" height="15" fill="rgb(236,102,24)"/><text x="297.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (22 samples, 1.38%)</title><rect x="285" y="276" width="16" height="15" fill="rgb(241,95,30)"/><text x="288.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c) (22 samples, 1.38%)</title><rect x="285" y="292" width="16" height="15" fill="rgb(230,41,30)"/><text x="288.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (28 samples, 1.75%)</title><rect x="282" y="228" width="20" height="15" fill="rgb(222,13,18)"/><text x="285.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (27 samples, 1.69%)</title><rect x="282" y="244" width="20" height="15" fill="rgb(236,215,44)"/><text x="285.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (25 samples, 1.57%)</title><rect x="284" y="260" width="18" height="15" fill="rgb(226,75,26)"/><text x="287.00" y="270.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (2 samples, 0.13%)</title><rect x="301" y="276" width="1" height="15" fill="rgb(238,206,20)"/><text x="304.00" y="286.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.13%)</title><rect x="305" y="260" width="2" height="15" fill="rgb(210,128,9)"/><text x="308.00" y="270.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.13%)</title><rect x="305" y="276" width="2" height="15" fill="rgb(225,217,43)"/><text x="308.00" y="286.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (2 samples, 0.13%)</title><rect x="305" y="292" width="2" height="15" fill="rgb(252,87,12)"/><text x="308.00" y="302.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (3 samples, 0.19%)</title><rect x="307" y="292" width="2" height="15" fill="rgb(233,175,22)"/><text x="310.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (3 samples, 0.19%)</title><rect x="307" y="308" width="2" height="15" fill="rgb(249,120,40)"/><text x="310.00" y="318.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (3 samples, 0.19%)</title><rect x="307" y="324" width="2" height="15" fill="rgb(211,216,42)"/><text x="310.00" y="334.50"></text></g><g><title>0x7f22cc4939af (libm-2.29.so) (2 samples, 0.13%)</title><rect x="315" y="324" width="1" height="15" fill="rgb(220,40,13)"/><text x="318.00" y="334.50"></text></g><g><title>0x7f22cc493a04 (libm-2.29.so) (2 samples, 0.13%)</title><rect x="319" y="324" width="1" height="15" fill="rgb(218,190,48)"/><text x="322.00" y="334.50"></text></g><g><title>0x7f22cc493a1d (libm-2.29.so) (3 samples, 0.19%)</title><rect x="322" y="324" width="2" height="15" fill="rgb(240,7,2)"/><text x="325.00" y="334.50"></text></g><g><title>logf (libm-2.29.so) (3 samples, 0.19%)</title><rect x="324" y="324" width="3" height="15" fill="rgb(228,200,44)"/><text x="327.00" y="334.50"></text></g><g><title>FLOAT_log (loops.c.src) (25 samples, 1.57%)</title><rect x="309" y="308" width="18" height="15" fill="rgb(249,179,39)"/><text x="312.00" y="318.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (29 samples, 1.82%)</title><rect x="307" y="276" width="21" height="15" fill="rgb(217,203,1)"/><text x="310.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (26 samples, 1.63%)</title><rect x="309" y="292" width="19" height="15" fill="rgb(230,76,48)"/><text x="312.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_log.py) (35 samples, 2.19%)</title><rect x="305" y="228" width="25" height="15" fill="rgb(251,66,4)"/><text x="308.00" y="238.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (34 samples, 2.13%)</title><rect x="305" y="244" width="25" height="15" fill="rgb(234,136,49)"/><text x="308.00" y="254.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (32 samples, 2.01%)</title><rect x="307" y="260" width="23" height="15" fill="rgb(222,137,54)"/><text x="310.00" y="270.50">P..</text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (2 samples, 0.13%)</title><rect x="335" y="356" width="1" height="15" fill="rgb(238,86,47)"/><text x="338.00" y="366.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (2 samples, 0.13%)</title><rect x="335" y="372" width="1" height="15" fill="rgb(232,8,30)"/><text x="338.00" y="382.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (2 samples, 0.13%)</title><rect x="335" y="388" width="1" height="15" fill="rgb(220,209,19)"/><text x="338.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (3 samples, 0.19%)</title><rect x="335" y="324" width="2" height="15" fill="rgb(235,190,26)"/><text x="338.00" y="334.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (3 samples, 0.19%)</title><rect x="335" y="340" width="2" height="15" fill="rgb(206,37,10)"/><text x="338.00" y="350.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (2 samples, 0.13%)</title><rect x="339" y="372" width="1" height="15" fill="rgb(225,192,20)"/><text x="342.00" y="382.50"></text></g><g><title>allocate_reduce_result (reduction.c) (2 samples, 0.13%)</title><rect x="339" y="388" width="1" height="15" fill="rgb(237,176,54)"/><text x="342.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.13%)</title><rect x="339" y="404" width="1" height="15" fill="rgb(252,32,4)"/><text x="342.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.13%)</title><rect x="339" y="420" width="1" height="15" fill="rgb(218,38,27)"/><text x="342.00" y="430.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (2 samples, 0.13%)</title><rect x="339" y="436" width="1" height="15" fill="rgb(226,149,26)"/><text x="342.00" y="446.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (2 samples, 0.13%)</title><rect x="339" y="452" width="1" height="15" fill="rgb(254,131,40)"/><text x="342.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="339" y="468" width="1" height="15" fill="rgb(250,132,31)"/><text x="342.00" y="478.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (2 samples, 0.13%)</title><rect x="340" y="372" width="1" height="15" fill="rgb(232,198,40)"/><text x="343.00" y="382.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (2 samples, 0.13%)</title><rect x="340" y="388" width="1" height="15" fill="rgb(218,26,54)"/><text x="343.00" y="398.50"></text></g><g><title>FLOAT_add (loops.c.src) (13 samples, 0.81%)</title><rect x="346" y="388" width="10" height="15" fill="rgb(242,76,18)"/><text x="349.00" y="398.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (6 samples, 0.38%)</title><rect x="351" y="404" width="5" height="15" fill="rgb(217,103,21)"/><text x="354.00" y="414.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (26 samples, 1.63%)</title><rect x="339" y="356" width="19" height="15" fill="rgb(235,55,11)"/><text x="342.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c) (22 samples, 1.38%)</title><rect x="341" y="372" width="17" height="15" fill="rgb(233,147,47)"/><text x="344.00" y="382.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (3 samples, 0.19%)</title><rect x="356" y="388" width="2" height="15" fill="rgb(235,189,11)"/><text x="359.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (40 samples, 2.51%)</title><rect x="330" y="228" width="30" height="15" fill="rgb(211,123,12)"/><text x="333.00" y="238.50">_r..</text></g><g><title>sum (&lt;__array_function__ internals&gt;) (40 samples, 2.51%)</title><rect x="330" y="244" width="30" height="15" fill="rgb(219,81,1)"/><text x="333.00" y="254.50">su..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (38 samples, 2.38%)</title><rect x="332" y="260" width="28" height="15" fill="rgb(215,180,22)"/><text x="335.00" y="270.50">a..</text></g><g><title>sum (numpy/core/fromnumeric.py) (38 samples, 2.38%)</title><rect x="332" y="276" width="28" height="15" fill="rgb(247,73,35)"/><text x="335.00" y="286.50">s..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (36 samples, 2.26%)</title><rect x="333" y="292" width="27" height="15" fill="rgb(240,204,34)"/><text x="336.00" y="302.50">_..</text></g><g><title>ufunc_reduce (ufunc_object.c) (34 samples, 2.13%)</title><rect x="335" y="308" width="25" height="15" fill="rgb(236,52,5)"/><text x="338.00" y="318.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (31 samples, 1.94%)</title><rect x="337" y="324" width="23" height="15" fill="rgb(246,113,48)"/><text x="340.00" y="334.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (29 samples, 1.82%)</title><rect x="339" y="340" width="21" height="15" fill="rgb(217,67,29)"/><text x="342.00" y="350.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (2 samples, 0.13%)</title><rect x="358" y="356" width="2" height="15" fill="rgb(248,147,21)"/><text x="361.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.13%)</title><rect x="358" y="372" width="2" height="15" fill="rgb(248,17,44)"/><text x="361.00" y="382.50"></text></g><g><title>0x7f22cc312dd6 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="361" y="660" width="2" height="15" fill="rgb(233,119,41)"/><text x="364.00" y="670.50"></text></g><g><title>pybind11::array_t&lt;long, 16&gt;::array_t (numpy.h) (4 samples, 0.25%)</title><rect x="361" y="436" width="3" height="15" fill="rgb(240,9,45)"/><text x="364.00" y="446.50"></text></g><g><title>pybind11::detail::any_container&lt;long&gt;::~any_container (common.h) (4 samples, 0.25%)</title><rect x="361" y="452" width="3" height="15" fill="rgb(239,17,31)"/><text x="364.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::~vector (stl_vector.h) (4 samples, 0.25%)</title><rect x="361" y="468" width="3" height="15" fill="rgb(234,102,47)"/><text x="364.00" y="478.50"></text></g><g><title>pybind11::array::array&lt;long&gt; (numpy.h) (4 samples, 0.25%)</title><rect x="361" y="484" width="3" height="15" fill="rgb(211,206,49)"/><text x="364.00" y="494.50"></text></g><g><title>pybind11::dtype::~dtype (numpy.h) (4 samples, 0.25%)</title><rect x="361" y="500" width="3" height="15" fill="rgb(228,164,52)"/><text x="364.00" y="510.50"></text></g><g><title>pybind11::object::~object (pytypes.h) (4 samples, 0.25%)</title><rect x="361" y="516" width="3" height="15" fill="rgb(251,28,8)"/><text x="364.00" y="526.50"></text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (4 samples, 0.25%)</title><rect x="361" y="532" width="3" height="15" fill="rgb(247,189,54)"/><text x="364.00" y="542.50"></text></g><g><title>pybind11::array::array (numpy.h) (4 samples, 0.25%)</title><rect x="361" y="548" width="3" height="15" fill="rgb(243,72,36)"/><text x="364.00" y="558.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (4 samples, 0.25%)</title><rect x="361" y="564" width="3" height="15" fill="rgb(230,86,23)"/><text x="364.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.25%)</title><rect x="361" y="580" width="3" height="15" fill="rgb(243,169,5)"/><text x="364.00" y="590.50"></text></g><g><title>npy_alloc_cache (alloc.c) (4 samples, 0.25%)</title><rect x="361" y="596" width="3" height="15" fill="rgb(209,97,31)"/><text x="364.00" y="606.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (4 samples, 0.25%)</title><rect x="361" y="612" width="3" height="15" fill="rgb(251,43,37)"/><text x="364.00" y="622.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (4 samples, 0.25%)</title><rect x="361" y="628" width="3" height="15" fill="rgb(228,118,23)"/><text x="364.00" y="638.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.25%)</title><rect x="361" y="644" width="3" height="15" fill="rgb(232,142,36)"/><text x="364.00" y="654.50"></text></g><g><title>0x7f22962d8ea0 (libgomp.so.1.0.0) (23 samples, 1.44%)</title><rect x="364" y="468" width="17" height="15" fill="rgb(227,132,5)"/><text x="367.00" y="478.50"></text></g><g><title>0x7f22962d8ea9 (libgomp.so.1.0.0) (98 samples, 6.14%)</title><rect x="381" y="468" width="73" height="15" fill="rgb(207,101,11)"/><text x="384.00" y="478.50">0x7f2296..</text></g><g><title>0x7f22962d8eab (libgomp.so.1.0.0) (123 samples, 7.71%)</title><rect x="454" y="468" width="91" height="15" fill="rgb(250,201,28)"/><text x="457.00" y="478.50">0x7f22962d..</text></g><g><title>0x7f22962d8ead (libgomp.so.1.0.0) (108 samples, 6.77%)</title><rect x="545" y="468" width="80" height="15" fill="rgb(228,14,5)"/><text x="548.00" y="478.50">0x7f22962..</text></g><g><title>0x7f22962d7ab9 (libgomp.so.1.0.0) (395 samples, 24.75%)</title><rect x="364" y="452" width="292" height="15" fill="rgb(240,203,22)"/><text x="367.00" y="462.50">0x7f22962d7ab9 (libgomp.so.1.0.0)</text></g><g><title>0x7f22962d8ee1 (libgomp.so.1.0.0) (43 samples, 2.69%)</title><rect x="625" y="468" width="31" height="15" fill="rgb(236,204,53)"/><text x="628.00" y="478.50">0x..</text></g><g><title>0x7f22962d8cf0 (libgomp.so.1.0.0) (21 samples, 1.32%)</title><rect x="656" y="484" width="16" height="15" fill="rgb(222,24,39)"/><text x="659.00" y="494.50"></text></g><g><title>0x7f22962d8cf9 (libgomp.so.1.0.0) (108 samples, 6.77%)</title><rect x="672" y="484" width="80" height="15" fill="rgb(250,144,42)"/><text x="675.00" y="494.50">0x7f22962..</text></g><g><title>0x7f22962d8cfb (libgomp.so.1.0.0) (100 samples, 6.27%)</title><rect x="752" y="484" width="74" height="15" fill="rgb(207,77,2)"/><text x="755.00" y="494.50">0x7f2296..</text></g><g><title>0x7f22962d8cfd (libgomp.so.1.0.0) (82 samples, 5.14%)</title><rect x="826" y="484" width="60" height="15" fill="rgb(242,197,51)"/><text x="829.00" y="494.50">0x7f22..</text></g><g><title>0x7f22962d8d1e (libgomp.so.1.0.0) (46 samples, 2.88%)</title><rect x="886" y="484" width="34" height="15" fill="rgb(248,74,37)"/><text x="889.00" y="494.50">0x..</text></g><g><title>0x7f22962d6daa (libgomp.so.1.0.0) (362 samples, 22.68%)</title><rect x="656" y="468" width="268" height="15" fill="rgb(219,159,24)"/><text x="659.00" y="478.50">0x7f22962d6daa (libgomp.so.1.0.0)</text></g><g><title>0x7f22962d8d6d (libgomp.so.1.0.0) (5 samples, 0.31%)</title><rect x="920" y="484" width="4" height="15" fill="rgb(230,217,17)"/><text x="923.00" y="494.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (3 samples, 0.19%)</title><rect x="924" y="484" width="2" height="15" fill="rgb(222,31,6)"/><text x="927.00" y="494.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::vector (stl_bvector.h) (4 samples, 0.25%)</title><rect x="926" y="484" width="3" height="15" fill="rgb(216,112,42)"/><text x="929.00" y="494.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_initialize (stl_bvector.h) (4 samples, 0.25%)</title><rect x="926" y="500" width="3" height="15" fill="rgb(234,99,23)"/><text x="929.00" y="510.50"></text></g><g><title>std::_Bit_iterator::operator+ (stl_bvector.h) (4 samples, 0.25%)</title><rect x="926" y="516" width="3" height="15" fill="rgb(219,139,5)"/><text x="929.00" y="526.50"></text></g><g><title>std::_Bit_iterator::operator+= (stl_bvector.h) (4 samples, 0.25%)</title><rect x="926" y="532" width="3" height="15" fill="rgb(232,5,3)"/><text x="929.00" y="542.50"></text></g><g><title>std::_Bit_iterator_base::_M_incr (stl_bvector.h) (4 samples, 0.25%)</title><rect x="926" y="548" width="3" height="15" fill="rgb(206,70,13)"/><text x="929.00" y="558.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.25%)</title><rect x="926" y="564" width="3" height="15" fill="rgb(253,197,33)"/><text x="929.00" y="574.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.25%)</title><rect x="926" y="580" width="3" height="15" fill="rgb(231,196,31)"/><text x="929.00" y="590.50"></text></g><g><title>0x7f22cc313700 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="928" y="596" width="1" height="15" fill="rgb(228,223,32)"/><text x="931.00" y="606.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::vector (stl_vector.h) (5 samples, 0.31%)</title><rect x="929" y="484" width="4" height="15" fill="rgb(227,112,44)"/><text x="932.00" y="494.50"></text></g><g><title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_Vector_base (stl_vector.h) (5 samples, 0.31%)</title><rect x="929" y="500" width="4" height="15" fill="rgb(238,206,17)"/><text x="932.00" y="510.50"></text></g><g><title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_M_create_storage (stl_vector.h) (5 samples, 0.31%)</title><rect x="929" y="516" width="4" height="15" fill="rgb(246,211,29)"/><text x="932.00" y="526.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (5 samples, 0.31%)</title><rect x="929" y="532" width="4" height="15" fill="rgb(215,216,24)"/><text x="932.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.31%)</title><rect x="929" y="548" width="4" height="15" fill="rgb(235,147,46)"/><text x="932.00" y="558.50"></text></g><g><title>0x7f22cc313700 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="931" y="564" width="2" height="15" fill="rgb(223,25,1)"/><text x="934.00" y="574.50"></text></g><g><title>0x7f22cc311991 (libc-2.29.so) (2 samples, 0.13%)</title><rect x="933" y="500" width="1" height="15" fill="rgb(247,176,22)"/><text x="936.00" y="510.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (907 samples, 56.83%)</title><rect x="266" y="196" width="671" height="15" fill="rgb(237,123,39)"/><text x="269.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (888 samples, 55.64%)</title><rect x="280" y="212" width="657" height="15" fill="rgb(240,205,18)"/><text x="283.00" y="222.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py) (780 samples, 48.87%)</title><rect x="360" y="228" width="577" height="15" fill="rgb(239,84,27)"/><text x="363.00" y="238.50">_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py)</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (779 samples, 48.81%)</title><rect x="361" y="244" width="576" height="15" fill="rgb(205,98,29)"/><text x="364.00" y="254.50">pybind11::cpp_function::dispatcher (pybind11.h)</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (779 samples, 48.81%)</title><rect x="361" y="260" width="576" height="15" fill="rgb(254,205,15)"/><text x="364.00" y="270.50">void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;py..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (779 samples, 48.81%)</title><rect x="361" y="276" width="576" height="15" fill="rgb(211,165,50)"/><text x="364.00" y="286.50">void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;py..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (778 samples, 48.75%)</title><rect x="361" y="292" width="576" height="15" fill="rgb(230,160,41)"/><text x="364.00" y="302.50">pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, py..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (778 samples, 48.75%)</title><rect x="361" y="308" width="576" height="15" fill="rgb(214,59,32)"/><text x="364.00" y="318.50">pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, py..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (778 samples, 48.75%)</title><rect x="361" y="324" width="576" height="15" fill="rgb(214,147,18)"/><text x="364.00" y="334.50">pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassi..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (778 samples, 48.75%)</title><rect x="361" y="340" width="576" height="15" fill="rgb(248,212,9)"/><text x="364.00" y="350.50">pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h)</text></g><g><title>pybind11::array::~array (numpy.h) (778 samples, 48.75%)</title><rect x="361" y="356" width="576" height="15" fill="rgb(229,221,45)"/><text x="364.00" y="366.50">pybind11::array::~array (numpy.h)</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (778 samples, 48.75%)</title><rect x="361" y="372" width="576" height="15" fill="rgb(213,136,48)"/><text x="364.00" y="382.50">pybind11::buffer::~buffer (pytypes.h)</text></g><g><title>pybind11::object::~object (pytypes.h) (778 samples, 48.75%)</title><rect x="361" y="388" width="576" height="15" fill="rgb(245,120,19)"/><text x="364.00" y="398.50">pybind11::object::~object (pytypes.h)</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (778 samples, 48.75%)</title><rect x="361" y="404" width="576" height="15" fill="rgb(239,195,3)"/><text x="364.00" y="414.50">pybind11::handle::dec_ref &amp; (pytypes.h)</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (778 samples, 48.75%)</title><rect x="361" y="420" width="576" height="15" fill="rgb(205,149,34)"/><text x="364.00" y="430.50">RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (774 samples, 48.50%)</title><rect x="364" y="436" width="573" height="15" fill="rgb(231,27,23)"/><text x="367.00" y="446.50">pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h)</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (379 samples, 23.75%)</title><rect x="656" y="452" width="281" height="15" fill="rgb(221,165,37)"/><text x="659.00" y="462.50">GOMP_parallel (libgomp.so.1.0.0)</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (17 samples, 1.07%)</title><rect x="924" y="468" width="13" height="15" fill="rgb(207,143,23)"/><text x="927.00" y="478.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::~vector (stl_vector.h) (5 samples, 0.31%)</title><rect x="933" y="484" width="4" height="15" fill="rgb(205,127,47)"/><text x="936.00" y="494.50"></text></g><g><title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::~_Vector_base (stl_vector.h) (2 samples, 0.13%)</title><rect x="935" y="500" width="2" height="15" fill="rgb(253,101,40)"/><text x="938.00" y="510.50"></text></g><g><title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_M_deallocate (stl_vector.h) (2 samples, 0.13%)</title><rect x="935" y="516" width="2" height="15" fill="rgb(224,47,9)"/><text x="938.00" y="526.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;float&gt; &gt;::deallocate (alloc_traits.h) (2 samples, 0.13%)</title><rect x="935" y="532" width="2" height="15" fill="rgb(213,165,49)"/><text x="938.00" y="542.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;float&gt;::deallocate (new_allocator.h) (2 samples, 0.13%)</title><rect x="935" y="548" width="2" height="15" fill="rgb(244,216,0)"/><text x="938.00" y="558.50"></text></g><g><title>DOUBLE_clip (clip.c.src) (11 samples, 0.69%)</title><rect x="943" y="420" width="8" height="15" fill="rgb(217,9,52)"/><text x="946.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.13%)</title><rect x="951" y="436" width="1" height="15" fill="rgb(235,202,11)"/><text x="954.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (4 samples, 0.25%)</title><rect x="951" y="420" width="3" height="15" fill="rgb(210,191,26)"/><text x="954.00" y="430.50"></text></g><g><title>_aligned_cast_float_to_double (lowlevel_strided_loops.c.src) (4 samples, 0.25%)</title><rect x="954" y="468" width="3" height="15" fill="rgb(221,193,54)"/><text x="957.00" y="478.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (5 samples, 0.31%)</title><rect x="954" y="420" width="3" height="15" fill="rgb(215,115,49)"/><text x="957.00" y="430.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (5 samples, 0.31%)</title><rect x="954" y="436" width="3" height="15" fill="rgb(241,51,44)"/><text x="957.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (5 samples, 0.31%)</title><rect x="954" y="452" width="3" height="15" fill="rgb(245,193,41)"/><text x="957.00" y="462.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (23 samples, 1.44%)</title><rect x="941" y="372" width="17" height="15" fill="rgb(217,56,8)"/><text x="944.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (22 samples, 1.38%)</title><rect x="942" y="388" width="16" height="15" fill="rgb(220,157,34)"/><text x="945.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c) (22 samples, 1.38%)</title><rect x="942" y="404" width="16" height="15" fill="rgb(242,77,47)"/><text x="945.00" y="414.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (24 samples, 1.50%)</title><rect x="941" y="340" width="18" height="15" fill="rgb(232,20,52)"/><text x="944.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (24 samples, 1.50%)</title><rect x="941" y="356" width="18" height="15" fill="rgb(252,66,13)"/><text x="944.00" y="366.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.25%)</title><rect x="961" y="356" width="3" height="15" fill="rgb(209,151,43)"/><text x="964.00" y="366.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;) (6 samples, 0.38%)</title><rect x="964" y="356" width="4" height="15" fill="rgb(214,100,25)"/><text x="967.00" y="366.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 0.31%)</title><rect x="965" y="372" width="3" height="15" fill="rgb(226,55,53)"/><text x="968.00" y="382.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py) (5 samples, 0.31%)</title><rect x="965" y="388" width="3" height="15" fill="rgb(235,156,17)"/><text x="968.00" y="398.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (2 samples, 0.13%)</title><rect x="967" y="404" width="1" height="15" fill="rgb(242,105,17)"/><text x="970.00" y="414.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.13%)</title><rect x="967" y="420" width="1" height="15" fill="rgb(253,77,28)"/><text x="970.00" y="430.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,000 samples, 62.66%)</title><rect x="233" y="164" width="739" height="15" fill="rgb(242,206,38)"/><text x="236.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (995 samples, 62.34%)</title><rect x="236" y="180" width="736" height="15" fill="rgb(242,50,1)"/><text x="239.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/op_clip.py) (48 samples, 3.01%)</title><rect x="937" y="196" width="35" height="15" fill="rgb(223,123,44)"/><text x="940.00" y="206.50">ru..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_clip.py) (47 samples, 2.94%)</title><rect x="937" y="212" width="35" height="15" fill="rgb(206,5,6)"/><text x="940.00" y="222.50">_r..</text></g><g><title>clip (&lt;__array_function__ internals&gt;) (45 samples, 2.82%)</title><rect x="939" y="228" width="33" height="15" fill="rgb(231,193,52)"/><text x="942.00" y="238.50">cl..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (44 samples, 2.76%)</title><rect x="940" y="244" width="32" height="15" fill="rgb(222,149,51)"/><text x="943.00" y="254.50">ar..</text></g><g><title>clip (numpy/core/fromnumeric.py) (44 samples, 2.76%)</title><rect x="940" y="260" width="32" height="15" fill="rgb(215,206,42)"/><text x="943.00" y="270.50">cl..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (44 samples, 2.76%)</title><rect x="940" y="276" width="32" height="15" fill="rgb(232,15,0)"/><text x="943.00" y="286.50">_w..</text></g><g><title>array_clip (methods.c) (44 samples, 2.76%)</title><rect x="940" y="292" width="32" height="15" fill="rgb(238,123,35)"/><text x="943.00" y="302.50">ar..</text></g><g><title>forward_ndarray_method (methods.c) (44 samples, 2.76%)</title><rect x="940" y="308" width="32" height="15" fill="rgb(232,85,1)"/><text x="943.00" y="318.50">fo..</text></g><g><title>_clip (numpy/core/_methods.py) (44 samples, 2.76%)</title><rect x="940" y="324" width="32" height="15" fill="rgb(252,196,34)"/><text x="943.00" y="334.50">_c..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (18 samples, 1.13%)</title><rect x="959" y="340" width="13" height="15" fill="rgb(230,56,6)"/><text x="962.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.31%)</title><rect x="968" y="356" width="4" height="15" fill="rgb(238,62,2)"/><text x="971.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.19%)</title><rect x="970" y="372" width="2" height="15" fill="rgb(211,143,28)"/><text x="973.00" y="382.50"></text></g><g><title>profile (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py) (1,001 samples, 62.72%)</title><rect x="233" y="100" width="740" height="15" fill="rgb(244,208,43)"/><text x="236.00" y="110.50">profile (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (1,001 samples, 62.72%)</title><rect x="233" y="116" width="740" height="15" fill="rgb(208,187,51)"/><text x="236.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (1,001 samples, 62.72%)</title><rect x="233" y="132" width="740" height="15" fill="rgb(245,138,19)"/><text x="236.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,001 samples, 62.72%)</title><rect x="233" y="148" width="740" height="15" fill="rgb(236,3,1)"/><text x="236.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.13%)</title><rect x="973" y="132" width="1" height="15" fill="rgb(237,135,18)"/><text x="976.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.13%)</title><rect x="973" y="148" width="1" height="15" fill="rgb(232,95,36)"/><text x="976.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.13%)</title><rect x="973" y="164" width="1" height="15" fill="rgb(254,21,9)"/><text x="976.00" y="174.50"></text></g><g><title>profile_pyrt (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py) (1,004 samples, 62.91%)</title><rect x="233" y="68" width="742" height="15" fill="rgb(231,61,39)"/><text x="236.00" y="78.50">profile_pyrt (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py) (1,004 samples, 62.91%)</title><rect x="233" y="84" width="742" height="15" fill="rgb(223,93,3)"/><text x="236.00" y="94.50">setup_profile (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.19%)</title><rect x="973" y="100" width="2" height="15" fill="rgb(223,31,33)"/><text x="976.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.19%)</title><rect x="973" y="116" width="2" height="15" fill="rgb(237,76,8)"/><text x="976.00" y="126.50"></text></g><g><title>_validate_data (sklearn/ensemble/_weight_boosting.py) (2 samples, 0.13%)</title><rect x="976" y="164" width="1" height="15" fill="rgb(217,111,28)"/><text x="979.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (2 samples, 0.13%)</title><rect x="976" y="180" width="1" height="15" fill="rgb(238,83,53)"/><text x="979.00" y="190.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.13%)</title><rect x="983" y="212" width="2" height="15" fill="rgb(239,124,45)"/><text x="986.00" y="222.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.13%)</title><rect x="986" y="260" width="2" height="15" fill="rgb(222,87,3)"/><text x="989.00" y="270.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (2 samples, 0.13%)</title><rect x="986" y="276" width="2" height="15" fill="rgb(240,70,8)"/><text x="989.00" y="286.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="988" y="260" width="2" height="15" fill="rgb(223,92,15)"/><text x="991.00" y="270.50"></text></g><g><title>PyArray_CastToType (convert_datatype.c) (2 samples, 0.13%)</title><rect x="988" y="276" width="2" height="15" fill="rgb(232,48,32)"/><text x="991.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.25%)</title><rect x="990" y="260" width="3" height="15" fill="rgb(254,130,47)"/><text x="993.00" y="270.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (4 samples, 0.25%)</title><rect x="990" y="276" width="3" height="15" fill="rgb(248,154,32)"/><text x="993.00" y="286.50"></text></g><g><title>sse2_binary_scalar1_multiply_DOUBLE (simd.inc.src) (3 samples, 0.19%)</title><rect x="991" y="292" width="2" height="15" fill="rgb(232,150,1)"/><text x="994.00" y="302.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (2 samples, 0.13%)</title><rect x="991" y="308" width="2" height="15" fill="rgb(244,136,1)"/><text x="994.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (11 samples, 0.69%)</title><rect x="986" y="244" width="8" height="15" fill="rgb(233,135,44)"/><text x="989.00" y="254.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (2 samples, 0.13%)</title><rect x="993" y="260" width="1" height="15" fill="rgb(227,131,26)"/><text x="996.00" y="270.50"></text></g><g><title>PyArray_FromAny (ctors.c) (2 samples, 0.13%)</title><rect x="993" y="276" width="1" height="15" fill="rgb(253,167,46)"/><text x="996.00" y="286.50"></text></g><g><title>array_multiply (number.c) (14 samples, 0.88%)</title><rect x="985" y="212" width="11" height="15" fill="rgb(248,55,36)"/><text x="988.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (13 samples, 0.81%)</title><rect x="986" y="228" width="10" height="15" fill="rgb(206,82,18)"/><text x="989.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.13%)</title><rect x="994" y="244" width="2" height="15" fill="rgb(241,71,46)"/><text x="997.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.13%)</title><rect x="994" y="260" width="2" height="15" fill="rgb(206,115,42)"/><text x="997.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.13%)</title><rect x="994" y="276" width="2" height="15" fill="rgb(212,29,8)"/><text x="997.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.19%)</title><rect x="997" y="292" width="2" height="15" fill="rgb(242,50,29)"/><text x="1000.00" y="302.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (2 samples, 0.13%)</title><rect x="998" y="308" width="1" height="15" fill="rgb(210,170,3)"/><text x="1001.00" y="318.50"></text></g><g><title>array_subtract (number.c) (14 samples, 0.88%)</title><rect x="996" y="212" width="10" height="15" fill="rgb(236,133,40)"/><text x="999.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (13 samples, 0.81%)</title><rect x="997" y="228" width="9" height="15" fill="rgb(223,3,18)"/><text x="1000.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (13 samples, 0.81%)</title><rect x="997" y="244" width="9" height="15" fill="rgb(250,65,38)"/><text x="1000.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (13 samples, 0.81%)</title><rect x="997" y="260" width="9" height="15" fill="rgb(222,99,54)"/><text x="1000.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (13 samples, 0.81%)</title><rect x="997" y="276" width="9" height="15" fill="rgb(228,61,38)"/><text x="1000.00" y="286.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (8 samples, 0.50%)</title><rect x="1000" y="292" width="6" height="15" fill="rgb(250,156,11)"/><text x="1003.00" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (8 samples, 0.50%)</title><rect x="1000" y="308" width="6" height="15" fill="rgb(210,116,28)"/><text x="1003.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (8 samples, 0.50%)</title><rect x="1000" y="324" width="6" height="15" fill="rgb(206,101,15)"/><text x="1003.00" y="334.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (5 samples, 0.31%)</title><rect x="1002" y="340" width="4" height="15" fill="rgb(250,48,43)"/><text x="1005.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (5 samples, 0.31%)</title><rect x="1008" y="324" width="4" height="15" fill="rgb(230,185,0)"/><text x="1011.00" y="334.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (2 samples, 0.13%)</title><rect x="1012" y="324" width="2" height="15" fill="rgb(250,212,10)"/><text x="1015.00" y="334.50"></text></g><g><title>allocate_reduce_result (reduction.c) (2 samples, 0.13%)</title><rect x="1012" y="340" width="2" height="15" fill="rgb(207,53,25)"/><text x="1015.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.13%)</title><rect x="1012" y="356" width="2" height="15" fill="rgb(251,11,45)"/><text x="1015.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.13%)</title><rect x="1012" y="372" width="2" height="15" fill="rgb(224,34,42)"/><text x="1015.00" y="382.50"></text></g><g><title>npy_alloc_cache (alloc.c) (2 samples, 0.13%)</title><rect x="1012" y="388" width="2" height="15" fill="rgb(205,40,46)"/><text x="1015.00" y="398.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (2 samples, 0.13%)</title><rect x="1012" y="404" width="2" height="15" fill="rgb(207,104,23)"/><text x="1015.00" y="414.50"></text></g><g><title>DOUBLE_add (loops.c.src) (13 samples, 0.81%)</title><rect x="1017" y="340" width="10" height="15" fill="rgb(239,42,40)"/><text x="1020.00" y="350.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (6 samples, 0.38%)</title><rect x="1022" y="356" width="5" height="15" fill="rgb(249,10,3)"/><text x="1025.00" y="366.50"></text></g><g><title>array_sum (methods.c) (33 samples, 2.07%)</title><rect x="1006" y="212" width="25" height="15" fill="rgb(222,27,41)"/><text x="1009.00" y="222.50">a..</text></g><g><title>forward_ndarray_method (methods.c) (33 samples, 2.07%)</title><rect x="1006" y="228" width="25" height="15" fill="rgb(231,222,30)"/><text x="1009.00" y="238.50">f..</text></g><g><title>_sum (numpy/core/_methods.py) (32 samples, 2.01%)</title><rect x="1007" y="244" width="24" height="15" fill="rgb(207,146,23)"/><text x="1010.00" y="254.50">_..</text></g><g><title>ufunc_reduce (ufunc_object.c) (32 samples, 2.01%)</title><rect x="1007" y="260" width="24" height="15" fill="rgb(211,172,1)"/><text x="1010.00" y="270.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (32 samples, 2.01%)</title><rect x="1007" y="276" width="24" height="15" fill="rgb(214,54,12)"/><text x="1010.00" y="286.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (31 samples, 1.94%)</title><rect x="1008" y="292" width="23" height="15" fill="rgb(222,113,3)"/><text x="1011.00" y="302.50">P..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (31 samples, 1.94%)</title><rect x="1008" y="308" width="23" height="15" fill="rgb(219,161,43)"/><text x="1011.00" y="318.50">P..</text></g><g><title>reduce_loop (ufunc_object.c) (22 samples, 1.38%)</title><rect x="1014" y="324" width="17" height="15" fill="rgb(247,46,14)"/><text x="1017.00" y="334.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (5 samples, 0.31%)</title><rect x="1027" y="340" width="4" height="15" fill="rgb(215,190,21)"/><text x="1030.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (5 samples, 0.31%)</title><rect x="1036" y="372" width="4" height="15" fill="rgb(239,160,3)"/><text x="1039.00" y="382.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (4 samples, 0.25%)</title><rect x="1037" y="388" width="3" height="15" fill="rgb(221,116,10)"/><text x="1040.00" y="398.50"></text></g><g><title>DOUBLE_maximum (loops.c.src) (4 samples, 0.25%)</title><rect x="1037" y="404" width="3" height="15" fill="rgb(243,2,54)"/><text x="1040.00" y="414.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 0.44%)</title><rect x="1036" y="356" width="6" height="15" fill="rgb(212,137,51)"/><text x="1039.00" y="366.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (9 samples, 0.56%)</title><rect x="1036" y="324" width="6" height="15" fill="rgb(211,84,48)"/><text x="1039.00" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (8 samples, 0.50%)</title><rect x="1036" y="340" width="6" height="15" fill="rgb(223,160,17)"/><text x="1039.00" y="350.50"></text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (2 samples, 0.13%)</title><rect x="1049" y="372" width="2" height="15" fill="rgb(251,208,8)"/><text x="1052.00" y="382.50"></text></g><g><title>get_array_function (arrayfunction_override.c) (2 samples, 0.13%)</title><rect x="1049" y="388" width="2" height="15" fill="rgb(244,98,5)"/><text x="1052.00" y="398.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (2 samples, 0.13%)</title><rect x="1049" y="404" width="2" height="15" fill="rgb(222,49,33)"/><text x="1052.00" y="414.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (2 samples, 0.13%)</title><rect x="1049" y="420" width="2" height="15" fill="rgb(254,34,21)"/><text x="1052.00" y="430.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;) (10 samples, 0.63%)</title><rect x="1049" y="340" width="7" height="15" fill="rgb(224,200,46)"/><text x="1052.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (10 samples, 0.63%)</title><rect x="1049" y="356" width="7" height="15" fill="rgb(246,117,4)"/><text x="1052.00" y="366.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py) (8 samples, 0.50%)</title><rect x="1051" y="372" width="5" height="15" fill="rgb(251,122,31)"/><text x="1054.00" y="382.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (4 samples, 0.25%)</title><rect x="1053" y="388" width="3" height="15" fill="rgb(238,206,52)"/><text x="1056.00" y="398.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 0.25%)</title><rect x="1053" y="404" width="3" height="15" fill="rgb(222,71,22)"/><text x="1056.00" y="414.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (2 samples, 0.13%)</title><rect x="1055" y="420" width="1" height="15" fill="rgb(207,102,29)"/><text x="1058.00" y="430.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.13%)</title><rect x="1056" y="356" width="2" height="15" fill="rgb(242,213,18)"/><text x="1059.00" y="366.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.13%)</title><rect x="1056" y="372" width="2" height="15" fill="rgb(224,57,21)"/><text x="1059.00" y="382.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (2 samples, 0.13%)</title><rect x="1056" y="388" width="2" height="15" fill="rgb(241,16,49)"/><text x="1059.00" y="398.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (2 samples, 0.13%)</title><rect x="1056" y="404" width="2" height="15" fill="rgb(241,92,46)"/><text x="1059.00" y="414.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (2 samples, 0.13%)</title><rect x="1056" y="420" width="2" height="15" fill="rgb(223,14,44)"/><text x="1059.00" y="430.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1060" y="372" width="2" height="15" fill="rgb(248,59,0)"/><text x="1063.00" y="382.50"></text></g><g><title>clip (numpy/core/fromnumeric.py) (40 samples, 2.51%)</title><rect x="1033" y="244" width="30" height="15" fill="rgb(234,99,7)"/><text x="1036.00" y="254.50">cl..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (38 samples, 2.38%)</title><rect x="1035" y="260" width="28" height="15" fill="rgb(215,55,51)"/><text x="1038.00" y="270.50">_..</text></g><g><title>array_clip (methods.c) (38 samples, 2.38%)</title><rect x="1035" y="276" width="28" height="15" fill="rgb(239,177,1)"/><text x="1038.00" y="286.50">a..</text></g><g><title>forward_ndarray_method (methods.c) (38 samples, 2.38%)</title><rect x="1035" y="292" width="28" height="15" fill="rgb(234,194,13)"/><text x="1038.00" y="302.50">f..</text></g><g><title>_clip (numpy/core/_methods.py) (38 samples, 2.38%)</title><rect x="1035" y="308" width="28" height="15" fill="rgb(222,148,2)"/><text x="1038.00" y="318.50">_..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (28 samples, 1.75%)</title><rect x="1042" y="324" width="21" height="15" fill="rgb(207,113,16)"/><text x="1045.00" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (9 samples, 0.56%)</title><rect x="1056" y="340" width="7" height="15" fill="rgb(240,75,13)"/><text x="1059.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 0.44%)</title><rect x="1058" y="356" width="5" height="15" fill="rgb(209,132,23)"/><text x="1061.00" y="366.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (2 samples, 0.13%)</title><rect x="1062" y="372" width="1" height="15" fill="rgb(248,95,13)"/><text x="1065.00" y="382.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;) (47 samples, 2.94%)</title><rect x="1031" y="212" width="34" height="15" fill="rgb(254,47,3)"/><text x="1034.00" y="222.50">cl..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (45 samples, 2.82%)</title><rect x="1032" y="228" width="33" height="15" fill="rgb(251,180,45)"/><text x="1035.00" y="238.50">ar..</text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (3 samples, 0.19%)</title><rect x="1063" y="244" width="2" height="15" fill="rgb(209,224,6)"/><text x="1066.00" y="254.50"></text></g><g><title>get_array_function (arrayfunction_override.c) (3 samples, 0.19%)</title><rect x="1063" y="260" width="2" height="15" fill="rgb(231,67,40)"/><text x="1066.00" y="270.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (3 samples, 0.19%)</title><rect x="1063" y="276" width="2" height="15" fill="rgb(217,75,3)"/><text x="1066.00" y="286.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (3 samples, 0.19%)</title><rect x="1063" y="292" width="2" height="15" fill="rgb(222,180,22)"/><text x="1066.00" y="302.50"></text></g><g><title>0x7f22a5d47d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.19%)</title><rect x="1066" y="292" width="2" height="15" fill="rgb(216,184,10)"/><text x="1069.00" y="302.50"></text></g><g><title>0x7f22a5d47666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.19%)</title><rect x="1066" y="308" width="2" height="15" fill="rgb(227,207,31)"/><text x="1069.00" y="318.50"></text></g><g><title>0x7f22a5d3d2fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.19%)</title><rect x="1066" y="324" width="2" height="15" fill="rgb(249,69,10)"/><text x="1069.00" y="334.50"></text></g><g><title>array_getbuffer (buffer.c) (2 samples, 0.13%)</title><rect x="1067" y="340" width="1" height="15" fill="rgb(246,116,27)"/><text x="1070.00" y="350.50"></text></g><g><title>_buffer_get_info (buffer.c) (2 samples, 0.13%)</title><rect x="1067" y="356" width="1" height="15" fill="rgb(206,73,40)"/><text x="1070.00" y="366.50"></text></g><g><title>0x7f22a5d632df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.25%)</title><rect x="1066" y="276" width="3" height="15" fill="rgb(207,20,12)"/><text x="1069.00" y="286.50"></text></g><g><title>0x7f22a5d64405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.69%)</title><rect x="1066" y="260" width="8" height="15" fill="rgb(239,158,2)"/><text x="1069.00" y="270.50"></text></g><g><title>0x7f22a5d63c27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.13%)</title><rect x="1073" y="276" width="1" height="15" fill="rgb(227,5,10)"/><text x="1076.00" y="286.50"></text></g><g><title>0x7f22a5d54fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 0.75%)</title><rect x="1066" y="244" width="9" height="15" fill="rgb(210,97,3)"/><text x="1069.00" y="254.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (4 samples, 0.25%)</title><rect x="1076" y="292" width="3" height="15" fill="rgb(221,187,38)"/><text x="1079.00" y="302.50"></text></g><g><title>0x7f22a5d5505a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.31%)</title><rect x="1076" y="244" width="3" height="15" fill="rgb(249,226,37)"/><text x="1079.00" y="254.50"></text></g><g><title>array_take (methods.c) (5 samples, 0.31%)</title><rect x="1076" y="260" width="3" height="15" fill="rgb(211,132,16)"/><text x="1079.00" y="270.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c) (5 samples, 0.31%)</title><rect x="1076" y="276" width="3" height="15" fill="rgb(235,144,52)"/><text x="1079.00" y="286.50"></text></g><g><title>0x7f22a5d5514f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.13%)</title><rect x="1079" y="244" width="2" height="15" fill="rgb(247,164,43)"/><text x="1082.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.13%)</title><rect x="1079" y="260" width="2" height="15" fill="rgb(206,181,8)"/><text x="1082.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.13%)</title><rect x="1079" y="276" width="2" height="15" fill="rgb(251,212,32)"/><text x="1082.00" y="286.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.13%)</title><rect x="1079" y="292" width="2" height="15" fill="rgb(231,2,34)"/><text x="1082.00" y="302.50"></text></g><g><title>0x7f22a5d55d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (23 samples, 1.44%)</title><rect x="1065" y="228" width="17" height="15" fill="rgb(238,86,36)"/><text x="1068.00" y="238.50"></text></g><g><title>0x7f22a5d551bf (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.13%)</title><rect x="1081" y="244" width="1" height="15" fill="rgb(231,79,13)"/><text x="1084.00" y="254.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (2 samples, 0.13%)</title><rect x="1090" y="260" width="1" height="15" fill="rgb(243,157,37)"/><text x="1093.00" y="270.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (2 samples, 0.13%)</title><rect x="1091" y="260" width="2" height="15" fill="rgb(239,90,34)"/><text x="1094.00" y="270.50"></text></g><g><title>arraydescr_new (descriptor.c) (2 samples, 0.13%)</title><rect x="1093" y="260" width="1" height="15" fill="rgb(211,82,28)"/><text x="1096.00" y="270.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (22 samples, 1.38%)</title><rect x="1082" y="228" width="17" height="15" fill="rgb(222,223,3)"/><text x="1085.00" y="238.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (21 samples, 1.32%)</title><rect x="1083" y="244" width="16" height="15" fill="rgb(235,200,38)"/><text x="1086.00" y="254.50"></text></g><g><title>simplefilter (warnings.py) (6 samples, 0.38%)</title><rect x="1094" y="260" width="5" height="15" fill="rgb(213,134,44)"/><text x="1097.00" y="270.50"></text></g><g><title>_add_filter (warnings.py) (5 samples, 0.31%)</title><rect x="1095" y="276" width="4" height="15" fill="rgb(243,229,12)"/><text x="1098.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1102" y="260" width="2" height="15" fill="rgb(225,97,22)"/><text x="1105.00" y="270.50"></text></g><g><title>array_richcompare (arrayobject.c) (6 samples, 0.38%)</title><rect x="1100" y="228" width="4" height="15" fill="rgb(211,208,16)"/><text x="1103.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.31%)</title><rect x="1101" y="244" width="3" height="15" fill="rgb(221,159,51)"/><text x="1104.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.13%)</title><rect x="1107" y="340" width="2" height="15" fill="rgb(205,155,9)"/><text x="1110.00" y="350.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (2 samples, 0.13%)</title><rect x="1107" y="356" width="2" height="15" fill="rgb(238,195,5)"/><text x="1110.00" y="366.50"></text></g><g><title>DOUBLE_add (loops.c.src) (7 samples, 0.44%)</title><rect x="1114" y="356" width="5" height="15" fill="rgb(251,73,2)"/><text x="1117.00" y="366.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (3 samples, 0.19%)</title><rect x="1117" y="372" width="2" height="15" fill="rgb(225,8,41)"/><text x="1120.00" y="382.50"></text></g><g><title>array_sum (methods.c) (20 samples, 1.25%)</title><rect x="1105" y="228" width="15" height="15" fill="rgb(216,209,35)"/><text x="1108.00" y="238.50"></text></g><g><title>forward_ndarray_method (methods.c) (20 samples, 1.25%)</title><rect x="1105" y="244" width="15" height="15" fill="rgb(213,127,33)"/><text x="1108.00" y="254.50"></text></g><g><title>_sum (numpy/core/_methods.py) (19 samples, 1.19%)</title><rect x="1106" y="260" width="14" height="15" fill="rgb(231,186,0)"/><text x="1109.00" y="270.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (19 samples, 1.19%)</title><rect x="1106" y="276" width="14" height="15" fill="rgb(232,138,30)"/><text x="1109.00" y="286.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (18 samples, 1.13%)</title><rect x="1107" y="292" width="13" height="15" fill="rgb(246,195,51)"/><text x="1110.00" y="302.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (18 samples, 1.13%)</title><rect x="1107" y="308" width="13" height="15" fill="rgb(242,34,6)"/><text x="1110.00" y="318.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (17 samples, 1.07%)</title><rect x="1107" y="324" width="13" height="15" fill="rgb(245,114,12)"/><text x="1110.00" y="334.50"></text></g><g><title>reduce_loop (ufunc_object.c) (14 samples, 0.88%)</title><rect x="1110" y="340" width="10" height="15" fill="rgb(254,158,8)"/><text x="1113.00" y="350.50"></text></g><g><title>unicode_endswith (python3.7) (2 samples, 0.13%)</title><rect x="1128" y="260" width="2" height="15" fill="rgb(248,207,28)"/><text x="1131.00" y="270.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (15 samples, 0.94%)</title><rect x="1120" y="228" width="11" height="15" fill="rgb(214,200,41)"/><text x="1123.00" y="238.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (12 samples, 0.75%)</title><rect x="1122" y="244" width="9" height="15" fill="rgb(245,13,32)"/><text x="1125.00" y="254.50"></text></g><g><title>unicode_startswith (python3.7) (2 samples, 0.13%)</title><rect x="1130" y="260" width="1" height="15" fill="rgb(215,201,13)"/><text x="1133.00" y="270.50"></text></g><g><title>DOUBLE_divide (loops.c.src) (8 samples, 0.50%)</title><rect x="1132" y="292" width="6" height="15" fill="rgb(250,194,34)"/><text x="1135.00" y="302.50"></text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src) (8 samples, 0.50%)</title><rect x="1132" y="308" width="6" height="15" fill="rgb(210,214,16)"/><text x="1135.00" y="318.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src) (8 samples, 0.50%)</title><rect x="1132" y="324" width="6" height="15" fill="rgb(253,31,42)"/><text x="1135.00" y="334.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (7 samples, 0.44%)</title><rect x="1133" y="340" width="5" height="15" fill="rgb(220,224,42)"/><text x="1136.00" y="350.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (10 samples, 0.63%)</title><rect x="1139" y="292" width="8" height="15" fill="rgb(248,150,19)"/><text x="1142.00" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (8 samples, 0.50%)</title><rect x="1141" y="308" width="6" height="15" fill="rgb(247,191,19)"/><text x="1144.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (7 samples, 0.44%)</title><rect x="1141" y="324" width="6" height="15" fill="rgb(252,50,25)"/><text x="1144.00" y="334.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (5 samples, 0.31%)</title><rect x="1143" y="340" width="4" height="15" fill="rgb(210,48,47)"/><text x="1146.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (21 samples, 1.32%)</title><rect x="1132" y="244" width="15" height="15" fill="rgb(219,129,50)"/><text x="1135.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (21 samples, 1.32%)</title><rect x="1132" y="260" width="15" height="15" fill="rgb(218,23,42)"/><text x="1135.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (21 samples, 1.32%)</title><rect x="1132" y="276" width="15" height="15" fill="rgb(245,45,29)"/><text x="1135.00" y="286.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py) (112 samples, 7.02%)</title><rect x="1065" y="212" width="83" height="15" fill="rgb(223,8,29)"/><text x="1068.00" y="222.50">predict_p..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (23 samples, 1.44%)</title><rect x="1131" y="228" width="17" height="15" fill="rgb(226,191,5)"/><text x="1134.00" y="238.50"></text></g><g><title>0x7f22cb5350c0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.13%)</title><rect x="1150" y="292" width="2" height="15" fill="rgb(226,64,36)"/><text x="1153.00" y="302.50"></text></g><g><title>0x7f22cc4e3e25 (libm-2.29.so) (2 samples, 0.13%)</title><rect x="1154" y="292" width="1" height="15" fill="rgb(214,153,31)"/><text x="1157.00" y="302.50"></text></g><g><title>0x7f22cc4e3e7e (libm-2.29.so) (2 samples, 0.13%)</title><rect x="1158" y="292" width="1" height="15" fill="rgb(206,164,25)"/><text x="1161.00" y="302.50"></text></g><g><title>0x7f22cc4e3ea2 (libm-2.29.so) (2 samples, 0.13%)</title><rect x="1161" y="292" width="1" height="15" fill="rgb(226,173,19)"/><text x="1164.00" y="302.50"></text></g><g><title>0x7f22cc4e3ed2 (libm-2.29.so) (2 samples, 0.13%)</title><rect x="1164" y="292" width="2" height="15" fill="rgb(221,4,1)"/><text x="1167.00" y="302.50"></text></g><g><title>0x7f22cc4e3ee6 (libm-2.29.so) (2 samples, 0.13%)</title><rect x="1166" y="292" width="1" height="15" fill="rgb(215,9,44)"/><text x="1169.00" y="302.50"></text></g><g><title>0x7f22cc4e3eee (libm-2.29.so) (7 samples, 0.44%)</title><rect x="1167" y="292" width="5" height="15" fill="rgb(249,16,46)"/><text x="1170.00" y="302.50"></text></g><g><title>0x7f22cc4e3efa (libm-2.29.so) (6 samples, 0.38%)</title><rect x="1172" y="292" width="5" height="15" fill="rgb(246,157,0)"/><text x="1175.00" y="302.50"></text></g><g><title>log (libm-2.29.so) (2 samples, 0.13%)</title><rect x="1180" y="292" width="1" height="15" fill="rgb(246,122,9)"/><text x="1183.00" y="302.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (46 samples, 2.88%)</title><rect x="1149" y="244" width="34" height="15" fill="rgb(224,37,26)"/><text x="1152.00" y="254.50">ex..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (45 samples, 2.82%)</title><rect x="1150" y="260" width="33" height="15" fill="rgb(216,223,23)"/><text x="1153.00" y="270.50">tr..</text></g><g><title>PyUFunc_d_d (loops.c.src) (45 samples, 2.82%)</title><rect x="1150" y="276" width="33" height="15" fill="rgb(212,193,50)"/><text x="1153.00" y="286.50">Py..</text></g><g><title>npy_log (npy_math_internal.h.src) (2 samples, 0.13%)</title><rect x="1181" y="292" width="2" height="15" fill="rgb(246,170,52)"/><text x="1184.00" y="302.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_weight_boosting.py) (278 samples, 17.42%)</title><rect x="978" y="180" width="206" height="15" fill="rgb(207,58,33)"/><text x="981.00" y="190.50">&lt;genexpr&gt; (sklearn/ensemble..</text></g><g><title>_samme_proba (sklearn/ensemble/_weight_boosting.py) (278 samples, 17.42%)</title><rect x="978" y="196" width="206" height="15" fill="rgb(228,28,45)"/><text x="981.00" y="206.50">_samme_proba (sklearn/ensem..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (48 samples, 3.01%)</title><rect x="1148" y="212" width="36" height="15" fill="rgb(236,123,53)"/><text x="1151.00" y="222.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (48 samples, 3.01%)</title><rect x="1148" y="228" width="36" height="15" fill="rgb(213,208,11)"/><text x="1151.00" y="238.50">PyU..</text></g><g><title>profile (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py) (285 samples, 17.86%)</title><rect x="975" y="100" width="211" height="15" fill="rgb(239,194,38)"/><text x="978.00" y="110.50">profile (bench_AdaBoostClas..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (285 samples, 17.86%)</title><rect x="975" y="116" width="211" height="15" fill="rgb(216,72,51)"/><text x="978.00" y="126.50">time_predict (mlprodict/asv..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (285 samples, 17.86%)</title><rect x="975" y="132" width="211" height="15" fill="rgb(222,144,17)"/><text x="978.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_ben..</text></g><g><title>predict_proba (sklearn/ensemble/_weight_boosting.py) (285 samples, 17.86%)</title><rect x="975" y="148" width="211" height="15" fill="rgb(227,170,39)"/><text x="978.00" y="158.50">predict_proba (sklearn/ense..</text></g><g><title>decision_function (sklearn/ensemble/_weight_boosting.py) (282 samples, 17.67%)</title><rect x="977" y="164" width="209" height="15" fill="rgb(216,194,54)"/><text x="980.00" y="174.50">decision_function (sklearn/..</text></g><g><title>array_add (number.c) (3 samples, 0.19%)</title><rect x="1184" y="180" width="2" height="15" fill="rgb(246,115,46)"/><text x="1187.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1184" y="196" width="2" height="15" fill="rgb(211,71,24)"/><text x="1187.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.19%)</title><rect x="1184" y="212" width="2" height="15" fill="rgb(212,13,17)"/><text x="1187.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1184" y="228" width="2" height="15" fill="rgb(240,87,29)"/><text x="1187.00" y="238.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1184" y="244" width="2" height="15" fill="rgb(222,196,2)"/><text x="1187.00" y="254.50"></text></g><g><title>DOUBLE_add (loops.c.src) (2 samples, 0.13%)</title><rect x="1184" y="260" width="2" height="15" fill="rgb(247,178,21)"/><text x="1187.00" y="270.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (2 samples, 0.13%)</title><rect x="1184" y="276" width="2" height="15" fill="rgb(223,1,50)"/><text x="1187.00" y="286.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (2 samples, 0.13%)</title><rect x="1184" y="292" width="2" height="15" fill="rgb(207,131,10)"/><text x="1187.00" y="302.50"></text></g><g><title>profile_skl (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py) (286 samples, 17.92%)</title><rect x="975" y="68" width="212" height="15" fill="rgb(246,180,44)"/><text x="978.00" y="78.50">profile_skl (bench_AdaBoost..</text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py) (286 samples, 17.92%)</title><rect x="975" y="84" width="212" height="15" fill="rgb(209,201,41)"/><text x="978.00" y="94.50">setup_profile (bench_AdaBoo..</text></g><g><title>&lt;module&gt; (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py) (1,595 samples, 99.94%)</title><rect x="10" y="52" width="1179" height="15" fill="rgb(213,14,27)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>start (bench_AdaBoostClassifier_default_b_cl_1000_4_12_float_.py) (3 samples, 0.19%)</title><rect x="1187" y="68" width="2" height="15" fill="rgb(232,76,50)"/><text x="1190.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/AdaBoostClassifier/bench_AdaBoostClassifier_default_b_cl.py) (3 samples, 0.19%)</title><rect x="1187" y="84" width="2" height="15" fill="rgb(252,213,50)"/><text x="1190.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.19%)</title><rect x="1187" y="100" width="2" height="15" fill="rgb(226,184,46)"/><text x="1190.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_weight_boosting.py) (3 samples, 0.19%)</title><rect x="1187" y="116" width="2" height="15" fill="rgb(207,215,10)"/><text x="1190.00" y="126.50"></text></g><g><title>fit (sklearn/ensemble/_weight_boosting.py) (3 samples, 0.19%)</title><rect x="1187" y="132" width="2" height="15" fill="rgb(231,24,51)"/><text x="1190.00" y="142.50"></text></g><g><title>_boost (sklearn/ensemble/_weight_boosting.py) (3 samples, 0.19%)</title><rect x="1187" y="148" width="2" height="15" fill="rgb(234,64,49)"/><text x="1190.00" y="158.50"></text></g><g><title>_boost_real (sklearn/ensemble/_weight_boosting.py) (3 samples, 0.19%)</title><rect x="1187" y="164" width="2" height="15" fill="rgb(226,202,41)"/><text x="1190.00" y="174.50"></text></g><g><title>array_richcompare (arrayobject.c) (2 samples, 0.13%)</title><rect x="1187" y="180" width="2" height="15" fill="rgb(218,130,13)"/><text x="1190.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1187" y="196" width="2" height="15" fill="rgb(216,126,43)"/><text x="1190.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.13%)</title><rect x="1187" y="212" width="2" height="15" fill="rgb(233,40,3)"/><text x="1190.00" y="222.50"></text></g><g><title>all (1,596 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(237,40,12)"/><text x="13.00" y="46.50"></text></g></g></svg>