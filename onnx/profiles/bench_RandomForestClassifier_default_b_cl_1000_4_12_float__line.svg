<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1734" onload="init(evt)" viewBox="0 0 1200 1734" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1734" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1717.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1717.00"> </text><g id="frames"><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:31) (1 samples, 0.16%)</title><rect x="10" y="52" width="1" height="15" fill="rgb(246,133,19)"/><text x="13.00" y="62.50"></text></g><g><title>start (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:11) (1 samples, 0.16%)</title><rect x="10" y="68" width="1" height="15" fill="rgb(223,156,8)"/><text x="13.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:39) (1 samples, 0.16%)</title><rect x="10" y="84" width="1" height="15" fill="rgb(229,195,42)"/><text x="13.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py:151) (1 samples, 0.16%)</title><rect x="10" y="100" width="1" height="15" fill="rgb(247,165,32)"/><text x="13.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_forest.py:369) (1 samples, 0.16%)</title><rect x="10" y="116" width="1" height="15" fill="rgb(253,12,42)"/><text x="13.00" y="126.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_forest.py:369) (1 samples, 0.16%)</title><rect x="10" y="132" width="1" height="15" fill="rgb(247,40,37)"/><text x="13.00" y="142.50"></text></g><g><title>_make_estimator (sklearn/ensemble/_base.py:151) (1 samples, 0.16%)</title><rect x="10" y="148" width="1" height="15" fill="rgb(236,48,27)"/><text x="13.00" y="158.50"></text></g><g><title>set_params (sklearn/base.py:227) (1 samples, 0.16%)</title><rect x="10" y="164" width="1" height="15" fill="rgb(220,66,6)"/><text x="13.00" y="174.50"></text></g><g><title>get_params (sklearn/base.py:199) (1 samples, 0.16%)</title><rect x="10" y="180" width="1" height="15" fill="rgb(245,200,18)"/><text x="13.00" y="190.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py:1011) (1 samples, 0.16%)</title><rect x="11" y="180" width="2" height="15" fill="rgb(247,28,54)"/><text x="14.00" y="190.50"></text></g><g><title>make_graph (onnx/helper.py:90) (1 samples, 0.16%)</title><rect x="11" y="196" width="2" height="15" fill="rgb(209,165,29)"/><text x="14.00" y="206.50"></text></g><g><title>google::protobuf::python::repeated_composite_container::Extend (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="11" y="212" width="2" height="15" fill="rgb(251,150,41)"/><text x="14.00" y="222.50"></text></g><g><title>google::protobuf::python::cmessage::MergeFrom (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="11" y="228" width="2" height="15" fill="rgb(249,152,34)"/><text x="14.00" y="238.50"></text></g><g><title>google::protobuf::Message::MergeFrom (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="11" y="244" width="2" height="15" fill="rgb(211,155,13)"/><text x="14.00" y="254.50"></text></g><g><title>google::protobuf::internal::ReflectionOps::Merge (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="11" y="260" width="2" height="15" fill="rgb(238,25,41)"/><text x="14.00" y="270.50"></text></g><g><title>google::protobuf::Message::MergeFrom (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="11" y="276" width="2" height="15" fill="rgb(247,86,16)"/><text x="14.00" y="286.50"></text></g><g><title>google::protobuf::internal::ReflectionOps::Merge (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="11" y="292" width="2" height="15" fill="rgb(245,100,29)"/><text x="14.00" y="302.50"></text></g><g><title>google::protobuf::Reflection::GetRepeatedInt64 (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="11" y="308" width="2" height="15" fill="rgb(211,188,40)"/><text x="14.00" y="318.50"></text></g><g><title>add_node (skl2onnx/common/tree_ensemble.py:133) (1 samples, 0.16%)</title><rect x="13" y="228" width="2" height="15" fill="rgb(244,53,48)"/><text x="16.00" y="238.50"></text></g><g><title>array_flatten (methods.c:2429) (1 samples, 0.16%)</title><rect x="13" y="244" width="2" height="15" fill="rgb(206,151,39)"/><text x="16.00" y="254.50"></text></g><g><title>PyArray_Flatten (shape.c:975) (1 samples, 0.16%)</title><rect x="13" y="260" width="2" height="15" fill="rgb(246,74,40)"/><text x="16.00" y="270.50"></text></g><g><title>PyArray_CopyAsFlat (ctors.c:2863) (1 samples, 0.16%)</title><rect x="13" y="276" width="2" height="15" fill="rgb(215,124,21)"/><text x="16.00" y="286.50"></text></g><g><title>NpyIter_GetIterNext (nditer_templ.c.src:350) (1 samples, 0.16%)</title><rect x="13" y="292" width="2" height="15" fill="rgb(236,135,43)"/><text x="16.00" y="302.50"></text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:28) (3 samples, 0.48%)</title><rect x="11" y="84" width="6" height="15" fill="rgb(238,152,25)"/><text x="14.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (3 samples, 0.48%)</title><rect x="11" y="100" width="6" height="15" fill="rgb(238,176,49)"/><text x="14.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:222) (3 samples, 0.48%)</title><rect x="11" y="116" width="6" height="15" fill="rgb(243,6,14)"/><text x="14.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py:110) (3 samples, 0.48%)</title><rect x="11" y="132" width="6" height="15" fill="rgb(242,25,18)"/><text x="14.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py:346) (3 samples, 0.48%)</title><rect x="11" y="148" width="6" height="15" fill="rgb(254,191,27)"/><text x="14.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py:139) (3 samples, 0.48%)</title><rect x="11" y="164" width="6" height="15" fill="rgb(228,39,16)"/><text x="14.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py:973) (2 samples, 0.32%)</title><rect x="13" y="180" width="4" height="15" fill="rgb(208,62,28)"/><text x="16.00" y="190.50"></text></g><g><title>convert_sklearn_random_forest_classifier (skl2onnx/operator_converters/random_forest.py:60) (2 samples, 0.32%)</title><rect x="13" y="196" width="4" height="15" fill="rgb(209,1,39)"/><text x="16.00" y="206.50"></text></g><g><title>add_tree_to_attribute_pairs (skl2onnx/common/tree_ensemble.py:186) (2 samples, 0.32%)</title><rect x="13" y="212" width="4" height="15" fill="rgb(232,64,15)"/><text x="16.00" y="222.50"></text></g><g><title>add_node (skl2onnx/common/tree_ensemble.py:140) (1 samples, 0.16%)</title><rect x="15" y="228" width="2" height="15" fill="rgb(230,46,27)"/><text x="18.00" y="238.50"></text></g><g><title>0x7f6842aaaa20 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="15" y="244" width="2" height="15" fill="rgb(253,216,51)"/><text x="18.00" y="254.50"></text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:659) (1 samples, 0.16%)</title><rect x="17" y="148" width="2" height="15" fill="rgb(246,79,5)"/><text x="20.00" y="158.50"></text></g><g><title>_partition_estimators (sklearn/ensemble/_base.py:183) (1 samples, 0.16%)</title><rect x="17" y="164" width="2" height="15" fill="rgb(248,10,32)"/><text x="20.00" y="174.50"></text></g><g><title>cumsum (&lt;__array_function__ internals&gt;:6) (1 samples, 0.16%)</title><rect x="17" y="180" width="2" height="15" fill="rgb(218,64,54)"/><text x="20.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (1 samples, 0.16%)</title><rect x="17" y="196" width="2" height="15" fill="rgb(244,56,4)"/><text x="20.00" y="206.50"></text></g><g><title>cumsum (numpy/core/fromnumeric.py:2423) (1 samples, 0.16%)</title><rect x="17" y="212" width="2" height="15" fill="rgb(244,61,52)"/><text x="20.00" y="222.50"></text></g><g><title>__init__ (joblib/parallel.py:637) (1 samples, 0.16%)</title><rect x="19" y="164" width="2" height="15" fill="rgb(251,83,10)"/><text x="22.00" y="174.50"></text></g><g><title>memstr_to_bytes (joblib/disk.py:45) (1 samples, 0.16%)</title><rect x="19" y="180" width="2" height="15" fill="rgb(233,202,14)"/><text x="22.00" y="190.50"></text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:666) (2 samples, 0.32%)</title><rect x="19" y="148" width="4" height="15" fill="rgb(214,28,6)"/><text x="22.00" y="158.50"></text></g><g><title>__init__ (joblib/parallel.py:695) (1 samples, 0.16%)</title><rect x="21" y="164" width="2" height="15" fill="rgb(235,45,41)"/><text x="24.00" y="174.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:796) (1 samples, 0.16%)</title><rect x="25" y="180" width="1" height="15" fill="rgb(246,117,8)"/><text x="28.00" y="190.50"></text></g><g><title>get (queue.py:164) (1 samples, 0.16%)</title><rect x="25" y="196" width="1" height="15" fill="rgb(228,220,12)"/><text x="28.00" y="206.50"></text></g><g><title>update_wrapper (functools.py:54) (2 samples, 0.32%)</title><rect x="30" y="228" width="4" height="15" fill="rgb(242,53,28)"/><text x="33.00" y="238.50"></text></g><g><title>update_wrapper (functools.py:58) (1 samples, 0.16%)</title><rect x="34" y="228" width="2" height="15" fill="rgb(214,142,9)"/><text x="37.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:807) (6 samples, 0.96%)</title><rect x="26" y="180" width="12" height="15" fill="rgb(242,172,30)"/><text x="29.00" y="190.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py:669) (5 samples, 0.80%)</title><rect x="28" y="196" width="10" height="15" fill="rgb(212,175,37)"/><text x="31.00" y="206.50"></text></g><g><title>delayed (joblib/parallel.py:308) (4 samples, 0.64%)</title><rect x="30" y="212" width="8" height="15" fill="rgb(221,198,27)"/><text x="33.00" y="222.50"></text></g><g><title>update_wrapper (functools.py:63) (1 samples, 0.16%)</title><rect x="36" y="228" width="2" height="15" fill="rgb(241,22,48)"/><text x="39.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:822) (1 samples, 0.16%)</title><rect x="38" y="180" width="2" height="15" fill="rgb(247,134,44)"/><text x="41.00" y="190.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:208) (2 samples, 0.32%)</title><rect x="40" y="196" width="3" height="15" fill="rgb(218,66,28)"/><text x="43.00" y="206.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.16%)</title><rect x="42" y="212" width="1" height="15" fill="rgb(215,156,28)"/><text x="45.00" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:274) (1 samples, 0.16%)</title><rect x="45" y="228" width="2" height="15" fill="rgb(251,91,9)"/><text x="48.00" y="238.50"></text></g><g><title>get_active_backend (joblib/parallel.py:116) (2 samples, 0.32%)</title><rect x="45" y="212" width="4" height="15" fill="rgb(239,227,53)"/><text x="48.00" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:276) (1 samples, 0.16%)</title><rect x="47" y="228" width="2" height="15" fill="rgb(254,58,50)"/><text x="50.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:824) (7 samples, 1.12%)</title><rect x="40" y="180" width="13" height="15" fill="rgb(230,34,53)"/><text x="43.00" y="190.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:212) (5 samples, 0.80%)</title><rect x="43" y="196" width="10" height="15" fill="rgb(252,167,53)"/><text x="46.00" y="206.50"></text></g><g><title>get_active_backend (joblib/parallel.py:94) (2 samples, 0.32%)</title><rect x="49" y="212" width="4" height="15" fill="rgb(205,115,1)"/><text x="52.00" y="222.50"></text></g><g><title>unicode_dealloc (python3.7) (1 samples, 0.16%)</title><rect x="51" y="228" width="2" height="15" fill="rgb(251,4,36)"/><text x="54.00" y="238.50"></text></g><g><title>__init__ (joblib/parallel.py:241) (1 samples, 0.16%)</title><rect x="53" y="196" width="2" height="15" fill="rgb(225,0,45)"/><text x="56.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:825) (2 samples, 0.32%)</title><rect x="53" y="180" width="4" height="15" fill="rgb(218,224,16)"/><text x="56.00" y="190.50"></text></g><g><title>__init__ (joblib/parallel.py:244) (1 samples, 0.16%)</title><rect x="55" y="196" width="2" height="15" fill="rgb(229,105,31)"/><text x="58.00" y="206.50"></text></g><g><title>__exit__ (threading.py:243) (1 samples, 0.16%)</title><rect x="59" y="212" width="1" height="15" fill="rgb(242,60,14)"/><text x="62.00" y="222.50"></text></g><g><title>__exit__ (threading.py:244) (1 samples, 0.16%)</title><rect x="60" y="212" width="2" height="15" fill="rgb(209,59,31)"/><text x="63.00" y="222.50"></text></g><g><title>notify (threading.py:348) (3 samples, 0.48%)</title><rect x="62" y="212" width="6" height="15" fill="rgb(227,6,43)"/><text x="65.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:826) (7 samples, 1.12%)</title><rect x="57" y="180" width="13" height="15" fill="rgb(236,101,19)"/><text x="60.00" y="190.50"></text></g><g><title>put (queue.py:151) (7 samples, 1.12%)</title><rect x="57" y="196" width="13" height="15" fill="rgb(216,229,50)"/><text x="60.00" y="206.50"></text></g><g><title>notify (threading.py:350) (1 samples, 0.16%)</title><rect x="68" y="212" width="2" height="15" fill="rgb(218,12,9)"/><text x="71.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:829) (3 samples, 0.48%)</title><rect x="70" y="180" width="5" height="15" fill="rgb(227,17,9)"/><text x="73.00" y="190.50"></text></g><g><title>get (queue.py:181) (2 samples, 0.32%)</title><rect x="72" y="196" width="3" height="15" fill="rgb(231,127,4)"/><text x="75.00" y="206.50"></text></g><g><title>notify (threading.py:345) (1 samples, 0.16%)</title><rect x="74" y="212" width="1" height="15" fill="rgb(214,173,42)"/><text x="77.00" y="222.50"></text></g><g><title>_is_owned (threading.py:258) (1 samples, 0.16%)</title><rect x="74" y="228" width="1" height="15" fill="rgb(222,46,46)"/><text x="77.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:830) (1 samples, 0.16%)</title><rect x="75" y="180" width="2" height="15" fill="rgb(235,85,46)"/><text x="78.00" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:746) (2 samples, 0.32%)</title><rect x="77" y="196" width="4" height="15" fill="rgb(235,99,49)"/><text x="80.00" y="206.50"></text></g><g><title>_dispatch (joblib/parallel.py:751) (1 samples, 0.16%)</title><rect x="81" y="196" width="2" height="15" fill="rgb(223,50,42)"/><text x="84.00" y="206.50"></text></g><g><title>__init__ (joblib/parallel.py:181) (1 samples, 0.16%)</title><rect x="87" y="260" width="2" height="15" fill="rgb(232,216,5)"/><text x="90.00" y="270.50"></text></g><g><title>__call__ (joblib/parallel.py:254) (2 samples, 0.32%)</title><rect x="87" y="244" width="4" height="15" fill="rgb(224,67,38)"/><text x="90.00" y="254.50"></text></g><g><title>__init__ (joblib/parallel.py:209) (1 samples, 0.16%)</title><rect x="89" y="260" width="2" height="15" fill="rgb(216,147,43)"/><text x="92.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:255) (1 samples, 0.16%)</title><rect x="92" y="260" width="2" height="15" fill="rgb(239,62,22)"/><text x="95.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:520) (1 samples, 0.16%)</title><rect x="94" y="292" width="2" height="15" fill="rgb(230,18,50)"/><text x="97.00" y="302.50"></text></g><g><title>array_dealloc (arrayobject.c:533) (1 samples, 0.16%)</title><rect x="94" y="308" width="2" height="15" fill="rgb(254,122,17)"/><text x="97.00" y="318.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c:152) (1 samples, 0.16%)</title><rect x="94" y="324" width="2" height="15" fill="rgb(220,79,8)"/><text x="97.00" y="334.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:938) (1 samples, 0.16%)</title><rect x="100" y="308" width="2" height="15" fill="rgb(220,64,54)"/><text x="103.00" y="318.50"></text></g><g><title>isclass (inspect.py:78) (1 samples, 0.16%)</title><rect x="100" y="324" width="2" height="15" fill="rgb(241,89,18)"/><text x="103.00" y="334.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:947) (1 samples, 0.16%)</title><rect x="104" y="324" width="2" height="15" fill="rgb(213,122,32)"/><text x="107.00" y="334.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:906) (9 samples, 1.44%)</title><rect x="96" y="292" width="17" height="15" fill="rgb(242,130,14)"/><text x="99.00" y="302.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (6 samples, 0.96%)</title><rect x="102" y="308" width="11" height="15" fill="rgb(249,40,24)"/><text x="105.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (4 samples, 0.64%)</title><rect x="106" y="324" width="7" height="15" fill="rgb(233,203,48)"/><text x="109.00" y="334.50"></text></g><g><title>unicode_endswith (python3.7) (2 samples, 0.32%)</title><rect x="109" y="340" width="4" height="15" fill="rgb(253,184,27)"/><text x="112.00" y="350.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:907) (1 samples, 0.16%)</title><rect x="113" y="292" width="2" height="15" fill="rgb(208,146,26)"/><text x="116.00" y="302.50"></text></g><g><title>0x7f681d2b310c (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="115" y="404" width="2" height="15" fill="rgb(227,44,5)"/><text x="118.00" y="414.50"></text></g><g><title>_buffer_info_new (buffer.c:517) (1 samples, 0.16%)</title><rect x="117" y="452" width="2" height="15" fill="rgb(224,193,10)"/><text x="120.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="117" y="468" width="2" height="15" fill="rgb(244,204,37)"/><text x="120.00" y="478.50"></text></g><g><title>_buffer_format_string (buffer.c:365) (1 samples, 0.16%)</title><rect x="119" y="468" width="2" height="15" fill="rgb(217,190,50)"/><text x="122.00" y="478.50"></text></g><g><title>_is_natively_aligned_at (buffer.c:216) (1 samples, 0.16%)</title><rect x="119" y="484" width="2" height="15" fill="rgb(205,165,43)"/><text x="122.00" y="494.50"></text></g><g><title>0x7f681d2bd666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.64%)</title><rect x="115" y="388" width="8" height="15" fill="rgb(230,207,22)"/><text x="118.00" y="398.50"></text></g><g><title>0x7f681d2b32fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.48%)</title><rect x="117" y="404" width="6" height="15" fill="rgb(215,152,22)"/><text x="120.00" y="414.50"></text></g><g><title>array_getbuffer (buffer.c:782) (3 samples, 0.48%)</title><rect x="117" y="420" width="6" height="15" fill="rgb(213,224,8)"/><text x="120.00" y="430.50"></text></g><g><title>_buffer_get_info (buffer.c:653) (3 samples, 0.48%)</title><rect x="117" y="436" width="6" height="15" fill="rgb(208,10,11)"/><text x="120.00" y="446.50"></text></g><g><title>_buffer_info_new (buffer.c:584) (2 samples, 0.32%)</title><rect x="119" y="452" width="4" height="15" fill="rgb(244,93,43)"/><text x="122.00" y="462.50"></text></g><g><title>_buffer_format_string (buffer.c:433) (1 samples, 0.16%)</title><rect x="121" y="468" width="2" height="15" fill="rgb(246,28,48)"/><text x="124.00" y="478.50"></text></g><g><title>_append_char (buffer.c:121) (1 samples, 0.16%)</title><rect x="121" y="484" width="2" height="15" fill="rgb(237,94,20)"/><text x="124.00" y="494.50"></text></g><g><title>realloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="121" y="500" width="2" height="15" fill="rgb(240,199,20)"/><text x="124.00" y="510.50"></text></g><g><title>0x7f681d2d92df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.80%)</title><rect x="115" y="356" width="9" height="15" fill="rgb(238,108,16)"/><text x="118.00" y="366.50"></text></g><g><title>0x7f681d2bdd04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.80%)</title><rect x="115" y="372" width="9" height="15" fill="rgb(206,156,20)"/><text x="118.00" y="382.50"></text></g><g><title>0x7f681d2bd6fa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="123" y="388" width="1" height="15" fill="rgb(234,47,29)"/><text x="126.00" y="398.50"></text></g><g><title>0x7f681d2d93c6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="124" y="356" width="2" height="15" fill="rgb(248,29,0)"/><text x="127.00" y="366.50"></text></g><g><title>0x7f681d2d956e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="126" y="356" width="2" height="15" fill="rgb(238,183,31)"/><text x="129.00" y="366.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:125) (1 samples, 0.16%)</title><rect x="128" y="388" width="2" height="15" fill="rgb(241,112,32)"/><text x="131.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (1 samples, 0.16%)</title><rect x="128" y="404" width="2" height="15" fill="rgb(221,31,15)"/><text x="131.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:72) (1 samples, 0.16%)</title><rect x="128" y="420" width="2" height="15" fill="rgb(252,66,12)"/><text x="131.00" y="430.50"></text></g><g><title>array_zeros (multiarraymodule.c:1973) (2 samples, 0.32%)</title><rect x="128" y="372" width="4" height="15" fill="rgb(251,202,39)"/><text x="131.00" y="382.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (1 samples, 0.16%)</title><rect x="130" y="388" width="2" height="15" fill="rgb(228,189,47)"/><text x="133.00" y="398.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c:954) (1 samples, 0.16%)</title><rect x="130" y="404" width="2" height="15" fill="rgb(240,137,49)"/><text x="133.00" y="414.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c:139) (1 samples, 0.16%)</title><rect x="132" y="436" width="2" height="15" fill="rgb(206,17,36)"/><text x="135.00" y="446.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c:253) (1 samples, 0.16%)</title><rect x="132" y="452" width="2" height="15" fill="rgb(245,228,27)"/><text x="135.00" y="462.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="132" y="468" width="2" height="15" fill="rgb(215,52,35)"/><text x="135.00" y="478.50"></text></g><g><title>0x7f6843889700 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="132" y="484" width="2" height="15" fill="rgb(210,43,32)"/><text x="135.00" y="494.50"></text></g><g><title>0x7f6843886afe (libc-2.29.so) (1 samples, 0.16%)</title><rect x="132" y="500" width="2" height="15" fill="rgb(239,14,5)"/><text x="135.00" y="510.50"></text></g><g><title>0x7f681d2d9592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.64%)</title><rect x="128" y="356" width="8" height="15" fill="rgb(210,27,11)"/><text x="131.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c:1996) (2 samples, 0.32%)</title><rect x="132" y="372" width="4" height="15" fill="rgb(209,36,19)"/><text x="135.00" y="382.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (2 samples, 0.32%)</title><rect x="132" y="388" width="4" height="15" fill="rgb(213,51,10)"/><text x="135.00" y="398.50"></text></g><g><title>PyArray_Zeros (ctors.c:3071) (2 samples, 0.32%)</title><rect x="132" y="404" width="4" height="15" fill="rgb(217,30,11)"/><text x="135.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1085) (2 samples, 0.32%)</title><rect x="132" y="420" width="4" height="15" fill="rgb(248,83,2)"/><text x="135.00" y="430.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c:142) (1 samples, 0.16%)</title><rect x="134" y="436" width="2" height="15" fill="rgb(247,80,16)"/><text x="137.00" y="446.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="134" y="452" width="2" height="15" fill="rgb(215,30,32)"/><text x="137.00" y="462.50"></text></g><g><title>0x7f681d2d9644 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="136" y="356" width="2" height="15" fill="rgb(248,168,45)"/><text x="139.00" y="366.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="136" y="372" width="2" height="15" fill="rgb(249,143,27)"/><text x="139.00" y="382.50"></text></g><g><title>0x7f681d2d9698 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="138" y="356" width="2" height="15" fill="rgb(243,135,53)"/><text x="141.00" y="366.50"></text></g><g><title>0x7f681d2d96aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="140" y="356" width="1" height="15" fill="rgb(220,5,13)"/><text x="143.00" y="366.50"></text></g><g><title>0x7f681d2d96ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.48%)</title><rect x="141" y="356" width="6" height="15" fill="rgb(220,56,48)"/><text x="144.00" y="366.50"></text></g><g><title>0x7f681d2d96b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="147" y="356" width="2" height="15" fill="rgb(207,31,18)"/><text x="150.00" y="366.50"></text></g><g><title>0x7f681d2d96b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="149" y="356" width="2" height="15" fill="rgb(224,0,5)"/><text x="152.00" y="366.50"></text></g><g><title>0x7f681d2d97b0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="151" y="356" width="2" height="15" fill="rgb(237,88,23)"/><text x="154.00" y="366.50"></text></g><g><title>0x7f681d2cafa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (22 samples, 3.51%)</title><rect x="115" y="324" width="42" height="15" fill="rgb(210,226,43)"/><text x="118.00" y="334.50">0x7..</text></g><g><title>0x7f681d2da405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (22 samples, 3.51%)</title><rect x="115" y="340" width="42" height="15" fill="rgb(252,20,24)"/><text x="118.00" y="350.50">0x7..</text></g><g><title>0x7f681d2d97b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="153" y="356" width="4" height="15" fill="rgb(215,140,37)"/><text x="156.00" y="366.50"></text></g><g><title>array_take (methods.c:138) (1 samples, 0.16%)</title><rect x="157" y="340" width="1" height="15" fill="rgb(209,142,53)"/><text x="160.00" y="350.50"></text></g><g><title>PyArray_ClipmodeConverter (conversion_utils.c:650) (1 samples, 0.16%)</title><rect x="157" y="356" width="1" height="15" fill="rgb(223,168,36)"/><text x="160.00" y="366.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3896) (1 samples, 0.16%)</title><rect x="158" y="372" width="2" height="15" fill="rgb(234,48,29)"/><text x="161.00" y="382.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:234) (5 samples, 0.80%)</title><rect x="158" y="356" width="10" height="15" fill="rgb(223,90,26)"/><text x="161.00" y="366.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3960) (4 samples, 0.64%)</title><rect x="160" y="372" width="8" height="15" fill="rgb(235,223,35)"/><text x="163.00" y="382.50"></text></g><g><title>0x7f681d2cb05a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 1.12%)</title><rect x="157" y="324" width="13" height="15" fill="rgb(220,174,14)"/><text x="160.00" y="334.50"></text></g><g><title>array_take (methods.c:145) (6 samples, 0.96%)</title><rect x="158" y="340" width="12" height="15" fill="rgb(239,37,14)"/><text x="161.00" y="350.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:86) (1 samples, 0.16%)</title><rect x="168" y="356" width="2" height="15" fill="rgb(221,45,23)"/><text x="171.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.16%)</title><rect x="168" y="372" width="2" height="15" fill="rgb(209,123,29)"/><text x="171.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (1 samples, 0.16%)</title><rect x="168" y="388" width="2" height="15" fill="rgb(248,186,50)"/><text x="171.00" y="398.50"></text></g><g><title>array_alloc (arrayobject.c:1765) (1 samples, 0.16%)</title><rect x="168" y="404" width="2" height="15" fill="rgb(209,161,36)"/><text x="171.00" y="414.50"></text></g><g><title>0x7f681d2cb14f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="170" y="324" width="2" height="15" fill="rgb(210,201,45)"/><text x="173.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.16%)</title><rect x="170" y="340" width="2" height="15" fill="rgb(222,84,53)"/><text x="173.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.16%)</title><rect x="170" y="356" width="2" height="15" fill="rgb(227,27,9)"/><text x="173.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (1 samples, 0.16%)</title><rect x="170" y="372" width="2" height="15" fill="rgb(221,2,3)"/><text x="173.00" y="382.50"></text></g><g><title>0x7f681d2cb1bf (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="172" y="324" width="1" height="15" fill="rgb(220,44,4)"/><text x="175.00" y="334.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c:1175) (1 samples, 0.16%)</title><rect x="172" y="340" width="1" height="15" fill="rgb(224,97,25)"/><text x="175.00" y="350.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:908) (32 samples, 5.11%)</title><rect x="115" y="292" width="60" height="15" fill="rgb(243,50,11)"/><text x="118.00" y="302.50">predic..</text></g><g><title>0x7f681d2cbd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (32 samples, 5.11%)</title><rect x="115" y="308" width="60" height="15" fill="rgb(210,38,45)"/><text x="118.00" y="318.50">0x7f68..</text></g><g><title>0x7f681d2cb328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="173" y="324" width="2" height="15" fill="rgb(222,208,45)"/><text x="176.00" y="334.50"></text></g><g><title>array_reshape (methods.c:201) (1 samples, 0.16%)</title><rect x="173" y="340" width="2" height="15" fill="rgb(213,167,5)"/><text x="176.00" y="350.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (1 samples, 0.16%)</title><rect x="173" y="356" width="2" height="15" fill="rgb(238,199,15)"/><text x="176.00" y="366.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c:958) (1 samples, 0.16%)</title><rect x="173" y="372" width="2" height="15" fill="rgb(236,175,30)"/><text x="176.00" y="382.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c:909) (1 samples, 0.16%)</title><rect x="173" y="388" width="2" height="15" fill="rgb(209,159,25)"/><text x="176.00" y="398.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:853) (1 samples, 0.16%)</title><rect x="173" y="404" width="2" height="15" fill="rgb(230,36,25)"/><text x="176.00" y="414.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:911) (1 samples, 0.16%)</title><rect x="175" y="292" width="2" height="15" fill="rgb(228,179,30)"/><text x="178.00" y="302.50"></text></g><g><title>array_subscript (mapping.c:1539) (1 samples, 0.16%)</title><rect x="183" y="308" width="2" height="15" fill="rgb(234,93,40)"/><text x="186.00" y="318.50"></text></g><g><title>prepare_index (mapping.c:742) (1 samples, 0.16%)</title><rect x="183" y="324" width="2" height="15" fill="rgb(216,20,22)"/><text x="186.00" y="334.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (1 samples, 0.16%)</title><rect x="187" y="356" width="2" height="15" fill="rgb(240,148,39)"/><text x="190.00" y="366.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (1 samples, 0.16%)</title><rect x="187" y="372" width="2" height="15" fill="rgb(223,107,9)"/><text x="190.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (1 samples, 0.16%)</title><rect x="187" y="388" width="2" height="15" fill="rgb(231,18,51)"/><text x="190.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:37) (1 samples, 0.16%)</title><rect x="187" y="404" width="2" height="15" fill="rgb(241,44,40)"/><text x="190.00" y="414.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h:106) (1 samples, 0.16%)</title><rect x="187" y="420" width="2" height="15" fill="rgb(239,123,41)"/><text x="190.00" y="430.50"></text></g><g><title>maybe_get_attr (get_attr_string.h:76) (1 samples, 0.16%)</title><rect x="187" y="436" width="2" height="15" fill="rgb(253,220,21)"/><text x="190.00" y="446.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4519) (1 samples, 0.16%)</title><rect x="189" y="372" width="1" height="15" fill="rgb(207,80,36)"/><text x="192.00" y="382.50"></text></g><g><title>PyArray_FromAny (ctors.c:1966) (1 samples, 0.16%)</title><rect x="189" y="388" width="1" height="15" fill="rgb(249,46,32)"/><text x="192.00" y="398.50"></text></g><g><title>PyArray_FromArray (ctors.c:2059) (1 samples, 0.16%)</title><rect x="189" y="404" width="1" height="15" fill="rgb(218,4,48)"/><text x="192.00" y="414.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (1 samples, 0.16%)</title><rect x="190" y="388" width="2" height="15" fill="rgb(246,114,54)"/><text x="193.00" y="398.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (1 samples, 0.16%)</title><rect x="190" y="404" width="2" height="15" fill="rgb(251,25,25)"/><text x="193.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (1 samples, 0.16%)</title><rect x="190" y="420" width="2" height="15" fill="rgb(212,5,42)"/><text x="193.00" y="430.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2230) (1 samples, 0.16%)</title><rect x="190" y="436" width="2" height="15" fill="rgb(223,120,7)"/><text x="193.00" y="446.50"></text></g><g><title>set_ufunc_loop_data_types (ufunc_type_resolution.c:1724) (1 samples, 0.16%)</title><rect x="190" y="452" width="2" height="15" fill="rgb(225,127,49)"/><text x="193.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (1 samples, 0.16%)</title><rect x="192" y="404" width="2" height="15" fill="rgb(214,44,4)"/><text x="195.00" y="414.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (1 samples, 0.16%)</title><rect x="192" y="420" width="2" height="15" fill="rgb(233,98,27)"/><text x="195.00" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (1 samples, 0.16%)</title><rect x="192" y="436" width="2" height="15" fill="rgb(227,0,37)"/><text x="195.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.16%)</title><rect x="192" y="452" width="2" height="15" fill="rgb(254,116,52)"/><text x="195.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (1 samples, 0.16%)</title><rect x="192" y="468" width="2" height="15" fill="rgb(247,217,7)"/><text x="195.00" y="478.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:156) (1 samples, 0.16%)</title><rect x="192" y="484" width="2" height="15" fill="rgb(253,47,2)"/><text x="195.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (1 samples, 0.16%)</title><rect x="194" y="404" width="2" height="15" fill="rgb(239,91,3)"/><text x="197.00" y="414.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (1 samples, 0.16%)</title><rect x="194" y="420" width="2" height="15" fill="rgb(206,25,54)"/><text x="197.00" y="430.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:231) (1 samples, 0.16%)</title><rect x="194" y="436" width="2" height="15" fill="rgb(241,88,10)"/><text x="197.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3486) (1 samples, 0.16%)</title><rect x="196" y="420" width="2" height="15" fill="rgb(220,98,22)"/><text x="199.00" y="430.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c:1470) (1 samples, 0.16%)</title><rect x="196" y="436" width="2" height="15" fill="rgb(248,124,28)"/><text x="199.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3537) (2 samples, 0.32%)</title><rect x="198" y="420" width="4" height="15" fill="rgb(248,143,30)"/><text x="201.00" y="430.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1667) (2 samples, 0.32%)</title><rect x="206" y="452" width="3" height="15" fill="rgb(220,66,43)"/><text x="209.00" y="462.50"></text></g><g><title>DOUBLE_add (loops.c.src:1747) (5 samples, 0.80%)</title><rect x="202" y="436" width="9" height="15" fill="rgb(251,183,24)"/><text x="205.00" y="446.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1668) (1 samples, 0.16%)</title><rect x="209" y="452" width="2" height="15" fill="rgb(249,190,35)"/><text x="212.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:194) (1 samples, 0.16%)</title><rect x="211" y="436" width="2" height="15" fill="rgb(249,82,48)"/><text x="214.00" y="446.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (1 samples, 0.16%)</title><rect x="213" y="436" width="2" height="15" fill="rgb(218,104,18)"/><text x="216.00" y="446.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:912) (21 samples, 3.35%)</title><rect x="177" y="292" width="40" height="15" fill="rgb(226,222,34)"/><text x="180.00" y="302.50">pre..</text></g><g><title>array_sum (methods.c:2215) (17 samples, 2.72%)</title><rect x="185" y="308" width="32" height="15" fill="rgb(248,200,46)"/><text x="188.00" y="318.50">ar..</text></g><g><title>forward_ndarray_method (methods.c:108) (17 samples, 2.72%)</title><rect x="185" y="324" width="32" height="15" fill="rgb(231,179,14)"/><text x="188.00" y="334.50">fo..</text></g><g><title>_sum (numpy/core/_methods.py:38) (16 samples, 2.56%)</title><rect x="187" y="340" width="30" height="15" fill="rgb(243,151,14)"/><text x="190.00" y="350.50">_s..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (15 samples, 2.40%)</title><rect x="189" y="356" width="28" height="15" fill="rgb(224,16,26)"/><text x="192.00" y="366.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (14 samples, 2.24%)</title><rect x="190" y="372" width="27" height="15" fill="rgb(248,158,19)"/><text x="193.00" y="382.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (13 samples, 2.08%)</title><rect x="192" y="388" width="25" height="15" fill="rgb(217,25,7)"/><text x="195.00" y="398.50">P..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (11 samples, 1.76%)</title><rect x="196" y="404" width="21" height="15" fill="rgb(243,44,50)"/><text x="199.00" y="414.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (8 samples, 1.28%)</title><rect x="202" y="420" width="15" height="15" fill="rgb(228,180,21)"/><text x="205.00" y="430.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:243) (1 samples, 0.16%)</title><rect x="215" y="436" width="2" height="15" fill="rgb(227,190,23)"/><text x="218.00" y="446.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c:1191) (1 samples, 0.16%)</title><rect x="217" y="324" width="2" height="15" fill="rgb(246,88,46)"/><text x="220.00" y="334.50"></text></g><g><title>count_boolean_trues (item_selection.c:2080) (1 samples, 0.16%)</title><rect x="217" y="340" width="2" height="15" fill="rgb(221,90,40)"/><text x="220.00" y="350.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="217" y="356" width="2" height="15" fill="rgb(212,229,30)"/><text x="220.00" y="366.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c:1192) (1 samples, 0.16%)</title><rect x="219" y="324" width="2" height="15" fill="rgb(222,127,43)"/><text x="222.00" y="334.50"></text></g><g><title>array_assign_subscript (mapping.c:1859) (3 samples, 0.48%)</title><rect x="217" y="308" width="6" height="15" fill="rgb(215,100,30)"/><text x="220.00" y="318.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c:1193) (1 samples, 0.16%)</title><rect x="221" y="324" width="2" height="15" fill="rgb(238,71,3)"/><text x="224.00" y="334.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c:152) (1 samples, 0.16%)</title><rect x="221" y="340" width="2" height="15" fill="rgb(212,32,42)"/><text x="224.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3105) (1 samples, 0.16%)</title><rect x="223" y="340" width="1" height="15" fill="rgb(232,45,25)"/><text x="226.00" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1084) (1 samples, 0.16%)</title><rect x="224" y="356" width="2" height="15" fill="rgb(227,206,31)"/><text x="227.00" y="366.50"></text></g><g><title>PyArray_FromAny (ctors.c:1901) (1 samples, 0.16%)</title><rect x="226" y="372" width="2" height="15" fill="rgb(215,209,26)"/><text x="229.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (3 samples, 0.48%)</title><rect x="224" y="340" width="6" height="15" fill="rgb(239,138,38)"/><text x="227.00" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1097) (2 samples, 0.32%)</title><rect x="226" y="356" width="4" height="15" fill="rgb(252,186,43)"/><text x="229.00" y="366.50"></text></g><g><title>PyArray_FromAny (ctors.c:1944) (1 samples, 0.16%)</title><rect x="228" y="372" width="2" height="15" fill="rgb(215,148,2)"/><text x="231.00" y="382.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (1 samples, 0.16%)</title><rect x="228" y="388" width="2" height="15" fill="rgb(231,163,53)"/><text x="231.00" y="398.50"></text></g><g><title>DOUBLE_setitem (arraytypes.c.src:216) (1 samples, 0.16%)</title><rect x="228" y="404" width="2" height="15" fill="rgb(237,170,3)"/><text x="231.00" y="414.50"></text></g><g><title>MyPyFloat_AsDouble (arraytypes.c.src:71) (1 samples, 0.16%)</title><rect x="228" y="420" width="2" height="15" fill="rgb(213,22,53)"/><text x="231.00" y="430.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c:363) (1 samples, 0.16%)</title><rect x="230" y="356" width="2" height="15" fill="rgb(219,131,4)"/><text x="233.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1893) (1 samples, 0.16%)</title><rect x="230" y="372" width="2" height="15" fill="rgb(234,58,39)"/><text x="233.00" y="382.50"></text></g><g><title>PyArray_MinScalarType_internal (convert_datatype.c:1722) (1 samples, 0.16%)</title><rect x="230" y="388" width="2" height="15" fill="rgb(226,191,38)"/><text x="233.00" y="398.50"></text></g><g><title>min_scalar_type_num (convert_datatype.c:1630) (1 samples, 0.16%)</title><rect x="230" y="404" width="2" height="15" fill="rgb(254,109,52)"/><text x="233.00" y="414.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c:397) (1 samples, 0.16%)</title><rect x="232" y="356" width="2" height="15" fill="rgb(207,31,19)"/><text x="235.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (3 samples, 0.48%)</title><rect x="230" y="340" width="6" height="15" fill="rgb(239,88,46)"/><text x="233.00" y="350.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c:412) (1 samples, 0.16%)</title><rect x="234" y="356" width="2" height="15" fill="rgb(234,143,26)"/><text x="237.00" y="366.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c:240) (1 samples, 0.16%)</title><rect x="234" y="372" width="2" height="15" fill="rgb(253,57,25)"/><text x="237.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1621) (1 samples, 0.16%)</title><rect x="236" y="356" width="2" height="15" fill="rgb(217,178,49)"/><text x="239.00" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (9 samples, 1.44%)</title><rect x="223" y="324" width="16" height="15" fill="rgb(215,33,35)"/><text x="226.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (2 samples, 0.32%)</title><rect x="236" y="340" width="3" height="15" fill="rgb(217,172,45)"/><text x="239.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (1 samples, 0.16%)</title><rect x="238" y="356" width="1" height="15" fill="rgb(242,170,22)"/><text x="241.00" y="366.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (1 samples, 0.16%)</title><rect x="238" y="372" width="1" height="15" fill="rgb(205,55,17)"/><text x="241.00" y="382.50"></text></g><g><title>DOUBLE_equal (loops.c.src:1773) (1 samples, 0.16%)</title><rect x="238" y="388" width="1" height="15" fill="rgb(210,221,32)"/><text x="241.00" y="398.50"></text></g><g><title>run_binary_simd_equal_DOUBLE (simd.inc.src:289) (1 samples, 0.16%)</title><rect x="238" y="404" width="1" height="15" fill="rgb(223,84,22)"/><text x="241.00" y="414.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:913) (13 samples, 2.08%)</title><rect x="217" y="292" width="24" height="15" fill="rgb(244,52,5)"/><text x="220.00" y="302.50">p..</text></g><g><title>array_richcompare (arrayobject.c:1445) (10 samples, 1.60%)</title><rect x="223" y="308" width="18" height="15" fill="rgb(243,91,28)"/><text x="226.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4731) (1 samples, 0.16%)</title><rect x="239" y="324" width="2" height="15" fill="rgb(252,221,0)"/><text x="242.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.16%)</title><rect x="239" y="340" width="2" height="15" fill="rgb(242,211,35)"/><text x="242.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:939) (1 samples, 0.16%)</title><rect x="239" y="356" width="2" height="15" fill="rgb(224,96,47)"/><text x="242.00" y="366.50"></text></g><g><title>array_inplace_true_divide (number.c:839) (1 samples, 0.16%)</title><rect x="241" y="308" width="2" height="15" fill="rgb(221,133,24)"/><text x="244.00" y="318.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (1 samples, 0.16%)</title><rect x="243" y="356" width="2" height="15" fill="rgb(206,12,40)"/><text x="246.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (1 samples, 0.16%)</title><rect x="243" y="372" width="2" height="15" fill="rgb(236,59,33)"/><text x="246.00" y="382.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2995) (1 samples, 0.16%)</title><rect x="243" y="388" width="2" height="15" fill="rgb(208,103,48)"/><text x="246.00" y="398.50"></text></g><g><title>IsUintAligned (array_assign.c:148) (1 samples, 0.16%)</title><rect x="243" y="404" width="2" height="15" fill="rgb(249,124,44)"/><text x="246.00" y="414.50"></text></g><g><title>npy_uint_alignment (common.h:216) (1 samples, 0.16%)</title><rect x="243" y="420" width="2" height="15" fill="rgb(235,147,5)"/><text x="246.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1014) (1 samples, 0.16%)</title><rect x="245" y="404" width="2" height="15" fill="rgb(210,98,30)"/><text x="248.00" y="414.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1023) (1 samples, 0.16%)</title><rect x="247" y="404" width="2" height="15" fill="rgb(250,124,0)"/><text x="250.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:212) (2 samples, 0.32%)</title><rect x="249" y="420" width="4" height="15" fill="rgb(217,45,33)"/><text x="252.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (3 samples, 0.48%)</title><rect x="249" y="404" width="6" height="15" fill="rgb(242,216,47)"/><text x="252.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:234) (1 samples, 0.16%)</title><rect x="253" y="420" width="2" height="15" fill="rgb(236,118,21)"/><text x="256.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (6 samples, 0.96%)</title><rect x="245" y="356" width="11" height="15" fill="rgb(240,197,44)"/><text x="248.00" y="366.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (6 samples, 0.96%)</title><rect x="245" y="372" width="11" height="15" fill="rgb(211,204,16)"/><text x="248.00" y="382.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (6 samples, 0.96%)</title><rect x="245" y="388" width="11" height="15" fill="rgb(215,120,9)"/><text x="248.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1025) (1 samples, 0.16%)</title><rect x="255" y="404" width="1" height="15" fill="rgb(241,95,51)"/><text x="258.00" y="414.50"></text></g><g><title>DOUBLE_divide (loops.c.src:1741) (1 samples, 0.16%)</title><rect x="256" y="372" width="2" height="15" fill="rgb(234,94,17)"/><text x="259.00" y="382.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:449) (91 samples, 14.54%)</title><rect x="94" y="276" width="172" height="15" fill="rgb(211,79,20)"/><text x="97.00" y="286.50">_accumulate_prediction..</text></g><g><title>predict_proba (sklearn/tree/_classes.py:914) (13 samples, 2.08%)</title><rect x="241" y="292" width="25" height="15" fill="rgb(227,218,38)"/><text x="244.00" y="302.50">p..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (12 samples, 1.92%)</title><rect x="243" y="308" width="23" height="15" fill="rgb(220,200,7)"/><text x="246.00" y="318.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (12 samples, 1.92%)</title><rect x="243" y="324" width="23" height="15" fill="rgb(240,115,14)"/><text x="246.00" y="334.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (12 samples, 1.92%)</title><rect x="243" y="340" width="23" height="15" fill="rgb(217,155,32)"/><text x="246.00" y="350.50">e..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (5 samples, 0.80%)</title><rect x="256" y="356" width="10" height="15" fill="rgb(230,67,30)"/><text x="259.00" y="366.50"></text></g><g><title>DOUBLE_divide (loops.c.src:1755) (4 samples, 0.64%)</title><rect x="258" y="372" width="8" height="15" fill="rgb(226,171,48)"/><text x="261.00" y="382.50"></text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src:250) (4 samples, 0.64%)</title><rect x="258" y="388" width="8" height="15" fill="rgb(208,121,28)"/><text x="261.00" y="398.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:604) (4 samples, 0.64%)</title><rect x="258" y="404" width="8" height="15" fill="rgb(221,32,39)"/><text x="261.00" y="414.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (4 samples, 0.64%)</title><rect x="258" y="420" width="8" height="15" fill="rgb(250,129,18)"/><text x="261.00" y="430.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:451) (3 samples, 0.48%)</title><rect x="266" y="276" width="6" height="15" fill="rgb(234,171,2)"/><text x="269.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (1 samples, 0.16%)</title><rect x="272" y="308" width="1" height="15" fill="rgb(231,134,25)"/><text x="275.00" y="318.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1102) (1 samples, 0.16%)</title><rect x="272" y="324" width="1" height="15" fill="rgb(246,97,9)"/><text x="275.00" y="334.50"></text></g><g><title>PyArray_FromArray (ctors.c:2059) (1 samples, 0.16%)</title><rect x="272" y="340" width="1" height="15" fill="rgb(217,56,1)"/><text x="275.00" y="350.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (101 samples, 16.13%)</title><rect x="85" y="212" width="190" height="15" fill="rgb(246,130,7)"/><text x="88.00" y="222.50">apply_async (joblib/_par..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (100 samples, 15.97%)</title><rect x="87" y="228" width="188" height="15" fill="rgb(211,44,11)"/><text x="90.00" y="238.50">__init__ (joblib/_parall..</text></g><g><title>__call__ (joblib/parallel.py:256) (98 samples, 15.65%)</title><rect x="91" y="244" width="184" height="15" fill="rgb(253,82,46)"/><text x="94.00" y="254.50">__call__ (joblib/parall..</text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (96 samples, 15.34%)</title><rect x="94" y="260" width="181" height="15" fill="rgb(235,226,32)"/><text x="97.00" y="270.50">&lt;listcomp&gt; (joblib/para..</text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:452) (2 samples, 0.32%)</title><rect x="272" y="276" width="3" height="15" fill="rgb(213,12,42)"/><text x="275.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.32%)</title><rect x="272" y="292" width="3" height="15" fill="rgb(240,38,8)"/><text x="275.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.16%)</title><rect x="273" y="308" width="2" height="15" fill="rgb(250,191,52)"/><text x="276.00" y="318.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1717) (1 samples, 0.16%)</title><rect x="273" y="324" width="2" height="15" fill="rgb(211,48,35)"/><text x="276.00" y="334.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h:721) (1 samples, 0.16%)</title><rect x="273" y="340" width="2" height="15" fill="rgb(251,56,11)"/><text x="276.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c:829) (1 samples, 0.16%)</title><rect x="273" y="356" width="2" height="15" fill="rgb(239,100,15)"/><text x="276.00" y="366.50"></text></g><g><title>diophantine_simplify (mem_overlap.c:615) (1 samples, 0.16%)</title><rect x="273" y="372" width="2" height="15" fill="rgb(253,164,35)"/><text x="276.00" y="382.50"></text></g><g><title>qsort (libc-2.29.so) (1 samples, 0.16%)</title><rect x="273" y="388" width="2" height="15" fill="rgb(248,210,32)"/><text x="276.00" y="398.50"></text></g><g><title>__call__ (joblib/parallel.py:333) (1 samples, 0.16%)</title><rect x="275" y="228" width="2" height="15" fill="rgb(216,52,49)"/><text x="278.00" y="238.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (104 samples, 16.61%)</title><rect x="83" y="196" width="196" height="15" fill="rgb(249,170,22)"/><text x="86.00" y="206.50">_dispatch (joblib/paralle..</text></g><g><title>apply_async (joblib/_parallel_backends.py:203) (2 samples, 0.32%)</title><rect x="275" y="212" width="4" height="15" fill="rgb(239,152,28)"/><text x="278.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py:336) (1 samples, 0.16%)</title><rect x="277" y="228" width="2" height="15" fill="rgb(225,27,7)"/><text x="280.00" y="238.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:18) (140 samples, 22.36%)</title><rect x="17" y="100" width="264" height="15" fill="rgb(250,60,30)"/><text x="20.00" y="110.50">profile (bench_RandomForestClassifi..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (140 samples, 22.36%)</title><rect x="17" y="116" width="264" height="15" fill="rgb(232,160,10)"/><text x="20.00" y="126.50">time_predict (mlprodict/asv_benchma..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (140 samples, 22.36%)</title><rect x="17" y="132" width="264" height="15" fill="rgb(243,215,9)"/><text x="20.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/c..</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:669) (137 samples, 21.88%)</title><rect x="23" y="148" width="258" height="15" fill="rgb(221,163,17)"/><text x="26.00" y="158.50">predict_proba (sklearn/ensemble/_f..</text></g><g><title>__call__ (joblib/parallel.py:1006) (137 samples, 21.88%)</title><rect x="23" y="164" width="258" height="15" fill="rgb(219,182,44)"/><text x="26.00" y="174.50">__call__ (joblib/parallel.py:1006)</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (108 samples, 17.25%)</title><rect x="77" y="180" width="204" height="15" fill="rgb(221,118,11)"/><text x="80.00" y="190.50">dispatch_one_batch (joblib..</text></g><g><title>_dispatch (joblib/parallel.py:758) (1 samples, 0.16%)</title><rect x="279" y="196" width="2" height="15" fill="rgb(223,192,21)"/><text x="282.00" y="206.50"></text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:659) (1 samples, 0.16%)</title><rect x="281" y="148" width="2" height="15" fill="rgb(225,81,50)"/><text x="284.00" y="158.50"></text></g><g><title>_partition_estimators (sklearn/ensemble/_base.py:181) (1 samples, 0.16%)</title><rect x="281" y="164" width="2" height="15" fill="rgb(224,74,38)"/><text x="284.00" y="174.50"></text></g><g><title>full (numpy/core/numeric.py:332) (1 samples, 0.16%)</title><rect x="281" y="180" width="2" height="15" fill="rgb(249,176,7)"/><text x="284.00" y="190.50"></text></g><g><title>array_empty (multiarraymodule.c:1837) (1 samples, 0.16%)</title><rect x="281" y="196" width="2" height="15" fill="rgb(232,19,48)"/><text x="284.00" y="206.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (1 samples, 0.16%)</title><rect x="281" y="212" width="2" height="15" fill="rgb(223,141,24)"/><text x="284.00" y="222.50"></text></g><g><title>PyArray_Empty (ctors.c:3111) (1 samples, 0.16%)</title><rect x="281" y="228" width="2" height="15" fill="rgb(231,55,11)"/><text x="284.00" y="238.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1134) (1 samples, 0.16%)</title><rect x="281" y="244" width="2" height="15" fill="rgb(225,111,20)"/><text x="284.00" y="254.50"></text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:663) (1 samples, 0.16%)</title><rect x="283" y="148" width="2" height="15" fill="rgb(251,109,9)"/><text x="286.00" y="158.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_forest.py:663) (1 samples, 0.16%)</title><rect x="283" y="164" width="2" height="15" fill="rgb(213,86,15)"/><text x="286.00" y="174.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c:1184) (1 samples, 0.16%)</title><rect x="283" y="180" width="2" height="15" fill="rgb(235,107,32)"/><text x="286.00" y="190.50"></text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:666) (1 samples, 0.16%)</title><rect x="285" y="148" width="2" height="15" fill="rgb(228,117,49)"/><text x="288.00" y="158.50"></text></g><g><title>__init__ (joblib/parallel.py:634) (1 samples, 0.16%)</title><rect x="285" y="164" width="2" height="15" fill="rgb(219,151,31)"/><text x="288.00" y="174.50"></text></g><g><title>__init__ (queue.py:45) (1 samples, 0.16%)</title><rect x="285" y="180" width="2" height="15" fill="rgb(236,93,46)"/><text x="288.00" y="190.50"></text></g><g><title>__init__ (threading.py:231) (1 samples, 0.16%)</title><rect x="285" y="196" width="2" height="15" fill="rgb(234,162,35)"/><text x="288.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (1 samples, 0.16%)</title><rect x="287" y="164" width="1" height="15" fill="rgb(221,192,24)"/><text x="290.00" y="174.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (1 samples, 0.16%)</title><rect x="287" y="180" width="1" height="15" fill="rgb(225,119,52)"/><text x="290.00" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (1 samples, 0.16%)</title><rect x="287" y="196" width="1" height="15" fill="rgb(206,208,2)"/><text x="290.00" y="206.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (1 samples, 0.16%)</title><rect x="287" y="212" width="1" height="15" fill="rgb(234,54,2)"/><text x="290.00" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (1 samples, 0.16%)</title><rect x="287" y="228" width="1" height="15" fill="rgb(236,29,49)"/><text x="290.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (1 samples, 0.16%)</title><rect x="287" y="244" width="1" height="15" fill="rgb(217,44,1)"/><text x="290.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (1 samples, 0.16%)</title><rect x="287" y="260" width="1" height="15" fill="rgb(244,46,19)"/><text x="290.00" y="270.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:449) (1 samples, 0.16%)</title><rect x="287" y="276" width="1" height="15" fill="rgb(220,138,35)"/><text x="290.00" y="286.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:908) (1 samples, 0.16%)</title><rect x="287" y="292" width="1" height="15" fill="rgb(240,191,23)"/><text x="290.00" y="302.50"></text></g><g><title>0x7f681d2cbd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="287" y="308" width="1" height="15" fill="rgb(237,95,44)"/><text x="290.00" y="318.50"></text></g><g><title>0x7f681d2cafa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="287" y="324" width="1" height="15" fill="rgb(236,207,49)"/><text x="290.00" y="334.50"></text></g><g><title>0x7f681d2da405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="287" y="340" width="1" height="15" fill="rgb(223,197,16)"/><text x="290.00" y="350.50"></text></g><g><title>0x7f681d2d97b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="287" y="356" width="1" height="15" fill="rgb(222,220,31)"/><text x="290.00" y="366.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:783) (1 samples, 0.16%)</title><rect x="292" y="180" width="2" height="15" fill="rgb(214,114,16)"/><text x="295.00" y="190.50"></text></g><g><title>get (queue.py:164) (1 samples, 0.16%)</title><rect x="294" y="196" width="2" height="15" fill="rgb(235,92,34)"/><text x="297.00" y="206.50"></text></g><g><title>__enter__ (threading.py:241) (1 samples, 0.16%)</title><rect x="294" y="212" width="2" height="15" fill="rgb(235,19,47)"/><text x="297.00" y="222.50"></text></g><g><title>get (queue.py:166) (1 samples, 0.16%)</title><rect x="296" y="196" width="2" height="15" fill="rgb(208,146,19)"/><text x="299.00" y="206.50"></text></g><g><title>_qsize (queue.py:209) (1 samples, 0.16%)</title><rect x="296" y="212" width="2" height="15" fill="rgb(221,68,4)"/><text x="299.00" y="222.50"></text></g><g><title>get (queue.py:167) (1 samples, 0.16%)</title><rect x="298" y="196" width="2" height="15" fill="rgb(227,52,20)"/><text x="301.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:796) (4 samples, 0.64%)</title><rect x="294" y="180" width="8" height="15" fill="rgb(241,204,45)"/><text x="297.00" y="190.50"></text></g><g><title>get (queue.py:182) (1 samples, 0.16%)</title><rect x="300" y="196" width="2" height="15" fill="rgb(224,33,36)"/><text x="303.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:805) (1 samples, 0.16%)</title><rect x="302" y="180" width="2" height="15" fill="rgb(228,135,4)"/><text x="305.00" y="190.50"></text></g><g><title>delayed (joblib/parallel.py:305) (2 samples, 0.32%)</title><rect x="307" y="212" width="4" height="15" fill="rgb(242,204,21)"/><text x="310.00" y="222.50"></text></g><g><title>update_wrapper (functools.py:53) (1 samples, 0.16%)</title><rect x="311" y="228" width="2" height="15" fill="rgb(246,136,51)"/><text x="314.00" y="238.50"></text></g><g><title>update_wrapper (functools.py:54) (3 samples, 0.48%)</title><rect x="313" y="228" width="6" height="15" fill="rgb(227,165,42)"/><text x="316.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:807) (9 samples, 1.44%)</title><rect x="304" y="180" width="17" height="15" fill="rgb(240,25,1)"/><text x="307.00" y="190.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py:669) (8 samples, 1.28%)</title><rect x="305" y="196" width="16" height="15" fill="rgb(217,195,53)"/><text x="308.00" y="206.50"></text></g><g><title>delayed (joblib/parallel.py:308) (5 samples, 0.80%)</title><rect x="311" y="212" width="10" height="15" fill="rgb(226,2,16)"/><text x="314.00" y="222.50"></text></g><g><title>update_wrapper (functools.py:58) (1 samples, 0.16%)</title><rect x="319" y="228" width="2" height="15" fill="rgb(218,27,30)"/><text x="322.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:819) (2 samples, 0.32%)</title><rect x="321" y="180" width="3" height="15" fill="rgb(243,59,24)"/><text x="324.00" y="190.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (4 samples, 0.64%)</title><rect x="326" y="212" width="8" height="15" fill="rgb(206,18,20)"/><text x="329.00" y="222.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:208) (6 samples, 0.96%)</title><rect x="324" y="196" width="12" height="15" fill="rgb(251,89,37)"/><text x="327.00" y="206.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;:420) (1 samples, 0.16%)</title><rect x="334" y="212" width="2" height="15" fill="rgb(247,77,34)"/><text x="337.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py:116) (1 samples, 0.16%)</title><rect x="337" y="212" width="2" height="15" fill="rgb(218,220,24)"/><text x="340.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py:118) (1 samples, 0.16%)</title><rect x="339" y="212" width="2" height="15" fill="rgb(247,88,27)"/><text x="342.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py:119) (1 samples, 0.16%)</title><rect x="341" y="212" width="2" height="15" fill="rgb(231,173,43)"/><text x="344.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py:91) (1 samples, 0.16%)</title><rect x="343" y="212" width="2" height="15" fill="rgb(210,103,2)"/><text x="346.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:824) (12 samples, 1.92%)</title><rect x="324" y="180" width="23" height="15" fill="rgb(237,103,7)"/><text x="327.00" y="190.50">d..</text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:212) (6 samples, 0.96%)</title><rect x="336" y="196" width="11" height="15" fill="rgb(248,164,36)"/><text x="339.00" y="206.50"></text></g><g><title>get_active_backend (joblib/parallel.py:94) (1 samples, 0.16%)</title><rect x="345" y="212" width="2" height="15" fill="rgb(225,94,38)"/><text x="348.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:825) (2 samples, 0.32%)</title><rect x="347" y="180" width="4" height="15" fill="rgb(247,72,45)"/><text x="350.00" y="190.50"></text></g><g><title>__init__ (joblib/parallel.py:241) (2 samples, 0.32%)</title><rect x="347" y="196" width="4" height="15" fill="rgb(245,166,42)"/><text x="350.00" y="206.50"></text></g><g><title>put (queue.py:132) (1 samples, 0.16%)</title><rect x="351" y="196" width="2" height="15" fill="rgb(221,123,25)"/><text x="354.00" y="206.50"></text></g><g><title>__enter__ (threading.py:241) (1 samples, 0.16%)</title><rect x="351" y="212" width="2" height="15" fill="rgb(223,103,7)"/><text x="354.00" y="222.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (1 samples, 0.16%)</title><rect x="351" y="228" width="2" height="15" fill="rgb(219,222,54)"/><text x="354.00" y="238.50"></text></g><g><title>put (queue.py:149) (1 samples, 0.16%)</title><rect x="353" y="196" width="1" height="15" fill="rgb(234,162,24)"/><text x="356.00" y="206.50"></text></g><g><title>_put (queue.py:213) (1 samples, 0.16%)</title><rect x="353" y="212" width="1" height="15" fill="rgb(218,164,32)"/><text x="356.00" y="222.50"></text></g><g><title>__exit__ (threading.py:244) (3 samples, 0.48%)</title><rect x="354" y="212" width="6" height="15" fill="rgb(208,164,40)"/><text x="357.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:826) (6 samples, 0.96%)</title><rect x="351" y="180" width="11" height="15" fill="rgb(242,144,49)"/><text x="354.00" y="190.50"></text></g><g><title>put (queue.py:151) (4 samples, 0.64%)</title><rect x="354" y="196" width="8" height="15" fill="rgb(206,104,17)"/><text x="357.00" y="206.50"></text></g><g><title>notify (threading.py:348) (1 samples, 0.16%)</title><rect x="360" y="212" width="2" height="15" fill="rgb(254,61,7)"/><text x="363.00" y="222.50"></text></g><g><title>get (queue.py:164) (1 samples, 0.16%)</title><rect x="366" y="196" width="2" height="15" fill="rgb(252,32,20)"/><text x="369.00" y="206.50"></text></g><g><title>__enter__ (threading.py:241) (1 samples, 0.16%)</title><rect x="366" y="212" width="2" height="15" fill="rgb(236,135,1)"/><text x="369.00" y="222.50"></text></g><g><title>get (queue.py:166) (1 samples, 0.16%)</title><rect x="368" y="196" width="2" height="15" fill="rgb(216,97,46)"/><text x="371.00" y="206.50"></text></g><g><title>_qsize (queue.py:209) (1 samples, 0.16%)</title><rect x="368" y="212" width="2" height="15" fill="rgb(247,156,22)"/><text x="371.00" y="222.50"></text></g><g><title>notify (threading.py:345) (1 samples, 0.16%)</title><rect x="370" y="212" width="1" height="15" fill="rgb(231,226,16)"/><text x="373.00" y="222.50"></text></g><g><title>_is_owned (threading.py:258) (1 samples, 0.16%)</title><rect x="370" y="228" width="1" height="15" fill="rgb(233,114,18)"/><text x="373.00" y="238.50"></text></g><g><title>get (queue.py:181) (2 samples, 0.32%)</title><rect x="370" y="196" width="3" height="15" fill="rgb(234,202,0)"/><text x="373.00" y="206.50"></text></g><g><title>notify (threading.py:348) (1 samples, 0.16%)</title><rect x="371" y="212" width="2" height="15" fill="rgb(250,117,6)"/><text x="374.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:829) (8 samples, 1.28%)</title><rect x="362" y="180" width="15" height="15" fill="rgb(240,86,47)"/><text x="365.00" y="190.50"></text></g><g><title>get (queue.py:182) (2 samples, 0.32%)</title><rect x="373" y="196" width="4" height="15" fill="rgb(253,70,0)"/><text x="376.00" y="206.50"></text></g><g><title>__exit__ (threading.py:244) (1 samples, 0.16%)</title><rect x="375" y="212" width="2" height="15" fill="rgb(206,114,30)"/><text x="378.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:830) (1 samples, 0.16%)</title><rect x="377" y="180" width="2" height="15" fill="rgb(214,51,10)"/><text x="380.00" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:750) (2 samples, 0.32%)</title><rect x="379" y="196" width="4" height="15" fill="rgb(247,132,30)"/><text x="382.00" y="206.50"></text></g><g><title>0x7f68438a813e (libc-2.29.so) (1 samples, 0.16%)</title><rect x="381" y="212" width="2" height="15" fill="rgb(213,204,6)"/><text x="384.00" y="222.50"></text></g><g><title>_dispatch (joblib/parallel.py:752) (1 samples, 0.16%)</title><rect x="383" y="196" width="2" height="15" fill="rgb(253,162,47)"/><text x="386.00" y="206.50"></text></g><g><title>0x7f68438a814f (libc-2.29.so) (1 samples, 0.16%)</title><rect x="390" y="244" width="2" height="15" fill="rgb(241,220,53)"/><text x="393.00" y="254.50"></text></g><g><title>__call__ (joblib/parallel.py:254) (6 samples, 0.96%)</title><rect x="392" y="244" width="11" height="15" fill="rgb(238,81,22)"/><text x="395.00" y="254.50"></text></g><g><title>__init__ (joblib/parallel.py:196) (6 samples, 0.96%)</title><rect x="392" y="260" width="11" height="15" fill="rgb(232,131,48)"/><text x="395.00" y="270.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:938) (1 samples, 0.16%)</title><rect x="409" y="308" width="2" height="15" fill="rgb(220,104,48)"/><text x="412.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:947) (2 samples, 0.32%)</title><rect x="411" y="324" width="4" height="15" fill="rgb(216,89,23)"/><text x="414.00" y="334.50"></text></g><g><title>unicode_endswith (python3.7) (3 samples, 0.48%)</title><rect x="420" y="340" width="6" height="15" fill="rgb(247,179,22)"/><text x="423.00" y="350.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (8 samples, 1.28%)</title><rect x="415" y="324" width="15" height="15" fill="rgb(248,32,18)"/><text x="418.00" y="334.50"></text></g><g><title>unicode_startswith (python3.7) (2 samples, 0.32%)</title><rect x="426" y="340" width="4" height="15" fill="rgb(244,18,12)"/><text x="429.00" y="350.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (12 samples, 1.92%)</title><rect x="411" y="308" width="23" height="15" fill="rgb(238,117,38)"/><text x="414.00" y="318.50">c..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:949) (2 samples, 0.32%)</title><rect x="430" y="324" width="4" height="15" fill="rgb(231,80,12)"/><text x="433.00" y="334.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.16%)</title><rect x="432" y="340" width="2" height="15" fill="rgb(251,52,36)"/><text x="435.00" y="350.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:906) (14 samples, 2.24%)</title><rect x="409" y="292" width="27" height="15" fill="rgb(205,19,32)"/><text x="412.00" y="302.50">p..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:952) (1 samples, 0.16%)</title><rect x="434" y="308" width="2" height="15" fill="rgb(217,196,36)"/><text x="437.00" y="318.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:907) (2 samples, 0.32%)</title><rect x="436" y="292" width="3" height="15" fill="rgb(251,223,2)"/><text x="439.00" y="302.50"></text></g><g><title>0x7f681d2d9225 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="439" y="356" width="4" height="15" fill="rgb(229,145,10)"/><text x="442.00" y="366.50"></text></g><g><title>arraydescr_richcompare (descriptor.c:3214) (1 samples, 0.16%)</title><rect x="441" y="372" width="2" height="15" fill="rgb(247,210,28)"/><text x="444.00" y="382.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c:1391) (1 samples, 0.16%)</title><rect x="441" y="388" width="2" height="15" fill="rgb(246,58,45)"/><text x="444.00" y="398.50"></text></g><g><title>_buffer_format_string (buffer.c:237) (1 samples, 0.16%)</title><rect x="443" y="468" width="2" height="15" fill="rgb(229,226,42)"/><text x="446.00" y="478.50"></text></g><g><title>_buffer_get_info (buffer.c:653) (2 samples, 0.32%)</title><rect x="443" y="436" width="4" height="15" fill="rgb(216,21,46)"/><text x="446.00" y="446.50"></text></g><g><title>_buffer_info_new (buffer.c:584) (2 samples, 0.32%)</title><rect x="443" y="452" width="4" height="15" fill="rgb(215,223,2)"/><text x="446.00" y="462.50"></text></g><g><title>_buffer_format_string (buffer.c:406) (1 samples, 0.16%)</title><rect x="445" y="468" width="2" height="15" fill="rgb(214,23,32)"/><text x="448.00" y="478.50"></text></g><g><title>_buffer_get_info (buffer.c:672) (1 samples, 0.16%)</title><rect x="447" y="436" width="2" height="15" fill="rgb(205,38,41)"/><text x="450.00" y="446.50"></text></g><g><title>_buffer_info_free (buffer.c:632) (1 samples, 0.16%)</title><rect x="447" y="452" width="2" height="15" fill="rgb(235,183,40)"/><text x="450.00" y="462.50"></text></g><g><title>0x7f6843887a41 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="447" y="468" width="2" height="15" fill="rgb(221,61,19)"/><text x="450.00" y="478.50"></text></g><g><title>0x7f681d2d92df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.80%)</title><rect x="443" y="356" width="9" height="15" fill="rgb(223,199,30)"/><text x="446.00" y="366.50"></text></g><g><title>0x7f681d2bdd04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.80%)</title><rect x="443" y="372" width="9" height="15" fill="rgb(206,98,15)"/><text x="446.00" y="382.50"></text></g><g><title>0x7f681d2bd666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.80%)</title><rect x="443" y="388" width="9" height="15" fill="rgb(253,166,16)"/><text x="446.00" y="398.50"></text></g><g><title>0x7f681d2b32fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.80%)</title><rect x="443" y="404" width="9" height="15" fill="rgb(240,166,10)"/><text x="446.00" y="414.50"></text></g><g><title>array_getbuffer (buffer.c:782) (5 samples, 0.80%)</title><rect x="443" y="420" width="9" height="15" fill="rgb(238,206,39)"/><text x="446.00" y="430.50"></text></g><g><title>_buffer_get_info (buffer.c:698) (2 samples, 0.32%)</title><rect x="449" y="436" width="3" height="15" fill="rgb(226,135,36)"/><text x="452.00" y="446.50"></text></g><g><title>0x7f681d2d9364 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="452" y="356" width="4" height="15" fill="rgb(212,31,49)"/><text x="455.00" y="366.50"></text></g><g><title>0x7f681d2d94a4 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="456" y="356" width="2" height="15" fill="rgb(213,87,13)"/><text x="459.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c:1973) (2 samples, 0.32%)</title><rect x="462" y="372" width="4" height="15" fill="rgb(206,62,21)"/><text x="465.00" y="382.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (1 samples, 0.16%)</title><rect x="464" y="388" width="2" height="15" fill="rgb(215,126,40)"/><text x="467.00" y="398.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c:958) (1 samples, 0.16%)</title><rect x="464" y="404" width="2" height="15" fill="rgb(227,79,17)"/><text x="467.00" y="414.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c:909) (1 samples, 0.16%)</title><rect x="464" y="420" width="2" height="15" fill="rgb(235,153,11)"/><text x="467.00" y="430.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (1 samples, 0.16%)</title><rect x="464" y="436" width="2" height="15" fill="rgb(254,165,7)"/><text x="467.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1037) (1 samples, 0.16%)</title><rect x="466" y="420" width="2" height="15" fill="rgb(221,112,6)"/><text x="469.00" y="430.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c:252) (1 samples, 0.16%)</title><rect x="468" y="452" width="1" height="15" fill="rgb(219,132,31)"/><text x="471.00" y="462.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c:139) (2 samples, 0.32%)</title><rect x="468" y="436" width="3" height="15" fill="rgb(248,23,7)"/><text x="471.00" y="446.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c:253) (1 samples, 0.16%)</title><rect x="469" y="452" width="2" height="15" fill="rgb(215,121,10)"/><text x="472.00" y="462.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="469" y="468" width="2" height="15" fill="rgb(220,144,18)"/><text x="472.00" y="478.50"></text></g><g><title>0x7f68438892f8 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="469" y="484" width="2" height="15" fill="rgb(207,54,54)"/><text x="472.00" y="494.50"></text></g><g><title>0x7f681d2d9592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 1.44%)</title><rect x="458" y="356" width="17" height="15" fill="rgb(205,39,20)"/><text x="461.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c:1996) (5 samples, 0.80%)</title><rect x="466" y="372" width="9" height="15" fill="rgb(213,181,16)"/><text x="469.00" y="382.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (5 samples, 0.80%)</title><rect x="466" y="388" width="9" height="15" fill="rgb(231,87,36)"/><text x="469.00" y="398.50"></text></g><g><title>PyArray_Zeros (ctors.c:3071) (5 samples, 0.80%)</title><rect x="466" y="404" width="9" height="15" fill="rgb(245,72,43)"/><text x="469.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1085) (4 samples, 0.64%)</title><rect x="468" y="420" width="7" height="15" fill="rgb(243,61,40)"/><text x="471.00" y="430.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c:142) (2 samples, 0.32%)</title><rect x="471" y="436" width="4" height="15" fill="rgb(243,206,4)"/><text x="474.00" y="446.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (2 samples, 0.32%)</title><rect x="471" y="452" width="4" height="15" fill="rgb(237,109,33)"/><text x="474.00" y="462.50"></text></g><g><title>0x7f681d2d9698 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="475" y="356" width="4" height="15" fill="rgb(248,86,32)"/><text x="478.00" y="366.50"></text></g><g><title>0x7f681d2d96a0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="479" y="356" width="2" height="15" fill="rgb(229,107,25)"/><text x="482.00" y="366.50"></text></g><g><title>0x7f681d2d96a5 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="481" y="356" width="2" height="15" fill="rgb(228,214,21)"/><text x="484.00" y="366.50"></text></g><g><title>0x7f681d2d96aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="483" y="356" width="2" height="15" fill="rgb(254,202,38)"/><text x="486.00" y="366.50"></text></g><g><title>0x7f681d2d96ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.32%)</title><rect x="485" y="356" width="3" height="15" fill="rgb(210,192,20)"/><text x="488.00" y="366.50"></text></g><g><title>0x7f681d2d96c9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="488" y="356" width="2" height="15" fill="rgb(233,115,51)"/><text x="491.00" y="366.50"></text></g><g><title>0x7f681d2d96d4 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="490" y="356" width="2" height="15" fill="rgb(241,102,23)"/><text x="493.00" y="366.50"></text></g><g><title>0x7f681d2d96d7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="492" y="356" width="2" height="15" fill="rgb(231,2,45)"/><text x="495.00" y="366.50"></text></g><g><title>0x7f681d2d97b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="494" y="356" width="2" height="15" fill="rgb(208,102,51)"/><text x="497.00" y="366.50"></text></g><g><title>_buffer_get_info (buffer.c:653) (1 samples, 0.16%)</title><rect x="496" y="404" width="2" height="15" fill="rgb(241,28,17)"/><text x="499.00" y="414.50"></text></g><g><title>_buffer_info_new (buffer.c:584) (1 samples, 0.16%)</title><rect x="496" y="420" width="2" height="15" fill="rgb(238,210,8)"/><text x="499.00" y="430.50"></text></g><g><title>_buffer_format_string (buffer.c:365) (1 samples, 0.16%)</title><rect x="496" y="436" width="2" height="15" fill="rgb(252,93,35)"/><text x="499.00" y="446.50"></text></g><g><title>_is_natively_aligned_at (buffer.c:206) (1 samples, 0.16%)</title><rect x="496" y="452" width="2" height="15" fill="rgb(234,4,46)"/><text x="499.00" y="462.50"></text></g><g><title>0x7f681d2da405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (33 samples, 5.27%)</title><rect x="439" y="340" width="62" height="15" fill="rgb(235,192,18)"/><text x="442.00" y="350.50">0x7f68..</text></g><g><title>0x7f681d2d9c27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.48%)</title><rect x="496" y="356" width="5" height="15" fill="rgb(233,212,39)"/><text x="499.00" y="366.50"></text></g><g><title>0x7f681d2b1529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.48%)</title><rect x="496" y="372" width="5" height="15" fill="rgb(212,115,25)"/><text x="499.00" y="382.50"></text></g><g><title>array_getbuffer (buffer.c:782) (3 samples, 0.48%)</title><rect x="496" y="388" width="5" height="15" fill="rgb(229,173,39)"/><text x="499.00" y="398.50"></text></g><g><title>_buffer_get_info (buffer.c:682) (2 samples, 0.32%)</title><rect x="498" y="404" width="3" height="15" fill="rgb(216,37,52)"/><text x="501.00" y="414.50"></text></g><g><title>0x7f681d2cafa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (34 samples, 5.43%)</title><rect x="439" y="324" width="64" height="15" fill="rgb(206,3,37)"/><text x="442.00" y="334.50">0x7f681..</text></g><g><title>0x7f681d2da540 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="501" y="340" width="2" height="15" fill="rgb(208,125,32)"/><text x="504.00" y="350.50"></text></g><g><title>0x7f681d2af178 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="501" y="356" width="2" height="15" fill="rgb(205,209,11)"/><text x="504.00" y="366.50"></text></g><g><title>array_take (methods.c:138) (1 samples, 0.16%)</title><rect x="503" y="340" width="2" height="15" fill="rgb(230,11,42)"/><text x="506.00" y="350.50"></text></g><g><title>PyArray_ClipmodeConverter (conversion_utils.c:650) (1 samples, 0.16%)</title><rect x="503" y="356" width="2" height="15" fill="rgb(244,119,29)"/><text x="506.00" y="366.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3948) (1 samples, 0.16%)</title><rect x="505" y="372" width="2" height="15" fill="rgb(230,103,52)"/><text x="508.00" y="382.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:234) (3 samples, 0.48%)</title><rect x="505" y="356" width="6" height="15" fill="rgb(217,171,37)"/><text x="508.00" y="366.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3960) (2 samples, 0.32%)</title><rect x="507" y="372" width="4" height="15" fill="rgb(236,181,47)"/><text x="510.00" y="382.50"></text></g><g><title>0x7f681d2cb05a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.80%)</title><rect x="503" y="324" width="10" height="15" fill="rgb(233,31,19)"/><text x="506.00" y="334.50"></text></g><g><title>array_take (methods.c:145) (4 samples, 0.64%)</title><rect x="505" y="340" width="8" height="15" fill="rgb(226,54,33)"/><text x="508.00" y="350.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:49) (1 samples, 0.16%)</title><rect x="511" y="356" width="2" height="15" fill="rgb(245,149,43)"/><text x="514.00" y="366.50"></text></g><g><title>PyArray_CheckAxis (ctors.c:3031) (1 samples, 0.16%)</title><rect x="511" y="372" width="2" height="15" fill="rgb(230,140,40)"/><text x="514.00" y="382.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c:2041) (1 samples, 0.16%)</title><rect x="511" y="388" width="2" height="15" fill="rgb(219,28,47)"/><text x="514.00" y="398.50"></text></g><g><title>PyArray_FromAny (ctors.c:1966) (1 samples, 0.16%)</title><rect x="511" y="404" width="2" height="15" fill="rgb(249,14,18)"/><text x="514.00" y="414.50"></text></g><g><title>PyArray_FromArray (ctors.c:2094) (1 samples, 0.16%)</title><rect x="511" y="420" width="2" height="15" fill="rgb(226,143,24)"/><text x="514.00" y="430.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:965) (1 samples, 0.16%)</title><rect x="511" y="436" width="2" height="15" fill="rgb(233,64,49)"/><text x="514.00" y="446.50"></text></g><g><title>0x7f681d2cb328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="513" y="324" width="2" height="15" fill="rgb(218,115,46)"/><text x="516.00" y="334.50"></text></g><g><title>array_reshape (methods.c:210) (1 samples, 0.16%)</title><rect x="513" y="340" width="2" height="15" fill="rgb(245,200,39)"/><text x="516.00" y="350.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (1 samples, 0.16%)</title><rect x="513" y="356" width="2" height="15" fill="rgb(239,189,34)"/><text x="516.00" y="366.50"></text></g><g><title>PyArray_Newshape (shape.c:194) (1 samples, 0.16%)</title><rect x="513" y="372" width="2" height="15" fill="rgb(207,143,19)"/><text x="516.00" y="382.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:908) (41 samples, 6.55%)</title><rect x="439" y="292" width="78" height="15" fill="rgb(244,5,43)"/><text x="442.00" y="302.50">predict_p..</text></g><g><title>0x7f681d2cbd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (41 samples, 6.55%)</title><rect x="439" y="308" width="78" height="15" fill="rgb(227,20,28)"/><text x="442.00" y="318.50">0x7f681d2..</text></g><g><title>0x7f681d2cb8d3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="515" y="324" width="2" height="15" fill="rgb(232,188,2)"/><text x="518.00" y="334.50"></text></g><g><title>0x7f681d2a7bbb (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="515" y="340" width="2" height="15" fill="rgb(224,220,3)"/><text x="518.00" y="350.50"></text></g><g><title>0x7f681d2aed60 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="515" y="356" width="2" height="15" fill="rgb(241,84,49)"/><text x="518.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.16%)</title><rect x="518" y="308" width="2" height="15" fill="rgb(219,129,52)"/><text x="521.00" y="318.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:939) (1 samples, 0.16%)</title><rect x="518" y="324" width="2" height="15" fill="rgb(235,193,37)"/><text x="521.00" y="334.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:911) (3 samples, 0.48%)</title><rect x="517" y="292" width="5" height="15" fill="rgb(206,103,18)"/><text x="520.00" y="302.50"></text></g><g><title>array_subscript (mapping.c:1584) (1 samples, 0.16%)</title><rect x="520" y="308" width="2" height="15" fill="rgb(251,181,35)"/><text x="523.00" y="318.50"></text></g><g><title>get_view_from_index (mapping.c:958) (1 samples, 0.16%)</title><rect x="520" y="324" width="2" height="15" fill="rgb(232,80,4)"/><text x="523.00" y="334.50"></text></g><g><title>0x7f6842aaa540 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="520" y="340" width="2" height="15" fill="rgb(231,215,9)"/><text x="523.00" y="350.50"></text></g><g><title>array_subscript (mapping.c:1584) (1 samples, 0.16%)</title><rect x="522" y="308" width="2" height="15" fill="rgb(237,145,33)"/><text x="525.00" y="318.50"></text></g><g><title>get_view_from_index (mapping.c:988) (1 samples, 0.16%)</title><rect x="522" y="324" width="2" height="15" fill="rgb(248,100,41)"/><text x="525.00" y="334.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (1 samples, 0.16%)</title><rect x="522" y="340" width="2" height="15" fill="rgb(210,90,40)"/><text x="525.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1051) (1 samples, 0.16%)</title><rect x="522" y="356" width="2" height="15" fill="rgb(224,48,39)"/><text x="525.00" y="366.50"></text></g><g><title>maybe_get_attr (get_attr_string.h:66) (1 samples, 0.16%)</title><rect x="528" y="436" width="2" height="15" fill="rgb(244,197,21)"/><text x="531.00" y="446.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (4 samples, 0.64%)</title><rect x="528" y="356" width="7" height="15" fill="rgb(253,150,53)"/><text x="531.00" y="366.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (4 samples, 0.64%)</title><rect x="528" y="372" width="7" height="15" fill="rgb(222,169,5)"/><text x="531.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (4 samples, 0.64%)</title><rect x="528" y="388" width="7" height="15" fill="rgb(251,183,12)"/><text x="531.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:37) (4 samples, 0.64%)</title><rect x="528" y="404" width="7" height="15" fill="rgb(210,177,0)"/><text x="531.00" y="414.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h:106) (4 samples, 0.64%)</title><rect x="528" y="420" width="7" height="15" fill="rgb(226,227,48)"/><text x="531.00" y="430.50"></text></g><g><title>maybe_get_attr (get_attr_string.h:80) (3 samples, 0.48%)</title><rect x="530" y="436" width="5" height="15" fill="rgb(220,130,32)"/><text x="533.00" y="446.50"></text></g><g><title>0x7f684383fa19 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="535" y="468" width="2" height="15" fill="rgb(240,107,11)"/><text x="538.00" y="478.50"></text></g><g><title>_npy_stride_sort_item_comparator (shape.c:735) (1 samples, 0.16%)</title><rect x="535" y="484" width="2" height="15" fill="rgb(220,192,25)"/><text x="538.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (2 samples, 0.32%)</title><rect x="535" y="404" width="4" height="15" fill="rgb(241,142,35)"/><text x="538.00" y="414.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (2 samples, 0.32%)</title><rect x="535" y="420" width="4" height="15" fill="rgb(250,175,20)"/><text x="538.00" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (2 samples, 0.32%)</title><rect x="535" y="436" width="4" height="15" fill="rgb(242,107,8)"/><text x="538.00" y="446.50"></text></g><g><title>qsort_r (libc-2.29.so) (2 samples, 0.32%)</title><rect x="535" y="452" width="4" height="15" fill="rgb(230,158,4)"/><text x="538.00" y="462.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.16%)</title><rect x="537" y="468" width="2" height="15" fill="rgb(239,151,8)"/><text x="540.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:49) (1 samples, 0.16%)</title><rect x="539" y="452" width="2" height="15" fill="rgb(232,119,50)"/><text x="542.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (2 samples, 0.32%)</title><rect x="539" y="404" width="4" height="15" fill="rgb(228,137,29)"/><text x="542.00" y="414.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (2 samples, 0.32%)</title><rect x="539" y="420" width="4" height="15" fill="rgb(233,70,3)"/><text x="542.00" y="430.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (2 samples, 0.32%)</title><rect x="539" y="436" width="4" height="15" fill="rgb(220,35,32)"/><text x="542.00" y="446.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (1 samples, 0.16%)</title><rect x="541" y="452" width="2" height="15" fill="rgb(210,122,42)"/><text x="544.00" y="462.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c:3673) (1 samples, 0.16%)</title><rect x="541" y="468" width="2" height="15" fill="rgb(226,218,3)"/><text x="544.00" y="478.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c:274) (1 samples, 0.16%)</title><rect x="541" y="484" width="2" height="15" fill="rgb(212,219,4)"/><text x="544.00" y="494.50"></text></g><g><title>PyArray_GetStridedCopyFn (lowlevel_strided_loops.c.src:347) (1 samples, 0.16%)</title><rect x="541" y="500" width="2" height="15" fill="rgb(215,146,21)"/><text x="544.00" y="510.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (1 samples, 0.16%)</title><rect x="543" y="420" width="2" height="15" fill="rgb(244,22,41)"/><text x="546.00" y="430.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (2 samples, 0.32%)</title><rect x="543" y="404" width="4" height="15" fill="rgb(217,217,38)"/><text x="546.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (1 samples, 0.16%)</title><rect x="545" y="420" width="2" height="15" fill="rgb(226,133,36)"/><text x="548.00" y="430.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:550) (2 samples, 0.32%)</title><rect x="547" y="404" width="3" height="15" fill="rgb(213,111,9)"/><text x="550.00" y="414.50"></text></g><g><title>NpyIter_GetIterSize (nditer_api.c:856) (2 samples, 0.32%)</title><rect x="547" y="420" width="3" height="15" fill="rgb(237,163,42)"/><text x="550.00" y="430.50"></text></g><g><title>reduce_loop (ufunc_object.c:3533) (3 samples, 0.48%)</title><rect x="550" y="420" width="6" height="15" fill="rgb(248,165,48)"/><text x="553.00" y="430.50"></text></g><g><title>reduce_loop (ufunc_object.c:3537) (2 samples, 0.32%)</title><rect x="556" y="420" width="4" height="15" fill="rgb(207,192,43)"/><text x="559.00" y="430.50"></text></g><g><title>DOUBLE_add (loops.c.src:1742) (1 samples, 0.16%)</title><rect x="560" y="436" width="2" height="15" fill="rgb(221,95,7)"/><text x="563.00" y="446.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1662) (2 samples, 0.32%)</title><rect x="566" y="452" width="3" height="15" fill="rgb(222,201,16)"/><text x="569.00" y="462.50"></text></g><g><title>DOUBLE_add (loops.c.src:1747) (7 samples, 1.12%)</title><rect x="562" y="436" width="13" height="15" fill="rgb(243,218,37)"/><text x="565.00" y="446.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1667) (3 samples, 0.48%)</title><rect x="569" y="452" width="6" height="15" fill="rgb(246,123,41)"/><text x="572.00" y="462.50"></text></g><g><title>DOUBLE_add (loops.c.src:1762) (1 samples, 0.16%)</title><rect x="575" y="436" width="2" height="15" fill="rgb(217,79,39)"/><text x="578.00" y="446.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:235) (1 samples, 0.16%)</title><rect x="577" y="436" width="2" height="15" fill="rgb(254,104,17)"/><text x="580.00" y="446.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:240) (1 samples, 0.16%)</title><rect x="579" y="436" width="2" height="15" fill="rgb(253,151,2)"/><text x="582.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (17 samples, 2.72%)</title><rect x="550" y="404" width="33" height="15" fill="rgb(217,34,29)"/><text x="553.00" y="414.50">Py..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (12 samples, 1.92%)</title><rect x="560" y="420" width="23" height="15" fill="rgb(216,2,13)"/><text x="563.00" y="430.50">r..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (1 samples, 0.16%)</title><rect x="581" y="436" width="2" height="15" fill="rgb(224,7,45)"/><text x="584.00" y="446.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:912) (33 samples, 5.27%)</title><rect x="522" y="292" width="62" height="15" fill="rgb(208,215,46)"/><text x="525.00" y="302.50">predic..</text></g><g><title>array_sum (methods.c:2215) (32 samples, 5.11%)</title><rect x="524" y="308" width="60" height="15" fill="rgb(235,109,41)"/><text x="527.00" y="318.50">array_..</text></g><g><title>forward_ndarray_method (methods.c:108) (32 samples, 5.11%)</title><rect x="524" y="324" width="60" height="15" fill="rgb(219,127,25)"/><text x="527.00" y="334.50">forwar..</text></g><g><title>_sum (numpy/core/_methods.py:38) (31 samples, 4.95%)</title><rect x="526" y="340" width="58" height="15" fill="rgb(218,17,21)"/><text x="529.00" y="350.50">_sum (..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (26 samples, 4.15%)</title><rect x="535" y="356" width="49" height="15" fill="rgb(244,195,7)"/><text x="538.00" y="366.50">ufun..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (26 samples, 4.15%)</title><rect x="535" y="372" width="49" height="15" fill="rgb(230,181,39)"/><text x="538.00" y="382.50">PyUF..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (26 samples, 4.15%)</title><rect x="535" y="388" width="49" height="15" fill="rgb(215,86,10)"/><text x="538.00" y="398.50">PyUF..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (1 samples, 0.16%)</title><rect x="583" y="404" width="1" height="15" fill="rgb(236,96,26)"/><text x="586.00" y="414.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (1 samples, 0.16%)</title><rect x="583" y="420" width="1" height="15" fill="rgb(211,50,9)"/><text x="586.00" y="430.50"></text></g><g><title>0x7f6843887a71 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="583" y="436" width="1" height="15" fill="rgb(242,148,2)"/><text x="586.00" y="446.50"></text></g><g><title>array_assign_subscript (mapping.c:1850) (1 samples, 0.16%)</title><rect x="584" y="308" width="2" height="15" fill="rgb(254,189,20)"/><text x="587.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c:1944) (1 samples, 0.16%)</title><rect x="584" y="324" width="2" height="15" fill="rgb(219,62,22)"/><text x="587.00" y="334.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (1 samples, 0.16%)</title><rect x="584" y="340" width="2" height="15" fill="rgb(245,224,9)"/><text x="587.00" y="350.50"></text></g><g><title>DOUBLE_setitem (arraytypes.c.src:218) (1 samples, 0.16%)</title><rect x="584" y="356" width="2" height="15" fill="rgb(239,151,48)"/><text x="587.00" y="366.50"></text></g><g><title>0x7f6842aa97c0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="584" y="372" width="2" height="15" fill="rgb(236,21,21)"/><text x="587.00" y="382.50"></text></g><g><title>array_assign_subscript (mapping.c:1859) (1 samples, 0.16%)</title><rect x="586" y="308" width="2" height="15" fill="rgb(232,141,24)"/><text x="589.00" y="318.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c:1193) (1 samples, 0.16%)</title><rect x="586" y="324" width="2" height="15" fill="rgb(215,145,25)"/><text x="589.00" y="334.50"></text></g><g><title>array_assign_subscript (mapping.c:2065) (1 samples, 0.16%)</title><rect x="588" y="308" width="2" height="15" fill="rgb(237,187,46)"/><text x="591.00" y="318.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.16%)</title><rect x="588" y="324" width="2" height="15" fill="rgb(250,83,20)"/><text x="591.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.16%)</title><rect x="588" y="340" width="2" height="15" fill="rgb(239,56,41)"/><text x="591.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (1 samples, 0.16%)</title><rect x="588" y="356" width="2" height="15" fill="rgb(230,67,26)"/><text x="591.00" y="366.50"></text></g><g><title>array_richcompare (arrayobject.c:1398) (1 samples, 0.16%)</title><rect x="590" y="308" width="2" height="15" fill="rgb(213,22,20)"/><text x="593.00" y="318.50"></text></g><g><title>binop_should_defer (binop_override.h:123) (1 samples, 0.16%)</title><rect x="590" y="324" width="2" height="15" fill="rgb(239,151,34)"/><text x="593.00" y="334.50"></text></g><g><title>is_anyscalar_exact (scalartypes.c.src:4574) (1 samples, 0.16%)</title><rect x="590" y="340" width="2" height="15" fill="rgb(254,33,2)"/><text x="593.00" y="350.50"></text></g><g><title>get_typeobj_idx (scalartypes.c.src:4553) (1 samples, 0.16%)</title><rect x="590" y="356" width="2" height="15" fill="rgb(208,33,11)"/><text x="593.00" y="366.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1090) (1 samples, 0.16%)</title><rect x="594" y="356" width="2" height="15" fill="rgb(247,180,41)"/><text x="597.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (2 samples, 0.32%)</title><rect x="594" y="340" width="4" height="15" fill="rgb(213,65,15)"/><text x="597.00" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1097) (1 samples, 0.16%)</title><rect x="596" y="356" width="2" height="15" fill="rgb(237,138,46)"/><text x="599.00" y="366.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (1 samples, 0.16%)</title><rect x="596" y="372" width="2" height="15" fill="rgb(214,146,24)"/><text x="599.00" y="382.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1628) (1 samples, 0.16%)</title><rect x="596" y="388" width="2" height="15" fill="rgb(247,78,20)"/><text x="599.00" y="398.50"></text></g><g><title>_array_find_python_scalar_type (common.c:40) (1 samples, 0.16%)</title><rect x="596" y="404" width="2" height="15" fill="rgb(237,168,31)"/><text x="599.00" y="414.50"></text></g><g><title>_find_array_prepare (ufunc_object.c:272) (1 samples, 0.16%)</title><rect x="598" y="356" width="2" height="15" fill="rgb(211,37,46)"/><text x="601.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (2 samples, 0.32%)</title><rect x="598" y="340" width="3" height="15" fill="rgb(213,132,27)"/><text x="601.00" y="350.50"></text></g><g><title>_find_array_prepare (ufunc_object.c:295) (1 samples, 0.16%)</title><rect x="600" y="356" width="1" height="15" fill="rgb(213,195,51)"/><text x="603.00" y="366.50"></text></g><g><title>_find_array_method (ufunc_object.c:176) (1 samples, 0.16%)</title><rect x="600" y="372" width="1" height="15" fill="rgb(233,180,49)"/><text x="603.00" y="382.50"></text></g><g><title>0x7f6842aaa0a0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="600" y="388" width="1" height="15" fill="rgb(229,1,48)"/><text x="603.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1610) (1 samples, 0.16%)</title><rect x="601" y="356" width="2" height="15" fill="rgb(242,59,11)"/><text x="604.00" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 0.96%)</title><rect x="594" y="324" width="11" height="15" fill="rgb(231,199,16)"/><text x="597.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (2 samples, 0.32%)</title><rect x="601" y="340" width="4" height="15" fill="rgb(216,115,0)"/><text x="604.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (1 samples, 0.16%)</title><rect x="603" y="356" width="2" height="15" fill="rgb(252,200,10)"/><text x="606.00" y="366.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (1 samples, 0.16%)</title><rect x="603" y="372" width="2" height="15" fill="rgb(237,13,37)"/><text x="606.00" y="382.50"></text></g><g><title>DOUBLE_equal (loops.c.src:1773) (1 samples, 0.16%)</title><rect x="603" y="388" width="2" height="15" fill="rgb(233,161,54)"/><text x="606.00" y="398.50"></text></g><g><title>run_binary_simd_equal_DOUBLE (simd.inc.src:295) (1 samples, 0.16%)</title><rect x="603" y="404" width="2" height="15" fill="rgb(236,123,21)"/><text x="606.00" y="414.50"></text></g><g><title>sse2_binary_scalar2_equal_DOUBLE (simd.inc.src:985) (1 samples, 0.16%)</title><rect x="603" y="420" width="2" height="15" fill="rgb(216,72,37)"/><text x="606.00" y="430.50"></text></g><g><title>sse2_compress4_to_byte_DOUBLE (simd.inc.src:799) (1 samples, 0.16%)</title><rect x="603" y="436" width="2" height="15" fill="rgb(212,168,53)"/><text x="606.00" y="446.50"></text></g><g><title>_mm_and_si128 (emmintrin.h:1232) (1 samples, 0.16%)</title><rect x="603" y="452" width="2" height="15" fill="rgb(213,1,51)"/><text x="606.00" y="462.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:913) (12 samples, 1.92%)</title><rect x="584" y="292" width="23" height="15" fill="rgb(213,41,25)"/><text x="587.00" y="302.50">p..</text></g><g><title>array_richcompare (arrayobject.c:1445) (8 samples, 1.28%)</title><rect x="592" y="308" width="15" height="15" fill="rgb(216,9,3)"/><text x="595.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4731) (1 samples, 0.16%)</title><rect x="605" y="324" width="2" height="15" fill="rgb(215,169,52)"/><text x="608.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c:538) (1 samples, 0.16%)</title><rect x="605" y="340" width="2" height="15" fill="rgb(239,220,32)"/><text x="608.00" y="350.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.16%)</title><rect x="605" y="356" width="2" height="15" fill="rgb(205,16,47)"/><text x="608.00" y="366.50"></text></g><g><title>PyUFunc_TrueDivisionTypeResolver (ufunc_type_resolution.c:1318) (1 samples, 0.16%)</title><rect x="609" y="340" width="2" height="15" fill="rgb(236,125,26)"/><text x="612.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (2 samples, 0.32%)</title><rect x="609" y="324" width="4" height="15" fill="rgb(247,80,3)"/><text x="612.00" y="334.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2002) (1 samples, 0.16%)</title><rect x="611" y="340" width="2" height="15" fill="rgb(242,15,7)"/><text x="614.00" y="350.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (1 samples, 0.16%)</title><rect x="613" y="356" width="2" height="15" fill="rgb(245,56,20)"/><text x="616.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:234) (1 samples, 0.16%)</title><rect x="613" y="372" width="2" height="15" fill="rgb(243,102,51)"/><text x="616.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (1 samples, 0.16%)</title><rect x="615" y="356" width="1" height="15" fill="rgb(227,127,8)"/><text x="618.00" y="366.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (1 samples, 0.16%)</title><rect x="615" y="372" width="1" height="15" fill="rgb(253,69,36)"/><text x="618.00" y="382.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (1 samples, 0.16%)</title><rect x="615" y="388" width="1" height="15" fill="rgb(230,67,24)"/><text x="618.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (1 samples, 0.16%)</title><rect x="615" y="404" width="1" height="15" fill="rgb(240,52,8)"/><text x="618.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (6 samples, 0.96%)</title><rect x="613" y="340" width="11" height="15" fill="rgb(233,200,39)"/><text x="616.00" y="350.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (4 samples, 0.64%)</title><rect x="616" y="356" width="8" height="15" fill="rgb(250,126,27)"/><text x="619.00" y="366.50"></text></g><g><title>DOUBLE_divide (loops.c.src:1755) (4 samples, 0.64%)</title><rect x="616" y="372" width="8" height="15" fill="rgb(210,34,22)"/><text x="619.00" y="382.50"></text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src:250) (4 samples, 0.64%)</title><rect x="616" y="388" width="8" height="15" fill="rgb(227,97,34)"/><text x="619.00" y="398.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:604) (4 samples, 0.64%)</title><rect x="616" y="404" width="8" height="15" fill="rgb(220,204,53)"/><text x="619.00" y="414.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (4 samples, 0.64%)</title><rect x="616" y="420" width="8" height="15" fill="rgb(229,8,39)"/><text x="619.00" y="430.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:449) (116 samples, 18.53%)</title><rect x="407" y="276" width="219" height="15" fill="rgb(213,125,51)"/><text x="410.00" y="286.50">_accumulate_prediction (skle..</text></g><g><title>predict_proba (sklearn/tree/_classes.py:914) (10 samples, 1.60%)</title><rect x="607" y="292" width="19" height="15" fill="rgb(214,27,0)"/><text x="610.00" y="302.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (9 samples, 1.44%)</title><rect x="609" y="308" width="17" height="15" fill="rgb(217,224,9)"/><text x="612.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (7 samples, 1.12%)</title><rect x="613" y="324" width="13" height="15" fill="rgb(252,190,26)"/><text x="616.00" y="334.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (1 samples, 0.16%)</title><rect x="624" y="340" width="2" height="15" fill="rgb(223,161,6)"/><text x="627.00" y="350.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (1 samples, 0.16%)</title><rect x="624" y="356" width="2" height="15" fill="rgb(236,174,3)"/><text x="627.00" y="366.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.16%)</title><rect x="624" y="372" width="2" height="15" fill="rgb(213,138,50)"/><text x="627.00" y="382.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:450) (1 samples, 0.16%)</title><rect x="626" y="276" width="2" height="15" fill="rgb(219,70,19)"/><text x="629.00" y="286.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (1 samples, 0.16%)</title><rect x="626" y="292" width="2" height="15" fill="rgb(240,60,6)"/><text x="629.00" y="302.50"></text></g><g><title>0x7f684389d757 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="626" y="308" width="2" height="15" fill="rgb(234,134,14)"/><text x="629.00" y="318.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:451) (1 samples, 0.16%)</title><rect x="628" y="276" width="2" height="15" fill="rgb(215,95,23)"/><text x="631.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (1 samples, 0.16%)</title><rect x="630" y="308" width="2" height="15" fill="rgb(228,221,14)"/><text x="633.00" y="318.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1056) (1 samples, 0.16%)</title><rect x="630" y="324" width="2" height="15" fill="rgb(225,133,53)"/><text x="633.00" y="334.50"></text></g><g><title>0x7f68438a8134 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="630" y="340" width="2" height="15" fill="rgb(244,81,26)"/><text x="633.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (1 samples, 0.16%)</title><rect x="632" y="308" width="1" height="15" fill="rgb(246,137,53)"/><text x="635.00" y="318.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (1 samples, 0.16%)</title><rect x="632" y="324" width="1" height="15" fill="rgb(210,37,5)"/><text x="635.00" y="334.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1905) (1 samples, 0.16%)</title><rect x="632" y="340" width="1" height="15" fill="rgb(206,153,36)"/><text x="635.00" y="350.50"></text></g><g><title>promote_types (convert_datatype.c:1043) (1 samples, 0.16%)</title><rect x="632" y="356" width="1" height="15" fill="rgb(209,182,47)"/><text x="635.00" y="366.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c:1070) (1 samples, 0.16%)</title><rect x="632" y="372" width="1" height="15" fill="rgb(231,224,35)"/><text x="635.00" y="382.50"></text></g><g><title>diophantine_dfs (mem_overlap.c:372) (1 samples, 0.16%)</title><rect x="633" y="388" width="2" height="15" fill="rgb(249,225,1)"/><text x="636.00" y="398.50"></text></g><g><title>ceildiv_128_64 (npy_extint128.h:310) (1 samples, 0.16%)</title><rect x="633" y="404" width="2" height="15" fill="rgb(214,37,48)"/><text x="636.00" y="414.50"></text></g><g><title>divmod_128_64 (npy_extint128.h:242) (1 samples, 0.16%)</title><rect x="633" y="420" width="2" height="15" fill="rgb(228,116,10)"/><text x="636.00" y="430.50"></text></g><g><title>solve_diophantine (mem_overlap.c:555) (2 samples, 0.32%)</title><rect x="633" y="372" width="4" height="15" fill="rgb(253,78,52)"/><text x="636.00" y="382.50"></text></g><g><title>diophantine_dfs (mem_overlap.c:382) (1 samples, 0.16%)</title><rect x="635" y="388" width="2" height="15" fill="rgb(223,60,18)"/><text x="638.00" y="398.50"></text></g><g><title>gt_128 (npy_extint128.h:222) (1 samples, 0.16%)</title><rect x="635" y="404" width="2" height="15" fill="rgb(237,16,51)"/><text x="638.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1717) (3 samples, 0.48%)</title><rect x="633" y="324" width="6" height="15" fill="rgb(216,44,34)"/><text x="636.00" y="334.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h:721) (3 samples, 0.48%)</title><rect x="633" y="340" width="6" height="15" fill="rgb(221,223,32)"/><text x="636.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c:835) (3 samples, 0.48%)</title><rect x="633" y="356" width="6" height="15" fill="rgb(229,165,5)"/><text x="636.00" y="366.50"></text></g><g><title>solve_diophantine (mem_overlap.c:559) (1 samples, 0.16%)</title><rect x="637" y="372" width="2" height="15" fill="rgb(250,151,27)"/><text x="640.00" y="382.50"></text></g><g><title>0x7f684388796a (libc-2.29.so) (1 samples, 0.16%)</title><rect x="637" y="388" width="2" height="15" fill="rgb(217,187,54)"/><text x="640.00" y="398.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:600) (1 samples, 0.16%)</title><rect x="639" y="388" width="2" height="15" fill="rgb(238,121,48)"/><text x="642.00" y="398.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (125 samples, 19.97%)</title><rect x="407" y="260" width="236" height="15" fill="rgb(232,179,44)"/><text x="410.00" y="270.50">&lt;listcomp&gt; (joblib/parallel.py:..</text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:452) (7 samples, 1.12%)</title><rect x="630" y="276" width="13" height="15" fill="rgb(235,19,54)"/><text x="633.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 1.12%)</title><rect x="630" y="292" width="13" height="15" fill="rgb(249,72,2)"/><text x="633.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 0.80%)</title><rect x="633" y="308" width="10" height="15" fill="rgb(216,58,49)"/><text x="636.00" y="318.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (2 samples, 0.32%)</title><rect x="639" y="324" width="4" height="15" fill="rgb(229,105,19)"/><text x="642.00" y="334.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (2 samples, 0.32%)</title><rect x="639" y="340" width="4" height="15" fill="rgb(226,184,51)"/><text x="642.00" y="350.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (2 samples, 0.32%)</title><rect x="639" y="356" width="4" height="15" fill="rgb(250,156,25)"/><text x="642.00" y="366.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (2 samples, 0.32%)</title><rect x="639" y="372" width="4" height="15" fill="rgb(247,73,0)"/><text x="642.00" y="382.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:603) (1 samples, 0.16%)</title><rect x="641" y="388" width="2" height="15" fill="rgb(254,28,46)"/><text x="644.00" y="398.50"></text></g><g><title>_mm_add_pd (emmintrin.h:229) (1 samples, 0.16%)</title><rect x="641" y="404" width="2" height="15" fill="rgb(253,71,49)"/><text x="644.00" y="414.50"></text></g><g><title>unregister (joblib/parallel.py:219) (1 samples, 0.16%)</title><rect x="643" y="276" width="2" height="15" fill="rgb(228,12,25)"/><text x="646.00" y="286.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (137 samples, 21.88%)</title><rect x="388" y="212" width="259" height="15" fill="rgb(220,174,13)"/><text x="391.00" y="222.50">apply_async (joblib/_parallel_back..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (137 samples, 21.88%)</title><rect x="388" y="228" width="259" height="15" fill="rgb(219,77,5)"/><text x="391.00" y="238.50">__init__ (joblib/_parallel_backend..</text></g><g><title>__call__ (joblib/parallel.py:256) (129 samples, 20.61%)</title><rect x="403" y="244" width="244" height="15" fill="rgb(219,130,10)"/><text x="406.00" y="254.50">__call__ (joblib/parallel.py:256)</text></g><g><title>__exit__ (joblib/parallel.py:215) (2 samples, 0.32%)</title><rect x="643" y="260" width="4" height="15" fill="rgb(207,156,41)"/><text x="646.00" y="270.50"></text></g><g><title>unregister (joblib/parallel.py:220) (1 samples, 0.16%)</title><rect x="645" y="276" width="2" height="15" fill="rgb(212,229,9)"/><text x="648.00" y="286.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:202) (1 samples, 0.16%)</title><rect x="647" y="212" width="2" height="15" fill="rgb(251,115,22)"/><text x="650.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py:337) (2 samples, 0.32%)</title><rect x="649" y="228" width="3" height="15" fill="rgb(234,17,8)"/><text x="652.00" y="238.50"></text></g><g><title>print_progress (joblib/parallel.py:850) (1 samples, 0.16%)</title><rect x="650" y="244" width="2" height="15" fill="rgb(226,209,41)"/><text x="653.00" y="254.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (143 samples, 22.84%)</title><rect x="385" y="196" width="269" height="15" fill="rgb(248,187,54)"/><text x="388.00" y="206.50">_dispatch (joblib/parallel.py:753)</text></g><g><title>apply_async (joblib/_parallel_backends.py:203) (3 samples, 0.48%)</title><rect x="649" y="212" width="5" height="15" fill="rgb(223,215,14)"/><text x="652.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py:338) (1 samples, 0.16%)</title><rect x="652" y="228" width="2" height="15" fill="rgb(241,192,18)"/><text x="655.00" y="238.50"></text></g><g><title>PyThread_get_thread_ident (python3.7) (1 samples, 0.16%)</title><rect x="652" y="244" width="2" height="15" fill="rgb(217,212,33)"/><text x="655.00" y="254.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:38) (342 samples, 54.63%)</title><rect x="11" y="52" width="645" height="15" fill="rgb(208,200,44)"/><text x="14.00" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:38)</text></g><g><title>profile_skl (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:37) (342 samples, 54.63%)</title><rect x="11" y="68" width="645" height="15" fill="rgb(249,107,30)"/><text x="14.00" y="78.50">profile_skl (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:37)</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:29) (339 samples, 54.15%)</title><rect x="17" y="84" width="639" height="15" fill="rgb(231,130,5)"/><text x="20.00" y="94.50">setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:29)</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:23) (199 samples, 31.79%)</title><rect x="281" y="100" width="375" height="15" fill="rgb(248,25,46)"/><text x="284.00" y="110.50">profile (bench_RandomForestClassifier_default_b_cl..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (199 samples, 31.79%)</title><rect x="281" y="116" width="375" height="15" fill="rgb(229,17,10)"/><text x="284.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_s..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (199 samples, 31.79%)</title><rect x="281" y="132" width="375" height="15" fill="rgb(244,44,50)"/><text x="284.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.p..</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:669) (196 samples, 31.31%)</title><rect x="287" y="148" width="369" height="15" fill="rgb(223,213,17)"/><text x="290.00" y="158.50">predict_proba (sklearn/ensemble/_forest.py:669)</text></g><g><title>__call__ (joblib/parallel.py:1006) (195 samples, 31.15%)</title><rect x="288" y="164" width="368" height="15" fill="rgb(217,70,31)"/><text x="291.00" y="174.50">__call__ (joblib/parallel.py:1006)</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (147 samples, 23.48%)</title><rect x="379" y="180" width="277" height="15" fill="rgb(231,150,12)"/><text x="382.00" y="190.50">dispatch_one_batch (joblib/parallel.p..</text></g><g><title>_dispatch (joblib/parallel.py:758) (1 samples, 0.16%)</title><rect x="654" y="196" width="2" height="15" fill="rgb(244,129,8)"/><text x="657.00" y="206.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (1 samples, 0.16%)</title><rect x="656" y="900" width="2" height="15" fill="rgb(232,177,11)"/><text x="659.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (1 samples, 0.16%)</title><rect x="656" y="916" width="2" height="15" fill="rgb(236,101,29)"/><text x="659.00" y="926.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py:2126) (1 samples, 0.16%)</title><rect x="656" y="932" width="2" height="15" fill="rgb(212,229,22)"/><text x="659.00" y="942.50"></text></g><g><title>isdir (genericpath.py:42) (1 samples, 0.16%)</title><rect x="656" y="948" width="2" height="15" fill="rgb(244,221,25)"/><text x="659.00" y="958.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (2 samples, 0.32%)</title><rect x="656" y="852" width="4" height="15" fill="rgb(211,227,8)"/><text x="659.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (2 samples, 0.32%)</title><rect x="656" y="868" width="4" height="15" fill="rgb(212,46,7)"/><text x="659.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (2 samples, 0.32%)</title><rect x="656" y="884" width="4" height="15" fill="rgb(213,43,38)"/><text x="659.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:624) (1 samples, 0.16%)</title><rect x="658" y="900" width="2" height="15" fill="rgb(230,179,33)"/><text x="661.00" y="910.50"></text></g><g><title>add (pkg_resources/__init__.py:704) (1 samples, 0.16%)</title><rect x="658" y="916" width="2" height="15" fill="rgb(235,168,30)"/><text x="661.00" y="926.50"></text></g><g><title>key (pkg_resources/__init__.py:2640) (1 samples, 0.16%)</title><rect x="658" y="932" width="2" height="15" fill="rgb(246,197,31)"/><text x="661.00" y="942.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py:2200) (1 samples, 0.16%)</title><rect x="660" y="916" width="2" height="15" fill="rgb(249,146,51)"/><text x="663.00" y="926.50"></text></g><g><title>simplefilter (warnings.py:179) (1 samples, 0.16%)</title><rect x="660" y="932" width="2" height="15" fill="rgb(206,89,18)"/><text x="663.00" y="942.50"></text></g><g><title>_add_filter (warnings.py:187) (1 samples, 0.16%)</title><rect x="660" y="948" width="2" height="15" fill="rgb(209,198,52)"/><text x="663.00" y="958.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3279) (2 samples, 0.32%)</title><rect x="660" y="852" width="4" height="15" fill="rgb(245,212,19)"/><text x="663.00" y="862.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py:3279) (2 samples, 0.32%)</title><rect x="660" y="868" width="4" height="15" fill="rgb(248,104,18)"/><text x="663.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py:2782) (2 samples, 0.32%)</title><rect x="660" y="884" width="4" height="15" fill="rgb(241,107,39)"/><text x="663.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py:2295) (2 samples, 0.32%)</title><rect x="660" y="900" width="4" height="15" fill="rgb(207,43,51)"/><text x="663.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py:2201) (1 samples, 0.16%)</title><rect x="662" y="916" width="2" height="15" fill="rgb(233,150,46)"/><text x="665.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;:431) (1 samples, 0.16%)</title><rect x="662" y="932" width="2" height="15" fill="rgb(230,174,50)"/><text x="665.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;:1346) (1 samples, 0.16%)</title><rect x="662" y="948" width="2" height="15" fill="rgb(239,173,35)"/><text x="665.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;:1383) (1 samples, 0.16%)</title><rect x="662" y="964" width="2" height="15" fill="rgb(252,15,17)"/><text x="665.00" y="974.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;:95) (1 samples, 0.16%)</title><rect x="662" y="980" width="2" height="15" fill="rgb(228,138,43)"/><text x="665.00" y="990.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;:87) (1 samples, 0.16%)</title><rect x="662" y="996" width="2" height="15" fill="rgb(205,126,14)"/><text x="665.00" y="1006.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;:81) (1 samples, 0.16%)</title><rect x="662" y="1012" width="2" height="15" fill="rgb(242,157,9)"/><text x="665.00" y="1022.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.16%)</title><rect x="662" y="1028" width="2" height="15" fill="rgb(240,177,21)"/><text x="665.00" y="1038.50"></text></g><g><title>unicode_decode_locale (python3.7) (1 samples, 0.16%)</title><rect x="662" y="1044" width="2" height="15" fill="rgb(230,65,9)"/><text x="665.00" y="1054.50"></text></g><g><title>mbstowcs (libc-2.29.so) (1 samples, 0.16%)</title><rect x="662" y="1060" width="2" height="15" fill="rgb(254,132,51)"/><text x="665.00" y="1070.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:2) (5 samples, 0.80%)</title><rect x="656" y="148" width="9" height="15" fill="rgb(212,6,46)"/><text x="659.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.80%)</title><rect x="656" y="164" width="9" height="15" fill="rgb(228,12,35)"/><text x="659.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.80%)</title><rect x="656" y="180" width="9" height="15" fill="rgb(224,191,31)"/><text x="659.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.80%)</title><rect x="656" y="196" width="9" height="15" fill="rgb(234,15,43)"/><text x="659.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.80%)</title><rect x="656" y="212" width="9" height="15" fill="rgb(210,216,48)"/><text x="659.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.80%)</title><rect x="656" y="228" width="9" height="15" fill="rgb(213,118,6)"/><text x="659.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.80%)</title><rect x="656" y="244" width="9" height="15" fill="rgb(247,146,14)"/><text x="659.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.80%)</title><rect x="656" y="260" width="9" height="15" fill="rgb(254,48,15)"/><text x="659.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.80%)</title><rect x="656" y="276" width="9" height="15" fill="rgb(221,199,42)"/><text x="659.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (5 samples, 0.80%)</title><rect x="656" y="292" width="9" height="15" fill="rgb(230,148,32)"/><text x="659.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.80%)</title><rect x="656" y="308" width="9" height="15" fill="rgb(224,144,17)"/><text x="659.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.80%)</title><rect x="656" y="324" width="9" height="15" fill="rgb(209,205,1)"/><text x="659.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.80%)</title><rect x="656" y="340" width="9" height="15" fill="rgb(249,53,18)"/><text x="659.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.80%)</title><rect x="656" y="356" width="9" height="15" fill="rgb(252,146,8)"/><text x="659.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.80%)</title><rect x="656" y="372" width="9" height="15" fill="rgb(235,175,25)"/><text x="659.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (5 samples, 0.80%)</title><rect x="656" y="388" width="9" height="15" fill="rgb(240,102,26)"/><text x="659.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.80%)</title><rect x="656" y="404" width="9" height="15" fill="rgb(244,25,25)"/><text x="659.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.80%)</title><rect x="656" y="420" width="9" height="15" fill="rgb(207,67,4)"/><text x="659.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.80%)</title><rect x="656" y="436" width="9" height="15" fill="rgb(246,33,48)"/><text x="659.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.80%)</title><rect x="656" y="452" width="9" height="15" fill="rgb(238,36,2)"/><text x="659.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.80%)</title><rect x="656" y="468" width="9" height="15" fill="rgb(240,171,38)"/><text x="659.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (5 samples, 0.80%)</title><rect x="656" y="484" width="9" height="15" fill="rgb(250,16,42)"/><text x="659.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.80%)</title><rect x="656" y="500" width="9" height="15" fill="rgb(219,147,52)"/><text x="659.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.80%)</title><rect x="656" y="516" width="9" height="15" fill="rgb(238,146,9)"/><text x="659.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.80%)</title><rect x="656" y="532" width="9" height="15" fill="rgb(237,101,13)"/><text x="659.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.80%)</title><rect x="656" y="548" width="9" height="15" fill="rgb(218,137,48)"/><text x="659.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.80%)</title><rect x="656" y="564" width="9" height="15" fill="rgb(231,87,30)"/><text x="659.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (5 samples, 0.80%)</title><rect x="656" y="580" width="9" height="15" fill="rgb(254,92,18)"/><text x="659.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.80%)</title><rect x="656" y="596" width="9" height="15" fill="rgb(205,172,48)"/><text x="659.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.80%)</title><rect x="656" y="612" width="9" height="15" fill="rgb(223,221,9)"/><text x="659.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.80%)</title><rect x="656" y="628" width="9" height="15" fill="rgb(241,10,18)"/><text x="659.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.80%)</title><rect x="656" y="644" width="9" height="15" fill="rgb(253,163,5)"/><text x="659.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.80%)</title><rect x="656" y="660" width="9" height="15" fill="rgb(213,160,46)"/><text x="659.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.80%)</title><rect x="656" y="676" width="9" height="15" fill="rgb(205,137,45)"/><text x="659.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.80%)</title><rect x="656" y="692" width="9" height="15" fill="rgb(207,32,36)"/><text x="659.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.80%)</title><rect x="656" y="708" width="9" height="15" fill="rgb(249,113,45)"/><text x="659.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (5 samples, 0.80%)</title><rect x="656" y="724" width="9" height="15" fill="rgb(238,155,51)"/><text x="659.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.80%)</title><rect x="656" y="740" width="9" height="15" fill="rgb(205,186,48)"/><text x="659.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.80%)</title><rect x="656" y="756" width="9" height="15" fill="rgb(219,199,28)"/><text x="659.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.80%)</title><rect x="656" y="772" width="9" height="15" fill="rgb(242,124,23)"/><text x="659.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.80%)</title><rect x="656" y="788" width="9" height="15" fill="rgb(252,144,26)"/><text x="659.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.80%)</title><rect x="656" y="804" width="9" height="15" fill="rgb(205,115,4)"/><text x="659.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (5 samples, 0.80%)</title><rect x="656" y="820" width="9" height="15" fill="rgb(253,102,21)"/><text x="659.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (5 samples, 0.80%)</title><rect x="656" y="836" width="9" height="15" fill="rgb(206,22,34)"/><text x="659.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (1 samples, 0.16%)</title><rect x="664" y="852" width="1" height="15" fill="rgb(229,223,42)"/><text x="667.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (1 samples, 0.16%)</title><rect x="664" y="868" width="1" height="15" fill="rgb(226,3,6)"/><text x="667.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (1 samples, 0.16%)</title><rect x="664" y="884" width="1" height="15" fill="rgb(212,211,0)"/><text x="667.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py:2127) (1 samples, 0.16%)</title><rect x="664" y="900" width="1" height="15" fill="rgb(231,225,33)"/><text x="667.00" y="910.50"></text></g><g><title>os_listdir (python3.7) (1 samples, 0.16%)</title><rect x="664" y="916" width="1" height="15" fill="rgb(208,56,4)"/><text x="667.00" y="926.50"></text></g><g><title>readdir64 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="664" y="932" width="1" height="15" fill="rgb(220,14,36)"/><text x="667.00" y="942.50"></text></g><g><title>0x7f68438c7237 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="664" y="948" width="1" height="15" fill="rgb(251,171,46)"/><text x="667.00" y="958.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:4) (1 samples, 0.16%)</title><rect x="665" y="148" width="2" height="15" fill="rgb(217,149,38)"/><text x="668.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="665" y="164" width="2" height="15" fill="rgb(239,139,13)"/><text x="668.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.16%)</title><rect x="665" y="180" width="2" height="15" fill="rgb(209,120,29)"/><text x="668.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="665" y="196" width="2" height="15" fill="rgb(240,168,34)"/><text x="668.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="665" y="212" width="2" height="15" fill="rgb(251,52,26)"/><text x="668.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="665" y="228" width="2" height="15" fill="rgb(233,227,31)"/><text x="668.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="665" y="244" width="2" height="15" fill="rgb(252,193,15)"/><text x="668.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="665" y="260" width="2" height="15" fill="rgb(240,223,28)"/><text x="668.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="665" y="276" width="2" height="15" fill="rgb(225,49,44)"/><text x="668.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (1 samples, 0.16%)</title><rect x="665" y="292" width="2" height="15" fill="rgb(222,198,21)"/><text x="668.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="665" y="308" width="2" height="15" fill="rgb(248,69,41)"/><text x="668.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="665" y="324" width="2" height="15" fill="rgb(229,50,4)"/><text x="668.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="665" y="340" width="2" height="15" fill="rgb(238,49,17)"/><text x="668.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="665" y="356" width="2" height="15" fill="rgb(216,156,17)"/><text x="668.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="665" y="372" width="2" height="15" fill="rgb(231,50,32)"/><text x="668.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (1 samples, 0.16%)</title><rect x="665" y="388" width="2" height="15" fill="rgb(229,196,35)"/><text x="668.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="665" y="404" width="2" height="15" fill="rgb(254,38,29)"/><text x="668.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="665" y="420" width="2" height="15" fill="rgb(221,46,42)"/><text x="668.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="665" y="436" width="2" height="15" fill="rgb(223,19,27)"/><text x="668.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="665" y="452" width="2" height="15" fill="rgb(207,5,30)"/><text x="668.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="665" y="468" width="2" height="15" fill="rgb(218,199,48)"/><text x="668.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:25) (1 samples, 0.16%)</title><rect x="665" y="484" width="2" height="15" fill="rgb(232,213,43)"/><text x="668.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="665" y="500" width="2" height="15" fill="rgb(232,144,9)"/><text x="668.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="665" y="516" width="2" height="15" fill="rgb(212,102,1)"/><text x="668.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="665" y="532" width="2" height="15" fill="rgb(241,96,30)"/><text x="668.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="665" y="548" width="2" height="15" fill="rgb(214,30,38)"/><text x="668.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="665" y="564" width="2" height="15" fill="rgb(215,188,53)"/><text x="668.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (1 samples, 0.16%)</title><rect x="665" y="580" width="2" height="15" fill="rgb(239,166,15)"/><text x="668.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="665" y="596" width="2" height="15" fill="rgb(237,14,33)"/><text x="668.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="665" y="612" width="2" height="15" fill="rgb(229,92,29)"/><text x="668.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="665" y="628" width="2" height="15" fill="rgb(216,39,2)"/><text x="668.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="665" y="644" width="2" height="15" fill="rgb(226,122,1)"/><text x="668.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="665" y="660" width="2" height="15" fill="rgb(220,208,33)"/><text x="668.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:379) (1 samples, 0.16%)</title><rect x="665" y="676" width="2" height="15" fill="rgb(213,0,53)"/><text x="668.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="665" y="692" width="2" height="15" fill="rgb(213,173,6)"/><text x="668.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="665" y="708" width="2" height="15" fill="rgb(222,91,31)"/><text x="668.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="665" y="724" width="2" height="15" fill="rgb(254,173,42)"/><text x="668.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="665" y="740" width="2" height="15" fill="rgb(224,136,38)"/><text x="668.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="665" y="756" width="2" height="15" fill="rgb(222,220,41)"/><text x="668.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py:182) (1 samples, 0.16%)</title><rect x="665" y="772" width="2" height="15" fill="rgb(234,14,53)"/><text x="668.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.16%)</title><rect x="665" y="788" width="2" height="15" fill="rgb(233,88,13)"/><text x="668.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="665" y="804" width="2" height="15" fill="rgb(223,176,48)"/><text x="668.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="665" y="820" width="2" height="15" fill="rgb(216,6,6)"/><text x="668.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="665" y="836" width="2" height="15" fill="rgb(230,56,42)"/><text x="668.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="665" y="852" width="2" height="15" fill="rgb(215,86,24)"/><text x="668.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="665" y="868" width="2" height="15" fill="rgb(244,51,29)"/><text x="668.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="665" y="884" width="2" height="15" fill="rgb(246,134,13)"/><text x="668.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py:13) (1 samples, 0.16%)</title><rect x="665" y="900" width="2" height="15" fill="rgb(219,116,35)"/><text x="668.00" y="910.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.16%)</title><rect x="665" y="916" width="2" height="15" fill="rgb(213,207,44)"/><text x="668.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="665" y="932" width="2" height="15" fill="rgb(206,123,20)"/><text x="668.00" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="665" y="948" width="2" height="15" fill="rgb(229,207,5)"/><text x="668.00" y="958.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="665" y="964" width="2" height="15" fill="rgb(233,147,21)"/><text x="668.00" y="974.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="665" y="980" width="2" height="15" fill="rgb(224,191,23)"/><text x="668.00" y="990.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="665" y="996" width="2" height="15" fill="rgb(244,85,30)"/><text x="668.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="665" y="1012" width="2" height="15" fill="rgb(246,7,44)"/><text x="668.00" y="1022.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_continuous_distns.py:5847) (1 samples, 0.16%)</title><rect x="665" y="1028" width="2" height="15" fill="rgb(237,40,31)"/><text x="668.00" y="1038.50"></text></g><g><title>__init__ (scipy/stats/_distn_infrastructure.py:1615) (1 samples, 0.16%)</title><rect x="665" y="1044" width="2" height="15" fill="rgb(218,30,31)"/><text x="668.00" y="1054.50"></text></g><g><title>_construct_doc (scipy/stats/_distn_infrastructure.py:732) (1 samples, 0.16%)</title><rect x="665" y="1060" width="2" height="15" fill="rgb(213,228,50)"/><text x="668.00" y="1070.50"></text></g><g><title>docformat (scipy/_lib/doccer.py:50) (1 samples, 0.16%)</title><rect x="665" y="1076" width="2" height="15" fill="rgb(221,163,42)"/><text x="668.00" y="1086.50"></text></g><g><title>unicode_splitlines (python3.7) (1 samples, 0.16%)</title><rect x="665" y="1092" width="2" height="15" fill="rgb(251,138,33)"/><text x="668.00" y="1102.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (2 samples, 0.32%)</title><rect x="667" y="244" width="4" height="15" fill="rgb(212,170,34)"/><text x="670.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="667" y="260" width="4" height="15" fill="rgb(210,43,47)"/><text x="670.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="667" y="276" width="4" height="15" fill="rgb(227,64,5)"/><text x="670.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="667" y="292" width="4" height="15" fill="rgb(242,169,40)"/><text x="670.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="667" y="308" width="4" height="15" fill="rgb(215,209,29)"/><text x="670.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="667" y="324" width="4" height="15" fill="rgb(242,144,44)"/><text x="670.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (2 samples, 0.32%)</title><rect x="667" y="340" width="4" height="15" fill="rgb(206,21,11)"/><text x="670.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="667" y="356" width="4" height="15" fill="rgb(235,127,50)"/><text x="670.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.32%)</title><rect x="667" y="372" width="4" height="15" fill="rgb(220,196,39)"/><text x="670.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="667" y="388" width="4" height="15" fill="rgb(223,194,26)"/><text x="670.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="667" y="404" width="4" height="15" fill="rgb(209,42,11)"/><text x="670.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="667" y="420" width="4" height="15" fill="rgb(245,59,19)"/><text x="670.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="667" y="436" width="4" height="15" fill="rgb(240,105,37)"/><text x="670.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="667" y="452" width="4" height="15" fill="rgb(228,106,26)"/><text x="670.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="667" y="468" width="4" height="15" fill="rgb(239,2,50)"/><text x="670.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:7) (2 samples, 0.32%)</title><rect x="667" y="484" width="4" height="15" fill="rgb(206,226,18)"/><text x="670.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="667" y="500" width="4" height="15" fill="rgb(230,62,9)"/><text x="670.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="667" y="516" width="4" height="15" fill="rgb(248,155,0)"/><text x="670.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="667" y="532" width="4" height="15" fill="rgb(246,215,28)"/><text x="670.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="667" y="548" width="4" height="15" fill="rgb(246,213,24)"/><text x="670.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="667" y="564" width="4" height="15" fill="rgb(234,76,10)"/><text x="670.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/code_helper.py:7) (2 samples, 0.32%)</title><rect x="667" y="580" width="4" height="15" fill="rgb(206,78,3)"/><text x="670.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="667" y="596" width="4" height="15" fill="rgb(220,180,5)"/><text x="670.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="667" y="612" width="4" height="15" fill="rgb(245,179,54)"/><text x="670.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="667" y="628" width="4" height="15" fill="rgb(237,118,9)"/><text x="670.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="667" y="644" width="4" height="15" fill="rgb(238,225,30)"/><text x="670.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="667" y="660" width="4" height="15" fill="rgb(250,217,16)"/><text x="670.00" y="670.50"></text></g><g><title>&lt;module&gt; (autopep8.py:62) (2 samples, 0.32%)</title><rect x="667" y="676" width="4" height="15" fill="rgb(221,122,6)"/><text x="670.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="667" y="692" width="4" height="15" fill="rgb(232,208,1)"/><text x="670.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="667" y="708" width="4" height="15" fill="rgb(220,19,6)"/><text x="670.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="667" y="724" width="4" height="15" fill="rgb(251,164,34)"/><text x="670.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="667" y="740" width="4" height="15" fill="rgb(235,75,3)"/><text x="670.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="667" y="756" width="4" height="15" fill="rgb(215,184,46)"/><text x="670.00" y="766.50"></text></g><g><title>&lt;module&gt; (pycodestyle.py:143) (2 samples, 0.32%)</title><rect x="667" y="772" width="4" height="15" fill="rgb(233,86,21)"/><text x="670.00" y="782.50"></text></g><g><title>compile (re.py:234) (2 samples, 0.32%)</title><rect x="667" y="788" width="4" height="15" fill="rgb(254,142,9)"/><text x="670.00" y="798.50"></text></g><g><title>_compile (re.py:286) (2 samples, 0.32%)</title><rect x="667" y="804" width="4" height="15" fill="rgb(225,218,41)"/><text x="670.00" y="814.50"></text></g><g><title>compile (sre_compile.py:764) (2 samples, 0.32%)</title><rect x="667" y="820" width="4" height="15" fill="rgb(228,43,33)"/><text x="670.00" y="830.50"></text></g><g><title>parse (sre_parse.py:930) (2 samples, 0.32%)</title><rect x="667" y="836" width="4" height="15" fill="rgb(219,198,52)"/><text x="670.00" y="846.50"></text></g><g><title>_parse_sub (sre_parse.py:426) (2 samples, 0.32%)</title><rect x="667" y="852" width="4" height="15" fill="rgb(229,28,21)"/><text x="670.00" y="862.50"></text></g><g><title>_parse (sre_parse.py:816) (2 samples, 0.32%)</title><rect x="667" y="868" width="4" height="15" fill="rgb(236,199,49)"/><text x="670.00" y="878.50"></text></g><g><title>_parse_sub (sre_parse.py:426) (2 samples, 0.32%)</title><rect x="667" y="884" width="4" height="15" fill="rgb(208,4,25)"/><text x="670.00" y="894.50"></text></g><g><title>_parse (sre_parse.py:646) (2 samples, 0.32%)</title><rect x="667" y="900" width="4" height="15" fill="rgb(245,81,50)"/><text x="670.00" y="910.50"></text></g><g><title>__getitem__ (sre_parse.py:166) (2 samples, 0.32%)</title><rect x="667" y="916" width="4" height="15" fill="rgb(228,195,49)"/><text x="670.00" y="926.50"></text></g><g><title>__init__ (sre_parse.py:112) (2 samples, 0.32%)</title><rect x="667" y="932" width="4" height="15" fill="rgb(222,192,9)"/><text x="670.00" y="942.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:20) (1 samples, 0.16%)</title><rect x="671" y="340" width="2" height="15" fill="rgb(231,5,32)"/><text x="674.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="671" y="356" width="2" height="15" fill="rgb(244,99,1)"/><text x="674.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="671" y="372" width="2" height="15" fill="rgb(211,43,53)"/><text x="674.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="671" y="388" width="2" height="15" fill="rgb(243,169,10)"/><text x="674.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="671" y="404" width="2" height="15" fill="rgb(240,20,44)"/><text x="674.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="671" y="420" width="2" height="15" fill="rgb(237,192,12)"/><text x="674.00" y="430.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/__init__.py:22) (1 samples, 0.16%)</title><rect x="671" y="436" width="2" height="15" fill="rgb(246,170,9)"/><text x="674.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="671" y="452" width="2" height="15" fill="rgb(253,172,20)"/><text x="674.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="671" y="468" width="2" height="15" fill="rgb(216,225,51)"/><text x="674.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="671" y="484" width="2" height="15" fill="rgb(205,205,4)"/><text x="674.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="671" y="500" width="2" height="15" fill="rgb(221,162,30)"/><text x="674.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="671" y="516" width="2" height="15" fill="rgb(221,83,37)"/><text x="674.00" y="526.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/_twenty_newsgroups.py:30) (1 samples, 0.16%)</title><rect x="671" y="532" width="2" height="15" fill="rgb(243,146,2)"/><text x="674.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="671" y="548" width="2" height="15" fill="rgb(249,176,26)"/><text x="674.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="671" y="564" width="2" height="15" fill="rgb(208,195,4)"/><text x="674.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="671" y="580" width="2" height="15" fill="rgb(217,28,0)"/><text x="674.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 0.16%)</title><rect x="671" y="596" width="2" height="15" fill="rgb(210,60,36)"/><text x="674.00" y="606.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:857) (1 samples, 0.16%)</title><rect x="671" y="612" width="2" height="15" fill="rgb(238,76,12)"/><text x="674.00" y="622.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:525) (1 samples, 0.16%)</title><rect x="671" y="628" width="2" height="15" fill="rgb(251,30,36)"/><text x="674.00" y="638.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:14) (1 samples, 0.16%)</title><rect x="673" y="1108" width="2" height="15" fill="rgb(238,167,24)"/><text x="676.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.16%)</title><rect x="673" y="1124" width="2" height="15" fill="rgb(236,97,17)"/><text x="676.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="673" y="1140" width="2" height="15" fill="rgb(253,34,48)"/><text x="676.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="673" y="1156" width="2" height="15" fill="rgb(238,5,4)"/><text x="676.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="673" y="1172" width="2" height="15" fill="rgb(207,36,26)"/><text x="676.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="673" y="1188" width="2" height="15" fill="rgb(238,99,33)"/><text x="676.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="673" y="1204" width="2" height="15" fill="rgb(215,181,31)"/><text x="676.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="673" y="1220" width="2" height="15" fill="rgb(250,47,6)"/><text x="676.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/shape_calculators/__init__.py:32) (1 samples, 0.16%)</title><rect x="673" y="1236" width="2" height="15" fill="rgb(238,90,54)"/><text x="676.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.16%)</title><rect x="673" y="1252" width="2" height="15" fill="rgb(254,210,41)"/><text x="676.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="673" y="1268" width="2" height="15" fill="rgb(213,199,45)"/><text x="676.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="673" y="1284" width="2" height="15" fill="rgb(206,172,39)"/><text x="676.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="673" y="1300" width="2" height="15" fill="rgb(247,100,35)"/><text x="676.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="673" y="1316" width="2" height="15" fill="rgb(237,201,26)"/><text x="676.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 0.16%)</title><rect x="673" y="1332" width="2" height="15" fill="rgb(223,58,40)"/><text x="676.00" y="1342.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:807) (1 samples, 0.16%)</title><rect x="673" y="1348" width="2" height="15" fill="rgb(237,198,54)"/><text x="676.00" y="1358.50"></text></g><g><title>cache_from_source (&lt;frozen importlib._bootstrap_external&gt;:297) (1 samples, 0.16%)</title><rect x="673" y="1364" width="2" height="15" fill="rgb(205,173,39)"/><text x="676.00" y="1374.50"></text></g><g><title>_path_split (&lt;frozen importlib._bootstrap_external&gt;:64) (1 samples, 0.16%)</title><rect x="673" y="1380" width="2" height="15" fill="rgb(243,163,30)"/><text x="676.00" y="1390.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:4) (11 samples, 1.76%)</title><rect x="656" y="52" width="21" height="15" fill="rgb(235,171,34)"/><text x="659.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 1.76%)</title><rect x="656" y="68" width="21" height="15" fill="rgb(214,98,40)"/><text x="659.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 1.76%)</title><rect x="656" y="84" width="21" height="15" fill="rgb(225,115,45)"/><text x="659.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 1.76%)</title><rect x="656" y="100" width="21" height="15" fill="rgb(237,83,26)"/><text x="659.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 1.76%)</title><rect x="656" y="116" width="21" height="15" fill="rgb(234,192,3)"/><text x="659.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 1.76%)</title><rect x="656" y="132" width="21" height="15" fill="rgb(212,75,15)"/><text x="659.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:7) (5 samples, 0.80%)</title><rect x="667" y="148" width="10" height="15" fill="rgb(235,223,48)"/><text x="670.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.80%)</title><rect x="667" y="164" width="10" height="15" fill="rgb(216,170,9)"/><text x="670.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.80%)</title><rect x="667" y="180" width="10" height="15" fill="rgb(245,55,2)"/><text x="670.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.80%)</title><rect x="667" y="196" width="10" height="15" fill="rgb(214,166,33)"/><text x="670.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.80%)</title><rect x="667" y="212" width="10" height="15" fill="rgb(208,193,42)"/><text x="670.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.80%)</title><rect x="667" y="228" width="10" height="15" fill="rgb(218,116,38)"/><text x="670.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (3 samples, 0.48%)</title><rect x="671" y="244" width="6" height="15" fill="rgb(211,124,35)"/><text x="674.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.48%)</title><rect x="671" y="260" width="6" height="15" fill="rgb(219,194,10)"/><text x="674.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.48%)</title><rect x="671" y="276" width="6" height="15" fill="rgb(211,155,36)"/><text x="674.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.48%)</title><rect x="671" y="292" width="6" height="15" fill="rgb(244,55,37)"/><text x="674.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.48%)</title><rect x="671" y="308" width="6" height="15" fill="rgb(219,123,25)"/><text x="674.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.48%)</title><rect x="671" y="324" width="6" height="15" fill="rgb(244,74,25)"/><text x="674.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (2 samples, 0.32%)</title><rect x="673" y="340" width="4" height="15" fill="rgb(236,120,29)"/><text x="676.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="673" y="356" width="4" height="15" fill="rgb(250,44,32)"/><text x="676.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="673" y="372" width="4" height="15" fill="rgb(225,161,38)"/><text x="676.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="673" y="388" width="4" height="15" fill="rgb(212,118,29)"/><text x="676.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="673" y="404" width="4" height="15" fill="rgb(216,140,42)"/><text x="676.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="673" y="420" width="4" height="15" fill="rgb(219,172,34)"/><text x="676.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (2 samples, 0.32%)</title><rect x="673" y="436" width="4" height="15" fill="rgb(236,87,31)"/><text x="676.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="673" y="452" width="4" height="15" fill="rgb(225,115,16)"/><text x="676.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.32%)</title><rect x="673" y="468" width="4" height="15" fill="rgb(224,147,1)"/><text x="676.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="673" y="484" width="4" height="15" fill="rgb(209,140,13)"/><text x="676.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="673" y="500" width="4" height="15" fill="rgb(215,35,29)"/><text x="676.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="673" y="516" width="4" height="15" fill="rgb(240,79,27)"/><text x="676.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="673" y="532" width="4" height="15" fill="rgb(221,227,48)"/><text x="676.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="673" y="548" width="4" height="15" fill="rgb(224,19,42)"/><text x="676.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="673" y="564" width="4" height="15" fill="rgb(248,203,5)"/><text x="676.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (2 samples, 0.32%)</title><rect x="673" y="580" width="4" height="15" fill="rgb(238,83,49)"/><text x="676.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="673" y="596" width="4" height="15" fill="rgb(229,55,39)"/><text x="676.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="673" y="612" width="4" height="15" fill="rgb(220,104,35)"/><text x="676.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="673" y="628" width="4" height="15" fill="rgb(221,29,5)"/><text x="676.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="673" y="644" width="4" height="15" fill="rgb(206,152,54)"/><text x="676.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="673" y="660" width="4" height="15" fill="rgb(254,157,29)"/><text x="676.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (2 samples, 0.32%)</title><rect x="673" y="676" width="4" height="15" fill="rgb(231,225,5)"/><text x="676.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="673" y="692" width="4" height="15" fill="rgb(209,91,45)"/><text x="676.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="673" y="708" width="4" height="15" fill="rgb(216,146,18)"/><text x="676.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="673" y="724" width="4" height="15" fill="rgb(206,175,49)"/><text x="676.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="673" y="740" width="4" height="15" fill="rgb(238,22,14)"/><text x="676.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="673" y="756" width="4" height="15" fill="rgb(228,77,19)"/><text x="676.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (2 samples, 0.32%)</title><rect x="673" y="772" width="4" height="15" fill="rgb(223,0,19)"/><text x="676.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="673" y="788" width="4" height="15" fill="rgb(234,152,45)"/><text x="676.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="673" y="804" width="4" height="15" fill="rgb(223,142,1)"/><text x="676.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="673" y="820" width="4" height="15" fill="rgb(240,166,28)"/><text x="676.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="673" y="836" width="4" height="15" fill="rgb(211,69,40)"/><text x="676.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="673" y="852" width="4" height="15" fill="rgb(227,165,24)"/><text x="676.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (2 samples, 0.32%)</title><rect x="673" y="868" width="4" height="15" fill="rgb(219,9,8)"/><text x="676.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="673" y="884" width="4" height="15" fill="rgb(222,32,36)"/><text x="676.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.32%)</title><rect x="673" y="900" width="4" height="15" fill="rgb(216,60,49)"/><text x="676.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="673" y="916" width="4" height="15" fill="rgb(215,35,14)"/><text x="676.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="673" y="932" width="4" height="15" fill="rgb(231,176,39)"/><text x="676.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="673" y="948" width="4" height="15" fill="rgb(213,213,14)"/><text x="676.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="673" y="964" width="4" height="15" fill="rgb(234,36,12)"/><text x="676.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="673" y="980" width="4" height="15" fill="rgb(215,51,6)"/><text x="676.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="673" y="996" width="4" height="15" fill="rgb(236,22,51)"/><text x="676.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (2 samples, 0.32%)</title><rect x="673" y="1012" width="4" height="15" fill="rgb(227,223,41)"/><text x="676.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.32%)</title><rect x="673" y="1028" width="4" height="15" fill="rgb(210,164,33)"/><text x="676.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.32%)</title><rect x="673" y="1044" width="4" height="15" fill="rgb(209,197,31)"/><text x="676.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.32%)</title><rect x="673" y="1060" width="4" height="15" fill="rgb(233,55,41)"/><text x="676.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.32%)</title><rect x="673" y="1076" width="4" height="15" fill="rgb(206,206,11)"/><text x="676.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.32%)</title><rect x="673" y="1092" width="4" height="15" fill="rgb(219,124,13)"/><text x="676.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (1 samples, 0.16%)</title><rect x="675" y="1108" width="2" height="15" fill="rgb(220,89,38)"/><text x="678.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.16%)</title><rect x="675" y="1124" width="2" height="15" fill="rgb(249,47,30)"/><text x="678.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="675" y="1140" width="2" height="15" fill="rgb(241,84,8)"/><text x="678.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="675" y="1156" width="2" height="15" fill="rgb(206,180,38)"/><text x="678.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="675" y="1172" width="2" height="15" fill="rgb(211,117,20)"/><text x="678.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="675" y="1188" width="2" height="15" fill="rgb(216,82,33)"/><text x="678.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="675" y="1204" width="2" height="15" fill="rgb(243,106,50)"/><text x="678.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="675" y="1220" width="2" height="15" fill="rgb(254,179,2)"/><text x="678.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (1 samples, 0.16%)</title><rect x="675" y="1236" width="2" height="15" fill="rgb(250,221,47)"/><text x="678.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.16%)</title><rect x="675" y="1252" width="2" height="15" fill="rgb(244,59,0)"/><text x="678.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="675" y="1268" width="2" height="15" fill="rgb(224,83,35)"/><text x="678.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="675" y="1284" width="2" height="15" fill="rgb(244,112,15)"/><text x="678.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="675" y="1300" width="2" height="15" fill="rgb(251,207,53)"/><text x="678.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="675" y="1316" width="2" height="15" fill="rgb(232,58,52)"/><text x="678.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="675" y="1332" width="2" height="15" fill="rgb(246,202,21)"/><text x="678.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="675" y="1348" width="2" height="15" fill="rgb(216,67,15)"/><text x="678.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (1 samples, 0.16%)</title><rect x="675" y="1364" width="2" height="15" fill="rgb(238,117,50)"/><text x="678.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="675" y="1380" width="2" height="15" fill="rgb(253,67,54)"/><text x="678.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="675" y="1396" width="2" height="15" fill="rgb(247,196,50)"/><text x="678.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="675" y="1412" width="2" height="15" fill="rgb(225,202,16)"/><text x="678.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="675" y="1428" width="2" height="15" fill="rgb(210,204,41)"/><text x="678.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="675" y="1444" width="2" height="15" fill="rgb(209,152,22)"/><text x="678.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py:159) (1 samples, 0.16%)</title><rect x="675" y="1460" width="2" height="15" fill="rgb(239,114,19)"/><text x="678.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py:153) (1 samples, 0.16%)</title><rect x="675" y="1476" width="2" height="15" fill="rgb(253,156,21)"/><text x="678.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py:118) (1 samples, 0.16%)</title><rect x="675" y="1492" width="2" height="15" fill="rgb(205,102,42)"/><text x="678.00" y="1502.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py:235) (1 samples, 0.16%)</title><rect x="675" y="1508" width="2" height="15" fill="rgb(226,26,13)"/><text x="678.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py:76) (1 samples, 0.16%)</title><rect x="675" y="1524" width="2" height="15" fill="rgb(251,17,27)"/><text x="678.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py:1005) (1 samples, 0.16%)</title><rect x="675" y="1540" width="2" height="15" fill="rgb(240,63,40)"/><text x="678.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.16%)</title><rect x="675" y="1556" width="2" height="15" fill="rgb(219,81,15)"/><text x="678.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;:75) (1 samples, 0.16%)</title><rect x="675" y="1572" width="2" height="15" fill="rgb(239,172,51)"/><text x="678.00" y="1582.50"></text></g><g><title>getattr (jinja2/environment.py:430) (1 samples, 0.16%)</title><rect x="675" y="1588" width="2" height="15" fill="rgb(239,14,14)"/><text x="678.00" y="1598.50"></text></g><g><title>_Attribute_default_value (onnx/defs/__init__.py:40) (1 samples, 0.16%)</title><rect x="675" y="1604" width="2" height="15" fill="rgb(241,106,4)"/><text x="678.00" y="1614.50"></text></g><g><title>0x7f68339430e9 (?) (1 samples, 0.16%)</title><rect x="675" y="1620" width="2" height="15" fill="rgb(221,65,2)"/><text x="678.00" y="1630.50"></text></g><g><title>0x7f6833926aeb (?) (1 samples, 0.16%)</title><rect x="675" y="1636" width="2" height="15" fill="rgb(245,137,6)"/><text x="678.00" y="1646.50"></text></g><g><title>0x7f683357c985 (?) (1 samples, 0.16%)</title><rect x="675" y="1652" width="2" height="15" fill="rgb(228,68,36)"/><text x="678.00" y="1662.50"></text></g><g><title>0x7f683357c82c (?) (1 samples, 0.16%)</title><rect x="675" y="1668" width="2" height="15" fill="rgb(228,136,26)"/><text x="678.00" y="1678.50"></text></g><g><title>0x7f6833a78fbf (?) (1 samples, 0.16%)</title><rect x="675" y="1684" width="2" height="15" fill="rgb(249,83,49)"/><text x="678.00" y="1694.50"></text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:28) (1 samples, 0.16%)</title><rect x="677" y="84" width="2" height="15" fill="rgb(221,218,34)"/><text x="680.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (1 samples, 0.16%)</title><rect x="677" y="100" width="2" height="15" fill="rgb(216,201,36)"/><text x="680.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:230) (1 samples, 0.16%)</title><rect x="677" y="116" width="2" height="15" fill="rgb(225,69,54)"/><text x="680.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py:114) (1 samples, 0.16%)</title><rect x="677" y="132" width="2" height="15" fill="rgb(238,30,36)"/><text x="680.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py:62) (1 samples, 0.16%)</title><rect x="677" y="148" width="2" height="15" fill="rgb(233,8,34)"/><text x="680.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py:115) (1 samples, 0.16%)</title><rect x="677" y="164" width="2" height="15" fill="rgb(223,9,50)"/><text x="680.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py:101) (1 samples, 0.16%)</title><rect x="677" y="180" width="2" height="15" fill="rgb(237,111,6)"/><text x="680.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py:28) (1 samples, 0.16%)</title><rect x="677" y="196" width="2" height="15" fill="rgb(220,180,5)"/><text x="680.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="677" y="212" width="2" height="15" fill="rgb(206,208,38)"/><text x="680.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="677" y="228" width="2" height="15" fill="rgb(233,15,34)"/><text x="680.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="677" y="244" width="2" height="15" fill="rgb(227,177,36)"/><text x="680.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="677" y="260" width="2" height="15" fill="rgb(254,29,13)"/><text x="680.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="677" y="276" width="2" height="15" fill="rgb(206,164,42)"/><text x="680.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py:7) (1 samples, 0.16%)</title><rect x="677" y="292" width="2" height="15" fill="rgb(246,159,41)"/><text x="680.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.16%)</title><rect x="677" y="308" width="2" height="15" fill="rgb(224,163,47)"/><text x="680.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.16%)</title><rect x="677" y="324" width="2" height="15" fill="rgb(246,139,26)"/><text x="680.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.16%)</title><rect x="677" y="340" width="2" height="15" fill="rgb(252,72,7)"/><text x="680.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.16%)</title><rect x="677" y="356" width="2" height="15" fill="rgb(207,5,47)"/><text x="680.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.16%)</title><rect x="677" y="372" width="2" height="15" fill="rgb(253,135,35)"/><text x="680.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py:88) (1 samples, 0.16%)</title><rect x="677" y="388" width="2" height="15" fill="rgb(245,107,10)"/><text x="680.00" y="398.50"></text></g><g><title>get_rst_doc (mlprodict/onnxrt/doc/doc_helper.py:268) (1 samples, 0.16%)</title><rect x="677" y="404" width="2" height="15" fill="rgb(226,60,11)"/><text x="680.00" y="414.50"></text></g><g><title>render (jinja2/asyncsupport.py:76) (1 samples, 0.16%)</title><rect x="677" y="420" width="2" height="15" fill="rgb(253,47,22)"/><text x="680.00" y="430.50"></text></g><g><title>render (jinja2/environment.py:1005) (1 samples, 0.16%)</title><rect x="677" y="436" width="2" height="15" fill="rgb(230,7,51)"/><text x="680.00" y="446.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.16%)</title><rect x="677" y="452" width="2" height="15" fill="rgb(236,105,39)"/><text x="680.00" y="462.50"></text></g><g><title>root (&lt;template&gt;:71) (1 samples, 0.16%)</title><rect x="677" y="468" width="2" height="15" fill="rgb(245,182,15)"/><text x="680.00" y="478.50"></text></g><g><title>getattr (jinja2/environment.py:430) (1 samples, 0.16%)</title><rect x="677" y="484" width="2" height="15" fill="rgb(252,137,22)"/><text x="680.00" y="494.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="677" y="500" width="2" height="15" fill="rgb(231,78,15)"/><text x="680.00" y="510.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (1 samples, 0.16%)</title><rect x="679" y="164" width="2" height="15" fill="rgb(230,107,28)"/><text x="682.00" y="174.50"></text></g><g><title>0x7f6804525422 (?) (1 samples, 0.16%)</title><rect x="681" y="244" width="1" height="15" fill="rgb(251,107,7)"/><text x="684.00" y="254.50"></text></g><g><title>0x7f680452b89e (?) (1 samples, 0.16%)</title><rect x="681" y="260" width="1" height="15" fill="rgb(249,62,18)"/><text x="684.00" y="270.50"></text></g><g><title>0x7f680452b74f (?) (1 samples, 0.16%)</title><rect x="681" y="276" width="1" height="15" fill="rgb(247,15,34)"/><text x="684.00" y="286.50"></text></g><g><title>0x7f6804531a3a (?) (1 samples, 0.16%)</title><rect x="681" y="292" width="1" height="15" fill="rgb(207,220,1)"/><text x="684.00" y="302.50"></text></g><g><title>0x7f680d843cff (?) (1 samples, 0.16%)</title><rect x="681" y="308" width="1" height="15" fill="rgb(239,190,39)"/><text x="684.00" y="318.50"></text></g><g><title>0x7f680452c78c (?) (1 samples, 0.16%)</title><rect x="681" y="324" width="1" height="15" fill="rgb(216,51,21)"/><text x="684.00" y="334.50"></text></g><g><title>0x7f6804518d82 (?) (1 samples, 0.16%)</title><rect x="681" y="340" width="1" height="15" fill="rgb(247,169,53)"/><text x="684.00" y="350.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:525) (2 samples, 0.32%)</title><rect x="682" y="484" width="4" height="15" fill="rgb(231,128,1)"/><text x="685.00" y="494.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1669) (4 samples, 0.64%)</title><rect x="686" y="532" width="8" height="15" fill="rgb(227,63,27)"/><text x="689.00" y="542.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h:2334) (13 samples, 2.08%)</title><rect x="686" y="516" width="25" height="15" fill="rgb(228,94,29)"/><text x="689.00" y="526.50">s..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1670) (9 samples, 1.44%)</title><rect x="694" y="532" width="17" height="15" fill="rgb(207,34,29)"/><text x="697.00" y="542.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:605) (14 samples, 2.24%)</title><rect x="686" y="484" width="27" height="15" fill="rgb(226,18,34)"/><text x="689.00" y="494.50">R..</text></g><g><title>std::map&lt;long, long, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_map.h:1105) (14 samples, 2.24%)</title><rect x="686" y="500" width="27" height="15" fill="rgb(218,121,33)"/><text x="689.00" y="510.50">s..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h:2337) (1 samples, 0.16%)</title><rect x="711" y="516" width="2" height="15" fill="rgb(249,195,11)"/><text x="714.00" y="526.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:18) (19 samples, 3.04%)</title><rect x="679" y="100" width="35" height="15" fill="rgb(232,70,51)"/><text x="682.00" y="110.50">pr..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (19 samples, 3.04%)</title><rect x="679" y="116" width="35" height="15" fill="rgb(237,78,10)"/><text x="682.00" y="126.50">ti..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (19 samples, 3.04%)</title><rect x="679" y="132" width="35" height="15" fill="rgb(229,17,28)"/><text x="682.00" y="142.50">&lt;l..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (19 samples, 3.04%)</title><rect x="679" y="148" width="35" height="15" fill="rgb(225,45,34)"/><text x="682.00" y="158.50">ru..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (18 samples, 2.88%)</title><rect x="681" y="164" width="33" height="15" fill="rgb(247,15,15)"/><text x="684.00" y="174.50">_r..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (18 samples, 2.88%)</title><rect x="681" y="180" width="33" height="15" fill="rgb(217,144,15)"/><text x="684.00" y="190.50">ru..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:381) (18 samples, 2.88%)</title><rect x="681" y="196" width="33" height="15" fill="rgb(207,119,28)"/><text x="684.00" y="206.50">ru..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (18 samples, 2.88%)</title><rect x="681" y="212" width="33" height="15" fill="rgb(249,1,24)"/><text x="684.00" y="222.50">ru..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py:59) (18 samples, 2.88%)</title><rect x="681" y="228" width="33" height="15" fill="rgb(219,227,36)"/><text x="684.00" y="238.50">_r..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (17 samples, 2.72%)</title><rect x="682" y="244" width="32" height="15" fill="rgb(236,171,22)"/><text x="685.00" y="254.50">py..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (17 samples, 2.72%)</title><rect x="682" y="260" width="32" height="15" fill="rgb(254,164,40)"/><text x="685.00" y="270.50">vo..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (17 samples, 2.72%)</title><rect x="682" y="276" width="32" height="15" fill="rgb(227,46,44)"/><text x="685.00" y="286.50">vo..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (17 samples, 2.72%)</title><rect x="682" y="292" width="32" height="15" fill="rgb(253,167,5)"/><text x="685.00" y="302.50">py..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (17 samples, 2.72%)</title><rect x="682" y="308" width="32" height="15" fill="rgb(245,206,10)"/><text x="685.00" y="318.50">py..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (17 samples, 2.72%)</title><rect x="682" y="324" width="32" height="15" fill="rgb(231,30,42)"/><text x="685.00" y="334.50">py..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (17 samples, 2.72%)</title><rect x="682" y="340" width="32" height="15" fill="rgb(248,106,13)"/><text x="685.00" y="350.50">py..</text></g><g><title>pybind11::array::~array (numpy.h:538) (17 samples, 2.72%)</title><rect x="682" y="356" width="32" height="15" fill="rgb(254,212,43)"/><text x="685.00" y="366.50">py..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (17 samples, 2.72%)</title><rect x="682" y="372" width="32" height="15" fill="rgb(251,215,48)"/><text x="685.00" y="382.50">py..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (17 samples, 2.72%)</title><rect x="682" y="388" width="32" height="15" fill="rgb(206,197,38)"/><text x="685.00" y="398.50">py..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (17 samples, 2.72%)</title><rect x="682" y="404" width="32" height="15" fill="rgb(223,153,17)"/><text x="685.00" y="414.50">py..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:392) (17 samples, 2.72%)</title><rect x="682" y="420" width="32" height="15" fill="rgb(249,54,21)"/><text x="685.00" y="430.50">Ru..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h:1983) (17 samples, 2.72%)</title><rect x="682" y="436" width="32" height="15" fill="rgb(229,20,20)"/><text x="685.00" y="446.50">py..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (17 samples, 2.72%)</title><rect x="682" y="452" width="32" height="15" fill="rgb(235,121,4)"/><text x="685.00" y="462.50">GO..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:427) (17 samples, 2.72%)</title><rect x="682" y="468" width="32" height="15" fill="rgb(230,172,43)"/><text x="685.00" y="478.50">Ru..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:644) (1 samples, 0.16%)</title><rect x="713" y="484" width="1" height="15" fill="rgb(220,198,40)"/><text x="716.00" y="494.50"></text></g><g><title>std::isnan (cmath:642) (2 samples, 0.32%)</title><rect x="733" y="500" width="4" height="15" fill="rgb(225,46,29)"/><text x="736.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:525) (13 samples, 2.08%)</title><rect x="714" y="484" width="25" height="15" fill="rgb(216,156,34)"/><text x="717.00" y="494.50">R..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::operator[] (stl_vector.h:796) (1 samples, 0.16%)</title><rect x="737" y="500" width="2" height="15" fill="rgb(220,148,35)"/><text x="740.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:604) (1 samples, 0.16%)</title><rect x="739" y="484" width="2" height="15" fill="rgb(223,116,54)"/><text x="742.00" y="494.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_end (stl_tree.h:681) (1 samples, 0.16%)</title><rect x="741" y="532" width="2" height="15" fill="rgb(205,63,0)"/><text x="744.00" y="542.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1669) (4 samples, 0.64%)</title><rect x="743" y="532" width="7" height="15" fill="rgb(217,192,9)"/><text x="746.00" y="542.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1670) (15 samples, 2.40%)</title><rect x="750" y="532" width="29" height="15" fill="rgb(232,136,34)"/><text x="753.00" y="542.50">st..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:605) (21 samples, 3.35%)</title><rect x="741" y="484" width="39" height="15" fill="rgb(235,205,0)"/><text x="744.00" y="494.50">Run..</text></g><g><title>std::map&lt;long, long, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_map.h:1105) (21 samples, 3.35%)</title><rect x="741" y="500" width="39" height="15" fill="rgb(247,2,40)"/><text x="744.00" y="510.50">std..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h:2334) (21 samples, 3.35%)</title><rect x="741" y="516" width="39" height="15" fill="rgb(254,4,26)"/><text x="744.00" y="526.50">std..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1671) (1 samples, 0.16%)</title><rect x="779" y="532" width="1" height="15" fill="rgb(212,174,49)"/><text x="782.00" y="542.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:609) (1 samples, 0.16%)</title><rect x="780" y="484" width="2" height="15" fill="rgb(229,193,34)"/><text x="783.00" y="494.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:611) (1 samples, 0.16%)</title><rect x="782" y="484" width="2" height="15" fill="rgb(210,69,12)"/><text x="785.00" y="494.50"></text></g><g><title>std::vector&lt;std::tuple&lt;long, long, long, float&gt;, std::allocator&lt;std::tuple&lt;long, long, long, float&gt; &gt; &gt;::operator[] (stl_vector.h:796) (1 samples, 0.16%)</title><rect x="782" y="500" width="2" height="15" fill="rgb(216,97,33)"/><text x="785.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:615) (4 samples, 0.64%)</title><rect x="784" y="484" width="8" height="15" fill="rgb(231,206,0)"/><text x="787.00" y="494.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (stl_bvector.h:856) (1 samples, 0.16%)</title><rect x="794" y="500" width="2" height="15" fill="rgb(233,175,39)"/><text x="797.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:618) (5 samples, 0.80%)</title><rect x="792" y="484" width="9" height="15" fill="rgb(206,165,11)"/><text x="795.00" y="494.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (stl_bvector.h:857) (3 samples, 0.48%)</title><rect x="796" y="500" width="5" height="15" fill="rgb(253,10,8)"/><text x="799.00" y="510.50"></text></g><g><title>std::_Bit_iterator::operator* (stl_bvector.h:231) (2 samples, 0.32%)</title><rect x="797" y="516" width="4" height="15" fill="rgb(247,184,26)"/><text x="800.00" y="526.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:619) (1 samples, 0.16%)</title><rect x="801" y="484" width="2" height="15" fill="rgb(212,78,31)"/><text x="804.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::operator[] (stl_vector.h:781) (1 samples, 0.16%)</title><rect x="801" y="500" width="2" height="15" fill="rgb(244,146,27)"/><text x="804.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:622) (1 samples, 0.16%)</title><rect x="803" y="484" width="2" height="15" fill="rgb(208,18,34)"/><text x="806.00" y="494.50"></text></g><g><title>std::_Bit_reference::operator= (stl_bvector.h:87) (1 samples, 0.16%)</title><rect x="803" y="500" width="2" height="15" fill="rgb(210,92,45)"/><text x="806.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:626) (1 samples, 0.16%)</title><rect x="805" y="484" width="2" height="15" fill="rgb(252,59,42)"/><text x="808.00" y="494.50"></text></g><g><title>std::vector&lt;std::tuple&lt;long, long, long, float&gt;, std::allocator&lt;std::tuple&lt;long, long, long, float&gt; &gt; &gt;::size (stl_vector.h:656) (1 samples, 0.16%)</title><rect x="805" y="500" width="2" height="15" fill="rgb(249,171,2)"/><text x="808.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:629) (1 samples, 0.16%)</title><rect x="807" y="484" width="2" height="15" fill="rgb(233,151,35)"/><text x="810.00" y="494.50"></text></g><g><title>std::vector&lt;std::tuple&lt;long, long, long, float&gt;, std::allocator&lt;std::tuple&lt;long, long, long, float&gt; &gt; &gt;::operator[] (stl_vector.h:796) (1 samples, 0.16%)</title><rect x="807" y="500" width="2" height="15" fill="rgb(209,195,5)"/><text x="810.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:427) (51 samples, 8.15%)</title><rect x="714" y="468" width="97" height="15" fill="rgb(226,196,49)"/><text x="717.00" y="478.50">RuntimeTree..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:644) (1 samples, 0.16%)</title><rect x="809" y="484" width="2" height="15" fill="rgb(208,152,10)"/><text x="812.00" y="494.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:45) (72 samples, 11.50%)</title><rect x="677" y="52" width="136" height="15" fill="rgb(209,167,4)"/><text x="680.00" y="62.50">&lt;module&gt; (bench_R..</text></g><g><title>profile_pyrt (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:44) (72 samples, 11.50%)</title><rect x="677" y="68" width="136" height="15" fill="rgb(206,41,4)"/><text x="680.00" y="78.50">profile_pyrt (ben..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:29) (71 samples, 11.34%)</title><rect x="679" y="84" width="134" height="15" fill="rgb(248,53,42)"/><text x="682.00" y="94.50">setup_profile (b..</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:23) (52 samples, 8.31%)</title><rect x="714" y="100" width="99" height="15" fill="rgb(230,141,49)"/><text x="717.00" y="110.50">profile (be..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (52 samples, 8.31%)</title><rect x="714" y="116" width="99" height="15" fill="rgb(228,191,26)"/><text x="717.00" y="126.50">time_predic..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (52 samples, 8.31%)</title><rect x="714" y="132" width="99" height="15" fill="rgb(205,191,47)"/><text x="717.00" y="142.50">&lt;lambda&gt; (m..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (52 samples, 8.31%)</title><rect x="714" y="148" width="99" height="15" fill="rgb(241,181,0)"/><text x="717.00" y="158.50">run (mlprod..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (52 samples, 8.31%)</title><rect x="714" y="164" width="99" height="15" fill="rgb(207,134,40)"/><text x="717.00" y="174.50">_run_sequen..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (52 samples, 8.31%)</title><rect x="714" y="180" width="99" height="15" fill="rgb(242,139,27)"/><text x="717.00" y="190.50">run (mlprod..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:381) (52 samples, 8.31%)</title><rect x="714" y="196" width="99" height="15" fill="rgb(207,101,31)"/><text x="717.00" y="206.50">run (mlprod..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (52 samples, 8.31%)</title><rect x="714" y="212" width="99" height="15" fill="rgb(240,8,15)"/><text x="717.00" y="222.50">run (mlprod..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py:59) (52 samples, 8.31%)</title><rect x="714" y="228" width="99" height="15" fill="rgb(214,109,12)"/><text x="717.00" y="238.50">_run (mlpro..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (52 samples, 8.31%)</title><rect x="714" y="244" width="99" height="15" fill="rgb(241,38,8)"/><text x="717.00" y="254.50">pybind11::c..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (52 samples, 8.31%)</title><rect x="714" y="260" width="99" height="15" fill="rgb(248,43,12)"/><text x="717.00" y="270.50">void pybind..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (52 samples, 8.31%)</title><rect x="714" y="276" width="99" height="15" fill="rgb(226,44,33)"/><text x="717.00" y="286.50">void pybind..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (52 samples, 8.31%)</title><rect x="714" y="292" width="99" height="15" fill="rgb(216,66,18)"/><text x="717.00" y="302.50">pybind11::d..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (52 samples, 8.31%)</title><rect x="714" y="308" width="99" height="15" fill="rgb(221,123,3)"/><text x="717.00" y="318.50">pybind11::d..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (52 samples, 8.31%)</title><rect x="714" y="324" width="99" height="15" fill="rgb(219,184,11)"/><text x="717.00" y="334.50">pybind11::c..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (52 samples, 8.31%)</title><rect x="714" y="340" width="99" height="15" fill="rgb(249,10,15)"/><text x="717.00" y="350.50">pybind11::a..</text></g><g><title>pybind11::array::~array (numpy.h:538) (52 samples, 8.31%)</title><rect x="714" y="356" width="99" height="15" fill="rgb(207,83,2)"/><text x="717.00" y="366.50">pybind11::a..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (52 samples, 8.31%)</title><rect x="714" y="372" width="99" height="15" fill="rgb(251,93,14)"/><text x="717.00" y="382.50">pybind11::b..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (52 samples, 8.31%)</title><rect x="714" y="388" width="99" height="15" fill="rgb(230,189,51)"/><text x="717.00" y="398.50">pybind11::o..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (52 samples, 8.31%)</title><rect x="714" y="404" width="99" height="15" fill="rgb(242,28,29)"/><text x="717.00" y="414.50">pybind11::h..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:392) (52 samples, 8.31%)</title><rect x="714" y="420" width="99" height="15" fill="rgb(243,64,52)"/><text x="717.00" y="430.50">RuntimeTree..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h:1983) (52 samples, 8.31%)</title><rect x="714" y="436" width="99" height="15" fill="rgb(245,1,39)"/><text x="717.00" y="446.50">pybind11::g..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (52 samples, 8.31%)</title><rect x="714" y="452" width="99" height="15" fill="rgb(207,208,30)"/><text x="717.00" y="462.50">GOMP_parall..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:428) (1 samples, 0.16%)</title><rect x="811" y="468" width="2" height="15" fill="rgb(215,47,27)"/><text x="814.00" y="478.50"></text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:28) (1 samples, 0.16%)</title><rect x="813" y="84" width="1" height="15" fill="rgb(212,204,10)"/><text x="816.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (1 samples, 0.16%)</title><rect x="813" y="100" width="1" height="15" fill="rgb(247,57,32)"/><text x="816.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:222) (1 samples, 0.16%)</title><rect x="813" y="116" width="1" height="15" fill="rgb(254,29,25)"/><text x="816.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py:110) (1 samples, 0.16%)</title><rect x="813" y="132" width="1" height="15" fill="rgb(224,205,11)"/><text x="816.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py:346) (1 samples, 0.16%)</title><rect x="813" y="148" width="1" height="15" fill="rgb(245,216,29)"/><text x="816.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py:139) (1 samples, 0.16%)</title><rect x="813" y="164" width="1" height="15" fill="rgb(250,128,51)"/><text x="816.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py:973) (1 samples, 0.16%)</title><rect x="813" y="180" width="1" height="15" fill="rgb(252,19,39)"/><text x="816.00" y="190.50"></text></g><g><title>convert_sklearn_random_forest_classifier (skl2onnx/operator_converters/random_forest.py:65) (1 samples, 0.16%)</title><rect x="813" y="196" width="1" height="15" fill="rgb(245,99,53)"/><text x="816.00" y="206.50"></text></g><g><title>add_node (skl2onnx/common/_container.py:448) (1 samples, 0.16%)</title><rect x="813" y="212" width="1" height="15" fill="rgb(212,212,2)"/><text x="816.00" y="222.50"></text></g><g><title>make_node (skl2onnx/proto/onnx_helper_modified.py:70) (1 samples, 0.16%)</title><rect x="813" y="228" width="1" height="15" fill="rgb(242,185,44)"/><text x="816.00" y="238.50"></text></g><g><title>google::protobuf::python::repeated_composite_container::Extend (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="813" y="244" width="1" height="15" fill="rgb(225,213,39)"/><text x="816.00" y="254.50"></text></g><g><title>&lt;genexpr&gt; (skl2onnx/proto/onnx_helper_modified.py:70) (1 samples, 0.16%)</title><rect x="813" y="260" width="1" height="15" fill="rgb(245,136,0)"/><text x="816.00" y="270.50"></text></g><g><title>make_attribute (skl2onnx/proto/onnx_helper_modified.py:136) (1 samples, 0.16%)</title><rect x="813" y="276" width="1" height="15" fill="rgb(234,126,8)"/><text x="816.00" y="286.50"></text></g><g><title>&lt;listcomp&gt; (skl2onnx/proto/onnx_helper_modified.py:136) (1 samples, 0.16%)</title><rect x="813" y="292" width="1" height="15" fill="rgb(250,81,43)"/><text x="816.00" y="302.50"></text></g><g><title>_to_bytes_or_false (onnx/helper.py:204) (1 samples, 0.16%)</title><rect x="813" y="308" width="1" height="15" fill="rgb(226,131,29)"/><text x="816.00" y="318.50"></text></g><g><title>run (onnxruntime/capi/session.py:134) (1 samples, 0.16%)</title><rect x="814" y="196" width="2" height="15" fill="rgb(233,117,6)"/><text x="817.00" y="206.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py:134) (1 samples, 0.16%)</title><rect x="814" y="212" width="2" height="15" fill="rgb(213,165,45)"/><text x="817.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="814" y="228" width="2" height="15" fill="rgb(217,207,6)"/><text x="817.00" y="238.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.16%)</title><rect x="814" y="244" width="2" height="15" fill="rgb(247,205,44)"/><text x="817.00" y="254.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="814" y="260" width="2" height="15" fill="rgb(220,1,39)"/><text x="817.00" y="270.50"></text></g><g><title>0x7f67ff603ff9 (?) (1 samples, 0.16%)</title><rect x="816" y="212" width="2" height="15" fill="rgb(244,1,39)"/><text x="819.00" y="222.50"></text></g><g><title>0x7f67ff5feef6 (?) (1 samples, 0.16%)</title><rect x="816" y="228" width="2" height="15" fill="rgb(220,42,50)"/><text x="819.00" y="238.50"></text></g><g><title>0x7f67ff5f3962 (?) (1 samples, 0.16%)</title><rect x="816" y="244" width="2" height="15" fill="rgb(220,133,10)"/><text x="819.00" y="254.50"></text></g><g><title>0x7f67ff6277a7 (?) (1 samples, 0.16%)</title><rect x="816" y="260" width="2" height="15" fill="rgb(251,76,0)"/><text x="819.00" y="270.50"></text></g><g><title>0x7f67ff627379 (?) (1 samples, 0.16%)</title><rect x="816" y="276" width="2" height="15" fill="rgb(250,1,41)"/><text x="819.00" y="286.50"></text></g><g><title>0x7f67ffa858b8 (?) (1 samples, 0.16%)</title><rect x="816" y="292" width="2" height="15" fill="rgb(237,39,52)"/><text x="819.00" y="302.50"></text></g><g><title>0x7f67ffa83c7f (?) (1 samples, 0.16%)</title><rect x="816" y="308" width="2" height="15" fill="rgb(210,130,8)"/><text x="819.00" y="318.50"></text></g><g><title>0x7f67ffa9699c (?) (1 samples, 0.16%)</title><rect x="816" y="324" width="2" height="15" fill="rgb(209,15,36)"/><text x="819.00" y="334.50"></text></g><g><title>0x7f67ff7b419e (?) (1 samples, 0.16%)</title><rect x="816" y="340" width="2" height="15" fill="rgb(228,188,42)"/><text x="819.00" y="350.50"></text></g><g><title>0x7f67ff7b0ed7 (?) (1 samples, 0.16%)</title><rect x="816" y="356" width="2" height="15" fill="rgb(240,64,5)"/><text x="819.00" y="366.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (83 samples, 13.26%)</title><rect x="818" y="340" width="157" height="15" fill="rgb(244,65,46)"/><text x="821.00" y="350.50">onnxruntime::ml::Tre..</text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (83 samples, 13.26%)</title><rect x="818" y="356" width="157" height="15" fill="rgb(228,174,15)"/><text x="821.00" y="366.50">onnxruntime::ml::Tre..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (84 samples, 13.42%)</title><rect x="818" y="260" width="158" height="15" fill="rgb(240,92,33)"/><text x="821.00" y="270.50">onnxruntime::Inferen..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (84 samples, 13.42%)</title><rect x="818" y="276" width="158" height="15" fill="rgb(207,119,1)"/><text x="821.00" y="286.50">onnxruntime::Inferen..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (84 samples, 13.42%)</title><rect x="818" y="292" width="158" height="15" fill="rgb(228,52,1)"/><text x="821.00" y="302.50">onnxruntime::utils::..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (84 samples, 13.42%)</title><rect x="818" y="308" width="158" height="15" fill="rgb(248,188,38)"/><text x="821.00" y="318.50">onnxruntime::utils::..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (84 samples, 13.42%)</title><rect x="818" y="324" width="158" height="15" fill="rgb(221,93,50)"/><text x="821.00" y="334.50">onnxruntime::Sequent..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="975" y="340" width="1" height="15" fill="rgb(238,133,22)"/><text x="978.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.16%)</title><rect x="975" y="356" width="1" height="15" fill="rgb(210,125,50)"/><text x="978.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="975" y="372" width="1" height="15" fill="rgb(253,137,29)"/><text x="978.00" y="382.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:18) (87 samples, 13.90%)</title><rect x="814" y="100" width="164" height="15" fill="rgb(214,30,7)"/><text x="817.00" y="110.50">profile (bench_Random..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (87 samples, 13.90%)</title><rect x="814" y="116" width="164" height="15" fill="rgb(253,143,8)"/><text x="817.00" y="126.50">time_predict (mlprodi..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (87 samples, 13.90%)</title><rect x="814" y="132" width="164" height="15" fill="rgb(231,20,38)"/><text x="817.00" y="142.50">&lt;lambda&gt; (mlprodict/a..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (87 samples, 13.90%)</title><rect x="814" y="148" width="164" height="15" fill="rgb(244,6,38)"/><text x="817.00" y="158.50">run (mlprodict/onnxrt..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (87 samples, 13.90%)</title><rect x="814" y="164" width="164" height="15" fill="rgb(253,38,26)"/><text x="817.00" y="174.50">_run_whole_runtime (m..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (87 samples, 13.90%)</title><rect x="814" y="180" width="164" height="15" fill="rgb(244,154,48)"/><text x="817.00" y="190.50">run (mlprodict/onnxrt..</text></g><g><title>run (onnxruntime/capi/session.py:136) (86 samples, 13.74%)</title><rect x="816" y="196" width="162" height="15" fill="rgb(218,110,30)"/><text x="819.00" y="206.50">run (onnxruntime/cap..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (85 samples, 13.58%)</title><rect x="818" y="212" width="160" height="15" fill="rgb(235,108,26)"/><text x="821.00" y="222.50">pybind11::cpp_functi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (85 samples, 13.58%)</title><rect x="818" y="228" width="160" height="15" fill="rgb(248,161,47)"/><text x="821.00" y="238.50">void pybind11::cpp_f..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (85 samples, 13.58%)</title><rect x="818" y="244" width="160" height="15" fill="rgb(220,173,26)"/><text x="821.00" y="254.50">onnxruntime::python:..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="976" y="260" width="2" height="15" fill="rgb(231,5,34)"/><text x="979.00" y="270.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (104 samples, 16.61%)</title><rect x="984" y="356" width="196" height="15" fill="rgb(236,222,43)"/><text x="987.00" y="366.50">onnxruntime::ml::TreeEnse..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (108 samples, 17.25%)</title><rect x="978" y="260" width="204" height="15" fill="rgb(243,82,12)"/><text x="981.00" y="270.50">onnxruntime::InferenceSess..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (108 samples, 17.25%)</title><rect x="978" y="276" width="204" height="15" fill="rgb(242,63,5)"/><text x="981.00" y="286.50">onnxruntime::InferenceSess..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (108 samples, 17.25%)</title><rect x="978" y="292" width="204" height="15" fill="rgb(222,75,48)"/><text x="981.00" y="302.50">onnxruntime::utils::Execut..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (108 samples, 17.25%)</title><rect x="978" y="308" width="204" height="15" fill="rgb(240,119,54)"/><text x="981.00" y="318.50">onnxruntime::utils::Execut..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (108 samples, 17.25%)</title><rect x="978" y="324" width="204" height="15" fill="rgb(224,122,25)"/><text x="981.00" y="334.50">onnxruntime::SequentialExe..</text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (108 samples, 17.25%)</title><rect x="978" y="340" width="204" height="15" fill="rgb(229,46,41)"/><text x="981.00" y="350.50">onnxruntime::ml::TreeEnsem..</text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="1180" y="356" width="2" height="15" fill="rgb(242,147,7)"/><text x="1183.00" y="366.50"></text></g><g><title>0x7f67ff5ca850 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="1180" y="372" width="2" height="15" fill="rgb(246,67,42)"/><text x="1183.00" y="382.50"></text></g><g><title>all (626 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(223,140,26)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:52) (200 samples, 31.95%)</title><rect x="813" y="52" width="377" height="15" fill="rgb(225,213,10)"/><text x="816.00" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_b_cl..</text></g><g><title>profile_ort (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:51) (200 samples, 31.95%)</title><rect x="813" y="68" width="377" height="15" fill="rgb(205,91,26)"/><text x="816.00" y="78.50">profile_ort (bench_RandomForestClassifier_default_b..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:29) (199 samples, 31.79%)</title><rect x="814" y="84" width="376" height="15" fill="rgb(211,0,25)"/><text x="817.00" y="94.50">setup_profile (bench_RandomForestClassifier_default..</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py:23) (112 samples, 17.89%)</title><rect x="978" y="100" width="212" height="15" fill="rgb(235,147,26)"/><text x="981.00" y="110.50">profile (bench_RandomForest..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (112 samples, 17.89%)</title><rect x="978" y="116" width="212" height="15" fill="rgb(253,61,17)"/><text x="981.00" y="126.50">time_predict (mlprodict/asv..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (112 samples, 17.89%)</title><rect x="978" y="132" width="212" height="15" fill="rgb(238,177,32)"/><text x="981.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_ben..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (112 samples, 17.89%)</title><rect x="978" y="148" width="212" height="15" fill="rgb(207,37,3)"/><text x="981.00" y="158.50">run (mlprodict/onnxrt/onnx_..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (112 samples, 17.89%)</title><rect x="978" y="164" width="212" height="15" fill="rgb(215,74,30)"/><text x="981.00" y="174.50">_run_whole_runtime (mlprodi..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (112 samples, 17.89%)</title><rect x="978" y="180" width="212" height="15" fill="rgb(252,75,39)"/><text x="981.00" y="190.50">run (mlprodict/onnxrt/ops_w..</text></g><g><title>run (onnxruntime/capi/session.py:136) (112 samples, 17.89%)</title><rect x="978" y="196" width="212" height="15" fill="rgb(237,157,15)"/><text x="981.00" y="206.50">run (onnxruntime/capi/sessi..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (112 samples, 17.89%)</title><rect x="978" y="212" width="212" height="15" fill="rgb(241,64,7)"/><text x="981.00" y="222.50">pybind11::cpp_function::dis..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (112 samples, 17.89%)</title><rect x="978" y="228" width="212" height="15" fill="rgb(230,84,26)"/><text x="981.00" y="238.50">void pybind11::cpp_function..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (112 samples, 17.89%)</title><rect x="978" y="244" width="212" height="15" fill="rgb(214,50,7)"/><text x="981.00" y="254.50">onnxruntime::python::addObj..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.64%)</title><rect x="1182" y="260" width="8" height="15" fill="rgb(230,26,42)"/><text x="1185.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.32%)</title><rect x="1186" y="276" width="4" height="15" fill="rgb(210,206,29)"/><text x="1189.00" y="286.50"></text></g></g></svg>