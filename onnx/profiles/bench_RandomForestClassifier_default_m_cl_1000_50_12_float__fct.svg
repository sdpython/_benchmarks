<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1910" onload="init(evt)" viewBox="0 0 1200 1910" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1910" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1893.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1893.00"> </text><g id="frames"><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="10" y="868" width="2" height="15" fill="rgb(234,138,46)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="10" y="884" width="2" height="15" fill="rgb(223,49,12)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="10" y="900" width="2" height="15" fill="rgb(241,39,35)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="10" y="916" width="2" height="15" fill="rgb(213,81,46)"/><text x="13.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="10" y="932" width="2" height="15" fill="rgb(242,194,5)"/><text x="13.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="10" y="948" width="2" height="15" fill="rgb(251,102,20)"/><text x="13.00" y="958.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="12" y="932" width="2" height="15" fill="rgb(225,89,50)"/><text x="15.00" y="942.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="12" y="948" width="2" height="15" fill="rgb(207,142,15)"/><text x="15.00" y="958.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="12" y="964" width="2" height="15" fill="rgb(233,101,8)"/><text x="15.00" y="974.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.18%)</title><rect x="12" y="980" width="2" height="15" fill="rgb(253,132,26)"/><text x="15.00" y="990.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.18%)</title><rect x="12" y="996" width="2" height="15" fill="rgb(247,141,43)"/><text x="15.00" y="1006.50"></text></g><g><title>dist_factory (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="14" y="932" width="2" height="15" fill="rgb(243,185,17)"/><text x="17.00" y="942.50"></text></g><g><title>_build_master (pkg_resources/__init__.py) (3 samples, 0.55%)</title><rect x="12" y="868" width="6" height="15" fill="rgb(242,191,49)"/><text x="15.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (3 samples, 0.55%)</title><rect x="12" y="884" width="6" height="15" fill="rgb(244,144,39)"/><text x="15.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (3 samples, 0.55%)</title><rect x="12" y="900" width="6" height="15" fill="rgb(252,178,27)"/><text x="15.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (3 samples, 0.55%)</title><rect x="12" y="916" width="6" height="15" fill="rgb(245,157,16)"/><text x="15.00" y="926.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="16" y="932" width="2" height="15" fill="rgb(243,51,11)"/><text x="19.00" y="942.50"></text></g><g><title>from_location (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="16" y="948" width="2" height="15" fill="rgb(217,21,26)"/><text x="19.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="16" y="964" width="2" height="15" fill="rgb(241,11,0)"/><text x="19.00" y="974.50"></text></g><g><title>safe_version (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="16" y="980" width="2" height="15" fill="rgb(219,217,11)"/><text x="19.00" y="990.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.18%)</title><rect x="16" y="996" width="2" height="15" fill="rgb(226,227,13)"/><text x="19.00" y="1006.50"></text></g><g><title>_sre_SRE_Pattern_search (python3.7) (1 samples, 0.18%)</title><rect x="16" y="1012" width="2" height="15" fill="rgb(223,38,15)"/><text x="19.00" y="1022.50"></text></g><g><title>sre_search.cold.44 (python3.7) (1 samples, 0.18%)</title><rect x="16" y="1028" width="2" height="15" fill="rgb(235,149,21)"/><text x="19.00" y="1038.50"></text></g><g><title>sre_ucs1_match (python3.7) (1 samples, 0.18%)</title><rect x="16" y="1044" width="2" height="15" fill="rgb(210,65,17)"/><text x="19.00" y="1054.50"></text></g><g><title>add (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="18" y="884" width="2" height="15" fill="rgb(229,82,52)"/><text x="21.00" y="894.50"></text></g><g><title>key (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="18" y="900" width="2" height="15" fill="rgb(246,34,0)"/><text x="21.00" y="910.50"></text></g><g><title>__getattr__ (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="18" y="916" width="2" height="15" fill="rgb(228,8,39)"/><text x="21.00" y="926.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.18%)</title><rect x="18" y="932" width="2" height="15" fill="rgb(218,179,51)"/><text x="21.00" y="942.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (3 samples, 0.55%)</title><rect x="20" y="900" width="7" height="15" fill="rgb(225,93,45)"/><text x="23.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (3 samples, 0.55%)</title><rect x="20" y="916" width="7" height="15" fill="rgb(223,70,46)"/><text x="23.00" y="926.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (3 samples, 0.55%)</title><rect x="20" y="932" width="7" height="15" fill="rgb(232,117,31)"/><text x="23.00" y="942.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (3 samples, 0.55%)</title><rect x="20" y="948" width="7" height="15" fill="rgb(236,110,18)"/><text x="23.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (2 samples, 0.37%)</title><rect x="23" y="964" width="4" height="15" fill="rgb(225,6,22)"/><text x="26.00" y="974.50"></text></g><g><title>_cmpkey (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.18%)</title><rect x="25" y="980" width="2" height="15" fill="rgb(241,132,9)"/><text x="28.00" y="990.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (9 samples, 1.65%)</title><rect x="10" y="292" width="19" height="15" fill="rgb(250,227,21)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="308" width="19" height="15" fill="rgb(252,2,29)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="324" width="19" height="15" fill="rgb(208,183,4)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="340" width="19" height="15" fill="rgb(244,70,32)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 1.65%)</title><rect x="10" y="356" width="19" height="15" fill="rgb(253,26,45)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="372" width="19" height="15" fill="rgb(209,117,46)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (9 samples, 1.65%)</title><rect x="10" y="388" width="19" height="15" fill="rgb(249,199,5)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="404" width="19" height="15" fill="rgb(215,184,1)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="420" width="19" height="15" fill="rgb(230,200,47)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="436" width="19" height="15" fill="rgb(249,85,45)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 1.65%)</title><rect x="10" y="452" width="19" height="15" fill="rgb(208,94,14)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="468" width="19" height="15" fill="rgb(208,172,27)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (9 samples, 1.65%)</title><rect x="10" y="484" width="19" height="15" fill="rgb(230,131,4)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="500" width="19" height="15" fill="rgb(244,166,45)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="516" width="19" height="15" fill="rgb(241,116,36)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="532" width="19" height="15" fill="rgb(206,48,45)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 1.65%)</title><rect x="10" y="548" width="19" height="15" fill="rgb(212,49,25)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="564" width="19" height="15" fill="rgb(229,121,52)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (9 samples, 1.65%)</title><rect x="10" y="580" width="19" height="15" fill="rgb(245,97,49)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="596" width="19" height="15" fill="rgb(254,225,54)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="612" width="19" height="15" fill="rgb(227,182,52)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="628" width="19" height="15" fill="rgb(214,23,6)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="644" width="19" height="15" fill="rgb(253,123,22)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="660" width="19" height="15" fill="rgb(232,150,43)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="676" width="19" height="15" fill="rgb(237,47,28)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 1.65%)</title><rect x="10" y="692" width="19" height="15" fill="rgb(252,155,2)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="708" width="19" height="15" fill="rgb(217,30,3)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (9 samples, 1.65%)</title><rect x="10" y="724" width="19" height="15" fill="rgb(215,214,4)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="740" width="19" height="15" fill="rgb(221,29,28)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="756" width="19" height="15" fill="rgb(211,39,28)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="772" width="19" height="15" fill="rgb(211,121,36)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 1.65%)</title><rect x="10" y="788" width="19" height="15" fill="rgb(243,173,29)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.65%)</title><rect x="10" y="804" width="19" height="15" fill="rgb(214,172,32)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (9 samples, 1.65%)</title><rect x="10" y="820" width="19" height="15" fill="rgb(244,163,4)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (9 samples, 1.65%)</title><rect x="10" y="836" width="19" height="15" fill="rgb(235,38,23)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (9 samples, 1.65%)</title><rect x="10" y="852" width="19" height="15" fill="rgb(222,207,47)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (5 samples, 0.92%)</title><rect x="18" y="868" width="11" height="15" fill="rgb(247,206,20)"/><text x="21.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (4 samples, 0.74%)</title><rect x="20" y="884" width="9" height="15" fill="rgb(229,52,41)"/><text x="23.00" y="894.50"></text></g><g><title>join (posixpath.py) (1 samples, 0.18%)</title><rect x="27" y="900" width="2" height="15" fill="rgb(242,15,4)"/><text x="30.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="788" width="2" height="15" fill="rgb(251,143,50)"/><text x="32.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="804" width="2" height="15" fill="rgb(212,98,53)"/><text x="32.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="820" width="2" height="15" fill="rgb(238,143,24)"/><text x="32.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="29" y="836" width="2" height="15" fill="rgb(212,214,42)"/><text x="32.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="852" width="2" height="15" fill="rgb(232,72,11)"/><text x="32.00" y="862.50"></text></g><g><title>&lt;module&gt; (scipy/special/__init__.py) (1 samples, 0.18%)</title><rect x="29" y="868" width="2" height="15" fill="rgb(229,130,5)"/><text x="32.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="884" width="2" height="15" fill="rgb(208,174,14)"/><text x="32.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="900" width="2" height="15" fill="rgb(211,214,44)"/><text x="32.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="916" width="2" height="15" fill="rgb(222,150,52)"/><text x="32.00" y="926.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="932" width="2" height="15" fill="rgb(207,144,46)"/><text x="32.00" y="942.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="29" y="948" width="2" height="15" fill="rgb(216,101,6)"/><text x="32.00" y="958.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="964" width="2" height="15" fill="rgb(210,123,50)"/><text x="32.00" y="974.50"></text></g><g><title>dlopen (libdl-2.29.so) (1 samples, 0.18%)</title><rect x="29" y="980" width="2" height="15" fill="rgb(245,143,24)"/><text x="32.00" y="990.50"></text></g><g><title>0x7fd6f0265995 (libdl-2.29.so) (1 samples, 0.18%)</title><rect x="29" y="996" width="2" height="15" fill="rgb(242,195,29)"/><text x="32.00" y="1006.50"></text></g><g><title>_dl_catch_error (libc-2.29.so) (1 samples, 0.18%)</title><rect x="29" y="1012" width="2" height="15" fill="rgb(213,24,17)"/><text x="32.00" y="1022.50"></text></g><g><title>_dl_catch_exception (libc-2.29.so) (1 samples, 0.18%)</title><rect x="29" y="1028" width="2" height="15" fill="rgb(234,38,31)"/><text x="32.00" y="1038.50"></text></g><g><title>0x7fd6f0265258 (libdl-2.29.so) (1 samples, 0.18%)</title><rect x="29" y="1044" width="2" height="15" fill="rgb(207,170,35)"/><text x="32.00" y="1054.50"></text></g><g><title>0x7fd6f02b2d7a (ld-2.29.so) (1 samples, 0.18%)</title><rect x="29" y="1060" width="2" height="15" fill="rgb(217,227,53)"/><text x="32.00" y="1070.50"></text></g><g><title>_dl_catch_exception (libc-2.29.so) (1 samples, 0.18%)</title><rect x="29" y="1076" width="2" height="15" fill="rgb(232,13,27)"/><text x="32.00" y="1086.50"></text></g><g><title>0x7fd6f02b3345 (ld-2.29.so) (1 samples, 0.18%)</title><rect x="29" y="1092" width="2" height="15" fill="rgb(235,24,11)"/><text x="32.00" y="1102.50"></text></g><g><title>0x7fd6f02abfec (ld-2.29.so) (1 samples, 0.18%)</title><rect x="29" y="1108" width="2" height="15" fill="rgb(229,69,27)"/><text x="32.00" y="1118.50"></text></g><g><title>0x7fd6f02aa56b (ld-2.29.so) (1 samples, 0.18%)</title><rect x="29" y="1124" width="2" height="15" fill="rgb(244,180,45)"/><text x="32.00" y="1134.50"></text></g><g><title>0x7fd6f02a9b87 (ld-2.29.so) (1 samples, 0.18%)</title><rect x="29" y="1140" width="2" height="15" fill="rgb(241,168,35)"/><text x="32.00" y="1150.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.02%)</title><rect x="10" y="196" width="23" height="15" fill="rgb(207,135,37)"/><text x="13.00" y="206.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.02%)</title><rect x="10" y="212" width="23" height="15" fill="rgb(234,222,39)"/><text x="13.00" y="222.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.02%)</title><rect x="10" y="228" width="23" height="15" fill="rgb(211,85,53)"/><text x="13.00" y="238.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.02%)</title><rect x="10" y="244" width="23" height="15" fill="rgb(253,68,19)"/><text x="13.00" y="254.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (11 samples, 2.02%)</title><rect x="10" y="260" width="23" height="15" fill="rgb(211,59,32)"/><text x="13.00" y="270.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (11 samples, 2.02%)</title><rect x="10" y="276" width="23" height="15" fill="rgb(249,33,28)"/><text x="13.00" y="286.50">_..</text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (2 samples, 0.37%)</title><rect x="29" y="292" width="4" height="15" fill="rgb(224,139,44)"/><text x="32.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="308" width="4" height="15" fill="rgb(228,38,44)"/><text x="32.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="324" width="4" height="15" fill="rgb(225,8,51)"/><text x="32.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="340" width="4" height="15" fill="rgb(236,67,16)"/><text x="32.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="29" y="356" width="4" height="15" fill="rgb(250,87,11)"/><text x="32.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="372" width="4" height="15" fill="rgb(206,25,11)"/><text x="32.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (2 samples, 0.37%)</title><rect x="29" y="388" width="4" height="15" fill="rgb(212,134,39)"/><text x="32.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="404" width="4" height="15" fill="rgb(254,101,44)"/><text x="32.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="420" width="4" height="15" fill="rgb(251,161,47)"/><text x="32.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="436" width="4" height="15" fill="rgb(252,213,10)"/><text x="32.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="29" y="452" width="4" height="15" fill="rgb(216,85,31)"/><text x="32.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="468" width="4" height="15" fill="rgb(249,154,48)"/><text x="32.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (2 samples, 0.37%)</title><rect x="29" y="484" width="4" height="15" fill="rgb(215,138,35)"/><text x="32.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="500" width="4" height="15" fill="rgb(246,61,0)"/><text x="32.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="516" width="4" height="15" fill="rgb(215,214,41)"/><text x="32.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="532" width="4" height="15" fill="rgb(209,164,50)"/><text x="32.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="29" y="548" width="4" height="15" fill="rgb(224,48,29)"/><text x="32.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="564" width="4" height="15" fill="rgb(216,173,8)"/><text x="32.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (2 samples, 0.37%)</title><rect x="29" y="580" width="4" height="15" fill="rgb(251,30,20)"/><text x="32.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="596" width="4" height="15" fill="rgb(239,6,9)"/><text x="32.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="612" width="4" height="15" fill="rgb(214,116,1)"/><text x="32.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="628" width="4" height="15" fill="rgb(252,219,3)"/><text x="32.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="29" y="644" width="4" height="15" fill="rgb(205,99,13)"/><text x="32.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="660" width="4" height="15" fill="rgb(207,60,46)"/><text x="32.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (2 samples, 0.37%)</title><rect x="29" y="676" width="4" height="15" fill="rgb(243,71,13)"/><text x="32.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="692" width="4" height="15" fill="rgb(250,87,44)"/><text x="32.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="708" width="4" height="15" fill="rgb(208,198,9)"/><text x="32.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="724" width="4" height="15" fill="rgb(205,190,52)"/><text x="32.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="29" y="740" width="4" height="15" fill="rgb(231,159,35)"/><text x="32.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="29" y="756" width="4" height="15" fill="rgb(212,209,50)"/><text x="32.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (2 samples, 0.37%)</title><rect x="29" y="772" width="4" height="15" fill="rgb(230,177,52)"/><text x="32.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="788" width="2" height="15" fill="rgb(207,44,41)"/><text x="34.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="804" width="2" height="15" fill="rgb(252,80,6)"/><text x="34.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="820" width="2" height="15" fill="rgb(222,229,36)"/><text x="34.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="836" width="2" height="15" fill="rgb(239,79,0)"/><text x="34.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="852" width="2" height="15" fill="rgb(226,159,33)"/><text x="34.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="31" y="868" width="2" height="15" fill="rgb(217,210,13)"/><text x="34.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="884" width="2" height="15" fill="rgb(217,165,42)"/><text x="34.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (1 samples, 0.18%)</title><rect x="31" y="900" width="2" height="15" fill="rgb(248,10,27)"/><text x="34.00" y="910.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="916" width="2" height="15" fill="rgb(236,177,36)"/><text x="34.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="932" width="2" height="15" fill="rgb(211,108,40)"/><text x="34.00" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="948" width="2" height="15" fill="rgb(238,5,49)"/><text x="34.00" y="958.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="964" width="2" height="15" fill="rgb(209,191,25)"/><text x="34.00" y="974.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="980" width="2" height="15" fill="rgb(247,82,14)"/><text x="34.00" y="990.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="31" y="996" width="2" height="15" fill="rgb(212,57,14)"/><text x="34.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="31" y="1012" width="2" height="15" fill="rgb(222,43,17)"/><text x="34.00" y="1022.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_continuous_distns.py) (1 samples, 0.18%)</title><rect x="31" y="1028" width="2" height="15" fill="rgb(246,61,38)"/><text x="34.00" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="484" width="3" height="15" fill="rgb(209,18,43)"/><text x="36.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="500" width="3" height="15" fill="rgb(236,229,43)"/><text x="36.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="516" width="3" height="15" fill="rgb(224,24,15)"/><text x="36.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="532" width="3" height="15" fill="rgb(220,206,50)"/><text x="36.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="33" y="548" width="3" height="15" fill="rgb(238,111,25)"/><text x="36.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="564" width="3" height="15" fill="rgb(253,112,2)"/><text x="36.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (1 samples, 0.18%)</title><rect x="33" y="580" width="3" height="15" fill="rgb(205,48,3)"/><text x="36.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="596" width="3" height="15" fill="rgb(225,170,11)"/><text x="36.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="612" width="3" height="15" fill="rgb(232,41,28)"/><text x="36.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="628" width="3" height="15" fill="rgb(207,108,20)"/><text x="36.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="33" y="644" width="3" height="15" fill="rgb(227,152,18)"/><text x="36.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="660" width="3" height="15" fill="rgb(229,111,6)"/><text x="36.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (1 samples, 0.18%)</title><rect x="33" y="676" width="3" height="15" fill="rgb(210,117,50)"/><text x="36.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="692" width="3" height="15" fill="rgb(241,116,20)"/><text x="36.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="708" width="3" height="15" fill="rgb(218,146,35)"/><text x="36.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="724" width="3" height="15" fill="rgb(221,109,13)"/><text x="36.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="33" y="740" width="3" height="15" fill="rgb(227,221,36)"/><text x="36.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="756" width="3" height="15" fill="rgb(213,42,42)"/><text x="36.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (1 samples, 0.18%)</title><rect x="33" y="772" width="3" height="15" fill="rgb(219,36,4)"/><text x="36.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="788" width="3" height="15" fill="rgb(218,172,16)"/><text x="36.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="804" width="3" height="15" fill="rgb(221,8,52)"/><text x="36.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="820" width="3" height="15" fill="rgb(234,117,17)"/><text x="36.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="33" y="836" width="3" height="15" fill="rgb(237,71,30)"/><text x="36.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="852" width="3" height="15" fill="rgb(226,138,34)"/><text x="36.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (1 samples, 0.18%)</title><rect x="33" y="868" width="3" height="15" fill="rgb(221,94,21)"/><text x="36.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="884" width="3" height="15" fill="rgb(232,111,44)"/><text x="36.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="900" width="3" height="15" fill="rgb(251,93,12)"/><text x="36.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="916" width="3" height="15" fill="rgb(251,153,3)"/><text x="36.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="932" width="3" height="15" fill="rgb(251,112,8)"/><text x="36.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="948" width="3" height="15" fill="rgb(246,54,1)"/><text x="36.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="964" width="3" height="15" fill="rgb(234,139,20)"/><text x="36.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="33" y="980" width="3" height="15" fill="rgb(213,86,0)"/><text x="36.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="996" width="3" height="15" fill="rgb(220,22,14)"/><text x="36.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (1 samples, 0.18%)</title><rect x="33" y="1012" width="3" height="15" fill="rgb(230,94,3)"/><text x="36.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1028" width="3" height="15" fill="rgb(220,160,14)"/><text x="36.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1044" width="3" height="15" fill="rgb(208,182,52)"/><text x="36.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1060" width="3" height="15" fill="rgb(222,192,4)"/><text x="36.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="33" y="1076" width="3" height="15" fill="rgb(213,32,9)"/><text x="36.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1092" width="3" height="15" fill="rgb(205,105,2)"/><text x="36.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (1 samples, 0.18%)</title><rect x="33" y="1108" width="3" height="15" fill="rgb(251,17,40)"/><text x="36.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1124" width="3" height="15" fill="rgb(220,180,26)"/><text x="36.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1140" width="3" height="15" fill="rgb(239,14,40)"/><text x="36.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1156" width="3" height="15" fill="rgb(252,182,0)"/><text x="36.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="33" y="1172" width="3" height="15" fill="rgb(222,41,52)"/><text x="36.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1188" width="3" height="15" fill="rgb(229,149,1)"/><text x="36.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py) (1 samples, 0.18%)</title><rect x="33" y="1204" width="3" height="15" fill="rgb(219,187,12)"/><text x="36.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1220" width="3" height="15" fill="rgb(230,228,21)"/><text x="36.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1236" width="3" height="15" fill="rgb(217,135,37)"/><text x="36.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1252" width="3" height="15" fill="rgb(234,154,36)"/><text x="36.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="33" y="1268" width="3" height="15" fill="rgb(233,209,30)"/><text x="36.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="33" y="1284" width="3" height="15" fill="rgb(218,123,9)"/><text x="36.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_container.py) (1 samples, 0.18%)</title><rect x="33" y="1300" width="3" height="15" fill="rgb(215,138,3)"/><text x="36.00" y="1310.50"></text></g><g><title>_get_operation_list (skl2onnx/common/_container.py) (1 samples, 0.18%)</title><rect x="33" y="1316" width="3" height="15" fill="rgb(230,22,52)"/><text x="36.00" y="1326.50"></text></g><g><title>getsource (inspect.py) (1 samples, 0.18%)</title><rect x="33" y="1332" width="3" height="15" fill="rgb(250,58,11)"/><text x="36.00" y="1342.50"></text></g><g><title>getsourcelines (inspect.py) (1 samples, 0.18%)</title><rect x="33" y="1348" width="3" height="15" fill="rgb(236,69,7)"/><text x="36.00" y="1358.50"></text></g><g><title>getblock (inspect.py) (1 samples, 0.18%)</title><rect x="33" y="1364" width="3" height="15" fill="rgb(233,63,4)"/><text x="36.00" y="1374.50"></text></g><g><title>_tokenize (tokenize.py) (1 samples, 0.18%)</title><rect x="33" y="1380" width="3" height="15" fill="rgb(208,199,42)"/><text x="36.00" y="1390.50"></text></g><g><title>_sre_SRE_Pattern_match (python3.7) (1 samples, 0.18%)</title><rect x="33" y="1396" width="3" height="15" fill="rgb(218,74,47)"/><text x="36.00" y="1406.50"></text></g><g><title>sre_ucs1_match (python3.7) (1 samples, 0.18%)</title><rect x="33" y="1412" width="3" height="15" fill="rgb(242,155,44)"/><text x="36.00" y="1422.50"></text></g><g><title>&lt;module&gt; (pandas/core/generic.py) (1 samples, 0.18%)</title><rect x="36" y="1108" width="2" height="15" fill="rgb(234,127,19)"/><text x="39.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1124" width="2" height="15" fill="rgb(230,0,13)"/><text x="39.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1140" width="2" height="15" fill="rgb(240,157,1)"/><text x="39.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1156" width="2" height="15" fill="rgb(234,38,27)"/><text x="39.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="36" y="1172" width="2" height="15" fill="rgb(238,185,9)"/><text x="39.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1188" width="2" height="15" fill="rgb(206,52,19)"/><text x="39.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/core/index.py) (1 samples, 0.18%)</title><rect x="36" y="1204" width="2" height="15" fill="rgb(245,185,54)"/><text x="39.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1220" width="2" height="15" fill="rgb(213,110,20)"/><text x="39.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1236" width="2" height="15" fill="rgb(223,115,49)"/><text x="39.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1252" width="2" height="15" fill="rgb(213,68,51)"/><text x="39.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="36" y="1268" width="2" height="15" fill="rgb(209,178,22)"/><text x="39.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1284" width="2" height="15" fill="rgb(250,29,44)"/><text x="39.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/api.py) (1 samples, 0.18%)</title><rect x="36" y="1300" width="2" height="15" fill="rgb(246,71,7)"/><text x="39.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1316" width="2" height="15" fill="rgb(245,202,40)"/><text x="39.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1332" width="2" height="15" fill="rgb(210,5,23)"/><text x="39.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1348" width="2" height="15" fill="rgb(221,95,11)"/><text x="39.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="36" y="1364" width="2" height="15" fill="rgb(211,183,48)"/><text x="39.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1380" width="2" height="15" fill="rgb(208,32,6)"/><text x="39.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/interval.py) (1 samples, 0.18%)</title><rect x="36" y="1396" width="2" height="15" fill="rgb(232,119,48)"/><text x="39.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1412" width="2" height="15" fill="rgb(218,26,26)"/><text x="39.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1428" width="2" height="15" fill="rgb(207,102,50)"/><text x="39.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="36" y="1444" width="2" height="15" fill="rgb(247,154,50)"/><text x="39.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="36" y="1460" width="2" height="15" fill="rgb(250,136,40)"/><text x="39.00" y="1470.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="36" y="1476" width="2" height="15" fill="rgb(216,42,36)"/><text x="39.00" y="1486.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="36" y="1492" width="2" height="15" fill="rgb(230,173,39)"/><text x="39.00" y="1502.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (2 samples, 0.37%)</title><rect x="36" y="724" width="4" height="15" fill="rgb(236,14,19)"/><text x="39.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="740" width="4" height="15" fill="rgb(243,93,33)"/><text x="39.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="756" width="4" height="15" fill="rgb(229,74,42)"/><text x="39.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="772" width="4" height="15" fill="rgb(224,51,9)"/><text x="39.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="36" y="788" width="4" height="15" fill="rgb(227,87,0)"/><text x="39.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="804" width="4" height="15" fill="rgb(250,57,34)"/><text x="39.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (2 samples, 0.37%)</title><rect x="36" y="820" width="4" height="15" fill="rgb(207,26,38)"/><text x="39.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="836" width="4" height="15" fill="rgb(226,192,10)"/><text x="39.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="852" width="4" height="15" fill="rgb(249,107,12)"/><text x="39.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="868" width="4" height="15" fill="rgb(234,222,33)"/><text x="39.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="36" y="884" width="4" height="15" fill="rgb(254,75,50)"/><text x="39.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="900" width="4" height="15" fill="rgb(240,19,39)"/><text x="39.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (2 samples, 0.37%)</title><rect x="36" y="916" width="4" height="15" fill="rgb(244,188,49)"/><text x="39.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="932" width="4" height="15" fill="rgb(233,162,47)"/><text x="39.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="948" width="4" height="15" fill="rgb(246,52,31)"/><text x="39.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="964" width="4" height="15" fill="rgb(225,183,54)"/><text x="39.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="36" y="980" width="4" height="15" fill="rgb(230,96,37)"/><text x="39.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="996" width="4" height="15" fill="rgb(241,163,41)"/><text x="39.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (2 samples, 0.37%)</title><rect x="36" y="1012" width="4" height="15" fill="rgb(228,223,38)"/><text x="39.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="1028" width="4" height="15" fill="rgb(220,13,45)"/><text x="39.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="1044" width="4" height="15" fill="rgb(227,16,12)"/><text x="39.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="1060" width="4" height="15" fill="rgb(243,6,20)"/><text x="39.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="36" y="1076" width="4" height="15" fill="rgb(244,177,39)"/><text x="39.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="36" y="1092" width="4" height="15" fill="rgb(209,111,7)"/><text x="39.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (1 samples, 0.18%)</title><rect x="38" y="1108" width="2" height="15" fill="rgb(252,179,12)"/><text x="41.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1124" width="2" height="15" fill="rgb(217,96,4)"/><text x="41.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1140" width="2" height="15" fill="rgb(214,134,39)"/><text x="41.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1156" width="2" height="15" fill="rgb(229,130,48)"/><text x="41.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="38" y="1172" width="2" height="15" fill="rgb(252,182,11)"/><text x="41.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1188" width="2" height="15" fill="rgb(249,155,24)"/><text x="41.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (1 samples, 0.18%)</title><rect x="38" y="1204" width="2" height="15" fill="rgb(226,147,18)"/><text x="41.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1220" width="2" height="15" fill="rgb(209,75,29)"/><text x="41.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1236" width="2" height="15" fill="rgb(252,22,13)"/><text x="41.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1252" width="2" height="15" fill="rgb(213,52,0)"/><text x="41.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="38" y="1268" width="2" height="15" fill="rgb(209,192,39)"/><text x="41.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1284" width="2" height="15" fill="rgb(237,98,31)"/><text x="41.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (1 samples, 0.18%)</title><rect x="38" y="1300" width="2" height="15" fill="rgb(250,141,34)"/><text x="41.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1316" width="2" height="15" fill="rgb(243,38,25)"/><text x="41.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1332" width="2" height="15" fill="rgb(244,80,17)"/><text x="41.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1348" width="2" height="15" fill="rgb(227,141,52)"/><text x="41.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="38" y="1364" width="2" height="15" fill="rgb(254,103,9)"/><text x="41.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1380" width="2" height="15" fill="rgb(219,69,39)"/><text x="41.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (1 samples, 0.18%)</title><rect x="38" y="1396" width="2" height="15" fill="rgb(223,212,9)"/><text x="41.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1412" width="2" height="15" fill="rgb(215,59,1)"/><text x="41.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1428" width="2" height="15" fill="rgb(248,197,37)"/><text x="41.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1444" width="2" height="15" fill="rgb(246,228,21)"/><text x="41.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="38" y="1460" width="2" height="15" fill="rgb(209,41,37)"/><text x="41.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1476" width="2" height="15" fill="rgb(207,70,48)"/><text x="41.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (1 samples, 0.18%)</title><rect x="38" y="1492" width="2" height="15" fill="rgb(220,148,23)"/><text x="41.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1508" width="2" height="15" fill="rgb(241,120,50)"/><text x="41.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1524" width="2" height="15" fill="rgb(218,150,29)"/><text x="41.00" y="1534.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1540" width="2" height="15" fill="rgb(212,75,23)"/><text x="41.00" y="1550.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1556" width="2" height="15" fill="rgb(228,226,8)"/><text x="41.00" y="1566.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1572" width="2" height="15" fill="rgb(235,226,41)"/><text x="41.00" y="1582.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1588" width="2" height="15" fill="rgb(227,152,1)"/><text x="41.00" y="1598.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="38" y="1604" width="2" height="15" fill="rgb(251,122,54)"/><text x="41.00" y="1614.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1620" width="2" height="15" fill="rgb(233,87,44)"/><text x="41.00" y="1630.50"></text></g><g><title>&lt;module&gt; (matplotlib/__init__.py) (1 samples, 0.18%)</title><rect x="38" y="1636" width="2" height="15" fill="rgb(221,47,8)"/><text x="41.00" y="1646.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1652" width="2" height="15" fill="rgb(215,229,4)"/><text x="41.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1668" width="2" height="15" fill="rgb(241,89,17)"/><text x="41.00" y="1678.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1684" width="2" height="15" fill="rgb(207,68,27)"/><text x="41.00" y="1694.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1700" width="2" height="15" fill="rgb(236,198,47)"/><text x="41.00" y="1710.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1716" width="2" height="15" fill="rgb(242,158,29)"/><text x="41.00" y="1726.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="38" y="1732" width="2" height="15" fill="rgb(212,78,1)"/><text x="41.00" y="1742.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1748" width="2" height="15" fill="rgb(224,93,51)"/><text x="41.00" y="1758.50"></text></g><g><title>&lt;module&gt; (matplotlib/rcsetup.py) (1 samples, 0.18%)</title><rect x="38" y="1764" width="2" height="15" fill="rgb(235,43,49)"/><text x="41.00" y="1774.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1780" width="2" height="15" fill="rgb(238,53,25)"/><text x="41.00" y="1790.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1796" width="2" height="15" fill="rgb(239,2,15)"/><text x="41.00" y="1806.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="38" y="1812" width="2" height="15" fill="rgb(250,97,8)"/><text x="41.00" y="1822.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="38" y="1828" width="2" height="15" fill="rgb(250,229,13)"/><text x="41.00" y="1838.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="38" y="1844" width="2" height="15" fill="rgb(233,2,12)"/><text x="41.00" y="1854.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="38" y="1860" width="2" height="15" fill="rgb(240,46,49)"/><text x="41.00" y="1870.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 0.74%)</title><rect x="33" y="340" width="9" height="15" fill="rgb(206,164,37)"/><text x="36.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="33" y="356" width="9" height="15" fill="rgb(232,1,20)"/><text x="36.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="33" y="372" width="9" height="15" fill="rgb(250,117,7)"/><text x="36.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="33" y="388" width="9" height="15" fill="rgb(232,113,6)"/><text x="36.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.74%)</title><rect x="33" y="404" width="9" height="15" fill="rgb(247,125,18)"/><text x="36.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="33" y="420" width="9" height="15" fill="rgb(205,118,44)"/><text x="36.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (4 samples, 0.74%)</title><rect x="33" y="436" width="9" height="15" fill="rgb(219,101,21)"/><text x="36.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="33" y="452" width="9" height="15" fill="rgb(215,147,25)"/><text x="36.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="33" y="468" width="9" height="15" fill="rgb(254,78,26)"/><text x="36.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="36" y="484" width="6" height="15" fill="rgb(232,58,42)"/><text x="39.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.55%)</title><rect x="36" y="500" width="6" height="15" fill="rgb(205,25,39)"/><text x="39.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="36" y="516" width="6" height="15" fill="rgb(229,138,5)"/><text x="39.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.55%)</title><rect x="36" y="532" width="6" height="15" fill="rgb(238,172,2)"/><text x="39.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="36" y="548" width="6" height="15" fill="rgb(250,155,12)"/><text x="39.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="36" y="564" width="6" height="15" fill="rgb(235,42,40)"/><text x="39.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="36" y="580" width="6" height="15" fill="rgb(211,14,4)"/><text x="39.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.55%)</title><rect x="36" y="596" width="6" height="15" fill="rgb(212,210,5)"/><text x="39.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="36" y="612" width="6" height="15" fill="rgb(216,142,1)"/><text x="39.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (3 samples, 0.55%)</title><rect x="36" y="628" width="6" height="15" fill="rgb(219,199,14)"/><text x="39.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="36" y="644" width="6" height="15" fill="rgb(222,102,35)"/><text x="39.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="36" y="660" width="6" height="15" fill="rgb(208,120,35)"/><text x="39.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="36" y="676" width="6" height="15" fill="rgb(206,143,6)"/><text x="39.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.55%)</title><rect x="36" y="692" width="6" height="15" fill="rgb(243,51,41)"/><text x="39.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="36" y="708" width="6" height="15" fill="rgb(239,15,25)"/><text x="39.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/io/api.py) (1 samples, 0.18%)</title><rect x="40" y="724" width="2" height="15" fill="rgb(213,84,38)"/><text x="43.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="40" y="740" width="2" height="15" fill="rgb(252,223,39)"/><text x="43.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="40" y="756" width="2" height="15" fill="rgb(240,101,16)"/><text x="43.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="40" y="772" width="2" height="15" fill="rgb(240,214,35)"/><text x="43.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="40" y="788" width="2" height="15" fill="rgb(227,32,21)"/><text x="43.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="40" y="804" width="2" height="15" fill="rgb(220,21,6)"/><text x="43.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/io/excel/__init__.py) (1 samples, 0.18%)</title><rect x="40" y="820" width="2" height="15" fill="rgb(229,213,11)"/><text x="43.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="40" y="836" width="2" height="15" fill="rgb(222,6,33)"/><text x="43.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="40" y="852" width="2" height="15" fill="rgb(249,0,38)"/><text x="43.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="40" y="868" width="2" height="15" fill="rgb(247,116,11)"/><text x="43.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="40" y="884" width="2" height="15" fill="rgb(250,173,49)"/><text x="43.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="40" y="900" width="2" height="15" fill="rgb(210,4,41)"/><text x="43.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/io/excel/_base.py) (1 samples, 0.18%)</title><rect x="40" y="916" width="2" height="15" fill="rgb(237,40,47)"/><text x="43.00" y="926.50"></text></g><g><title>__call__ (pandas/util/_decorators.py) (1 samples, 0.18%)</title><rect x="40" y="932" width="2" height="15" fill="rgb(205,40,8)"/><text x="43.00" y="942.50"></text></g><g><title>dedent (textwrap.py) (1 samples, 0.18%)</title><rect x="40" y="948" width="2" height="15" fill="rgb(248,157,8)"/><text x="43.00" y="958.50"></text></g><g><title>_sre_SRE_Pattern_findall (python3.7) (1 samples, 0.18%)</title><rect x="40" y="964" width="2" height="15" fill="rgb(225,192,11)"/><text x="43.00" y="974.50"></text></g><g><title>sre_ucs1_match (python3.7) (1 samples, 0.18%)</title><rect x="40" y="980" width="2" height="15" fill="rgb(223,3,19)"/><text x="43.00" y="990.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="40" y="996" width="2" height="15" fill="rgb(214,89,49)"/><text x="43.00" y="1006.50"></text></g><g><title>0x7fd6effdf510 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="40" y="1012" width="2" height="15" fill="rgb(224,114,42)"/><text x="43.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (16 samples, 2.94%)</title><rect x="10" y="68" width="34" height="15" fill="rgb(220,85,18)"/><text x="13.00" y="78.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (16 samples, 2.94%)</title><rect x="10" y="84" width="34" height="15" fill="rgb(246,7,54)"/><text x="13.00" y="94.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (16 samples, 2.94%)</title><rect x="10" y="100" width="34" height="15" fill="rgb(223,15,53)"/><text x="13.00" y="110.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (16 samples, 2.94%)</title><rect x="10" y="116" width="34" height="15" fill="rgb(254,192,49)"/><text x="13.00" y="126.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (16 samples, 2.94%)</title><rect x="10" y="132" width="34" height="15" fill="rgb(254,67,28)"/><text x="13.00" y="142.50">_c..</text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_m_cl.py) (16 samples, 2.94%)</title><rect x="10" y="148" width="34" height="15" fill="rgb(237,6,47)"/><text x="13.00" y="158.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (16 samples, 2.94%)</title><rect x="10" y="164" width="34" height="15" fill="rgb(218,40,22)"/><text x="13.00" y="174.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (16 samples, 2.94%)</title><rect x="10" y="180" width="34" height="15" fill="rgb(211,184,34)"/><text x="13.00" y="190.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.92%)</title><rect x="33" y="196" width="11" height="15" fill="rgb(245,124,22)"/><text x="36.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.92%)</title><rect x="33" y="212" width="11" height="15" fill="rgb(219,140,49)"/><text x="36.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.92%)</title><rect x="33" y="228" width="11" height="15" fill="rgb(220,115,11)"/><text x="36.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (5 samples, 0.92%)</title><rect x="33" y="244" width="11" height="15" fill="rgb(238,123,24)"/><text x="36.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.92%)</title><rect x="33" y="260" width="11" height="15" fill="rgb(248,184,34)"/><text x="36.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.92%)</title><rect x="33" y="276" width="11" height="15" fill="rgb(253,62,54)"/><text x="36.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.92%)</title><rect x="33" y="292" width="11" height="15" fill="rgb(216,69,47)"/><text x="36.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.92%)</title><rect x="33" y="308" width="11" height="15" fill="rgb(229,107,43)"/><text x="36.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.92%)</title><rect x="33" y="324" width="11" height="15" fill="rgb(244,90,20)"/><text x="36.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py) (1 samples, 0.18%)</title><rect x="42" y="340" width="2" height="15" fill="rgb(211,18,29)"/><text x="45.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="356" width="2" height="15" fill="rgb(252,157,8)"/><text x="45.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="372" width="2" height="15" fill="rgb(226,91,32)"/><text x="45.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="388" width="2" height="15" fill="rgb(224,179,8)"/><text x="45.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="404" width="2" height="15" fill="rgb(226,35,2)"/><text x="45.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="420" width="2" height="15" fill="rgb(232,176,43)"/><text x="45.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="436" width="2" height="15" fill="rgb(243,198,8)"/><text x="45.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="42" y="452" width="2" height="15" fill="rgb(214,103,38)"/><text x="45.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="468" width="2" height="15" fill="rgb(231,187,0)"/><text x="45.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py) (1 samples, 0.18%)</title><rect x="42" y="484" width="2" height="15" fill="rgb(218,225,0)"/><text x="45.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="500" width="2" height="15" fill="rgb(219,0,46)"/><text x="45.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="516" width="2" height="15" fill="rgb(239,30,29)"/><text x="45.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="532" width="2" height="15" fill="rgb(241,126,21)"/><text x="45.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="42" y="548" width="2" height="15" fill="rgb(250,218,20)"/><text x="45.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="564" width="2" height="15" fill="rgb(232,91,45)"/><text x="45.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/code_helper.py) (1 samples, 0.18%)</title><rect x="42" y="580" width="2" height="15" fill="rgb(224,31,13)"/><text x="45.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="596" width="2" height="15" fill="rgb(243,169,18)"/><text x="45.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="612" width="2" height="15" fill="rgb(238,82,20)"/><text x="45.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="628" width="2" height="15" fill="rgb(217,53,26)"/><text x="45.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="644" width="2" height="15" fill="rgb(233,50,45)"/><text x="45.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="660" width="2" height="15" fill="rgb(254,104,9)"/><text x="45.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="676" width="2" height="15" fill="rgb(222,207,27)"/><text x="45.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="42" y="692" width="2" height="15" fill="rgb(254,116,15)"/><text x="45.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="708" width="2" height="15" fill="rgb(221,80,30)"/><text x="45.00" y="718.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/__init__.py) (1 samples, 0.18%)</title><rect x="42" y="724" width="2" height="15" fill="rgb(223,212,1)"/><text x="45.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="740" width="2" height="15" fill="rgb(248,93,35)"/><text x="45.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="756" width="2" height="15" fill="rgb(218,123,43)"/><text x="45.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="772" width="2" height="15" fill="rgb(232,115,45)"/><text x="45.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="42" y="788" width="2" height="15" fill="rgb(205,32,0)"/><text x="45.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="804" width="2" height="15" fill="rgb(210,109,5)"/><text x="45.00" y="814.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/anyfhelper.py) (1 samples, 0.18%)</title><rect x="42" y="820" width="2" height="15" fill="rgb(250,64,33)"/><text x="45.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="836" width="2" height="15" fill="rgb(229,68,46)"/><text x="45.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="852" width="2" height="15" fill="rgb(250,47,4)"/><text x="45.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="868" width="2" height="15" fill="rgb(221,144,21)"/><text x="45.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="42" y="884" width="2" height="15" fill="rgb(224,21,29)"/><text x="45.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="900" width="2" height="15" fill="rgb(206,75,48)"/><text x="45.00" y="910.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/filehelper/synchelper.py) (1 samples, 0.18%)</title><rect x="42" y="916" width="2" height="15" fill="rgb(222,77,18)"/><text x="45.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="932" width="2" height="15" fill="rgb(231,67,54)"/><text x="45.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="948" width="2" height="15" fill="rgb(246,185,20)"/><text x="45.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="964" width="2" height="15" fill="rgb(210,81,29)"/><text x="45.00" y="974.50"></text></g><g><title>__exit__ (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="42" y="980" width="2" height="15" fill="rgb(247,202,42)"/><text x="45.00" y="990.50"></text></g><g><title>0x7fd6ab603ff9 (?) (1 samples, 0.18%)</title><rect x="49" y="212" width="2" height="15" fill="rgb(249,134,27)"/><text x="52.00" y="222.50"></text></g><g><title>0x7fd6ab5feef6 (?) (1 samples, 0.18%)</title><rect x="49" y="228" width="2" height="15" fill="rgb(212,69,38)"/><text x="52.00" y="238.50"></text></g><g><title>0x7fd6ab5f3962 (?) (1 samples, 0.18%)</title><rect x="49" y="244" width="2" height="15" fill="rgb(246,219,21)"/><text x="52.00" y="254.50"></text></g><g><title>0x7fd6ab6277a7 (?) (1 samples, 0.18%)</title><rect x="49" y="260" width="2" height="15" fill="rgb(211,144,38)"/><text x="52.00" y="270.50"></text></g><g><title>0x7fd6ab627379 (?) (1 samples, 0.18%)</title><rect x="49" y="276" width="2" height="15" fill="rgb(217,112,30)"/><text x="52.00" y="286.50"></text></g><g><title>0x7fd6aba858b8 (?) (1 samples, 0.18%)</title><rect x="49" y="292" width="2" height="15" fill="rgb(230,143,20)"/><text x="52.00" y="302.50"></text></g><g><title>0x7fd6aba83c7f (?) (1 samples, 0.18%)</title><rect x="49" y="308" width="2" height="15" fill="rgb(229,220,27)"/><text x="52.00" y="318.50"></text></g><g><title>0x7fd6aba9699c (?) (1 samples, 0.18%)</title><rect x="49" y="324" width="2" height="15" fill="rgb(247,132,31)"/><text x="52.00" y="334.50"></text></g><g><title>0x7fd6ab7b419e (?) (1 samples, 0.18%)</title><rect x="49" y="340" width="2" height="15" fill="rgb(241,93,32)"/><text x="52.00" y="350.50"></text></g><g><title>0x7fd6ab7b0e83 (?) (1 samples, 0.18%)</title><rect x="49" y="356" width="2" height="15" fill="rgb(244,111,12)"/><text x="52.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="51" y="340" width="2" height="15" fill="rgb(222,186,50)"/><text x="54.00" y="350.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (129 samples, 23.71%)</title><rect x="59" y="356" width="280" height="15" fill="rgb(250,19,42)"/><text x="62.00" y="366.50">onnxruntime::ml::TreeEnsembleClassifi..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;long, float&gt;&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="337" y="372" width="2" height="15" fill="rgb(214,30,25)"/><text x="340.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.18%)</title><rect x="337" y="388" width="2" height="15" fill="rgb(230,45,9)"/><text x="340.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="337" y="404" width="2" height="15" fill="rgb(206,121,47)"/><text x="340.00" y="414.50"></text></g><g><title>0x7fd6effdd945 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="339" y="372" width="2" height="15" fill="rgb(237,223,3)"/><text x="342.00" y="382.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (134 samples, 24.63%)</title><rect x="53" y="340" width="291" height="15" fill="rgb(216,184,25)"/><text x="56.00" y="350.50">onnxruntime::ml::TreeEnsembleClassifier..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="339" y="356" width="5" height="15" fill="rgb(206,83,32)"/><text x="342.00" y="366.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, OrtMemType&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt; &gt;::_M_erase [clone .localalias.69] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="341" y="372" width="3" height="15" fill="rgb(212,65,5)"/><text x="344.00" y="382.50"></text></g><g><title>0x7fd6effdd991 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="341" y="388" width="3" height="15" fill="rgb(213,78,28)"/><text x="344.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.18%)</title><rect x="344" y="356" width="2" height="15" fill="rgb(235,171,11)"/><text x="347.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="344" y="372" width="2" height="15" fill="rgb(229,13,37)"/><text x="347.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (137 samples, 25.18%)</title><rect x="51" y="260" width="297" height="15" fill="rgb(205,85,10)"/><text x="54.00" y="270.50">onnxruntime::InferenceSession::Run (onn..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (137 samples, 25.18%)</title><rect x="51" y="276" width="297" height="15" fill="rgb(237,226,34)"/><text x="54.00" y="286.50">onnxruntime::InferenceSession::Run (onn..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (137 samples, 25.18%)</title><rect x="51" y="292" width="297" height="15" fill="rgb(217,112,8)"/><text x="54.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (137 samples, 25.18%)</title><rect x="51" y="308" width="297" height="15" fill="rgb(228,112,11)"/><text x="54.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (o..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (137 samples, 25.18%)</title><rect x="51" y="324" width="297" height="15" fill="rgb(245,202,11)"/><text x="54.00" y="334.50">onnxruntime::SequentialExecutor::Execut..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="344" y="340" width="4" height="15" fill="rgb(248,193,12)"/><text x="347.00" y="350.50"></text></g><g><title>std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="346" y="356" width="2" height="15" fill="rgb(210,178,12)"/><text x="349.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.18%)</title><rect x="346" y="372" width="2" height="15" fill="rgb(235,17,10)"/><text x="349.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="346" y="388" width="2" height="15" fill="rgb(214,73,2)"/><text x="349.00" y="398.50"></text></g><g><title>0x7fd6effdf028 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="346" y="404" width="2" height="15" fill="rgb(239,68,37)"/><text x="349.00" y="414.50"></text></g><g><title>0x7fd6effdcc6a (libc-2.29.so) (1 samples, 0.18%)</title><rect x="346" y="420" width="2" height="15" fill="rgb(224,93,28)"/><text x="349.00" y="430.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.74%)</title><rect x="348" y="260" width="9" height="15" fill="rgb(252,105,28)"/><text x="351.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="352" y="276" width="5" height="15" fill="rgb(224,190,31)"/><text x="355.00" y="286.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (145 samples, 26.65%)</title><rect x="44" y="100" width="315" height="15" fill="rgb(240,109,21)"/><text x="47.00" y="110.50">profile (bench_RandomForestClassifier_defa..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (143 samples, 26.29%)</title><rect x="49" y="116" width="310" height="15" fill="rgb(247,17,35)"/><text x="52.00" y="126.50">time_predict (mlprodict/asv_benchmark/com..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (143 samples, 26.29%)</title><rect x="49" y="132" width="310" height="15" fill="rgb(239,217,25)"/><text x="52.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (143 samples, 26.29%)</title><rect x="49" y="148" width="310" height="15" fill="rgb(247,157,20)"/><text x="52.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (143 samples, 26.29%)</title><rect x="49" y="164" width="310" height="15" fill="rgb(230,36,30)"/><text x="52.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (143 samples, 26.29%)</title><rect x="49" y="180" width="310" height="15" fill="rgb(231,156,32)"/><text x="52.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.p..</text></g><g><title>run (onnxruntime/capi/session.py) (143 samples, 26.29%)</title><rect x="49" y="196" width="310" height="15" fill="rgb(222,159,16)"/><text x="52.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (142 samples, 26.10%)</title><rect x="51" y="212" width="308" height="15" fill="rgb(207,121,6)"/><text x="54.00" y="222.50">pybind11::cpp_function::dispatcher (onnxr..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (142 samples, 26.10%)</title><rect x="51" y="228" width="308" height="15" fill="rgb(205,177,8)"/><text x="54.00" y="238.50">void pybind11::cpp_function::initialize&lt;o..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (142 samples, 26.10%)</title><rect x="51" y="244" width="308" height="15" fill="rgb(236,167,35)"/><text x="54.00" y="254.50">onnxruntime::python::addObjectMethods(pyb..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="357" y="260" width="2" height="15" fill="rgb(206,179,38)"/><text x="360.00" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="357" y="276" width="2" height="15" fill="rgb(213,77,3)"/><text x="360.00" y="286.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="357" y="292" width="2" height="15" fill="rgb(219,40,8)"/><text x="360.00" y="302.50"></text></g><g><title>0x7fd6effddd07 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="357" y="308" width="2" height="15" fill="rgb(225,155,26)"/><text x="360.00" y="318.50"></text></g><g><title>profile_ort (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (147 samples, 27.02%)</title><rect x="44" y="68" width="319" height="15" fill="rgb(211,224,28)"/><text x="47.00" y="78.50">profile_ort (bench_RandomForestClassifier_d..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (147 samples, 27.02%)</title><rect x="44" y="84" width="319" height="15" fill="rgb(232,79,41)"/><text x="47.00" y="94.50">setup_profile (bench_RandomForestClassifier..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.37%)</title><rect x="359" y="100" width="4" height="15" fill="rgb(208,12,48)"/><text x="362.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.37%)</title><rect x="359" y="116" width="4" height="15" fill="rgb(230,159,6)"/><text x="362.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.37%)</title><rect x="359" y="132" width="4" height="15" fill="rgb(219,35,31)"/><text x="362.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (2 samples, 0.37%)</title><rect x="359" y="148" width="4" height="15" fill="rgb(230,55,53)"/><text x="362.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (2 samples, 0.37%)</title><rect x="359" y="164" width="4" height="15" fill="rgb(247,68,43)"/><text x="362.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (2 samples, 0.37%)</title><rect x="359" y="180" width="4" height="15" fill="rgb(235,182,4)"/><text x="362.00" y="190.50"></text></g><g><title>convert_sklearn_random_forest_classifier (skl2onnx/operator_converters/random_forest.py) (2 samples, 0.37%)</title><rect x="359" y="196" width="4" height="15" fill="rgb(215,208,51)"/><text x="362.00" y="206.50"></text></g><g><title>add_tree_to_attribute_pairs (skl2onnx/common/tree_ensemble.py) (2 samples, 0.37%)</title><rect x="359" y="212" width="4" height="15" fill="rgb(210,92,42)"/><text x="362.00" y="222.50"></text></g><g><title>add_node (skl2onnx/common/tree_ensemble.py) (1 samples, 0.18%)</title><rect x="361" y="228" width="2" height="15" fill="rgb(236,72,47)"/><text x="364.00" y="238.50"></text></g><g><title>sklearn_threshold (skl2onnx/common/tree_ensemble.py) (1 samples, 0.18%)</title><rect x="361" y="244" width="2" height="15" fill="rgb(239,225,14)"/><text x="364.00" y="254.50"></text></g><g><title>float_multiply (scalarmath.c.src) (1 samples, 0.18%)</title><rect x="361" y="260" width="2" height="15" fill="rgb(237,195,48)"/><text x="364.00" y="270.50"></text></g><g><title>array_multiply (number.c) (1 samples, 0.18%)</title><rect x="361" y="276" width="2" height="15" fill="rgb(234,186,6)"/><text x="364.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.18%)</title><rect x="361" y="292" width="2" height="15" fill="rgb(208,117,1)"/><text x="364.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.18%)</title><rect x="361" y="308" width="2" height="15" fill="rgb(206,115,26)"/><text x="364.00" y="318.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.18%)</title><rect x="361" y="324" width="2" height="15" fill="rgb(223,30,44)"/><text x="364.00" y="334.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.18%)</title><rect x="361" y="340" width="2" height="15" fill="rgb(243,96,32)"/><text x="364.00" y="350.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (1 samples, 0.18%)</title><rect x="361" y="356" width="2" height="15" fill="rgb(238,207,51)"/><text x="364.00" y="366.50"></text></g><g><title>LONG_setitem (arraytypes.c.src) (1 samples, 0.18%)</title><rect x="361" y="372" width="2" height="15" fill="rgb(233,2,45)"/><text x="364.00" y="382.50"></text></g><g><title>PyArray_DESCR (ndarraytypes.h) (1 samples, 0.18%)</title><rect x="361" y="388" width="2" height="15" fill="rgb(250,166,46)"/><text x="364.00" y="398.50"></text></g><g><title>0x7fd6b0c7b422 (?) (1 samples, 0.18%)</title><rect x="363" y="244" width="2" height="15" fill="rgb(228,114,37)"/><text x="366.00" y="254.50"></text></g><g><title>0x7fd6b0c8189e (?) (1 samples, 0.18%)</title><rect x="363" y="260" width="2" height="15" fill="rgb(227,88,45)"/><text x="366.00" y="270.50"></text></g><g><title>0x7fd6b0c8174f (?) (1 samples, 0.18%)</title><rect x="363" y="276" width="2" height="15" fill="rgb(228,118,9)"/><text x="366.00" y="286.50"></text></g><g><title>0x7fd6b0c87a3a (?) (1 samples, 0.18%)</title><rect x="363" y="292" width="2" height="15" fill="rgb(227,35,22)"/><text x="366.00" y="302.50"></text></g><g><title>0x7fd6b9f99cff (?) (1 samples, 0.18%)</title><rect x="363" y="308" width="2" height="15" fill="rgb(251,44,37)"/><text x="366.00" y="318.50"></text></g><g><title>0x7fd6b0c8278c (?) (1 samples, 0.18%)</title><rect x="363" y="324" width="2" height="15" fill="rgb(225,208,41)"/><text x="366.00" y="334.50"></text></g><g><title>0x7fd6b0c6e3c7 (?) (1 samples, 0.18%)</title><rect x="363" y="340" width="2" height="15" fill="rgb(215,150,46)"/><text x="366.00" y="350.50"></text></g><g><title>0x7fd6b9fa3ab9 (libgomp.so.1.0.0) (1 samples, 0.18%)</title><rect x="365" y="452" width="2" height="15" fill="rgb(206,167,45)"/><text x="368.00" y="462.50"></text></g><g><title>0x7fd6b9fa4eab (libgomp.so.1.0.0) (1 samples, 0.18%)</title><rect x="365" y="468" width="2" height="15" fill="rgb(248,108,24)"/><text x="368.00" y="478.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_end (stl_tree.h) (1 samples, 0.18%)</title><rect x="415" y="532" width="2" height="15" fill="rgb(237,111,3)"/><text x="418.00" y="542.50"></text></g><g><title>std::map&lt;long, long, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_map.h) (32 samples, 5.88%)</title><rect x="413" y="500" width="69" height="15" fill="rgb(250,108,26)"/><text x="416.00" y="510.50">std::ma..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h) (32 samples, 5.88%)</title><rect x="413" y="516" width="69" height="15" fill="rgb(229,209,29)"/><text x="416.00" y="526.50">std::_R..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h) (30 samples, 5.51%)</title><rect x="417" y="532" width="65" height="15" fill="rgb(227,52,22)"/><text x="420.00" y="542.50">std::_R..</text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (57 samples, 10.48%)</title><rect x="363" y="100" width="124" height="15" fill="rgb(249,99,21)"/><text x="366.00" y="110.50">profile (bench_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (57 samples, 10.48%)</title><rect x="363" y="116" width="124" height="15" fill="rgb(208,195,27)"/><text x="366.00" y="126.50">time_predict (m..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (57 samples, 10.48%)</title><rect x="363" y="132" width="124" height="15" fill="rgb(225,0,27)"/><text x="366.00" y="142.50">&lt;lambda&gt; (mlpro..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (57 samples, 10.48%)</title><rect x="363" y="148" width="124" height="15" fill="rgb(245,67,26)"/><text x="366.00" y="158.50">run (mlprodict/..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (57 samples, 10.48%)</title><rect x="363" y="164" width="124" height="15" fill="rgb(211,5,17)"/><text x="366.00" y="174.50">_run_sequence_r..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (57 samples, 10.48%)</title><rect x="363" y="180" width="124" height="15" fill="rgb(241,77,2)"/><text x="366.00" y="190.50">run (mlprodict/..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (57 samples, 10.48%)</title><rect x="363" y="196" width="124" height="15" fill="rgb(210,96,18)"/><text x="366.00" y="206.50">run (mlprodict/..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (57 samples, 10.48%)</title><rect x="363" y="212" width="124" height="15" fill="rgb(243,84,2)"/><text x="366.00" y="222.50">run (mlprodict/..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py) (57 samples, 10.48%)</title><rect x="363" y="228" width="124" height="15" fill="rgb(249,19,37)"/><text x="366.00" y="238.50">_run (mlprodict..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (56 samples, 10.29%)</title><rect x="365" y="244" width="122" height="15" fill="rgb(236,118,18)"/><text x="368.00" y="254.50">pybind11::cpp_f..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (56 samples, 10.29%)</title><rect x="365" y="260" width="122" height="15" fill="rgb(253,175,27)"/><text x="368.00" y="270.50">void pybind11::..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (56 samples, 10.29%)</title><rect x="365" y="276" width="122" height="15" fill="rgb(243,156,50)"/><text x="368.00" y="286.50">void pybind11::..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (56 samples, 10.29%)</title><rect x="365" y="292" width="122" height="15" fill="rgb(205,143,16)"/><text x="368.00" y="302.50">pybind11::detai..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (56 samples, 10.29%)</title><rect x="365" y="308" width="122" height="15" fill="rgb(252,126,25)"/><text x="368.00" y="318.50">pybind11::detai..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (56 samples, 10.29%)</title><rect x="365" y="324" width="122" height="15" fill="rgb(246,38,16)"/><text x="368.00" y="334.50">pybind11::cpp_f..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (56 samples, 10.29%)</title><rect x="365" y="340" width="122" height="15" fill="rgb(253,110,50)"/><text x="368.00" y="350.50">pybind11::array..</text></g><g><title>pybind11::array::~array (numpy.h) (56 samples, 10.29%)</title><rect x="365" y="356" width="122" height="15" fill="rgb(236,51,3)"/><text x="368.00" y="366.50">pybind11::array..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (56 samples, 10.29%)</title><rect x="365" y="372" width="122" height="15" fill="rgb(239,123,37)"/><text x="368.00" y="382.50">pybind11::buffe..</text></g><g><title>pybind11::object::~object (pytypes.h) (56 samples, 10.29%)</title><rect x="365" y="388" width="122" height="15" fill="rgb(216,125,25)"/><text x="368.00" y="398.50">pybind11::objec..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (56 samples, 10.29%)</title><rect x="365" y="404" width="122" height="15" fill="rgb(253,214,24)"/><text x="368.00" y="414.50">pybind11::handl..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (56 samples, 10.29%)</title><rect x="365" y="420" width="122" height="15" fill="rgb(220,134,20)"/><text x="368.00" y="430.50">RuntimeTreeEnse..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (56 samples, 10.29%)</title><rect x="365" y="436" width="122" height="15" fill="rgb(220,69,44)"/><text x="368.00" y="446.50">pybind11::gil_s..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (55 samples, 10.11%)</title><rect x="367" y="452" width="120" height="15" fill="rgb(245,36,54)"/><text x="370.00" y="462.50">GOMP_parallel ..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (55 samples, 10.11%)</title><rect x="367" y="468" width="120" height="15" fill="rgb(206,47,3)"/><text x="370.00" y="478.50">RuntimeTreeEns..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (52 samples, 9.56%)</title><rect x="374" y="484" width="113" height="15" fill="rgb(243,178,41)"/><text x="377.00" y="494.50">RuntimeTreeEn..</text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (stl_bvector.h) (2 samples, 0.37%)</title><rect x="482" y="500" width="5" height="15" fill="rgb(243,101,7)"/><text x="485.00" y="510.50"></text></g><g><title>std::_Bit_iterator::operator* (stl_bvector.h) (2 samples, 0.37%)</title><rect x="482" y="516" width="5" height="15" fill="rgb(225,198,54)"/><text x="485.00" y="526.50"></text></g><g><title>profile_pyrt (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (58 samples, 10.66%)</title><rect x="363" y="68" width="126" height="15" fill="rgb(228,74,11)"/><text x="366.00" y="78.50">profile_pyrt (b..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (58 samples, 10.66%)</title><rect x="363" y="84" width="126" height="15" fill="rgb(217,22,13)"/><text x="366.00" y="94.50">setup_profile (..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.18%)</title><rect x="487" y="100" width="2" height="15" fill="rgb(250,202,35)"/><text x="490.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.18%)</title><rect x="487" y="116" width="2" height="15" fill="rgb(221,172,50)"/><text x="490.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.18%)</title><rect x="487" y="132" width="2" height="15" fill="rgb(218,166,3)"/><text x="490.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.18%)</title><rect x="487" y="148" width="2" height="15" fill="rgb(243,172,31)"/><text x="490.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.18%)</title><rect x="487" y="164" width="2" height="15" fill="rgb(218,152,24)"/><text x="490.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (1 samples, 0.18%)</title><rect x="487" y="180" width="2" height="15" fill="rgb(216,193,27)"/><text x="490.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (1 samples, 0.18%)</title><rect x="487" y="196" width="2" height="15" fill="rgb(239,1,20)"/><text x="490.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="487" y="212" width="2" height="15" fill="rgb(221,174,16)"/><text x="490.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="487" y="228" width="2" height="15" fill="rgb(231,46,22)"/><text x="490.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="487" y="244" width="2" height="15" fill="rgb(219,173,52)"/><text x="490.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="487" y="260" width="2" height="15" fill="rgb(219,191,45)"/><text x="490.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="487" y="276" width="2" height="15" fill="rgb(224,143,51)"/><text x="490.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (1 samples, 0.18%)</title><rect x="487" y="292" width="2" height="15" fill="rgb(240,6,27)"/><text x="490.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="487" y="308" width="2" height="15" fill="rgb(245,87,49)"/><text x="490.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="487" y="324" width="2" height="15" fill="rgb(209,155,5)"/><text x="490.00" y="334.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="487" y="340" width="2" height="15" fill="rgb(222,154,36)"/><text x="490.00" y="350.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="487" y="356" width="2" height="15" fill="rgb(246,13,26)"/><text x="490.00" y="366.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="487" y="372" width="2" height="15" fill="rgb(222,41,41)"/><text x="490.00" y="382.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="487" y="388" width="2" height="15" fill="rgb(207,149,2)"/><text x="490.00" y="398.50"></text></g><g><title>update_wrapper (functools.py) (8 samples, 1.47%)</title><rect x="539" y="228" width="17" height="15" fill="rgb(235,183,12)"/><text x="542.00" y="238.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py) (13 samples, 2.39%)</title><rect x="532" y="196" width="28" height="15" fill="rgb(236,215,11)"/><text x="535.00" y="206.50">&lt;..</text></g><g><title>delayed (joblib/parallel.py) (11 samples, 2.02%)</title><rect x="537" y="212" width="23" height="15" fill="rgb(231,26,34)"/><text x="540.00" y="222.50">d..</text></g><g><title>wraps (functools.py) (2 samples, 0.37%)</title><rect x="556" y="228" width="4" height="15" fill="rgb(253,90,14)"/><text x="559.00" y="238.50"></text></g><g><title>__init__ (joblib/parallel.py) (4 samples, 0.74%)</title><rect x="560" y="196" width="9" height="15" fill="rgb(252,171,29)"/><text x="563.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py) (7 samples, 1.29%)</title><rect x="597" y="228" width="16" height="15" fill="rgb(209,168,39)"/><text x="600.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="639" y="292" width="2" height="15" fill="rgb(249,145,30)"/><text x="642.00" y="302.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.18%)</title><rect x="639" y="308" width="2" height="15" fill="rgb(251,10,4)"/><text x="642.00" y="318.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.18%)</title><rect x="639" y="324" width="2" height="15" fill="rgb(229,16,40)"/><text x="642.00" y="334.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (1 samples, 0.18%)</title><rect x="641" y="292" width="2" height="15" fill="rgb(232,118,43)"/><text x="644.00" y="302.50"></text></g><g><title>0x7fd6efff3757 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="641" y="308" width="2" height="15" fill="rgb(234,172,4)"/><text x="644.00" y="318.50"></text></g><g><title>0x7fd6c9a20f55 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="658" y="324" width="2" height="15" fill="rgb(253,122,48)"/><text x="661.00" y="334.50"></text></g><g><title>0x7fd6c9a10d33 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="658" y="340" width="2" height="15" fill="rgb(225,207,1)"/><text x="661.00" y="350.50"></text></g><g><title>PyArray_New (ctors.c) (1 samples, 0.18%)</title><rect x="658" y="356" width="2" height="15" fill="rgb(218,184,34)"/><text x="661.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.18%)</title><rect x="658" y="372" width="2" height="15" fill="rgb(234,82,46)"/><text x="661.00" y="382.50"></text></g><g><title>0x7fd6c9a2f225 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.37%)</title><rect x="660" y="356" width="5" height="15" fill="rgb(213,186,40)"/><text x="663.00" y="366.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (2 samples, 0.37%)</title><rect x="660" y="372" width="5" height="15" fill="rgb(227,8,24)"/><text x="663.00" y="382.50"></text></g><g><title>0x7fd6c9a13d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.92%)</title><rect x="665" y="372" width="10" height="15" fill="rgb(206,174,31)"/><text x="668.00" y="382.50"></text></g><g><title>0x7fd6c9a13666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.92%)</title><rect x="665" y="388" width="10" height="15" fill="rgb(214,112,40)"/><text x="668.00" y="398.50"></text></g><g><title>0x7fd6c9a092fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.92%)</title><rect x="665" y="404" width="10" height="15" fill="rgb(210,211,26)"/><text x="668.00" y="414.50"></text></g><g><title>array_getbuffer (buffer.c) (5 samples, 0.92%)</title><rect x="665" y="420" width="10" height="15" fill="rgb(235,201,25)"/><text x="668.00" y="430.50"></text></g><g><title>_buffer_get_info (buffer.c) (4 samples, 0.74%)</title><rect x="667" y="436" width="8" height="15" fill="rgb(224,133,6)"/><text x="670.00" y="446.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.18%)</title><rect x="673" y="452" width="2" height="15" fill="rgb(234,39,33)"/><text x="676.00" y="462.50"></text></g><g><title>_buffer_format_string (buffer.c) (1 samples, 0.18%)</title><rect x="673" y="468" width="2" height="15" fill="rgb(238,159,0)"/><text x="676.00" y="478.50"></text></g><g><title>_append_char (buffer.c) (1 samples, 0.18%)</title><rect x="673" y="484" width="2" height="15" fill="rgb(233,90,39)"/><text x="676.00" y="494.50"></text></g><g><title>realloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="673" y="500" width="2" height="15" fill="rgb(222,50,32)"/><text x="676.00" y="510.50"></text></g><g><title>0x7fd6c9a06f4c (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="675" y="388" width="3" height="15" fill="rgb(218,203,37)"/><text x="678.00" y="398.50"></text></g><g><title>0x7fd6c9a13e72 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.37%)</title><rect x="675" y="372" width="5" height="15" fill="rgb(233,114,16)"/><text x="678.00" y="382.50"></text></g><g><title>0x7fd6c9a072bc (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="678" y="388" width="2" height="15" fill="rgb(221,119,49)"/><text x="681.00" y="398.50"></text></g><g><title>0x7fd6c9a06db9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="678" y="404" width="2" height="15" fill="rgb(238,35,13)"/><text x="681.00" y="414.50"></text></g><g><title>0x7fd6c9a2f2df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 1.47%)</title><rect x="665" y="356" width="17" height="15" fill="rgb(235,84,19)"/><text x="668.00" y="366.50"></text></g><g><title>0x7fd6c9a14085 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="680" y="372" width="2" height="15" fill="rgb(213,60,54)"/><text x="683.00" y="382.50"></text></g><g><title>0x7fd6c9a2f560 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.37%)</title><rect x="682" y="356" width="4" height="15" fill="rgb(247,130,41)"/><text x="685.00" y="366.50"></text></g><g><title>0x7fd6efff3e76 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="693" y="388" width="2" height="15" fill="rgb(253,145,3)"/><text x="696.00" y="398.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (2 samples, 0.37%)</title><rect x="695" y="388" width="4" height="15" fill="rgb(206,28,36)"/><text x="698.00" y="398.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (1 samples, 0.18%)</title><rect x="697" y="404" width="2" height="15" fill="rgb(236,203,2)"/><text x="700.00" y="414.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.18%)</title><rect x="697" y="420" width="2" height="15" fill="rgb(227,57,39)"/><text x="700.00" y="430.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.18%)</title><rect x="699" y="388" width="2" height="15" fill="rgb(244,36,44)"/><text x="702.00" y="398.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c) (3 samples, 0.55%)</title><rect x="704" y="452" width="6" height="15" fill="rgb(235,92,16)"/><text x="707.00" y="462.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (2 samples, 0.37%)</title><rect x="706" y="468" width="4" height="15" fill="rgb(225,34,39)"/><text x="709.00" y="478.50"></text></g><g><title>0x7fd6effded86 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="708" y="484" width="2" height="15" fill="rgb(231,89,3)"/><text x="711.00" y="494.50"></text></g><g><title>0x7fd6c9a2f592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 2.21%)</title><rect x="686" y="356" width="26" height="15" fill="rgb(211,118,43)"/><text x="689.00" y="366.50">0..</text></g><g><title>array_zeros (multiarraymodule.c) (12 samples, 2.21%)</title><rect x="686" y="372" width="26" height="15" fill="rgb(219,186,43)"/><text x="689.00" y="382.50">a..</text></g><g><title>npy_free_cache_dim_obj (alloc.h) (5 samples, 0.92%)</title><rect x="701" y="388" width="11" height="15" fill="rgb(232,44,7)"/><text x="704.00" y="398.50"></text></g><g><title>PyArray_Zeros (ctors.c) (5 samples, 0.92%)</title><rect x="701" y="404" width="11" height="15" fill="rgb(242,122,45)"/><text x="704.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (5 samples, 0.92%)</title><rect x="701" y="420" width="11" height="15" fill="rgb(236,18,0)"/><text x="704.00" y="430.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c) (4 samples, 0.74%)</title><rect x="704" y="436" width="8" height="15" fill="rgb(232,141,44)"/><text x="707.00" y="446.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (1 samples, 0.18%)</title><rect x="710" y="452" width="2" height="15" fill="rgb(208,69,12)"/><text x="713.00" y="462.50"></text></g><g><title>0x7fd6c9a2f680 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="712" y="356" width="2" height="15" fill="rgb(223,87,4)"/><text x="715.00" y="366.50"></text></g><g><title>0x7fd6c9a2f684 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="714" y="356" width="3" height="15" fill="rgb(241,27,53)"/><text x="717.00" y="366.50"></text></g><g><title>0x7fd6c9a2f698 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="717" y="356" width="2" height="15" fill="rgb(208,13,21)"/><text x="720.00" y="366.50"></text></g><g><title>0x7fd6c9a2f69b (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="719" y="356" width="2" height="15" fill="rgb(221,136,22)"/><text x="722.00" y="366.50"></text></g><g><title>0x7fd6c9a2f6aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 1.10%)</title><rect x="721" y="356" width="13" height="15" fill="rgb(212,47,0)"/><text x="724.00" y="366.50"></text></g><g><title>0x7fd6c9a2f6ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.55%)</title><rect x="734" y="356" width="6" height="15" fill="rgb(225,112,6)"/><text x="737.00" y="366.50"></text></g><g><title>0x7fd6c9a2f6bf (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="740" y="356" width="3" height="15" fill="rgb(234,74,18)"/><text x="743.00" y="366.50"></text></g><g><title>0x7fd6c9a2f6c9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="743" y="356" width="2" height="15" fill="rgb(248,94,45)"/><text x="746.00" y="366.50"></text></g><g><title>0x7fd6c9a2f6d7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="745" y="356" width="2" height="15" fill="rgb(240,107,28)"/><text x="748.00" y="366.50"></text></g><g><title>0x7fd6c9a2f7a0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.37%)</title><rect x="747" y="356" width="4" height="15" fill="rgb(226,206,17)"/><text x="750.00" y="366.50"></text></g><g><title>0x7fd6c9a2f7a4 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="751" y="356" width="3" height="15" fill="rgb(224,178,48)"/><text x="754.00" y="366.50"></text></g><g><title>0x7fd6c9a2f7b0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="754" y="356" width="2" height="15" fill="rgb(208,68,19)"/><text x="757.00" y="366.50"></text></g><g><title>0x7fd6c9a07529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="756" y="372" width="2" height="15" fill="rgb(209,54,53)"/><text x="759.00" y="382.50"></text></g><g><title>0x7fd6c9a2fc27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.37%)</title><rect x="756" y="356" width="4" height="15" fill="rgb(228,146,23)"/><text x="759.00" y="366.50"></text></g><g><title>0x7fd6c9a075f7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="758" y="372" width="2" height="15" fill="rgb(254,140,11)"/><text x="761.00" y="382.50"></text></g><g><title>0x7fd6c9a072bc (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="758" y="388" width="2" height="15" fill="rgb(239,134,12)"/><text x="761.00" y="398.50"></text></g><g><title>0x7fd6c9a06db9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="758" y="404" width="2" height="15" fill="rgb(231,48,37)"/><text x="761.00" y="414.50"></text></g><g><title>0x7fd6c9a30405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (47 samples, 8.64%)</title><rect x="660" y="340" width="102" height="15" fill="rgb(237,158,28)"/><text x="663.00" y="350.50">0x7fd6c9a304..</text></g><g><title>0x7fd6c9a2fc2a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="760" y="356" width="2" height="15" fill="rgb(205,144,23)"/><text x="763.00" y="366.50"></text></g><g><title>0x7fd6c9a044f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="762" y="372" width="2" height="15" fill="rgb(207,122,50)"/><text x="765.00" y="382.50"></text></g><g><title>0x7fd6c9a20fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (49 samples, 9.01%)</title><rect x="660" y="324" width="107" height="15" fill="rgb(223,1,2)"/><text x="663.00" y="334.50">0x7fd6c9a20fa..</text></g><g><title>0x7fd6c9a30540 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.37%)</title><rect x="762" y="340" width="5" height="15" fill="rgb(223,69,23)"/><text x="765.00" y="350.50"></text></g><g><title>0x7fd6c9a052f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.37%)</title><rect x="762" y="356" width="5" height="15" fill="rgb(246,143,41)"/><text x="765.00" y="366.50"></text></g><g><title>0x7fd6c9a04530 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="764" y="372" width="3" height="15" fill="rgb(254,152,38)"/><text x="767.00" y="382.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.18%)</title><rect x="764" y="388" width="3" height="15" fill="rgb(233,16,41)"/><text x="767.00" y="398.50"></text></g><g><title>0x7fd6c9a21011 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.37%)</title><rect x="767" y="324" width="4" height="15" fill="rgb(254,96,33)"/><text x="770.00" y="334.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (11 samples, 2.02%)</title><rect x="775" y="372" width="24" height="15" fill="rgb(235,94,37)"/><text x="778.00" y="382.50">D..</text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.18%)</title><rect x="797" y="388" width="2" height="15" fill="rgb(229,85,32)"/><text x="800.00" y="398.50"></text></g><g><title>PyArray_CheckAxis (ctors.c) (2 samples, 0.37%)</title><rect x="799" y="372" width="4" height="15" fill="rgb(212,87,4)"/><text x="802.00" y="382.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (1 samples, 0.18%)</title><rect x="801" y="388" width="2" height="15" fill="rgb(214,26,46)"/><text x="804.00" y="398.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.18%)</title><rect x="801" y="404" width="2" height="15" fill="rgb(232,227,34)"/><text x="804.00" y="414.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="803" y="404" width="3" height="15" fill="rgb(235,56,9)"/><text x="806.00" y="414.50"></text></g><g><title>0x7fd6c9a2105a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (17 samples, 3.12%)</title><rect x="771" y="324" width="37" height="15" fill="rgb(243,59,10)"/><text x="774.00" y="334.50">0x7..</text></g><g><title>array_take (methods.c) (17 samples, 3.12%)</title><rect x="771" y="340" width="37" height="15" fill="rgb(236,102,46)"/><text x="774.00" y="350.50">arr..</text></g><g><title>PyArray_TakeFrom (item_selection.c) (15 samples, 2.76%)</title><rect x="775" y="356" width="33" height="15" fill="rgb(227,184,22)"/><text x="778.00" y="366.50">Py..</text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.37%)</title><rect x="803" y="372" width="5" height="15" fill="rgb(246,28,16)"/><text x="806.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.37%)</title><rect x="803" y="388" width="5" height="15" fill="rgb(238,103,6)"/><text x="806.00" y="398.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="806" y="404" width="2" height="15" fill="rgb(215,80,52)"/><text x="809.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="806" y="420" width="2" height="15" fill="rgb(208,203,8)"/><text x="809.00" y="430.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.18%)</title><rect x="806" y="436" width="2" height="15" fill="rgb(208,50,14)"/><text x="809.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="806" y="452" width="2" height="15" fill="rgb(228,73,41)"/><text x="809.00" y="462.50"></text></g><g><title>0x7fd6effdf783 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="806" y="468" width="2" height="15" fill="rgb(212,100,31)"/><text x="809.00" y="478.50"></text></g><g><title>0x7fd6c9a2105d (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="808" y="324" width="2" height="15" fill="rgb(227,176,33)"/><text x="811.00" y="334.50"></text></g><g><title>0x7fd6c9a21113 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="810" y="324" width="2" height="15" fill="rgb(231,116,16)"/><text x="813.00" y="334.50"></text></g><g><title>0x7fd6c9a2113a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="812" y="324" width="2" height="15" fill="rgb(214,33,49)"/><text x="815.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="812" y="340" width="2" height="15" fill="rgb(222,55,23)"/><text x="815.00" y="350.50"></text></g><g><title>npy_free_cache_dim (alloc.c) (1 samples, 0.18%)</title><rect x="812" y="356" width="2" height="15" fill="rgb(213,192,2)"/><text x="815.00" y="366.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.18%)</title><rect x="812" y="372" width="2" height="15" fill="rgb(214,60,15)"/><text x="815.00" y="382.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.18%)</title><rect x="816" y="356" width="3" height="15" fill="rgb(241,164,23)"/><text x="819.00" y="366.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.18%)</title><rect x="816" y="372" width="3" height="15" fill="rgb(253,114,40)"/><text x="819.00" y="382.50"></text></g><g><title>0x7fd6c9a21d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (75 samples, 13.79%)</title><rect x="658" y="308" width="163" height="15" fill="rgb(225,16,17)"/><text x="661.00" y="318.50">0x7fd6c9a21d2e (sklea..</text></g><g><title>0x7fd6c9a21328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.55%)</title><rect x="814" y="324" width="7" height="15" fill="rgb(217,114,10)"/><text x="817.00" y="334.50"></text></g><g><title>array_reshape (methods.c) (2 samples, 0.37%)</title><rect x="816" y="340" width="5" height="15" fill="rgb(249,132,4)"/><text x="819.00" y="350.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.18%)</title><rect x="819" y="356" width="2" height="15" fill="rgb(223,21,2)"/><text x="822.00" y="366.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.18%)</title><rect x="819" y="372" width="2" height="15" fill="rgb(229,63,48)"/><text x="822.00" y="382.50"></text></g><g><title>array_assign_subscript (mapping.c) (2 samples, 0.37%)</title><rect x="821" y="308" width="4" height="15" fill="rgb(228,175,1)"/><text x="824.00" y="318.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c) (1 samples, 0.18%)</title><rect x="823" y="324" width="2" height="15" fill="rgb(231,134,10)"/><text x="826.00" y="334.50"></text></g><g><title>count_boolean_trues (item_selection.c) (1 samples, 0.18%)</title><rect x="823" y="340" width="2" height="15" fill="rgb(220,172,32)"/><text x="826.00" y="350.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.18%)</title><rect x="823" y="356" width="2" height="15" fill="rgb(238,74,3)"/><text x="826.00" y="366.50"></text></g><g><title>binop_should_defer (binop_override.h) (1 samples, 0.18%)</title><rect x="825" y="324" width="2" height="15" fill="rgb(240,52,7)"/><text x="828.00" y="334.50"></text></g><g><title>is_anyscalar_exact (scalartypes.c.src) (1 samples, 0.18%)</title><rect x="825" y="340" width="2" height="15" fill="rgb(225,162,25)"/><text x="828.00" y="350.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="827" y="356" width="2" height="15" fill="rgb(226,225,28)"/><text x="830.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.18%)</title><rect x="827" y="372" width="2" height="15" fill="rgb(248,79,11)"/><text x="830.00" y="382.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (1 samples, 0.18%)</title><rect x="827" y="388" width="2" height="15" fill="rgb(225,210,51)"/><text x="830.00" y="398.50"></text></g><g><title>dtype_kind_to_simplified_ordering (convert_datatype.c) (1 samples, 0.18%)</title><rect x="827" y="404" width="2" height="15" fill="rgb(235,4,26)"/><text x="830.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.18%)</title><rect x="829" y="372" width="3" height="15" fill="rgb(249,152,27)"/><text x="832.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.18%)</title><rect x="829" y="388" width="3" height="15" fill="rgb(215,57,54)"/><text x="832.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.18%)</title><rect x="829" y="404" width="3" height="15" fill="rgb(242,199,21)"/><text x="832.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="829" y="420" width="3" height="15" fill="rgb(234,151,30)"/><text x="832.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="829" y="436" width="3" height="15" fill="rgb(241,7,37)"/><text x="832.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.55%)</title><rect x="829" y="356" width="7" height="15" fill="rgb(247,190,2)"/><text x="832.00" y="366.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (2 samples, 0.37%)</title><rect x="832" y="372" width="4" height="15" fill="rgb(241,24,51)"/><text x="835.00" y="382.50"></text></g><g><title>DOUBLE_equal (loops.c.src) (2 samples, 0.37%)</title><rect x="832" y="388" width="4" height="15" fill="rgb(238,133,46)"/><text x="835.00" y="398.50"></text></g><g><title>run_binary_simd_equal_DOUBLE (simd.inc.src) (2 samples, 0.37%)</title><rect x="832" y="404" width="4" height="15" fill="rgb(219,3,14)"/><text x="835.00" y="414.50"></text></g><g><title>sse2_binary_scalar2_equal_DOUBLE (simd.inc.src) (1 samples, 0.18%)</title><rect x="834" y="420" width="2" height="15" fill="rgb(221,11,16)"/><text x="837.00" y="430.50"></text></g><g><title>sse2_compress4_to_byte_DOUBLE (simd.inc.src) (1 samples, 0.18%)</title><rect x="834" y="436" width="2" height="15" fill="rgb(249,37,28)"/><text x="837.00" y="446.50"></text></g><g><title>_mm_packs_epi16 (emmintrin.h) (1 samples, 0.18%)</title><rect x="834" y="452" width="2" height="15" fill="rgb(238,60,28)"/><text x="837.00" y="462.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.55%)</title><rect x="836" y="356" width="6" height="15" fill="rgb(232,169,19)"/><text x="839.00" y="366.50"></text></g><g><title>array_richcompare (arrayobject.c) (9 samples, 1.65%)</title><rect x="825" y="308" width="20" height="15" fill="rgb(227,141,37)"/><text x="828.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (8 samples, 1.47%)</title><rect x="827" y="324" width="18" height="15" fill="rgb(229,73,1)"/><text x="830.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (8 samples, 1.47%)</title><rect x="827" y="340" width="18" height="15" fill="rgb(239,95,25)"/><text x="830.00" y="350.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.18%)</title><rect x="842" y="356" width="3" height="15" fill="rgb(239,148,16)"/><text x="845.00" y="366.50"></text></g><g><title>array_subscript (mapping.c) (2 samples, 0.37%)</title><rect x="845" y="308" width="4" height="15" fill="rgb(246,1,20)"/><text x="848.00" y="318.50"></text></g><g><title>get_view_from_index (mapping.c) (1 samples, 0.18%)</title><rect x="847" y="324" width="2" height="15" fill="rgb(226,170,42)"/><text x="850.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.18%)</title><rect x="853" y="372" width="2" height="15" fill="rgb(213,32,26)"/><text x="856.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.18%)</title><rect x="853" y="388" width="2" height="15" fill="rgb(229,59,43)"/><text x="856.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.18%)</title><rect x="853" y="404" width="2" height="15" fill="rgb(237,132,36)"/><text x="856.00" y="414.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.18%)</title><rect x="853" y="420" width="2" height="15" fill="rgb(212,159,33)"/><text x="856.00" y="430.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.18%)</title><rect x="853" y="436" width="2" height="15" fill="rgb(242,181,34)"/><text x="856.00" y="446.50"></text></g><g><title>0x7fd6efff3e7a (libc-2.29.so) (1 samples, 0.18%)</title><rect x="853" y="452" width="2" height="15" fill="rgb(217,168,10)"/><text x="856.00" y="462.50"></text></g><g><title>0x7fd6efffe120 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="855" y="404" width="3" height="15" fill="rgb(205,31,1)"/><text x="858.00" y="414.50"></text></g><g><title>0x7fd6ef2002c0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="864" y="436" width="2" height="15" fill="rgb(253,87,10)"/><text x="867.00" y="446.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.18%)</title><rect x="866" y="436" width="2" height="15" fill="rgb(213,202,51)"/><text x="869.00" y="446.50"></text></g><g><title>npyiter_check_global_flags (nditer_constr.c) (1 samples, 0.18%)</title><rect x="868" y="436" width="3" height="15" fill="rgb(247,159,52)"/><text x="871.00" y="446.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (2 samples, 0.37%)</title><rect x="871" y="436" width="4" height="15" fill="rgb(238,128,38)"/><text x="874.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (7 samples, 1.29%)</title><rect x="862" y="420" width="15" height="15" fill="rgb(209,77,35)"/><text x="865.00" y="430.50"></text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c) (1 samples, 0.18%)</title><rect x="875" y="436" width="2" height="15" fill="rgb(248,73,8)"/><text x="878.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.18%)</title><rect x="879" y="452" width="2" height="15" fill="rgb(253,165,38)"/><text x="882.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.18%)</title><rect x="879" y="468" width="2" height="15" fill="rgb(230,178,16)"/><text x="882.00" y="478.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.18%)</title><rect x="879" y="484" width="2" height="15" fill="rgb(245,116,53)"/><text x="882.00" y="494.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (3 samples, 0.55%)</title><rect x="877" y="420" width="7" height="15" fill="rgb(252,75,7)"/><text x="880.00" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c) (3 samples, 0.55%)</title><rect x="877" y="436" width="7" height="15" fill="rgb(243,147,46)"/><text x="880.00" y="446.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.18%)</title><rect x="881" y="452" width="3" height="15" fill="rgb(223,199,36)"/><text x="884.00" y="462.50"></text></g><g><title>0x7fd6eff95a19 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="881" y="468" width="3" height="15" fill="rgb(226,41,13)"/><text x="884.00" y="478.50"></text></g><g><title>_npy_stride_sort_item_comparator (shape.c) (1 samples, 0.18%)</title><rect x="881" y="484" width="3" height="15" fill="rgb(223,133,28)"/><text x="884.00" y="494.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.18%)</title><rect x="884" y="468" width="2" height="15" fill="rgb(216,124,10)"/><text x="887.00" y="478.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (3 samples, 0.55%)</title><rect x="884" y="420" width="6" height="15" fill="rgb(218,62,42)"/><text x="887.00" y="430.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (3 samples, 0.55%)</title><rect x="884" y="436" width="6" height="15" fill="rgb(244,62,15)"/><text x="887.00" y="446.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (3 samples, 0.55%)</title><rect x="884" y="452" width="6" height="15" fill="rgb(240,202,29)"/><text x="887.00" y="462.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (2 samples, 0.37%)</title><rect x="886" y="468" width="4" height="15" fill="rgb(213,97,17)"/><text x="889.00" y="478.50"></text></g><g><title>DOUBLE_add (loops.c.src) (9 samples, 1.65%)</title><rect x="910" y="436" width="19" height="15" fill="rgb(218,81,8)"/><text x="913.00" y="446.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (3 samples, 0.55%)</title><rect x="923" y="452" width="6" height="15" fill="rgb(222,176,37)"/><text x="926.00" y="462.50"></text></g><g><title>array_sum (methods.c) (43 samples, 7.90%)</title><rect x="849" y="308" width="93" height="15" fill="rgb(235,103,15)"/><text x="852.00" y="318.50">array_sum (..</text></g><g><title>forward_ndarray_method (methods.c) (43 samples, 7.90%)</title><rect x="849" y="324" width="93" height="15" fill="rgb(215,181,39)"/><text x="852.00" y="334.50">forward_nda..</text></g><g><title>_sum (numpy/core/_methods.py) (41 samples, 7.54%)</title><rect x="853" y="340" width="89" height="15" fill="rgb(231,142,39)"/><text x="856.00" y="350.50">_sum (nump..</text></g><g><title>ufunc_reduce (ufunc_object.c) (41 samples, 7.54%)</title><rect x="853" y="356" width="89" height="15" fill="rgb(243,143,36)"/><text x="856.00" y="366.50">ufunc_redu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (40 samples, 7.35%)</title><rect x="855" y="372" width="87" height="15" fill="rgb(253,192,11)"/><text x="858.00" y="382.50">PyUFunc_Ge..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (40 samples, 7.35%)</title><rect x="855" y="388" width="87" height="15" fill="rgb(239,138,23)"/><text x="858.00" y="398.50">PyUFunc_Re..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (39 samples, 7.17%)</title><rect x="858" y="404" width="84" height="15" fill="rgb(246,103,21)"/><text x="861.00" y="414.50">PyUFunc_R..</text></g><g><title>reduce_loop (ufunc_object.c) (24 samples, 4.41%)</title><rect x="890" y="420" width="52" height="15" fill="rgb(205,193,15)"/><text x="893.00" y="430.50">reduc..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (6 samples, 1.10%)</title><rect x="929" y="436" width="13" height="15" fill="rgb(241,92,10)"/><text x="932.00" y="446.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (12 samples, 2.21%)</title><rect x="942" y="308" width="26" height="15" fill="rgb(238,21,14)"/><text x="945.00" y="318.50">c..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (7 samples, 1.29%)</title><rect x="953" y="324" width="15" height="15" fill="rgb(244,83,48)"/><text x="956.00" y="334.50"></text></g><g><title>unicode_endswith (python3.7) (2 samples, 0.37%)</title><rect x="964" y="340" width="4" height="15" fill="rgb(247,93,53)"/><text x="967.00" y="350.50"></text></g><g><title>PyUFunc_TrueDivisionTypeResolver (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="970" y="340" width="3" height="15" fill="rgb(253,0,24)"/><text x="973.00" y="350.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="973" y="356" width="2" height="15" fill="rgb(224,2,21)"/><text x="976.00" y="366.50"></text></g><g><title>_mm_div_pd (emmintrin.h) (1 samples, 0.18%)</title><rect x="979" y="420" width="2" height="15" fill="rgb(213,10,24)"/><text x="982.00" y="430.50"></text></g><g><title>DOUBLE_divide (loops.c.src) (12 samples, 2.21%)</title><rect x="975" y="372" width="26" height="15" fill="rgb(250,129,19)"/><text x="978.00" y="382.50">D..</text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src) (10 samples, 1.84%)</title><rect x="979" y="388" width="22" height="15" fill="rgb(251,175,48)"/><text x="982.00" y="398.50">r..</text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src) (10 samples, 1.84%)</title><rect x="979" y="404" width="22" height="15" fill="rgb(228,72,24)"/><text x="982.00" y="414.50">s..</text></g><g><title>_mm_store_pd (emmintrin.h) (9 samples, 1.65%)</title><rect x="981" y="420" width="20" height="15" fill="rgb(212,49,34)"/><text x="984.00" y="430.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (2 samples, 0.37%)</title><rect x="1001" y="372" width="4" height="15" fill="rgb(226,62,2)"/><text x="1004.00" y="382.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (1 samples, 0.18%)</title><rect x="1005" y="388" width="2" height="15" fill="rgb(251,191,12)"/><text x="1008.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="1005" y="404" width="2" height="15" fill="rgb(235,103,50)"/><text x="1008.00" y="414.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (12 samples, 2.21%)</title><rect x="1005" y="372" width="26" height="15" fill="rgb(205,195,42)"/><text x="1008.00" y="382.50">N..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (11 samples, 2.02%)</title><rect x="1007" y="388" width="24" height="15" fill="rgb(214,25,35)"/><text x="1010.00" y="398.50">n..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (11 samples, 2.02%)</title><rect x="1007" y="404" width="24" height="15" fill="rgb(244,63,41)"/><text x="1010.00" y="414.50">P..</text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (5 samples, 0.92%)</title><rect x="1020" y="420" width="11" height="15" fill="rgb(222,154,10)"/><text x="1023.00" y="430.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (28 samples, 5.15%)</title><rect x="973" y="340" width="60" height="15" fill="rgb(254,167,21)"/><text x="976.00" y="350.50">execut..</text></g><g><title>iterator_loop (ufunc_object.c) (27 samples, 4.96%)</title><rect x="975" y="356" width="58" height="15" fill="rgb(207,193,54)"/><text x="978.00" y="366.50">iterat..</text></g><g><title>PyArray_BYTES (ndarraytypes.h) (1 samples, 0.18%)</title><rect x="1031" y="372" width="2" height="15" fill="rgb(222,79,22)"/><text x="1034.00" y="382.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py) (181 samples, 33.27%)</title><rect x="643" y="292" width="392" height="15" fill="rgb(232,95,12)"/><text x="646.00" y="302.50">predict_proba (sklearn/tree/_classes.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (31 samples, 5.70%)</title><rect x="968" y="308" width="67" height="15" fill="rgb(239,166,46)"/><text x="971.00" y="318.50">ufunc_g..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (31 samples, 5.70%)</title><rect x="968" y="324" width="67" height="15" fill="rgb(208,204,53)"/><text x="971.00" y="334.50">PyUFunc..</text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.18%)</title><rect x="1033" y="340" width="2" height="15" fill="rgb(243,19,15)"/><text x="1036.00" y="350.50"></text></g><g><title>_set_out_array (ufunc_object.c) (1 samples, 0.18%)</title><rect x="1033" y="356" width="2" height="15" fill="rgb(214,108,39)"/><text x="1036.00" y="366.50"></text></g><g><title>PyArray_FailUnlessWriteable (arrayobject.c) (1 samples, 0.18%)</title><rect x="1033" y="372" width="2" height="15" fill="rgb(246,104,41)"/><text x="1036.00" y="382.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="1035" y="324" width="3" height="15" fill="rgb(219,0,15)"/><text x="1038.00" y="334.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="1035" y="340" width="3" height="15" fill="rgb(224,91,40)"/><text x="1038.00" y="350.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (1 samples, 0.18%)</title><rect x="1035" y="356" width="3" height="15" fill="rgb(237,193,49)"/><text x="1038.00" y="366.50"></text></g><g><title>PyArray_ITEMSIZE (ndarraytypes.h) (1 samples, 0.18%)</title><rect x="1038" y="356" width="2" height="15" fill="rgb(209,8,6)"/><text x="1041.00" y="366.50"></text></g><g><title>ceildiv_128_64 (npy_extint128.h) (1 samples, 0.18%)</title><rect x="1042" y="404" width="2" height="15" fill="rgb(248,62,11)"/><text x="1045.00" y="414.50"></text></g><g><title>add_128 (npy_extint128.h) (1 samples, 0.18%)</title><rect x="1042" y="420" width="2" height="15" fill="rgb(227,34,49)"/><text x="1045.00" y="430.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (4 samples, 0.74%)</title><rect x="1038" y="340" width="8" height="15" fill="rgb(252,158,50)"/><text x="1041.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (3 samples, 0.55%)</title><rect x="1040" y="356" width="6" height="15" fill="rgb(206,182,39)"/><text x="1043.00" y="366.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (3 samples, 0.55%)</title><rect x="1040" y="372" width="6" height="15" fill="rgb(215,109,31)"/><text x="1043.00" y="382.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (3 samples, 0.55%)</title><rect x="1040" y="388" width="6" height="15" fill="rgb(228,83,49)"/><text x="1043.00" y="398.50"></text></g><g><title>mul_64_64 (npy_extint128.h) (1 samples, 0.18%)</title><rect x="1044" y="404" width="2" height="15" fill="rgb(235,215,0)"/><text x="1047.00" y="414.50"></text></g><g><title>_mm_add_pd (emmintrin.h) (1 samples, 0.18%)</title><rect x="1049" y="404" width="2" height="15" fill="rgb(215,85,48)"/><text x="1052.00" y="414.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py) (198 samples, 36.40%)</title><rect x="630" y="276" width="429" height="15" fill="rgb(245,201,6)"/><text x="633.00" y="286.50">_accumulate_prediction (sklearn/ensemble/_forest.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (11 samples, 2.02%)</title><rect x="1035" y="292" width="24" height="15" fill="rgb(250,158,49)"/><text x="1038.00" y="302.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (11 samples, 2.02%)</title><rect x="1035" y="308" width="24" height="15" fill="rgb(241,85,31)"/><text x="1038.00" y="318.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (10 samples, 1.84%)</title><rect x="1038" y="324" width="21" height="15" fill="rgb(213,68,33)"/><text x="1041.00" y="334.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (6 samples, 1.10%)</title><rect x="1046" y="340" width="13" height="15" fill="rgb(222,36,49)"/><text x="1049.00" y="350.50"></text></g><g><title>DOUBLE_add (loops.c.src) (5 samples, 0.92%)</title><rect x="1049" y="356" width="10" height="15" fill="rgb(219,224,53)"/><text x="1052.00" y="366.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (5 samples, 0.92%)</title><rect x="1049" y="372" width="10" height="15" fill="rgb(229,173,24)"/><text x="1052.00" y="382.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (5 samples, 0.92%)</title><rect x="1049" y="388" width="10" height="15" fill="rgb(237,10,27)"/><text x="1052.00" y="398.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (4 samples, 0.74%)</title><rect x="1051" y="404" width="8" height="15" fill="rgb(215,162,37)"/><text x="1054.00" y="414.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (200 samples, 36.76%)</title><rect x="628" y="260" width="434" height="15" fill="rgb(231,33,23)"/><text x="631.00" y="270.50">&lt;listcomp&gt; (joblib/parallel.py)</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="1059" y="276" width="3" height="15" fill="rgb(236,155,10)"/><text x="1062.00" y="286.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.18%)</title><rect x="1059" y="292" width="3" height="15" fill="rgb(228,83,7)"/><text x="1062.00" y="302.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.18%)</title><rect x="1059" y="308" width="3" height="15" fill="rgb(228,137,18)"/><text x="1062.00" y="318.50"></text></g><g><title>__exit__ (joblib/parallel.py) (5 samples, 0.92%)</title><rect x="1062" y="260" width="10" height="15" fill="rgb(236,186,16)"/><text x="1065.00" y="270.50"></text></g><g><title>unregister (joblib/parallel.py) (3 samples, 0.55%)</title><rect x="1066" y="276" width="6" height="15" fill="rgb(228,211,2)"/><text x="1069.00" y="286.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (223 samples, 40.99%)</title><rect x="595" y="212" width="484" height="15" fill="rgb(227,156,34)"/><text x="598.00" y="222.50">apply_async (joblib/_parallel_backends.py)</text></g><g><title>__init__ (joblib/_parallel_backends.py) (215 samples, 39.52%)</title><rect x="613" y="228" width="466" height="15" fill="rgb(211,20,33)"/><text x="616.00" y="238.50">__init__ (joblib/_parallel_backends.py)</text></g><g><title>__call__ (joblib/parallel.py) (213 samples, 39.15%)</title><rect x="617" y="244" width="462" height="15" fill="rgb(231,93,11)"/><text x="620.00" y="254.50">__call__ (joblib/parallel.py)</text></g><g><title>__init__ (joblib/parallel.py) (3 samples, 0.55%)</title><rect x="1072" y="260" width="7" height="15" fill="rgb(251,227,12)"/><text x="1075.00" y="270.50"></text></g><g><title>clock_gettime (libc-2.29.so) (1 samples, 0.18%)</title><rect x="1079" y="212" width="2" height="15" fill="rgb(249,34,18)"/><text x="1082.00" y="222.50"></text></g><g><title>0x7fff5814db1f ([vdso]) (1 samples, 0.18%)</title><rect x="1079" y="228" width="2" height="15" fill="rgb(250,64,40)"/><text x="1082.00" y="238.50"></text></g><g><title>_dispatch (joblib/parallel.py) (237 samples, 43.57%)</title><rect x="569" y="196" width="514" height="15" fill="rgb(237,147,17)"/><text x="572.00" y="206.50">_dispatch (joblib/parallel.py)</text></g><g><title>time_time (python3.7) (1 samples, 0.18%)</title><rect x="1081" y="212" width="2" height="15" fill="rgb(211,174,30)"/><text x="1084.00" y="222.50"></text></g><g><title>_qsize (queue.py) (1 samples, 0.18%)</title><rect x="1094" y="212" width="2" height="15" fill="rgb(234,119,23)"/><text x="1097.00" y="222.50"></text></g><g><title>get (queue.py) (7 samples, 1.29%)</title><rect x="1083" y="196" width="15" height="15" fill="rgb(228,8,25)"/><text x="1086.00" y="206.50"></text></g><g><title>notify (threading.py) (1 samples, 0.18%)</title><rect x="1096" y="212" width="2" height="15" fill="rgb(213,125,5)"/><text x="1099.00" y="222.50"></text></g><g><title>_is_owned (threading.py) (1 samples, 0.18%)</title><rect x="1096" y="228" width="2" height="15" fill="rgb(234,219,15)"/><text x="1099.00" y="238.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (1 samples, 0.18%)</title><rect x="1096" y="244" width="2" height="15" fill="rgb(240,15,35)"/><text x="1099.00" y="254.50"></text></g><g><title>0x7fd6efff3730 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="1096" y="260" width="2" height="15" fill="rgb(225,69,48)"/><text x="1099.00" y="270.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="1105" y="212" width="13" height="15" fill="rgb(230,62,12)"/><text x="1108.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (11 samples, 2.02%)</title><rect x="1118" y="212" width="24" height="15" fill="rgb(221,75,22)"/><text x="1121.00" y="222.50">g..</text></g><g><title>__init__ (joblib/_parallel_backends.py) (1 samples, 0.18%)</title><rect x="1140" y="228" width="2" height="15" fill="rgb(221,158,31)"/><text x="1143.00" y="238.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (23 samples, 4.23%)</title><rect x="1098" y="196" width="50" height="15" fill="rgb(207,94,35)"/><text x="1101.00" y="206.50">get_n..</text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="1142" y="212" width="6" height="15" fill="rgb(228,173,40)"/><text x="1145.00" y="222.50"></text></g><g><title>0x7fd6effee9a3 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="1146" y="228" width="2" height="15" fill="rgb(208,102,3)"/><text x="1149.00" y="238.50"></text></g><g><title>__enter__ (threading.py) (1 samples, 0.18%)</title><rect x="1155" y="212" width="2" height="15" fill="rgb(208,144,10)"/><text x="1158.00" y="222.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (1 samples, 0.18%)</title><rect x="1155" y="228" width="2" height="15" fill="rgb(248,228,23)"/><text x="1158.00" y="238.50"></text></g><g><title>0x7fd6efff3786 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="1155" y="244" width="2" height="15" fill="rgb(228,149,33)"/><text x="1158.00" y="254.50"></text></g><g><title>_put (queue.py) (1 samples, 0.18%)</title><rect x="1157" y="212" width="2" height="15" fill="rgb(232,140,19)"/><text x="1160.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (309 samples, 56.80%)</title><rect x="493" y="180" width="670" height="15" fill="rgb(216,56,18)"/><text x="496.00" y="190.50">dispatch_one_batch (joblib/parallel.py)</text></g><g><title>put (queue.py) (7 samples, 1.29%)</title><rect x="1148" y="196" width="15" height="15" fill="rgb(231,127,43)"/><text x="1151.00" y="206.50"></text></g><g><title>notify (threading.py) (2 samples, 0.37%)</title><rect x="1159" y="212" width="4" height="15" fill="rgb(250,38,14)"/><text x="1162.00" y="222.50"></text></g><g><title>_is_owned (threading.py) (1 samples, 0.18%)</title><rect x="1161" y="228" width="2" height="15" fill="rgb(212,137,37)"/><text x="1164.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py) (312 samples, 57.35%)</title><rect x="489" y="164" width="677" height="15" fill="rgb(251,92,41)"/><text x="492.00" y="174.50">__call__ (joblib/parallel.py)</text></g><g><title>retrieve (joblib/parallel.py) (1 samples, 0.18%)</title><rect x="1163" y="180" width="3" height="15" fill="rgb(233,110,37)"/><text x="1166.00" y="190.50"></text></g><g><title>__init__ (warnings.py) (1 samples, 0.18%)</title><rect x="1168" y="212" width="2" height="15" fill="rgb(214,229,19)"/><text x="1171.00" y="222.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (1 samples, 0.18%)</title><rect x="1170" y="212" width="2" height="15" fill="rgb(211,13,15)"/><text x="1173.00" y="222.50"></text></g><g><title>_validate_X_predict (sklearn/ensemble/_forest.py) (4 samples, 0.74%)</title><rect x="1166" y="164" width="8" height="15" fill="rgb(246,9,17)"/><text x="1169.00" y="174.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (4 samples, 0.74%)</title><rect x="1166" y="180" width="8" height="15" fill="rgb(217,8,25)"/><text x="1169.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (4 samples, 0.74%)</title><rect x="1166" y="196" width="8" height="15" fill="rgb(228,148,51)"/><text x="1169.00" y="206.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (1 samples, 0.18%)</title><rect x="1172" y="212" width="2" height="15" fill="rgb(228,43,33)"/><text x="1175.00" y="222.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (1 samples, 0.18%)</title><rect x="1172" y="228" width="2" height="15" fill="rgb(226,192,32)"/><text x="1175.00" y="238.50"></text></g><g><title>PyArray_BoolConverter (conversion_utils.c) (1 samples, 0.18%)</title><rect x="1172" y="244" width="2" height="15" fill="rgb(247,157,0)"/><text x="1175.00" y="254.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (1 samples, 0.18%)</title><rect x="1174" y="164" width="2" height="15" fill="rgb(248,29,12)"/><text x="1177.00" y="174.50"></text></g><g><title>isclass (inspect.py) (1 samples, 0.18%)</title><rect x="1174" y="180" width="2" height="15" fill="rgb(252,178,5)"/><text x="1177.00" y="190.50"></text></g><g><title>profile_skl (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (318 samples, 58.46%)</title><rect x="489" y="68" width="690" height="15" fill="rgb(221,87,5)"/><text x="492.00" y="78.50">profile_skl (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (318 samples, 58.46%)</title><rect x="489" y="84" width="690" height="15" fill="rgb(253,78,37)"/><text x="492.00" y="94.50">setup_profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (318 samples, 58.46%)</title><rect x="489" y="100" width="690" height="15" fill="rgb(217,32,27)"/><text x="492.00" y="110.50">profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (318 samples, 58.46%)</title><rect x="489" y="116" width="690" height="15" fill="rgb(244,138,45)"/><text x="492.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (318 samples, 58.46%)</title><rect x="489" y="132" width="690" height="15" fill="rgb(205,98,37)"/><text x="492.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py) (318 samples, 58.46%)</title><rect x="489" y="148" width="690" height="15" fill="rgb(233,186,0)"/><text x="492.00" y="158.50">predict_proba (sklearn/ensemble/_forest.py)</text></g><g><title>gentype_dealloc (scalartypes.c.src) (1 samples, 0.18%)</title><rect x="1176" y="164" width="3" height="15" fill="rgb(221,115,1)"/><text x="1179.00" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_forest.py) (1 samples, 0.18%)</title><rect x="1179" y="132" width="2" height="15" fill="rgb(229,130,33)"/><text x="1182.00" y="142.50"></text></g><g><title>_make_estimator (sklearn/ensemble/_base.py) (1 samples, 0.18%)</title><rect x="1179" y="148" width="2" height="15" fill="rgb(219,166,18)"/><text x="1182.00" y="158.50"></text></g><g><title>clone (sklearn/base.py) (1 samples, 0.18%)</title><rect x="1179" y="164" width="2" height="15" fill="rgb(216,60,37)"/><text x="1182.00" y="174.50"></text></g><g><title>get_params (sklearn/base.py) (1 samples, 0.18%)</title><rect x="1179" y="180" width="2" height="15" fill="rgb(253,134,4)"/><text x="1182.00" y="190.50"></text></g><g><title>_get_param_names (sklearn/base.py) (1 samples, 0.18%)</title><rect x="1179" y="196" width="2" height="15" fill="rgb(239,94,37)"/><text x="1182.00" y="206.50"></text></g><g><title>signature (inspect.py) (1 samples, 0.18%)</title><rect x="1179" y="212" width="2" height="15" fill="rgb(248,27,7)"/><text x="1182.00" y="222.50"></text></g><g><title>from_callable (inspect.py) (1 samples, 0.18%)</title><rect x="1179" y="228" width="2" height="15" fill="rgb(210,159,22)"/><text x="1182.00" y="238.50"></text></g><g><title>_signature_from_callable (inspect.py) (1 samples, 0.18%)</title><rect x="1179" y="244" width="2" height="15" fill="rgb(248,176,9)"/><text x="1182.00" y="254.50"></text></g><g><title>_signature_from_function (inspect.py) (1 samples, 0.18%)</title><rect x="1179" y="260" width="2" height="15" fill="rgb(217,10,35)"/><text x="1182.00" y="270.50"></text></g><g><title>0x7fd6c9a15b11 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="1181" y="292" width="2" height="15" fill="rgb(236,160,11)"/><text x="1184.00" y="302.50"></text></g><g><title>0x7fd6c9a46ee8 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="1181" y="308" width="2" height="15" fill="rgb(233,27,34)"/><text x="1184.00" y="318.50"></text></g><g><title>0x7fd6c9c77100 (sklearn/tree/_splitter.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="1181" y="324" width="2" height="15" fill="rgb(210,115,28)"/><text x="1184.00" y="334.50"></text></g><g><title>0x7fd6c9c80a47 (sklearn/tree/_splitter.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="1181" y="340" width="2" height="15" fill="rgb(240,101,0)"/><text x="1184.00" y="350.50"></text></g><g><title>randint (mtrand.c) (1 samples, 0.18%)</title><rect x="1181" y="356" width="2" height="15" fill="rgb(245,87,39)"/><text x="1184.00" y="366.50"></text></g><g><title>randint (mtrand.c) (1 samples, 0.18%)</title><rect x="1181" y="372" width="2" height="15" fill="rgb(239,229,23)"/><text x="1184.00" y="382.50"></text></g><g><title>__Pyx_PyObject_GetAttrStr (mtrand.c) (1 samples, 0.18%)</title><rect x="1181" y="388" width="2" height="15" fill="rgb(214,89,9)"/><text x="1184.00" y="398.50"></text></g><g><title>arraydescr_name_get (descriptor.c) (1 samples, 0.18%)</title><rect x="1181" y="404" width="2" height="15" fill="rgb(216,151,38)"/><text x="1184.00" y="414.50"></text></g><g><title>0x7fd6effee1c4 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="1181" y="420" width="2" height="15" fill="rgb(243,34,16)"/><text x="1184.00" y="430.50"></text></g><g><title>0x7fd6c9eb30d9 (sklearn/tree/_criterion.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="1183" y="292" width="2" height="15" fill="rgb(210,26,27)"/><text x="1186.00" y="302.50"></text></g><g><title>0x7fd6c9eb2881 (sklearn/tree/_criterion.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="1183" y="308" width="2" height="15" fill="rgb(228,146,40)"/><text x="1186.00" y="318.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.18%)</title><rect x="1183" y="324" width="2" height="15" fill="rgb(237,5,15)"/><text x="1186.00" y="334.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.18%)</title><rect x="1183" y="340" width="2" height="15" fill="rgb(221,125,30)"/><text x="1186.00" y="350.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.18%)</title><rect x="1183" y="356" width="2" height="15" fill="rgb(235,29,17)"/><text x="1186.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="1183" y="372" width="2" height="15" fill="rgb(219,71,53)"/><text x="1186.00" y="382.50"></text></g><g><title>0x7fd6e28b8a66 (?) (1 samples, 0.18%)</title><rect x="1185" y="308" width="2" height="15" fill="rgb(209,21,12)"/><text x="1188.00" y="318.50"></text></g><g><title>0x7fd6e28aa579 (?) (1 samples, 0.18%)</title><rect x="1185" y="324" width="2" height="15" fill="rgb(231,89,46)"/><text x="1188.00" y="334.50"></text></g><g><title>0x7fd6e21eb017 (?) (1 samples, 0.18%)</title><rect x="1185" y="340" width="2" height="15" fill="rgb(219,27,36)"/><text x="1188.00" y="350.50"></text></g><g><title>0x7fd6e1fc2aa9 (?) (1 samples, 0.18%)</title><rect x="1185" y="356" width="2" height="15" fill="rgb(222,84,35)"/><text x="1188.00" y="366.50"></text></g><g><title>0x7fd6e1fb3d1f (?) (1 samples, 0.18%)</title><rect x="1185" y="372" width="2" height="15" fill="rgb(240,113,31)"/><text x="1188.00" y="382.50"></text></g><g><title>0x7fd6e1fba76f (?) (1 samples, 0.18%)</title><rect x="1185" y="388" width="2" height="15" fill="rgb(210,94,3)"/><text x="1188.00" y="398.50"></text></g><g><title>0x7fd6e1fcd100 (?) (1 samples, 0.18%)</title><rect x="1185" y="404" width="2" height="15" fill="rgb(206,112,3)"/><text x="1188.00" y="414.50"></text></g><g><title>0x7fd6e1fc20b6 (?) (1 samples, 0.18%)</title><rect x="1185" y="420" width="2" height="15" fill="rgb(246,169,30)"/><text x="1188.00" y="430.50"></text></g><g><title>0x7fd6e1fc1d6a (?) (1 samples, 0.18%)</title><rect x="1185" y="436" width="2" height="15" fill="rgb(230,173,2)"/><text x="1188.00" y="446.50"></text></g><g><title>getrandbits (random.py) (1 samples, 0.18%)</title><rect x="1185" y="452" width="2" height="15" fill="rgb(208,27,16)"/><text x="1188.00" y="462.50"></text></g><g><title>all (544 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(215,137,42)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (544 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(244,227,36)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>start (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (5 samples, 0.92%)</title><rect x="1179" y="68" width="11" height="15" fill="rgb(245,101,49)"/><text x="1182.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_m_cl.py) (5 samples, 0.92%)</title><rect x="1179" y="84" width="11" height="15" fill="rgb(220,74,6)"/><text x="1182.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (5 samples, 0.92%)</title><rect x="1179" y="100" width="11" height="15" fill="rgb(253,129,35)"/><text x="1182.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_forest.py) (5 samples, 0.92%)</title><rect x="1179" y="116" width="11" height="15" fill="rgb(222,200,25)"/><text x="1182.00" y="126.50"></text></g><g><title>__call__ (joblib/parallel.py) (4 samples, 0.74%)</title><rect x="1181" y="132" width="9" height="15" fill="rgb(217,9,13)"/><text x="1184.00" y="142.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (4 samples, 0.74%)</title><rect x="1181" y="148" width="9" height="15" fill="rgb(229,48,20)"/><text x="1184.00" y="158.50"></text></g><g><title>_dispatch (joblib/parallel.py) (4 samples, 0.74%)</title><rect x="1181" y="164" width="9" height="15" fill="rgb(213,154,10)"/><text x="1184.00" y="174.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (4 samples, 0.74%)</title><rect x="1181" y="180" width="9" height="15" fill="rgb(221,66,36)"/><text x="1184.00" y="190.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (4 samples, 0.74%)</title><rect x="1181" y="196" width="9" height="15" fill="rgb(208,17,8)"/><text x="1184.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py) (4 samples, 0.74%)</title><rect x="1181" y="212" width="9" height="15" fill="rgb(230,94,44)"/><text x="1184.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (4 samples, 0.74%)</title><rect x="1181" y="228" width="9" height="15" fill="rgb(235,155,21)"/><text x="1184.00" y="238.50"></text></g><g><title>_parallel_build_trees (sklearn/ensemble/_forest.py) (4 samples, 0.74%)</title><rect x="1181" y="244" width="9" height="15" fill="rgb(224,148,30)"/><text x="1184.00" y="254.50"></text></g><g><title>fit (sklearn/tree/_classes.py) (4 samples, 0.74%)</title><rect x="1181" y="260" width="9" height="15" fill="rgb(231,178,32)"/><text x="1184.00" y="270.50"></text></g><g><title>fit (sklearn/tree/_classes.py) (4 samples, 0.74%)</title><rect x="1181" y="276" width="9" height="15" fill="rgb(251,31,52)"/><text x="1184.00" y="286.50"></text></g><g><title>check_random_state (sklearn/utils/validation.py) (2 samples, 0.37%)</title><rect x="1185" y="292" width="5" height="15" fill="rgb(228,15,52)"/><text x="1188.00" y="302.50"></text></g><g><title>__init__ (mtrand.c) (1 samples, 0.18%)</title><rect x="1187" y="308" width="3" height="15" fill="rgb(232,29,32)"/><text x="1190.00" y="318.50"></text></g><g><title>RandomState___init__ (mtrand.c) (1 samples, 0.18%)</title><rect x="1187" y="324" width="3" height="15" fill="rgb(251,39,26)"/><text x="1190.00" y="334.50"></text></g><g><title>__Pyx_PyObject_CallNoArg (mtrand.c) (1 samples, 0.18%)</title><rect x="1187" y="340" width="3" height="15" fill="rgb(250,140,6)"/><text x="1190.00" y="350.50"></text></g><g><title>__init__ (mt19937.c) (1 samples, 0.18%)</title><rect x="1187" y="356" width="3" height="15" fill="rgb(228,191,2)"/><text x="1190.00" y="366.50"></text></g><g><title>MT19937___init__ (mt19937.c) (1 samples, 0.18%)</title><rect x="1187" y="372" width="3" height="15" fill="rgb(247,4,1)"/><text x="1190.00" y="382.50"></text></g><g><title>inner (contextlib.py) (1 samples, 0.18%)</title><rect x="1187" y="388" width="3" height="15" fill="rgb(249,176,6)"/><text x="1190.00" y="398.50"></text></g><g><title>generate_state (bit_generator.c) (1 samples, 0.18%)</title><rect x="1187" y="404" width="3" height="15" fill="rgb(244,165,16)"/><text x="1190.00" y="414.50"></text></g><g><title>generate_state (bit_generator.c) (1 samples, 0.18%)</title><rect x="1187" y="420" width="3" height="15" fill="rgb(215,19,29)"/><text x="1190.00" y="430.50"></text></g><g><title>0x7fd6e1fb30a0 (numpy/random/bit_generator.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="1187" y="436" width="3" height="15" fill="rgb(244,30,29)"/><text x="1190.00" y="446.50"></text></g></g></svg>