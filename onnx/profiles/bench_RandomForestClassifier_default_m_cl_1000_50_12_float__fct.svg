<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1974" onload="init(evt)" viewBox="0 0 1200 1974" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1974" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1957.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1957.00"> </text><g id="frames"><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (1 samples, 0.16%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(238,62,15)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (1 samples, 0.16%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(253,23,46)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (1 samples, 0.16%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(242,123,19)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (1 samples, 0.16%)</title><rect x="10" y="916" width="1" height="15" fill="rgb(253,194,41)"/><text x="13.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="10" y="932" width="1" height="15" fill="rgb(235,176,42)"/><text x="13.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="10" y="948" width="1" height="15" fill="rgb(228,145,5)"/><text x="13.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="10" y="964" width="1" height="15" fill="rgb(248,33,29)"/><text x="13.00" y="974.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="10" y="980" width="1" height="15" fill="rgb(223,78,29)"/><text x="13.00" y="990.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="10" y="996" width="1" height="15" fill="rgb(237,58,8)"/><text x="13.00" y="1006.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="10" y="1012" width="1" height="15" fill="rgb(240,174,7)"/><text x="13.00" y="1022.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.16%)</title><rect x="10" y="1028" width="1" height="15" fill="rgb(248,146,52)"/><text x="13.00" y="1038.50"></text></g><g><title>__xstat (libc-2.29.so) (1 samples, 0.16%)</title><rect x="10" y="1044" width="1" height="15" fill="rgb(231,225,9)"/><text x="13.00" y="1054.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="196" width="3" height="15" fill="rgb(240,121,25)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="212" width="3" height="15" fill="rgb(222,132,41)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="228" width="3" height="15" fill="rgb(225,123,17)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="244" width="3" height="15" fill="rgb(253,108,53)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="260" width="3" height="15" fill="rgb(247,208,50)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="276" width="3" height="15" fill="rgb(225,39,12)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (2 samples, 0.31%)</title><rect x="10" y="292" width="3" height="15" fill="rgb(234,49,8)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="308" width="3" height="15" fill="rgb(219,38,48)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="324" width="3" height="15" fill="rgb(211,153,14)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="340" width="3" height="15" fill="rgb(254,213,43)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="356" width="3" height="15" fill="rgb(232,45,30)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="372" width="3" height="15" fill="rgb(222,211,5)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (2 samples, 0.31%)</title><rect x="10" y="388" width="3" height="15" fill="rgb(248,138,36)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="404" width="3" height="15" fill="rgb(219,178,12)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="420" width="3" height="15" fill="rgb(231,12,7)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="436" width="3" height="15" fill="rgb(219,79,54)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="452" width="3" height="15" fill="rgb(234,167,11)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="468" width="3" height="15" fill="rgb(206,218,23)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (2 samples, 0.31%)</title><rect x="10" y="484" width="3" height="15" fill="rgb(251,91,45)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="500" width="3" height="15" fill="rgb(230,208,50)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="516" width="3" height="15" fill="rgb(250,164,25)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="532" width="3" height="15" fill="rgb(211,86,6)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="548" width="3" height="15" fill="rgb(215,228,26)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="564" width="3" height="15" fill="rgb(224,180,15)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (2 samples, 0.31%)</title><rect x="10" y="580" width="3" height="15" fill="rgb(237,118,22)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="596" width="3" height="15" fill="rgb(205,134,43)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="612" width="3" height="15" fill="rgb(234,55,23)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="628" width="3" height="15" fill="rgb(229,221,52)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="644" width="3" height="15" fill="rgb(224,208,30)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="660" width="3" height="15" fill="rgb(219,35,21)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="676" width="3" height="15" fill="rgb(212,214,38)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="692" width="3" height="15" fill="rgb(230,156,47)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="708" width="3" height="15" fill="rgb(249,224,38)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (2 samples, 0.31%)</title><rect x="10" y="724" width="3" height="15" fill="rgb(205,174,20)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="740" width="3" height="15" fill="rgb(243,31,31)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="756" width="3" height="15" fill="rgb(232,110,45)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="772" width="3" height="15" fill="rgb(205,85,38)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="788" width="3" height="15" fill="rgb(240,195,51)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="804" width="3" height="15" fill="rgb(229,18,22)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (2 samples, 0.31%)</title><rect x="10" y="820" width="3" height="15" fill="rgb(246,213,42)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (2 samples, 0.31%)</title><rect x="10" y="836" width="3" height="15" fill="rgb(230,225,5)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (2 samples, 0.31%)</title><rect x="10" y="852" width="3" height="15" fill="rgb(240,212,28)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (1 samples, 0.16%)</title><rect x="11" y="868" width="2" height="15" fill="rgb(247,165,27)"/><text x="14.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (1 samples, 0.16%)</title><rect x="11" y="884" width="2" height="15" fill="rgb(247,74,18)"/><text x="14.00" y="894.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py) (1 samples, 0.16%)</title><rect x="11" y="900" width="2" height="15" fill="rgb(223,20,33)"/><text x="14.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py) (1 samples, 0.16%)</title><rect x="11" y="916" width="2" height="15" fill="rgb(228,218,48)"/><text x="14.00" y="926.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py) (1 samples, 0.16%)</title><rect x="11" y="932" width="2" height="15" fill="rgb(234,128,51)"/><text x="14.00" y="942.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.16%)</title><rect x="11" y="948" width="2" height="15" fill="rgb(247,47,18)"/><text x="14.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.16%)</title><rect x="11" y="964" width="2" height="15" fill="rgb(223,79,21)"/><text x="14.00" y="974.50"></text></g><g><title>_legacy_cmpkey (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.16%)</title><rect x="11" y="980" width="2" height="15" fill="rgb(237,201,51)"/><text x="14.00" y="990.50"></text></g><g><title>_parse_version_parts (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.16%)</title><rect x="11" y="996" width="2" height="15" fill="rgb(231,175,42)"/><text x="14.00" y="1006.50"></text></g><g><title>format_option (skl2onnx/algebra/automation.py) (1 samples, 0.16%)</title><rect x="15" y="1604" width="2" height="15" fill="rgb(243,200,20)"/><text x="18.00" y="1614.50"></text></g><g><title>0x7f3051b710e9 (?) (1 samples, 0.16%)</title><rect x="15" y="1620" width="2" height="15" fill="rgb(238,142,8)"/><text x="18.00" y="1630.50"></text></g><g><title>0x7f3051b62567 (?) (1 samples, 0.16%)</title><rect x="15" y="1636" width="2" height="15" fill="rgb(215,65,51)"/><text x="18.00" y="1646.50"></text></g><g><title>0x7f3051b53586 (?) (1 samples, 0.16%)</title><rect x="15" y="1652" width="2" height="15" fill="rgb(232,79,50)"/><text x="18.00" y="1662.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (4 samples, 0.62%)</title><rect x="13" y="1236" width="8" height="15" fill="rgb(231,47,49)"/><text x="16.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1252" width="8" height="15" fill="rgb(220,198,34)"/><text x="16.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1268" width="8" height="15" fill="rgb(239,71,3)"/><text x="16.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1284" width="8" height="15" fill="rgb(208,192,12)"/><text x="16.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1300" width="8" height="15" fill="rgb(229,205,31)"/><text x="16.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1316" width="8" height="15" fill="rgb(216,89,2)"/><text x="16.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="13" y="1332" width="8" height="15" fill="rgb(227,167,19)"/><text x="16.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1348" width="8" height="15" fill="rgb(251,6,23)"/><text x="16.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (4 samples, 0.62%)</title><rect x="13" y="1364" width="8" height="15" fill="rgb(239,107,38)"/><text x="16.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1380" width="8" height="15" fill="rgb(223,39,46)"/><text x="16.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1396" width="8" height="15" fill="rgb(245,147,39)"/><text x="16.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1412" width="8" height="15" fill="rgb(242,52,1)"/><text x="16.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="13" y="1428" width="8" height="15" fill="rgb(213,77,5)"/><text x="16.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1444" width="8" height="15" fill="rgb(247,121,18)"/><text x="16.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.62%)</title><rect x="13" y="1460" width="8" height="15" fill="rgb(245,219,34)"/><text x="16.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.62%)</title><rect x="13" y="1476" width="8" height="15" fill="rgb(215,16,23)"/><text x="16.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (4 samples, 0.62%)</title><rect x="13" y="1492" width="8" height="15" fill="rgb(235,138,31)"/><text x="16.00" y="1502.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py) (4 samples, 0.62%)</title><rect x="13" y="1508" width="8" height="15" fill="rgb(214,133,20)"/><text x="16.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py) (4 samples, 0.62%)</title><rect x="13" y="1524" width="8" height="15" fill="rgb(213,179,39)"/><text x="16.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py) (4 samples, 0.62%)</title><rect x="13" y="1540" width="8" height="15" fill="rgb(224,139,43)"/><text x="16.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (4 samples, 0.62%)</title><rect x="13" y="1556" width="8" height="15" fill="rgb(205,38,48)"/><text x="16.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;) (4 samples, 0.62%)</title><rect x="13" y="1572" width="8" height="15" fill="rgb(210,103,44)"/><text x="16.00" y="1582.50"></text></g><g><title>call (jinja2/runtime.py) (3 samples, 0.47%)</title><rect x="15" y="1588" width="6" height="15" fill="rgb(230,51,11)"/><text x="18.00" y="1598.50"></text></g><g><title>process_documentation (skl2onnx/algebra/automation.py) (2 samples, 0.31%)</title><rect x="17" y="1604" width="4" height="15" fill="rgb(242,66,11)"/><text x="20.00" y="1614.50"></text></g><g><title>dedent (textwrap.py) (2 samples, 0.31%)</title><rect x="17" y="1620" width="4" height="15" fill="rgb(223,223,46)"/><text x="20.00" y="1630.50"></text></g><g><title>_sre_SRE_Pattern_findall (python3.7) (2 samples, 0.31%)</title><rect x="17" y="1636" width="4" height="15" fill="rgb(210,24,8)"/><text x="20.00" y="1646.50"></text></g><g><title>sre_ucs1_match (python3.7) (2 samples, 0.31%)</title><rect x="17" y="1652" width="4" height="15" fill="rgb(226,163,6)"/><text x="20.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="484" width="9" height="15" fill="rgb(221,118,27)"/><text x="16.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="500" width="9" height="15" fill="rgb(235,69,7)"/><text x="16.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="516" width="9" height="15" fill="rgb(220,49,43)"/><text x="16.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="532" width="9" height="15" fill="rgb(237,133,43)"/><text x="16.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.78%)</title><rect x="13" y="548" width="9" height="15" fill="rgb(218,203,30)"/><text x="16.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="564" width="9" height="15" fill="rgb(208,62,41)"/><text x="16.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (5 samples, 0.78%)</title><rect x="13" y="580" width="9" height="15" fill="rgb(221,136,43)"/><text x="16.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="596" width="9" height="15" fill="rgb(254,225,46)"/><text x="16.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="612" width="9" height="15" fill="rgb(220,165,2)"/><text x="16.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="628" width="9" height="15" fill="rgb(215,198,11)"/><text x="16.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.78%)</title><rect x="13" y="644" width="9" height="15" fill="rgb(238,38,43)"/><text x="16.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="660" width="9" height="15" fill="rgb(208,23,0)"/><text x="16.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (5 samples, 0.78%)</title><rect x="13" y="676" width="9" height="15" fill="rgb(207,73,11)"/><text x="16.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="692" width="9" height="15" fill="rgb(211,81,9)"/><text x="16.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="708" width="9" height="15" fill="rgb(252,76,28)"/><text x="16.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="724" width="9" height="15" fill="rgb(251,143,34)"/><text x="16.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.78%)</title><rect x="13" y="740" width="9" height="15" fill="rgb(225,82,32)"/><text x="16.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="756" width="9" height="15" fill="rgb(207,126,8)"/><text x="16.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (5 samples, 0.78%)</title><rect x="13" y="772" width="9" height="15" fill="rgb(226,23,5)"/><text x="16.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="788" width="9" height="15" fill="rgb(221,209,38)"/><text x="16.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="804" width="9" height="15" fill="rgb(236,44,53)"/><text x="16.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="820" width="9" height="15" fill="rgb(205,45,50)"/><text x="16.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.78%)</title><rect x="13" y="836" width="9" height="15" fill="rgb(221,6,4)"/><text x="16.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="852" width="9" height="15" fill="rgb(247,63,31)"/><text x="16.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (5 samples, 0.78%)</title><rect x="13" y="868" width="9" height="15" fill="rgb(205,144,27)"/><text x="16.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="884" width="9" height="15" fill="rgb(242,101,48)"/><text x="16.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="900" width="9" height="15" fill="rgb(248,141,25)"/><text x="16.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="916" width="9" height="15" fill="rgb(222,138,40)"/><text x="16.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="932" width="9" height="15" fill="rgb(250,31,34)"/><text x="16.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="948" width="9" height="15" fill="rgb(216,120,41)"/><text x="16.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="964" width="9" height="15" fill="rgb(239,80,39)"/><text x="16.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.78%)</title><rect x="13" y="980" width="9" height="15" fill="rgb(233,138,18)"/><text x="16.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="996" width="9" height="15" fill="rgb(242,147,24)"/><text x="16.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (5 samples, 0.78%)</title><rect x="13" y="1012" width="9" height="15" fill="rgb(221,3,10)"/><text x="16.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="1028" width="9" height="15" fill="rgb(249,205,14)"/><text x="16.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="1044" width="9" height="15" fill="rgb(211,118,24)"/><text x="16.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="1060" width="9" height="15" fill="rgb(253,33,47)"/><text x="16.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.78%)</title><rect x="13" y="1076" width="9" height="15" fill="rgb(234,168,48)"/><text x="16.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="1092" width="9" height="15" fill="rgb(217,44,33)"/><text x="16.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (5 samples, 0.78%)</title><rect x="13" y="1108" width="9" height="15" fill="rgb(249,188,30)"/><text x="16.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="1124" width="9" height="15" fill="rgb(231,6,44)"/><text x="16.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="1140" width="9" height="15" fill="rgb(252,3,49)"/><text x="16.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="1156" width="9" height="15" fill="rgb(208,226,18)"/><text x="16.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="1172" width="9" height="15" fill="rgb(247,62,47)"/><text x="16.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="1188" width="9" height="15" fill="rgb(226,162,47)"/><text x="16.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.78%)</title><rect x="13" y="1204" width="9" height="15" fill="rgb(206,82,14)"/><text x="16.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.78%)</title><rect x="13" y="1220" width="9" height="15" fill="rgb(246,107,17)"/><text x="16.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/shape_calculators/__init__.py) (1 samples, 0.16%)</title><rect x="21" y="1236" width="1" height="15" fill="rgb(238,53,36)"/><text x="24.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="21" y="1252" width="1" height="15" fill="rgb(226,96,26)"/><text x="24.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="21" y="1268" width="1" height="15" fill="rgb(252,136,7)"/><text x="24.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="21" y="1284" width="1" height="15" fill="rgb(237,112,20)"/><text x="24.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="21" y="1300" width="1" height="15" fill="rgb(224,91,37)"/><text x="24.00" y="1310.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="21" y="1316" width="1" height="15" fill="rgb(226,130,54)"/><text x="24.00" y="1326.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="21" y="1332" width="1" height="15" fill="rgb(242,158,17)"/><text x="24.00" y="1342.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="21" y="1348" width="1" height="15" fill="rgb(209,32,50)"/><text x="24.00" y="1358.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="22" y="1540" width="2" height="15" fill="rgb(207,84,4)"/><text x="25.00" y="1550.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="22" y="1556" width="2" height="15" fill="rgb(230,212,1)"/><text x="25.00" y="1566.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="22" y="1572" width="2" height="15" fill="rgb(247,9,8)"/><text x="25.00" y="1582.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="22" y="1588" width="2" height="15" fill="rgb(239,118,17)"/><text x="25.00" y="1598.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="22" y="1604" width="2" height="15" fill="rgb(252,7,22)"/><text x="25.00" y="1614.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="22" y="1620" width="2" height="15" fill="rgb(223,67,24)"/><text x="25.00" y="1630.50"></text></g><g><title>&lt;module&gt; (matplotlib/__init__.py) (1 samples, 0.16%)</title><rect x="22" y="1636" width="2" height="15" fill="rgb(229,111,39)"/><text x="25.00" y="1646.50"></text></g><g><title>rc_params (matplotlib/__init__.py) (1 samples, 0.16%)</title><rect x="22" y="1652" width="2" height="15" fill="rgb(211,117,1)"/><text x="25.00" y="1662.50"></text></g><g><title>rc_params_from_file (matplotlib/__init__.py) (1 samples, 0.16%)</title><rect x="22" y="1668" width="2" height="15" fill="rgb(205,89,13)"/><text x="25.00" y="1678.50"></text></g><g><title>__init__ (matplotlib/__init__.py) (1 samples, 0.16%)</title><rect x="22" y="1684" width="2" height="15" fill="rgb(205,215,24)"/><text x="25.00" y="1694.50"></text></g><g><title>update (_collections_abc.py) (1 samples, 0.16%)</title><rect x="22" y="1700" width="2" height="15" fill="rgb(226,121,49)"/><text x="25.00" y="1710.50"></text></g><g><title>__setitem__ (matplotlib/__init__.py) (1 samples, 0.16%)</title><rect x="22" y="1716" width="2" height="15" fill="rgb(213,174,51)"/><text x="25.00" y="1726.50"></text></g><g><title>validate_cycler (matplotlib/rcsetup.py) (1 samples, 0.16%)</title><rect x="22" y="1732" width="2" height="15" fill="rgb(205,60,31)"/><text x="25.00" y="1742.50"></text></g><g><title>f (matplotlib/rcsetup.py) (1 samples, 0.16%)</title><rect x="22" y="1748" width="2" height="15" fill="rgb(226,222,20)"/><text x="25.00" y="1758.50"></text></g><g><title>&lt;listcomp&gt; (matplotlib/rcsetup.py) (1 samples, 0.16%)</title><rect x="22" y="1764" width="2" height="15" fill="rgb(251,47,50)"/><text x="25.00" y="1774.50"></text></g><g><title>validate_color_for_prop_cycle (matplotlib/rcsetup.py) (1 samples, 0.16%)</title><rect x="22" y="1780" width="2" height="15" fill="rgb(247,177,47)"/><text x="25.00" y="1790.50"></text></g><g><title>match (re.py) (1 samples, 0.16%)</title><rect x="22" y="1796" width="2" height="15" fill="rgb(217,196,0)"/><text x="25.00" y="1806.50"></text></g><g><title>_compile (re.py) (1 samples, 0.16%)</title><rect x="22" y="1812" width="2" height="15" fill="rgb(238,98,27)"/><text x="25.00" y="1822.50"></text></g><g><title>compile (sre_compile.py) (1 samples, 0.16%)</title><rect x="22" y="1828" width="2" height="15" fill="rgb(213,37,4)"/><text x="25.00" y="1838.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (7 samples, 1.09%)</title><rect x="13" y="340" width="13" height="15" fill="rgb(208,57,28)"/><text x="16.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.09%)</title><rect x="13" y="356" width="13" height="15" fill="rgb(207,157,48)"/><text x="16.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.09%)</title><rect x="13" y="372" width="13" height="15" fill="rgb(247,143,12)"/><text x="16.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.09%)</title><rect x="13" y="388" width="13" height="15" fill="rgb(234,152,42)"/><text x="16.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 1.09%)</title><rect x="13" y="404" width="13" height="15" fill="rgb(250,128,53)"/><text x="16.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.09%)</title><rect x="13" y="420" width="13" height="15" fill="rgb(218,128,18)"/><text x="16.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (7 samples, 1.09%)</title><rect x="13" y="436" width="13" height="15" fill="rgb(227,20,32)"/><text x="16.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.09%)</title><rect x="13" y="452" width="13" height="15" fill="rgb(248,89,12)"/><text x="16.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.09%)</title><rect x="13" y="468" width="13" height="15" fill="rgb(238,129,9)"/><text x="16.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="484" width="4" height="15" fill="rgb(215,203,49)"/><text x="25.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="22" y="500" width="4" height="15" fill="rgb(245,81,15)"/><text x="25.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="516" width="4" height="15" fill="rgb(208,18,16)"/><text x="25.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.31%)</title><rect x="22" y="532" width="4" height="15" fill="rgb(229,198,44)"/><text x="25.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="548" width="4" height="15" fill="rgb(247,118,22)"/><text x="25.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="564" width="4" height="15" fill="rgb(216,79,42)"/><text x="25.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="580" width="4" height="15" fill="rgb(232,138,0)"/><text x="25.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="22" y="596" width="4" height="15" fill="rgb(246,176,44)"/><text x="25.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="612" width="4" height="15" fill="rgb(212,113,28)"/><text x="25.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (2 samples, 0.31%)</title><rect x="22" y="628" width="4" height="15" fill="rgb(248,25,40)"/><text x="25.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="644" width="4" height="15" fill="rgb(232,208,42)"/><text x="25.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="660" width="4" height="15" fill="rgb(209,0,5)"/><text x="25.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="676" width="4" height="15" fill="rgb(252,134,6)"/><text x="25.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="22" y="692" width="4" height="15" fill="rgb(219,216,0)"/><text x="25.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="708" width="4" height="15" fill="rgb(220,164,27)"/><text x="25.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (2 samples, 0.31%)</title><rect x="22" y="724" width="4" height="15" fill="rgb(250,104,12)"/><text x="25.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="740" width="4" height="15" fill="rgb(209,72,47)"/><text x="25.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="756" width="4" height="15" fill="rgb(234,201,18)"/><text x="25.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="772" width="4" height="15" fill="rgb(226,137,43)"/><text x="25.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="22" y="788" width="4" height="15" fill="rgb(231,85,42)"/><text x="25.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="804" width="4" height="15" fill="rgb(229,13,48)"/><text x="25.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (2 samples, 0.31%)</title><rect x="22" y="820" width="4" height="15" fill="rgb(227,89,48)"/><text x="25.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="836" width="4" height="15" fill="rgb(250,222,51)"/><text x="25.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="852" width="4" height="15" fill="rgb(230,167,37)"/><text x="25.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="868" width="4" height="15" fill="rgb(221,173,39)"/><text x="25.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="22" y="884" width="4" height="15" fill="rgb(254,14,33)"/><text x="25.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="900" width="4" height="15" fill="rgb(237,24,10)"/><text x="25.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (2 samples, 0.31%)</title><rect x="22" y="916" width="4" height="15" fill="rgb(210,189,44)"/><text x="25.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="932" width="4" height="15" fill="rgb(209,223,15)"/><text x="25.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="948" width="4" height="15" fill="rgb(229,207,28)"/><text x="25.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="964" width="4" height="15" fill="rgb(221,131,48)"/><text x="25.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="22" y="980" width="4" height="15" fill="rgb(226,25,23)"/><text x="25.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="996" width="4" height="15" fill="rgb(205,222,13)"/><text x="25.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (2 samples, 0.31%)</title><rect x="22" y="1012" width="4" height="15" fill="rgb(206,70,48)"/><text x="25.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1028" width="4" height="15" fill="rgb(224,24,1)"/><text x="25.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1044" width="4" height="15" fill="rgb(228,124,21)"/><text x="25.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1060" width="4" height="15" fill="rgb(225,134,14)"/><text x="25.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="22" y="1076" width="4" height="15" fill="rgb(239,211,15)"/><text x="25.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1092" width="4" height="15" fill="rgb(234,114,30)"/><text x="25.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (2 samples, 0.31%)</title><rect x="22" y="1108" width="4" height="15" fill="rgb(241,93,23)"/><text x="25.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1124" width="4" height="15" fill="rgb(238,197,12)"/><text x="25.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1140" width="4" height="15" fill="rgb(243,129,29)"/><text x="25.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1156" width="4" height="15" fill="rgb(223,7,53)"/><text x="25.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="22" y="1172" width="4" height="15" fill="rgb(210,42,51)"/><text x="25.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1188" width="4" height="15" fill="rgb(239,16,48)"/><text x="25.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (2 samples, 0.31%)</title><rect x="22" y="1204" width="4" height="15" fill="rgb(210,57,37)"/><text x="25.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1220" width="4" height="15" fill="rgb(216,206,6)"/><text x="25.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1236" width="4" height="15" fill="rgb(227,20,46)"/><text x="25.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1252" width="4" height="15" fill="rgb(238,162,16)"/><text x="25.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="22" y="1268" width="4" height="15" fill="rgb(220,89,26)"/><text x="25.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1284" width="4" height="15" fill="rgb(214,162,14)"/><text x="25.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (2 samples, 0.31%)</title><rect x="22" y="1300" width="4" height="15" fill="rgb(216,103,34)"/><text x="25.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1316" width="4" height="15" fill="rgb(225,6,4)"/><text x="25.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1332" width="4" height="15" fill="rgb(215,132,28)"/><text x="25.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1348" width="4" height="15" fill="rgb(206,20,40)"/><text x="25.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="22" y="1364" width="4" height="15" fill="rgb(232,92,10)"/><text x="25.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1380" width="4" height="15" fill="rgb(212,220,42)"/><text x="25.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (2 samples, 0.31%)</title><rect x="22" y="1396" width="4" height="15" fill="rgb(211,148,19)"/><text x="25.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1412" width="4" height="15" fill="rgb(243,224,45)"/><text x="25.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1428" width="4" height="15" fill="rgb(236,219,0)"/><text x="25.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1444" width="4" height="15" fill="rgb(230,123,10)"/><text x="25.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="22" y="1460" width="4" height="15" fill="rgb(225,2,2)"/><text x="25.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1476" width="4" height="15" fill="rgb(206,83,1)"/><text x="25.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (2 samples, 0.31%)</title><rect x="22" y="1492" width="4" height="15" fill="rgb(208,6,22)"/><text x="25.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1508" width="4" height="15" fill="rgb(238,76,26)"/><text x="25.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="22" y="1524" width="4" height="15" fill="rgb(224,14,54)"/><text x="25.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1540" width="2" height="15" fill="rgb(209,170,31)"/><text x="27.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="24" y="1556" width="2" height="15" fill="rgb(219,128,14)"/><text x="27.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1572" width="2" height="15" fill="rgb(252,51,32)"/><text x="27.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py) (1 samples, 0.16%)</title><rect x="24" y="1588" width="2" height="15" fill="rgb(231,77,31)"/><text x="27.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1604" width="2" height="15" fill="rgb(217,47,44)"/><text x="27.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1620" width="2" height="15" fill="rgb(219,150,13)"/><text x="27.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1636" width="2" height="15" fill="rgb(231,164,14)"/><text x="27.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="24" y="1652" width="2" height="15" fill="rgb(241,74,50)"/><text x="27.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1668" width="2" height="15" fill="rgb(221,46,15)"/><text x="27.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/tools.py) (1 samples, 0.16%)</title><rect x="24" y="1684" width="2" height="15" fill="rgb(227,215,37)"/><text x="27.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1700" width="2" height="15" fill="rgb(210,108,3)"/><text x="27.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1716" width="2" height="15" fill="rgb(245,141,42)"/><text x="27.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1732" width="2" height="15" fill="rgb(228,176,23)"/><text x="27.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="24" y="1748" width="2" height="15" fill="rgb(251,195,11)"/><text x="27.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1764" width="2" height="15" fill="rgb(229,228,53)"/><text x="27.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/table.py) (1 samples, 0.16%)</title><rect x="24" y="1780" width="2" height="15" fill="rgb(227,38,52)"/><text x="27.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1796" width="2" height="15" fill="rgb(248,228,36)"/><text x="27.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1812" width="2" height="15" fill="rgb(244,35,17)"/><text x="27.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1828" width="2" height="15" fill="rgb(226,140,51)"/><text x="27.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="24" y="1844" width="2" height="15" fill="rgb(220,112,15)"/><text x="27.00" y="1854.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="24" y="1860" width="2" height="15" fill="rgb(214,213,1)"/><text x="27.00" y="1870.50"></text></g><g><title>&lt;module&gt; (matplotlib/text.py) (1 samples, 0.16%)</title><rect x="24" y="1876" width="2" height="15" fill="rgb(242,175,31)"/><text x="27.00" y="1886.50"></text></g><g><title>kwdoc (matplotlib/artist.py) (1 samples, 0.16%)</title><rect x="24" y="1892" width="2" height="15" fill="rgb(209,75,23)"/><text x="27.00" y="1902.50"></text></g><g><title>pprint_setters (matplotlib/artist.py) (1 samples, 0.16%)</title><rect x="24" y="1908" width="2" height="15" fill="rgb(229,98,30)"/><text x="27.00" y="1918.50"></text></g><g><title>_get_setters_and_targets (matplotlib/artist.py) (1 samples, 0.16%)</title><rect x="24" y="1924" width="2" height="15" fill="rgb(222,155,25)"/><text x="27.00" y="1934.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (8 samples, 1.24%)</title><rect x="13" y="244" width="15" height="15" fill="rgb(215,163,33)"/><text x="16.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="13" y="260" width="15" height="15" fill="rgb(223,52,9)"/><text x="16.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="13" y="276" width="15" height="15" fill="rgb(211,161,10)"/><text x="16.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="13" y="292" width="15" height="15" fill="rgb(230,65,24)"/><text x="16.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.24%)</title><rect x="13" y="308" width="15" height="15" fill="rgb(244,152,40)"/><text x="16.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="13" y="324" width="15" height="15" fill="rgb(211,137,44)"/><text x="16.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py) (1 samples, 0.16%)</title><rect x="26" y="340" width="2" height="15" fill="rgb(215,174,27)"/><text x="29.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="356" width="2" height="15" fill="rgb(211,46,21)"/><text x="29.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="372" width="2" height="15" fill="rgb(231,223,48)"/><text x="29.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="388" width="2" height="15" fill="rgb(228,168,13)"/><text x="29.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="404" width="2" height="15" fill="rgb(226,5,43)"/><text x="29.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="420" width="2" height="15" fill="rgb(253,123,41)"/><text x="29.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="436" width="2" height="15" fill="rgb(254,120,8)"/><text x="29.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="26" y="452" width="2" height="15" fill="rgb(246,137,10)"/><text x="29.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="468" width="2" height="15" fill="rgb(224,42,13)"/><text x="29.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py) (1 samples, 0.16%)</title><rect x="26" y="484" width="2" height="15" fill="rgb(234,46,48)"/><text x="29.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="500" width="2" height="15" fill="rgb(219,177,8)"/><text x="29.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="516" width="2" height="15" fill="rgb(208,94,13)"/><text x="29.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="532" width="2" height="15" fill="rgb(227,136,33)"/><text x="29.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="26" y="548" width="2" height="15" fill="rgb(218,190,11)"/><text x="29.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="564" width="2" height="15" fill="rgb(234,144,3)"/><text x="29.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/code_helper.py) (1 samples, 0.16%)</title><rect x="26" y="580" width="2" height="15" fill="rgb(213,144,31)"/><text x="29.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="596" width="2" height="15" fill="rgb(251,125,41)"/><text x="29.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="612" width="2" height="15" fill="rgb(237,89,26)"/><text x="29.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="628" width="2" height="15" fill="rgb(215,223,48)"/><text x="29.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="26" y="644" width="2" height="15" fill="rgb(249,160,19)"/><text x="29.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="660" width="2" height="15" fill="rgb(250,188,22)"/><text x="29.00" y="670.50"></text></g><g><title>&lt;module&gt; (autopep8.py) (1 samples, 0.16%)</title><rect x="26" y="676" width="2" height="15" fill="rgb(230,123,32)"/><text x="29.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="692" width="2" height="15" fill="rgb(249,156,16)"/><text x="29.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="708" width="2" height="15" fill="rgb(244,114,23)"/><text x="29.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="724" width="2" height="15" fill="rgb(210,220,34)"/><text x="29.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="26" y="740" width="2" height="15" fill="rgb(223,21,2)"/><text x="29.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="26" y="756" width="2" height="15" fill="rgb(254,20,16)"/><text x="29.00" y="766.50"></text></g><g><title>&lt;module&gt; (pycodestyle.py) (1 samples, 0.16%)</title><rect x="26" y="772" width="2" height="15" fill="rgb(247,93,16)"/><text x="29.00" y="782.50"></text></g><g><title>compile (re.py) (1 samples, 0.16%)</title><rect x="26" y="788" width="2" height="15" fill="rgb(225,100,19)"/><text x="29.00" y="798.50"></text></g><g><title>_compile (re.py) (1 samples, 0.16%)</title><rect x="26" y="804" width="2" height="15" fill="rgb(208,23,41)"/><text x="29.00" y="814.50"></text></g><g><title>compile (sre_compile.py) (1 samples, 0.16%)</title><rect x="26" y="820" width="2" height="15" fill="rgb(251,12,34)"/><text x="29.00" y="830.50"></text></g><g><title>parse (sre_parse.py) (1 samples, 0.16%)</title><rect x="26" y="836" width="2" height="15" fill="rgb(222,102,4)"/><text x="29.00" y="846.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.16%)</title><rect x="26" y="852" width="2" height="15" fill="rgb(231,227,38)"/><text x="29.00" y="862.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.16%)</title><rect x="26" y="868" width="2" height="15" fill="rgb(215,59,22)"/><text x="29.00" y="878.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.16%)</title><rect x="26" y="884" width="2" height="15" fill="rgb(239,47,32)"/><text x="29.00" y="894.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.16%)</title><rect x="26" y="900" width="2" height="15" fill="rgb(233,36,15)"/><text x="29.00" y="910.50"></text></g><g><title>__getitem__ (sre_parse.py) (1 samples, 0.16%)</title><rect x="26" y="916" width="2" height="15" fill="rgb(243,42,52)"/><text x="29.00" y="926.50"></text></g><g><title>__init__ (sre_parse.py) (1 samples, 0.16%)</title><rect x="26" y="932" width="2" height="15" fill="rgb(247,35,44)"/><text x="29.00" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="28" y="260" width="2" height="15" fill="rgb(237,111,37)"/><text x="31.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="28" y="276" width="2" height="15" fill="rgb(228,210,54)"/><text x="31.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="28" y="292" width="2" height="15" fill="rgb(212,166,21)"/><text x="31.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="28" y="308" width="2" height="15" fill="rgb(250,39,34)"/><text x="31.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="28" y="324" width="2" height="15" fill="rgb(239,195,1)"/><text x="31.00" y="334.50"></text></g><g><title>&lt;module&gt; (numpy/testing/__init__.py) (1 samples, 0.16%)</title><rect x="28" y="340" width="2" height="15" fill="rgb(238,38,31)"/><text x="31.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="28" y="356" width="2" height="15" fill="rgb(212,228,18)"/><text x="31.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="28" y="372" width="2" height="15" fill="rgb(236,170,26)"/><text x="31.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="28" y="388" width="2" height="15" fill="rgb(245,212,53)"/><text x="31.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="28" y="404" width="2" height="15" fill="rgb(209,58,41)"/><text x="31.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="28" y="420" width="2" height="15" fill="rgb(225,126,24)"/><text x="31.00" y="430.50"></text></g><g><title>&lt;module&gt; (unittest/__init__.py) (1 samples, 0.16%)</title><rect x="28" y="436" width="2" height="15" fill="rgb(221,11,14)"/><text x="31.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="28" y="452" width="2" height="15" fill="rgb(243,126,50)"/><text x="31.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="28" y="468" width="2" height="15" fill="rgb(254,4,27)"/><text x="31.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="28" y="484" width="2" height="15" fill="rgb(226,71,18)"/><text x="31.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="28" y="500" width="2" height="15" fill="rgb(251,60,46)"/><text x="31.00" y="510.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="28" y="516" width="2" height="15" fill="rgb(205,99,13)"/><text x="31.00" y="526.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="28" y="532" width="2" height="15" fill="rgb(221,189,32)"/><text x="31.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.87%)</title><rect x="10" y="68" width="22" height="15" fill="rgb(213,192,35)"/><text x="13.00" y="78.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.87%)</title><rect x="10" y="84" width="22" height="15" fill="rgb(212,34,40)"/><text x="13.00" y="94.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.87%)</title><rect x="10" y="100" width="22" height="15" fill="rgb(210,185,47)"/><text x="13.00" y="110.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (12 samples, 1.87%)</title><rect x="10" y="116" width="22" height="15" fill="rgb(206,42,7)"/><text x="13.00" y="126.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.87%)</title><rect x="10" y="132" width="22" height="15" fill="rgb(232,125,27)"/><text x="13.00" y="142.50">_..</text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_m_cl.py) (12 samples, 1.87%)</title><rect x="10" y="148" width="22" height="15" fill="rgb(253,27,28)"/><text x="13.00" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.87%)</title><rect x="10" y="164" width="22" height="15" fill="rgb(239,48,32)"/><text x="13.00" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.87%)</title><rect x="10" y="180" width="22" height="15" fill="rgb(230,177,46)"/><text x="13.00" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.56%)</title><rect x="13" y="196" width="19" height="15" fill="rgb(238,183,51)"/><text x="16.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (10 samples, 1.56%)</title><rect x="13" y="212" width="19" height="15" fill="rgb(205,111,39)"/><text x="16.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.56%)</title><rect x="13" y="228" width="19" height="15" fill="rgb(211,204,28)"/><text x="16.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py) (2 samples, 0.31%)</title><rect x="28" y="244" width="4" height="15" fill="rgb(221,225,9)"/><text x="31.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="260" width="2" height="15" fill="rgb(247,30,4)"/><text x="33.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="276" width="2" height="15" fill="rgb(217,191,35)"/><text x="33.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="292" width="2" height="15" fill="rgb(222,64,43)"/><text x="33.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="308" width="2" height="15" fill="rgb(241,90,33)"/><text x="33.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="324" width="2" height="15" fill="rgb(249,220,8)"/><text x="33.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="30" y="340" width="2" height="15" fill="rgb(248,168,3)"/><text x="33.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="356" width="2" height="15" fill="rgb(215,36,19)"/><text x="33.00" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/core/__init__.py) (1 samples, 0.16%)</title><rect x="30" y="372" width="2" height="15" fill="rgb(205,167,54)"/><text x="33.00" y="382.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="388" width="2" height="15" fill="rgb(228,87,54)"/><text x="33.00" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="404" width="2" height="15" fill="rgb(206,17,44)"/><text x="33.00" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="420" width="2" height="15" fill="rgb(251,159,47)"/><text x="33.00" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="436" width="2" height="15" fill="rgb(243,161,49)"/><text x="33.00" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="452" width="2" height="15" fill="rgb(209,49,43)"/><text x="33.00" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="30" y="468" width="2" height="15" fill="rgb(244,228,18)"/><text x="33.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="484" width="2" height="15" fill="rgb(217,173,45)"/><text x="33.00" y="494.50"></text></g><g><title>&lt;module&gt; (numpy/core/numeric.py) (1 samples, 0.16%)</title><rect x="30" y="500" width="2" height="15" fill="rgb(227,207,1)"/><text x="33.00" y="510.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="516" width="2" height="15" fill="rgb(244,109,25)"/><text x="33.00" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="532" width="2" height="15" fill="rgb(235,130,47)"/><text x="33.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="548" width="2" height="15" fill="rgb(248,51,10)"/><text x="33.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="564" width="2" height="15" fill="rgb(250,32,1)"/><text x="33.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="30" y="580" width="2" height="15" fill="rgb(252,193,38)"/><text x="33.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="30" y="596" width="2" height="15" fill="rgb(245,161,39)"/><text x="33.00" y="606.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="30" y="612" width="2" height="15" fill="rgb(223,95,13)"/><text x="33.00" y="622.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="30" y="628" width="2" height="15" fill="rgb(233,103,15)"/><text x="33.00" y="638.50"></text></g><g><title>0x7f3021a73ff9 (?) (1 samples, 0.16%)</title><rect x="37" y="212" width="2" height="15" fill="rgb(221,199,14)"/><text x="40.00" y="222.50"></text></g><g><title>0x7f3021a6eef6 (?) (1 samples, 0.16%)</title><rect x="37" y="228" width="2" height="15" fill="rgb(229,35,14)"/><text x="40.00" y="238.50"></text></g><g><title>0x7f3021a63962 (?) (1 samples, 0.16%)</title><rect x="37" y="244" width="2" height="15" fill="rgb(237,32,43)"/><text x="40.00" y="254.50"></text></g><g><title>0x7f3021a977a7 (?) (1 samples, 0.16%)</title><rect x="37" y="260" width="2" height="15" fill="rgb(207,146,36)"/><text x="40.00" y="270.50"></text></g><g><title>0x7f3021a97379 (?) (1 samples, 0.16%)</title><rect x="37" y="276" width="2" height="15" fill="rgb(213,187,3)"/><text x="40.00" y="286.50"></text></g><g><title>0x7f3021ef58b8 (?) (1 samples, 0.16%)</title><rect x="37" y="292" width="2" height="15" fill="rgb(205,67,32)"/><text x="40.00" y="302.50"></text></g><g><title>0x7f3021ef3c7f (?) (1 samples, 0.16%)</title><rect x="37" y="308" width="2" height="15" fill="rgb(240,15,31)"/><text x="40.00" y="318.50"></text></g><g><title>0x7f3021f0699c (?) (1 samples, 0.16%)</title><rect x="37" y="324" width="2" height="15" fill="rgb(215,14,33)"/><text x="40.00" y="334.50"></text></g><g><title>0x7f3021c31450 (?) (1 samples, 0.16%)</title><rect x="37" y="340" width="2" height="15" fill="rgb(207,217,42)"/><text x="40.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.16%)</title><rect x="37" y="356" width="2" height="15" fill="rgb(222,114,26)"/><text x="40.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="37" y="372" width="2" height="15" fill="rgb(219,203,5)"/><text x="40.00" y="382.50"></text></g><g><title>0x7f3061ab706d (libc-2.29.so) (1 samples, 0.16%)</title><rect x="37" y="388" width="2" height="15" fill="rgb(233,83,34)"/><text x="40.00" y="398.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (166 samples, 25.82%)</title><rect x="43" y="356" width="304" height="15" fill="rgb(230,57,26)"/><text x="46.00" y="366.50">onnxruntime::ml::TreeEnsembleClassifier&lt;..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;long, float&gt;&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="345" y="372" width="2" height="15" fill="rgb(213,196,37)"/><text x="348.00" y="382.50"></text></g><g><title>0x7f3021a3a930 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="345" y="388" width="2" height="15" fill="rgb(244,127,6)"/><text x="348.00" y="398.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (169 samples, 26.28%)</title><rect x="39" y="340" width="310" height="15" fill="rgb(230,100,46)"/><text x="42.00" y="350.50">onnxruntime::ml::TreeEnsembleClassifier&lt;f..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="347" y="356" width="2" height="15" fill="rgb(239,113,53)"/><text x="350.00" y="366.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, OrtMemType&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt; &gt;::_M_erase [clone .localalias.69] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="347" y="372" width="2" height="15" fill="rgb(233,6,24)"/><text x="350.00" y="382.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.16%)</title><rect x="347" y="388" width="2" height="15" fill="rgb(245,214,18)"/><text x="350.00" y="398.50"></text></g><g><title>0x7f3021a3bba0 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="349" y="356" width="2" height="15" fill="rgb(213,190,6)"/><text x="352.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.16%)</title><rect x="351" y="356" width="2" height="15" fill="rgb(217,88,50)"/><text x="354.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="351" y="372" width="2" height="15" fill="rgb(224,3,16)"/><text x="354.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (172 samples, 26.75%)</title><rect x="39" y="260" width="316" height="15" fill="rgb(252,41,16)"/><text x="42.00" y="270.50">onnxruntime::InferenceSession::Run (onnxru..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (172 samples, 26.75%)</title><rect x="39" y="276" width="316" height="15" fill="rgb(235,187,12)"/><text x="42.00" y="286.50">onnxruntime::InferenceSession::Run (onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (172 samples, 26.75%)</title><rect x="39" y="292" width="316" height="15" fill="rgb(234,112,48)"/><text x="42.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (172 samples, 26.75%)</title><rect x="39" y="308" width="316" height="15" fill="rgb(207,24,36)"/><text x="42.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnx..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (172 samples, 26.75%)</title><rect x="39" y="324" width="316" height="15" fill="rgb(215,158,12)"/><text x="42.00" y="334.50">onnxruntime::SequentialExecutor::Execute (..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.47%)</title><rect x="349" y="340" width="6" height="15" fill="rgb(214,21,43)"/><text x="352.00" y="350.50"></text></g><g><title>std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.16%)</title><rect x="353" y="356" width="2" height="15" fill="rgb(226,168,12)"/><text x="356.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.16%)</title><rect x="353" y="372" width="2" height="15" fill="rgb(211,206,18)"/><text x="356.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="353" y="388" width="2" height="15" fill="rgb(213,197,29)"/><text x="356.00" y="398.50"></text></g><g><title>0x7f3061ab7028 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="353" y="404" width="2" height="15" fill="rgb(225,169,6)"/><text x="356.00" y="414.50"></text></g><g><title>0x7f3061ab4bc6 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="353" y="420" width="2" height="15" fill="rgb(245,61,51)"/><text x="356.00" y="430.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.47%)</title><rect x="355" y="260" width="5" height="15" fill="rgb(233,130,54)"/><text x="358.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.31%)</title><rect x="356" y="276" width="4" height="15" fill="rgb(249,13,37)"/><text x="359.00" y="286.50"></text></g><g><title>0x7f3061ab5906 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="362" y="292" width="2" height="15" fill="rgb(247,191,41)"/><text x="365.00" y="302.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (183 samples, 28.46%)</title><rect x="32" y="100" width="335" height="15" fill="rgb(254,210,50)"/><text x="35.00" y="110.50">profile (bench_RandomForestClassifier_default..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (180 samples, 27.99%)</title><rect x="37" y="116" width="330" height="15" fill="rgb(221,100,16)"/><text x="40.00" y="126.50">time_predict (mlprodict/asv_benchmark/common..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (180 samples, 27.99%)</title><rect x="37" y="132" width="330" height="15" fill="rgb(216,105,22)"/><text x="40.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (180 samples, 27.99%)</title><rect x="37" y="148" width="330" height="15" fill="rgb(251,158,49)"/><text x="40.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (180 samples, 27.99%)</title><rect x="37" y="164" width="330" height="15" fill="rgb(253,118,36)"/><text x="40.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_in..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (180 samples, 27.99%)</title><rect x="37" y="180" width="330" height="15" fill="rgb(217,132,3)"/><text x="40.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (180 samples, 27.99%)</title><rect x="37" y="196" width="330" height="15" fill="rgb(239,126,41)"/><text x="40.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (179 samples, 27.84%)</title><rect x="39" y="212" width="328" height="15" fill="rgb(223,4,22)"/><text x="42.00" y="222.50">pybind11::cpp_function::dispatcher (onnxrunt..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (179 samples, 27.84%)</title><rect x="39" y="228" width="328" height="15" fill="rgb(221,172,48)"/><text x="42.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnx..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (179 samples, 27.84%)</title><rect x="39" y="244" width="328" height="15" fill="rgb(237,80,45)"/><text x="42.00" y="254.50">onnxruntime::python::addObjectMethods(pybind..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.62%)</title><rect x="360" y="260" width="7" height="15" fill="rgb(206,116,24)"/><text x="363.00" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.62%)</title><rect x="360" y="276" width="7" height="15" fill="rgb(242,222,29)"/><text x="363.00" y="286.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.31%)</title><rect x="364" y="292" width="3" height="15" fill="rgb(251,112,6)"/><text x="367.00" y="302.50"></text></g><g><title>0x7f3061ab5d07 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="366" y="308" width="1" height="15" fill="rgb(225,37,8)"/><text x="369.00" y="318.50"></text></g><g><title>profile_ort (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (185 samples, 28.77%)</title><rect x="32" y="68" width="339" height="15" fill="rgb(230,109,32)"/><text x="35.00" y="78.50">profile_ort (bench_RandomForestClassifier_def..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (185 samples, 28.77%)</title><rect x="32" y="84" width="339" height="15" fill="rgb(246,153,31)"/><text x="35.00" y="94.50">setup_profile (bench_RandomForestClassifier_d..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.31%)</title><rect x="367" y="100" width="4" height="15" fill="rgb(214,197,20)"/><text x="370.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.31%)</title><rect x="367" y="116" width="4" height="15" fill="rgb(247,176,51)"/><text x="370.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.31%)</title><rect x="367" y="132" width="4" height="15" fill="rgb(254,155,33)"/><text x="370.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (2 samples, 0.31%)</title><rect x="367" y="148" width="4" height="15" fill="rgb(237,109,14)"/><text x="370.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (2 samples, 0.31%)</title><rect x="367" y="164" width="4" height="15" fill="rgb(206,153,43)"/><text x="370.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (2 samples, 0.31%)</title><rect x="367" y="180" width="4" height="15" fill="rgb(212,162,52)"/><text x="370.00" y="190.50"></text></g><g><title>convert_sklearn_random_forest_classifier (skl2onnx/operator_converters/random_forest.py) (2 samples, 0.31%)</title><rect x="367" y="196" width="4" height="15" fill="rgb(210,173,48)"/><text x="370.00" y="206.50"></text></g><g><title>add_node (skl2onnx/common/_container.py) (2 samples, 0.31%)</title><rect x="367" y="212" width="4" height="15" fill="rgb(244,0,21)"/><text x="370.00" y="222.50"></text></g><g><title>make_node (skl2onnx/proto/onnx_helper_modified.py) (2 samples, 0.31%)</title><rect x="367" y="228" width="4" height="15" fill="rgb(233,212,4)"/><text x="370.00" y="238.50"></text></g><g><title>google::protobuf::python::repeated_composite_container::Extend (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="367" y="244" width="4" height="15" fill="rgb(235,61,51)"/><text x="370.00" y="254.50"></text></g><g><title>&lt;genexpr&gt; (skl2onnx/proto/onnx_helper_modified.py) (2 samples, 0.31%)</title><rect x="367" y="260" width="4" height="15" fill="rgb(243,163,31)"/><text x="370.00" y="270.50"></text></g><g><title>make_attribute (skl2onnx/proto/onnx_helper_modified.py) (2 samples, 0.31%)</title><rect x="367" y="276" width="4" height="15" fill="rgb(215,99,4)"/><text x="370.00" y="286.50"></text></g><g><title>&lt;listcomp&gt; (skl2onnx/proto/onnx_helper_modified.py) (2 samples, 0.31%)</title><rect x="367" y="292" width="4" height="15" fill="rgb(220,36,43)"/><text x="370.00" y="302.50"></text></g><g><title>_to_bytes_or_false (onnx/helper.py) (1 samples, 0.16%)</title><rect x="369" y="308" width="2" height="15" fill="rgb(228,51,9)"/><text x="372.00" y="318.50"></text></g><g><title>0x7f302ba7adaa (libgomp.so.1.0.0) (1 samples, 0.16%)</title><rect x="373" y="468" width="2" height="15" fill="rgb(236,210,30)"/><text x="376.00" y="478.50"></text></g><g><title>0x7f302ba7ccfd (libgomp.so.1.0.0) (1 samples, 0.16%)</title><rect x="373" y="484" width="2" height="15" fill="rgb(253,184,29)"/><text x="376.00" y="494.50"></text></g><g><title>std::isnan (cmath) (1 samples, 0.16%)</title><rect x="411" y="500" width="2" height="15" fill="rgb(218,203,1)"/><text x="414.00" y="510.50"></text></g><g><title>std::map&lt;long, long, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_map.h) (27 samples, 4.20%)</title><rect x="413" y="500" width="50" height="15" fill="rgb(217,26,12)"/><text x="416.00" y="510.50">std::..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h) (27 samples, 4.20%)</title><rect x="413" y="516" width="50" height="15" fill="rgb(210,26,48)"/><text x="416.00" y="526.50">std::..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h) (26 samples, 4.04%)</title><rect x="415" y="532" width="48" height="15" fill="rgb(214,198,16)"/><text x="418.00" y="542.50">std:..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::operator[] (stl_vector.h) (2 samples, 0.31%)</title><rect x="463" y="500" width="3" height="15" fill="rgb(253,14,12)"/><text x="466.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (51 samples, 7.93%)</title><rect x="375" y="484" width="93" height="15" fill="rgb(207,210,46)"/><text x="378.00" y="494.50">RuntimeTree..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::size (stl_vector.h) (1 samples, 0.16%)</title><rect x="466" y="500" width="2" height="15" fill="rgb(235,126,4)"/><text x="469.00" y="510.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (54 samples, 8.40%)</title><rect x="371" y="100" width="99" height="15" fill="rgb(237,51,21)"/><text x="374.00" y="110.50">profile (be..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (54 samples, 8.40%)</title><rect x="371" y="116" width="99" height="15" fill="rgb(212,140,3)"/><text x="374.00" y="126.50">time_predic..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (54 samples, 8.40%)</title><rect x="371" y="132" width="99" height="15" fill="rgb(217,210,8)"/><text x="374.00" y="142.50">&lt;lambda&gt; (m..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (54 samples, 8.40%)</title><rect x="371" y="148" width="99" height="15" fill="rgb(206,66,52)"/><text x="374.00" y="158.50">run (mlprod..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (54 samples, 8.40%)</title><rect x="371" y="164" width="99" height="15" fill="rgb(214,125,19)"/><text x="374.00" y="174.50">_run_sequen..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (54 samples, 8.40%)</title><rect x="371" y="180" width="99" height="15" fill="rgb(208,8,21)"/><text x="374.00" y="190.50">run (mlprod..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (53 samples, 8.24%)</title><rect x="373" y="196" width="97" height="15" fill="rgb(241,162,7)"/><text x="376.00" y="206.50">run (mlprod..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (53 samples, 8.24%)</title><rect x="373" y="212" width="97" height="15" fill="rgb(209,91,21)"/><text x="376.00" y="222.50">run (mlprod..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py) (53 samples, 8.24%)</title><rect x="373" y="228" width="97" height="15" fill="rgb(237,185,25)"/><text x="376.00" y="238.50">_run (mlpro..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (53 samples, 8.24%)</title><rect x="373" y="244" width="97" height="15" fill="rgb(226,208,44)"/><text x="376.00" y="254.50">pybind11::c..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (53 samples, 8.24%)</title><rect x="373" y="260" width="97" height="15" fill="rgb(207,143,8)"/><text x="376.00" y="270.50">void pybind..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (53 samples, 8.24%)</title><rect x="373" y="276" width="97" height="15" fill="rgb(219,0,43)"/><text x="376.00" y="286.50">void pybind..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (53 samples, 8.24%)</title><rect x="373" y="292" width="97" height="15" fill="rgb(248,168,38)"/><text x="376.00" y="302.50">pybind11::d..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (53 samples, 8.24%)</title><rect x="373" y="308" width="97" height="15" fill="rgb(211,29,1)"/><text x="376.00" y="318.50">pybind11::d..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (53 samples, 8.24%)</title><rect x="373" y="324" width="97" height="15" fill="rgb(243,229,36)"/><text x="376.00" y="334.50">pybind11::c..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (53 samples, 8.24%)</title><rect x="373" y="340" width="97" height="15" fill="rgb(250,183,10)"/><text x="376.00" y="350.50">pybind11::a..</text></g><g><title>pybind11::array::~array (numpy.h) (53 samples, 8.24%)</title><rect x="373" y="356" width="97" height="15" fill="rgb(205,83,43)"/><text x="376.00" y="366.50">pybind11::a..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (53 samples, 8.24%)</title><rect x="373" y="372" width="97" height="15" fill="rgb(235,24,36)"/><text x="376.00" y="382.50">pybind11::b..</text></g><g><title>pybind11::object::~object (pytypes.h) (53 samples, 8.24%)</title><rect x="373" y="388" width="97" height="15" fill="rgb(226,81,19)"/><text x="376.00" y="398.50">pybind11::o..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (53 samples, 8.24%)</title><rect x="373" y="404" width="97" height="15" fill="rgb(231,27,28)"/><text x="376.00" y="414.50">pybind11::h..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (53 samples, 8.24%)</title><rect x="373" y="420" width="97" height="15" fill="rgb(228,189,44)"/><text x="376.00" y="430.50">RuntimeTree..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (53 samples, 8.24%)</title><rect x="373" y="436" width="97" height="15" fill="rgb(237,26,14)"/><text x="376.00" y="446.50">pybind11::g..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (53 samples, 8.24%)</title><rect x="373" y="452" width="97" height="15" fill="rgb(231,48,53)"/><text x="376.00" y="462.50">GOMP_parall..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (52 samples, 8.09%)</title><rect x="375" y="468" width="95" height="15" fill="rgb(206,44,33)"/><text x="378.00" y="478.50">RuntimeTree..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::~vector (stl_vector.h) (1 samples, 0.16%)</title><rect x="468" y="484" width="2" height="15" fill="rgb(215,33,47)"/><text x="471.00" y="494.50"></text></g><g><title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::~_Vector_base (stl_vector.h) (1 samples, 0.16%)</title><rect x="468" y="500" width="2" height="15" fill="rgb(221,216,7)"/><text x="471.00" y="510.50"></text></g><g><title>std::_Vector_base&lt;float, std::allocator&lt;float&gt; &gt;::_M_deallocate (stl_vector.h) (1 samples, 0.16%)</title><rect x="468" y="516" width="2" height="15" fill="rgb(205,5,13)"/><text x="471.00" y="526.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;float&gt; &gt;::deallocate (alloc_traits.h) (1 samples, 0.16%)</title><rect x="468" y="532" width="2" height="15" fill="rgb(209,187,44)"/><text x="471.00" y="542.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;float&gt;::deallocate (new_allocator.h) (1 samples, 0.16%)</title><rect x="468" y="548" width="2" height="15" fill="rgb(226,109,27)"/><text x="471.00" y="558.50"></text></g><g><title>0x7f3061ab5961 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="468" y="564" width="2" height="15" fill="rgb(242,102,9)"/><text x="471.00" y="574.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="470" y="404" width="2" height="15" fill="rgb(236,137,15)"/><text x="473.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="470" y="420" width="2" height="15" fill="rgb(233,172,41)"/><text x="473.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="470" y="436" width="2" height="15" fill="rgb(223,188,35)"/><text x="473.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="470" y="452" width="2" height="15" fill="rgb(220,38,27)"/><text x="473.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="470" y="468" width="2" height="15" fill="rgb(237,11,20)"/><text x="473.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_regressor.py) (1 samples, 0.16%)</title><rect x="470" y="484" width="2" height="15" fill="rgb(217,79,4)"/><text x="473.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="470" y="500" width="2" height="15" fill="rgb(252,8,22)"/><text x="473.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="470" y="516" width="2" height="15" fill="rgb(240,112,7)"/><text x="473.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="470" y="532" width="2" height="15" fill="rgb(216,204,12)"/><text x="473.00" y="542.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="470" y="548" width="2" height="15" fill="rgb(247,87,9)"/><text x="473.00" y="558.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.16%)</title><rect x="470" y="564" width="2" height="15" fill="rgb(235,178,16)"/><text x="473.00" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="470" y="580" width="2" height="15" fill="rgb(217,143,3)"/><text x="473.00" y="590.50"></text></g><g><title>0x7f30224fae83 (?) (1 samples, 0.16%)</title><rect x="470" y="596" width="2" height="15" fill="rgb(220,83,36)"/><text x="473.00" y="606.50"></text></g><g><title>0x7f30224fa3fb (?) (1 samples, 0.16%)</title><rect x="470" y="612" width="2" height="15" fill="rgb(252,114,6)"/><text x="473.00" y="622.50"></text></g><g><title>0x7f3022515d33 (?) (1 samples, 0.16%)</title><rect x="470" y="628" width="2" height="15" fill="rgb(248,21,12)"/><text x="473.00" y="638.50"></text></g><g><title>0x7f3022515c3a (?) (1 samples, 0.16%)</title><rect x="470" y="644" width="2" height="15" fill="rgb(215,177,52)"/><text x="473.00" y="654.50"></text></g><g><title>0x7f3022515bf8 (?) (1 samples, 0.16%)</title><rect x="470" y="660" width="2" height="15" fill="rgb(226,55,43)"/><text x="473.00" y="670.50"></text></g><g><title>0x7f3022507d98 (?) (1 samples, 0.16%)</title><rect x="470" y="676" width="2" height="15" fill="rgb(253,18,1)"/><text x="473.00" y="686.50"></text></g><g><title>0x7f30225054cb (?) (1 samples, 0.16%)</title><rect x="470" y="692" width="2" height="15" fill="rgb(241,29,16)"/><text x="473.00" y="702.50"></text></g><g><title>pybind11_meta_setattro (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="470" y="708" width="2" height="15" fill="rgb(246,58,25)"/><text x="473.00" y="718.50"></text></g><g><title>profile_pyrt (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (56 samples, 8.71%)</title><rect x="371" y="68" width="103" height="15" fill="rgb(235,35,48)"/><text x="374.00" y="78.50">profile_pyrt..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (56 samples, 8.71%)</title><rect x="371" y="84" width="103" height="15" fill="rgb(229,172,6)"/><text x="374.00" y="94.50">setup_profil..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.31%)</title><rect x="470" y="100" width="4" height="15" fill="rgb(244,60,47)"/><text x="473.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.31%)</title><rect x="470" y="116" width="4" height="15" fill="rgb(207,70,32)"/><text x="473.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.31%)</title><rect x="470" y="132" width="4" height="15" fill="rgb(207,114,19)"/><text x="473.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.31%)</title><rect x="470" y="148" width="4" height="15" fill="rgb(205,173,18)"/><text x="473.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.31%)</title><rect x="470" y="164" width="4" height="15" fill="rgb(253,209,5)"/><text x="473.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (2 samples, 0.31%)</title><rect x="470" y="180" width="4" height="15" fill="rgb(209,66,38)"/><text x="473.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (2 samples, 0.31%)</title><rect x="470" y="196" width="4" height="15" fill="rgb(250,62,4)"/><text x="473.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="470" y="212" width="4" height="15" fill="rgb(206,75,20)"/><text x="473.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="470" y="228" width="4" height="15" fill="rgb(245,46,22)"/><text x="473.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="470" y="244" width="4" height="15" fill="rgb(229,8,16)"/><text x="473.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="470" y="260" width="4" height="15" fill="rgb(252,173,50)"/><text x="473.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="470" y="276" width="4" height="15" fill="rgb(215,125,34)"/><text x="473.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (2 samples, 0.31%)</title><rect x="470" y="292" width="4" height="15" fill="rgb(230,115,14)"/><text x="473.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="470" y="308" width="4" height="15" fill="rgb(215,57,28)"/><text x="473.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="470" y="324" width="4" height="15" fill="rgb(214,217,47)"/><text x="473.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="470" y="340" width="4" height="15" fill="rgb(247,120,45)"/><text x="473.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="470" y="356" width="4" height="15" fill="rgb(242,99,50)"/><text x="473.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="470" y="372" width="4" height="15" fill="rgb(242,160,47)"/><text x="473.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (2 samples, 0.31%)</title><rect x="470" y="388" width="4" height="15" fill="rgb(216,120,19)"/><text x="473.00" y="398.50"></text></g><g><title>get_rst_doc (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.16%)</title><rect x="472" y="404" width="2" height="15" fill="rgb(231,16,7)"/><text x="475.00" y="414.50"></text></g><g><title>render (jinja2/asyncsupport.py) (1 samples, 0.16%)</title><rect x="472" y="420" width="2" height="15" fill="rgb(232,211,47)"/><text x="475.00" y="430.50"></text></g><g><title>render (jinja2/environment.py) (1 samples, 0.16%)</title><rect x="472" y="436" width="2" height="15" fill="rgb(225,20,28)"/><text x="475.00" y="446.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.16%)</title><rect x="472" y="452" width="2" height="15" fill="rgb(249,207,27)"/><text x="475.00" y="462.50"></text></g><g><title>root (&lt;template&gt;) (1 samples, 0.16%)</title><rect x="472" y="468" width="2" height="15" fill="rgb(250,98,31)"/><text x="475.00" y="478.50"></text></g><g><title>call (jinja2/runtime.py) (1 samples, 0.16%)</title><rect x="472" y="484" width="2" height="15" fill="rgb(211,128,28)"/><text x="475.00" y="494.50"></text></g><g><title>type_mapping (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.16%)</title><rect x="472" y="500" width="2" height="15" fill="rgb(217,52,40)"/><text x="475.00" y="510.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_forest.py) (1 samples, 0.16%)</title><rect x="476" y="164" width="1" height="15" fill="rgb(239,152,45)"/><text x="479.00" y="174.50"></text></g><g><title>array_item (mapping.c) (1 samples, 0.16%)</title><rect x="476" y="180" width="1" height="15" fill="rgb(234,116,27)"/><text x="479.00" y="190.50"></text></g><g><title>sprintf (libc-2.29.so) (1 samples, 0.16%)</title><rect x="476" y="196" width="1" height="15" fill="rgb(249,159,40)"/><text x="479.00" y="206.50"></text></g><g><title>0x7f3061aa6a69 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="476" y="212" width="1" height="15" fill="rgb(220,146,2)"/><text x="479.00" y="222.50"></text></g><g><title>0x7f3061ab255b (libc-2.29.so) (1 samples, 0.16%)</title><rect x="476" y="228" width="1" height="15" fill="rgb(238,142,25)"/><text x="479.00" y="238.50"></text></g><g><title>0x7f3061ab2496 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="476" y="244" width="1" height="15" fill="rgb(238,52,37)"/><text x="479.00" y="254.50"></text></g><g><title>delayed (joblib/parallel.py) (17 samples, 2.64%)</title><rect x="533" y="212" width="31" height="15" fill="rgb(237,215,13)"/><text x="536.00" y="222.50">de..</text></g><g><title>update_wrapper (functools.py) (11 samples, 1.71%)</title><rect x="544" y="228" width="20" height="15" fill="rgb(254,96,41)"/><text x="547.00" y="238.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py) (19 samples, 2.95%)</title><rect x="531" y="196" width="35" height="15" fill="rgb(209,229,48)"/><text x="534.00" y="206.50">&lt;g..</text></g><g><title>delayed_function (joblib/parallel.py) (1 samples, 0.16%)</title><rect x="564" y="212" width="2" height="15" fill="rgb(217,198,53)"/><text x="567.00" y="222.50"></text></g><g><title>__init__ (joblib/parallel.py) (4 samples, 0.62%)</title><rect x="566" y="196" width="7" height="15" fill="rgb(207,148,5)"/><text x="569.00" y="206.50"></text></g><g><title>__init__ (joblib/parallel.py) (2 samples, 0.31%)</title><rect x="588" y="212" width="3" height="15" fill="rgb(235,78,9)"/><text x="591.00" y="222.50"></text></g><g><title>__len__ (joblib/parallel.py) (1 samples, 0.16%)</title><rect x="591" y="212" width="2" height="15" fill="rgb(207,193,10)"/><text x="594.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py) (4 samples, 0.62%)</title><rect x="599" y="228" width="7" height="15" fill="rgb(218,141,53)"/><text x="602.00" y="238.50"></text></g><g><title>batch_completed (joblib/_parallel_backends.py) (1 samples, 0.16%)</title><rect x="604" y="244" width="2" height="15" fill="rgb(213,5,15)"/><text x="607.00" y="254.50"></text></g><g><title>0x7f303b4f8f55 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="674" y="324" width="2" height="15" fill="rgb(250,109,12)"/><text x="677.00" y="334.50"></text></g><g><title>0x7f303b4e8d33 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="674" y="340" width="2" height="15" fill="rgb(220,48,52)"/><text x="677.00" y="350.50"></text></g><g><title>PyArray_New (ctors.c) (1 samples, 0.16%)</title><rect x="674" y="356" width="2" height="15" fill="rgb(246,124,14)"/><text x="677.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.16%)</title><rect x="674" y="372" width="2" height="15" fill="rgb(240,83,14)"/><text x="677.00" y="382.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.16%)</title><rect x="674" y="388" width="2" height="15" fill="rgb(225,195,11)"/><text x="677.00" y="398.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (1 samples, 0.16%)</title><rect x="674" y="404" width="2" height="15" fill="rgb(229,160,34)"/><text x="677.00" y="414.50"></text></g><g><title>PyArray_ITEMSIZE (ndarraytypes.h) (1 samples, 0.16%)</title><rect x="674" y="420" width="2" height="15" fill="rgb(254,200,16)"/><text x="677.00" y="430.50"></text></g><g><title>0x7f303b5082d7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="676" y="340" width="1" height="15" fill="rgb(250,174,17)"/><text x="679.00" y="350.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.16%)</title><rect x="681" y="436" width="2" height="15" fill="rgb(230,225,54)"/><text x="684.00" y="446.50"></text></g><g><title>_buffer_info_cmp (buffer.c) (1 samples, 0.16%)</title><rect x="687" y="452" width="2" height="15" fill="rgb(251,46,11)"/><text x="690.00" y="462.50"></text></g><g><title>0x7f3061ac46c2 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="687" y="468" width="2" height="15" fill="rgb(215,5,3)"/><text x="690.00" y="478.50"></text></g><g><title>_append_char (buffer.c) (1 samples, 0.16%)</title><rect x="689" y="484" width="1" height="15" fill="rgb(211,132,10)"/><text x="692.00" y="494.50"></text></g><g><title>realloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="689" y="500" width="1" height="15" fill="rgb(250,113,41)"/><text x="692.00" y="510.50"></text></g><g><title>_buffer_format_string (buffer.c) (2 samples, 0.31%)</title><rect x="689" y="468" width="3" height="15" fill="rgb(229,54,47)"/><text x="692.00" y="478.50"></text></g><g><title>_is_natively_aligned_at (buffer.c) (1 samples, 0.16%)</title><rect x="690" y="484" width="2" height="15" fill="rgb(213,216,31)"/><text x="693.00" y="494.50"></text></g><g><title>0x7f303b4eb666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 1.40%)</title><rect x="677" y="388" width="17" height="15" fill="rgb(215,108,7)"/><text x="680.00" y="398.50"></text></g><g><title>0x7f303b4e12fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 1.24%)</title><rect x="679" y="404" width="15" height="15" fill="rgb(251,68,9)"/><text x="682.00" y="414.50"></text></g><g><title>array_getbuffer (buffer.c) (8 samples, 1.24%)</title><rect x="679" y="420" width="15" height="15" fill="rgb(221,96,34)"/><text x="682.00" y="430.50"></text></g><g><title>_buffer_get_info (buffer.c) (6 samples, 0.93%)</title><rect x="683" y="436" width="11" height="15" fill="rgb(209,46,15)"/><text x="686.00" y="446.50"></text></g><g><title>_buffer_info_new (buffer.c) (3 samples, 0.47%)</title><rect x="689" y="452" width="5" height="15" fill="rgb(223,123,46)"/><text x="692.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="692" y="468" width="2" height="15" fill="rgb(214,147,20)"/><text x="695.00" y="478.50"></text></g><g><title>0x7f303b5072df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 1.56%)</title><rect x="677" y="356" width="19" height="15" fill="rgb(229,146,53)"/><text x="680.00" y="366.50"></text></g><g><title>0x7f303b4ebd04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 1.56%)</title><rect x="677" y="372" width="19" height="15" fill="rgb(220,197,14)"/><text x="680.00" y="382.50"></text></g><g><title>0x7f303b4eb6cf (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="694" y="388" width="2" height="15" fill="rgb(251,11,44)"/><text x="697.00" y="398.50"></text></g><g><title>0x7f303b4d3d00 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="694" y="404" width="2" height="15" fill="rgb(254,219,53)"/><text x="697.00" y="414.50"></text></g><g><title>0x7f303b507364 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="696" y="356" width="2" height="15" fill="rgb(253,210,17)"/><text x="699.00" y="366.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.16%)</title><rect x="696" y="372" width="2" height="15" fill="rgb(220,162,10)"/><text x="699.00" y="382.50"></text></g><g><title>0x7f3060cd8a80 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="696" y="388" width="2" height="15" fill="rgb(252,7,18)"/><text x="699.00" y="398.50"></text></g><g><title>0x7f303b507456 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="698" y="356" width="2" height="15" fill="rgb(220,227,8)"/><text x="701.00" y="366.50"></text></g><g><title>0x7f303b5074a4 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="700" y="356" width="1" height="15" fill="rgb(239,159,46)"/><text x="703.00" y="366.50"></text></g><g><title>0x7f303b5074b9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="701" y="356" width="2" height="15" fill="rgb(219,181,33)"/><text x="704.00" y="366.50"></text></g><g><title>0x7f303b507592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="703" y="356" width="4" height="15" fill="rgb(212,189,54)"/><text x="706.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c) (2 samples, 0.31%)</title><rect x="703" y="372" width="4" height="15" fill="rgb(238,8,43)"/><text x="706.00" y="382.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (2 samples, 0.31%)</title><rect x="703" y="388" width="4" height="15" fill="rgb(250,169,20)"/><text x="706.00" y="398.50"></text></g><g><title>PyArray_Zeros (ctors.c) (2 samples, 0.31%)</title><rect x="703" y="404" width="4" height="15" fill="rgb(224,58,38)"/><text x="706.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.31%)</title><rect x="703" y="420" width="4" height="15" fill="rgb(217,103,28)"/><text x="706.00" y="430.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c) (2 samples, 0.31%)</title><rect x="703" y="436" width="4" height="15" fill="rgb(209,149,32)"/><text x="706.00" y="446.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c) (2 samples, 0.31%)</title><rect x="703" y="452" width="4" height="15" fill="rgb(248,189,53)"/><text x="706.00" y="462.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (2 samples, 0.31%)</title><rect x="703" y="468" width="4" height="15" fill="rgb(237,157,42)"/><text x="706.00" y="478.50"></text></g><g><title>0x7f303b507687 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="707" y="356" width="2" height="15" fill="rgb(244,213,29)"/><text x="710.00" y="366.50"></text></g><g><title>0x7f303b507693 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="709" y="356" width="2" height="15" fill="rgb(206,123,47)"/><text x="712.00" y="366.50"></text></g><g><title>0x7f303b5076a5 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="711" y="356" width="1" height="15" fill="rgb(248,41,38)"/><text x="714.00" y="366.50"></text></g><g><title>0x7f303b5076aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.62%)</title><rect x="712" y="356" width="8" height="15" fill="rgb(249,208,26)"/><text x="715.00" y="366.50"></text></g><g><title>0x7f303b5076ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.62%)</title><rect x="720" y="356" width="7" height="15" fill="rgb(243,6,19)"/><text x="723.00" y="366.50"></text></g><g><title>0x7f303b5076b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="727" y="356" width="2" height="15" fill="rgb(235,182,40)"/><text x="730.00" y="366.50"></text></g><g><title>0x7f303b5076b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="729" y="356" width="4" height="15" fill="rgb(225,111,28)"/><text x="732.00" y="366.50"></text></g><g><title>0x7f303b5076c6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="733" y="356" width="1" height="15" fill="rgb(236,86,3)"/><text x="736.00" y="366.50"></text></g><g><title>0x7f303b5076c9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="734" y="356" width="2" height="15" fill="rgb(216,86,26)"/><text x="737.00" y="366.50"></text></g><g><title>0x7f303b5076cf (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="736" y="356" width="4" height="15" fill="rgb(226,15,31)"/><text x="739.00" y="366.50"></text></g><g><title>0x7f303b5076e6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="740" y="356" width="4" height="15" fill="rgb(250,185,27)"/><text x="743.00" y="366.50"></text></g><g><title>0x7f303b5076fc (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="744" y="356" width="1" height="15" fill="rgb(246,207,43)"/><text x="747.00" y="366.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="744" y="372" width="1" height="15" fill="rgb(242,199,21)"/><text x="747.00" y="382.50"></text></g><g><title>0x7f303b5077a0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.47%)</title><rect x="745" y="356" width="6" height="15" fill="rgb(223,85,27)"/><text x="748.00" y="366.50"></text></g><g><title>0x7f303b5077b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="751" y="356" width="2" height="15" fill="rgb(211,146,20)"/><text x="754.00" y="366.50"></text></g><g><title>0x7f303b50792f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="753" y="356" width="2" height="15" fill="rgb(247,74,31)"/><text x="756.00" y="366.50"></text></g><g><title>0x7f303b4dca83 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="753" y="372" width="2" height="15" fill="rgb(236,202,6)"/><text x="756.00" y="382.50"></text></g><g><title>0x7f303b508405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (45 samples, 7.00%)</title><rect x="677" y="340" width="83" height="15" fill="rgb(207,15,22)"/><text x="680.00" y="350.50">0x7f303b5..</text></g><g><title>0x7f303b507c27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.47%)</title><rect x="755" y="356" width="5" height="15" fill="rgb(226,25,44)"/><text x="758.00" y="366.50"></text></g><g><title>0x7f303b4df529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.47%)</title><rect x="755" y="372" width="5" height="15" fill="rgb(232,78,36)"/><text x="758.00" y="382.50"></text></g><g><title>array_getbuffer (buffer.c) (3 samples, 0.47%)</title><rect x="755" y="388" width="5" height="15" fill="rgb(237,24,34)"/><text x="758.00" y="398.50"></text></g><g><title>_buffer_get_info (buffer.c) (2 samples, 0.31%)</title><rect x="756" y="404" width="4" height="15" fill="rgb(211,171,14)"/><text x="759.00" y="414.50"></text></g><g><title>0x7f303b4dc530 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="760" y="372" width="2" height="15" fill="rgb(227,165,18)"/><text x="763.00" y="382.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.16%)</title><rect x="760" y="388" width="2" height="15" fill="rgb(219,191,6)"/><text x="763.00" y="398.50"></text></g><g><title>0x7f303b4f8fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (48 samples, 7.47%)</title><rect x="676" y="324" width="88" height="15" fill="rgb(208,98,24)"/><text x="679.00" y="334.50">0x7f303b4f..</text></g><g><title>0x7f303b508540 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="760" y="340" width="4" height="15" fill="rgb(253,109,31)"/><text x="763.00" y="350.50"></text></g><g><title>0x7f303b4dd2f0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="760" y="356" width="4" height="15" fill="rgb(243,160,42)"/><text x="763.00" y="366.50"></text></g><g><title>0x7f303b4dc570 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="762" y="372" width="2" height="15" fill="rgb(244,43,9)"/><text x="765.00" y="382.50"></text></g><g><title>PyArray_ClipmodeConverter (conversion_utils.c) (1 samples, 0.16%)</title><rect x="767" y="356" width="2" height="15" fill="rgb(246,86,17)"/><text x="770.00" y="366.50"></text></g><g><title>PyArray_Return (scalarapi.c) (1 samples, 0.16%)</title><rect x="769" y="356" width="2" height="15" fill="rgb(209,49,20)"/><text x="772.00" y="366.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (7 samples, 1.09%)</title><rect x="771" y="372" width="13" height="15" fill="rgb(246,179,7)"/><text x="774.00" y="382.50"></text></g><g><title>PyArray_CheckAxis (ctors.c) (1 samples, 0.16%)</title><rect x="784" y="372" width="2" height="15" fill="rgb(236,10,17)"/><text x="787.00" y="382.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c) (9 samples, 1.40%)</title><rect x="771" y="356" width="17" height="15" fill="rgb(248,65,48)"/><text x="774.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.16%)</title><rect x="786" y="372" width="2" height="15" fill="rgb(222,47,35)"/><text x="789.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.16%)</title><rect x="786" y="388" width="2" height="15" fill="rgb(233,64,48)"/><text x="789.00" y="398.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.16%)</title><rect x="786" y="404" width="2" height="15" fill="rgb(241,39,15)"/><text x="789.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.16%)</title><rect x="786" y="420" width="2" height="15" fill="rgb(239,142,29)"/><text x="789.00" y="430.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.16%)</title><rect x="786" y="436" width="2" height="15" fill="rgb(225,156,39)"/><text x="789.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="786" y="452" width="2" height="15" fill="rgb(235,107,18)"/><text x="789.00" y="462.50"></text></g><g><title>0x7f3061ab6c8c (libc-2.29.so) (1 samples, 0.16%)</title><rect x="786" y="468" width="2" height="15" fill="rgb(214,99,28)"/><text x="789.00" y="478.50"></text></g><g><title>0x7f303b4f905a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (14 samples, 2.18%)</title><rect x="764" y="324" width="25" height="15" fill="rgb(230,143,38)"/><text x="767.00" y="334.50">0..</text></g><g><title>array_take (methods.c) (14 samples, 2.18%)</title><rect x="764" y="340" width="25" height="15" fill="rgb(216,55,22)"/><text x="767.00" y="350.50">a..</text></g><g><title>unicode_eq (python3.7) (1 samples, 0.16%)</title><rect x="788" y="356" width="1" height="15" fill="rgb(232,25,29)"/><text x="791.00" y="366.50"></text></g><g><title>0x7f3061b93151 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="788" y="372" width="1" height="15" fill="rgb(249,195,46)"/><text x="791.00" y="382.50"></text></g><g><title>0x7f303b4f913a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="789" y="324" width="2" height="15" fill="rgb(209,214,14)"/><text x="792.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.16%)</title><rect x="789" y="340" width="2" height="15" fill="rgb(214,118,49)"/><text x="792.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.16%)</title><rect x="789" y="356" width="2" height="15" fill="rgb(217,176,19)"/><text x="792.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.16%)</title><rect x="789" y="372" width="2" height="15" fill="rgb(228,17,37)"/><text x="792.00" y="382.50"></text></g><g><title>0x7f303b4f914f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="791" y="324" width="4" height="15" fill="rgb(217,185,41)"/><text x="794.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.16%)</title><rect x="793" y="340" width="2" height="15" fill="rgb(222,53,49)"/><text x="796.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.16%)</title><rect x="793" y="356" width="2" height="15" fill="rgb(222,70,43)"/><text x="796.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.16%)</title><rect x="793" y="372" width="2" height="15" fill="rgb(232,207,41)"/><text x="796.00" y="382.50"></text></g><g><title>_buffer_info_free (buffer.c) (1 samples, 0.16%)</title><rect x="793" y="388" width="2" height="15" fill="rgb(219,103,26)"/><text x="796.00" y="398.50"></text></g><g><title>0x7f303b4f9328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="795" y="324" width="2" height="15" fill="rgb(248,166,19)"/><text x="798.00" y="334.50"></text></g><g><title>array_reshape (methods.c) (1 samples, 0.16%)</title><rect x="795" y="340" width="2" height="15" fill="rgb(233,164,51)"/><text x="798.00" y="350.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.16%)</title><rect x="795" y="356" width="2" height="15" fill="rgb(230,196,11)"/><text x="798.00" y="366.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.16%)</title><rect x="795" y="372" width="2" height="15" fill="rgb(211,171,27)"/><text x="798.00" y="382.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (1 samples, 0.16%)</title><rect x="795" y="388" width="2" height="15" fill="rgb(206,113,51)"/><text x="798.00" y="398.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (1 samples, 0.16%)</title><rect x="795" y="404" width="2" height="15" fill="rgb(208,77,10)"/><text x="798.00" y="414.50"></text></g><g><title>0x7f3060cd80a0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="795" y="420" width="2" height="15" fill="rgb(239,102,42)"/><text x="798.00" y="430.50"></text></g><g><title>0x7f303b4f9522 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="797" y="324" width="2" height="15" fill="rgb(224,158,6)"/><text x="800.00" y="334.50"></text></g><g><title>0x7f303b4f9d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (69 samples, 10.73%)</title><rect x="674" y="308" width="126" height="15" fill="rgb(218,153,23)"/><text x="677.00" y="318.50">0x7f303b4f9d2e ..</text></g><g><title>0x7f303b4f98c9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="799" y="324" width="1" height="15" fill="rgb(216,208,31)"/><text x="802.00" y="334.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (1 samples, 0.16%)</title><rect x="800" y="308" width="2" height="15" fill="rgb(231,140,48)"/><text x="803.00" y="318.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c) (1 samples, 0.16%)</title><rect x="802" y="324" width="2" height="15" fill="rgb(209,169,21)"/><text x="805.00" y="334.50"></text></g><g><title>count_boolean_trues (item_selection.c) (1 samples, 0.16%)</title><rect x="802" y="340" width="2" height="15" fill="rgb(225,109,28)"/><text x="805.00" y="350.50"></text></g><g><title>count_nonzero_bytes_384 (item_selection.c) (1 samples, 0.16%)</title><rect x="802" y="356" width="2" height="15" fill="rgb(227,147,31)"/><text x="805.00" y="366.50"></text></g><g><title>array_assign_subscript (mapping.c) (2 samples, 0.31%)</title><rect x="802" y="308" width="4" height="15" fill="rgb(222,135,28)"/><text x="805.00" y="318.50"></text></g><g><title>prepare_index (mapping.c) (1 samples, 0.16%)</title><rect x="804" y="324" width="2" height="15" fill="rgb(231,196,25)"/><text x="807.00" y="334.50"></text></g><g><title>array_inplace_true_divide (number.c) (1 samples, 0.16%)</title><rect x="806" y="308" width="2" height="15" fill="rgb(224,45,28)"/><text x="809.00" y="318.50"></text></g><g><title>PyArray_GenericInplaceBinaryFunction (number.c) (1 samples, 0.16%)</title><rect x="806" y="324" width="2" height="15" fill="rgb(234,58,32)"/><text x="809.00" y="334.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c) (1 samples, 0.16%)</title><rect x="808" y="356" width="2" height="15" fill="rgb(222,178,16)"/><text x="811.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.16%)</title><rect x="810" y="372" width="1" height="15" fill="rgb(251,21,23)"/><text x="813.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.16%)</title><rect x="810" y="388" width="1" height="15" fill="rgb(211,57,37)"/><text x="813.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.16%)</title><rect x="810" y="404" width="1" height="15" fill="rgb(214,150,24)"/><text x="813.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.16%)</title><rect x="810" y="420" width="1" height="15" fill="rgb(247,74,28)"/><text x="813.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="810" y="436" width="1" height="15" fill="rgb(231,126,25)"/><text x="813.00" y="446.50"></text></g><g><title>_mm_cmpeq_pd (emmintrin.h) (1 samples, 0.16%)</title><rect x="811" y="436" width="2" height="15" fill="rgb(251,72,11)"/><text x="814.00" y="446.50"></text></g><g><title>DOUBLE_equal (loops.c.src) (2 samples, 0.31%)</title><rect x="811" y="388" width="4" height="15" fill="rgb(254,141,19)"/><text x="814.00" y="398.50"></text></g><g><title>run_binary_simd_equal_DOUBLE (simd.inc.src) (2 samples, 0.31%)</title><rect x="811" y="404" width="4" height="15" fill="rgb(212,14,7)"/><text x="814.00" y="414.50"></text></g><g><title>sse2_binary_scalar2_equal_DOUBLE (simd.inc.src) (2 samples, 0.31%)</title><rect x="811" y="420" width="4" height="15" fill="rgb(222,78,33)"/><text x="814.00" y="430.50"></text></g><g><title>sse2_compress4_to_byte_DOUBLE (simd.inc.src) (1 samples, 0.16%)</title><rect x="813" y="436" width="2" height="15" fill="rgb(235,183,23)"/><text x="816.00" y="446.50"></text></g><g><title>_mm_storel_epi64 (emmintrin.h) (1 samples, 0.16%)</title><rect x="813" y="452" width="2" height="15" fill="rgb(232,141,24)"/><text x="816.00" y="462.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.62%)</title><rect x="810" y="356" width="7" height="15" fill="rgb(210,77,29)"/><text x="813.00" y="366.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (3 samples, 0.47%)</title><rect x="811" y="372" width="6" height="15" fill="rgb(211,217,45)"/><text x="814.00" y="382.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="815" y="388" width="2" height="15" fill="rgb(253,229,37)"/><text x="818.00" y="398.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.16%)</title><rect x="817" y="356" width="2" height="15" fill="rgb(251,114,12)"/><text x="820.00" y="366.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.16%)</title><rect x="817" y="372" width="2" height="15" fill="rgb(237,5,25)"/><text x="820.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.16%)</title><rect x="817" y="388" width="2" height="15" fill="rgb(235,37,26)"/><text x="820.00" y="398.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.16%)</title><rect x="817" y="404" width="2" height="15" fill="rgb(210,47,43)"/><text x="820.00" y="414.50"></text></g><g><title>IsAligned (array_assign.c) (1 samples, 0.16%)</title><rect x="817" y="420" width="2" height="15" fill="rgb(220,97,50)"/><text x="820.00" y="430.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (1 samples, 0.16%)</title><rect x="817" y="436" width="2" height="15" fill="rgb(236,12,45)"/><text x="820.00" y="446.50"></text></g><g><title>npy_is_aligned (common.h) (1 samples, 0.16%)</title><rect x="817" y="452" width="2" height="15" fill="rgb(246,94,2)"/><text x="820.00" y="462.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (2 samples, 0.31%)</title><rect x="819" y="356" width="3" height="15" fill="rgb(223,29,41)"/><text x="822.00" y="366.50"></text></g><g><title>0x7f3060cd7820 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.16%)</title><rect x="821" y="372" width="1" height="15" fill="rgb(253,16,1)"/><text x="824.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (9 samples, 1.40%)</title><rect x="808" y="340" width="16" height="15" fill="rgb(230,12,7)"/><text x="811.00" y="350.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.16%)</title><rect x="822" y="356" width="2" height="15" fill="rgb(236,138,16)"/><text x="825.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.16%)</title><rect x="822" y="372" width="2" height="15" fill="rgb(236,60,48)"/><text x="825.00" y="382.50"></text></g><g><title>array_richcompare (arrayobject.c) (10 samples, 1.56%)</title><rect x="808" y="308" width="18" height="15" fill="rgb(233,22,38)"/><text x="811.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (10 samples, 1.56%)</title><rect x="808" y="324" width="18" height="15" fill="rgb(248,174,34)"/><text x="811.00" y="334.50"></text></g><g><title>_find_array_wrap (ufunc_object.c) (1 samples, 0.16%)</title><rect x="824" y="340" width="2" height="15" fill="rgb(254,124,42)"/><text x="827.00" y="350.50"></text></g><g><title>get_view_from_index (mapping.c) (1 samples, 0.16%)</title><rect x="826" y="324" width="2" height="15" fill="rgb(229,141,45)"/><text x="829.00" y="334.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.16%)</title><rect x="826" y="340" width="2" height="15" fill="rgb(205,59,17)"/><text x="829.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.16%)</title><rect x="826" y="356" width="2" height="15" fill="rgb(205,80,18)"/><text x="829.00" y="366.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.16%)</title><rect x="826" y="372" width="2" height="15" fill="rgb(221,58,37)"/><text x="829.00" y="382.50"></text></g><g><title>array_subscript (mapping.c) (3 samples, 0.47%)</title><rect x="826" y="308" width="6" height="15" fill="rgb(226,28,37)"/><text x="829.00" y="318.50"></text></g><g><title>prepare_index (mapping.c) (2 samples, 0.31%)</title><rect x="828" y="324" width="4" height="15" fill="rgb(206,105,22)"/><text x="831.00" y="334.50"></text></g><g><title>unpack_indices (mapping.c) (1 samples, 0.16%)</title><rect x="830" y="340" width="2" height="15" fill="rgb(226,151,21)"/><text x="833.00" y="350.50"></text></g><g><title>unpack_tuple (mapping.c) (1 samples, 0.16%)</title><rect x="830" y="356" width="2" height="15" fill="rgb(253,179,14)"/><text x="833.00" y="366.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (4 samples, 0.62%)</title><rect x="835" y="372" width="8" height="15" fill="rgb(238,96,0)"/><text x="838.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (4 samples, 0.62%)</title><rect x="835" y="388" width="8" height="15" fill="rgb(217,110,37)"/><text x="838.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (4 samples, 0.62%)</title><rect x="835" y="404" width="8" height="15" fill="rgb(214,21,29)"/><text x="838.00" y="414.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (4 samples, 0.62%)</title><rect x="835" y="420" width="8" height="15" fill="rgb(213,96,17)"/><text x="838.00" y="430.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (4 samples, 0.62%)</title><rect x="835" y="436" width="8" height="15" fill="rgb(254,27,9)"/><text x="838.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.16%)</title><rect x="841" y="452" width="2" height="15" fill="rgb(248,225,44)"/><text x="844.00" y="462.50"></text></g><g><title>0x7f3061acb757 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="843" y="388" width="1" height="15" fill="rgb(213,113,49)"/><text x="846.00" y="398.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c) (1 samples, 0.16%)</title><rect x="846" y="436" width="2" height="15" fill="rgb(221,196,18)"/><text x="849.00" y="446.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.16%)</title><rect x="848" y="436" width="2" height="15" fill="rgb(229,128,26)"/><text x="851.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.47%)</title><rect x="846" y="420" width="6" height="15" fill="rgb(235,77,29)"/><text x="849.00" y="430.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.16%)</title><rect x="850" y="436" width="2" height="15" fill="rgb(233,171,46)"/><text x="853.00" y="446.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.16%)</title><rect x="852" y="420" width="2" height="15" fill="rgb(239,28,23)"/><text x="855.00" y="430.50"></text></g><g><title>NpyIter_GetDataPtrArray (nditer_api.c) (1 samples, 0.16%)</title><rect x="854" y="420" width="2" height="15" fill="rgb(244,11,50)"/><text x="857.00" y="430.50"></text></g><g><title>NpyIter_GetIterSize (nditer_api.c) (1 samples, 0.16%)</title><rect x="856" y="420" width="1" height="15" fill="rgb(239,217,27)"/><text x="859.00" y="430.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.16%)</title><rect x="857" y="484" width="2" height="15" fill="rgb(254,146,48)"/><text x="860.00" y="494.50"></text></g><g><title>0x7f3061ab7214 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="861" y="548" width="2" height="15" fill="rgb(242,63,13)"/><text x="864.00" y="558.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (4 samples, 0.62%)</title><rect x="857" y="452" width="8" height="15" fill="rgb(246,226,18)"/><text x="860.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.62%)</title><rect x="857" y="468" width="8" height="15" fill="rgb(211,201,50)"/><text x="860.00" y="478.50"></text></g><g><title>npy_alloc_cache (alloc.c) (3 samples, 0.47%)</title><rect x="859" y="484" width="6" height="15" fill="rgb(205,152,16)"/><text x="862.00" y="494.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (3 samples, 0.47%)</title><rect x="859" y="500" width="6" height="15" fill="rgb(220,199,17)"/><text x="862.00" y="510.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (3 samples, 0.47%)</title><rect x="859" y="516" width="6" height="15" fill="rgb(206,223,21)"/><text x="862.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.47%)</title><rect x="859" y="532" width="6" height="15" fill="rgb(219,43,22)"/><text x="862.00" y="542.50"></text></g><g><title>0x7f3061ab7727 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="863" y="548" width="2" height="15" fill="rgb(223,69,36)"/><text x="866.00" y="558.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (5 samples, 0.78%)</title><rect x="857" y="420" width="10" height="15" fill="rgb(205,114,50)"/><text x="860.00" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c) (5 samples, 0.78%)</title><rect x="857" y="436" width="10" height="15" fill="rgb(212,32,27)"/><text x="860.00" y="446.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.16%)</title><rect x="865" y="452" width="2" height="15" fill="rgb(205,177,23)"/><text x="868.00" y="462.50"></text></g><g><title>0x7f3061ad5d50 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="865" y="468" width="2" height="15" fill="rgb(226,69,29)"/><text x="868.00" y="478.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.16%)</title><rect x="867" y="420" width="1" height="15" fill="rgb(236,48,40)"/><text x="870.00" y="430.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (1 samples, 0.16%)</title><rect x="867" y="436" width="1" height="15" fill="rgb(244,134,26)"/><text x="870.00" y="446.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (2 samples, 0.31%)</title><rect x="868" y="420" width="4" height="15" fill="rgb(214,151,35)"/><text x="871.00" y="430.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (2 samples, 0.31%)</title><rect x="868" y="436" width="4" height="15" fill="rgb(243,192,7)"/><text x="871.00" y="446.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.16%)</title><rect x="870" y="452" width="2" height="15" fill="rgb(213,196,46)"/><text x="873.00" y="462.50"></text></g><g><title>DOUBLE_add (loops.c.src) (23 samples, 3.58%)</title><rect x="883" y="436" width="42" height="15" fill="rgb(221,214,34)"/><text x="886.00" y="446.50">DOU..</text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (13 samples, 2.02%)</title><rect x="901" y="452" width="24" height="15" fill="rgb(244,29,45)"/><text x="904.00" y="462.50">p..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (53 samples, 8.24%)</title><rect x="844" y="404" width="98" height="15" fill="rgb(221,68,11)"/><text x="847.00" y="414.50">PyUFunc_Red..</text></g><g><title>reduce_loop (ufunc_object.c) (38 samples, 5.91%)</title><rect x="872" y="420" width="70" height="15" fill="rgb(240,141,52)"/><text x="875.00" y="430.50">reduce_..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (9 samples, 1.40%)</title><rect x="925" y="436" width="17" height="15" fill="rgb(237,124,20)"/><text x="928.00" y="446.50"></text></g><g><title>npy_cache_import (npy_import.h) (1 samples, 0.16%)</title><rect x="942" y="404" width="2" height="15" fill="rgb(208,196,8)"/><text x="945.00" y="414.50"></text></g><g><title>PyUFunc_AdditionTypeResolver (ufunc_type_resolution.c) (1 samples, 0.16%)</title><rect x="944" y="420" width="1" height="15" fill="rgb(207,117,5)"/><text x="947.00" y="430.50"></text></g><g><title>array_sum (methods.c) (63 samples, 9.80%)</title><rect x="832" y="308" width="115" height="15" fill="rgb(208,212,9)"/><text x="835.00" y="318.50">array_sum (met..</text></g><g><title>forward_ndarray_method (methods.c) (63 samples, 9.80%)</title><rect x="832" y="324" width="115" height="15" fill="rgb(219,79,28)"/><text x="835.00" y="334.50">forward_ndarra..</text></g><g><title>_sum (numpy/core/_methods.py) (63 samples, 9.80%)</title><rect x="832" y="340" width="115" height="15" fill="rgb(209,98,30)"/><text x="835.00" y="350.50">_sum (numpy/co..</text></g><g><title>ufunc_reduce (ufunc_object.c) (62 samples, 9.64%)</title><rect x="833" y="356" width="114" height="15" fill="rgb(234,158,14)"/><text x="836.00" y="366.50">ufunc_reduce (..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (57 samples, 8.86%)</title><rect x="843" y="372" width="104" height="15" fill="rgb(214,182,9)"/><text x="846.00" y="382.50">PyUFunc_Gene..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (56 samples, 8.71%)</title><rect x="844" y="388" width="103" height="15" fill="rgb(236,176,23)"/><text x="847.00" y="398.50">PyUFunc_Redu..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (2 samples, 0.31%)</title><rect x="944" y="404" width="3" height="15" fill="rgb(206,201,51)"/><text x="947.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.16%)</title><rect x="945" y="420" width="2" height="15" fill="rgb(216,101,34)"/><text x="948.00" y="430.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.16%)</title><rect x="945" y="436" width="2" height="15" fill="rgb(244,207,20)"/><text x="948.00" y="446.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (1 samples, 0.16%)</title><rect x="945" y="452" width="2" height="15" fill="rgb(229,128,6)"/><text x="948.00" y="462.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.16%)</title><rect x="945" y="468" width="2" height="15" fill="rgb(244,116,23)"/><text x="948.00" y="478.50"></text></g><g><title>unicode_endswith (python3.7) (4 samples, 0.62%)</title><rect x="966" y="340" width="7" height="15" fill="rgb(219,17,20)"/><text x="969.00" y="350.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (18 samples, 2.80%)</title><rect x="947" y="308" width="33" height="15" fill="rgb(232,131,33)"/><text x="950.00" y="318.50">ch..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (14 samples, 2.18%)</title><rect x="955" y="324" width="25" height="15" fill="rgb(240,133,26)"/><text x="958.00" y="334.50">&lt;..</text></g><g><title>unicode_startswith (python3.7) (4 samples, 0.62%)</title><rect x="973" y="340" width="7" height="15" fill="rgb(211,72,18)"/><text x="976.00" y="350.50"></text></g><g><title>abs_ptrdiff (simd.inc.src) (1 samples, 0.16%)</title><rect x="982" y="404" width="2" height="15" fill="rgb(224,101,10)"/><text x="985.00" y="414.50"></text></g><g><title>_mm_div_pd (emmintrin.h) (3 samples, 0.47%)</title><rect x="984" y="420" width="5" height="15" fill="rgb(242,25,23)"/><text x="987.00" y="430.50"></text></g><g><title>DOUBLE_divide (loops.c.src) (17 samples, 2.64%)</title><rect x="982" y="372" width="31" height="15" fill="rgb(210,192,6)"/><text x="985.00" y="382.50">DO..</text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src) (17 samples, 2.64%)</title><rect x="982" y="388" width="31" height="15" fill="rgb(220,228,53)"/><text x="985.00" y="398.50">ru..</text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src) (16 samples, 2.49%)</title><rect x="984" y="404" width="29" height="15" fill="rgb(208,92,34)"/><text x="987.00" y="414.50">ss..</text></g><g><title>_mm_store_pd (emmintrin.h) (13 samples, 2.02%)</title><rect x="989" y="420" width="24" height="15" fill="rgb(249,70,36)"/><text x="992.00" y="430.50">_..</text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="1015" y="388" width="2" height="15" fill="rgb(244,227,31)"/><text x="1018.00" y="398.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (1 samples, 0.16%)</title><rect x="1017" y="388" width="2" height="15" fill="rgb(223,159,27)"/><text x="1020.00" y="398.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.16%)</title><rect x="1017" y="404" width="2" height="15" fill="rgb(218,187,32)"/><text x="1020.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (4 samples, 0.62%)</title><rect x="1013" y="372" width="8" height="15" fill="rgb(224,6,9)"/><text x="1016.00" y="382.50"></text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c) (1 samples, 0.16%)</title><rect x="1019" y="388" width="2" height="15" fill="rgb(230,29,24)"/><text x="1022.00" y="398.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.16%)</title><rect x="1021" y="372" width="2" height="15" fill="rgb(233,208,7)"/><text x="1024.00" y="382.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (1 samples, 0.16%)</title><rect x="1023" y="388" width="1" height="15" fill="rgb(229,183,31)"/><text x="1026.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.16%)</title><rect x="1023" y="404" width="1" height="15" fill="rgb(216,58,30)"/><text x="1026.00" y="414.50"></text></g><g><title>0x7f3061ab6dc9 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="1023" y="420" width="1" height="15" fill="rgb(224,98,5)"/><text x="1026.00" y="430.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (14 samples, 2.18%)</title><rect x="1023" y="372" width="25" height="15" fill="rgb(239,197,52)"/><text x="1026.00" y="382.50">N..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (13 samples, 2.02%)</title><rect x="1024" y="388" width="24" height="15" fill="rgb(205,153,8)"/><text x="1027.00" y="398.50">n..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (13 samples, 2.02%)</title><rect x="1024" y="404" width="24" height="15" fill="rgb(231,76,21)"/><text x="1027.00" y="414.50">P..</text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (8 samples, 1.24%)</title><rect x="1034" y="420" width="14" height="15" fill="rgb(206,46,17)"/><text x="1037.00" y="430.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="1048" y="372" width="2" height="15" fill="rgb(241,178,24)"/><text x="1051.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (38 samples, 5.91%)</title><rect x="982" y="340" width="70" height="15" fill="rgb(229,76,33)"/><text x="985.00" y="350.50">execute..</text></g><g><title>iterator_loop (ufunc_object.c) (38 samples, 5.91%)</title><rect x="982" y="356" width="70" height="15" fill="rgb(206,208,7)"/><text x="985.00" y="366.50">iterato..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (1 samples, 0.16%)</title><rect x="1050" y="372" width="2" height="15" fill="rgb(225,139,52)"/><text x="1053.00" y="382.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (1 samples, 0.16%)</title><rect x="1050" y="388" width="2" height="15" fill="rgb(252,221,1)"/><text x="1053.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (40 samples, 6.22%)</title><rect x="980" y="324" width="74" height="15" fill="rgb(205,26,8)"/><text x="983.00" y="334.50">PyUFunc_..</text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (1 samples, 0.16%)</title><rect x="1052" y="340" width="2" height="15" fill="rgb(244,102,22)"/><text x="1055.00" y="350.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (1 samples, 0.16%)</title><rect x="1052" y="356" width="2" height="15" fill="rgb(252,13,12)"/><text x="1055.00" y="366.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (1 samples, 0.16%)</title><rect x="1052" y="372" width="2" height="15" fill="rgb(253,199,15)"/><text x="1055.00" y="382.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.16%)</title><rect x="1052" y="388" width="2" height="15" fill="rgb(209,182,8)"/><text x="1055.00" y="398.50"></text></g><g><title>PyArray_CanCastTo (convert_datatype.c) (1 samples, 0.16%)</title><rect x="1052" y="404" width="2" height="15" fill="rgb(241,37,31)"/><text x="1055.00" y="414.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py) (222 samples, 34.53%)</title><rect x="648" y="292" width="408" height="15" fill="rgb(244,136,38)"/><text x="651.00" y="302.50">predict_proba (sklearn/tree/_classes.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (41 samples, 6.38%)</title><rect x="980" y="308" width="76" height="15" fill="rgb(228,225,17)"/><text x="983.00" y="318.50">ufunc_ge..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.16%)</title><rect x="1054" y="324" width="2" height="15" fill="rgb(234,191,8)"/><text x="1057.00" y="334.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.16%)</title><rect x="1056" y="324" width="1" height="15" fill="rgb(222,214,49)"/><text x="1059.00" y="334.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.16%)</title><rect x="1056" y="340" width="1" height="15" fill="rgb(253,54,6)"/><text x="1059.00" y="350.50"></text></g><g><title>promote_types (convert_datatype.c) (1 samples, 0.16%)</title><rect x="1056" y="356" width="1" height="15" fill="rgb(235,51,25)"/><text x="1059.00" y="366.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (1 samples, 0.16%)</title><rect x="1056" y="372" width="1" height="15" fill="rgb(251,42,27)"/><text x="1059.00" y="382.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.16%)</title><rect x="1057" y="356" width="2" height="15" fill="rgb(222,185,19)"/><text x="1060.00" y="366.50"></text></g><g><title>diophantine_simplify (mem_overlap.c) (1 samples, 0.16%)</title><rect x="1059" y="372" width="2" height="15" fill="rgb(228,54,1)"/><text x="1062.00" y="382.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.16%)</title><rect x="1059" y="388" width="2" height="15" fill="rgb(222,28,34)"/><text x="1062.00" y="398.50"></text></g><g><title>0x7f3061a6d7c2 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="1059" y="404" width="2" height="15" fill="rgb(221,29,49)"/><text x="1062.00" y="414.50"></text></g><g><title>0x7f3061a6d7bd (libc-2.29.so) (1 samples, 0.16%)</title><rect x="1059" y="420" width="2" height="15" fill="rgb(229,229,52)"/><text x="1062.00" y="430.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (3 samples, 0.47%)</title><rect x="1057" y="340" width="6" height="15" fill="rgb(241,167,14)"/><text x="1060.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (2 samples, 0.31%)</title><rect x="1059" y="356" width="4" height="15" fill="rgb(241,13,36)"/><text x="1062.00" y="366.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (1 samples, 0.16%)</title><rect x="1061" y="372" width="2" height="15" fill="rgb(228,32,41)"/><text x="1064.00" y="382.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (1 samples, 0.16%)</title><rect x="1061" y="388" width="2" height="15" fill="rgb(206,2,33)"/><text x="1064.00" y="398.50"></text></g><g><title>floordiv_128_64 (npy_extint128.h) (1 samples, 0.16%)</title><rect x="1061" y="404" width="2" height="15" fill="rgb(240,222,47)"/><text x="1064.00" y="414.50"></text></g><g><title>divmod_128_64 (npy_extint128.h) (1 samples, 0.16%)</title><rect x="1061" y="420" width="2" height="15" fill="rgb(236,143,32)"/><text x="1064.00" y="430.50"></text></g><g><title>_mm_add_pd (emmintrin.h) (2 samples, 0.31%)</title><rect x="1067" y="404" width="3" height="15" fill="rgb(221,88,19)"/><text x="1070.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (10 samples, 1.56%)</title><rect x="1057" y="324" width="19" height="15" fill="rgb(234,43,4)"/><text x="1060.00" y="334.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (7 samples, 1.09%)</title><rect x="1063" y="340" width="13" height="15" fill="rgb(230,105,2)"/><text x="1066.00" y="350.50"></text></g><g><title>DOUBLE_add (loops.c.src) (5 samples, 0.78%)</title><rect x="1067" y="356" width="9" height="15" fill="rgb(254,12,20)"/><text x="1070.00" y="366.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (5 samples, 0.78%)</title><rect x="1067" y="372" width="9" height="15" fill="rgb(240,13,44)"/><text x="1070.00" y="382.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (5 samples, 0.78%)</title><rect x="1067" y="388" width="9" height="15" fill="rgb(228,45,54)"/><text x="1070.00" y="398.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (3 samples, 0.47%)</title><rect x="1070" y="404" width="6" height="15" fill="rgb(205,53,19)"/><text x="1073.00" y="414.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.16%)</title><rect x="1076" y="324" width="2" height="15" fill="rgb(229,162,17)"/><text x="1079.00" y="334.50"></text></g><g><title>0x7f3061ad61d1 (libc-2.29.so) (1 samples, 0.16%)</title><rect x="1076" y="340" width="2" height="15" fill="rgb(235,179,54)"/><text x="1079.00" y="350.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py) (246 samples, 38.26%)</title><rect x="628" y="276" width="451" height="15" fill="rgb(245,205,50)"/><text x="631.00" y="286.50">_accumulate_prediction (sklearn/ensemble/_forest.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (13 samples, 2.02%)</title><rect x="1056" y="292" width="23" height="15" fill="rgb(229,51,19)"/><text x="1059.00" y="302.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (13 samples, 2.02%)</title><rect x="1056" y="308" width="23" height="15" fill="rgb(247,137,54)"/><text x="1059.00" y="318.50">P..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.16%)</title><rect x="1078" y="324" width="1" height="15" fill="rgb(233,26,35)"/><text x="1081.00" y="334.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.16%)</title><rect x="1078" y="340" width="1" height="15" fill="rgb(246,214,54)"/><text x="1081.00" y="350.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (248 samples, 38.57%)</title><rect x="626" y="260" width="455" height="15" fill="rgb(207,106,7)"/><text x="629.00" y="270.50">&lt;listcomp&gt; (joblib/parallel.py)</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.16%)</title><rect x="1079" y="276" width="2" height="15" fill="rgb(230,105,15)"/><text x="1082.00" y="286.50"></text></g><g><title>PyArray_FLAGS (ndarraytypes.h) (1 samples, 0.16%)</title><rect x="1079" y="292" width="2" height="15" fill="rgb(238,79,33)"/><text x="1082.00" y="302.50"></text></g><g><title>__exit__ (joblib/parallel.py) (3 samples, 0.47%)</title><rect x="1081" y="260" width="6" height="15" fill="rgb(213,179,17)"/><text x="1084.00" y="270.50"></text></g><g><title>unregister (joblib/parallel.py) (1 samples, 0.16%)</title><rect x="1085" y="276" width="2" height="15" fill="rgb(224,9,19)"/><text x="1088.00" y="286.50"></text></g><g><title>_dispatch (joblib/parallel.py) (284 samples, 44.17%)</title><rect x="573" y="196" width="521" height="15" fill="rgb(231,207,33)"/><text x="576.00" y="206.50">_dispatch (joblib/parallel.py)</text></g><g><title>apply_async (joblib/_parallel_backends.py) (273 samples, 42.46%)</title><rect x="593" y="212" width="501" height="15" fill="rgb(215,46,17)"/><text x="596.00" y="222.50">apply_async (joblib/_parallel_backends.py)</text></g><g><title>__init__ (joblib/_parallel_backends.py) (266 samples, 41.37%)</title><rect x="606" y="228" width="488" height="15" fill="rgb(219,169,46)"/><text x="609.00" y="238.50">__init__ (joblib/_parallel_backends.py)</text></g><g><title>__call__ (joblib/parallel.py) (264 samples, 41.06%)</title><rect x="610" y="244" width="484" height="15" fill="rgb(215,97,28)"/><text x="613.00" y="254.50">__call__ (joblib/parallel.py)</text></g><g><title>__init__ (joblib/parallel.py) (4 samples, 0.62%)</title><rect x="1087" y="260" width="7" height="15" fill="rgb(231,50,27)"/><text x="1090.00" y="270.50"></text></g><g><title>__exit__ (threading.py) (2 samples, 0.31%)</title><rect x="1103" y="212" width="4" height="15" fill="rgb(245,161,16)"/><text x="1106.00" y="222.50"></text></g><g><title>lock_PyThread_release_lock (python3.7) (1 samples, 0.16%)</title><rect x="1105" y="228" width="2" height="15" fill="rgb(232,210,36)"/><text x="1108.00" y="238.50"></text></g><g><title>get (queue.py) (8 samples, 1.24%)</title><rect x="1094" y="196" width="15" height="15" fill="rgb(247,84,1)"/><text x="1097.00" y="206.50"></text></g><g><title>_qsize (queue.py) (1 samples, 0.16%)</title><rect x="1107" y="212" width="2" height="15" fill="rgb(242,112,27)"/><text x="1110.00" y="222.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="1118" y="212" width="7" height="15" fill="rgb(239,213,38)"/><text x="1121.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (13 samples, 2.02%)</title><rect x="1125" y="212" width="24" height="15" fill="rgb(240,139,22)"/><text x="1128.00" y="222.50">g..</text></g><g><title>__init__ (joblib/_parallel_backends.py) (4 samples, 0.62%)</title><rect x="1142" y="228" width="7" height="15" fill="rgb(233,170,40)"/><text x="1145.00" y="238.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.16%)</title><rect x="1149" y="212" width="2" height="15" fill="rgb(238,176,39)"/><text x="1152.00" y="222.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (24 samples, 3.73%)</title><rect x="1109" y="196" width="44" height="15" fill="rgb(209,214,3)"/><text x="1112.00" y="206.50">get_..</text></g><g><title>unicode_hash (python3.7) (1 samples, 0.16%)</title><rect x="1151" y="212" width="2" height="15" fill="rgb(215,204,46)"/><text x="1154.00" y="222.50"></text></g><g><title>__enter__ (threading.py) (1 samples, 0.16%)</title><rect x="1156" y="212" width="2" height="15" fill="rgb(244,227,13)"/><text x="1159.00" y="222.50"></text></g><g><title>__exit__ (threading.py) (1 samples, 0.16%)</title><rect x="1158" y="212" width="2" height="15" fill="rgb(243,43,38)"/><text x="1161.00" y="222.50"></text></g><g><title>_put (queue.py) (1 samples, 0.16%)</title><rect x="1160" y="212" width="2" height="15" fill="rgb(225,122,36)"/><text x="1163.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (377 samples, 58.63%)</title><rect x="481" y="180" width="692" height="15" fill="rgb(231,4,27)"/><text x="484.00" y="190.50">dispatch_one_batch (joblib/parallel.py)</text></g><g><title>put (queue.py) (11 samples, 1.71%)</title><rect x="1153" y="196" width="20" height="15" fill="rgb(242,31,47)"/><text x="1156.00" y="206.50"></text></g><g><title>notify (threading.py) (6 samples, 0.93%)</title><rect x="1162" y="212" width="11" height="15" fill="rgb(219,63,4)"/><text x="1165.00" y="222.50"></text></g><g><title>_is_owned (threading.py) (2 samples, 0.31%)</title><rect x="1169" y="228" width="4" height="15" fill="rgb(229,34,3)"/><text x="1172.00" y="238.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (2 samples, 0.31%)</title><rect x="1169" y="244" width="4" height="15" fill="rgb(224,213,10)"/><text x="1172.00" y="254.50"></text></g><g><title>PyThread_acquire_lock_timed (python3.7) (1 samples, 0.16%)</title><rect x="1171" y="260" width="2" height="15" fill="rgb(222,157,52)"/><text x="1174.00" y="270.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (1 samples, 0.16%)</title><rect x="1171" y="276" width="2" height="15" fill="rgb(246,4,10)"/><text x="1174.00" y="286.50"></text></g><g><title>__call__ (joblib/parallel.py) (384 samples, 59.72%)</title><rect x="477" y="164" width="705" height="15" fill="rgb(247,29,35)"/><text x="480.00" y="174.50">__call__ (joblib/parallel.py)</text></g><g><title>retrieve (joblib/parallel.py) (5 samples, 0.78%)</title><rect x="1173" y="180" width="9" height="15" fill="rgb(209,127,9)"/><text x="1176.00" y="190.50"></text></g><g><title>_validate_X_predict (sklearn/ensemble/_forest.py) (1 samples, 0.16%)</title><rect x="1182" y="164" width="2" height="15" fill="rgb(206,54,42)"/><text x="1185.00" y="174.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (1 samples, 0.16%)</title><rect x="1182" y="180" width="2" height="15" fill="rgb(228,126,13)"/><text x="1185.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (1 samples, 0.16%)</title><rect x="1182" y="196" width="2" height="15" fill="rgb(214,67,30)"/><text x="1185.00" y="206.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (1 samples, 0.16%)</title><rect x="1184" y="180" width="2" height="15" fill="rgb(220,133,50)"/><text x="1187.00" y="190.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.16%)</title><rect x="1184" y="196" width="2" height="15" fill="rgb(208,16,36)"/><text x="1187.00" y="206.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (389 samples, 60.50%)</title><rect x="474" y="100" width="714" height="15" fill="rgb(237,110,45)"/><text x="477.00" y="110.50">profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (389 samples, 60.50%)</title><rect x="474" y="116" width="714" height="15" fill="rgb(230,9,20)"/><text x="477.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (389 samples, 60.50%)</title><rect x="474" y="132" width="714" height="15" fill="rgb(250,208,2)"/><text x="477.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py) (389 samples, 60.50%)</title><rect x="474" y="148" width="714" height="15" fill="rgb(235,195,37)"/><text x="477.00" y="158.50">predict_proba (sklearn/ensemble/_forest.py)</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (2 samples, 0.31%)</title><rect x="1184" y="164" width="4" height="15" fill="rgb(219,2,2)"/><text x="1187.00" y="174.50"></text></g><g><title>isclass (inspect.py) (1 samples, 0.16%)</title><rect x="1186" y="180" width="2" height="15" fill="rgb(213,77,18)"/><text x="1189.00" y="190.50"></text></g><g><title>all (643 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(225,224,13)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (643 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(227,86,43)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>profile_skl (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (390 samples, 60.65%)</title><rect x="474" y="68" width="716" height="15" fill="rgb(228,107,12)"/><text x="477.00" y="78.50">profile_skl (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py) (390 samples, 60.65%)</title><rect x="474" y="84" width="716" height="15" fill="rgb(249,182,36)"/><text x="477.00" y="94.50">setup_profile (bench_RandomForestClassifier_default_m_cl_1000_50_12_float_.py)</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.16%)</title><rect x="1188" y="100" width="2" height="15" fill="rgb(239,113,35)"/><text x="1191.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.16%)</title><rect x="1188" y="116" width="2" height="15" fill="rgb(246,49,37)"/><text x="1191.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.16%)</title><rect x="1188" y="132" width="2" height="15" fill="rgb(234,72,8)"/><text x="1191.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (1 samples, 0.16%)</title><rect x="1188" y="148" width="2" height="15" fill="rgb(214,66,39)"/><text x="1191.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (1 samples, 0.16%)</title><rect x="1188" y="164" width="2" height="15" fill="rgb(254,92,35)"/><text x="1191.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (1 samples, 0.16%)</title><rect x="1188" y="180" width="2" height="15" fill="rgb(245,29,34)"/><text x="1191.00" y="190.50"></text></g><g><title>gentype_dealloc (scalartypes.c.src) (1 samples, 0.16%)</title><rect x="1188" y="196" width="2" height="15" fill="rgb(213,126,34)"/><text x="1191.00" y="206.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.16%)</title><rect x="1188" y="212" width="2" height="15" fill="rgb(227,109,0)"/><text x="1191.00" y="222.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.16%)</title><rect x="1188" y="228" width="2" height="15" fill="rgb(225,215,35)"/><text x="1191.00" y="238.50"></text></g></g></svg>