<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1542" onload="init(evt)" viewBox="0 0 1200 1542" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1542" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1525.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1525.00"> </text><g id="frames"><g><title>0x7f949306a708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="13" y="324" width="1" height="15" fill="rgb(230,107,12)"/><text x="16.00" y="334.50"></text></g><g><title>0x7f94930355cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="13" y="340" width="1" height="15" fill="rgb(215,194,16)"/><text x="16.00" y="350.50"></text></g><g><title>0x7f949306c0dd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="14" y="324" width="1" height="15" fill="rgb(234,121,37)"/><text x="17.00" y="334.50"></text></g><g><title>0x7f9493040fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="14" y="340" width="1" height="15" fill="rgb(214,149,7)"/><text x="17.00" y="350.50"></text></g><g><title>0x7f9493040f84 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="15" y="356" width="2" height="15" fill="rgb(236,60,17)"/><text x="18.00" y="366.50"></text></g><g><title>0x7f9493043426 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (18 samples, 0.97%)</title><rect x="15" y="340" width="12" height="15" fill="rgb(246,23,39)"/><text x="18.00" y="350.50"></text></g><g><title>0x7f9493040fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (14 samples, 0.76%)</title><rect x="18" y="356" width="9" height="15" fill="rgb(216,7,32)"/><text x="21.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (14 samples, 0.76%)</title><rect x="18" y="372" width="9" height="15" fill="rgb(238,120,45)"/><text x="21.00" y="382.50"></text></g><g><title>0x7f94b8dc0e09 (libm-2.29.so) (2 samples, 0.11%)</title><rect x="25" y="388" width="2" height="15" fill="rgb(237,98,31)"/><text x="28.00" y="398.50"></text></g><g><title>0x7f94b8dc0d2b (libm-2.29.so) (3 samples, 0.16%)</title><rect x="31" y="388" width="2" height="15" fill="rgb(211,133,11)"/><text x="34.00" y="398.50"></text></g><g><title>0x7f9493043454 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.59%)</title><rect x="27" y="340" width="7" height="15" fill="rgb(233,223,7)"/><text x="30.00" y="350.50"></text></g><g><title>0x7f9493040fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.49%)</title><rect x="28" y="356" width="6" height="15" fill="rgb(208,119,0)"/><text x="31.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (9 samples, 0.49%)</title><rect x="28" y="372" width="6" height="15" fill="rgb(224,182,23)"/><text x="31.00" y="382.50"></text></g><g><title>0x7f94930432ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 0.38%)</title><rect x="34" y="356" width="5" height="15" fill="rgb(208,206,32)"/><text x="37.00" y="366.50"></text></g><g><title>0x7f94930432b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="39" y="356" width="1" height="15" fill="rgb(246,91,0)"/><text x="42.00" y="366.50"></text></g><g><title>0x7f94930432bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.59%)</title><rect x="40" y="356" width="7" height="15" fill="rgb(235,72,8)"/><text x="43.00" y="366.50"></text></g><g><title>0x7f9493043494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (25 samples, 1.35%)</title><rect x="34" y="340" width="16" height="15" fill="rgb(219,224,10)"/><text x="37.00" y="350.50"></text></g><g><title>0x7f9493043323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.16%)</title><rect x="48" y="356" width="2" height="15" fill="rgb(227,115,21)"/><text x="51.00" y="366.50"></text></g><g><title>0x7f94930434bd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="50" y="340" width="1" height="15" fill="rgb(247,130,0)"/><text x="53.00" y="350.50"></text></g><g><title>0x7f94930432ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.22%)</title><rect x="52" y="356" width="2" height="15" fill="rgb(243,38,15)"/><text x="55.00" y="366.50"></text></g><g><title>0x7f94930432bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.32%)</title><rect x="54" y="356" width="4" height="15" fill="rgb(245,121,20)"/><text x="57.00" y="366.50"></text></g><g><title>0x7f949304350f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 0.70%)</title><rect x="51" y="340" width="8" height="15" fill="rgb(223,203,53)"/><text x="54.00" y="350.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:18) (81 samples, 4.38%)</title><rect x="11" y="100" width="51" height="15" fill="rgb(240,187,7)"/><text x="14.00" y="110.50">profi..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (81 samples, 4.38%)</title><rect x="11" y="116" width="51" height="15" fill="rgb(223,118,27)"/><text x="14.00" y="126.50">time_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (81 samples, 4.38%)</title><rect x="11" y="132" width="51" height="15" fill="rgb(247,10,4)"/><text x="14.00" y="142.50">&lt;lamb..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (80 samples, 4.32%)</title><rect x="11" y="148" width="51" height="15" fill="rgb(243,91,17)"/><text x="14.00" y="158.50">predi..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (78 samples, 4.22%)</title><rect x="13" y="164" width="49" height="15" fill="rgb(250,9,10)"/><text x="16.00" y="174.50">knei..</text></g><g><title>__call__ (joblib/parallel.py:1003) (78 samples, 4.22%)</title><rect x="13" y="180" width="49" height="15" fill="rgb(218,178,49)"/><text x="16.00" y="190.50">__ca..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (78 samples, 4.22%)</title><rect x="13" y="196" width="49" height="15" fill="rgb(231,224,27)"/><text x="16.00" y="206.50">disp..</text></g><g><title>_dispatch (joblib/parallel.py:753) (78 samples, 4.22%)</title><rect x="13" y="212" width="49" height="15" fill="rgb(208,129,30)"/><text x="16.00" y="222.50">_dis..</text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (78 samples, 4.22%)</title><rect x="13" y="228" width="49" height="15" fill="rgb(241,84,25)"/><text x="16.00" y="238.50">appl..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (78 samples, 4.22%)</title><rect x="13" y="244" width="49" height="15" fill="rgb(248,84,35)"/><text x="16.00" y="254.50">__in..</text></g><g><title>__call__ (joblib/parallel.py:256) (78 samples, 4.22%)</title><rect x="13" y="260" width="49" height="15" fill="rgb(225,22,0)"/><text x="16.00" y="270.50">__ca..</text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (78 samples, 4.22%)</title><rect x="13" y="276" width="49" height="15" fill="rgb(252,27,38)"/><text x="16.00" y="286.50">&lt;lis..</text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (78 samples, 4.22%)</title><rect x="13" y="292" width="49" height="15" fill="rgb(253,223,5)"/><text x="16.00" y="302.50">_tre..</text></g><g><title>0x7f949306ee14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (78 samples, 4.22%)</title><rect x="13" y="308" width="49" height="15" fill="rgb(252,191,52)"/><text x="16.00" y="318.50">0x7f..</text></g><g><title>0x7f949306c100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (74 samples, 4.00%)</title><rect x="15" y="324" width="47" height="15" fill="rgb(242,183,25)"/><text x="18.00" y="334.50">0x7f..</text></g><g><title>0x7f9493043538 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.27%)</title><rect x="59" y="340" width="3" height="15" fill="rgb(246,191,35)"/><text x="62.00" y="350.50"></text></g><g><title>0x7f94930432bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.27%)</title><rect x="59" y="356" width="3" height="15" fill="rgb(209,13,49)"/><text x="62.00" y="366.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:215) (3 samples, 0.16%)</title><rect x="62" y="148" width="2" height="15" fill="rgb(239,102,46)"/><text x="65.00" y="158.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (2 samples, 0.11%)</title><rect x="63" y="164" width="1" height="15" fill="rgb(209,132,16)"/><text x="66.00" y="174.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (2 samples, 0.11%)</title><rect x="65" y="164" width="1" height="15" fill="rgb(229,118,3)"/><text x="68.00" y="174.50"></text></g><g><title>0x7f949306a32c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.16%)</title><rect x="68" y="324" width="2" height="15" fill="rgb(210,221,5)"/><text x="71.00" y="334.50"></text></g><g><title>0x7f94930355cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.16%)</title><rect x="68" y="340" width="2" height="15" fill="rgb(214,97,29)"/><text x="71.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py:515) (2 samples, 0.11%)</title><rect x="69" y="356" width="1" height="15" fill="rgb(252,20,35)"/><text x="72.00" y="366.50"></text></g><g><title>asarray (numpy/core/_asarray.py:85) (2 samples, 0.11%)</title><rect x="69" y="372" width="1" height="15" fill="rgb(234,105,6)"/><text x="72.00" y="382.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1734) (2 samples, 0.11%)</title><rect x="69" y="388" width="1" height="15" fill="rgb(228,144,39)"/><text x="72.00" y="398.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c:2041) (2 samples, 0.11%)</title><rect x="69" y="404" width="1" height="15" fill="rgb(205,35,38)"/><text x="72.00" y="414.50"></text></g><g><title>PyArray_FromAny (ctors.c:1966) (2 samples, 0.11%)</title><rect x="69" y="420" width="1" height="15" fill="rgb(248,35,4)"/><text x="72.00" y="430.50"></text></g><g><title>PyArray_FromArray (ctors.c:2172) (2 samples, 0.11%)</title><rect x="69" y="436" width="1" height="15" fill="rgb(248,94,9)"/><text x="72.00" y="446.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (2 samples, 0.11%)</title><rect x="69" y="452" width="1" height="15" fill="rgb(231,87,53)"/><text x="72.00" y="462.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (2 samples, 0.11%)</title><rect x="69" y="468" width="1" height="15" fill="rgb(205,206,54)"/><text x="72.00" y="478.50"></text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src:855) (2 samples, 0.11%)</title><rect x="69" y="484" width="1" height="15" fill="rgb(245,183,17)"/><text x="72.00" y="494.50"></text></g><g><title>0x7f9493040fa7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.16%)</title><rect x="72" y="340" width="2" height="15" fill="rgb(247,104,41)"/><text x="75.00" y="350.50"></text></g><g><title>0x7f949306c0dd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 0.70%)</title><rect x="70" y="324" width="8" height="15" fill="rgb(219,69,34)"/><text x="73.00" y="334.50"></text></g><g><title>0x7f9493040fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.32%)</title><rect x="75" y="340" width="3" height="15" fill="rgb(238,219,5)"/><text x="78.00" y="350.50"></text></g><g><title>pow (libm-2.29.so) (5 samples, 0.27%)</title><rect x="75" y="356" width="3" height="15" fill="rgb(208,170,7)"/><text x="78.00" y="366.50"></text></g><g><title>0x7f9493040f5c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="79" y="356" width="1" height="15" fill="rgb(230,4,16)"/><text x="82.00" y="366.50"></text></g><g><title>0x7f9493040fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (14 samples, 0.76%)</title><rect x="83" y="356" width="9" height="15" fill="rgb(235,138,50)"/><text x="86.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (14 samples, 0.76%)</title><rect x="83" y="372" width="9" height="15" fill="rgb(206,158,21)"/><text x="86.00" y="382.50"></text></g><g><title>0x7f9493043426 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (22 samples, 1.19%)</title><rect x="78" y="340" width="14" height="15" fill="rgb(238,36,20)"/><text x="81.00" y="350.50"></text></g><g><title>0x7f9493043454 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (21 samples, 1.14%)</title><rect x="92" y="340" width="14" height="15" fill="rgb(205,124,1)"/><text x="95.00" y="350.50"></text></g><g><title>0x7f9493040fc2 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (18 samples, 0.97%)</title><rect x="94" y="356" width="12" height="15" fill="rgb(222,6,42)"/><text x="97.00" y="366.50"></text></g><g><title>pow (libm-2.29.so) (17 samples, 0.92%)</title><rect x="95" y="372" width="11" height="15" fill="rgb(232,201,14)"/><text x="98.00" y="382.50"></text></g><g><title>0x7f94930432ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.59%)</title><rect x="106" y="356" width="7" height="15" fill="rgb(251,114,41)"/><text x="109.00" y="366.50"></text></g><g><title>0x7f94930432bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (24 samples, 1.30%)</title><rect x="114" y="356" width="15" height="15" fill="rgb(236,194,3)"/><text x="117.00" y="366.50"></text></g><g><title>0x7f94930432c1 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="129" y="356" width="2" height="15" fill="rgb(248,195,41)"/><text x="132.00" y="366.50"></text></g><g><title>0x7f94930432fb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="131" y="356" width="2" height="15" fill="rgb(211,120,51)"/><text x="134.00" y="366.50"></text></g><g><title>0x7f9493043323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.16%)</title><rect x="133" y="356" width="2" height="15" fill="rgb(253,151,36)"/><text x="136.00" y="366.50"></text></g><g><title>0x7f9493043494 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (46 samples, 2.49%)</title><rect x="106" y="340" width="29" height="15" fill="rgb(232,185,16)"/><text x="109.00" y="350.50">0x..</text></g><g><title>0x7f94930432ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="135" y="356" width="1" height="15" fill="rgb(207,176,21)"/><text x="138.00" y="366.50"></text></g><g><title>0x7f94930434bd (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.22%)</title><rect x="135" y="340" width="3" height="15" fill="rgb(234,87,43)"/><text x="138.00" y="350.50"></text></g><g><title>0x7f94930432bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="136" y="356" width="2" height="15" fill="rgb(240,157,6)"/><text x="139.00" y="366.50"></text></g><g><title>0x7f94930432ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (18 samples, 0.97%)</title><rect x="138" y="356" width="12" height="15" fill="rgb(205,191,11)"/><text x="141.00" y="366.50"></text></g><g><title>0x7f94930432b7 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="150" y="356" width="1" height="15" fill="rgb(241,211,24)"/><text x="153.00" y="366.50"></text></g><g><title>0x7f94930432bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (24 samples, 1.30%)</title><rect x="151" y="356" width="15" height="15" fill="rgb(235,65,52)"/><text x="154.00" y="366.50"></text></g><g><title>0x7f9493043323 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="166" y="356" width="2" height="15" fill="rgb(234,22,38)"/><text x="169.00" y="366.50"></text></g><g><title>0x7f949304350f (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (48 samples, 2.59%)</title><rect x="138" y="340" width="30" height="15" fill="rgb(227,51,16)"/><text x="141.00" y="350.50">0x..</text></g><g><title>0x7f94930432ac (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.11%)</title><rect x="168" y="356" width="2" height="15" fill="rgb(241,185,24)"/><text x="171.00" y="366.50"></text></g><g><title>0x7f949306c100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (153 samples, 8.27%)</title><rect x="78" y="324" width="98" height="15" fill="rgb(247,221,21)"/><text x="81.00" y="334.50">0x7f949306c..</text></g><g><title>0x7f9493043538 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 0.65%)</title><rect x="168" y="340" width="8" height="15" fill="rgb(233,41,28)"/><text x="171.00" y="350.50"></text></g><g><title>0x7f94930432bb (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 0.49%)</title><rect x="170" y="356" width="6" height="15" fill="rgb(206,61,45)"/><text x="173.00" y="366.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (172 samples, 9.30%)</title><rect x="67" y="180" width="110" height="15" fill="rgb(220,1,37)"/><text x="70.00" y="190.50">__call__ (job..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (171 samples, 9.24%)</title><rect x="68" y="196" width="109" height="15" fill="rgb(240,228,39)"/><text x="71.00" y="206.50">dispatch_one_..</text></g><g><title>_dispatch (joblib/parallel.py:753) (171 samples, 9.24%)</title><rect x="68" y="212" width="109" height="15" fill="rgb(244,99,48)"/><text x="71.00" y="222.50">_dispatch (jo..</text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (170 samples, 9.19%)</title><rect x="68" y="228" width="109" height="15" fill="rgb(213,153,8)"/><text x="71.00" y="238.50">apply_async (..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (170 samples, 9.19%)</title><rect x="68" y="244" width="109" height="15" fill="rgb(219,217,9)"/><text x="71.00" y="254.50">__init__ (job..</text></g><g><title>__call__ (joblib/parallel.py:256) (170 samples, 9.19%)</title><rect x="68" y="260" width="109" height="15" fill="rgb(226,91,29)"/><text x="71.00" y="270.50">__call__ (job..</text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (170 samples, 9.19%)</title><rect x="68" y="276" width="109" height="15" fill="rgb(241,150,47)"/><text x="71.00" y="286.50">&lt;listcomp&gt; (j..</text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (170 samples, 9.19%)</title><rect x="68" y="292" width="109" height="15" fill="rgb(216,218,53)"/><text x="71.00" y="302.50">_tree_query_p..</text></g><g><title>0x7f949306ee14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (170 samples, 9.19%)</title><rect x="68" y="308" width="109" height="15" fill="rgb(236,146,11)"/><text x="71.00" y="318.50">0x7f949306ee1..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (177 samples, 9.57%)</title><rect x="64" y="148" width="113" height="15" fill="rgb(229,74,12)"/><text x="67.00" y="158.50">predict_proba..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (173 samples, 9.35%)</title><rect x="67" y="164" width="110" height="15" fill="rgb(230,25,15)"/><text x="70.00" y="174.50">kneighbors (s..</text></g><g><title>array_assign_subscript (mapping.c:2013) (2 samples, 0.11%)</title><rect x="177" y="164" width="2" height="15" fill="rgb(229,121,47)"/><text x="180.00" y="174.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:239) (4 samples, 0.22%)</title><rect x="177" y="148" width="3" height="15" fill="rgb(250,29,42)"/><text x="180.00" y="158.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:38) (267 samples, 14.43%)</title><rect x="10" y="52" width="170" height="15" fill="rgb(210,44,13)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeigh..</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:37) (267 samples, 14.43%)</title><rect x="10" y="68" width="170" height="15" fill="rgb(228,140,29)"/><text x="13.00" y="78.50">profile_skl (bench_KNe..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:29) (266 samples, 14.38%)</title><rect x="11" y="84" width="169" height="15" fill="rgb(251,122,14)"/><text x="14.00" y="94.50">setup_profile (bench_..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:23) (185 samples, 10.00%)</title><rect x="62" y="100" width="118" height="15" fill="rgb(226,58,34)"/><text x="65.00" y="110.50">profile (bench..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (185 samples, 10.00%)</title><rect x="62" y="116" width="118" height="15" fill="rgb(228,4,15)"/><text x="65.00" y="126.50">time_predict (..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (185 samples, 10.00%)</title><rect x="62" y="132" width="118" height="15" fill="rgb(213,24,19)"/><text x="65.00" y="142.50">&lt;lambda&gt; (mlpr..</text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (3 samples, 0.16%)</title><rect x="181" y="852" width="2" height="15" fill="rgb(216,138,51)"/><text x="184.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (3 samples, 0.16%)</title><rect x="181" y="868" width="2" height="15" fill="rgb(212,76,35)"/><text x="184.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (3 samples, 0.16%)</title><rect x="181" y="884" width="2" height="15" fill="rgb(221,182,17)"/><text x="184.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (3 samples, 0.16%)</title><rect x="181" y="900" width="2" height="15" fill="rgb(224,82,39)"/><text x="184.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (2 samples, 0.11%)</title><rect x="182" y="916" width="1" height="15" fill="rgb(215,110,9)"/><text x="185.00" y="926.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py:2135) (2 samples, 0.11%)</title><rect x="182" y="932" width="1" height="15" fill="rgb(237,0,31)"/><text x="185.00" y="942.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3279) (2 samples, 0.11%)</title><rect x="183" y="852" width="1" height="15" fill="rgb(206,120,8)"/><text x="186.00" y="862.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py:3279) (2 samples, 0.11%)</title><rect x="183" y="868" width="1" height="15" fill="rgb(236,102,11)"/><text x="186.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py:2782) (2 samples, 0.11%)</title><rect x="183" y="884" width="1" height="15" fill="rgb(234,126,14)"/><text x="186.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py:2295) (2 samples, 0.11%)</title><rect x="183" y="900" width="1" height="15" fill="rgb(242,2,21)"/><text x="186.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py:2201) (2 samples, 0.11%)</title><rect x="183" y="916" width="1" height="15" fill="rgb(246,131,44)"/><text x="186.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;:431) (2 samples, 0.11%)</title><rect x="183" y="932" width="1" height="15" fill="rgb(238,159,32)"/><text x="186.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;:1346) (2 samples, 0.11%)</title><rect x="183" y="948" width="1" height="15" fill="rgb(207,115,2)"/><text x="186.00" y="958.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (6 samples, 0.32%)</title><rect x="181" y="820" width="4" height="15" fill="rgb(212,131,37)"/><text x="184.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (6 samples, 0.32%)</title><rect x="181" y="836" width="4" height="15" fill="rgb(236,162,36)"/><text x="184.00" y="846.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py:2) (7 samples, 0.38%)</title><rect x="181" y="148" width="5" height="15" fill="rgb(251,37,54)"/><text x="184.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.38%)</title><rect x="181" y="164" width="5" height="15" fill="rgb(221,156,36)"/><text x="184.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 0.38%)</title><rect x="181" y="180" width="5" height="15" fill="rgb(230,164,10)"/><text x="184.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.38%)</title><rect x="181" y="196" width="5" height="15" fill="rgb(224,158,4)"/><text x="184.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.38%)</title><rect x="181" y="212" width="5" height="15" fill="rgb(217,144,15)"/><text x="184.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.38%)</title><rect x="181" y="228" width="5" height="15" fill="rgb(222,85,14)"/><text x="184.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.38%)</title><rect x="181" y="244" width="5" height="15" fill="rgb(229,201,43)"/><text x="184.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.38%)</title><rect x="181" y="260" width="5" height="15" fill="rgb(242,183,50)"/><text x="184.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.38%)</title><rect x="181" y="276" width="5" height="15" fill="rgb(234,214,48)"/><text x="184.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (7 samples, 0.38%)</title><rect x="181" y="292" width="5" height="15" fill="rgb(219,119,53)"/><text x="184.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.38%)</title><rect x="181" y="308" width="5" height="15" fill="rgb(242,225,13)"/><text x="184.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.38%)</title><rect x="181" y="324" width="5" height="15" fill="rgb(225,196,28)"/><text x="184.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.38%)</title><rect x="181" y="340" width="5" height="15" fill="rgb(227,12,39)"/><text x="184.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.38%)</title><rect x="181" y="356" width="5" height="15" fill="rgb(237,10,27)"/><text x="184.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.38%)</title><rect x="181" y="372" width="5" height="15" fill="rgb(217,200,54)"/><text x="184.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (7 samples, 0.38%)</title><rect x="181" y="388" width="5" height="15" fill="rgb(242,165,10)"/><text x="184.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.38%)</title><rect x="181" y="404" width="5" height="15" fill="rgb(240,31,7)"/><text x="184.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.38%)</title><rect x="181" y="420" width="5" height="15" fill="rgb(240,224,42)"/><text x="184.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.38%)</title><rect x="181" y="436" width="5" height="15" fill="rgb(241,117,22)"/><text x="184.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.38%)</title><rect x="181" y="452" width="5" height="15" fill="rgb(251,76,9)"/><text x="184.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.38%)</title><rect x="181" y="468" width="5" height="15" fill="rgb(211,95,31)"/><text x="184.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (7 samples, 0.38%)</title><rect x="181" y="484" width="5" height="15" fill="rgb(232,227,10)"/><text x="184.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.38%)</title><rect x="181" y="500" width="5" height="15" fill="rgb(227,177,18)"/><text x="184.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.38%)</title><rect x="181" y="516" width="5" height="15" fill="rgb(232,166,43)"/><text x="184.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.38%)</title><rect x="181" y="532" width="5" height="15" fill="rgb(227,191,34)"/><text x="184.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.38%)</title><rect x="181" y="548" width="5" height="15" fill="rgb(229,41,39)"/><text x="184.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.38%)</title><rect x="181" y="564" width="5" height="15" fill="rgb(214,44,47)"/><text x="184.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (7 samples, 0.38%)</title><rect x="181" y="580" width="5" height="15" fill="rgb(223,180,8)"/><text x="184.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.38%)</title><rect x="181" y="596" width="5" height="15" fill="rgb(235,106,9)"/><text x="184.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 0.38%)</title><rect x="181" y="612" width="5" height="15" fill="rgb(217,54,36)"/><text x="184.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.38%)</title><rect x="181" y="628" width="5" height="15" fill="rgb(233,215,8)"/><text x="184.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.38%)</title><rect x="181" y="644" width="5" height="15" fill="rgb(215,51,27)"/><text x="184.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.38%)</title><rect x="181" y="660" width="5" height="15" fill="rgb(211,43,50)"/><text x="184.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.38%)</title><rect x="181" y="676" width="5" height="15" fill="rgb(231,164,4)"/><text x="184.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.38%)</title><rect x="181" y="692" width="5" height="15" fill="rgb(227,109,42)"/><text x="184.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.38%)</title><rect x="181" y="708" width="5" height="15" fill="rgb(207,1,52)"/><text x="184.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (7 samples, 0.38%)</title><rect x="181" y="724" width="5" height="15" fill="rgb(220,6,27)"/><text x="184.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.38%)</title><rect x="181" y="740" width="5" height="15" fill="rgb(227,92,3)"/><text x="184.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.38%)</title><rect x="181" y="756" width="5" height="15" fill="rgb(222,133,29)"/><text x="184.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.38%)</title><rect x="181" y="772" width="5" height="15" fill="rgb(225,54,34)"/><text x="184.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.38%)</title><rect x="181" y="788" width="5" height="15" fill="rgb(239,224,48)"/><text x="184.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.38%)</title><rect x="181" y="804" width="5" height="15" fill="rgb(230,123,1)"/><text x="184.00" y="814.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (2 samples, 0.11%)</title><rect x="186" y="244" width="1" height="15" fill="rgb(225,90,26)"/><text x="189.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="186" y="260" width="1" height="15" fill="rgb(251,93,53)"/><text x="189.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.11%)</title><rect x="186" y="276" width="1" height="15" fill="rgb(211,24,11)"/><text x="189.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.11%)</title><rect x="186" y="292" width="1" height="15" fill="rgb(232,99,41)"/><text x="189.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.11%)</title><rect x="186" y="308" width="1" height="15" fill="rgb(211,214,41)"/><text x="189.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="186" y="324" width="1" height="15" fill="rgb(231,120,15)"/><text x="189.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (2 samples, 0.11%)</title><rect x="186" y="340" width="1" height="15" fill="rgb(221,107,39)"/><text x="189.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="186" y="356" width="1" height="15" fill="rgb(212,204,19)"/><text x="189.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (2 samples, 0.11%)</title><rect x="186" y="372" width="1" height="15" fill="rgb(246,180,6)"/><text x="189.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="186" y="388" width="1" height="15" fill="rgb(242,8,23)"/><text x="189.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="186" y="404" width="1" height="15" fill="rgb(253,0,53)"/><text x="189.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.11%)</title><rect x="186" y="420" width="1" height="15" fill="rgb(220,179,35)"/><text x="189.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.11%)</title><rect x="186" y="436" width="1" height="15" fill="rgb(235,180,23)"/><text x="189.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.11%)</title><rect x="186" y="452" width="1" height="15" fill="rgb(231,215,6)"/><text x="189.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="186" y="468" width="1" height="15" fill="rgb(243,116,9)"/><text x="189.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:7) (2 samples, 0.11%)</title><rect x="186" y="484" width="1" height="15" fill="rgb(248,37,23)"/><text x="189.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="186" y="500" width="1" height="15" fill="rgb(206,68,38)"/><text x="189.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.11%)</title><rect x="186" y="516" width="1" height="15" fill="rgb(205,146,28)"/><text x="189.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.11%)</title><rect x="186" y="532" width="1" height="15" fill="rgb(209,156,29)"/><text x="189.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.11%)</title><rect x="186" y="548" width="1" height="15" fill="rgb(222,192,34)"/><text x="189.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="186" y="564" width="1" height="15" fill="rgb(235,64,49)"/><text x="189.00" y="574.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:147) (2 samples, 0.11%)</title><rect x="187" y="628" width="2" height="15" fill="rgb(227,92,16)"/><text x="190.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="187" y="644" width="2" height="15" fill="rgb(224,104,35)"/><text x="190.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.11%)</title><rect x="187" y="660" width="2" height="15" fill="rgb(239,45,22)"/><text x="190.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.11%)</title><rect x="187" y="676" width="2" height="15" fill="rgb(241,46,5)"/><text x="190.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.11%)</title><rect x="187" y="692" width="2" height="15" fill="rgb(212,52,43)"/><text x="190.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="187" y="708" width="2" height="15" fill="rgb(214,100,3)"/><text x="190.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (2 samples, 0.11%)</title><rect x="189" y="724" width="2" height="15" fill="rgb(252,3,32)"/><text x="192.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="189" y="740" width="2" height="15" fill="rgb(232,185,13)"/><text x="192.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.11%)</title><rect x="189" y="756" width="2" height="15" fill="rgb(219,23,52)"/><text x="192.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.11%)</title><rect x="189" y="772" width="2" height="15" fill="rgb(231,164,37)"/><text x="192.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.11%)</title><rect x="189" y="788" width="2" height="15" fill="rgb(246,76,36)"/><text x="192.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="189" y="804" width="2" height="15" fill="rgb(219,228,37)"/><text x="192.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (2 samples, 0.11%)</title><rect x="189" y="820" width="2" height="15" fill="rgb(241,7,52)"/><text x="192.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="189" y="836" width="2" height="15" fill="rgb(235,206,47)"/><text x="192.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.11%)</title><rect x="189" y="852" width="2" height="15" fill="rgb(247,96,12)"/><text x="192.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.11%)</title><rect x="189" y="868" width="2" height="15" fill="rgb(234,143,35)"/><text x="192.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.11%)</title><rect x="189" y="884" width="2" height="15" fill="rgb(244,101,5)"/><text x="192.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="189" y="900" width="2" height="15" fill="rgb(233,191,37)"/><text x="192.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:44) (2 samples, 0.11%)</title><rect x="189" y="916" width="2" height="15" fill="rgb(206,141,53)"/><text x="192.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="189" y="932" width="2" height="15" fill="rgb(220,174,4)"/><text x="192.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.11%)</title><rect x="189" y="948" width="2" height="15" fill="rgb(208,114,9)"/><text x="192.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.11%)</title><rect x="189" y="964" width="2" height="15" fill="rgb(240,154,31)"/><text x="192.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.11%)</title><rect x="189" y="980" width="2" height="15" fill="rgb(233,163,25)"/><text x="192.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="189" y="996" width="2" height="15" fill="rgb(246,83,16)"/><text x="192.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py:115) (2 samples, 0.11%)</title><rect x="189" y="1012" width="2" height="15" fill="rgb(205,165,38)"/><text x="192.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="189" y="1028" width="2" height="15" fill="rgb(216,41,13)"/><text x="192.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.11%)</title><rect x="189" y="1044" width="2" height="15" fill="rgb(207,100,3)"/><text x="192.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.11%)</title><rect x="189" y="1060" width="2" height="15" fill="rgb(250,142,33)"/><text x="192.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.11%)</title><rect x="189" y="1076" width="2" height="15" fill="rgb(217,91,34)"/><text x="192.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="189" y="1092" width="2" height="15" fill="rgb(217,149,43)"/><text x="192.00" y="1102.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (6 samples, 0.32%)</title><rect x="187" y="436" width="4" height="15" fill="rgb(252,136,34)"/><text x="190.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.32%)</title><rect x="187" y="452" width="4" height="15" fill="rgb(210,54,14)"/><text x="190.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.32%)</title><rect x="187" y="468" width="4" height="15" fill="rgb(247,203,33)"/><text x="190.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.32%)</title><rect x="187" y="484" width="4" height="15" fill="rgb(242,208,4)"/><text x="190.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.32%)</title><rect x="187" y="500" width="4" height="15" fill="rgb(215,168,30)"/><text x="190.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.32%)</title><rect x="187" y="516" width="4" height="15" fill="rgb(240,61,18)"/><text x="190.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (6 samples, 0.32%)</title><rect x="187" y="532" width="4" height="15" fill="rgb(246,114,7)"/><text x="190.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.32%)</title><rect x="187" y="548" width="4" height="15" fill="rgb(238,152,8)"/><text x="190.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 0.32%)</title><rect x="187" y="564" width="4" height="15" fill="rgb(218,63,38)"/><text x="190.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 0.32%)</title><rect x="187" y="580" width="4" height="15" fill="rgb(223,95,26)"/><text x="190.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 0.32%)</title><rect x="187" y="596" width="4" height="15" fill="rgb(246,128,28)"/><text x="190.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.32%)</title><rect x="187" y="612" width="4" height="15" fill="rgb(248,108,10)"/><text x="190.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (3 samples, 0.16%)</title><rect x="189" y="628" width="2" height="15" fill="rgb(243,170,42)"/><text x="192.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.16%)</title><rect x="189" y="644" width="2" height="15" fill="rgb(232,99,0)"/><text x="192.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.16%)</title><rect x="189" y="660" width="2" height="15" fill="rgb(225,41,30)"/><text x="192.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.16%)</title><rect x="189" y="676" width="2" height="15" fill="rgb(226,227,34)"/><text x="192.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.16%)</title><rect x="189" y="692" width="2" height="15" fill="rgb(228,98,7)"/><text x="192.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.16%)</title><rect x="189" y="708" width="2" height="15" fill="rgb(224,202,24)"/><text x="192.00" y="718.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:4) (21 samples, 1.14%)</title><rect x="180" y="52" width="14" height="15" fill="rgb(213,177,35)"/><text x="183.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (21 samples, 1.14%)</title><rect x="180" y="68" width="14" height="15" fill="rgb(215,211,18)"/><text x="183.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (21 samples, 1.14%)</title><rect x="180" y="84" width="14" height="15" fill="rgb(245,174,38)"/><text x="183.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (21 samples, 1.14%)</title><rect x="180" y="100" width="14" height="15" fill="rgb(252,102,51)"/><text x="183.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (21 samples, 1.14%)</title><rect x="180" y="116" width="14" height="15" fill="rgb(206,229,22)"/><text x="183.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (21 samples, 1.14%)</title><rect x="180" y="132" width="14" height="15" fill="rgb(223,164,19)"/><text x="183.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py:7) (12 samples, 0.65%)</title><rect x="186" y="148" width="8" height="15" fill="rgb(210,53,47)"/><text x="189.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (12 samples, 0.65%)</title><rect x="186" y="164" width="8" height="15" fill="rgb(237,20,44)"/><text x="189.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (12 samples, 0.65%)</title><rect x="186" y="180" width="8" height="15" fill="rgb(240,2,3)"/><text x="189.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (12 samples, 0.65%)</title><rect x="186" y="196" width="8" height="15" fill="rgb(216,21,26)"/><text x="189.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (12 samples, 0.65%)</title><rect x="186" y="212" width="8" height="15" fill="rgb(224,104,13)"/><text x="189.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (12 samples, 0.65%)</title><rect x="186" y="228" width="8" height="15" fill="rgb(250,23,15)"/><text x="189.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (10 samples, 0.54%)</title><rect x="187" y="244" width="7" height="15" fill="rgb(246,147,1)"/><text x="190.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 0.54%)</title><rect x="187" y="260" width="7" height="15" fill="rgb(228,153,50)"/><text x="190.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 0.54%)</title><rect x="187" y="276" width="7" height="15" fill="rgb(250,183,45)"/><text x="190.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 0.54%)</title><rect x="187" y="292" width="7" height="15" fill="rgb(226,129,49)"/><text x="190.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 0.54%)</title><rect x="187" y="308" width="7" height="15" fill="rgb(218,136,53)"/><text x="190.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 0.54%)</title><rect x="187" y="324" width="7" height="15" fill="rgb(240,144,13)"/><text x="190.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (10 samples, 0.54%)</title><rect x="187" y="340" width="7" height="15" fill="rgb(236,111,39)"/><text x="190.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 0.54%)</title><rect x="187" y="356" width="7" height="15" fill="rgb(232,97,17)"/><text x="190.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 0.54%)</title><rect x="187" y="372" width="7" height="15" fill="rgb(242,195,20)"/><text x="190.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 0.54%)</title><rect x="187" y="388" width="7" height="15" fill="rgb(240,14,22)"/><text x="190.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 0.54%)</title><rect x="187" y="404" width="7" height="15" fill="rgb(236,144,31)"/><text x="190.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 0.54%)</title><rect x="187" y="420" width="7" height="15" fill="rgb(249,108,19)"/><text x="190.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (4 samples, 0.22%)</title><rect x="191" y="436" width="3" height="15" fill="rgb(227,23,22)"/><text x="194.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.22%)</title><rect x="191" y="452" width="3" height="15" fill="rgb(253,4,8)"/><text x="194.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.22%)</title><rect x="191" y="468" width="3" height="15" fill="rgb(239,93,46)"/><text x="194.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.22%)</title><rect x="191" y="484" width="3" height="15" fill="rgb(249,79,47)"/><text x="194.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.22%)</title><rect x="191" y="500" width="3" height="15" fill="rgb(252,195,52)"/><text x="194.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.22%)</title><rect x="191" y="516" width="3" height="15" fill="rgb(250,73,27)"/><text x="194.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.22%)</title><rect x="191" y="532" width="3" height="15" fill="rgb(224,195,8)"/><text x="194.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.22%)</title><rect x="191" y="548" width="3" height="15" fill="rgb(206,85,53)"/><text x="194.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.22%)</title><rect x="191" y="564" width="3" height="15" fill="rgb(231,50,29)"/><text x="194.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (4 samples, 0.22%)</title><rect x="191" y="580" width="3" height="15" fill="rgb(242,111,50)"/><text x="194.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.22%)</title><rect x="191" y="596" width="3" height="15" fill="rgb(230,195,32)"/><text x="194.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.22%)</title><rect x="191" y="612" width="3" height="15" fill="rgb(230,137,43)"/><text x="194.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.22%)</title><rect x="191" y="628" width="3" height="15" fill="rgb(227,74,51)"/><text x="194.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.22%)</title><rect x="191" y="644" width="3" height="15" fill="rgb(206,111,0)"/><text x="194.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.22%)</title><rect x="191" y="660" width="3" height="15" fill="rgb(229,89,10)"/><text x="194.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (4 samples, 0.22%)</title><rect x="191" y="676" width="3" height="15" fill="rgb(218,157,40)"/><text x="194.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.22%)</title><rect x="191" y="692" width="3" height="15" fill="rgb(244,121,20)"/><text x="194.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.22%)</title><rect x="191" y="708" width="3" height="15" fill="rgb(243,206,32)"/><text x="194.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.22%)</title><rect x="191" y="724" width="3" height="15" fill="rgb(240,34,6)"/><text x="194.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.22%)</title><rect x="191" y="740" width="3" height="15" fill="rgb(249,185,28)"/><text x="194.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.22%)</title><rect x="191" y="756" width="3" height="15" fill="rgb(227,182,30)"/><text x="194.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (4 samples, 0.22%)</title><rect x="191" y="772" width="3" height="15" fill="rgb(215,117,30)"/><text x="194.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.22%)</title><rect x="191" y="788" width="3" height="15" fill="rgb(247,182,23)"/><text x="194.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.22%)</title><rect x="191" y="804" width="3" height="15" fill="rgb(219,207,0)"/><text x="194.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.22%)</title><rect x="191" y="820" width="3" height="15" fill="rgb(235,77,0)"/><text x="194.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.22%)</title><rect x="191" y="836" width="3" height="15" fill="rgb(210,134,14)"/><text x="194.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.22%)</title><rect x="191" y="852" width="3" height="15" fill="rgb(223,114,34)"/><text x="194.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (4 samples, 0.22%)</title><rect x="191" y="868" width="3" height="15" fill="rgb(230,139,5)"/><text x="194.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.22%)</title><rect x="191" y="884" width="3" height="15" fill="rgb(249,190,44)"/><text x="194.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.22%)</title><rect x="191" y="900" width="3" height="15" fill="rgb(250,167,49)"/><text x="194.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.22%)</title><rect x="191" y="916" width="3" height="15" fill="rgb(225,157,18)"/><text x="194.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.22%)</title><rect x="191" y="932" width="3" height="15" fill="rgb(222,82,45)"/><text x="194.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.22%)</title><rect x="191" y="948" width="3" height="15" fill="rgb(234,107,36)"/><text x="194.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.22%)</title><rect x="191" y="964" width="3" height="15" fill="rgb(223,179,7)"/><text x="194.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.22%)</title><rect x="191" y="980" width="3" height="15" fill="rgb(239,57,26)"/><text x="194.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.22%)</title><rect x="191" y="996" width="3" height="15" fill="rgb(225,188,11)"/><text x="194.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (4 samples, 0.22%)</title><rect x="191" y="1012" width="3" height="15" fill="rgb(232,160,45)"/><text x="194.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.22%)</title><rect x="191" y="1028" width="3" height="15" fill="rgb(244,78,30)"/><text x="194.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.22%)</title><rect x="191" y="1044" width="3" height="15" fill="rgb(210,70,15)"/><text x="194.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.22%)</title><rect x="191" y="1060" width="3" height="15" fill="rgb(241,198,31)"/><text x="194.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.22%)</title><rect x="191" y="1076" width="3" height="15" fill="rgb(207,153,24)"/><text x="194.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.22%)</title><rect x="191" y="1092" width="3" height="15" fill="rgb(243,161,22)"/><text x="194.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (2 samples, 0.11%)</title><rect x="193" y="1108" width="1" height="15" fill="rgb(253,117,32)"/><text x="196.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.11%)</title><rect x="193" y="1124" width="1" height="15" fill="rgb(219,98,21)"/><text x="196.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="193" y="1140" width="1" height="15" fill="rgb(247,94,32)"/><text x="196.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="193" y="1156" width="1" height="15" fill="rgb(251,107,14)"/><text x="196.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.11%)</title><rect x="193" y="1172" width="1" height="15" fill="rgb(217,49,10)"/><text x="196.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.11%)</title><rect x="193" y="1188" width="1" height="15" fill="rgb(208,104,19)"/><text x="196.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.11%)</title><rect x="193" y="1204" width="1" height="15" fill="rgb(238,12,6)"/><text x="196.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="193" y="1220" width="1" height="15" fill="rgb(215,23,17)"/><text x="196.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (2 samples, 0.11%)</title><rect x="193" y="1236" width="1" height="15" fill="rgb(232,155,13)"/><text x="196.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.11%)</title><rect x="193" y="1252" width="1" height="15" fill="rgb(230,37,29)"/><text x="196.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="193" y="1268" width="1" height="15" fill="rgb(244,54,43)"/><text x="196.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="193" y="1284" width="1" height="15" fill="rgb(243,119,54)"/><text x="196.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.11%)</title><rect x="193" y="1300" width="1" height="15" fill="rgb(250,146,4)"/><text x="196.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.11%)</title><rect x="193" y="1316" width="1" height="15" fill="rgb(218,127,49)"/><text x="196.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.11%)</title><rect x="193" y="1332" width="1" height="15" fill="rgb(243,100,14)"/><text x="196.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="193" y="1348" width="1" height="15" fill="rgb(216,3,36)"/><text x="196.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (2 samples, 0.11%)</title><rect x="193" y="1364" width="1" height="15" fill="rgb(218,69,53)"/><text x="196.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.11%)</title><rect x="193" y="1380" width="1" height="15" fill="rgb(214,19,6)"/><text x="196.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.11%)</title><rect x="193" y="1396" width="1" height="15" fill="rgb(208,112,25)"/><text x="196.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.11%)</title><rect x="193" y="1412" width="1" height="15" fill="rgb(238,151,18)"/><text x="196.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.11%)</title><rect x="193" y="1428" width="1" height="15" fill="rgb(226,133,28)"/><text x="196.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.11%)</title><rect x="193" y="1444" width="1" height="15" fill="rgb(253,125,42)"/><text x="196.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py:159) (2 samples, 0.11%)</title><rect x="193" y="1460" width="1" height="15" fill="rgb(238,100,4)"/><text x="196.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py:153) (2 samples, 0.11%)</title><rect x="193" y="1476" width="1" height="15" fill="rgb(254,195,33)"/><text x="196.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py:97) (2 samples, 0.11%)</title><rect x="193" y="1492" width="1" height="15" fill="rgb(235,23,33)"/><text x="196.00" y="1502.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (3 samples, 0.16%)</title><rect x="194" y="260" width="2" height="15" fill="rgb(208,56,22)"/><text x="197.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (3 samples, 0.16%)</title><rect x="194" y="276" width="2" height="15" fill="rgb(229,203,28)"/><text x="197.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (3 samples, 0.16%)</title><rect x="194" y="292" width="2" height="15" fill="rgb(250,96,50)"/><text x="197.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (3 samples, 0.16%)</title><rect x="194" y="308" width="2" height="15" fill="rgb(254,61,15)"/><text x="197.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (2 samples, 0.11%)</title><rect x="194" y="324" width="2" height="15" fill="rgb(213,114,28)"/><text x="197.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (4 samples, 0.22%)</title><rect x="194" y="212" width="2" height="15" fill="rgb(217,125,29)"/><text x="197.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1539) (4 samples, 0.22%)</title><rect x="194" y="228" width="2" height="15" fill="rgb(238,218,10)"/><text x="197.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:516) (4 samples, 0.22%)</title><rect x="194" y="244" width="2" height="15" fill="rgb(223,214,16)"/><text x="197.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (2 samples, 0.11%)</title><rect x="198" y="212" width="1" height="15" fill="rgb(249,6,3)"/><text x="201.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (5 samples, 0.27%)</title><rect x="201" y="260" width="4" height="15" fill="rgb(248,169,1)"/><text x="204.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (13 samples, 0.70%)</title><rect x="207" y="308" width="9" height="15" fill="rgb(214,75,2)"/><text x="210.00" y="318.50"></text></g><g><title>array_copy (methods.c:1133) (13 samples, 0.70%)</title><rect x="207" y="324" width="9" height="15" fill="rgb(227,146,8)"/><text x="210.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c:560) (13 samples, 0.70%)</title><rect x="207" y="340" width="9" height="15" fill="rgb(220,114,42)"/><text x="210.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (13 samples, 0.70%)</title><rect x="207" y="356" width="9" height="15" fill="rgb(210,30,0)"/><text x="210.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (13 samples, 0.70%)</title><rect x="207" y="372" width="9" height="15" fill="rgb(209,223,31)"/><text x="210.00" y="382.50"></text></g><g><title>0x7f94b8c76d94 (libc-2.29.so) (13 samples, 0.70%)</title><rect x="207" y="388" width="9" height="15" fill="rgb(239,194,39)"/><text x="210.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (2 samples, 0.11%)</title><rect x="216" y="340" width="1" height="15" fill="rgb(222,38,36)"/><text x="219.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (2 samples, 0.11%)</title><rect x="216" y="356" width="1" height="15" fill="rgb(242,41,37)"/><text x="219.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (2 samples, 0.11%)</title><rect x="216" y="372" width="1" height="15" fill="rgb(249,118,33)"/><text x="219.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (2 samples, 0.11%)</title><rect x="216" y="388" width="1" height="15" fill="rgb(211,203,52)"/><text x="219.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (2 samples, 0.11%)</title><rect x="217" y="356" width="2" height="15" fill="rgb(239,122,32)"/><text x="220.00" y="366.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:595) (5 samples, 0.27%)</title><rect x="219" y="388" width="4" height="15" fill="rgb(233,197,42)"/><text x="222.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h:169) (5 samples, 0.27%)</title><rect x="219" y="404" width="4" height="15" fill="rgb(240,164,18)"/><text x="222.00" y="414.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (16 samples, 0.86%)</title><rect x="216" y="308" width="10" height="15" fill="rgb(231,65,45)"/><text x="219.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (15 samples, 0.81%)</title><rect x="216" y="324" width="10" height="15" fill="rgb(205,79,37)"/><text x="219.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (13 samples, 0.70%)</title><rect x="217" y="340" width="9" height="15" fill="rgb(242,68,31)"/><text x="220.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (11 samples, 0.59%)</title><rect x="219" y="356" width="7" height="15" fill="rgb(222,82,7)"/><text x="222.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (11 samples, 0.59%)</title><rect x="219" y="372" width="7" height="15" fill="rgb(210,135,29)"/><text x="222.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:596) (5 samples, 0.27%)</title><rect x="223" y="388" width="3" height="15" fill="rgb(215,150,37)"/><text x="226.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (5 samples, 0.27%)</title><rect x="223" y="404" width="3" height="15" fill="rgb(235,109,45)"/><text x="226.00" y="414.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (5 samples, 0.27%)</title><rect x="229" y="372" width="3" height="15" fill="rgb(205,115,31)"/><text x="232.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (3 samples, 0.16%)</title><rect x="230" y="388" width="2" height="15" fill="rgb(218,31,4)"/><text x="233.00" y="398.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1690) (3 samples, 0.16%)</title><rect x="237" y="484" width="1" height="15" fill="rgb(241,5,20)"/><text x="240.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1699) (2 samples, 0.11%)</title><rect x="240" y="484" width="2" height="15" fill="rgb(223,62,4)"/><text x="243.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1700) (5 samples, 0.27%)</title><rect x="242" y="484" width="3" height="15" fill="rgb(208,19,23)"/><text x="245.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (18 samples, 0.97%)</title><rect x="235" y="468" width="12" height="15" fill="rgb(236,83,40)"/><text x="238.00" y="478.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (67 samples, 3.62%)</title><rect x="206" y="276" width="43" height="15" fill="rgb(222,167,14)"/><text x="209.00" y="286.50">run ..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (66 samples, 3.57%)</title><rect x="207" y="292" width="42" height="15" fill="rgb(212,145,48)"/><text x="210.00" y="302.50">run..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (36 samples, 1.95%)</title><rect x="226" y="308" width="23" height="15" fill="rgb(221,228,17)"/><text x="229.00" y="318.50">_..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (35 samples, 1.89%)</title><rect x="226" y="324" width="23" height="15" fill="rgb(254,90,53)"/><text x="229.00" y="334.50">s..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (35 samples, 1.89%)</title><rect x="226" y="340" width="23" height="15" fill="rgb(207,121,11)"/><text x="229.00" y="350.50">a..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (31 samples, 1.68%)</title><rect x="229" y="356" width="20" height="15" fill="rgb(221,12,37)"/><text x="232.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (26 samples, 1.41%)</title><rect x="232" y="372" width="17" height="15" fill="rgb(217,153,8)"/><text x="235.00" y="382.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (25 samples, 1.35%)</title><rect x="233" y="388" width="16" height="15" fill="rgb(245,69,6)"/><text x="236.00" y="398.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (25 samples, 1.35%)</title><rect x="233" y="404" width="16" height="15" fill="rgb(231,115,22)"/><text x="236.00" y="414.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (25 samples, 1.35%)</title><rect x="233" y="420" width="16" height="15" fill="rgb(250,149,47)"/><text x="236.00" y="430.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (22 samples, 1.19%)</title><rect x="235" y="436" width="14" height="15" fill="rgb(218,228,16)"/><text x="238.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (22 samples, 1.19%)</title><rect x="235" y="452" width="14" height="15" fill="rgb(244,135,35)"/><text x="238.00" y="462.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (2 samples, 0.11%)</title><rect x="249" y="276" width="1" height="15" fill="rgb(218,148,32)"/><text x="252.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (2 samples, 0.11%)</title><rect x="252" y="372" width="1" height="15" fill="rgb(218,211,8)"/><text x="255.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (2 samples, 0.11%)</title><rect x="252" y="388" width="1" height="15" fill="rgb(231,165,40)"/><text x="255.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (2 samples, 0.11%)</title><rect x="252" y="404" width="1" height="15" fill="rgb(219,11,26)"/><text x="255.00" y="414.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (2 samples, 0.11%)</title><rect x="252" y="420" width="1" height="15" fill="rgb(224,205,25)"/><text x="255.00" y="430.50"></text></g><g><title>0x7f94b8c76f3a (libc-2.29.so) (2 samples, 0.11%)</title><rect x="252" y="436" width="1" height="15" fill="rgb(243,42,11)"/><text x="255.00" y="446.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:603) (12 samples, 0.65%)</title><rect x="253" y="420" width="8" height="15" fill="rgb(249,221,51)"/><text x="256.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h:163) (12 samples, 0.65%)</title><rect x="253" y="436" width="8" height="15" fill="rgb(240,207,15)"/><text x="256.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (20 samples, 1.08%)</title><rect x="253" y="388" width="13" height="15" fill="rgb(230,127,32)"/><text x="256.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (20 samples, 1.08%)</title><rect x="253" y="404" width="13" height="15" fill="rgb(230,215,45)"/><text x="256.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:604) (8 samples, 0.43%)</title><rect x="261" y="420" width="5" height="15" fill="rgb(233,207,42)"/><text x="264.00" y="430.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (8 samples, 0.43%)</title><rect x="261" y="436" width="5" height="15" fill="rgb(239,109,25)"/><text x="264.00" y="446.50"></text></g><g><title>0x7f94b8c76f53 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="272" y="436" width="2" height="15" fill="rgb(207,40,53)"/><text x="275.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (13 samples, 0.70%)</title><rect x="268" y="420" width="8" height="15" fill="rgb(223,32,8)"/><text x="271.00" y="430.50"></text></g><g><title>0x7f94b8c76f76 (libc-2.29.so) (3 samples, 0.16%)</title><rect x="274" y="436" width="2" height="15" fill="rgb(228,21,41)"/><text x="277.00" y="446.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (15 samples, 0.81%)</title><rect x="267" y="404" width="10" height="15" fill="rgb(234,104,17)"/><text x="270.00" y="414.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (43 samples, 2.32%)</title><rect x="250" y="276" width="27" height="15" fill="rgb(227,146,28)"/><text x="253.00" y="286.50">r..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (41 samples, 2.22%)</title><rect x="251" y="292" width="26" height="15" fill="rgb(246,188,11)"/><text x="254.00" y="302.50">r..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (40 samples, 2.16%)</title><rect x="252" y="308" width="25" height="15" fill="rgb(225,18,31)"/><text x="255.00" y="318.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (40 samples, 2.16%)</title><rect x="252" y="324" width="25" height="15" fill="rgb(228,155,27)"/><text x="255.00" y="334.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (40 samples, 2.16%)</title><rect x="252" y="340" width="25" height="15" fill="rgb(207,1,12)"/><text x="255.00" y="350.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (40 samples, 2.16%)</title><rect x="252" y="356" width="25" height="15" fill="rgb(208,23,32)"/><text x="255.00" y="366.50">e..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (38 samples, 2.05%)</title><rect x="253" y="372" width="24" height="15" fill="rgb(231,100,16)"/><text x="256.00" y="382.50">i..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (16 samples, 0.86%)</title><rect x="267" y="388" width="10" height="15" fill="rgb(242,163,37)"/><text x="270.00" y="398.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (115 samples, 6.22%)</title><rect x="205" y="260" width="73" height="15" fill="rgb(225,3,8)"/><text x="208.00" y="270.50">run (mlp..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (2 samples, 0.11%)</title><rect x="278" y="260" width="1" height="15" fill="rgb(224,147,39)"/><text x="281.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (4 samples, 0.22%)</title><rect x="280" y="260" width="2" height="15" fill="rgb(208,138,46)"/><text x="283.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (132 samples, 7.14%)</title><rect x="200" y="244" width="84" height="15" fill="rgb(218,225,38)"/><text x="203.00" y="254.50">_run_sequ..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (3 samples, 0.16%)</title><rect x="282" y="260" width="2" height="15" fill="rgb(208,28,49)"/><text x="285.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (136 samples, 7.35%)</title><rect x="199" y="212" width="87" height="15" fill="rgb(230,219,26)"/><text x="202.00" y="222.50">_run (mlpr..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (135 samples, 7.30%)</title><rect x="200" y="228" width="86" height="15" fill="rgb(242,103,21)"/><text x="203.00" y="238.50">run (mlpro..</text></g><g><title>array_reshape (methods.c:186) (2 samples, 0.11%)</title><rect x="291" y="276" width="2" height="15" fill="rgb(210,116,48)"/><text x="294.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:53) (2 samples, 0.11%)</title><rect x="291" y="292" width="2" height="15" fill="rgb(244,83,33)"/><text x="294.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (11 samples, 0.59%)</title><rect x="286" y="212" width="7" height="15" fill="rgb(234,183,34)"/><text x="289.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (8 samples, 0.43%)</title><rect x="288" y="228" width="5" height="15" fill="rgb(252,200,6)"/><text x="291.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.38%)</title><rect x="289" y="244" width="4" height="15" fill="rgb(236,74,51)"/><text x="292.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (4 samples, 0.22%)</title><rect x="291" y="260" width="2" height="15" fill="rgb(231,112,17)"/><text x="294.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (2 samples, 0.11%)</title><rect x="293" y="212" width="2" height="15" fill="rgb(211,134,39)"/><text x="296.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (2 samples, 0.11%)</title><rect x="293" y="228" width="2" height="15" fill="rgb(248,36,10)"/><text x="296.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.11%)</title><rect x="293" y="244" width="2" height="15" fill="rgb(214,31,10)"/><text x="296.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (2 samples, 0.11%)</title><rect x="293" y="260" width="2" height="15" fill="rgb(235,73,42)"/><text x="296.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (2 samples, 0.11%)</title><rect x="293" y="276" width="2" height="15" fill="rgb(233,123,6)"/><text x="296.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.11%)</title><rect x="293" y="292" width="2" height="15" fill="rgb(216,168,43)"/><text x="296.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (2 samples, 0.11%)</title><rect x="293" y="308" width="2" height="15" fill="rgb(240,42,42)"/><text x="296.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (2 samples, 0.11%)</title><rect x="293" y="324" width="2" height="15" fill="rgb(238,170,24)"/><text x="296.00" y="334.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:201) (3 samples, 0.16%)</title><rect x="295" y="388" width="2" height="15" fill="rgb(240,44,39)"/><text x="298.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (2 samples, 0.11%)</title><rect x="295" y="404" width="2" height="15" fill="rgb(207,133,42)"/><text x="298.00" y="414.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (5 samples, 0.27%)</title><rect x="295" y="356" width="3" height="15" fill="rgb(212,37,24)"/><text x="298.00" y="366.50"></text></g><g><title>aintroselect_float (selection.c.src:380) (5 samples, 0.27%)</title><rect x="295" y="372" width="3" height="15" fill="rgb(253,37,15)"/><text x="298.00" y="382.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:202) (2 samples, 0.11%)</title><rect x="297" y="388" width="1" height="15" fill="rgb(226,179,40)"/><text x="300.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (2 samples, 0.11%)</title><rect x="297" y="404" width="1" height="15" fill="rgb(235,79,20)"/><text x="300.00" y="414.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (6 samples, 0.32%)</title><rect x="295" y="244" width="3" height="15" fill="rgb(252,46,24)"/><text x="298.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (6 samples, 0.32%)</title><rect x="295" y="260" width="3" height="15" fill="rgb(223,41,28)"/><text x="298.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.32%)</title><rect x="295" y="276" width="3" height="15" fill="rgb(213,67,27)"/><text x="298.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (6 samples, 0.32%)</title><rect x="295" y="292" width="3" height="15" fill="rgb(231,100,19)"/><text x="298.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (6 samples, 0.32%)</title><rect x="295" y="308" width="3" height="15" fill="rgb(236,21,27)"/><text x="298.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (6 samples, 0.32%)</title><rect x="295" y="324" width="3" height="15" fill="rgb(221,167,41)"/><text x="298.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (6 samples, 0.32%)</title><rect x="295" y="340" width="3" height="15" fill="rgb(227,1,43)"/><text x="298.00" y="350.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (165 samples, 8.92%)</title><rect x="194" y="196" width="105" height="15" fill="rgb(230,80,12)"/><text x="197.00" y="206.50">run (mlprodi..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (7 samples, 0.38%)</title><rect x="295" y="212" width="4" height="15" fill="rgb(211,7,16)"/><text x="298.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (7 samples, 0.38%)</title><rect x="295" y="228" width="4" height="15" fill="rgb(250,108,42)"/><text x="298.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (3 samples, 0.16%)</title><rect x="300" y="228" width="2" height="15" fill="rgb(222,178,1)"/><text x="303.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (3 samples, 0.16%)</title><rect x="300" y="244" width="2" height="15" fill="rgb(220,10,35)"/><text x="303.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.11%)</title><rect x="300" y="260" width="2" height="15" fill="rgb(226,130,37)"/><text x="303.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (2 samples, 0.11%)</title><rect x="300" y="276" width="2" height="15" fill="rgb(215,81,9)"/><text x="303.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (2 samples, 0.11%)</title><rect x="300" y="292" width="2" height="15" fill="rgb(218,69,19)"/><text x="303.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (2 samples, 0.11%)</title><rect x="300" y="308" width="2" height="15" fill="rgb(238,10,28)"/><text x="303.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (2 samples, 0.11%)</title><rect x="300" y="324" width="2" height="15" fill="rgb(218,176,16)"/><text x="303.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (2 samples, 0.11%)</title><rect x="300" y="340" width="2" height="15" fill="rgb(206,119,12)"/><text x="303.00" y="350.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (2 samples, 0.11%)</title><rect x="300" y="356" width="2" height="15" fill="rgb(212,143,30)"/><text x="303.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (2 samples, 0.11%)</title><rect x="300" y="372" width="2" height="15" fill="rgb(253,155,44)"/><text x="303.00" y="382.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (4 samples, 0.22%)</title><rect x="300" y="196" width="2" height="15" fill="rgb(209,153,31)"/><text x="303.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (4 samples, 0.22%)</title><rect x="300" y="212" width="2" height="15" fill="rgb(233,146,7)"/><text x="303.00" y="222.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:18) (171 samples, 9.24%)</title><rect x="194" y="100" width="109" height="15" fill="rgb(253,94,3)"/><text x="197.00" y="110.50">profile (benc..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (171 samples, 9.24%)</title><rect x="194" y="116" width="109" height="15" fill="rgb(226,20,16)"/><text x="197.00" y="126.50">time_predict ..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (171 samples, 9.24%)</title><rect x="194" y="132" width="109" height="15" fill="rgb(215,46,36)"/><text x="197.00" y="142.50">&lt;lambda&gt; (mlp..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (171 samples, 9.24%)</title><rect x="194" y="148" width="109" height="15" fill="rgb(216,154,5)"/><text x="197.00" y="158.50">run (mlprodic..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (171 samples, 9.24%)</title><rect x="194" y="164" width="109" height="15" fill="rgb(238,60,40)"/><text x="197.00" y="174.50">_run_sequence..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (171 samples, 9.24%)</title><rect x="194" y="180" width="109" height="15" fill="rgb(232,136,4)"/><text x="197.00" y="190.50">run (mlprodic..</text></g><g><title>_array_find_python_scalar_type (common.c:41) (2 samples, 0.11%)</title><rect x="304" y="340" width="1" height="15" fill="rgb(254,17,42)"/><text x="307.00" y="350.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (3 samples, 0.16%)</title><rect x="304" y="276" width="1" height="15" fill="rgb(221,139,50)"/><text x="307.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (3 samples, 0.16%)</title><rect x="304" y="292" width="1" height="15" fill="rgb(237,94,41)"/><text x="307.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (3 samples, 0.16%)</title><rect x="304" y="308" width="1" height="15" fill="rgb(219,216,29)"/><text x="307.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (3 samples, 0.16%)</title><rect x="304" y="324" width="1" height="15" fill="rgb(229,133,9)"/><text x="307.00" y="334.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (6 samples, 0.32%)</title><rect x="304" y="260" width="3" height="15" fill="rgb(221,28,5)"/><text x="307.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (3 samples, 0.16%)</title><rect x="305" y="276" width="2" height="15" fill="rgb(205,207,47)"/><text x="308.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c:884) (3 samples, 0.16%)</title><rect x="305" y="292" width="2" height="15" fill="rgb(206,167,12)"/><text x="308.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (8 samples, 0.43%)</title><rect x="304" y="212" width="5" height="15" fill="rgb(211,57,13)"/><text x="307.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1539) (8 samples, 0.43%)</title><rect x="304" y="228" width="5" height="15" fill="rgb(245,4,6)"/><text x="307.00" y="238.50"></text></g><g><title>prepare_index (mapping.c:516) (8 samples, 0.43%)</title><rect x="304" y="244" width="5" height="15" fill="rgb(233,24,37)"/><text x="307.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c:1938) (2 samples, 0.11%)</title><rect x="307" y="260" width="2" height="15" fill="rgb(218,104,54)"/><text x="310.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (2 samples, 0.11%)</title><rect x="307" y="276" width="2" height="15" fill="rgb(220,76,4)"/><text x="310.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c:550) (2 samples, 0.11%)</title><rect x="307" y="292" width="2" height="15" fill="rgb(253,84,46)"/><text x="310.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (2 samples, 0.11%)</title><rect x="307" y="308" width="2" height="15" fill="rgb(254,145,51)"/><text x="310.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:37) (2 samples, 0.11%)</title><rect x="309" y="212" width="1" height="15" fill="rgb(239,79,52)"/><text x="312.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (2 samples, 0.11%)</title><rect x="309" y="228" width="1" height="15" fill="rgb(237,106,39)"/><text x="312.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:79) (2 samples, 0.11%)</title><rect x="311" y="212" width="1" height="15" fill="rgb(219,180,2)"/><text x="314.00" y="222.50"></text></g><g><title>_common_run_shape (mlprodict/onnxrt/ops_cpu/op_scan.py:50) (2 samples, 0.11%)</title><rect x="311" y="228" width="1" height="15" fill="rgb(235,119,0)"/><text x="314.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (2 samples, 0.11%)</title><rect x="313" y="212" width="1" height="15" fill="rgb(241,227,47)"/><text x="316.00" y="222.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (2 samples, 0.11%)</title><rect x="316" y="244" width="2" height="15" fill="rgb(246,211,19)"/><text x="319.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (4 samples, 0.22%)</title><rect x="318" y="244" width="2" height="15" fill="rgb(213,151,38)"/><text x="321.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (2 samples, 0.11%)</title><rect x="320" y="244" width="1" height="15" fill="rgb(241,219,27)"/><text x="323.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (15 samples, 0.81%)</title><rect x="325" y="260" width="10" height="15" fill="rgb(236,102,40)"/><text x="328.00" y="270.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (2 samples, 0.11%)</title><rect x="346" y="356" width="1" height="15" fill="rgb(208,50,39)"/><text x="349.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (2 samples, 0.11%)</title><rect x="346" y="372" width="1" height="15" fill="rgb(222,127,33)"/><text x="349.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (2 samples, 0.11%)</title><rect x="346" y="388" width="1" height="15" fill="rgb(228,225,24)"/><text x="349.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (2 samples, 0.11%)</title><rect x="346" y="404" width="1" height="15" fill="rgb(236,102,8)"/><text x="349.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (2 samples, 0.11%)</title><rect x="346" y="420" width="1" height="15" fill="rgb(234,40,34)"/><text x="349.00" y="430.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (2 samples, 0.11%)</title><rect x="346" y="436" width="1" height="15" fill="rgb(243,112,45)"/><text x="349.00" y="446.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (2 samples, 0.11%)</title><rect x="346" y="452" width="1" height="15" fill="rgb(213,170,38)"/><text x="349.00" y="462.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.11%)</title><rect x="346" y="468" width="1" height="15" fill="rgb(235,165,17)"/><text x="349.00" y="478.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (3 samples, 0.16%)</title><rect x="346" y="340" width="2" height="15" fill="rgb(213,78,3)"/><text x="349.00" y="350.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (37 samples, 2.00%)</title><rect x="348" y="372" width="24" height="15" fill="rgb(249,70,45)"/><text x="351.00" y="382.50">r..</text></g><g><title>0x7f94b8c76d94 (libc-2.29.so) (36 samples, 1.95%)</title><rect x="349" y="388" width="23" height="15" fill="rgb(226,88,47)"/><text x="352.00" y="398.50">0..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (43 samples, 2.32%)</title><rect x="345" y="308" width="27" height="15" fill="rgb(208,212,7)"/><text x="348.00" y="318.50">_..</text></g><g><title>array_copy (methods.c:1133) (43 samples, 2.32%)</title><rect x="345" y="324" width="27" height="15" fill="rgb(213,66,23)"/><text x="348.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c:560) (39 samples, 2.11%)</title><rect x="348" y="340" width="24" height="15" fill="rgb(250,217,24)"/><text x="351.00" y="350.50">P..</text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (39 samples, 2.11%)</title><rect x="348" y="356" width="24" height="15" fill="rgb(252,51,20)"/><text x="351.00" y="366.50">P..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (6 samples, 0.32%)</title><rect x="375" y="340" width="4" height="15" fill="rgb(226,16,38)"/><text x="378.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (4 samples, 0.22%)</title><rect x="376" y="356" width="3" height="15" fill="rgb(243,7,14)"/><text x="379.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (3 samples, 0.16%)</title><rect x="377" y="372" width="2" height="15" fill="rgb(213,209,34)"/><text x="380.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (2 samples, 0.11%)</title><rect x="378" y="388" width="1" height="15" fill="rgb(211,84,3)"/><text x="381.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (2 samples, 0.11%)</title><rect x="380" y="356" width="1" height="15" fill="rgb(246,86,52)"/><text x="383.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (2 samples, 0.11%)</title><rect x="380" y="372" width="1" height="15" fill="rgb(213,208,45)"/><text x="383.00" y="382.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1349) (2 samples, 0.11%)</title><rect x="382" y="372" width="1" height="15" fill="rgb(220,88,49)"/><text x="385.00" y="382.50"></text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:595) (18 samples, 0.97%)</title><rect x="385" y="388" width="11" height="15" fill="rgb(222,121,22)"/><text x="388.00" y="398.50"></text></g><g><title>_mm_mul_ps (xmmintrin.h:169) (18 samples, 0.97%)</title><rect x="385" y="404" width="11" height="15" fill="rgb(205,83,26)"/><text x="388.00" y="414.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (53 samples, 2.86%)</title><rect x="372" y="308" width="34" height="15" fill="rgb(220,40,8)"/><text x="375.00" y="318.50">_r..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (49 samples, 2.65%)</title><rect x="375" y="324" width="31" height="15" fill="rgb(216,62,50)"/><text x="378.00" y="334.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (41 samples, 2.22%)</title><rect x="380" y="340" width="26" height="15" fill="rgb(215,37,25)"/><text x="383.00" y="350.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (39 samples, 2.11%)</title><rect x="381" y="356" width="25" height="15" fill="rgb(253,124,38)"/><text x="384.00" y="366.50">e..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (36 samples, 1.95%)</title><rect x="383" y="372" width="23" height="15" fill="rgb(227,75,26)"/><text x="386.00" y="382.50">t..</text></g><g><title>sse2_binary_multiply_FLOAT (simd.inc.src:596) (16 samples, 0.86%)</title><rect x="396" y="388" width="10" height="15" fill="rgb(222,146,8)"/><text x="399.00" y="398.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (16 samples, 0.86%)</title><rect x="396" y="404" width="10" height="15" fill="rgb(223,51,2)"/><text x="399.00" y="414.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (2 samples, 0.11%)</title><rect x="408" y="324" width="1" height="15" fill="rgb(216,110,34)"/><text x="411.00" y="334.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (4 samples, 0.22%)</title><rect x="414" y="372" width="2" height="15" fill="rgb(225,0,13)"/><text x="417.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (2 samples, 0.11%)</title><rect x="415" y="388" width="1" height="15" fill="rgb(243,21,47)"/><text x="418.00" y="398.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (4 samples, 0.22%)</title><rect x="418" y="388" width="3" height="15" fill="rgb(216,14,29)"/><text x="421.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (4 samples, 0.22%)</title><rect x="418" y="404" width="3" height="15" fill="rgb(211,52,0)"/><text x="421.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (4 samples, 0.22%)</title><rect x="418" y="420" width="3" height="15" fill="rgb(237,101,24)"/><text x="421.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (4 samples, 0.22%)</title><rect x="418" y="436" width="3" height="15" fill="rgb(208,43,11)"/><text x="421.00" y="446.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (2 samples, 0.11%)</title><rect x="421" y="404" width="1" height="15" fill="rgb(228,24,24)"/><text x="424.00" y="414.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (4 samples, 0.22%)</title><rect x="422" y="420" width="3" height="15" fill="rgb(252,38,13)"/><text x="425.00" y="430.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (4 samples, 0.22%)</title><rect x="422" y="436" width="3" height="15" fill="rgb(245,99,4)"/><text x="425.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (4 samples, 0.22%)</title><rect x="422" y="452" width="3" height="15" fill="rgb(215,31,30)"/><text x="425.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (2 samples, 0.11%)</title><rect x="425" y="468" width="1" height="15" fill="rgb(245,12,39)"/><text x="428.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (2 samples, 0.11%)</title><rect x="425" y="484" width="1" height="15" fill="rgb(222,82,40)"/><text x="428.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (3 samples, 0.16%)</title><rect x="425" y="436" width="2" height="15" fill="rgb(251,186,0)"/><text x="428.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (3 samples, 0.16%)</title><rect x="425" y="452" width="2" height="15" fill="rgb(227,73,12)"/><text x="428.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (2 samples, 0.11%)</title><rect x="427" y="436" width="1" height="15" fill="rgb(219,100,36)"/><text x="430.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (2 samples, 0.11%)</title><rect x="427" y="452" width="1" height="15" fill="rgb(243,26,5)"/><text x="430.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (3 samples, 0.16%)</title><rect x="428" y="436" width="2" height="15" fill="rgb(237,44,49)"/><text x="431.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3534) (2 samples, 0.11%)</title><rect x="430" y="452" width="2" height="15" fill="rgb(241,105,52)"/><text x="433.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3540) (3 samples, 0.16%)</title><rect x="432" y="452" width="2" height="15" fill="rgb(240,83,47)"/><text x="435.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1742) (2 samples, 0.11%)</title><rect x="436" y="468" width="1" height="15" fill="rgb(220,138,35)"/><text x="439.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1662) (3 samples, 0.16%)</title><rect x="437" y="484" width="2" height="15" fill="rgb(228,173,9)"/><text x="440.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1682) (2 samples, 0.11%)</title><rect x="439" y="484" width="2" height="15" fill="rgb(238,1,10)"/><text x="442.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1686) (3 samples, 0.16%)</title><rect x="441" y="484" width="2" height="15" fill="rgb(242,195,40)"/><text x="444.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1690) (3 samples, 0.16%)</title><rect x="443" y="484" width="2" height="15" fill="rgb(206,113,41)"/><text x="446.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1696) (6 samples, 0.32%)</title><rect x="445" y="484" width="4" height="15" fill="rgb(237,174,23)"/><text x="448.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1698) (4 samples, 0.22%)</title><rect x="449" y="484" width="3" height="15" fill="rgb(227,109,17)"/><text x="452.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1700) (5 samples, 0.27%)</title><rect x="452" y="484" width="3" height="15" fill="rgb(218,11,28)"/><text x="455.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1704) (4 samples, 0.22%)</title><rect x="455" y="484" width="3" height="15" fill="rgb(246,125,29)"/><text x="458.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1705) (4 samples, 0.22%)</title><rect x="458" y="484" width="2" height="15" fill="rgb(251,13,9)"/><text x="461.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1708) (6 samples, 0.32%)</title><rect x="460" y="484" width="4" height="15" fill="rgb(216,62,47)"/><text x="463.00" y="494.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1709) (8 samples, 0.43%)</title><rect x="464" y="484" width="5" height="15" fill="rgb(238,185,14)"/><text x="467.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (53 samples, 2.86%)</title><rect x="437" y="468" width="34" height="15" fill="rgb(222,138,10)"/><text x="440.00" y="478.50">FL..</text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1721) (2 samples, 0.11%)</title><rect x="469" y="484" width="2" height="15" fill="rgb(219,159,44)"/><text x="472.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src:1762) (3 samples, 0.16%)</title><rect x="471" y="468" width="2" height="15" fill="rgb(207,219,44)"/><text x="474.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:229) (2 samples, 0.11%)</title><rect x="473" y="468" width="1" height="15" fill="rgb(251,21,47)"/><text x="476.00" y="478.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:239) (2 samples, 0.11%)</title><rect x="475" y="468" width="1" height="15" fill="rgb(248,53,37)"/><text x="478.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (76 samples, 4.11%)</title><rect x="430" y="436" width="48" height="15" fill="rgb(223,195,12)"/><text x="433.00" y="446.50">PyUF..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (69 samples, 3.73%)</title><rect x="434" y="452" width="44" height="15" fill="rgb(234,124,33)"/><text x="437.00" y="462.50">redu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (90 samples, 4.86%)</title><rect x="422" y="404" width="58" height="15" fill="rgb(215,133,9)"/><text x="425.00" y="414.50">PyUFun..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (86 samples, 4.65%)</title><rect x="425" y="420" width="55" height="15" fill="rgb(231,65,1)"/><text x="428.00" y="430.50">PyUFu..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (220 samples, 11.89%)</title><rect x="340" y="276" width="140" height="15" fill="rgb(206,97,43)"/><text x="343.00" y="286.50">run (mlprodict/on..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (214 samples, 11.57%)</title><rect x="344" y="292" width="136" height="15" fill="rgb(238,99,15)"/><text x="347.00" y="302.50">run (mlprodict/on..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (116 samples, 6.27%)</title><rect x="406" y="308" width="74" height="15" fill="rgb(227,193,27)"/><text x="409.00" y="318.50">_run (ml..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (112 samples, 6.05%)</title><rect x="409" y="324" width="71" height="15" fill="rgb(215,158,42)"/><text x="412.00" y="334.50">sum (&lt;__..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (109 samples, 5.89%)</title><rect x="411" y="340" width="69" height="15" fill="rgb(221,51,3)"/><text x="414.00" y="350.50">array_i..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (108 samples, 5.84%)</title><rect x="411" y="356" width="69" height="15" fill="rgb(242,136,22)"/><text x="414.00" y="366.50">sum (nu..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (100 samples, 5.41%)</title><rect x="416" y="372" width="64" height="15" fill="rgb(206,134,49)"/><text x="419.00" y="382.50">_wrapre..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (93 samples, 5.03%)</title><rect x="421" y="388" width="59" height="15" fill="rgb(227,224,33)"/><text x="424.00" y="398.50">ufunc_..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (3 samples, 0.16%)</title><rect x="480" y="276" width="2" height="15" fill="rgb(248,215,32)"/><text x="483.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (2 samples, 0.11%)</title><rect x="483" y="292" width="1" height="15" fill="rgb(227,221,14)"/><text x="486.00" y="302.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (2 samples, 0.11%)</title><rect x="487" y="372" width="2" height="15" fill="rgb(246,214,31)"/><text x="490.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (3 samples, 0.16%)</title><rect x="487" y="340" width="2" height="15" fill="rgb(243,225,33)"/><text x="490.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (3 samples, 0.16%)</title><rect x="487" y="356" width="2" height="15" fill="rgb(236,103,53)"/><text x="490.00" y="366.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (5 samples, 0.27%)</title><rect x="490" y="372" width="3" height="15" fill="rgb(218,158,32)"/><text x="493.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (2 samples, 0.11%)</title><rect x="492" y="388" width="1" height="15" fill="rgb(251,0,53)"/><text x="495.00" y="398.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c:3168) (2 samples, 0.11%)</title><rect x="492" y="404" width="1" height="15" fill="rgb(205,44,6)"/><text x="495.00" y="414.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (7 samples, 0.38%)</title><rect x="493" y="372" width="4" height="15" fill="rgb(249,220,39)"/><text x="496.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (6 samples, 0.32%)</title><rect x="494" y="388" width="3" height="15" fill="rgb(229,95,2)"/><text x="497.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (5 samples, 0.27%)</title><rect x="494" y="404" width="3" height="15" fill="rgb(229,112,34)"/><text x="497.00" y="414.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (4 samples, 0.22%)</title><rect x="495" y="420" width="2" height="15" fill="rgb(219,138,53)"/><text x="498.00" y="430.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:600) (4 samples, 0.22%)</title><rect x="498" y="420" width="3" height="15" fill="rgb(254,210,33)"/><text x="501.00" y="430.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:603) (19 samples, 1.03%)</title><rect x="501" y="420" width="12" height="15" fill="rgb(218,27,20)"/><text x="504.00" y="430.50"></text></g><g><title>_mm_sub_ps (xmmintrin.h:163) (19 samples, 1.03%)</title><rect x="501" y="436" width="12" height="15" fill="rgb(243,141,20)"/><text x="504.00" y="446.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (54 samples, 2.92%)</title><rect x="497" y="388" width="35" height="15" fill="rgb(233,137,29)"/><text x="500.00" y="398.50">FL..</text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (54 samples, 2.92%)</title><rect x="497" y="404" width="35" height="15" fill="rgb(209,18,8)"/><text x="500.00" y="414.50">ru..</text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src:604) (30 samples, 1.62%)</title><rect x="513" y="420" width="19" height="15" fill="rgb(242,161,21)"/><text x="516.00" y="430.50"></text></g><g><title>_mm_store_ps (xmmintrin.h:947) (30 samples, 1.62%)</title><rect x="513" y="436" width="19" height="15" fill="rgb(250,144,22)"/><text x="516.00" y="446.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:309) (2 samples, 0.11%)</title><rect x="532" y="388" width="1" height="15" fill="rgb(243,227,27)"/><text x="535.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (2 samples, 0.11%)</title><rect x="533" y="420" width="1" height="15" fill="rgb(226,201,43)"/><text x="536.00" y="430.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (2 samples, 0.11%)</title><rect x="534" y="420" width="2" height="15" fill="rgb(216,167,39)"/><text x="537.00" y="430.50"></text></g><g><title>0x7f94b8c76f03 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="539" y="436" width="1" height="15" fill="rgb(217,41,33)"/><text x="542.00" y="446.50"></text></g><g><title>0x7f94b8c76f09 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="540" y="436" width="1" height="15" fill="rgb(223,185,14)"/><text x="543.00" y="446.50"></text></g><g><title>0x7f94b8c76f23 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="543" y="436" width="1" height="15" fill="rgb(228,197,36)"/><text x="546.00" y="446.50"></text></g><g><title>0x7f94b8c76f3a (libc-2.29.so) (5 samples, 0.27%)</title><rect x="545" y="436" width="3" height="15" fill="rgb(228,36,43)"/><text x="548.00" y="446.50"></text></g><g><title>0x7f94b8c76f58 (libc-2.29.so) (2 samples, 0.11%)</title><rect x="552" y="436" width="1" height="15" fill="rgb(248,129,41)"/><text x="555.00" y="446.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (30 samples, 1.62%)</title><rect x="536" y="420" width="19" height="15" fill="rgb(245,165,51)"/><text x="539.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (91 samples, 4.92%)</title><rect x="497" y="372" width="58" height="15" fill="rgb(232,26,0)"/><text x="500.00" y="382.50">iterat..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (35 samples, 1.89%)</title><rect x="533" y="388" width="22" height="15" fill="rgb(222,191,15)"/><text x="536.00" y="398.50">n..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (35 samples, 1.89%)</title><rect x="533" y="404" width="22" height="15" fill="rgb(239,9,31)"/><text x="536.00" y="414.50">n..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (104 samples, 5.62%)</title><rect x="490" y="340" width="66" height="15" fill="rgb(241,35,19)"/><text x="493.00" y="350.50">PyUFunc..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (104 samples, 5.62%)</title><rect x="490" y="356" width="66" height="15" fill="rgb(235,183,23)"/><text x="493.00" y="366.50">execute..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (110 samples, 5.95%)</title><rect x="487" y="324" width="70" height="15" fill="rgb(234,90,53)"/><text x="490.00" y="334.50">ufunc_g..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (119 samples, 6.43%)</title><rect x="482" y="276" width="76" height="15" fill="rgb(205,60,23)"/><text x="485.00" y="286.50">run (mlp..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (116 samples, 6.27%)</title><rect x="484" y="292" width="74" height="15" fill="rgb(244,129,0)"/><text x="487.00" y="302.50">run (mlp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (115 samples, 6.22%)</title><rect x="485" y="308" width="73" height="15" fill="rgb(254,224,40)"/><text x="488.00" y="318.50">_run (ml..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (2 samples, 0.11%)</title><rect x="558" y="276" width="1" height="15" fill="rgb(249,68,48)"/><text x="561.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (353 samples, 19.08%)</title><rect x="335" y="260" width="225" height="15" fill="rgb(234,43,37)"/><text x="338.00" y="270.50">run (mlprodict/onnxrt/onnx_in..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (7 samples, 0.38%)</title><rect x="560" y="260" width="4" height="15" fill="rgb(245,143,18)"/><text x="563.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (5 samples, 0.27%)</title><rect x="564" y="260" width="4" height="15" fill="rgb(232,206,37)"/><text x="567.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (9 samples, 0.49%)</title><rect x="568" y="260" width="5" height="15" fill="rgb(205,189,44)"/><text x="571.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (398 samples, 21.51%)</title><rect x="321" y="244" width="254" height="15" fill="rgb(246,152,4)"/><text x="324.00" y="254.50">_run_sequence_runtime (mlprodict/..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (3 samples, 0.16%)</title><rect x="573" y="260" width="2" height="15" fill="rgb(207,106,30)"/><text x="576.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (412 samples, 22.27%)</title><rect x="314" y="212" width="263" height="15" fill="rgb(249,161,27)"/><text x="317.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_s..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (411 samples, 22.22%)</title><rect x="315" y="228" width="262" height="15" fill="rgb(250,197,42)"/><text x="318.00" y="238.50">run (mlprodict/onnxrt/onnx_inferenc..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (6 samples, 0.32%)</title><rect x="577" y="212" width="4" height="15" fill="rgb(244,226,29)"/><text x="580.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (3 samples, 0.16%)</title><rect x="579" y="228" width="2" height="15" fill="rgb(223,223,48)"/><text x="582.00" y="238.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (3 samples, 0.16%)</title><rect x="582" y="228" width="2" height="15" fill="rgb(245,179,37)"/><text x="585.00" y="238.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py:509) (2 samples, 0.11%)</title><rect x="583" y="244" width="1" height="15" fill="rgb(215,85,19)"/><text x="586.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (2 samples, 0.11%)</title><rect x="585" y="260" width="1" height="15" fill="rgb(214,141,43)"/><text x="588.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (17 samples, 0.92%)</title><rect x="581" y="212" width="11" height="15" fill="rgb(222,44,17)"/><text x="584.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (12 samples, 0.65%)</title><rect x="584" y="228" width="8" height="15" fill="rgb(252,217,42)"/><text x="587.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 0.59%)</title><rect x="585" y="244" width="7" height="15" fill="rgb(245,118,51)"/><text x="588.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (8 samples, 0.43%)</title><rect x="587" y="260" width="5" height="15" fill="rgb(240,177,3)"/><text x="590.00" y="270.50"></text></g><g><title>array_reshape (methods.c:210) (2 samples, 0.11%)</title><rect x="591" y="276" width="1" height="15" fill="rgb(249,182,25)"/><text x="594.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (2 samples, 0.11%)</title><rect x="591" y="292" width="1" height="15" fill="rgb(221,84,31)"/><text x="594.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (2 samples, 0.11%)</title><rect x="591" y="308" width="1" height="15" fill="rgb(240,209,50)"/><text x="594.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (2 samples, 0.11%)</title><rect x="591" y="324" width="1" height="15" fill="rgb(220,177,21)"/><text x="594.00" y="334.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (2 samples, 0.11%)</title><rect x="591" y="340" width="1" height="15" fill="rgb(225,5,17)"/><text x="594.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (3 samples, 0.16%)</title><rect x="592" y="212" width="2" height="15" fill="rgb(237,196,37)"/><text x="595.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (3 samples, 0.16%)</title><rect x="592" y="228" width="2" height="15" fill="rgb(211,117,10)"/><text x="595.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.16%)</title><rect x="592" y="244" width="2" height="15" fill="rgb(236,108,33)"/><text x="595.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (2 samples, 0.11%)</title><rect x="592" y="260" width="2" height="15" fill="rgb(250,113,1)"/><text x="595.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (2 samples, 0.11%)</title><rect x="592" y="276" width="2" height="15" fill="rgb(216,26,41)"/><text x="595.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.11%)</title><rect x="592" y="292" width="2" height="15" fill="rgb(254,200,15)"/><text x="595.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (2 samples, 0.11%)</title><rect x="592" y="308" width="2" height="15" fill="rgb(209,137,54)"/><text x="595.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (2 samples, 0.11%)</title><rect x="592" y="324" width="2" height="15" fill="rgb(208,4,34)"/><text x="595.00" y="334.50"></text></g><g><title>_new_argsortlike (item_selection.c:1048) (3 samples, 0.16%)</title><rect x="594" y="356" width="2" height="15" fill="rgb(240,220,41)"/><text x="597.00" y="366.50"></text></g><g><title>FLOAT_copyswapn (arraytypes.c.src:1915) (3 samples, 0.16%)</title><rect x="594" y="372" width="2" height="15" fill="rgb(212,8,16)"/><text x="597.00" y="382.50"></text></g><g><title>_unaligned_strided_byte_copy (ctors.c:319) (3 samples, 0.16%)</title><rect x="594" y="388" width="2" height="15" fill="rgb(231,75,52)"/><text x="597.00" y="398.50"></text></g><g><title>_new_argsortlike (item_selection.c:1057) (2 samples, 0.11%)</title><rect x="596" y="356" width="2" height="15" fill="rgb(230,63,31)"/><text x="599.00" y="366.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:201) (14 samples, 0.76%)</title><rect x="598" y="388" width="9" height="15" fill="rgb(222,120,40)"/><text x="601.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (12 samples, 0.65%)</title><rect x="599" y="404" width="8" height="15" fill="rgb(214,23,52)"/><text x="602.00" y="414.50"></text></g><g><title>aunguarded_partition_float (selection.c.src:202) (6 samples, 0.32%)</title><rect x="607" y="388" width="3" height="15" fill="rgb(242,135,49)"/><text x="610.00" y="398.50"></text></g><g><title>FLOAT_LT (npysort_common.h:123) (4 samples, 0.22%)</title><rect x="608" y="404" width="2" height="15" fill="rgb(205,7,48)"/><text x="611.00" y="414.50"></text></g><g><title>aintroselect_float (selection.c.src:380) (21 samples, 1.14%)</title><rect x="598" y="372" width="13" height="15" fill="rgb(239,104,39)"/><text x="601.00" y="382.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (27 samples, 1.46%)</title><rect x="594" y="244" width="18" height="15" fill="rgb(228,73,3)"/><text x="597.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (27 samples, 1.46%)</title><rect x="594" y="260" width="18" height="15" fill="rgb(244,128,21)"/><text x="597.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (27 samples, 1.46%)</title><rect x="594" y="276" width="18" height="15" fill="rgb(205,83,52)"/><text x="597.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (27 samples, 1.46%)</title><rect x="594" y="292" width="18" height="15" fill="rgb(252,142,3)"/><text x="597.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (27 samples, 1.46%)</title><rect x="594" y="308" width="18" height="15" fill="rgb(241,75,5)"/><text x="597.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (27 samples, 1.46%)</title><rect x="594" y="324" width="18" height="15" fill="rgb(250,195,9)"/><text x="597.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (27 samples, 1.46%)</title><rect x="594" y="340" width="18" height="15" fill="rgb(227,190,35)"/><text x="597.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:1084) (22 samples, 1.19%)</title><rect x="598" y="356" width="14" height="15" fill="rgb(239,189,14)"/><text x="601.00" y="366.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1577) (2 samples, 0.11%)</title><rect x="612" y="276" width="2" height="15" fill="rgb(210,70,48)"/><text x="615.00" y="286.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (4 samples, 0.22%)</title><rect x="612" y="244" width="2" height="15" fill="rgb(251,71,1)"/><text x="615.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (3 samples, 0.16%)</title><rect x="612" y="260" width="2" height="15" fill="rgb(217,18,26)"/><text x="615.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (34 samples, 1.84%)</title><rect x="594" y="212" width="21" height="15" fill="rgb(223,19,4)"/><text x="597.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (34 samples, 1.84%)</title><rect x="594" y="228" width="21" height="15" fill="rgb(207,142,48)"/><text x="597.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:39) (2 samples, 0.11%)</title><rect x="614" y="244" width="1" height="15" fill="rgb(223,0,22)"/><text x="617.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (491 samples, 26.54%)</title><rect x="303" y="196" width="313" height="15" fill="rgb(216,108,44)"/><text x="306.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:312) (2 samples, 0.11%)</title><rect x="617" y="196" width="1" height="15" fill="rgb(225,128,32)"/><text x="620.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (2 samples, 0.11%)</title><rect x="617" y="212" width="1" height="15" fill="rgb(252,209,17)"/><text x="620.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (2 samples, 0.11%)</title><rect x="617" y="228" width="1" height="15" fill="rgb(216,125,36)"/><text x="620.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (2 samples, 0.11%)</title><rect x="617" y="244" width="1" height="15" fill="rgb(222,74,43)"/><text x="620.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (495 samples, 26.76%)</title><rect x="303" y="180" width="316" height="15" fill="rgb(246,97,34)"/><text x="306.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node...</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (497 samples, 26.86%)</title><rect x="303" y="164" width="317" height="15" fill="rgb(242,147,40)"/><text x="306.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/on..</text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:45) (669 samples, 36.16%)</title><rect x="194" y="52" width="427" height="15" fill="rgb(245,118,24)"/><text x="197.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_50_..</text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:44) (669 samples, 36.16%)</title><rect x="194" y="68" width="427" height="15" fill="rgb(230,194,39)"/><text x="197.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1000..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:29) (669 samples, 36.16%)</title><rect x="194" y="84" width="427" height="15" fill="rgb(231,12,42)"/><text x="197.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_b_cl_100..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:23) (498 samples, 26.92%)</title><rect x="303" y="100" width="318" height="15" fill="rgb(218,140,13)"/><text x="306.00" y="110.50">profile (bench_KNeighborsClassifier_defaul..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (498 samples, 26.92%)</title><rect x="303" y="116" width="318" height="15" fill="rgb(223,192,54)"/><text x="306.00" y="126.50">time_predict (mlprodict/asv_benchmark/comm..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (498 samples, 26.92%)</title><rect x="303" y="132" width="318" height="15" fill="rgb(206,83,37)"/><text x="306.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_a..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (498 samples, 26.92%)</title><rect x="303" y="148" width="318" height="15" fill="rgb(224,224,35)"/><text x="306.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:40..</text></g><g><title>onnxruntime::ReduceSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="622" y="340" width="1" height="15" fill="rgb(241,12,28)"/><text x="625.00" y="350.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.59%)</title><rect x="624" y="436" width="7" height="15" fill="rgb(244,25,6)"/><text x="627.00" y="446.50"></text></g><g><title>0x7f94b8c76d94 (libc-2.29.so) (11 samples, 0.59%)</title><rect x="624" y="452" width="7" height="15" fill="rgb(227,168,10)"/><text x="627.00" y="462.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (180 samples, 9.73%)</title><rect x="631" y="436" width="115" height="15" fill="rgb(245,152,1)"/><text x="634.00" y="446.50">onnxruntime::R..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (169 samples, 9.14%)</title><rect x="638" y="452" width="108" height="15" fill="rgb(249,184,13)"/><text x="641.00" y="462.50">onnxruntime::..</text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.54%)</title><rect x="740" y="468" width="6" height="15" fill="rgb(222,215,7)"/><text x="743.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (22 samples, 1.19%)</title><rect x="747" y="468" width="14" height="15" fill="rgb(233,101,33)"/><text x="750.00" y="478.50"></text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.27%)</title><rect x="758" y="484" width="3" height="15" fill="rgb(209,108,27)"/><text x="761.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (217 samples, 11.73%)</title><rect x="623" y="340" width="139" height="15" fill="rgb(214,107,16)"/><text x="626.00" y="350.50">onnxruntime::Scan..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (217 samples, 11.73%)</title><rect x="623" y="356" width="139" height="15" fill="rgb(254,190,11)"/><text x="626.00" y="366.50">onnxruntime::Scan..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (217 samples, 11.73%)</title><rect x="623" y="372" width="139" height="15" fill="rgb(247,175,7)"/><text x="626.00" y="382.50">onnxruntime::scan..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (217 samples, 11.73%)</title><rect x="623" y="388" width="139" height="15" fill="rgb(230,156,47)"/><text x="626.00" y="398.50">onnxruntime::util..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (217 samples, 11.73%)</title><rect x="623" y="404" width="139" height="15" fill="rgb(246,13,31)"/><text x="626.00" y="414.50">onnxruntime::util..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (217 samples, 11.73%)</title><rect x="623" y="420" width="139" height="15" fill="rgb(216,3,21)"/><text x="626.00" y="430.50">onnxruntime::Sequ..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 1.24%)</title><rect x="747" y="436" width="15" height="15" fill="rgb(220,216,14)"/><text x="750.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 1.24%)</title><rect x="747" y="452" width="15" height="15" fill="rgb(216,209,15)"/><text x="750.00" y="462.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.43%)</title><rect x="762" y="340" width="5" height="15" fill="rgb(207,209,0)"/><text x="765.00" y="350.50"></text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.43%)</title><rect x="762" y="356" width="5" height="15" fill="rgb(229,149,18)"/><text x="765.00" y="366.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.32%)</title><rect x="767" y="340" width="3" height="15" fill="rgb(228,182,6)"/><text x="770.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.32%)</title><rect x="767" y="356" width="3" height="15" fill="rgb(216,70,14)"/><text x="770.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (235 samples, 12.70%)</title><rect x="621" y="260" width="150" height="15" fill="rgb(217,204,49)"/><text x="624.00" y="270.50">onnxruntime::Infere..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (235 samples, 12.70%)</title><rect x="621" y="276" width="150" height="15" fill="rgb(215,167,34)"/><text x="624.00" y="286.50">onnxruntime::Infere..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (235 samples, 12.70%)</title><rect x="621" y="292" width="150" height="15" fill="rgb(252,183,42)"/><text x="624.00" y="302.50">onnxruntime::utils:..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (235 samples, 12.70%)</title><rect x="621" y="308" width="150" height="15" fill="rgb(231,119,7)"/><text x="624.00" y="318.50">onnxruntime::utils:..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (235 samples, 12.70%)</title><rect x="621" y="324" width="150" height="15" fill="rgb(248,137,51)"/><text x="624.00" y="334.50">onnxruntime::Sequen..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:18) (237 samples, 12.81%)</title><rect x="621" y="100" width="151" height="15" fill="rgb(238,224,30)"/><text x="624.00" y="110.50">profile (bench_KNei..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (237 samples, 12.81%)</title><rect x="621" y="116" width="151" height="15" fill="rgb(217,187,49)"/><text x="624.00" y="126.50">time_predict (mlpro..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (237 samples, 12.81%)</title><rect x="621" y="132" width="151" height="15" fill="rgb(206,10,39)"/><text x="624.00" y="142.50">&lt;lambda&gt; (mlprodict..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (237 samples, 12.81%)</title><rect x="621" y="148" width="151" height="15" fill="rgb(233,79,12)"/><text x="624.00" y="158.50">run (mlprodict/onnx..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (237 samples, 12.81%)</title><rect x="621" y="164" width="151" height="15" fill="rgb(209,20,51)"/><text x="624.00" y="174.50">_run_whole_runtime ..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (237 samples, 12.81%)</title><rect x="621" y="180" width="151" height="15" fill="rgb(216,184,4)"/><text x="624.00" y="190.50">run (mlprodict/onnx..</text></g><g><title>run (onnxruntime/capi/session.py:136) (237 samples, 12.81%)</title><rect x="621" y="196" width="151" height="15" fill="rgb(221,154,30)"/><text x="624.00" y="206.50">run (onnxruntime/ca..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (236 samples, 12.76%)</title><rect x="621" y="212" width="151" height="15" fill="rgb(218,159,20)"/><text x="624.00" y="222.50">pybind11::cpp_funct..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (236 samples, 12.76%)</title><rect x="621" y="228" width="151" height="15" fill="rgb(212,94,25)"/><text x="624.00" y="238.50">void pybind11::cpp_..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (236 samples, 12.76%)</title><rect x="621" y="244" width="151" height="15" fill="rgb(251,60,12)"/><text x="624.00" y="254.50">onnxruntime::python..</text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.16%)</title><rect x="776" y="436" width="2" height="15" fill="rgb(230,76,42)"/><text x="779.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="778" y="436" width="1" height="15" fill="rgb(229,227,39)"/><text x="781.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="778" y="452" width="1" height="15" fill="rgb(205,99,54)"/><text x="781.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="778" y="468" width="1" height="15" fill="rgb(224,225,46)"/><text x="781.00" y="478.50"></text></g><g><title>0x7f94b8c76d94 (libc-2.29.so) (28 samples, 1.51%)</title><rect x="781" y="452" width="18" height="15" fill="rgb(223,22,50)"/><text x="784.00" y="462.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (30 samples, 1.62%)</title><rect x="780" y="436" width="19" height="15" fill="rgb(211,32,9)"/><text x="783.00" y="446.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 1.24%)</title><rect x="1083" y="468" width="15" height="15" fill="rgb(249,195,4)"/><text x="1086.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (469 samples, 25.35%)</title><rect x="799" y="436" width="299" height="15" fill="rgb(229,169,17)"/><text x="802.00" y="446.50">onnxruntime::ReduceSumSquare&lt;float&gt;::Com..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (452 samples, 24.43%)</title><rect x="810" y="452" width="288" height="15" fill="rgb(212,126,38)"/><text x="813.00" y="462.50">onnxruntime::PrepareForReduce&lt;float&gt; (..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (77 samples, 4.16%)</title><rect x="1098" y="468" width="49" height="15" fill="rgb(252,216,53)"/><text x="1101.00" y="478.50">onnx..</text></g><g><title>onnxruntime::BroadcastIterator::AdvanceBy (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.70%)</title><rect x="1139" y="484" width="8" height="15" fill="rgb(207,85,54)"/><text x="1142.00" y="494.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2247] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="1147" y="468" width="2" height="15" fill="rgb(244,34,27)"/><text x="1150.00" y="478.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (588 samples, 31.78%)</title><rect x="774" y="340" width="375" height="15" fill="rgb(211,81,21)"/><text x="777.00" y="350.50">onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/on..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (588 samples, 31.78%)</title><rect x="774" y="356" width="375" height="15" fill="rgb(242,206,0)"/><text x="777.00" y="366.50">onnxruntime::ScanImpl::Execute (onnxruntime/capi/o..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (588 samples, 31.78%)</title><rect x="774" y="372" width="375" height="15" fill="rgb(225,22,34)"/><text x="777.00" y="382.50">onnxruntime::scan::detail::IterateSequence (onnxru..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (586 samples, 31.68%)</title><rect x="776" y="388" width="373" height="15" fill="rgb(210,220,49)"/><text x="779.00" y="398.50">onnxruntime::utils::ExecuteSubgraph (onnxruntime/c..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (586 samples, 31.68%)</title><rect x="776" y="404" width="373" height="15" fill="rgb(249,94,47)"/><text x="779.00" y="414.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (586 samples, 31.68%)</title><rect x="776" y="420" width="373" height="15" fill="rgb(247,185,23)"/><text x="779.00" y="430.50">onnxruntime::SequentialExecutor::Execute (onnxrunt..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (80 samples, 4.32%)</title><rect x="1098" y="436" width="51" height="15" fill="rgb(219,93,23)"/><text x="1101.00" y="446.50">onnxr..</text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (80 samples, 4.32%)</title><rect x="1098" y="452" width="51" height="15" fill="rgb(253,47,0)"/><text x="1101.00" y="462.50">onnxr..</text></g><g><title>onnxruntime::Sqrt&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="1149" y="340" width="2" height="15" fill="rgb(219,220,51)"/><text x="1152.00" y="350.50"></text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (39 samples, 2.11%)</title><rect x="1151" y="340" width="24" height="15" fill="rgb(251,34,41)"/><text x="1154.00" y="350.50">o..</text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 2.05%)</title><rect x="1151" y="356" width="24" height="15" fill="rgb(242,116,38)"/><text x="1154.00" y="366.50">o..</text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.11%)</title><rect x="1174" y="372" width="1" height="15" fill="rgb(249,132,46)"/><text x="1177.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.11%)</title><rect x="1174" y="388" width="1" height="15" fill="rgb(238,32,14)"/><text x="1177.00" y="398.50"></text></g><g><title>onnxruntime::Transpose::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.54%)</title><rect x="1175" y="340" width="7" height="15" fill="rgb(230,217,51)"/><text x="1178.00" y="350.50"></text></g><g><title>onnxruntime::TranposeSingleAxisOutwards [clone .isra.320] (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.54%)</title><rect x="1175" y="356" width="7" height="15" fill="rgb(241,50,29)"/><text x="1178.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.16%)</title><rect x="1182" y="356" width="2" height="15" fill="rgb(229,105,2)"/><text x="1185.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.16%)</title><rect x="1182" y="372" width="2" height="15" fill="rgb(237,6,15)"/><text x="1185.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (649 samples, 35.08%)</title><rect x="772" y="260" width="414" height="15" fill="rgb(215,120,3)"/><text x="775.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onn..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (649 samples, 35.08%)</title><rect x="772" y="276" width="414" height="15" fill="rgb(222,99,22)"/><text x="775.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onn..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (649 samples, 35.08%)</title><rect x="772" y="292" width="414" height="15" fill="rgb(246,62,48)"/><text x="775.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (649 samples, 35.08%)</title><rect x="772" y="308" width="414" height="15" fill="rgb(224,48,13)"/><text x="775.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/o..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (649 samples, 35.08%)</title><rect x="772" y="324" width="414" height="15" fill="rgb(238,179,27)"/><text x="775.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/ca..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.32%)</title><rect x="1182" y="340" width="4" height="15" fill="rgb(252,115,48)"/><text x="1185.00" y="350.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (libstdc++.so.6.0.28) (2 samples, 0.11%)</title><rect x="1184" y="356" width="2" height="15" fill="rgb(220,222,4)"/><text x="1187.00" y="366.50"></text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (654 samples, 35.35%)</title><rect x="772" y="164" width="417" height="15" fill="rgb(225,217,7)"/><text x="775.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:6..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (654 samples, 35.35%)</title><rect x="772" y="180" width="417" height="15" fill="rgb(206,177,23)"/><text x="775.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:136) (654 samples, 35.35%)</title><rect x="772" y="196" width="417" height="15" fill="rgb(218,83,19)"/><text x="775.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (654 samples, 35.35%)</title><rect x="772" y="212" width="417" height="15" fill="rgb(224,120,4)"/><text x="775.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onn..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (654 samples, 35.35%)</title><rect x="772" y="228" width="417" height="15" fill="rgb(240,63,24)"/><text x="775.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::pyt..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (654 samples, 35.35%)</title><rect x="772" y="244" width="417" height="15" fill="rgb(237,229,22)"/><text x="775.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.27%)</title><rect x="1186" y="260" width="3" height="15" fill="rgb(249,14,54)"/><text x="1189.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.11%)</title><rect x="1188" y="276" width="1" height="15" fill="rgb(231,75,1)"/><text x="1191.00" y="286.50"></text></g><g><title>all (1,850 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(222,207,27)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:52) (892 samples, 48.22%)</title><rect x="621" y="52" width="569" height="15" fill="rgb(220,225,54)"/><text x="624.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:52)</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:51) (892 samples, 48.22%)</title><rect x="621" y="68" width="569" height="15" fill="rgb(206,178,35)"/><text x="624.00" y="78.50">profile_ort (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:51)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:29) (892 samples, 48.22%)</title><rect x="621" y="84" width="569" height="15" fill="rgb(253,132,38)"/><text x="624.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:29)</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1000_50_12_float_.py:23) (655 samples, 35.41%)</title><rect x="772" y="100" width="418" height="15" fill="rgb(248,37,39)"/><text x="775.00" y="110.50">profile (bench_KNeighborsClassifier_default_b_cl_1000_50_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (655 samples, 35.41%)</title><rect x="772" y="116" width="418" height="15" fill="rgb(243,122,9)"/><text x="775.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:1..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (655 samples, 35.41%)</title><rect x="772" y="132" width="418" height="15" fill="rgb(253,160,21)"/><text x="775.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (655 samples, 35.41%)</title><rect x="772" y="148" width="418" height="15" fill="rgb(231,209,45)"/><text x="775.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g></g></svg>