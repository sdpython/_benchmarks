<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="933.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="933.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (profiles/benches/ensemble/GradientBoostingClassifier/bench_GradientBoostingClassifier_default_b_cl.py:2) (4 samples, 1.25%)</title><rect x="0.3115%" y="148" width="1.2461%" height="15" fill="rgb(227,0,7)"/><text x="0.5615%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="0.3115%" y="164" width="1.2461%" height="15" fill="rgb(217,0,24)"/><text x="0.5615%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 1.25%)</title><rect x="0.3115%" y="180" width="1.2461%" height="15" fill="rgb(221,193,54)"/><text x="0.5615%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="0.3115%" y="196" width="1.2461%" height="15" fill="rgb(248,212,6)"/><text x="0.5615%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="0.3115%" y="212" width="1.2461%" height="15" fill="rgb(208,68,35)"/><text x="0.5615%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="0.3115%" y="228" width="1.2461%" height="15" fill="rgb(232,128,0)"/><text x="0.5615%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="0.3115%" y="244" width="1.2461%" height="15" fill="rgb(207,160,47)"/><text x="0.5615%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="0.3115%" y="260" width="1.2461%" height="15" fill="rgb(228,23,34)"/><text x="0.5615%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="0.3115%" y="276" width="1.2461%" height="15" fill="rgb(218,30,26)"/><text x="0.5615%" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (4 samples, 1.25%)</title><rect x="0.3115%" y="292" width="1.2461%" height="15" fill="rgb(220,122,19)"/><text x="0.5615%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="0.3115%" y="308" width="1.2461%" height="15" fill="rgb(250,228,42)"/><text x="0.5615%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="0.3115%" y="324" width="1.2461%" height="15" fill="rgb(240,193,28)"/><text x="0.5615%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="0.3115%" y="340" width="1.2461%" height="15" fill="rgb(216,20,37)"/><text x="0.5615%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="0.3115%" y="356" width="1.2461%" height="15" fill="rgb(206,188,39)"/><text x="0.5615%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="0.3115%" y="372" width="1.2461%" height="15" fill="rgb(217,207,13)"/><text x="0.5615%" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (4 samples, 1.25%)</title><rect x="0.3115%" y="388" width="1.2461%" height="15" fill="rgb(231,73,38)"/><text x="0.5615%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="0.3115%" y="404" width="1.2461%" height="15" fill="rgb(225,20,46)"/><text x="0.5615%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="0.3115%" y="420" width="1.2461%" height="15" fill="rgb(210,31,41)"/><text x="0.5615%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="0.3115%" y="436" width="1.2461%" height="15" fill="rgb(221,200,47)"/><text x="0.5615%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="0.3115%" y="452" width="1.2461%" height="15" fill="rgb(226,26,5)"/><text x="0.5615%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="0.3115%" y="468" width="1.2461%" height="15" fill="rgb(249,33,26)"/><text x="0.5615%" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (4 samples, 1.25%)</title><rect x="0.3115%" y="484" width="1.2461%" height="15" fill="rgb(235,183,28)"/><text x="0.5615%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="0.3115%" y="500" width="1.2461%" height="15" fill="rgb(221,5,38)"/><text x="0.5615%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="0.3115%" y="516" width="1.2461%" height="15" fill="rgb(247,18,42)"/><text x="0.5615%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="0.3115%" y="532" width="1.2461%" height="15" fill="rgb(241,131,45)"/><text x="0.5615%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="0.3115%" y="548" width="1.2461%" height="15" fill="rgb(249,31,29)"/><text x="0.5615%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="0.3115%" y="564" width="1.2461%" height="15" fill="rgb(225,111,53)"/><text x="0.5615%" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (4 samples, 1.25%)</title><rect x="0.3115%" y="580" width="1.2461%" height="15" fill="rgb(238,160,17)"/><text x="0.5615%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="0.3115%" y="596" width="1.2461%" height="15" fill="rgb(214,148,48)"/><text x="0.5615%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 1.25%)</title><rect x="0.3115%" y="612" width="1.2461%" height="15" fill="rgb(232,36,49)"/><text x="0.5615%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="0.3115%" y="628" width="1.2461%" height="15" fill="rgb(209,103,24)"/><text x="0.5615%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="0.3115%" y="644" width="1.2461%" height="15" fill="rgb(229,88,8)"/><text x="0.5615%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="0.3115%" y="660" width="1.2461%" height="15" fill="rgb(213,181,19)"/><text x="0.5615%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="0.3115%" y="676" width="1.2461%" height="15" fill="rgb(254,191,54)"/><text x="0.5615%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="0.3115%" y="692" width="1.2461%" height="15" fill="rgb(241,83,37)"/><text x="0.5615%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="0.3115%" y="708" width="1.2461%" height="15" fill="rgb(233,36,39)"/><text x="0.5615%" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (4 samples, 1.25%)</title><rect x="0.3115%" y="724" width="1.2461%" height="15" fill="rgb(226,3,54)"/><text x="0.5615%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="0.3115%" y="740" width="1.2461%" height="15" fill="rgb(245,192,40)"/><text x="0.5615%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="0.3115%" y="756" width="1.2461%" height="15" fill="rgb(238,167,29)"/><text x="0.5615%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="0.3115%" y="772" width="1.2461%" height="15" fill="rgb(232,182,51)"/><text x="0.5615%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="0.3115%" y="788" width="1.2461%" height="15" fill="rgb(231,60,39)"/><text x="0.5615%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="0.3115%" y="804" width="1.2461%" height="15" fill="rgb(208,69,12)"/><text x="0.5615%" y="814.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/GradientBoostingClassifier/bench_GradientBoostingClassifier_default_b_cl.py:4) (4 samples, 1.25%)</title><rect x="1.5576%" y="148" width="1.2461%" height="15" fill="rgb(235,93,37)"/><text x="1.8076%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="1.5576%" y="164" width="1.2461%" height="15" fill="rgb(213,116,39)"/><text x="1.8076%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 1.25%)</title><rect x="1.5576%" y="180" width="1.2461%" height="15" fill="rgb(222,207,29)"/><text x="1.8076%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="1.5576%" y="196" width="1.2461%" height="15" fill="rgb(206,96,30)"/><text x="1.8076%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="1.5576%" y="212" width="1.2461%" height="15" fill="rgb(218,138,4)"/><text x="1.8076%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="1.5576%" y="228" width="1.2461%" height="15" fill="rgb(250,191,14)"/><text x="1.8076%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="1.5576%" y="244" width="1.2461%" height="15" fill="rgb(239,60,40)"/><text x="1.8076%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="1.5576%" y="260" width="1.2461%" height="15" fill="rgb(206,27,48)"/><text x="1.8076%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="1.5576%" y="276" width="1.2461%" height="15" fill="rgb(225,35,8)"/><text x="1.8076%" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:82) (4 samples, 1.25%)</title><rect x="1.5576%" y="292" width="1.2461%" height="15" fill="rgb(250,213,24)"/><text x="1.8076%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="1.5576%" y="308" width="1.2461%" height="15" fill="rgb(247,123,22)"/><text x="1.8076%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="1.5576%" y="324" width="1.2461%" height="15" fill="rgb(231,138,38)"/><text x="1.8076%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="1.5576%" y="340" width="1.2461%" height="15" fill="rgb(231,145,46)"/><text x="1.8076%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="1.5576%" y="356" width="1.2461%" height="15" fill="rgb(251,118,11)"/><text x="1.8076%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="1.5576%" y="372" width="1.2461%" height="15" fill="rgb(217,147,25)"/><text x="1.8076%" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (4 samples, 1.25%)</title><rect x="1.5576%" y="388" width="1.2461%" height="15" fill="rgb(247,81,37)"/><text x="1.8076%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="1.5576%" y="404" width="1.2461%" height="15" fill="rgb(209,12,38)"/><text x="1.8076%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="1.5576%" y="420" width="1.2461%" height="15" fill="rgb(227,1,9)"/><text x="1.8076%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="1.5576%" y="436" width="1.2461%" height="15" fill="rgb(248,47,43)"/><text x="1.8076%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="1.5576%" y="452" width="1.2461%" height="15" fill="rgb(221,10,30)"/><text x="1.8076%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="1.5576%" y="468" width="1.2461%" height="15" fill="rgb(210,229,1)"/><text x="1.8076%" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (4 samples, 1.25%)</title><rect x="3.1153%" y="436" width="1.2461%" height="15" fill="rgb(222,148,37)"/><text x="3.3653%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="3.1153%" y="452" width="1.2461%" height="15" fill="rgb(234,67,33)"/><text x="3.3653%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="3.1153%" y="468" width="1.2461%" height="15" fill="rgb(247,98,35)"/><text x="3.3653%" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="3.1153%" y="484" width="1.2461%" height="15" fill="rgb(247,138,52)"/><text x="3.3653%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="3.1153%" y="500" width="1.2461%" height="15" fill="rgb(213,79,30)"/><text x="3.3653%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="3.1153%" y="516" width="1.2461%" height="15" fill="rgb(246,177,23)"/><text x="3.3653%" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:13) (4 samples, 1.25%)</title><rect x="3.1153%" y="532" width="1.2461%" height="15" fill="rgb(230,62,27)"/><text x="3.3653%" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="3.1153%" y="548" width="1.2461%" height="15" fill="rgb(216,154,8)"/><text x="3.3653%" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="3.1153%" y="564" width="1.2461%" height="15" fill="rgb(244,35,45)"/><text x="3.3653%" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="3.1153%" y="580" width="1.2461%" height="15" fill="rgb(251,115,12)"/><text x="3.3653%" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="3.1153%" y="596" width="1.2461%" height="15" fill="rgb(240,54,50)"/><text x="3.3653%" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="3.1153%" y="612" width="1.2461%" height="15" fill="rgb(233,84,52)"/><text x="3.3653%" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (4 samples, 1.25%)</title><rect x="3.1153%" y="628" width="1.2461%" height="15" fill="rgb(207,117,47)"/><text x="3.3653%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="3.1153%" y="644" width="1.2461%" height="15" fill="rgb(249,43,39)"/><text x="3.3653%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="3.1153%" y="660" width="1.2461%" height="15" fill="rgb(209,38,44)"/><text x="3.3653%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="3.1153%" y="676" width="1.2461%" height="15" fill="rgb(236,212,23)"/><text x="3.3653%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="3.1153%" y="692" width="1.2461%" height="15" fill="rgb(242,79,21)"/><text x="3.3653%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="3.1153%" y="708" width="1.2461%" height="15" fill="rgb(211,96,35)"/><text x="3.3653%" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (4 samples, 1.25%)</title><rect x="3.1153%" y="724" width="1.2461%" height="15" fill="rgb(253,215,40)"/><text x="3.3653%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="3.1153%" y="740" width="1.2461%" height="15" fill="rgb(211,81,21)"/><text x="3.3653%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="3.1153%" y="756" width="1.2461%" height="15" fill="rgb(208,190,38)"/><text x="3.3653%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="3.1153%" y="772" width="1.2461%" height="15" fill="rgb(235,213,38)"/><text x="3.3653%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="3.1153%" y="788" width="1.2461%" height="15" fill="rgb(237,122,38)"/><text x="3.3653%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="3.1153%" y="804" width="1.2461%" height="15" fill="rgb(244,218,35)"/><text x="3.3653%" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (4 samples, 1.25%)</title><rect x="3.1153%" y="820" width="1.2461%" height="15" fill="rgb(240,68,47)"/><text x="3.3653%" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.25%)</title><rect x="3.1153%" y="836" width="1.2461%" height="15" fill="rgb(210,16,53)"/><text x="3.3653%" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.25%)</title><rect x="3.1153%" y="852" width="1.2461%" height="15" fill="rgb(235,124,12)"/><text x="3.3653%" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.25%)</title><rect x="3.1153%" y="868" width="1.2461%" height="15" fill="rgb(224,169,11)"/><text x="3.3653%" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.25%)</title><rect x="3.1153%" y="884" width="1.2461%" height="15" fill="rgb(250,166,2)"/><text x="3.3653%" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.25%)</title><rect x="3.1153%" y="900" width="1.2461%" height="15" fill="rgb(242,216,29)"/><text x="3.3653%" y="910.50"></text></g><g><title>&lt;module&gt; (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:4) (16 samples, 4.98%)</title><rect x="0.0000%" y="52" width="4.9844%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="62.50">&lt;modul..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (16 samples, 4.98%)</title><rect x="0.0000%" y="68" width="4.9844%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="78.50">_find_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (16 samples, 4.98%)</title><rect x="0.0000%" y="84" width="4.9844%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="94.50">_find_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (16 samples, 4.98%)</title><rect x="0.0000%" y="100" width="4.9844%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="110.50">_load_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (16 samples, 4.98%)</title><rect x="0.0000%" y="116" width="4.9844%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="126.50">exec_m..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (16 samples, 4.98%)</title><rect x="0.0000%" y="132" width="4.9844%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="142.50">_call_..</text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/GradientBoostingClassifier/bench_GradientBoostingClassifier_default_b_cl.py:7) (7 samples, 2.18%)</title><rect x="2.8037%" y="148" width="2.1807%" height="15" fill="rgb(216,164,2)"/><text x="3.0537%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 2.18%)</title><rect x="2.8037%" y="164" width="2.1807%" height="15" fill="rgb(220,129,5)"/><text x="3.0537%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 2.18%)</title><rect x="2.8037%" y="180" width="2.1807%" height="15" fill="rgb(242,17,10)"/><text x="3.0537%" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 2.18%)</title><rect x="2.8037%" y="196" width="2.1807%" height="15" fill="rgb(242,107,0)"/><text x="3.0537%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 2.18%)</title><rect x="2.8037%" y="212" width="2.1807%" height="15" fill="rgb(251,28,31)"/><text x="3.0537%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 2.18%)</title><rect x="2.8037%" y="228" width="2.1807%" height="15" fill="rgb(233,223,10)"/><text x="3.0537%" y="238.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (7 samples, 2.18%)</title><rect x="2.8037%" y="244" width="2.1807%" height="15" fill="rgb(215,21,27)"/><text x="3.0537%" y="254.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 2.18%)</title><rect x="2.8037%" y="260" width="2.1807%" height="15" fill="rgb(232,23,21)"/><text x="3.0537%" y="270.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 2.18%)</title><rect x="2.8037%" y="276" width="2.1807%" height="15" fill="rgb(244,5,23)"/><text x="3.0537%" y="286.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 2.18%)</title><rect x="2.8037%" y="292" width="2.1807%" height="15" fill="rgb(226,81,46)"/><text x="3.0537%" y="302.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 2.18%)</title><rect x="2.8037%" y="308" width="2.1807%" height="15" fill="rgb(247,70,30)"/><text x="3.0537%" y="318.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 2.18%)</title><rect x="2.8037%" y="324" width="2.1807%" height="15" fill="rgb(212,68,19)"/><text x="3.0537%" y="334.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:27) (6 samples, 1.87%)</title><rect x="3.1153%" y="340" width="1.8692%" height="15" fill="rgb(240,187,13)"/><text x="3.3653%" y="350.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.87%)</title><rect x="3.1153%" y="356" width="1.8692%" height="15" fill="rgb(223,113,26)"/><text x="3.3653%" y="366.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.87%)</title><rect x="3.1153%" y="372" width="1.8692%" height="15" fill="rgb(206,192,2)"/><text x="3.3653%" y="382.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.87%)</title><rect x="3.1153%" y="388" width="1.8692%" height="15" fill="rgb(241,108,4)"/><text x="3.3653%" y="398.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.87%)</title><rect x="3.1153%" y="404" width="1.8692%" height="15" fill="rgb(247,173,49)"/><text x="3.3653%" y="414.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.87%)</title><rect x="3.1153%" y="420" width="1.8692%" height="15" fill="rgb(224,114,35)"/><text x="3.3653%" y="430.50">_..</text></g><g><title>&lt;module&gt; (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:40) (9 samples, 2.80%)</title><rect x="4.9844%" y="52" width="2.8037%" height="15" fill="rgb(245,159,27)"/><text x="5.2344%" y="62.50">&lt;m..</text></g><g><title>start (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:11) (9 samples, 2.80%)</title><rect x="4.9844%" y="68" width="2.8037%" height="15" fill="rgb(245,172,44)"/><text x="5.2344%" y="78.50">st..</text></g><g><title>setup_cache (profiles/benches/ensemble/GradientBoostingClassifier/bench_GradientBoostingClassifier_default_b_cl.py:39) (9 samples, 2.80%)</title><rect x="4.9844%" y="84" width="2.8037%" height="15" fill="rgb(236,23,11)"/><text x="5.2344%" y="94.50">se..</text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py:152) (9 samples, 2.80%)</title><rect x="4.9844%" y="100" width="2.8037%" height="15" fill="rgb(205,117,38)"/><text x="5.2344%" y="110.50">se..</text></g><g><title>fit (sklearn/ensemble/_gb.py:1537) (9 samples, 2.80%)</title><rect x="4.9844%" y="116" width="2.8037%" height="15" fill="rgb(237,72,25)"/><text x="5.2344%" y="126.50">fi..</text></g><g><title>_fit_stages (sklearn/ensemble/_gb.py:1594) (9 samples, 2.80%)</title><rect x="4.9844%" y="132" width="2.8037%" height="15" fill="rgb(244,70,9)"/><text x="5.2344%" y="142.50">_f..</text></g><g><title>_fit_stage (sklearn/ensemble/_gb.py:1250) (4 samples, 1.25%)</title><rect x="6.5421%" y="148" width="1.2461%" height="15" fill="rgb(217,125,39)"/><text x="6.7921%" y="158.50"></text></g><g><title>update_terminal_regions (sklearn/ensemble/_gb_losses.py:115) (4 samples, 1.25%)</title><rect x="6.5421%" y="164" width="1.2461%" height="15" fill="rgb(235,36,10)"/><text x="6.7921%" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:518) (4 samples, 1.25%)</title><rect x="9.0343%" y="180" width="1.2461%" height="15" fill="rgb(251,123,47)"/><text x="9.2843%" y="190.50"></text></g><g><title>decision_function (sklearn/ensemble/_gb.py:2120) (16 samples, 4.98%)</title><rect x="8.7227%" y="164" width="4.9844%" height="15" fill="rgb(221,13,13)"/><text x="8.9727%" y="174.50">decisi..</text></g><g><title>_raw_predict_init (sklearn/ensemble/_gb.py:1640) (10 samples, 3.12%)</title><rect x="13.7072%" y="196" width="3.1153%" height="15" fill="rgb(238,131,9)"/><text x="13.9572%" y="206.50">_ra..</text></g><g><title>_check_initialized (sklearn/ensemble/_gb.py:1397) (10 samples, 3.12%)</title><rect x="13.7072%" y="212" width="3.1153%" height="15" fill="rgb(211,50,8)"/><text x="13.9572%" y="222.50">_ch..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:963) (10 samples, 3.12%)</title><rect x="13.7072%" y="228" width="3.1153%" height="15" fill="rgb(245,182,24)"/><text x="13.9572%" y="238.50">che..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:964) (9 samples, 2.80%)</title><rect x="14.0187%" y="244" width="2.8037%" height="15" fill="rgb(242,14,37)"/><text x="14.2687%" y="254.50">&lt;l..</text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py:380) (13 samples, 4.05%)</title><rect x="16.8224%" y="212" width="4.0498%" height="15" fill="rgb(246,228,12)"/><text x="17.0724%" y="222.50">_val..</text></g><g><title>_raw_predict_init (sklearn/ensemble/_gb.py:1641) (16 samples, 4.98%)</title><rect x="16.8224%" y="196" width="4.9844%" height="15" fill="rgb(213,55,15)"/><text x="17.0724%" y="206.50">_raw_p..</text></g><g><title>predict_proba (sklearn/dummy.py:287) (6 samples, 1.87%)</title><rect x="23.3645%" y="228" width="1.8692%" height="15" fill="rgb(209,9,3)"/><text x="23.6145%" y="238.50">p..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:963) (5 samples, 1.56%)</title><rect x="23.6760%" y="244" width="1.5576%" height="15" fill="rgb(230,59,30)"/><text x="23.9260%" y="254.50"></text></g><g><title>get_init_raw_predictions (sklearn/ensemble/_gb_losses.py:770) (17 samples, 5.30%)</title><rect x="22.7414%" y="212" width="5.2960%" height="15" fill="rgb(209,121,21)"/><text x="22.9914%" y="222.50">get_in..</text></g><g><title>predict_proba (sklearn/dummy.py:312) (6 samples, 1.87%)</title><rect x="26.1682%" y="228" width="1.8692%" height="15" fill="rgb(220,109,13)"/><text x="26.4182%" y="238.50">p..</text></g><g><title>_clip (numpy/core/_methods.py:106) (4 samples, 1.25%)</title><rect x="29.9065%" y="324" width="1.2461%" height="15" fill="rgb(232,18,1)"/><text x="30.1565%" y="334.50"></text></g><g><title>_clip (numpy/core/_methods.py:109) (5 samples, 1.56%)</title><rect x="31.1526%" y="324" width="1.5576%" height="15" fill="rgb(215,41,42)"/><text x="31.4026%" y="334.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;:6) (25 samples, 7.79%)</title><rect x="28.6604%" y="228" width="7.7882%" height="15" fill="rgb(224,123,36)"/><text x="28.9104%" y="238.50">clip (&lt;__ar..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (24 samples, 7.48%)</title><rect x="28.9720%" y="244" width="7.4766%" height="15" fill="rgb(240,125,3)"/><text x="29.2220%" y="254.50">array_impl..</text></g><g><title>clip (numpy/core/fromnumeric.py:2037) (24 samples, 7.48%)</title><rect x="28.9720%" y="260" width="7.4766%" height="15" fill="rgb(205,98,50)"/><text x="29.2220%" y="270.50">clip (nump..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (23 samples, 7.17%)</title><rect x="29.2835%" y="276" width="7.1651%" height="15" fill="rgb(205,185,37)"/><text x="29.5335%" y="286.50">_wrapfunc ..</text></g><g><title>array_clip (methods.c:2381) (23 samples, 7.17%)</title><rect x="29.2835%" y="292" width="7.1651%" height="15" fill="rgb(238,207,15)"/><text x="29.5335%" y="302.50">array_clip..</text></g><g><title>forward_ndarray_method (methods.c:108) (23 samples, 7.17%)</title><rect x="29.2835%" y="308" width="7.1651%" height="15" fill="rgb(213,199,42)"/><text x="29.5335%" y="318.50">forward_nd..</text></g><g><title>_clip (numpy/core/_methods.py:132) (11 samples, 3.43%)</title><rect x="33.0218%" y="324" width="3.4268%" height="15" fill="rgb(235,201,11)"/><text x="33.2718%" y="334.50">_cl..</text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:85) (10 samples, 3.12%)</title><rect x="33.3333%" y="340" width="3.1153%" height="15" fill="rgb(207,46,11)"/><text x="33.5833%" y="350.50">_cl..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 2.49%)</title><rect x="33.9564%" y="356" width="2.4922%" height="15" fill="rgb(241,35,35)"/><text x="34.2064%" y="366.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 1.56%)</title><rect x="34.8910%" y="372" width="1.5576%" height="15" fill="rgb(243,32,47)"/><text x="35.1410%" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 1.56%)</title><rect x="34.8910%" y="388" width="1.5576%" height="15" fill="rgb(247,202,23)"/><text x="35.1410%" y="398.50"></text></g><g><title>get_init_raw_predictions (sklearn/ensemble/_gb_losses.py:772) (31 samples, 9.66%)</title><rect x="28.3489%" y="212" width="9.6573%" height="15" fill="rgb(219,102,11)"/><text x="28.5989%" y="222.50">get_init_raw_p..</text></g><g><title>float_subtract (scalarmath.c.src:910) (4 samples, 1.25%)</title><rect x="36.7601%" y="228" width="1.2461%" height="15" fill="rgb(243,110,44)"/><text x="37.0101%" y="238.50"></text></g><g><title>array_subtract (number.c:342) (4 samples, 1.25%)</title><rect x="36.7601%" y="244" width="1.2461%" height="15" fill="rgb(222,74,54)"/><text x="37.0101%" y="254.50"></text></g><g><title>_raw_predict (sklearn/ensemble/_gb.py:1655) (81 samples, 25.23%)</title><rect x="13.7072%" y="180" width="25.2336%" height="15" fill="rgb(216,99,12)"/><text x="13.9572%" y="190.50">_raw_predict (sklearn/ensemble/_gb.py:16..</text></g><g><title>_raw_predict_init (sklearn/ensemble/_gb.py:1650) (54 samples, 16.82%)</title><rect x="22.1184%" y="196" width="16.8224%" height="15" fill="rgb(226,22,26)"/><text x="22.3684%" y="206.50">_raw_predict_init (sklearn..</text></g><g><title>0x7fbd6974c02b (sklearn/ensemble/_gradient_boosting.cpython-37m-x86_64-linux-gnu.so) (8 samples, 2.49%)</title><rect x="40.1869%" y="196" width="2.4922%" height="15" fill="rgb(217,163,10)"/><text x="40.4369%" y="206.50">0x..</text></g><g><title>0x7fbd6974c089 (sklearn/ensemble/_gradient_boosting.cpython-37m-x86_64-linux-gnu.so) (8 samples, 2.49%)</title><rect x="42.6791%" y="196" width="2.4922%" height="15" fill="rgb(213,25,53)"/><text x="42.9291%" y="206.50">0x..</text></g><g><title>0x7fbd6974c14f (sklearn/ensemble/_gradient_boosting.cpython-37m-x86_64-linux-gnu.so) (4 samples, 1.25%)</title><rect x="45.4829%" y="196" width="1.2461%" height="15" fill="rgb(252,105,26)"/><text x="45.7329%" y="206.50"></text></g><g><title>0x7fbd6974c23b (sklearn/ensemble/_gradient_boosting.cpython-37m-x86_64-linux-gnu.so) (6 samples, 1.87%)</title><rect x="47.6636%" y="196" width="1.8692%" height="15" fill="rgb(220,39,43)"/><text x="47.9136%" y="206.50">0..</text></g><g><title>predict_proba (sklearn/ensemble/_gb.py:2214) (141 samples, 43.93%)</title><rect x="8.7227%" y="148" width="43.9252%" height="15" fill="rgb(229,68,48)"/><text x="8.9727%" y="158.50">predict_proba (sklearn/ensemble/_gb.py:2214)</text></g><g><title>decision_function (sklearn/ensemble/_gb.py:2121) (125 samples, 38.94%)</title><rect x="13.7072%" y="164" width="38.9408%" height="15" fill="rgb(252,8,32)"/><text x="13.9572%" y="174.50">decision_function (sklearn/ensemble/_gb.py:2121)</text></g><g><title>_raw_predict (sklearn/ensemble/_gb.py:1657) (44 samples, 13.71%)</title><rect x="38.9408%" y="180" width="13.7072%" height="15" fill="rgb(223,20,43)"/><text x="39.1908%" y="190.50">_raw_predict (sklearn..</text></g><g><title>logsumexp (scipy/special/_logsumexp.py:101) (10 samples, 3.12%)</title><rect x="53.5826%" y="180" width="3.1153%" height="15" fill="rgb(229,81,49)"/><text x="53.8326%" y="190.50">log..</text></g><g><title>amax (&lt;__array_function__ internals&gt;:6) (9 samples, 2.80%)</title><rect x="53.8941%" y="196" width="2.8037%" height="15" fill="rgb(236,28,36)"/><text x="54.1441%" y="206.50">am..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 2.49%)</title><rect x="54.2056%" y="212" width="2.4922%" height="15" fill="rgb(249,185,26)"/><text x="54.4556%" y="222.50">ar..</text></g><g><title>amax (numpy/core/fromnumeric.py:2621) (7 samples, 2.18%)</title><rect x="54.5171%" y="228" width="2.1807%" height="15" fill="rgb(249,174,33)"/><text x="54.7671%" y="238.50">a..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (5 samples, 1.56%)</title><rect x="55.1402%" y="244" width="1.5576%" height="15" fill="rgb(233,201,37)"/><text x="55.3902%" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 1.25%)</title><rect x="55.4517%" y="260" width="1.2461%" height="15" fill="rgb(221,78,26)"/><text x="55.7017%" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (4 samples, 1.25%)</title><rect x="55.4517%" y="276" width="1.2461%" height="15" fill="rgb(250,127,30)"/><text x="55.7017%" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (4 samples, 1.25%)</title><rect x="55.4517%" y="292" width="1.2461%" height="15" fill="rgb(230,49,44)"/><text x="55.7017%" y="302.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:104) (5 samples, 1.56%)</title><rect x="56.6978%" y="180" width="1.5576%" height="15" fill="rgb(229,67,23)"/><text x="56.9478%" y="190.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:115) (7 samples, 2.18%)</title><rect x="59.1900%" y="180" width="2.1807%" height="15" fill="rgb(249,83,47)"/><text x="59.4400%" y="190.50">l..</text></g><g><title>logsumexp (scipy/special/_logsumexp.py:116) (7 samples, 2.18%)</title><rect x="61.3707%" y="180" width="2.1807%" height="15" fill="rgb(215,43,3)"/><text x="61.6207%" y="190.50">l..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (5 samples, 1.56%)</title><rect x="61.9938%" y="196" width="1.5576%" height="15" fill="rgb(238,154,13)"/><text x="62.2438%" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 1.56%)</title><rect x="61.9938%" y="212" width="1.5576%" height="15" fill="rgb(219,56,2)"/><text x="62.2438%" y="222.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (4 samples, 1.25%)</title><rect x="62.3053%" y="228" width="1.2461%" height="15" fill="rgb(233,0,4)"/><text x="62.5553%" y="238.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:120) (5 samples, 1.56%)</title><rect x="63.5514%" y="180" width="1.5576%" height="15" fill="rgb(235,30,7)"/><text x="63.8014%" y="190.50"></text></g><g><title>__exit__ (numpy/core/_ufunc_config.py:447) (4 samples, 1.25%)</title><rect x="63.8629%" y="196" width="1.2461%" height="15" fill="rgb(250,79,13)"/><text x="64.1129%" y="206.50"></text></g><g><title>logsumexp (scipy/special/_logsumexp.py:124) (6 samples, 1.87%)</title><rect x="66.0436%" y="180" width="1.8692%" height="15" fill="rgb(211,146,34)"/><text x="66.2936%" y="190.50">l..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 1.56%)</title><rect x="66.3551%" y="196" width="1.5576%" height="15" fill="rgb(228,22,38)"/><text x="66.6051%" y="206.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1664) (6 samples, 1.87%)</title><rect x="69.7819%" y="228" width="1.8692%" height="15" fill="rgb(235,168,5)"/><text x="70.0319%" y="238.50">_..</text></g><g><title>nan_to_num (numpy/lib/type_check.py:456) (9 samples, 2.80%)</title><rect x="69.1589%" y="212" width="2.8037%" height="15" fill="rgb(221,155,16)"/><text x="69.4089%" y="222.50">na..</text></g><g><title>nan_to_num (numpy/lib/type_check.py:474) (4 samples, 1.25%)</title><rect x="73.8318%" y="212" width="1.2461%" height="15" fill="rgb(215,215,53)"/><text x="74.0818%" y="222.50"></text></g><g><title>isposinf (&lt;__array_function__ internals&gt;:6) (4 samples, 1.25%)</title><rect x="73.8318%" y="228" width="1.2461%" height="15" fill="rgb(223,4,10)"/><text x="74.0818%" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 1.25%)</title><rect x="73.8318%" y="244" width="1.2461%" height="15" fill="rgb(234,103,6)"/><text x="74.0818%" y="254.50"></text></g><g><title>func (numpy/lib/ufunclike.py:55) (4 samples, 1.25%)</title><rect x="73.8318%" y="260" width="1.2461%" height="15" fill="rgb(227,97,0)"/><text x="74.0818%" y="270.50"></text></g><g><title>nan_to_num (numpy/lib/type_check.py:475) (8 samples, 2.49%)</title><rect x="75.0779%" y="212" width="2.4922%" height="15" fill="rgb(234,150,53)"/><text x="75.3279%" y="222.50">na..</text></g><g><title>isneginf (&lt;__array_function__ internals&gt;:6) (6 samples, 1.87%)</title><rect x="75.7009%" y="228" width="1.8692%" height="15" fill="rgb(228,201,54)"/><text x="75.9509%" y="238.50">i..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 1.87%)</title><rect x="75.7009%" y="244" width="1.8692%" height="15" fill="rgb(222,22,37)"/><text x="75.9509%" y="254.50">a..</text></g><g><title>func (numpy/lib/ufunclike.py:55) (6 samples, 1.87%)</title><rect x="75.7009%" y="260" width="1.8692%" height="15" fill="rgb(237,53,32)"/><text x="75.9509%" y="270.50">f..</text></g><g><title>nan_to_num (numpy/lib/type_check.py:476) (6 samples, 1.87%)</title><rect x="77.5701%" y="212" width="1.8692%" height="15" fill="rgb(233,25,53)"/><text x="77.8201%" y="222.50">n..</text></g><g><title>copyto (&lt;__array_function__ internals&gt;:6) (4 samples, 1.25%)</title><rect x="78.1931%" y="228" width="1.2461%" height="15" fill="rgb(210,40,34)"/><text x="78.4431%" y="238.50"></text></g><g><title>&lt;module&gt; (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:54) (231 samples, 71.96%)</title><rect x="8.0997%" y="52" width="71.9626%" height="15" fill="rgb(241,220,44)"/><text x="8.3497%" y="62.50">&lt;module&gt; (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:54)</text></g><g><title>profile_skl (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:53) (231 samples, 71.96%)</title><rect x="8.0997%" y="68" width="71.9626%" height="15" fill="rgb(235,28,35)"/><text x="8.3497%" y="78.50">profile_skl (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:53)</text></g><g><title>setup_profile (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:37) (230 samples, 71.65%)</title><rect x="8.4112%" y="84" width="71.6511%" height="15" fill="rgb(210,56,17)"/><text x="8.6612%" y="94.50">setup_profile (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:37)</text></g><g><title>profile (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:31) (230 samples, 71.65%)</title><rect x="8.4112%" y="100" width="71.6511%" height="15" fill="rgb(224,130,29)"/><text x="8.6612%" y="110.50">profile (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (230 samples, 71.65%)</title><rect x="8.4112%" y="116" width="71.6511%" height="15" fill="rgb(235,212,8)"/><text x="8.6612%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228) (229 samples, 71.34%)</title><rect x="8.7227%" y="132" width="71.3396%" height="15" fill="rgb(223,33,50)"/><text x="8.9727%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228)</text></g><g><title>predict_proba (sklearn/ensemble/_gb.py:2216) (88 samples, 27.41%)</title><rect x="52.6480%" y="148" width="27.4143%" height="15" fill="rgb(219,149,13)"/><text x="52.8980%" y="158.50">predict_proba (sklearn/ensemble/_gb.py:2216)</text></g><g><title>_raw_prediction_to_proba (sklearn/ensemble/_gb_losses.py:763) (87 samples, 27.10%)</title><rect x="52.9595%" y="164" width="27.1028%" height="15" fill="rgb(250,156,29)"/><text x="53.2095%" y="174.50">_raw_prediction_to_proba (sklearn/ensemble/..</text></g><g><title>nan_to_num (&lt;__array_function__ internals&gt;:6) (35 samples, 10.90%)</title><rect x="69.1589%" y="180" width="10.9034%" height="15" fill="rgb(216,193,19)"/><text x="69.4089%" y="190.50">nan_to_num (&lt;__a..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (35 samples, 10.90%)</title><rect x="69.1589%" y="196" width="10.9034%" height="15" fill="rgb(216,135,14)"/><text x="69.4089%" y="206.50">array_implement_..</text></g><g><title>0x7fbd5a44fab9 (libgomp.so.1.0.0) (5 samples, 1.56%)</title><rect x="80.9969%" y="420" width="1.5576%" height="15" fill="rgb(241,47,5)"/><text x="81.2469%" y="430.50"></text></g><g><title>&lt;module&gt; (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:61) (18 samples, 5.61%)</title><rect x="80.0623%" y="52" width="5.6075%" height="15" fill="rgb(233,42,35)"/><text x="80.3123%" y="62.50">&lt;module..</text></g><g><title>profile_pyrtc (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:60) (18 samples, 5.61%)</title><rect x="80.0623%" y="68" width="5.6075%" height="15" fill="rgb(231,13,6)"/><text x="80.3123%" y="78.50">profile..</text></g><g><title>setup_profile (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:37) (16 samples, 4.98%)</title><rect x="80.6854%" y="84" width="4.9844%" height="15" fill="rgb(207,181,40)"/><text x="80.9354%" y="94.50">setup_..</text></g><g><title>profile (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:31) (16 samples, 4.98%)</title><rect x="80.6854%" y="100" width="4.9844%" height="15" fill="rgb(254,173,49)"/><text x="80.9354%" y="110.50">profil..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (16 samples, 4.98%)</title><rect x="80.6854%" y="116" width="4.9844%" height="15" fill="rgb(221,1,38)"/><text x="80.9354%" y="126.50">time_p..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (16 samples, 4.98%)</title><rect x="80.6854%" y="132" width="4.9844%" height="15" fill="rgb(206,124,46)"/><text x="80.9354%" y="142.50">&lt;lambd..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (16 samples, 4.98%)</title><rect x="80.6854%" y="148" width="4.9844%" height="15" fill="rgb(249,21,11)"/><text x="80.9354%" y="158.50">run (m..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (16 samples, 4.98%)</title><rect x="80.6854%" y="164" width="4.9844%" height="15" fill="rgb(222,201,40)"/><text x="80.9354%" y="174.50">_run_s..</text></g><g><title>compiled_run (&lt;string&gt;:4) (16 samples, 4.98%)</title><rect x="80.6854%" y="180" width="4.9844%" height="15" fill="rgb(235,61,29)"/><text x="80.9354%" y="190.50">compil..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py:59) (16 samples, 4.98%)</title><rect x="80.6854%" y="196" width="4.9844%" height="15" fill="rgb(219,207,3)"/><text x="80.9354%" y="206.50">_run (..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (15 samples, 4.67%)</title><rect x="80.9969%" y="212" width="4.6729%" height="15" fill="rgb(222,56,46)"/><text x="81.2469%" y="222.50">pybin..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (15 samples, 4.67%)</title><rect x="80.9969%" y="228" width="4.6729%" height="15" fill="rgb(239,76,54)"/><text x="81.2469%" y="238.50">void ..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (15 samples, 4.67%)</title><rect x="80.9969%" y="244" width="4.6729%" height="15" fill="rgb(231,124,27)"/><text x="81.2469%" y="254.50">void ..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (15 samples, 4.67%)</title><rect x="80.9969%" y="260" width="4.6729%" height="15" fill="rgb(249,195,6)"/><text x="81.2469%" y="270.50">pybin..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (15 samples, 4.67%)</title><rect x="80.9969%" y="276" width="4.6729%" height="15" fill="rgb(237,174,47)"/><text x="81.2469%" y="286.50">pybin..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (15 samples, 4.67%)</title><rect x="80.9969%" y="292" width="4.6729%" height="15" fill="rgb(206,201,31)"/><text x="81.2469%" y="302.50">pybin..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (15 samples, 4.67%)</title><rect x="80.9969%" y="308" width="4.6729%" height="15" fill="rgb(231,57,52)"/><text x="81.2469%" y="318.50">pybin..</text></g><g><title>pybind11::array::~array (numpy.h:538) (15 samples, 4.67%)</title><rect x="80.9969%" y="324" width="4.6729%" height="15" fill="rgb(248,177,22)"/><text x="81.2469%" y="334.50">pybin..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (15 samples, 4.67%)</title><rect x="80.9969%" y="340" width="4.6729%" height="15" fill="rgb(215,211,37)"/><text x="81.2469%" y="350.50">pybin..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (15 samples, 4.67%)</title><rect x="80.9969%" y="356" width="4.6729%" height="15" fill="rgb(241,128,51)"/><text x="81.2469%" y="366.50">pybin..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (15 samples, 4.67%)</title><rect x="80.9969%" y="372" width="4.6729%" height="15" fill="rgb(227,165,31)"/><text x="81.2469%" y="382.50">pybin..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:392) (15 samples, 4.67%)</title><rect x="80.9969%" y="388" width="4.6729%" height="15" fill="rgb(228,167,24)"/><text x="81.2469%" y="398.50">Runti..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h:1983) (15 samples, 4.67%)</title><rect x="80.9969%" y="404" width="4.6729%" height="15" fill="rgb(228,143,12)"/><text x="81.2469%" y="414.50">pybin..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (10 samples, 3.12%)</title><rect x="82.5545%" y="420" width="3.1153%" height="15" fill="rgb(249,149,8)"/><text x="82.8045%" y="430.50">GOM..</text></g><g><title>0x7fbd5a44edaa (libgomp.so.1.0.0) (10 samples, 3.12%)</title><rect x="82.5545%" y="436" width="3.1153%" height="15" fill="rgb(243,35,44)"/><text x="82.8045%" y="446.50">0x7..</text></g><g><title>0x7fbd5a450cfd (libgomp.so.1.0.0) (5 samples, 1.56%)</title><rect x="84.1121%" y="452" width="1.5576%" height="15" fill="rgb(246,89,9)"/><text x="84.3621%" y="462.50"></text></g><g><title>run (onnxruntime/capi/session.py:140) (4 samples, 1.25%)</title><rect x="87.5389%" y="196" width="1.2461%" height="15" fill="rgb(233,213,13)"/><text x="87.7889%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py:140) (4 samples, 1.25%)</title><rect x="87.5389%" y="212" width="1.2461%" height="15" fill="rgb(233,141,41)"/><text x="87.7889%" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.25%)</title><rect x="87.5389%" y="228" width="1.2461%" height="15" fill="rgb(239,167,4)"/><text x="87.7889%" y="238.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (21 samples, 6.54%)</title><rect x="89.7196%" y="260" width="6.5421%" height="15" fill="rgb(209,217,16)"/><text x="89.9696%" y="270.50">onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 5.92%)</title><rect x="90.3427%" y="276" width="5.9190%" height="15" fill="rgb(219,88,35)"/><text x="90.5927%" y="286.50">onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 5.61%)</title><rect x="90.6542%" y="292" width="5.6075%" height="15" fill="rgb(220,193,23)"/><text x="90.9042%" y="302.50">onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (18 samples, 5.61%)</title><rect x="90.6542%" y="308" width="5.6075%" height="15" fill="rgb(230,90,52)"/><text x="90.9042%" y="318.50">onnxrun..</text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 4.36%)</title><rect x="91.9003%" y="324" width="4.3614%" height="15" fill="rgb(252,106,19)"/><text x="92.1503%" y="334.50">onnxr..</text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 4.05%)</title><rect x="92.2118%" y="340" width="4.0498%" height="15" fill="rgb(206,74,20)"/><text x="92.4618%" y="350.50">onnx..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (23 samples, 7.17%)</title><rect x="89.7196%" y="244" width="7.1651%" height="15" fill="rgb(230,138,44)"/><text x="89.9696%" y="254.50">onnxruntim..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (35 samples, 10.90%)</title><rect x="87.2274%" y="164" width="10.9034%" height="15" fill="rgb(235,182,43)"/><text x="87.4774%" y="174.50">_run_whole_runti..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (35 samples, 10.90%)</title><rect x="87.2274%" y="180" width="10.9034%" height="15" fill="rgb(242,16,51)"/><text x="87.4774%" y="190.50">run (mlprodict/o..</text></g><g><title>run (onnxruntime/capi/session.py:142) (30 samples, 9.35%)</title><rect x="88.7850%" y="196" width="9.3458%" height="15" fill="rgb(248,9,4)"/><text x="89.0350%" y="206.50">run (onnxrunt..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (29 samples, 9.03%)</title><rect x="89.0966%" y="212" width="9.0343%" height="15" fill="rgb(210,31,22)"/><text x="89.3466%" y="222.50">pybind11::cpp..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (29 samples, 9.03%)</title><rect x="89.0966%" y="228" width="9.0343%" height="15" fill="rgb(239,54,39)"/><text x="89.3466%" y="238.50">void pybind11..</text></g><g><title>all (321 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(230,99,41)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:68) (46 samples, 14.33%)</title><rect x="85.6698%" y="52" width="14.3302%" height="15" fill="rgb(253,106,12)"/><text x="85.9198%" y="62.50">&lt;module&gt; (bench_Gradie..</text></g><g><title>profile_ort (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:67) (46 samples, 14.33%)</title><rect x="85.6698%" y="68" width="14.3302%" height="15" fill="rgb(213,46,41)"/><text x="85.9198%" y="78.50">profile_ort (bench_Gra..</text></g><g><title>setup_profile (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:37) (45 samples, 14.02%)</title><rect x="85.9813%" y="84" width="14.0187%" height="15" fill="rgb(215,133,35)"/><text x="86.2313%" y="94.50">setup_profile (bench_..</text></g><g><title>profile (bench_GradientBoostingClassifier_default_b_cl_1_50_12_float_.py:31) (45 samples, 14.02%)</title><rect x="85.9813%" y="100" width="14.0187%" height="15" fill="rgb(213,28,5)"/><text x="86.2313%" y="110.50">profile (bench_Gradie..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (45 samples, 14.02%)</title><rect x="85.9813%" y="116" width="14.0187%" height="15" fill="rgb(215,77,49)"/><text x="86.2313%" y="126.50">time_predict (mlprodi..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (43 samples, 13.40%)</title><rect x="86.6044%" y="132" width="13.3956%" height="15" fill="rgb(248,100,22)"/><text x="86.8544%" y="142.50">&lt;lambda&gt; (mlprodict/..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (41 samples, 12.77%)</title><rect x="87.2274%" y="148" width="12.7726%" height="15" fill="rgb(208,67,9)"/><text x="87.4774%" y="158.50">run (mlprodict/onnx..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:651) (6 samples, 1.87%)</title><rect x="98.1308%" y="164" width="1.8692%" height="15" fill="rgb(219,133,21)"/><text x="98.3808%" y="174.50">_..</text></g></svg></svg>