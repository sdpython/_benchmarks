<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1702" onload="init(evt)" viewBox="0 0 1200 1702" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1702" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1685.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1685.00"> </text><g id="frames"><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="10" y="708" width="2" height="15" fill="rgb(220,199,48)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (1 samples, 0.22%)</title><rect x="10" y="724" width="2" height="15" fill="rgb(207,83,10)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="10" y="740" width="2" height="15" fill="rgb(220,101,27)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="10" y="756" width="2" height="15" fill="rgb(249,26,45)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="10" y="772" width="2" height="15" fill="rgb(217,208,18)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="10" y="788" width="2" height="15" fill="rgb(230,102,44)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="10" y="804" width="2" height="15" fill="rgb(250,74,52)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="10" y="820" width="2" height="15" fill="rgb(236,90,26)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="10" y="836" width="2" height="15" fill="rgb(240,207,50)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="10" y="852" width="2" height="15" fill="rgb(221,189,22)"/><text x="13.00" y="862.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="10" y="868" width="2" height="15" fill="rgb(234,150,18)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="10" y="884" width="2" height="15" fill="rgb(205,22,33)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="10" y="900" width="2" height="15" fill="rgb(209,201,22)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (1 samples, 0.22%)</title><rect x="10" y="916" width="2" height="15" fill="rgb(217,154,49)"/><text x="13.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="10" y="932" width="2" height="15" fill="rgb(209,180,18)"/><text x="13.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="10" y="948" width="2" height="15" fill="rgb(235,75,47)"/><text x="13.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="10" y="964" width="2" height="15" fill="rgb(216,161,49)"/><text x="13.00" y="974.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="10" y="980" width="2" height="15" fill="rgb(211,109,25)"/><text x="13.00" y="990.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="10" y="996" width="2" height="15" fill="rgb(238,99,10)"/><text x="13.00" y="1006.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="10" y="1012" width="2" height="15" fill="rgb(242,132,35)"/><text x="13.00" y="1022.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (2 samples, 0.43%)</title><rect x="10" y="292" width="5" height="15" fill="rgb(235,50,3)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="308" width="5" height="15" fill="rgb(224,174,0)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="324" width="5" height="15" fill="rgb(249,14,44)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="340" width="5" height="15" fill="rgb(253,96,24)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="10" y="356" width="5" height="15" fill="rgb(233,63,10)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="372" width="5" height="15" fill="rgb(241,17,50)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (2 samples, 0.43%)</title><rect x="10" y="388" width="5" height="15" fill="rgb(230,94,3)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="404" width="5" height="15" fill="rgb(237,37,5)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="420" width="5" height="15" fill="rgb(253,218,15)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="436" width="5" height="15" fill="rgb(219,17,20)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="10" y="452" width="5" height="15" fill="rgb(245,31,2)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="468" width="5" height="15" fill="rgb(237,190,14)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (2 samples, 0.43%)</title><rect x="10" y="484" width="5" height="15" fill="rgb(220,19,2)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="500" width="5" height="15" fill="rgb(253,200,38)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="516" width="5" height="15" fill="rgb(238,13,26)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="532" width="5" height="15" fill="rgb(249,89,1)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="10" y="548" width="5" height="15" fill="rgb(251,117,2)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="564" width="5" height="15" fill="rgb(216,63,24)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (2 samples, 0.43%)</title><rect x="10" y="580" width="5" height="15" fill="rgb(225,68,33)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="596" width="5" height="15" fill="rgb(220,98,20)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="612" width="5" height="15" fill="rgb(243,21,8)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="628" width="5" height="15" fill="rgb(240,145,13)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="644" width="5" height="15" fill="rgb(247,180,24)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="660" width="5" height="15" fill="rgb(225,75,32)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="10" y="676" width="5" height="15" fill="rgb(217,74,3)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="10" y="692" width="5" height="15" fill="rgb(246,105,2)"/><text x="13.00" y="702.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="708" width="3" height="15" fill="rgb(236,169,34)"/><text x="15.00" y="718.50"></text></g><g><title>path_stats (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="724" width="3" height="15" fill="rgb(221,211,28)"/><text x="15.00" y="734.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="12" y="740" width="3" height="15" fill="rgb(236,106,50)"/><text x="15.00" y="750.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.22%)</title><rect x="12" y="756" width="3" height="15" fill="rgb(231,122,53)"/><text x="15.00" y="766.50"></text></g><g><title>__xstat (libc-2.29.so) (1 samples, 0.22%)</title><rect x="12" y="772" width="3" height="15" fill="rgb(223,103,23)"/><text x="15.00" y="782.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="196" width="7" height="15" fill="rgb(215,168,6)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="212" width="7" height="15" fill="rgb(254,49,39)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="228" width="7" height="15" fill="rgb(239,130,46)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="244" width="7" height="15" fill="rgb(228,177,43)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="10" y="260" width="7" height="15" fill="rgb(225,19,10)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="10" y="276" width="7" height="15" fill="rgb(254,112,23)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="292" width="2" height="15" fill="rgb(250,100,10)"/><text x="18.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="308" width="2" height="15" fill="rgb(219,182,19)"/><text x="18.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="324" width="2" height="15" fill="rgb(212,165,38)"/><text x="18.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="340" width="2" height="15" fill="rgb(246,140,46)"/><text x="18.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="15" y="356" width="2" height="15" fill="rgb(228,164,30)"/><text x="18.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="372" width="2" height="15" fill="rgb(215,209,11)"/><text x="18.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (1 samples, 0.22%)</title><rect x="15" y="388" width="2" height="15" fill="rgb(208,10,5)"/><text x="18.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="404" width="2" height="15" fill="rgb(234,24,18)"/><text x="18.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="420" width="2" height="15" fill="rgb(251,186,9)"/><text x="18.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="436" width="2" height="15" fill="rgb(238,25,8)"/><text x="18.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="15" y="452" width="2" height="15" fill="rgb(254,223,28)"/><text x="18.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="468" width="2" height="15" fill="rgb(233,70,29)"/><text x="18.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="484" width="2" height="15" fill="rgb(216,163,23)"/><text x="18.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="500" width="2" height="15" fill="rgb(214,170,6)"/><text x="18.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="516" width="2" height="15" fill="rgb(216,12,1)"/><text x="18.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="532" width="2" height="15" fill="rgb(222,172,15)"/><text x="18.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="15" y="548" width="2" height="15" fill="rgb(247,130,4)"/><text x="18.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="564" width="2" height="15" fill="rgb(207,67,17)"/><text x="18.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (1 samples, 0.22%)</title><rect x="15" y="580" width="2" height="15" fill="rgb(207,22,53)"/><text x="18.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="596" width="2" height="15" fill="rgb(207,152,21)"/><text x="18.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="612" width="2" height="15" fill="rgb(212,140,35)"/><text x="18.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="628" width="2" height="15" fill="rgb(245,161,50)"/><text x="18.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="15" y="644" width="2" height="15" fill="rgb(206,22,38)"/><text x="18.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="660" width="2" height="15" fill="rgb(246,80,23)"/><text x="18.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (1 samples, 0.22%)</title><rect x="15" y="676" width="2" height="15" fill="rgb(226,148,45)"/><text x="18.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="692" width="2" height="15" fill="rgb(245,146,23)"/><text x="18.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="708" width="2" height="15" fill="rgb(224,31,31)"/><text x="18.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="724" width="2" height="15" fill="rgb(244,187,24)"/><text x="18.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="15" y="740" width="2" height="15" fill="rgb(228,116,51)"/><text x="18.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="756" width="2" height="15" fill="rgb(228,216,39)"/><text x="18.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (1 samples, 0.22%)</title><rect x="15" y="772" width="2" height="15" fill="rgb(244,176,12)"/><text x="18.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="788" width="2" height="15" fill="rgb(239,129,22)"/><text x="18.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="804" width="2" height="15" fill="rgb(238,101,26)"/><text x="18.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="820" width="2" height="15" fill="rgb(240,133,50)"/><text x="18.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="836" width="2" height="15" fill="rgb(230,172,45)"/><text x="18.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="852" width="2" height="15" fill="rgb(219,80,32)"/><text x="18.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="15" y="868" width="2" height="15" fill="rgb(222,175,12)"/><text x="18.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="884" width="2" height="15" fill="rgb(226,37,28)"/><text x="18.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (1 samples, 0.22%)</title><rect x="15" y="900" width="2" height="15" fill="rgb(236,164,31)"/><text x="18.00" y="910.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="916" width="2" height="15" fill="rgb(251,116,48)"/><text x="18.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="932" width="2" height="15" fill="rgb(215,176,23)"/><text x="18.00" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="948" width="2" height="15" fill="rgb(209,204,17)"/><text x="18.00" y="958.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="964" width="2" height="15" fill="rgb(232,119,15)"/><text x="18.00" y="974.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="980" width="2" height="15" fill="rgb(238,117,47)"/><text x="18.00" y="990.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="15" y="996" width="2" height="15" fill="rgb(207,197,48)"/><text x="18.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="15" y="1012" width="2" height="15" fill="rgb(207,125,52)"/><text x="18.00" y="1022.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_continuous_distns.py) (1 samples, 0.22%)</title><rect x="15" y="1028" width="2" height="15" fill="rgb(221,35,32)"/><text x="18.00" y="1038.50"></text></g><g><title>__init__ (scipy/stats/_distn_infrastructure.py) (1 samples, 0.22%)</title><rect x="15" y="1044" width="2" height="15" fill="rgb(243,57,44)"/><text x="18.00" y="1054.50"></text></g><g><title>_construct_doc (scipy/stats/_distn_infrastructure.py) (1 samples, 0.22%)</title><rect x="15" y="1060" width="2" height="15" fill="rgb(238,109,40)"/><text x="18.00" y="1070.50"></text></g><g><title>docformat (scipy/_lib/doccer.py) (1 samples, 0.22%)</title><rect x="15" y="1076" width="2" height="15" fill="rgb(236,186,24)"/><text x="18.00" y="1086.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="17" y="628" width="3" height="15" fill="rgb(251,225,21)"/><text x="20.00" y="638.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="644" width="3" height="15" fill="rgb(230,46,39)"/><text x="20.00" y="654.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="660" width="3" height="15" fill="rgb(241,1,26)"/><text x="20.00" y="670.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="676" width="3" height="15" fill="rgb(206,69,18)"/><text x="20.00" y="686.50"></text></g><g><title>_fill_cache (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="17" y="692" width="3" height="15" fill="rgb(242,32,40)"/><text x="20.00" y="702.50"></text></g><g><title>os_listdir (python3.7) (1 samples, 0.22%)</title><rect x="17" y="708" width="3" height="15" fill="rgb(211,66,54)"/><text x="20.00" y="718.50"></text></g><g><title>readdir64 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="17" y="724" width="3" height="15" fill="rgb(208,148,24)"/><text x="20.00" y="734.50"></text></g><g><title>0x7fb8761ee237 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="17" y="740" width="3" height="15" fill="rgb(211,208,26)"/><text x="20.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="17" y="484" width="5" height="15" fill="rgb(219,135,23)"/><text x="20.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="17" y="500" width="5" height="15" fill="rgb(221,154,38)"/><text x="20.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="17" y="516" width="5" height="15" fill="rgb(207,112,5)"/><text x="20.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="17" y="532" width="5" height="15" fill="rgb(249,202,44)"/><text x="20.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="17" y="548" width="5" height="15" fill="rgb(217,85,28)"/><text x="20.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="17" y="564" width="5" height="15" fill="rgb(245,27,41)"/><text x="20.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (2 samples, 0.43%)</title><rect x="17" y="580" width="5" height="15" fill="rgb(232,3,30)"/><text x="20.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="17" y="596" width="5" height="15" fill="rgb(239,158,34)"/><text x="20.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="17" y="612" width="5" height="15" fill="rgb(217,16,6)"/><text x="20.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="628" width="2" height="15" fill="rgb(240,174,29)"/><text x="23.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="644" width="2" height="15" fill="rgb(246,116,30)"/><text x="23.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="660" width="2" height="15" fill="rgb(234,173,36)"/><text x="23.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (1 samples, 0.22%)</title><rect x="20" y="676" width="2" height="15" fill="rgb(217,174,19)"/><text x="23.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="692" width="2" height="15" fill="rgb(241,217,40)"/><text x="23.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="708" width="2" height="15" fill="rgb(211,197,45)"/><text x="23.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="724" width="2" height="15" fill="rgb(250,65,18)"/><text x="23.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="740" width="2" height="15" fill="rgb(210,62,54)"/><text x="23.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="756" width="2" height="15" fill="rgb(206,188,52)"/><text x="23.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (1 samples, 0.22%)</title><rect x="20" y="772" width="2" height="15" fill="rgb(233,55,19)"/><text x="23.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="788" width="2" height="15" fill="rgb(254,40,43)"/><text x="23.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="804" width="2" height="15" fill="rgb(247,34,52)"/><text x="23.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="820" width="2" height="15" fill="rgb(225,149,1)"/><text x="23.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="836" width="2" height="15" fill="rgb(226,123,40)"/><text x="23.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="852" width="2" height="15" fill="rgb(205,142,48)"/><text x="23.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (1 samples, 0.22%)</title><rect x="20" y="868" width="2" height="15" fill="rgb(213,65,24)"/><text x="23.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="884" width="2" height="15" fill="rgb(243,207,48)"/><text x="23.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="900" width="2" height="15" fill="rgb(206,197,13)"/><text x="23.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="916" width="2" height="15" fill="rgb(233,189,44)"/><text x="23.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="932" width="2" height="15" fill="rgb(224,144,26)"/><text x="23.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="948" width="2" height="15" fill="rgb(206,214,8)"/><text x="23.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="964" width="2" height="15" fill="rgb(226,38,49)"/><text x="23.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="980" width="2" height="15" fill="rgb(229,179,27)"/><text x="23.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="996" width="2" height="15" fill="rgb(237,195,49)"/><text x="23.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (1 samples, 0.22%)</title><rect x="20" y="1012" width="2" height="15" fill="rgb(216,80,33)"/><text x="23.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1028" width="2" height="15" fill="rgb(222,105,27)"/><text x="23.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1044" width="2" height="15" fill="rgb(237,76,31)"/><text x="23.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1060" width="2" height="15" fill="rgb(219,207,8)"/><text x="23.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1076" width="2" height="15" fill="rgb(217,169,31)"/><text x="23.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1092" width="2" height="15" fill="rgb(217,115,14)"/><text x="23.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (1 samples, 0.22%)</title><rect x="20" y="1108" width="2" height="15" fill="rgb(224,203,40)"/><text x="23.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1124" width="2" height="15" fill="rgb(216,23,29)"/><text x="23.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1140" width="2" height="15" fill="rgb(250,33,9)"/><text x="23.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1156" width="2" height="15" fill="rgb(239,63,21)"/><text x="23.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1172" width="2" height="15" fill="rgb(242,157,42)"/><text x="23.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1188" width="2" height="15" fill="rgb(252,148,19)"/><text x="23.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1204" width="2" height="15" fill="rgb(253,112,49)"/><text x="23.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1220" width="2" height="15" fill="rgb(243,36,26)"/><text x="23.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (1 samples, 0.22%)</title><rect x="20" y="1236" width="2" height="15" fill="rgb(235,201,27)"/><text x="23.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1252" width="2" height="15" fill="rgb(209,150,13)"/><text x="23.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1268" width="2" height="15" fill="rgb(246,205,47)"/><text x="23.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1284" width="2" height="15" fill="rgb(245,46,35)"/><text x="23.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1300" width="2" height="15" fill="rgb(210,161,16)"/><text x="23.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1316" width="2" height="15" fill="rgb(246,76,35)"/><text x="23.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1332" width="2" height="15" fill="rgb(233,228,12)"/><text x="23.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1348" width="2" height="15" fill="rgb(250,124,15)"/><text x="23.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (1 samples, 0.22%)</title><rect x="20" y="1364" width="2" height="15" fill="rgb(224,124,47)"/><text x="23.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1380" width="2" height="15" fill="rgb(224,95,42)"/><text x="23.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1396" width="2" height="15" fill="rgb(217,208,47)"/><text x="23.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1412" width="2" height="15" fill="rgb(213,123,18)"/><text x="23.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="20" y="1428" width="2" height="15" fill="rgb(238,184,23)"/><text x="23.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="20" y="1444" width="2" height="15" fill="rgb(212,74,18)"/><text x="23.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.22%)</title><rect x="20" y="1460" width="2" height="15" fill="rgb(205,55,26)"/><text x="23.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.22%)</title><rect x="20" y="1476" width="2" height="15" fill="rgb(218,140,50)"/><text x="23.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.22%)</title><rect x="20" y="1492" width="2" height="15" fill="rgb(229,66,43)"/><text x="23.00" y="1502.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py) (1 samples, 0.22%)</title><rect x="20" y="1508" width="2" height="15" fill="rgb(216,20,50)"/><text x="23.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py) (1 samples, 0.22%)</title><rect x="20" y="1524" width="2" height="15" fill="rgb(215,100,2)"/><text x="23.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py) (1 samples, 0.22%)</title><rect x="20" y="1540" width="2" height="15" fill="rgb(251,185,6)"/><text x="23.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.22%)</title><rect x="20" y="1556" width="2" height="15" fill="rgb(209,87,32)"/><text x="23.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;) (1 samples, 0.22%)</title><rect x="20" y="1572" width="2" height="15" fill="rgb(242,223,21)"/><text x="23.00" y="1582.50"></text></g><g><title>call (jinja2/runtime.py) (1 samples, 0.22%)</title><rect x="20" y="1588" width="2" height="15" fill="rgb(229,69,49)"/><text x="23.00" y="1598.50"></text></g><g><title>process_documentation (skl2onnx/algebra/automation.py) (1 samples, 0.22%)</title><rect x="20" y="1604" width="2" height="15" fill="rgb(244,101,19)"/><text x="23.00" y="1614.50"></text></g><g><title>dedent (textwrap.py) (1 samples, 0.22%)</title><rect x="20" y="1620" width="2" height="15" fill="rgb(230,127,48)"/><text x="23.00" y="1630.50"></text></g><g><title>_sre_SRE_Pattern_sub (python3.7) (1 samples, 0.22%)</title><rect x="20" y="1636" width="2" height="15" fill="rgb(249,152,39)"/><text x="23.00" y="1646.50"></text></g><g><title>sre_search.cold.44 (python3.7) (1 samples, 0.22%)</title><rect x="20" y="1652" width="2" height="15" fill="rgb(223,214,53)"/><text x="23.00" y="1662.50"></text></g><g><title>&lt;module&gt; (pandas/_libs/__init__.py) (1 samples, 0.22%)</title><rect x="22" y="724" width="3" height="15" fill="rgb(223,163,17)"/><text x="25.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="740" width="3" height="15" fill="rgb(239,135,14)"/><text x="25.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="756" width="3" height="15" fill="rgb(226,64,21)"/><text x="25.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="772" width="3" height="15" fill="rgb(253,123,43)"/><text x="25.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="788" width="3" height="15" fill="rgb(254,123,29)"/><text x="25.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="804" width="3" height="15" fill="rgb(218,191,19)"/><text x="25.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/_libs/tslibs/__init__.py) (1 samples, 0.22%)</title><rect x="22" y="820" width="3" height="15" fill="rgb(251,184,25)"/><text x="25.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="836" width="3" height="15" fill="rgb(248,170,37)"/><text x="25.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="852" width="3" height="15" fill="rgb(232,160,31)"/><text x="25.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="868" width="3" height="15" fill="rgb(247,82,19)"/><text x="25.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="884" width="3" height="15" fill="rgb(250,53,23)"/><text x="25.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="900" width="3" height="15" fill="rgb(216,89,6)"/><text x="25.00" y="910.50"></text></g><g><title>0x7fb84d33540e (?) (1 samples, 0.22%)</title><rect x="22" y="916" width="3" height="15" fill="rgb(227,107,19)"/><text x="25.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="932" width="3" height="15" fill="rgb(221,89,25)"/><text x="25.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="948" width="3" height="15" fill="rgb(251,152,22)"/><text x="25.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="964" width="3" height="15" fill="rgb(253,5,15)"/><text x="25.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="980" width="3" height="15" fill="rgb(228,180,49)"/><text x="25.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="996" width="3" height="15" fill="rgb(223,202,7)"/><text x="25.00" y="1006.50"></text></g><g><title>0x7fb84d0eecd2 (?) (1 samples, 0.22%)</title><rect x="22" y="1012" width="3" height="15" fill="rgb(221,166,16)"/><text x="25.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1028" width="3" height="15" fill="rgb(254,63,1)"/><text x="25.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1044" width="3" height="15" fill="rgb(241,190,17)"/><text x="25.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1060" width="3" height="15" fill="rgb(253,19,45)"/><text x="25.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1076" width="3" height="15" fill="rgb(222,4,54)"/><text x="25.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1092" width="3" height="15" fill="rgb(219,220,0)"/><text x="25.00" y="1102.50"></text></g><g><title>0x7fb84c7e40e5 (?) (1 samples, 0.22%)</title><rect x="22" y="1108" width="3" height="15" fill="rgb(246,183,46)"/><text x="25.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1124" width="3" height="15" fill="rgb(230,33,43)"/><text x="25.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1140" width="3" height="15" fill="rgb(242,124,15)"/><text x="25.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1156" width="3" height="15" fill="rgb(208,187,10)"/><text x="25.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1172" width="3" height="15" fill="rgb(213,43,10)"/><text x="25.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1188" width="3" height="15" fill="rgb(235,77,23)"/><text x="25.00" y="1198.50"></text></g><g><title>0x7fb84c568e68 (?) (1 samples, 0.22%)</title><rect x="22" y="1204" width="3" height="15" fill="rgb(246,79,44)"/><text x="25.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1220" width="3" height="15" fill="rgb(248,119,45)"/><text x="25.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1236" width="3" height="15" fill="rgb(245,131,23)"/><text x="25.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1252" width="3" height="15" fill="rgb(219,99,28)"/><text x="25.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1268" width="3" height="15" fill="rgb(216,65,38)"/><text x="25.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1284" width="3" height="15" fill="rgb(243,153,43)"/><text x="25.00" y="1294.50"></text></g><g><title>0x7fb84c2f92fb (?) (1 samples, 0.22%)</title><rect x="22" y="1300" width="3" height="15" fill="rgb(242,173,27)"/><text x="25.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1316" width="3" height="15" fill="rgb(225,189,21)"/><text x="25.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1332" width="3" height="15" fill="rgb(240,20,44)"/><text x="25.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1348" width="3" height="15" fill="rgb(214,65,40)"/><text x="25.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1364" width="3" height="15" fill="rgb(245,195,2)"/><text x="25.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1380" width="3" height="15" fill="rgb(240,15,31)"/><text x="25.00" y="1390.50"></text></g><g><title>0x7fb84c0dd153 (?) (1 samples, 0.22%)</title><rect x="22" y="1396" width="3" height="15" fill="rgb(210,177,40)"/><text x="25.00" y="1406.50"></text></g><g><title>0x7fb84c0dbc13 (?) (1 samples, 0.22%)</title><rect x="22" y="1412" width="3" height="15" fill="rgb(226,65,44)"/><text x="25.00" y="1422.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1428" width="3" height="15" fill="rgb(220,27,52)"/><text x="25.00" y="1438.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1444" width="3" height="15" fill="rgb(241,165,34)"/><text x="25.00" y="1454.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1460" width="3" height="15" fill="rgb(245,122,6)"/><text x="25.00" y="1470.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.22%)</title><rect x="22" y="1476" width="3" height="15" fill="rgb(235,73,8)"/><text x="25.00" y="1486.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="22" y="1492" width="3" height="15" fill="rgb(225,2,49)"/><text x="25.00" y="1502.50"></text></g><g><title>0x7fb84be38181 (?) (1 samples, 0.22%)</title><rect x="22" y="1508" width="3" height="15" fill="rgb(239,50,25)"/><text x="25.00" y="1518.50"></text></g><g><title>0x7fb84be3b1c9 (?) (1 samples, 0.22%)</title><rect x="22" y="1524" width="3" height="15" fill="rgb(212,205,32)"/><text x="25.00" y="1534.50"></text></g><g><title>0x7fb84be67167 (?) (1 samples, 0.22%)</title><rect x="22" y="1540" width="3" height="15" fill="rgb(237,33,1)"/><text x="25.00" y="1550.50"></text></g><g><title>0x7fb84be62b64 (?) (1 samples, 0.22%)</title><rect x="22" y="1556" width="3" height="15" fill="rgb(250,2,26)"/><text x="25.00" y="1566.50"></text></g><g><title>0x7fb84be4607b (?) (1 samples, 0.22%)</title><rect x="22" y="1572" width="3" height="15" fill="rgb(233,158,40)"/><text x="25.00" y="1582.50"></text></g><g><title>_lazy (pytz/lazy.py) (1 samples, 0.22%)</title><rect x="22" y="1588" width="3" height="15" fill="rgb(253,222,18)"/><text x="25.00" y="1598.50"></text></g><g><title>&lt;genexpr&gt; (pytz/__init__.py) (1 samples, 0.22%)</title><rect x="22" y="1604" width="3" height="15" fill="rgb(232,123,16)"/><text x="25.00" y="1614.50"></text></g><g><title>resource_exists (pytz/__init__.py) (1 samples, 0.22%)</title><rect x="22" y="1620" width="3" height="15" fill="rgb(231,48,3)"/><text x="25.00" y="1630.50"></text></g><g><title>open_resource (pytz/__init__.py) (1 samples, 0.22%)</title><rect x="22" y="1636" width="3" height="15" fill="rgb(247,36,10)"/><text x="25.00" y="1646.50"></text></g><g><title>get (_collections_abc.py) (1 samples, 0.22%)</title><rect x="22" y="1652" width="3" height="15" fill="rgb(245,229,32)"/><text x="25.00" y="1662.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="10" y="68" width="20" height="15" fill="rgb(252,121,36)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="10" y="84" width="20" height="15" fill="rgb(237,50,46)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="10" y="100" width="20" height="15" fill="rgb(214,79,8)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.72%)</title><rect x="10" y="116" width="20" height="15" fill="rgb(212,78,48)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="10" y="132" width="20" height="15" fill="rgb(209,97,26)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear.py) (8 samples, 1.72%)</title><rect x="10" y="148" width="20" height="15" fill="rgb(242,175,1)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="10" y="164" width="20" height="15" fill="rgb(247,13,20)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.72%)</title><rect x="10" y="180" width="20" height="15" fill="rgb(220,15,50)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="196" width="13" height="15" fill="rgb(242,117,35)"/><text x="20.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="17" y="212" width="13" height="15" fill="rgb(222,157,26)"/><text x="20.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="228" width="13" height="15" fill="rgb(237,88,40)"/><text x="20.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (5 samples, 1.08%)</title><rect x="17" y="244" width="13" height="15" fill="rgb(209,114,39)"/><text x="20.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="260" width="13" height="15" fill="rgb(243,97,26)"/><text x="20.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="276" width="13" height="15" fill="rgb(207,107,3)"/><text x="20.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="292" width="13" height="15" fill="rgb(205,145,32)"/><text x="20.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="17" y="308" width="13" height="15" fill="rgb(212,27,15)"/><text x="20.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="324" width="13" height="15" fill="rgb(219,213,5)"/><text x="20.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (5 samples, 1.08%)</title><rect x="17" y="340" width="13" height="15" fill="rgb(226,193,46)"/><text x="20.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="356" width="13" height="15" fill="rgb(251,226,16)"/><text x="20.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="372" width="13" height="15" fill="rgb(212,5,12)"/><text x="20.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="388" width="13" height="15" fill="rgb(250,87,54)"/><text x="20.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.08%)</title><rect x="17" y="404" width="13" height="15" fill="rgb(220,26,45)"/><text x="20.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="420" width="13" height="15" fill="rgb(222,33,53)"/><text x="20.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (5 samples, 1.08%)</title><rect x="17" y="436" width="13" height="15" fill="rgb(234,65,18)"/><text x="20.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="452" width="13" height="15" fill="rgb(251,93,21)"/><text x="20.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.08%)</title><rect x="17" y="468" width="13" height="15" fill="rgb(239,198,27)"/><text x="20.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="484" width="8" height="15" fill="rgb(221,188,26)"/><text x="25.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="22" y="500" width="8" height="15" fill="rgb(217,161,33)"/><text x="25.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="516" width="8" height="15" fill="rgb(220,200,46)"/><text x="25.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (3 samples, 0.65%)</title><rect x="22" y="532" width="8" height="15" fill="rgb(247,69,5)"/><text x="25.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="548" width="8" height="15" fill="rgb(254,169,40)"/><text x="25.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="564" width="8" height="15" fill="rgb(248,179,20)"/><text x="25.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="580" width="8" height="15" fill="rgb(254,13,3)"/><text x="25.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="22" y="596" width="8" height="15" fill="rgb(238,201,50)"/><text x="25.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="612" width="8" height="15" fill="rgb(242,78,4)"/><text x="25.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (3 samples, 0.65%)</title><rect x="22" y="628" width="8" height="15" fill="rgb(242,63,47)"/><text x="25.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="644" width="8" height="15" fill="rgb(240,144,32)"/><text x="25.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="660" width="8" height="15" fill="rgb(235,145,51)"/><text x="25.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="676" width="8" height="15" fill="rgb(251,12,41)"/><text x="25.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.65%)</title><rect x="22" y="692" width="8" height="15" fill="rgb(206,168,25)"/><text x="25.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.65%)</title><rect x="22" y="708" width="8" height="15" fill="rgb(208,140,46)"/><text x="25.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (2 samples, 0.43%)</title><rect x="25" y="724" width="5" height="15" fill="rgb(228,168,17)"/><text x="28.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="740" width="5" height="15" fill="rgb(220,132,42)"/><text x="28.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="756" width="5" height="15" fill="rgb(214,113,39)"/><text x="28.00" y="766.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="772" width="5" height="15" fill="rgb(245,153,22)"/><text x="28.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="788" width="5" height="15" fill="rgb(224,222,49)"/><text x="28.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="804" width="5" height="15" fill="rgb(219,40,13)"/><text x="28.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="820" width="5" height="15" fill="rgb(242,34,48)"/><text x="28.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="25" y="836" width="5" height="15" fill="rgb(232,57,5)"/><text x="28.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="852" width="5" height="15" fill="rgb(238,57,31)"/><text x="28.00" y="862.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/__init__.py) (2 samples, 0.43%)</title><rect x="25" y="868" width="5" height="15" fill="rgb(222,178,35)"/><text x="28.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="884" width="5" height="15" fill="rgb(207,97,41)"/><text x="28.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="900" width="5" height="15" fill="rgb(253,121,22)"/><text x="28.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="916" width="5" height="15" fill="rgb(221,33,13)"/><text x="28.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="25" y="932" width="5" height="15" fill="rgb(221,25,48)"/><text x="28.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="948" width="5" height="15" fill="rgb(219,123,28)"/><text x="28.00" y="958.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/datetimes.py) (2 samples, 0.43%)</title><rect x="25" y="964" width="5" height="15" fill="rgb(229,176,30)"/><text x="28.00" y="974.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="980" width="5" height="15" fill="rgb(231,178,5)"/><text x="28.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="996" width="5" height="15" fill="rgb(237,13,36)"/><text x="28.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1012" width="5" height="15" fill="rgb(225,131,7)"/><text x="28.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1028" width="5" height="15" fill="rgb(248,201,26)"/><text x="28.00" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1044" width="5" height="15" fill="rgb(251,114,13)"/><text x="28.00" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="25" y="1060" width="5" height="15" fill="rgb(232,158,53)"/><text x="28.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1076" width="5" height="15" fill="rgb(238,111,17)"/><text x="28.00" y="1086.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/datetimelike.py) (2 samples, 0.43%)</title><rect x="25" y="1092" width="5" height="15" fill="rgb(221,225,5)"/><text x="28.00" y="1102.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1108" width="5" height="15" fill="rgb(242,85,10)"/><text x="28.00" y="1118.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1124" width="5" height="15" fill="rgb(209,200,14)"/><text x="28.00" y="1134.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1140" width="5" height="15" fill="rgb(207,191,34)"/><text x="28.00" y="1150.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1156" width="5" height="15" fill="rgb(254,148,10)"/><text x="28.00" y="1166.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1172" width="5" height="15" fill="rgb(232,4,39)"/><text x="28.00" y="1182.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="25" y="1188" width="5" height="15" fill="rgb(212,91,41)"/><text x="28.00" y="1198.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1204" width="5" height="15" fill="rgb(208,224,51)"/><text x="28.00" y="1214.50"></text></g><g><title>&lt;module&gt; (pandas/tseries/frequencies.py) (2 samples, 0.43%)</title><rect x="25" y="1220" width="5" height="15" fill="rgb(231,55,47)"/><text x="28.00" y="1230.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1236" width="5" height="15" fill="rgb(231,91,26)"/><text x="28.00" y="1246.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1252" width="5" height="15" fill="rgb(237,189,31)"/><text x="28.00" y="1262.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1268" width="5" height="15" fill="rgb(228,91,20)"/><text x="28.00" y="1278.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="25" y="1284" width="5" height="15" fill="rgb(237,141,1)"/><text x="28.00" y="1294.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="25" y="1300" width="5" height="15" fill="rgb(234,4,38)"/><text x="28.00" y="1310.50"></text></g><g><title>&lt;module&gt; (pandas/tseries/offsets.py) (2 samples, 0.43%)</title><rect x="25" y="1316" width="5" height="15" fill="rgb(227,5,14)"/><text x="28.00" y="1326.50"></text></g><g><title>Week (pandas/tseries/offsets.py) (1 samples, 0.22%)</title><rect x="27" y="1332" width="3" height="15" fill="rgb(221,160,17)"/><text x="30.00" y="1342.50"></text></g><g><title>apply_wraps (pandas/tseries/offsets.py) (1 samples, 0.22%)</title><rect x="27" y="1348" width="3" height="15" fill="rgb(224,213,8)"/><text x="30.00" y="1358.50"></text></g><g><title>wraps (functools.py) (1 samples, 0.22%)</title><rect x="27" y="1364" width="3" height="15" fill="rgb(234,221,51)"/><text x="30.00" y="1374.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="32" y="116" width="3" height="15" fill="rgb(224,98,18)"/><text x="35.00" y="126.50"></text></g><g><title>npy_free_cache_dim (alloc.c) (1 samples, 0.22%)</title><rect x="32" y="132" width="3" height="15" fill="rgb(209,120,9)"/><text x="35.00" y="142.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.22%)</title><rect x="32" y="148" width="3" height="15" fill="rgb(242,176,40)"/><text x="35.00" y="158.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.22%)</title><rect x="48" y="180" width="2" height="15" fill="rgb(209,92,32)"/><text x="51.00" y="190.50"></text></g><g><title>0x7fb83621eff9 (?) (1 samples, 0.22%)</title><rect x="55" y="212" width="3" height="15" fill="rgb(223,169,16)"/><text x="58.00" y="222.50"></text></g><g><title>0x7fb836219ef6 (?) (1 samples, 0.22%)</title><rect x="55" y="228" width="3" height="15" fill="rgb(229,79,38)"/><text x="58.00" y="238.50"></text></g><g><title>0x7fb83620e962 (?) (1 samples, 0.22%)</title><rect x="55" y="244" width="3" height="15" fill="rgb(215,171,53)"/><text x="58.00" y="254.50"></text></g><g><title>0x7fb8362427a7 (?) (1 samples, 0.22%)</title><rect x="55" y="260" width="3" height="15" fill="rgb(215,169,1)"/><text x="58.00" y="270.50"></text></g><g><title>0x7fb836242379 (?) (1 samples, 0.22%)</title><rect x="55" y="276" width="3" height="15" fill="rgb(213,169,9)"/><text x="58.00" y="286.50"></text></g><g><title>0x7fb8366a08b8 (?) (1 samples, 0.22%)</title><rect x="55" y="292" width="3" height="15" fill="rgb(240,24,47)"/><text x="58.00" y="302.50"></text></g><g><title>0x7fb83669ec7f (?) (1 samples, 0.22%)</title><rect x="55" y="308" width="3" height="15" fill="rgb(232,220,37)"/><text x="58.00" y="318.50"></text></g><g><title>0x7fb8366b199c (?) (1 samples, 0.22%)</title><rect x="55" y="324" width="3" height="15" fill="rgb(221,47,26)"/><text x="58.00" y="334.50"></text></g><g><title>0x7fb836396adb (?) (1 samples, 0.22%)</title><rect x="55" y="340" width="3" height="15" fill="rgb(251,77,0)"/><text x="58.00" y="350.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py) (2 samples, 0.43%)</title><rect x="58" y="212" width="5" height="15" fill="rgb(233,68,53)"/><text x="61.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.43%)</title><rect x="58" y="228" width="5" height="15" fill="rgb(249,61,26)"/><text x="61.00" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg const*, &gt;(pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; (*)(onnxruntime::NodeArg const*), const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="60" y="244" width="3" height="15" fill="rgb(215,201,12)"/><text x="63.00" y="254.50"></text></g><g><title>pybind11::detail::argument_loader&lt;onnxruntime::SessionOptions const&amp;&gt;::load_impl_sequence&lt;(unsigned long)0&gt; [clone .isra.1217] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="60" y="260" width="3" height="15" fill="rgb(231,12,24)"/><text x="63.00" y="270.50"></text></g><g><title>pybind11::detail::type_caster_generic::load_impl&lt;pybind11::detail::type_caster_generic&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="60" y="276" width="3" height="15" fill="rgb(237,99,11)"/><text x="63.00" y="286.50"></text></g><g><title>pybind11::detail::instance::get_value_and_holder (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="60" y="292" width="3" height="15" fill="rgb(251,203,53)"/><text x="63.00" y="302.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.22%)</title><rect x="68" y="260" width="3" height="15" fill="rgb(254,36,15)"/><text x="71.00" y="270.50"></text></g><g><title>onnxruntime::FeedsFetchesInfo::FeedsFetchesInfo (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="71" y="292" width="2" height="15" fill="rgb(231,162,19)"/><text x="74.00" y="302.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="71" y="308" width="2" height="15" fill="rgb(216,6,41)"/><text x="74.00" y="318.50"></text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (190 samples, 40.95%)</title><rect x="73" y="292" width="483" height="15" fill="rgb(230,109,15)"/><text x="76.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pyb..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (190 samples, 40.95%)</title><rect x="73" y="308" width="483" height="15" fill="rgb(229,55,41)"/><text x="76.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (190 samples, 40.95%)</title><rect x="73" y="324" width="483" height="15" fill="rgb(227,141,46)"/><text x="76.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxrun..</text></g><g><title>onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (190 samples, 40.95%)</title><rect x="73" y="340" width="483" height="15" fill="rgb(236,90,36)"/><text x="76.00" y="350.50">onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/cap..</text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; [clone .constprop.182] (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.94%)</title><rect x="533" y="356" width="23" height="15" fill="rgb(223,208,45)"/><text x="536.00" y="366.50">o..</text></g><g><title>0x7fb8761cedae (libc-2.29.so) (1 samples, 0.22%)</title><rect x="554" y="372" width="2" height="15" fill="rgb(220,202,36)"/><text x="557.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (192 samples, 41.38%)</title><rect x="71" y="260" width="488" height="15" fill="rgb(217,180,41)"/><text x="74.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_p..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (192 samples, 41.38%)</title><rect x="71" y="276" width="488" height="15" fill="rgb(244,65,29)"/><text x="74.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_p..</text></g><g><title>std::chrono::_V2::system_clock::now (libstdc++.so.6.0.28) (1 samples, 0.22%)</title><rect x="556" y="292" width="3" height="15" fill="rgb(216,60,3)"/><text x="559.00" y="302.50"></text></g><g><title>clock_gettime (libc-2.29.so) (1 samples, 0.22%)</title><rect x="556" y="308" width="3" height="15" fill="rgb(229,136,39)"/><text x="559.00" y="318.50"></text></g><g><title>onnxruntime::python::CreateGenericMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="559" y="260" width="2" height="15" fill="rgb(218,90,14)"/><text x="562.00" y="270.50"></text></g><g><title>onnxruntime::python::CreateTensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="559" y="276" width="2" height="15" fill="rgb(228,60,16)"/><text x="562.00" y="286.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="559" y="292" width="2" height="15" fill="rgb(249,93,3)"/><text x="562.00" y="302.50"></text></g><g><title>onnxruntime::python::GetPyObjFromTensor [clone .constprop.374] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="561" y="260" width="3" height="15" fill="rgb(251,35,27)"/><text x="564.00" y="270.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="561" y="276" width="3" height="15" fill="rgb(245,119,43)"/><text x="564.00" y="286.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (198 samples, 42.67%)</title><rect x="63" y="244" width="503" height="15" fill="rgb(240,54,54)"/><text x="66.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onn..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="564" y="260" width="2" height="15" fill="rgb(209,127,37)"/><text x="567.00" y="270.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="564" y="276" width="2" height="15" fill="rgb(242,79,10)"/><text x="567.00" y="286.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="564" y="292" width="2" height="15" fill="rgb(233,161,20)"/><text x="567.00" y="302.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="564" y="308" width="2" height="15" fill="rgb(220,106,5)"/><text x="567.00" y="318.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="564" y="324" width="2" height="15" fill="rgb(218,10,8)"/><text x="567.00" y="334.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="564" y="340" width="2" height="15" fill="rgb(251,140,40)"/><text x="567.00" y="350.50"></text></g><g><title>onnxruntime::BFCArena::Merge (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="564" y="356" width="2" height="15" fill="rgb(252,162,1)"/><text x="567.00" y="366.50"></text></g><g><title>onnxruntime::BFCArena::DeleteChunk (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="564" y="372" width="2" height="15" fill="rgb(208,216,52)"/><text x="567.00" y="382.50"></text></g><g><title>onnxruntime::BFCArena::AllocationRegion::IndexFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="564" y="388" width="2" height="15" fill="rgb(226,192,14)"/><text x="567.00" y="398.50"></text></g><g><title>profile_ort (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1000_50_12_float_raw_score.py) (213 samples, 45.91%)</title><rect x="30" y="68" width="542" height="15" fill="rgb(251,45,4)"/><text x="33.00" y="78.50">profile_ort (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverlibline..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1000_50_12_float_raw_score.py) (213 samples, 45.91%)</title><rect x="30" y="84" width="542" height="15" fill="rgb(221,39,2)"/><text x="33.00" y="94.50">setup_profile (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverlibli..</text></g><g><title>profile (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1000_50_12_float_raw_score.py) (213 samples, 45.91%)</title><rect x="30" y="100" width="542" height="15" fill="rgb(218,166,31)"/><text x="33.00" y="110.50">profile (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (211 samples, 45.47%)</title><rect x="35" y="116" width="537" height="15" fill="rgb(231,38,21)"/><text x="38.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (211 samples, 45.47%)</title><rect x="35" y="132" width="537" height="15" fill="rgb(249,40,3)"/><text x="38.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (208 samples, 44.83%)</title><rect x="43" y="148" width="529" height="15" fill="rgb(254,208,9)"/><text x="46.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (208 samples, 44.83%)</title><rect x="43" y="164" width="529" height="15" fill="rgb(251,141,26)"/><text x="46.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (205 samples, 44.18%)</title><rect x="50" y="180" width="522" height="15" fill="rgb(233,139,24)"/><text x="53.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (205 samples, 44.18%)</title><rect x="50" y="196" width="522" height="15" fill="rgb(224,83,31)"/><text x="53.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (200 samples, 43.10%)</title><rect x="63" y="212" width="509" height="15" fill="rgb(234,65,25)"/><text x="66.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (200 samples, 43.10%)</title><rect x="63" y="228" width="509" height="15" fill="rgb(251,44,54)"/><text x="66.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjec..</text></g><g><title>pybind11::detail::list_caster&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::load (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.43%)</title><rect x="566" y="244" width="6" height="15" fill="rgb(210,73,41)"/><text x="569.00" y="254.50"></text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::load [clone .constprop.387] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="569" y="260" width="3" height="15" fill="rgb(215,46,41)"/><text x="572.00" y="270.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; [clone .isra.154] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.22%)</title><rect x="569" y="276" width="3" height="15" fill="rgb(225,62,51)"/><text x="572.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="579" y="116" width="3" height="15" fill="rgb(218,197,20)"/><text x="582.00" y="126.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.22%)</title><rect x="579" y="132" width="3" height="15" fill="rgb(218,207,26)"/><text x="582.00" y="142.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.22%)</title><rect x="579" y="148" width="3" height="15" fill="rgb(206,81,2)"/><text x="582.00" y="158.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.22%)</title><rect x="579" y="164" width="3" height="15" fill="rgb(254,139,23)"/><text x="582.00" y="174.50"></text></g><g><title>0x7fb8761ae906 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="579" y="180" width="3" height="15" fill="rgb(230,149,0)"/><text x="582.00" y="190.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;) (7 samples, 1.51%)</title><rect x="620" y="244" width="18" height="15" fill="rgb(248,14,48)"/><text x="623.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 1.29%)</title><rect x="622" y="260" width="16" height="15" fill="rgb(213,3,16)"/><text x="625.00" y="270.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py) (5 samples, 1.08%)</title><rect x="625" y="276" width="13" height="15" fill="rgb(236,146,19)"/><text x="628.00" y="286.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (5 samples, 1.08%)</title><rect x="625" y="292" width="13" height="15" fill="rgb(227,52,33)"/><text x="628.00" y="302.50"></text></g><g><title>array_argmax (methods.c) (4 samples, 0.86%)</title><rect x="627" y="308" width="11" height="15" fill="rgb(239,123,27)"/><text x="630.00" y="318.50"></text></g><g><title>PyArray_ArgMax (calculation.c) (2 samples, 0.43%)</title><rect x="633" y="324" width="5" height="15" fill="rgb(254,206,5)"/><text x="636.00" y="334.50"></text></g><g><title>FLOAT_argmax (arraytypes.c.src) (2 samples, 0.43%)</title><rect x="633" y="340" width="5" height="15" fill="rgb(205,185,42)"/><text x="636.00" y="350.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.22%)</title><rect x="648" y="372" width="2" height="15" fill="rgb(218,222,29)"/><text x="651.00" y="382.50"></text></g><g><title>blas_memory_free (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.22%)</title><rect x="650" y="372" width="3" height="15" fill="rgb(219,141,32)"/><text x="653.00" y="382.50"></text></g><g><title>gemm (cblasfuncs.c) (19 samples, 4.09%)</title><rect x="648" y="340" width="48" height="15" fill="rgb(218,4,49)"/><text x="651.00" y="350.50">gemm..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (19 samples, 4.09%)</title><rect x="648" y="356" width="48" height="15" fill="rgb(227,178,2)"/><text x="651.00" y="366.50">cbla..</text></g><g><title>sgemm_tn (libopenblasp-r0-34a18dc3.3.7.so) (17 samples, 3.66%)</title><rect x="653" y="372" width="43" height="15" fill="rgb(207,104,17)"/><text x="656.00" y="382.50">sgem..</text></g><g><title>sgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (17 samples, 3.66%)</title><rect x="653" y="388" width="43" height="15" fill="rgb(246,217,8)"/><text x="656.00" y="398.50">sgem..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (20 samples, 4.31%)</title><rect x="648" y="276" width="51" height="15" fill="rgb(230,56,36)"/><text x="651.00" y="286.50">array..</text></g><g><title>array_matrixproduct (multiarraymodule.c) (20 samples, 4.31%)</title><rect x="648" y="292" width="51" height="15" fill="rgb(223,43,4)"/><text x="651.00" y="302.50">array..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c) (20 samples, 4.31%)</title><rect x="648" y="308" width="51" height="15" fill="rgb(213,206,8)"/><text x="651.00" y="318.50">PyArr..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c) (20 samples, 4.31%)</title><rect x="648" y="324" width="51" height="15" fill="rgb(247,68,40)"/><text x="651.00" y="334.50">cblas..</text></g><g><title>new_array_for_sum (common.c) (1 samples, 0.22%)</title><rect x="696" y="340" width="3" height="15" fill="rgb(248,123,54)"/><text x="699.00" y="350.50"></text></g><g><title>sgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (6 samples, 1.29%)</title><rect x="699" y="276" width="15" height="15" fill="rgb(239,44,35)"/><text x="702.00" y="286.50"></text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py) (91 samples, 19.61%)</title><rect x="638" y="244" width="231" height="15" fill="rgb(219,5,17)"/><text x="641.00" y="254.50">numpy_dot_inplace (mlprodict/o..</text></g><g><title>dot (&lt;__array_function__ internals&gt;) (87 samples, 18.75%)</title><rect x="648" y="260" width="221" height="15" fill="rgb(221,30,51)"/><text x="651.00" y="270.50">dot (&lt;__array_function__ inte..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (61 samples, 13.15%)</title><rect x="714" y="276" width="155" height="15" fill="rgb(226,31,12)"/><text x="717.00" y="286.50">sgemm_kernel_SANDYB..</text></g><g><title>_find_array_prepare (ufunc_object.c) (1 samples, 0.22%)</title><rect x="869" y="276" width="3" height="15" fill="rgb(208,141,16)"/><text x="872.00" y="286.50"></text></g><g><title>_get_output_array_method (ufunc_object.c) (1 samples, 0.22%)</title><rect x="869" y="292" width="3" height="15" fill="rgb(241,122,10)"/><text x="872.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.22%)</title><rect x="872" y="308" width="2" height="15" fill="rgb(248,206,43)"/><text x="875.00" y="318.50"></text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c) (1 samples, 0.22%)</title><rect x="872" y="324" width="2" height="15" fill="rgb(222,83,24)"/><text x="875.00" y="334.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.86%)</title><rect x="872" y="276" width="10" height="15" fill="rgb(220,218,10)"/><text x="875.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c) (4 samples, 0.86%)</title><rect x="872" y="292" width="10" height="15" fill="rgb(245,63,49)"/><text x="875.00" y="302.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (3 samples, 0.65%)</title><rect x="874" y="308" width="8" height="15" fill="rgb(218,167,11)"/><text x="877.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (3 samples, 0.65%)</title><rect x="874" y="324" width="8" height="15" fill="rgb(205,93,1)"/><text x="877.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (3 samples, 0.65%)</title><rect x="874" y="340" width="8" height="15" fill="rgb(216,168,16)"/><text x="877.00" y="350.50"></text></g><g><title>0x7fb8761cedbb (libc-2.29.so) (1 samples, 0.22%)</title><rect x="879" y="356" width="3" height="15" fill="rgb(207,138,19)"/><text x="882.00" y="366.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.22%)</title><rect x="882" y="276" width="2" height="15" fill="rgb(220,64,15)"/><text x="885.00" y="286.50"></text></g><g><title>PyArray_FromArray (ctors.c) (1 samples, 0.22%)</title><rect x="882" y="292" width="2" height="15" fill="rgb(223,57,2)"/><text x="885.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 1.51%)</title><rect x="869" y="260" width="18" height="15" fill="rgb(225,128,40)"/><text x="872.00" y="270.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.22%)</title><rect x="884" y="276" width="3" height="15" fill="rgb(206,170,54)"/><text x="887.00" y="286.50"></text></g><g><title>_apply_array_wrap (ufunc_object.c) (1 samples, 0.22%)</title><rect x="887" y="260" width="2" height="15" fill="rgb(226,28,7)"/><text x="890.00" y="270.50"></text></g><g><title>profile (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1000_50_12_float_raw_score.py) (126 samples, 27.16%)</title><rect x="572" y="100" width="320" height="15" fill="rgb(234,91,14)"/><text x="575.00" y="110.50">profile (bench_LogisticRegression_liblinear..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (122 samples, 26.29%)</title><rect x="582" y="116" width="310" height="15" fill="rgb(207,227,28)"/><text x="585.00" y="126.50">time_predict (mlprodict/asv_benchmark/com..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (121 samples, 26.08%)</title><rect x="584" y="132" width="308" height="15" fill="rgb(211,109,13)"/><text x="587.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (119 samples, 25.65%)</title><rect x="589" y="148" width="303" height="15" fill="rgb(244,219,35)"/><text x="592.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (118 samples, 25.43%)</title><rect x="592" y="164" width="300" height="15" fill="rgb(234,124,6)"/><text x="595.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (115 samples, 24.78%)</title><rect x="600" y="180" width="292" height="15" fill="rgb(234,178,13)"/><text x="603.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_no..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (112 samples, 24.14%)</title><rect x="607" y="196" width="285" height="15" fill="rgb(218,39,39)"/><text x="610.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (110 samples, 23.71%)</title><rect x="612" y="212" width="280" height="15" fill="rgb(221,204,32)"/><text x="615.00" y="222.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py) (110 samples, 23.71%)</title><rect x="612" y="228" width="280" height="15" fill="rgb(225,177,33)"/><text x="615.00" y="238.50">_run (mlprodict/onnxrt/ops_cpu/op_lin..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (9 samples, 1.94%)</title><rect x="869" y="244" width="23" height="15" fill="rgb(235,190,19)"/><text x="872.00" y="254.50">u..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.22%)</title><rect x="889" y="260" width="3" height="15" fill="rgb(244,36,27)"/><text x="892.00" y="270.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.22%)</title><rect x="892" y="484" width="3" height="15" fill="rgb(230,151,13)"/><text x="895.00" y="494.50"></text></g><g><title>_get_doc_template (mlprodict/onnxrt/doc/doc_helper.py) (1 samples, 0.22%)</title><rect x="892" y="500" width="3" height="15" fill="rgb(242,125,36)"/><text x="895.00" y="510.50"></text></g><g><title>__new__ (jinja2/environment.py) (1 samples, 0.22%)</title><rect x="892" y="516" width="3" height="15" fill="rgb(220,163,1)"/><text x="895.00" y="526.50"></text></g><g><title>from_string (jinja2/environment.py) (1 samples, 0.22%)</title><rect x="892" y="532" width="3" height="15" fill="rgb(247,166,5)"/><text x="895.00" y="542.50"></text></g><g><title>compile (jinja2/environment.py) (1 samples, 0.22%)</title><rect x="892" y="548" width="3" height="15" fill="rgb(225,215,53)"/><text x="895.00" y="558.50"></text></g><g><title>_parse (jinja2/environment.py) (1 samples, 0.22%)</title><rect x="892" y="564" width="3" height="15" fill="rgb(206,89,5)"/><text x="895.00" y="574.50"></text></g><g><title>parse (jinja2/parser.py) (1 samples, 0.22%)</title><rect x="892" y="580" width="3" height="15" fill="rgb(206,47,20)"/><text x="895.00" y="590.50"></text></g><g><title>set_environment (jinja2/nodes.py) (1 samples, 0.22%)</title><rect x="892" y="596" width="3" height="15" fill="rgb(237,150,38)"/><text x="895.00" y="606.50"></text></g><g><title>iter_child_nodes (jinja2/nodes.py) (1 samples, 0.22%)</title><rect x="892" y="612" width="3" height="15" fill="rgb(250,171,39)"/><text x="895.00" y="622.50"></text></g><g><title>iter_fields (jinja2/nodes.py) (1 samples, 0.22%)</title><rect x="892" y="628" width="3" height="15" fill="rgb(216,201,51)"/><text x="895.00" y="638.50"></text></g><g><title>profile_pyrt (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1000_50_12_float_raw_score.py) (128 samples, 27.59%)</title><rect x="572" y="68" width="325" height="15" fill="rgb(222,193,12)"/><text x="575.00" y="78.50">profile_pyrt (bench_LogisticRegression_libl..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1000_50_12_float_raw_score.py) (128 samples, 27.59%)</title><rect x="572" y="84" width="325" height="15" fill="rgb(250,51,8)"/><text x="575.00" y="94.50">setup_profile (bench_LogisticRegression_lib..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.43%)</title><rect x="892" y="100" width="5" height="15" fill="rgb(218,146,23)"/><text x="895.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.43%)</title><rect x="892" y="116" width="5" height="15" fill="rgb(238,166,52)"/><text x="895.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.43%)</title><rect x="892" y="132" width="5" height="15" fill="rgb(206,104,26)"/><text x="895.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.43%)</title><rect x="892" y="148" width="5" height="15" fill="rgb(213,211,35)"/><text x="895.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.43%)</title><rect x="892" y="164" width="5" height="15" fill="rgb(252,176,18)"/><text x="895.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py) (2 samples, 0.43%)</title><rect x="892" y="180" width="5" height="15" fill="rgb(232,113,37)"/><text x="895.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py) (2 samples, 0.43%)</title><rect x="892" y="196" width="5" height="15" fill="rgb(209,75,36)"/><text x="895.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="212" width="5" height="15" fill="rgb(236,24,44)"/><text x="895.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="228" width="5" height="15" fill="rgb(224,92,26)"/><text x="895.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="244" width="5" height="15" fill="rgb(236,81,47)"/><text x="895.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="892" y="260" width="5" height="15" fill="rgb(249,102,18)"/><text x="895.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="276" width="5" height="15" fill="rgb(221,92,39)"/><text x="895.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py) (2 samples, 0.43%)</title><rect x="892" y="292" width="5" height="15" fill="rgb(243,77,20)"/><text x="895.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="308" width="5" height="15" fill="rgb(234,99,38)"/><text x="895.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="324" width="5" height="15" fill="rgb(245,98,1)"/><text x="895.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="340" width="5" height="15" fill="rgb(252,128,47)"/><text x="895.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="892" y="356" width="5" height="15" fill="rgb(213,147,37)"/><text x="895.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="372" width="5" height="15" fill="rgb(245,82,35)"/><text x="895.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py) (2 samples, 0.43%)</title><rect x="892" y="388" width="5" height="15" fill="rgb(221,55,48)"/><text x="895.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="404" width="5" height="15" fill="rgb(205,9,32)"/><text x="895.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="420" width="5" height="15" fill="rgb(215,59,42)"/><text x="895.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="436" width="5" height="15" fill="rgb(252,6,10)"/><text x="895.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.43%)</title><rect x="892" y="452" width="5" height="15" fill="rgb(221,34,54)"/><text x="895.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.43%)</title><rect x="892" y="468" width="5" height="15" fill="rgb(216,205,6)"/><text x="895.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op.py) (1 samples, 0.22%)</title><rect x="895" y="484" width="2" height="15" fill="rgb(210,197,22)"/><text x="898.00" y="494.50"></text></g><g><title>_build_schemas (mlprodict/onnxrt/ops_cpu/_op.py) (1 samples, 0.22%)</title><rect x="895" y="500" width="2" height="15" fill="rgb(218,24,4)"/><text x="898.00" y="510.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="895" y="516" width="2" height="15" fill="rgb(212,227,8)"/><text x="898.00" y="526.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;onnx::pybind11_init_onnx_cpp2py_export(pybind11::module&amp;)::{lambda()#9}, std::vector&lt;onnx::OpSchema, std::allocator&lt;onnx::OpSchema&gt; &gt; const, , pybind11::name, pybind11::scope, pybind11::sibling&gt;(onnx::pybind11_init_onnx_cpp2py_export(pybind11::module&amp;)::{lambda()#9}&amp;&amp;, std::vector&lt;onnx::OpSchema, std::allocator&lt;onnx::OpSchema&gt; &gt; const (*)(), pybind11::name const, pybind11::scope&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="895" y="532" width="2" height="15" fill="rgb(216,96,51)"/><text x="898.00" y="542.50"></text></g><g><title>std::vector&lt;onnx::OpSchema, std::allocator&lt;onnx::OpSchema&gt; &gt;::_M_emplace_back_aux&lt;onnx::OpSchema&amp;&gt; (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="895" y="548" width="2" height="15" fill="rgb(222,188,17)"/><text x="898.00" y="558.50"></text></g><g><title>onnx::OpSchema::OpSchema (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.22%)</title><rect x="895" y="564" width="2" height="15" fill="rgb(244,216,42)"/><text x="898.00" y="574.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.22%)</title><rect x="895" y="580" width="2" height="15" fill="rgb(241,228,8)"/><text x="898.00" y="590.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="895" y="596" width="2" height="15" fill="rgb(241,190,3)"/><text x="898.00" y="606.50"></text></g><g><title>0x7fb8761b08a4 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="895" y="612" width="2" height="15" fill="rgb(207,132,35)"/><text x="898.00" y="622.50"></text></g><g><title>PyArray_Transpose (shape.c) (2 samples, 0.43%)</title><rect x="910" y="164" width="5" height="15" fill="rgb(239,16,53)"/><text x="913.00" y="174.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.22%)</title><rect x="912" y="180" width="3" height="15" fill="rgb(210,205,0)"/><text x="915.00" y="190.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.22%)</title><rect x="912" y="196" width="3" height="15" fill="rgb(232,102,37)"/><text x="915.00" y="206.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.22%)</title><rect x="912" y="212" width="3" height="15" fill="rgb(240,202,18)"/><text x="915.00" y="222.50"></text></g><g><title>IsAligned (array_assign.c) (1 samples, 0.22%)</title><rect x="912" y="228" width="3" height="15" fill="rgb(214,33,32)"/><text x="915.00" y="238.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (1 samples, 0.22%)</title><rect x="912" y="244" width="3" height="15" fill="rgb(232,172,19)"/><text x="915.00" y="254.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.43%)</title><rect x="915" y="212" width="5" height="15" fill="rgb(232,118,21)"/><text x="918.00" y="222.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (2 samples, 0.43%)</title><rect x="915" y="228" width="5" height="15" fill="rgb(234,116,45)"/><text x="918.00" y="238.50"></text></g><g><title>promote_types (convert_datatype.c) (1 samples, 0.22%)</title><rect x="917" y="244" width="3" height="15" fill="rgb(210,16,47)"/><text x="920.00" y="254.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (1 samples, 0.22%)</title><rect x="917" y="260" width="3" height="15" fill="rgb(238,70,11)"/><text x="920.00" y="270.50"></text></g><g><title>DOUBLE_add (loops.c.src) (1 samples, 0.22%)</title><rect x="920" y="244" width="2" height="15" fill="rgb(247,204,31)"/><text x="923.00" y="254.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (1 samples, 0.22%)</title><rect x="920" y="260" width="2" height="15" fill="rgb(218,207,24)"/><text x="923.00" y="270.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (1 samples, 0.22%)</title><rect x="920" y="276" width="2" height="15" fill="rgb(254,143,27)"/><text x="923.00" y="286.50"></text></g><g><title>_mm_add_pd (emmintrin.h) (1 samples, 0.22%)</title><rect x="920" y="292" width="2" height="15" fill="rgb(232,1,43)"/><text x="923.00" y="302.50"></text></g><g><title>0x7fb8761ced50 (libc-2.29.so) (2 samples, 0.43%)</title><rect x="928" y="292" width="5" height="15" fill="rgb(223,213,5)"/><text x="931.00" y="302.50"></text></g><g><title>array_add (number.c) (8 samples, 1.72%)</title><rect x="915" y="164" width="20" height="15" fill="rgb(240,209,3)"/><text x="918.00" y="174.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (8 samples, 1.72%)</title><rect x="915" y="180" width="20" height="15" fill="rgb(222,129,4)"/><text x="918.00" y="190.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (8 samples, 1.72%)</title><rect x="915" y="196" width="20" height="15" fill="rgb(212,53,9)"/><text x="918.00" y="206.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (6 samples, 1.29%)</title><rect x="920" y="212" width="15" height="15" fill="rgb(211,79,20)"/><text x="923.00" y="222.50"></text></g><g><title>iterator_loop (ufunc_object.c) (6 samples, 1.29%)</title><rect x="920" y="228" width="15" height="15" fill="rgb(210,99,51)"/><text x="923.00" y="238.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (5 samples, 1.08%)</title><rect x="922" y="244" width="13" height="15" fill="rgb(217,222,16)"/><text x="925.00" y="254.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (5 samples, 1.08%)</title><rect x="922" y="260" width="13" height="15" fill="rgb(220,125,15)"/><text x="925.00" y="270.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (4 samples, 0.86%)</title><rect x="925" y="276" width="10" height="15" fill="rgb(226,123,4)"/><text x="928.00" y="286.50"></text></g><g><title>0x7fb8761ced6f (libc-2.29.so) (1 samples, 0.22%)</title><rect x="933" y="292" width="2" height="15" fill="rgb(221,118,32)"/><text x="936.00" y="302.50"></text></g><g><title>__enter__ (warnings.py) (1 samples, 0.22%)</title><rect x="948" y="180" width="2" height="15" fill="rgb(244,13,22)"/><text x="951.00" y="190.50"></text></g><g><title>__exit__ (warnings.py) (3 samples, 0.65%)</title><rect x="950" y="180" width="8" height="15" fill="rgb(210,22,47)"/><text x="953.00" y="190.50"></text></g><g><title>__init__ (warnings.py) (1 samples, 0.22%)</title><rect x="958" y="180" width="3" height="15" fill="rgb(212,16,19)"/><text x="961.00" y="190.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (1 samples, 0.22%)</title><rect x="961" y="180" width="2" height="15" fill="rgb(237,144,36)"/><text x="964.00" y="190.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.22%)</title><rect x="961" y="196" width="2" height="15" fill="rgb(239,79,27)"/><text x="964.00" y="206.50"></text></g><g><title>0x7fb8761c4e7a (libc-2.29.so) (1 samples, 0.22%)</title><rect x="966" y="196" width="2" height="15" fill="rgb(244,2,21)"/><text x="969.00" y="206.50"></text></g><g><title>0x7fb87628c151 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="968" y="196" width="3" height="15" fill="rgb(222,157,42)"/><text x="971.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (4 samples, 0.86%)</title><rect x="963" y="180" width="10" height="15" fill="rgb(247,17,41)"/><text x="966.00" y="190.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.22%)</title><rect x="971" y="196" width="2" height="15" fill="rgb(248,60,38)"/><text x="974.00" y="206.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py) (1 samples, 0.22%)</title><rect x="973" y="180" width="3" height="15" fill="rgb(213,114,33)"/><text x="976.00" y="190.50"></text></g><g><title>issubclass_ (numpy/core/numerictypes.py) (1 samples, 0.22%)</title><rect x="973" y="196" width="3" height="15" fill="rgb(241,50,45)"/><text x="976.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (20 samples, 4.31%)</title><rect x="935" y="164" width="51" height="15" fill="rgb(250,13,34)"/><text x="938.00" y="174.50">check..</text></g><g><title>simplefilter (warnings.py) (4 samples, 0.86%)</title><rect x="976" y="180" width="10" height="15" fill="rgb(236,47,22)"/><text x="979.00" y="190.50"></text></g><g><title>_add_filter (warnings.py) (3 samples, 0.65%)</title><rect x="978" y="196" width="8" height="15" fill="rgb(223,166,47)"/><text x="981.00" y="206.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (4 samples, 0.86%)</title><rect x="986" y="164" width="10" height="15" fill="rgb(213,90,52)"/><text x="989.00" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (4 samples, 0.86%)</title><rect x="986" y="180" width="10" height="15" fill="rgb(235,38,49)"/><text x="989.00" y="190.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.22%)</title><rect x="994" y="196" width="2" height="15" fill="rgb(241,217,4)"/><text x="997.00" y="206.50"></text></g><g><title>dgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.86%)</title><rect x="1006" y="180" width="11" height="15" fill="rgb(245,192,40)"/><text x="1009.00" y="190.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (21 samples, 4.53%)</title><rect x="1017" y="180" width="53" height="15" fill="rgb(223,10,49)"/><text x="1020.00" y="190.50">dgemm..</text></g><g><title>DOUBLE_matmul (matmul.c.src) (18 samples, 3.88%)</title><rect x="1070" y="228" width="46" height="15" fill="rgb(231,168,2)"/><text x="1073.00" y="238.50">DOUB..</text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (18 samples, 3.88%)</title><rect x="1070" y="244" width="46" height="15" fill="rgb(210,27,19)"/><text x="1073.00" y="254.50">cbla..</text></g><g><title>dgemm_nn (libopenblasp-r0-34a18dc3.3.7.so) (18 samples, 3.88%)</title><rect x="1070" y="260" width="46" height="15" fill="rgb(244,100,46)"/><text x="1073.00" y="270.50">dgem..</text></g><g><title>dgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (17 samples, 3.66%)</title><rect x="1073" y="276" width="43" height="15" fill="rgb(250,139,49)"/><text x="1076.00" y="286.50">dgem..</text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (1 samples, 0.22%)</title><rect x="1118" y="292" width="3" height="15" fill="rgb(248,11,10)"/><text x="1121.00" y="302.50"></text></g><g><title>qsort (libc-2.29.so) (1 samples, 0.22%)</title><rect x="1118" y="308" width="3" height="15" fill="rgb(238,93,35)"/><text x="1121.00" y="318.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (24 samples, 5.17%)</title><rect x="1116" y="228" width="61" height="15" fill="rgb(254,72,21)"/><text x="1119.00" y="238.50">NpyIte..</text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (24 samples, 5.17%)</title><rect x="1116" y="244" width="61" height="15" fill="rgb(249,32,3)"/><text x="1119.00" y="254.50">npyite..</text></g><g><title>PyArray_AssignArray (array_assign_array.c) (24 samples, 5.17%)</title><rect x="1116" y="260" width="61" height="15" fill="rgb(218,153,33)"/><text x="1119.00" y="270.50">PyArra..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (24 samples, 5.17%)</title><rect x="1116" y="276" width="61" height="15" fill="rgb(243,81,25)"/><text x="1119.00" y="286.50">raw_ar..</text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src) (22 samples, 4.74%)</title><rect x="1121" y="292" width="56" height="15" fill="rgb(239,143,54)"/><text x="1124.00" y="302.50">_alig..</text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.22%)</title><rect x="1177" y="228" width="2" height="15" fill="rgb(216,203,42)"/><text x="1180.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.22%)</title><rect x="1177" y="244" width="2" height="15" fill="rgb(238,102,33)"/><text x="1180.00" y="254.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.22%)</title><rect x="1177" y="260" width="2" height="15" fill="rgb(228,128,54)"/><text x="1180.00" y="270.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.22%)</title><rect x="1177" y="276" width="2" height="15" fill="rgb(234,229,9)"/><text x="1180.00" y="286.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.22%)</title><rect x="1177" y="292" width="2" height="15" fill="rgb(241,25,38)"/><text x="1180.00" y="302.50"></text></g><g><title>0x7fb8761aef30 (libc-2.29.so) (1 samples, 0.22%)</title><rect x="1177" y="308" width="2" height="15" fill="rgb(226,5,6)"/><text x="1180.00" y="318.50"></text></g><g><title>NpyIter_GetInnerStrideArray (nditer_api.c) (1 samples, 0.22%)</title><rect x="1179" y="228" width="3" height="15" fill="rgb(234,147,29)"/><text x="1182.00" y="238.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.22%)</title><rect x="1182" y="228" width="2" height="15" fill="rgb(233,219,42)"/><text x="1185.00" y="238.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (1 samples, 0.22%)</title><rect x="1184" y="228" width="3" height="15" fill="rgb(253,45,31)"/><text x="1187.00" y="238.50"></text></g><g><title>all (464 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(216,185,21)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1000_50_12_float_raw_score.py) (464 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(226,142,51)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1000_50_12_float_raw_score.py)</text></g><g><title>profile_skl (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1000_50_12_float_raw_score.py) (115 samples, 24.78%)</title><rect x="897" y="68" width="293" height="15" fill="rgb(247,72,41)"/><text x="900.00" y="78.50">profile_skl (bench_LogisticRegression_l..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1000_50_12_float_raw_score.py) (115 samples, 24.78%)</title><rect x="897" y="84" width="293" height="15" fill="rgb(242,192,53)"/><text x="900.00" y="94.50">setup_profile (bench_LogisticRegression..</text></g><g><title>profile (bench_LogisticRegression_liblinear_dec_m_cl_dec_solverliblinear_1000_50_12_float_raw_score.py) (115 samples, 24.78%)</title><rect x="897" y="100" width="293" height="15" fill="rgb(217,44,53)"/><text x="900.00" y="110.50">profile (bench_LogisticRegression_libli..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (115 samples, 24.78%)</title><rect x="897" y="116" width="293" height="15" fill="rgb(229,124,12)"/><text x="900.00" y="126.50">time_predict (mlprodict/asv_benchmark/c..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (113 samples, 24.35%)</title><rect x="902" y="132" width="288" height="15" fill="rgb(235,164,27)"/><text x="905.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/comm..</text></g><g><title>decision_function (sklearn/linear_model/_base.py) (113 samples, 24.35%)</title><rect x="902" y="148" width="288" height="15" fill="rgb(223,125,43)"/><text x="905.00" y="158.50">decision_function (sklearn/linear_mode..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (76 samples, 16.38%)</title><rect x="996" y="164" width="194" height="15" fill="rgb(253,221,50)"/><text x="999.00" y="174.50">safe_sparse_dot (sklearn/..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (47 samples, 10.13%)</title><rect x="1070" y="180" width="120" height="15" fill="rgb(210,46,11)"/><text x="1073.00" y="190.50">ufunc_generic_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (47 samples, 10.13%)</title><rect x="1070" y="196" width="120" height="15" fill="rgb(246,27,28)"/><text x="1073.00" y="206.50">PyUFunc_Generi..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (47 samples, 10.13%)</title><rect x="1070" y="212" width="120" height="15" fill="rgb(209,112,49)"/><text x="1073.00" y="222.50">PyUFunc_Genera..</text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.22%)</title><rect x="1187" y="228" width="3" height="15" fill="rgb(253,97,22)"/><text x="1190.00" y="238.50"></text></g></g></svg>