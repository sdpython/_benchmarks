<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1062" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1045.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1045.00"> </text><g id="frames"><g><title>check_array (sklearn/utils/validation.py:543) (4 samples, 0.12%)</title><rect x="14" y="164" width="1" height="15" fill="rgb(217,179,0)"/><text x="17.00" y="174.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (3 samples, 0.09%)</title><rect x="15" y="180" width="1" height="15" fill="rgb(237,187,49)"/><text x="18.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (4 samples, 0.12%)</title><rect x="15" y="164" width="1" height="15" fill="rgb(234,28,13)"/><text x="18.00" y="174.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:215) (18 samples, 0.56%)</title><rect x="11" y="148" width="6" height="15" fill="rgb(224,68,17)"/><text x="14.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:583) (4 samples, 0.12%)</title><rect x="18" y="164" width="1" height="15" fill="rgb(218,222,42)"/><text x="21.00" y="174.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (4 samples, 0.12%)</title><rect x="18" y="180" width="1" height="15" fill="rgb(240,122,39)"/><text x="21.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (3 samples, 0.09%)</title><rect x="18" y="196" width="1" height="15" fill="rgb(250,161,17)"/><text x="21.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (3 samples, 0.09%)</title><rect x="21" y="180" width="1" height="15" fill="rgb(206,201,25)"/><text x="24.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (11 samples, 0.34%)</title><rect x="19" y="164" width="4" height="15" fill="rgb(252,17,53)"/><text x="22.00" y="174.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:650) (8 samples, 0.25%)</title><rect x="23" y="164" width="3" height="15" fill="rgb(231,172,15)"/><text x="26.00" y="174.50"></text></g><g><title>__init__ (distutils/version.py:304) (7 samples, 0.22%)</title><rect x="24" y="180" width="2" height="15" fill="rgb(251,169,49)"/><text x="27.00" y="190.50"></text></g><g><title>parse (distutils/version.py:312) (7 samples, 0.22%)</title><rect x="24" y="196" width="2" height="15" fill="rgb(247,15,1)"/><text x="27.00" y="206.50"></text></g><g><title>_sre_SRE_Pattern_split (python3.7) (4 samples, 0.12%)</title><rect x="25" y="212" width="1" height="15" fill="rgb(216,27,48)"/><text x="28.00" y="222.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:658) (3 samples, 0.09%)</title><rect x="26" y="164" width="1" height="15" fill="rgb(205,17,38)"/><text x="29.00" y="174.50"></text></g><g><title>delayed (joblib/parallel.py:308) (3 samples, 0.09%)</title><rect x="26" y="180" width="1" height="15" fill="rgb(212,26,38)"/><text x="29.00" y="190.50"></text></g><g><title>__init__ (joblib/parallel.py:634) (4 samples, 0.12%)</title><rect x="28" y="180" width="2" height="15" fill="rgb(227,152,40)"/><text x="31.00" y="190.50"></text></g><g><title>__init__ (joblib/parallel.py:637) (3 samples, 0.09%)</title><rect x="30" y="180" width="1" height="15" fill="rgb(251,7,52)"/><text x="33.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:660) (10 samples, 0.31%)</title><rect x="27" y="164" width="4" height="15" fill="rgb(244,165,7)"/><text x="30.00" y="174.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:796) (3 samples, 0.09%)</title><rect x="31" y="196" width="2" height="15" fill="rgb(216,135,19)"/><text x="34.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:807) (3 samples, 0.09%)</title><rect x="33" y="196" width="1" height="15" fill="rgb(253,25,28)"/><text x="36.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:829) (4 samples, 0.12%)</title><rect x="35" y="196" width="2" height="15" fill="rgb(227,209,27)"/><text x="38.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:504) (7 samples, 0.22%)</title><rect x="41" y="356" width="3" height="15" fill="rgb(214,16,20)"/><text x="44.00" y="366.50"></text></g><g><title>simplefilter (warnings.py:179) (5 samples, 0.15%)</title><rect x="42" y="372" width="2" height="15" fill="rgb(232,180,3)"/><text x="45.00" y="382.50"></text></g><g><title>check_array (sklearn/utils/validation.py:515) (5 samples, 0.15%)</title><rect x="45" y="356" width="1" height="15" fill="rgb(205,16,45)"/><text x="48.00" y="366.50"></text></g><g><title>asarray (numpy/core/_asarray.py:85) (4 samples, 0.12%)</title><rect x="45" y="372" width="1" height="15" fill="rgb(230,101,9)"/><text x="48.00" y="382.50"></text></g><g><title>_array_fromobject (multiarraymodule.c:1734) (3 samples, 0.09%)</title><rect x="45" y="388" width="1" height="15" fill="rgb(207,211,3)"/><text x="48.00" y="398.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c:2041) (3 samples, 0.09%)</title><rect x="45" y="404" width="1" height="15" fill="rgb(226,185,44)"/><text x="48.00" y="414.50"></text></g><g><title>PyArray_FromAny (ctors.c:1966) (3 samples, 0.09%)</title><rect x="45" y="420" width="1" height="15" fill="rgb(253,176,41)"/><text x="48.00" y="430.50"></text></g><g><title>0x7f00aafc632c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (20 samples, 0.62%)</title><rect x="41" y="324" width="7" height="15" fill="rgb(223,21,7)"/><text x="44.00" y="334.50"></text></g><g><title>0x7f00aaf915cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (20 samples, 0.62%)</title><rect x="41" y="340" width="7" height="15" fill="rgb(214,217,42)"/><text x="44.00" y="350.50"></text></g><g><title>0x7f00aafc6680 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.09%)</title><rect x="48" y="324" width="1" height="15" fill="rgb(244,223,7)"/><text x="51.00" y="334.50"></text></g><g><title>0x7f00aafc1ab9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.12%)</title><rect x="50" y="372" width="1" height="15" fill="rgb(225,54,19)"/><text x="53.00" y="382.50"></text></g><g><title>full (numpy/core/numeric.py:333) (3 samples, 0.09%)</title><rect x="50" y="388" width="1" height="15" fill="rgb(215,19,12)"/><text x="53.00" y="398.50"></text></g><g><title>copyto (&lt;__array_function__ internals&gt;:6) (3 samples, 0.09%)</title><rect x="50" y="404" width="1" height="15" fill="rgb(235,214,48)"/><text x="53.00" y="414.50"></text></g><g><title>0x7f00aafc6708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.31%)</title><rect x="49" y="324" width="4" height="15" fill="rgb(225,68,12)"/><text x="52.00" y="334.50"></text></g><g><title>0x7f00aaf915cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.31%)</title><rect x="49" y="340" width="4" height="15" fill="rgb(206,227,53)"/><text x="52.00" y="350.50"></text></g><g><title>0x7f00aafc273a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.25%)</title><rect x="50" y="356" width="3" height="15" fill="rgb(219,29,28)"/><text x="53.00" y="366.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (48 samples, 1.49%)</title><rect x="39" y="228" width="17" height="15" fill="rgb(244,208,47)"/><text x="42.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (48 samples, 1.49%)</title><rect x="39" y="244" width="17" height="15" fill="rgb(242,117,46)"/><text x="42.00" y="254.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (46 samples, 1.42%)</title><rect x="39" y="260" width="17" height="15" fill="rgb(235,85,48)"/><text x="42.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (44 samples, 1.36%)</title><rect x="40" y="276" width="16" height="15" fill="rgb(221,2,42)"/><text x="43.00" y="286.50"></text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (44 samples, 1.36%)</title><rect x="40" y="292" width="16" height="15" fill="rgb(254,90,0)"/><text x="43.00" y="302.50"></text></g><g><title>0x7f00aafcae14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (43 samples, 1.33%)</title><rect x="41" y="308" width="15" height="15" fill="rgb(228,108,18)"/><text x="44.00" y="318.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (72 samples, 2.23%)</title><rect x="31" y="180" width="26" height="15" fill="rgb(250,171,14)"/><text x="34.00" y="190.50">_..</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (56 samples, 1.73%)</title><rect x="37" y="196" width="20" height="15" fill="rgb(240,93,13)"/><text x="40.00" y="206.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (51 samples, 1.58%)</title><rect x="39" y="212" width="18" height="15" fill="rgb(218,218,15)"/><text x="42.00" y="222.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:203) (3 samples, 0.09%)</title><rect x="56" y="228" width="1" height="15" fill="rgb(227,142,10)"/><text x="59.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:1006) (5 samples, 0.15%)</title><rect x="57" y="180" width="2" height="15" fill="rgb(205,11,4)"/><text x="60.00" y="190.50"></text></g><g><title>_initialize_backend (joblib/parallel.py:710) (3 samples, 0.09%)</title><rect x="61" y="196" width="1" height="15" fill="rgb(206,135,17)"/><text x="64.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:949) (6 samples, 0.19%)</title><rect x="61" y="180" width="2" height="15" fill="rgb(217,56,1)"/><text x="64.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (89 samples, 2.76%)</title><rect x="31" y="164" width="33" height="15" fill="rgb(211,198,32)"/><text x="34.00" y="174.50">kn..</text></g><g><title>vstack (numpy/core/shape_base.py:279) (4 samples, 0.12%)</title><rect x="65" y="212" width="1" height="15" fill="rgb(252,162,42)"/><text x="68.00" y="222.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (4 samples, 0.12%)</title><rect x="65" y="228" width="1" height="15" fill="rgb(207,212,18)"/><text x="68.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.12%)</title><rect x="65" y="244" width="1" height="15" fill="rgb(232,17,34)"/><text x="68.00" y="254.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (138 samples, 4.27%)</title><rect x="17" y="148" width="51" height="15" fill="rgb(209,100,24)"/><text x="20.00" y="158.50">predi..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:671) (10 samples, 0.31%)</title><rect x="64" y="164" width="4" height="15" fill="rgb(207,25,51)"/><text x="67.00" y="174.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (8 samples, 0.25%)</title><rect x="65" y="180" width="3" height="15" fill="rgb(233,226,8)"/><text x="68.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.22%)</title><rect x="65" y="196" width="3" height="15" fill="rgb(251,92,41)"/><text x="68.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (3 samples, 0.09%)</title><rect x="66" y="212" width="2" height="15" fill="rgb(227,172,49)"/><text x="69.00" y="222.50"></text></g><g><title>ones_like (numpy/core/numeric.py:285) (3 samples, 0.09%)</title><rect x="69" y="196" width="2" height="15" fill="rgb(225,124,18)"/><text x="72.00" y="206.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:229) (8 samples, 0.25%)</title><rect x="69" y="148" width="3" height="15" fill="rgb(209,219,0)"/><text x="72.00" y="158.50"></text></g><g><title>ones_like (&lt;__array_function__ internals&gt;:6) (6 samples, 0.19%)</title><rect x="69" y="164" width="3" height="15" fill="rgb(214,89,45)"/><text x="72.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.19%)</title><rect x="69" y="180" width="3" height="15" fill="rgb(221,27,53)"/><text x="72.00" y="190.50"></text></g><g><title>ones_like (numpy/core/numeric.py:286) (3 samples, 0.09%)</title><rect x="71" y="196" width="1" height="15" fill="rgb(222,53,3)"/><text x="74.00" y="206.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:231) (3 samples, 0.09%)</title><rect x="72" y="148" width="1" height="15" fill="rgb(247,198,21)"/><text x="75.00" y="158.50"></text></g><g><title>array_assign_subscript (mapping.c:2013) (3 samples, 0.09%)</title><rect x="75" y="164" width="1" height="15" fill="rgb(207,79,5)"/><text x="78.00" y="174.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2942) (8 samples, 0.25%)</title><rect x="78" y="180" width="3" height="15" fill="rgb(237,82,43)"/><text x="81.00" y="190.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c:517) (8 samples, 0.25%)</title><rect x="78" y="196" width="3" height="15" fill="rgb(213,152,16)"/><text x="81.00" y="206.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (4 samples, 0.12%)</title><rect x="79" y="212" width="2" height="15" fill="rgb(236,40,34)"/><text x="82.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1656) (10 samples, 0.31%)</title><rect x="77" y="164" width="4" height="15" fill="rgb(240,74,38)"/><text x="80.00" y="174.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:239) (27 samples, 0.84%)</title><rect x="74" y="148" width="10" height="15" fill="rgb(217,27,26)"/><text x="77.00" y="158.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.15%)</title><rect x="82" y="164" width="2" height="15" fill="rgb(254,204,5)"/><text x="85.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.09%)</title><rect x="83" y="180" width="1" height="15" fill="rgb(242,15,16)"/><text x="86.00" y="190.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:242) (4 samples, 0.12%)</title><rect x="84" y="148" width="1" height="15" fill="rgb(211,191,26)"/><text x="87.00" y="158.50"></text></g><g><title>array_sum (methods.c:2215) (3 samples, 0.09%)</title><rect x="84" y="164" width="1" height="15" fill="rgb(234,222,35)"/><text x="87.00" y="174.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (3 samples, 0.09%)</title><rect x="84" y="180" width="1" height="15" fill="rgb(216,63,26)"/><text x="87.00" y="190.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (3 samples, 0.09%)</title><rect x="84" y="196" width="1" height="15" fill="rgb(219,221,46)"/><text x="87.00" y="206.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:243) (5 samples, 0.15%)</title><rect x="85" y="148" width="2" height="15" fill="rgb(212,218,34)"/><text x="88.00" y="158.50"></text></g><g><title>array_richcompare (arrayobject.c:1445) (3 samples, 0.09%)</title><rect x="86" y="164" width="1" height="15" fill="rgb(224,163,35)"/><text x="89.00" y="174.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (217 samples, 6.72%)</title><rect x="10" y="132" width="80" height="15" fill="rgb(237,28,31)"/><text x="13.00" y="142.50">&lt;lambda&gt; ..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:244) (6 samples, 0.19%)</title><rect x="87" y="148" width="3" height="15" fill="rgb(240,22,16)"/><text x="90.00" y="158.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.15%)</title><rect x="88" y="164" width="2" height="15" fill="rgb(243,134,44)"/><text x="91.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 0.12%)</title><rect x="88" y="180" width="2" height="15" fill="rgb(218,206,36)"/><text x="91.00" y="190.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (4 samples, 0.12%)</title><rect x="88" y="196" width="2" height="15" fill="rgb(233,80,37)"/><text x="91.00" y="206.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:38) (220 samples, 6.81%)</title><rect x="10" y="52" width="80" height="15" fill="rgb(209,160,23)"/><text x="13.00" y="62.50">&lt;module&gt; ..</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:37) (220 samples, 6.81%)</title><rect x="10" y="68" width="80" height="15" fill="rgb(251,202,14)"/><text x="13.00" y="78.50">profile_s..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:29) (219 samples, 6.78%)</title><rect x="10" y="84" width="80" height="15" fill="rgb(207,65,41)"/><text x="13.00" y="94.50">setup_pro..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:23) (219 samples, 6.78%)</title><rect x="10" y="100" width="80" height="15" fill="rgb(240,92,47)"/><text x="13.00" y="110.50">profile (..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (219 samples, 6.78%)</title><rect x="10" y="116" width="80" height="15" fill="rgb(249,136,7)"/><text x="13.00" y="126.50">time_pred..</text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py:2) (5 samples, 0.15%)</title><rect x="90" y="148" width="2" height="15" fill="rgb(206,198,28)"/><text x="93.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="90" y="164" width="2" height="15" fill="rgb(250,93,50)"/><text x="93.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.15%)</title><rect x="90" y="180" width="2" height="15" fill="rgb(206,228,19)"/><text x="93.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="90" y="196" width="2" height="15" fill="rgb(231,116,32)"/><text x="93.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="90" y="212" width="2" height="15" fill="rgb(231,147,25)"/><text x="93.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="90" y="228" width="2" height="15" fill="rgb(226,81,54)"/><text x="93.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="90" y="244" width="2" height="15" fill="rgb(215,44,34)"/><text x="93.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="90" y="260" width="2" height="15" fill="rgb(211,153,2)"/><text x="93.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="90" y="276" width="2" height="15" fill="rgb(248,61,12)"/><text x="93.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (5 samples, 0.15%)</title><rect x="90" y="292" width="2" height="15" fill="rgb(209,96,6)"/><text x="93.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="90" y="308" width="2" height="15" fill="rgb(214,151,41)"/><text x="93.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="90" y="324" width="2" height="15" fill="rgb(205,111,41)"/><text x="93.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="90" y="340" width="2" height="15" fill="rgb(220,191,13)"/><text x="93.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="90" y="356" width="2" height="15" fill="rgb(213,227,44)"/><text x="93.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="90" y="372" width="2" height="15" fill="rgb(242,32,53)"/><text x="93.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (5 samples, 0.15%)</title><rect x="90" y="388" width="2" height="15" fill="rgb(236,209,42)"/><text x="93.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="90" y="404" width="2" height="15" fill="rgb(218,151,37)"/><text x="93.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="90" y="420" width="2" height="15" fill="rgb(219,145,12)"/><text x="93.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="90" y="436" width="2" height="15" fill="rgb(232,144,14)"/><text x="93.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="90" y="452" width="2" height="15" fill="rgb(220,175,51)"/><text x="93.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="90" y="468" width="2" height="15" fill="rgb(228,188,14)"/><text x="93.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (5 samples, 0.15%)</title><rect x="90" y="484" width="2" height="15" fill="rgb(208,25,38)"/><text x="93.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="90" y="500" width="2" height="15" fill="rgb(213,132,44)"/><text x="93.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="90" y="516" width="2" height="15" fill="rgb(245,200,23)"/><text x="93.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="90" y="532" width="2" height="15" fill="rgb(230,2,15)"/><text x="93.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="90" y="548" width="2" height="15" fill="rgb(238,175,12)"/><text x="93.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="90" y="564" width="2" height="15" fill="rgb(251,130,2)"/><text x="93.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (5 samples, 0.15%)</title><rect x="90" y="580" width="2" height="15" fill="rgb(238,30,43)"/><text x="93.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="90" y="596" width="2" height="15" fill="rgb(220,170,26)"/><text x="93.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.15%)</title><rect x="90" y="612" width="2" height="15" fill="rgb(236,193,44)"/><text x="93.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="90" y="628" width="2" height="15" fill="rgb(232,43,25)"/><text x="93.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="90" y="644" width="2" height="15" fill="rgb(218,81,6)"/><text x="93.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="90" y="660" width="2" height="15" fill="rgb(209,214,45)"/><text x="93.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="90" y="676" width="2" height="15" fill="rgb(231,200,40)"/><text x="93.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="90" y="692" width="2" height="15" fill="rgb(247,8,35)"/><text x="93.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="90" y="708" width="2" height="15" fill="rgb(229,99,42)"/><text x="93.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (5 samples, 0.15%)</title><rect x="90" y="724" width="2" height="15" fill="rgb(237,227,2)"/><text x="93.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="90" y="740" width="2" height="15" fill="rgb(210,98,42)"/><text x="93.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="90" y="756" width="2" height="15" fill="rgb(247,162,43)"/><text x="93.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="90" y="772" width="2" height="15" fill="rgb(251,49,7)"/><text x="93.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="90" y="788" width="2" height="15" fill="rgb(217,24,3)"/><text x="93.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="90" y="804" width="2" height="15" fill="rgb(216,112,44)"/><text x="93.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (5 samples, 0.15%)</title><rect x="90" y="820" width="2" height="15" fill="rgb(233,6,2)"/><text x="93.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (5 samples, 0.15%)</title><rect x="90" y="836" width="2" height="15" fill="rgb(237,149,12)"/><text x="93.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (3 samples, 0.09%)</title><rect x="91" y="852" width="1" height="15" fill="rgb(253,155,45)"/><text x="94.00" y="862.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py:4) (4 samples, 0.12%)</title><rect x="92" y="148" width="1" height="15" fill="rgb(212,69,52)"/><text x="95.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.12%)</title><rect x="92" y="164" width="1" height="15" fill="rgb(251,23,26)"/><text x="95.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 0.12%)</title><rect x="92" y="180" width="1" height="15" fill="rgb(254,7,23)"/><text x="95.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="92" y="196" width="1" height="15" fill="rgb(244,37,19)"/><text x="95.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.12%)</title><rect x="92" y="212" width="1" height="15" fill="rgb(236,180,8)"/><text x="95.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.12%)</title><rect x="92" y="228" width="1" height="15" fill="rgb(237,211,48)"/><text x="95.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.12%)</title><rect x="92" y="244" width="1" height="15" fill="rgb(211,80,12)"/><text x="95.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.12%)</title><rect x="92" y="260" width="1" height="15" fill="rgb(225,0,50)"/><text x="95.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="92" y="276" width="1" height="15" fill="rgb(232,19,38)"/><text x="95.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (4 samples, 0.12%)</title><rect x="92" y="292" width="1" height="15" fill="rgb(238,58,30)"/><text x="95.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.12%)</title><rect x="92" y="308" width="1" height="15" fill="rgb(240,24,53)"/><text x="95.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.12%)</title><rect x="92" y="324" width="1" height="15" fill="rgb(247,121,15)"/><text x="95.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.12%)</title><rect x="92" y="340" width="1" height="15" fill="rgb(213,81,48)"/><text x="95.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.12%)</title><rect x="92" y="356" width="1" height="15" fill="rgb(254,150,31)"/><text x="95.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="92" y="372" width="1" height="15" fill="rgb(232,121,1)"/><text x="95.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (4 samples, 0.12%)</title><rect x="92" y="388" width="1" height="15" fill="rgb(214,60,46)"/><text x="95.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.12%)</title><rect x="92" y="404" width="1" height="15" fill="rgb(254,195,38)"/><text x="95.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.12%)</title><rect x="92" y="420" width="1" height="15" fill="rgb(238,173,30)"/><text x="95.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.12%)</title><rect x="92" y="436" width="1" height="15" fill="rgb(206,177,27)"/><text x="95.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.12%)</title><rect x="92" y="452" width="1" height="15" fill="rgb(252,39,29)"/><text x="95.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="92" y="468" width="1" height="15" fill="rgb(215,192,38)"/><text x="95.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:25) (4 samples, 0.12%)</title><rect x="92" y="484" width="1" height="15" fill="rgb(233,61,25)"/><text x="95.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.12%)</title><rect x="92" y="500" width="1" height="15" fill="rgb(251,99,27)"/><text x="95.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.12%)</title><rect x="92" y="516" width="1" height="15" fill="rgb(215,218,41)"/><text x="95.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.12%)</title><rect x="92" y="532" width="1" height="15" fill="rgb(205,189,15)"/><text x="95.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.12%)</title><rect x="92" y="548" width="1" height="15" fill="rgb(216,73,17)"/><text x="95.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="92" y="564" width="1" height="15" fill="rgb(240,38,14)"/><text x="95.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (4 samples, 0.12%)</title><rect x="92" y="580" width="1" height="15" fill="rgb(233,71,7)"/><text x="95.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.12%)</title><rect x="92" y="596" width="1" height="15" fill="rgb(251,146,53)"/><text x="95.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.12%)</title><rect x="92" y="612" width="1" height="15" fill="rgb(228,23,37)"/><text x="95.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.12%)</title><rect x="92" y="628" width="1" height="15" fill="rgb(232,170,47)"/><text x="95.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.12%)</title><rect x="92" y="644" width="1" height="15" fill="rgb(234,123,49)"/><text x="95.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="92" y="660" width="1" height="15" fill="rgb(237,187,47)"/><text x="95.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:379) (4 samples, 0.12%)</title><rect x="92" y="676" width="1" height="15" fill="rgb(237,174,41)"/><text x="95.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.12%)</title><rect x="92" y="692" width="1" height="15" fill="rgb(214,104,15)"/><text x="95.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.12%)</title><rect x="92" y="708" width="1" height="15" fill="rgb(238,51,48)"/><text x="95.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.12%)</title><rect x="92" y="724" width="1" height="15" fill="rgb(246,204,0)"/><text x="95.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.12%)</title><rect x="92" y="740" width="1" height="15" fill="rgb(205,74,2)"/><text x="95.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="92" y="756" width="1" height="15" fill="rgb(240,57,19)"/><text x="95.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py:182) (4 samples, 0.12%)</title><rect x="92" y="772" width="1" height="15" fill="rgb(231,139,5)"/><text x="95.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 0.12%)</title><rect x="92" y="788" width="1" height="15" fill="rgb(252,38,51)"/><text x="95.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="92" y="804" width="1" height="15" fill="rgb(236,229,25)"/><text x="95.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.12%)</title><rect x="92" y="820" width="1" height="15" fill="rgb(229,208,2)"/><text x="95.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.12%)</title><rect x="92" y="836" width="1" height="15" fill="rgb(209,181,2)"/><text x="95.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.12%)</title><rect x="92" y="852" width="1" height="15" fill="rgb(208,100,11)"/><text x="95.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.12%)</title><rect x="92" y="868" width="1" height="15" fill="rgb(253,185,15)"/><text x="95.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="92" y="884" width="1" height="15" fill="rgb(221,13,10)"/><text x="95.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py:13) (4 samples, 0.12%)</title><rect x="92" y="900" width="1" height="15" fill="rgb(243,149,22)"/><text x="95.00" y="910.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 0.12%)</title><rect x="92" y="916" width="1" height="15" fill="rgb(214,38,1)"/><text x="95.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="92" y="932" width="1" height="15" fill="rgb(218,92,25)"/><text x="95.00" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.12%)</title><rect x="92" y="948" width="1" height="15" fill="rgb(232,155,43)"/><text x="95.00" y="958.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.12%)</title><rect x="92" y="964" width="1" height="15" fill="rgb(220,86,4)"/><text x="95.00" y="974.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.12%)</title><rect x="92" y="980" width="1" height="15" fill="rgb(241,25,46)"/><text x="95.00" y="990.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.12%)</title><rect x="92" y="996" width="1" height="15" fill="rgb(237,43,37)"/><text x="95.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="92" y="1012" width="1" height="15" fill="rgb(252,207,53)"/><text x="95.00" y="1022.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (5 samples, 0.15%)</title><rect x="93" y="244" width="2" height="15" fill="rgb(253,157,39)"/><text x="96.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="93" y="260" width="2" height="15" fill="rgb(224,29,54)"/><text x="96.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="93" y="276" width="2" height="15" fill="rgb(215,176,0)"/><text x="96.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="93" y="292" width="2" height="15" fill="rgb(224,64,8)"/><text x="96.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="93" y="308" width="2" height="15" fill="rgb(246,58,53)"/><text x="96.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="93" y="324" width="2" height="15" fill="rgb(233,219,6)"/><text x="96.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (5 samples, 0.15%)</title><rect x="93" y="340" width="2" height="15" fill="rgb(253,93,5)"/><text x="96.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="93" y="356" width="2" height="15" fill="rgb(249,42,46)"/><text x="96.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.15%)</title><rect x="93" y="372" width="2" height="15" fill="rgb(208,66,50)"/><text x="96.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="93" y="388" width="2" height="15" fill="rgb(205,99,29)"/><text x="96.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="93" y="404" width="2" height="15" fill="rgb(247,24,48)"/><text x="96.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="93" y="420" width="2" height="15" fill="rgb(249,157,5)"/><text x="96.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="93" y="436" width="2" height="15" fill="rgb(208,55,13)"/><text x="96.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="93" y="452" width="2" height="15" fill="rgb(230,151,16)"/><text x="96.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="93" y="468" width="2" height="15" fill="rgb(227,191,1)"/><text x="96.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:12) (5 samples, 0.15%)</title><rect x="93" y="484" width="2" height="15" fill="rgb(230,132,40)"/><text x="96.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="93" y="500" width="2" height="15" fill="rgb(228,86,54)"/><text x="96.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="93" y="516" width="2" height="15" fill="rgb(232,64,30)"/><text x="96.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="93" y="532" width="2" height="15" fill="rgb(230,139,19)"/><text x="96.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="93" y="548" width="2" height="15" fill="rgb(228,226,54)"/><text x="96.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="93" y="564" width="2" height="15" fill="rgb(229,188,43)"/><text x="96.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py:23) (5 samples, 0.15%)</title><rect x="93" y="580" width="2" height="15" fill="rgb(215,147,32)"/><text x="96.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="93" y="596" width="2" height="15" fill="rgb(230,31,22)"/><text x="96.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="93" y="612" width="2" height="15" fill="rgb(238,76,45)"/><text x="96.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="93" y="628" width="2" height="15" fill="rgb(227,164,3)"/><text x="96.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="93" y="644" width="2" height="15" fill="rgb(230,125,49)"/><text x="96.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="93" y="660" width="2" height="15" fill="rgb(233,204,54)"/><text x="96.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py:10) (5 samples, 0.15%)</title><rect x="93" y="676" width="2" height="15" fill="rgb(205,58,38)"/><text x="96.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="93" y="692" width="2" height="15" fill="rgb(253,183,19)"/><text x="96.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.12%)</title><rect x="94" y="708" width="1" height="15" fill="rgb(238,13,44)"/><text x="97.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.12%)</title><rect x="94" y="724" width="1" height="15" fill="rgb(220,59,39)"/><text x="97.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.12%)</title><rect x="94" y="740" width="1" height="15" fill="rgb(247,169,37)"/><text x="97.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="94" y="756" width="1" height="15" fill="rgb(244,220,46)"/><text x="97.00" y="766.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (3 samples, 0.09%)</title><rect x="95" y="724" width="1" height="15" fill="rgb(231,184,43)"/><text x="98.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="95" y="740" width="1" height="15" fill="rgb(228,208,36)"/><text x="98.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="95" y="756" width="1" height="15" fill="rgb(243,149,47)"/><text x="98.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="95" y="772" width="1" height="15" fill="rgb(238,126,9)"/><text x="98.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="95" y="788" width="1" height="15" fill="rgb(234,134,17)"/><text x="98.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="95" y="804" width="1" height="15" fill="rgb(224,194,13)"/><text x="98.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (3 samples, 0.09%)</title><rect x="95" y="820" width="1" height="15" fill="rgb(251,17,21)"/><text x="98.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="95" y="836" width="1" height="15" fill="rgb(226,189,36)"/><text x="98.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="95" y="852" width="1" height="15" fill="rgb(216,141,23)"/><text x="98.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="95" y="868" width="1" height="15" fill="rgb(211,58,36)"/><text x="98.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="95" y="884" width="1" height="15" fill="rgb(231,54,3)"/><text x="98.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="95" y="900" width="1" height="15" fill="rgb(223,111,33)"/><text x="98.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:44) (3 samples, 0.09%)</title><rect x="95" y="916" width="1" height="15" fill="rgb(241,181,45)"/><text x="98.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="95" y="932" width="1" height="15" fill="rgb(251,52,36)"/><text x="98.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="95" y="948" width="1" height="15" fill="rgb(212,81,25)"/><text x="98.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="95" y="964" width="1" height="15" fill="rgb(239,227,39)"/><text x="98.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="95" y="980" width="1" height="15" fill="rgb(232,134,8)"/><text x="98.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="95" y="996" width="1" height="15" fill="rgb(210,88,6)"/><text x="98.00" y="1006.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (4 samples, 0.12%)</title><rect x="95" y="532" width="1" height="15" fill="rgb(240,9,12)"/><text x="98.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.12%)</title><rect x="95" y="548" width="1" height="15" fill="rgb(222,199,25)"/><text x="98.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.12%)</title><rect x="95" y="564" width="1" height="15" fill="rgb(236,202,36)"/><text x="98.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.12%)</title><rect x="95" y="580" width="1" height="15" fill="rgb(239,136,5)"/><text x="98.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.12%)</title><rect x="95" y="596" width="1" height="15" fill="rgb(217,75,29)"/><text x="98.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="95" y="612" width="1" height="15" fill="rgb(229,104,50)"/><text x="98.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (4 samples, 0.12%)</title><rect x="95" y="628" width="1" height="15" fill="rgb(230,146,14)"/><text x="98.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.12%)</title><rect x="95" y="644" width="1" height="15" fill="rgb(238,129,53)"/><text x="98.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.12%)</title><rect x="95" y="660" width="1" height="15" fill="rgb(218,185,52)"/><text x="98.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.12%)</title><rect x="95" y="676" width="1" height="15" fill="rgb(230,170,30)"/><text x="98.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.12%)</title><rect x="95" y="692" width="1" height="15" fill="rgb(243,54,12)"/><text x="98.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.12%)</title><rect x="95" y="708" width="1" height="15" fill="rgb(220,113,37)"/><text x="98.00" y="718.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:4) (19 samples, 0.59%)</title><rect x="90" y="52" width="7" height="15" fill="rgb(208,228,26)"/><text x="93.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (19 samples, 0.59%)</title><rect x="90" y="68" width="7" height="15" fill="rgb(212,154,0)"/><text x="93.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (19 samples, 0.59%)</title><rect x="90" y="84" width="7" height="15" fill="rgb(232,106,41)"/><text x="93.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (19 samples, 0.59%)</title><rect x="90" y="100" width="7" height="15" fill="rgb(241,202,11)"/><text x="93.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (19 samples, 0.59%)</title><rect x="90" y="116" width="7" height="15" fill="rgb(235,98,8)"/><text x="93.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (19 samples, 0.59%)</title><rect x="90" y="132" width="7" height="15" fill="rgb(212,60,28)"/><text x="93.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py:7) (10 samples, 0.31%)</title><rect x="93" y="148" width="4" height="15" fill="rgb(254,154,40)"/><text x="96.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 0.31%)</title><rect x="93" y="164" width="4" height="15" fill="rgb(227,161,14)"/><text x="96.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 0.31%)</title><rect x="93" y="180" width="4" height="15" fill="rgb(244,62,41)"/><text x="96.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 0.31%)</title><rect x="93" y="196" width="4" height="15" fill="rgb(253,91,9)"/><text x="96.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 0.31%)</title><rect x="93" y="212" width="4" height="15" fill="rgb(246,110,44)"/><text x="96.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 0.31%)</title><rect x="93" y="228" width="4" height="15" fill="rgb(205,35,43)"/><text x="96.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (5 samples, 0.15%)</title><rect x="95" y="244" width="2" height="15" fill="rgb(216,149,27)"/><text x="98.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="95" y="260" width="2" height="15" fill="rgb(242,37,49)"/><text x="98.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="95" y="276" width="2" height="15" fill="rgb(215,35,10)"/><text x="98.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="95" y="292" width="2" height="15" fill="rgb(227,125,38)"/><text x="98.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="95" y="308" width="2" height="15" fill="rgb(207,118,0)"/><text x="98.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="95" y="324" width="2" height="15" fill="rgb(234,19,32)"/><text x="98.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (5 samples, 0.15%)</title><rect x="95" y="340" width="2" height="15" fill="rgb(231,55,19)"/><text x="98.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="95" y="356" width="2" height="15" fill="rgb(248,122,42)"/><text x="98.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="95" y="372" width="2" height="15" fill="rgb(208,177,16)"/><text x="98.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="95" y="388" width="2" height="15" fill="rgb(232,116,42)"/><text x="98.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="95" y="404" width="2" height="15" fill="rgb(245,182,12)"/><text x="98.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="95" y="420" width="2" height="15" fill="rgb(248,78,1)"/><text x="98.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (5 samples, 0.15%)</title><rect x="95" y="436" width="2" height="15" fill="rgb(214,63,34)"/><text x="98.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="95" y="452" width="2" height="15" fill="rgb(211,72,13)"/><text x="98.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="95" y="468" width="2" height="15" fill="rgb(252,20,17)"/><text x="98.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="95" y="484" width="2" height="15" fill="rgb(253,90,7)"/><text x="98.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="95" y="500" width="2" height="15" fill="rgb(233,37,34)"/><text x="98.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="95" y="516" width="2" height="15" fill="rgb(223,102,5)"/><text x="98.00" y="526.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (10 samples, 0.31%)</title><rect x="100" y="260" width="4" height="15" fill="rgb(250,124,18)"/><text x="103.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (16 samples, 0.50%)</title><rect x="106" y="276" width="5" height="15" fill="rgb(250,229,31)"/><text x="109.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (16 samples, 0.50%)</title><rect x="106" y="292" width="5" height="15" fill="rgb(227,184,11)"/><text x="109.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (11 samples, 0.34%)</title><rect x="107" y="308" width="4" height="15" fill="rgb(234,52,42)"/><text x="110.00" y="318.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (9 samples, 0.28%)</title><rect x="108" y="324" width="3" height="15" fill="rgb(229,164,31)"/><text x="111.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 0.25%)</title><rect x="109" y="340" width="2" height="15" fill="rgb(240,12,0)"/><text x="112.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (6 samples, 0.19%)</title><rect x="109" y="356" width="2" height="15" fill="rgb(230,4,14)"/><text x="112.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (5 samples, 0.15%)</title><rect x="110" y="372" width="1" height="15" fill="rgb(240,153,36)"/><text x="113.00" y="382.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (5 samples, 0.15%)</title><rect x="110" y="388" width="1" height="15" fill="rgb(246,73,48)"/><text x="113.00" y="398.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (5 samples, 0.15%)</title><rect x="110" y="404" width="1" height="15" fill="rgb(216,181,20)"/><text x="113.00" y="414.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (3 samples, 0.09%)</title><rect x="110" y="420" width="1" height="15" fill="rgb(230,88,6)"/><text x="113.00" y="430.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (30 samples, 0.93%)</title><rect x="104" y="260" width="11" height="15" fill="rgb(248,135,29)"/><text x="107.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (8 samples, 0.25%)</title><rect x="112" y="276" width="3" height="15" fill="rgb(207,44,9)"/><text x="115.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (7 samples, 0.22%)</title><rect x="113" y="292" width="2" height="15" fill="rgb(206,229,7)"/><text x="116.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (7 samples, 0.22%)</title><rect x="113" y="308" width="2" height="15" fill="rgb(249,151,19)"/><text x="116.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.15%)</title><rect x="113" y="324" width="2" height="15" fill="rgb(231,189,15)"/><text x="116.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 0.15%)</title><rect x="113" y="340" width="2" height="15" fill="rgb(237,186,2)"/><text x="116.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (4 samples, 0.12%)</title><rect x="114" y="356" width="1" height="15" fill="rgb(234,97,1)"/><text x="117.00" y="366.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (50 samples, 1.55%)</title><rect x="100" y="244" width="18" height="15" fill="rgb(240,59,2)"/><text x="103.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (6 samples, 0.19%)</title><rect x="116" y="260" width="2" height="15" fill="rgb(209,45,52)"/><text x="119.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (56 samples, 1.73%)</title><rect x="98" y="212" width="21" height="15" fill="rgb(226,101,10)"/><text x="101.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (53 samples, 1.64%)</title><rect x="99" y="228" width="20" height="15" fill="rgb(215,39,5)"/><text x="102.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (64 samples, 1.98%)</title><rect x="97" y="196" width="24" height="15" fill="rgb(216,202,0)"/><text x="100.00" y="206.50">r..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:18) (67 samples, 2.07%)</title><rect x="97" y="100" width="25" height="15" fill="rgb(251,44,26)"/><text x="100.00" y="110.50">p..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (67 samples, 2.07%)</title><rect x="97" y="116" width="25" height="15" fill="rgb(229,32,52)"/><text x="100.00" y="126.50">t..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (67 samples, 2.07%)</title><rect x="97" y="132" width="25" height="15" fill="rgb(216,80,24)"/><text x="100.00" y="142.50">&lt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (67 samples, 2.07%)</title><rect x="97" y="148" width="25" height="15" fill="rgb(248,74,31)"/><text x="100.00" y="158.50">r..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (67 samples, 2.07%)</title><rect x="97" y="164" width="25" height="15" fill="rgb(250,161,34)"/><text x="100.00" y="174.50">_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (67 samples, 2.07%)</title><rect x="97" y="180" width="25" height="15" fill="rgb(241,163,11)"/><text x="100.00" y="190.50">r..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (4 samples, 0.12%)</title><rect x="126" y="180" width="1" height="15" fill="rgb(213,218,14)"/><text x="129.00" y="190.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (11 samples, 0.34%)</title><rect x="127" y="180" width="4" height="15" fill="rgb(250,168,39)"/><text x="130.00" y="190.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2823) (3 samples, 0.09%)</title><rect x="138" y="244" width="2" height="15" fill="rgb(239,132,39)"/><text x="141.00" y="254.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c:517) (3 samples, 0.09%)</title><rect x="138" y="260" width="2" height="15" fill="rgb(205,54,15)"/><text x="141.00" y="270.50"></text></g><g><title>array_subscript (mapping.c:1656) (5 samples, 0.15%)</title><rect x="138" y="228" width="2" height="15" fill="rgb(223,167,15)"/><text x="141.00" y="238.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1540) (3 samples, 0.09%)</title><rect x="140" y="244" width="1" height="15" fill="rgb(237,44,17)"/><text x="143.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1676) (4 samples, 0.12%)</title><rect x="140" y="228" width="1" height="15" fill="rgb(236,41,19)"/><text x="143.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (15 samples, 0.46%)</title><rect x="136" y="212" width="6" height="15" fill="rgb(209,109,48)"/><text x="139.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:37) (9 samples, 0.28%)</title><rect x="142" y="212" width="3" height="15" fill="rgb(249,10,51)"/><text x="145.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (6 samples, 0.19%)</title><rect x="143" y="228" width="2" height="15" fill="rgb(233,213,48)"/><text x="146.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:79) (4 samples, 0.12%)</title><rect x="146" y="212" width="1" height="15" fill="rgb(245,102,7)"/><text x="149.00" y="222.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (5 samples, 0.15%)</title><rect x="152" y="260" width="1" height="15" fill="rgb(216,29,50)"/><text x="155.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (7 samples, 0.22%)</title><rect x="151" y="228" width="3" height="15" fill="rgb(217,140,31)"/><text x="154.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (7 samples, 0.22%)</title><rect x="151" y="244" width="3" height="15" fill="rgb(249,134,9)"/><text x="154.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (19 samples, 0.59%)</title><rect x="149" y="212" width="7" height="15" fill="rgb(211,43,52)"/><text x="152.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (25 samples, 0.77%)</title><rect x="156" y="212" width="9" height="15" fill="rgb(210,21,1)"/><text x="159.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:87) (4 samples, 0.12%)</title><rect x="165" y="212" width="1" height="15" fill="rgb(214,43,7)"/><text x="168.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (8 samples, 0.25%)</title><rect x="166" y="212" width="3" height="15" fill="rgb(235,144,1)"/><text x="169.00" y="222.50"></text></g><g><title>prepare_index (mapping.c:491) (3 samples, 0.09%)</title><rect x="175" y="244" width="1" height="15" fill="rgb(237,19,9)"/><text x="178.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1539) (11 samples, 0.34%)</title><rect x="174" y="228" width="4" height="15" fill="rgb(220,193,52)"/><text x="177.00" y="238.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (3 samples, 0.09%)</title><rect x="180" y="276" width="2" height="15" fill="rgb(247,45,52)"/><text x="183.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (38 samples, 1.18%)</title><rect x="169" y="212" width="14" height="15" fill="rgb(248,167,31)"/><text x="172.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1584) (15 samples, 0.46%)</title><rect x="178" y="228" width="5" height="15" fill="rgb(252,46,4)"/><text x="181.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (10 samples, 0.31%)</title><rect x="179" y="244" width="4" height="15" fill="rgb(240,75,33)"/><text x="182.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (9 samples, 0.28%)</title><rect x="180" y="260" width="3" height="15" fill="rgb(206,170,47)"/><text x="183.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:392) (9 samples, 0.28%)</title><rect x="196" y="228" width="3" height="15" fill="rgb(211,124,54)"/><text x="199.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (18 samples, 0.56%)</title><rect x="199" y="228" width="7" height="15" fill="rgb(225,214,18)"/><text x="202.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:401) (3 samples, 0.09%)</title><rect x="206" y="228" width="1" height="15" fill="rgb(250,62,3)"/><text x="209.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:418) (3 samples, 0.09%)</title><rect x="216" y="244" width="1" height="15" fill="rgb(237,92,30)"/><text x="219.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:426) (13 samples, 0.40%)</title><rect x="217" y="244" width="5" height="15" fill="rgb(215,42,13)"/><text x="220.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (10 samples, 0.31%)</title><rect x="222" y="244" width="4" height="15" fill="rgb(225,48,18)"/><text x="225.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (17 samples, 0.53%)</title><rect x="226" y="244" width="6" height="15" fill="rgb(216,219,29)"/><text x="229.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (24 samples, 0.74%)</title><rect x="232" y="244" width="9" height="15" fill="rgb(234,58,10)"/><text x="235.00" y="254.50"></text></g><g><title>unicode_eq (python3.7) (7 samples, 0.22%)</title><rect x="238" y="260" width="3" height="15" fill="rgb(241,37,20)"/><text x="241.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:447) (4 samples, 0.12%)</title><rect x="241" y="244" width="1" height="15" fill="rgb(224,181,5)"/><text x="244.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:448) (3 samples, 0.09%)</title><rect x="242" y="244" width="1" height="15" fill="rgb(221,59,49)"/><text x="245.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (18 samples, 0.56%)</title><rect x="243" y="244" width="7" height="15" fill="rgb(209,177,8)"/><text x="246.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:124) (4 samples, 0.12%)</title><rect x="285" y="260" width="1" height="15" fill="rgb(245,171,28)"/><text x="288.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (21 samples, 0.65%)</title><rect x="286" y="260" width="8" height="15" fill="rgb(216,40,51)"/><text x="289.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (193 samples, 5.98%)</title><rect x="294" y="260" width="71" height="15" fill="rgb(238,139,49)"/><text x="297.00" y="270.50">run (mlp..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (23 samples, 0.71%)</title><rect x="356" y="276" width="9" height="15" fill="rgb(248,92,31)"/><text x="359.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:268) (4 samples, 0.12%)</title><rect x="419" y="292" width="2" height="15" fill="rgb(244,29,21)"/><text x="422.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (24 samples, 0.74%)</title><rect x="437" y="308" width="8" height="15" fill="rgb(248,97,49)"/><text x="440.00" y="318.50"></text></g><g><title>array_copy (methods.c:1127) (4 samples, 0.12%)</title><rect x="448" y="324" width="2" height="15" fill="rgb(206,170,34)"/><text x="451.00" y="334.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1246) (3 samples, 0.09%)</title><rect x="451" y="356" width="1" height="15" fill="rgb(244,81,8)"/><text x="454.00" y="366.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (3 samples, 0.09%)</title><rect x="452" y="420" width="1" height="15" fill="rgb(238,177,13)"/><text x="455.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (4 samples, 0.12%)</title><rect x="452" y="404" width="2" height="15" fill="rgb(213,92,41)"/><text x="455.00" y="414.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (7 samples, 0.22%)</title><rect x="452" y="356" width="3" height="15" fill="rgb(236,206,17)"/><text x="455.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (7 samples, 0.22%)</title><rect x="452" y="372" width="3" height="15" fill="rgb(222,197,29)"/><text x="455.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (7 samples, 0.22%)</title><rect x="452" y="388" width="3" height="15" fill="rgb(239,103,33)"/><text x="455.00" y="398.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (15 samples, 0.46%)</title><rect x="450" y="340" width="6" height="15" fill="rgb(249,172,49)"/><text x="453.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1324) (3 samples, 0.09%)</title><rect x="455" y="356" width="1" height="15" fill="rgb(244,143,20)"/><text x="458.00" y="366.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:301) (3 samples, 0.09%)</title><rect x="456" y="356" width="1" height="15" fill="rgb(230,148,22)"/><text x="459.00" y="366.50"></text></g><g><title>PyArray_FailUnlessWriteable (arrayobject.c:691) (3 samples, 0.09%)</title><rect x="456" y="372" width="1" height="15" fill="rgb(216,163,20)"/><text x="459.00" y="382.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:333) (4 samples, 0.12%)</title><rect x="457" y="356" width="2" height="15" fill="rgb(245,178,7)"/><text x="460.00" y="366.50"></text></g><g><title>arrays_overlap (array_assign.c:162) (3 samples, 0.09%)</title><rect x="458" y="372" width="1" height="15" fill="rgb(237,82,5)"/><text x="461.00" y="382.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c:3506) (3 samples, 0.09%)</title><rect x="460" y="388" width="1" height="15" fill="rgb(253,34,51)"/><text x="463.00" y="398.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c:1511) (3 samples, 0.09%)</title><rect x="460" y="404" width="1" height="15" fill="rgb(215,208,49)"/><text x="463.00" y="414.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:120) (5 samples, 0.15%)</title><rect x="460" y="372" width="2" height="15" fill="rgb(252,116,51)"/><text x="463.00" y="382.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (7 samples, 0.22%)</title><rect x="463" y="388" width="2" height="15" fill="rgb(211,104,35)"/><text x="466.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (13 samples, 0.40%)</title><rect x="462" y="372" width="5" height="15" fill="rgb(253,175,32)"/><text x="465.00" y="382.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (3 samples, 0.09%)</title><rect x="468" y="388" width="1" height="15" fill="rgb(205,169,8)"/><text x="471.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (6 samples, 0.19%)</title><rect x="468" y="372" width="2" height="15" fill="rgb(224,5,12)"/><text x="471.00" y="382.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (14 samples, 0.43%)</title><rect x="472" y="388" width="5" height="15" fill="rgb(227,146,24)"/><text x="475.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (12 samples, 0.37%)</title><rect x="472" y="404" width="5" height="15" fill="rgb(252,116,10)"/><text x="475.00" y="414.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (50 samples, 1.55%)</title><rect x="460" y="356" width="18" height="15" fill="rgb(218,159,51)"/><text x="463.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (20 samples, 0.62%)</title><rect x="471" y="372" width="7" height="15" fill="rgb(231,120,33)"/><text x="474.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (90 samples, 2.79%)</title><rect x="446" y="308" width="33" height="15" fill="rgb(236,89,6)"/><text x="449.00" y="318.50">_r..</text></g><g><title>array_copy (methods.c:1133) (79 samples, 2.45%)</title><rect x="450" y="324" width="29" height="15" fill="rgb(249,118,33)"/><text x="453.00" y="334.50">ar..</text></g><g><title>PyArray_NewCopy (convert.c:560) (62 samples, 1.92%)</title><rect x="456" y="340" width="23" height="15" fill="rgb(211,4,47)"/><text x="459.00" y="350.50">P..</text></g><g><title>get_array_ufunc_overrides (override.c:41) (3 samples, 0.09%)</title><rect x="490" y="356" width="1" height="15" fill="rgb(209,181,47)"/><text x="493.00" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (7 samples, 0.22%)</title><rect x="489" y="324" width="3" height="15" fill="rgb(250,202,2)"/><text x="492.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (6 samples, 0.19%)</title><rect x="490" y="340" width="2" height="15" fill="rgb(242,45,45)"/><text x="493.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (6 samples, 0.19%)</title><rect x="492" y="340" width="3" height="15" fill="rgb(222,187,14)"/><text x="495.00" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1102) (4 samples, 0.12%)</title><rect x="493" y="356" width="2" height="15" fill="rgb(234,123,10)"/><text x="496.00" y="366.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2003) (4 samples, 0.12%)</title><rect x="496" y="356" width="2" height="15" fill="rgb(248,181,13)"/><text x="499.00" y="366.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2006) (4 samples, 0.12%)</title><rect x="498" y="356" width="1" height="15" fill="rgb(209,120,43)"/><text x="501.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1620) (3 samples, 0.09%)</title><rect x="500" y="372" width="1" height="15" fill="rgb(247,66,35)"/><text x="503.00" y="382.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1665) (5 samples, 0.15%)</title><rect x="501" y="372" width="2" height="15" fill="rgb(224,6,0)"/><text x="504.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src:4482) (5 samples, 0.15%)</title><rect x="501" y="388" width="2" height="15" fill="rgb(205,64,44)"/><text x="504.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:757) (7 samples, 0.22%)</title><rect x="505" y="404" width="2" height="15" fill="rgb(243,57,50)"/><text x="508.00" y="414.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c:1521) (5 samples, 0.15%)</title><rect x="506" y="420" width="1" height="15" fill="rgb(248,120,13)"/><text x="509.00" y="430.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:865) (4 samples, 0.12%)</title><rect x="507" y="404" width="2" height="15" fill="rgb(232,51,36)"/><text x="510.00" y="414.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (17 samples, 0.53%)</title><rect x="503" y="372" width="6" height="15" fill="rgb(215,112,44)"/><text x="506.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (15 samples, 0.46%)</title><rect x="504" y="388" width="5" height="15" fill="rgb(236,94,6)"/><text x="507.00" y="398.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (28 samples, 0.87%)</title><rect x="499" y="356" width="11" height="15" fill="rgb(246,82,29)"/><text x="502.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (43 samples, 1.33%)</title><rect x="495" y="340" width="15" height="15" fill="rgb(228,41,25)"/><text x="498.00" y="350.50"></text></g><g><title>_find_array_prepare (ufunc_object.c:272) (3 samples, 0.09%)</title><rect x="512" y="356" width="1" height="15" fill="rgb(221,60,31)"/><text x="515.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (4 samples, 0.12%)</title><rect x="512" y="340" width="1" height="15" fill="rgb(231,69,12)"/><text x="515.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (11 samples, 0.34%)</title><rect x="516" y="388" width="4" height="15" fill="rgb(209,54,40)"/><text x="519.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (11 samples, 0.34%)</title><rect x="516" y="404" width="4" height="15" fill="rgb(238,131,3)"/><text x="519.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (11 samples, 0.34%)</title><rect x="516" y="420" width="4" height="15" fill="rgb(243,141,46)"/><text x="519.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (11 samples, 0.34%)</title><rect x="516" y="436" width="4" height="15" fill="rgb(209,173,2)"/><text x="519.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (3 samples, 0.09%)</title><rect x="521" y="388" width="1" height="15" fill="rgb(248,187,16)"/><text x="524.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (22 samples, 0.68%)</title><rect x="515" y="356" width="8" height="15" fill="rgb(217,145,38)"/><text x="518.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (22 samples, 0.68%)</title><rect x="515" y="372" width="8" height="15" fill="rgb(208,77,32)"/><text x="518.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (32 samples, 0.99%)</title><rect x="514" y="340" width="11" height="15" fill="rgb(227,210,44)"/><text x="517.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (6 samples, 0.19%)</title><rect x="523" y="356" width="2" height="15" fill="rgb(220,187,4)"/><text x="526.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1355) (3 samples, 0.09%)</title><rect x="524" y="372" width="1" height="15" fill="rgb(210,133,13)"/><text x="527.00" y="382.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (93 samples, 2.88%)</title><rect x="492" y="324" width="34" height="15" fill="rgb(208,6,51)"/><text x="495.00" y="334.50">uf..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (132 samples, 4.09%)</title><rect x="479" y="308" width="48" height="15" fill="rgb(247,51,37)"/><text x="482.00" y="318.50">_run..</text></g><g><title>0x7f00d0bd3120 (libc-2.29.so) (4 samples, 0.12%)</title><rect x="537" y="324" width="2" height="15" fill="rgb(248,69,10)"/><text x="540.00" y="334.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (4 samples, 0.12%)</title><rect x="541" y="356" width="2" height="15" fill="rgb(223,35,35)"/><text x="544.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (5 samples, 0.15%)</title><rect x="543" y="356" width="2" height="15" fill="rgb(254,137,42)"/><text x="546.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (19 samples, 0.59%)</title><rect x="540" y="324" width="7" height="15" fill="rgb(208,185,21)"/><text x="543.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (16 samples, 0.50%)</title><rect x="541" y="340" width="6" height="15" fill="rgb(222,96,43)"/><text x="544.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (6 samples, 0.19%)</title><rect x="545" y="356" width="2" height="15" fill="rgb(251,158,41)"/><text x="548.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:537) (3 samples, 0.09%)</title><rect x="548" y="324" width="1" height="15" fill="rgb(221,224,27)"/><text x="551.00" y="334.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (27 samples, 0.84%)</title><rect x="549" y="324" width="10" height="15" fill="rgb(219,22,43)"/><text x="552.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py:2042) (5 samples, 0.15%)</title><rect x="557" y="340" width="2" height="15" fill="rgb(215,46,25)"/><text x="560.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:234) (4 samples, 0.12%)</title><rect x="563" y="340" width="2" height="15" fill="rgb(244,40,52)"/><text x="566.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (3 samples, 0.09%)</title><rect x="565" y="340" width="1" height="15" fill="rgb(205,44,2)"/><text x="568.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (15 samples, 0.46%)</title><rect x="571" y="356" width="5" height="15" fill="rgb(209,14,19)"/><text x="574.00" y="366.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (11 samples, 0.34%)</title><rect x="576" y="356" width="5" height="15" fill="rgb(236,52,38)"/><text x="579.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (14 samples, 0.43%)</title><rect x="602" y="388" width="5" height="15" fill="rgb(246,8,11)"/><text x="605.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (55 samples, 1.70%)</title><rect x="595" y="372" width="20" height="15" fill="rgb(248,107,32)"/><text x="598.00" y="382.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (21 samples, 0.65%)</title><rect x="607" y="388" width="8" height="15" fill="rgb(208,44,18)"/><text x="610.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (13 samples, 0.40%)</title><rect x="615" y="372" width="5" height="15" fill="rgb(248,17,6)"/><text x="618.00" y="382.50"></text></g><g><title>0x7f00d0bc8e7a (libc-2.29.so) (3 samples, 0.09%)</title><rect x="633" y="452" width="1" height="15" fill="rgb(220,163,44)"/><text x="636.00" y="462.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (21 samples, 0.65%)</title><rect x="630" y="420" width="7" height="15" fill="rgb(243,191,15)"/><text x="633.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (21 samples, 0.65%)</title><rect x="630" y="436" width="7" height="15" fill="rgb(237,202,20)"/><text x="633.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (8 samples, 0.25%)</title><rect x="635" y="452" width="2" height="15" fill="rgb(233,170,7)"/><text x="638.00" y="462.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (26 samples, 0.80%)</title><rect x="629" y="388" width="10" height="15" fill="rgb(237,62,4)"/><text x="632.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (26 samples, 0.80%)</title><rect x="629" y="404" width="10" height="15" fill="rgb(223,170,26)"/><text x="632.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (4 samples, 0.12%)</title><rect x="637" y="420" width="2" height="15" fill="rgb(230,163,27)"/><text x="640.00" y="430.50"></text></g><g><title>unicode_eq (python3.7) (8 samples, 0.25%)</title><rect x="650" y="420" width="3" height="15" fill="rgb(210,16,13)"/><text x="653.00" y="430.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (39 samples, 1.21%)</title><rect x="641" y="404" width="14" height="15" fill="rgb(213,129,23)"/><text x="644.00" y="414.50"></text></g><g><title>unicode_hash (python3.7) (5 samples, 0.15%)</title><rect x="653" y="420" width="2" height="15" fill="rgb(213,223,22)"/><text x="656.00" y="430.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (9 samples, 0.28%)</title><rect x="656" y="452" width="4" height="15" fill="rgb(231,103,16)"/><text x="659.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4564) (14 samples, 0.43%)</title><rect x="656" y="404" width="5" height="15" fill="rgb(233,68,19)"/><text x="659.00" y="414.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (13 samples, 0.40%)</title><rect x="656" y="420" width="5" height="15" fill="rgb(205,213,53)"/><text x="659.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (13 samples, 0.40%)</title><rect x="656" y="436" width="5" height="15" fill="rgb(250,88,39)"/><text x="659.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:872) (3 samples, 0.09%)</title><rect x="660" y="452" width="1" height="15" fill="rgb(239,57,17)"/><text x="663.00" y="462.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3419) (6 samples, 0.19%)</title><rect x="663" y="436" width="3" height="15" fill="rgb(235,12,42)"/><text x="666.00" y="446.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2194) (4 samples, 0.12%)</title><rect x="670" y="468" width="2" height="15" fill="rgb(208,61,47)"/><text x="673.00" y="478.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (23 samples, 0.71%)</title><rect x="666" y="436" width="8" height="15" fill="rgb(211,21,10)"/><text x="669.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (16 samples, 0.50%)</title><rect x="668" y="452" width="6" height="15" fill="rgb(239,169,11)"/><text x="671.00" y="462.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (33 samples, 1.02%)</title><rect x="663" y="420" width="12" height="15" fill="rgb(207,88,21)"/><text x="666.00" y="430.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3447) (4 samples, 0.12%)</title><rect x="674" y="436" width="1" height="15" fill="rgb(218,142,32)"/><text x="677.00" y="446.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c:1477) (3 samples, 0.09%)</title><rect x="674" y="452" width="1" height="15" fill="rgb(205,216,42)"/><text x="677.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (12 samples, 0.37%)</title><rect x="677" y="468" width="5" height="15" fill="rgb(240,229,27)"/><text x="680.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (6 samples, 0.19%)</title><rect x="680" y="484" width="2" height="15" fill="rgb(236,105,38)"/><text x="683.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (9 samples, 0.28%)</title><rect x="683" y="500" width="3" height="15" fill="rgb(241,212,52)"/><text x="686.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (9 samples, 0.28%)</title><rect x="683" y="516" width="3" height="15" fill="rgb(250,1,43)"/><text x="686.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (8 samples, 0.25%)</title><rect x="683" y="532" width="3" height="15" fill="rgb(232,37,51)"/><text x="686.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.22%)</title><rect x="684" y="548" width="2" height="15" fill="rgb(230,14,30)"/><text x="687.00" y="558.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (8 samples, 0.25%)</title><rect x="686" y="532" width="3" height="15" fill="rgb(252,180,28)"/><text x="689.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (8 samples, 0.25%)</title><rect x="686" y="548" width="3" height="15" fill="rgb(227,63,40)"/><text x="689.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.22%)</title><rect x="687" y="564" width="2" height="15" fill="rgb(235,31,42)"/><text x="690.00" y="574.50"></text></g><g><title>0x7f00d0bb4700 (libc-2.29.so) (3 samples, 0.09%)</title><rect x="688" y="580" width="1" height="15" fill="rgb(226,40,35)"/><text x="691.00" y="590.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (13 samples, 0.40%)</title><rect x="686" y="500" width="5" height="15" fill="rgb(225,105,46)"/><text x="689.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (13 samples, 0.40%)</title><rect x="686" y="516" width="5" height="15" fill="rgb(243,79,47)"/><text x="689.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (4 samples, 0.12%)</title><rect x="689" y="532" width="2" height="15" fill="rgb(207,101,18)"/><text x="692.00" y="542.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (40 samples, 1.24%)</title><rect x="677" y="436" width="14" height="15" fill="rgb(207,188,49)"/><text x="680.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (40 samples, 1.24%)</title><rect x="677" y="452" width="14" height="15" fill="rgb(247,148,43)"/><text x="680.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (25 samples, 0.77%)</title><rect x="682" y="468" width="9" height="15" fill="rgb(243,9,11)"/><text x="685.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (24 samples, 0.74%)</title><rect x="682" y="484" width="9" height="15" fill="rgb(234,99,37)"/><text x="685.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:415) (4 samples, 0.12%)</title><rect x="693" y="452" width="1" height="15" fill="rgb(239,20,37)"/><text x="696.00" y="462.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:57) (5 samples, 0.15%)</title><rect x="697" y="484" width="2" height="15" fill="rgb(214,199,12)"/><text x="700.00" y="494.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c:741) (4 samples, 0.12%)</title><rect x="699" y="500" width="1" height="15" fill="rgb(243,189,45)"/><text x="702.00" y="510.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (7 samples, 0.22%)</title><rect x="699" y="484" width="2" height="15" fill="rgb(212,112,31)"/><text x="702.00" y="494.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (29 samples, 0.90%)</title><rect x="692" y="436" width="11" height="15" fill="rgb(236,149,36)"/><text x="695.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (21 samples, 0.65%)</title><rect x="695" y="452" width="8" height="15" fill="rgb(207,204,54)"/><text x="698.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (19 samples, 0.59%)</title><rect x="696" y="468" width="7" height="15" fill="rgb(214,19,17)"/><text x="699.00" y="478.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c:1104) (4 samples, 0.12%)</title><rect x="706" y="484" width="1" height="15" fill="rgb(251,9,51)"/><text x="709.00" y="494.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (12 samples, 0.37%)</title><rect x="704" y="452" width="4" height="15" fill="rgb(211,71,3)"/><text x="707.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (8 samples, 0.25%)</title><rect x="705" y="468" width="3" height="15" fill="rgb(206,202,9)"/><text x="708.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (4 samples, 0.12%)</title><rect x="709" y="452" width="2" height="15" fill="rgb(220,59,26)"/><text x="712.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:319) (4 samples, 0.12%)</title><rect x="712" y="452" width="1" height="15" fill="rgb(219,38,27)"/><text x="715.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (4 samples, 0.12%)</title><rect x="713" y="452" width="2" height="15" fill="rgb(218,81,21)"/><text x="716.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (3 samples, 0.09%)</title><rect x="716" y="452" width="1" height="15" fill="rgb(232,65,50)"/><text x="719.00" y="462.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2131) (3 samples, 0.09%)</title><rect x="718" y="468" width="1" height="15" fill="rgb(243,116,5)"/><text x="721.00" y="478.50"></text></g><g><title>npyiter_checkreducesize (nditer_api.c:2599) (3 samples, 0.09%)</title><rect x="718" y="484" width="1" height="15" fill="rgb(240,5,16)"/><text x="721.00" y="494.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (10 samples, 0.31%)</title><rect x="717" y="452" width="3" height="15" fill="rgb(228,123,38)"/><text x="720.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (50 samples, 1.55%)</title><rect x="703" y="436" width="18" height="15" fill="rgb(217,204,21)"/><text x="706.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (6 samples, 0.19%)</title><rect x="725" y="452" width="2" height="15" fill="rgb(223,103,4)"/><text x="728.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:255) (3 samples, 0.09%)</title><rect x="726" y="468" width="1" height="15" fill="rgb(227,40,1)"/><text x="729.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (11 samples, 0.34%)</title><rect x="724" y="436" width="4" height="15" fill="rgb(212,129,36)"/><text x="727.00" y="446.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (5 samples, 0.15%)</title><rect x="728" y="452" width="2" height="15" fill="rgb(228,141,1)"/><text x="731.00" y="462.50"></text></g><g><title>free (libc-2.29.so) (3 samples, 0.09%)</title><rect x="729" y="468" width="1" height="15" fill="rgb(243,102,7)"/><text x="732.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (10 samples, 0.31%)</title><rect x="728" y="436" width="4" height="15" fill="rgb(246,177,51)"/><text x="731.00" y="446.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (3 samples, 0.09%)</title><rect x="731" y="452" width="1" height="15" fill="rgb(221,34,45)"/><text x="734.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:595) (3 samples, 0.09%)</title><rect x="732" y="436" width="1" height="15" fill="rgb(238,18,46)"/><text x="735.00" y="446.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (193 samples, 5.98%)</title><rect x="663" y="404" width="70" height="15" fill="rgb(238,88,13)"/><text x="666.00" y="414.50">PyUFunc..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (157 samples, 4.86%)</title><rect x="676" y="420" width="57" height="15" fill="rgb(225,130,49)"/><text x="679.00" y="430.50">PyUFun..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (460 samples, 14.24%)</title><rect x="566" y="340" width="168" height="15" fill="rgb(245,197,48)"/><text x="569.00" y="350.50">array_implement_array..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (420 samples, 13.00%)</title><rect x="581" y="356" width="153" height="15" fill="rgb(217,179,19)"/><text x="584.00" y="366.50">sum (numpy/core/fro..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (313 samples, 9.69%)</title><rect x="620" y="372" width="114" height="15" fill="rgb(242,224,12)"/><text x="623.00" y="382.50">_wrapreduction..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (260 samples, 8.05%)</title><rect x="639" y="388" width="95" height="15" fill="rgb(225,181,8)"/><text x="642.00" y="398.50">ufunc_reduc..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (859 samples, 26.59%)</title><rect x="421" y="292" width="314" height="15" fill="rgb(238,171,30)"/><text x="424.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py:269)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (569 samples, 17.62%)</title><rect x="527" y="308" width="208" height="15" fill="rgb(229,229,0)"/><text x="530.00" y="318.50">_run (mlprodict/onnxrt/ops_..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (478 samples, 14.80%)</title><rect x="560" y="324" width="175" height="15" fill="rgb(224,139,2)"/><text x="563.00" y="334.50">sum (&lt;__array_function..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (908 samples, 28.11%)</title><rect x="404" y="276" width="331" height="15" fill="rgb(221,144,25)"/><text x="407.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py:348)</text></g><g><title>arraydescr_richcompare (descriptor.c:3210) (7 samples, 0.22%)</title><rect x="750" y="292" width="3" height="15" fill="rgb(234,187,52)"/><text x="753.00" y="302.50"></text></g><g><title>arraydescr_richcompare (descriptor.c:3248) (3 samples, 0.09%)</title><rect x="754" y="292" width="1" height="15" fill="rgb(234,108,30)"/><text x="757.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (55 samples, 1.70%)</title><rect x="735" y="276" width="20" height="15" fill="rgb(217,219,43)"/><text x="738.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:353) (3 samples, 0.09%)</title><rect x="755" y="276" width="2" height="15" fill="rgb(229,215,3)"/><text x="758.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (7 samples, 0.22%)</title><rect x="761" y="292" width="3" height="15" fill="rgb(236,225,3)"/><text x="764.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:519) (7 samples, 0.22%)</title><rect x="765" y="308" width="3" height="15" fill="rgb(230,74,44)"/><text x="768.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:527) (7 samples, 0.22%)</title><rect x="768" y="308" width="2" height="15" fill="rgb(253,122,14)"/><text x="771.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:431) (3 samples, 0.09%)</title><rect x="775" y="340" width="1" height="15" fill="rgb(233,50,47)"/><text x="778.00" y="350.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (4 samples, 0.12%)</title><rect x="776" y="340" width="1" height="15" fill="rgb(231,34,17)"/><text x="779.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (9 samples, 0.28%)</title><rect x="774" y="324" width="4" height="15" fill="rgb(218,17,52)"/><text x="777.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (6 samples, 0.19%)</title><rect x="780" y="340" width="2" height="15" fill="rgb(234,108,2)"/><text x="783.00" y="350.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (6 samples, 0.19%)</title><rect x="783" y="372" width="2" height="15" fill="rgb(207,43,41)"/><text x="786.00" y="382.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c:237) (3 samples, 0.09%)</title><rect x="785" y="388" width="1" height="15" fill="rgb(215,83,18)"/><text x="788.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (12 samples, 0.37%)</title><rect x="782" y="340" width="5" height="15" fill="rgb(245,205,9)"/><text x="785.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (10 samples, 0.31%)</title><rect x="783" y="356" width="4" height="15" fill="rgb(208,168,1)"/><text x="786.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:563) (4 samples, 0.12%)</title><rect x="785" y="372" width="2" height="15" fill="rgb(242,4,16)"/><text x="788.00" y="382.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c:1962) (4 samples, 0.12%)</title><rect x="788" y="356" width="1" height="15" fill="rgb(228,83,4)"/><text x="791.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3215) (7 samples, 0.22%)</title><rect x="787" y="340" width="2" height="15" fill="rgb(250,46,43)"/><text x="790.00" y="350.50"></text></g><g><title>_find_array_prepare (ufunc_object.c:272) (3 samples, 0.09%)</title><rect x="789" y="356" width="2" height="15" fill="rgb(215,182,50)"/><text x="792.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (8 samples, 0.25%)</title><rect x="789" y="340" width="3" height="15" fill="rgb(207,154,21)"/><text x="792.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1616) (3 samples, 0.09%)</title><rect x="793" y="356" width="1" height="15" fill="rgb(249,208,12)"/><text x="796.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (13 samples, 0.40%)</title><rect x="796" y="388" width="5" height="15" fill="rgb(212,207,39)"/><text x="799.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (11 samples, 0.34%)</title><rect x="797" y="404" width="4" height="15" fill="rgb(228,76,9)"/><text x="800.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (10 samples, 0.31%)</title><rect x="802" y="388" width="4" height="15" fill="rgb(206,219,28)"/><text x="805.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (8 samples, 0.25%)</title><rect x="803" y="404" width="3" height="15" fill="rgb(240,100,36)"/><text x="806.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (8 samples, 0.25%)</title><rect x="806" y="388" width="2" height="15" fill="rgb(210,15,47)"/><text x="809.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (5 samples, 0.15%)</title><rect x="812" y="452" width="2" height="15" fill="rgb(212,76,16)"/><text x="815.00" y="462.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (3 samples, 0.09%)</title><rect x="813" y="468" width="1" height="15" fill="rgb(254,55,12)"/><text x="816.00" y="478.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (14 samples, 0.43%)</title><rect x="811" y="404" width="6" height="15" fill="rgb(246,189,1)"/><text x="814.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (12 samples, 0.37%)</title><rect x="812" y="420" width="5" height="15" fill="rgb(213,167,20)"/><text x="815.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (11 samples, 0.34%)</title><rect x="812" y="436" width="5" height="15" fill="rgb(234,226,26)"/><text x="815.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (24 samples, 0.74%)</title><rect x="810" y="388" width="9" height="15" fill="rgb(223,156,28)"/><text x="813.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (6 samples, 0.19%)</title><rect x="819" y="388" width="2" height="15" fill="rgb(236,3,24)"/><text x="822.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (75 samples, 2.32%)</title><rect x="795" y="372" width="27" height="15" fill="rgb(219,217,35)"/><text x="798.00" y="382.50">i..</text></g><g><title>iterator_loop (ufunc_object.c:1561) (9 samples, 0.28%)</title><rect x="824" y="372" width="3" height="15" fill="rgb(208,109,19)"/><text x="827.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (6 samples, 0.19%)</title><rect x="825" y="388" width="2" height="15" fill="rgb(213,106,33)"/><text x="828.00" y="398.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (3 samples, 0.09%)</title><rect x="828" y="388" width="1" height="15" fill="rgb(217,186,51)"/><text x="831.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (8 samples, 0.25%)</title><rect x="828" y="372" width="3" height="15" fill="rgb(251,9,44)"/><text x="831.00" y="382.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:309) (3 samples, 0.09%)</title><rect x="830" y="388" width="1" height="15" fill="rgb(242,146,11)"/><text x="833.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (103 samples, 3.19%)</title><rect x="795" y="356" width="38" height="15" fill="rgb(238,157,24)"/><text x="798.00" y="366.50">exe..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (5 samples, 0.15%)</title><rect x="831" y="372" width="2" height="15" fill="rgb(217,83,35)"/><text x="834.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (114 samples, 3.53%)</title><rect x="793" y="340" width="41" height="15" fill="rgb(213,104,9)"/><text x="796.00" y="350.50">PyU..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (4 samples, 0.12%)</title><rect x="833" y="356" width="1" height="15" fill="rgb(241,156,16)"/><text x="836.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (4 samples, 0.12%)</title><rect x="833" y="372" width="1" height="15" fill="rgb(249,202,24)"/><text x="836.00" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (4 samples, 0.12%)</title><rect x="833" y="388" width="1" height="15" fill="rgb(206,135,33)"/><text x="836.00" y="398.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (158 samples, 4.89%)</title><rect x="778" y="324" width="58" height="15" fill="rgb(251,124,26)"/><text x="781.00" y="334.50">ufunc_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (3 samples, 0.09%)</title><rect x="834" y="340" width="2" height="15" fill="rgb(250,63,31)"/><text x="837.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4751) (3 samples, 0.09%)</title><rect x="836" y="324" width="1" height="15" fill="rgb(209,74,37)"/><text x="839.00" y="334.50"></text></g><g><title>_find_array_wrap (ufunc_object.c:424) (5 samples, 0.15%)</title><rect x="837" y="340" width="1" height="15" fill="rgb(243,185,50)"/><text x="840.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4754) (7 samples, 0.22%)</title><rect x="837" y="324" width="2" height="15" fill="rgb(241,118,22)"/><text x="840.00" y="334.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (207 samples, 6.41%)</title><rect x="764" y="292" width="76" height="15" fill="rgb(247,211,14)"/><text x="767.00" y="302.50">run (mlp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (189 samples, 5.85%)</title><rect x="770" y="308" width="70" height="15" fill="rgb(244,44,27)"/><text x="773.00" y="318.50">_run (m..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (227 samples, 7.03%)</title><rect x="757" y="276" width="83" height="15" fill="rgb(243,217,44)"/><text x="760.00" y="286.50">run (mlpr..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,315 samples, 40.71%)</title><rect x="365" y="260" width="480" height="15" fill="rgb(236,81,21)"/><text x="368.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (14 samples, 0.43%)</title><rect x="840" y="276" width="5" height="15" fill="rgb(254,163,43)"/><text x="843.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (37 samples, 1.15%)</title><rect x="845" y="260" width="14" height="15" fill="rgb(229,188,44)"/><text x="848.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (47 samples, 1.46%)</title><rect x="859" y="260" width="17" height="15" fill="rgb(235,145,35)"/><text x="862.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (9 samples, 0.28%)</title><rect x="876" y="260" width="3" height="15" fill="rgb(224,126,12)"/><text x="879.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (103 samples, 3.19%)</title><rect x="879" y="260" width="38" height="15" fill="rgb(228,42,4)"/><text x="882.00" y="270.50">run..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,858 samples, 57.52%)</title><rect x="250" y="244" width="679" height="15" fill="rgb(245,166,33)"/><text x="253.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (33 samples, 1.02%)</title><rect x="917" y="260" width="12" height="15" fill="rgb(249,149,31)"/><text x="920.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (52 samples, 1.61%)</title><rect x="929" y="244" width="19" height="15" fill="rgb(240,96,25)"/><text x="932.00" y="254.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (28 samples, 0.87%)</title><rect x="938" y="260" width="10" height="15" fill="rgb(212,158,19)"/><text x="941.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:546) (6 samples, 0.19%)</title><rect x="948" y="244" width="3" height="15" fill="rgb(223,165,50)"/><text x="951.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (2,106 samples, 65.20%)</title><rect x="183" y="212" width="769" height="15" fill="rgb(234,168,49)"/><text x="186.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,040 samples, 63.16%)</title><rect x="207" y="228" width="745" height="15" fill="rgb(253,79,28)"/><text x="210.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>array_dealloc (arrayobject.c:476) (4 samples, 0.12%)</title><rect x="951" y="244" width="1" height="15" fill="rgb(253,157,10)"/><text x="954.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (4 samples, 0.12%)</title><rect x="951" y="260" width="1" height="15" fill="rgb(208,84,39)"/><text x="954.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (37 samples, 1.15%)</title><rect x="952" y="212" width="14" height="15" fill="rgb(222,174,13)"/><text x="955.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (15 samples, 0.46%)</title><rect x="960" y="228" width="6" height="15" fill="rgb(207,210,21)"/><text x="963.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (20 samples, 0.62%)</title><rect x="966" y="212" width="7" height="15" fill="rgb(234,137,49)"/><text x="969.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (20 samples, 0.62%)</title><rect x="987" y="228" width="7" height="15" fill="rgb(229,162,0)"/><text x="990.00" y="238.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py:509) (5 samples, 0.15%)</title><rect x="992" y="244" width="2" height="15" fill="rgb(231,193,9)"/><text x="995.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (3 samples, 0.09%)</title><rect x="1000" y="244" width="1" height="15" fill="rgb(247,116,29)"/><text x="1003.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (18 samples, 0.56%)</title><rect x="1006" y="260" width="6" height="15" fill="rgb(210,41,1)"/><text x="1009.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (22 samples, 0.68%)</title><rect x="1017" y="276" width="8" height="15" fill="rgb(240,46,42)"/><text x="1020.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (35 samples, 1.08%)</title><rect x="1012" y="260" width="13" height="15" fill="rgb(235,176,10)"/><text x="1015.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:576) (3 samples, 0.09%)</title><rect x="1025" y="260" width="1" height="15" fill="rgb(231,225,0)"/><text x="1028.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (12 samples, 0.37%)</title><rect x="1026" y="260" width="5" height="15" fill="rgb(205,185,41)"/><text x="1029.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:583) (6 samples, 0.19%)</title><rect x="1031" y="260" width="2" height="15" fill="rgb(237,115,49)"/><text x="1034.00" y="270.50"></text></g><g><title>array_reshape (methods.c:179) (3 samples, 0.09%)</title><rect x="1045" y="276" width="1" height="15" fill="rgb(247,101,47)"/><text x="1048.00" y="286.50"></text></g><g><title>array_reshape (methods.c:186) (11 samples, 0.34%)</title><rect x="1046" y="276" width="4" height="15" fill="rgb(229,91,46)"/><text x="1049.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:53) (10 samples, 0.31%)</title><rect x="1046" y="292" width="4" height="15" fill="rgb(249,54,53)"/><text x="1049.00" y="302.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (3 samples, 0.09%)</title><rect x="1054" y="340" width="1" height="15" fill="rgb(214,146,15)"/><text x="1057.00" y="350.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (5 samples, 0.15%)</title><rect x="1054" y="292" width="1" height="15" fill="rgb(252,7,18)"/><text x="1057.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c:958) (4 samples, 0.12%)</title><rect x="1054" y="308" width="1" height="15" fill="rgb(252,219,49)"/><text x="1057.00" y="318.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c:909) (4 samples, 0.12%)</title><rect x="1054" y="324" width="1" height="15" fill="rgb(239,209,29)"/><text x="1057.00" y="334.50"></text></g><g><title>array_reshape (methods.c:195) (16 samples, 0.50%)</title><rect x="1050" y="276" width="6" height="15" fill="rgb(236,50,52)"/><text x="1053.00" y="286.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (3 samples, 0.09%)</title><rect x="1057" y="340" width="1" height="15" fill="rgb(214,202,29)"/><text x="1060.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (6 samples, 0.19%)</title><rect x="1057" y="324" width="2" height="15" fill="rgb(252,190,34)"/><text x="1060.00" y="334.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (14 samples, 0.43%)</title><rect x="1057" y="308" width="5" height="15" fill="rgb(237,206,43)"/><text x="1060.00" y="318.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (168 samples, 5.20%)</title><rect x="1001" y="244" width="61" height="15" fill="rgb(249,104,20)"/><text x="1004.00" y="254.50">array_..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (80 samples, 2.48%)</title><rect x="1033" y="260" width="29" height="15" fill="rgb(214,60,21)"/><text x="1036.00" y="270.50">ex..</text></g><g><title>array_reshape (methods.c:210) (17 samples, 0.53%)</title><rect x="1056" y="276" width="6" height="15" fill="rgb(210,125,0)"/><text x="1059.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (17 samples, 0.53%)</title><rect x="1056" y="292" width="6" height="15" fill="rgb(242,84,5)"/><text x="1059.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (186 samples, 5.76%)</title><rect x="994" y="228" width="68" height="15" fill="rgb(248,70,23)"/><text x="997.00" y="238.50">expand_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (245 samples, 7.59%)</title><rect x="973" y="212" width="90" height="15" fill="rgb(237,155,28)"/><text x="976.00" y="222.50">_run (mlpr..</text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (12 samples, 0.37%)</title><rect x="1063" y="308" width="5" height="15" fill="rgb(236,140,6)"/><text x="1066.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (9 samples, 0.28%)</title><rect x="1065" y="324" width="3" height="15" fill="rgb(209,182,32)"/><text x="1068.00" y="334.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (20 samples, 0.62%)</title><rect x="1063" y="260" width="7" height="15" fill="rgb(230,149,54)"/><text x="1066.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (20 samples, 0.62%)</title><rect x="1063" y="276" width="7" height="15" fill="rgb(216,12,18)"/><text x="1066.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (20 samples, 0.62%)</title><rect x="1063" y="292" width="7" height="15" fill="rgb(208,176,41)"/><text x="1066.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:129) (3 samples, 0.09%)</title><rect x="1069" y="308" width="1" height="15" fill="rgb(244,154,22)"/><text x="1072.00" y="318.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c:767) (3 samples, 0.09%)</title><rect x="1071" y="388" width="1" height="15" fill="rgb(215,52,8)"/><text x="1074.00" y="398.50"></text></g><g><title>get_array_memory_extents (mem_overlap.c:698) (3 samples, 0.09%)</title><rect x="1071" y="404" width="1" height="15" fill="rgb(220,142,3)"/><text x="1074.00" y="414.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:333) (4 samples, 0.12%)</title><rect x="1071" y="356" width="2" height="15" fill="rgb(206,151,52)"/><text x="1074.00" y="366.50"></text></g><g><title>arrays_overlap (array_assign.c:162) (4 samples, 0.12%)</title><rect x="1071" y="372" width="2" height="15" fill="rgb(253,3,30)"/><text x="1074.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (4 samples, 0.12%)</title><rect x="1073" y="372" width="1" height="15" fill="rgb(243,90,46)"/><text x="1076.00" y="382.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (17 samples, 0.53%)</title><rect x="1071" y="340" width="6" height="15" fill="rgb(241,182,20)"/><text x="1074.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (13 samples, 0.40%)</title><rect x="1073" y="356" width="4" height="15" fill="rgb(213,164,13)"/><text x="1076.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (4 samples, 0.12%)</title><rect x="1076" y="372" width="1" height="15" fill="rgb(243,79,27)"/><text x="1079.00" y="382.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:4001) (3 samples, 0.09%)</title><rect x="1076" y="388" width="1" height="15" fill="rgb(235,149,48)"/><text x="1079.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (41 samples, 1.27%)</title><rect x="1063" y="212" width="15" height="15" fill="rgb(216,151,20)"/><text x="1066.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (40 samples, 1.24%)</title><rect x="1063" y="228" width="15" height="15" fill="rgb(250,179,32)"/><text x="1066.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (40 samples, 1.24%)</title><rect x="1063" y="244" width="15" height="15" fill="rgb(245,192,33)"/><text x="1066.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (20 samples, 0.62%)</title><rect x="1070" y="260" width="8" height="15" fill="rgb(209,170,42)"/><text x="1073.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (20 samples, 0.62%)</title><rect x="1070" y="276" width="8" height="15" fill="rgb(252,207,49)"/><text x="1073.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (19 samples, 0.59%)</title><rect x="1071" y="292" width="7" height="15" fill="rgb(210,200,52)"/><text x="1074.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (19 samples, 0.59%)</title><rect x="1071" y="308" width="7" height="15" fill="rgb(219,185,46)"/><text x="1074.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (18 samples, 0.56%)</title><rect x="1071" y="324" width="7" height="15" fill="rgb(205,151,3)"/><text x="1074.00" y="334.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:26) (3 samples, 0.09%)</title><rect x="1079" y="244" width="1" height="15" fill="rgb(210,30,7)"/><text x="1082.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (7 samples, 0.22%)</title><rect x="1081" y="260" width="2" height="15" fill="rgb(241,32,4)"/><text x="1084.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.15%)</title><rect x="1081" y="276" width="2" height="15" fill="rgb(233,58,6)"/><text x="1084.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (5 samples, 0.15%)</title><rect x="1081" y="292" width="2" height="15" fill="rgb(228,182,11)"/><text x="1084.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (5 samples, 0.15%)</title><rect x="1081" y="308" width="2" height="15" fill="rgb(235,179,31)"/><text x="1084.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (3 samples, 0.09%)</title><rect x="1082" y="324" width="1" height="15" fill="rgb(227,215,7)"/><text x="1085.00" y="334.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (9 samples, 0.28%)</title><rect x="1080" y="244" width="4" height="15" fill="rgb(251,73,40)"/><text x="1083.00" y="254.50"></text></g><g><title>array_argsort (methods.c:1360) (3 samples, 0.09%)</title><rect x="1085" y="324" width="1" height="15" fill="rgb(249,89,31)"/><text x="1088.00" y="334.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;:6) (9 samples, 0.28%)</title><rect x="1084" y="260" width="3" height="15" fill="rgb(243,153,21)"/><text x="1087.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.22%)</title><rect x="1084" y="276" width="3" height="15" fill="rgb(250,107,47)"/><text x="1087.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py:1084) (7 samples, 0.22%)</title><rect x="1084" y="292" width="3" height="15" fill="rgb(213,45,12)"/><text x="1087.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (5 samples, 0.15%)</title><rect x="1085" y="308" width="2" height="15" fill="rgb(242,163,42)"/><text x="1088.00" y="318.50"></text></g><g><title>array_subscript (mapping.c:1656) (3 samples, 0.09%)</title><rect x="1087" y="260" width="1" height="15" fill="rgb(247,169,12)"/><text x="1090.00" y="270.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (28 samples, 0.87%)</title><rect x="1078" y="228" width="11" height="15" fill="rgb(237,52,54)"/><text x="1081.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (14 samples, 0.43%)</title><rect x="1084" y="244" width="5" height="15" fill="rgb(210,164,46)"/><text x="1087.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (31 samples, 0.96%)</title><rect x="1078" y="212" width="11" height="15" fill="rgb(252,81,13)"/><text x="1081.00" y="222.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (3 samples, 0.09%)</title><rect x="1089" y="244" width="1" height="15" fill="rgb(235,8,23)"/><text x="1092.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (5 samples, 0.15%)</title><rect x="1089" y="212" width="2" height="15" fill="rgb(232,59,43)"/><text x="1092.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (5 samples, 0.15%)</title><rect x="1089" y="228" width="2" height="15" fill="rgb(221,205,28)"/><text x="1092.00" y="238.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (3 samples, 0.09%)</title><rect x="1091" y="260" width="1" height="15" fill="rgb(228,89,53)"/><text x="1094.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (6 samples, 0.19%)</title><rect x="1091" y="228" width="2" height="15" fill="rgb(224,222,41)"/><text x="1094.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (6 samples, 0.19%)</title><rect x="1091" y="244" width="2" height="15" fill="rgb(221,98,34)"/><text x="1094.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (3 samples, 0.09%)</title><rect x="1092" y="260" width="1" height="15" fill="rgb(220,109,7)"/><text x="1095.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (2,628 samples, 81.36%)</title><rect x="135" y="196" width="960" height="15" fill="rgb(227,76,24)"/><text x="138.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>array_dealloc (arrayobject.c:520) (10 samples, 0.31%)</title><rect x="1091" y="212" width="4" height="15" fill="rgb(218,107,49)"/><text x="1094.00" y="222.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4520) (3 samples, 0.09%)</title><rect x="1097" y="308" width="1" height="15" fill="rgb(225,144,23)"/><text x="1100.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (3 samples, 0.09%)</title><rect x="1097" y="324" width="1" height="15" fill="rgb(247,23,6)"/><text x="1100.00" y="334.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (10 samples, 0.31%)</title><rect x="1095" y="196" width="4" height="15" fill="rgb(254,28,10)"/><text x="1098.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py:24) (9 samples, 0.28%)</title><rect x="1095" y="212" width="4" height="15" fill="rgb(217,78,47)"/><text x="1098.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:6) (8 samples, 0.25%)</title><rect x="1096" y="228" width="3" height="15" fill="rgb(235,103,19)"/><text x="1099.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 0.25%)</title><rect x="1096" y="244" width="3" height="15" fill="rgb(211,74,5)"/><text x="1099.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py:2911) (8 samples, 0.25%)</title><rect x="1096" y="260" width="3" height="15" fill="rgb(205,4,42)"/><text x="1099.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (6 samples, 0.19%)</title><rect x="1096" y="276" width="3" height="15" fill="rgb(236,167,47)"/><text x="1099.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (6 samples, 0.19%)</title><rect x="1096" y="292" width="3" height="15" fill="rgb(239,202,51)"/><text x="1099.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:312) (4 samples, 0.12%)</title><rect x="1099" y="196" width="1" height="15" fill="rgb(226,118,27)"/><text x="1102.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (4 samples, 0.12%)</title><rect x="1099" y="212" width="1" height="15" fill="rgb(232,49,15)"/><text x="1102.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (3 samples, 0.09%)</title><rect x="1099" y="228" width="1" height="15" fill="rgb(239,134,45)"/><text x="1102.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (3 samples, 0.09%)</title><rect x="1099" y="244" width="1" height="15" fill="rgb(250,106,53)"/><text x="1102.00" y="254.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:13) (3 samples, 0.09%)</title><rect x="1099" y="260" width="1" height="15" fill="rgb(229,47,26)"/><text x="1102.00" y="270.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (3 samples, 0.09%)</title><rect x="1099" y="276" width="1" height="15" fill="rgb(213,31,43)"/><text x="1102.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.09%)</title><rect x="1099" y="292" width="1" height="15" fill="rgb(249,31,34)"/><text x="1102.00" y="302.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py:1153) (3 samples, 0.09%)</title><rect x="1099" y="308" width="1" height="15" fill="rgb(216,66,27)"/><text x="1102.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.09%)</title><rect x="1099" y="324" width="1" height="15" fill="rgb(222,161,15)"/><text x="1102.00" y="334.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (3 samples, 0.09%)</title><rect x="1105" y="324" width="2" height="15" fill="rgb(215,28,23)"/><text x="1108.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (3 samples, 0.09%)</title><rect x="1105" y="340" width="2" height="15" fill="rgb(225,162,40)"/><text x="1108.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (17 samples, 0.53%)</title><rect x="1101" y="228" width="6" height="15" fill="rgb(240,43,23)"/><text x="1104.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (13 samples, 0.40%)</title><rect x="1102" y="244" width="5" height="15" fill="rgb(211,86,17)"/><text x="1105.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (13 samples, 0.40%)</title><rect x="1102" y="260" width="5" height="15" fill="rgb(239,165,9)"/><text x="1105.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (12 samples, 0.37%)</title><rect x="1103" y="276" width="4" height="15" fill="rgb(239,128,40)"/><text x="1106.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (6 samples, 0.19%)</title><rect x="1105" y="292" width="2" height="15" fill="rgb(226,62,28)"/><text x="1108.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (5 samples, 0.15%)</title><rect x="1105" y="308" width="2" height="15" fill="rgb(232,20,20)"/><text x="1108.00" y="318.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (20 samples, 0.62%)</title><rect x="1100" y="196" width="7" height="15" fill="rgb(223,5,27)"/><text x="1103.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (19 samples, 0.59%)</title><rect x="1100" y="212" width="7" height="15" fill="rgb(220,162,33)"/><text x="1103.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (4 samples, 0.12%)</title><rect x="1107" y="196" width="2" height="15" fill="rgb(246,96,0)"/><text x="1110.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_equal.py:17) (4 samples, 0.12%)</title><rect x="1107" y="212" width="2" height="15" fill="rgb(218,189,42)"/><text x="1110.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.09%)</title><rect x="1108" y="228" width="1" height="15" fill="rgb(213,75,19)"/><text x="1111.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_div.py:18) (4 samples, 0.12%)</title><rect x="1109" y="228" width="1" height="15" fill="rgb(224,13,52)"/><text x="1112.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (2,683 samples, 83.07%)</title><rect x="131" y="180" width="980" height="15" fill="rgb(252,1,23)"/><text x="134.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (7 samples, 0.22%)</title><rect x="1109" y="196" width="2" height="15" fill="rgb(211,50,19)"/><text x="1112.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (7 samples, 0.22%)</title><rect x="1109" y="212" width="2" height="15" fill="rgb(240,20,22)"/><text x="1112.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_div.py:19) (3 samples, 0.09%)</title><rect x="1110" y="228" width="1" height="15" fill="rgb(228,65,30)"/><text x="1113.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (3 samples, 0.09%)</title><rect x="1112" y="180" width="1" height="15" fill="rgb(221,201,23)"/><text x="1115.00" y="190.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (6 samples, 0.19%)</title><rect x="1114" y="180" width="2" height="15" fill="rgb(236,125,18)"/><text x="1117.00" y="190.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (2,720 samples, 84.21%)</title><rect x="123" y="164" width="994" height="15" fill="rgb(215,10,22)"/><text x="126.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:45) (2,794 samples, 86.50%)</title><rect x="97" y="52" width="1021" height="15" fill="rgb(230,2,24)"/><text x="100.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:45)</text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:44) (2,794 samples, 86.50%)</title><rect x="97" y="68" width="1021" height="15" fill="rgb(243,182,10)"/><text x="100.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:44)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:29) (2,793 samples, 86.47%)</title><rect x="97" y="84" width="1021" height="15" fill="rgb(225,56,13)"/><text x="100.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:29)</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:23) (2,726 samples, 84.40%)</title><rect x="122" y="100" width="996" height="15" fill="rgb(214,199,5)"/><text x="125.00" y="110.50">profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:23)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (2,725 samples, 84.37%)</title><rect x="122" y="116" width="996" height="15" fill="rgb(247,192,37)"/><text x="125.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (2,725 samples, 84.37%)</title><rect x="122" y="132" width="996" height="15" fill="rgb(247,158,38)"/><text x="125.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,725 samples, 84.37%)</title><rect x="122" y="148" width="996" height="15" fill="rgb(254,113,14)"/><text x="125.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>onnxruntime::ReduceSum&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1122" y="340" width="1" height="15" fill="rgb(225,18,15)"/><text x="1125.00" y="350.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1127" y="388" width="2" height="15" fill="rgb(249,81,8)"/><text x="1130.00" y="398.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1128" y="404" width="1" height="15" fill="rgb(211,26,28)"/><text x="1131.00" y="414.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1128" y="420" width="1" height="15" fill="rgb(246,29,47)"/><text x="1131.00" y="430.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1129" y="388" width="2" height="15" fill="rgb(228,207,32)"/><text x="1132.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1129" y="404" width="2" height="15" fill="rgb(234,71,51)"/><text x="1132.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkIterFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1138" y="484" width="1" height="15" fill="rgb(216,190,41)"/><text x="1141.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.34%)</title><rect x="1137" y="468" width="4" height="15" fill="rgb(215,155,35)"/><text x="1140.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::SplitChunk (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1139" y="484" width="2" height="15" fill="rgb(237,99,4)"/><text x="1142.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.37%)</title><rect x="1137" y="452" width="4" height="15" fill="rgb(235,156,37)"/><text x="1140.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1141" y="452" width="1" height="15" fill="rgb(206,117,29)"/><text x="1144.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.22%)</title><rect x="1142" y="468" width="3" height="15" fill="rgb(221,129,26)"/><text x="1145.00" y="478.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1143" y="484" width="2" height="15" fill="rgb(237,198,38)"/><text x="1146.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="1142" y="452" width="3" height="15" fill="rgb(218,20,43)"/><text x="1145.00" y="462.50"></text></g><g><title>onnxruntime::SessionState::GetMemoryPatternGroup (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1145" y="452" width="1" height="15" fill="rgb(222,170,28)"/><text x="1148.00" y="462.50"></text></g><g><title>onnxruntime::OrtMutex::lock (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1145" y="468" width="1" height="15" fill="rgb(248,155,24)"/><text x="1148.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (37 samples, 1.15%)</title><rect x="1135" y="436" width="14" height="15" fill="rgb(248,117,24)"/><text x="1138.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::InsertFreeChunkIntoBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1150" y="516" width="1" height="15" fill="rgb(234,226,5)"/><text x="1153.00" y="526.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::_M_insert_unique&lt;unsigned long const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1150" y="532" width="1" height="15" fill="rgb(244,19,43)"/><text x="1153.00" y="542.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.25%)</title><rect x="1149" y="484" width="3" height="15" fill="rgb(225,37,11)"/><text x="1152.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.25%)</title><rect x="1149" y="500" width="3" height="15" fill="rgb(224,74,53)"/><text x="1152.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.40%)</title><rect x="1149" y="436" width="4" height="15" fill="rgb(241,156,32)"/><text x="1152.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.40%)</title><rect x="1149" y="452" width="4" height="15" fill="rgb(217,19,5)"/><text x="1152.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.37%)</title><rect x="1149" y="468" width="4" height="15" fill="rgb(218,47,50)"/><text x="1152.00" y="478.50"></text></g><g><title>onnxruntime::OrtMutex::lock (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1152" y="484" width="1" height="15" fill="rgb(214,179,16)"/><text x="1155.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1153" y="436" width="3" height="15" fill="rgb(239,128,10)"/><text x="1156.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1154" y="452" width="2" height="15" fill="rgb(236,2,51)"/><text x="1157.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1154" y="468" width="2" height="15" fill="rgb(232,162,1)"/><text x="1157.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1156" y="436" width="1" height="15" fill="rgb(237,212,40)"/><text x="1159.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1158" y="452" width="1" height="15" fill="rgb(235,180,39)"/><text x="1161.00" y="462.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.22%)</title><rect x="1157" y="436" width="3" height="15" fill="rgb(240,162,54)"/><text x="1160.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::OpKernelContext (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1160" y="436" width="1" height="15" fill="rgb(207,195,35)"/><text x="1163.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1168" y="516" width="2" height="15" fill="rgb(221,61,46)"/><text x="1171.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1168" y="532" width="2" height="15" fill="rgb(237,97,27)"/><text x="1171.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1168" y="548" width="2" height="15" fill="rgb(229,224,42)"/><text x="1171.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1169" y="564" width="1" height="15" fill="rgb(245,141,31)"/><text x="1172.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1169" y="580" width="1" height="15" fill="rgb(223,190,23)"/><text x="1172.00" y="590.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1169" y="596" width="1" height="15" fill="rgb(254,133,0)"/><text x="1172.00" y="606.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.25%)</title><rect x="1168" y="468" width="3" height="15" fill="rgb(241,207,44)"/><text x="1171.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.25%)</title><rect x="1168" y="484" width="3" height="15" fill="rgb(214,19,8)"/><text x="1171.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.22%)</title><rect x="1168" y="500" width="3" height="15" fill="rgb(224,117,38)"/><text x="1171.00" y="510.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1171" y="468" width="1" height="15" fill="rgb(243,10,48)"/><text x="1174.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (32 samples, 0.99%)</title><rect x="1161" y="436" width="12" height="15" fill="rgb(241,229,24)"/><text x="1164.00" y="446.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (30 samples, 0.93%)</title><rect x="1162" y="452" width="11" height="15" fill="rgb(218,185,26)"/><text x="1165.00" y="462.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1174" y="468" width="1" height="15" fill="rgb(223,76,25)"/><text x="1177.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.31%)</title><rect x="1177" y="468" width="3" height="15" fill="rgb(209,176,41)"/><text x="1180.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="1177" y="484" width="3" height="15" fill="rgb(209,70,35)"/><text x="1180.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="1177" y="500" width="3" height="15" fill="rgb(237,22,20)"/><text x="1180.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.22%)</title><rect x="1178" y="516" width="2" height="15" fill="rgb(253,47,20)"/><text x="1181.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1179" y="532" width="1" height="15" fill="rgb(231,179,54)"/><text x="1182.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1179" y="548" width="1" height="15" fill="rgb(238,188,13)"/><text x="1182.00" y="558.50"></text></g><g><title>onnxruntime::BroadcastIterator::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1181" y="500" width="2" height="15" fill="rgb(221,149,30)"/><text x="1184.00" y="510.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1183" y="500" width="1" height="15" fill="rgb(254,168,24)"/><text x="1186.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.09%)</title><rect x="1183" y="516" width="1" height="15" fill="rgb(247,144,23)"/><text x="1186.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.09%)</title><rect x="1183" y="532" width="1" height="15" fill="rgb(253,201,8)"/><text x="1186.00" y="542.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.46%)</title><rect x="1180" y="484" width="6" height="15" fill="rgb(247,223,23)"/><text x="1183.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1184" y="500" width="2" height="15" fill="rgb(211,227,24)"/><text x="1187.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.09%)</title><rect x="1185" y="516" width="1" height="15" fill="rgb(235,39,51)"/><text x="1188.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.09%)</title><rect x="1185" y="532" width="1" height="15" fill="rgb(210,225,23)"/><text x="1188.00" y="542.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (17 samples, 0.53%)</title><rect x="1180" y="468" width="7" height="15" fill="rgb(207,94,5)"/><text x="1183.00" y="478.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (151 samples, 4.67%)</title><rect x="1132" y="420" width="55" height="15" fill="rgb(249,125,19)"/><text x="1135.00" y="430.50">onnxr..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (39 samples, 1.21%)</title><rect x="1173" y="436" width="14" height="15" fill="rgb(241,102,45)"/><text x="1176.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (39 samples, 1.21%)</title><rect x="1173" y="452" width="14" height="15" fill="rgb(246,223,15)"/><text x="1176.00" y="462.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (175 samples, 5.42%)</title><rect x="1124" y="340" width="64" height="15" fill="rgb(249,100,29)"/><text x="1127.00" y="350.50">onnxrun..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (175 samples, 5.42%)</title><rect x="1124" y="356" width="64" height="15" fill="rgb(230,9,6)"/><text x="1127.00" y="366.50">onnxrun..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (173 samples, 5.36%)</title><rect x="1124" y="372" width="64" height="15" fill="rgb(252,128,41)"/><text x="1127.00" y="382.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (154 samples, 4.77%)</title><rect x="1131" y="388" width="57" height="15" fill="rgb(246,3,13)"/><text x="1134.00" y="398.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (154 samples, 4.77%)</title><rect x="1131" y="404" width="57" height="15" fill="rgb(248,93,19)"/><text x="1134.00" y="414.50">onnxru..</text></g><g><title>onnxruntime::TopK&lt;11, float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1188" y="340" width="1" height="15" fill="rgb(234,27,32)"/><text x="1191.00" y="350.50"></text></g><g><title>onnxruntime::TopKImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1188" y="356" width="1" height="15" fill="rgb(250,14,22)"/><text x="1191.00" y="366.50"></text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (192 samples, 5.94%)</title><rect x="1119" y="164" width="70" height="15" fill="rgb(233,97,54)"/><text x="1122.00" y="174.50">_run_wh..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (192 samples, 5.94%)</title><rect x="1119" y="180" width="70" height="15" fill="rgb(218,9,15)"/><text x="1122.00" y="190.50">run (ml..</text></g><g><title>run (onnxruntime/capi/session.py:136) (191 samples, 5.91%)</title><rect x="1119" y="196" width="70" height="15" fill="rgb(239,82,37)"/><text x="1122.00" y="206.50">run (on..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (191 samples, 5.91%)</title><rect x="1119" y="212" width="70" height="15" fill="rgb(222,124,45)"/><text x="1122.00" y="222.50">pybind1..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (190 samples, 5.88%)</title><rect x="1120" y="228" width="69" height="15" fill="rgb(235,104,35)"/><text x="1123.00" y="238.50">void py..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (189 samples, 5.85%)</title><rect x="1120" y="244" width="69" height="15" fill="rgb(205,201,3)"/><text x="1123.00" y="254.50">onnxrun..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (188 samples, 5.82%)</title><rect x="1120" y="260" width="69" height="15" fill="rgb(226,106,23)"/><text x="1123.00" y="270.50">onnxrun..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (188 samples, 5.82%)</title><rect x="1120" y="276" width="69" height="15" fill="rgb(227,31,10)"/><text x="1123.00" y="286.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (186 samples, 5.76%)</title><rect x="1121" y="292" width="68" height="15" fill="rgb(242,39,14)"/><text x="1124.00" y="302.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (186 samples, 5.76%)</title><rect x="1121" y="308" width="68" height="15" fill="rgb(212,219,25)"/><text x="1124.00" y="318.50">onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (186 samples, 5.76%)</title><rect x="1121" y="324" width="68" height="15" fill="rgb(213,21,37)"/><text x="1124.00" y="334.50">onnxrun..</text></g><g><title>all (3,230 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(220,153,28)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:52) (197 samples, 6.10%)</title><rect x="1118" y="52" width="72" height="15" fill="rgb(235,132,17)"/><text x="1121.00" y="62.50">&lt;module&gt;..</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:51) (197 samples, 6.10%)</title><rect x="1118" y="68" width="72" height="15" fill="rgb(240,10,45)"/><text x="1121.00" y="78.50">profile_..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:29) (197 samples, 6.10%)</title><rect x="1118" y="84" width="72" height="15" fill="rgb(231,95,8)"/><text x="1121.00" y="94.50">setup_pr..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_4_12_float_.py:23) (195 samples, 6.04%)</title><rect x="1118" y="100" width="72" height="15" fill="rgb(242,212,3)"/><text x="1121.00" y="110.50">profile ..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (195 samples, 6.04%)</title><rect x="1118" y="116" width="72" height="15" fill="rgb(217,1,45)"/><text x="1121.00" y="126.50">time_pre..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (195 samples, 6.04%)</title><rect x="1118" y="132" width="72" height="15" fill="rgb(244,91,42)"/><text x="1121.00" y="142.50">&lt;lambda&gt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (194 samples, 6.01%)</title><rect x="1119" y="148" width="71" height="15" fill="rgb(220,43,50)"/><text x="1122.00" y="158.50">run (mlp..</text></g></g></svg>