<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="950" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="933.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="933.00"> </text><g id="frames"><g><title>_build_master (pkg_resources/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(241,123,4)"/><text x="13.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(206,99,16)"/><text x="13.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (3 samples, 0.11%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(243,95,14)"/><text x="13.00" y="910.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (4 samples, 0.15%)</title><rect x="10" y="836" width="1" height="15" fill="rgb(216,119,10)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (4 samples, 0.15%)</title><rect x="10" y="852" width="1" height="15" fill="rgb(244,48,20)"/><text x="13.00" y="862.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="564" width="2" height="15" fill="rgb(231,135,24)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (5 samples, 0.18%)</title><rect x="10" y="580" width="2" height="15" fill="rgb(254,78,8)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="596" width="2" height="15" fill="rgb(218,150,31)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="612" width="2" height="15" fill="rgb(254,92,23)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="628" width="2" height="15" fill="rgb(230,75,2)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="644" width="2" height="15" fill="rgb(230,14,14)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="660" width="2" height="15" fill="rgb(218,155,28)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="676" width="2" height="15" fill="rgb(217,229,13)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.18%)</title><rect x="10" y="692" width="2" height="15" fill="rgb(241,169,7)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="708" width="2" height="15" fill="rgb(246,183,14)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (5 samples, 0.18%)</title><rect x="10" y="724" width="2" height="15" fill="rgb(229,203,47)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="740" width="2" height="15" fill="rgb(249,154,11)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="756" width="2" height="15" fill="rgb(246,141,20)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="772" width="2" height="15" fill="rgb(251,112,49)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.18%)</title><rect x="10" y="788" width="2" height="15" fill="rgb(212,174,14)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.18%)</title><rect x="10" y="804" width="2" height="15" fill="rgb(240,79,27)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (5 samples, 0.18%)</title><rect x="10" y="820" width="2" height="15" fill="rgb(211,38,49)"/><text x="13.00" y="830.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="196" width="2" height="15" fill="rgb(206,83,42)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="212" width="2" height="15" fill="rgb(221,118,48)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="228" width="2" height="15" fill="rgb(232,101,30)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="244" width="2" height="15" fill="rgb(237,36,48)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.22%)</title><rect x="10" y="260" width="2" height="15" fill="rgb(234,61,4)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="276" width="2" height="15" fill="rgb(206,19,33)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (6 samples, 0.22%)</title><rect x="10" y="292" width="2" height="15" fill="rgb(219,226,23)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="308" width="2" height="15" fill="rgb(244,7,48)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="324" width="2" height="15" fill="rgb(233,122,35)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="340" width="2" height="15" fill="rgb(208,58,45)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.22%)</title><rect x="10" y="356" width="2" height="15" fill="rgb(217,128,5)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="372" width="2" height="15" fill="rgb(219,48,51)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (6 samples, 0.22%)</title><rect x="10" y="388" width="2" height="15" fill="rgb(215,93,46)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="404" width="2" height="15" fill="rgb(241,200,13)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="420" width="2" height="15" fill="rgb(217,214,20)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="436" width="2" height="15" fill="rgb(223,75,18)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.22%)</title><rect x="10" y="452" width="2" height="15" fill="rgb(218,131,50)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="468" width="2" height="15" fill="rgb(223,165,47)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (6 samples, 0.22%)</title><rect x="10" y="484" width="2" height="15" fill="rgb(232,212,27)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="500" width="2" height="15" fill="rgb(227,51,54)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="516" width="2" height="15" fill="rgb(244,94,23)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="10" y="532" width="2" height="15" fill="rgb(235,194,37)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.22%)</title><rect x="10" y="548" width="2" height="15" fill="rgb(238,229,13)"/><text x="13.00" y="558.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (3 samples, 0.11%)</title><rect x="12" y="244" width="1" height="15" fill="rgb(213,186,53)"/><text x="15.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="12" y="260" width="1" height="15" fill="rgb(223,135,48)"/><text x="15.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="12" y="276" width="1" height="15" fill="rgb(223,194,23)"/><text x="15.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="12" y="292" width="1" height="15" fill="rgb(241,7,7)"/><text x="15.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="12" y="308" width="1" height="15" fill="rgb(212,220,51)"/><text x="15.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="12" y="324" width="1" height="15" fill="rgb(241,179,14)"/><text x="15.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.11%)</title><rect x="12" y="340" width="1" height="15" fill="rgb(253,210,1)"/><text x="15.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="12" y="356" width="1" height="15" fill="rgb(214,109,10)"/><text x="15.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="12" y="372" width="1" height="15" fill="rgb(226,161,1)"/><text x="15.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="12" y="388" width="1" height="15" fill="rgb(209,32,13)"/><text x="15.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.11%)</title><rect x="12" y="404" width="1" height="15" fill="rgb(235,67,7)"/><text x="15.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="12" y="420" width="1" height="15" fill="rgb(254,118,28)"/><text x="15.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (3 samples, 0.11%)</title><rect x="12" y="436" width="1" height="15" fill="rgb(231,16,23)"/><text x="15.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="12" y="452" width="1" height="15" fill="rgb(243,9,37)"/><text x="15.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.11%)</title><rect x="12" y="468" width="1" height="15" fill="rgb(236,211,0)"/><text x="15.00" y="478.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.44%)</title><rect x="10" y="68" width="5" height="15" fill="rgb(236,188,43)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.44%)</title><rect x="10" y="84" width="5" height="15" fill="rgb(253,77,43)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.44%)</title><rect x="10" y="100" width="5" height="15" fill="rgb(215,161,20)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (12 samples, 0.44%)</title><rect x="10" y="116" width="5" height="15" fill="rgb(236,101,2)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.44%)</title><rect x="10" y="132" width="5" height="15" fill="rgb(244,201,35)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py) (12 samples, 0.44%)</title><rect x="10" y="148" width="5" height="15" fill="rgb(214,187,46)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.44%)</title><rect x="10" y="164" width="5" height="15" fill="rgb(221,111,52)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 0.44%)</title><rect x="10" y="180" width="5" height="15" fill="rgb(236,190,48)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="12" y="196" width="3" height="15" fill="rgb(219,102,40)"/><text x="15.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 0.22%)</title><rect x="12" y="212" width="3" height="15" fill="rgb(254,65,30)"/><text x="15.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 0.22%)</title><rect x="12" y="228" width="3" height="15" fill="rgb(246,125,2)"/><text x="15.00" y="238.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="26" y="388" width="2" height="15" fill="rgb(213,152,11)"/><text x="29.00" y="398.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="28" y="388" width="1" height="15" fill="rgb(229,40,25)"/><text x="31.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="28" y="404" width="1" height="15" fill="rgb(205,72,49)"/><text x="31.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="35" y="452" width="2" height="15" fill="rgb(209,24,13)"/><text x="38.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.26%)</title><rect x="38" y="452" width="3" height="15" fill="rgb(225,215,32)"/><text x="41.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.22%)</title><rect x="39" y="468" width="2" height="15" fill="rgb(206,216,18)"/><text x="42.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (21 samples, 0.77%)</title><rect x="33" y="436" width="9" height="15" fill="rgb(214,57,52)"/><text x="36.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.26%)</title><rect x="42" y="436" width="3" height="15" fill="rgb(245,174,37)"/><text x="45.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.22%)</title><rect x="43" y="452" width="2" height="15" fill="rgb(223,64,5)"/><text x="46.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.22%)</title><rect x="43" y="468" width="2" height="15" fill="rgb(241,170,51)"/><text x="46.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="43" y="484" width="2" height="15" fill="rgb(211,164,15)"/><text x="46.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="43" y="500" width="2" height="15" fill="rgb(216,110,17)"/><text x="46.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOutputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="45" y="436" width="2" height="15" fill="rgb(215,219,0)"/><text x="48.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="47" y="436" width="2" height="15" fill="rgb(212,104,13)"/><text x="50.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="47" y="452" width="2" height="15" fill="rgb(217,87,7)"/><text x="50.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="47" y="468" width="2" height="15" fill="rgb(229,144,40)"/><text x="50.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="51" y="468" width="2" height="15" fill="rgb(254,201,32)"/><text x="54.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="52" y="484" width="1" height="15" fill="rgb(228,201,9)"/><text x="55.00" y="494.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.37%)</title><rect x="49" y="436" width="5" height="15" fill="rgb(211,69,20)"/><text x="52.00" y="446.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.22%)</title><rect x="51" y="452" width="3" height="15" fill="rgb(225,66,16)"/><text x="54.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="70" y="500" width="2" height="15" fill="rgb(205,149,41)"/><text x="73.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="70" y="516" width="2" height="15" fill="rgb(250,97,31)"/><text x="73.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="70" y="532" width="2" height="15" fill="rgb(242,199,10)"/><text x="73.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="70" y="548" width="2" height="15" fill="rgb(219,128,17)"/><text x="73.00" y="558.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="70" y="468" width="2" height="15" fill="rgb(220,151,10)"/><text x="73.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.18%)</title><rect x="70" y="484" width="2" height="15" fill="rgb(243,87,44)"/><text x="73.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="73" y="468" width="1" height="15" fill="rgb(251,92,11)"/><text x="76.00" y="478.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.11%)</title><rect x="74" y="468" width="2" height="15" fill="rgb(229,175,2)"/><text x="77.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (54 samples, 1.98%)</title><rect x="55" y="436" width="23" height="15" fill="rgb(217,181,29)"/><text x="58.00" y="446.50">o..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (53 samples, 1.94%)</title><rect x="55" y="452" width="23" height="15" fill="rgb(242,56,43)"/><text x="58.00" y="462.50">o..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="76" y="468" width="2" height="15" fill="rgb(211,70,26)"/><text x="79.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="80" y="468" width="2" height="15" fill="rgb(245,93,5)"/><text x="83.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.26%)</title><rect x="83" y="516" width="3" height="15" fill="rgb(249,188,54)"/><text x="86.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.26%)</title><rect x="83" y="532" width="3" height="15" fill="rgb(227,130,27)"/><text x="86.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.26%)</title><rect x="83" y="548" width="3" height="15" fill="rgb(237,155,45)"/><text x="86.00" y="558.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.33%)</title><rect x="83" y="468" width="4" height="15" fill="rgb(240,212,45)"/><text x="86.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.29%)</title><rect x="83" y="484" width="4" height="15" fill="rgb(215,207,53)"/><text x="86.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.29%)</title><rect x="83" y="500" width="4" height="15" fill="rgb(237,206,9)"/><text x="86.00" y="510.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.15%)</title><rect x="89" y="500" width="1" height="15" fill="rgb(218,136,7)"/><text x="92.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.11%)</title><rect x="89" y="516" width="1" height="15" fill="rgb(232,132,41)"/><text x="92.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.11%)</title><rect x="89" y="532" width="1" height="15" fill="rgb(245,207,7)"/><text x="92.00" y="542.50"></text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (143 samples, 5.25%)</title><rect x="29" y="388" width="62" height="15" fill="rgb(232,114,8)"/><text x="32.00" y="398.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (143 samples, 5.25%)</title><rect x="29" y="404" width="62" height="15" fill="rgb(248,52,51)"/><text x="32.00" y="414.50">onnxru..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (141 samples, 5.17%)</title><rect x="30" y="420" width="61" height="15" fill="rgb(252,188,1)"/><text x="33.00" y="430.50">onnxru..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (31 samples, 1.14%)</title><rect x="78" y="436" width="13" height="15" fill="rgb(231,214,31)"/><text x="81.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (28 samples, 1.03%)</title><rect x="79" y="452" width="12" height="15" fill="rgb(234,67,10)"/><text x="82.00" y="462.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.40%)</title><rect x="87" y="468" width="4" height="15" fill="rgb(211,165,45)"/><text x="90.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.37%)</title><rect x="87" y="484" width="4" height="15" fill="rgb(248,110,8)"/><text x="90.00" y="494.50"></text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (164 samples, 6.02%)</title><rect x="21" y="340" width="71" height="15" fill="rgb(207,98,20)"/><text x="24.00" y="350.50">onnxrunt..</text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (164 samples, 6.02%)</title><rect x="21" y="356" width="71" height="15" fill="rgb(251,151,6)"/><text x="24.00" y="366.50">onnxrunt..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (163 samples, 5.98%)</title><rect x="21" y="372" width="71" height="15" fill="rgb(216,197,12)"/><text x="24.00" y="382.50">onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (179 samples, 6.57%)</title><rect x="17" y="292" width="78" height="15" fill="rgb(232,173,22)"/><text x="20.00" y="302.50">onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (179 samples, 6.57%)</title><rect x="17" y="308" width="78" height="15" fill="rgb(231,112,16)"/><text x="20.00" y="318.50">onnxrunti..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (179 samples, 6.57%)</title><rect x="17" y="324" width="78" height="15" fill="rgb(254,68,26)"/><text x="20.00" y="334.50">onnxrunti..</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py) (186 samples, 6.82%)</title><rect x="15" y="68" width="80" height="15" fill="rgb(226,67,16)"/><text x="18.00" y="78.50">profile_o..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py) (186 samples, 6.82%)</title><rect x="15" y="84" width="80" height="15" fill="rgb(216,151,1)"/><text x="18.00" y="94.50">setup_pro..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py) (186 samples, 6.82%)</title><rect x="15" y="100" width="80" height="15" fill="rgb(211,44,28)"/><text x="18.00" y="110.50">profile (..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (186 samples, 6.82%)</title><rect x="15" y="116" width="80" height="15" fill="rgb(209,41,42)"/><text x="18.00" y="126.50">time_pred..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (186 samples, 6.82%)</title><rect x="15" y="132" width="80" height="15" fill="rgb(240,65,46)"/><text x="18.00" y="142.50">&lt;lambda&gt; ..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (185 samples, 6.79%)</title><rect x="15" y="148" width="80" height="15" fill="rgb(238,0,3)"/><text x="18.00" y="158.50">run (mlpr..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (185 samples, 6.79%)</title><rect x="15" y="164" width="80" height="15" fill="rgb(214,114,26)"/><text x="18.00" y="174.50">_run_whol..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (185 samples, 6.79%)</title><rect x="15" y="180" width="80" height="15" fill="rgb(244,153,37)"/><text x="18.00" y="190.50">run (mlpr..</text></g><g><title>run (onnxruntime/capi/session.py) (185 samples, 6.79%)</title><rect x="15" y="196" width="80" height="15" fill="rgb(216,197,10)"/><text x="18.00" y="206.50">run (onnx..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 6.68%)</title><rect x="16" y="212" width="79" height="15" fill="rgb(215,78,28)"/><text x="19.00" y="222.50">pybind11:..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 6.68%)</title><rect x="16" y="228" width="79" height="15" fill="rgb(212,207,47)"/><text x="19.00" y="238.50">void pybi..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 6.68%)</title><rect x="16" y="244" width="79" height="15" fill="rgb(232,224,4)"/><text x="19.00" y="254.50">onnxrunti..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 6.68%)</title><rect x="16" y="260" width="79" height="15" fill="rgb(216,107,5)"/><text x="19.00" y="270.50">onnxrunti..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (181 samples, 6.64%)</title><rect x="17" y="276" width="78" height="15" fill="rgb(212,22,41)"/><text x="20.00" y="286.50">onnxrunti..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (4 samples, 0.15%)</title><rect x="119" y="212" width="2" height="15" fill="rgb(245,198,45)"/><text x="122.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (6 samples, 0.22%)</title><rect x="121" y="212" width="2" height="15" fill="rgb(236,177,27)"/><text x="124.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (6 samples, 0.22%)</title><rect x="121" y="228" width="2" height="15" fill="rgb(217,44,40)"/><text x="124.00" y="238.50"></text></g><g><title>array_astype (methods.c) (4 samples, 0.15%)</title><rect x="122" y="244" width="1" height="15" fill="rgb(221,6,48)"/><text x="125.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_equal.py) (7 samples, 0.26%)</title><rect x="124" y="212" width="3" height="15" fill="rgb(245,30,14)"/><text x="127.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.15%)</title><rect x="125" y="228" width="2" height="15" fill="rgb(226,195,19)"/><text x="128.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.15%)</title><rect x="125" y="244" width="2" height="15" fill="rgb(213,88,27)"/><text x="128.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (4 samples, 0.15%)</title><rect x="125" y="260" width="2" height="15" fill="rgb(252,131,25)"/><text x="128.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.11%)</title><rect x="126" y="276" width="1" height="15" fill="rgb(229,197,3)"/><text x="129.00" y="286.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.11%)</title><rect x="126" y="292" width="1" height="15" fill="rgb(239,136,14)"/><text x="129.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py) (5 samples, 0.18%)</title><rect x="127" y="212" width="2" height="15" fill="rgb(253,120,23)"/><text x="130.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;) (5 samples, 0.18%)</title><rect x="127" y="228" width="2" height="15" fill="rgb(207,205,44)"/><text x="130.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (5 samples, 0.18%)</title><rect x="127" y="244" width="2" height="15" fill="rgb(242,52,51)"/><text x="130.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py) (5 samples, 0.18%)</title><rect x="127" y="260" width="2" height="15" fill="rgb(208,99,45)"/><text x="130.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (5 samples, 0.18%)</title><rect x="127" y="276" width="2" height="15" fill="rgb(208,18,29)"/><text x="130.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (4 samples, 0.15%)</title><rect x="127" y="292" width="2" height="15" fill="rgb(221,131,25)"/><text x="130.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (4 samples, 0.15%)</title><rect x="127" y="308" width="2" height="15" fill="rgb(244,173,45)"/><text x="130.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c) (3 samples, 0.11%)</title><rect x="128" y="324" width="1" height="15" fill="rgb(223,180,48)"/><text x="131.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reshape.py) (3 samples, 0.11%)</title><rect x="129" y="212" width="1" height="15" fill="rgb(241,28,12)"/><text x="132.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py) (10 samples, 0.37%)</title><rect x="203" y="228" width="4" height="15" fill="rgb(236,190,25)"/><text x="206.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (8 samples, 0.29%)</title><rect x="208" y="228" width="4" height="15" fill="rgb(218,136,3)"/><text x="211.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (6 samples, 0.22%)</title><rect x="209" y="244" width="3" height="15" fill="rgb(216,134,15)"/><text x="212.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c) (6 samples, 0.22%)</title><rect x="209" y="260" width="3" height="15" fill="rgb(220,209,23)"/><text x="212.00" y="270.50"></text></g><g><title>get_view_from_index (mapping.c) (6 samples, 0.22%)</title><rect x="215" y="244" width="2" height="15" fill="rgb(243,75,16)"/><text x="218.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (5 samples, 0.18%)</title><rect x="215" y="260" width="2" height="15" fill="rgb(251,86,42)"/><text x="218.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.15%)</title><rect x="216" y="276" width="1" height="15" fill="rgb(226,137,43)"/><text x="219.00" y="286.50"></text></g><g><title>array_subscript (mapping.c) (21 samples, 0.77%)</title><rect x="212" y="228" width="9" height="15" fill="rgb(244,157,22)"/><text x="215.00" y="238.50"></text></g><g><title>prepare_index (mapping.c) (8 samples, 0.29%)</title><rect x="217" y="244" width="4" height="15" fill="rgb(205,36,47)"/><text x="220.00" y="254.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (4 samples, 0.15%)</title><rect x="264" y="276" width="2" height="15" fill="rgb(214,142,25)"/><text x="267.00" y="286.50"></text></g><g><title>0x7fc907c7e734 (libc-2.29.so) (3 samples, 0.11%)</title><rect x="272" y="308" width="1" height="15" fill="rgb(212,207,51)"/><text x="275.00" y="318.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (10 samples, 0.37%)</title><rect x="269" y="292" width="5" height="15" fill="rgb(253,1,49)"/><text x="272.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (7 samples, 0.26%)</title><rect x="275" y="308" width="3" height="15" fill="rgb(233,114,9)"/><text x="278.00" y="318.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (5 samples, 0.18%)</title><rect x="276" y="324" width="2" height="15" fill="rgb(206,184,44)"/><text x="279.00" y="334.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (5 samples, 0.18%)</title><rect x="276" y="340" width="2" height="15" fill="rgb(243,156,23)"/><text x="279.00" y="350.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (12 samples, 0.44%)</title><rect x="274" y="292" width="5" height="15" fill="rgb(211,81,39)"/><text x="277.00" y="302.50"></text></g><g><title>array_alloc (arrayobject.c) (5 samples, 0.18%)</title><rect x="283" y="340" width="2" height="15" fill="rgb(247,111,39)"/><text x="286.00" y="350.50"></text></g><g><title>array_reshape (methods.c) (45 samples, 1.65%)</title><rect x="266" y="276" width="19" height="15" fill="rgb(253,24,39)"/><text x="269.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (15 samples, 0.55%)</title><rect x="279" y="292" width="6" height="15" fill="rgb(230,28,2)"/><text x="282.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c) (15 samples, 0.55%)</title><rect x="279" y="308" width="6" height="15" fill="rgb(235,60,9)"/><text x="282.00" y="318.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (8 samples, 0.29%)</title><rect x="282" y="324" width="3" height="15" fill="rgb(244,40,24)"/><text x="285.00" y="334.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (143 samples, 5.25%)</title><rect x="235" y="260" width="61" height="15" fill="rgb(230,114,34)"/><text x="238.00" y="270.50">expand..</text></g><g><title>asanyarray (numpy/core/_asarray.py) (25 samples, 0.92%)</title><rect x="286" y="276" width="10" height="15" fill="rgb(219,203,12)"/><text x="289.00" y="286.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (4 samples, 0.15%)</title><rect x="295" y="292" width="1" height="15" fill="rgb(230,101,48)"/><text x="298.00" y="302.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (177 samples, 6.49%)</title><rect x="221" y="228" width="76" height="15" fill="rgb(248,119,41)"/><text x="224.00" y="238.50">expand_d..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (156 samples, 5.72%)</title><rect x="230" y="244" width="67" height="15" fill="rgb(236,184,24)"/><text x="233.00" y="254.50">array_i..</text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (30 samples, 1.10%)</title><rect x="391" y="260" width="13" height="15" fill="rgb(206,83,33)"/><text x="394.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (36 samples, 1.32%)</title><rect x="622" y="276" width="15" height="15" fill="rgb(230,48,21)"/><text x="625.00" y="286.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (8 samples, 0.29%)</title><rect x="675" y="292" width="3" height="15" fill="rgb(229,76,12)"/><text x="678.00" y="302.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (3 samples, 0.11%)</title><rect x="677" y="308" width="1" height="15" fill="rgb(251,10,48)"/><text x="680.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (5 samples, 0.18%)</title><rect x="718" y="340" width="2" height="15" fill="rgb(221,46,26)"/><text x="721.00" y="350.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (8 samples, 0.29%)</title><rect x="727" y="388" width="4" height="15" fill="rgb(216,145,13)"/><text x="730.00" y="398.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (19 samples, 0.70%)</title><rect x="725" y="356" width="9" height="15" fill="rgb(251,11,45)"/><text x="728.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (16 samples, 0.59%)</title><rect x="727" y="372" width="7" height="15" fill="rgb(211,50,31)"/><text x="730.00" y="382.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (7 samples, 0.26%)</title><rect x="731" y="388" width="3" height="15" fill="rgb(227,60,23)"/><text x="734.00" y="398.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (4 samples, 0.15%)</title><rect x="732" y="404" width="2" height="15" fill="rgb(229,165,15)"/><text x="735.00" y="414.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (5 samples, 0.18%)</title><rect x="734" y="356" width="2" height="15" fill="rgb(212,216,18)"/><text x="737.00" y="366.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (3 samples, 0.11%)</title><rect x="736" y="356" width="1" height="15" fill="rgb(252,70,42)"/><text x="739.00" y="366.50"></text></g><g><title>_ufunc_setup_flags (ufunc_object.c) (6 samples, 0.22%)</title><rect x="737" y="356" width="3" height="15" fill="rgb(247,127,34)"/><text x="740.00" y="366.50"></text></g><g><title>FLOAT_subtract (loops.c.src) (5 samples, 0.18%)</title><rect x="743" y="388" width="2" height="15" fill="rgb(242,154,7)"/><text x="746.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src) (3 samples, 0.11%)</title><rect x="744" y="404" width="1" height="15" fill="rgb(234,185,30)"/><text x="747.00" y="414.50"></text></g><g><title>sse2_binary_subtract_FLOAT (simd.inc.src) (3 samples, 0.11%)</title><rect x="744" y="420" width="1" height="15" fill="rgb(226,42,51)"/><text x="747.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.15%)</title><rect x="748" y="404" width="2" height="15" fill="rgb(224,225,25)"/><text x="751.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c) (12 samples, 0.44%)</title><rect x="754" y="420" width="5" height="15" fill="rgb(234,18,15)"/><text x="757.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (9 samples, 0.33%)</title><rect x="755" y="436" width="4" height="15" fill="rgb(220,228,37)"/><text x="758.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (9 samples, 0.33%)</title><rect x="755" y="452" width="4" height="15" fill="rgb(229,93,6)"/><text x="758.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (22 samples, 0.81%)</title><rect x="750" y="404" width="9" height="15" fill="rgb(249,128,4)"/><text x="753.00" y="414.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (4 samples, 0.15%)</title><rect x="759" y="404" width="2" height="15" fill="rgb(248,179,18)"/><text x="762.00" y="414.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (9 samples, 0.33%)</title><rect x="763" y="404" width="4" height="15" fill="rgb(243,66,29)"/><text x="766.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (60 samples, 2.20%)</title><rect x="745" y="388" width="26" height="15" fill="rgb(214,176,51)"/><text x="748.00" y="398.50">N..</text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (9 samples, 0.33%)</title><rect x="767" y="404" width="4" height="15" fill="rgb(254,153,35)"/><text x="770.00" y="414.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (5 samples, 0.18%)</title><rect x="769" y="420" width="2" height="15" fill="rgb(250,42,50)"/><text x="772.00" y="430.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (6 samples, 0.22%)</title><rect x="771" y="388" width="3" height="15" fill="rgb(205,67,22)"/><text x="774.00" y="398.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (7 samples, 0.26%)</title><rect x="776" y="388" width="3" height="15" fill="rgb(216,93,34)"/><text x="779.00" y="398.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (5 samples, 0.18%)</title><rect x="777" y="404" width="2" height="15" fill="rgb(237,28,19)"/><text x="780.00" y="414.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (94 samples, 3.45%)</title><rect x="740" y="356" width="40" height="15" fill="rgb(248,17,24)"/><text x="743.00" y="366.50">exe..</text></g><g><title>iterator_loop (ufunc_object.c) (90 samples, 3.30%)</title><rect x="741" y="372" width="39" height="15" fill="rgb(232,124,36)"/><text x="744.00" y="382.50">ite..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (4 samples, 0.15%)</title><rect x="779" y="388" width="1" height="15" fill="rgb(217,16,32)"/><text x="782.00" y="398.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (3 samples, 0.11%)</title><rect x="779" y="404" width="1" height="15" fill="rgb(230,124,6)"/><text x="782.00" y="414.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (3 samples, 0.11%)</title><rect x="781" y="356" width="1" height="15" fill="rgb(218,103,5)"/><text x="784.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (148 samples, 5.43%)</title><rect x="720" y="340" width="64" height="15" fill="rgb(249,1,43)"/><text x="723.00" y="350.50">PyUFunc..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (4 samples, 0.15%)</title><rect x="782" y="356" width="2" height="15" fill="rgb(250,75,17)"/><text x="785.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (191 samples, 7.01%)</title><rect x="703" y="308" width="82" height="15" fill="rgb(248,104,2)"/><text x="706.00" y="318.50">_run (mlp..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (159 samples, 5.83%)</title><rect x="716" y="324" width="69" height="15" fill="rgb(231,125,26)"/><text x="719.00" y="334.50">ufunc_g..</text></g><g><title>_find_array_wrap (ufunc_object.c) (3 samples, 0.11%)</title><rect x="784" y="340" width="1" height="15" fill="rgb(224,90,37)"/><text x="787.00" y="350.50"></text></g><g><title>arrays_overlap (array_assign.c) (4 samples, 0.15%)</title><rect x="801" y="372" width="2" height="15" fill="rgb(209,114,20)"/><text x="804.00" y="382.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (3 samples, 0.11%)</title><rect x="801" y="388" width="2" height="15" fill="rgb(225,203,15)"/><text x="804.00" y="398.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (5 samples, 0.18%)</title><rect x="806" y="388" width="3" height="15" fill="rgb(248,223,45)"/><text x="809.00" y="398.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (13 samples, 0.48%)</title><rect x="809" y="388" width="5" height="15" fill="rgb(216,198,32)"/><text x="812.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (8 samples, 0.29%)</title><rect x="811" y="404" width="3" height="15" fill="rgb(249,117,40)"/><text x="814.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (4 samples, 0.15%)</title><rect x="812" y="420" width="2" height="15" fill="rgb(216,219,5)"/><text x="815.00" y="430.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (3 samples, 0.11%)</title><rect x="816" y="388" width="1" height="15" fill="rgb(228,141,43)"/><text x="819.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (44 samples, 1.61%)</title><rect x="799" y="356" width="20" height="15" fill="rgb(238,174,28)"/><text x="802.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (37 samples, 1.36%)</title><rect x="803" y="372" width="16" height="15" fill="rgb(227,182,28)"/><text x="806.00" y="382.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (3 samples, 0.11%)</title><rect x="817" y="388" width="2" height="15" fill="rgb(223,197,18)"/><text x="820.00" y="398.50"></text></g><g><title>array_alloc (arrayobject.c) (3 samples, 0.11%)</title><rect x="822" y="420" width="1" height="15" fill="rgb(234,17,13)"/><text x="825.00" y="430.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (91 samples, 3.34%)</title><rect x="785" y="308" width="40" height="15" fill="rgb(247,111,2)"/><text x="788.00" y="318.50">_ru..</text></g><g><title>array_copy (methods.c) (63 samples, 2.31%)</title><rect x="797" y="324" width="28" height="15" fill="rgb(251,138,53)"/><text x="800.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c) (58 samples, 2.13%)</title><rect x="799" y="340" width="26" height="15" fill="rgb(224,42,34)"/><text x="802.00" y="350.50">P..</text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (12 samples, 0.44%)</title><rect x="819" y="356" width="6" height="15" fill="rgb(216,6,27)"/><text x="822.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (10 samples, 0.37%)</title><rect x="820" y="372" width="5" height="15" fill="rgb(214,191,28)"/><text x="823.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (10 samples, 0.37%)</title><rect x="820" y="388" width="5" height="15" fill="rgb(235,132,16)"/><text x="823.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (10 samples, 0.37%)</title><rect x="820" y="404" width="5" height="15" fill="rgb(218,47,43)"/><text x="823.00" y="414.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (9 samples, 0.33%)</title><rect x="845" y="340" width="4" height="15" fill="rgb(254,53,17)"/><text x="848.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (9 samples, 0.33%)</title><rect x="845" y="356" width="4" height="15" fill="rgb(228,179,29)"/><text x="848.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c) (13 samples, 0.48%)</title><rect x="845" y="324" width="5" height="15" fill="rgb(216,85,33)"/><text x="848.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py) (4 samples, 0.15%)</title><rect x="863" y="340" width="2" height="15" fill="rgb(227,174,43)"/><text x="866.00" y="350.50"></text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (5 samples, 0.18%)</title><rect x="870" y="356" width="3" height="15" fill="rgb(236,192,10)"/><text x="873.00" y="366.50"></text></g><g><title>get_array_function (arrayfunction_override.c) (4 samples, 0.15%)</title><rect x="871" y="372" width="2" height="15" fill="rgb(233,91,27)"/><text x="874.00" y="382.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (3 samples, 0.11%)</title><rect x="871" y="388" width="2" height="15" fill="rgb(215,177,46)"/><text x="874.00" y="398.50"></text></g><g><title>_is_basic_python_type (get_attr_string.h) (3 samples, 0.11%)</title><rect x="871" y="404" width="2" height="15" fill="rgb(238,38,34)"/><text x="874.00" y="414.50"></text></g><g><title>npy_cache_import (npy_import.h) (3 samples, 0.11%)</title><rect x="873" y="356" width="1" height="15" fill="rgb(224,117,23)"/><text x="876.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py) (31 samples, 1.14%)</title><rect x="919" y="388" width="13" height="15" fill="rgb(226,73,17)"/><text x="922.00" y="398.50"></text></g><g><title>0x7fc907c7ee54 (libc-2.29.so) (3 samples, 0.11%)</title><rect x="938" y="452" width="2" height="15" fill="rgb(220,150,46)"/><text x="941.00" y="462.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (21 samples, 0.77%)</title><rect x="933" y="404" width="9" height="15" fill="rgb(225,110,2)"/><text x="936.00" y="414.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (21 samples, 0.77%)</title><rect x="933" y="420" width="9" height="15" fill="rgb(215,71,10)"/><text x="936.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (18 samples, 0.66%)</title><rect x="935" y="436" width="7" height="15" fill="rgb(247,186,24)"/><text x="938.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (5 samples, 0.18%)</title><rect x="940" y="452" width="2" height="15" fill="rgb(221,97,45)"/><text x="943.00" y="462.50"></text></g><g><title>PyArray_FromAny (ctors.c) (4 samples, 0.15%)</title><rect x="961" y="420" width="2" height="15" fill="rgb(227,113,3)"/><text x="964.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (10 samples, 0.37%)</title><rect x="963" y="420" width="4" height="15" fill="rgb(234,35,36)"/><text x="966.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (9 samples, 0.33%)</title><rect x="964" y="436" width="3" height="15" fill="rgb(227,48,47)"/><text x="967.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (9 samples, 0.33%)</title><rect x="964" y="452" width="3" height="15" fill="rgb(220,36,12)"/><text x="967.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (8 samples, 0.29%)</title><rect x="973" y="468" width="4" height="15" fill="rgb(218,13,9)"/><text x="976.00" y="478.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (3 samples, 0.11%)</title><rect x="977" y="468" width="2" height="15" fill="rgb(215,104,54)"/><text x="980.00" y="478.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (11 samples, 0.40%)</title><rect x="980" y="468" width="5" height="15" fill="rgb(217,61,42)"/><text x="983.00" y="478.50"></text></g><g><title>npyiter_checkreducesize (nditer_api.c) (3 samples, 0.11%)</title><rect x="983" y="484" width="2" height="15" fill="rgb(236,123,33)"/><text x="986.00" y="494.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (5 samples, 0.18%)</title><rect x="985" y="468" width="2" height="15" fill="rgb(246,23,13)"/><text x="988.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (46 samples, 1.69%)</title><rect x="970" y="452" width="20" height="15" fill="rgb(246,19,8)"/><text x="973.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (7 samples, 0.26%)</title><rect x="987" y="468" width="3" height="15" fill="rgb(227,163,26)"/><text x="990.00" y="478.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (7 samples, 0.26%)</title><rect x="987" y="484" width="3" height="15" fill="rgb(237,102,16)"/><text x="990.00" y="494.50"></text></g><g><title>PyArray_AdaptFlexibleDType (convert_datatype.c) (3 samples, 0.11%)</title><rect x="989" y="500" width="1" height="15" fill="rgb(208,149,36)"/><text x="992.00" y="510.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (7 samples, 0.26%)</title><rect x="990" y="452" width="3" height="15" fill="rgb(244,45,35)"/><text x="993.00" y="462.50"></text></g><g><title>array_alloc (arrayobject.c) (3 samples, 0.11%)</title><rect x="998" y="516" width="1" height="15" fill="rgb(217,108,51)"/><text x="1001.00" y="526.50"></text></g><g><title>npy_alloc_cache (alloc.c) (5 samples, 0.18%)</title><rect x="999" y="516" width="2" height="15" fill="rgb(228,31,26)"/><text x="1002.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (5 samples, 0.18%)</title><rect x="999" y="532" width="2" height="15" fill="rgb(208,158,26)"/><text x="1002.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (4 samples, 0.15%)</title><rect x="999" y="548" width="2" height="15" fill="rgb(223,52,38)"/><text x="1002.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.15%)</title><rect x="999" y="564" width="2" height="15" fill="rgb(220,214,20)"/><text x="1002.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (24 samples, 0.88%)</title><rect x="995" y="484" width="11" height="15" fill="rgb(243,41,8)"/><text x="998.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (22 samples, 0.81%)</title><rect x="996" y="500" width="10" height="15" fill="rgb(229,16,42)"/><text x="999.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (10 samples, 0.37%)</title><rect x="1001" y="516" width="5" height="15" fill="rgb(234,89,30)"/><text x="1004.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (8 samples, 0.29%)</title><rect x="1002" y="532" width="4" height="15" fill="rgb(219,92,15)"/><text x="1005.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.15%)</title><rect x="1004" y="548" width="2" height="15" fill="rgb(227,56,50)"/><text x="1007.00" y="558.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (32 samples, 1.17%)</title><rect x="994" y="452" width="14" height="15" fill="rgb(207,151,29)"/><text x="997.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c) (32 samples, 1.17%)</title><rect x="994" y="468" width="14" height="15" fill="rgb(242,198,30)"/><text x="997.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (4 samples, 0.15%)</title><rect x="1006" y="484" width="2" height="15" fill="rgb(223,28,5)"/><text x="1009.00" y="494.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (3 samples, 0.11%)</title><rect x="1014" y="500" width="1" height="15" fill="rgb(210,203,41)"/><text x="1017.00" y="510.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (3 samples, 0.11%)</title><rect x="1017" y="500" width="1" height="15" fill="rgb(241,192,13)"/><text x="1020.00" y="510.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (3 samples, 0.11%)</title><rect x="1017" y="516" width="1" height="15" fill="rgb(242,74,22)"/><text x="1020.00" y="526.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (24 samples, 0.88%)</title><rect x="1008" y="452" width="11" height="15" fill="rgb(225,55,6)"/><text x="1011.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (19 samples, 0.70%)</title><rect x="1010" y="468" width="9" height="15" fill="rgb(248,14,3)"/><text x="1013.00" y="478.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (13 samples, 0.48%)</title><rect x="1013" y="484" width="6" height="15" fill="rgb(230,16,28)"/><text x="1016.00" y="494.50"></text></g><g><title>FLOAT_add (loops.c.src) (5 samples, 0.18%)</title><rect x="1020" y="468" width="2" height="15" fill="rgb(247,216,20)"/><text x="1023.00" y="478.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src) (3 samples, 0.11%)</title><rect x="1021" y="484" width="1" height="15" fill="rgb(229,171,35)"/><text x="1024.00" y="494.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (3 samples, 0.11%)</title><rect x="1022" y="468" width="2" height="15" fill="rgb(209,226,2)"/><text x="1025.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (130 samples, 4.77%)</title><rect x="969" y="436" width="56" height="15" fill="rgb(248,54,52)"/><text x="972.00" y="446.50">PyUFu..</text></g><g><title>reduce_loop (ufunc_object.c) (13 samples, 0.48%)</title><rect x="1019" y="452" width="6" height="15" fill="rgb(217,113,42)"/><text x="1022.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (3 samples, 0.11%)</title><rect x="1024" y="468" width="1" height="15" fill="rgb(212,22,8)"/><text x="1027.00" y="478.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (3 samples, 0.11%)</title><rect x="1025" y="436" width="1" height="15" fill="rgb(248,218,41)"/><text x="1028.00" y="446.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (3 samples, 0.11%)</title><rect x="1035" y="484" width="1" height="15" fill="rgb(228,178,22)"/><text x="1038.00" y="494.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (158 samples, 5.80%)</title><rect x="968" y="420" width="68" height="15" fill="rgb(219,145,48)"/><text x="971.00" y="430.50">PyUFunc..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (21 samples, 0.77%)</title><rect x="1027" y="436" width="9" height="15" fill="rgb(231,212,25)"/><text x="1030.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (17 samples, 0.62%)</title><rect x="1029" y="452" width="7" height="15" fill="rgb(240,174,29)"/><text x="1032.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (17 samples, 0.62%)</title><rect x="1029" y="468" width="7" height="15" fill="rgb(237,112,49)"/><text x="1032.00" y="478.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (436 samples, 15.99%)</title><rect x="850" y="324" width="189" height="15" fill="rgb(235,37,6)"/><text x="853.00" y="334.50">sum (&lt;__array_function__..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (402 samples, 14.75%)</title><rect x="865" y="340" width="174" height="15" fill="rgb(223,115,31)"/><text x="868.00" y="350.50">array_implement_array_..</text></g><g><title>sum (numpy/core/fromnumeric.py) (381 samples, 13.98%)</title><rect x="874" y="356" width="165" height="15" fill="rgb(249,42,17)"/><text x="877.00" y="366.50">sum (numpy/core/fromn..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (324 samples, 11.89%)</title><rect x="899" y="372" width="140" height="15" fill="rgb(225,212,7)"/><text x="902.00" y="382.50">_wrapreduction (n..</text></g><g><title>ufunc_reduce (ufunc_object.c) (246 samples, 9.02%)</title><rect x="932" y="388" width="107" height="15" fill="rgb(214,38,53)"/><text x="935.00" y="398.50">ufunc_reduce ..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (223 samples, 8.18%)</title><rect x="942" y="404" width="97" height="15" fill="rgb(220,142,48)"/><text x="945.00" y="414.50">PyUFunc_Gen..</text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (3 samples, 0.11%)</title><rect x="1041" y="372" width="1" height="15" fill="rgb(211,7,13)"/><text x="1044.00" y="382.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (7 samples, 0.26%)</title><rect x="1039" y="340" width="3" height="15" fill="rgb(245,69,33)"/><text x="1042.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (6 samples, 0.22%)</title><rect x="1040" y="356" width="2" height="15" fill="rgb(212,204,44)"/><text x="1043.00" y="366.50"></text></g><g><title>_find_array_prepare (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1047" y="356" width="1" height="15" fill="rgb(246,3,20)"/><text x="1050.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (20 samples, 0.73%)</title><rect x="1050" y="372" width="9" height="15" fill="rgb(243,127,24)"/><text x="1053.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (20 samples, 0.73%)</title><rect x="1050" y="388" width="9" height="15" fill="rgb(246,116,51)"/><text x="1053.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (11 samples, 0.40%)</title><rect x="1054" y="404" width="5" height="15" fill="rgb(232,80,27)"/><text x="1057.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (10 samples, 0.37%)</title><rect x="1054" y="420" width="5" height="15" fill="rgb(253,27,46)"/><text x="1057.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (9 samples, 0.33%)</title><rect x="1055" y="436" width="4" height="15" fill="rgb(208,98,47)"/><text x="1058.00" y="446.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (5 samples, 0.18%)</title><rect x="1059" y="372" width="2" height="15" fill="rgb(215,25,44)"/><text x="1062.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (32 samples, 1.17%)</title><rect x="1049" y="356" width="14" height="15" fill="rgb(205,32,16)"/><text x="1052.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (5 samples, 0.18%)</title><rect x="1061" y="372" width="2" height="15" fill="rgb(210,79,51)"/><text x="1064.00" y="382.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (4 samples, 0.15%)</title><rect x="1063" y="356" width="2" height="15" fill="rgb(245,42,36)"/><text x="1066.00" y="366.50"></text></g><g><title>PyArray_CanCastTo (convert_datatype.c) (3 samples, 0.11%)</title><rect x="1069" y="420" width="1" height="15" fill="rgb(239,171,6)"/><text x="1072.00" y="430.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (7 samples, 0.26%)</title><rect x="1068" y="388" width="3" height="15" fill="rgb(253,129,48)"/><text x="1071.00" y="398.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (6 samples, 0.22%)</title><rect x="1069" y="404" width="2" height="15" fill="rgb(213,227,45)"/><text x="1072.00" y="414.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (17 samples, 0.62%)</title><rect x="1065" y="356" width="7" height="15" fill="rgb(231,43,24)"/><text x="1068.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (13 samples, 0.48%)</title><rect x="1067" y="372" width="5" height="15" fill="rgb(219,214,17)"/><text x="1070.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py) (578 samples, 21.20%)</title><rect x="825" y="308" width="250" height="15" fill="rgb(242,74,19)"/><text x="828.00" y="318.50">_run (mlprodict/onnxrt/ops_cpu/op..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (83 samples, 3.04%)</title><rect x="1039" y="324" width="36" height="15" fill="rgb(240,161,11)"/><text x="1042.00" y="334.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (75 samples, 2.75%)</title><rect x="1042" y="340" width="33" height="15" fill="rgb(230,191,4)"/><text x="1045.00" y="350.50">Py..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (4 samples, 0.15%)</title><rect x="1073" y="356" width="2" height="15" fill="rgb(241,160,23)"/><text x="1076.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (3 samples, 0.11%)</title><rect x="1073" y="372" width="2" height="15" fill="rgb(209,136,28)"/><text x="1076.00" y="382.50"></text></g><g><title>fetestexcept (libm-2.29.so) (3 samples, 0.11%)</title><rect x="1073" y="388" width="2" height="15" fill="rgb(254,200,26)"/><text x="1076.00" y="398.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (1,553 samples, 56.97%)</title><rect x="404" y="260" width="673" height="15" fill="rgb(226,186,29)"/><text x="407.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (1,015 samples, 37.23%)</title><rect x="637" y="276" width="440" height="15" fill="rgb(241,157,36)"/><text x="640.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (920 samples, 33.75%)</title><rect x="678" y="292" width="399" height="15" fill="rgb(216,15,17)"/><text x="681.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>arraydescr_richcompare (descriptor.c) (4 samples, 0.15%)</title><rect x="1075" y="308" width="2" height="15" fill="rgb(210,40,34)"/><text x="1078.00" y="318.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (1,757 samples, 64.45%)</title><rect x="316" y="244" width="761" height="15" fill="rgb(225,81,20)"/><text x="319.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (1,813 samples, 66.51%)</title><rect x="297" y="228" width="785" height="15" fill="rgb(220,207,2)"/><text x="300.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (12 samples, 0.44%)</title><rect x="1077" y="244" width="5" height="15" fill="rgb(240,29,28)"/><text x="1080.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (11 samples, 0.40%)</title><rect x="1077" y="260" width="5" height="15" fill="rgb(219,53,31)"/><text x="1080.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (7 samples, 0.26%)</title><rect x="1079" y="276" width="3" height="15" fill="rgb(211,6,32)"/><text x="1082.00" y="286.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (21 samples, 0.77%)</title><rect x="1083" y="276" width="9" height="15" fill="rgb(246,177,20)"/><text x="1086.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (21 samples, 0.77%)</title><rect x="1083" y="292" width="9" height="15" fill="rgb(241,120,26)"/><text x="1086.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py) (21 samples, 0.77%)</title><rect x="1083" y="308" width="9" height="15" fill="rgb(250,181,39)"/><text x="1086.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (12 samples, 0.44%)</title><rect x="1086" y="324" width="6" height="15" fill="rgb(246,130,37)"/><text x="1089.00" y="334.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (5 samples, 0.18%)</title><rect x="1090" y="340" width="2" height="15" fill="rgb(252,70,5)"/><text x="1093.00" y="350.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (3 samples, 0.11%)</title><rect x="1093" y="388" width="1" height="15" fill="rgb(241,67,52)"/><text x="1096.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (6 samples, 0.22%)</title><rect x="1092" y="356" width="2" height="15" fill="rgb(233,90,15)"/><text x="1095.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (6 samples, 0.22%)</title><rect x="1092" y="372" width="2" height="15" fill="rgb(211,159,23)"/><text x="1095.00" y="382.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c) (7 samples, 0.26%)</title><rect x="1092" y="340" width="3" height="15" fill="rgb(227,204,44)"/><text x="1095.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py) (2,230 samples, 81.80%)</title><rect x="130" y="212" width="966" height="15" fill="rgb(234,90,2)"/><text x="133.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py)</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (31 samples, 1.14%)</title><rect x="1082" y="228" width="14" height="15" fill="rgb(217,60,52)"/><text x="1085.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (31 samples, 1.14%)</title><rect x="1082" y="244" width="14" height="15" fill="rgb(230,140,10)"/><text x="1085.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (31 samples, 1.14%)</title><rect x="1082" y="260" width="14" height="15" fill="rgb(231,114,39)"/><text x="1085.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;) (9 samples, 0.33%)</title><rect x="1092" y="276" width="4" height="15" fill="rgb(206,217,8)"/><text x="1095.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 0.33%)</title><rect x="1092" y="292" width="4" height="15" fill="rgb(215,131,33)"/><text x="1095.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c) (9 samples, 0.33%)</title><rect x="1092" y="308" width="4" height="15" fill="rgb(216,146,28)"/><text x="1095.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c) (9 samples, 0.33%)</title><rect x="1092" y="324" width="4" height="15" fill="rgb(217,3,51)"/><text x="1095.00" y="334.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;) (7 samples, 0.26%)</title><rect x="1097" y="260" width="3" height="15" fill="rgb(254,111,17)"/><text x="1100.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.22%)</title><rect x="1098" y="276" width="2" height="15" fill="rgb(221,51,36)"/><text x="1101.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py) (6 samples, 0.22%)</title><rect x="1098" y="292" width="2" height="15" fill="rgb(240,40,48)"/><text x="1101.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (6 samples, 0.22%)</title><rect x="1098" y="308" width="2" height="15" fill="rgb(233,124,40)"/><text x="1101.00" y="318.50"></text></g><g><title>array_argpartition (methods.c) (6 samples, 0.22%)</title><rect x="1098" y="324" width="2" height="15" fill="rgb(250,37,39)"/><text x="1101.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c) (6 samples, 0.22%)</title><rect x="1098" y="340" width="2" height="15" fill="rgb(230,99,36)"/><text x="1101.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c) (5 samples, 0.18%)</title><rect x="1098" y="356" width="2" height="15" fill="rgb(243,146,6)"/><text x="1101.00" y="366.50"></text></g><g><title>PyArray_IterAllButAxis (iterators.c) (5 samples, 0.18%)</title><rect x="1098" y="372" width="2" height="15" fill="rgb(219,199,10)"/><text x="1101.00" y="382.50"></text></g><g><title>PyArray_IterNew (iterators.c) (5 samples, 0.18%)</title><rect x="1098" y="388" width="2" height="15" fill="rgb(212,100,1)"/><text x="1101.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (5 samples, 0.18%)</title><rect x="1098" y="404" width="2" height="15" fill="rgb(212,22,14)"/><text x="1101.00" y="414.50"></text></g><g><title>0x7fc907c6a028 (libc-2.29.so) (3 samples, 0.11%)</title><rect x="1099" y="420" width="1" height="15" fill="rgb(232,121,2)"/><text x="1102.00" y="430.50"></text></g><g><title>argsort (&lt;__array_function__ internals&gt;) (3 samples, 0.11%)</title><rect x="1100" y="260" width="2" height="15" fill="rgb(253,73,52)"/><text x="1103.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.11%)</title><rect x="1100" y="276" width="2" height="15" fill="rgb(215,127,53)"/><text x="1103.00" y="286.50"></text></g><g><title>argsort (numpy/core/fromnumeric.py) (3 samples, 0.11%)</title><rect x="1100" y="292" width="2" height="15" fill="rgb(221,195,16)"/><text x="1103.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (3 samples, 0.11%)</title><rect x="1100" y="308" width="2" height="15" fill="rgb(220,205,54)"/><text x="1103.00" y="318.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (4 samples, 0.15%)</title><rect x="1102" y="276" width="2" height="15" fill="rgb(211,62,3)"/><text x="1105.00" y="286.50"></text></g><g><title>array_subscript (mapping.c) (8 samples, 0.29%)</title><rect x="1102" y="260" width="4" height="15" fill="rgb(215,174,2)"/><text x="1105.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (23 samples, 0.84%)</title><rect x="1096" y="212" width="10" height="15" fill="rgb(252,18,49)"/><text x="1099.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py) (23 samples, 0.84%)</title><rect x="1096" y="228" width="10" height="15" fill="rgb(251,204,42)"/><text x="1099.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py) (20 samples, 0.73%)</title><rect x="1097" y="244" width="9" height="15" fill="rgb(240,34,27)"/><text x="1100.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (4 samples, 0.15%)</title><rect x="1106" y="228" width="2" height="15" fill="rgb(251,74,11)"/><text x="1109.00" y="238.50"></text></g><g><title>_buffer_clear_info (buffer.c) (3 samples, 0.11%)</title><rect x="1107" y="244" width="1" height="15" fill="rgb(217,37,2)"/><text x="1110.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.11%)</title><rect x="1108" y="228" width="1" height="15" fill="rgb(225,186,20)"/><text x="1111.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c) (9 samples, 0.33%)</title><rect x="1106" y="212" width="4" height="15" fill="rgb(237,192,31)"/><text x="1109.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_div.py) (4 samples, 0.15%)</title><rect x="1112" y="228" width="2" height="15" fill="rgb(243,140,31)"/><text x="1115.00" y="238.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (5 samples, 0.18%)</title><rect x="1118" y="324" width="2" height="15" fill="rgb(205,37,31)"/><text x="1121.00" y="334.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (5 samples, 0.18%)</title><rect x="1118" y="340" width="2" height="15" fill="rgb(224,161,21)"/><text x="1121.00" y="350.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (3 samples, 0.11%)</title><rect x="1119" y="356" width="1" height="15" fill="rgb(240,131,8)"/><text x="1122.00" y="366.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (3 samples, 0.11%)</title><rect x="1120" y="356" width="2" height="15" fill="rgb(212,65,17)"/><text x="1123.00" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (19 samples, 0.70%)</title><rect x="1114" y="228" width="8" height="15" fill="rgb(239,132,1)"/><text x="1117.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;) (18 samples, 0.66%)</title><rect x="1114" y="244" width="8" height="15" fill="rgb(217,139,33)"/><text x="1117.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (17 samples, 0.62%)</title><rect x="1115" y="260" width="7" height="15" fill="rgb(229,166,47)"/><text x="1118.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py) (16 samples, 0.59%)</title><rect x="1115" y="276" width="7" height="15" fill="rgb(238,42,51)"/><text x="1118.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (15 samples, 0.55%)</title><rect x="1115" y="292" width="7" height="15" fill="rgb(232,65,37)"/><text x="1118.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (10 samples, 0.37%)</title><rect x="1118" y="308" width="4" height="15" fill="rgb(246,201,48)"/><text x="1121.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (5 samples, 0.18%)</title><rect x="1120" y="324" width="2" height="15" fill="rgb(229,227,38)"/><text x="1123.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (4 samples, 0.15%)</title><rect x="1120" y="340" width="2" height="15" fill="rgb(207,68,41)"/><text x="1123.00" y="350.50"></text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py) (2,373 samples, 87.05%)</title><rect x="95" y="68" width="1027" height="15" fill="rgb(229,42,8)"/><text x="98.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py) (2,373 samples, 87.05%)</title><rect x="95" y="84" width="1027" height="15" fill="rgb(252,6,50)"/><text x="98.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py)</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py) (2,373 samples, 87.05%)</title><rect x="95" y="100" width="1027" height="15" fill="rgb(215,207,52)"/><text x="98.00" y="110.50">profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (2,371 samples, 86.98%)</title><rect x="96" y="116" width="1026" height="15" fill="rgb(218,216,22)"/><text x="99.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (2,371 samples, 86.98%)</title><rect x="96" y="132" width="1026" height="15" fill="rgb(232,39,22)"/><text x="99.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (2,370 samples, 86.94%)</title><rect x="97" y="148" width="1025" height="15" fill="rgb(253,189,30)"/><text x="100.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (2,369 samples, 86.90%)</title><rect x="97" y="164" width="1025" height="15" fill="rgb(254,22,44)"/><text x="100.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (2,359 samples, 86.54%)</title><rect x="101" y="180" width="1021" height="15" fill="rgb(248,92,23)"/><text x="104.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (2,324 samples, 85.25%)</title><rect x="116" y="196" width="1006" height="15" fill="rgb(224,201,16)"/><text x="119.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (27 samples, 0.99%)</title><rect x="1111" y="212" width="11" height="15" fill="rgb(228,40,40)"/><text x="1114.00" y="222.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (5 samples, 0.18%)</title><rect x="1129" y="180" width="2" height="15" fill="rgb(209,87,29)"/><text x="1132.00" y="190.50"></text></g><g><title>array_subscript (mapping.c) (8 samples, 0.29%)</title><rect x="1129" y="164" width="3" height="15" fill="rgb(221,130,36)"/><text x="1132.00" y="174.50"></text></g><g><title>array_sum (methods.c) (5 samples, 0.18%)</title><rect x="1132" y="164" width="3" height="15" fill="rgb(225,111,34)"/><text x="1135.00" y="174.50"></text></g><g><title>forward_ndarray_method (methods.c) (4 samples, 0.15%)</title><rect x="1133" y="180" width="2" height="15" fill="rgb(243,57,29)"/><text x="1136.00" y="190.50"></text></g><g><title>_sum (numpy/core/_methods.py) (3 samples, 0.11%)</title><rect x="1133" y="196" width="2" height="15" fill="rgb(240,102,13)"/><text x="1136.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (3 samples, 0.11%)</title><rect x="1136" y="180" width="1" height="15" fill="rgb(217,162,4)"/><text x="1139.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (9 samples, 0.33%)</title><rect x="1135" y="164" width="3" height="15" fill="rgb(222,139,38)"/><text x="1138.00" y="174.50"></text></g><g><title>_initialize_backend (joblib/parallel.py) (6 samples, 0.22%)</title><rect x="1143" y="196" width="3" height="15" fill="rgb(230,67,42)"/><text x="1146.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (5 samples, 0.18%)</title><rect x="1154" y="372" width="2" height="15" fill="rgb(227,85,26)"/><text x="1157.00" y="382.50"></text></g><g><title>0x7fc8e207c32c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 0.44%)</title><rect x="1151" y="324" width="6" height="15" fill="rgb(240,211,41)"/><text x="1154.00" y="334.50"></text></g><g><title>0x7fc8e20475cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 0.44%)</title><rect x="1151" y="340" width="6" height="15" fill="rgb(220,35,22)"/><text x="1154.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (11 samples, 0.40%)</title><rect x="1152" y="356" width="5" height="15" fill="rgb(243,183,29)"/><text x="1155.00" y="366.50"></text></g><g><title>0x7fc8e2077877 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.15%)</title><rect x="1157" y="356" width="2" height="15" fill="rgb(236,198,53)"/><text x="1160.00" y="366.50"></text></g><g><title>0x7fc8e2077ab9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.11%)</title><rect x="1159" y="372" width="1" height="15" fill="rgb(243,143,5)"/><text x="1162.00" y="382.50"></text></g><g><title>0x7fc8e207c708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.37%)</title><rect x="1157" y="324" width="4" height="15" fill="rgb(219,113,35)"/><text x="1160.00" y="334.50"></text></g><g><title>0x7fc8e20475cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.37%)</title><rect x="1157" y="340" width="4" height="15" fill="rgb(246,48,40)"/><text x="1160.00" y="350.50"></text></g><g><title>0x7fc8e207873a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.22%)</title><rect x="1159" y="356" width="2" height="15" fill="rgb(249,211,18)"/><text x="1162.00" y="366.50"></text></g><g><title>0x7fc8e207e100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.15%)</title><rect x="1161" y="324" width="2" height="15" fill="rgb(244,181,16)"/><text x="1164.00" y="334.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (33 samples, 1.21%)</title><rect x="1150" y="276" width="14" height="15" fill="rgb(210,31,45)"/><text x="1153.00" y="286.50"></text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py) (32 samples, 1.17%)</title><rect x="1150" y="292" width="14" height="15" fill="rgb(227,109,7)"/><text x="1153.00" y="302.50"></text></g><g><title>0x7fc8e2080e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (30 samples, 1.10%)</title><rect x="1151" y="308" width="13" height="15" fill="rgb(246,221,13)"/><text x="1154.00" y="318.50"></text></g><g><title>_dispatch (joblib/parallel.py) (38 samples, 1.39%)</title><rect x="1148" y="212" width="16" height="15" fill="rgb(219,54,0)"/><text x="1151.00" y="222.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (35 samples, 1.28%)</title><rect x="1149" y="228" width="15" height="15" fill="rgb(244,57,40)"/><text x="1152.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (35 samples, 1.28%)</title><rect x="1149" y="244" width="15" height="15" fill="rgb(206,225,30)"/><text x="1152.00" y="254.50"></text></g><g><title>__call__ (joblib/parallel.py) (35 samples, 1.28%)</title><rect x="1149" y="260" width="15" height="15" fill="rgb(239,144,39)"/><text x="1152.00" y="270.50"></text></g><g><title>get (queue.py) (4 samples, 0.15%)</title><rect x="1164" y="212" width="2" height="15" fill="rgb(232,113,37)"/><text x="1167.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (51 samples, 1.87%)</title><rect x="1146" y="196" width="22" height="15" fill="rgb(238,63,18)"/><text x="1149.00" y="206.50">d..</text></g><g><title>put (queue.py) (3 samples, 0.11%)</title><rect x="1167" y="212" width="1" height="15" fill="rgb(224,37,35)"/><text x="1170.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py) (66 samples, 2.42%)</title><rect x="1140" y="180" width="29" height="15" fill="rgb(254,11,7)"/><text x="1143.00" y="190.50">__..</text></g><g><title>__init__ (distutils/version.py) (12 samples, 0.44%)</title><rect x="1169" y="180" width="5" height="15" fill="rgb(252,97,6)"/><text x="1172.00" y="190.50"></text></g><g><title>parse (distutils/version.py) (11 samples, 0.40%)</title><rect x="1169" y="196" width="5" height="15" fill="rgb(234,172,18)"/><text x="1172.00" y="206.50"></text></g><g><title>__init__ (queue.py) (3 samples, 0.11%)</title><rect x="1176" y="196" width="1" height="15" fill="rgb(252,106,3)"/><text x="1179.00" y="206.50"></text></g><g><title>__init__ (joblib/parallel.py) (9 samples, 0.33%)</title><rect x="1174" y="180" width="4" height="15" fill="rgb(245,82,34)"/><text x="1177.00" y="190.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (3 samples, 0.11%)</title><rect x="1178" y="196" width="2" height="15" fill="rgb(236,41,6)"/><text x="1181.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (6 samples, 0.22%)</title><rect x="1178" y="180" width="3" height="15" fill="rgb(249,210,46)"/><text x="1181.00" y="190.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py) (5 samples, 0.18%)</title><rect x="1181" y="180" width="2" height="15" fill="rgb(208,171,24)"/><text x="1184.00" y="190.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (3 samples, 0.11%)</title><rect x="1182" y="196" width="1" height="15" fill="rgb(251,24,15)"/><text x="1185.00" y="206.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;) (4 samples, 0.15%)</title><rect x="1183" y="228" width="2" height="15" fill="rgb(240,44,36)"/><text x="1186.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (3 samples, 0.11%)</title><rect x="1184" y="244" width="1" height="15" fill="rgb(241,19,14)"/><text x="1187.00" y="254.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py) (110 samples, 4.04%)</title><rect x="1138" y="164" width="48" height="15" fill="rgb(253,213,36)"/><text x="1141.00" y="174.50">knei..</text></g><g><title>vstack (&lt;__array_function__ internals&gt;) (6 samples, 0.22%)</title><rect x="1183" y="180" width="3" height="15" fill="rgb(238,189,17)"/><text x="1186.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 0.22%)</title><rect x="1183" y="196" width="3" height="15" fill="rgb(230,138,52)"/><text x="1186.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py) (6 samples, 0.22%)</title><rect x="1183" y="212" width="3" height="15" fill="rgb(248,198,5)"/><text x="1186.00" y="222.50"></text></g><g><title>ones_like (&lt;__array_function__ internals&gt;) (3 samples, 0.11%)</title><rect x="1186" y="164" width="1" height="15" fill="rgb(213,84,15)"/><text x="1189.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (3 samples, 0.11%)</title><rect x="1187" y="180" width="2" height="15" fill="rgb(246,115,17)"/><text x="1190.00" y="190.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py) (154 samples, 5.65%)</title><rect x="1122" y="100" width="67" height="15" fill="rgb(219,209,16)"/><text x="1125.00" y="110.50">profile..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (154 samples, 5.65%)</title><rect x="1122" y="116" width="67" height="15" fill="rgb(246,74,16)"/><text x="1125.00" y="126.50">time_pr..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (153 samples, 5.61%)</title><rect x="1123" y="132" width="66" height="15" fill="rgb(226,8,29)"/><text x="1126.00" y="142.50">&lt;lambda..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py) (153 samples, 5.61%)</title><rect x="1123" y="148" width="66" height="15" fill="rgb(227,40,17)"/><text x="1126.00" y="158.50">predict..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (4 samples, 0.15%)</title><rect x="1187" y="164" width="2" height="15" fill="rgb(246,97,41)"/><text x="1190.00" y="174.50"></text></g><g><title>all (2,726 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(237,97,10)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py) (2,726 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(211,221,50)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py)</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py) (155 samples, 5.69%)</title><rect x="1122" y="68" width="68" height="15" fill="rgb(230,127,31)"/><text x="1125.00" y="78.50">profile..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py) (155 samples, 5.69%)</title><rect x="1122" y="84" width="68" height="15" fill="rgb(235,181,49)"/><text x="1125.00" y="94.50">setup_p..</text></g></g></svg>