<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1622" onload="init(evt)" viewBox="0 0 1200 1622" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1622" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1605.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1605.00"> </text><g id="frames"><g><title>&lt;module&gt; (onnx/__init__.py) (2 samples, 0.30%)</title><rect x="10" y="292" width="3" height="15" fill="rgb(252,9,12)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="308" width="3" height="15" fill="rgb(242,141,38)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="324" width="3" height="15" fill="rgb(243,147,42)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="340" width="3" height="15" fill="rgb(248,97,11)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="10" y="356" width="3" height="15" fill="rgb(236,182,21)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="372" width="3" height="15" fill="rgb(245,125,19)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (2 samples, 0.30%)</title><rect x="10" y="388" width="3" height="15" fill="rgb(215,203,44)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="404" width="3" height="15" fill="rgb(228,24,45)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="420" width="3" height="15" fill="rgb(246,164,29)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="436" width="3" height="15" fill="rgb(246,118,35)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="10" y="452" width="3" height="15" fill="rgb(254,79,23)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="468" width="3" height="15" fill="rgb(236,216,39)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (2 samples, 0.30%)</title><rect x="10" y="484" width="3" height="15" fill="rgb(206,195,46)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="500" width="3" height="15" fill="rgb(224,71,35)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="516" width="3" height="15" fill="rgb(245,116,38)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="532" width="3" height="15" fill="rgb(221,101,37)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="10" y="548" width="3" height="15" fill="rgb(237,97,42)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="564" width="3" height="15" fill="rgb(210,97,46)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (2 samples, 0.30%)</title><rect x="10" y="580" width="3" height="15" fill="rgb(218,63,54)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="596" width="3" height="15" fill="rgb(215,69,51)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="612" width="3" height="15" fill="rgb(209,55,30)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="628" width="3" height="15" fill="rgb(234,207,33)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="644" width="3" height="15" fill="rgb(253,154,46)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="660" width="3" height="15" fill="rgb(237,104,2)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="676" width="3" height="15" fill="rgb(244,163,35)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="10" y="692" width="3" height="15" fill="rgb(239,103,35)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="708" width="3" height="15" fill="rgb(224,228,27)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (2 samples, 0.30%)</title><rect x="10" y="724" width="3" height="15" fill="rgb(214,32,8)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="740" width="3" height="15" fill="rgb(252,23,1)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="756" width="3" height="15" fill="rgb(214,126,30)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="772" width="3" height="15" fill="rgb(244,11,31)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="10" y="788" width="3" height="15" fill="rgb(222,189,8)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="10" y="804" width="3" height="15" fill="rgb(227,124,36)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (2 samples, 0.30%)</title><rect x="10" y="820" width="3" height="15" fill="rgb(248,80,40)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (2 samples, 0.30%)</title><rect x="10" y="836" width="3" height="15" fill="rgb(215,178,35)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (2 samples, 0.30%)</title><rect x="10" y="852" width="3" height="15" fill="rgb(212,61,9)"/><text x="13.00" y="862.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (2 samples, 0.30%)</title><rect x="10" y="868" width="3" height="15" fill="rgb(239,89,32)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (2 samples, 0.30%)</title><rect x="10" y="884" width="3" height="15" fill="rgb(236,53,44)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (2 samples, 0.30%)</title><rect x="10" y="900" width="3" height="15" fill="rgb(227,68,50)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (2 samples, 0.30%)</title><rect x="10" y="916" width="3" height="15" fill="rgb(208,199,41)"/><text x="13.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="10" y="932" width="3" height="15" fill="rgb(243,69,48)"/><text x="13.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="10" y="948" width="3" height="15" fill="rgb(224,52,33)"/><text x="13.00" y="958.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="11" y="964" width="2" height="15" fill="rgb(205,227,41)"/><text x="14.00" y="974.50"></text></g><g><title>_path_join (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="11" y="980" width="2" height="15" fill="rgb(236,94,27)"/><text x="14.00" y="990.50"></text></g><g><title>&lt;listcomp&gt; (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="11" y="996" width="2" height="15" fill="rgb(210,6,20)"/><text x="14.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="500" width="2" height="15" fill="rgb(249,196,33)"/><text x="16.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="516" width="2" height="15" fill="rgb(237,119,35)"/><text x="16.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="532" width="2" height="15" fill="rgb(228,122,0)"/><text x="16.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="13" y="548" width="2" height="15" fill="rgb(210,189,33)"/><text x="16.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="564" width="2" height="15" fill="rgb(243,188,4)"/><text x="16.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (1 samples, 0.15%)</title><rect x="13" y="580" width="2" height="15" fill="rgb(206,44,51)"/><text x="16.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="596" width="2" height="15" fill="rgb(232,16,9)"/><text x="16.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="612" width="2" height="15" fill="rgb(236,172,8)"/><text x="16.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="628" width="2" height="15" fill="rgb(208,112,31)"/><text x="16.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="13" y="644" width="2" height="15" fill="rgb(225,3,51)"/><text x="16.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="660" width="2" height="15" fill="rgb(222,28,15)"/><text x="16.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (1 samples, 0.15%)</title><rect x="13" y="676" width="2" height="15" fill="rgb(224,135,36)"/><text x="16.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="692" width="2" height="15" fill="rgb(225,33,28)"/><text x="16.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="708" width="2" height="15" fill="rgb(208,151,37)"/><text x="16.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="724" width="2" height="15" fill="rgb(246,7,16)"/><text x="16.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="13" y="740" width="2" height="15" fill="rgb(254,229,30)"/><text x="16.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="756" width="2" height="15" fill="rgb(252,191,53)"/><text x="16.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (1 samples, 0.15%)</title><rect x="13" y="772" width="2" height="15" fill="rgb(234,114,14)"/><text x="16.00" y="782.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="788" width="2" height="15" fill="rgb(249,150,6)"/><text x="16.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="804" width="2" height="15" fill="rgb(242,77,8)"/><text x="16.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="820" width="2" height="15" fill="rgb(206,120,3)"/><text x="16.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="836" width="2" height="15" fill="rgb(215,108,34)"/><text x="16.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="852" width="2" height="15" fill="rgb(237,5,33)"/><text x="16.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="13" y="868" width="2" height="15" fill="rgb(241,38,49)"/><text x="16.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="884" width="2" height="15" fill="rgb(217,225,33)"/><text x="16.00" y="894.50"></text></g><g><title>&lt;module&gt; (scipy/stats/distributions.py) (1 samples, 0.15%)</title><rect x="13" y="900" width="2" height="15" fill="rgb(243,51,25)"/><text x="16.00" y="910.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="916" width="2" height="15" fill="rgb(239,5,44)"/><text x="16.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="932" width="2" height="15" fill="rgb(212,22,49)"/><text x="16.00" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="948" width="2" height="15" fill="rgb(230,64,44)"/><text x="16.00" y="958.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="964" width="2" height="15" fill="rgb(233,0,36)"/><text x="16.00" y="974.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="980" width="2" height="15" fill="rgb(246,117,47)"/><text x="16.00" y="990.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="13" y="996" width="2" height="15" fill="rgb(218,214,13)"/><text x="16.00" y="1006.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="1012" width="2" height="15" fill="rgb(211,183,36)"/><text x="16.00" y="1022.50"></text></g><g><title>&lt;module&gt; (scipy/stats/_continuous_distns.py) (1 samples, 0.15%)</title><rect x="13" y="1028" width="2" height="15" fill="rgb(232,199,22)"/><text x="16.00" y="1038.50"></text></g><g><title>__init__ (scipy/stats/_distn_infrastructure.py) (1 samples, 0.15%)</title><rect x="13" y="1044" width="2" height="15" fill="rgb(247,51,45)"/><text x="16.00" y="1054.50"></text></g><g><title>_construct_doc (scipy/stats/_distn_infrastructure.py) (1 samples, 0.15%)</title><rect x="13" y="1060" width="2" height="15" fill="rgb(248,8,30)"/><text x="16.00" y="1070.50"></text></g><g><title>docformat (scipy/_lib/doccer.py) (1 samples, 0.15%)</title><rect x="13" y="1076" width="2" height="15" fill="rgb(238,39,6)"/><text x="16.00" y="1086.50"></text></g><g><title>unicode_expandtabs (python3.7) (1 samples, 0.15%)</title><rect x="13" y="1092" width="2" height="15" fill="rgb(218,93,46)"/><text x="16.00" y="1102.50"></text></g><g><title>&lt;module&gt; (joblib/func_inspect.py) (1 samples, 0.15%)</title><rect x="15" y="900" width="1" height="15" fill="rgb(242,94,46)"/><text x="18.00" y="910.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="15" y="916" width="1" height="15" fill="rgb(252,84,53)"/><text x="18.00" y="926.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="15" y="932" width="1" height="15" fill="rgb(227,152,5)"/><text x="18.00" y="942.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="15" y="948" width="1" height="15" fill="rgb(225,153,47)"/><text x="18.00" y="958.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="15" y="964" width="1" height="15" fill="rgb(243,193,39)"/><text x="18.00" y="974.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="15" y="980" width="1" height="15" fill="rgb(224,54,7)"/><text x="18.00" y="990.50"></text></g><g><title>&lt;module&gt; (joblib/logger.py) (1 samples, 0.15%)</title><rect x="15" y="996" width="1" height="15" fill="rgb(237,60,1)"/><text x="18.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="15" y="1012" width="1" height="15" fill="rgb(227,167,29)"/><text x="18.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="15" y="1028" width="1" height="15" fill="rgb(252,187,33)"/><text x="18.00" y="1038.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="15" y="1044" width="1" height="15" fill="rgb(206,40,2)"/><text x="18.00" y="1054.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="15" y="1060" width="1" height="15" fill="rgb(240,189,30)"/><text x="18.00" y="1070.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="15" y="1076" width="1" height="15" fill="rgb(223,52,16)"/><text x="18.00" y="1086.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="15" y="1092" width="1" height="15" fill="rgb(238,101,22)"/><text x="18.00" y="1102.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.74%)</title><rect x="10" y="196" width="8" height="15" fill="rgb(231,222,23)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.74%)</title><rect x="10" y="212" width="8" height="15" fill="rgb(211,192,18)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.74%)</title><rect x="10" y="228" width="8" height="15" fill="rgb(218,162,14)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.74%)</title><rect x="10" y="244" width="8" height="15" fill="rgb(222,161,18)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 0.74%)</title><rect x="10" y="260" width="8" height="15" fill="rgb(247,130,37)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.74%)</title><rect x="10" y="276" width="8" height="15" fill="rgb(206,76,1)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (3 samples, 0.44%)</title><rect x="13" y="292" width="5" height="15" fill="rgb(243,224,50)"/><text x="16.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.44%)</title><rect x="13" y="308" width="5" height="15" fill="rgb(244,163,4)"/><text x="16.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.44%)</title><rect x="13" y="324" width="5" height="15" fill="rgb(236,160,26)"/><text x="16.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.44%)</title><rect x="13" y="340" width="5" height="15" fill="rgb(230,100,16)"/><text x="16.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.44%)</title><rect x="13" y="356" width="5" height="15" fill="rgb(235,111,13)"/><text x="16.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.44%)</title><rect x="13" y="372" width="5" height="15" fill="rgb(211,207,16)"/><text x="16.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (3 samples, 0.44%)</title><rect x="13" y="388" width="5" height="15" fill="rgb(212,197,25)"/><text x="16.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.44%)</title><rect x="13" y="404" width="5" height="15" fill="rgb(252,200,11)"/><text x="16.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.44%)</title><rect x="13" y="420" width="5" height="15" fill="rgb(205,9,0)"/><text x="16.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.44%)</title><rect x="13" y="436" width="5" height="15" fill="rgb(212,35,24)"/><text x="16.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.44%)</title><rect x="13" y="452" width="5" height="15" fill="rgb(209,135,7)"/><text x="16.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.44%)</title><rect x="13" y="468" width="5" height="15" fill="rgb(210,165,27)"/><text x="16.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (3 samples, 0.44%)</title><rect x="13" y="484" width="5" height="15" fill="rgb(218,206,11)"/><text x="16.00" y="494.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="500" width="3" height="15" fill="rgb(205,227,54)"/><text x="18.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="516" width="3" height="15" fill="rgb(230,38,39)"/><text x="18.00" y="526.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="532" width="3" height="15" fill="rgb(220,18,14)"/><text x="18.00" y="542.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="548" width="3" height="15" fill="rgb(245,34,9)"/><text x="18.00" y="558.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="564" width="3" height="15" fill="rgb(235,63,37)"/><text x="18.00" y="574.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="15" y="580" width="3" height="15" fill="rgb(227,162,13)"/><text x="18.00" y="590.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="596" width="3" height="15" fill="rgb(235,36,38)"/><text x="18.00" y="606.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/_joblib.py) (2 samples, 0.30%)</title><rect x="15" y="612" width="3" height="15" fill="rgb(216,89,23)"/><text x="18.00" y="622.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="628" width="3" height="15" fill="rgb(215,26,7)"/><text x="18.00" y="638.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="644" width="3" height="15" fill="rgb(252,124,24)"/><text x="18.00" y="654.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="660" width="3" height="15" fill="rgb(221,138,4)"/><text x="18.00" y="670.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="15" y="676" width="3" height="15" fill="rgb(209,1,5)"/><text x="18.00" y="686.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="692" width="3" height="15" fill="rgb(221,89,23)"/><text x="18.00" y="702.50"></text></g><g><title>&lt;module&gt; (joblib/__init__.py) (2 samples, 0.30%)</title><rect x="15" y="708" width="3" height="15" fill="rgb(245,138,6)"/><text x="18.00" y="718.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="724" width="3" height="15" fill="rgb(248,64,51)"/><text x="18.00" y="734.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="740" width="3" height="15" fill="rgb(226,140,6)"/><text x="18.00" y="750.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="756" width="3" height="15" fill="rgb(212,107,22)"/><text x="18.00" y="766.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="15" y="772" width="3" height="15" fill="rgb(243,225,37)"/><text x="18.00" y="782.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="788" width="3" height="15" fill="rgb(232,220,12)"/><text x="18.00" y="798.50"></text></g><g><title>&lt;module&gt; (joblib/memory.py) (2 samples, 0.30%)</title><rect x="15" y="804" width="3" height="15" fill="rgb(213,119,37)"/><text x="18.00" y="814.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="820" width="3" height="15" fill="rgb(233,71,50)"/><text x="18.00" y="830.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="836" width="3" height="15" fill="rgb(252,65,22)"/><text x="18.00" y="846.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="852" width="3" height="15" fill="rgb(230,168,52)"/><text x="18.00" y="862.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="15" y="868" width="3" height="15" fill="rgb(241,176,42)"/><text x="18.00" y="878.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="15" y="884" width="3" height="15" fill="rgb(246,55,24)"/><text x="18.00" y="894.50"></text></g><g><title>&lt;module&gt; (pydoc.py) (1 samples, 0.15%)</title><rect x="16" y="900" width="2" height="15" fill="rgb(248,143,24)"/><text x="19.00" y="910.50"></text></g><g><title>compile (re.py) (1 samples, 0.15%)</title><rect x="16" y="916" width="2" height="15" fill="rgb(245,133,8)"/><text x="19.00" y="926.50"></text></g><g><title>_compile (re.py) (1 samples, 0.15%)</title><rect x="16" y="932" width="2" height="15" fill="rgb(249,37,53)"/><text x="19.00" y="942.50"></text></g><g><title>compile (sre_compile.py) (1 samples, 0.15%)</title><rect x="16" y="948" width="2" height="15" fill="rgb(228,4,47)"/><text x="19.00" y="958.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="18" y="1124" width="2" height="15" fill="rgb(239,17,13)"/><text x="21.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="18" y="1140" width="2" height="15" fill="rgb(227,211,15)"/><text x="21.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="18" y="1156" width="2" height="15" fill="rgb(210,179,2)"/><text x="21.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="18" y="1172" width="2" height="15" fill="rgb(241,227,19)"/><text x="21.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="18" y="1188" width="2" height="15" fill="rgb(224,192,35)"/><text x="21.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py) (1 samples, 0.15%)</title><rect x="18" y="1204" width="2" height="15" fill="rgb(238,190,10)"/><text x="21.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="18" y="1220" width="2" height="15" fill="rgb(227,88,20)"/><text x="21.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="18" y="1236" width="2" height="15" fill="rgb(215,54,51)"/><text x="21.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="18" y="1252" width="2" height="15" fill="rgb(230,39,31)"/><text x="21.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="18" y="1268" width="2" height="15" fill="rgb(236,75,11)"/><text x="21.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="18" y="1284" width="2" height="15" fill="rgb(233,183,5)"/><text x="21.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_container.py) (1 samples, 0.15%)</title><rect x="18" y="1300" width="2" height="15" fill="rgb(236,46,9)"/><text x="21.00" y="1310.50"></text></g><g><title>_get_operation_list (skl2onnx/common/_container.py) (1 samples, 0.15%)</title><rect x="18" y="1316" width="2" height="15" fill="rgb(222,191,54)"/><text x="21.00" y="1326.50"></text></g><g><title>getsource (inspect.py) (1 samples, 0.15%)</title><rect x="18" y="1332" width="2" height="15" fill="rgb(217,124,43)"/><text x="21.00" y="1342.50"></text></g><g><title>getsourcelines (inspect.py) (1 samples, 0.15%)</title><rect x="18" y="1348" width="2" height="15" fill="rgb(236,206,17)"/><text x="21.00" y="1358.50"></text></g><g><title>getblock (inspect.py) (1 samples, 0.15%)</title><rect x="18" y="1364" width="2" height="15" fill="rgb(218,137,50)"/><text x="21.00" y="1374.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (2 samples, 0.30%)</title><rect x="18" y="436" width="4" height="15" fill="rgb(236,69,38)"/><text x="21.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="452" width="4" height="15" fill="rgb(241,121,47)"/><text x="21.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="468" width="4" height="15" fill="rgb(229,127,19)"/><text x="21.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="484" width="4" height="15" fill="rgb(208,94,27)"/><text x="21.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="500" width="4" height="15" fill="rgb(237,140,43)"/><text x="21.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="516" width="4" height="15" fill="rgb(241,223,23)"/><text x="21.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="532" width="4" height="15" fill="rgb(215,113,49)"/><text x="21.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="18" y="548" width="4" height="15" fill="rgb(207,165,5)"/><text x="21.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="564" width="4" height="15" fill="rgb(241,26,17)"/><text x="21.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (2 samples, 0.30%)</title><rect x="18" y="580" width="4" height="15" fill="rgb(217,91,20)"/><text x="21.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="596" width="4" height="15" fill="rgb(214,3,25)"/><text x="21.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="612" width="4" height="15" fill="rgb(222,222,42)"/><text x="21.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="628" width="4" height="15" fill="rgb(244,229,48)"/><text x="21.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="18" y="644" width="4" height="15" fill="rgb(208,194,22)"/><text x="21.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="660" width="4" height="15" fill="rgb(227,95,17)"/><text x="21.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (2 samples, 0.30%)</title><rect x="18" y="676" width="4" height="15" fill="rgb(217,70,26)"/><text x="21.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="692" width="4" height="15" fill="rgb(245,179,2)"/><text x="21.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="708" width="4" height="15" fill="rgb(230,223,51)"/><text x="21.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="724" width="4" height="15" fill="rgb(219,181,29)"/><text x="21.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="18" y="740" width="4" height="15" fill="rgb(219,99,16)"/><text x="21.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="756" width="4" height="15" fill="rgb(235,141,51)"/><text x="21.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (2 samples, 0.30%)</title><rect x="18" y="772" width="4" height="15" fill="rgb(209,182,45)"/><text x="21.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="788" width="4" height="15" fill="rgb(243,203,21)"/><text x="21.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="804" width="4" height="15" fill="rgb(226,129,26)"/><text x="21.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="820" width="4" height="15" fill="rgb(223,228,42)"/><text x="21.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="18" y="836" width="4" height="15" fill="rgb(227,78,10)"/><text x="21.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="852" width="4" height="15" fill="rgb(233,117,33)"/><text x="21.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (2 samples, 0.30%)</title><rect x="18" y="868" width="4" height="15" fill="rgb(223,133,12)"/><text x="21.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="884" width="4" height="15" fill="rgb(248,203,38)"/><text x="21.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="900" width="4" height="15" fill="rgb(209,164,3)"/><text x="21.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="916" width="4" height="15" fill="rgb(241,4,5)"/><text x="21.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="932" width="4" height="15" fill="rgb(213,168,19)"/><text x="21.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="948" width="4" height="15" fill="rgb(218,160,17)"/><text x="21.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="964" width="4" height="15" fill="rgb(245,7,5)"/><text x="21.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="18" y="980" width="4" height="15" fill="rgb(243,164,22)"/><text x="21.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="996" width="4" height="15" fill="rgb(248,21,4)"/><text x="21.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (2 samples, 0.30%)</title><rect x="18" y="1012" width="4" height="15" fill="rgb(232,144,15)"/><text x="21.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="1028" width="4" height="15" fill="rgb(220,117,48)"/><text x="21.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="1044" width="4" height="15" fill="rgb(248,220,9)"/><text x="21.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="1060" width="4" height="15" fill="rgb(251,86,41)"/><text x="21.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.30%)</title><rect x="18" y="1076" width="4" height="15" fill="rgb(240,173,45)"/><text x="21.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="18" y="1092" width="4" height="15" fill="rgb(218,160,15)"/><text x="21.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (2 samples, 0.30%)</title><rect x="18" y="1108" width="4" height="15" fill="rgb(254,89,11)"/><text x="21.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1124" width="2" height="15" fill="rgb(244,224,44)"/><text x="23.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1140" width="2" height="15" fill="rgb(221,178,10)"/><text x="23.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1156" width="2" height="15" fill="rgb(244,61,19)"/><text x="23.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1172" width="2" height="15" fill="rgb(235,79,48)"/><text x="23.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1188" width="2" height="15" fill="rgb(214,77,22)"/><text x="23.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="20" y="1204" width="2" height="15" fill="rgb(240,168,54)"/><text x="23.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1220" width="2" height="15" fill="rgb(248,56,35)"/><text x="23.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (1 samples, 0.15%)</title><rect x="20" y="1236" width="2" height="15" fill="rgb(224,86,54)"/><text x="23.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1252" width="2" height="15" fill="rgb(247,49,22)"/><text x="23.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1268" width="2" height="15" fill="rgb(236,22,5)"/><text x="23.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1284" width="2" height="15" fill="rgb(236,76,41)"/><text x="23.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1300" width="2" height="15" fill="rgb(221,209,37)"/><text x="23.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1316" width="2" height="15" fill="rgb(241,56,14)"/><text x="23.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="20" y="1332" width="2" height="15" fill="rgb(251,106,50)"/><text x="23.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1348" width="2" height="15" fill="rgb(248,223,18)"/><text x="23.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (1 samples, 0.15%)</title><rect x="20" y="1364" width="2" height="15" fill="rgb(206,218,20)"/><text x="23.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1380" width="2" height="15" fill="rgb(210,142,9)"/><text x="23.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1396" width="2" height="15" fill="rgb(243,3,7)"/><text x="23.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1412" width="2" height="15" fill="rgb(249,79,30)"/><text x="23.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="20" y="1428" width="2" height="15" fill="rgb(249,173,7)"/><text x="23.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="20" y="1444" width="2" height="15" fill="rgb(222,106,1)"/><text x="23.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.15%)</title><rect x="20" y="1460" width="2" height="15" fill="rgb(248,207,3)"/><text x="23.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.15%)</title><rect x="20" y="1476" width="2" height="15" fill="rgb(217,150,52)"/><text x="23.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (1 samples, 0.15%)</title><rect x="20" y="1492" width="2" height="15" fill="rgb(236,30,2)"/><text x="23.00" y="1502.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py) (1 samples, 0.15%)</title><rect x="20" y="1508" width="2" height="15" fill="rgb(251,136,3)"/><text x="23.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py) (1 samples, 0.15%)</title><rect x="20" y="1524" width="2" height="15" fill="rgb(212,7,10)"/><text x="23.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py) (1 samples, 0.15%)</title><rect x="20" y="1540" width="2" height="15" fill="rgb(239,70,27)"/><text x="23.00" y="1550.50"></text></g><g><title>new_context (jinja2/environment.py) (1 samples, 0.15%)</title><rect x="20" y="1556" width="2" height="15" fill="rgb(216,104,38)"/><text x="23.00" y="1566.50"></text></g><g><title>new_context (jinja2/runtime.py) (1 samples, 0.15%)</title><rect x="20" y="1572" width="2" height="15" fill="rgb(207,163,48)"/><text x="23.00" y="1582.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="22" y="484" width="1" height="15" fill="rgb(228,121,23)"/><text x="25.00" y="494.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="22" y="500" width="1" height="15" fill="rgb(237,21,28)"/><text x="25.00" y="510.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="22" y="516" width="1" height="15" fill="rgb(225,57,36)"/><text x="25.00" y="526.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="22" y="532" width="1" height="15" fill="rgb(206,96,18)"/><text x="25.00" y="542.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="22" y="548" width="1" height="15" fill="rgb(236,132,40)"/><text x="25.00" y="558.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="22" y="564" width="1" height="15" fill="rgb(214,127,19)"/><text x="25.00" y="574.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="22" y="580" width="1" height="15" fill="rgb(211,111,23)"/><text x="25.00" y="590.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.15%)</title><rect x="22" y="596" width="1" height="15" fill="rgb(210,201,50)"/><text x="25.00" y="606.50"></text></g><g><title>__xstat (libc-2.29.so) (1 samples, 0.15%)</title><rect x="22" y="612" width="1" height="15" fill="rgb(249,178,29)"/><text x="25.00" y="622.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.33%)</title><rect x="10" y="68" width="15" height="15" fill="rgb(228,204,48)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.33%)</title><rect x="10" y="84" width="15" height="15" fill="rgb(230,152,25)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.33%)</title><rect x="10" y="100" width="15" height="15" fill="rgb(254,91,29)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 1.33%)</title><rect x="10" y="116" width="15" height="15" fill="rgb(236,146,26)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.33%)</title><rect x="10" y="132" width="15" height="15" fill="rgb(205,124,23)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py) (9 samples, 1.33%)</title><rect x="10" y="148" width="15" height="15" fill="rgb(224,155,7)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.33%)</title><rect x="10" y="164" width="15" height="15" fill="rgb(245,139,47)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.33%)</title><rect x="10" y="180" width="15" height="15" fill="rgb(236,72,35)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.59%)</title><rect x="18" y="196" width="7" height="15" fill="rgb(230,19,20)"/><text x="21.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.59%)</title><rect x="18" y="212" width="7" height="15" fill="rgb(250,26,51)"/><text x="21.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.59%)</title><rect x="18" y="228" width="7" height="15" fill="rgb(247,66,16)"/><text x="21.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (4 samples, 0.59%)</title><rect x="18" y="244" width="7" height="15" fill="rgb(209,30,13)"/><text x="21.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.59%)</title><rect x="18" y="260" width="7" height="15" fill="rgb(222,49,46)"/><text x="21.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.59%)</title><rect x="18" y="276" width="7" height="15" fill="rgb(242,64,26)"/><text x="21.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.59%)</title><rect x="18" y="292" width="7" height="15" fill="rgb(237,225,34)"/><text x="21.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.59%)</title><rect x="18" y="308" width="7" height="15" fill="rgb(225,54,38)"/><text x="21.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.59%)</title><rect x="18" y="324" width="7" height="15" fill="rgb(216,209,45)"/><text x="21.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 0.59%)</title><rect x="18" y="340" width="7" height="15" fill="rgb(246,163,21)"/><text x="21.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.59%)</title><rect x="18" y="356" width="7" height="15" fill="rgb(214,79,3)"/><text x="21.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.59%)</title><rect x="18" y="372" width="7" height="15" fill="rgb(220,150,36)"/><text x="21.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.59%)</title><rect x="18" y="388" width="7" height="15" fill="rgb(212,33,7)"/><text x="21.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.59%)</title><rect x="18" y="404" width="7" height="15" fill="rgb(234,127,5)"/><text x="21.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.59%)</title><rect x="18" y="420" width="7" height="15" fill="rgb(221,128,34)"/><text x="21.00" y="430.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/__init__.py) (2 samples, 0.30%)</title><rect x="22" y="436" width="3" height="15" fill="rgb(252,212,31)"/><text x="25.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="22" y="452" width="3" height="15" fill="rgb(227,141,38)"/><text x="25.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.30%)</title><rect x="22" y="468" width="3" height="15" fill="rgb(220,132,23)"/><text x="25.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="23" y="484" width="2" height="15" fill="rgb(210,63,17)"/><text x="26.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="23" y="500" width="2" height="15" fill="rgb(224,115,47)"/><text x="26.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="23" y="516" width="2" height="15" fill="rgb(247,92,13)"/><text x="26.00" y="526.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/_base.py) (1 samples, 0.15%)</title><rect x="23" y="532" width="2" height="15" fill="rgb(215,81,10)"/><text x="26.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="23" y="548" width="2" height="15" fill="rgb(225,113,27)"/><text x="26.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="23" y="564" width="2" height="15" fill="rgb(247,173,1)"/><text x="26.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="23" y="580" width="2" height="15" fill="rgb(233,229,34)"/><text x="26.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="23" y="596" width="2" height="15" fill="rgb(247,161,42)"/><text x="26.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="23" y="612" width="2" height="15" fill="rgb(218,109,21)"/><text x="26.00" y="622.50"></text></g><g><title>&lt;module&gt; (urllib/request.py) (1 samples, 0.15%)</title><rect x="23" y="628" width="2" height="15" fill="rgb(253,82,11)"/><text x="26.00" y="638.50"></text></g><g><title>AbstractBasicAuthHandler (urllib/request.py) (1 samples, 0.15%)</title><rect x="23" y="644" width="2" height="15" fill="rgb(233,31,36)"/><text x="26.00" y="654.50"></text></g><g><title>compile (re.py) (1 samples, 0.15%)</title><rect x="23" y="660" width="2" height="15" fill="rgb(222,19,16)"/><text x="26.00" y="670.50"></text></g><g><title>_compile (re.py) (1 samples, 0.15%)</title><rect x="23" y="676" width="2" height="15" fill="rgb(226,219,29)"/><text x="26.00" y="686.50"></text></g><g><title>compile (sre_compile.py) (1 samples, 0.15%)</title><rect x="23" y="692" width="2" height="15" fill="rgb(228,35,27)"/><text x="26.00" y="702.50"></text></g><g><title>parse (sre_parse.py) (1 samples, 0.15%)</title><rect x="23" y="708" width="2" height="15" fill="rgb(228,112,39)"/><text x="26.00" y="718.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.15%)</title><rect x="23" y="724" width="2" height="15" fill="rgb(231,95,9)"/><text x="26.00" y="734.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.15%)</title><rect x="23" y="740" width="2" height="15" fill="rgb(231,68,50)"/><text x="26.00" y="750.50"></text></g><g><title>get (sre_parse.py) (1 samples, 0.15%)</title><rect x="23" y="756" width="2" height="15" fill="rgb(221,187,17)"/><text x="26.00" y="766.50"></text></g><g><title>0x7f7c247f6ff9 (?) (1 samples, 0.15%)</title><rect x="25" y="212" width="2" height="15" fill="rgb(228,132,7)"/><text x="28.00" y="222.50"></text></g><g><title>0x7f7c247f1ef6 (?) (1 samples, 0.15%)</title><rect x="25" y="228" width="2" height="15" fill="rgb(214,19,2)"/><text x="28.00" y="238.50"></text></g><g><title>0x7f7c247e6962 (?) (1 samples, 0.15%)</title><rect x="25" y="244" width="2" height="15" fill="rgb(224,73,34)"/><text x="28.00" y="254.50"></text></g><g><title>0x7f7c2481a7a7 (?) (1 samples, 0.15%)</title><rect x="25" y="260" width="2" height="15" fill="rgb(228,117,19)"/><text x="28.00" y="270.50"></text></g><g><title>0x7f7c2481a379 (?) (1 samples, 0.15%)</title><rect x="25" y="276" width="2" height="15" fill="rgb(232,88,47)"/><text x="28.00" y="286.50"></text></g><g><title>0x7f7c24c788b8 (?) (1 samples, 0.15%)</title><rect x="25" y="292" width="2" height="15" fill="rgb(231,208,20)"/><text x="28.00" y="302.50"></text></g><g><title>0x7f7c24c76c7f (?) (1 samples, 0.15%)</title><rect x="25" y="308" width="2" height="15" fill="rgb(240,176,44)"/><text x="28.00" y="318.50"></text></g><g><title>0x7f7c24c8999c (?) (1 samples, 0.15%)</title><rect x="25" y="324" width="2" height="15" fill="rgb(249,136,52)"/><text x="28.00" y="334.50"></text></g><g><title>0x7f7c249a719e (?) (1 samples, 0.15%)</title><rect x="25" y="340" width="2" height="15" fill="rgb(209,85,45)"/><text x="28.00" y="350.50"></text></g><g><title>0x7f7c249a3eb7 (?) (1 samples, 0.15%)</title><rect x="25" y="356" width="2" height="15" fill="rgb(228,20,39)"/><text x="28.00" y="366.50"></text></g><g><title>onnxruntime::Tensor::MutableData&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="30" y="356" width="2" height="15" fill="rgb(223,84,21)"/><text x="33.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="420" y="388" width="2" height="15" fill="rgb(233,148,7)"/><text x="423.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="420" y="404" width="2" height="15" fill="rgb(205,217,18)"/><text x="423.00" y="414.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (224 samples, 33.19%)</title><rect x="32" y="356" width="392" height="15" fill="rgb(225,10,1)"/><text x="35.00" y="366.50">onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Proce..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;long, float&gt;&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.44%)</title><rect x="419" y="372" width="5" height="15" fill="rgb(227,150,20)"/><text x="422.00" y="382.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="422" y="388" width="2" height="15" fill="rgb(212,22,36)"/><text x="425.00" y="398.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (229 samples, 33.93%)</title><rect x="27" y="340" width="400" height="15" fill="rgb(212,122,31)"/><text x="30.00" y="350.50">onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Comput..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.30%)</title><rect x="424" y="356" width="3" height="15" fill="rgb(240,84,9)"/><text x="427.00" y="366.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, OrtMemType&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt; &gt;::_M_erase [clone .localalias.69] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.30%)</title><rect x="424" y="372" width="3" height="15" fill="rgb(247,71,4)"/><text x="427.00" y="382.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.15%)</title><rect x="426" y="388" width="1" height="15" fill="rgb(220,191,29)"/><text x="429.00" y="398.50"></text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (233 samples, 34.52%)</title><rect x="27" y="292" width="407" height="15" fill="rgb(250,152,36)"/><text x="30.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnx..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (233 samples, 34.52%)</title><rect x="27" y="308" width="407" height="15" fill="rgb(245,66,43)"/><text x="30.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (233 samples, 34.52%)</title><rect x="27" y="324" width="407" height="15" fill="rgb(213,10,26)"/><text x="30.00" y="334.50">onnxruntime::SequentialExecutor::Execute (onnxruntime/c..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="427" y="340" width="7" height="15" fill="rgb(211,84,22)"/><text x="430.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.44%)</title><rect x="429" y="356" width="5" height="15" fill="rgb(253,94,45)"/><text x="432.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.44%)</title><rect x="429" y="372" width="5" height="15" fill="rgb(218,16,44)"/><text x="432.00" y="382.50"></text></g><g><title>0x7f7c64839d7e (libc-2.29.so) (1 samples, 0.15%)</title><rect x="433" y="388" width="1" height="15" fill="rgb(212,77,51)"/><text x="436.00" y="398.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (234 samples, 34.67%)</title><rect x="27" y="260" width="409" height="15" fill="rgb(234,62,12)"/><text x="30.00" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/on..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (234 samples, 34.67%)</title><rect x="27" y="276" width="409" height="15" fill="rgb(221,19,7)"/><text x="30.00" y="286.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/on..</text></g><g><title>std::chrono::_V2::system_clock::now (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="434" y="292" width="2" height="15" fill="rgb(252,176,48)"/><text x="437.00" y="302.50"></text></g><g><title>clock_gettime (libc-2.29.so) (1 samples, 0.15%)</title><rect x="434" y="308" width="2" height="15" fill="rgb(205,76,53)"/><text x="437.00" y="318.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (236 samples, 34.96%)</title><rect x="27" y="244" width="413" height="15" fill="rgb(244,128,10)"/><text x="30.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::module&amp;)..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.30%)</title><rect x="436" y="260" width="4" height="15" fill="rgb(226,21,46)"/><text x="439.00" y="270.50"></text></g><g><title>profile_ort (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (238 samples, 35.26%)</title><rect x="25" y="68" width="416" height="15" fill="rgb(210,178,47)"/><text x="28.00" y="78.50">profile_ort (bench_RandomForestClassifier_default_b_cl_1..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (238 samples, 35.26%)</title><rect x="25" y="84" width="416" height="15" fill="rgb(253,15,34)"/><text x="28.00" y="94.50">setup_profile (bench_RandomForestClassifier_default_b_cl..</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (238 samples, 35.26%)</title><rect x="25" y="100" width="416" height="15" fill="rgb(245,197,13)"/><text x="28.00" y="110.50">profile (bench_RandomForestClassifier_default_b_cl_1000_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (238 samples, 35.26%)</title><rect x="25" y="116" width="416" height="15" fill="rgb(230,87,48)"/><text x="28.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (238 samples, 35.26%)</title><rect x="25" y="132" width="416" height="15" fill="rgb(243,104,31)"/><text x="28.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (238 samples, 35.26%)</title><rect x="25" y="148" width="416" height="15" fill="rgb(254,120,6)"/><text x="28.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (238 samples, 35.26%)</title><rect x="25" y="164" width="416" height="15" fill="rgb(233,159,48)"/><text x="28.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (238 samples, 35.26%)</title><rect x="25" y="180" width="416" height="15" fill="rgb(223,162,33)"/><text x="28.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (238 samples, 35.26%)</title><rect x="25" y="196" width="416" height="15" fill="rgb(215,177,11)"/><text x="28.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (237 samples, 35.11%)</title><rect x="27" y="212" width="414" height="15" fill="rgb(223,41,10)"/><text x="30.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onn..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (237 samples, 35.11%)</title><rect x="27" y="228" width="414" height="15" fill="rgb(242,162,49)"/><text x="30.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::pyt..</text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic [clone .constprop.381] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="440" y="244" width="1" height="15" fill="rgb(227,40,50)"/><text x="443.00" y="254.50"></text></g><g><title>pybind11::detail::get_type_info [clone .constprop.384] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="440" y="260" width="1" height="15" fill="rgb(239,206,54)"/><text x="443.00" y="270.50"></text></g><g><title>std::_Hashtable&lt;std::type_index, std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt;, std::allocator&lt;std::pair&lt;std::type_index const, pybind11::detail::type_info*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::type_index&gt;, std::hash&lt;std::type_index&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node [clone .isra.1152] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="440" y="276" width="1" height="15" fill="rgb(238,1,49)"/><text x="443.00" y="286.50"></text></g><g><title>0x7f7c254d6422 (?) (1 samples, 0.15%)</title><rect x="441" y="244" width="2" height="15" fill="rgb(242,141,54)"/><text x="444.00" y="254.50"></text></g><g><title>0x7f7c254dc89e (?) (1 samples, 0.15%)</title><rect x="441" y="260" width="2" height="15" fill="rgb(222,114,6)"/><text x="444.00" y="270.50"></text></g><g><title>0x7f7c254dc74f (?) (1 samples, 0.15%)</title><rect x="441" y="276" width="2" height="15" fill="rgb(233,137,51)"/><text x="444.00" y="286.50"></text></g><g><title>0x7f7c254e2a3a (?) (1 samples, 0.15%)</title><rect x="441" y="292" width="2" height="15" fill="rgb(247,23,37)"/><text x="444.00" y="302.50"></text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (1 samples, 0.15%)</title><rect x="441" y="308" width="2" height="15" fill="rgb(231,33,15)"/><text x="444.00" y="318.50"></text></g><g><title>0x7f7c254dd78c (?) (1 samples, 0.15%)</title><rect x="441" y="324" width="2" height="15" fill="rgb(248,158,40)"/><text x="444.00" y="334.50"></text></g><g><title>0x7f7c254c9d79 (?) (1 samples, 0.15%)</title><rect x="441" y="340" width="2" height="15" fill="rgb(253,135,40)"/><text x="444.00" y="350.50"></text></g><g><title>0x7f7c2e7feab9 (libgomp.so.1.0.0) (2 samples, 0.30%)</title><rect x="443" y="452" width="4" height="15" fill="rgb(243,202,25)"/><text x="446.00" y="462.50"></text></g><g><title>0x7f7c2e7ffea9 (libgomp.so.1.0.0) (2 samples, 0.30%)</title><rect x="443" y="468" width="4" height="15" fill="rgb(235,93,23)"/><text x="446.00" y="478.50"></text></g><g><title>0x7f7c2e7fddaa (libgomp.so.1.0.0) (1 samples, 0.15%)</title><rect x="447" y="468" width="1" height="15" fill="rgb(206,227,9)"/><text x="450.00" y="478.50"></text></g><g><title>0x7f7c2e7ffcfb (libgomp.so.1.0.0) (1 samples, 0.15%)</title><rect x="447" y="484" width="1" height="15" fill="rgb(249,62,10)"/><text x="450.00" y="494.50"></text></g><g><title>std::_Bit_reference::operator bool (stl_bvector.h) (1 samples, 0.15%)</title><rect x="499" y="500" width="2" height="15" fill="rgb(232,45,42)"/><text x="502.00" y="510.50"></text></g><g><title>std::isnan (cmath) (2 samples, 0.30%)</title><rect x="501" y="500" width="3" height="15" fill="rgb(232,108,7)"/><text x="504.00" y="510.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_end (stl_tree.h) (1 samples, 0.15%)</title><rect x="506" y="532" width="2" height="15" fill="rgb(221,137,28)"/><text x="509.00" y="542.50"></text></g><g><title>std::map&lt;long, long, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_map.h) (30 samples, 4.44%)</title><rect x="504" y="500" width="53" height="15" fill="rgb(254,191,24)"/><text x="507.00" y="510.50">std::..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h) (30 samples, 4.44%)</title><rect x="504" y="516" width="53" height="15" fill="rgb(252,85,33)"/><text x="507.00" y="526.50">std::..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h) (28 samples, 4.15%)</title><rect x="508" y="532" width="49" height="15" fill="rgb(210,162,6)"/><text x="511.00" y="542.50">std:..</text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (stl_bvector.h) (2 samples, 0.30%)</title><rect x="557" y="500" width="3" height="15" fill="rgb(244,95,1)"/><text x="560.00" y="510.50"></text></g><g><title>std::_Bit_iterator::operator* (stl_bvector.h) (2 samples, 0.30%)</title><rect x="557" y="516" width="3" height="15" fill="rgb(218,28,49)"/><text x="560.00" y="526.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::operator[] (stl_vector.h) (1 samples, 0.15%)</title><rect x="560" y="500" width="2" height="15" fill="rgb(217,19,25)"/><text x="563.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (67 samples, 9.93%)</title><rect x="450" y="484" width="117" height="15" fill="rgb(213,194,38)"/><text x="453.00" y="494.50">RuntimeTreeEns..</text></g><g><title>std::vector&lt;std::tuple&lt;long, long, long, float&gt;, std::allocator&lt;std::tuple&lt;long, long, long, float&gt; &gt; &gt;::operator[] (stl_vector.h) (3 samples, 0.44%)</title><rect x="562" y="500" width="5" height="15" fill="rgb(216,184,12)"/><text x="565.00" y="510.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (73 samples, 10.81%)</title><rect x="441" y="100" width="128" height="15" fill="rgb(224,205,7)"/><text x="444.00" y="110.50">profile (bench_R..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (73 samples, 10.81%)</title><rect x="441" y="116" width="128" height="15" fill="rgb(221,153,12)"/><text x="444.00" y="126.50">time_predict (ml..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (73 samples, 10.81%)</title><rect x="441" y="132" width="128" height="15" fill="rgb(226,127,34)"/><text x="444.00" y="142.50">&lt;lambda&gt; (mlprod..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (73 samples, 10.81%)</title><rect x="441" y="148" width="128" height="15" fill="rgb(235,209,42)"/><text x="444.00" y="158.50">run (mlprodict/o..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (73 samples, 10.81%)</title><rect x="441" y="164" width="128" height="15" fill="rgb(230,25,5)"/><text x="444.00" y="174.50">_run_sequence_ru..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (73 samples, 10.81%)</title><rect x="441" y="180" width="128" height="15" fill="rgb(206,77,51)"/><text x="444.00" y="190.50">run (mlprodict/o..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (73 samples, 10.81%)</title><rect x="441" y="196" width="128" height="15" fill="rgb(241,70,24)"/><text x="444.00" y="206.50">run (mlprodict/o..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (73 samples, 10.81%)</title><rect x="441" y="212" width="128" height="15" fill="rgb(246,45,20)"/><text x="444.00" y="222.50">run (mlprodict/o..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py) (73 samples, 10.81%)</title><rect x="441" y="228" width="128" height="15" fill="rgb(216,80,50)"/><text x="444.00" y="238.50">_run (mlprodict/..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (72 samples, 10.67%)</title><rect x="443" y="244" width="126" height="15" fill="rgb(253,139,10)"/><text x="446.00" y="254.50">pybind11::cpp_f..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (72 samples, 10.67%)</title><rect x="443" y="260" width="126" height="15" fill="rgb(243,135,43)"/><text x="446.00" y="270.50">void pybind11::..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (72 samples, 10.67%)</title><rect x="443" y="276" width="126" height="15" fill="rgb(231,131,27)"/><text x="446.00" y="286.50">void pybind11::..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (72 samples, 10.67%)</title><rect x="443" y="292" width="126" height="15" fill="rgb(239,76,32)"/><text x="446.00" y="302.50">pybind11::detai..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (72 samples, 10.67%)</title><rect x="443" y="308" width="126" height="15" fill="rgb(212,172,53)"/><text x="446.00" y="318.50">pybind11::detai..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (72 samples, 10.67%)</title><rect x="443" y="324" width="126" height="15" fill="rgb(224,207,35)"/><text x="446.00" y="334.50">pybind11::cpp_f..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (72 samples, 10.67%)</title><rect x="443" y="340" width="126" height="15" fill="rgb(234,156,12)"/><text x="446.00" y="350.50">pybind11::array..</text></g><g><title>pybind11::array::~array (numpy.h) (72 samples, 10.67%)</title><rect x="443" y="356" width="126" height="15" fill="rgb(242,166,48)"/><text x="446.00" y="366.50">pybind11::array..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (72 samples, 10.67%)</title><rect x="443" y="372" width="126" height="15" fill="rgb(220,34,27)"/><text x="446.00" y="382.50">pybind11::buffe..</text></g><g><title>pybind11::object::~object (pytypes.h) (72 samples, 10.67%)</title><rect x="443" y="388" width="126" height="15" fill="rgb(244,136,35)"/><text x="446.00" y="398.50">pybind11::objec..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (72 samples, 10.67%)</title><rect x="443" y="404" width="126" height="15" fill="rgb(214,204,10)"/><text x="446.00" y="414.50">pybind11::handl..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (72 samples, 10.67%)</title><rect x="443" y="420" width="126" height="15" fill="rgb(207,214,13)"/><text x="446.00" y="430.50">RuntimeTreeEnse..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (72 samples, 10.67%)</title><rect x="443" y="436" width="126" height="15" fill="rgb(242,92,30)"/><text x="446.00" y="446.50">pybind11::gil_s..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (70 samples, 10.37%)</title><rect x="447" y="452" width="122" height="15" fill="rgb(209,82,28)"/><text x="450.00" y="462.50">GOMP_parallel (..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (69 samples, 10.22%)</title><rect x="448" y="468" width="121" height="15" fill="rgb(207,228,19)"/><text x="451.00" y="478.50">RuntimeTreeEnse..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::size (stl_vector.h) (1 samples, 0.15%)</title><rect x="567" y="484" width="2" height="15" fill="rgb(227,99,42)"/><text x="570.00" y="494.50"></text></g><g><title>add_node (skl2onnx/common/_container.py) (1 samples, 0.15%)</title><rect x="569" y="212" width="2" height="15" fill="rgb(230,218,35)"/><text x="572.00" y="222.50"></text></g><g><title>make_node (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.15%)</title><rect x="569" y="228" width="2" height="15" fill="rgb(223,5,0)"/><text x="572.00" y="238.50"></text></g><g><title>google::protobuf::python::repeated_composite_container::Extend (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="569" y="244" width="2" height="15" fill="rgb(250,45,9)"/><text x="572.00" y="254.50"></text></g><g><title>&lt;genexpr&gt; (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.15%)</title><rect x="569" y="260" width="2" height="15" fill="rgb(208,24,47)"/><text x="572.00" y="270.50"></text></g><g><title>make_attribute (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.15%)</title><rect x="569" y="276" width="2" height="15" fill="rgb(231,96,10)"/><text x="572.00" y="286.50"></text></g><g><title>&lt;listcomp&gt; (skl2onnx/proto/onnx_helper_modified.py) (1 samples, 0.15%)</title><rect x="569" y="292" width="2" height="15" fill="rgb(223,35,37)"/><text x="572.00" y="302.50"></text></g><g><title>_to_bytes_or_false (onnx/helper.py) (1 samples, 0.15%)</title><rect x="569" y="308" width="2" height="15" fill="rgb(248,70,19)"/><text x="572.00" y="318.50"></text></g><g><title>profile_pyrt (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (75 samples, 11.11%)</title><rect x="441" y="68" width="131" height="15" fill="rgb(247,174,23)"/><text x="444.00" y="78.50">profile_pyrt (be..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (75 samples, 11.11%)</title><rect x="441" y="84" width="131" height="15" fill="rgb(250,42,48)"/><text x="444.00" y="94.50">setup_profile (b..</text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.30%)</title><rect x="569" y="100" width="3" height="15" fill="rgb(229,194,50)"/><text x="572.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.30%)</title><rect x="569" y="116" width="3" height="15" fill="rgb(247,2,35)"/><text x="572.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py) (2 samples, 0.30%)</title><rect x="569" y="132" width="3" height="15" fill="rgb(251,113,42)"/><text x="572.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py) (2 samples, 0.30%)</title><rect x="569" y="148" width="3" height="15" fill="rgb(254,108,3)"/><text x="572.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py) (2 samples, 0.30%)</title><rect x="569" y="164" width="3" height="15" fill="rgb(231,77,49)"/><text x="572.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py) (2 samples, 0.30%)</title><rect x="569" y="180" width="3" height="15" fill="rgb(227,213,26)"/><text x="572.00" y="190.50"></text></g><g><title>convert_sklearn_random_forest_classifier (skl2onnx/operator_converters/random_forest.py) (2 samples, 0.30%)</title><rect x="569" y="196" width="3" height="15" fill="rgb(220,198,21)"/><text x="572.00" y="206.50"></text></g><g><title>add_tree_to_attribute_pairs (skl2onnx/common/tree_ensemble.py) (1 samples, 0.15%)</title><rect x="571" y="212" width="1" height="15" fill="rgb(208,22,54)"/><text x="574.00" y="222.50"></text></g><g><title>add_node (skl2onnx/common/tree_ensemble.py) (1 samples, 0.15%)</title><rect x="571" y="228" width="1" height="15" fill="rgb(241,116,15)"/><text x="574.00" y="238.50"></text></g><g><title>array_flatten (methods.c) (1 samples, 0.15%)</title><rect x="571" y="244" width="1" height="15" fill="rgb(213,124,43)"/><text x="574.00" y="254.50"></text></g><g><title>PyArray_Flatten (shape.c) (1 samples, 0.15%)</title><rect x="571" y="260" width="1" height="15" fill="rgb(224,178,3)"/><text x="574.00" y="270.50"></text></g><g><title>PyArray_CopyAsFlat (ctors.c) (1 samples, 0.15%)</title><rect x="571" y="276" width="1" height="15" fill="rgb(235,207,33)"/><text x="574.00" y="286.50"></text></g><g><title>NpyIter_GetDataPtrArray (nditer_api.c) (1 samples, 0.15%)</title><rect x="571" y="292" width="1" height="15" fill="rgb(232,173,20)"/><text x="574.00" y="302.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py) (11 samples, 1.63%)</title><rect x="621" y="196" width="20" height="15" fill="rgb(236,185,16)"/><text x="624.00" y="206.50"></text></g><g><title>delayed (joblib/parallel.py) (9 samples, 1.33%)</title><rect x="625" y="212" width="16" height="15" fill="rgb(220,221,42)"/><text x="628.00" y="222.50"></text></g><g><title>update_wrapper (functools.py) (7 samples, 1.04%)</title><rect x="628" y="228" width="13" height="15" fill="rgb(229,79,34)"/><text x="631.00" y="238.50"></text></g><g><title>__init__ (joblib/parallel.py) (3 samples, 0.44%)</title><rect x="641" y="196" width="5" height="15" fill="rgb(214,58,7)"/><text x="644.00" y="206.50"></text></g><g><title>__len__ (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="646" y="196" width="2" height="15" fill="rgb(250,40,34)"/><text x="649.00" y="206.50"></text></g><g><title>__init__ (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="655" y="212" width="1" height="15" fill="rgb(217,215,0)"/><text x="658.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py) (9 samples, 1.33%)</title><rect x="660" y="228" width="16" height="15" fill="rgb(254,47,46)"/><text x="663.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.15%)</title><rect x="695" y="308" width="2" height="15" fill="rgb(249,223,11)"/><text x="698.00" y="318.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.15%)</title><rect x="695" y="324" width="2" height="15" fill="rgb(232,153,39)"/><text x="698.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.30%)</title><rect x="695" y="292" width="3" height="15" fill="rgb(253,38,6)"/><text x="698.00" y="302.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.15%)</title><rect x="697" y="308" width="1" height="15" fill="rgb(207,1,44)"/><text x="700.00" y="318.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.15%)</title><rect x="697" y="324" width="1" height="15" fill="rgb(227,162,15)"/><text x="700.00" y="334.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.15%)</title><rect x="697" y="340" width="1" height="15" fill="rgb(205,162,9)"/><text x="700.00" y="350.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.15%)</title><rect x="697" y="356" width="1" height="15" fill="rgb(231,121,11)"/><text x="700.00" y="366.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (2 samples, 0.30%)</title><rect x="698" y="292" width="4" height="15" fill="rgb(246,108,53)"/><text x="701.00" y="302.50"></text></g><g><title>PyThread_acquire_lock_timed (python3.7) (1 samples, 0.15%)</title><rect x="700" y="308" width="2" height="15" fill="rgb(235,94,9)"/><text x="703.00" y="318.50"></text></g><g><title>sem_trywait@@GLIBC_2.2.5 (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="700" y="324" width="2" height="15" fill="rgb(251,193,30)"/><text x="703.00" y="334.50"></text></g><g><title>0x7f7c3e28b2b9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="712" y="340" width="2" height="15" fill="rgb(216,0,15)"/><text x="715.00" y="350.50"></text></g><g><title>0x7f7c3e28a1dd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="714" y="356" width="2" height="15" fill="rgb(220,135,21)"/><text x="717.00" y="366.50"></text></g><g><title>array_descr_get (getset.c) (1 samples, 0.15%)</title><rect x="714" y="372" width="2" height="15" fill="rgb(223,14,18)"/><text x="717.00" y="382.50"></text></g><g><title>0x7f7c3e28a225 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="716" y="356" width="2" height="15" fill="rgb(225,221,10)"/><text x="719.00" y="366.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (1 samples, 0.15%)</title><rect x="716" y="372" width="2" height="15" fill="rgb(205,151,4)"/><text x="719.00" y="382.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.15%)</title><rect x="716" y="388" width="2" height="15" fill="rgb(240,26,23)"/><text x="719.00" y="398.50"></text></g><g><title>0x7f7c3e26e604 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="718" y="388" width="1" height="15" fill="rgb(240,106,24)"/><text x="721.00" y="398.50"></text></g><g><title>0x7f7c3e26ed04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.30%)</title><rect x="718" y="372" width="3" height="15" fill="rgb(216,152,42)"/><text x="721.00" y="382.50"></text></g><g><title>0x7f7c3e26e666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="719" y="388" width="2" height="15" fill="rgb(252,55,24)"/><text x="722.00" y="398.50"></text></g><g><title>0x7f7c3e2642fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="719" y="404" width="2" height="15" fill="rgb(211,101,0)"/><text x="722.00" y="414.50"></text></g><g><title>array_getbuffer (buffer.c) (1 samples, 0.15%)</title><rect x="719" y="420" width="2" height="15" fill="rgb(217,132,48)"/><text x="722.00" y="430.50"></text></g><g><title>_buffer_get_info (buffer.c) (1 samples, 0.15%)</title><rect x="719" y="436" width="2" height="15" fill="rgb(221,199,11)"/><text x="722.00" y="446.50"></text></g><g><title>0x7f7c3e26eee5 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="721" y="372" width="2" height="15" fill="rgb(235,3,29)"/><text x="724.00" y="382.50"></text></g><g><title>0x7f7c3e28a2df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.59%)</title><rect x="718" y="356" width="6" height="15" fill="rgb(248,187,21)"/><text x="721.00" y="366.50"></text></g><g><title>0x7f7c3e26ef9d (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="723" y="372" width="1" height="15" fill="rgb(237,47,19)"/><text x="726.00" y="382.50"></text></g><g><title>0x7f7c3e28a319 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="724" y="356" width="2" height="15" fill="rgb(242,109,32)"/><text x="727.00" y="366.50"></text></g><g><title>0x7f7c3e28a364 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="726" y="356" width="2" height="15" fill="rgb(240,55,37)"/><text x="729.00" y="366.50"></text></g><g><title>0x7f7c3e28a559 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="728" y="356" width="2" height="15" fill="rgb(212,120,35)"/><text x="731.00" y="366.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (1 samples, 0.15%)</title><rect x="731" y="388" width="2" height="15" fill="rgb(229,100,43)"/><text x="734.00" y="398.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (1 samples, 0.15%)</title><rect x="731" y="404" width="2" height="15" fill="rgb(232,154,10)"/><text x="734.00" y="414.50"></text></g><g><title>_typenum_fromtypeobj (scalartypes.c.src) (1 samples, 0.15%)</title><rect x="731" y="420" width="2" height="15" fill="rgb(208,192,37)"/><text x="734.00" y="430.50"></text></g><g><title>get_typeobj_idx (scalartypes.c.src) (1 samples, 0.15%)</title><rect x="731" y="436" width="2" height="15" fill="rgb(227,142,5)"/><text x="734.00" y="446.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.15%)</title><rect x="733" y="436" width="2" height="15" fill="rgb(216,112,24)"/><text x="736.00" y="446.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (1 samples, 0.15%)</title><rect x="733" y="452" width="2" height="15" fill="rgb(241,40,13)"/><text x="736.00" y="462.50"></text></g><g><title>0x7f7c3e28a592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.74%)</title><rect x="730" y="356" width="8" height="15" fill="rgb(232,138,29)"/><text x="733.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c) (5 samples, 0.74%)</title><rect x="730" y="372" width="8" height="15" fill="rgb(245,64,24)"/><text x="733.00" y="382.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (3 samples, 0.44%)</title><rect x="733" y="388" width="5" height="15" fill="rgb(230,196,42)"/><text x="736.00" y="398.50"></text></g><g><title>PyArray_Zeros (ctors.c) (3 samples, 0.44%)</title><rect x="733" y="404" width="5" height="15" fill="rgb(221,175,36)"/><text x="736.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (3 samples, 0.44%)</title><rect x="733" y="420" width="5" height="15" fill="rgb(229,35,27)"/><text x="736.00" y="430.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c) (2 samples, 0.30%)</title><rect x="735" y="436" width="3" height="15" fill="rgb(219,4,15)"/><text x="738.00" y="446.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c) (2 samples, 0.30%)</title><rect x="735" y="452" width="3" height="15" fill="rgb(214,38,44)"/><text x="738.00" y="462.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (2 samples, 0.30%)</title><rect x="735" y="468" width="3" height="15" fill="rgb(212,64,35)"/><text x="738.00" y="478.50"></text></g><g><title>0x7f7c64859103 (libc-2.29.so) (2 samples, 0.30%)</title><rect x="735" y="484" width="3" height="15" fill="rgb(209,115,8)"/><text x="738.00" y="494.50"></text></g><g><title>0x7f7c3e28a644 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="738" y="356" width="2" height="15" fill="rgb(217,140,53)"/><text x="741.00" y="366.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="738" y="372" width="2" height="15" fill="rgb(205,132,31)"/><text x="741.00" y="382.50"></text></g><g><title>0x7f7c3e28a6a0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="740" y="356" width="2" height="15" fill="rgb(254,148,33)"/><text x="743.00" y="366.50"></text></g><g><title>0x7f7c3e28a6aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.89%)</title><rect x="742" y="356" width="10" height="15" fill="rgb(222,72,15)"/><text x="745.00" y="366.50"></text></g><g><title>0x7f7c3e28a6b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.44%)</title><rect x="752" y="356" width="6" height="15" fill="rgb(250,108,37)"/><text x="755.00" y="366.50"></text></g><g><title>0x7f7c3e28a6b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="758" y="356" width="1" height="15" fill="rgb(234,44,42)"/><text x="761.00" y="366.50"></text></g><g><title>0x7f7c3e28a6bf (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="759" y="356" width="2" height="15" fill="rgb(253,110,12)"/><text x="762.00" y="366.50"></text></g><g><title>0x7f7c3e28a6fc (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="761" y="356" width="2" height="15" fill="rgb(220,2,20)"/><text x="764.00" y="366.50"></text></g><g><title>0x7f7c3e28a7a0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.30%)</title><rect x="763" y="356" width="3" height="15" fill="rgb(227,176,16)"/><text x="766.00" y="366.50"></text></g><g><title>0x7f7c3e28a7b0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="766" y="356" width="2" height="15" fill="rgb(218,106,44)"/><text x="769.00" y="366.50"></text></g><g><title>0x7f7c3e25f9af (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="768" y="372" width="2" height="15" fill="rgb(236,228,27)"/><text x="771.00" y="382.50"></text></g><g><title>0x7f7c3e28a92f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.30%)</title><rect x="768" y="356" width="4" height="15" fill="rgb(248,92,25)"/><text x="771.00" y="366.50"></text></g><g><title>0x7f7c3e25fa05 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="770" y="372" width="2" height="15" fill="rgb(216,165,28)"/><text x="773.00" y="382.50"></text></g><g><title>0x7f7c3e27bfa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (38 samples, 5.63%)</title><rect x="712" y="324" width="67" height="15" fill="rgb(226,2,24)"/><text x="715.00" y="334.50">0x7f7c3..</text></g><g><title>0x7f7c3e28b405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (37 samples, 5.48%)</title><rect x="714" y="340" width="65" height="15" fill="rgb(208,228,36)"/><text x="717.00" y="350.50">0x7f7c3..</text></g><g><title>0x7f7c3e28ac27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.59%)</title><rect x="772" y="356" width="7" height="15" fill="rgb(251,32,33)"/><text x="775.00" y="366.50"></text></g><g><title>0x7f7c3e262529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.59%)</title><rect x="772" y="372" width="7" height="15" fill="rgb(234,109,6)"/><text x="775.00" y="382.50"></text></g><g><title>array_getbuffer (buffer.c) (4 samples, 0.59%)</title><rect x="772" y="388" width="7" height="15" fill="rgb(214,227,46)"/><text x="775.00" y="398.50"></text></g><g><title>_buffer_get_info (buffer.c) (4 samples, 0.59%)</title><rect x="772" y="404" width="7" height="15" fill="rgb(248,70,14)"/><text x="775.00" y="414.50"></text></g><g><title>_buffer_info_new (buffer.c) (1 samples, 0.15%)</title><rect x="777" y="420" width="2" height="15" fill="rgb(212,150,27)"/><text x="780.00" y="430.50"></text></g><g><title>_buffer_format_string (buffer.c) (1 samples, 0.15%)</title><rect x="777" y="436" width="2" height="15" fill="rgb(250,201,4)"/><text x="780.00" y="446.50"></text></g><g><title>PyArray_Return (scalarapi.c) (2 samples, 0.30%)</title><rect x="779" y="356" width="3" height="15" fill="rgb(245,26,41)"/><text x="782.00" y="366.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (6 samples, 0.89%)</title><rect x="782" y="372" width="11" height="15" fill="rgb(247,32,12)"/><text x="785.00" y="382.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c) (7 samples, 1.04%)</title><rect x="782" y="356" width="12" height="15" fill="rgb(222,13,40)"/><text x="785.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.15%)</title><rect x="793" y="372" width="1" height="15" fill="rgb(245,63,9)"/><text x="796.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.15%)</title><rect x="793" y="388" width="1" height="15" fill="rgb(211,102,27)"/><text x="796.00" y="398.50"></text></g><g><title>memcpy (libc-2.29.so) (1 samples, 0.15%)</title><rect x="793" y="404" width="1" height="15" fill="rgb(214,69,32)"/><text x="796.00" y="414.50"></text></g><g><title>0x7f7c3e27c05a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 1.48%)</title><rect x="779" y="324" width="17" height="15" fill="rgb(221,217,41)"/><text x="782.00" y="334.50"></text></g><g><title>array_take (methods.c) (10 samples, 1.48%)</title><rect x="779" y="340" width="17" height="15" fill="rgb(240,139,3)"/><text x="782.00" y="350.50"></text></g><g><title>unicode_eq (python3.7) (1 samples, 0.15%)</title><rect x="794" y="356" width="2" height="15" fill="rgb(214,209,23)"/><text x="797.00" y="366.50"></text></g><g><title>0x7f7c64916151 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="794" y="372" width="2" height="15" fill="rgb(208,218,42)"/><text x="797.00" y="382.50"></text></g><g><title>0x7f7c3e27c13a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="796" y="324" width="2" height="15" fill="rgb(219,121,29)"/><text x="799.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.15%)</title><rect x="796" y="340" width="2" height="15" fill="rgb(232,97,22)"/><text x="799.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.15%)</title><rect x="796" y="356" width="2" height="15" fill="rgb(248,32,38)"/><text x="799.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.15%)</title><rect x="796" y="372" width="2" height="15" fill="rgb(239,23,49)"/><text x="799.00" y="382.50"></text></g><g><title>0x7f7c3e27c14f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.30%)</title><rect x="798" y="324" width="3" height="15" fill="rgb(209,99,2)"/><text x="801.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.30%)</title><rect x="798" y="340" width="3" height="15" fill="rgb(206,93,30)"/><text x="801.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.30%)</title><rect x="798" y="356" width="3" height="15" fill="rgb(240,201,21)"/><text x="801.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.30%)</title><rect x="798" y="372" width="3" height="15" fill="rgb(216,130,49)"/><text x="801.00" y="382.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.15%)</title><rect x="803" y="356" width="2" height="15" fill="rgb(248,124,36)"/><text x="806.00" y="366.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (1 samples, 0.15%)</title><rect x="803" y="372" width="2" height="15" fill="rgb(224,196,29)"/><text x="806.00" y="382.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c) (1 samples, 0.15%)</title><rect x="803" y="388" width="2" height="15" fill="rgb(229,1,39)"/><text x="806.00" y="398.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (1 samples, 0.15%)</title><rect x="803" y="404" width="2" height="15" fill="rgb(220,94,28)"/><text x="806.00" y="414.50"></text></g><g><title>0x7f7c3e27cd2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (54 samples, 8.00%)</title><rect x="712" y="308" width="95" height="15" fill="rgb(243,220,19)"/><text x="715.00" y="318.50">0x7f7c3e27c..</text></g><g><title>0x7f7c3e27c328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.44%)</title><rect x="801" y="324" width="6" height="15" fill="rgb(242,175,49)"/><text x="804.00" y="334.50"></text></g><g><title>array_reshape (methods.c) (3 samples, 0.44%)</title><rect x="801" y="340" width="6" height="15" fill="rgb(244,55,5)"/><text x="804.00" y="350.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.15%)</title><rect x="805" y="356" width="2" height="15" fill="rgb(207,151,15)"/><text x="808.00" y="366.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.15%)</title><rect x="805" y="372" width="2" height="15" fill="rgb(226,184,39)"/><text x="808.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.15%)</title><rect x="805" y="388" width="2" height="15" fill="rgb(220,149,44)"/><text x="808.00" y="398.50"></text></g><g><title>0x7f7c63cc53de (?) (1 samples, 0.15%)</title><rect x="807" y="308" width="1" height="15" fill="rgb(247,227,18)"/><text x="810.00" y="318.50"></text></g><g><title>0x7f7c63cc4562 (?) (1 samples, 0.15%)</title><rect x="807" y="324" width="1" height="15" fill="rgb(246,35,51)"/><text x="810.00" y="334.50"></text></g><g><title>0x7f7c63cc1e14 (?) (1 samples, 0.15%)</title><rect x="807" y="340" width="1" height="15" fill="rgb(250,151,2)"/><text x="810.00" y="350.50"></text></g><g><title>0x7f7c63cc0504 (?) (1 samples, 0.15%)</title><rect x="807" y="356" width="1" height="15" fill="rgb(247,100,10)"/><text x="810.00" y="366.50"></text></g><g><title>0x7f7c63ca4d2b (?) (1 samples, 0.15%)</title><rect x="807" y="372" width="1" height="15" fill="rgb(244,42,51)"/><text x="810.00" y="382.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (1 samples, 0.15%)</title><rect x="808" y="308" width="2" height="15" fill="rgb(254,87,48)"/><text x="811.00" y="318.50"></text></g><g><title>array_assign_subscript (mapping.c) (3 samples, 0.44%)</title><rect x="810" y="308" width="5" height="15" fill="rgb(248,67,36)"/><text x="813.00" y="318.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c) (3 samples, 0.44%)</title><rect x="810" y="324" width="5" height="15" fill="rgb(233,93,4)"/><text x="813.00" y="334.50"></text></g><g><title>count_boolean_trues (item_selection.c) (3 samples, 0.44%)</title><rect x="810" y="340" width="5" height="15" fill="rgb(209,201,11)"/><text x="813.00" y="350.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c) (2 samples, 0.30%)</title><rect x="812" y="356" width="3" height="15" fill="rgb(220,65,30)"/><text x="815.00" y="366.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.15%)</title><rect x="814" y="372" width="1" height="15" fill="rgb(228,76,0)"/><text x="817.00" y="382.50"></text></g><g><title>0x7f7c647f0a45 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="814" y="388" width="1" height="15" fill="rgb(221,120,24)"/><text x="817.00" y="398.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (1 samples, 0.15%)</title><rect x="817" y="356" width="2" height="15" fill="rgb(249,197,44)"/><text x="820.00" y="366.50"></text></g><g><title>get_global_ext_obj (extobj.c) (1 samples, 0.15%)</title><rect x="817" y="372" width="2" height="15" fill="rgb(238,75,14)"/><text x="820.00" y="382.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (1 samples, 0.15%)</title><rect x="819" y="356" width="2" height="15" fill="rgb(253,138,43)"/><text x="822.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.15%)</title><rect x="821" y="356" width="1" height="15" fill="rgb(238,113,21)"/><text x="824.00" y="366.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (1 samples, 0.15%)</title><rect x="821" y="372" width="1" height="15" fill="rgb(209,208,18)"/><text x="824.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 1.04%)</title><rect x="815" y="340" width="13" height="15" fill="rgb(212,131,7)"/><text x="818.00" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.44%)</title><rect x="822" y="356" width="6" height="15" fill="rgb(234,227,34)"/><text x="825.00" y="366.50"></text></g><g><title>PyArray_FromAny (ctors.c) (3 samples, 0.44%)</title><rect x="822" y="372" width="6" height="15" fill="rgb(215,55,27)"/><text x="825.00" y="382.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h) (1 samples, 0.15%)</title><rect x="826" y="388" width="2" height="15" fill="rgb(231,3,53)"/><text x="829.00" y="398.50"></text></g><g><title>DOUBLE_setitem (arraytypes.c.src) (1 samples, 0.15%)</title><rect x="826" y="404" width="2" height="15" fill="rgb(222,150,50)"/><text x="829.00" y="414.50"></text></g><g><title>MyPyFloat_AsDouble (arraytypes.c.src) (1 samples, 0.15%)</title><rect x="826" y="420" width="2" height="15" fill="rgb(241,56,11)"/><text x="829.00" y="430.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.30%)</title><rect x="828" y="356" width="3" height="15" fill="rgb(229,48,9)"/><text x="831.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.15%)</title><rect x="829" y="372" width="2" height="15" fill="rgb(231,91,2)"/><text x="832.00" y="382.50"></text></g><g><title>array_dealloc (arrayobject.c) (3 samples, 0.44%)</title><rect x="828" y="340" width="5" height="15" fill="rgb(234,60,16)"/><text x="831.00" y="350.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.15%)</title><rect x="831" y="356" width="2" height="15" fill="rgb(234,103,49)"/><text x="834.00" y="366.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.15%)</title><rect x="831" y="372" width="2" height="15" fill="rgb(231,144,49)"/><text x="834.00" y="382.50"></text></g><g><title>array_richcompare (arrayobject.c) (11 samples, 1.63%)</title><rect x="815" y="308" width="20" height="15" fill="rgb(251,65,45)"/><text x="818.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (11 samples, 1.63%)</title><rect x="815" y="324" width="20" height="15" fill="rgb(205,43,3)"/><text x="818.00" y="334.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.15%)</title><rect x="833" y="340" width="2" height="15" fill="rgb(207,191,34)"/><text x="836.00" y="350.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.30%)</title><rect x="843" y="372" width="4" height="15" fill="rgb(224,220,6)"/><text x="846.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.30%)</title><rect x="843" y="388" width="4" height="15" fill="rgb(250,17,9)"/><text x="846.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (2 samples, 0.30%)</title><rect x="843" y="404" width="4" height="15" fill="rgb(207,190,16)"/><text x="846.00" y="414.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (2 samples, 0.30%)</title><rect x="843" y="420" width="4" height="15" fill="rgb(213,141,38)"/><text x="846.00" y="430.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (2 samples, 0.30%)</title><rect x="843" y="436" width="4" height="15" fill="rgb(215,23,7)"/><text x="846.00" y="446.50"></text></g><g><title>unicode_dealloc (python3.7) (1 samples, 0.15%)</title><rect x="845" y="452" width="2" height="15" fill="rgb(244,192,54)"/><text x="848.00" y="462.50"></text></g><g><title>0x7f7c6484e757 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="849" y="388" width="1" height="15" fill="rgb(242,157,4)"/><text x="852.00" y="398.50"></text></g><g><title>0x7f7c63a59c90 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="852" y="436" width="2" height="15" fill="rgb(208,60,31)"/><text x="855.00" y="446.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (1 samples, 0.15%)</title><rect x="854" y="436" width="2" height="15" fill="rgb(252,92,26)"/><text x="857.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="854" y="452" width="2" height="15" fill="rgb(227,161,46)"/><text x="857.00" y="462.50"></text></g><g><title>0x7f7c6483a510 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="854" y="468" width="2" height="15" fill="rgb(223,2,34)"/><text x="857.00" y="478.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (1 samples, 0.15%)</title><rect x="856" y="468" width="1" height="15" fill="rgb(239,206,6)"/><text x="859.00" y="478.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (2 samples, 0.30%)</title><rect x="856" y="436" width="3" height="15" fill="rgb(223,40,16)"/><text x="859.00" y="446.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (2 samples, 0.30%)</title><rect x="856" y="452" width="3" height="15" fill="rgb(249,112,50)"/><text x="859.00" y="462.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c) (1 samples, 0.15%)</title><rect x="857" y="468" width="2" height="15" fill="rgb(239,88,5)"/><text x="860.00" y="478.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (2 samples, 0.30%)</title><rect x="859" y="436" width="4" height="15" fill="rgb(238,95,34)"/><text x="862.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (8 samples, 1.19%)</title><rect x="850" y="420" width="14" height="15" fill="rgb(206,148,26)"/><text x="853.00" y="430.50"></text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c) (1 samples, 0.15%)</title><rect x="863" y="436" width="1" height="15" fill="rgb(254,1,28)"/><text x="866.00" y="446.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.15%)</title><rect x="864" y="420" width="2" height="15" fill="rgb(236,195,40)"/><text x="867.00" y="430.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.15%)</title><rect x="864" y="436" width="2" height="15" fill="rgb(224,122,10)"/><text x="867.00" y="446.50"></text></g><g><title>NpyIter_GetIterNext (nditer_templ.c.src) (1 samples, 0.15%)</title><rect x="866" y="420" width="2" height="15" fill="rgb(233,167,27)"/><text x="869.00" y="430.50"></text></g><g><title>PyArray_GetStridedZeroPadCopyFn (dtype_transfer.c) (1 samples, 0.15%)</title><rect x="870" y="484" width="1" height="15" fill="rgb(237,16,44)"/><text x="873.00" y="494.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c) (3 samples, 0.44%)</title><rect x="868" y="452" width="5" height="15" fill="rgb(250,63,39)"/><text x="871.00" y="462.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (2 samples, 0.30%)</title><rect x="870" y="468" width="3" height="15" fill="rgb(219,173,16)"/><text x="873.00" y="478.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (1 samples, 0.15%)</title><rect x="871" y="484" width="2" height="15" fill="rgb(214,117,19)"/><text x="874.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (6 samples, 0.89%)</title><rect x="868" y="420" width="10" height="15" fill="rgb(252,88,48)"/><text x="871.00" y="430.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (6 samples, 0.89%)</title><rect x="868" y="436" width="10" height="15" fill="rgb(241,114,24)"/><text x="871.00" y="446.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (3 samples, 0.44%)</title><rect x="873" y="452" width="5" height="15" fill="rgb(245,187,44)"/><text x="876.00" y="462.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (2 samples, 0.30%)</title><rect x="875" y="468" width="3" height="15" fill="rgb(239,55,30)"/><text x="878.00" y="478.50"></text></g><g><title>DOUBLE_add (loops.c.src) (19 samples, 2.81%)</title><rect x="894" y="436" width="33" height="15" fill="rgb(219,53,30)"/><text x="897.00" y="446.50">DO..</text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (12 samples, 1.78%)</title><rect x="906" y="452" width="21" height="15" fill="rgb(208,227,24)"/><text x="909.00" y="462.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (1 samples, 0.15%)</title><rect x="927" y="436" width="2" height="15" fill="rgb(209,30,47)"/><text x="930.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (53 samples, 7.85%)</title><rect x="850" y="404" width="93" height="15" fill="rgb(249,57,4)"/><text x="853.00" y="414.50">PyUFunc_Red..</text></g><g><title>reduce_loop (ufunc_object.c) (37 samples, 5.48%)</title><rect x="878" y="420" width="65" height="15" fill="rgb(217,46,24)"/><text x="881.00" y="430.50">reduce_..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (8 samples, 1.19%)</title><rect x="929" y="436" width="14" height="15" fill="rgb(232,21,26)"/><text x="932.00" y="446.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (1 samples, 0.15%)</title><rect x="941" y="452" width="2" height="15" fill="rgb(223,227,7)"/><text x="944.00" y="462.50"></text></g><g><title>array_sum (methods.c) (64 samples, 9.48%)</title><rect x="835" y="308" width="112" height="15" fill="rgb(237,104,15)"/><text x="838.00" y="318.50">array_sum (me..</text></g><g><title>forward_ndarray_method (methods.c) (64 samples, 9.48%)</title><rect x="835" y="324" width="112" height="15" fill="rgb(237,55,20)"/><text x="838.00" y="334.50">forward_ndarr..</text></g><g><title>_sum (numpy/core/_methods.py) (60 samples, 8.89%)</title><rect x="842" y="340" width="105" height="15" fill="rgb(241,201,37)"/><text x="845.00" y="350.50">_sum (numpy/..</text></g><g><title>ufunc_reduce (ufunc_object.c) (59 samples, 8.74%)</title><rect x="843" y="356" width="104" height="15" fill="rgb(210,6,20)"/><text x="846.00" y="366.50">ufunc_reduce..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (57 samples, 8.44%)</title><rect x="847" y="372" width="100" height="15" fill="rgb(226,217,35)"/><text x="850.00" y="382.50">PyUFunc_Gene..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (55 samples, 8.15%)</title><rect x="850" y="388" width="97" height="15" fill="rgb(210,132,38)"/><text x="853.00" y="398.50">PyUFunc_Red..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (2 samples, 0.30%)</title><rect x="943" y="404" width="4" height="15" fill="rgb(252,40,22)"/><text x="946.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.30%)</title><rect x="943" y="420" width="4" height="15" fill="rgb(215,167,24)"/><text x="946.00" y="430.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.15%)</title><rect x="945" y="436" width="2" height="15" fill="rgb(224,104,40)"/><text x="948.00" y="446.50"></text></g><g><title>unicode_endswith (python3.7) (4 samples, 0.59%)</title><rect x="962" y="340" width="7" height="15" fill="rgb(249,196,13)"/><text x="965.00" y="350.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (13 samples, 1.93%)</title><rect x="952" y="324" width="22" height="15" fill="rgb(211,220,30)"/><text x="955.00" y="334.50">&lt;..</text></g><g><title>unicode_startswith (python3.7) (3 samples, 0.44%)</title><rect x="969" y="340" width="5" height="15" fill="rgb(207,226,34)"/><text x="972.00" y="350.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (18 samples, 2.67%)</title><rect x="947" y="308" width="31" height="15" fill="rgb(236,141,49)"/><text x="950.00" y="318.50">ch..</text></g><g><title>isclass (inspect.py) (2 samples, 0.30%)</title><rect x="974" y="324" width="4" height="15" fill="rgb(232,57,23)"/><text x="977.00" y="334.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (1 samples, 0.15%)</title><rect x="978" y="340" width="2" height="15" fill="rgb(205,28,41)"/><text x="981.00" y="350.50"></text></g><g><title>_extract_pyvals (extobj.c) (1 samples, 0.15%)</title><rect x="978" y="356" width="2" height="15" fill="rgb(223,117,45)"/><text x="981.00" y="366.50"></text></g><g><title>DOUBLE_divide (loops.c.src) (16 samples, 2.37%)</title><rect x="980" y="372" width="28" height="15" fill="rgb(212,77,34)"/><text x="983.00" y="382.50">D..</text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src) (16 samples, 2.37%)</title><rect x="980" y="388" width="28" height="15" fill="rgb(254,208,12)"/><text x="983.00" y="398.50">r..</text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src) (16 samples, 2.37%)</title><rect x="980" y="404" width="28" height="15" fill="rgb(241,134,7)"/><text x="983.00" y="414.50">s..</text></g><g><title>_mm_store_pd (emmintrin.h) (16 samples, 2.37%)</title><rect x="980" y="420" width="28" height="15" fill="rgb(211,151,43)"/><text x="983.00" y="430.50">_..</text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.15%)</title><rect x="1008" y="388" width="1" height="15" fill="rgb(254,5,40)"/><text x="1011.00" y="398.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.15%)</title><rect x="1008" y="404" width="1" height="15" fill="rgb(254,181,23)"/><text x="1011.00" y="414.50"></text></g><g><title>get_array_memory_extents (mem_overlap.c) (1 samples, 0.15%)</title><rect x="1008" y="420" width="1" height="15" fill="rgb(222,104,5)"/><text x="1011.00" y="430.50"></text></g><g><title>offset_bounds_from_strides (mem_overlap.c) (1 samples, 0.15%)</title><rect x="1008" y="436" width="1" height="15" fill="rgb(252,223,46)"/><text x="1011.00" y="446.50"></text></g><g><title>npyiter_flip_negative_strides (nditer_constr.c) (1 samples, 0.15%)</title><rect x="1009" y="388" width="2" height="15" fill="rgb(241,113,37)"/><text x="1012.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 0.44%)</title><rect x="1008" y="372" width="5" height="15" fill="rgb(211,147,38)"/><text x="1011.00" y="382.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.15%)</title><rect x="1011" y="388" width="2" height="15" fill="rgb(212,40,53)"/><text x="1014.00" y="398.50"></text></g><g><title>npyiter_check_per_op_flags (nditer_constr.c) (1 samples, 0.15%)</title><rect x="1011" y="404" width="2" height="15" fill="rgb(248,83,6)"/><text x="1014.00" y="414.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (3 samples, 0.44%)</title><rect x="1013" y="372" width="5" height="15" fill="rgb(234,100,8)"/><text x="1016.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (30 samples, 4.44%)</title><rect x="980" y="340" width="52" height="15" fill="rgb(234,142,37)"/><text x="983.00" y="350.50">execu..</text></g><g><title>iterator_loop (ufunc_object.c) (30 samples, 4.44%)</title><rect x="980" y="356" width="52" height="15" fill="rgb(223,46,45)"/><text x="983.00" y="366.50">itera..</text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (8 samples, 1.19%)</title><rect x="1018" y="372" width="14" height="15" fill="rgb(243,155,42)"/><text x="1021.00" y="382.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (8 samples, 1.19%)</title><rect x="1018" y="388" width="14" height="15" fill="rgb(227,32,17)"/><text x="1021.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (8 samples, 1.19%)</title><rect x="1018" y="404" width="14" height="15" fill="rgb(241,186,7)"/><text x="1021.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (5 samples, 0.74%)</title><rect x="1023" y="420" width="9" height="15" fill="rgb(212,12,43)"/><text x="1026.00" y="430.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.15%)</title><rect x="1032" y="340" width="2" height="15" fill="rgb(248,136,2)"/><text x="1035.00" y="350.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py) (191 samples, 28.30%)</title><rect x="702" y="292" width="334" height="15" fill="rgb(213,42,12)"/><text x="705.00" y="302.50">predict_proba (sklearn/tree/_classes.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (33 samples, 4.89%)</title><rect x="978" y="308" width="58" height="15" fill="rgb(236,211,9)"/><text x="981.00" y="318.50">ufunc_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (33 samples, 4.89%)</title><rect x="978" y="324" width="58" height="15" fill="rgb(250,99,1)"/><text x="981.00" y="334.50">PyUFun..</text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (1 samples, 0.15%)</title><rect x="1034" y="340" width="2" height="15" fill="rgb(224,199,31)"/><text x="1037.00" y="350.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.15%)</title><rect x="1037" y="324" width="2" height="15" fill="rgb(214,19,46)"/><text x="1040.00" y="334.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (1 samples, 0.15%)</title><rect x="1041" y="404" width="2" height="15" fill="rgb(215,165,15)"/><text x="1044.00" y="414.50"></text></g><g><title>gt_128 (npy_extint128.h) (1 samples, 0.15%)</title><rect x="1041" y="420" width="2" height="15" fill="rgb(227,46,23)"/><text x="1044.00" y="430.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (3 samples, 0.44%)</title><rect x="1039" y="372" width="5" height="15" fill="rgb(231,93,27)"/><text x="1042.00" y="382.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (3 samples, 0.44%)</title><rect x="1039" y="388" width="5" height="15" fill="rgb(240,144,5)"/><text x="1042.00" y="398.50"></text></g><g><title>gt_128 (npy_extint128.h) (1 samples, 0.15%)</title><rect x="1043" y="404" width="1" height="15" fill="rgb(205,196,39)"/><text x="1046.00" y="414.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (4 samples, 0.59%)</title><rect x="1039" y="340" width="7" height="15" fill="rgb(247,87,25)"/><text x="1042.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (4 samples, 0.59%)</title><rect x="1039" y="356" width="7" height="15" fill="rgb(220,111,15)"/><text x="1042.00" y="366.50"></text></g><g><title>strides_to_terms (mem_overlap.c) (1 samples, 0.15%)</title><rect x="1044" y="372" width="2" height="15" fill="rgb(214,174,12)"/><text x="1047.00" y="382.50"></text></g><g><title>0x7f7c63a5ad70 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="1046" y="356" width="2" height="15" fill="rgb(211,132,16)"/><text x="1049.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (9 samples, 1.33%)</title><rect x="1039" y="324" width="16" height="15" fill="rgb(231,18,52)"/><text x="1042.00" y="334.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (5 samples, 0.74%)</title><rect x="1046" y="340" width="9" height="15" fill="rgb(222,102,11)"/><text x="1049.00" y="350.50"></text></g><g><title>DOUBLE_add (loops.c.src) (4 samples, 0.59%)</title><rect x="1048" y="356" width="7" height="15" fill="rgb(232,102,47)"/><text x="1051.00" y="366.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (4 samples, 0.59%)</title><rect x="1048" y="372" width="7" height="15" fill="rgb(226,74,19)"/><text x="1051.00" y="382.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (4 samples, 0.59%)</title><rect x="1048" y="388" width="7" height="15" fill="rgb(226,35,51)"/><text x="1051.00" y="398.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (2 samples, 0.30%)</title><rect x="1051" y="404" width="4" height="15" fill="rgb(243,154,22)"/><text x="1054.00" y="414.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py) (211 samples, 31.26%)</title><rect x="688" y="276" width="369" height="15" fill="rgb(211,203,44)"/><text x="691.00" y="286.50">_accumulate_prediction (sklearn/ensemble/_forest.p..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (12 samples, 1.78%)</title><rect x="1036" y="292" width="21" height="15" fill="rgb(214,96,41)"/><text x="1039.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (12 samples, 1.78%)</title><rect x="1036" y="308" width="21" height="15" fill="rgb(205,197,37)"/><text x="1039.00" y="318.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.15%)</title><rect x="1055" y="324" width="2" height="15" fill="rgb(206,98,41)"/><text x="1058.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.15%)</title><rect x="1057" y="292" width="1" height="15" fill="rgb(219,185,29)"/><text x="1060.00" y="302.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.15%)</title><rect x="1057" y="308" width="1" height="15" fill="rgb(212,220,46)"/><text x="1060.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (214 samples, 31.70%)</title><rect x="686" y="260" width="374" height="15" fill="rgb(242,129,38)"/><text x="689.00" y="270.50">&lt;listcomp&gt; (joblib/parallel.py)</text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.30%)</title><rect x="1057" y="276" width="3" height="15" fill="rgb(206,121,21)"/><text x="1060.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.15%)</title><rect x="1058" y="292" width="2" height="15" fill="rgb(250,68,50)"/><text x="1061.00" y="302.50"></text></g><g><title>npy_free_cache (alloc.c) (1 samples, 0.15%)</title><rect x="1058" y="308" width="2" height="15" fill="rgb(237,100,8)"/><text x="1061.00" y="318.50"></text></g><g><title>_npy_free_cache (alloc.c) (1 samples, 0.15%)</title><rect x="1058" y="324" width="2" height="15" fill="rgb(210,203,51)"/><text x="1061.00" y="334.50"></text></g><g><title>PyDataMem_FREE (alloc.c) (1 samples, 0.15%)</title><rect x="1058" y="340" width="2" height="15" fill="rgb(252,8,40)"/><text x="1061.00" y="350.50"></text></g><g><title>0x7f7c63a5a380 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="1058" y="356" width="2" height="15" fill="rgb(216,96,48)"/><text x="1061.00" y="366.50"></text></g><g><title>__enter__ (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="1060" y="260" width="2" height="15" fill="rgb(223,136,43)"/><text x="1063.00" y="270.50"></text></g><g><title>__exit__ (joblib/parallel.py) (3 samples, 0.44%)</title><rect x="1062" y="260" width="5" height="15" fill="rgb(216,179,24)"/><text x="1065.00" y="270.50"></text></g><g><title>unregister (joblib/parallel.py) (3 samples, 0.44%)</title><rect x="1062" y="276" width="5" height="15" fill="rgb(231,36,12)"/><text x="1065.00" y="286.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (240 samples, 35.56%)</title><rect x="656" y="212" width="420" height="15" fill="rgb(232,173,40)"/><text x="659.00" y="222.50">apply_async (joblib/_parallel_backends.py)</text></g><g><title>__init__ (joblib/_parallel_backends.py) (229 samples, 33.93%)</title><rect x="676" y="228" width="400" height="15" fill="rgb(215,189,3)"/><text x="679.00" y="238.50">__init__ (joblib/_parallel_backends.py)</text></g><g><title>__call__ (joblib/parallel.py) (228 samples, 33.78%)</title><rect x="677" y="244" width="399" height="15" fill="rgb(254,155,1)"/><text x="680.00" y="254.50">__call__ (joblib/parallel.py)</text></g><g><title>__init__ (joblib/parallel.py) (5 samples, 0.74%)</title><rect x="1067" y="260" width="9" height="15" fill="rgb(228,128,15)"/><text x="1070.00" y="270.50"></text></g><g><title>_dispatch (joblib/parallel.py) (246 samples, 36.44%)</title><rect x="648" y="196" width="430" height="15" fill="rgb(223,72,48)"/><text x="651.00" y="206.50">_dispatch (joblib/parallel.py)</text></g><g><title>time_time (python3.7) (1 samples, 0.15%)</title><rect x="1076" y="212" width="2" height="15" fill="rgb(239,141,26)"/><text x="1079.00" y="222.50"></text></g><g><title>clock_gettime (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1076" y="228" width="2" height="15" fill="rgb(232,90,9)"/><text x="1079.00" y="238.50"></text></g><g><title>__enter__ (threading.py) (1 samples, 0.15%)</title><rect x="1092" y="212" width="1" height="15" fill="rgb(248,48,54)"/><text x="1095.00" y="222.50"></text></g><g><title>__exit__ (threading.py) (2 samples, 0.30%)</title><rect x="1093" y="212" width="4" height="15" fill="rgb(244,75,54)"/><text x="1096.00" y="222.50"></text></g><g><title>_get (queue.py) (1 samples, 0.15%)</title><rect x="1097" y="212" width="2" height="15" fill="rgb(240,33,21)"/><text x="1100.00" y="222.50"></text></g><g><title>_qsize (queue.py) (2 samples, 0.30%)</title><rect x="1099" y="212" width="3" height="15" fill="rgb(231,0,7)"/><text x="1102.00" y="222.50"></text></g><g><title>get (queue.py) (16 samples, 2.37%)</title><rect x="1078" y="196" width="28" height="15" fill="rgb(245,190,14)"/><text x="1081.00" y="206.50">g..</text></g><g><title>notify (threading.py) (2 samples, 0.30%)</title><rect x="1102" y="212" width="4" height="15" fill="rgb(229,191,42)"/><text x="1105.00" y="222.50"></text></g><g><title>_is_owned (threading.py) (1 samples, 0.15%)</title><rect x="1104" y="228" width="2" height="15" fill="rgb(251,28,7)"/><text x="1107.00" y="238.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.74%)</title><rect x="1111" y="212" width="9" height="15" fill="rgb(239,205,12)"/><text x="1114.00" y="222.50"></text></g><g><title>0x7f7c6484ee50 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1118" y="228" width="2" height="15" fill="rgb(252,55,7)"/><text x="1121.00" y="238.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (13 samples, 1.93%)</title><rect x="1120" y="212" width="22" height="15" fill="rgb(253,21,2)"/><text x="1123.00" y="222.50">g..</text></g><g><title>__init__ (joblib/_parallel_backends.py) (6 samples, 0.89%)</title><rect x="1132" y="228" width="10" height="15" fill="rgb(211,107,1)"/><text x="1135.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (1 samples, 0.15%)</title><rect x="1141" y="244" width="1" height="15" fill="rgb(218,123,21)"/><text x="1144.00" y="254.50"></text></g><g><title>0x7f7c64859124 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1146" y="228" width="2" height="15" fill="rgb(240,129,31)"/><text x="1149.00" y="238.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (25 samples, 3.70%)</title><rect x="1106" y="196" width="43" height="15" fill="rgb(247,180,44)"/><text x="1109.00" y="206.50">get_..</text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.59%)</title><rect x="1142" y="212" width="7" height="15" fill="rgb(231,5,28)"/><text x="1145.00" y="222.50"></text></g><g><title>unicode_rpartition (python3.7) (1 samples, 0.15%)</title><rect x="1148" y="228" width="1" height="15" fill="rgb(218,157,52)"/><text x="1151.00" y="238.50"></text></g><g><title>__exit__ (threading.py) (1 samples, 0.15%)</title><rect x="1156" y="212" width="2" height="15" fill="rgb(215,54,2)"/><text x="1159.00" y="222.50"></text></g><g><title>_put (queue.py) (1 samples, 0.15%)</title><rect x="1158" y="212" width="2" height="15" fill="rgb(216,119,47)"/><text x="1161.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (334 samples, 49.48%)</title><rect x="581" y="180" width="584" height="15" fill="rgb(228,191,9)"/><text x="584.00" y="190.50">dispatch_one_batch (joblib/parallel.py)</text></g><g><title>put (queue.py) (9 samples, 1.33%)</title><rect x="1149" y="196" width="16" height="15" fill="rgb(249,22,29)"/><text x="1152.00" y="206.50"></text></g><g><title>notify (threading.py) (3 samples, 0.44%)</title><rect x="1160" y="212" width="5" height="15" fill="rgb(206,117,27)"/><text x="1163.00" y="222.50"></text></g><g><title>_is_owned (threading.py) (2 samples, 0.30%)</title><rect x="1162" y="228" width="3" height="15" fill="rgb(254,181,24)"/><text x="1165.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py) (339 samples, 50.22%)</title><rect x="574" y="164" width="593" height="15" fill="rgb(230,40,7)"/><text x="577.00" y="174.50">__call__ (joblib/parallel.py)</text></g><g><title>retrieve (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="1165" y="180" width="2" height="15" fill="rgb(234,201,41)"/><text x="1168.00" y="190.50"></text></g><g><title>_joblib_parallel_args (sklearn/utils/fixes.py) (2 samples, 0.30%)</title><rect x="1167" y="164" width="3" height="15" fill="rgb(206,117,4)"/><text x="1170.00" y="174.50"></text></g><g><title>__init__ (distutils/version.py) (1 samples, 0.15%)</title><rect x="1169" y="180" width="1" height="15" fill="rgb(243,90,30)"/><text x="1172.00" y="190.50"></text></g><g><title>parse (distutils/version.py) (1 samples, 0.15%)</title><rect x="1169" y="196" width="1" height="15" fill="rgb(231,135,54)"/><text x="1172.00" y="206.50"></text></g><g><title>_sre_SRE_Pattern_split (python3.7) (1 samples, 0.15%)</title><rect x="1169" y="212" width="1" height="15" fill="rgb(252,1,44)"/><text x="1172.00" y="222.50"></text></g><g><title>sre_ucs1_match (python3.7) (1 samples, 0.15%)</title><rect x="1169" y="228" width="1" height="15" fill="rgb(205,103,24)"/><text x="1172.00" y="238.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="1170" y="180" width="2" height="15" fill="rgb(227,182,38)"/><text x="1173.00" y="190.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="1170" y="196" width="2" height="15" fill="rgb(237,82,3)"/><text x="1173.00" y="206.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (1 samples, 0.15%)</title><rect x="1170" y="212" width="2" height="15" fill="rgb(254,105,33)"/><text x="1173.00" y="222.50"></text></g><g><title>full (numpy/core/numeric.py) (1 samples, 0.15%)</title><rect x="1172" y="180" width="2" height="15" fill="rgb(250,134,35)"/><text x="1175.00" y="190.50"></text></g><g><title>copyto (&lt;__array_function__ internals&gt;) (1 samples, 0.15%)</title><rect x="1172" y="196" width="2" height="15" fill="rgb(253,198,9)"/><text x="1175.00" y="206.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.15%)</title><rect x="1172" y="212" width="2" height="15" fill="rgb(247,57,33)"/><text x="1175.00" y="222.50"></text></g><g><title>array_copyto (multiarraymodule.c) (1 samples, 0.15%)</title><rect x="1172" y="228" width="2" height="15" fill="rgb(232,157,44)"/><text x="1175.00" y="238.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.15%)</title><rect x="1172" y="244" width="2" height="15" fill="rgb(212,224,15)"/><text x="1175.00" y="254.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.15%)</title><rect x="1172" y="260" width="2" height="15" fill="rgb(205,203,4)"/><text x="1175.00" y="270.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.15%)</title><rect x="1172" y="276" width="2" height="15" fill="rgb(212,16,41)"/><text x="1175.00" y="286.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.15%)</title><rect x="1172" y="292" width="2" height="15" fill="rgb(245,62,17)"/><text x="1175.00" y="302.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c) (1 samples, 0.15%)</title><rect x="1172" y="308" width="2" height="15" fill="rgb(215,115,21)"/><text x="1175.00" y="318.50"></text></g><g><title>_partition_estimators (sklearn/ensemble/_base.py) (3 samples, 0.44%)</title><rect x="1170" y="164" width="6" height="15" fill="rgb(213,111,10)"/><text x="1173.00" y="174.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.15%)</title><rect x="1174" y="180" width="2" height="15" fill="rgb(205,184,32)"/><text x="1177.00" y="190.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.15%)</title><rect x="1174" y="196" width="2" height="15" fill="rgb(221,59,48)"/><text x="1177.00" y="206.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.15%)</title><rect x="1174" y="212" width="2" height="15" fill="rgb(237,177,15)"/><text x="1177.00" y="222.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (3 samples, 0.44%)</title><rect x="1176" y="180" width="5" height="15" fill="rgb(206,91,24)"/><text x="1179.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (3 samples, 0.44%)</title><rect x="1176" y="196" width="5" height="15" fill="rgb(239,178,9)"/><text x="1179.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (1 samples, 0.15%)</title><rect x="1179" y="212" width="2" height="15" fill="rgb(239,186,36)"/><text x="1182.00" y="222.50"></text></g><g><title>_validate_X_predict (sklearn/ensemble/_forest.py) (4 samples, 0.59%)</title><rect x="1176" y="164" width="7" height="15" fill="rgb(254,229,50)"/><text x="1179.00" y="174.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (1 samples, 0.15%)</title><rect x="1181" y="180" width="2" height="15" fill="rgb(253,208,24)"/><text x="1184.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (1 samples, 0.15%)</title><rect x="1181" y="196" width="2" height="15" fill="rgb(236,107,33)"/><text x="1184.00" y="206.50"></text></g><g><title>unicode_endswith (python3.7) (1 samples, 0.15%)</title><rect x="1181" y="212" width="2" height="15" fill="rgb(230,43,22)"/><text x="1184.00" y="222.50"></text></g><g><title>profile_skl (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (350 samples, 51.85%)</title><rect x="572" y="68" width="612" height="15" fill="rgb(243,58,44)"/><text x="575.00" y="78.50">profile_skl (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (350 samples, 51.85%)</title><rect x="572" y="84" width="612" height="15" fill="rgb(220,16,50)"/><text x="575.00" y="94.50">setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (350 samples, 51.85%)</title><rect x="572" y="100" width="612" height="15" fill="rgb(213,2,26)"/><text x="575.00" y="110.50">profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (350 samples, 51.85%)</title><rect x="572" y="116" width="612" height="15" fill="rgb(242,45,31)"/><text x="575.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (350 samples, 51.85%)</title><rect x="572" y="132" width="612" height="15" fill="rgb(214,226,19)"/><text x="575.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py) (350 samples, 51.85%)</title><rect x="572" y="148" width="612" height="15" fill="rgb(231,176,0)"/><text x="575.00" y="158.50">predict_proba (sklearn/ensemble/_forest.py)</text></g><g><title>atleast_1d (&lt;__array_function__ internals&gt;) (1 samples, 0.15%)</title><rect x="1183" y="164" width="1" height="15" fill="rgb(205,40,51)"/><text x="1186.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (1 samples, 0.15%)</title><rect x="1183" y="180" width="1" height="15" fill="rgb(207,214,20)"/><text x="1186.00" y="190.50"></text></g><g><title>atleast_1d (numpy/core/shape_base.py) (1 samples, 0.15%)</title><rect x="1183" y="196" width="1" height="15" fill="rgb(233,87,8)"/><text x="1186.00" y="206.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py) (1 samples, 0.15%)</title><rect x="1183" y="212" width="1" height="15" fill="rgb(237,205,7)"/><text x="1186.00" y="222.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (1 samples, 0.15%)</title><rect x="1183" y="228" width="1" height="15" fill="rgb(235,15,5)"/><text x="1186.00" y="238.50"></text></g><g><title>_dispatch (joblib/parallel.py) (2 samples, 0.30%)</title><rect x="1184" y="164" width="4" height="15" fill="rgb(211,78,7)"/><text x="1187.00" y="174.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (2 samples, 0.30%)</title><rect x="1184" y="180" width="4" height="15" fill="rgb(221,27,27)"/><text x="1187.00" y="190.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py) (2 samples, 0.30%)</title><rect x="1184" y="196" width="4" height="15" fill="rgb(226,38,12)"/><text x="1187.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py) (2 samples, 0.30%)</title><rect x="1184" y="212" width="4" height="15" fill="rgb(220,43,15)"/><text x="1187.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (2 samples, 0.30%)</title><rect x="1184" y="228" width="4" height="15" fill="rgb(240,141,9)"/><text x="1187.00" y="238.50"></text></g><g><title>_parallel_build_trees (sklearn/ensemble/_forest.py) (2 samples, 0.30%)</title><rect x="1184" y="244" width="4" height="15" fill="rgb(241,72,15)"/><text x="1187.00" y="254.50"></text></g><g><title>fit (sklearn/tree/_classes.py) (2 samples, 0.30%)</title><rect x="1184" y="260" width="4" height="15" fill="rgb(240,145,48)"/><text x="1187.00" y="270.50"></text></g><g><title>fit (sklearn/tree/_classes.py) (2 samples, 0.30%)</title><rect x="1184" y="276" width="4" height="15" fill="rgb(210,48,29)"/><text x="1187.00" y="286.50"></text></g><g><title>all (675 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(221,21,41)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (675 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(237,88,39)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>start (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (3 samples, 0.44%)</title><rect x="1184" y="68" width="6" height="15" fill="rgb(209,219,41)"/><text x="1187.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py) (3 samples, 0.44%)</title><rect x="1184" y="84" width="6" height="15" fill="rgb(251,45,54)"/><text x="1187.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (3 samples, 0.44%)</title><rect x="1184" y="100" width="6" height="15" fill="rgb(208,83,21)"/><text x="1187.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_forest.py) (3 samples, 0.44%)</title><rect x="1184" y="116" width="6" height="15" fill="rgb(220,181,42)"/><text x="1187.00" y="126.50"></text></g><g><title>__call__ (joblib/parallel.py) (3 samples, 0.44%)</title><rect x="1184" y="132" width="6" height="15" fill="rgb(234,124,36)"/><text x="1187.00" y="142.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (3 samples, 0.44%)</title><rect x="1184" y="148" width="6" height="15" fill="rgb(226,26,45)"/><text x="1187.00" y="158.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (1 samples, 0.15%)</title><rect x="1188" y="164" width="2" height="15" fill="rgb(234,33,52)"/><text x="1191.00" y="174.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="1188" y="180" width="2" height="15" fill="rgb(243,212,35)"/><text x="1191.00" y="190.50"></text></g></g></svg>