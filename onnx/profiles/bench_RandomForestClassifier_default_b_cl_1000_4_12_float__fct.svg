<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1686" onload="init(evt)" viewBox="0 0 1200 1686" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1686" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1669.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1669.00"> </text><g id="frames"><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (1 samples, 0.15%)</title><rect x="10" y="868" width="1" height="15" fill="rgb(250,92,34)"/><text x="13.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (1 samples, 0.15%)</title><rect x="10" y="884" width="1" height="15" fill="rgb(226,155,34)"/><text x="13.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (1 samples, 0.15%)</title><rect x="10" y="900" width="1" height="15" fill="rgb(216,67,13)"/><text x="13.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (1 samples, 0.15%)</title><rect x="10" y="916" width="1" height="15" fill="rgb(229,33,36)"/><text x="13.00" y="926.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="196" width="3" height="15" fill="rgb(222,156,53)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="212" width="3" height="15" fill="rgb(241,47,0)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="228" width="3" height="15" fill="rgb(229,140,36)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="244" width="3" height="15" fill="rgb(246,7,17)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="260" width="3" height="15" fill="rgb(227,154,52)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="276" width="3" height="15" fill="rgb(227,226,8)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (2 samples, 0.31%)</title><rect x="10" y="292" width="3" height="15" fill="rgb(205,199,51)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="308" width="3" height="15" fill="rgb(247,199,2)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="324" width="3" height="15" fill="rgb(235,215,48)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="340" width="3" height="15" fill="rgb(208,130,16)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="356" width="3" height="15" fill="rgb(245,126,12)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="372" width="3" height="15" fill="rgb(236,111,16)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (2 samples, 0.31%)</title><rect x="10" y="388" width="3" height="15" fill="rgb(210,37,32)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="404" width="3" height="15" fill="rgb(223,197,4)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="420" width="3" height="15" fill="rgb(223,108,15)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="436" width="3" height="15" fill="rgb(246,179,34)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="452" width="3" height="15" fill="rgb(215,66,24)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="468" width="3" height="15" fill="rgb(237,221,3)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (2 samples, 0.31%)</title><rect x="10" y="484" width="3" height="15" fill="rgb(252,49,13)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="500" width="3" height="15" fill="rgb(249,36,0)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="516" width="3" height="15" fill="rgb(242,64,51)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="532" width="3" height="15" fill="rgb(214,28,25)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="548" width="3" height="15" fill="rgb(253,106,41)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="564" width="3" height="15" fill="rgb(214,51,23)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (2 samples, 0.31%)</title><rect x="10" y="580" width="3" height="15" fill="rgb(241,143,49)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="596" width="3" height="15" fill="rgb(220,56,24)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="612" width="3" height="15" fill="rgb(226,64,2)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="628" width="3" height="15" fill="rgb(250,219,42)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="644" width="3" height="15" fill="rgb(226,73,51)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="660" width="3" height="15" fill="rgb(235,80,32)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="676" width="3" height="15" fill="rgb(246,135,25)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="692" width="3" height="15" fill="rgb(213,75,39)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="708" width="3" height="15" fill="rgb(210,128,10)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (2 samples, 0.31%)</title><rect x="10" y="724" width="3" height="15" fill="rgb(216,201,3)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="740" width="3" height="15" fill="rgb(230,18,21)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="756" width="3" height="15" fill="rgb(226,97,4)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="772" width="3" height="15" fill="rgb(226,8,50)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="10" y="788" width="3" height="15" fill="rgb(246,138,25)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="10" y="804" width="3" height="15" fill="rgb(217,50,39)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (2 samples, 0.31%)</title><rect x="10" y="820" width="3" height="15" fill="rgb(218,136,12)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (2 samples, 0.31%)</title><rect x="10" y="836" width="3" height="15" fill="rgb(247,23,32)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (2 samples, 0.31%)</title><rect x="10" y="852" width="3" height="15" fill="rgb(227,173,48)"/><text x="13.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py) (1 samples, 0.15%)</title><rect x="11" y="868" width="2" height="15" fill="rgb(230,36,34)"/><text x="14.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (1 samples, 0.15%)</title><rect x="11" y="884" width="2" height="15" fill="rgb(211,55,37)"/><text x="14.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (1 samples, 0.15%)</title><rect x="11" y="900" width="2" height="15" fill="rgb(228,117,24)"/><text x="14.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (1 samples, 0.15%)</title><rect x="11" y="916" width="2" height="15" fill="rgb(244,144,53)"/><text x="14.00" y="926.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (1 samples, 0.15%)</title><rect x="11" y="932" width="2" height="15" fill="rgb(217,67,23)"/><text x="14.00" y="942.50"></text></g><g><title>from_location (pkg_resources/__init__.py) (1 samples, 0.15%)</title><rect x="11" y="948" width="2" height="15" fill="rgb(211,79,8)"/><text x="14.00" y="958.50"></text></g><g><title>_sre_SRE_Pattern_match (python3.7) (1 samples, 0.15%)</title><rect x="11" y="964" width="2" height="15" fill="rgb(242,184,15)"/><text x="14.00" y="974.50"></text></g><g><title>sre_ucs1_match (python3.7) (1 samples, 0.15%)</title><rect x="11" y="980" width="2" height="15" fill="rgb(246,204,30)"/><text x="14.00" y="990.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="13" y="1316" width="2" height="15" fill="rgb(220,133,1)"/><text x="16.00" y="1326.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="13" y="1332" width="2" height="15" fill="rgb(220,93,8)"/><text x="16.00" y="1342.50"></text></g><g><title>call (jinja2/runtime.py) (2 samples, 0.31%)</title><rect x="15" y="1588" width="4" height="15" fill="rgb(237,32,41)"/><text x="18.00" y="1598.50"></text></g><g><title>process_documentation (skl2onnx/algebra/automation.py) (1 samples, 0.15%)</title><rect x="17" y="1604" width="2" height="15" fill="rgb(234,81,31)"/><text x="20.00" y="1614.50"></text></g><g><title>dedent (textwrap.py) (1 samples, 0.15%)</title><rect x="17" y="1620" width="2" height="15" fill="rgb(240,134,16)"/><text x="20.00" y="1630.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.15%)</title><rect x="17" y="1636" width="2" height="15" fill="rgb(234,200,20)"/><text x="20.00" y="1646.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="484" width="7" height="15" fill="rgb(248,28,0)"/><text x="16.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="500" width="7" height="15" fill="rgb(220,6,19)"/><text x="16.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="516" width="7" height="15" fill="rgb(219,17,47)"/><text x="16.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="532" width="7" height="15" fill="rgb(239,55,36)"/><text x="16.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="13" y="548" width="7" height="15" fill="rgb(211,4,5)"/><text x="16.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="564" width="7" height="15" fill="rgb(247,205,28)"/><text x="16.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (4 samples, 0.62%)</title><rect x="13" y="580" width="7" height="15" fill="rgb(234,151,6)"/><text x="16.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="596" width="7" height="15" fill="rgb(225,65,26)"/><text x="16.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="612" width="7" height="15" fill="rgb(242,49,1)"/><text x="16.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="628" width="7" height="15" fill="rgb(250,62,8)"/><text x="16.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="13" y="644" width="7" height="15" fill="rgb(241,13,50)"/><text x="16.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="660" width="7" height="15" fill="rgb(251,149,48)"/><text x="16.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (4 samples, 0.62%)</title><rect x="13" y="676" width="7" height="15" fill="rgb(250,0,25)"/><text x="16.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="692" width="7" height="15" fill="rgb(223,85,35)"/><text x="16.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="708" width="7" height="15" fill="rgb(208,125,13)"/><text x="16.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="724" width="7" height="15" fill="rgb(231,81,11)"/><text x="16.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="13" y="740" width="7" height="15" fill="rgb(211,120,18)"/><text x="16.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="756" width="7" height="15" fill="rgb(213,201,53)"/><text x="16.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (4 samples, 0.62%)</title><rect x="13" y="772" width="7" height="15" fill="rgb(209,48,37)"/><text x="16.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="788" width="7" height="15" fill="rgb(231,156,32)"/><text x="16.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="804" width="7" height="15" fill="rgb(212,103,12)"/><text x="16.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="820" width="7" height="15" fill="rgb(240,215,13)"/><text x="16.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="13" y="836" width="7" height="15" fill="rgb(206,93,11)"/><text x="16.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="852" width="7" height="15" fill="rgb(244,94,28)"/><text x="16.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (4 samples, 0.62%)</title><rect x="13" y="868" width="7" height="15" fill="rgb(251,110,0)"/><text x="16.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="884" width="7" height="15" fill="rgb(244,70,5)"/><text x="16.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="900" width="7" height="15" fill="rgb(244,106,45)"/><text x="16.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="916" width="7" height="15" fill="rgb(223,92,52)"/><text x="16.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="932" width="7" height="15" fill="rgb(230,112,26)"/><text x="16.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="948" width="7" height="15" fill="rgb(216,137,22)"/><text x="16.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="964" width="7" height="15" fill="rgb(227,74,27)"/><text x="16.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="13" y="980" width="7" height="15" fill="rgb(210,174,52)"/><text x="16.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="996" width="7" height="15" fill="rgb(208,156,28)"/><text x="16.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (4 samples, 0.62%)</title><rect x="13" y="1012" width="7" height="15" fill="rgb(228,18,20)"/><text x="16.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1028" width="7" height="15" fill="rgb(224,61,51)"/><text x="16.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1044" width="7" height="15" fill="rgb(234,212,31)"/><text x="16.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1060" width="7" height="15" fill="rgb(217,95,42)"/><text x="16.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="13" y="1076" width="7" height="15" fill="rgb(254,85,38)"/><text x="16.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1092" width="7" height="15" fill="rgb(244,162,41)"/><text x="16.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (4 samples, 0.62%)</title><rect x="13" y="1108" width="7" height="15" fill="rgb(237,131,0)"/><text x="16.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1124" width="7" height="15" fill="rgb(238,188,54)"/><text x="16.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1140" width="7" height="15" fill="rgb(238,111,19)"/><text x="16.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1156" width="7" height="15" fill="rgb(210,98,23)"/><text x="16.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1172" width="7" height="15" fill="rgb(243,65,1)"/><text x="16.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1188" width="7" height="15" fill="rgb(235,138,15)"/><text x="16.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="13" y="1204" width="7" height="15" fill="rgb(237,195,52)"/><text x="16.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1220" width="7" height="15" fill="rgb(218,15,9)"/><text x="16.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (4 samples, 0.62%)</title><rect x="13" y="1236" width="7" height="15" fill="rgb(250,121,1)"/><text x="16.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1252" width="7" height="15" fill="rgb(208,192,53)"/><text x="16.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1268" width="7" height="15" fill="rgb(254,26,40)"/><text x="16.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1284" width="7" height="15" fill="rgb(232,176,16)"/><text x="16.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="13" y="1300" width="7" height="15" fill="rgb(248,211,52)"/><text x="16.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.46%)</title><rect x="15" y="1316" width="5" height="15" fill="rgb(219,178,52)"/><text x="18.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.46%)</title><rect x="15" y="1332" width="5" height="15" fill="rgb(230,196,32)"/><text x="18.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.46%)</title><rect x="15" y="1348" width="5" height="15" fill="rgb(217,105,9)"/><text x="18.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (3 samples, 0.46%)</title><rect x="15" y="1364" width="5" height="15" fill="rgb(247,212,18)"/><text x="18.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.46%)</title><rect x="15" y="1380" width="5" height="15" fill="rgb(242,91,5)"/><text x="18.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.46%)</title><rect x="15" y="1396" width="5" height="15" fill="rgb(215,107,31)"/><text x="18.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.46%)</title><rect x="15" y="1412" width="5" height="15" fill="rgb(253,130,35)"/><text x="18.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.46%)</title><rect x="15" y="1428" width="5" height="15" fill="rgb(250,198,4)"/><text x="18.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.46%)</title><rect x="15" y="1444" width="5" height="15" fill="rgb(219,46,17)"/><text x="18.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (3 samples, 0.46%)</title><rect x="15" y="1460" width="5" height="15" fill="rgb(214,110,21)"/><text x="18.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (3 samples, 0.46%)</title><rect x="15" y="1476" width="5" height="15" fill="rgb(220,157,6)"/><text x="18.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (3 samples, 0.46%)</title><rect x="15" y="1492" width="5" height="15" fill="rgb(242,221,33)"/><text x="18.00" y="1502.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py) (3 samples, 0.46%)</title><rect x="15" y="1508" width="5" height="15" fill="rgb(209,73,50)"/><text x="18.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py) (3 samples, 0.46%)</title><rect x="15" y="1524" width="5" height="15" fill="rgb(210,141,21)"/><text x="18.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py) (3 samples, 0.46%)</title><rect x="15" y="1540" width="5" height="15" fill="rgb(217,217,21)"/><text x="18.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (3 samples, 0.46%)</title><rect x="15" y="1556" width="5" height="15" fill="rgb(253,86,13)"/><text x="18.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;) (3 samples, 0.46%)</title><rect x="15" y="1572" width="5" height="15" fill="rgb(207,213,0)"/><text x="18.00" y="1582.50"></text></g><g><title>resolve_or_missing (jinja2/runtime.py) (1 samples, 0.15%)</title><rect x="19" y="1588" width="1" height="15" fill="rgb(221,142,11)"/><text x="22.00" y="1598.50"></text></g><g><title>resolve_or_missing (jinja2/runtime.py) (1 samples, 0.15%)</title><rect x="19" y="1604" width="1" height="15" fill="rgb(230,76,26)"/><text x="22.00" y="1614.50"></text></g><g><title>__call__ (pandas/util/_decorators.py) (1 samples, 0.15%)</title><rect x="20" y="1188" width="2" height="15" fill="rgb(229,40,25)"/><text x="23.00" y="1198.50"></text></g><g><title>dedent (textwrap.py) (1 samples, 0.15%)</title><rect x="20" y="1204" width="2" height="15" fill="rgb(209,212,14)"/><text x="23.00" y="1214.50"></text></g><g><title>sub (re.py) (1 samples, 0.15%)</title><rect x="20" y="1220" width="2" height="15" fill="rgb(235,52,6)"/><text x="23.00" y="1230.50"></text></g><g><title>_compile (re.py) (1 samples, 0.15%)</title><rect x="20" y="1236" width="2" height="15" fill="rgb(211,182,51)"/><text x="23.00" y="1246.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="772" width="4" height="15" fill="rgb(243,114,37)"/><text x="23.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="788" width="4" height="15" fill="rgb(249,151,13)"/><text x="23.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="804" width="4" height="15" fill="rgb(247,78,1)"/><text x="23.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="820" width="4" height="15" fill="rgb(249,178,47)"/><text x="23.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="20" y="836" width="4" height="15" fill="rgb(239,94,24)"/><text x="23.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="852" width="4" height="15" fill="rgb(205,70,4)"/><text x="23.00" y="862.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/__init__.py) (2 samples, 0.31%)</title><rect x="20" y="868" width="4" height="15" fill="rgb(228,206,45)"/><text x="23.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="884" width="4" height="15" fill="rgb(248,223,31)"/><text x="23.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="900" width="4" height="15" fill="rgb(248,124,14)"/><text x="23.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="916" width="4" height="15" fill="rgb(215,32,14)"/><text x="23.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="20" y="932" width="4" height="15" fill="rgb(238,136,26)"/><text x="23.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="948" width="4" height="15" fill="rgb(232,186,41)"/><text x="23.00" y="958.50"></text></g><g><title>&lt;module&gt; (pandas/core/arrays/interval.py) (2 samples, 0.31%)</title><rect x="20" y="964" width="4" height="15" fill="rgb(230,74,39)"/><text x="23.00" y="974.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="980" width="4" height="15" fill="rgb(219,173,13)"/><text x="23.00" y="990.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="996" width="4" height="15" fill="rgb(226,65,45)"/><text x="23.00" y="1006.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="1012" width="4" height="15" fill="rgb(214,157,22)"/><text x="23.00" y="1022.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="20" y="1028" width="4" height="15" fill="rgb(215,54,22)"/><text x="23.00" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="1044" width="4" height="15" fill="rgb(211,30,41)"/><text x="23.00" y="1054.50"></text></g><g><title>&lt;module&gt; (pandas/core/indexes/base.py) (2 samples, 0.31%)</title><rect x="20" y="1060" width="4" height="15" fill="rgb(225,177,48)"/><text x="23.00" y="1070.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="1076" width="4" height="15" fill="rgb(208,132,31)"/><text x="23.00" y="1086.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="1092" width="4" height="15" fill="rgb(210,184,49)"/><text x="23.00" y="1102.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="1108" width="4" height="15" fill="rgb(233,191,52)"/><text x="23.00" y="1118.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.31%)</title><rect x="20" y="1124" width="4" height="15" fill="rgb(216,98,48)"/><text x="23.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.31%)</title><rect x="20" y="1140" width="4" height="15" fill="rgb(237,47,42)"/><text x="23.00" y="1150.50"></text></g><g><title>&lt;module&gt; (pandas/core/strings.py) (2 samples, 0.31%)</title><rect x="20" y="1156" width="4" height="15" fill="rgb(212,118,31)"/><text x="23.00" y="1166.50"></text></g><g><title>StringMethods (pandas/core/strings.py) (2 samples, 0.31%)</title><rect x="20" y="1172" width="4" height="15" fill="rgb(250,63,7)"/><text x="23.00" y="1182.50"></text></g><g><title>_pat_wrapper (pandas/core/strings.py) (1 samples, 0.15%)</title><rect x="22" y="1188" width="2" height="15" fill="rgb(217,196,47)"/><text x="25.00" y="1198.50"></text></g><g><title>forbid_nonstring_types (pandas/core/strings.py) (1 samples, 0.15%)</title><rect x="22" y="1204" width="2" height="15" fill="rgb(237,197,10)"/><text x="25.00" y="1214.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (3 samples, 0.46%)</title><rect x="20" y="724" width="6" height="15" fill="rgb(221,29,22)"/><text x="23.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.46%)</title><rect x="20" y="740" width="6" height="15" fill="rgb(245,109,15)"/><text x="23.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.46%)</title><rect x="20" y="756" width="6" height="15" fill="rgb(208,107,31)"/><text x="23.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="772" width="2" height="15" fill="rgb(238,87,16)"/><text x="27.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="24" y="788" width="2" height="15" fill="rgb(236,194,10)"/><text x="27.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="804" width="2" height="15" fill="rgb(245,76,50)"/><text x="27.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (1 samples, 0.15%)</title><rect x="24" y="820" width="2" height="15" fill="rgb(245,26,21)"/><text x="27.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="836" width="2" height="15" fill="rgb(241,2,54)"/><text x="27.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="852" width="2" height="15" fill="rgb(242,84,3)"/><text x="27.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="868" width="2" height="15" fill="rgb(247,94,23)"/><text x="27.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="24" y="884" width="2" height="15" fill="rgb(222,194,47)"/><text x="27.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="900" width="2" height="15" fill="rgb(251,181,46)"/><text x="27.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (1 samples, 0.15%)</title><rect x="24" y="916" width="2" height="15" fill="rgb(225,196,5)"/><text x="27.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="932" width="2" height="15" fill="rgb(247,127,30)"/><text x="27.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="948" width="2" height="15" fill="rgb(244,17,49)"/><text x="27.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="964" width="2" height="15" fill="rgb(231,115,14)"/><text x="27.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="24" y="980" width="2" height="15" fill="rgb(215,68,1)"/><text x="27.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="996" width="2" height="15" fill="rgb(214,153,27)"/><text x="27.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (1 samples, 0.15%)</title><rect x="24" y="1012" width="2" height="15" fill="rgb(205,22,19)"/><text x="27.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="1028" width="2" height="15" fill="rgb(242,60,7)"/><text x="27.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="1044" width="2" height="15" fill="rgb(209,167,10)"/><text x="27.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="24" y="1060" width="2" height="15" fill="rgb(238,52,27)"/><text x="27.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="24" y="1076" width="2" height="15" fill="rgb(210,4,48)"/><text x="27.00" y="1086.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="24" y="1092" width="2" height="15" fill="rgb(219,183,10)"/><text x="27.00" y="1102.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="24" y="1108" width="2" height="15" fill="rgb(250,166,10)"/><text x="27.00" y="1118.50"></text></g><g><title>mmap64 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="24" y="1124" width="2" height="15" fill="rgb(237,223,7)"/><text x="27.00" y="1134.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (8 samples, 1.24%)</title><rect x="13" y="340" width="15" height="15" fill="rgb(246,120,4)"/><text x="16.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="13" y="356" width="15" height="15" fill="rgb(233,188,9)"/><text x="16.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="13" y="372" width="15" height="15" fill="rgb(221,43,15)"/><text x="16.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="13" y="388" width="15" height="15" fill="rgb(223,73,51)"/><text x="16.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.24%)</title><rect x="13" y="404" width="15" height="15" fill="rgb(217,115,11)"/><text x="16.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="13" y="420" width="15" height="15" fill="rgb(237,73,46)"/><text x="16.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (8 samples, 1.24%)</title><rect x="13" y="436" width="15" height="15" fill="rgb(252,41,9)"/><text x="16.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="13" y="452" width="15" height="15" fill="rgb(235,105,3)"/><text x="16.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.24%)</title><rect x="13" y="468" width="15" height="15" fill="rgb(246,29,27)"/><text x="16.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="20" y="484" width="8" height="15" fill="rgb(222,4,51)"/><text x="23.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="20" y="500" width="8" height="15" fill="rgb(248,35,49)"/><text x="23.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="20" y="516" width="8" height="15" fill="rgb(250,85,53)"/><text x="23.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (4 samples, 0.62%)</title><rect x="20" y="532" width="8" height="15" fill="rgb(237,119,3)"/><text x="23.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="20" y="548" width="8" height="15" fill="rgb(251,194,42)"/><text x="23.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="20" y="564" width="8" height="15" fill="rgb(233,128,13)"/><text x="23.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="20" y="580" width="8" height="15" fill="rgb(221,17,16)"/><text x="23.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="20" y="596" width="8" height="15" fill="rgb(221,0,28)"/><text x="23.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="20" y="612" width="8" height="15" fill="rgb(225,59,18)"/><text x="23.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (4 samples, 0.62%)</title><rect x="20" y="628" width="8" height="15" fill="rgb(233,52,19)"/><text x="23.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="20" y="644" width="8" height="15" fill="rgb(252,83,13)"/><text x="23.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="20" y="660" width="8" height="15" fill="rgb(232,58,31)"/><text x="23.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="20" y="676" width="8" height="15" fill="rgb(239,49,12)"/><text x="23.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.62%)</title><rect x="20" y="692" width="8" height="15" fill="rgb(251,77,35)"/><text x="23.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="20" y="708" width="8" height="15" fill="rgb(226,223,40)"/><text x="23.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/config_init.py) (1 samples, 0.15%)</title><rect x="26" y="724" width="2" height="15" fill="rgb(245,116,40)"/><text x="29.00" y="734.50"></text></g><g><title>is_instance_factory (pandas/_config/config.py) (1 samples, 0.15%)</title><rect x="26" y="740" width="2" height="15" fill="rgb(246,104,47)"/><text x="29.00" y="750.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.15%)</title><rect x="26" y="756" width="2" height="15" fill="rgb(251,52,27)"/><text x="29.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (9 samples, 1.39%)</title><rect x="13" y="244" width="17" height="15" fill="rgb(209,208,23)"/><text x="16.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.39%)</title><rect x="13" y="260" width="17" height="15" fill="rgb(254,18,37)"/><text x="16.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.39%)</title><rect x="13" y="276" width="17" height="15" fill="rgb(222,221,39)"/><text x="16.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.39%)</title><rect x="13" y="292" width="17" height="15" fill="rgb(233,106,22)"/><text x="16.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 1.39%)</title><rect x="13" y="308" width="17" height="15" fill="rgb(252,140,29)"/><text x="16.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.39%)</title><rect x="13" y="324" width="17" height="15" fill="rgb(205,155,29)"/><text x="16.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py) (1 samples, 0.15%)</title><rect x="28" y="340" width="2" height="15" fill="rgb(224,174,24)"/><text x="31.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="356" width="2" height="15" fill="rgb(253,116,21)"/><text x="31.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="372" width="2" height="15" fill="rgb(242,140,47)"/><text x="31.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="388" width="2" height="15" fill="rgb(238,58,22)"/><text x="31.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="404" width="2" height="15" fill="rgb(218,34,12)"/><text x="31.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="420" width="2" height="15" fill="rgb(212,160,11)"/><text x="31.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="436" width="2" height="15" fill="rgb(215,173,3)"/><text x="31.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="28" y="452" width="2" height="15" fill="rgb(222,64,38)"/><text x="31.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="468" width="2" height="15" fill="rgb(216,121,13)"/><text x="31.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py) (1 samples, 0.15%)</title><rect x="28" y="484" width="2" height="15" fill="rgb(225,186,49)"/><text x="31.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="500" width="2" height="15" fill="rgb(208,226,43)"/><text x="31.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="516" width="2" height="15" fill="rgb(251,190,25)"/><text x="31.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="532" width="2" height="15" fill="rgb(218,217,42)"/><text x="31.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="28" y="548" width="2" height="15" fill="rgb(234,118,5)"/><text x="31.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="564" width="2" height="15" fill="rgb(215,69,46)"/><text x="31.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/code_helper.py) (1 samples, 0.15%)</title><rect x="28" y="580" width="2" height="15" fill="rgb(220,102,9)"/><text x="31.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="596" width="2" height="15" fill="rgb(245,5,45)"/><text x="31.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="612" width="2" height="15" fill="rgb(226,98,34)"/><text x="31.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="628" width="2" height="15" fill="rgb(212,110,28)"/><text x="31.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="28" y="644" width="2" height="15" fill="rgb(236,111,51)"/><text x="31.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="660" width="2" height="15" fill="rgb(249,215,21)"/><text x="31.00" y="670.50"></text></g><g><title>&lt;module&gt; (autopep8.py) (1 samples, 0.15%)</title><rect x="28" y="676" width="2" height="15" fill="rgb(235,53,28)"/><text x="31.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="692" width="2" height="15" fill="rgb(222,145,37)"/><text x="31.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="708" width="2" height="15" fill="rgb(222,170,17)"/><text x="31.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="724" width="2" height="15" fill="rgb(247,170,15)"/><text x="31.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="28" y="740" width="2" height="15" fill="rgb(211,148,12)"/><text x="31.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="28" y="756" width="2" height="15" fill="rgb(218,128,16)"/><text x="31.00" y="766.50"></text></g><g><title>&lt;module&gt; (pycodestyle.py) (1 samples, 0.15%)</title><rect x="28" y="772" width="2" height="15" fill="rgb(235,68,37)"/><text x="31.00" y="782.50"></text></g><g><title>compile (re.py) (1 samples, 0.15%)</title><rect x="28" y="788" width="2" height="15" fill="rgb(232,125,28)"/><text x="31.00" y="798.50"></text></g><g><title>_compile (re.py) (1 samples, 0.15%)</title><rect x="28" y="804" width="2" height="15" fill="rgb(241,155,20)"/><text x="31.00" y="814.50"></text></g><g><title>compile (sre_compile.py) (1 samples, 0.15%)</title><rect x="28" y="820" width="2" height="15" fill="rgb(236,53,26)"/><text x="31.00" y="830.50"></text></g><g><title>parse (sre_parse.py) (1 samples, 0.15%)</title><rect x="28" y="836" width="2" height="15" fill="rgb(213,221,39)"/><text x="31.00" y="846.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.15%)</title><rect x="28" y="852" width="2" height="15" fill="rgb(222,223,44)"/><text x="31.00" y="862.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.15%)</title><rect x="28" y="868" width="2" height="15" fill="rgb(254,88,14)"/><text x="31.00" y="878.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.15%)</title><rect x="28" y="884" width="2" height="15" fill="rgb(239,182,28)"/><text x="31.00" y="894.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.15%)</title><rect x="28" y="900" width="2" height="15" fill="rgb(250,115,17)"/><text x="31.00" y="910.50"></text></g><g><title>__getitem__ (sre_parse.py) (1 samples, 0.15%)</title><rect x="28" y="916" width="2" height="15" fill="rgb(230,11,8)"/><text x="31.00" y="926.50"></text></g><g><title>__init__ (sre_parse.py) (1 samples, 0.15%)</title><rect x="28" y="932" width="2" height="15" fill="rgb(229,170,50)"/><text x="31.00" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.85%)</title><rect x="10" y="68" width="21" height="15" fill="rgb(229,5,14)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.85%)</title><rect x="10" y="84" width="21" height="15" fill="rgb(221,95,10)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.85%)</title><rect x="10" y="100" width="21" height="15" fill="rgb(244,47,13)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (12 samples, 1.85%)</title><rect x="10" y="116" width="21" height="15" fill="rgb(243,62,42)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.85%)</title><rect x="10" y="132" width="21" height="15" fill="rgb(206,154,26)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py) (12 samples, 1.85%)</title><rect x="10" y="148" width="21" height="15" fill="rgb(249,186,4)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.85%)</title><rect x="10" y="164" width="21" height="15" fill="rgb(216,78,52)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.85%)</title><rect x="10" y="180" width="21" height="15" fill="rgb(215,35,19)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.55%)</title><rect x="13" y="196" width="18" height="15" fill="rgb(228,26,4)"/><text x="16.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (10 samples, 1.55%)</title><rect x="13" y="212" width="18" height="15" fill="rgb(208,23,38)"/><text x="16.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.55%)</title><rect x="13" y="228" width="18" height="15" fill="rgb(206,101,35)"/><text x="16.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py) (1 samples, 0.15%)</title><rect x="30" y="244" width="1" height="15" fill="rgb(230,168,39)"/><text x="33.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="260" width="1" height="15" fill="rgb(231,31,3)"/><text x="33.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="276" width="1" height="15" fill="rgb(223,167,44)"/><text x="33.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="292" width="1" height="15" fill="rgb(239,223,17)"/><text x="33.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="308" width="1" height="15" fill="rgb(223,219,3)"/><text x="33.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="324" width="1" height="15" fill="rgb(225,106,44)"/><text x="33.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="30" y="340" width="1" height="15" fill="rgb(252,177,23)"/><text x="33.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="356" width="1" height="15" fill="rgb(234,44,37)"/><text x="33.00" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/random/__init__.py) (1 samples, 0.15%)</title><rect x="30" y="372" width="1" height="15" fill="rgb(249,204,24)"/><text x="33.00" y="382.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="388" width="1" height="15" fill="rgb(252,85,1)"/><text x="33.00" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="404" width="1" height="15" fill="rgb(242,70,31)"/><text x="33.00" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="420" width="1" height="15" fill="rgb(205,74,44)"/><text x="33.00" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="436" width="1" height="15" fill="rgb(219,55,30)"/><text x="33.00" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="452" width="1" height="15" fill="rgb(228,166,10)"/><text x="33.00" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="30" y="468" width="1" height="15" fill="rgb(210,166,46)"/><text x="33.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="484" width="1" height="15" fill="rgb(225,157,35)"/><text x="33.00" y="494.50"></text></g><g><title>&lt;module&gt; (numpy/random/_pickle.py) (1 samples, 0.15%)</title><rect x="30" y="500" width="1" height="15" fill="rgb(242,108,32)"/><text x="33.00" y="510.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="516" width="1" height="15" fill="rgb(205,173,21)"/><text x="33.00" y="526.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="532" width="1" height="15" fill="rgb(226,34,24)"/><text x="33.00" y="542.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="548" width="1" height="15" fill="rgb(208,128,17)"/><text x="33.00" y="558.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.15%)</title><rect x="30" y="564" width="1" height="15" fill="rgb(252,139,40)"/><text x="33.00" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="30" y="580" width="1" height="15" fill="rgb(227,147,21)"/><text x="33.00" y="590.50"></text></g><g><title>0x7fa54b3261bb (?) (1 samples, 0.15%)</title><rect x="30" y="596" width="1" height="15" fill="rgb(236,163,20)"/><text x="33.00" y="606.50"></text></g><g><title>0x7fa518a1fff9 (?) (1 samples, 0.15%)</title><rect x="33" y="212" width="2" height="15" fill="rgb(222,221,4)"/><text x="36.00" y="222.50"></text></g><g><title>0x7fa518a1aef6 (?) (1 samples, 0.15%)</title><rect x="33" y="228" width="2" height="15" fill="rgb(209,35,30)"/><text x="36.00" y="238.50"></text></g><g><title>0x7fa518a0fc99 (?) (1 samples, 0.15%)</title><rect x="33" y="244" width="2" height="15" fill="rgb(250,229,18)"/><text x="36.00" y="254.50"></text></g><g><title>0x7fa518a2dd21 (?) (1 samples, 0.15%)</title><rect x="33" y="260" width="2" height="15" fill="rgb(220,175,18)"/><text x="36.00" y="270.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (173 samples, 26.74%)</title><rect x="41" y="356" width="315" height="15" fill="rgb(229,124,15)"/><text x="44.00" y="366.50">onnxruntime::ml::TreeEnsembleClassifier&lt;fl..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="356" y="356" width="2" height="15" fill="rgb(223,174,36)"/><text x="359.00" y="366.50"></text></g><g><title>0x7fa558a6191e (libc-2.29.so) (1 samples, 0.15%)</title><rect x="356" y="372" width="2" height="15" fill="rgb(249,203,37)"/><text x="359.00" y="382.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (178 samples, 27.51%)</title><rect x="35" y="340" width="325" height="15" fill="rgb(236,179,20)"/><text x="38.00" y="350.50">onnxruntime::ml::TreeEnsembleClassifier&lt;flo..</text></g><g><title>std::_Rb_tree_increment (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="358" y="356" width="2" height="15" fill="rgb(231,32,13)"/><text x="361.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 28.13%)</title><rect x="35" y="260" width="332" height="15" fill="rgb(218,163,17)"/><text x="38.00" y="270.50">onnxruntime::InferenceSession::Run (onnxrunt..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 28.13%)</title><rect x="35" y="276" width="332" height="15" fill="rgb(241,117,25)"/><text x="38.00" y="286.50">onnxruntime::InferenceSession::Run (onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 28.13%)</title><rect x="35" y="292" width="332" height="15" fill="rgb(215,13,25)"/><text x="38.00" y="302.50">onnxruntime::utils::ExecuteGraph (onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 28.13%)</title><rect x="35" y="308" width="332" height="15" fill="rgb(238,113,26)"/><text x="38.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl (onnxru..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (182 samples, 28.13%)</title><rect x="35" y="324" width="332" height="15" fill="rgb(228,86,51)"/><text x="38.00" y="334.50">onnxruntime::SequentialExecutor::Execute (on..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.62%)</title><rect x="360" y="340" width="7" height="15" fill="rgb(237,90,44)"/><text x="363.00" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.62%)</title><rect x="360" y="356" width="7" height="15" fill="rgb(206,129,5)"/><text x="363.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.62%)</title><rect x="360" y="372" width="7" height="15" fill="rgb(225,171,22)"/><text x="363.00" y="382.50"></text></g><g><title>0x7fa558a62dd6 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="365" y="388" width="2" height="15" fill="rgb(254,125,5)"/><text x="368.00" y="398.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="367" y="260" width="2" height="15" fill="rgb(230,89,20)"/><text x="370.00" y="270.50"></text></g><g><title>profile_ort (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (186 samples, 28.75%)</title><rect x="31" y="68" width="340" height="15" fill="rgb(225,140,16)"/><text x="34.00" y="78.50">profile_ort (bench_RandomForestClassifier_defa..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (186 samples, 28.75%)</title><rect x="31" y="84" width="340" height="15" fill="rgb(234,147,47)"/><text x="34.00" y="94.50">setup_profile (bench_RandomForestClassifier_de..</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (186 samples, 28.75%)</title><rect x="31" y="100" width="340" height="15" fill="rgb(246,37,29)"/><text x="34.00" y="110.50">profile (bench_RandomForestClassifier_default_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (185 samples, 28.59%)</title><rect x="33" y="116" width="338" height="15" fill="rgb(241,163,29)"/><text x="36.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (185 samples, 28.59%)</title><rect x="33" y="132" width="338" height="15" fill="rgb(230,184,14)"/><text x="36.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (185 samples, 28.59%)</title><rect x="33" y="148" width="338" height="15" fill="rgb(219,76,11)"/><text x="36.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (185 samples, 28.59%)</title><rect x="33" y="164" width="338" height="15" fill="rgb(247,223,13)"/><text x="36.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inf..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (185 samples, 28.59%)</title><rect x="33" y="180" width="338" height="15" fill="rgb(245,201,11)"/><text x="36.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (185 samples, 28.59%)</title><rect x="33" y="196" width="338" height="15" fill="rgb(250,180,31)"/><text x="36.00" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (184 samples, 28.44%)</title><rect x="35" y="212" width="336" height="15" fill="rgb(246,113,19)"/><text x="38.00" y="222.50">pybind11::cpp_function::dispatcher (onnxrunti..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (184 samples, 28.44%)</title><rect x="35" y="228" width="336" height="15" fill="rgb(214,162,0)"/><text x="38.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxr..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (184 samples, 28.44%)</title><rect x="35" y="244" width="336" height="15" fill="rgb(219,9,40)"/><text x="38.00" y="254.50">onnxruntime::python::addObjectMethods(pybind1..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="369" y="260" width="2" height="15" fill="rgb(230,49,18)"/><text x="372.00" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="369" y="276" width="2" height="15" fill="rgb(251,69,44)"/><text x="372.00" y="286.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="369" y="292" width="2" height="15" fill="rgb(252,48,31)"/><text x="372.00" y="302.50"></text></g><g><title>0x7fa558a61d07 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="369" y="308" width="2" height="15" fill="rgb(228,144,14)"/><text x="372.00" y="318.50"></text></g><g><title>0x7fa5196ff422 (?) (1 samples, 0.15%)</title><rect x="371" y="244" width="1" height="15" fill="rgb(238,222,38)"/><text x="374.00" y="254.50"></text></g><g><title>0x7fa51970589e (?) (1 samples, 0.15%)</title><rect x="371" y="260" width="1" height="15" fill="rgb(234,147,9)"/><text x="374.00" y="270.50"></text></g><g><title>0x7fa51970574f (?) (1 samples, 0.15%)</title><rect x="371" y="276" width="1" height="15" fill="rgb(211,95,7)"/><text x="374.00" y="286.50"></text></g><g><title>0x7fa51970ba3a (?) (1 samples, 0.15%)</title><rect x="371" y="292" width="1" height="15" fill="rgb(234,159,13)"/><text x="374.00" y="302.50"></text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (1 samples, 0.15%)</title><rect x="371" y="308" width="1" height="15" fill="rgb(225,205,0)"/><text x="374.00" y="318.50"></text></g><g><title>0x7fa51970678c (?) (1 samples, 0.15%)</title><rect x="371" y="324" width="1" height="15" fill="rgb(247,169,18)"/><text x="374.00" y="334.50"></text></g><g><title>0x7fa5196f2d54 (?) (1 samples, 0.15%)</title><rect x="371" y="340" width="1" height="15" fill="rgb(231,219,13)"/><text x="374.00" y="350.50"></text></g><g><title>0x7fa522a27ab9 (libgomp.so.1.0.0) (1 samples, 0.15%)</title><rect x="372" y="452" width="2" height="15" fill="rgb(210,188,29)"/><text x="375.00" y="462.50"></text></g><g><title>0x7fa522a28ead (libgomp.so.1.0.0) (1 samples, 0.15%)</title><rect x="372" y="468" width="2" height="15" fill="rgb(216,161,25)"/><text x="375.00" y="478.50"></text></g><g><title>std::_Bit_reference::operator bool (stl_bvector.h) (1 samples, 0.15%)</title><rect x="427" y="500" width="2" height="15" fill="rgb(254,218,23)"/><text x="430.00" y="510.50"></text></g><g><title>std::isnan (cmath) (5 samples, 0.77%)</title><rect x="429" y="500" width="9" height="15" fill="rgb(227,62,42)"/><text x="432.00" y="510.50"></text></g><g><title>std::map&lt;long, long, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_map.h) (25 samples, 3.86%)</title><rect x="438" y="500" width="46" height="15" fill="rgb(252,30,40)"/><text x="441.00" y="510.50">std:..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h) (25 samples, 3.86%)</title><rect x="438" y="516" width="46" height="15" fill="rgb(250,13,22)"/><text x="441.00" y="526.50">std:..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h) (24 samples, 3.71%)</title><rect x="440" y="532" width="44" height="15" fill="rgb(211,131,26)"/><text x="443.00" y="542.50">std:..</text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (stl_bvector.h) (1 samples, 0.15%)</title><rect x="484" y="500" width="2" height="15" fill="rgb(241,130,33)"/><text x="487.00" y="510.50"></text></g><g><title>std::_Bit_iterator::operator* (stl_bvector.h) (1 samples, 0.15%)</title><rect x="484" y="516" width="2" height="15" fill="rgb(216,195,5)"/><text x="487.00" y="526.50"></text></g><g><title>profile_pyrt (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (66 samples, 10.20%)</title><rect x="371" y="68" width="120" height="15" fill="rgb(232,156,38)"/><text x="374.00" y="78.50">profile_pyrt (..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (66 samples, 10.20%)</title><rect x="371" y="84" width="120" height="15" fill="rgb(210,205,54)"/><text x="374.00" y="94.50">setup_profile ..</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (66 samples, 10.20%)</title><rect x="371" y="100" width="120" height="15" fill="rgb(241,17,35)"/><text x="374.00" y="110.50">profile (bench..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (66 samples, 10.20%)</title><rect x="371" y="116" width="120" height="15" fill="rgb(244,57,27)"/><text x="374.00" y="126.50">time_predict (..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (66 samples, 10.20%)</title><rect x="371" y="132" width="120" height="15" fill="rgb(225,115,13)"/><text x="374.00" y="142.50">&lt;lambda&gt; (mlpr..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (66 samples, 10.20%)</title><rect x="371" y="148" width="120" height="15" fill="rgb(241,15,0)"/><text x="374.00" y="158.50">run (mlprodict..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (66 samples, 10.20%)</title><rect x="371" y="164" width="120" height="15" fill="rgb(205,141,17)"/><text x="374.00" y="174.50">_run_sequence_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (66 samples, 10.20%)</title><rect x="371" y="180" width="120" height="15" fill="rgb(225,213,2)"/><text x="374.00" y="190.50">run (mlprodict..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (66 samples, 10.20%)</title><rect x="371" y="196" width="120" height="15" fill="rgb(224,59,11)"/><text x="374.00" y="206.50">run (mlprodict..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (66 samples, 10.20%)</title><rect x="371" y="212" width="120" height="15" fill="rgb(248,54,3)"/><text x="374.00" y="222.50">run (mlprodict..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py) (66 samples, 10.20%)</title><rect x="371" y="228" width="120" height="15" fill="rgb(239,118,43)"/><text x="374.00" y="238.50">_run (mlprodic..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (65 samples, 10.05%)</title><rect x="372" y="244" width="119" height="15" fill="rgb(230,59,39)"/><text x="375.00" y="254.50">pybind11::cpp_..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (65 samples, 10.05%)</title><rect x="372" y="260" width="119" height="15" fill="rgb(211,187,4)"/><text x="375.00" y="270.50">void pybind11:..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (65 samples, 10.05%)</title><rect x="372" y="276" width="119" height="15" fill="rgb(210,77,31)"/><text x="375.00" y="286.50">void pybind11:..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (65 samples, 10.05%)</title><rect x="372" y="292" width="119" height="15" fill="rgb(244,42,14)"/><text x="375.00" y="302.50">pybind11::deta..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (65 samples, 10.05%)</title><rect x="372" y="308" width="119" height="15" fill="rgb(212,188,42)"/><text x="375.00" y="318.50">pybind11::deta..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (65 samples, 10.05%)</title><rect x="372" y="324" width="119" height="15" fill="rgb(225,180,5)"/><text x="375.00" y="334.50">pybind11::cpp_..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (65 samples, 10.05%)</title><rect x="372" y="340" width="119" height="15" fill="rgb(211,13,49)"/><text x="375.00" y="350.50">pybind11::arra..</text></g><g><title>pybind11::array::~array (numpy.h) (65 samples, 10.05%)</title><rect x="372" y="356" width="119" height="15" fill="rgb(219,38,42)"/><text x="375.00" y="366.50">pybind11::arra..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (65 samples, 10.05%)</title><rect x="372" y="372" width="119" height="15" fill="rgb(233,113,34)"/><text x="375.00" y="382.50">pybind11::buff..</text></g><g><title>pybind11::object::~object (pytypes.h) (65 samples, 10.05%)</title><rect x="372" y="388" width="119" height="15" fill="rgb(249,148,42)"/><text x="375.00" y="398.50">pybind11::obje..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (65 samples, 10.05%)</title><rect x="372" y="404" width="119" height="15" fill="rgb(224,35,0)"/><text x="375.00" y="414.50">pybind11::hand..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (65 samples, 10.05%)</title><rect x="372" y="420" width="119" height="15" fill="rgb(212,177,46)"/><text x="375.00" y="430.50">RuntimeTreeEns..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (65 samples, 10.05%)</title><rect x="372" y="436" width="119" height="15" fill="rgb(216,53,1)"/><text x="375.00" y="446.50">pybind11::gil_..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (64 samples, 9.89%)</title><rect x="374" y="452" width="117" height="15" fill="rgb(236,205,46)"/><text x="377.00" y="462.50">GOMP_parallel ..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (64 samples, 9.89%)</title><rect x="374" y="468" width="117" height="15" fill="rgb(216,114,20)"/><text x="377.00" y="478.50">RuntimeTreeEns..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (63 samples, 9.74%)</title><rect x="376" y="484" width="115" height="15" fill="rgb(211,42,40)"/><text x="379.00" y="494.50">RuntimeTreeEns..</text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::operator[] (stl_vector.h) (3 samples, 0.46%)</title><rect x="486" y="500" width="5" height="15" fill="rgb(239,86,30)"/><text x="489.00" y="510.50"></text></g><g><title>0x7fa558a77757 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="542" y="196" width="2" height="15" fill="rgb(212,185,30)"/><text x="545.00" y="206.50"></text></g><g><title>update_wrapper (functools.py) (7 samples, 1.08%)</title><rect x="555" y="228" width="13" height="15" fill="rgb(236,168,1)"/><text x="558.00" y="238.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py) (14 samples, 2.16%)</title><rect x="544" y="196" width="25" height="15" fill="rgb(241,84,18)"/><text x="547.00" y="206.50">&lt;..</text></g><g><title>delayed (joblib/parallel.py) (11 samples, 1.70%)</title><rect x="549" y="212" width="20" height="15" fill="rgb(214,26,34)"/><text x="552.00" y="222.50"></text></g><g><title>wraps (functools.py) (1 samples, 0.15%)</title><rect x="568" y="228" width="1" height="15" fill="rgb(238,40,1)"/><text x="571.00" y="238.50"></text></g><g><title>__init__ (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="569" y="196" width="2" height="15" fill="rgb(205,95,14)"/><text x="572.00" y="206.50"></text></g><g><title>__len__ (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="571" y="196" width="2" height="15" fill="rgb(229,117,7)"/><text x="574.00" y="206.50"></text></g><g><title>PyThread_get_thread_ident (python3.7) (1 samples, 0.15%)</title><rect x="586" y="212" width="2" height="15" fill="rgb(250,93,37)"/><text x="589.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py) (4 samples, 0.62%)</title><rect x="591" y="228" width="8" height="15" fill="rgb(209,8,36)"/><text x="594.00" y="238.50"></text></g><g><title>print_progress (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="597" y="244" width="2" height="15" fill="rgb(206,33,26)"/><text x="600.00" y="254.50"></text></g><g><title>0x7fa558a77782 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="622" y="308" width="2" height="15" fill="rgb(239,182,40)"/><text x="625.00" y="318.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (3 samples, 0.46%)</title><rect x="620" y="292" width="6" height="15" fill="rgb(235,126,9)"/><text x="623.00" y="302.50"></text></g><g><title>PyThread_acquire_lock_timed (python3.7) (1 samples, 0.15%)</title><rect x="624" y="308" width="2" height="15" fill="rgb(227,73,8)"/><text x="627.00" y="318.50"></text></g><g><title>sem_trywait@@GLIBC_2.2.5 (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="624" y="324" width="2" height="15" fill="rgb(237,141,15)"/><text x="627.00" y="334.50"></text></g><g><title>0x7fa5324a5d2e (?) (1 samples, 0.15%)</title><rect x="642" y="308" width="2" height="15" fill="rgb(205,138,41)"/><text x="645.00" y="318.50"></text></g><g><title>0x7fa5324a4f55 (?) (1 samples, 0.15%)</title><rect x="642" y="324" width="2" height="15" fill="rgb(216,33,25)"/><text x="645.00" y="334.50"></text></g><g><title>0x7fa532494d33 (?) (1 samples, 0.15%)</title><rect x="642" y="340" width="2" height="15" fill="rgb(206,203,40)"/><text x="645.00" y="350.50"></text></g><g><title>PyArray_New (ctors.c) (1 samples, 0.15%)</title><rect x="642" y="356" width="2" height="15" fill="rgb(243,129,5)"/><text x="645.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.15%)</title><rect x="642" y="372" width="2" height="15" fill="rgb(215,34,49)"/><text x="645.00" y="382.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.15%)</title><rect x="642" y="388" width="2" height="15" fill="rgb(227,133,15)"/><text x="645.00" y="398.50"></text></g><g><title>IsAligned (array_assign.c) (1 samples, 0.15%)</title><rect x="642" y="404" width="2" height="15" fill="rgb(206,29,9)"/><text x="645.00" y="414.50"></text></g><g><title>0x7fa5324b3225 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.62%)</title><rect x="644" y="356" width="7" height="15" fill="rgb(222,35,36)"/><text x="647.00" y="366.50"></text></g><g><title>arraydescr_richcompare (descriptor.c) (4 samples, 0.62%)</title><rect x="644" y="372" width="7" height="15" fill="rgb(215,107,40)"/><text x="647.00" y="382.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (3 samples, 0.46%)</title><rect x="646" y="388" width="5" height="15" fill="rgb(217,34,42)"/><text x="649.00" y="398.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (3 samples, 0.46%)</title><rect x="646" y="404" width="5" height="15" fill="rgb(228,42,25)"/><text x="649.00" y="414.50"></text></g><g><title>_typenum_fromtypeobj (scalartypes.c.src) (2 samples, 0.31%)</title><rect x="648" y="420" width="3" height="15" fill="rgb(214,172,51)"/><text x="651.00" y="430.50"></text></g><g><title>get_typeobj_idx (scalartypes.c.src) (1 samples, 0.15%)</title><rect x="650" y="436" width="1" height="15" fill="rgb(247,95,35)"/><text x="653.00" y="446.50"></text></g><g><title>0x7fa532497d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.46%)</title><rect x="651" y="372" width="6" height="15" fill="rgb(240,136,11)"/><text x="654.00" y="382.50"></text></g><g><title>0x7fa532497666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.46%)</title><rect x="651" y="388" width="6" height="15" fill="rgb(235,183,3)"/><text x="654.00" y="398.50"></text></g><g><title>0x7fa53248d2fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.46%)</title><rect x="651" y="404" width="6" height="15" fill="rgb(242,88,49)"/><text x="654.00" y="414.50"></text></g><g><title>array_getbuffer (buffer.c) (3 samples, 0.46%)</title><rect x="651" y="420" width="6" height="15" fill="rgb(214,228,6)"/><text x="654.00" y="430.50"></text></g><g><title>_buffer_get_info (buffer.c) (3 samples, 0.46%)</title><rect x="651" y="436" width="6" height="15" fill="rgb(234,35,19)"/><text x="654.00" y="446.50"></text></g><g><title>0x7fa5324b32df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.62%)</title><rect x="651" y="356" width="8" height="15" fill="rgb(224,211,41)"/><text x="654.00" y="366.50"></text></g><g><title>0x7fa532497e72 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="657" y="372" width="2" height="15" fill="rgb(230,138,22)"/><text x="660.00" y="382.50"></text></g><g><title>0x7fa53248b022 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="657" y="388" width="2" height="15" fill="rgb(207,45,44)"/><text x="660.00" y="398.50"></text></g><g><title>0x7fa5324b3456 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="659" y="356" width="3" height="15" fill="rgb(219,2,46)"/><text x="662.00" y="366.50"></text></g><g><title>0x7fa5324b353e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="662" y="356" width="2" height="15" fill="rgb(206,217,53)"/><text x="665.00" y="366.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (1 samples, 0.15%)</title><rect x="664" y="388" width="2" height="15" fill="rgb(212,98,52)"/><text x="667.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.15%)</title><rect x="664" y="404" width="2" height="15" fill="rgb(243,87,18)"/><text x="667.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.15%)</title><rect x="664" y="420" width="2" height="15" fill="rgb(210,215,39)"/><text x="667.00" y="430.50"></text></g><g><title>0x7fa558a81dbb (libc-2.29.so) (1 samples, 0.15%)</title><rect x="666" y="436" width="2" height="15" fill="rgb(233,137,44)"/><text x="669.00" y="446.50"></text></g><g><title>array_alloc (arrayobject.c) (1 samples, 0.15%)</title><rect x="668" y="436" width="2" height="15" fill="rgb(239,192,14)"/><text x="671.00" y="446.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c) (1 samples, 0.15%)</title><rect x="670" y="452" width="2" height="15" fill="rgb(245,82,23)"/><text x="673.00" y="462.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="670" y="468" width="2" height="15" fill="rgb(212,201,19)"/><text x="673.00" y="478.50"></text></g><g><title>0x7fa558a82103 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="670" y="484" width="2" height="15" fill="rgb(226,10,6)"/><text x="673.00" y="494.50"></text></g><g><title>0x7fa5324b3592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.77%)</title><rect x="664" y="356" width="9" height="15" fill="rgb(235,217,6)"/><text x="667.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c) (5 samples, 0.77%)</title><rect x="664" y="372" width="9" height="15" fill="rgb(227,219,19)"/><text x="667.00" y="382.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (4 samples, 0.62%)</title><rect x="666" y="388" width="7" height="15" fill="rgb(213,41,14)"/><text x="669.00" y="398.50"></text></g><g><title>PyArray_Zeros (ctors.c) (4 samples, 0.62%)</title><rect x="666" y="404" width="7" height="15" fill="rgb(231,212,41)"/><text x="669.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (4 samples, 0.62%)</title><rect x="666" y="420" width="7" height="15" fill="rgb(211,134,41)"/><text x="669.00" y="430.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c) (2 samples, 0.31%)</title><rect x="670" y="436" width="3" height="15" fill="rgb(221,92,25)"/><text x="673.00" y="446.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="672" y="452" width="1" height="15" fill="rgb(206,165,24)"/><text x="675.00" y="462.50"></text></g><g><title>0x7fa5324b3687 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="673" y="356" width="4" height="15" fill="rgb(253,138,28)"/><text x="676.00" y="366.50"></text></g><g><title>0x7fa5324b3698 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="677" y="356" width="2" height="15" fill="rgb(246,145,48)"/><text x="680.00" y="366.50"></text></g><g><title>0x7fa5324b369b (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="679" y="356" width="2" height="15" fill="rgb(231,181,28)"/><text x="682.00" y="366.50"></text></g><g><title>0x7fa5324b36a5 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="681" y="356" width="1" height="15" fill="rgb(234,173,27)"/><text x="684.00" y="366.50"></text></g><g><title>0x7fa5324b36aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 0.93%)</title><rect x="682" y="356" width="11" height="15" fill="rgb(228,196,4)"/><text x="685.00" y="366.50"></text></g><g><title>0x7fa5324b36ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.62%)</title><rect x="693" y="356" width="8" height="15" fill="rgb(231,24,3)"/><text x="696.00" y="366.50"></text></g><g><title>0x7fa5324b36b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.62%)</title><rect x="701" y="356" width="7" height="15" fill="rgb(253,117,42)"/><text x="704.00" y="366.50"></text></g><g><title>0x7fa5324b36b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="708" y="356" width="2" height="15" fill="rgb(227,117,13)"/><text x="711.00" y="366.50"></text></g><g><title>0x7fa5324b36c2 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="710" y="356" width="2" height="15" fill="rgb(211,136,2)"/><text x="713.00" y="366.50"></text></g><g><title>0x7fa5324b36c6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="712" y="356" width="1" height="15" fill="rgb(211,32,33)"/><text x="715.00" y="366.50"></text></g><g><title>0x7fa5324b36c9 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="713" y="356" width="2" height="15" fill="rgb(253,161,10)"/><text x="716.00" y="366.50"></text></g><g><title>0x7fa5324b36d7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="715" y="356" width="2" height="15" fill="rgb(252,99,23)"/><text x="718.00" y="366.50"></text></g><g><title>0x7fa5324b36e2 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="717" y="356" width="2" height="15" fill="rgb(239,156,32)"/><text x="720.00" y="366.50"></text></g><g><title>0x7fa5324b36e6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="719" y="356" width="2" height="15" fill="rgb(243,208,13)"/><text x="722.00" y="366.50"></text></g><g><title>0x7fa5324b37a0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="721" y="356" width="2" height="15" fill="rgb(246,219,51)"/><text x="724.00" y="366.50"></text></g><g><title>0x7fa5324b37a4 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="723" y="356" width="1" height="15" fill="rgb(226,67,32)"/><text x="726.00" y="366.50"></text></g><g><title>0x7fa5324b37b0 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="724" y="356" width="2" height="15" fill="rgb(217,165,44)"/><text x="727.00" y="366.50"></text></g><g><title>0x7fa5324b37b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="726" y="356" width="4" height="15" fill="rgb(230,62,48)"/><text x="729.00" y="366.50"></text></g><g><title>0x7fa5324b37b6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="730" y="356" width="2" height="15" fill="rgb(213,86,50)"/><text x="733.00" y="366.50"></text></g><g><title>0x7fa5324b391f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="732" y="356" width="2" height="15" fill="rgb(224,52,40)"/><text x="735.00" y="366.50"></text></g><g><title>0x7fa5324b4405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (52 samples, 8.04%)</title><rect x="644" y="340" width="95" height="15" fill="rgb(227,33,42)"/><text x="647.00" y="350.50">0x7fa5324b4..</text></g><g><title>0x7fa5324b3c27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.46%)</title><rect x="734" y="356" width="5" height="15" fill="rgb(217,204,39)"/><text x="737.00" y="366.50"></text></g><g><title>0x7fa53248b529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.46%)</title><rect x="734" y="372" width="5" height="15" fill="rgb(217,206,43)"/><text x="737.00" y="382.50"></text></g><g><title>array_getbuffer (buffer.c) (3 samples, 0.46%)</title><rect x="734" y="388" width="5" height="15" fill="rgb(247,36,36)"/><text x="737.00" y="398.50"></text></g><g><title>_buffer_get_info (buffer.c) (3 samples, 0.46%)</title><rect x="734" y="404" width="5" height="15" fill="rgb(226,55,38)"/><text x="737.00" y="414.50"></text></g><g><title>0x7fa5324a4fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (53 samples, 8.19%)</title><rect x="644" y="324" width="97" height="15" fill="rgb(249,201,50)"/><text x="647.00" y="334.50">0x7fa5324a4..</text></g><g><title>0x7fa5324b4540 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="739" y="340" width="2" height="15" fill="rgb(231,57,38)"/><text x="742.00" y="350.50"></text></g><g><title>0x7fa532489178 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="739" y="356" width="2" height="15" fill="rgb(217,95,16)"/><text x="742.00" y="366.50"></text></g><g><title>0x7fa5324a5002 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="741" y="324" width="2" height="15" fill="rgb(222,120,13)"/><text x="744.00" y="334.50"></text></g><g><title>0x7fa5324a502d (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="743" y="324" width="1" height="15" fill="rgb(250,125,16)"/><text x="746.00" y="334.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src) (9 samples, 1.39%)</title><rect x="750" y="372" width="16" height="15" fill="rgb(221,44,14)"/><text x="753.00" y="382.50"></text></g><g><title>PyArray_CheckAxis (ctors.c) (1 samples, 0.15%)</title><rect x="766" y="372" width="2" height="15" fill="rgb(234,35,17)"/><text x="769.00" y="382.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (1 samples, 0.15%)</title><rect x="766" y="388" width="2" height="15" fill="rgb(241,197,9)"/><text x="769.00" y="398.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.15%)</title><rect x="766" y="404" width="2" height="15" fill="rgb(231,182,18)"/><text x="769.00" y="414.50"></text></g><g><title>PyArray_DATA (ndarraytypes.h) (1 samples, 0.15%)</title><rect x="768" y="372" width="2" height="15" fill="rgb(239,12,22)"/><text x="771.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.15%)</title><rect x="770" y="372" width="2" height="15" fill="rgb(249,77,16)"/><text x="773.00" y="382.50"></text></g><g><title>0x7fa5324a505a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (16 samples, 2.47%)</title><rect x="744" y="324" width="30" height="15" fill="rgb(227,27,34)"/><text x="747.00" y="334.50">0x..</text></g><g><title>array_take (methods.c) (15 samples, 2.32%)</title><rect x="746" y="340" width="28" height="15" fill="rgb(239,54,47)"/><text x="749.00" y="350.50">a..</text></g><g><title>PyArray_TakeFrom (item_selection.c) (13 samples, 2.01%)</title><rect x="750" y="356" width="24" height="15" fill="rgb(220,182,24)"/><text x="753.00" y="366.50">P..</text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.15%)</title><rect x="772" y="372" width="2" height="15" fill="rgb(242,117,45)"/><text x="775.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.15%)</title><rect x="772" y="388" width="2" height="15" fill="rgb(209,109,23)"/><text x="775.00" y="398.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.15%)</title><rect x="772" y="404" width="2" height="15" fill="rgb(235,45,51)"/><text x="775.00" y="414.50"></text></g><g><title>IsAligned (array_assign.c) (1 samples, 0.15%)</title><rect x="772" y="420" width="2" height="15" fill="rgb(229,208,14)"/><text x="775.00" y="430.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (1 samples, 0.15%)</title><rect x="772" y="436" width="2" height="15" fill="rgb(253,18,51)"/><text x="775.00" y="446.50"></text></g><g><title>0x7fa5324a513a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.46%)</title><rect x="774" y="324" width="5" height="15" fill="rgb(207,221,54)"/><text x="777.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.31%)</title><rect x="775" y="340" width="4" height="15" fill="rgb(224,93,13)"/><text x="778.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.15%)</title><rect x="777" y="356" width="2" height="15" fill="rgb(251,44,22)"/><text x="780.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.15%)</title><rect x="777" y="372" width="2" height="15" fill="rgb(241,119,36)"/><text x="780.00" y="382.50"></text></g><g><title>0x7fa5324a514f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="779" y="324" width="4" height="15" fill="rgb(213,172,51)"/><text x="782.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.31%)</title><rect x="779" y="340" width="4" height="15" fill="rgb(253,219,34)"/><text x="782.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.31%)</title><rect x="779" y="356" width="4" height="15" fill="rgb(215,22,18)"/><text x="782.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.31%)</title><rect x="779" y="372" width="4" height="15" fill="rgb(230,193,7)"/><text x="782.00" y="382.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.15%)</title><rect x="781" y="388" width="2" height="15" fill="rgb(237,129,44)"/><text x="784.00" y="398.50"></text></g><g><title>0x7fa5324a5163 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="783" y="324" width="2" height="15" fill="rgb(244,185,48)"/><text x="786.00" y="334.50"></text></g><g><title>0x7fa5324a518f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="785" y="324" width="1" height="15" fill="rgb(238,63,48)"/><text x="788.00" y="334.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c) (1 samples, 0.15%)</title><rect x="786" y="356" width="2" height="15" fill="rgb(217,215,41)"/><text x="789.00" y="366.50"></text></g><g><title>0x7fa558a77730 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="786" y="372" width="2" height="15" fill="rgb(246,15,11)"/><text x="789.00" y="382.50"></text></g><g><title>0x7fa5324a5d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (80 samples, 12.36%)</title><rect x="644" y="308" width="146" height="15" fill="rgb(226,221,0)"/><text x="647.00" y="318.50">0x7fa5324a5d2e (sk..</text></g><g><title>0x7fa5324a5328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.31%)</title><rect x="786" y="324" width="4" height="15" fill="rgb(229,181,1)"/><text x="789.00" y="334.50"></text></g><g><title>array_reshape (methods.c) (2 samples, 0.31%)</title><rect x="786" y="340" width="4" height="15" fill="rgb(245,148,46)"/><text x="789.00" y="350.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (1 samples, 0.15%)</title><rect x="788" y="356" width="2" height="15" fill="rgb(206,99,4)"/><text x="791.00" y="366.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.15%)</title><rect x="788" y="372" width="2" height="15" fill="rgb(212,83,45)"/><text x="791.00" y="382.50"></text></g><g><title>_fix_unknown_dimension (shape.c) (1 samples, 0.15%)</title><rect x="788" y="388" width="2" height="15" fill="rgb(234,95,19)"/><text x="791.00" y="398.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (3 samples, 0.46%)</title><rect x="790" y="308" width="6" height="15" fill="rgb(211,224,23)"/><text x="793.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.15%)</title><rect x="797" y="324" width="2" height="15" fill="rgb(219,64,3)"/><text x="800.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.15%)</title><rect x="799" y="324" width="2" height="15" fill="rgb(245,147,15)"/><text x="802.00" y="334.50"></text></g><g><title>array_assign_subscript (mapping.c) (4 samples, 0.62%)</title><rect x="796" y="308" width="7" height="15" fill="rgb(249,112,37)"/><text x="799.00" y="318.50"></text></g><g><title>prepare_index (mapping.c) (1 samples, 0.15%)</title><rect x="801" y="324" width="2" height="15" fill="rgb(205,161,25)"/><text x="804.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.15%)</title><rect x="803" y="308" width="2" height="15" fill="rgb(211,221,48)"/><text x="806.00" y="318.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.15%)</title><rect x="803" y="324" width="2" height="15" fill="rgb(240,94,5)"/><text x="806.00" y="334.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.15%)</title><rect x="803" y="340" width="2" height="15" fill="rgb(246,26,51)"/><text x="806.00" y="350.50"></text></g><g><title>binop_should_defer (binop_override.h) (1 samples, 0.15%)</title><rect x="810" y="324" width="2" height="15" fill="rgb(214,192,2)"/><text x="813.00" y="334.50"></text></g><g><title>PyUFunc_SimpleBinaryComparisonTypeResolver (ufunc_type_resolution.c) (2 samples, 0.31%)</title><rect x="812" y="356" width="4" height="15" fill="rgb(249,72,40)"/><text x="815.00" y="366.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (2 samples, 0.31%)</title><rect x="812" y="372" width="4" height="15" fill="rgb(242,144,1)"/><text x="815.00" y="382.50"></text></g><g><title>PyArray_MinScalarType_internal (convert_datatype.c) (1 samples, 0.15%)</title><rect x="814" y="388" width="2" height="15" fill="rgb(213,76,42)"/><text x="817.00" y="398.50"></text></g><g><title>PyArray_DESCR (ndarraytypes.h) (1 samples, 0.15%)</title><rect x="814" y="404" width="2" height="15" fill="rgb(250,127,34)"/><text x="817.00" y="414.50"></text></g><g><title>_check_ufunc_fperr (extobj.c) (1 samples, 0.15%)</title><rect x="816" y="356" width="1" height="15" fill="rgb(219,128,41)"/><text x="819.00" y="366.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.15%)</title><rect x="817" y="404" width="2" height="15" fill="rgb(248,211,8)"/><text x="820.00" y="414.50"></text></g><g><title>_UpdateContiguousFlags (flagsobject.c) (1 samples, 0.15%)</title><rect x="817" y="420" width="2" height="15" fill="rgb(226,42,33)"/><text x="820.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.31%)</title><rect x="817" y="372" width="4" height="15" fill="rgb(252,209,10)"/><text x="820.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.31%)</title><rect x="817" y="388" width="4" height="15" fill="rgb(234,112,14)"/><text x="820.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.15%)</title><rect x="819" y="404" width="2" height="15" fill="rgb(215,88,11)"/><text x="822.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.15%)</title><rect x="819" y="420" width="2" height="15" fill="rgb(239,193,13)"/><text x="822.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="819" y="436" width="2" height="15" fill="rgb(236,116,41)"/><text x="822.00" y="446.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (6 samples, 0.93%)</title><rect x="812" y="340" width="11" height="15" fill="rgb(241,2,9)"/><text x="815.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.46%)</title><rect x="817" y="356" width="6" height="15" fill="rgb(234,105,35)"/><text x="820.00" y="366.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (1 samples, 0.15%)</title><rect x="821" y="372" width="2" height="15" fill="rgb(230,214,31)"/><text x="824.00" y="382.50"></text></g><g><title>DOUBLE_equal (loops.c.src) (1 samples, 0.15%)</title><rect x="821" y="388" width="2" height="15" fill="rgb(226,76,54)"/><text x="824.00" y="398.50"></text></g><g><title>run_binary_simd_equal_DOUBLE (simd.inc.src) (1 samples, 0.15%)</title><rect x="821" y="404" width="2" height="15" fill="rgb(208,217,1)"/><text x="824.00" y="414.50"></text></g><g><title>sse2_binary_scalar2_equal_DOUBLE (simd.inc.src) (1 samples, 0.15%)</title><rect x="821" y="420" width="2" height="15" fill="rgb(235,211,13)"/><text x="824.00" y="430.50"></text></g><g><title>sse2_compress4_to_byte_DOUBLE (simd.inc.src) (1 samples, 0.15%)</title><rect x="821" y="436" width="2" height="15" fill="rgb(219,196,15)"/><text x="824.00" y="446.50"></text></g><g><title>_mm_packs_epi16 (emmintrin.h) (1 samples, 0.15%)</title><rect x="821" y="452" width="2" height="15" fill="rgb(227,190,26)"/><text x="824.00" y="462.50"></text></g><g><title>array_richcompare (arrayobject.c) (11 samples, 1.70%)</title><rect x="805" y="308" width="20" height="15" fill="rgb(207,121,13)"/><text x="808.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (7 samples, 1.08%)</title><rect x="812" y="324" width="13" height="15" fill="rgb(244,128,25)"/><text x="815.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.15%)</title><rect x="823" y="340" width="2" height="15" fill="rgb(232,116,36)"/><text x="826.00" y="350.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.15%)</title><rect x="823" y="356" width="2" height="15" fill="rgb(229,172,15)"/><text x="826.00" y="366.50"></text></g><g><title>get_view_from_index (mapping.c) (2 samples, 0.31%)</title><rect x="825" y="324" width="3" height="15" fill="rgb(217,188,54)"/><text x="828.00" y="334.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.15%)</title><rect x="827" y="340" width="1" height="15" fill="rgb(208,150,14)"/><text x="830.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.15%)</title><rect x="827" y="356" width="1" height="15" fill="rgb(231,22,1)"/><text x="830.00" y="366.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.15%)</title><rect x="827" y="372" width="1" height="15" fill="rgb(247,10,24)"/><text x="830.00" y="382.50"></text></g><g><title>array_subscript (mapping.c) (4 samples, 0.62%)</title><rect x="825" y="308" width="7" height="15" fill="rgb(254,79,39)"/><text x="828.00" y="318.50"></text></g><g><title>prepare_index (mapping.c) (2 samples, 0.31%)</title><rect x="828" y="324" width="4" height="15" fill="rgb(247,228,1)"/><text x="831.00" y="334.50"></text></g><g><title>unpack_indices (mapping.c) (1 samples, 0.15%)</title><rect x="830" y="340" width="2" height="15" fill="rgb(208,86,16)"/><text x="833.00" y="350.50"></text></g><g><title>unpack_tuple (mapping.c) (1 samples, 0.15%)</title><rect x="830" y="356" width="2" height="15" fill="rgb(249,181,21)"/><text x="833.00" y="366.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (3 samples, 0.46%)</title><rect x="838" y="404" width="5" height="15" fill="rgb(230,56,42)"/><text x="841.00" y="414.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (2 samples, 0.31%)</title><rect x="839" y="420" width="4" height="15" fill="rgb(209,93,37)"/><text x="842.00" y="430.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (2 samples, 0.31%)</title><rect x="839" y="436" width="4" height="15" fill="rgb(224,224,13)"/><text x="842.00" y="446.50"></text></g><g><title>0x7fa558a77e7a (libc-2.29.so) (1 samples, 0.15%)</title><rect x="841" y="452" width="2" height="15" fill="rgb(245,144,51)"/><text x="844.00" y="462.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (4 samples, 0.62%)</title><rect x="838" y="372" width="7" height="15" fill="rgb(252,216,21)"/><text x="841.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (4 samples, 0.62%)</title><rect x="838" y="388" width="7" height="15" fill="rgb(216,153,16)"/><text x="841.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (1 samples, 0.15%)</title><rect x="843" y="404" width="2" height="15" fill="rgb(243,1,40)"/><text x="846.00" y="414.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (1 samples, 0.15%)</title><rect x="848" y="388" width="2" height="15" fill="rgb(251,184,50)"/><text x="851.00" y="398.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (1 samples, 0.15%)</title><rect x="848" y="404" width="2" height="15" fill="rgb(218,80,19)"/><text x="851.00" y="414.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (1 samples, 0.15%)</title><rect x="848" y="420" width="2" height="15" fill="rgb(218,133,17)"/><text x="851.00" y="430.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c) (1 samples, 0.15%)</title><rect x="856" y="436" width="2" height="15" fill="rgb(252,58,17)"/><text x="859.00" y="446.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c) (1 samples, 0.15%)</title><rect x="858" y="436" width="1" height="15" fill="rgb(250,102,23)"/><text x="861.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (4 samples, 0.62%)</title><rect x="854" y="420" width="7" height="15" fill="rgb(237,152,5)"/><text x="857.00" y="430.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.15%)</title><rect x="859" y="436" width="2" height="15" fill="rgb(231,216,18)"/><text x="862.00" y="446.50"></text></g><g><title>NpyIter_GetInnerStrideArray (nditer_api.c) (1 samples, 0.15%)</title><rect x="861" y="420" width="2" height="15" fill="rgb(225,25,7)"/><text x="864.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.15%)</title><rect x="863" y="452" width="2" height="15" fill="rgb(210,89,32)"/><text x="866.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.15%)</title><rect x="863" y="468" width="2" height="15" fill="rgb(212,79,33)"/><text x="866.00" y="478.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.15%)</title><rect x="863" y="484" width="2" height="15" fill="rgb(231,32,14)"/><text x="866.00" y="494.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.15%)</title><rect x="863" y="500" width="2" height="15" fill="rgb(213,12,33)"/><text x="866.00" y="510.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.15%)</title><rect x="863" y="516" width="2" height="15" fill="rgb(251,153,5)"/><text x="866.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="863" y="532" width="2" height="15" fill="rgb(229,85,8)"/><text x="866.00" y="542.50"></text></g><g><title>0x7fa558a62fd9 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="863" y="548" width="2" height="15" fill="rgb(228,139,6)"/><text x="866.00" y="558.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (2 samples, 0.31%)</title><rect x="863" y="420" width="4" height="15" fill="rgb(234,4,43)"/><text x="866.00" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c) (2 samples, 0.31%)</title><rect x="863" y="436" width="4" height="15" fill="rgb(221,185,26)"/><text x="866.00" y="446.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.15%)</title><rect x="865" y="452" width="2" height="15" fill="rgb(205,16,46)"/><text x="868.00" y="462.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.15%)</title><rect x="865" y="468" width="2" height="15" fill="rgb(237,93,22)"/><text x="868.00" y="478.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c) (1 samples, 0.15%)</title><rect x="867" y="468" width="2" height="15" fill="rgb(228,88,6)"/><text x="870.00" y="478.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (1 samples, 0.15%)</title><rect x="867" y="484" width="2" height="15" fill="rgb(231,78,30)"/><text x="870.00" y="494.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (1 samples, 0.15%)</title><rect x="867" y="500" width="2" height="15" fill="rgb(209,37,30)"/><text x="870.00" y="510.50"></text></g><g><title>npy_uint_alignment (common.h) (1 samples, 0.15%)</title><rect x="869" y="468" width="1" height="15" fill="rgb(237,148,54)"/><text x="872.00" y="478.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c) (3 samples, 0.46%)</title><rect x="867" y="452" width="5" height="15" fill="rgb(237,212,48)"/><text x="870.00" y="462.50"></text></g><g><title>raw_array_is_aligned (array_assign.c) (1 samples, 0.15%)</title><rect x="870" y="468" width="2" height="15" fill="rgb(239,220,43)"/><text x="873.00" y="478.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (4 samples, 0.62%)</title><rect x="867" y="420" width="7" height="15" fill="rgb(211,221,18)"/><text x="870.00" y="430.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (4 samples, 0.62%)</title><rect x="867" y="436" width="7" height="15" fill="rgb(230,197,38)"/><text x="870.00" y="446.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.15%)</title><rect x="872" y="452" width="2" height="15" fill="rgb(217,168,53)"/><text x="875.00" y="462.50"></text></g><g><title>npy_uint_alignment (common.h) (1 samples, 0.15%)</title><rect x="872" y="468" width="2" height="15" fill="rgb(225,137,15)"/><text x="875.00" y="478.50"></text></g><g><title>DOUBLE_add (loops.c.src) (18 samples, 2.78%)</title><rect x="883" y="436" width="33" height="15" fill="rgb(215,104,37)"/><text x="886.00" y="446.50">DO..</text></g><g><title>pairwise_sum_DOUBLE (loops.c.src) (10 samples, 1.55%)</title><rect x="898" y="452" width="18" height="15" fill="rgb(212,141,50)"/><text x="901.00" y="462.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c) (1 samples, 0.15%)</title><rect x="916" y="436" width="2" height="15" fill="rgb(236,78,14)"/><text x="919.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (44 samples, 6.80%)</title><rect x="850" y="404" width="81" height="15" fill="rgb(222,36,0)"/><text x="853.00" y="414.50">PyUFunc_R..</text></g><g><title>reduce_loop (ufunc_object.c) (31 samples, 4.79%)</title><rect x="874" y="420" width="57" height="15" fill="rgb(236,108,20)"/><text x="877.00" y="430.50">reduce..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (7 samples, 1.08%)</title><rect x="918" y="436" width="13" height="15" fill="rgb(235,145,33)"/><text x="921.00" y="446.50"></text></g><g><title>npyiter_copy_from_buffers (nditer_api.c) (1 samples, 0.15%)</title><rect x="929" y="452" width="2" height="15" fill="rgb(210,221,11)"/><text x="932.00" y="462.50"></text></g><g><title>set_ufunc_loop_data_types (ufunc_type_resolution.c) (1 samples, 0.15%)</title><rect x="932" y="452" width="2" height="15" fill="rgb(219,186,42)"/><text x="935.00" y="462.50"></text></g><g><title>array_sum (methods.c) (57 samples, 8.81%)</title><rect x="832" y="308" width="104" height="15" fill="rgb(237,194,13)"/><text x="835.00" y="318.50">array_sum (m..</text></g><g><title>forward_ndarray_method (methods.c) (57 samples, 8.81%)</title><rect x="832" y="324" width="104" height="15" fill="rgb(236,190,11)"/><text x="835.00" y="334.50">forward_ndar..</text></g><g><title>_sum (numpy/core/_methods.py) (56 samples, 8.66%)</title><rect x="834" y="340" width="102" height="15" fill="rgb(243,81,38)"/><text x="837.00" y="350.50">_sum (numpy/..</text></g><g><title>ufunc_reduce (ufunc_object.c) (54 samples, 8.35%)</title><rect x="838" y="356" width="98" height="15" fill="rgb(237,78,7)"/><text x="841.00" y="366.50">ufunc_reduc..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (50 samples, 7.73%)</title><rect x="845" y="372" width="91" height="15" fill="rgb(218,188,48)"/><text x="848.00" y="382.50">PyUFunc_Ge..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (47 samples, 7.26%)</title><rect x="850" y="388" width="86" height="15" fill="rgb(252,48,46)"/><text x="853.00" y="398.50">PyUFunc_Re..</text></g><g><title>reduce_type_resolver (ufunc_object.c) (3 samples, 0.46%)</title><rect x="931" y="404" width="5" height="15" fill="rgb(235,170,27)"/><text x="934.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (3 samples, 0.46%)</title><rect x="931" y="420" width="5" height="15" fill="rgb(240,7,2)"/><text x="934.00" y="430.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (3 samples, 0.46%)</title><rect x="931" y="436" width="5" height="15" fill="rgb(220,176,45)"/><text x="934.00" y="446.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (1 samples, 0.15%)</title><rect x="934" y="452" width="2" height="15" fill="rgb(210,144,21)"/><text x="937.00" y="462.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (20 samples, 3.09%)</title><rect x="936" y="308" width="36" height="15" fill="rgb(212,181,8)"/><text x="939.00" y="318.50">che..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (13 samples, 2.01%)</title><rect x="949" y="324" width="23" height="15" fill="rgb(250,18,1)"/><text x="952.00" y="334.50">&lt;..</text></g><g><title>unicode_endswith (python3.7) (6 samples, 0.93%)</title><rect x="962" y="340" width="10" height="15" fill="rgb(208,116,5)"/><text x="965.00" y="350.50"></text></g><g><title>_get_bufsize_errmask (extobj.c) (1 samples, 0.15%)</title><rect x="974" y="340" width="2" height="15" fill="rgb(224,195,10)"/><text x="977.00" y="350.50"></text></g><g><title>_extract_pyvals (extobj.c) (1 samples, 0.15%)</title><rect x="974" y="356" width="2" height="15" fill="rgb(207,0,44)"/><text x="977.00" y="366.50"></text></g><g><title>_mm_div_pd (emmintrin.h) (1 samples, 0.15%)</title><rect x="976" y="420" width="2" height="15" fill="rgb(240,160,12)"/><text x="979.00" y="430.50"></text></g><g><title>DOUBLE_divide (loops.c.src) (15 samples, 2.32%)</title><rect x="976" y="372" width="27" height="15" fill="rgb(214,183,40)"/><text x="979.00" y="382.50">D..</text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src) (15 samples, 2.32%)</title><rect x="976" y="388" width="27" height="15" fill="rgb(246,73,28)"/><text x="979.00" y="398.50">r..</text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src) (15 samples, 2.32%)</title><rect x="976" y="404" width="27" height="15" fill="rgb(209,179,42)"/><text x="979.00" y="414.50">s..</text></g><g><title>_mm_store_pd (emmintrin.h) (14 samples, 2.16%)</title><rect x="978" y="420" width="25" height="15" fill="rgb(212,101,30)"/><text x="981.00" y="430.50">_..</text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (2 samples, 0.31%)</title><rect x="1003" y="388" width="4" height="15" fill="rgb(238,215,39)"/><text x="1006.00" y="398.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.15%)</title><rect x="1007" y="388" width="2" height="15" fill="rgb(210,216,40)"/><text x="1010.00" y="398.50"></text></g><g><title>npyiter_flip_negative_strides (nditer_constr.c) (1 samples, 0.15%)</title><rect x="1009" y="388" width="2" height="15" fill="rgb(219,21,52)"/><text x="1012.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (5 samples, 0.77%)</title><rect x="1003" y="372" width="10" height="15" fill="rgb(231,209,9)"/><text x="1006.00" y="382.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.15%)</title><rect x="1011" y="388" width="2" height="15" fill="rgb(227,226,23)"/><text x="1014.00" y="398.50"></text></g><g><title>npyiter_check_per_op_flags (nditer_constr.c) (1 samples, 0.15%)</title><rect x="1011" y="404" width="2" height="15" fill="rgb(235,78,28)"/><text x="1014.00" y="414.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (2 samples, 0.31%)</title><rect x="1013" y="372" width="3" height="15" fill="rgb(218,196,9)"/><text x="1016.00" y="382.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1014" y="388" width="2" height="15" fill="rgb(207,14,50)"/><text x="1017.00" y="398.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (17 samples, 2.63%)</title><rect x="1016" y="372" width="31" height="15" fill="rgb(232,171,41)"/><text x="1019.00" y="382.50">Np..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (17 samples, 2.63%)</title><rect x="1016" y="388" width="31" height="15" fill="rgb(244,104,31)"/><text x="1019.00" y="398.50">np..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (16 samples, 2.47%)</title><rect x="1018" y="404" width="29" height="15" fill="rgb(218,20,34)"/><text x="1021.00" y="414.50">Py..</text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src) (10 samples, 1.55%)</title><rect x="1029" y="420" width="18" height="15" fill="rgb(233,207,30)"/><text x="1032.00" y="430.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (2 samples, 0.31%)</title><rect x="1047" y="372" width="4" height="15" fill="rgb(215,73,15)"/><text x="1050.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (42 samples, 6.49%)</title><rect x="976" y="340" width="77" height="15" fill="rgb(247,214,24)"/><text x="979.00" y="350.50">execute_..</text></g><g><title>iterator_loop (ufunc_object.c) (42 samples, 6.49%)</title><rect x="976" y="356" width="77" height="15" fill="rgb(244,167,3)"/><text x="979.00" y="366.50">iterator..</text></g><g><title>__errno_location (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="1051" y="372" width="2" height="15" fill="rgb(243,134,37)"/><text x="1054.00" y="382.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (2 samples, 0.31%)</title><rect x="1053" y="340" width="3" height="15" fill="rgb(220,26,1)"/><text x="1056.00" y="350.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (1 samples, 0.15%)</title><rect x="1055" y="356" width="1" height="15" fill="rgb(246,114,7)"/><text x="1058.00" y="366.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.15%)</title><rect x="1055" y="372" width="1" height="15" fill="rgb(220,9,30)"/><text x="1058.00" y="382.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py) (237 samples, 36.63%)</title><rect x="626" y="292" width="432" height="15" fill="rgb(219,64,20)"/><text x="629.00" y="302.50">predict_proba (sklearn/tree/_classes.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (47 samples, 7.26%)</title><rect x="972" y="308" width="86" height="15" fill="rgb(212,111,21)"/><text x="975.00" y="318.50">ufunc_gene..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (47 samples, 7.26%)</title><rect x="972" y="324" width="86" height="15" fill="rgb(237,42,1)"/><text x="975.00" y="334.50">PyUFunc_Ge..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.15%)</title><rect x="1056" y="340" width="2" height="15" fill="rgb(205,44,12)"/><text x="1059.00" y="350.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (2 samples, 0.31%)</title><rect x="1058" y="340" width="4" height="15" fill="rgb(224,116,1)"/><text x="1061.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.15%)</title><rect x="1060" y="356" width="2" height="15" fill="rgb(250,14,34)"/><text x="1063.00" y="366.50"></text></g><g><title>diophantine_simplify (mem_overlap.c) (1 samples, 0.15%)</title><rect x="1060" y="372" width="2" height="15" fill="rgb(222,22,50)"/><text x="1063.00" y="382.50"></text></g><g><title>DOUBLE_add (loops.c.src) (1 samples, 0.15%)</title><rect x="1062" y="356" width="2" height="15" fill="rgb(241,162,25)"/><text x="1065.00" y="366.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (1 samples, 0.15%)</title><rect x="1062" y="372" width="2" height="15" fill="rgb(244,38,52)"/><text x="1065.00" y="382.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src) (1 samples, 0.15%)</title><rect x="1062" y="388" width="2" height="15" fill="rgb(225,227,14)"/><text x="1065.00" y="398.50"></text></g><g><title>_mm_add_pd (emmintrin.h) (1 samples, 0.15%)</title><rect x="1062" y="404" width="2" height="15" fill="rgb(217,175,42)"/><text x="1065.00" y="414.50"></text></g><g><title>PyArray_BYTES (ndarraytypes.h) (1 samples, 0.15%)</title><rect x="1064" y="356" width="1" height="15" fill="rgb(230,92,17)"/><text x="1067.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (5 samples, 0.77%)</title><rect x="1058" y="324" width="9" height="15" fill="rgb(227,214,44)"/><text x="1061.00" y="334.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (3 samples, 0.46%)</title><rect x="1062" y="340" width="5" height="15" fill="rgb(250,83,42)"/><text x="1065.00" y="350.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="1065" y="356" width="2" height="15" fill="rgb(225,3,18)"/><text x="1068.00" y="366.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py) (250 samples, 38.64%)</title><rect x="613" y="276" width="456" height="15" fill="rgb(248,99,47)"/><text x="616.00" y="286.50">_accumulate_prediction (sklearn/ensemble/_forest.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 0.93%)</title><rect x="1058" y="292" width="11" height="15" fill="rgb(246,226,4)"/><text x="1061.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (6 samples, 0.93%)</title><rect x="1058" y="308" width="11" height="15" fill="rgb(210,71,49)"/><text x="1061.00" y="318.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.15%)</title><rect x="1067" y="324" width="2" height="15" fill="rgb(209,13,42)"/><text x="1070.00" y="334.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (253 samples, 39.10%)</title><rect x="610" y="260" width="461" height="15" fill="rgb(239,207,18)"/><text x="613.00" y="270.50">&lt;listcomp&gt; (joblib/parallel.py)</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.15%)</title><rect x="1069" y="276" width="2" height="15" fill="rgb(248,107,44)"/><text x="1072.00" y="286.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.15%)</title><rect x="1069" y="292" width="2" height="15" fill="rgb(231,16,50)"/><text x="1072.00" y="302.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.15%)</title><rect x="1069" y="308" width="2" height="15" fill="rgb(250,141,9)"/><text x="1072.00" y="318.50"></text></g><g><title>__exit__ (joblib/parallel.py) (3 samples, 0.46%)</title><rect x="1071" y="260" width="5" height="15" fill="rgb(212,49,2)"/><text x="1074.00" y="270.50"></text></g><g><title>unregister (joblib/parallel.py) (3 samples, 0.46%)</title><rect x="1071" y="276" width="5" height="15" fill="rgb(211,95,43)"/><text x="1074.00" y="286.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py) (273 samples, 42.19%)</title><rect x="588" y="212" width="498" height="15" fill="rgb(225,72,28)"/><text x="591.00" y="222.50">apply_async (joblib/_parallel_backends.py)</text></g><g><title>__init__ (joblib/_parallel_backends.py) (267 samples, 41.27%)</title><rect x="599" y="228" width="487" height="15" fill="rgb(219,72,51)"/><text x="602.00" y="238.50">__init__ (joblib/_parallel_backends.py)</text></g><g><title>__call__ (joblib/parallel.py) (265 samples, 40.96%)</title><rect x="602" y="244" width="484" height="15" fill="rgb(210,143,39)"/><text x="605.00" y="254.50">__call__ (joblib/parallel.py)</text></g><g><title>__init__ (joblib/parallel.py) (5 samples, 0.77%)</title><rect x="1076" y="260" width="10" height="15" fill="rgb(217,195,48)"/><text x="1079.00" y="270.50"></text></g><g><title>_dispatch (joblib/parallel.py) (282 samples, 43.59%)</title><rect x="573" y="196" width="514" height="15" fill="rgb(220,93,53)"/><text x="576.00" y="206.50">_dispatch (joblib/parallel.py)</text></g><g><title>time_time (python3.7) (1 samples, 0.15%)</title><rect x="1086" y="212" width="1" height="15" fill="rgb(205,126,4)"/><text x="1089.00" y="222.50"></text></g><g><title>clock_gettime (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1086" y="228" width="1" height="15" fill="rgb(241,8,42)"/><text x="1089.00" y="238.50"></text></g><g><title>get (queue.py) (10 samples, 1.55%)</title><rect x="1087" y="196" width="19" height="15" fill="rgb(236,181,40)"/><text x="1090.00" y="206.50"></text></g><g><title>__enter__ (threading.py) (2 samples, 0.31%)</title><rect x="1102" y="212" width="4" height="15" fill="rgb(215,126,11)"/><text x="1105.00" y="222.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (1 samples, 0.15%)</title><rect x="1104" y="228" width="2" height="15" fill="rgb(249,85,23)"/><text x="1107.00" y="238.50"></text></g><g><title>PyThread_acquire_lock_timed (python3.7) (1 samples, 0.15%)</title><rect x="1104" y="244" width="2" height="15" fill="rgb(208,170,28)"/><text x="1107.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.62%)</title><rect x="1120" y="212" width="7" height="15" fill="rgb(230,129,36)"/><text x="1123.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py) (13 samples, 2.01%)</title><rect x="1127" y="212" width="24" height="15" fill="rgb(209,65,37)"/><text x="1130.00" y="222.50">g..</text></g><g><title>__init__ (joblib/_parallel_backends.py) (2 samples, 0.31%)</title><rect x="1148" y="228" width="3" height="15" fill="rgb(210,216,9)"/><text x="1151.00" y="238.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.15%)</title><rect x="1151" y="212" width="2" height="15" fill="rgb(237,148,13)"/><text x="1154.00" y="222.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (28 samples, 4.33%)</title><rect x="1106" y="196" width="51" height="15" fill="rgb(211,132,8)"/><text x="1109.00" y="206.50">get_n..</text></g><g><title>unicode_hash (python3.7) (2 samples, 0.31%)</title><rect x="1153" y="212" width="4" height="15" fill="rgb(239,129,17)"/><text x="1156.00" y="222.50"></text></g><g><title>0x7fa558a7776b (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1164" y="244" width="2" height="15" fill="rgb(237,178,42)"/><text x="1167.00" y="254.50"></text></g><g><title>__enter__ (threading.py) (4 samples, 0.62%)</title><rect x="1160" y="212" width="8" height="15" fill="rgb(241,104,0)"/><text x="1163.00" y="222.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (3 samples, 0.46%)</title><rect x="1162" y="228" width="6" height="15" fill="rgb(230,138,10)"/><text x="1165.00" y="238.50"></text></g><g><title>PyThread_acquire_lock_timed (python3.7) (1 samples, 0.15%)</title><rect x="1166" y="244" width="2" height="15" fill="rgb(208,150,11)"/><text x="1169.00" y="254.50"></text></g><g><title>__exit__ (threading.py) (1 samples, 0.15%)</title><rect x="1168" y="212" width="1" height="15" fill="rgb(221,36,33)"/><text x="1171.00" y="222.50"></text></g><g><title>lock_PyThread_release_lock (python3.7) (1 samples, 0.15%)</title><rect x="1168" y="228" width="1" height="15" fill="rgb(241,36,24)"/><text x="1171.00" y="238.50"></text></g><g><title>PyThread_release_lock (python3.7) (1 samples, 0.15%)</title><rect x="1168" y="244" width="1" height="15" fill="rgb(205,116,44)"/><text x="1171.00" y="254.50"></text></g><g><title>sem_post@@GLIBC_2.2.5 (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="1168" y="260" width="1" height="15" fill="rgb(214,74,12)"/><text x="1171.00" y="270.50"></text></g><g><title>_put (queue.py) (1 samples, 0.15%)</title><rect x="1169" y="212" width="2" height="15" fill="rgb(215,37,19)"/><text x="1172.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (375 samples, 57.96%)</title><rect x="496" y="180" width="684" height="15" fill="rgb(210,102,52)"/><text x="499.00" y="190.50">dispatch_one_batch (joblib/parallel.py)</text></g><g><title>put (queue.py) (13 samples, 2.01%)</title><rect x="1157" y="196" width="23" height="15" fill="rgb(221,31,16)"/><text x="1160.00" y="206.50">p..</text></g><g><title>notify (threading.py) (5 samples, 0.77%)</title><rect x="1171" y="212" width="9" height="15" fill="rgb(212,201,6)"/><text x="1174.00" y="222.50"></text></g><g><title>_is_owned (threading.py) (3 samples, 0.46%)</title><rect x="1175" y="228" width="5" height="15" fill="rgb(230,125,1)"/><text x="1178.00" y="238.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (2 samples, 0.31%)</title><rect x="1177" y="244" width="3" height="15" fill="rgb(214,126,19)"/><text x="1180.00" y="254.50"></text></g><g><title>PyThread_acquire_lock_timed (python3.7) (1 samples, 0.15%)</title><rect x="1179" y="260" width="1" height="15" fill="rgb(212,141,7)"/><text x="1182.00" y="270.50"></text></g><g><title>sem_trywait@@GLIBC_2.2.5 (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="1179" y="276" width="1" height="15" fill="rgb(205,27,37)"/><text x="1182.00" y="286.50"></text></g><g><title>__call__ (joblib/parallel.py) (378 samples, 58.42%)</title><rect x="493" y="164" width="689" height="15" fill="rgb(245,197,31)"/><text x="496.00" y="174.50">__call__ (joblib/parallel.py)</text></g><g><title>retrieve (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="1180" y="180" width="2" height="15" fill="rgb(240,17,0)"/><text x="1183.00" y="190.50"></text></g><g><title>_validate_X_predict (sklearn/ensemble/_forest.py) (1 samples, 0.15%)</title><rect x="1182" y="164" width="2" height="15" fill="rgb(248,191,17)"/><text x="1185.00" y="174.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (1 samples, 0.15%)</title><rect x="1182" y="180" width="2" height="15" fill="rgb(243,36,16)"/><text x="1185.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (1 samples, 0.15%)</title><rect x="1182" y="196" width="2" height="15" fill="rgb(232,134,12)"/><text x="1185.00" y="206.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.15%)</title><rect x="1182" y="212" width="2" height="15" fill="rgb(232,195,34)"/><text x="1185.00" y="222.50"></text></g><g><title>profile_skl (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (382 samples, 59.04%)</title><rect x="491" y="68" width="697" height="15" fill="rgb(223,187,30)"/><text x="494.00" y="78.50">profile_skl (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (382 samples, 59.04%)</title><rect x="491" y="84" width="697" height="15" fill="rgb(225,155,37)"/><text x="494.00" y="94.50">setup_profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (382 samples, 59.04%)</title><rect x="491" y="100" width="697" height="15" fill="rgb(211,129,39)"/><text x="494.00" y="110.50">profile (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (382 samples, 59.04%)</title><rect x="491" y="116" width="697" height="15" fill="rgb(206,19,19)"/><text x="494.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (382 samples, 59.04%)</title><rect x="491" y="132" width="697" height="15" fill="rgb(211,129,15)"/><text x="494.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py) (382 samples, 59.04%)</title><rect x="491" y="148" width="697" height="15" fill="rgb(236,97,21)"/><text x="494.00" y="158.50">predict_proba (sklearn/ensemble/_forest.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.31%)</title><rect x="1184" y="164" width="4" height="15" fill="rgb(212,218,8)"/><text x="1187.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (2 samples, 0.31%)</title><rect x="1184" y="180" width="4" height="15" fill="rgb(218,117,43)"/><text x="1187.00" y="190.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (2 samples, 0.31%)</title><rect x="1184" y="196" width="4" height="15" fill="rgb(221,90,47)"/><text x="1187.00" y="206.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.31%)</title><rect x="1184" y="212" width="4" height="15" fill="rgb(226,132,0)"/><text x="1187.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (2 samples, 0.31%)</title><rect x="1184" y="228" width="4" height="15" fill="rgb(248,60,9)"/><text x="1187.00" y="238.50"></text></g><g><title>_buffer_clear_info (buffer.c) (2 samples, 0.31%)</title><rect x="1184" y="244" width="4" height="15" fill="rgb(216,15,21)"/><text x="1187.00" y="254.50"></text></g><g><title>all (647 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(213,141,36)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (647 samples, 100.00%)</title><rect x="10" y="52" width="1180" height="15" fill="rgb(224,190,19)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>start (bench_RandomForestClassifier_default_b_cl_1000_4_12_float_.py) (1 samples, 0.15%)</title><rect x="1188" y="68" width="2" height="15" fill="rgb(250,92,21)"/><text x="1191.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py) (1 samples, 0.15%)</title><rect x="1188" y="84" width="2" height="15" fill="rgb(211,220,24)"/><text x="1191.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.15%)</title><rect x="1188" y="100" width="2" height="15" fill="rgb(246,134,35)"/><text x="1191.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_forest.py) (1 samples, 0.15%)</title><rect x="1188" y="116" width="2" height="15" fill="rgb(244,176,35)"/><text x="1191.00" y="126.50"></text></g><g><title>__call__ (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="1188" y="132" width="2" height="15" fill="rgb(227,209,3)"/><text x="1191.00" y="142.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py) (1 samples, 0.15%)</title><rect x="1188" y="148" width="2" height="15" fill="rgb(218,189,54)"/><text x="1191.00" y="158.50"></text></g><g><title>get (queue.py) (1 samples, 0.15%)</title><rect x="1188" y="164" width="2" height="15" fill="rgb(207,97,44)"/><text x="1191.00" y="174.50"></text></g><g><title>notify (threading.py) (1 samples, 0.15%)</title><rect x="1188" y="180" width="2" height="15" fill="rgb(214,116,30)"/><text x="1191.00" y="190.50"></text></g></g></svg>