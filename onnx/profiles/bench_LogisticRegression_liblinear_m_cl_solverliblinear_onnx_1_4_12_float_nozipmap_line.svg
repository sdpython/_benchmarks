<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1190" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1173.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1173.00"> </text><svg id="frames" x="10" width="1180"><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (3 samples, 1.05%)</title><rect x="0.6969%" y="852" width="1.0453%" height="15" fill="rgb(227,0,7)"/><text x="0.9469%" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (3 samples, 1.05%)</title><rect x="0.6969%" y="868" width="1.0453%" height="15" fill="rgb(217,0,24)"/><text x="0.9469%" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (3 samples, 1.05%)</title><rect x="0.6969%" y="884" width="1.0453%" height="15" fill="rgb(221,193,54)"/><text x="0.9469%" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (3 samples, 1.05%)</title><rect x="0.6969%" y="900" width="1.0453%" height="15" fill="rgb(248,212,6)"/><text x="0.9469%" y="910.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (4 samples, 1.39%)</title><rect x="0.6969%" y="820" width="1.3937%" height="15" fill="rgb(208,68,35)"/><text x="0.9469%" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (4 samples, 1.39%)</title><rect x="0.6969%" y="836" width="1.3937%" height="15" fill="rgb(232,128,0)"/><text x="0.9469%" y="846.50"></text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx.py:2) (5 samples, 1.74%)</title><rect x="0.6969%" y="148" width="1.7422%" height="15" fill="rgb(207,160,47)"/><text x="0.9469%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.74%)</title><rect x="0.6969%" y="164" width="1.7422%" height="15" fill="rgb(228,23,34)"/><text x="0.9469%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.74%)</title><rect x="0.6969%" y="180" width="1.7422%" height="15" fill="rgb(218,30,26)"/><text x="0.9469%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.74%)</title><rect x="0.6969%" y="196" width="1.7422%" height="15" fill="rgb(220,122,19)"/><text x="0.9469%" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.74%)</title><rect x="0.6969%" y="212" width="1.7422%" height="15" fill="rgb(250,228,42)"/><text x="0.9469%" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.74%)</title><rect x="0.6969%" y="228" width="1.7422%" height="15" fill="rgb(240,193,28)"/><text x="0.9469%" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.74%)</title><rect x="0.6969%" y="244" width="1.7422%" height="15" fill="rgb(216,20,37)"/><text x="0.9469%" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.74%)</title><rect x="0.6969%" y="260" width="1.7422%" height="15" fill="rgb(206,188,39)"/><text x="0.9469%" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.74%)</title><rect x="0.6969%" y="276" width="1.7422%" height="15" fill="rgb(217,207,13)"/><text x="0.9469%" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (5 samples, 1.74%)</title><rect x="0.6969%" y="292" width="1.7422%" height="15" fill="rgb(231,73,38)"/><text x="0.9469%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.74%)</title><rect x="0.6969%" y="308" width="1.7422%" height="15" fill="rgb(225,20,46)"/><text x="0.9469%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.74%)</title><rect x="0.6969%" y="324" width="1.7422%" height="15" fill="rgb(210,31,41)"/><text x="0.9469%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.74%)</title><rect x="0.6969%" y="340" width="1.7422%" height="15" fill="rgb(221,200,47)"/><text x="0.9469%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.74%)</title><rect x="0.6969%" y="356" width="1.7422%" height="15" fill="rgb(226,26,5)"/><text x="0.9469%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.74%)</title><rect x="0.6969%" y="372" width="1.7422%" height="15" fill="rgb(249,33,26)"/><text x="0.9469%" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (5 samples, 1.74%)</title><rect x="0.6969%" y="388" width="1.7422%" height="15" fill="rgb(235,183,28)"/><text x="0.9469%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.74%)</title><rect x="0.6969%" y="404" width="1.7422%" height="15" fill="rgb(221,5,38)"/><text x="0.9469%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.74%)</title><rect x="0.6969%" y="420" width="1.7422%" height="15" fill="rgb(247,18,42)"/><text x="0.9469%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.74%)</title><rect x="0.6969%" y="436" width="1.7422%" height="15" fill="rgb(241,131,45)"/><text x="0.9469%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.74%)</title><rect x="0.6969%" y="452" width="1.7422%" height="15" fill="rgb(249,31,29)"/><text x="0.9469%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.74%)</title><rect x="0.6969%" y="468" width="1.7422%" height="15" fill="rgb(225,111,53)"/><text x="0.9469%" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (5 samples, 1.74%)</title><rect x="0.6969%" y="484" width="1.7422%" height="15" fill="rgb(238,160,17)"/><text x="0.9469%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.74%)</title><rect x="0.6969%" y="500" width="1.7422%" height="15" fill="rgb(214,148,48)"/><text x="0.9469%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.74%)</title><rect x="0.6969%" y="516" width="1.7422%" height="15" fill="rgb(232,36,49)"/><text x="0.9469%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.74%)</title><rect x="0.6969%" y="532" width="1.7422%" height="15" fill="rgb(209,103,24)"/><text x="0.9469%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.74%)</title><rect x="0.6969%" y="548" width="1.7422%" height="15" fill="rgb(229,88,8)"/><text x="0.9469%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.74%)</title><rect x="0.6969%" y="564" width="1.7422%" height="15" fill="rgb(213,181,19)"/><text x="0.9469%" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (5 samples, 1.74%)</title><rect x="0.6969%" y="580" width="1.7422%" height="15" fill="rgb(254,191,54)"/><text x="0.9469%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.74%)</title><rect x="0.6969%" y="596" width="1.7422%" height="15" fill="rgb(241,83,37)"/><text x="0.9469%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.74%)</title><rect x="0.6969%" y="612" width="1.7422%" height="15" fill="rgb(233,36,39)"/><text x="0.9469%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.74%)</title><rect x="0.6969%" y="628" width="1.7422%" height="15" fill="rgb(226,3,54)"/><text x="0.9469%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.74%)</title><rect x="0.6969%" y="644" width="1.7422%" height="15" fill="rgb(245,192,40)"/><text x="0.9469%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.74%)</title><rect x="0.6969%" y="660" width="1.7422%" height="15" fill="rgb(238,167,29)"/><text x="0.9469%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.74%)</title><rect x="0.6969%" y="676" width="1.7422%" height="15" fill="rgb(232,182,51)"/><text x="0.9469%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.74%)</title><rect x="0.6969%" y="692" width="1.7422%" height="15" fill="rgb(231,60,39)"/><text x="0.9469%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.74%)</title><rect x="0.6969%" y="708" width="1.7422%" height="15" fill="rgb(208,69,12)"/><text x="0.9469%" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (5 samples, 1.74%)</title><rect x="0.6969%" y="724" width="1.7422%" height="15" fill="rgb(235,93,37)"/><text x="0.9469%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.74%)</title><rect x="0.6969%" y="740" width="1.7422%" height="15" fill="rgb(213,116,39)"/><text x="0.9469%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.74%)</title><rect x="0.6969%" y="756" width="1.7422%" height="15" fill="rgb(222,207,29)"/><text x="0.9469%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.74%)</title><rect x="0.6969%" y="772" width="1.7422%" height="15" fill="rgb(206,96,30)"/><text x="0.9469%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.74%)</title><rect x="0.6969%" y="788" width="1.7422%" height="15" fill="rgb(218,138,4)"/><text x="0.9469%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.74%)</title><rect x="0.6969%" y="804" width="1.7422%" height="15" fill="rgb(250,191,14)"/><text x="0.9469%" y="814.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (6 samples, 2.09%)</title><rect x="2.4390%" y="292" width="2.0906%" height="15" fill="rgb(239,60,40)"/><text x="2.6890%" y="302.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.09%)</title><rect x="2.4390%" y="308" width="2.0906%" height="15" fill="rgb(206,27,48)"/><text x="2.6890%" y="318.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.09%)</title><rect x="2.4390%" y="324" width="2.0906%" height="15" fill="rgb(225,35,8)"/><text x="2.6890%" y="334.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.09%)</title><rect x="2.4390%" y="340" width="2.0906%" height="15" fill="rgb(250,213,24)"/><text x="2.6890%" y="350.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.09%)</title><rect x="2.4390%" y="356" width="2.0906%" height="15" fill="rgb(247,123,22)"/><text x="2.6890%" y="366.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.09%)</title><rect x="2.4390%" y="372" width="2.0906%" height="15" fill="rgb(231,138,38)"/><text x="2.6890%" y="382.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:13) (5 samples, 1.74%)</title><rect x="2.7875%" y="388" width="1.7422%" height="15" fill="rgb(231,145,46)"/><text x="3.0375%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.74%)</title><rect x="2.7875%" y="404" width="1.7422%" height="15" fill="rgb(251,118,11)"/><text x="3.0375%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.74%)</title><rect x="2.7875%" y="420" width="1.7422%" height="15" fill="rgb(217,147,25)"/><text x="3.0375%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.74%)</title><rect x="2.7875%" y="436" width="1.7422%" height="15" fill="rgb(247,81,37)"/><text x="3.0375%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.74%)</title><rect x="2.7875%" y="452" width="1.7422%" height="15" fill="rgb(209,12,38)"/><text x="3.0375%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.74%)</title><rect x="2.7875%" y="468" width="1.7422%" height="15" fill="rgb(227,1,9)"/><text x="3.0375%" y="478.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (3 samples, 1.05%)</title><rect x="3.4843%" y="484" width="1.0453%" height="15" fill="rgb(248,47,43)"/><text x="3.7343%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="3.4843%" y="500" width="1.0453%" height="15" fill="rgb(221,10,30)"/><text x="3.7343%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="3.4843%" y="516" width="1.0453%" height="15" fill="rgb(210,229,1)"/><text x="3.7343%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="3.4843%" y="532" width="1.0453%" height="15" fill="rgb(222,148,37)"/><text x="3.7343%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="3.4843%" y="548" width="1.0453%" height="15" fill="rgb(234,67,33)"/><text x="3.7343%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="3.4843%" y="564" width="1.0453%" height="15" fill="rgb(247,98,35)"/><text x="3.7343%" y="574.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:10) (3 samples, 1.05%)</title><rect x="5.2265%" y="964" width="1.0453%" height="15" fill="rgb(247,138,52)"/><text x="5.4765%" y="974.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="5.2265%" y="980" width="1.0453%" height="15" fill="rgb(213,79,30)"/><text x="5.4765%" y="990.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="5.2265%" y="996" width="1.0453%" height="15" fill="rgb(246,177,23)"/><text x="5.4765%" y="1006.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="5.2265%" y="1012" width="1.0453%" height="15" fill="rgb(230,62,27)"/><text x="5.4765%" y="1022.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="5.2265%" y="1028" width="1.0453%" height="15" fill="rgb(216,154,8)"/><text x="5.4765%" y="1038.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="5.2265%" y="1044" width="1.0453%" height="15" fill="rgb(244,35,45)"/><text x="5.4765%" y="1054.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py:27) (3 samples, 1.05%)</title><rect x="5.2265%" y="1060" width="1.0453%" height="15" fill="rgb(251,115,12)"/><text x="5.4765%" y="1070.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="5.2265%" y="1076" width="1.0453%" height="15" fill="rgb(240,54,50)"/><text x="5.4765%" y="1086.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="5.2265%" y="1092" width="1.0453%" height="15" fill="rgb(233,84,52)"/><text x="5.4765%" y="1102.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="5.2265%" y="1108" width="1.0453%" height="15" fill="rgb(207,117,47)"/><text x="5.4765%" y="1118.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="5.2265%" y="1124" width="1.0453%" height="15" fill="rgb(249,43,39)"/><text x="5.4765%" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="5.2265%" y="1140" width="1.0453%" height="15" fill="rgb(209,38,44)"/><text x="5.4765%" y="1150.50"></text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx.py:4) (12 samples, 4.18%)</title><rect x="2.4390%" y="148" width="4.1812%" height="15" fill="rgb(236,212,23)"/><text x="2.6890%" y="158.50">&lt;modu..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (12 samples, 4.18%)</title><rect x="2.4390%" y="164" width="4.1812%" height="15" fill="rgb(242,79,21)"/><text x="2.6890%" y="174.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (12 samples, 4.18%)</title><rect x="2.4390%" y="180" width="4.1812%" height="15" fill="rgb(211,96,35)"/><text x="2.6890%" y="190.50">_find..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (12 samples, 4.18%)</title><rect x="2.4390%" y="196" width="4.1812%" height="15" fill="rgb(253,215,40)"/><text x="2.6890%" y="206.50">_call..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (12 samples, 4.18%)</title><rect x="2.4390%" y="212" width="4.1812%" height="15" fill="rgb(211,81,21)"/><text x="2.6890%" y="222.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (12 samples, 4.18%)</title><rect x="2.4390%" y="228" width="4.1812%" height="15" fill="rgb(208,190,38)"/><text x="2.6890%" y="238.50">_find..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (12 samples, 4.18%)</title><rect x="2.4390%" y="244" width="4.1812%" height="15" fill="rgb(235,213,38)"/><text x="2.6890%" y="254.50">_load..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (12 samples, 4.18%)</title><rect x="2.4390%" y="260" width="4.1812%" height="15" fill="rgb(237,122,38)"/><text x="2.6890%" y="270.50">exec_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (12 samples, 4.18%)</title><rect x="2.4390%" y="276" width="4.1812%" height="15" fill="rgb(244,218,35)"/><text x="2.6890%" y="286.50">_call..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (6 samples, 2.09%)</title><rect x="4.5296%" y="292" width="2.0906%" height="15" fill="rgb(240,68,47)"/><text x="4.7796%" y="302.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.09%)</title><rect x="4.5296%" y="308" width="2.0906%" height="15" fill="rgb(210,16,53)"/><text x="4.7796%" y="318.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (6 samples, 2.09%)</title><rect x="4.5296%" y="324" width="2.0906%" height="15" fill="rgb(235,124,12)"/><text x="4.7796%" y="334.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.09%)</title><rect x="4.5296%" y="340" width="2.0906%" height="15" fill="rgb(224,169,11)"/><text x="4.7796%" y="350.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.09%)</title><rect x="4.5296%" y="356" width="2.0906%" height="15" fill="rgb(250,166,2)"/><text x="4.7796%" y="366.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.09%)</title><rect x="4.5296%" y="372" width="2.0906%" height="15" fill="rgb(242,216,29)"/><text x="4.7796%" y="382.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.09%)</title><rect x="4.5296%" y="388" width="2.0906%" height="15" fill="rgb(230,116,27)"/><text x="4.7796%" y="398.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.09%)</title><rect x="4.5296%" y="404" width="2.0906%" height="15" fill="rgb(228,99,48)"/><text x="4.7796%" y="414.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.09%)</title><rect x="4.5296%" y="420" width="2.0906%" height="15" fill="rgb(253,11,6)"/><text x="4.7796%" y="430.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (6 samples, 2.09%)</title><rect x="4.5296%" y="436" width="2.0906%" height="15" fill="rgb(247,143,39)"/><text x="4.7796%" y="446.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 2.09%)</title><rect x="4.5296%" y="452" width="2.0906%" height="15" fill="rgb(236,97,10)"/><text x="4.7796%" y="462.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 2.09%)</title><rect x="4.5296%" y="468" width="2.0906%" height="15" fill="rgb(233,208,19)"/><text x="4.7796%" y="478.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 2.09%)</title><rect x="4.5296%" y="484" width="2.0906%" height="15" fill="rgb(216,164,2)"/><text x="4.7796%" y="494.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 2.09%)</title><rect x="4.5296%" y="500" width="2.0906%" height="15" fill="rgb(220,129,5)"/><text x="4.7796%" y="510.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 2.09%)</title><rect x="4.5296%" y="516" width="2.0906%" height="15" fill="rgb(242,17,10)"/><text x="4.7796%" y="526.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (4 samples, 1.39%)</title><rect x="5.2265%" y="532" width="1.3937%" height="15" fill="rgb(242,107,0)"/><text x="5.4765%" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.39%)</title><rect x="5.2265%" y="548" width="1.3937%" height="15" fill="rgb(251,28,31)"/><text x="5.4765%" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.39%)</title><rect x="5.2265%" y="564" width="1.3937%" height="15" fill="rgb(233,223,10)"/><text x="5.4765%" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.39%)</title><rect x="5.2265%" y="580" width="1.3937%" height="15" fill="rgb(215,21,27)"/><text x="5.4765%" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.39%)</title><rect x="5.2265%" y="596" width="1.3937%" height="15" fill="rgb(232,23,21)"/><text x="5.4765%" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.39%)</title><rect x="5.2265%" y="612" width="1.3937%" height="15" fill="rgb(244,5,23)"/><text x="5.4765%" y="622.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (4 samples, 1.39%)</title><rect x="5.2265%" y="628" width="1.3937%" height="15" fill="rgb(226,81,46)"/><text x="5.4765%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.39%)</title><rect x="5.2265%" y="644" width="1.3937%" height="15" fill="rgb(247,70,30)"/><text x="5.4765%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.39%)</title><rect x="5.2265%" y="660" width="1.3937%" height="15" fill="rgb(212,68,19)"/><text x="5.4765%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.39%)</title><rect x="5.2265%" y="676" width="1.3937%" height="15" fill="rgb(240,187,13)"/><text x="5.4765%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.39%)</title><rect x="5.2265%" y="692" width="1.3937%" height="15" fill="rgb(223,113,26)"/><text x="5.4765%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.39%)</title><rect x="5.2265%" y="708" width="1.3937%" height="15" fill="rgb(206,192,2)"/><text x="5.4765%" y="718.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (4 samples, 1.39%)</title><rect x="5.2265%" y="724" width="1.3937%" height="15" fill="rgb(241,108,4)"/><text x="5.4765%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.39%)</title><rect x="5.2265%" y="740" width="1.3937%" height="15" fill="rgb(247,173,49)"/><text x="5.4765%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (4 samples, 1.39%)</title><rect x="5.2265%" y="756" width="1.3937%" height="15" fill="rgb(224,114,35)"/><text x="5.4765%" y="766.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.39%)</title><rect x="5.2265%" y="772" width="1.3937%" height="15" fill="rgb(245,159,27)"/><text x="5.4765%" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.39%)</title><rect x="5.2265%" y="788" width="1.3937%" height="15" fill="rgb(245,172,44)"/><text x="5.4765%" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.39%)</title><rect x="5.2265%" y="804" width="1.3937%" height="15" fill="rgb(236,23,11)"/><text x="5.4765%" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.39%)</title><rect x="5.2265%" y="820" width="1.3937%" height="15" fill="rgb(205,117,38)"/><text x="5.4765%" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.39%)</title><rect x="5.2265%" y="836" width="1.3937%" height="15" fill="rgb(237,72,25)"/><text x="5.4765%" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.39%)</title><rect x="5.2265%" y="852" width="1.3937%" height="15" fill="rgb(244,70,9)"/><text x="5.4765%" y="862.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (4 samples, 1.39%)</title><rect x="5.2265%" y="868" width="1.3937%" height="15" fill="rgb(217,125,39)"/><text x="5.4765%" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.39%)</title><rect x="5.2265%" y="884" width="1.3937%" height="15" fill="rgb(235,36,10)"/><text x="5.4765%" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.39%)</title><rect x="5.2265%" y="900" width="1.3937%" height="15" fill="rgb(251,123,47)"/><text x="5.4765%" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.39%)</title><rect x="5.2265%" y="916" width="1.3937%" height="15" fill="rgb(221,13,13)"/><text x="5.4765%" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.39%)</title><rect x="5.2265%" y="932" width="1.3937%" height="15" fill="rgb(238,131,9)"/><text x="5.4765%" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.39%)</title><rect x="5.2265%" y="948" width="1.3937%" height="15" fill="rgb(211,50,8)"/><text x="5.4765%" y="958.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:4) (22 samples, 7.67%)</title><rect x="0.0000%" y="52" width="7.6655%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="62.50">&lt;module&gt; (..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (22 samples, 7.67%)</title><rect x="0.0000%" y="68" width="7.6655%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="78.50">_find_and_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (22 samples, 7.67%)</title><rect x="0.0000%" y="84" width="7.6655%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="94.50">_find_and_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (22 samples, 7.67%)</title><rect x="0.0000%" y="100" width="7.6655%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="110.50">_load_unlo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (22 samples, 7.67%)</title><rect x="0.0000%" y="116" width="7.6655%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="126.50">exec_modul..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (22 samples, 7.67%)</title><rect x="0.0000%" y="132" width="7.6655%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="142.50">_call_with..</text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx.py:8) (3 samples, 1.05%)</title><rect x="6.6202%" y="148" width="1.0453%" height="15" fill="rgb(209,121,21)"/><text x="6.8702%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="6.6202%" y="164" width="1.0453%" height="15" fill="rgb(220,109,13)"/><text x="6.8702%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="6.6202%" y="180" width="1.0453%" height="15" fill="rgb(232,18,1)"/><text x="6.8702%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="6.6202%" y="196" width="1.0453%" height="15" fill="rgb(215,41,42)"/><text x="6.8702%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="6.6202%" y="212" width="1.0453%" height="15" fill="rgb(224,123,36)"/><text x="6.8702%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="6.6202%" y="228" width="1.0453%" height="15" fill="rgb(240,125,3)"/><text x="6.8702%" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (3 samples, 1.05%)</title><rect x="6.6202%" y="244" width="1.0453%" height="15" fill="rgb(205,98,50)"/><text x="6.8702%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="6.6202%" y="260" width="1.0453%" height="15" fill="rgb(205,185,37)"/><text x="6.8702%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="6.6202%" y="276" width="1.0453%" height="15" fill="rgb(238,207,15)"/><text x="6.8702%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="6.6202%" y="292" width="1.0453%" height="15" fill="rgb(213,199,42)"/><text x="6.8702%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="6.6202%" y="308" width="1.0453%" height="15" fill="rgb(235,201,11)"/><text x="6.8702%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="6.6202%" y="324" width="1.0453%" height="15" fill="rgb(207,46,11)"/><text x="6.8702%" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (3 samples, 1.05%)</title><rect x="6.6202%" y="340" width="1.0453%" height="15" fill="rgb(241,35,35)"/><text x="6.8702%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="6.6202%" y="356" width="1.0453%" height="15" fill="rgb(243,32,47)"/><text x="6.8702%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 1.05%)</title><rect x="6.6202%" y="372" width="1.0453%" height="15" fill="rgb(247,202,23)"/><text x="6.8702%" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="6.6202%" y="388" width="1.0453%" height="15" fill="rgb(219,102,11)"/><text x="6.8702%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 1.05%)</title><rect x="6.6202%" y="404" width="1.0453%" height="15" fill="rgb(243,110,44)"/><text x="6.8702%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 1.05%)</title><rect x="6.6202%" y="420" width="1.0453%" height="15" fill="rgb(222,74,54)"/><text x="6.8702%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 1.05%)</title><rect x="6.6202%" y="436" width="1.0453%" height="15" fill="rgb(216,99,12)"/><text x="6.8702%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 1.05%)</title><rect x="6.6202%" y="452" width="1.0453%" height="15" fill="rgb(226,22,26)"/><text x="6.8702%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 1.05%)</title><rect x="6.6202%" y="468" width="1.0453%" height="15" fill="rgb(217,163,10)"/><text x="6.8702%" y="478.50"></text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py:1645) (6 samples, 2.09%)</title><rect x="9.4077%" y="148" width="2.0906%" height="15" fill="rgb(213,25,53)"/><text x="9.6577%" y="158.50">p..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:963) (5 samples, 1.74%)</title><rect x="9.7561%" y="164" width="1.7422%" height="15" fill="rgb(252,105,26)"/><text x="10.0061%" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:964) (3 samples, 1.05%)</title><rect x="10.4530%" y="180" width="1.0453%" height="15" fill="rgb(220,39,43)"/><text x="10.7030%" y="190.50"></text></g><g><title>decision_function (sklearn/linear_model/_base.py:266) (11 samples, 3.83%)</title><rect x="11.8467%" y="180" width="3.8328%" height="15" fill="rgb(229,68,48)"/><text x="12.0967%" y="190.50">deci..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:963) (8 samples, 2.79%)</title><rect x="12.8920%" y="196" width="2.7875%" height="15" fill="rgb(252,8,32)"/><text x="13.1420%" y="206.50">ch..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:964) (6 samples, 2.09%)</title><rect x="13.5889%" y="212" width="2.0906%" height="15" fill="rgb(223,20,43)"/><text x="13.8389%" y="222.50">&lt;..</text></g><g><title>check_array (sklearn/utils/validation.py:518) (7 samples, 2.44%)</title><rect x="16.7247%" y="196" width="2.4390%" height="15" fill="rgb(229,81,49)"/><text x="16.9747%" y="206.50">ch..</text></g><g><title>_add_filter (warnings.py:186) (4 samples, 1.39%)</title><rect x="19.8606%" y="228" width="1.3937%" height="15" fill="rgb(236,28,36)"/><text x="20.1106%" y="238.50"></text></g><g><title>check_array (sklearn/utils/validation.py:520) (8 samples, 2.79%)</title><rect x="19.5122%" y="196" width="2.7875%" height="15" fill="rgb(249,185,26)"/><text x="19.7622%" y="206.50">ch..</text></g><g><title>simplefilter (warnings.py:179) (8 samples, 2.79%)</title><rect x="19.5122%" y="212" width="2.7875%" height="15" fill="rgb(249,174,33)"/><text x="19.7622%" y="222.50">si..</text></g><g><title>_add_filter (warnings.py:189) (3 samples, 1.05%)</title><rect x="21.2544%" y="228" width="1.0453%" height="15" fill="rgb(233,201,37)"/><text x="21.5044%" y="238.50"></text></g><g><title>check_array (sklearn/utils/validation.py:531) (4 samples, 1.39%)</title><rect x="22.2997%" y="196" width="1.3937%" height="15" fill="rgb(221,78,26)"/><text x="22.5497%" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:559) (5 samples, 1.74%)</title><rect x="24.3902%" y="196" width="1.7422%" height="15" fill="rgb(250,127,30)"/><text x="24.6402%" y="206.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py:392) (4 samples, 1.39%)</title><rect x="24.7387%" y="212" width="1.3937%" height="15" fill="rgb(230,49,44)"/><text x="24.9887%" y="222.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (6 samples, 2.09%)</title><rect x="26.1324%" y="212" width="2.0906%" height="15" fill="rgb(229,67,23)"/><text x="26.3824%" y="222.50">_..</text></g><g><title>check_array (sklearn/utils/validation.py:578) (7 samples, 2.44%)</title><rect x="26.1324%" y="196" width="2.4390%" height="15" fill="rgb(249,83,47)"/><text x="26.3824%" y="206.50">ch..</text></g><g><title>_num_samples (sklearn/utils/validation.py:138) (5 samples, 1.74%)</title><rect x="29.2683%" y="212" width="1.7422%" height="15" fill="rgb(215,43,3)"/><text x="29.5183%" y="222.50"></text></g><g><title>check_array (sklearn/utils/validation.py:581) (9 samples, 3.14%)</title><rect x="28.9199%" y="196" width="3.1359%" height="15" fill="rgb(238,154,13)"/><text x="29.1699%" y="206.50">che..</text></g><g><title>decision_function (sklearn/linear_model/_base.py:268) (49 samples, 17.07%)</title><rect x="15.6794%" y="180" width="17.0732%" height="15" fill="rgb(219,56,2)"/><text x="15.9294%" y="190.50">decision_function (sklearn..</text></g><g><title>iterator_loop (ufunc_object.c:1520) (5 samples, 1.74%)</title><rect x="34.8432%" y="260" width="1.7422%" height="15" fill="rgb(233,0,4)"/><text x="35.0932%" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (3 samples, 1.05%)</title><rect x="37.2822%" y="260" width="1.0453%" height="15" fill="rgb(235,30,7)"/><text x="37.5322%" y="270.50"></text></g><g><title>array_add (number.c:330) (15 samples, 5.23%)</title><rect x="33.4495%" y="196" width="5.2265%" height="15" fill="rgb(250,79,13)"/><text x="33.6995%" y="206.50">array_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (15 samples, 5.23%)</title><rect x="33.4495%" y="212" width="5.2265%" height="15" fill="rgb(211,146,34)"/><text x="33.6995%" y="222.50">ufunc_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (12 samples, 4.18%)</title><rect x="34.4948%" y="228" width="4.1812%" height="15" fill="rgb(228,22,38)"/><text x="34.7448%" y="238.50">PyUFu..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (11 samples, 3.83%)</title><rect x="34.8432%" y="244" width="3.8328%" height="15" fill="rgb(235,168,5)"/><text x="35.0932%" y="254.50">exec..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (4 samples, 1.39%)</title><rect x="43.5540%" y="260" width="1.3937%" height="15" fill="rgb(221,155,16)"/><text x="43.8040%" y="270.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2871) (9 samples, 3.14%)</title><rect x="42.1603%" y="244" width="3.1359%" height="15" fill="rgb(215,215,53)"/><text x="42.4103%" y="254.50">PyU..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (24 samples, 8.36%)</title><rect x="38.6760%" y="196" width="8.3624%" height="15" fill="rgb(223,4,10)"/><text x="38.9260%" y="206.50">safe_sparse_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (23 samples, 8.01%)</title><rect x="39.0244%" y="212" width="8.0139%" height="15" fill="rgb(234,103,6)"/><text x="39.2744%" y="222.50">ufunc_gener..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (23 samples, 8.01%)</title><rect x="39.0244%" y="228" width="8.0139%" height="15" fill="rgb(227,97,0)"/><text x="39.2744%" y="238.50">PyUFunc_Gen..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3056) (3 samples, 1.05%)</title><rect x="45.9930%" y="244" width="1.0453%" height="15" fill="rgb(234,150,53)"/><text x="46.2430%" y="254.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:697) (3 samples, 1.05%)</title><rect x="45.9930%" y="260" width="1.0453%" height="15" fill="rgb(228,201,54)"/><text x="46.2430%" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (3 samples, 1.05%)</title><rect x="45.9930%" y="276" width="1.0453%" height="15" fill="rgb(222,22,37)"/><text x="46.2430%" y="286.50"></text></g><g><title>decision_function (sklearn/linear_model/_base.py:276) (41 samples, 14.29%)</title><rect x="33.1010%" y="180" width="14.2857%" height="15" fill="rgb(237,53,32)"/><text x="33.3510%" y="190.50">decision_function (skl..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:307) (104 samples, 36.24%)</title><rect x="11.8467%" y="164" width="36.2369%" height="15" fill="rgb(233,25,53)"/><text x="12.0967%" y="174.50">_predict_proba_lr (sklearn/linear_model/_base.py:307)</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:308) (6 samples, 2.09%)</title><rect x="48.0836%" y="164" width="2.0906%" height="15" fill="rgb(210,40,34)"/><text x="48.3336%" y="174.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.39%)</title><rect x="48.7805%" y="180" width="1.3937%" height="15" fill="rgb(241,220,44)"/><text x="49.0305%" y="190.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 1.05%)</title><rect x="49.1289%" y="196" width="1.0453%" height="15" fill="rgb(235,28,35)"/><text x="49.3789%" y="206.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (4 samples, 1.39%)</title><rect x="52.9617%" y="228" width="1.3937%" height="15" fill="rgb(210,56,17)"/><text x="53.2117%" y="238.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (4 samples, 1.39%)</title><rect x="52.9617%" y="244" width="1.3937%" height="15" fill="rgb(224,130,29)"/><text x="53.2117%" y="254.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (4 samples, 1.39%)</title><rect x="52.9617%" y="260" width="1.3937%" height="15" fill="rgb(235,212,8)"/><text x="53.2117%" y="270.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:37) (4 samples, 1.39%)</title><rect x="52.9617%" y="276" width="1.3937%" height="15" fill="rgb(223,33,50)"/><text x="53.2117%" y="286.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h:106) (4 samples, 1.39%)</title><rect x="52.9617%" y="292" width="1.3937%" height="15" fill="rgb(219,149,13)"/><text x="53.2117%" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (3 samples, 1.05%)</title><rect x="56.0976%" y="276" width="1.0453%" height="15" fill="rgb(250,156,29)"/><text x="56.3476%" y="286.50"></text></g><g><title>array_sum (methods.c:2215) (15 samples, 5.23%)</title><rect x="52.6132%" y="180" width="5.2265%" height="15" fill="rgb(216,193,19)"/><text x="52.8632%" y="190.50">array_..</text></g><g><title>forward_ndarray_method (methods.c:108) (15 samples, 5.23%)</title><rect x="52.6132%" y="196" width="5.2265%" height="15" fill="rgb(216,135,14)"/><text x="52.8632%" y="206.50">forwar..</text></g><g><title>_sum (numpy/core/_methods.py:38) (14 samples, 4.88%)</title><rect x="52.9617%" y="212" width="4.8780%" height="15" fill="rgb(241,47,5)"/><text x="53.2117%" y="222.50">_sum (..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (10 samples, 3.48%)</title><rect x="54.3554%" y="228" width="3.4843%" height="15" fill="rgb(233,42,35)"/><text x="54.6054%" y="238.50">ufu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (8 samples, 2.79%)</title><rect x="55.0523%" y="244" width="2.7875%" height="15" fill="rgb(231,13,6)"/><text x="55.3023%" y="254.50">Py..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (6 samples, 2.09%)</title><rect x="55.7491%" y="260" width="2.0906%" height="15" fill="rgb(207,181,40)"/><text x="55.9991%" y="270.50">P..</text></g><g><title>iterator_loop (ufunc_object.c:1520) (3 samples, 1.05%)</title><rect x="59.2334%" y="228" width="1.0453%" height="15" fill="rgb(254,173,49)"/><text x="59.4834%" y="238.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228) (148 samples, 51.57%)</title><rect x="9.0592%" y="132" width="51.5679%" height="15" fill="rgb(221,1,38)"/><text x="9.3092%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228)</text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py:1651) (140 samples, 48.78%)</title><rect x="11.8467%" y="148" width="48.7805%" height="15" fill="rgb(206,124,46)"/><text x="12.0967%" y="158.50">predict_proba (sklearn/linear_model/_logistic.py:1651)</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:313) (30 samples, 10.45%)</title><rect x="50.1742%" y="164" width="10.4530%" height="15" fill="rgb(249,21,11)"/><text x="50.4242%" y="174.50">_predict_proba_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 2.09%)</title><rect x="58.5366%" y="180" width="2.0906%" height="15" fill="rgb(222,201,40)"/><text x="58.7866%" y="190.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 1.74%)</title><rect x="58.8850%" y="196" width="1.7422%" height="15" fill="rgb(235,61,29)"/><text x="59.1350%" y="206.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (4 samples, 1.39%)</title><rect x="59.2334%" y="212" width="1.3937%" height="15" fill="rgb(219,207,3)"/><text x="59.4834%" y="222.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:54) (153 samples, 53.31%)</title><rect x="8.0139%" y="52" width="53.3101%" height="15" fill="rgb(222,56,46)"/><text x="8.2639%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozi..</text></g><g><title>profile_skl (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:53) (153 samples, 53.31%)</title><rect x="8.0139%" y="68" width="53.3101%" height="15" fill="rgb(239,76,54)"/><text x="8.2639%" y="78.50">profile_skl (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_n..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:37) (153 samples, 53.31%)</title><rect x="8.0139%" y="84" width="53.3101%" height="15" fill="rgb(231,124,27)"/><text x="8.2639%" y="94.50">setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:31) (153 samples, 53.31%)</title><rect x="8.0139%" y="100" width="53.3101%" height="15" fill="rgb(249,195,6)"/><text x="8.2639%" y="110.50">profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozip..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (152 samples, 52.96%)</title><rect x="8.3624%" y="116" width="52.9617%" height="15" fill="rgb(237,174,47)"/><text x="8.6124%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182)</text></g><g><title>dot (&lt;__array_function__ internals&gt;:4) (3 samples, 1.05%)</title><rect x="65.5052%" y="228" width="1.0453%" height="15" fill="rgb(206,201,31)"/><text x="65.7552%" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:39) (8 samples, 2.79%)</title><rect x="65.1568%" y="196" width="2.7875%" height="15" fill="rgb(231,57,52)"/><text x="65.4068%" y="206.50">_r..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (7 samples, 2.44%)</title><rect x="65.5052%" y="212" width="2.4390%" height="15" fill="rgb(248,177,22)"/><text x="65.7552%" y="222.50">nu..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (4 samples, 1.39%)</title><rect x="66.5505%" y="228" width="1.3937%" height="15" fill="rgb(215,211,37)"/><text x="66.8005%" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 1.39%)</title><rect x="66.5505%" y="244" width="1.3937%" height="15" fill="rgb(241,128,51)"/><text x="66.8005%" y="254.50"></text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (4 samples, 1.39%)</title><rect x="66.5505%" y="260" width="1.3937%" height="15" fill="rgb(227,165,31)"/><text x="66.8005%" y="270.50"></text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (3 samples, 1.05%)</title><rect x="66.8990%" y="276" width="1.0453%" height="15" fill="rgb(228,167,24)"/><text x="67.1490%" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (4 samples, 1.39%)</title><rect x="69.6864%" y="260" width="1.3937%" height="15" fill="rgb(228,143,12)"/><text x="69.9364%" y="270.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 2.79%)</title><rect x="68.6411%" y="212" width="2.7875%" height="15" fill="rgb(249,149,8)"/><text x="68.8911%" y="222.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 1.74%)</title><rect x="69.6864%" y="228" width="1.7422%" height="15" fill="rgb(243,35,44)"/><text x="69.9364%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 1.74%)</title><rect x="69.6864%" y="244" width="1.7422%" height="15" fill="rgb(246,89,9)"/><text x="69.9364%" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:41) (11 samples, 3.83%)</title><rect x="67.9443%" y="196" width="3.8328%" height="15" fill="rgb(233,213,13)"/><text x="68.1943%" y="206.50">_run..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:46) (4 samples, 1.39%)</title><rect x="72.1254%" y="196" width="1.3937%" height="15" fill="rgb(233,141,41)"/><text x="72.3754%" y="206.50"></text></g><g><title>compiled_run (&lt;string&gt;:4) (33 samples, 11.50%)</title><rect x="64.1115%" y="180" width="11.4983%" height="15" fill="rgb(239,167,4)"/><text x="64.3615%" y="190.50">compiled_run (&lt;st..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:60) (6 samples, 2.09%)</title><rect x="73.5192%" y="196" width="2.0906%" height="15" fill="rgb(209,217,16)"/><text x="73.7692%" y="206.50">_..</text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (4 samples, 1.39%)</title><rect x="74.2160%" y="212" width="1.3937%" height="15" fill="rgb(219,88,35)"/><text x="74.4660%" y="222.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (4 samples, 1.39%)</title><rect x="77.7003%" y="276" width="1.3937%" height="15" fill="rgb(220,193,23)"/><text x="77.9503%" y="286.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (4 samples, 1.39%)</title><rect x="77.7003%" y="292" width="1.3937%" height="15" fill="rgb(230,90,52)"/><text x="77.9503%" y="302.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (3 samples, 1.05%)</title><rect x="78.0488%" y="308" width="1.0453%" height="15" fill="rgb(252,106,19)"/><text x="78.2988%" y="318.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:37) (3 samples, 1.05%)</title><rect x="78.0488%" y="324" width="1.0453%" height="15" fill="rgb(206,74,20)"/><text x="78.2988%" y="334.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (3 samples, 1.05%)</title><rect x="80.8362%" y="324" width="1.0453%" height="15" fill="rgb(230,138,44)"/><text x="81.0862%" y="334.50"></text></g><g><title>array_sum (methods.c:2215) (15 samples, 5.23%)</title><rect x="77.0035%" y="228" width="5.2265%" height="15" fill="rgb(235,182,43)"/><text x="77.2535%" y="238.50">array_..</text></g><g><title>forward_ndarray_method (methods.c:108) (15 samples, 5.23%)</title><rect x="77.0035%" y="244" width="5.2265%" height="15" fill="rgb(242,16,51)"/><text x="77.2535%" y="254.50">forwar..</text></g><g><title>_sum (numpy/core/_methods.py:38) (15 samples, 5.23%)</title><rect x="77.0035%" y="260" width="5.2265%" height="15" fill="rgb(248,9,4)"/><text x="77.2535%" y="270.50">_sum (..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (9 samples, 3.14%)</title><rect x="79.0941%" y="276" width="3.1359%" height="15" fill="rgb(210,31,22)"/><text x="79.3441%" y="286.50">ufu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (7 samples, 2.44%)</title><rect x="79.7909%" y="292" width="2.4390%" height="15" fill="rgb(239,54,39)"/><text x="80.0409%" y="302.50">Py..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (7 samples, 2.44%)</title><rect x="79.7909%" y="308" width="2.4390%" height="15" fill="rgb(230,99,41)"/><text x="80.0409%" y="318.50">Py..</text></g><g><title>array_true_divide (number.c:826) (4 samples, 1.39%)</title><rect x="82.2300%" y="228" width="1.3937%" height="15" fill="rgb(253,106,12)"/><text x="82.4800%" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 1.39%)</title><rect x="82.2300%" y="244" width="1.3937%" height="15" fill="rgb(213,46,41)"/><text x="82.4800%" y="254.50"></text></g><g><title>compiled_run (&lt;string&gt;:5) (24 samples, 8.36%)</title><rect x="75.6098%" y="180" width="8.3624%" height="15" fill="rgb(215,133,35)"/><text x="75.8598%" y="190.50">compiled_run..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_normalizer.py:67) (24 samples, 8.36%)</title><rect x="75.6098%" y="196" width="8.3624%" height="15" fill="rgb(213,28,5)"/><text x="75.8598%" y="206.50">_run (mlprod..</text></g><g><title>norm_l1 (mlprodict/onnxrt/ops_cpu/op_normalizer.py:47) (23 samples, 8.01%)</title><rect x="75.9582%" y="212" width="8.0139%" height="15" fill="rgb(215,77,49)"/><text x="76.2082%" y="222.50">norm_l1 (ml..</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:61) (66 samples, 23.00%)</title><rect x="61.3240%" y="52" width="22.9965%" height="15" fill="rgb(248,100,22)"/><text x="61.5740%" y="62.50">&lt;module&gt; (bench_LogisticRegression_l..</text></g><g><title>profile_pyrtc (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:60) (66 samples, 23.00%)</title><rect x="61.3240%" y="68" width="22.9965%" height="15" fill="rgb(208,67,9)"/><text x="61.5740%" y="78.50">profile_pyrtc (bench_LogisticRegress..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:37) (66 samples, 23.00%)</title><rect x="61.3240%" y="84" width="22.9965%" height="15" fill="rgb(219,133,21)"/><text x="61.5740%" y="94.50">setup_profile (bench_LogisticRegress..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:31) (66 samples, 23.00%)</title><rect x="61.3240%" y="100" width="22.9965%" height="15" fill="rgb(246,46,29)"/><text x="61.5740%" y="110.50">profile (bench_LogisticRegression_li..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (65 samples, 22.65%)</title><rect x="61.6725%" y="116" width="22.6481%" height="15" fill="rgb(246,185,52)"/><text x="61.9225%" y="126.50">time_predict (mlprodict/asv_benchmar..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (61 samples, 21.25%)</title><rect x="63.0662%" y="132" width="21.2544%" height="15" fill="rgb(252,136,11)"/><text x="63.3162%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (58 samples, 20.21%)</title><rect x="64.1115%" y="148" width="20.2091%" height="15" fill="rgb(219,138,53)"/><text x="64.3615%" y="158.50">run (mlprodict/onnxrt/onnx_infer..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (58 samples, 20.21%)</title><rect x="64.1115%" y="164" width="20.2091%" height="15" fill="rgb(211,51,23)"/><text x="64.3615%" y="174.50">_run_sequence_runtime_compiled (..</text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.39%)</title><rect x="92.6829%" y="324" width="1.3937%" height="15" fill="rgb(247,221,28)"/><text x="92.9329%" y="334.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.05%)</title><rect x="94.4251%" y="340" width="1.0453%" height="15" fill="rgb(251,222,45)"/><text x="94.6751%" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.05%)</title><rect x="94.4251%" y="356" width="1.0453%" height="15" fill="rgb(217,162,53)"/><text x="94.6751%" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.05%)</title><rect x="94.4251%" y="372" width="1.0453%" height="15" fill="rgb(229,93,14)"/><text x="94.6751%" y="382.50"></text></g><g><title>onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 1.74%)</title><rect x="94.0767%" y="324" width="1.7422%" height="15" fill="rgb(209,67,49)"/><text x="94.3267%" y="334.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 5.23%)</title><rect x="90.9408%" y="244" width="5.2265%" height="15" fill="rgb(213,87,29)"/><text x="91.1908%" y="254.50">onnxru..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 5.23%)</title><rect x="90.9408%" y="260" width="5.2265%" height="15" fill="rgb(205,151,52)"/><text x="91.1908%" y="270.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 4.18%)</title><rect x="91.9861%" y="276" width="4.1812%" height="15" fill="rgb(253,215,39)"/><text x="92.2361%" y="286.50">onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 4.18%)</title><rect x="91.9861%" y="292" width="4.1812%" height="15" fill="rgb(221,220,41)"/><text x="92.2361%" y="302.50">onnxr..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 4.18%)</title><rect x="91.9861%" y="308" width="4.1812%" height="15" fill="rgb(218,133,21)"/><text x="92.2361%" y="318.50">onnxr..</text></g><g><title>onnxruntime::python::CreateTensorMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 1.05%)</title><rect x="96.8641%" y="260" width="1.0453%" height="15" fill="rgb(221,193,43)"/><text x="97.1141%" y="270.50"></text></g><g><title>onnxruntime::python::CreateGenericMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 1.39%)</title><rect x="96.8641%" y="244" width="1.3937%" height="15" fill="rgb(240,128,52)"/><text x="97.1141%" y="254.50"></text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (38 samples, 13.24%)</title><rect x="86.0627%" y="164" width="13.2404%" height="15" fill="rgb(253,114,12)"/><text x="86.3127%" y="174.50">_run_whole_runtime (..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (37 samples, 12.89%)</title><rect x="86.4111%" y="180" width="12.8920%" height="15" fill="rgb(215,223,47)"/><text x="86.6611%" y="190.50">run (mlprodict/onnx..</text></g><g><title>run (onnxruntime/capi/session.py:142) (35 samples, 12.20%)</title><rect x="87.1080%" y="196" width="12.1951%" height="15" fill="rgb(248,225,23)"/><text x="87.3580%" y="206.50">run (onnxruntime/c..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (32 samples, 11.15%)</title><rect x="88.1533%" y="212" width="11.1498%" height="15" fill="rgb(250,108,0)"/><text x="88.4033%" y="222.50">pybind11::cpp_fu..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (31 samples, 10.80%)</title><rect x="88.5017%" y="228" width="10.8014%" height="15" fill="rgb(228,208,7)"/><text x="88.7517%" y="238.50">void pybind11::c..</text></g><g><title>all (287 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(244,45,10)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:68) (45 samples, 15.68%)</title><rect x="84.3206%" y="52" width="15.6794%" height="15" fill="rgb(207,125,25)"/><text x="84.5706%" y="62.50">&lt;module&gt; (bench_Logistic..</text></g><g><title>profile_ort (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:67) (45 samples, 15.68%)</title><rect x="84.3206%" y="68" width="15.6794%" height="15" fill="rgb(210,195,18)"/><text x="84.5706%" y="78.50">profile_ort (bench_Logis..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:37) (45 samples, 15.68%)</title><rect x="84.3206%" y="84" width="15.6794%" height="15" fill="rgb(249,80,12)"/><text x="84.5706%" y="94.50">setup_profile (bench_Log..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_onnx_1_4_12_float_nozipmap.py:31) (45 samples, 15.68%)</title><rect x="84.3206%" y="100" width="15.6794%" height="15" fill="rgb(221,65,9)"/><text x="84.5706%" y="110.50">profile (bench_LogisticR..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (43 samples, 14.98%)</title><rect x="85.0174%" y="116" width="14.9826%" height="15" fill="rgb(235,49,36)"/><text x="85.2674%" y="126.50">time_predict (mlprodict..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (42 samples, 14.63%)</title><rect x="85.3659%" y="132" width="14.6341%" height="15" fill="rgb(225,32,20)"/><text x="85.6159%" y="142.50">&lt;lambda&gt; (mlprodict/as..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (40 samples, 13.94%)</title><rect x="86.0627%" y="148" width="13.9373%" height="15" fill="rgb(215,141,46)"/><text x="86.3127%" y="158.50">run (mlprodict/onnxrt..</text></g></svg></svg>