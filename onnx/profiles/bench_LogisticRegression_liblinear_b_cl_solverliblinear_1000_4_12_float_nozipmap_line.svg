<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1494" onload="init(evt)" viewBox="0 0 1200 1494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1494" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="1477.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1477.00"> </text><svg id="frames" x="10" width="1180"><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (4 samples, 1.19%)</title><rect x="0.8955%" y="852" width="1.1940%" height="15" fill="rgb(227,0,7)"/><text x="1.1455%" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (4 samples, 1.19%)</title><rect x="0.8955%" y="868" width="1.1940%" height="15" fill="rgb(217,0,24)"/><text x="1.1455%" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (4 samples, 1.19%)</title><rect x="0.8955%" y="884" width="1.1940%" height="15" fill="rgb(221,193,54)"/><text x="1.1455%" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (4 samples, 1.19%)</title><rect x="0.8955%" y="900" width="1.1940%" height="15" fill="rgb(248,212,6)"/><text x="1.1455%" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2061) (4 samples, 1.19%)</title><rect x="0.8955%" y="916" width="1.1940%" height="15" fill="rgb(208,68,35)"/><text x="1.1455%" y="926.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py:2034) (4 samples, 1.19%)</title><rect x="0.8955%" y="932" width="1.1940%" height="15" fill="rgb(232,128,0)"/><text x="1.1455%" y="942.50"></text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_b_cl_solverliblinear.py:2) (6 samples, 1.79%)</title><rect x="0.8955%" y="148" width="1.7910%" height="15" fill="rgb(207,160,47)"/><text x="1.1455%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.79%)</title><rect x="0.8955%" y="164" width="1.7910%" height="15" fill="rgb(228,23,34)"/><text x="1.1455%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (6 samples, 1.79%)</title><rect x="0.8955%" y="180" width="1.7910%" height="15" fill="rgb(218,30,26)"/><text x="1.1455%" y="190.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.79%)</title><rect x="0.8955%" y="196" width="1.7910%" height="15" fill="rgb(220,122,19)"/><text x="1.1455%" y="206.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.79%)</title><rect x="0.8955%" y="212" width="1.7910%" height="15" fill="rgb(250,228,42)"/><text x="1.1455%" y="222.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.79%)</title><rect x="0.8955%" y="228" width="1.7910%" height="15" fill="rgb(240,193,28)"/><text x="1.1455%" y="238.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.79%)</title><rect x="0.8955%" y="244" width="1.7910%" height="15" fill="rgb(216,20,37)"/><text x="1.1455%" y="254.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.79%)</title><rect x="0.8955%" y="260" width="1.7910%" height="15" fill="rgb(206,188,39)"/><text x="1.1455%" y="270.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.79%)</title><rect x="0.8955%" y="276" width="1.7910%" height="15" fill="rgb(217,207,13)"/><text x="1.1455%" y="286.50">_..</text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (6 samples, 1.79%)</title><rect x="0.8955%" y="292" width="1.7910%" height="15" fill="rgb(231,73,38)"/><text x="1.1455%" y="302.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.79%)</title><rect x="0.8955%" y="308" width="1.7910%" height="15" fill="rgb(225,20,46)"/><text x="1.1455%" y="318.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.79%)</title><rect x="0.8955%" y="324" width="1.7910%" height="15" fill="rgb(210,31,41)"/><text x="1.1455%" y="334.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.79%)</title><rect x="0.8955%" y="340" width="1.7910%" height="15" fill="rgb(221,200,47)"/><text x="1.1455%" y="350.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.79%)</title><rect x="0.8955%" y="356" width="1.7910%" height="15" fill="rgb(226,26,5)"/><text x="1.1455%" y="366.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.79%)</title><rect x="0.8955%" y="372" width="1.7910%" height="15" fill="rgb(249,33,26)"/><text x="1.1455%" y="382.50">_..</text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (6 samples, 1.79%)</title><rect x="0.8955%" y="388" width="1.7910%" height="15" fill="rgb(235,183,28)"/><text x="1.1455%" y="398.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.79%)</title><rect x="0.8955%" y="404" width="1.7910%" height="15" fill="rgb(221,5,38)"/><text x="1.1455%" y="414.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.79%)</title><rect x="0.8955%" y="420" width="1.7910%" height="15" fill="rgb(247,18,42)"/><text x="1.1455%" y="430.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.79%)</title><rect x="0.8955%" y="436" width="1.7910%" height="15" fill="rgb(241,131,45)"/><text x="1.1455%" y="446.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.79%)</title><rect x="0.8955%" y="452" width="1.7910%" height="15" fill="rgb(249,31,29)"/><text x="1.1455%" y="462.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.79%)</title><rect x="0.8955%" y="468" width="1.7910%" height="15" fill="rgb(225,111,53)"/><text x="1.1455%" y="478.50">_..</text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (6 samples, 1.79%)</title><rect x="0.8955%" y="484" width="1.7910%" height="15" fill="rgb(238,160,17)"/><text x="1.1455%" y="494.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.79%)</title><rect x="0.8955%" y="500" width="1.7910%" height="15" fill="rgb(214,148,48)"/><text x="1.1455%" y="510.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.79%)</title><rect x="0.8955%" y="516" width="1.7910%" height="15" fill="rgb(232,36,49)"/><text x="1.1455%" y="526.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.79%)</title><rect x="0.8955%" y="532" width="1.7910%" height="15" fill="rgb(209,103,24)"/><text x="1.1455%" y="542.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.79%)</title><rect x="0.8955%" y="548" width="1.7910%" height="15" fill="rgb(229,88,8)"/><text x="1.1455%" y="558.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.79%)</title><rect x="0.8955%" y="564" width="1.7910%" height="15" fill="rgb(213,181,19)"/><text x="1.1455%" y="574.50">_..</text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (6 samples, 1.79%)</title><rect x="0.8955%" y="580" width="1.7910%" height="15" fill="rgb(254,191,54)"/><text x="1.1455%" y="590.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.79%)</title><rect x="0.8955%" y="596" width="1.7910%" height="15" fill="rgb(241,83,37)"/><text x="1.1455%" y="606.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (6 samples, 1.79%)</title><rect x="0.8955%" y="612" width="1.7910%" height="15" fill="rgb(233,36,39)"/><text x="1.1455%" y="622.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.79%)</title><rect x="0.8955%" y="628" width="1.7910%" height="15" fill="rgb(226,3,54)"/><text x="1.1455%" y="638.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.79%)</title><rect x="0.8955%" y="644" width="1.7910%" height="15" fill="rgb(245,192,40)"/><text x="1.1455%" y="654.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.79%)</title><rect x="0.8955%" y="660" width="1.7910%" height="15" fill="rgb(238,167,29)"/><text x="1.1455%" y="670.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.79%)</title><rect x="0.8955%" y="676" width="1.7910%" height="15" fill="rgb(232,182,51)"/><text x="1.1455%" y="686.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.79%)</title><rect x="0.8955%" y="692" width="1.7910%" height="15" fill="rgb(231,60,39)"/><text x="1.1455%" y="702.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.79%)</title><rect x="0.8955%" y="708" width="1.7910%" height="15" fill="rgb(208,69,12)"/><text x="1.1455%" y="718.50">_..</text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (6 samples, 1.79%)</title><rect x="0.8955%" y="724" width="1.7910%" height="15" fill="rgb(235,93,37)"/><text x="1.1455%" y="734.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.79%)</title><rect x="0.8955%" y="740" width="1.7910%" height="15" fill="rgb(213,116,39)"/><text x="1.1455%" y="750.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.79%)</title><rect x="0.8955%" y="756" width="1.7910%" height="15" fill="rgb(222,207,29)"/><text x="1.1455%" y="766.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.79%)</title><rect x="0.8955%" y="772" width="1.7910%" height="15" fill="rgb(206,96,30)"/><text x="1.1455%" y="782.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.79%)</title><rect x="0.8955%" y="788" width="1.7910%" height="15" fill="rgb(218,138,4)"/><text x="1.1455%" y="798.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.79%)</title><rect x="0.8955%" y="804" width="1.7910%" height="15" fill="rgb(250,191,14)"/><text x="1.1455%" y="814.50">_..</text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (6 samples, 1.79%)</title><rect x="0.8955%" y="820" width="1.7910%" height="15" fill="rgb(239,60,40)"/><text x="1.1455%" y="830.50">&lt;..</text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (6 samples, 1.79%)</title><rect x="0.8955%" y="836" width="1.7910%" height="15" fill="rgb(206,27,48)"/><text x="1.1455%" y="846.50">_..</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:4) (18 samples, 5.37%)</title><rect x="0.0000%" y="52" width="5.3731%" height="15" fill="rgb(225,35,8)"/><text x="0.2500%" y="62.50">&lt;module..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (18 samples, 5.37%)</title><rect x="0.0000%" y="68" width="5.3731%" height="15" fill="rgb(250,213,24)"/><text x="0.2500%" y="78.50">_find_a..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (18 samples, 5.37%)</title><rect x="0.0000%" y="84" width="5.3731%" height="15" fill="rgb(247,123,22)"/><text x="0.2500%" y="94.50">_find_a..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (18 samples, 5.37%)</title><rect x="0.0000%" y="100" width="5.3731%" height="15" fill="rgb(231,138,38)"/><text x="0.2500%" y="110.50">_load_u..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (18 samples, 5.37%)</title><rect x="0.0000%" y="116" width="5.3731%" height="15" fill="rgb(231,145,46)"/><text x="0.2500%" y="126.50">exec_mo..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (18 samples, 5.37%)</title><rect x="0.0000%" y="132" width="5.3731%" height="15" fill="rgb(251,118,11)"/><text x="0.2500%" y="142.50">_call_w..</text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_b_cl_solverliblinear.py:7) (7 samples, 2.09%)</title><rect x="3.2836%" y="148" width="2.0896%" height="15" fill="rgb(217,147,25)"/><text x="3.5336%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 2.09%)</title><rect x="3.2836%" y="164" width="2.0896%" height="15" fill="rgb(247,81,37)"/><text x="3.5336%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 2.09%)</title><rect x="3.2836%" y="180" width="2.0896%" height="15" fill="rgb(209,12,38)"/><text x="3.5336%" y="190.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 2.09%)</title><rect x="3.2836%" y="196" width="2.0896%" height="15" fill="rgb(227,1,9)"/><text x="3.5336%" y="206.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 2.09%)</title><rect x="3.2836%" y="212" width="2.0896%" height="15" fill="rgb(248,47,43)"/><text x="3.5336%" y="222.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 2.09%)</title><rect x="3.2836%" y="228" width="2.0896%" height="15" fill="rgb(221,10,30)"/><text x="3.5336%" y="238.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (6 samples, 1.79%)</title><rect x="3.5821%" y="244" width="1.7910%" height="15" fill="rgb(210,229,1)"/><text x="3.8321%" y="254.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.79%)</title><rect x="3.5821%" y="260" width="1.7910%" height="15" fill="rgb(222,148,37)"/><text x="3.8321%" y="270.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.79%)</title><rect x="3.5821%" y="276" width="1.7910%" height="15" fill="rgb(234,67,33)"/><text x="3.8321%" y="286.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.79%)</title><rect x="3.5821%" y="292" width="1.7910%" height="15" fill="rgb(247,98,35)"/><text x="3.8321%" y="302.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.79%)</title><rect x="3.5821%" y="308" width="1.7910%" height="15" fill="rgb(247,138,52)"/><text x="3.8321%" y="318.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.79%)</title><rect x="3.5821%" y="324" width="1.7910%" height="15" fill="rgb(213,79,30)"/><text x="3.8321%" y="334.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (6 samples, 1.79%)</title><rect x="3.5821%" y="340" width="1.7910%" height="15" fill="rgb(246,177,23)"/><text x="3.8321%" y="350.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.79%)</title><rect x="3.5821%" y="356" width="1.7910%" height="15" fill="rgb(230,62,27)"/><text x="3.8321%" y="366.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.79%)</title><rect x="3.5821%" y="372" width="1.7910%" height="15" fill="rgb(216,154,8)"/><text x="3.8321%" y="382.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.79%)</title><rect x="3.5821%" y="388" width="1.7910%" height="15" fill="rgb(244,35,45)"/><text x="3.8321%" y="398.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.79%)</title><rect x="3.5821%" y="404" width="1.7910%" height="15" fill="rgb(251,115,12)"/><text x="3.8321%" y="414.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.79%)</title><rect x="3.5821%" y="420" width="1.7910%" height="15" fill="rgb(240,54,50)"/><text x="3.8321%" y="430.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (5 samples, 1.49%)</title><rect x="3.8806%" y="436" width="1.4925%" height="15" fill="rgb(233,84,52)"/><text x="4.1306%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.49%)</title><rect x="3.8806%" y="452" width="1.4925%" height="15" fill="rgb(207,117,47)"/><text x="4.1306%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.49%)</title><rect x="3.8806%" y="468" width="1.4925%" height="15" fill="rgb(249,43,39)"/><text x="4.1306%" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.49%)</title><rect x="3.8806%" y="484" width="1.4925%" height="15" fill="rgb(209,38,44)"/><text x="4.1306%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.49%)</title><rect x="3.8806%" y="500" width="1.4925%" height="15" fill="rgb(236,212,23)"/><text x="4.1306%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.49%)</title><rect x="3.8806%" y="516" width="1.4925%" height="15" fill="rgb(242,79,21)"/><text x="4.1306%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.49%)</title><rect x="3.8806%" y="532" width="1.4925%" height="15" fill="rgb(211,96,35)"/><text x="4.1306%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.49%)</title><rect x="3.8806%" y="548" width="1.4925%" height="15" fill="rgb(253,215,40)"/><text x="4.1306%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.49%)</title><rect x="3.8806%" y="564" width="1.4925%" height="15" fill="rgb(211,81,21)"/><text x="4.1306%" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (5 samples, 1.49%)</title><rect x="3.8806%" y="580" width="1.4925%" height="15" fill="rgb(208,190,38)"/><text x="4.1306%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.49%)</title><rect x="3.8806%" y="596" width="1.4925%" height="15" fill="rgb(235,213,38)"/><text x="4.1306%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.49%)</title><rect x="3.8806%" y="612" width="1.4925%" height="15" fill="rgb(237,122,38)"/><text x="4.1306%" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.49%)</title><rect x="3.8806%" y="628" width="1.4925%" height="15" fill="rgb(244,218,35)"/><text x="4.1306%" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.49%)</title><rect x="3.8806%" y="644" width="1.4925%" height="15" fill="rgb(240,68,47)"/><text x="4.1306%" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.49%)</title><rect x="3.8806%" y="660" width="1.4925%" height="15" fill="rgb(210,16,53)"/><text x="4.1306%" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (5 samples, 1.49%)</title><rect x="3.8806%" y="676" width="1.4925%" height="15" fill="rgb(235,124,12)"/><text x="4.1306%" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.49%)</title><rect x="3.8806%" y="692" width="1.4925%" height="15" fill="rgb(224,169,11)"/><text x="4.1306%" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.49%)</title><rect x="3.8806%" y="708" width="1.4925%" height="15" fill="rgb(250,166,2)"/><text x="4.1306%" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.49%)</title><rect x="3.8806%" y="724" width="1.4925%" height="15" fill="rgb(242,216,29)"/><text x="4.1306%" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.49%)</title><rect x="3.8806%" y="740" width="1.4925%" height="15" fill="rgb(230,116,27)"/><text x="4.1306%" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.49%)</title><rect x="3.8806%" y="756" width="1.4925%" height="15" fill="rgb(228,99,48)"/><text x="4.1306%" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (5 samples, 1.49%)</title><rect x="3.8806%" y="772" width="1.4925%" height="15" fill="rgb(253,11,6)"/><text x="4.1306%" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.49%)</title><rect x="3.8806%" y="788" width="1.4925%" height="15" fill="rgb(247,143,39)"/><text x="4.1306%" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.49%)</title><rect x="3.8806%" y="804" width="1.4925%" height="15" fill="rgb(236,97,10)"/><text x="4.1306%" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.49%)</title><rect x="3.8806%" y="820" width="1.4925%" height="15" fill="rgb(233,208,19)"/><text x="4.1306%" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.49%)</title><rect x="3.8806%" y="836" width="1.4925%" height="15" fill="rgb(216,164,2)"/><text x="4.1306%" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.49%)</title><rect x="3.8806%" y="852" width="1.4925%" height="15" fill="rgb(220,129,5)"/><text x="4.1306%" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (5 samples, 1.49%)</title><rect x="3.8806%" y="868" width="1.4925%" height="15" fill="rgb(242,17,10)"/><text x="4.1306%" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.49%)</title><rect x="3.8806%" y="884" width="1.4925%" height="15" fill="rgb(242,107,0)"/><text x="4.1306%" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 1.49%)</title><rect x="3.8806%" y="900" width="1.4925%" height="15" fill="rgb(251,28,31)"/><text x="4.1306%" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.49%)</title><rect x="3.8806%" y="916" width="1.4925%" height="15" fill="rgb(233,223,10)"/><text x="4.1306%" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.49%)</title><rect x="3.8806%" y="932" width="1.4925%" height="15" fill="rgb(215,21,27)"/><text x="4.1306%" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.49%)</title><rect x="3.8806%" y="948" width="1.4925%" height="15" fill="rgb(232,23,21)"/><text x="4.1306%" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.49%)</title><rect x="3.8806%" y="964" width="1.4925%" height="15" fill="rgb(244,5,23)"/><text x="4.1306%" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.49%)</title><rect x="3.8806%" y="980" width="1.4925%" height="15" fill="rgb(226,81,46)"/><text x="4.1306%" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.49%)</title><rect x="3.8806%" y="996" width="1.4925%" height="15" fill="rgb(247,70,30)"/><text x="4.1306%" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (5 samples, 1.49%)</title><rect x="3.8806%" y="1012" width="1.4925%" height="15" fill="rgb(212,68,19)"/><text x="4.1306%" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.49%)</title><rect x="3.8806%" y="1028" width="1.4925%" height="15" fill="rgb(240,187,13)"/><text x="4.1306%" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.49%)</title><rect x="3.8806%" y="1044" width="1.4925%" height="15" fill="rgb(223,113,26)"/><text x="4.1306%" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.49%)</title><rect x="3.8806%" y="1060" width="1.4925%" height="15" fill="rgb(206,192,2)"/><text x="4.1306%" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.49%)</title><rect x="3.8806%" y="1076" width="1.4925%" height="15" fill="rgb(241,108,4)"/><text x="4.1306%" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.49%)</title><rect x="3.8806%" y="1092" width="1.4925%" height="15" fill="rgb(247,173,49)"/><text x="4.1306%" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (4 samples, 1.19%)</title><rect x="4.1791%" y="1108" width="1.1940%" height="15" fill="rgb(224,114,35)"/><text x="4.4291%" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 1.19%)</title><rect x="4.1791%" y="1124" width="1.1940%" height="15" fill="rgb(245,159,27)"/><text x="4.4291%" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.19%)</title><rect x="4.1791%" y="1140" width="1.1940%" height="15" fill="rgb(245,172,44)"/><text x="4.4291%" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.19%)</title><rect x="4.1791%" y="1156" width="1.1940%" height="15" fill="rgb(236,23,11)"/><text x="4.4291%" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.19%)</title><rect x="4.1791%" y="1172" width="1.1940%" height="15" fill="rgb(205,117,38)"/><text x="4.4291%" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.19%)</title><rect x="4.1791%" y="1188" width="1.1940%" height="15" fill="rgb(237,72,25)"/><text x="4.4291%" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.19%)</title><rect x="4.1791%" y="1204" width="1.1940%" height="15" fill="rgb(244,70,9)"/><text x="4.4291%" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.19%)</title><rect x="4.1791%" y="1220" width="1.1940%" height="15" fill="rgb(217,125,39)"/><text x="4.4291%" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (4 samples, 1.19%)</title><rect x="4.1791%" y="1236" width="1.1940%" height="15" fill="rgb(235,36,10)"/><text x="4.4291%" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 1.19%)</title><rect x="4.1791%" y="1252" width="1.1940%" height="15" fill="rgb(251,123,47)"/><text x="4.4291%" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.19%)</title><rect x="4.1791%" y="1268" width="1.1940%" height="15" fill="rgb(221,13,13)"/><text x="4.4291%" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.19%)</title><rect x="4.1791%" y="1284" width="1.1940%" height="15" fill="rgb(238,131,9)"/><text x="4.4291%" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.19%)</title><rect x="4.1791%" y="1300" width="1.1940%" height="15" fill="rgb(211,50,8)"/><text x="4.4291%" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.19%)</title><rect x="4.1791%" y="1316" width="1.1940%" height="15" fill="rgb(245,182,24)"/><text x="4.4291%" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.19%)</title><rect x="4.1791%" y="1332" width="1.1940%" height="15" fill="rgb(242,14,37)"/><text x="4.4291%" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.19%)</title><rect x="4.1791%" y="1348" width="1.1940%" height="15" fill="rgb(246,228,12)"/><text x="4.4291%" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (4 samples, 1.19%)</title><rect x="4.1791%" y="1364" width="1.1940%" height="15" fill="rgb(213,55,15)"/><text x="4.4291%" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 1.19%)</title><rect x="4.1791%" y="1380" width="1.1940%" height="15" fill="rgb(209,9,3)"/><text x="4.4291%" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 1.19%)</title><rect x="4.1791%" y="1396" width="1.1940%" height="15" fill="rgb(230,59,30)"/><text x="4.4291%" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 1.19%)</title><rect x="4.1791%" y="1412" width="1.1940%" height="15" fill="rgb(209,121,21)"/><text x="4.4291%" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 1.19%)</title><rect x="4.1791%" y="1428" width="1.1940%" height="15" fill="rgb(220,109,13)"/><text x="4.4291%" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 1.19%)</title><rect x="4.1791%" y="1444" width="1.1940%" height="15" fill="rgb(232,18,1)"/><text x="4.4291%" y="1454.50"></text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py:1643) (5 samples, 1.49%)</title><rect x="6.2687%" y="148" width="1.4925%" height="15" fill="rgb(215,41,42)"/><text x="6.5187%" y="158.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (5 samples, 1.49%)</title><rect x="6.2687%" y="164" width="1.4925%" height="15" fill="rgb(224,123,36)"/><text x="6.5187%" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (4 samples, 1.19%)</title><rect x="6.5672%" y="180" width="1.1940%" height="15" fill="rgb(240,125,3)"/><text x="6.8172%" y="190.50"></text></g><g><title>decision_function (sklearn/linear_model/_base.py:268) (21 samples, 6.27%)</title><rect x="9.2537%" y="180" width="6.2687%" height="15" fill="rgb(205,98,50)"/><text x="9.5037%" y="190.50">decision..</text></g><g><title>check_array (sklearn/utils/validation.py:565) (4 samples, 1.19%)</title><rect x="14.3284%" y="196" width="1.1940%" height="15" fill="rgb(205,185,37)"/><text x="14.5784%" y="206.50"></text></g><g><title>array_add (number.c:330) (5 samples, 1.49%)</title><rect x="16.7164%" y="196" width="1.4925%" height="15" fill="rgb(238,207,15)"/><text x="16.9664%" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 1.49%)</title><rect x="16.7164%" y="212" width="1.4925%" height="15" fill="rgb(213,199,42)"/><text x="16.9664%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 1.49%)</title><rect x="16.7164%" y="228" width="1.4925%" height="15" fill="rgb(235,201,11)"/><text x="16.9664%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 1.49%)</title><rect x="16.7164%" y="244" width="1.4925%" height="15" fill="rgb(207,46,11)"/><text x="16.9664%" y="254.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 1.49%)</title><rect x="19.1045%" y="212" width="1.4925%" height="15" fill="rgb(241,35,35)"/><text x="19.3545%" y="222.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2871) (5 samples, 1.49%)</title><rect x="21.1940%" y="244" width="1.4925%" height="15" fill="rgb(243,32,47)"/><text x="21.4440%" y="254.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (16 samples, 4.78%)</title><rect x="18.5075%" y="196" width="4.7761%" height="15" fill="rgb(247,202,23)"/><text x="18.7575%" y="206.50">safe_s..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 2.39%)</title><rect x="20.8955%" y="212" width="2.3881%" height="15" fill="rgb(219,102,11)"/><text x="21.1455%" y="222.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (8 samples, 2.39%)</title><rect x="20.8955%" y="228" width="2.3881%" height="15" fill="rgb(243,110,44)"/><text x="21.1455%" y="238.50">Py..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:307) (52 samples, 15.52%)</title><rect x="8.0597%" y="164" width="15.5224%" height="15" fill="rgb(222,74,54)"/><text x="8.3097%" y="174.50">_predict_proba_lr (sklea..</text></g><g><title>decision_function (sklearn/linear_model/_base.py:276) (23 samples, 6.87%)</title><rect x="16.7164%" y="180" width="6.8657%" height="15" fill="rgb(216,99,12)"/><text x="16.9664%" y="190.50">decision_..</text></g><g><title>0x7f28b6ed2265 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (10 samples, 2.99%)</title><rect x="26.2687%" y="260" width="2.9851%" height="15" fill="rgb(226,22,26)"/><text x="26.5187%" y="270.50">0x7..</text></g><g><title>exp (libm-2.29.so) (7 samples, 2.09%)</title><rect x="27.1642%" y="276" width="2.0896%" height="15" fill="rgb(217,163,10)"/><text x="27.4142%" y="286.50">e..</text></g><g><title>0x7f28b6eb19dd (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (14 samples, 4.18%)</title><rect x="25.6716%" y="244" width="4.1791%" height="15" fill="rgb(213,25,53)"/><text x="25.9216%" y="254.50">0x7f2..</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:308) (23 samples, 6.87%)</title><rect x="23.5821%" y="164" width="6.8657%" height="15" fill="rgb(252,105,26)"/><text x="23.8321%" y="174.50">_predict_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (19 samples, 5.67%)</title><rect x="24.7761%" y="180" width="5.6716%" height="15" fill="rgb(220,39,43)"/><text x="25.0261%" y="190.50">ufunc_g..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (18 samples, 5.37%)</title><rect x="25.0746%" y="196" width="5.3731%" height="15" fill="rgb(229,68,48)"/><text x="25.3246%" y="206.50">PyUFunc..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (16 samples, 4.78%)</title><rect x="25.6716%" y="212" width="4.7761%" height="15" fill="rgb(252,8,32)"/><text x="25.9216%" y="222.50">execut..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (16 samples, 4.78%)</title><rect x="25.6716%" y="228" width="4.7761%" height="15" fill="rgb(223,20,43)"/><text x="25.9216%" y="238.50">trivia..</text></g><g><title>DOUBLE_add (loops.c.src:1747) (6 samples, 1.79%)</title><rect x="35.8209%" y="308" width="1.7910%" height="15" fill="rgb(229,81,49)"/><text x="36.0709%" y="318.50">D..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (13 samples, 3.88%)</title><rect x="34.3284%" y="276" width="3.8806%" height="15" fill="rgb(236,28,36)"/><text x="34.5784%" y="286.50">PyUF..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (11 samples, 3.28%)</title><rect x="34.9254%" y="292" width="3.2836%" height="15" fill="rgb(249,185,26)"/><text x="35.1754%" y="302.50">red..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (21 samples, 6.27%)</title><rect x="32.5373%" y="244" width="6.2687%" height="15" fill="rgb(249,174,33)"/><text x="32.7873%" y="254.50">PyUFunc_..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (20 samples, 5.97%)</title><rect x="32.8358%" y="260" width="5.9701%" height="15" fill="rgb(233,201,37)"/><text x="33.0858%" y="270.50">PyUFunc_..</text></g><g><title>array_sum (methods.c:2215) (27 samples, 8.06%)</title><rect x="31.0448%" y="180" width="8.0597%" height="15" fill="rgb(221,78,26)"/><text x="31.2948%" y="190.50">array_sum (..</text></g><g><title>forward_ndarray_method (methods.c:108) (27 samples, 8.06%)</title><rect x="31.0448%" y="196" width="8.0597%" height="15" fill="rgb(250,127,30)"/><text x="31.2948%" y="206.50">forward_nda..</text></g><g><title>_sum (numpy/core/_methods.py:38) (25 samples, 7.46%)</title><rect x="31.6418%" y="212" width="7.4627%" height="15" fill="rgb(230,49,44)"/><text x="31.8918%" y="222.50">_sum (nump..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (23 samples, 6.87%)</title><rect x="32.2388%" y="228" width="6.8657%" height="15" fill="rgb(229,67,23)"/><text x="32.4888%" y="238.50">ufunc_red..</text></g><g><title>iterator_loop (ufunc_object.c:1561) (5 samples, 1.49%)</title><rect x="40.0000%" y="228" width="1.4925%" height="15" fill="rgb(249,83,47)"/><text x="40.2500%" y="238.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (4 samples, 1.19%)</title><rect x="40.2985%" y="244" width="1.1940%" height="15" fill="rgb(215,43,3)"/><text x="40.5485%" y="254.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (4 samples, 1.19%)</title><rect x="40.2985%" y="260" width="1.1940%" height="15" fill="rgb(238,154,13)"/><text x="40.5485%" y="270.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:54) (127 samples, 37.91%)</title><rect x="5.6716%" y="52" width="37.9104%" height="15" fill="rgb(219,56,2)"/><text x="5.9216%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblin..</text></g><g><title>profile_skl (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:53) (127 samples, 37.91%)</title><rect x="5.6716%" y="68" width="37.9104%" height="15" fill="rgb(233,0,4)"/><text x="5.9216%" y="78.50">profile_skl (bench_LogisticRegression_liblinear_b_cl_solverlib..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:37) (127 samples, 37.91%)</title><rect x="5.6716%" y="84" width="37.9104%" height="15" fill="rgb(235,30,7)"/><text x="5.9216%" y="94.50">setup_profile (bench_LogisticRegression_liblinear_b_cl_solverl..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:31) (127 samples, 37.91%)</title><rect x="5.6716%" y="100" width="37.9104%" height="15" fill="rgb(250,79,13)"/><text x="5.9216%" y="110.50">profile (bench_LogisticRegression_liblinear_b_cl_solverlibline..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (127 samples, 37.91%)</title><rect x="5.6716%" y="116" width="37.9104%" height="15" fill="rgb(211,146,34)"/><text x="5.9216%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229) (126 samples, 37.61%)</title><rect x="5.9701%" y="132" width="37.6119%" height="15" fill="rgb(228,22,38)"/><text x="6.2201%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229)</text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py:1649) (119 samples, 35.52%)</title><rect x="8.0597%" y="148" width="35.5224%" height="15" fill="rgb(235,168,5)"/><text x="8.3097%" y="158.50">predict_proba (sklearn/linear_model/_logistic.py:1649)</text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py:313) (44 samples, 13.13%)</title><rect x="30.4478%" y="164" width="13.1343%" height="15" fill="rgb(221,155,16)"/><text x="30.6978%" y="174.50">_predict_proba_lr (s..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (15 samples, 4.48%)</title><rect x="39.1045%" y="180" width="4.4776%" height="15" fill="rgb(215,215,53)"/><text x="39.3545%" y="190.50">ufunc..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (13 samples, 3.88%)</title><rect x="39.7015%" y="196" width="3.8806%" height="15" fill="rgb(223,4,10)"/><text x="39.9515%" y="206.50">PyUF..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (12 samples, 3.58%)</title><rect x="40.0000%" y="212" width="3.5821%" height="15" fill="rgb(234,103,6)"/><text x="40.2500%" y="222.50">exec..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (7 samples, 2.09%)</title><rect x="41.4925%" y="228" width="2.0896%" height="15" fill="rgb(227,97,0)"/><text x="41.7425%" y="238.50">i..</text></g><g><title>DOUBLE_divide (loops.c.src:1755) (7 samples, 2.09%)</title><rect x="41.4925%" y="244" width="2.0896%" height="15" fill="rgb(234,150,53)"/><text x="41.7425%" y="254.50">D..</text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src:250) (7 samples, 2.09%)</title><rect x="41.4925%" y="260" width="2.0896%" height="15" fill="rgb(228,201,54)"/><text x="41.7425%" y="270.50">r..</text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:604) (6 samples, 1.79%)</title><rect x="41.7910%" y="276" width="1.7910%" height="15" fill="rgb(222,22,37)"/><text x="42.0410%" y="286.50">s..</text></g><g><title>_mm_store_pd (emmintrin.h:147) (6 samples, 1.79%)</title><rect x="41.7910%" y="292" width="1.7910%" height="15" fill="rgb(237,53,32)"/><text x="42.0410%" y="302.50">_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:39) (20 samples, 5.97%)</title><rect x="44.4776%" y="196" width="5.9701%" height="15" fill="rgb(233,25,53)"/><text x="44.7276%" y="206.50">_run (ml..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (20 samples, 5.97%)</title><rect x="44.4776%" y="212" width="5.9701%" height="15" fill="rgb(210,40,34)"/><text x="44.7276%" y="222.50">numpy_do..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (17 samples, 5.07%)</title><rect x="45.3731%" y="228" width="5.0746%" height="15" fill="rgb(241,220,44)"/><text x="45.6231%" y="238.50">dot (&lt;..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (12 samples, 3.58%)</title><rect x="46.8657%" y="244" width="3.5821%" height="15" fill="rgb(235,28,35)"/><text x="47.1157%" y="254.50">sgem..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:41) (7 samples, 2.09%)</title><rect x="50.4478%" y="196" width="2.0896%" height="15" fill="rgb(210,56,17)"/><text x="50.6978%" y="206.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 1.79%)</title><rect x="50.7463%" y="212" width="1.7910%" height="15" fill="rgb(224,130,29)"/><text x="50.9963%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 1.79%)</title><rect x="50.7463%" y="228" width="1.7910%" height="15" fill="rgb(235,212,8)"/><text x="50.9963%" y="238.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (6 samples, 1.79%)</title><rect x="50.7463%" y="244" width="1.7910%" height="15" fill="rgb(223,33,50)"/><text x="50.9963%" y="254.50">e..</text></g><g><title>0x7f28b6ed2214 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (14 samples, 4.18%)</title><rect x="54.0299%" y="292" width="4.1791%" height="15" fill="rgb(219,149,13)"/><text x="54.2799%" y="302.50">0x7f2..</text></g><g><title>expf (libm-2.29.so) (12 samples, 3.58%)</title><rect x="54.6269%" y="308" width="3.5821%" height="15" fill="rgb(250,156,29)"/><text x="54.8769%" y="318.50">expf..</text></g><g><title>0x7f28b6eb033d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (20 samples, 5.97%)</title><rect x="54.0299%" y="276" width="5.9701%" height="15" fill="rgb(216,193,19)"/><text x="54.2799%" y="286.50">0x7f28b6..</text></g><g><title>0x7f28b6ed2228 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (6 samples, 1.79%)</title><rect x="58.2090%" y="292" width="1.7910%" height="15" fill="rgb(216,135,14)"/><text x="58.4590%" y="302.50">0..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:46) (27 samples, 8.06%)</title><rect x="52.5373%" y="196" width="8.0597%" height="15" fill="rgb(241,47,5)"/><text x="52.7873%" y="206.50">_run (mlpro..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (24 samples, 7.16%)</title><rect x="53.4328%" y="212" width="7.1642%" height="15" fill="rgb(233,42,35)"/><text x="53.6828%" y="222.50">ufunc_gene..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (23 samples, 6.87%)</title><rect x="53.7313%" y="228" width="6.8657%" height="15" fill="rgb(231,13,6)"/><text x="53.9813%" y="238.50">PyUFunc_G..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (23 samples, 6.87%)</title><rect x="53.7313%" y="244" width="6.8657%" height="15" fill="rgb(207,181,40)"/><text x="53.9813%" y="254.50">execute_l..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (23 samples, 6.87%)</title><rect x="53.7313%" y="260" width="6.8657%" height="15" fill="rgb(254,173,49)"/><text x="53.9813%" y="270.50">trivial_t..</text></g><g><title>compiled_run (&lt;string&gt;:4) (61 samples, 18.21%)</title><rect x="44.4776%" y="180" width="18.2090%" height="15" fill="rgb(221,1,38)"/><text x="44.7276%" y="190.50">compiled_run (&lt;string&gt;:4)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py:60) (7 samples, 2.09%)</title><rect x="60.5970%" y="196" width="2.0896%" height="15" fill="rgb(206,124,46)"/><text x="60.8470%" y="206.50">_..</text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (6 samples, 1.79%)</title><rect x="60.8955%" y="212" width="1.7910%" height="15" fill="rgb(249,21,11)"/><text x="61.1455%" y="222.50">a..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 1.79%)</title><rect x="60.8955%" y="228" width="1.7910%" height="15" fill="rgb(222,201,40)"/><text x="61.1455%" y="238.50">a..</text></g><g><title>argmax (numpy/core/fromnumeric.py:1153) (5 samples, 1.49%)</title><rect x="61.1940%" y="244" width="1.4925%" height="15" fill="rgb(235,61,29)"/><text x="61.4440%" y="254.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (5 samples, 1.49%)</title><rect x="64.7761%" y="356" width="1.4925%" height="15" fill="rgb(219,207,3)"/><text x="65.0261%" y="366.50"></text></g><g><title>array_sum (methods.c:2215) (15 samples, 4.48%)</title><rect x="62.9851%" y="228" width="4.4776%" height="15" fill="rgb(222,56,46)"/><text x="63.2351%" y="238.50">array..</text></g><g><title>forward_ndarray_method (methods.c:108) (15 samples, 4.48%)</title><rect x="62.9851%" y="244" width="4.4776%" height="15" fill="rgb(239,76,54)"/><text x="63.2351%" y="254.50">forwa..</text></g><g><title>_sum (numpy/core/_methods.py:38) (15 samples, 4.48%)</title><rect x="62.9851%" y="260" width="4.4776%" height="15" fill="rgb(231,124,27)"/><text x="63.2351%" y="270.50">_sum ..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (15 samples, 4.48%)</title><rect x="62.9851%" y="276" width="4.4776%" height="15" fill="rgb(249,195,6)"/><text x="63.2351%" y="286.50">ufunc..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (14 samples, 4.18%)</title><rect x="63.2836%" y="292" width="4.1791%" height="15" fill="rgb(237,174,47)"/><text x="63.5336%" y="302.50">PyUFu..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (13 samples, 3.88%)</title><rect x="63.5821%" y="308" width="3.8806%" height="15" fill="rgb(206,201,31)"/><text x="63.8321%" y="318.50">PyUF..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (12 samples, 3.58%)</title><rect x="63.8806%" y="324" width="3.5821%" height="15" fill="rgb(231,57,52)"/><text x="64.1306%" y="334.50">PyUF..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (9 samples, 2.69%)</title><rect x="64.7761%" y="340" width="2.6866%" height="15" fill="rgb(248,177,22)"/><text x="65.0261%" y="350.50">re..</text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:61) (89 samples, 26.57%)</title><rect x="43.5821%" y="52" width="26.5672%" height="15" fill="rgb(215,211,37)"/><text x="43.8321%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinea..</text></g><g><title>profile_pyrtc (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:60) (89 samples, 26.57%)</title><rect x="43.5821%" y="68" width="26.5672%" height="15" fill="rgb(241,128,51)"/><text x="43.8321%" y="78.50">profile_pyrtc (bench_LogisticRegression_lib..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:37) (89 samples, 26.57%)</title><rect x="43.5821%" y="84" width="26.5672%" height="15" fill="rgb(227,165,31)"/><text x="43.8321%" y="94.50">setup_profile (bench_LogisticRegression_lib..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:31) (89 samples, 26.57%)</title><rect x="43.5821%" y="100" width="26.5672%" height="15" fill="rgb(228,167,24)"/><text x="43.8321%" y="110.50">profile (bench_LogisticRegression_liblinear..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (89 samples, 26.57%)</title><rect x="43.5821%" y="116" width="26.5672%" height="15" fill="rgb(228,143,12)"/><text x="43.8321%" y="126.50">time_predict (mlprodict/asv_benchmark/commo..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (89 samples, 26.57%)</title><rect x="43.5821%" y="132" width="26.5672%" height="15" fill="rgb(249,149,8)"/><text x="43.8321%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_as..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (88 samples, 26.27%)</title><rect x="43.8806%" y="148" width="26.2687%" height="15" fill="rgb(243,35,44)"/><text x="44.1306%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:44..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (87 samples, 25.97%)</title><rect x="44.1791%" y="164" width="25.9701%" height="15" fill="rgb(246,89,9)"/><text x="44.4291%" y="174.50">_run_sequence_runtime_compiled (mlprodict/..</text></g><g><title>compiled_run (&lt;string&gt;:5) (25 samples, 7.46%)</title><rect x="62.6866%" y="180" width="7.4627%" height="15" fill="rgb(233,213,13)"/><text x="62.9366%" y="190.50">compiled_r..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_normalizer.py:67) (25 samples, 7.46%)</title><rect x="62.6866%" y="196" width="7.4627%" height="15" fill="rgb(233,141,41)"/><text x="62.9366%" y="206.50">_run (mlpr..</text></g><g><title>norm_l1 (mlprodict/onnxrt/ops_cpu/op_normalizer.py:47) (25 samples, 7.46%)</title><rect x="62.6866%" y="212" width="7.4627%" height="15" fill="rgb(239,167,4)"/><text x="62.9366%" y="222.50">norm_l1 (m..</text></g><g><title>array_true_divide (number.c:826) (9 samples, 2.69%)</title><rect x="67.4627%" y="228" width="2.6866%" height="15" fill="rgb(209,217,16)"/><text x="67.7127%" y="238.50">ar..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (9 samples, 2.69%)</title><rect x="67.4627%" y="244" width="2.6866%" height="15" fill="rgb(219,88,35)"/><text x="67.7127%" y="254.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (9 samples, 2.69%)</title><rect x="67.4627%" y="260" width="2.6866%" height="15" fill="rgb(220,193,23)"/><text x="67.7127%" y="270.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (9 samples, 2.69%)</title><rect x="67.4627%" y="276" width="2.6866%" height="15" fill="rgb(230,90,52)"/><text x="67.7127%" y="286.50">ex..</text></g><g><title>0x7f28cbbe8db3 (libc-2.29.so) (4 samples, 1.19%)</title><rect x="86.2687%" y="356" width="1.1940%" height="15" fill="rgb(252,106,19)"/><text x="86.5187%" y="366.50"></text></g><g><title>0x7f28cbd47e9e (libm-2.29.so) (4 samples, 1.19%)</title><rect x="91.6418%" y="356" width="1.1940%" height="15" fill="rgb(206,74,20)"/><text x="91.8918%" y="366.50"></text></g><g><title>onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (70 samples, 20.90%)</title><rect x="73.4328%" y="324" width="20.8955%" height="15" fill="rgb(230,138,44)"/><text x="73.6828%" y="334.50">onnxruntime::ml::LinearClassifier..</text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; [clone .constprop.182] (onnxruntime/capi/onnxruntime_pybind11_state.so) (42 samples, 12.54%)</title><rect x="81.7910%" y="340" width="12.5373%" height="15" fill="rgb(235,182,43)"/><text x="82.0410%" y="350.50">onnxruntime::ml::wr..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (86 samples, 25.67%)</title><rect x="71.9403%" y="244" width="25.6716%" height="15" fill="rgb(242,16,51)"/><text x="72.1903%" y="254.50">onnxruntime::InferenceSession::Run (onnxr..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (86 samples, 25.67%)</title><rect x="71.9403%" y="260" width="25.6716%" height="15" fill="rgb(248,9,4)"/><text x="72.1903%" y="270.50">onnxruntime::InferenceSession::Run (onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (82 samples, 24.48%)</title><rect x="73.1343%" y="276" width="24.4776%" height="15" fill="rgb(210,31,22)"/><text x="73.3843%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (82 samples, 24.48%)</title><rect x="73.1343%" y="292" width="24.4776%" height="15" fill="rgb(239,54,39)"/><text x="73.3843%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (o..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (82 samples, 24.48%)</title><rect x="73.1343%" y="308" width="24.4776%" height="15" fill="rgb(230,99,41)"/><text x="73.3843%" y="318.50">onnxruntime::SequentialExecutor::Execut..</text></g><g><title>onnxruntime::ml::Normalizer::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 3.28%)</title><rect x="94.3284%" y="324" width="3.2836%" height="15" fill="rgb(253,106,12)"/><text x="94.5784%" y="334.50">onn..</text></g><g><title>onnxruntime::ml::Normalizer::Normalize&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 3.28%)</title><rect x="94.3284%" y="340" width="3.2836%" height="15" fill="rgb(213,46,41)"/><text x="94.5784%" y="350.50">onn..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (95 samples, 28.36%)</title><rect x="70.4478%" y="164" width="28.3582%" height="15" fill="rgb(215,133,35)"/><text x="70.6978%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_infe..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (95 samples, 28.36%)</title><rect x="70.4478%" y="180" width="28.3582%" height="15" fill="rgb(213,28,5)"/><text x="70.6978%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:140) (91 samples, 27.16%)</title><rect x="71.6418%" y="196" width="27.1642%" height="15" fill="rgb(215,77,49)"/><text x="71.8918%" y="206.50">run (onnxruntime/capi/session.py:140)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (90 samples, 26.87%)</title><rect x="71.9403%" y="212" width="26.8657%" height="15" fill="rgb(248,100,22)"/><text x="72.1903%" y="222.50">pybind11::cpp_function::dispatcher (onnxrun..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (90 samples, 26.87%)</title><rect x="71.9403%" y="228" width="26.8657%" height="15" fill="rgb(208,67,9)"/><text x="72.1903%" y="238.50">void pybind11::cpp_function::initialize&lt;onn..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (98 samples, 29.25%)</title><rect x="70.1493%" y="132" width="29.2537%" height="15" fill="rgb(219,133,21)"/><text x="70.3993%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_sk..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (97 samples, 28.96%)</title><rect x="70.4478%" y="148" width="28.9552%" height="15" fill="rgb(246,46,29)"/><text x="70.6978%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>all (335 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(246,185,52)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:68) (100 samples, 29.85%)</title><rect x="70.1493%" y="52" width="29.8507%" height="15" fill="rgb(252,136,11)"/><text x="70.3993%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_b_c..</text></g><g><title>profile_ort (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:67) (100 samples, 29.85%)</title><rect x="70.1493%" y="68" width="29.8507%" height="15" fill="rgb(219,138,53)"/><text x="70.3993%" y="78.50">profile_ort (bench_LogisticRegression_liblinear_..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:37) (100 samples, 29.85%)</title><rect x="70.1493%" y="84" width="29.8507%" height="15" fill="rgb(211,51,23)"/><text x="70.3993%" y="94.50">setup_profile (bench_LogisticRegression_liblinea..</text></g><g><title>profile (bench_LogisticRegression_liblinear_b_cl_solverliblinear_1000_4_12_float_nozipmap.py:31) (100 samples, 29.85%)</title><rect x="70.1493%" y="100" width="29.8507%" height="15" fill="rgb(247,221,28)"/><text x="70.3993%" y="110.50">profile (bench_LogisticRegression_liblinear_b_cl..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (100 samples, 29.85%)</title><rect x="70.1493%" y="116" width="29.8507%" height="15" fill="rgb(251,222,45)"/><text x="70.3993%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv..</text></g></svg></svg>