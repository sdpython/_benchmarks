<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2038" onload="init(evt)" viewBox="0 0 1200 2038" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="2038" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="2021.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="2021.00"> </text><g id="frames"><g><title>_fit_stochastic (sklearn/neural_network/_multilayer_perceptron.py:521) (1 samples, 0.15%)</title><rect x="10" y="148" width="1" height="15" fill="rgb(212,207,33)"/><text x="13.00" y="158.50"></text></g><g><title>_backprop (sklearn/neural_network/_multilayer_perceptron.py:250) (1 samples, 0.15%)</title><rect x="10" y="164" width="1" height="15" fill="rgb(250,24,34)"/><text x="13.00" y="174.50"></text></g><g><title>inplace_relu_derivative (sklearn/neural_network/_base.py:170) (1 samples, 0.15%)</title><rect x="10" y="180" width="1" height="15" fill="rgb(222,89,10)"/><text x="13.00" y="190.50"></text></g><g><title>array_assign_subscript (mapping.c:1859) (1 samples, 0.15%)</title><rect x="10" y="196" width="1" height="15" fill="rgb(225,187,29)"/><text x="13.00" y="206.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c:1292) (1 samples, 0.15%)</title><rect x="10" y="212" width="1" height="15" fill="rgb(241,105,46)"/><text x="13.00" y="222.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py:151) (2 samples, 0.29%)</title><rect x="10" y="100" width="3" height="15" fill="rgb(220,219,36)"/><text x="13.00" y="110.50"></text></g><g><title>fit (sklearn/neural_network/_multilayer_perceptron.py:995) (2 samples, 0.29%)</title><rect x="10" y="116" width="3" height="15" fill="rgb(212,120,35)"/><text x="13.00" y="126.50"></text></g><g><title>_fit (sklearn/neural_network/_multilayer_perceptron.py:370) (2 samples, 0.29%)</title><rect x="10" y="132" width="3" height="15" fill="rgb(243,168,6)"/><text x="13.00" y="142.50"></text></g><g><title>_fit_stochastic (sklearn/neural_network/_multilayer_perceptron.py:527) (1 samples, 0.15%)</title><rect x="11" y="148" width="2" height="15" fill="rgb(217,43,6)"/><text x="14.00" y="158.50"></text></g><g><title>update_params (sklearn/neural_network/_stochastic_optimizers.py:43) (1 samples, 0.15%)</title><rect x="11" y="164" width="2" height="15" fill="rgb(250,129,44)"/><text x="14.00" y="174.50"></text></g><g><title>_get_updates (sklearn/neural_network/_stochastic_optimizers.py:260) (1 samples, 0.15%)</title><rect x="11" y="180" width="2" height="15" fill="rgb(251,35,46)"/><text x="14.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/neural_network/_stochastic_optimizers.py:259) (1 samples, 0.15%)</title><rect x="11" y="196" width="2" height="15" fill="rgb(249,33,51)"/><text x="14.00" y="206.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:31) (3 samples, 0.44%)</title><rect x="10" y="52" width="5" height="15" fill="rgb(207,165,25)"/><text x="13.00" y="62.50"></text></g><g><title>start (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:11) (3 samples, 0.44%)</title><rect x="10" y="68" width="5" height="15" fill="rgb(227,104,8)"/><text x="13.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:39) (3 samples, 0.44%)</title><rect x="10" y="84" width="5" height="15" fill="rgb(250,162,8)"/><text x="13.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py:155) (1 samples, 0.15%)</title><rect x="13" y="100" width="2" height="15" fill="rgb(218,87,34)"/><text x="16.00" y="110.50"></text></g><g><title>__close (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="13" y="116" width="2" height="15" fill="rgb(228,151,49)"/><text x="16.00" y="126.50"></text></g><g><title>dgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="15" y="212" width="1" height="15" fill="rgb(251,36,10)"/><text x="18.00" y="222.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="16" y="212" width="2" height="15" fill="rgb(239,13,13)"/><text x="19.00" y="222.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="18" y="340" width="2" height="15" fill="rgb(226,57,48)"/><text x="21.00" y="350.50"></text></g><g><title>sched_yield (libc-2.29.so) (1 samples, 0.15%)</title><rect x="18" y="356" width="2" height="15" fill="rgb(220,18,47)"/><text x="21.00" y="366.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:104) (4 samples, 0.59%)</title><rect x="15" y="180" width="7" height="15" fill="rgb(243,97,14)"/><text x="18.00" y="190.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (4 samples, 0.59%)</title><rect x="15" y="196" width="7" height="15" fill="rgb(241,197,28)"/><text x="18.00" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.29%)</title><rect x="18" y="212" width="4" height="15" fill="rgb(245,63,17)"/><text x="21.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (2 samples, 0.29%)</title><rect x="18" y="228" width="4" height="15" fill="rgb(247,87,13)"/><text x="21.00" y="238.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (2 samples, 0.29%)</title><rect x="18" y="244" width="4" height="15" fill="rgb(227,53,32)"/><text x="21.00" y="254.50"></text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (2 samples, 0.29%)</title><rect x="18" y="260" width="4" height="15" fill="rgb(222,132,49)"/><text x="21.00" y="270.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.29%)</title><rect x="18" y="276" width="4" height="15" fill="rgb(220,194,12)"/><text x="21.00" y="286.50"></text></g><g><title>dgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.29%)</title><rect x="18" y="292" width="4" height="15" fill="rgb(215,0,53)"/><text x="21.00" y="302.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.29%)</title><rect x="18" y="308" width="4" height="15" fill="rgb(242,227,12)"/><text x="21.00" y="318.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.29%)</title><rect x="18" y="324" width="4" height="15" fill="rgb(231,198,9)"/><text x="21.00" y="334.50"></text></g><g><title>inner_thread (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="20" y="340" width="2" height="15" fill="rgb(247,120,8)"/><text x="23.00" y="350.50"></text></g><g><title>dgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="20" y="356" width="2" height="15" fill="rgb(228,173,0)"/><text x="23.00" y="366.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:105) (1 samples, 0.15%)</title><rect x="22" y="180" width="1" height="15" fill="rgb(218,225,18)"/><text x="25.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="22" y="196" width="1" height="15" fill="rgb(235,184,20)"/><text x="25.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (1 samples, 0.15%)</title><rect x="22" y="212" width="1" height="15" fill="rgb(218,43,47)"/><text x="25.00" y="222.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:563) (1 samples, 0.15%)</title><rect x="22" y="228" width="1" height="15" fill="rgb(208,150,29)"/><text x="25.00" y="238.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c:242) (1 samples, 0.15%)</title><rect x="22" y="244" width="1" height="15" fill="rgb(241,56,41)"/><text x="25.00" y="254.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:965) (1 samples, 0.15%)</title><rect x="22" y="260" width="1" height="15" fill="rgb(247,82,2)"/><text x="25.00" y="270.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:109) (2 samples, 0.29%)</title><rect x="23" y="180" width="4" height="15" fill="rgb(243,181,6)"/><text x="26.00" y="190.50"></text></g><g><title>relu (sklearn/neural_network/_base.py:75) (2 samples, 0.29%)</title><rect x="23" y="196" width="4" height="15" fill="rgb(253,171,26)"/><text x="26.00" y="206.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;:6) (2 samples, 0.29%)</title><rect x="23" y="212" width="4" height="15" fill="rgb(232,177,19)"/><text x="26.00" y="222.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.29%)</title><rect x="23" y="228" width="4" height="15" fill="rgb(251,55,26)"/><text x="26.00" y="238.50"></text></g><g><title>clip (numpy/core/fromnumeric.py:2037) (2 samples, 0.29%)</title><rect x="23" y="244" width="4" height="15" fill="rgb(213,43,51)"/><text x="26.00" y="254.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (1 samples, 0.15%)</title><rect x="25" y="260" width="2" height="15" fill="rgb(253,227,51)"/><text x="28.00" y="270.50"></text></g><g><title>array_clip (methods.c:2381) (1 samples, 0.15%)</title><rect x="25" y="276" width="2" height="15" fill="rgb(242,104,32)"/><text x="28.00" y="286.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (1 samples, 0.15%)</title><rect x="25" y="292" width="2" height="15" fill="rgb(238,186,39)"/><text x="28.00" y="302.50"></text></g><g><title>_clip (numpy/core/_methods.py:132) (1 samples, 0.15%)</title><rect x="25" y="308" width="2" height="15" fill="rgb(219,173,36)"/><text x="28.00" y="318.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:85) (1 samples, 0.15%)</title><rect x="25" y="324" width="2" height="15" fill="rgb(240,166,35)"/><text x="28.00" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="25" y="340" width="2" height="15" fill="rgb(211,106,20)"/><text x="28.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.15%)</title><rect x="25" y="356" width="2" height="15" fill="rgb(218,78,53)"/><text x="28.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (1 samples, 0.15%)</title><rect x="25" y="372" width="2" height="15" fill="rgb(251,67,36)"/><text x="28.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (1 samples, 0.15%)</title><rect x="25" y="388" width="2" height="15" fill="rgb(210,167,34)"/><text x="28.00" y="398.50"></text></g><g><title>DOUBLE_clip (clip.c.src:96) (1 samples, 0.15%)</title><rect x="25" y="404" width="2" height="15" fill="rgb(206,90,45)"/><text x="28.00" y="414.50"></text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:18) (8 samples, 1.18%)</title><rect x="15" y="100" width="14" height="15" fill="rgb(210,82,28)"/><text x="18.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (8 samples, 1.18%)</title><rect x="15" y="116" width="14" height="15" fill="rgb(254,103,0)"/><text x="18.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (8 samples, 1.18%)</title><rect x="15" y="132" width="14" height="15" fill="rgb(212,147,27)"/><text x="18.00" y="142.50"></text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1072) (8 samples, 1.18%)</title><rect x="15" y="148" width="14" height="15" fill="rgb(221,91,44)"/><text x="18.00" y="158.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:685) (8 samples, 1.18%)</title><rect x="15" y="164" width="14" height="15" fill="rgb(206,196,27)"/><text x="18.00" y="174.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:113) (1 samples, 0.15%)</title><rect x="27" y="180" width="2" height="15" fill="rgb(231,82,19)"/><text x="30.00" y="190.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py:93) (1 samples, 0.15%)</title><rect x="27" y="196" width="2" height="15" fill="rgb(217,216,23)"/><text x="30.00" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="27" y="212" width="2" height="15" fill="rgb(235,6,41)"/><text x="30.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.15%)</title><rect x="27" y="228" width="2" height="15" fill="rgb(238,30,14)"/><text x="30.00" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (1 samples, 0.15%)</title><rect x="27" y="244" width="2" height="15" fill="rgb(217,102,3)"/><text x="30.00" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (1 samples, 0.15%)</title><rect x="27" y="260" width="2" height="15" fill="rgb(215,218,25)"/><text x="30.00" y="270.50"></text></g><g><title>PyUFunc_d_d (loops.c.src:190) (1 samples, 0.15%)</title><rect x="27" y="276" width="2" height="15" fill="rgb(227,87,0)"/><text x="30.00" y="286.50"></text></g><g><title>exp (libm-2.29.so) (1 samples, 0.15%)</title><rect x="27" y="292" width="2" height="15" fill="rgb(213,107,54)"/><text x="30.00" y="302.50"></text></g><g><title>0x7f3679e05c7b (libm-2.29.so) (1 samples, 0.15%)</title><rect x="27" y="308" width="2" height="15" fill="rgb(223,112,44)"/><text x="30.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:947) (1 samples, 0.15%)</title><rect x="34" y="180" width="2" height="15" fill="rgb(245,122,23)"/><text x="37.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (2 samples, 0.29%)</title><rect x="36" y="180" width="3" height="15" fill="rgb(209,55,19)"/><text x="39.00" y="190.50"></text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1071) (6 samples, 0.88%)</title><rect x="30" y="148" width="11" height="15" fill="rgb(253,79,1)"/><text x="33.00" y="158.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (6 samples, 0.88%)</title><rect x="30" y="164" width="11" height="15" fill="rgb(205,83,23)"/><text x="33.00" y="174.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:949) (1 samples, 0.15%)</title><rect x="39" y="180" width="2" height="15" fill="rgb(238,26,50)"/><text x="42.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:448) (1 samples, 0.15%)</title><rect x="41" y="180" width="2" height="15" fill="rgb(250,42,9)"/><text x="44.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:468) (1 samples, 0.15%)</title><rect x="43" y="180" width="1" height="15" fill="rgb(222,95,4)"/><text x="46.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:502) (1 samples, 0.15%)</title><rect x="44" y="180" width="2" height="15" fill="rgb(229,143,35)"/><text x="47.00" y="190.50"></text></g><g><title>__enter__ (warnings.py:479) (1 samples, 0.15%)</title><rect x="44" y="196" width="2" height="15" fill="rgb(227,187,54)"/><text x="47.00" y="206.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (1 samples, 0.15%)</title><rect x="46" y="196" width="2" height="15" fill="rgb(242,67,26)"/><text x="49.00" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (2 samples, 0.29%)</title><rect x="46" y="180" width="3" height="15" fill="rgb(206,50,11)"/><text x="49.00" y="190.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:42) (1 samples, 0.15%)</title><rect x="48" y="196" width="1" height="15" fill="rgb(237,149,18)"/><text x="51.00" y="206.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:667) (6 samples, 0.88%)</title><rect x="41" y="164" width="10" height="15" fill="rgb(240,0,4)"/><text x="44.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (1 samples, 0.15%)</title><rect x="49" y="180" width="2" height="15" fill="rgb(211,229,35)"/><text x="52.00" y="190.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py:149) (1 samples, 0.15%)</title><rect x="49" y="196" width="2" height="15" fill="rgb(246,190,31)"/><text x="52.00" y="206.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c:1184) (1 samples, 0.15%)</title><rect x="49" y="212" width="2" height="15" fill="rgb(238,165,24)"/><text x="52.00" y="222.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:671) (1 samples, 0.15%)</title><rect x="51" y="164" width="2" height="15" fill="rgb(220,137,22)"/><text x="54.00" y="174.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:673) (1 samples, 0.15%)</title><rect x="53" y="164" width="2" height="15" fill="rgb(211,69,2)"/><text x="56.00" y="174.50"></text></g><g><title>dgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 1.03%)</title><rect x="56" y="212" width="13" height="15" fill="rgb(226,108,47)"/><text x="59.00" y="222.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (16 samples, 2.36%)</title><rect x="69" y="212" width="27" height="15" fill="rgb(225,6,39)"/><text x="72.00" y="222.50">d..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:282) (1 samples, 0.15%)</title><rect x="96" y="260" width="2" height="15" fill="rgb(209,78,30)"/><text x="99.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:289) (1 samples, 0.15%)</title><rect x="98" y="260" width="2" height="15" fill="rgb(245,102,50)"/><text x="101.00" y="270.50"></text></g><g><title>npyiter_apply_forced_iteration_order (nditer_constr.c:2102) (1 samples, 0.15%)</title><rect x="98" y="276" width="2" height="15" fill="rgb(216,31,1)"/><text x="101.00" y="286.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2871) (3 samples, 0.44%)</title><rect x="96" y="244" width="6" height="15" fill="rgb(230,78,1)"/><text x="99.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (1 samples, 0.15%)</title><rect x="100" y="260" width="2" height="15" fill="rgb(228,59,5)"/><text x="103.00" y="270.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2942) (1 samples, 0.15%)</title><rect x="100" y="276" width="2" height="15" fill="rgb(225,218,4)"/><text x="103.00" y="286.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:301) (1 samples, 0.15%)</title><rect x="100" y="292" width="2" height="15" fill="rgb(251,229,33)"/><text x="103.00" y="302.50"></text></g><g><title>PyArray_FailUnlessWriteable (arrayobject.c:691) (1 samples, 0.15%)</title><rect x="100" y="308" width="2" height="15" fill="rgb(209,107,21)"/><text x="103.00" y="318.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="102" y="356" width="1" height="15" fill="rgb(232,134,2)"/><text x="105.00" y="366.50"></text></g><g><title>__lll_lock_wait (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="102" y="372" width="1" height="15" fill="rgb(242,29,14)"/><text x="105.00" y="382.50"></text></g><g><title>exec_blas_async (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.29%)</title><rect x="102" y="340" width="3" height="15" fill="rgb(224,22,16)"/><text x="105.00" y="350.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="103" y="356" width="2" height="15" fill="rgb(243,206,44)"/><text x="106.00" y="366.50"></text></g><g><title>__lll_unlock_wake (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="103" y="372" width="2" height="15" fill="rgb(250,183,24)"/><text x="106.00" y="382.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (25 samples, 3.68%)</title><rect x="105" y="340" width="44" height="15" fill="rgb(229,37,46)"/><text x="108.00" y="350.50">exec..</text></g><g><title>sched_yield (libc-2.29.so) (25 samples, 3.68%)</title><rect x="105" y="356" width="44" height="15" fill="rgb(223,210,34)"/><text x="108.00" y="366.50">sche..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:104) (57 samples, 8.39%)</title><rect x="56" y="180" width="99" height="15" fill="rgb(252,197,33)"/><text x="59.00" y="190.50">_forward_pa..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (57 samples, 8.39%)</title><rect x="56" y="196" width="99" height="15" fill="rgb(223,58,18)"/><text x="59.00" y="206.50">safe_sparse..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (34 samples, 5.01%)</title><rect x="96" y="212" width="59" height="15" fill="rgb(229,203,20)"/><text x="99.00" y="222.50">ufunc_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (34 samples, 5.01%)</title><rect x="96" y="228" width="59" height="15" fill="rgb(226,49,3)"/><text x="99.00" y="238.50">PyUFun..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (31 samples, 4.57%)</title><rect x="102" y="244" width="53" height="15" fill="rgb(211,26,48)"/><text x="105.00" y="254.50">PyUFu..</text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (31 samples, 4.57%)</title><rect x="102" y="260" width="53" height="15" fill="rgb(226,56,29)"/><text x="105.00" y="270.50">DOUBL..</text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (31 samples, 4.57%)</title><rect x="102" y="276" width="53" height="15" fill="rgb(252,58,21)"/><text x="105.00" y="286.50">cblas..</text></g><g><title>dgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (31 samples, 4.57%)</title><rect x="102" y="292" width="53" height="15" fill="rgb(233,14,1)"/><text x="105.00" y="302.50">dgemm..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (31 samples, 4.57%)</title><rect x="102" y="308" width="53" height="15" fill="rgb(219,214,43)"/><text x="105.00" y="318.50">gemm_..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (31 samples, 4.57%)</title><rect x="102" y="324" width="53" height="15" fill="rgb(222,192,43)"/><text x="105.00" y="334.50">exec_..</text></g><g><title>inner_thread (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.59%)</title><rect x="149" y="340" width="6" height="15" fill="rgb(206,115,42)"/><text x="152.00" y="350.50"></text></g><g><title>dgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.59%)</title><rect x="149" y="356" width="6" height="15" fill="rgb(240,28,19)"/><text x="152.00" y="366.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:603) (7 samples, 1.03%)</title><rect x="157" y="292" width="12" height="15" fill="rgb(232,7,21)"/><text x="160.00" y="302.50"></text></g><g><title>_mm_add_pd (emmintrin.h:229) (7 samples, 1.03%)</title><rect x="157" y="308" width="12" height="15" fill="rgb(252,48,23)"/><text x="160.00" y="318.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (14 samples, 2.06%)</title><rect x="157" y="260" width="25" height="15" fill="rgb(225,149,44)"/><text x="160.00" y="270.50">D..</text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (14 samples, 2.06%)</title><rect x="157" y="276" width="25" height="15" fill="rgb(252,166,15)"/><text x="160.00" y="286.50">r..</text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:604) (7 samples, 1.03%)</title><rect x="169" y="292" width="13" height="15" fill="rgb(245,82,23)"/><text x="172.00" y="302.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (7 samples, 1.03%)</title><rect x="169" y="308" width="13" height="15" fill="rgb(234,206,15)"/><text x="172.00" y="318.50"></text></g><g><title>0x7f3679c53f46 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="182" y="308" width="1" height="15" fill="rgb(240,93,11)"/><text x="185.00" y="318.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:105) (17 samples, 2.50%)</title><rect x="155" y="180" width="30" height="15" fill="rgb(210,77,42)"/><text x="158.00" y="190.50">_f..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (16 samples, 2.36%)</title><rect x="157" y="196" width="28" height="15" fill="rgb(242,86,38)"/><text x="160.00" y="206.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (16 samples, 2.36%)</title><rect x="157" y="212" width="28" height="15" fill="rgb(254,108,46)"/><text x="160.00" y="222.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (16 samples, 2.36%)</title><rect x="157" y="228" width="28" height="15" fill="rgb(239,150,34)"/><text x="160.00" y="238.50">e..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (16 samples, 2.36%)</title><rect x="157" y="244" width="28" height="15" fill="rgb(234,9,48)"/><text x="160.00" y="254.50">i..</text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:322) (2 samples, 0.29%)</title><rect x="182" y="260" width="3" height="15" fill="rgb(247,45,40)"/><text x="185.00" y="270.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (2 samples, 0.29%)</title><rect x="182" y="276" width="3" height="15" fill="rgb(233,150,44)"/><text x="185.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (2 samples, 0.29%)</title><rect x="182" y="292" width="3" height="15" fill="rgb(251,131,34)"/><text x="185.00" y="302.50"></text></g><g><title>0x7f3679c53f5d (libc-2.29.so) (1 samples, 0.15%)</title><rect x="183" y="308" width="2" height="15" fill="rgb(208,76,54)"/><text x="186.00" y="318.50"></text></g><g><title>__new__ (numpy/core/getlimits.py:367) (1 samples, 0.15%)</title><rect x="185" y="212" width="2" height="15" fill="rgb(231,137,31)"/><text x="188.00" y="222.50"></text></g><g><title>arraydescr_new (descriptor.c:2270) (1 samples, 0.15%)</title><rect x="185" y="228" width="2" height="15" fill="rgb(224,54,11)"/><text x="188.00" y="238.50"></text></g><g><title>_clip (numpy/core/_methods.py:106) (2 samples, 0.29%)</title><rect x="188" y="308" width="4" height="15" fill="rgb(206,76,31)"/><text x="191.00" y="318.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:66) (2 samples, 0.29%)</title><rect x="188" y="324" width="4" height="15" fill="rgb(236,228,1)"/><text x="191.00" y="334.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;:6) (2 samples, 0.29%)</title><rect x="188" y="340" width="4" height="15" fill="rgb(230,3,25)"/><text x="191.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.29%)</title><rect x="188" y="356" width="4" height="15" fill="rgb(229,139,47)"/><text x="191.00" y="366.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py:3021) (2 samples, 0.29%)</title><rect x="188" y="372" width="4" height="15" fill="rgb(250,113,42)"/><text x="191.00" y="382.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:65) (2 samples, 0.29%)</title><rect x="192" y="324" width="3" height="15" fill="rgb(222,6,23)"/><text x="195.00" y="334.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:66) (1 samples, 0.15%)</title><rect x="195" y="324" width="2" height="15" fill="rgb(253,86,44)"/><text x="198.00" y="334.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;:6) (1 samples, 0.15%)</title><rect x="195" y="340" width="2" height="15" fill="rgb(251,111,4)"/><text x="198.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (1 samples, 0.15%)</title><rect x="195" y="356" width="2" height="15" fill="rgb(223,223,33)"/><text x="198.00" y="366.50"></text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c:89) (1 samples, 0.15%)</title><rect x="195" y="372" width="2" height="15" fill="rgb(213,213,48)"/><text x="198.00" y="382.50"></text></g><g><title>get_array_function (arrayfunction_override.c:40) (1 samples, 0.15%)</title><rect x="195" y="388" width="2" height="15" fill="rgb(230,51,53)"/><text x="198.00" y="398.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h:106) (1 samples, 0.15%)</title><rect x="195" y="404" width="2" height="15" fill="rgb(235,171,54)"/><text x="198.00" y="414.50"></text></g><g><title>maybe_get_attr (get_attr_string.h:76) (1 samples, 0.15%)</title><rect x="195" y="420" width="2" height="15" fill="rgb(218,204,35)"/><text x="198.00" y="430.50"></text></g><g><title>_clip (numpy/core/_methods.py:109) (4 samples, 0.59%)</title><rect x="192" y="308" width="7" height="15" fill="rgb(232,20,31)"/><text x="195.00" y="318.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:69) (1 samples, 0.15%)</title><rect x="197" y="324" width="2" height="15" fill="rgb(209,120,16)"/><text x="200.00" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="197" y="340" width="2" height="15" fill="rgb(241,187,17)"/><text x="200.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (1 samples, 0.15%)</title><rect x="197" y="356" width="2" height="15" fill="rgb(243,62,18)"/><text x="200.00" y="366.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (1 samples, 0.15%)</title><rect x="197" y="372" width="2" height="15" fill="rgb(232,146,35)"/><text x="200.00" y="382.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1649) (1 samples, 0.15%)</title><rect x="197" y="388" width="2" height="15" fill="rgb(218,158,37)"/><text x="200.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (1 samples, 0.15%)</title><rect x="201" y="356" width="1" height="15" fill="rgb(214,209,48)"/><text x="204.00" y="366.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1097) (1 samples, 0.15%)</title><rect x="201" y="372" width="1" height="15" fill="rgb(249,130,0)"/><text x="204.00" y="382.50"></text></g><g><title>PyArray_FromAny (ctors.c:1944) (1 samples, 0.15%)</title><rect x="201" y="388" width="1" height="15" fill="rgb(206,89,17)"/><text x="204.00" y="398.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (1 samples, 0.15%)</title><rect x="201" y="404" width="1" height="15" fill="rgb(220,138,7)"/><text x="204.00" y="414.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:216) (1 samples, 0.15%)</title><rect x="201" y="420" width="1" height="15" fill="rgb(253,224,12)"/><text x="204.00" y="430.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src:123) (1 samples, 0.15%)</title><rect x="201" y="436" width="1" height="15" fill="rgb(230,94,8)"/><text x="204.00" y="446.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (1 samples, 0.15%)</title><rect x="202" y="388" width="2" height="15" fill="rgb(252,95,1)"/><text x="205.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:249) (1 samples, 0.15%)</title><rect x="202" y="404" width="2" height="15" fill="rgb(208,224,8)"/><text x="205.00" y="414.50"></text></g><g><title>DOUBLE_clip (clip.c.src:96) (10 samples, 1.47%)</title><rect x="204" y="404" width="18" height="15" fill="rgb(230,8,51)"/><text x="207.00" y="414.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (35 samples, 5.15%)</title><rect x="204" y="388" width="61" height="15" fill="rgb(247,132,8)"/><text x="207.00" y="398.50">iterat..</text></g><g><title>DOUBLE_clip (clip.c.src:97) (25 samples, 3.68%)</title><rect x="222" y="404" width="43" height="15" fill="rgb(206,97,5)"/><text x="225.00" y="414.50">DOUB..</text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (1 samples, 0.15%)</title><rect x="265" y="404" width="2" height="15" fill="rgb(207,200,23)"/><text x="268.00" y="414.50"></text></g><g><title>0x7f3679c3397c (libc-2.29.so) (1 samples, 0.15%)</title><rect x="265" y="420" width="2" height="15" fill="rgb(230,69,42)"/><text x="268.00" y="430.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:109) (48 samples, 7.07%)</title><rect x="185" y="180" width="83" height="15" fill="rgb(222,108,37)"/><text x="188.00" y="190.50">_forward_..</text></g><g><title>relu (sklearn/neural_network/_base.py:75) (48 samples, 7.07%)</title><rect x="185" y="196" width="83" height="15" fill="rgb(245,3,23)"/><text x="188.00" y="206.50">relu (skl..</text></g><g><title>clip (&lt;__array_function__ internals&gt;:6) (47 samples, 6.92%)</title><rect x="187" y="212" width="81" height="15" fill="rgb(213,195,16)"/><text x="190.00" y="222.50">clip (&lt;__..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (47 samples, 6.92%)</title><rect x="187" y="228" width="81" height="15" fill="rgb(208,181,27)"/><text x="190.00" y="238.50">array_imp..</text></g><g><title>clip (numpy/core/fromnumeric.py:2037) (47 samples, 6.92%)</title><rect x="187" y="244" width="81" height="15" fill="rgb(210,217,36)"/><text x="190.00" y="254.50">clip (num..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (46 samples, 6.77%)</title><rect x="188" y="260" width="80" height="15" fill="rgb(235,158,20)"/><text x="191.00" y="270.50">_wrapfunc..</text></g><g><title>array_clip (methods.c:2381) (46 samples, 6.77%)</title><rect x="188" y="276" width="80" height="15" fill="rgb(252,23,30)"/><text x="191.00" y="286.50">array_cli..</text></g><g><title>forward_ndarray_method (methods.c:108) (46 samples, 6.77%)</title><rect x="188" y="292" width="80" height="15" fill="rgb(224,222,36)"/><text x="191.00" y="302.50">forward_n..</text></g><g><title>_clip (numpy/core/_methods.py:132) (40 samples, 5.89%)</title><rect x="199" y="308" width="69" height="15" fill="rgb(233,163,3)"/><text x="202.00" y="318.50">_clip (..</text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:85) (39 samples, 5.74%)</title><rect x="201" y="324" width="67" height="15" fill="rgb(244,153,1)"/><text x="204.00" y="334.50">_clip_d..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (39 samples, 5.74%)</title><rect x="201" y="340" width="67" height="15" fill="rgb(206,162,24)"/><text x="204.00" y="350.50">ufunc_g..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (38 samples, 5.60%)</title><rect x="202" y="356" width="66" height="15" fill="rgb(229,102,26)"/><text x="205.00" y="366.50">PyUFunc..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (38 samples, 5.60%)</title><rect x="202" y="372" width="66" height="15" fill="rgb(230,207,35)"/><text x="205.00" y="382.50">execute..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (2 samples, 0.29%)</title><rect x="265" y="388" width="3" height="15" fill="rgb(250,158,24)"/><text x="268.00" y="398.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="267" y="404" width="1" height="15" fill="rgb(207,134,9)"/><text x="270.00" y="414.50"></text></g><g><title>array_dealloc (arrayobject.c:533) (1 samples, 0.15%)</title><rect x="268" y="196" width="2" height="15" fill="rgb(217,8,35)"/><text x="271.00" y="206.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c:152) (1 samples, 0.15%)</title><rect x="268" y="212" width="2" height="15" fill="rgb(248,66,21)"/><text x="271.00" y="222.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1857) (1 samples, 0.15%)</title><rect x="270" y="340" width="2" height="15" fill="rgb(209,35,41)"/><text x="273.00" y="350.50"></text></g><g><title>run_unary_reduce_simd_maximum_DOUBLE (simd.inc.src:195) (1 samples, 0.15%)</title><rect x="270" y="356" width="2" height="15" fill="rgb(243,218,40)"/><text x="273.00" y="366.50"></text></g><g><title>sse2_maximum_DOUBLE (simd.inc.src:1117) (1 samples, 0.15%)</title><rect x="270" y="372" width="2" height="15" fill="rgb(208,181,28)"/><text x="273.00" y="382.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (1 samples, 0.15%)</title><rect x="270" y="388" width="2" height="15" fill="rgb(220,128,0)"/><text x="273.00" y="398.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (1 samples, 0.15%)</title><rect x="270" y="404" width="2" height="15" fill="rgb(225,51,29)"/><text x="273.00" y="414.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.15%)</title><rect x="270" y="420" width="2" height="15" fill="rgb(229,56,18)"/><text x="273.00" y="430.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (2 samples, 0.29%)</title><rect x="270" y="308" width="4" height="15" fill="rgb(224,23,40)"/><text x="273.00" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (2 samples, 0.29%)</title><rect x="270" y="324" width="4" height="15" fill="rgb(225,87,24)"/><text x="273.00" y="334.50"></text></g><g><title>DOUBLE_maximum (loops.c.src:1876) (1 samples, 0.15%)</title><rect x="272" y="340" width="2" height="15" fill="rgb(242,121,9)"/><text x="275.00" y="350.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (1 samples, 0.15%)</title><rect x="272" y="356" width="2" height="15" fill="rgb(236,0,19)"/><text x="275.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:793) (1 samples, 0.15%)</title><rect x="272" y="372" width="2" height="15" fill="rgb(219,161,41)"/><text x="275.00" y="382.50"></text></g><g><title>array_max (methods.c:323) (4 samples, 0.59%)</title><rect x="270" y="212" width="7" height="15" fill="rgb(223,4,24)"/><text x="273.00" y="222.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (4 samples, 0.59%)</title><rect x="270" y="228" width="7" height="15" fill="rgb(207,102,16)"/><text x="273.00" y="238.50"></text></g><g><title>_amax (numpy/core/_methods.py:30) (4 samples, 0.59%)</title><rect x="270" y="244" width="7" height="15" fill="rgb(250,195,43)"/><text x="273.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 0.59%)</title><rect x="270" y="260" width="7" height="15" fill="rgb(223,183,36)"/><text x="273.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (4 samples, 0.59%)</title><rect x="270" y="276" width="7" height="15" fill="rgb(238,186,37)"/><text x="273.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (4 samples, 0.59%)</title><rect x="270" y="292" width="7" height="15" fill="rgb(213,105,39)"/><text x="273.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (2 samples, 0.29%)</title><rect x="274" y="308" width="3" height="15" fill="rgb(206,161,11)"/><text x="277.00" y="318.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.15%)</title><rect x="275" y="324" width="2" height="15" fill="rgb(229,33,47)"/><text x="278.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:932) (1 samples, 0.15%)</title><rect x="275" y="340" width="2" height="15" fill="rgb(243,222,14)"/><text x="278.00" y="350.50"></text></g><g><title>prepare_index (mapping.c:418) (1 samples, 0.15%)</title><rect x="277" y="228" width="2" height="15" fill="rgb(210,160,48)"/><text x="280.00" y="238.50"></text></g><g><title>array_subscript (mapping.c:1539) (2 samples, 0.29%)</title><rect x="277" y="212" width="4" height="15" fill="rgb(236,88,42)"/><text x="280.00" y="222.50"></text></g><g><title>prepare_index (mapping.c:454) (1 samples, 0.15%)</title><rect x="279" y="228" width="2" height="15" fill="rgb(253,108,35)"/><text x="282.00" y="238.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py:92) (7 samples, 1.03%)</title><rect x="270" y="196" width="12" height="15" fill="rgb(215,33,29)"/><text x="273.00" y="206.50"></text></g><g><title>array_subtract (number.c:342) (1 samples, 0.15%)</title><rect x="281" y="212" width="1" height="15" fill="rgb(212,141,18)"/><text x="284.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="281" y="228" width="1" height="15" fill="rgb(242,180,51)"/><text x="284.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.15%)</title><rect x="281" y="244" width="1" height="15" fill="rgb(234,60,52)"/><text x="284.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (1 samples, 0.15%)</title><rect x="281" y="260" width="1" height="15" fill="rgb(213,198,12)"/><text x="284.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (1 samples, 0.15%)</title><rect x="281" y="276" width="1" height="15" fill="rgb(207,15,44)"/><text x="284.00" y="286.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (1 samples, 0.15%)</title><rect x="281" y="292" width="1" height="15" fill="rgb(211,47,32)"/><text x="284.00" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (1 samples, 0.15%)</title><rect x="281" y="308" width="1" height="15" fill="rgb(219,226,16)"/><text x="284.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1014) (1 samples, 0.15%)</title><rect x="281" y="324" width="1" height="15" fill="rgb(229,113,1)"/><text x="284.00" y="334.50"></text></g><g><title>PyUFunc_d_d (loops.c.src:188) (1 samples, 0.15%)</title><rect x="282" y="276" width="2" height="15" fill="rgb(233,144,40)"/><text x="285.00" y="286.50"></text></g><g><title>0x7f3678e54b00 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="284" y="292" width="2" height="15" fill="rgb(218,110,17)"/><text x="287.00" y="302.50"></text></g><g><title>0x7f3679e05ba0 (libm-2.29.so) (1 samples, 0.15%)</title><rect x="286" y="308" width="2" height="15" fill="rgb(207,63,54)"/><text x="289.00" y="318.50"></text></g><g><title>0x7f3679e05bf9 (libm-2.29.so) (1 samples, 0.15%)</title><rect x="288" y="308" width="1" height="15" fill="rgb(230,50,11)"/><text x="291.00" y="318.50"></text></g><g><title>0x7f3679e05c04 (libm-2.29.so) (1 samples, 0.15%)</title><rect x="289" y="308" width="2" height="15" fill="rgb(250,164,35)"/><text x="292.00" y="318.50"></text></g><g><title>0x7f3679e05c32 (libm-2.29.so) (1 samples, 0.15%)</title><rect x="291" y="308" width="2" height="15" fill="rgb(215,204,5)"/><text x="294.00" y="318.50"></text></g><g><title>0x7f3679e05c3e (libm-2.29.so) (1 samples, 0.15%)</title><rect x="293" y="308" width="2" height="15" fill="rgb(238,175,39)"/><text x="296.00" y="318.50"></text></g><g><title>0x7f3679e05c46 (libm-2.29.so) (1 samples, 0.15%)</title><rect x="295" y="308" width="1" height="15" fill="rgb(245,8,0)"/><text x="298.00" y="318.50"></text></g><g><title>0x7f3679e05c56 (libm-2.29.so) (1 samples, 0.15%)</title><rect x="296" y="308" width="2" height="15" fill="rgb(218,82,24)"/><text x="299.00" y="318.50"></text></g><g><title>0x7f3679e05c5a (libm-2.29.so) (1 samples, 0.15%)</title><rect x="298" y="308" width="2" height="15" fill="rgb(235,223,48)"/><text x="301.00" y="318.50"></text></g><g><title>0x7f3679e05c7b (libm-2.29.so) (1 samples, 0.15%)</title><rect x="300" y="308" width="1" height="15" fill="rgb(234,122,5)"/><text x="303.00" y="318.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py:93) (13 samples, 1.91%)</title><rect x="282" y="196" width="23" height="15" fill="rgb(233,91,42)"/><text x="285.00" y="206.50">s..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (13 samples, 1.91%)</title><rect x="282" y="212" width="23" height="15" fill="rgb(236,27,1)"/><text x="285.00" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (13 samples, 1.91%)</title><rect x="282" y="228" width="23" height="15" fill="rgb(238,33,30)"/><text x="285.00" y="238.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (13 samples, 1.91%)</title><rect x="282" y="244" width="23" height="15" fill="rgb(225,182,19)"/><text x="285.00" y="254.50">e..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (13 samples, 1.91%)</title><rect x="282" y="260" width="23" height="15" fill="rgb(211,10,23)"/><text x="285.00" y="270.50">t..</text></g><g><title>PyUFunc_d_d (loops.c.src:190) (12 samples, 1.77%)</title><rect x="284" y="276" width="21" height="15" fill="rgb(223,94,47)"/><text x="287.00" y="286.50"></text></g><g><title>exp (libm-2.29.so) (11 samples, 1.62%)</title><rect x="286" y="292" width="19" height="15" fill="rgb(252,141,42)"/><text x="289.00" y="302.50"></text></g><g><title>0x7f3679e05c7f (libm-2.29.so) (2 samples, 0.29%)</title><rect x="301" y="308" width="4" height="15" fill="rgb(249,202,1)"/><text x="304.00" y="318.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (1 samples, 0.15%)</title><rect x="307" y="260" width="1" height="15" fill="rgb(208,92,18)"/><text x="310.00" y="270.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (1 samples, 0.15%)</title><rect x="307" y="276" width="1" height="15" fill="rgb(205,187,50)"/><text x="310.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (1 samples, 0.15%)</title><rect x="307" y="292" width="1" height="15" fill="rgb(207,112,46)"/><text x="310.00" y="302.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:37) (1 samples, 0.15%)</title><rect x="307" y="308" width="1" height="15" fill="rgb(233,35,49)"/><text x="310.00" y="318.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h:106) (1 samples, 0.15%)</title><rect x="307" y="324" width="1" height="15" fill="rgb(207,139,52)"/><text x="310.00" y="334.50"></text></g><g><title>maybe_get_attr (get_attr_string.h:80) (1 samples, 0.15%)</title><rect x="307" y="340" width="1" height="15" fill="rgb(244,110,51)"/><text x="310.00" y="350.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (1 samples, 0.15%)</title><rect x="308" y="292" width="2" height="15" fill="rgb(243,119,27)"/><text x="311.00" y="302.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (1 samples, 0.15%)</title><rect x="308" y="308" width="2" height="15" fill="rgb(237,159,42)"/><text x="311.00" y="318.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (1 samples, 0.15%)</title><rect x="308" y="324" width="2" height="15" fill="rgb(223,145,47)"/><text x="311.00" y="334.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2194) (1 samples, 0.15%)</title><rect x="308" y="340" width="2" height="15" fill="rgb(218,68,29)"/><text x="311.00" y="350.50"></text></g><g><title>reduce_loop (ufunc_object.c:3535) (1 samples, 0.15%)</title><rect x="310" y="324" width="2" height="15" fill="rgb(223,210,45)"/><text x="313.00" y="334.50"></text></g><g><title>reduce_loop (ufunc_object.c:3541) (1 samples, 0.15%)</title><rect x="312" y="324" width="2" height="15" fill="rgb(250,168,41)"/><text x="315.00" y="334.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:229) (1 samples, 0.15%)</title><rect x="314" y="340" width="1" height="15" fill="rgb(238,180,51)"/><text x="317.00" y="350.50"></text></g><g><title>array_sum (methods.c:2215) (7 samples, 1.03%)</title><rect x="305" y="212" width="12" height="15" fill="rgb(247,83,3)"/><text x="308.00" y="222.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (7 samples, 1.03%)</title><rect x="305" y="228" width="12" height="15" fill="rgb(233,167,28)"/><text x="308.00" y="238.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (6 samples, 0.88%)</title><rect x="307" y="244" width="10" height="15" fill="rgb(254,186,23)"/><text x="310.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (5 samples, 0.74%)</title><rect x="308" y="260" width="9" height="15" fill="rgb(235,99,14)"/><text x="311.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (5 samples, 0.74%)</title><rect x="308" y="276" width="9" height="15" fill="rgb(220,135,16)"/><text x="311.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (4 samples, 0.59%)</title><rect x="310" y="292" width="7" height="15" fill="rgb(243,13,27)"/><text x="313.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (4 samples, 0.59%)</title><rect x="310" y="308" width="7" height="15" fill="rgb(237,131,10)"/><text x="313.00" y="318.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (2 samples, 0.29%)</title><rect x="314" y="324" width="3" height="15" fill="rgb(241,59,14)"/><text x="317.00" y="334.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:243) (1 samples, 0.15%)</title><rect x="315" y="340" width="2" height="15" fill="rgb(207,38,20)"/><text x="318.00" y="350.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (1 samples, 0.15%)</title><rect x="317" y="260" width="2" height="15" fill="rgb(245,26,7)"/><text x="320.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (1 samples, 0.15%)</title><rect x="317" y="276" width="2" height="15" fill="rgb(205,184,32)"/><text x="320.00" y="286.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (1 samples, 0.15%)</title><rect x="319" y="308" width="2" height="15" fill="rgb(235,88,28)"/><text x="322.00" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1014) (1 samples, 0.15%)</title><rect x="321" y="308" width="1" height="15" fill="rgb(254,173,19)"/><text x="324.00" y="318.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (170 samples, 25.04%)</title><rect x="29" y="132" width="295" height="15" fill="rgb(216,169,53)"/><text x="32.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/commo..</text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1072) (163 samples, 24.01%)</title><rect x="41" y="148" width="283" height="15" fill="rgb(249,132,45)"/><text x="44.00" y="158.50">predict_proba (sklearn/neural_network..</text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:685) (155 samples, 22.83%)</title><rect x="55" y="164" width="269" height="15" fill="rgb(242,127,15)"/><text x="58.00" y="174.50">_predict (sklearn/neural_network/_m..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:113) (32 samples, 4.71%)</title><rect x="268" y="180" width="56" height="15" fill="rgb(220,56,20)"/><text x="271.00" y="190.50">_forw..</text></g><g><title>softmax (sklearn/neural_network/_base.py:94) (11 samples, 1.62%)</title><rect x="305" y="196" width="19" height="15" fill="rgb(222,129,33)"/><text x="308.00" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 0.59%)</title><rect x="317" y="212" width="7" height="15" fill="rgb(229,173,7)"/><text x="320.00" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 0.59%)</title><rect x="317" y="228" width="7" height="15" fill="rgb(236,22,11)"/><text x="320.00" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (4 samples, 0.59%)</title><rect x="317" y="244" width="7" height="15" fill="rgb(217,203,19)"/><text x="320.00" y="254.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (3 samples, 0.44%)</title><rect x="319" y="260" width="5" height="15" fill="rgb(210,139,54)"/><text x="322.00" y="270.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (3 samples, 0.44%)</title><rect x="319" y="276" width="5" height="15" fill="rgb(209,104,18)"/><text x="322.00" y="286.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (3 samples, 0.44%)</title><rect x="319" y="292" width="5" height="15" fill="rgb(233,76,50)"/><text x="322.00" y="302.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (1 samples, 0.15%)</title><rect x="322" y="308" width="2" height="15" fill="rgb(215,61,38)"/><text x="325.00" y="318.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:234) (1 samples, 0.15%)</title><rect x="322" y="324" width="2" height="15" fill="rgb(248,57,20)"/><text x="325.00" y="334.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:38) (179 samples, 26.36%)</title><rect x="15" y="52" width="311" height="15" fill="rgb(223,183,46)"/><text x="18.00" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_c..</text></g><g><title>profile_skl (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:37) (179 samples, 26.36%)</title><rect x="15" y="68" width="311" height="15" fill="rgb(213,124,50)"/><text x="18.00" y="78.50">profile_skl (bench_MLPClassifier_default_..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:29) (179 samples, 26.36%)</title><rect x="15" y="84" width="311" height="15" fill="rgb(219,194,24)"/><text x="18.00" y="94.50">setup_profile (bench_MLPClassifier_defaul..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:23) (171 samples, 25.18%)</title><rect x="29" y="100" width="297" height="15" fill="rgb(232,83,35)"/><text x="32.00" y="110.50">profile (bench_MLPClassifier_default_b_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (171 samples, 25.18%)</title><rect x="29" y="116" width="297" height="15" fill="rgb(225,95,20)"/><text x="32.00" y="126.50">time_predict (mlprodict/asv_benchmark/c..</text></g><g><title>unicode_concatenate (python3.7) (1 samples, 0.15%)</title><rect x="324" y="132" width="2" height="15" fill="rgb(215,86,14)"/><text x="327.00" y="142.50"></text></g><g><title>0x7f3679c72fb5 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="326" y="964" width="2" height="15" fill="rgb(226,229,42)"/><text x="329.00" y="974.50"></text></g><g><title>__fxstat (libc-2.29.so) (1 samples, 0.15%)</title><rect x="326" y="980" width="2" height="15" fill="rgb(243,91,39)"/><text x="329.00" y="990.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py:2127) (2 samples, 0.29%)</title><rect x="326" y="932" width="3" height="15" fill="rgb(216,176,21)"/><text x="329.00" y="942.50"></text></g><g><title>os_listdir (python3.7) (2 samples, 0.29%)</title><rect x="326" y="948" width="3" height="15" fill="rgb(215,140,48)"/><text x="329.00" y="958.50"></text></g><g><title>__close_nocancel (libc-2.29.so) (1 samples, 0.15%)</title><rect x="328" y="964" width="1" height="15" fill="rgb(214,134,28)"/><text x="331.00" y="974.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py:2133) (1 samples, 0.15%)</title><rect x="329" y="932" width="2" height="15" fill="rgb(241,8,4)"/><text x="332.00" y="942.50"></text></g><g><title>basename (posixpath.py:146) (1 samples, 0.15%)</title><rect x="329" y="948" width="2" height="15" fill="rgb(205,158,39)"/><text x="332.00" y="958.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (4 samples, 0.59%)</title><rect x="326" y="852" width="7" height="15" fill="rgb(207,134,46)"/><text x="329.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (4 samples, 0.59%)</title><rect x="326" y="868" width="7" height="15" fill="rgb(241,57,40)"/><text x="329.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (4 samples, 0.59%)</title><rect x="326" y="884" width="7" height="15" fill="rgb(236,41,48)"/><text x="329.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (4 samples, 0.59%)</title><rect x="326" y="900" width="7" height="15" fill="rgb(207,140,38)"/><text x="329.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2065) (4 samples, 0.59%)</title><rect x="326" y="916" width="7" height="15" fill="rgb(238,40,46)"/><text x="329.00" y="926.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py:2135) (1 samples, 0.15%)</title><rect x="331" y="932" width="2" height="15" fill="rgb(225,90,25)"/><text x="334.00" y="942.50"></text></g><g><title>from_location (pkg_resources/__init__.py:2592) (1 samples, 0.15%)</title><rect x="331" y="948" width="2" height="15" fill="rgb(210,128,52)"/><text x="334.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:2571) (1 samples, 0.15%)</title><rect x="331" y="964" width="2" height="15" fill="rgb(234,79,6)"/><text x="334.00" y="974.50"></text></g><g><title>safe_version (pkg_resources/__init__.py:1331) (1 samples, 0.15%)</title><rect x="331" y="980" width="2" height="15" fill="rgb(218,32,15)"/><text x="334.00" y="990.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py:207) (1 samples, 0.15%)</title><rect x="331" y="996" width="2" height="15" fill="rgb(208,58,32)"/><text x="334.00" y="1006.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3279) (1 samples, 0.15%)</title><rect x="333" y="852" width="1" height="15" fill="rgb(226,163,34)"/><text x="336.00" y="862.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py:3279) (1 samples, 0.15%)</title><rect x="333" y="868" width="1" height="15" fill="rgb(219,2,39)"/><text x="336.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py:2783) (1 samples, 0.15%)</title><rect x="333" y="884" width="1" height="15" fill="rgb(206,99,16)"/><text x="336.00" y="894.50"></text></g><g><title>_get_metadata (pkg_resources/__init__.py:2766) (1 samples, 0.15%)</title><rect x="333" y="900" width="1" height="15" fill="rgb(216,68,26)"/><text x="336.00" y="910.50"></text></g><g><title>has_metadata (pkg_resources/__init__.py:1413) (1 samples, 0.15%)</title><rect x="333" y="916" width="1" height="15" fill="rgb(254,180,35)"/><text x="336.00" y="926.50"></text></g><g><title>_get_metadata_path (pkg_resources/__init__.py:1407) (1 samples, 0.15%)</title><rect x="333" y="932" width="1" height="15" fill="rgb(243,139,31)"/><text x="336.00" y="942.50"></text></g><g><title>_fn (pkg_resources/__init__.py:1487) (1 samples, 0.15%)</title><rect x="333" y="948" width="1" height="15" fill="rgb(249,165,46)"/><text x="336.00" y="958.50"></text></g><g><title>_validate_resource_path (pkg_resources/__init__.py:1548) (1 samples, 0.15%)</title><rect x="333" y="964" width="1" height="15" fill="rgb(244,2,35)"/><text x="336.00" y="974.50"></text></g><g><title>_legacy_cmpkey (pkg_resources/_vendor/packaging/version.py:141) (1 samples, 0.15%)</title><rect x="334" y="980" width="2" height="15" fill="rgb(246,39,41)"/><text x="337.00" y="990.50"></text></g><g><title>_parse_version_parts (pkg_resources/_vendor/packaging/version.py:125) (1 samples, 0.15%)</title><rect x="334" y="996" width="2" height="15" fill="rgb(244,199,32)"/><text x="337.00" y="1006.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:2) (7 samples, 1.03%)</title><rect x="326" y="148" width="12" height="15" fill="rgb(224,138,16)"/><text x="329.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.03%)</title><rect x="326" y="164" width="12" height="15" fill="rgb(226,102,10)"/><text x="329.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 1.03%)</title><rect x="326" y="180" width="12" height="15" fill="rgb(222,151,49)"/><text x="329.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.03%)</title><rect x="326" y="196" width="12" height="15" fill="rgb(253,76,11)"/><text x="329.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.03%)</title><rect x="326" y="212" width="12" height="15" fill="rgb(249,162,54)"/><text x="329.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.03%)</title><rect x="326" y="228" width="12" height="15" fill="rgb(233,120,29)"/><text x="329.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.03%)</title><rect x="326" y="244" width="12" height="15" fill="rgb(252,9,28)"/><text x="329.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.03%)</title><rect x="326" y="260" width="12" height="15" fill="rgb(245,193,22)"/><text x="329.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.03%)</title><rect x="326" y="276" width="12" height="15" fill="rgb(246,2,45)"/><text x="329.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (7 samples, 1.03%)</title><rect x="326" y="292" width="12" height="15" fill="rgb(234,176,19)"/><text x="329.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.03%)</title><rect x="326" y="308" width="12" height="15" fill="rgb(243,14,2)"/><text x="329.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.03%)</title><rect x="326" y="324" width="12" height="15" fill="rgb(230,100,26)"/><text x="329.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.03%)</title><rect x="326" y="340" width="12" height="15" fill="rgb(250,50,19)"/><text x="329.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.03%)</title><rect x="326" y="356" width="12" height="15" fill="rgb(211,36,43)"/><text x="329.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.03%)</title><rect x="326" y="372" width="12" height="15" fill="rgb(218,59,14)"/><text x="329.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (7 samples, 1.03%)</title><rect x="326" y="388" width="12" height="15" fill="rgb(250,135,5)"/><text x="329.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.03%)</title><rect x="326" y="404" width="12" height="15" fill="rgb(245,56,1)"/><text x="329.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.03%)</title><rect x="326" y="420" width="12" height="15" fill="rgb(235,40,19)"/><text x="329.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.03%)</title><rect x="326" y="436" width="12" height="15" fill="rgb(238,49,8)"/><text x="329.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.03%)</title><rect x="326" y="452" width="12" height="15" fill="rgb(237,211,0)"/><text x="329.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.03%)</title><rect x="326" y="468" width="12" height="15" fill="rgb(215,149,34)"/><text x="329.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (7 samples, 1.03%)</title><rect x="326" y="484" width="12" height="15" fill="rgb(242,159,7)"/><text x="329.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.03%)</title><rect x="326" y="500" width="12" height="15" fill="rgb(249,18,26)"/><text x="329.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.03%)</title><rect x="326" y="516" width="12" height="15" fill="rgb(234,135,19)"/><text x="329.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.03%)</title><rect x="326" y="532" width="12" height="15" fill="rgb(205,23,40)"/><text x="329.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.03%)</title><rect x="326" y="548" width="12" height="15" fill="rgb(239,150,22)"/><text x="329.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.03%)</title><rect x="326" y="564" width="12" height="15" fill="rgb(251,70,8)"/><text x="329.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (7 samples, 1.03%)</title><rect x="326" y="580" width="12" height="15" fill="rgb(213,11,32)"/><text x="329.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.03%)</title><rect x="326" y="596" width="12" height="15" fill="rgb(242,135,29)"/><text x="329.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 1.03%)</title><rect x="326" y="612" width="12" height="15" fill="rgb(251,193,24)"/><text x="329.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.03%)</title><rect x="326" y="628" width="12" height="15" fill="rgb(205,67,50)"/><text x="329.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.03%)</title><rect x="326" y="644" width="12" height="15" fill="rgb(228,108,53)"/><text x="329.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.03%)</title><rect x="326" y="660" width="12" height="15" fill="rgb(239,177,48)"/><text x="329.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.03%)</title><rect x="326" y="676" width="12" height="15" fill="rgb(234,216,19)"/><text x="329.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.03%)</title><rect x="326" y="692" width="12" height="15" fill="rgb(245,67,15)"/><text x="329.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.03%)</title><rect x="326" y="708" width="12" height="15" fill="rgb(228,227,22)"/><text x="329.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (7 samples, 1.03%)</title><rect x="326" y="724" width="12" height="15" fill="rgb(234,129,51)"/><text x="329.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 1.03%)</title><rect x="326" y="740" width="12" height="15" fill="rgb(241,1,53)"/><text x="329.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 1.03%)</title><rect x="326" y="756" width="12" height="15" fill="rgb(236,56,16)"/><text x="329.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 1.03%)</title><rect x="326" y="772" width="12" height="15" fill="rgb(242,113,16)"/><text x="329.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 1.03%)</title><rect x="326" y="788" width="12" height="15" fill="rgb(246,95,34)"/><text x="329.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 1.03%)</title><rect x="326" y="804" width="12" height="15" fill="rgb(223,122,34)"/><text x="329.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (7 samples, 1.03%)</title><rect x="326" y="820" width="12" height="15" fill="rgb(234,151,50)"/><text x="329.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (7 samples, 1.03%)</title><rect x="326" y="836" width="12" height="15" fill="rgb(218,184,12)"/><text x="329.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3287) (2 samples, 0.29%)</title><rect x="334" y="852" width="4" height="15" fill="rgb(227,57,43)"/><text x="337.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (2 samples, 0.29%)</title><rect x="334" y="868" width="4" height="15" fill="rgb(210,85,46)"/><text x="337.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2061) (2 samples, 0.29%)</title><rect x="334" y="884" width="4" height="15" fill="rgb(238,86,17)"/><text x="337.00" y="894.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py:2034) (2 samples, 0.29%)</title><rect x="334" y="900" width="4" height="15" fill="rgb(240,30,33)"/><text x="337.00" y="910.50"></text></g><g><title>_by_version (pkg_resources/__init__.py:2032) (2 samples, 0.29%)</title><rect x="334" y="916" width="4" height="15" fill="rgb(247,217,32)"/><text x="337.00" y="926.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py:2032) (2 samples, 0.29%)</title><rect x="334" y="932" width="4" height="15" fill="rgb(243,77,30)"/><text x="337.00" y="942.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py:33) (2 samples, 0.29%)</title><rect x="334" y="948" width="4" height="15" fill="rgb(213,8,27)"/><text x="337.00" y="958.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py:76) (2 samples, 0.29%)</title><rect x="334" y="964" width="4" height="15" fill="rgb(212,142,42)"/><text x="337.00" y="974.50"></text></g><g><title>_legacy_cmpkey (pkg_resources/_vendor/packaging/version.py:144) (1 samples, 0.15%)</title><rect x="336" y="980" width="2" height="15" fill="rgb(228,3,20)"/><text x="339.00" y="990.50"></text></g><g><title>unicode_compare (python3.7) (1 samples, 0.15%)</title><rect x="336" y="996" width="2" height="15" fill="rgb(225,188,34)"/><text x="339.00" y="1006.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (1 samples, 0.15%)</title><rect x="338" y="436" width="2" height="15" fill="rgb(230,201,6)"/><text x="341.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="452" width="2" height="15" fill="rgb(207,82,27)"/><text x="341.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="468" width="2" height="15" fill="rgb(253,201,49)"/><text x="341.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="484" width="2" height="15" fill="rgb(230,108,46)"/><text x="341.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="500" width="2" height="15" fill="rgb(209,98,33)"/><text x="341.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="516" width="2" height="15" fill="rgb(241,82,35)"/><text x="341.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (1 samples, 0.15%)</title><rect x="338" y="532" width="2" height="15" fill="rgb(237,150,11)"/><text x="341.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="548" width="2" height="15" fill="rgb(212,182,32)"/><text x="341.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="564" width="2" height="15" fill="rgb(254,99,3)"/><text x="341.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="580" width="2" height="15" fill="rgb(244,183,32)"/><text x="341.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="596" width="2" height="15" fill="rgb(235,55,47)"/><text x="341.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="612" width="2" height="15" fill="rgb(210,183,51)"/><text x="341.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (1 samples, 0.15%)</title><rect x="338" y="628" width="2" height="15" fill="rgb(210,127,45)"/><text x="341.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="644" width="2" height="15" fill="rgb(238,107,25)"/><text x="341.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="660" width="2" height="15" fill="rgb(214,209,17)"/><text x="341.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="676" width="2" height="15" fill="rgb(217,6,3)"/><text x="341.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="692" width="2" height="15" fill="rgb(234,63,38)"/><text x="341.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="708" width="2" height="15" fill="rgb(247,148,4)"/><text x="341.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (1 samples, 0.15%)</title><rect x="338" y="724" width="2" height="15" fill="rgb(247,97,6)"/><text x="341.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="740" width="2" height="15" fill="rgb(233,123,11)"/><text x="341.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="756" width="2" height="15" fill="rgb(210,11,6)"/><text x="341.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="772" width="2" height="15" fill="rgb(224,207,50)"/><text x="341.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="788" width="2" height="15" fill="rgb(220,163,19)"/><text x="341.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="804" width="2" height="15" fill="rgb(232,6,9)"/><text x="341.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (1 samples, 0.15%)</title><rect x="338" y="820" width="2" height="15" fill="rgb(210,67,1)"/><text x="341.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="836" width="2" height="15" fill="rgb(222,224,5)"/><text x="341.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="852" width="2" height="15" fill="rgb(222,158,16)"/><text x="341.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="868" width="2" height="15" fill="rgb(222,214,47)"/><text x="341.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="884" width="2" height="15" fill="rgb(211,158,27)"/><text x="341.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="900" width="2" height="15" fill="rgb(206,155,11)"/><text x="341.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:44) (1 samples, 0.15%)</title><rect x="338" y="916" width="2" height="15" fill="rgb(232,134,32)"/><text x="341.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="932" width="2" height="15" fill="rgb(216,83,22)"/><text x="341.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="948" width="2" height="15" fill="rgb(247,112,34)"/><text x="341.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="964" width="2" height="15" fill="rgb(253,2,28)"/><text x="341.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="980" width="2" height="15" fill="rgb(213,110,13)"/><text x="341.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="996" width="2" height="15" fill="rgb(231,212,17)"/><text x="341.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py:115) (1 samples, 0.15%)</title><rect x="338" y="1012" width="2" height="15" fill="rgb(234,196,8)"/><text x="341.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="1028" width="2" height="15" fill="rgb(252,193,21)"/><text x="341.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="1044" width="2" height="15" fill="rgb(243,105,2)"/><text x="341.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="1060" width="2" height="15" fill="rgb(223,104,13)"/><text x="341.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="1076" width="2" height="15" fill="rgb(246,206,37)"/><text x="341.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="1092" width="2" height="15" fill="rgb(247,156,20)"/><text x="341.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py:84) (1 samples, 0.15%)</title><rect x="338" y="1108" width="2" height="15" fill="rgb(218,18,45)"/><text x="341.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="1124" width="2" height="15" fill="rgb(248,110,36)"/><text x="341.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="1140" width="2" height="15" fill="rgb(236,80,21)"/><text x="341.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="1156" width="2" height="15" fill="rgb(230,173,14)"/><text x="341.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="1172" width="2" height="15" fill="rgb(217,11,11)"/><text x="341.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="1188" width="2" height="15" fill="rgb(240,164,51)"/><text x="341.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py:59) (1 samples, 0.15%)</title><rect x="338" y="1204" width="2" height="15" fill="rgb(225,139,29)"/><text x="341.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="1220" width="2" height="15" fill="rgb(211,120,54)"/><text x="341.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="1236" width="2" height="15" fill="rgb(236,78,42)"/><text x="341.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="1252" width="2" height="15" fill="rgb(221,15,20)"/><text x="341.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="1268" width="2" height="15" fill="rgb(220,213,7)"/><text x="341.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="1284" width="2" height="15" fill="rgb(246,116,33)"/><text x="341.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py:17) (1 samples, 0.15%)</title><rect x="338" y="1300" width="2" height="15" fill="rgb(236,193,6)"/><text x="341.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="1316" width="2" height="15" fill="rgb(237,166,11)"/><text x="341.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="1332" width="2" height="15" fill="rgb(205,69,23)"/><text x="341.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="1348" width="2" height="15" fill="rgb(206,143,5)"/><text x="341.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="1364" width="2" height="15" fill="rgb(235,22,37)"/><text x="341.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="1380" width="2" height="15" fill="rgb(205,221,51)"/><text x="341.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py:3) (1 samples, 0.15%)</title><rect x="338" y="1396" width="2" height="15" fill="rgb(248,101,20)"/><text x="341.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="1412" width="2" height="15" fill="rgb(241,71,30)"/><text x="341.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="1428" width="2" height="15" fill="rgb(244,0,5)"/><text x="341.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="1444" width="2" height="15" fill="rgb(226,121,30)"/><text x="341.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="1460" width="2" height="15" fill="rgb(226,117,10)"/><text x="341.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="1476" width="2" height="15" fill="rgb(227,42,16)"/><text x="341.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py:14) (1 samples, 0.15%)</title><rect x="338" y="1492" width="2" height="15" fill="rgb(246,175,2)"/><text x="341.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="1508" width="2" height="15" fill="rgb(216,165,52)"/><text x="341.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="1524" width="2" height="15" fill="rgb(247,170,27)"/><text x="341.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="1540" width="2" height="15" fill="rgb(222,30,7)"/><text x="341.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="1556" width="2" height="15" fill="rgb(230,66,15)"/><text x="341.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="1572" width="2" height="15" fill="rgb(237,224,47)"/><text x="341.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py:34) (1 samples, 0.15%)</title><rect x="338" y="1588" width="2" height="15" fill="rgb(244,71,53)"/><text x="341.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="1604" width="2" height="15" fill="rgb(237,92,11)"/><text x="341.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="1620" width="2" height="15" fill="rgb(245,27,19)"/><text x="341.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="1636" width="2" height="15" fill="rgb(230,226,20)"/><text x="341.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="1652" width="2" height="15" fill="rgb(225,140,38)"/><text x="341.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="1668" width="2" height="15" fill="rgb(211,225,35)"/><text x="341.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/tools.py:5) (1 samples, 0.15%)</title><rect x="338" y="1684" width="2" height="15" fill="rgb(214,65,7)"/><text x="341.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="1700" width="2" height="15" fill="rgb(219,80,46)"/><text x="341.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="1716" width="2" height="15" fill="rgb(229,87,37)"/><text x="341.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="1732" width="2" height="15" fill="rgb(219,8,16)"/><text x="341.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="1748" width="2" height="15" fill="rgb(253,58,27)"/><text x="341.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="1764" width="2" height="15" fill="rgb(218,204,25)"/><text x="341.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/table.py:24) (1 samples, 0.15%)</title><rect x="338" y="1780" width="2" height="15" fill="rgb(230,133,50)"/><text x="341.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="338" y="1796" width="2" height="15" fill="rgb(248,158,8)"/><text x="341.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="338" y="1812" width="2" height="15" fill="rgb(213,93,35)"/><text x="341.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="338" y="1828" width="2" height="15" fill="rgb(228,72,19)"/><text x="341.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="338" y="1844" width="2" height="15" fill="rgb(252,224,13)"/><text x="341.00" y="1854.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="338" y="1860" width="2" height="15" fill="rgb(235,33,34)"/><text x="341.00" y="1870.50"></text></g><g><title>&lt;module&gt; (matplotlib/patches.py:600) (1 samples, 0.15%)</title><rect x="338" y="1876" width="2" height="15" fill="rgb(235,24,15)"/><text x="341.00" y="1886.50"></text></g><g><title>kwdoc (matplotlib/artist.py:1600) (1 samples, 0.15%)</title><rect x="338" y="1892" width="2" height="15" fill="rgb(229,117,19)"/><text x="341.00" y="1902.50"></text></g><g><title>pprint_setters (matplotlib/artist.py:1371) (1 samples, 0.15%)</title><rect x="338" y="1908" width="2" height="15" fill="rgb(233,13,44)"/><text x="341.00" y="1918.50"></text></g><g><title>get_valid_values (matplotlib/artist.py:1271) (1 samples, 0.15%)</title><rect x="338" y="1924" width="2" height="15" fill="rgb(241,59,24)"/><text x="341.00" y="1934.50"></text></g><g><title>search (re.py:183) (1 samples, 0.15%)</title><rect x="338" y="1940" width="2" height="15" fill="rgb(236,96,44)"/><text x="341.00" y="1950.50"></text></g><g><title>_compile (re.py:286) (1 samples, 0.15%)</title><rect x="338" y="1956" width="2" height="15" fill="rgb(249,22,1)"/><text x="341.00" y="1966.50"></text></g><g><title>compile (sre_compile.py:768) (1 samples, 0.15%)</title><rect x="338" y="1972" width="2" height="15" fill="rgb(253,71,14)"/><text x="341.00" y="1982.50"></text></g><g><title>_code (sre_compile.py:601) (1 samples, 0.15%)</title><rect x="338" y="1988" width="2" height="15" fill="rgb(216,22,32)"/><text x="341.00" y="1998.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:11) (1 samples, 0.15%)</title><rect x="340" y="1108" width="1" height="15" fill="rgb(229,147,3)"/><text x="343.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="340" y="1124" width="1" height="15" fill="rgb(241,200,44)"/><text x="343.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="340" y="1140" width="1" height="15" fill="rgb(227,48,27)"/><text x="343.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="340" y="1156" width="1" height="15" fill="rgb(228,57,23)"/><text x="343.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="340" y="1172" width="1" height="15" fill="rgb(233,92,27)"/><text x="343.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="340" y="1188" width="1" height="15" fill="rgb(225,6,52)"/><text x="343.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/_parse.py:22) (1 samples, 0.15%)</title><rect x="340" y="1204" width="1" height="15" fill="rgb(210,5,10)"/><text x="343.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="340" y="1220" width="1" height="15" fill="rgb(223,100,44)"/><text x="343.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="340" y="1236" width="1" height="15" fill="rgb(228,52,14)"/><text x="343.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="340" y="1252" width="1" height="15" fill="rgb(225,152,29)"/><text x="343.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="340" y="1268" width="1" height="15" fill="rgb(233,90,0)"/><text x="343.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="340" y="1284" width="1" height="15" fill="rgb(224,175,10)"/><text x="343.00" y="1294.50"></text></g><g><title>&lt;module&gt; (sklearn/neighbors/__init__.py:17) (1 samples, 0.15%)</title><rect x="340" y="1300" width="1" height="15" fill="rgb(210,6,53)"/><text x="343.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="340" y="1316" width="1" height="15" fill="rgb(222,33,11)"/><text x="343.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="340" y="1332" width="1" height="15" fill="rgb(228,163,46)"/><text x="343.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="340" y="1348" width="1" height="15" fill="rgb(235,81,6)"/><text x="343.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="340" y="1364" width="1" height="15" fill="rgb(243,131,40)"/><text x="343.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="340" y="1380" width="1" height="15" fill="rgb(232,104,14)"/><text x="343.00" y="1390.50"></text></g><g><title>&lt;module&gt; (sklearn/neighbors/_nca.py:22) (1 samples, 0.15%)</title><rect x="340" y="1396" width="1" height="15" fill="rgb(239,121,36)"/><text x="343.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="340" y="1412" width="1" height="15" fill="rgb(249,76,50)"/><text x="343.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="340" y="1428" width="1" height="15" fill="rgb(250,55,9)"/><text x="343.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="340" y="1444" width="1" height="15" fill="rgb(228,122,48)"/><text x="343.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="340" y="1460" width="1" height="15" fill="rgb(230,75,27)"/><text x="343.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="340" y="1476" width="1" height="15" fill="rgb(209,84,38)"/><text x="343.00" y="1486.50"></text></g><g><title>&lt;module&gt; (sklearn/decomposition/__init__.py:8) (1 samples, 0.15%)</title><rect x="340" y="1492" width="1" height="15" fill="rgb(232,184,43)"/><text x="343.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:980) (1 samples, 0.15%)</title><rect x="340" y="1508" width="1" height="15" fill="rgb(208,32,48)"/><text x="343.00" y="1518.50"></text></g><g><title>__enter__ (&lt;frozen importlib._bootstrap&gt;:148) (1 samples, 0.15%)</title><rect x="340" y="1524" width="1" height="15" fill="rgb(253,189,54)"/><text x="343.00" y="1534.50"></text></g><g><title>_get_module_lock (&lt;frozen importlib._bootstrap&gt;:174) (1 samples, 0.15%)</title><rect x="340" y="1540" width="1" height="15" fill="rgb(253,221,10)"/><text x="343.00" y="1550.50"></text></g><g><title>__init__ (&lt;frozen importlib._bootstrap&gt;:59) (1 samples, 0.15%)</title><rect x="340" y="1556" width="1" height="15" fill="rgb(242,40,38)"/><text x="343.00" y="1566.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py:159) (1 samples, 0.15%)</title><rect x="341" y="1460" width="2" height="15" fill="rgb(238,132,38)"/><text x="344.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py:153) (1 samples, 0.15%)</title><rect x="341" y="1476" width="2" height="15" fill="rgb(251,127,4)"/><text x="344.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py:118) (1 samples, 0.15%)</title><rect x="341" y="1492" width="2" height="15" fill="rgb(207,205,25)"/><text x="344.00" y="1502.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py:235) (1 samples, 0.15%)</title><rect x="341" y="1508" width="2" height="15" fill="rgb(218,175,11)"/><text x="344.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py:76) (1 samples, 0.15%)</title><rect x="341" y="1524" width="2" height="15" fill="rgb(235,204,46)"/><text x="344.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py:1005) (1 samples, 0.15%)</title><rect x="341" y="1540" width="2" height="15" fill="rgb(233,8,28)"/><text x="344.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.15%)</title><rect x="341" y="1556" width="2" height="15" fill="rgb(227,174,53)"/><text x="344.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;:22) (1 samples, 0.15%)</title><rect x="341" y="1572" width="2" height="15" fill="rgb(222,121,46)"/><text x="344.00" y="1582.50"></text></g><g><title>call (jinja2/runtime.py:262) (1 samples, 0.15%)</title><rect x="341" y="1588" width="2" height="15" fill="rgb(233,196,21)"/><text x="344.00" y="1598.50"></text></g><g><title>format_name_with_domain (skl2onnx/algebra/automation.py:145) (1 samples, 0.15%)</title><rect x="341" y="1604" width="2" height="15" fill="rgb(208,46,2)"/><text x="344.00" y="1614.50"></text></g><g><title>0x7f3669cef0e9 (?) (1 samples, 0.15%)</title><rect x="341" y="1620" width="2" height="15" fill="rgb(207,65,6)"/><text x="344.00" y="1630.50"></text></g><g><title>0x7f3669cf34a1 (?) (1 samples, 0.15%)</title><rect x="341" y="1636" width="2" height="15" fill="rgb(237,218,18)"/><text x="344.00" y="1646.50"></text></g><g><title>0x7f3669cd2ba1 (?) (1 samples, 0.15%)</title><rect x="341" y="1652" width="2" height="15" fill="rgb(230,78,0)"/><text x="344.00" y="1662.50"></text></g><g><title>0x7f3669ce8533 (?) (1 samples, 0.15%)</title><rect x="341" y="1668" width="2" height="15" fill="rgb(241,189,39)"/><text x="344.00" y="1678.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:4) (11 samples, 1.62%)</title><rect x="326" y="52" width="19" height="15" fill="rgb(210,177,40)"/><text x="329.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 1.62%)</title><rect x="326" y="68" width="19" height="15" fill="rgb(238,146,17)"/><text x="329.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 1.62%)</title><rect x="326" y="84" width="19" height="15" fill="rgb(252,70,53)"/><text x="329.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 1.62%)</title><rect x="326" y="100" width="19" height="15" fill="rgb(229,208,35)"/><text x="329.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 1.62%)</title><rect x="326" y="116" width="19" height="15" fill="rgb(231,207,15)"/><text x="329.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 1.62%)</title><rect x="326" y="132" width="19" height="15" fill="rgb(252,129,7)"/><text x="329.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:7) (4 samples, 0.59%)</title><rect x="338" y="148" width="7" height="15" fill="rgb(241,216,0)"/><text x="341.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.59%)</title><rect x="338" y="164" width="7" height="15" fill="rgb(246,92,29)"/><text x="341.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.59%)</title><rect x="338" y="180" width="7" height="15" fill="rgb(212,3,48)"/><text x="341.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.59%)</title><rect x="338" y="196" width="7" height="15" fill="rgb(226,110,23)"/><text x="341.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.59%)</title><rect x="338" y="212" width="7" height="15" fill="rgb(210,153,40)"/><text x="341.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.59%)</title><rect x="338" y="228" width="7" height="15" fill="rgb(251,20,0)"/><text x="341.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (4 samples, 0.59%)</title><rect x="338" y="244" width="7" height="15" fill="rgb(223,171,22)"/><text x="341.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.59%)</title><rect x="338" y="260" width="7" height="15" fill="rgb(229,85,2)"/><text x="341.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.59%)</title><rect x="338" y="276" width="7" height="15" fill="rgb(234,38,9)"/><text x="341.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.59%)</title><rect x="338" y="292" width="7" height="15" fill="rgb(216,13,42)"/><text x="341.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.59%)</title><rect x="338" y="308" width="7" height="15" fill="rgb(228,85,42)"/><text x="341.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.59%)</title><rect x="338" y="324" width="7" height="15" fill="rgb(207,209,38)"/><text x="341.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (4 samples, 0.59%)</title><rect x="338" y="340" width="7" height="15" fill="rgb(254,181,52)"/><text x="341.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.59%)</title><rect x="338" y="356" width="7" height="15" fill="rgb(205,94,5)"/><text x="341.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.59%)</title><rect x="338" y="372" width="7" height="15" fill="rgb(225,15,37)"/><text x="341.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.59%)</title><rect x="338" y="388" width="7" height="15" fill="rgb(254,78,54)"/><text x="341.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.59%)</title><rect x="338" y="404" width="7" height="15" fill="rgb(231,193,12)"/><text x="341.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.59%)</title><rect x="338" y="420" width="7" height="15" fill="rgb(219,73,32)"/><text x="341.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (3 samples, 0.44%)</title><rect x="340" y="436" width="5" height="15" fill="rgb(245,224,29)"/><text x="343.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.44%)</title><rect x="340" y="452" width="5" height="15" fill="rgb(223,167,30)"/><text x="343.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.44%)</title><rect x="340" y="468" width="5" height="15" fill="rgb(223,186,34)"/><text x="343.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.44%)</title><rect x="340" y="484" width="5" height="15" fill="rgb(206,152,29)"/><text x="343.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.44%)</title><rect x="340" y="500" width="5" height="15" fill="rgb(253,138,0)"/><text x="343.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.44%)</title><rect x="340" y="516" width="5" height="15" fill="rgb(223,25,7)"/><text x="343.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.44%)</title><rect x="340" y="532" width="5" height="15" fill="rgb(206,180,34)"/><text x="343.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.44%)</title><rect x="340" y="548" width="5" height="15" fill="rgb(237,127,30)"/><text x="343.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.44%)</title><rect x="340" y="564" width="5" height="15" fill="rgb(219,108,0)"/><text x="343.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (3 samples, 0.44%)</title><rect x="340" y="580" width="5" height="15" fill="rgb(221,212,10)"/><text x="343.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.44%)</title><rect x="340" y="596" width="5" height="15" fill="rgb(238,218,21)"/><text x="343.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.44%)</title><rect x="340" y="612" width="5" height="15" fill="rgb(228,150,25)"/><text x="343.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.44%)</title><rect x="340" y="628" width="5" height="15" fill="rgb(207,47,21)"/><text x="343.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.44%)</title><rect x="340" y="644" width="5" height="15" fill="rgb(254,109,46)"/><text x="343.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.44%)</title><rect x="340" y="660" width="5" height="15" fill="rgb(217,200,13)"/><text x="343.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (3 samples, 0.44%)</title><rect x="340" y="676" width="5" height="15" fill="rgb(234,158,46)"/><text x="343.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.44%)</title><rect x="340" y="692" width="5" height="15" fill="rgb(214,82,43)"/><text x="343.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.44%)</title><rect x="340" y="708" width="5" height="15" fill="rgb(245,201,43)"/><text x="343.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.44%)</title><rect x="340" y="724" width="5" height="15" fill="rgb(248,116,45)"/><text x="343.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.44%)</title><rect x="340" y="740" width="5" height="15" fill="rgb(218,143,35)"/><text x="343.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.44%)</title><rect x="340" y="756" width="5" height="15" fill="rgb(231,104,33)"/><text x="343.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (3 samples, 0.44%)</title><rect x="340" y="772" width="5" height="15" fill="rgb(213,29,21)"/><text x="343.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.44%)</title><rect x="340" y="788" width="5" height="15" fill="rgb(226,108,19)"/><text x="343.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.44%)</title><rect x="340" y="804" width="5" height="15" fill="rgb(225,118,6)"/><text x="343.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.44%)</title><rect x="340" y="820" width="5" height="15" fill="rgb(238,134,28)"/><text x="343.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.44%)</title><rect x="340" y="836" width="5" height="15" fill="rgb(229,101,19)"/><text x="343.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.44%)</title><rect x="340" y="852" width="5" height="15" fill="rgb(244,208,47)"/><text x="343.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (3 samples, 0.44%)</title><rect x="340" y="868" width="5" height="15" fill="rgb(237,196,38)"/><text x="343.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.44%)</title><rect x="340" y="884" width="5" height="15" fill="rgb(235,69,49)"/><text x="343.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.44%)</title><rect x="340" y="900" width="5" height="15" fill="rgb(231,174,24)"/><text x="343.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.44%)</title><rect x="340" y="916" width="5" height="15" fill="rgb(237,144,40)"/><text x="343.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.44%)</title><rect x="340" y="932" width="5" height="15" fill="rgb(226,147,10)"/><text x="343.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.44%)</title><rect x="340" y="948" width="5" height="15" fill="rgb(222,44,16)"/><text x="343.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.44%)</title><rect x="340" y="964" width="5" height="15" fill="rgb(247,132,10)"/><text x="343.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.44%)</title><rect x="340" y="980" width="5" height="15" fill="rgb(237,88,23)"/><text x="343.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.44%)</title><rect x="340" y="996" width="5" height="15" fill="rgb(205,228,8)"/><text x="343.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (3 samples, 0.44%)</title><rect x="340" y="1012" width="5" height="15" fill="rgb(226,69,24)"/><text x="343.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.44%)</title><rect x="340" y="1028" width="5" height="15" fill="rgb(237,4,21)"/><text x="343.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.44%)</title><rect x="340" y="1044" width="5" height="15" fill="rgb(251,165,5)"/><text x="343.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.44%)</title><rect x="340" y="1060" width="5" height="15" fill="rgb(219,66,41)"/><text x="343.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.44%)</title><rect x="340" y="1076" width="5" height="15" fill="rgb(210,140,35)"/><text x="343.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.44%)</title><rect x="340" y="1092" width="5" height="15" fill="rgb(254,162,51)"/><text x="343.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (2 samples, 0.29%)</title><rect x="341" y="1108" width="4" height="15" fill="rgb(219,200,52)"/><text x="344.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.29%)</title><rect x="341" y="1124" width="4" height="15" fill="rgb(247,8,36)"/><text x="344.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.29%)</title><rect x="341" y="1140" width="4" height="15" fill="rgb(219,226,11)"/><text x="344.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.29%)</title><rect x="341" y="1156" width="4" height="15" fill="rgb(226,80,7)"/><text x="344.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.29%)</title><rect x="341" y="1172" width="4" height="15" fill="rgb(229,39,42)"/><text x="344.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.29%)</title><rect x="341" y="1188" width="4" height="15" fill="rgb(210,185,40)"/><text x="344.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.29%)</title><rect x="341" y="1204" width="4" height="15" fill="rgb(211,169,52)"/><text x="344.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.29%)</title><rect x="341" y="1220" width="4" height="15" fill="rgb(245,74,3)"/><text x="344.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (2 samples, 0.29%)</title><rect x="341" y="1236" width="4" height="15" fill="rgb(234,221,23)"/><text x="344.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (2 samples, 0.29%)</title><rect x="341" y="1252" width="4" height="15" fill="rgb(250,167,22)"/><text x="344.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.29%)</title><rect x="341" y="1268" width="4" height="15" fill="rgb(208,26,51)"/><text x="344.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.29%)</title><rect x="341" y="1284" width="4" height="15" fill="rgb(235,75,29)"/><text x="344.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.29%)</title><rect x="341" y="1300" width="4" height="15" fill="rgb(226,199,37)"/><text x="344.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.29%)</title><rect x="341" y="1316" width="4" height="15" fill="rgb(253,43,30)"/><text x="344.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.29%)</title><rect x="341" y="1332" width="4" height="15" fill="rgb(253,148,9)"/><text x="344.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.29%)</title><rect x="341" y="1348" width="4" height="15" fill="rgb(234,159,22)"/><text x="344.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (2 samples, 0.29%)</title><rect x="341" y="1364" width="4" height="15" fill="rgb(246,19,19)"/><text x="344.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.29%)</title><rect x="341" y="1380" width="4" height="15" fill="rgb(249,163,1)"/><text x="344.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.29%)</title><rect x="341" y="1396" width="4" height="15" fill="rgb(236,229,9)"/><text x="344.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.29%)</title><rect x="341" y="1412" width="4" height="15" fill="rgb(242,185,22)"/><text x="344.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.29%)</title><rect x="341" y="1428" width="4" height="15" fill="rgb(242,101,10)"/><text x="344.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.29%)</title><rect x="341" y="1444" width="4" height="15" fill="rgb(234,120,28)"/><text x="344.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py:6) (1 samples, 0.15%)</title><rect x="343" y="1460" width="2" height="15" fill="rgb(240,1,8)"/><text x="346.00" y="1470.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="343" y="1476" width="2" height="15" fill="rgb(206,168,19)"/><text x="346.00" y="1486.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="343" y="1492" width="2" height="15" fill="rgb(231,180,14)"/><text x="346.00" y="1502.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="343" y="1508" width="2" height="15" fill="rgb(219,5,44)"/><text x="346.00" y="1518.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="343" y="1524" width="2" height="15" fill="rgb(231,189,35)"/><text x="346.00" y="1534.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="343" y="1540" width="2" height="15" fill="rgb(210,89,2)"/><text x="346.00" y="1550.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/automation.py:104) (1 samples, 0.15%)</title><rect x="343" y="1556" width="2" height="15" fill="rgb(224,61,49)"/><text x="346.00" y="1566.50"></text></g><g><title>_get_doc_template (skl2onnx/algebra/automation.py:14) (1 samples, 0.15%)</title><rect x="343" y="1572" width="2" height="15" fill="rgb(246,31,28)"/><text x="346.00" y="1582.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="343" y="1588" width="2" height="15" fill="rgb(237,117,7)"/><text x="346.00" y="1598.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="343" y="1604" width="2" height="15" fill="rgb(228,209,13)"/><text x="346.00" y="1614.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="343" y="1620" width="2" height="15" fill="rgb(237,39,26)"/><text x="346.00" y="1630.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="343" y="1636" width="2" height="15" fill="rgb(218,63,34)"/><text x="346.00" y="1646.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="343" y="1652" width="2" height="15" fill="rgb(215,116,11)"/><text x="346.00" y="1662.50"></text></g><g><title>&lt;module&gt; (jinja2/__init__.py:82) (1 samples, 0.15%)</title><rect x="343" y="1668" width="2" height="15" fill="rgb(208,174,39)"/><text x="346.00" y="1678.50"></text></g><g><title>_patch_async (jinja2/__init__.py:78) (1 samples, 0.15%)</title><rect x="343" y="1684" width="2" height="15" fill="rgb(227,109,34)"/><text x="346.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="343" y="1700" width="2" height="15" fill="rgb(223,169,19)"/><text x="346.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="343" y="1716" width="2" height="15" fill="rgb(224,192,47)"/><text x="346.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="343" y="1732" width="2" height="15" fill="rgb(249,87,5)"/><text x="346.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="343" y="1748" width="2" height="15" fill="rgb(250,161,36)"/><text x="346.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="343" y="1764" width="2" height="15" fill="rgb(221,216,37)"/><text x="346.00" y="1774.50"></text></g><g><title>&lt;module&gt; (jinja2/asyncsupport.py:13) (1 samples, 0.15%)</title><rect x="343" y="1780" width="2" height="15" fill="rgb(233,108,39)"/><text x="346.00" y="1790.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="343" y="1796" width="2" height="15" fill="rgb(211,113,35)"/><text x="346.00" y="1806.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="343" y="1812" width="2" height="15" fill="rgb(228,51,47)"/><text x="346.00" y="1822.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="343" y="1828" width="2" height="15" fill="rgb(206,101,17)"/><text x="346.00" y="1838.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.15%)</title><rect x="343" y="1844" width="2" height="15" fill="rgb(208,188,0)"/><text x="346.00" y="1854.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.15%)</title><rect x="343" y="1860" width="2" height="15" fill="rgb(248,167,24)"/><text x="346.00" y="1870.50"></text></g><g><title>&lt;module&gt; (asyncio/__init__.py:16) (1 samples, 0.15%)</title><rect x="343" y="1876" width="2" height="15" fill="rgb(247,178,18)"/><text x="346.00" y="1886.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.15%)</title><rect x="343" y="1892" width="2" height="15" fill="rgb(223,39,14)"/><text x="346.00" y="1902.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.15%)</title><rect x="343" y="1908" width="2" height="15" fill="rgb(228,113,11)"/><text x="346.00" y="1918.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.15%)</title><rect x="343" y="1924" width="2" height="15" fill="rgb(223,208,2)"/><text x="346.00" y="1934.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 0.15%)</title><rect x="343" y="1940" width="2" height="15" fill="rgb(216,200,6)"/><text x="346.00" y="1950.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:857) (1 samples, 0.15%)</title><rect x="343" y="1956" width="2" height="15" fill="rgb(250,209,51)"/><text x="346.00" y="1966.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:525) (1 samples, 0.15%)</title><rect x="343" y="1972" width="2" height="15" fill="rgb(231,227,37)"/><text x="346.00" y="1982.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py:19) (1 samples, 0.15%)</title><rect x="347" y="228" width="1" height="15" fill="rgb(237,78,53)"/><text x="350.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="347" y="244" width="1" height="15" fill="rgb(248,111,49)"/><text x="350.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.15%)</title><rect x="347" y="260" width="1" height="15" fill="rgb(226,47,53)"/><text x="350.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (1 samples, 0.15%)</title><rect x="347" y="276" width="1" height="15" fill="rgb(233,81,36)"/><text x="350.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (1 samples, 0.15%)</title><rect x="347" y="292" width="1" height="15" fill="rgb(208,203,21)"/><text x="350.00" y="302.50"></text></g><g><title>FLOAT_maximum (loops.c.src:1871) (1 samples, 0.15%)</title><rect x="347" y="308" width="1" height="15" fill="rgb(207,227,10)"/><text x="350.00" y="318.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (2 samples, 0.29%)</title><rect x="347" y="196" width="3" height="15" fill="rgb(242,65,53)"/><text x="350.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (2 samples, 0.29%)</title><rect x="347" y="212" width="3" height="15" fill="rgb(238,170,5)"/><text x="350.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:24) (1 samples, 0.15%)</title><rect x="348" y="228" width="2" height="15" fill="rgb(210,218,31)"/><text x="351.00" y="238.50"></text></g><g><title>array_sum (methods.c:2215) (1 samples, 0.15%)</title><rect x="348" y="244" width="2" height="15" fill="rgb(249,195,21)"/><text x="351.00" y="254.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (1 samples, 0.15%)</title><rect x="348" y="260" width="2" height="15" fill="rgb(232,143,41)"/><text x="351.00" y="270.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (1 samples, 0.15%)</title><rect x="348" y="276" width="2" height="15" fill="rgb(222,158,48)"/><text x="351.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (1 samples, 0.15%)</title><rect x="348" y="292" width="2" height="15" fill="rgb(209,74,22)"/><text x="351.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (1 samples, 0.15%)</title><rect x="348" y="308" width="2" height="15" fill="rgb(222,225,26)"/><text x="351.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (1 samples, 0.15%)</title><rect x="348" y="324" width="2" height="15" fill="rgb(232,79,25)"/><text x="351.00" y="334.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (1 samples, 0.15%)</title><rect x="348" y="340" width="2" height="15" fill="rgb(222,1,48)"/><text x="351.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (1 samples, 0.15%)</title><rect x="348" y="356" width="2" height="15" fill="rgb(208,77,35)"/><text x="351.00" y="366.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2175) (1 samples, 0.15%)</title><rect x="348" y="372" width="2" height="15" fill="rgb(239,98,10)"/><text x="351.00" y="382.50"></text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:18) (4 samples, 0.59%)</title><rect x="345" y="100" width="7" height="15" fill="rgb(212,222,23)"/><text x="348.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (4 samples, 0.59%)</title><rect x="345" y="116" width="7" height="15" fill="rgb(220,6,45)"/><text x="348.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (4 samples, 0.59%)</title><rect x="345" y="132" width="7" height="15" fill="rgb(243,56,30)"/><text x="348.00" y="142.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (4 samples, 0.59%)</title><rect x="345" y="148" width="7" height="15" fill="rgb(241,192,40)"/><text x="348.00" y="158.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (4 samples, 0.59%)</title><rect x="345" y="164" width="7" height="15" fill="rgb(208,196,54)"/><text x="348.00" y="174.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (4 samples, 0.59%)</title><rect x="345" y="180" width="7" height="15" fill="rgb(213,122,9)"/><text x="348.00" y="190.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (1 samples, 0.15%)</title><rect x="350" y="196" width="2" height="15" fill="rgb(246,150,29)"/><text x="353.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (1 samples, 0.15%)</title><rect x="350" y="212" width="2" height="15" fill="rgb(215,45,17)"/><text x="353.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (1 samples, 0.15%)</title><rect x="350" y="228" width="2" height="15" fill="rgb(210,1,21)"/><text x="353.00" y="238.50"></text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:40) (1 samples, 0.15%)</title><rect x="350" y="244" width="2" height="15" fill="rgb(253,73,5)"/><text x="353.00" y="254.50"></text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (1 samples, 0.15%)</title><rect x="350" y="260" width="2" height="15" fill="rgb(222,111,31)"/><text x="353.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (1 samples, 0.15%)</title><rect x="350" y="276" width="2" height="15" fill="rgb(243,222,42)"/><text x="353.00" y="286.50"></text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (1 samples, 0.15%)</title><rect x="350" y="292" width="2" height="15" fill="rgb(219,79,35)"/><text x="353.00" y="302.50"></text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (1 samples, 0.15%)</title><rect x="350" y="308" width="2" height="15" fill="rgb(226,199,41)"/><text x="353.00" y="318.50"></text></g><g><title>cblas_matrixproduct (cblasfuncs.c:674) (1 samples, 0.15%)</title><rect x="350" y="324" width="2" height="15" fill="rgb(241,151,10)"/><text x="353.00" y="334.50"></text></g><g><title>gemm (cblasfuncs.c:40) (1 samples, 0.15%)</title><rect x="350" y="340" width="2" height="15" fill="rgb(235,17,47)"/><text x="353.00" y="350.50"></text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="350" y="356" width="2" height="15" fill="rgb(248,162,31)"/><text x="353.00" y="366.50"></text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="350" y="372" width="2" height="15" fill="rgb(249,34,34)"/><text x="353.00" y="382.50"></text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="350" y="388" width="2" height="15" fill="rgb(211,122,28)"/><text x="353.00" y="398.50"></text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="350" y="404" width="2" height="15" fill="rgb(216,220,10)"/><text x="353.00" y="414.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.15%)</title><rect x="350" y="420" width="2" height="15" fill="rgb(253,190,8)"/><text x="353.00" y="430.50"></text></g><g><title>sched_yield (libc-2.29.so) (1 samples, 0.15%)</title><rect x="350" y="436" width="2" height="15" fill="rgb(232,1,16)"/><text x="353.00" y="446.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (1 samples, 0.15%)</title><rect x="357" y="164" width="2" height="15" fill="rgb(241,65,22)"/><text x="360.00" y="174.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (2 samples, 0.29%)</title><rect x="364" y="180" width="3" height="15" fill="rgb(210,87,18)"/><text x="367.00" y="190.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (1 samples, 0.15%)</title><rect x="367" y="180" width="2" height="15" fill="rgb(237,83,40)"/><text x="370.00" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:39) (1 samples, 0.15%)</title><rect x="373" y="212" width="1" height="15" fill="rgb(213,13,15)"/><text x="376.00" y="222.50"></text></g><g><title>PyArray_ToList (convert.c:120) (1 samples, 0.15%)</title><rect x="373" y="228" width="1" height="15" fill="rgb(207,19,36)"/><text x="376.00" y="238.50"></text></g><g><title>recursive_tolist (convert.c:102) (1 samples, 0.15%)</title><rect x="373" y="244" width="1" height="15" fill="rgb(206,59,37)"/><text x="376.00" y="254.50"></text></g><g><title>LONG_getitem (arraytypes.c.src:196) (1 samples, 0.15%)</title><rect x="373" y="260" width="1" height="15" fill="rgb(220,59,39)"/><text x="376.00" y="270.50"></text></g><g><title>prepare_index (mapping.c:491) (1 samples, 0.15%)</title><rect x="374" y="244" width="2" height="15" fill="rgb(214,84,6)"/><text x="377.00" y="254.50"></text></g><g><title>PyArray_PyIntAsIntp (conversion_utils.c:909) (1 samples, 0.15%)</title><rect x="374" y="260" width="2" height="15" fill="rgb(222,127,23)"/><text x="377.00" y="270.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:864) (1 samples, 0.15%)</title><rect x="374" y="276" width="2" height="15" fill="rgb(239,179,48)"/><text x="377.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:138) (1 samples, 0.15%)</title><rect x="376" y="324" width="2" height="15" fill="rgb(205,202,11)"/><text x="379.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c:44) (1 samples, 0.15%)</title><rect x="378" y="340" width="2" height="15" fill="rgb(206,177,5)"/><text x="381.00" y="350.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:212) (5 samples, 0.74%)</title><rect x="378" y="324" width="9" height="15" fill="rgb(226,120,45)"/><text x="381.00" y="334.50"></text></g><g><title>_array_find_python_scalar_type (common.c:47) (4 samples, 0.59%)</title><rect x="380" y="340" width="7" height="15" fill="rgb(235,208,51)"/><text x="383.00" y="350.50"></text></g><g><title>PyInt_Check (npy_3kcompat.h:37) (1 samples, 0.15%)</title><rect x="385" y="356" width="2" height="15" fill="rgb(219,71,31)"/><text x="388.00" y="366.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1723) (7 samples, 1.03%)</title><rect x="376" y="276" width="12" height="15" fill="rgb(229,191,50)"/><text x="379.00" y="286.50"></text></g><g><title>PyArray_DTypeFromObject (common.c:108) (7 samples, 1.03%)</title><rect x="376" y="292" width="12" height="15" fill="rgb(243,207,14)"/><text x="379.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:480) (7 samples, 1.03%)</title><rect x="376" y="308" width="12" height="15" fill="rgb(219,127,13)"/><text x="379.00" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c:511) (1 samples, 0.15%)</title><rect x="387" y="324" width="1" height="15" fill="rgb(249,12,16)"/><text x="390.00" y="334.50"></text></g><g><title>discover_dimensions (ctors.c:878) (1 samples, 0.15%)</title><rect x="388" y="292" width="2" height="15" fill="rgb(218,196,41)"/><text x="391.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c:703) (2 samples, 0.29%)</title><rect x="390" y="308" width="4" height="15" fill="rgb(232,70,5)"/><text x="393.00" y="318.50"></text></g><g><title>0x7f3678e56a40 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="392" y="324" width="2" height="15" fill="rgb(209,107,9)"/><text x="395.00" y="334.50"></text></g><g><title>discover_dimensions (ctors.c:884) (3 samples, 0.44%)</title><rect x="390" y="292" width="5" height="15" fill="rgb(232,142,9)"/><text x="393.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c:912) (1 samples, 0.15%)</title><rect x="394" y="308" width="1" height="15" fill="rgb(228,207,5)"/><text x="397.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (12 samples, 1.77%)</title><rect x="376" y="260" width="21" height="15" fill="rgb(225,181,25)"/><text x="379.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (5 samples, 0.74%)</title><rect x="388" y="276" width="9" height="15" fill="rgb(221,163,46)"/><text x="391.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c:892) (1 samples, 0.15%)</title><rect x="395" y="292" width="2" height="15" fill="rgb(218,158,49)"/><text x="398.00" y="302.50"></text></g><g><title>setArrayFromSequence (ctors.c:536) (2 samples, 0.29%)</title><rect x="397" y="292" width="4" height="15" fill="rgb(249,199,53)"/><text x="400.00" y="302.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:208) (1 samples, 0.15%)</title><rect x="401" y="324" width="1" height="15" fill="rgb(211,185,19)"/><text x="404.00" y="334.50"></text></g><g><title>array_subscript (mapping.c:1539) (18 samples, 2.65%)</title><rect x="374" y="228" width="32" height="15" fill="rgb(215,212,8)"/><text x="377.00" y="238.50">ar..</text></g><g><title>prepare_index (mapping.c:516) (17 samples, 2.50%)</title><rect x="376" y="244" width="30" height="15" fill="rgb(207,108,33)"/><text x="379.00" y="254.50">pr..</text></g><g><title>PyArray_FromAny (ctors.c:1938) (5 samples, 0.74%)</title><rect x="397" y="260" width="9" height="15" fill="rgb(232,150,11)"/><text x="400.00" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (5 samples, 0.74%)</title><rect x="397" y="276" width="9" height="15" fill="rgb(230,210,17)"/><text x="400.00" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c:550) (3 samples, 0.44%)</title><rect x="401" y="292" width="5" height="15" fill="rgb(214,95,12)"/><text x="404.00" y="302.50"></text></g><g><title>PyArray_SETITEM (ndarraytypes.h:1565) (3 samples, 0.44%)</title><rect x="401" y="308" width="5" height="15" fill="rgb(236,20,47)"/><text x="404.00" y="318.50"></text></g><g><title>LONG_setitem (arraytypes.c.src:216) (2 samples, 0.29%)</title><rect x="402" y="324" width="4" height="15" fill="rgb(249,41,40)"/><text x="405.00" y="334.50"></text></g><g><title>MyPyLong_AsLong (arraytypes.c.src:119) (2 samples, 0.29%)</title><rect x="402" y="340" width="4" height="15" fill="rgb(224,75,47)"/><text x="405.00" y="350.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1593) (2 samples, 0.29%)</title><rect x="406" y="244" width="3" height="15" fill="rgb(212,218,23)"/><text x="409.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (21 samples, 3.09%)</title><rect x="374" y="212" width="37" height="15" fill="rgb(222,3,22)"/><text x="377.00" y="222.50">_ru..</text></g><g><title>array_subscript (mapping.c:1676) (3 samples, 0.44%)</title><rect x="406" y="228" width="5" height="15" fill="rgb(232,51,36)"/><text x="409.00" y="238.50"></text></g><g><title>mapiter_get (lowlevel_strided_loops.c.src:1609) (1 samples, 0.15%)</title><rect x="409" y="244" width="2" height="15" fill="rgb(239,173,43)"/><text x="412.00" y="254.50"></text></g><g><title>array_astype (methods.c:841) (1 samples, 0.15%)</title><rect x="411" y="244" width="2" height="15" fill="rgb(219,17,34)"/><text x="414.00" y="254.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (1 samples, 0.15%)</title><rect x="411" y="260" width="2" height="15" fill="rgb(208,20,26)"/><text x="414.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (1 samples, 0.15%)</title><rect x="411" y="276" width="2" height="15" fill="rgb(246,74,41)"/><text x="414.00" y="286.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (1 samples, 0.15%)</title><rect x="411" y="292" width="2" height="15" fill="rgb(244,15,1)"/><text x="414.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (1 samples, 0.15%)</title><rect x="411" y="308" width="2" height="15" fill="rgb(214,57,53)"/><text x="414.00" y="318.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (1 samples, 0.15%)</title><rect x="411" y="324" width="2" height="15" fill="rgb(209,139,36)"/><text x="414.00" y="334.50"></text></g><g><title>0x7f3678e562c0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.15%)</title><rect x="411" y="340" width="2" height="15" fill="rgb(233,10,35)"/><text x="414.00" y="350.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (1 samples, 0.15%)</title><rect x="413" y="276" width="1" height="15" fill="rgb(219,185,5)"/><text x="416.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:37) (3 samples, 0.44%)</title><rect x="411" y="212" width="5" height="15" fill="rgb(209,151,24)"/><text x="414.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (3 samples, 0.44%)</title><rect x="411" y="228" width="5" height="15" fill="rgb(244,40,47)"/><text x="414.00" y="238.50"></text></g><g><title>array_astype (methods.c:845) (2 samples, 0.29%)</title><rect x="413" y="244" width="3" height="15" fill="rgb(236,64,44)"/><text x="416.00" y="254.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (2 samples, 0.29%)</title><rect x="413" y="260" width="3" height="15" fill="rgb(250,7,9)"/><text x="416.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (1 samples, 0.15%)</title><rect x="414" y="276" width="2" height="15" fill="rgb(231,138,33)"/><text x="417.00" y="286.50"></text></g><g><title>0x7f3679c53d94 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="414" y="292" width="2" height="15" fill="rgb(213,221,2)"/><text x="417.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (26 samples, 3.83%)</title><rect x="373" y="196" width="45" height="15" fill="rgb(225,126,0)"/><text x="376.00" y="206.50">run ..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_zipmap.py:166) (1 samples, 0.15%)</title><rect x="416" y="212" width="2" height="15" fill="rgb(233,51,25)"/><text x="419.00" y="222.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:13) (2 samples, 0.29%)</title><rect x="418" y="260" width="3" height="15" fill="rgb(220,84,42)"/><text x="421.00" y="270.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (2 samples, 0.29%)</title><rect x="418" y="276" width="3" height="15" fill="rgb(224,218,49)"/><text x="421.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (2 samples, 0.29%)</title><rect x="418" y="292" width="3" height="15" fill="rgb(246,149,24)"/><text x="421.00" y="302.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py:1153) (2 samples, 0.29%)</title><rect x="418" y="308" width="3" height="15" fill="rgb(229,34,39)"/><text x="421.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (2 samples, 0.29%)</title><rect x="418" y="324" width="3" height="15" fill="rgb(205,120,34)"/><text x="421.00" y="334.50"></text></g><g><title>array_argmax (methods.c:302) (2 samples, 0.29%)</title><rect x="418" y="340" width="3" height="15" fill="rgb(208,198,51)"/><text x="421.00" y="350.50"></text></g><g><title>PyArray_ArgMax (calculation.c:131) (2 samples, 0.29%)</title><rect x="418" y="356" width="3" height="15" fill="rgb(219,17,37)"/><text x="421.00" y="366.50"></text></g><g><title>FLOAT_argmax (arraytypes.c.src:3094) (2 samples, 0.29%)</title><rect x="418" y="372" width="3" height="15" fill="rgb(235,95,14)"/><text x="421.00" y="382.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:14) (1 samples, 0.15%)</title><rect x="421" y="260" width="2" height="15" fill="rgb(216,172,12)"/><text x="424.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:312) (4 samples, 0.59%)</title><rect x="418" y="196" width="7" height="15" fill="rgb(229,103,0)"/><text x="421.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (4 samples, 0.59%)</title><rect x="418" y="212" width="7" height="15" fill="rgb(228,196,49)"/><text x="421.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (4 samples, 0.59%)</title><rect x="418" y="228" width="7" height="15" fill="rgb(249,126,41)"/><text x="421.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (4 samples, 0.59%)</title><rect x="418" y="244" width="7" height="15" fill="rgb(244,35,38)"/><text x="421.00" y="254.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:15) (1 samples, 0.15%)</title><rect x="423" y="260" width="2" height="15" fill="rgb(254,29,14)"/><text x="426.00" y="270.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (1 samples, 0.15%)</title><rect x="423" y="276" width="2" height="15" fill="rgb(235,6,39)"/><text x="426.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (1 samples, 0.15%)</title><rect x="423" y="292" width="2" height="15" fill="rgb(250,152,39)"/><text x="426.00" y="302.50"></text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c:89) (1 samples, 0.15%)</title><rect x="423" y="308" width="2" height="15" fill="rgb(210,208,18)"/><text x="426.00" y="318.50"></text></g><g><title>get_array_function (arrayfunction_override.c:30) (1 samples, 0.15%)</title><rect x="423" y="324" width="2" height="15" fill="rgb(219,224,44)"/><text x="426.00" y="334.50"></text></g><g><title>FLOAT_maximum (loops.c.src:1867) (16 samples, 2.36%)</title><rect x="427" y="308" width="27" height="15" fill="rgb(217,102,36)"/><text x="430.00" y="318.50">F..</text></g><g><title>FLOAT_maximum (loops.c.src:1868) (2 samples, 0.29%)</title><rect x="454" y="308" width="4" height="15" fill="rgb(240,60,15)"/><text x="457.00" y="318.50"></text></g><g><title>FLOAT_maximum (loops.c.src:1869) (3 samples, 0.44%)</title><rect x="458" y="308" width="5" height="15" fill="rgb(251,76,48)"/><text x="461.00" y="318.50"></text></g><g><title>FLOAT_maximum (loops.c.src:1871) (22 samples, 3.24%)</title><rect x="463" y="308" width="38" height="15" fill="rgb(242,215,34)"/><text x="466.00" y="318.50">FLO..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py:19) (45 samples, 6.63%)</title><rect x="427" y="228" width="78" height="15" fill="rgb(206,90,44)"/><text x="430.00" y="238.50">_run (mlp..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (45 samples, 6.63%)</title><rect x="427" y="244" width="78" height="15" fill="rgb(226,7,26)"/><text x="430.00" y="254.50">ufunc_gen..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (45 samples, 6.63%)</title><rect x="427" y="260" width="78" height="15" fill="rgb(216,66,42)"/><text x="430.00" y="270.50">PyUFunc_G..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (45 samples, 6.63%)</title><rect x="427" y="276" width="78" height="15" fill="rgb(242,173,51)"/><text x="430.00" y="286.50">execute_l..</text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (45 samples, 6.63%)</title><rect x="427" y="292" width="78" height="15" fill="rgb(215,154,19)"/><text x="430.00" y="302.50">trivial_t..</text></g><g><title>FLOAT_maximum (loops.c.src:1872) (2 samples, 0.29%)</title><rect x="501" y="308" width="4" height="15" fill="rgb(243,153,10)"/><text x="504.00" y="318.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (1 samples, 0.15%)</title><rect x="505" y="292" width="2" height="15" fill="rgb(205,86,28)"/><text x="508.00" y="302.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (1 samples, 0.15%)</title><rect x="505" y="308" width="2" height="15" fill="rgb(208,7,10)"/><text x="508.00" y="318.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (1 samples, 0.15%)</title><rect x="505" y="324" width="2" height="15" fill="rgb(228,150,44)"/><text x="508.00" y="334.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:37) (1 samples, 0.15%)</title><rect x="505" y="340" width="2" height="15" fill="rgb(238,100,54)"/><text x="508.00" y="350.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h:106) (1 samples, 0.15%)</title><rect x="505" y="356" width="2" height="15" fill="rgb(210,198,10)"/><text x="508.00" y="366.50"></text></g><g><title>maybe_get_attr (get_attr_string.h:76) (1 samples, 0.15%)</title><rect x="505" y="372" width="2" height="15" fill="rgb(243,110,23)"/><text x="508.00" y="382.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.15%)</title><rect x="505" y="388" width="2" height="15" fill="rgb(253,44,40)"/><text x="508.00" y="398.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:500) (1 samples, 0.15%)</title><rect x="507" y="340" width="1" height="15" fill="rgb(225,204,36)"/><text x="510.00" y="350.50"></text></g><g><title>PyArray_InitializeReduceResult (reduction.c:351) (1 samples, 0.15%)</title><rect x="507" y="356" width="1" height="15" fill="rgb(245,19,15)"/><text x="510.00" y="366.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (1 samples, 0.15%)</title><rect x="507" y="372" width="1" height="15" fill="rgb(220,213,42)"/><text x="510.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (1 samples, 0.15%)</title><rect x="507" y="388" width="1" height="15" fill="rgb(253,224,18)"/><text x="510.00" y="398.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (1 samples, 0.15%)</title><rect x="507" y="404" width="1" height="15" fill="rgb(222,177,54)"/><text x="510.00" y="414.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.15%)</title><rect x="507" y="420" width="1" height="15" fill="rgb(213,90,6)"/><text x="510.00" y="430.50"></text></g><g><title>reduce_loop (ufunc_object.c:3535) (1 samples, 0.15%)</title><rect x="508" y="356" width="2" height="15" fill="rgb(228,215,4)"/><text x="511.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:794) (1 samples, 0.15%)</title><rect x="510" y="436" width="2" height="15" fill="rgb(208,70,20)"/><text x="513.00" y="446.50"></text></g><g><title>array_max (methods.c:323) (6 samples, 0.88%)</title><rect x="505" y="244" width="10" height="15" fill="rgb(228,56,18)"/><text x="508.00" y="254.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (6 samples, 0.88%)</title><rect x="505" y="260" width="10" height="15" fill="rgb(208,72,8)"/><text x="508.00" y="270.50"></text></g><g><title>_amax (numpy/core/_methods.py:30) (6 samples, 0.88%)</title><rect x="505" y="276" width="10" height="15" fill="rgb(236,135,9)"/><text x="508.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (5 samples, 0.74%)</title><rect x="507" y="292" width="8" height="15" fill="rgb(209,224,13)"/><text x="510.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (5 samples, 0.74%)</title><rect x="507" y="308" width="8" height="15" fill="rgb(208,197,23)"/><text x="510.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (5 samples, 0.74%)</title><rect x="507" y="324" width="8" height="15" fill="rgb(230,109,23)"/><text x="510.00" y="334.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (4 samples, 0.59%)</title><rect x="508" y="340" width="7" height="15" fill="rgb(245,174,48)"/><text x="511.00" y="350.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (3 samples, 0.44%)</title><rect x="510" y="356" width="5" height="15" fill="rgb(246,104,22)"/><text x="513.00" y="366.50"></text></g><g><title>FLOAT_maximum (loops.c.src:1857) (3 samples, 0.44%)</title><rect x="510" y="372" width="5" height="15" fill="rgb(249,148,39)"/><text x="513.00" y="382.50"></text></g><g><title>run_unary_reduce_simd_maximum_FLOAT (simd.inc.src:195) (3 samples, 0.44%)</title><rect x="510" y="388" width="5" height="15" fill="rgb(243,12,4)"/><text x="513.00" y="398.50"></text></g><g><title>sse2_maximum_FLOAT (simd.inc.src:1117) (3 samples, 0.44%)</title><rect x="510" y="404" width="5" height="15" fill="rgb(233,225,23)"/><text x="513.00" y="414.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (3 samples, 0.44%)</title><rect x="510" y="420" width="5" height="15" fill="rgb(208,16,10)"/><text x="513.00" y="430.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (2 samples, 0.29%)</title><rect x="512" y="436" width="3" height="15" fill="rgb(252,128,9)"/><text x="515.00" y="446.50"></text></g><g><title>fetestexcept (libm-2.29.so) (2 samples, 0.29%)</title><rect x="512" y="452" width="3" height="15" fill="rgb(234,106,43)"/><text x="515.00" y="462.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:22) (7 samples, 1.03%)</title><rect x="505" y="228" width="12" height="15" fill="rgb(215,15,35)"/><text x="508.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="515" y="244" width="2" height="15" fill="rgb(236,94,0)"/><text x="518.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.15%)</title><rect x="515" y="260" width="2" height="15" fill="rgb(217,189,52)"/><text x="518.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (1 samples, 0.15%)</title><rect x="515" y="276" width="2" height="15" fill="rgb(226,160,11)"/><text x="518.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (1 samples, 0.15%)</title><rect x="515" y="292" width="2" height="15" fill="rgb(242,51,29)"/><text x="518.00" y="302.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (1 samples, 0.15%)</title><rect x="515" y="308" width="2" height="15" fill="rgb(240,224,48)"/><text x="518.00" y="318.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (1 samples, 0.15%)</title><rect x="515" y="324" width="2" height="15" fill="rgb(219,224,52)"/><text x="518.00" y="334.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (1 samples, 0.15%)</title><rect x="515" y="340" width="2" height="15" fill="rgb(211,100,21)"/><text x="518.00" y="350.50"></text></g><g><title>_aligned_strided_to_contig_size4_srcstride0 (lowlevel_strided_loops.c.src:226) (1 samples, 0.15%)</title><rect x="515" y="356" width="2" height="15" fill="rgb(235,165,43)"/><text x="518.00" y="366.50"></text></g><g><title>0x7f3679db2e0e (libm-2.29.so) (1 samples, 0.15%)</title><rect x="520" y="340" width="2" height="15" fill="rgb(218,101,30)"/><text x="523.00" y="350.50"></text></g><g><title>0x7f3679db2e62 (libm-2.29.so) (1 samples, 0.15%)</title><rect x="522" y="340" width="2" height="15" fill="rgb(252,60,9)"/><text x="525.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:23) (7 samples, 1.03%)</title><rect x="517" y="228" width="12" height="15" fill="rgb(242,115,50)"/><text x="520.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (7 samples, 1.03%)</title><rect x="517" y="244" width="12" height="15" fill="rgb(218,217,52)"/><text x="520.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (7 samples, 1.03%)</title><rect x="517" y="260" width="12" height="15" fill="rgb(216,100,31)"/><text x="520.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (7 samples, 1.03%)</title><rect x="517" y="276" width="12" height="15" fill="rgb(231,116,36)"/><text x="520.00" y="286.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (7 samples, 1.03%)</title><rect x="517" y="292" width="12" height="15" fill="rgb(239,33,24)"/><text x="520.00" y="302.50"></text></g><g><title>FLOAT_exp (loops.c.src:1602) (7 samples, 1.03%)</title><rect x="517" y="308" width="12" height="15" fill="rgb(206,139,49)"/><text x="520.00" y="318.50"></text></g><g><title>expf (libm-2.29.so) (6 samples, 0.88%)</title><rect x="519" y="324" width="10" height="15" fill="rgb(240,20,47)"/><text x="522.00" y="334.50"></text></g><g><title>0x7f3679db2ea6 (libm-2.29.so) (3 samples, 0.44%)</title><rect x="524" y="340" width="5" height="15" fill="rgb(218,209,47)"/><text x="527.00" y="350.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (1 samples, 0.15%)</title><rect x="531" y="324" width="2" height="15" fill="rgb(248,93,21)"/><text x="534.00" y="334.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (1 samples, 0.15%)</title><rect x="531" y="340" width="2" height="15" fill="rgb(241,157,20)"/><text x="534.00" y="350.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (1 samples, 0.15%)</title><rect x="531" y="356" width="2" height="15" fill="rgb(254,221,8)"/><text x="534.00" y="366.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2076) (1 samples, 0.15%)</title><rect x="531" y="372" width="2" height="15" fill="rgb(242,75,51)"/><text x="534.00" y="382.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c:1791) (1 samples, 0.15%)</title><rect x="531" y="388" width="2" height="15" fill="rgb(246,79,51)"/><text x="534.00" y="398.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (1 samples, 0.15%)</title><rect x="533" y="340" width="1" height="15" fill="rgb(215,78,5)"/><text x="536.00" y="350.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (1 samples, 0.15%)</title><rect x="533" y="356" width="1" height="15" fill="rgb(233,11,39)"/><text x="536.00" y="366.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (1 samples, 0.15%)</title><rect x="533" y="372" width="1" height="15" fill="rgb(223,85,36)"/><text x="536.00" y="382.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.15%)</title><rect x="533" y="388" width="1" height="15" fill="rgb(217,136,20)"/><text x="536.00" y="398.50"></text></g><g><title>0x7f3679beba45 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="533" y="404" width="1" height="15" fill="rgb(211,25,20)"/><text x="536.00" y="414.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (1 samples, 0.15%)</title><rect x="534" y="340" width="2" height="15" fill="rgb(230,14,1)"/><text x="537.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (1 samples, 0.15%)</title><rect x="534" y="356" width="2" height="15" fill="rgb(207,65,28)"/><text x="537.00" y="366.50"></text></g><g><title>reduce_loop (ufunc_object.c:3541) (1 samples, 0.15%)</title><rect x="536" y="356" width="2" height="15" fill="rgb(224,72,9)"/><text x="539.00" y="366.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (1 samples, 0.15%)</title><rect x="538" y="372" width="2" height="15" fill="rgb(219,55,45)"/><text x="541.00" y="382.50"></text></g><g><title>pairwise_sum_FLOAT (loops.c.src:1667) (1 samples, 0.15%)</title><rect x="538" y="388" width="2" height="15" fill="rgb(243,184,9)"/><text x="541.00" y="398.50"></text></g><g><title>array_sum (methods.c:2215) (6 samples, 0.88%)</title><rect x="531" y="244" width="10" height="15" fill="rgb(235,48,33)"/><text x="534.00" y="254.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (6 samples, 0.88%)</title><rect x="531" y="260" width="10" height="15" fill="rgb(242,124,40)"/><text x="534.00" y="270.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (6 samples, 0.88%)</title><rect x="531" y="276" width="10" height="15" fill="rgb(222,7,49)"/><text x="534.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (6 samples, 0.88%)</title><rect x="531" y="292" width="10" height="15" fill="rgb(234,69,8)"/><text x="534.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (6 samples, 0.88%)</title><rect x="531" y="308" width="10" height="15" fill="rgb(211,222,8)"/><text x="534.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (5 samples, 0.74%)</title><rect x="533" y="324" width="8" height="15" fill="rgb(238,185,29)"/><text x="536.00" y="334.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (3 samples, 0.44%)</title><rect x="536" y="340" width="5" height="15" fill="rgb(212,114,39)"/><text x="539.00" y="350.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (2 samples, 0.29%)</title><rect x="538" y="356" width="3" height="15" fill="rgb(221,212,9)"/><text x="541.00" y="366.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (1 samples, 0.15%)</title><rect x="540" y="372" width="1" height="15" fill="rgb(227,172,6)"/><text x="543.00" y="382.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (68 samples, 10.01%)</title><rect x="425" y="196" width="118" height="15" fill="rgb(248,50,12)"/><text x="428.00" y="206.50">run (mlprodict..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (68 samples, 10.01%)</title><rect x="425" y="212" width="118" height="15" fill="rgb(250,228,3)"/><text x="428.00" y="222.50">run (mlprodict..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:24) (8 samples, 1.18%)</title><rect x="529" y="228" width="14" height="15" fill="rgb(218,140,0)"/><text x="532.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.15%)</title><rect x="541" y="244" width="2" height="15" fill="rgb(205,209,51)"/><text x="544.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.15%)</title><rect x="541" y="260" width="2" height="15" fill="rgb(227,61,11)"/><text x="544.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (1 samples, 0.15%)</title><rect x="541" y="276" width="2" height="15" fill="rgb(230,137,15)"/><text x="544.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1586) (1 samples, 0.15%)</title><rect x="541" y="292" width="2" height="15" fill="rgb(248,133,33)"/><text x="544.00" y="302.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (1 samples, 0.15%)</title><rect x="541" y="308" width="2" height="15" fill="rgb(230,45,19)"/><text x="544.00" y="318.50"></text></g><g><title>0x7f3679c33f71 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="541" y="324" width="2" height="15" fill="rgb(208,49,10)"/><text x="544.00" y="334.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (1 samples, 0.15%)</title><rect x="543" y="196" width="2" height="15" fill="rgb(252,138,1)"/><text x="546.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:523) (2 samples, 0.29%)</title><rect x="548" y="228" width="4" height="15" fill="rgb(209,77,13)"/><text x="551.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.29%)</title><rect x="548" y="244" width="4" height="15" fill="rgb(227,224,3)"/><text x="551.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (2 samples, 0.29%)</title><rect x="548" y="260" width="4" height="15" fill="rgb(205,212,44)"/><text x="551.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (2 samples, 0.29%)</title><rect x="548" y="276" width="4" height="15" fill="rgb(216,4,26)"/><text x="551.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (2 samples, 0.29%)</title><rect x="548" y="292" width="4" height="15" fill="rgb(215,110,18)"/><text x="551.00" y="302.50"></text></g><g><title>FLOAT_add (loops.c.src:1755) (2 samples, 0.29%)</title><rect x="548" y="308" width="4" height="15" fill="rgb(214,74,4)"/><text x="551.00" y="318.50"></text></g><g><title>run_binary_simd_add_FLOAT (simd.inc.src:250) (2 samples, 0.29%)</title><rect x="548" y="324" width="4" height="15" fill="rgb(237,25,20)"/><text x="551.00" y="334.50"></text></g><g><title>sse2_binary_add_FLOAT (simd.inc.src:603) (2 samples, 0.29%)</title><rect x="548" y="340" width="4" height="15" fill="rgb(226,209,20)"/><text x="551.00" y="350.50"></text></g><g><title>_mm_add_ps (xmmintrin.h:157) (2 samples, 0.29%)</title><rect x="548" y="356" width="4" height="15" fill="rgb(250,100,7)"/><text x="551.00" y="366.50"></text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:12) (2 samples, 0.29%)</title><rect x="552" y="244" width="3" height="15" fill="rgb(228,203,38)"/><text x="555.00" y="254.50"></text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:13) (1 samples, 0.15%)</title><rect x="555" y="244" width="2" height="15" fill="rgb(208,180,9)"/><text x="558.00" y="254.50"></text></g><g><title>arrayflags_getitem (flagsobject.c:543) (1 samples, 0.15%)</title><rect x="555" y="260" width="2" height="15" fill="rgb(217,141,12)"/><text x="558.00" y="270.50"></text></g><g><title>dot (&lt;__array_function__ internals&gt;:4) (1 samples, 0.15%)</title><rect x="557" y="260" width="2" height="15" fill="rgb(230,93,46)"/><text x="560.00" y="270.50"></text></g><g><title>dot (numpy/core/multiarray.py:792) (1 samples, 0.15%)</title><rect x="557" y="276" width="2" height="15" fill="rgb(234,87,24)"/><text x="560.00" y="286.50"></text></g><g><title>cblas_matrixproduct (cblasfuncs.c:367) (4 samples, 0.59%)</title><rect x="559" y="324" width="7" height="15" fill="rgb(227,66,15)"/><text x="562.00" y="334.50"></text></g><g><title>0x7f3679c54103 (libc-2.29.so) (4 samples, 0.59%)</title><rect x="559" y="340" width="7" height="15" fill="rgb(226,85,50)"/><text x="562.00" y="350.50"></text></g><g><title>exec_blas_async (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.29%)</title><rect x="567" y="420" width="4" height="15" fill="rgb(230,69,5)"/><text x="570.00" y="430.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (2 samples, 0.29%)</title><rect x="567" y="436" width="4" height="15" fill="rgb(220,100,24)"/><text x="570.00" y="446.50"></text></g><g><title>__lll_lock_wait (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="569" y="452" width="2" height="15" fill="rgb(225,192,17)"/><text x="572.00" y="462.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="571" y="436" width="2" height="15" fill="rgb(242,80,41)"/><text x="574.00" y="446.50"></text></g><g><title>__lll_lock_wait (libpthread-2.29.so) (1 samples, 0.15%)</title><rect x="571" y="452" width="2" height="15" fill="rgb(224,167,26)"/><text x="574.00" y="462.50"></text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (52 samples, 7.66%)</title><rect x="571" y="420" width="90" height="15" fill="rgb(219,201,39)"/><text x="574.00" y="430.50">exec_blas_..</text></g><g><title>sched_yield (libc-2.29.so) (51 samples, 7.51%)</title><rect x="573" y="436" width="88" height="15" fill="rgb(241,7,24)"/><text x="576.00" y="446.50">sched_yiel..</text></g><g><title>sched_yield (libc-2.29.so) (2 samples, 0.29%)</title><rect x="661" y="436" width="4" height="15" fill="rgb(234,94,46)"/><text x="664.00" y="446.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (66 samples, 9.72%)</title><rect x="559" y="276" width="114" height="15" fill="rgb(245,78,44)"/><text x="562.00" y="286.50">array_implemen..</text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (66 samples, 9.72%)</title><rect x="559" y="292" width="114" height="15" fill="rgb(206,118,9)"/><text x="562.00" y="302.50">array_matrixpr..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (66 samples, 9.72%)</title><rect x="559" y="308" width="114" height="15" fill="rgb(248,119,18)"/><text x="562.00" y="318.50">PyArray_Matrix..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c:674) (62 samples, 9.13%)</title><rect x="566" y="324" width="107" height="15" fill="rgb(211,66,12)"/><text x="569.00" y="334.50">cblas_matrixp..</text></g><g><title>gemm (cblasfuncs.c:40) (62 samples, 9.13%)</title><rect x="566" y="340" width="107" height="15" fill="rgb(230,214,22)"/><text x="569.00" y="350.50">gemm (cblasfu..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (62 samples, 9.13%)</title><rect x="566" y="356" width="107" height="15" fill="rgb(215,123,30)"/><text x="569.00" y="366.50">cblas_sgemm (..</text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (61 samples, 8.98%)</title><rect x="567" y="372" width="106" height="15" fill="rgb(243,173,46)"/><text x="570.00" y="382.50">sgemm_thread..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (61 samples, 8.98%)</title><rect x="567" y="388" width="106" height="15" fill="rgb(251,227,39)"/><text x="570.00" y="398.50">gemm_driver ..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (61 samples, 8.98%)</title><rect x="567" y="404" width="106" height="15" fill="rgb(247,207,38)"/><text x="570.00" y="414.50">exec_blas (l..</text></g><g><title>inner_thread (libopenblasp-r0-34a18dc3.3.7.so) (7 samples, 1.03%)</title><rect x="661" y="420" width="12" height="15" fill="rgb(224,193,45)"/><text x="664.00" y="430.50"></text></g><g><title>sgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (5 samples, 0.74%)</title><rect x="665" y="436" width="8" height="15" fill="rgb(232,212,13)"/><text x="668.00" y="446.50"></text></g><g><title>sgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (6 samples, 0.88%)</title><rect x="673" y="276" width="11" height="15" fill="rgb(216,209,51)"/><text x="676.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (198 samples, 29.16%)</title><rect x="369" y="180" width="344" height="15" fill="rgb(244,188,14)"/><text x="372.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:1..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (97 samples, 14.29%)</title><rect x="545" y="196" width="168" height="15" fill="rgb(207,100,3)"/><text x="548.00" y="206.50">run (mlprodict/onnxrt..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (96 samples, 14.14%)</title><rect x="546" y="212" width="167" height="15" fill="rgb(241,132,42)"/><text x="549.00" y="222.50">run (mlprodict/onnxrt..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (93 samples, 13.70%)</title><rect x="552" y="228" width="161" height="15" fill="rgb(235,124,33)"/><text x="555.00" y="238.50">_run (mlprodict/onnx..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:40) (90 samples, 13.25%)</title><rect x="557" y="244" width="156" height="15" fill="rgb(235,120,15)"/><text x="560.00" y="254.50">numpy_dot_inplace (m..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (89 samples, 13.11%)</title><rect x="559" y="260" width="154" height="15" fill="rgb(243,224,30)"/><text x="562.00" y="270.50">dot (&lt;__array_funct..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (17 samples, 2.50%)</title><rect x="684" y="276" width="29" height="15" fill="rgb(213,213,45)"/><text x="687.00" y="286.50">sg..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (2 samples, 0.29%)</title><rect x="713" y="180" width="4" height="15" fill="rgb(210,147,53)"/><text x="716.00" y="190.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (2 samples, 0.29%)</title><rect x="717" y="180" width="3" height="15" fill="rgb(223,198,12)"/><text x="720.00" y="190.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (211 samples, 31.08%)</title><rect x="355" y="132" width="367" height="15" fill="rgb(226,175,52)"/><text x="358.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl...</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (211 samples, 31.08%)</title><rect x="355" y="148" width="367" height="15" fill="rgb(219,195,29)"/><text x="358.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (209 samples, 30.78%)</title><rect x="359" y="164" width="363" height="15" fill="rgb(241,195,6)"/><text x="362.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_infe..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (1 samples, 0.15%)</title><rect x="720" y="180" width="2" height="15" fill="rgb(250,148,15)"/><text x="723.00" y="190.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:45) (218 samples, 32.11%)</title><rect x="345" y="52" width="379" height="15" fill="rgb(229,85,11)"/><text x="348.00" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_1..</text></g><g><title>profile_pyrt (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:44) (218 samples, 32.11%)</title><rect x="345" y="68" width="379" height="15" fill="rgb(243,229,48)"/><text x="348.00" y="78.50">profile_pyrt (bench_MLPClassifier_default_b_cl_1000..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:29) (218 samples, 32.11%)</title><rect x="345" y="84" width="379" height="15" fill="rgb(244,201,7)"/><text x="348.00" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_100..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:23) (214 samples, 31.52%)</title><rect x="352" y="100" width="372" height="15" fill="rgb(235,178,45)"/><text x="355.00" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_4_1..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (213 samples, 31.37%)</title><rect x="354" y="116" width="370" height="15" fill="rgb(222,117,46)"/><text x="357.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_s..</text></g><g><title>unicode_hash (python3.7) (1 samples, 0.15%)</title><rect x="722" y="132" width="2" height="15" fill="rgb(241,48,0)"/><text x="725.00" y="142.50"></text></g><g><title>0x7f3637c76ff9 (?) (1 samples, 0.15%)</title><rect x="724" y="212" width="1" height="15" fill="rgb(222,20,33)"/><text x="727.00" y="222.50"></text></g><g><title>0x7f3637c71ef6 (?) (1 samples, 0.15%)</title><rect x="724" y="228" width="1" height="15" fill="rgb(212,4,43)"/><text x="727.00" y="238.50"></text></g><g><title>0x7f3637c66962 (?) (1 samples, 0.15%)</title><rect x="724" y="244" width="1" height="15" fill="rgb(216,168,8)"/><text x="727.00" y="254.50"></text></g><g><title>0x7f3637c9a7a7 (?) (1 samples, 0.15%)</title><rect x="724" y="260" width="1" height="15" fill="rgb(220,187,45)"/><text x="727.00" y="270.50"></text></g><g><title>0x7f3637c9a379 (?) (1 samples, 0.15%)</title><rect x="724" y="276" width="1" height="15" fill="rgb(226,96,27)"/><text x="727.00" y="286.50"></text></g><g><title>0x7f36380f88b8 (?) (1 samples, 0.15%)</title><rect x="724" y="292" width="1" height="15" fill="rgb(216,86,17)"/><text x="727.00" y="302.50"></text></g><g><title>0x7f36380f6c7f (?) (1 samples, 0.15%)</title><rect x="724" y="308" width="1" height="15" fill="rgb(212,162,38)"/><text x="727.00" y="318.50"></text></g><g><title>0x7f363810999c (?) (1 samples, 0.15%)</title><rect x="724" y="324" width="1" height="15" fill="rgb(231,28,36)"/><text x="727.00" y="334.50"></text></g><g><title>0x7f3637d8e7c3 (?) (1 samples, 0.15%)</title><rect x="724" y="340" width="1" height="15" fill="rgb(233,143,24)"/><text x="727.00" y="350.50"></text></g><g><title>0x7f3638077fac (?) (1 samples, 0.15%)</title><rect x="724" y="356" width="1" height="15" fill="rgb(251,47,43)"/><text x="727.00" y="366.50"></text></g><g><title>0x7f362fdef0f1 (?) (1 samples, 0.15%)</title><rect x="724" y="372" width="1" height="15" fill="rgb(208,211,25)"/><text x="727.00" y="382.50"></text></g><g><title>0x7f362fe355a7 (?) (1 samples, 0.15%)</title><rect x="724" y="388" width="1" height="15" fill="rgb(228,64,39)"/><text x="727.00" y="398.50"></text></g><g><title>0x7f362fec730f (?) (1 samples, 0.15%)</title><rect x="724" y="404" width="1" height="15" fill="rgb(207,27,27)"/><text x="727.00" y="414.50"></text></g><g><title>0x7f362ffed0af (?) (1 samples, 0.15%)</title><rect x="724" y="420" width="1" height="15" fill="rgb(234,18,29)"/><text x="727.00" y="430.50"></text></g><g><title>syscall (libc-2.29.so) (1 samples, 0.15%)</title><rect x="724" y="436" width="1" height="15" fill="rgb(206,222,8)"/><text x="727.00" y="446.50"></text></g><g><title>onnxruntime::Softmax&lt;float, false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="725" y="340" width="2" height="15" fill="rgb(235,136,42)"/><text x="728.00" y="350.50"></text></g><g><title>onnxruntime::ComputeSoftMax&lt;Eigen::ThreadPoolDevice, float&gt; [clone .constprop.656] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="725" y="356" width="2" height="15" fill="rgb(205,106,15)"/><text x="728.00" y="366.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="725" y="372" width="2" height="15" fill="rgb(241,90,14)"/><text x="728.00" y="382.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="725" y="388" width="2" height="15" fill="rgb(234,98,48)"/><text x="728.00" y="398.50"></text></g><g><title>_ZNSt17_Function_handlerIFvllEZN5Eigen8internal14TensorExecutorIKNS1_14TensorAssignOpINS1_9TensorMapINS1_6TensorIfLi2ELi1ElEELi16ENS1_11MakePointerEEEKNS1_18TensorCwiseUnaryOpINS2_13scalar_exp_opIfEEKNS1_19TensorCwiseBinaryOpINS2_20scalar_difference_opIKfSF_EEKNS5_INS6_ISF_Li2ELi1ElEELi16ES8_EEKNS1_20TensorBroadcastingOpIKNS1_9IndexListINS1_10type2indexILl1EEEJiEEEKNS1_17TensorReshapingOpIKNSL_IiJSN_EEEKNS1_18TensorForcedEvalOpIKNS1_17TensorReductionOpINS2_10MaxReducerIfEEKNSL_ISN_JEEESJ_S8_EEEEEEEEEEEEEENS1_16ThreadPoolDeviceELb1ELb1EE3runERS1C_RKS1D_EUlllE_E9_M_invokeERKSt9_Any_dataOlS1N_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="725" y="404" width="2" height="15" fill="rgb(228,116,0)"/><text x="728.00" y="414.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_19TensorCwiseBinaryOpINS_8internal20scalar_difference_opIKfS4_EEKNS_9TensorMapINS_6TensorIS4_Li2ELi1ElEELi16ENS_11MakePointerEEEKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNSD_IiJSF_EEEKNS_18TensorForcedEvalOpIKNS_17TensorReductionOpINS2_10MaxReducerIfEEKNSD_ISF_JEEESB_S9_EEEEEEEEEENS_16ThreadPoolDeviceEE5blockEPNS2_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="725" y="420" width="2" height="15" fill="rgb(237,210,35)"/><text x="728.00" y="430.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNS2_IiJS4_EEEKNS_18TensorForcedEvalOpIKNS_17TensorReductionOpINS_8internal10MaxReducerIfEEKNS2_IS4_JEEEKNS_9TensorMapINS_6TensorIKfLi2ELi1ElEELi16ENS_11MakePointerEEESL_EEEEEEEENS_16ThreadPoolDeviceEE5blockEPNSC_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="725" y="436" width="2" height="15" fill="rgb(228,98,27)"/><text x="728.00" y="446.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNS2_IiJS4_EEEKNS_18TensorForcedEvalOpIKNS_17TensorReductionOpINS_8internal10MaxReducerIfEEKNS2_IS4_JEEEKNS_9TensorMapINS_6TensorIKfLi2ELi1ElEELi16ENS_11MakePointerEEESL_EEEEEEEENS_16ThreadPoolDeviceEE14BroadcastBlockERKNS_6DSizesIlLi2EEERKNSY_IlLi4EEES14_S14_lPNSC_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="725" y="452" width="2" height="15" fill="rgb(222,45,32)"/><text x="728.00" y="462.50"></text></g><g><title>Eigen::internal::TensorBlockReader&lt;float, long, 4, 1&gt;::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="725" y="468" width="2" height="15" fill="rgb(236,109,28)"/><text x="728.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.29%)</title><rect x="727" y="356" width="4" height="15" fill="rgb(220,84,0)"/><text x="730.00" y="366.50"></text></g><g><title>0x7f36696ffd50 (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="729" y="372" width="2" height="15" fill="rgb(217,149,50)"/><text x="732.00" y="382.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="725" y="260" width="7" height="15" fill="rgb(246,112,24)"/><text x="728.00" y="270.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="725" y="276" width="7" height="15" fill="rgb(232,155,3)"/><text x="728.00" y="286.50"></text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="725" y="292" width="7" height="15" fill="rgb(214,171,49)"/><text x="728.00" y="302.50"></text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="725" y="308" width="7" height="15" fill="rgb(235,38,19)"/><text x="728.00" y="318.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="725" y="324" width="7" height="15" fill="rgb(249,176,9)"/><text x="728.00" y="334.50"></text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.44%)</title><rect x="727" y="340" width="5" height="15" fill="rgb(236,172,3)"/><text x="730.00" y="350.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="731" y="356" width="1" height="15" fill="rgb(240,57,16)"/><text x="734.00" y="366.50"></text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:18) (8 samples, 1.18%)</title><rect x="724" y="100" width="14" height="15" fill="rgb(247,23,2)"/><text x="727.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (8 samples, 1.18%)</title><rect x="724" y="116" width="14" height="15" fill="rgb(234,224,4)"/><text x="727.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (8 samples, 1.18%)</title><rect x="724" y="132" width="14" height="15" fill="rgb(209,212,9)"/><text x="727.00" y="142.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (8 samples, 1.18%)</title><rect x="724" y="148" width="14" height="15" fill="rgb(254,29,19)"/><text x="727.00" y="158.50"></text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (8 samples, 1.18%)</title><rect x="724" y="164" width="14" height="15" fill="rgb(245,3,41)"/><text x="727.00" y="174.50"></text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (8 samples, 1.18%)</title><rect x="724" y="180" width="14" height="15" fill="rgb(248,210,40)"/><text x="727.00" y="190.50"></text></g><g><title>run (onnxruntime/capi/session.py:136) (8 samples, 1.18%)</title><rect x="724" y="196" width="14" height="15" fill="rgb(213,67,23)"/><text x="727.00" y="206.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 1.03%)</title><rect x="725" y="212" width="13" height="15" fill="rgb(213,193,50)"/><text x="728.00" y="222.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 1.03%)</title><rect x="725" y="228" width="13" height="15" fill="rgb(237,13,33)"/><text x="728.00" y="238.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 1.03%)</title><rect x="725" y="244" width="13" height="15" fill="rgb(226,165,53)"/><text x="728.00" y="254.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.44%)</title><rect x="732" y="260" width="6" height="15" fill="rgb(234,190,8)"/><text x="735.00" y="270.50"></text></g><g><title>0x7f3679c32c04 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="757" y="132" width="2" height="15" fill="rgb(211,197,48)"/><text x="760.00" y="142.50"></text></g><g><title>0x7f3679c32c36 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="759" y="132" width="1" height="15" fill="rgb(205,8,44)"/><text x="762.00" y="142.50"></text></g><g><title>0x7f3679c32c49 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="760" y="132" width="2" height="15" fill="rgb(225,92,24)"/><text x="763.00" y="142.50"></text></g><g><title>0x7f3679c32c4d (libc-2.29.so) (1 samples, 0.15%)</title><rect x="762" y="132" width="2" height="15" fill="rgb(215,100,7)"/><text x="765.00" y="142.50"></text></g><g><title>0x7f3679c32c73 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="764" y="132" width="1" height="15" fill="rgb(254,219,29)"/><text x="767.00" y="142.50"></text></g><g><title>0x7f3679c32ac1 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="764" y="148" width="1" height="15" fill="rgb(215,103,3)"/><text x="767.00" y="158.50"></text></g><g><title>0x7f3679c32acd (libc-2.29.so) (1 samples, 0.15%)</title><rect x="765" y="148" width="2" height="15" fill="rgb(228,151,46)"/><text x="768.00" y="158.50"></text></g><g><title>0x7f3679c33eb0 (libc-2.29.so) (7 samples, 1.03%)</title><rect x="757" y="116" width="12" height="15" fill="rgb(239,203,12)"/><text x="760.00" y="126.50"></text></g><g><title>0x7f3679c32ca7 (libc-2.29.so) (2 samples, 0.29%)</title><rect x="765" y="132" width="4" height="15" fill="rgb(242,11,3)"/><text x="768.00" y="142.50"></text></g><g><title>0x7f3679c32ad5 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="767" y="148" width="2" height="15" fill="rgb(217,170,6)"/><text x="770.00" y="158.50"></text></g><g><title>__munmap (libc-2.29.so) (1 samples, 0.15%)</title><rect x="769" y="116" width="2" height="15" fill="rgb(246,19,41)"/><text x="772.00" y="126.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (1 samples, 0.15%)</title><rect x="772" y="148" width="2" height="15" fill="rgb(247,117,43)"/><text x="775.00" y="158.50"></text></g><g><title>run (onnxruntime/capi/session.py:134) (3 samples, 0.44%)</title><rect x="776" y="196" width="5" height="15" fill="rgb(216,142,23)"/><text x="779.00" y="206.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py:134) (3 samples, 0.44%)</title><rect x="776" y="212" width="5" height="15" fill="rgb(219,140,42)"/><text x="779.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.44%)</title><rect x="776" y="228" width="5" height="15" fill="rgb(236,183,21)"/><text x="779.00" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg const*, &gt;(pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; (*)(onnxruntime::NodeArg const*), const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.29%)</title><rect x="778" y="244" width="3" height="15" fill="rgb(213,169,29)"/><text x="781.00" y="254.50"></text></g><g><title>onnxruntime::NodeArg::Name[abi:cxx11] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="779" y="260" width="2" height="15" fill="rgb(226,139,14)"/><text x="782.00" y="270.50"></text></g><g><title>mkl_blas_avx_sgemm_kernel_0 (onnxruntime/capi/libmklml_intel.so) (7 samples, 1.03%)</title><rect x="781" y="212" width="12" height="15" fill="rgb(212,186,31)"/><text x="784.00" y="222.50"></text></g><g><title>onnxruntime::ArgMax&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 1.03%)</title><rect x="797" y="340" width="12" height="15" fill="rgb(220,164,39)"/><text x="800.00" y="350.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.88%)</title><rect x="798" y="356" width="11" height="15" fill="rgb(238,53,23)"/><text x="801.00" y="366.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="807" y="372" width="2" height="15" fill="rgb(229,185,30)"/><text x="810.00" y="382.50"></text></g><g><title>onnxruntime::Cast&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.29%)</title><rect x="809" y="340" width="3" height="15" fill="rgb(243,134,7)"/><text x="812.00" y="350.50"></text></g><g><title>onnxruntime::Cast&lt;long&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="812" y="340" width="2" height="15" fill="rgb(210,97,20)"/><text x="815.00" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="812" y="356" width="2" height="15" fill="rgb(233,203,41)"/><text x="815.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="812" y="372" width="2" height="15" fill="rgb(229,116,29)"/><text x="815.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="812" y="388" width="2" height="15" fill="rgb(212,94,34)"/><text x="815.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="812" y="404" width="2" height="15" fill="rgb(236,175,12)"/><text x="815.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="812" y="420" width="2" height="15" fill="rgb(228,199,41)"/><text x="815.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="812" y="436" width="2" height="15" fill="rgb(212,106,14)"/><text x="815.00" y="446.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="812" y="452" width="2" height="15" fill="rgb(219,79,18)"/><text x="815.00" y="462.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="812" y="468" width="2" height="15" fill="rgb(240,99,53)"/><text x="815.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="814" y="356" width="2" height="15" fill="rgb(230,73,24)"/><text x="817.00" y="366.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="814" y="372" width="2" height="15" fill="rgb(209,183,10)"/><text x="817.00" y="382.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkIterFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="814" y="388" width="2" height="15" fill="rgb(242,50,40)"/><text x="817.00" y="398.50"></text></g><g><title>std::_Rb_tree_rebalance_for_erase (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="814" y="404" width="2" height="15" fill="rgb(253,76,8)"/><text x="817.00" y="414.50"></text></g><g><title>onnxruntime::IExecutionProvider::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="816" y="388" width="2" height="15" fill="rgb(214,102,47)"/><text x="819.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.44%)</title><rect x="814" y="340" width="5" height="15" fill="rgb(246,198,11)"/><text x="817.00" y="350.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.29%)</title><rect x="816" y="356" width="3" height="15" fill="rgb(249,217,18)"/><text x="819.00" y="366.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.29%)</title><rect x="816" y="372" width="3" height="15" fill="rgb(245,179,53)"/><text x="819.00" y="382.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="818" y="388" width="1" height="15" fill="rgb(241,19,45)"/><text x="821.00" y="398.50"></text></g><g><title>mkl_blas_get_kernel_api_version (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.15%)</title><rect x="832" y="420" width="1" height="15" fill="rgb(215,72,28)"/><text x="835.00" y="430.50"></text></g><g><title>mkl_blas_avx_sgemm_pst (onnxruntime/capi/libmklml_intel.so) (56 samples, 8.25%)</title><rect x="835" y="468" width="97" height="15" fill="rgb(213,196,40)"/><text x="838.00" y="478.50">mkl_blas_av..</text></g><g><title>mkl_blas_avx_sgemm_zero_desc (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.15%)</title><rect x="932" y="468" width="2" height="15" fill="rgb(211,141,13)"/><text x="935.00" y="478.50"></text></g><g><title>mkl_blas_avx_sgemm_free_bufs (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.15%)</title><rect x="934" y="484" width="2" height="15" fill="rgb(231,147,35)"/><text x="937.00" y="494.50"></text></g><g><title>mkl_blas_avx_sgemm_get_bufs_size (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.15%)</title><rect x="936" y="484" width="2" height="15" fill="rgb(207,106,40)"/><text x="939.00" y="494.50"></text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (70 samples, 10.31%)</title><rect x="819" y="340" width="122" height="15" fill="rgb(242,188,3)"/><text x="822.00" y="350.50">onnxruntime::Ge..</text></g><g><title>onnxruntime::math::Gemm&lt;float, onnxruntime::concurrency::ThreadPool&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (63 samples, 9.28%)</title><rect x="832" y="356" width="109" height="15" fill="rgb(218,152,8)"/><text x="835.00" y="366.50">onnxruntime::..</text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (63 samples, 9.28%)</title><rect x="832" y="372" width="109" height="15" fill="rgb(223,80,9)"/><text x="835.00" y="382.50">cblas_sgemm (..</text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (63 samples, 9.28%)</title><rect x="832" y="388" width="109" height="15" fill="rgb(248,101,18)"/><text x="835.00" y="398.50">sgemm_ (onnxr..</text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (63 samples, 9.28%)</title><rect x="832" y="404" width="109" height="15" fill="rgb(205,131,40)"/><text x="835.00" y="414.50">mkl_blas_sgem..</text></g><g><title>mkl_blas_sgemm_omp_driver_v1 (onnxruntime/capi/libmklml_intel.so) (62 samples, 9.13%)</title><rect x="833" y="420" width="108" height="15" fill="rgb(211,29,23)"/><text x="836.00" y="430.50">mkl_blas_sgem..</text></g><g><title>mkl_blas_xsgemm (onnxruntime/capi/libmklml_intel.so) (61 samples, 8.98%)</title><rect x="835" y="436" width="106" height="15" fill="rgb(245,205,8)"/><text x="838.00" y="446.50">mkl_blas_xsg..</text></g><g><title>mkl_blas_avx_xsgemm (onnxruntime/capi/libmklml_intel.so) (61 samples, 8.98%)</title><rect x="835" y="452" width="106" height="15" fill="rgb(252,227,39)"/><text x="838.00" y="462.50">mkl_blas_avx..</text></g><g><title>mkl_blas_avx_xsgemm_par (onnxruntime/capi/libmklml_intel.so) (4 samples, 0.59%)</title><rect x="934" y="468" width="7" height="15" fill="rgb(250,7,47)"/><text x="937.00" y="478.50"></text></g><g><title>mkl_blas_avx_sgemm_ker0 (onnxruntime/capi/libmklml_intel.so) (2 samples, 0.29%)</title><rect x="938" y="484" width="3" height="15" fill="rgb(252,209,3)"/><text x="941.00" y="494.50"></text></g><g><title>mkl_blas_avx_sgemm_ker0_pst (onnxruntime/capi/libmklml_intel.so) (2 samples, 0.29%)</title><rect x="938" y="500" width="3" height="15" fill="rgb(244,13,50)"/><text x="941.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="941" y="340" width="2" height="15" fill="rgb(222,158,29)"/><text x="944.00" y="350.50"></text></g><g><title>onnxruntime::Relu&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.88%)</title><rect x="943" y="340" width="10" height="15" fill="rgb(216,60,22)"/><text x="946.00" y="350.50"></text></g><g><title>Eigen::internal::TensorBlockCwiseUnaryIO&lt;Eigen::internal::scalar_exp_op&lt;float&gt;, long, float, 2, 1&gt;::Run&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="953" y="420" width="2" height="15" fill="rgb(236,90,4)"/><text x="956.00" y="430.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="953" y="372" width="7" height="15" fill="rgb(205,222,40)"/><text x="956.00" y="382.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="953" y="388" width="7" height="15" fill="rgb(235,40,46)"/><text x="956.00" y="398.50"></text></g><g><title>_ZNSt17_Function_handlerIFvllEZN5Eigen8internal14TensorExecutorIKNS1_14TensorAssignOpINS1_9TensorMapINS1_6TensorIfLi2ELi1ElEELi16ENS1_11MakePointerEEEKNS1_18TensorCwiseUnaryOpINS2_13scalar_exp_opIfEEKNS1_19TensorCwiseBinaryOpINS2_20scalar_difference_opIKfSF_EEKNS5_INS6_ISF_Li2ELi1ElEELi16ES8_EEKNS1_20TensorBroadcastingOpIKNS1_9IndexListINS1_10type2indexILl1EEEJiEEEKNS1_17TensorReshapingOpIKNSL_IiJSN_EEEKNS1_18TensorForcedEvalOpIKNS1_17TensorReductionOpINS2_10MaxReducerIfEEKNSL_ISN_JEEESJ_S8_EEEEEEEEEEEEEENS1_16ThreadPoolDeviceELb1ELb1EE3runERS1C_RKS1D_EUlllE_E9_M_invokeERKSt9_Any_dataOlS1N_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="953" y="404" width="7" height="15" fill="rgb(235,200,22)"/><text x="956.00" y="414.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_19TensorCwiseBinaryOpINS_8internal20scalar_difference_opIKfS4_EEKNS_9TensorMapINS_6TensorIS4_Li2ELi1ElEELi16ENS_11MakePointerEEEKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNSD_IiJSF_EEEKNS_18TensorForcedEvalOpIKNS_17TensorReductionOpINS2_10MaxReducerIfEEKNSD_ISF_JEEESB_S9_EEEEEEEEEENS_16ThreadPoolDeviceEE5blockEPNS2_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.44%)</title><rect x="955" y="420" width="5" height="15" fill="rgb(250,74,12)"/><text x="958.00" y="430.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNS2_IiJS4_EEEKNS_18TensorForcedEvalOpIKNS_17TensorReductionOpINS_8internal10MaxReducerIfEEKNS2_IS4_JEEEKNS_9TensorMapINS_6TensorIKfLi2ELi1ElEELi16ENS_11MakePointerEEESL_EEEEEEEENS_16ThreadPoolDeviceEE5blockEPNSC_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.44%)</title><rect x="955" y="436" width="5" height="15" fill="rgb(246,113,2)"/><text x="958.00" y="446.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNS2_IiJS4_EEEKNS_18TensorForcedEvalOpIKNS_17TensorReductionOpINS_8internal10MaxReducerIfEEKNS2_IS4_JEEEKNS_9TensorMapINS_6TensorIKfLi2ELi1ElEELi16ENS_11MakePointerEEESL_EEEEEEEENS_16ThreadPoolDeviceEE14BroadcastBlockERKNS_6DSizesIlLi2EEERKNSY_IlLi4EEES14_S14_lPNSC_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.44%)</title><rect x="955" y="452" width="5" height="15" fill="rgb(235,5,37)"/><text x="958.00" y="462.50"></text></g><g><title>Eigen::internal::TensorBlockReader&lt;float, long, 4, 1&gt;::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.44%)</title><rect x="955" y="468" width="5" height="15" fill="rgb(251,145,3)"/><text x="958.00" y="478.50"></text></g><g><title>Eigen::internal::TensorBlockCopyOp&lt;float, long&gt;::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="958" y="484" width="2" height="15" fill="rgb(244,134,32)"/><text x="961.00" y="494.50"></text></g><g><title>Eigen::internal::TensorExecutor&lt;Eigen::TensorEvalToOp&lt;Eigen::TensorReductionOp&lt;Eigen::internal::MaxReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice, true, false&gt;::run (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="960" y="372" width="7" height="15" fill="rgb(252,0,31)"/><text x="963.00" y="382.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="960" y="388" width="7" height="15" fill="rgb(205,190,18)"/><text x="963.00" y="398.50"></text></g><g><title>std::_Function_handler&lt;void (long, long), Eigen::internal::TensorExecutor&lt;Eigen::TensorEvalToOp&lt;Eigen::TensorReductionOp&lt;Eigen::internal::MaxReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice, true, false&gt;::run(Eigen::TensorEvalToOp&lt;Eigen::TensorReductionOp&lt;Eigen::internal::MaxReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const&amp;, Eigen::ThreadPoolDevice const&amp;)::{lambda(long, long)#1}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="960" y="404" width="7" height="15" fill="rgb(238,129,40)"/><text x="963.00" y="414.50"></text></g><g><title>Eigen::internal::TensorBlockCwiseBinaryIO&lt;Eigen::internal::scalar_product_op&lt;float, float&gt;, long, float, 2, 1&gt;::Run&lt;float, float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="967" y="452" width="2" height="15" fill="rgb(238,98,11)"/><text x="970.00" y="462.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.74%)</title><rect x="967" y="388" width="9" height="15" fill="rgb(251,122,16)"/><text x="970.00" y="398.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.74%)</title><rect x="967" y="404" width="9" height="15" fill="rgb(218,36,51)"/><text x="970.00" y="414.50"></text></g><g><title>_ZNSt17_Function_handlerIFvllEZN5Eigen8internal14TensorExecutorIKNS1_14TensorAssignOpINS1_9TensorMapINS1_6TensorIfLi2ELi1ElEELi16ENS1_11MakePointerEEEKNS1_19TensorCwiseBinaryOpINS2_17scalar_product_opIffEEKS9_KNS1_20TensorBroadcastingOpIKNS1_9IndexListINS1_10type2indexILl1EEEJiEEEKNS1_17TensorReshapingOpIKNSF_IiJSH_EEEKNS1_18TensorForcedEvalOpIKNS1_18TensorCwiseUnaryOpINS2_17scalar_inverse_opIfEEKNS1_17TensorReductionOpINS2_10SumReducerIfEEKNSF_ISH_JEEESD_S8_EEEEEEEEEEEEEENS1_16ThreadPoolDeviceELb1ELb1EE3runERS19_RKS1A_EUlllE_E9_M_invokeERKSt9_Any_dataOlS1K_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.74%)</title><rect x="967" y="420" width="9" height="15" fill="rgb(242,218,33)"/><text x="970.00" y="430.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_19TensorCwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEEKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNSC_IiJSE_EEEKNS_18TensorForcedEvalOpIKNS_18TensorCwiseUnaryOpINS2_17scalar_inverse_opIfEEKNS_17TensorReductionOpINS2_10SumReducerIfEEKNSC_ISE_JEEESA_S8_EEEEEEEEEEEENS_16ThreadPoolDeviceEE5blockEPNS2_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.74%)</title><rect x="967" y="436" width="9" height="15" fill="rgb(210,184,39)"/><text x="970.00" y="446.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNS2_IiJS4_EEEKNS_18TensorForcedEvalOpIKNS_18TensorCwiseUnaryOpINS_8internal17scalar_inverse_opIfEEKNS_17TensorReductionOpINSC_10SumReducerIfEEKNS2_IS4_JEEEKNS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEESN_EEEEEEEEEENS_16ThreadPoolDeviceEE5blockEPNSC_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="969" y="452" width="7" height="15" fill="rgb(232,151,1)"/><text x="972.00" y="462.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNS2_IiJS4_EEEKNS_18TensorForcedEvalOpIKNS_18TensorCwiseUnaryOpINS_8internal17scalar_inverse_opIfEEKNS_17TensorReductionOpINSC_10SumReducerIfEEKNS2_IS4_JEEEKNS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEESN_EEEEEEEEEENS_16ThreadPoolDeviceEE14BroadcastBlockERKNS_6DSizesIlLi2EEERKNS12_IlLi4EEES18_S18_lPNSC_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="969" y="468" width="7" height="15" fill="rgb(218,25,51)"/><text x="972.00" y="478.50"></text></g><g><title>Eigen::internal::TensorBlockReader&lt;float, long, 4, 1&gt;::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.59%)</title><rect x="969" y="484" width="7" height="15" fill="rgb(230,96,13)"/><text x="972.00" y="494.50"></text></g><g><title>Eigen::internal::TensorBlockCopyOp&lt;float, long&gt;::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="974" y="500" width="2" height="15" fill="rgb(254,62,18)"/><text x="977.00" y="510.50"></text></g><g><title>_ZN5Eigen8internal14TensorExecutorIKNS_14TensorAssignOpINS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEEKNS_19TensorCwiseBinaryOpINS0_17scalar_product_opIffEEKS7_KNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNSD_IiJSF_EEEKNS_18TensorForcedEvalOpIKNS_18TensorCwiseUnaryOpINS0_17scalar_inverse_opIfEEKNS_17TensorReductionOpINS0_10SumReducerIfEEKNSD_ISF_JEEESB_S6_EEEEEEEEEEEEEENS_16ThreadPoolDeviceELb1ELb1EE3runERS17_RKS18_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.88%)</title><rect x="967" y="372" width="10" height="15" fill="rgb(254,32,10)"/><text x="970.00" y="382.50"></text></g><g><title>Eigen::internal::TensorExecutor&lt;Eigen::TensorEvalToOp&lt;Eigen::TensorCwiseUnaryOp&lt;Eigen::internal::scalar_inverse_op&lt;float&gt;, Eigen::TensorReductionOp&lt;Eigen::internal::SumReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const&gt; const, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice, true, false&gt;::run (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="976" y="388" width="1" height="15" fill="rgb(206,80,48)"/><text x="979.00" y="398.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="976" y="404" width="1" height="15" fill="rgb(228,3,16)"/><text x="979.00" y="414.50"></text></g><g><title>_ZNSt17_Function_handlerIFvllEZN5Eigen8internal14TensorExecutorIKNS1_14TensorEvalToOpIKNS1_18TensorCwiseUnaryOpINS2_17scalar_inverse_opIfEEKNS1_17TensorReductionOpINS2_10SumReducerIfEEKNS1_9IndexListINS1_10type2indexILl1EEEJEEEKNS1_9TensorMapINS1_6TensorIfLi2ELi1ElEELi16ENS1_11MakePointerEEESJ_EEEESJ_EENS1_16ThreadPoolDeviceELb1ELb0EE3runERSR_RKSS_EUlllE_E9_M_invokeERKSt9_Any_dataOlS12_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="976" y="420" width="1" height="15" fill="rgb(234,152,31)"/><text x="979.00" y="430.50"></text></g><g><title>onnxruntime::Softmax&lt;float, false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 2.21%)</title><rect x="953" y="340" width="26" height="15" fill="rgb(245,196,44)"/><text x="956.00" y="350.50">o..</text></g><g><title>onnxruntime::ComputeSoftMax&lt;Eigen::ThreadPoolDevice, float&gt; [clone .constprop.656] (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 2.21%)</title><rect x="953" y="356" width="26" height="15" fill="rgb(209,63,53)"/><text x="956.00" y="366.50">o..</text></g><g><title>_ZN5Eigen8internal30GetTensorExecutorTilingContextINS_15TensorEvaluatorIKNS_14TensorAssignOpINS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEEKNS_18TensorCwiseUnaryOpINS0_13scalar_exp_opIfEEKNS_19TensorCwiseBinaryOpINS0_20scalar_difference_opIKfSE_EEKNS4_INS5_ISE_Li2ELi1ElEELi16ES7_EEKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNSK_IiJSM_EEEKNS_18TensorForcedEvalOpIKNS_17TensorReductionOpINS0_10MaxReducerIfEEKNSK_ISM_JEEESI_S7_EEEEEEEEEEEEEENS_16ThreadPoolDeviceEEENS0_17TensorBlockMapperIflLi2ELi1EEELb1EEENS0_27TensorExecutorTilingContextIT0_EERKS1C_RKT_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="977" y="372" width="2" height="15" fill="rgb(221,218,4)"/><text x="980.00" y="382.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="979" y="356" width="2" height="15" fill="rgb(217,80,44)"/><text x="982.00" y="366.50"></text></g><g><title>onnxruntime::ml::ArrayFeatureExtractorOp&lt;int&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.29%)</title><rect x="979" y="340" width="4" height="15" fill="rgb(224,82,24)"/><text x="982.00" y="350.50"></text></g><g><title>onnxruntime::TensorTypeBase::IsTensorType (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="981" y="356" width="2" height="15" fill="rgb(222,148,17)"/><text x="984.00" y="366.50"></text></g><g><title>0x7f36696ffd50 (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="993" y="372" width="2" height="15" fill="rgb(233,89,53)"/><text x="996.00" y="382.50"></text></g><g><title>0x7f3679c34b39 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1030" y="388" width="1" height="15" fill="rgb(228,203,27)"/><text x="1033.00" y="398.50"></text></g><g><title>0x7f3679c34b49 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1031" y="388" width="2" height="15" fill="rgb(244,217,43)"/><text x="1034.00" y="398.50"></text></g><g><title>0x7f3679c34d48 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1033" y="388" width="2" height="15" fill="rgb(213,6,7)"/><text x="1036.00" y="398.50"></text></g><g><title>0x7f3679c34d54 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1035" y="388" width="2" height="15" fill="rgb(229,54,38)"/><text x="1038.00" y="398.50"></text></g><g><title>0x7f3679c34d67 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1037" y="388" width="1" height="15" fill="rgb(228,220,21)"/><text x="1040.00" y="398.50"></text></g><g><title>0x7f3679c34e07 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1038" y="388" width="2" height="15" fill="rgb(233,113,15)"/><text x="1041.00" y="398.50"></text></g><g><title>0x7f3679c34e33 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1040" y="388" width="2" height="15" fill="rgb(225,43,41)"/><text x="1043.00" y="398.50"></text></g><g><title>0x7f3679c34fe6 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1042" y="388" width="2" height="15" fill="rgb(232,224,44)"/><text x="1045.00" y="398.50"></text></g><g><title>0x7f3679c35033 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1044" y="388" width="1" height="15" fill="rgb(230,190,39)"/><text x="1047.00" y="398.50"></text></g><g><title>0x7f3679c35040 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1045" y="388" width="2" height="15" fill="rgb(252,74,4)"/><text x="1048.00" y="398.50"></text></g><g><title>0x7f3679c35050 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1047" y="388" width="2" height="15" fill="rgb(210,206,22)"/><text x="1050.00" y="398.50"></text></g><g><title>0x7f3679c3506d (libc-2.29.so) (2 samples, 0.29%)</title><rect x="1049" y="388" width="3" height="15" fill="rgb(221,108,18)"/><text x="1052.00" y="398.50"></text></g><g><title>0x7f3679c35097 (libc-2.29.so) (2 samples, 0.29%)</title><rect x="1052" y="388" width="4" height="15" fill="rgb(233,201,9)"/><text x="1055.00" y="398.50"></text></g><g><title>0x7f3679c35384 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1056" y="388" width="1" height="15" fill="rgb(226,65,19)"/><text x="1059.00" y="398.50"></text></g><g><title>0x7f3679c35395 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1057" y="388" width="2" height="15" fill="rgb(208,135,36)"/><text x="1060.00" y="398.50"></text></g><g><title>0x7f3679c353ce (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1059" y="388" width="2" height="15" fill="rgb(224,170,4)"/><text x="1062.00" y="398.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (41 samples, 6.04%)</title><rect x="991" y="356" width="72" height="15" fill="rgb(212,103,21)"/><text x="994.00" y="366.50">operator..</text></g><g><title>malloc (libc-2.29.so) (39 samples, 5.74%)</title><rect x="995" y="372" width="68" height="15" fill="rgb(214,55,16)"/><text x="998.00" y="382.50">malloc ..</text></g><g><title>0x7f3679c35700 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1061" y="388" width="2" height="15" fill="rgb(209,105,50)"/><text x="1064.00" y="398.50"></text></g><g><title>0x7f3679c32ab9 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1061" y="404" width="2" height="15" fill="rgb(233,74,49)"/><text x="1064.00" y="414.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_get_insert_hint_unique_pos [clone .localalias.55] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.29%)</title><rect x="1063" y="356" width="3" height="15" fill="rgb(235,123,36)"/><text x="1066.00" y="366.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="1066" y="356" width="2" height="15" fill="rgb(242,94,17)"/><text x="1069.00" y="366.50"></text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (158 samples, 23.27%)</title><rect x="797" y="308" width="274" height="15" fill="rgb(223,33,16)"/><text x="800.00" y="318.50">onnxruntime::utils::ExecuteGraphImpl..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (158 samples, 23.27%)</title><rect x="797" y="324" width="274" height="15" fill="rgb(213,42,46)"/><text x="800.00" y="334.50">onnxruntime::SequentialExecutor::Exe..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (51 samples, 7.51%)</title><rect x="983" y="340" width="88" height="15" fill="rgb(221,113,4)"/><text x="986.00" y="350.50">onnxruntim..</text></g><g><title>std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.29%)</title><rect x="1068" y="356" width="3" height="15" fill="rgb(238,66,47)"/><text x="1071.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (160 samples, 23.56%)</title><rect x="795" y="260" width="278" height="15" fill="rgb(219,159,40)"/><text x="798.00" y="270.50">onnxruntime::InferenceSession::Run (o..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (159 samples, 23.42%)</title><rect x="797" y="276" width="276" height="15" fill="rgb(209,209,3)"/><text x="800.00" y="286.50">onnxruntime::InferenceSession::Run (..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (159 samples, 23.42%)</title><rect x="797" y="292" width="276" height="15" fill="rgb(245,221,10)"/><text x="800.00" y="302.50">onnxruntime::utils::ExecuteGraph (on..</text></g><g><title>onnxruntime::utils::InitializeFeedFetchCopyInfo (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1071" y="308" width="2" height="15" fill="rgb(225,143,45)"/><text x="1074.00" y="318.50"></text></g><g><title>onnxruntime::utils::ProviderIsCpuBased (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1071" y="324" width="2" height="15" fill="rgb(241,157,24)"/><text x="1074.00" y="334.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="1071" y="340" width="2" height="15" fill="rgb(207,78,10)"/><text x="1074.00" y="350.50"></text></g><g><title>0x7f3679c49e7a (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1071" y="356" width="2" height="15" fill="rgb(233,83,12)"/><text x="1074.00" y="366.50"></text></g><g><title>onnxruntime::python::GetPyObjFromTensor [clone .constprop.374] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1073" y="260" width="2" height="15" fill="rgb(210,62,49)"/><text x="1076.00" y="270.50"></text></g><g><title>PyArray_New (ctors.c:1378) (1 samples, 0.15%)</title><rect x="1073" y="276" width="2" height="15" fill="rgb(226,171,33)"/><text x="1076.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (1 samples, 0.15%)</title><rect x="1073" y="292" width="2" height="15" fill="rgb(230,30,17)"/><text x="1076.00" y="302.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (1 samples, 0.15%)</title><rect x="1073" y="308" width="2" height="15" fill="rgb(230,91,28)"/><text x="1076.00" y="318.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (1 samples, 0.15%)</title><rect x="1073" y="324" width="2" height="15" fill="rgb(238,169,22)"/><text x="1076.00" y="334.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (1 samples, 0.15%)</title><rect x="1073" y="340" width="2" height="15" fill="rgb(219,31,54)"/><text x="1076.00" y="350.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1073" y="356" width="2" height="15" fill="rgb(225,30,19)"/><text x="1076.00" y="366.50"></text></g><g><title>0x7f3679c35028 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1073" y="372" width="2" height="15" fill="rgb(240,151,49)"/><text x="1076.00" y="382.50"></text></g><g><title>0x7f3679c32c28 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1073" y="388" width="2" height="15" fill="rgb(221,136,39)"/><text x="1076.00" y="398.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 1.77%)</title><rect x="1120" y="276" width="21" height="15" fill="rgb(232,124,11)"/><text x="1123.00" y="286.50"></text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (39 samples, 5.74%)</title><rect x="1075" y="260" width="68" height="15" fill="rgb(240,198,15)"/><text x="1078.00" y="270.50">pybind1..</text></g><g><title>std::_Rb_tree_increment (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="1141" y="276" width="2" height="15" fill="rgb(205,197,20)"/><text x="1144.00" y="286.50"></text></g><g><title>pybind11::list::list [clone .lto_priv.504] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1143" y="260" width="1" height="15" fill="rgb(205,1,27)"/><text x="1146.00" y="270.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1143" y="276" width="1" height="15" fill="rgb(233,211,24)"/><text x="1146.00" y="286.50"></text></g><g><title>0x7f3679c54120 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1143" y="292" width="1" height="15" fill="rgb(221,58,29)"/><text x="1146.00" y="302.50"></text></g><g><title>0x7f3637c3e0f0 (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1151" y="292" width="2" height="15" fill="rgb(211,149,4)"/><text x="1154.00" y="302.50"></text></g><g><title>0x7f3679c33906 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1153" y="292" width="2" height="15" fill="rgb(236,199,6)"/><text x="1156.00" y="302.50"></text></g><g><title>0x7f3679c3390e (libc-2.29.so) (2 samples, 0.29%)</title><rect x="1155" y="292" width="3" height="15" fill="rgb(232,55,43)"/><text x="1158.00" y="302.50"></text></g><g><title>0x7f3679c3392c (libc-2.29.so) (2 samples, 0.29%)</title><rect x="1158" y="292" width="4" height="15" fill="rgb(244,22,46)"/><text x="1161.00" y="302.50"></text></g><g><title>0x7f3679c33a33 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1162" y="292" width="1" height="15" fill="rgb(242,160,5)"/><text x="1165.00" y="302.50"></text></g><g><title>0x7f3679c33d02 (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1163" y="292" width="2" height="15" fill="rgb(207,66,25)"/><text x="1166.00" y="302.50"></text></g><g><title>0x7f3679c33d07 (libc-2.29.so) (2 samples, 0.29%)</title><rect x="1165" y="292" width="4" height="15" fill="rgb(218,90,0)"/><text x="1168.00" y="302.50"></text></g><g><title>0x7f3679c33d13 (libc-2.29.so) (2 samples, 0.29%)</title><rect x="1169" y="292" width="3" height="15" fill="rgb(233,177,14)"/><text x="1172.00" y="302.50"></text></g><g><title>free (libc-2.29.so) (4 samples, 0.59%)</title><rect x="1172" y="292" width="7" height="15" fill="rgb(232,193,21)"/><text x="1175.00" y="302.50"></text></g><g><title>0x7f3679c3399b (libc-2.29.so) (1 samples, 0.15%)</title><rect x="1181" y="308" width="2" height="15" fill="rgb(220,134,44)"/><text x="1184.00" y="318.50"></text></g><g><title>operator delete (libstdc++.so.6.0.28) (1 samples, 0.15%)</title><rect x="1183" y="308" width="1" height="15" fill="rgb(211,107,30)"/><text x="1186.00" y="318.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (227 samples, 33.43%)</title><rect x="793" y="244" width="395" height="15" fill="rgb(213,79,16)"/><text x="796.00" y="254.50">onnxruntime::python::addObjectMethods(pybind11::modul..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 3.68%)</title><rect x="1144" y="260" width="44" height="15" fill="rgb(228,160,14)"/><text x="1147.00" y="270.50">std:..</text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 3.68%)</title><rect x="1144" y="276" width="44" height="15" fill="rgb(235,50,7)"/><text x="1147.00" y="286.50">onnx..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.74%)</title><rect x="1179" y="292" width="9" height="15" fill="rgb(240,190,49)"/><text x="1182.00" y="302.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, OrtMemType&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt; &gt;::_M_erase [clone .localalias.69] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.29%)</title><rect x="1184" y="308" width="4" height="15" fill="rgb(248,74,8)"/><text x="1187.00" y="318.50"></text></g><g><title>all (679 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(249,202,8)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:52) (268 samples, 39.47%)</title><rect x="724" y="52" width="466" height="15" fill="rgb(251,116,0)"/><text x="727.00" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:..</text></g><g><title>profile_ort (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:51) (268 samples, 39.47%)</title><rect x="724" y="68" width="466" height="15" fill="rgb(212,174,9)"/><text x="727.00" y="78.50">profile_ort (bench_MLPClassifier_default_b_cl_1000_4_12_float_...</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:29) (268 samples, 39.47%)</title><rect x="724" y="84" width="466" height="15" fill="rgb(208,211,4)"/><text x="727.00" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_float..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:23) (260 samples, 38.29%)</title><rect x="738" y="100" width="452" height="15" fill="rgb(233,0,11)"/><text x="741.00" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (241 samples, 35.49%)</title><rect x="771" y="116" width="419" height="15" fill="rgb(243,172,47)"/><text x="774.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:1..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (240 samples, 35.35%)</title><rect x="772" y="132" width="418" height="15" fill="rgb(221,179,35)"/><text x="775.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (239 samples, 35.20%)</title><rect x="774" y="148" width="416" height="15" fill="rgb(230,34,20)"/><text x="777.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (239 samples, 35.20%)</title><rect x="774" y="164" width="416" height="15" fill="rgb(254,189,17)"/><text x="777.00" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:6..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (238 samples, 35.05%)</title><rect x="776" y="180" width="414" height="15" fill="rgb(234,31,42)"/><text x="779.00" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:136) (235 samples, 34.61%)</title><rect x="781" y="196" width="409" height="15" fill="rgb(208,77,0)"/><text x="784.00" y="206.50">run (onnxruntime/capi/session.py:136)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (228 samples, 33.58%)</title><rect x="793" y="212" width="397" height="15" fill="rgb(247,209,18)"/><text x="796.00" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/o..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (228 samples, 33.58%)</title><rect x="793" y="228" width="397" height="15" fill="rgb(253,85,42)"/><text x="796.00" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::p..</text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::load [clone .constprop.387] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.15%)</title><rect x="1188" y="244" width="2" height="15" fill="rgb(237,213,34)"/><text x="1191.00" y="254.50"></text></g></g></svg>