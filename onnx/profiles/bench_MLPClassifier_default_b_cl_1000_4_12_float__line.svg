<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="533.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:4) (16 samples, 1.77%)</title><rect x="0.0000%" y="52" width="1.7680%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (16 samples, 1.77%)</title><rect x="0.0000%" y="68" width="1.7680%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (16 samples, 1.77%)</title><rect x="0.0000%" y="84" width="1.7680%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (16 samples, 1.77%)</title><rect x="0.0000%" y="100" width="1.7680%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (16 samples, 1.77%)</title><rect x="0.0000%" y="116" width="1.7680%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (16 samples, 1.77%)</title><rect x="0.0000%" y="132" width="1.7680%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="142.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:667) (20 samples, 2.21%)</title><rect x="2.0994%" y="164" width="2.2099%" height="15" fill="rgb(207,160,47)"/><text x="2.3494%" y="174.50">_..</text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (20 samples, 2.21%)</title><rect x="5.0829%" y="212" width="2.2099%" height="15" fill="rgb(228,23,34)"/><text x="5.3329%" y="222.50">d..</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (39 samples, 4.31%)</title><rect x="8.3978%" y="340" width="4.3094%" height="15" fill="rgb(218,30,26)"/><text x="8.6478%" y="350.50">exec_..</text></g><g><title>sched_yield (libc-2.29.so) (39 samples, 4.31%)</title><rect x="8.3978%" y="356" width="4.3094%" height="15" fill="rgb(220,122,19)"/><text x="8.6478%" y="366.50">sched..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:104) (81 samples, 8.95%)</title><rect x="4.6409%" y="180" width="8.9503%" height="15" fill="rgb(250,228,42)"/><text x="4.8909%" y="190.50">_forward_pass..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (81 samples, 8.95%)</title><rect x="4.6409%" y="196" width="8.9503%" height="15" fill="rgb(240,193,28)"/><text x="4.8909%" y="206.50">safe_sparse_d..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (56 samples, 6.19%)</title><rect x="7.4033%" y="212" width="6.1878%" height="15" fill="rgb(216,20,37)"/><text x="7.6533%" y="222.50">ufunc_ge..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (56 samples, 6.19%)</title><rect x="7.4033%" y="228" width="6.1878%" height="15" fill="rgb(206,188,39)"/><text x="7.6533%" y="238.50">PyUFunc_..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:3008) (50 samples, 5.52%)</title><rect x="8.0663%" y="244" width="5.5249%" height="15" fill="rgb(217,207,13)"/><text x="8.3163%" y="254.50">PyUFunc..</text></g><g><title>DOUBLE_matmul (matmul.c.src:471) (50 samples, 5.52%)</title><rect x="8.0663%" y="260" width="5.5249%" height="15" fill="rgb(231,73,38)"/><text x="8.3163%" y="270.50">DOUBLE_..</text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (50 samples, 5.52%)</title><rect x="8.0663%" y="276" width="5.5249%" height="15" fill="rgb(225,20,46)"/><text x="8.3163%" y="286.50">cblas_d..</text></g><g><title>dgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (49 samples, 5.41%)</title><rect x="8.1768%" y="292" width="5.4144%" height="15" fill="rgb(210,31,41)"/><text x="8.4268%" y="302.50">dgemm_t..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (49 samples, 5.41%)</title><rect x="8.1768%" y="308" width="5.4144%" height="15" fill="rgb(221,200,47)"/><text x="8.4268%" y="318.50">gemm_dr..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (49 samples, 5.41%)</title><rect x="8.1768%" y="324" width="5.4144%" height="15" fill="rgb(226,26,5)"/><text x="8.4268%" y="334.50">exec_bl..</text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:603) (12 samples, 1.33%)</title><rect x="13.7017%" y="292" width="1.3260%" height="15" fill="rgb(249,33,26)"/><text x="13.9517%" y="302.50"></text></g><g><title>_mm_add_pd (emmintrin.h:229) (12 samples, 1.33%)</title><rect x="13.7017%" y="308" width="1.3260%" height="15" fill="rgb(235,183,28)"/><text x="13.9517%" y="318.50"></text></g><g><title>DOUBLE_add (loops.c.src:1760) (15 samples, 1.66%)</title><rect x="13.7017%" y="260" width="1.6575%" height="15" fill="rgb(221,5,38)"/><text x="13.9517%" y="270.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (15 samples, 1.66%)</title><rect x="13.7017%" y="276" width="1.6575%" height="15" fill="rgb(247,18,42)"/><text x="13.9517%" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (18 samples, 1.99%)</title><rect x="13.5912%" y="244" width="1.9890%" height="15" fill="rgb(241,131,45)"/><text x="13.8412%" y="254.50">i..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (19 samples, 2.10%)</title><rect x="13.5912%" y="196" width="2.0994%" height="15" fill="rgb(249,31,29)"/><text x="13.8412%" y="206.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (19 samples, 2.10%)</title><rect x="13.5912%" y="212" width="2.0994%" height="15" fill="rgb(225,111,53)"/><text x="13.8412%" y="222.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (19 samples, 2.10%)</title><rect x="13.5912%" y="228" width="2.0994%" height="15" fill="rgb(238,160,17)"/><text x="13.8412%" y="238.50">e..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:105) (20 samples, 2.21%)</title><rect x="13.5912%" y="180" width="2.2099%" height="15" fill="rgb(214,148,48)"/><text x="13.8412%" y="190.50">_..</text></g><g><title>DOUBLE_clip (clip.c.src:96) (12 samples, 1.33%)</title><rect x="17.9006%" y="404" width="1.3260%" height="15" fill="rgb(232,36,49)"/><text x="18.1506%" y="414.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (65 samples, 7.18%)</title><rect x="17.9006%" y="388" width="7.1823%" height="15" fill="rgb(209,103,24)"/><text x="18.1506%" y="398.50">iterator_l..</text></g><g><title>DOUBLE_clip (clip.c.src:97) (53 samples, 5.86%)</title><rect x="19.2265%" y="404" width="5.8564%" height="15" fill="rgb(229,88,8)"/><text x="19.4765%" y="414.50">DOUBLE_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (70 samples, 7.73%)</title><rect x="17.4586%" y="340" width="7.7348%" height="15" fill="rgb(213,181,19)"/><text x="17.7086%" y="350.50">ufunc_gener..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (70 samples, 7.73%)</title><rect x="17.4586%" y="356" width="7.7348%" height="15" fill="rgb(254,191,54)"/><text x="17.7086%" y="366.50">PyUFunc_Gen..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (69 samples, 7.62%)</title><rect x="17.5691%" y="372" width="7.6243%" height="15" fill="rgb(241,83,37)"/><text x="17.8191%" y="382.50">execute_le..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:109) (86 samples, 9.50%)</title><rect x="15.8011%" y="180" width="9.5028%" height="15" fill="rgb(233,36,39)"/><text x="16.0511%" y="190.50">_forward_pass ..</text></g><g><title>relu (sklearn/neural_network/_base.py:75) (86 samples, 9.50%)</title><rect x="15.8011%" y="196" width="9.5028%" height="15" fill="rgb(226,3,54)"/><text x="16.0511%" y="206.50">relu (sklearn/..</text></g><g><title>clip (&lt;__array_function__ internals&gt;:6) (83 samples, 9.17%)</title><rect x="16.1326%" y="212" width="9.1713%" height="15" fill="rgb(245,192,40)"/><text x="16.3826%" y="222.50">clip (&lt;__arra..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (81 samples, 8.95%)</title><rect x="16.3536%" y="228" width="8.9503%" height="15" fill="rgb(238,167,29)"/><text x="16.6036%" y="238.50">array_impleme..</text></g><g><title>clip (numpy/core/fromnumeric.py:2037) (81 samples, 8.95%)</title><rect x="16.3536%" y="244" width="8.9503%" height="15" fill="rgb(232,182,51)"/><text x="16.6036%" y="254.50">clip (numpy/c..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (80 samples, 8.84%)</title><rect x="16.4641%" y="260" width="8.8398%" height="15" fill="rgb(231,60,39)"/><text x="16.7141%" y="270.50">_wrapfunc (n..</text></g><g><title>array_clip (methods.c:2381) (78 samples, 8.62%)</title><rect x="16.6851%" y="276" width="8.6188%" height="15" fill="rgb(208,69,12)"/><text x="16.9351%" y="286.50">array_clip (..</text></g><g><title>forward_ndarray_method (methods.c:108) (78 samples, 8.62%)</title><rect x="16.6851%" y="292" width="8.6188%" height="15" fill="rgb(235,93,37)"/><text x="16.9351%" y="302.50">forward_ndar..</text></g><g><title>_clip (numpy/core/_methods.py:132) (73 samples, 8.07%)</title><rect x="17.2376%" y="308" width="8.0663%" height="15" fill="rgb(213,116,39)"/><text x="17.4876%" y="318.50">_clip (nump..</text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:85) (73 samples, 8.07%)</title><rect x="17.2376%" y="324" width="8.0663%" height="15" fill="rgb(222,207,29)"/><text x="17.4876%" y="334.50">_clip_dep_i..</text></g><g><title>softmax (sklearn/neural_network/_base.py:92) (11 samples, 1.22%)</title><rect x="25.4144%" y="196" width="1.2155%" height="15" fill="rgb(206,96,30)"/><text x="25.6644%" y="206.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py:93) (11 samples, 1.22%)</title><rect x="26.6298%" y="196" width="1.2155%" height="15" fill="rgb(218,138,4)"/><text x="26.8798%" y="206.50"></text></g><g><title>array_sum (methods.c:2215) (13 samples, 1.44%)</title><rect x="27.9558%" y="212" width="1.4365%" height="15" fill="rgb(250,191,14)"/><text x="28.2058%" y="222.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (13 samples, 1.44%)</title><rect x="27.9558%" y="228" width="1.4365%" height="15" fill="rgb(239,60,40)"/><text x="28.2058%" y="238.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (12 samples, 1.33%)</title><rect x="28.0663%" y="244" width="1.3260%" height="15" fill="rgb(206,27,48)"/><text x="28.3163%" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (12 samples, 1.33%)</title><rect x="28.0663%" y="260" width="1.3260%" height="15" fill="rgb(225,35,8)"/><text x="28.3163%" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (12 samples, 1.33%)</title><rect x="28.0663%" y="276" width="1.3260%" height="15" fill="rgb(250,213,24)"/><text x="28.3163%" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (11 samples, 1.22%)</title><rect x="28.1768%" y="292" width="1.2155%" height="15" fill="rgb(247,123,22)"/><text x="28.4268%" y="302.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:54) (254 samples, 28.07%)</title><rect x="1.8785%" y="52" width="28.0663%" height="15" fill="rgb(231,138,38)"/><text x="2.1285%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_10..</text></g><g><title>profile_skl (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:53) (254 samples, 28.07%)</title><rect x="1.8785%" y="68" width="28.0663%" height="15" fill="rgb(231,145,46)"/><text x="2.1285%" y="78.50">profile_skl (bench_MLPClassifier_default_b_cl..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:37) (254 samples, 28.07%)</title><rect x="1.8785%" y="84" width="28.0663%" height="15" fill="rgb(251,118,11)"/><text x="2.1285%" y="94.50">setup_profile (bench_MLPClassifier_default_b_..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:31) (254 samples, 28.07%)</title><rect x="1.8785%" y="100" width="28.0663%" height="15" fill="rgb(217,147,25)"/><text x="2.1285%" y="110.50">profile (bench_MLPClassifier_default_b_cl_100..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (254 samples, 28.07%)</title><rect x="1.8785%" y="116" width="28.0663%" height="15" fill="rgb(247,81,37)"/><text x="2.1285%" y="126.50">time_predict (mlprodict/asv_benchmark/common_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:228) (254 samples, 28.07%)</title><rect x="1.8785%" y="132" width="28.0663%" height="15" fill="rgb(209,12,38)"/><text x="2.1285%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_..</text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1072) (252 samples, 27.85%)</title><rect x="2.0994%" y="148" width="27.8453%" height="15" fill="rgb(227,1,9)"/><text x="2.3494%" y="158.50">predict_proba (sklearn/neural_network/_multil..</text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:685) (229 samples, 25.30%)</title><rect x="4.6409%" y="164" width="25.3039%" height="15" fill="rgb(248,47,43)"/><text x="4.8909%" y="174.50">_predict (sklearn/neural_network/_multil..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:113) (42 samples, 4.64%)</title><rect x="25.3039%" y="180" width="4.6409%" height="15" fill="rgb(221,10,30)"/><text x="25.5539%" y="190.50">_forw..</text></g><g><title>softmax (sklearn/neural_network/_base.py:94) (19 samples, 2.10%)</title><rect x="27.8453%" y="196" width="2.0994%" height="15" fill="rgb(210,229,1)"/><text x="28.0953%" y="206.50">s..</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (16 samples, 1.77%)</title><rect x="31.7127%" y="388" width="1.7680%" height="15" fill="rgb(222,148,37)"/><text x="31.9627%" y="398.50"></text></g><g><title>sched_yield (libc-2.29.so) (16 samples, 1.77%)</title><rect x="31.7127%" y="404" width="1.7680%" height="15" fill="rgb(234,67,33)"/><text x="31.9627%" y="414.50"></text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (22 samples, 2.43%)</title><rect x="31.1602%" y="260" width="2.4309%" height="15" fill="rgb(247,98,35)"/><text x="31.4102%" y="270.50">ar..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (22 samples, 2.43%)</title><rect x="31.1602%" y="276" width="2.4309%" height="15" fill="rgb(247,138,52)"/><text x="31.4102%" y="286.50">Py..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c:674) (18 samples, 1.99%)</title><rect x="31.6022%" y="292" width="1.9890%" height="15" fill="rgb(213,79,30)"/><text x="31.8522%" y="302.50">c..</text></g><g><title>gemm (cblasfuncs.c:40) (18 samples, 1.99%)</title><rect x="31.6022%" y="308" width="1.9890%" height="15" fill="rgb(246,177,23)"/><text x="31.8522%" y="318.50">g..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (18 samples, 1.99%)</title><rect x="31.6022%" y="324" width="1.9890%" height="15" fill="rgb(230,62,27)"/><text x="31.8522%" y="334.50">c..</text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (18 samples, 1.99%)</title><rect x="31.6022%" y="340" width="1.9890%" height="15" fill="rgb(216,154,8)"/><text x="31.8522%" y="350.50">s..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (18 samples, 1.99%)</title><rect x="31.6022%" y="356" width="1.9890%" height="15" fill="rgb(244,35,45)"/><text x="31.8522%" y="366.50">g..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (18 samples, 1.99%)</title><rect x="31.6022%" y="372" width="1.9890%" height="15" fill="rgb(251,115,12)"/><text x="31.8522%" y="382.50">e..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (23 samples, 2.54%)</title><rect x="31.1602%" y="244" width="2.5414%" height="15" fill="rgb(240,54,50)"/><text x="31.4102%" y="254.50">ar..</text></g><g><title>compiled_run (&lt;string&gt;:11) (39 samples, 4.31%)</title><rect x="31.0497%" y="180" width="4.3094%" height="15" fill="rgb(233,84,52)"/><text x="31.2997%" y="190.50">compi..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (39 samples, 4.31%)</title><rect x="31.0497%" y="196" width="4.3094%" height="15" fill="rgb(207,117,47)"/><text x="31.2997%" y="206.50">_run ..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (39 samples, 4.31%)</title><rect x="31.0497%" y="212" width="4.3094%" height="15" fill="rgb(249,43,39)"/><text x="31.2997%" y="222.50">numpy..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (38 samples, 4.20%)</title><rect x="31.1602%" y="228" width="4.1989%" height="15" fill="rgb(209,38,44)"/><text x="31.4102%" y="238.50">dot (..</text></g><g><title>FLOAT_maximum (loops.c.src:1872) (25 samples, 2.76%)</title><rect x="35.9116%" y="276" width="2.7624%" height="15" fill="rgb(236,212,23)"/><text x="36.1616%" y="286.50">FL..</text></g><g><title>FLOAT_maximum (loops.c.src:1876) (31 samples, 3.43%)</title><rect x="40.1105%" y="276" width="3.4254%" height="15" fill="rgb(242,79,21)"/><text x="40.3605%" y="286.50">FLO..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (72 samples, 7.96%)</title><rect x="35.9116%" y="212" width="7.9558%" height="15" fill="rgb(211,96,35)"/><text x="36.1616%" y="222.50">ufunc_gener..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (72 samples, 7.96%)</title><rect x="35.9116%" y="228" width="7.9558%" height="15" fill="rgb(253,215,40)"/><text x="36.1616%" y="238.50">PyUFunc_Gen..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (72 samples, 7.96%)</title><rect x="35.9116%" y="244" width="7.9558%" height="15" fill="rgb(211,81,21)"/><text x="36.1616%" y="254.50">execute_leg..</text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (72 samples, 7.96%)</title><rect x="35.9116%" y="260" width="7.9558%" height="15" fill="rgb(208,190,38)"/><text x="36.1616%" y="270.50">trivial_thr..</text></g><g><title>compiled_run (&lt;string&gt;:13) (73 samples, 8.07%)</title><rect x="35.9116%" y="180" width="8.0663%" height="15" fill="rgb(235,213,38)"/><text x="36.1616%" y="190.50">compiled_ru..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py:20) (73 samples, 8.07%)</title><rect x="35.9116%" y="196" width="8.0663%" height="15" fill="rgb(237,122,38)"/><text x="36.1616%" y="206.50">_run (mlpro..</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (21 samples, 2.32%)</title><rect x="44.1989%" y="388" width="2.3204%" height="15" fill="rgb(244,218,35)"/><text x="44.4489%" y="398.50">e..</text></g><g><title>sched_yield (libc-2.29.so) (20 samples, 2.21%)</title><rect x="44.3094%" y="404" width="2.2099%" height="15" fill="rgb(240,68,47)"/><text x="44.5594%" y="414.50">s..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (29 samples, 3.20%)</title><rect x="44.0884%" y="244" width="3.2044%" height="15" fill="rgb(210,16,53)"/><text x="44.3384%" y="254.50">arr..</text></g><g><title>array_matrixproduct (multiarraymodule.c:2232) (29 samples, 3.20%)</title><rect x="44.0884%" y="260" width="3.2044%" height="15" fill="rgb(235,124,12)"/><text x="44.3384%" y="270.50">arr..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c:958) (28 samples, 3.09%)</title><rect x="44.1989%" y="276" width="3.0939%" height="15" fill="rgb(224,169,11)"/><text x="44.4489%" y="286.50">PyA..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c:674) (28 samples, 3.09%)</title><rect x="44.1989%" y="292" width="3.0939%" height="15" fill="rgb(250,166,2)"/><text x="44.4489%" y="302.50">cbl..</text></g><g><title>gemm (cblasfuncs.c:40) (28 samples, 3.09%)</title><rect x="44.1989%" y="308" width="3.0939%" height="15" fill="rgb(242,216,29)"/><text x="44.4489%" y="318.50">gem..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (28 samples, 3.09%)</title><rect x="44.1989%" y="324" width="3.0939%" height="15" fill="rgb(230,116,27)"/><text x="44.4489%" y="334.50">cbl..</text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (28 samples, 3.09%)</title><rect x="44.1989%" y="340" width="3.0939%" height="15" fill="rgb(228,99,48)"/><text x="44.4489%" y="350.50">sge..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (28 samples, 3.09%)</title><rect x="44.1989%" y="356" width="3.0939%" height="15" fill="rgb(253,11,6)"/><text x="44.4489%" y="366.50">gem..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (28 samples, 3.09%)</title><rect x="44.1989%" y="372" width="3.0939%" height="15" fill="rgb(247,143,39)"/><text x="44.4489%" y="382.50">exe..</text></g><g><title>compiled_run (&lt;string&gt;:14) (43 samples, 4.75%)</title><rect x="43.9779%" y="180" width="4.7514%" height="15" fill="rgb(236,97,10)"/><text x="44.2279%" y="190.50">compil..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (43 samples, 4.75%)</title><rect x="43.9779%" y="196" width="4.7514%" height="15" fill="rgb(233,208,19)"/><text x="44.2279%" y="206.50">_run (..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (43 samples, 4.75%)</title><rect x="43.9779%" y="212" width="4.7514%" height="15" fill="rgb(216,164,2)"/><text x="44.2279%" y="222.50">numpy_..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (42 samples, 4.64%)</title><rect x="44.0884%" y="228" width="4.6409%" height="15" fill="rgb(220,129,5)"/><text x="44.3384%" y="238.50">dot (..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (13 samples, 1.44%)</title><rect x="47.2928%" y="244" width="1.4365%" height="15" fill="rgb(242,17,10)"/><text x="47.5428%" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:24) (18 samples, 1.99%)</title><rect x="49.6133%" y="196" width="1.9890%" height="15" fill="rgb(242,107,0)"/><text x="49.8633%" y="206.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (18 samples, 1.99%)</title><rect x="49.6133%" y="212" width="1.9890%" height="15" fill="rgb(251,28,31)"/><text x="49.8633%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (18 samples, 1.99%)</title><rect x="49.6133%" y="228" width="1.9890%" height="15" fill="rgb(233,223,10)"/><text x="49.8633%" y="238.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (17 samples, 1.88%)</title><rect x="49.7238%" y="244" width="1.8785%" height="15" fill="rgb(215,21,27)"/><text x="49.9738%" y="254.50">e..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1354) (17 samples, 1.88%)</title><rect x="49.7238%" y="260" width="1.8785%" height="15" fill="rgb(232,23,21)"/><text x="49.9738%" y="270.50">t..</text></g><g><title>FLOAT_exp (loops.c.src:1607) (17 samples, 1.88%)</title><rect x="49.7238%" y="276" width="1.8785%" height="15" fill="rgb(244,5,23)"/><text x="49.9738%" y="286.50">F..</text></g><g><title>expf (libm-2.29.so) (14 samples, 1.55%)</title><rect x="50.0552%" y="292" width="1.5470%" height="15" fill="rgb(226,81,46)"/><text x="50.3052%" y="302.50"></text></g><g><title>compiled_run (&lt;string&gt;:16) (33 samples, 3.65%)</title><rect x="48.7293%" y="180" width="3.6464%" height="15" fill="rgb(247,70,30)"/><text x="48.9793%" y="190.50">comp..</text></g><g><title>compiled_run (&lt;string&gt;:18) (17 samples, 1.88%)</title><rect x="52.3757%" y="180" width="1.8785%" height="15" fill="rgb(212,68,19)"/><text x="52.6257%" y="190.50">c..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (16 samples, 1.77%)</title><rect x="52.4862%" y="196" width="1.7680%" height="15" fill="rgb(240,187,13)"/><text x="52.7362%" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (16 samples, 1.77%)</title><rect x="52.4862%" y="212" width="1.7680%" height="15" fill="rgb(223,113,26)"/><text x="52.7362%" y="222.50"></text></g><g><title>discover_dimensions (ctors.c:884) (13 samples, 1.44%)</title><rect x="55.8011%" y="292" width="1.4365%" height="15" fill="rgb(206,192,2)"/><text x="56.0511%" y="302.50"></text></g><g><title>PyArray_FromAny (ctors.c:1855) (21 samples, 2.32%)</title><rect x="55.0276%" y="260" width="2.3204%" height="15" fill="rgb(241,108,4)"/><text x="55.2776%" y="270.50">P..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c:1755) (14 samples, 1.55%)</title><rect x="55.8011%" y="276" width="1.5470%" height="15" fill="rgb(247,173,49)"/><text x="56.0511%" y="286.50"></text></g><g><title>array_subscript (mapping.c:1539) (33 samples, 3.65%)</title><rect x="54.9171%" y="228" width="3.6464%" height="15" fill="rgb(224,114,35)"/><text x="55.1671%" y="238.50">arra..</text></g><g><title>prepare_index (mapping.c:516) (32 samples, 3.54%)</title><rect x="55.0276%" y="244" width="3.5359%" height="15" fill="rgb(245,159,27)"/><text x="55.2776%" y="254.50">pre..</text></g><g><title>PyArray_FromAny (ctors.c:1938) (11 samples, 1.22%)</title><rect x="57.3481%" y="260" width="1.2155%" height="15" fill="rgb(245,172,44)"/><text x="57.5981%" y="270.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c:581) (11 samples, 1.22%)</title><rect x="57.3481%" y="276" width="1.2155%" height="15" fill="rgb(236,23,11)"/><text x="57.5981%" y="286.50"></text></g><g><title>compiled_run (&lt;string&gt;:19) (42 samples, 4.64%)</title><rect x="54.2541%" y="180" width="4.6409%" height="15" fill="rgb(205,117,38)"/><text x="54.5041%" y="190.50">compi..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:80) (41 samples, 4.53%)</title><rect x="54.3646%" y="196" width="4.5304%" height="15" fill="rgb(237,72,25)"/><text x="54.6146%" y="206.50">_run ..</text></g><g><title>_array_feature_extrator (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:37) (36 samples, 3.98%)</title><rect x="54.9171%" y="212" width="3.9779%" height="15" fill="rgb(244,70,9)"/><text x="55.1671%" y="222.50">_arr..</text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:61) (264 samples, 29.17%)</title><rect x="29.9448%" y="52" width="29.1713%" height="15" fill="rgb(217,125,39)"/><text x="30.1948%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000..</text></g><g><title>profile_pyrtc (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:60) (264 samples, 29.17%)</title><rect x="29.9448%" y="68" width="29.1713%" height="15" fill="rgb(235,36,10)"/><text x="30.1948%" y="78.50">profile_pyrtc (bench_MLPClassifier_default_b_cl..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:37) (264 samples, 29.17%)</title><rect x="29.9448%" y="84" width="29.1713%" height="15" fill="rgb(251,123,47)"/><text x="30.1948%" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:31) (263 samples, 29.06%)</title><rect x="30.0552%" y="100" width="29.0608%" height="15" fill="rgb(221,13,13)"/><text x="30.3052%" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (262 samples, 28.95%)</title><rect x="30.1657%" y="116" width="28.9503%" height="15" fill="rgb(238,131,9)"/><text x="30.4157%" y="126.50">time_predict (mlprodict/asv_benchmark/common_as..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (260 samples, 28.73%)</title><rect x="30.3867%" y="132" width="28.7293%" height="15" fill="rgb(211,50,8)"/><text x="30.6367%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_s..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (258 samples, 28.51%)</title><rect x="30.6077%" y="148" width="28.5083%" height="15" fill="rgb(245,182,24)"/><text x="30.8577%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (257 samples, 28.40%)</title><rect x="30.7182%" y="164" width="28.3978%" height="15" fill="rgb(242,14,37)"/><text x="30.9682%" y="174.50">_run_sequence_runtime_compiled (mlprodict/onnx..</text></g><g><title>mkl_blas_avx_sgemm_kernel_0 (onnxruntime/capi/libmklml_intel.so) (18 samples, 1.99%)</title><rect x="62.8729%" y="212" width="1.9890%" height="15" fill="rgb(246,228,12)"/><text x="63.1229%" y="222.50">m..</text></g><g><title>dnnl_primitive_execute (onnxruntime/capi/libdnnl.so.1) (43 samples, 4.75%)</title><rect x="66.0773%" y="372" width="4.7514%" height="15" fill="rgb(213,55,15)"/><text x="66.3273%" y="382.50">dnnl_p..</text></g><g><title>dnnl_primitive::execute (onnxruntime/capi/libdnnl.so.1) (42 samples, 4.64%)</title><rect x="66.1878%" y="388" width="4.6409%" height="15" fill="rgb(209,9,3)"/><text x="66.4378%" y="398.50">dnnl_..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute (onnxruntime/capi/libdnnl.so.1) (42 samples, 4.64%)</title><rect x="66.1878%" y="404" width="4.6409%" height="15" fill="rgb(230,59,30)"/><text x="66.4378%" y="414.50">dnnl:..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute_forward (onnxruntime/capi/libdnnl.so.1) (42 samples, 4.64%)</title><rect x="66.1878%" y="420" width="4.6409%" height="15" fill="rgb(209,121,21)"/><text x="66.4378%" y="430.50">dnnl:..</text></g><g><title>GOMP_parallel@GOMP_4.0 (libiomp5.so) (42 samples, 4.64%)</title><rect x="66.1878%" y="436" width="4.6409%" height="15" fill="rgb(220,109,13)"/><text x="66.4378%" y="446.50">GOMP_..</text></g><g><title>__kmp_join_call (libiomp5.so) (41 samples, 4.53%)</title><rect x="66.2983%" y="452" width="4.5304%" height="15" fill="rgb(232,18,1)"/><text x="66.5483%" y="462.50">__kmp..</text></g><g><title>__kmp_internal_join (libiomp5.so) (41 samples, 4.53%)</title><rect x="66.2983%" y="468" width="4.5304%" height="15" fill="rgb(215,41,42)"/><text x="66.5483%" y="478.50">__kmp..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (41 samples, 4.53%)</title><rect x="66.2983%" y="484" width="4.5304%" height="15" fill="rgb(224,123,36)"/><text x="66.5483%" y="494.50">__kmp..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (41 samples, 4.53%)</title><rect x="66.2983%" y="500" width="4.5304%" height="15" fill="rgb(240,125,3)"/><text x="66.5483%" y="510.50">_INTE..</text></g><g><title>onnxruntime::FunctionKernel::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (46 samples, 5.08%)</title><rect x="66.0773%" y="324" width="5.0829%" height="15" fill="rgb(205,98,50)"/><text x="66.3273%" y="334.50">onnxru..</text></g><g><title>std::_Function_handler&lt;onnxruntime::common::Status(void*, OrtApi const*, OrtKernelContext*), onnxruntime::DNNLExecutionProvider::Compile(std::vector&lt;onnxruntime::Node*, std::allocator&lt;onnxruntime::Node*&gt; &gt; const&amp;, std::vector&lt;onnxruntime::NodeComputeInfo, std::allocator&lt;onnxruntime::NodeComputeInfo&gt; &gt;&amp;)::{lambda(void*, OrtApi const*, OrtKernelContext*)#3}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (46 samples, 5.08%)</title><rect x="66.0773%" y="340" width="5.0829%" height="15" fill="rgb(205,185,37)"/><text x="66.3273%" y="350.50">std::_..</text></g><g><title>onnxruntime::ort_dnnl::DnnlFuncKernel&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (46 samples, 5.08%)</title><rect x="66.0773%" y="356" width="5.0829%" height="15" fill="rgb(238,207,15)"/><text x="66.3273%" y="366.50">onnxru..</text></g><g><title>mkl_blas_avx_sgemm_pst (onnxruntime/capi/libmklml_intel.so) (54 samples, 5.97%)</title><rect x="72.2652%" y="452" width="5.9669%" height="15" fill="rgb(213,199,42)"/><text x="72.5152%" y="462.50">mkl_blas..</text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (70 samples, 7.73%)</title><rect x="71.1602%" y="324" width="7.7348%" height="15" fill="rgb(235,201,11)"/><text x="71.4102%" y="334.50">onnxruntime..</text></g><g><title>onnxruntime::math::Gemm&lt;float, onnxruntime::concurrency::ThreadPool&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (60 samples, 6.63%)</title><rect x="72.2652%" y="340" width="6.6298%" height="15" fill="rgb(207,46,11)"/><text x="72.5152%" y="350.50">onnxrunti..</text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (60 samples, 6.63%)</title><rect x="72.2652%" y="356" width="6.6298%" height="15" fill="rgb(241,35,35)"/><text x="72.5152%" y="366.50">cblas_sge..</text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (60 samples, 6.63%)</title><rect x="72.2652%" y="372" width="6.6298%" height="15" fill="rgb(243,32,47)"/><text x="72.5152%" y="382.50">sgemm_ (o..</text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (60 samples, 6.63%)</title><rect x="72.2652%" y="388" width="6.6298%" height="15" fill="rgb(247,202,23)"/><text x="72.5152%" y="398.50">mkl_blas_..</text></g><g><title>mkl_blas_sgemm_omp_driver_v1 (onnxruntime/capi/libmklml_intel.so) (60 samples, 6.63%)</title><rect x="72.2652%" y="404" width="6.6298%" height="15" fill="rgb(219,102,11)"/><text x="72.5152%" y="414.50">mkl_blas_..</text></g><g><title>mkl_blas_xsgemm (onnxruntime/capi/libmklml_intel.so) (60 samples, 6.63%)</title><rect x="72.2652%" y="420" width="6.6298%" height="15" fill="rgb(243,110,44)"/><text x="72.5152%" y="430.50">mkl_blas_..</text></g><g><title>mkl_blas_avx_xsgemm (onnxruntime/capi/libmklml_intel.so) (60 samples, 6.63%)</title><rect x="72.2652%" y="436" width="6.6298%" height="15" fill="rgb(222,74,54)"/><text x="72.5152%" y="446.50">mkl_blas_..</text></g><g><title>onnxruntime::Softmax&lt;float, false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 2.10%)</title><rect x="79.2265%" y="324" width="2.0994%" height="15" fill="rgb(216,99,12)"/><text x="79.4765%" y="334.50">o..</text></g><g><title>onnxruntime::ComputeSoftMax&lt;Eigen::ThreadPoolDevice, float&gt; [clone .constprop.656] (onnxruntime/capi/onnxruntime_pybind11_state.so) (19 samples, 2.10%)</title><rect x="79.2265%" y="340" width="2.0994%" height="15" fill="rgb(226,22,26)"/><text x="79.4765%" y="350.50">o..</text></g><g><title>operator new (libstdc++.so.6.0.28) (47 samples, 5.19%)</title><rect x="81.9890%" y="340" width="5.1934%" height="15" fill="rgb(217,163,10)"/><text x="82.2390%" y="350.50">operat..</text></g><g><title>malloc (libc-2.29.so) (46 samples, 5.08%)</title><rect x="82.0994%" y="356" width="5.0829%" height="15" fill="rgb(213,25,53)"/><text x="82.3494%" y="366.50">malloc..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (215 samples, 23.76%)</title><rect x="64.8619%" y="244" width="23.7569%" height="15" fill="rgb(252,105,26)"/><text x="65.1119%" y="254.50">onnxruntime::InferenceSession::Run (on..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (215 samples, 23.76%)</title><rect x="64.8619%" y="260" width="23.7569%" height="15" fill="rgb(220,39,43)"/><text x="65.1119%" y="270.50">onnxruntime::InferenceSession::Run (on..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (213 samples, 23.54%)</title><rect x="65.0829%" y="276" width="23.5359%" height="15" fill="rgb(229,68,48)"/><text x="65.3329%" y="286.50">onnxruntime::utils::ExecuteGraph (onn..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (213 samples, 23.54%)</title><rect x="65.0829%" y="292" width="23.5359%" height="15" fill="rgb(252,8,32)"/><text x="65.3329%" y="302.50">onnxruntime::utils::ExecuteGraphImpl ..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (213 samples, 23.54%)</title><rect x="65.0829%" y="308" width="23.5359%" height="15" fill="rgb(223,20,43)"/><text x="65.3329%" y="318.50">onnxruntime::SequentialExecutor::Exec..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (66 samples, 7.29%)</title><rect x="81.3260%" y="324" width="7.2928%" height="15" fill="rgb(229,81,49)"/><text x="81.5760%" y="334.50">onnxruntim..</text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (22 samples, 2.43%)</title><rect x="88.6188%" y="244" width="2.4309%" height="15" fill="rgb(236,28,36)"/><text x="88.8688%" y="254.50">on..</text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (21 samples, 2.32%)</title><rect x="96.5746%" y="292" width="2.3204%" height="15" fill="rgb(249,185,26)"/><text x="96.8246%" y="302.50">p..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (70 samples, 7.73%)</title><rect x="91.2707%" y="276" width="7.7348%" height="15" fill="rgb(249,174,33)"/><text x="91.5207%" y="286.50">pybind11::d..</text></g><g><title>onnxruntime::python::AddNonTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (74 samples, 8.18%)</title><rect x="91.0497%" y="244" width="8.1768%" height="15" fill="rgb(233,201,37)"/><text x="91.2997%" y="254.50">onnxruntime..</text></g><g><title>onnxruntime::python::AddNonTensor&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (74 samples, 8.18%)</title><rect x="91.0497%" y="260" width="8.1768%" height="15" fill="rgb(221,78,26)"/><text x="91.2997%" y="270.50">onnxruntime..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (345 samples, 38.12%)</title><rect x="61.7680%" y="164" width="38.1215%" height="15" fill="rgb(250,127,30)"/><text x="62.0180%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (345 samples, 38.12%)</title><rect x="61.7680%" y="180" width="38.1215%" height="15" fill="rgb(230,49,44)"/><text x="62.0180%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py:64)</text></g><g><title>run (onnxruntime/capi/session.py:142) (341 samples, 37.68%)</title><rect x="62.2099%" y="196" width="37.6796%" height="15" fill="rgb(229,67,23)"/><text x="62.4599%" y="206.50">run (onnxruntime/capi/session.py:142)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (317 samples, 35.03%)</title><rect x="64.8619%" y="212" width="35.0276%" height="15" fill="rgb(249,83,47)"/><text x="65.1119%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnx..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (317 samples, 35.03%)</title><rect x="64.8619%" y="228" width="35.0276%" height="15" fill="rgb(215,43,3)"/><text x="65.1119%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::pyth..</text></g><g><title>all (905 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:68) (370 samples, 40.88%)</title><rect x="59.1160%" y="52" width="40.8840%" height="15" fill="rgb(219,56,2)"/><text x="59.3660%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:68)</text></g><g><title>profile_ort (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:67) (370 samples, 40.88%)</title><rect x="59.1160%" y="68" width="40.8840%" height="15" fill="rgb(233,0,4)"/><text x="59.3660%" y="78.50">profile_ort (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:6..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:37) (369 samples, 40.77%)</title><rect x="59.2265%" y="84" width="40.7735%" height="15" fill="rgb(235,30,7)"/><text x="59.4765%" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:31) (368 samples, 40.66%)</title><rect x="59.3370%" y="100" width="40.6630%" height="15" fill="rgb(250,79,13)"/><text x="59.5870%" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182) (348 samples, 38.45%)</title><rect x="61.5470%" y="116" width="38.4530%" height="15" fill="rgb(211,146,34)"/><text x="61.7970%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:182)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232) (347 samples, 38.34%)</title><rect x="61.6575%" y="132" width="38.3425%" height="15" fill="rgb(228,22,38)"/><text x="61.9075%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:232)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (347 samples, 38.34%)</title><rect x="61.6575%" y="148" width="38.3425%" height="15" fill="rgb(235,168,5)"/><text x="61.9075%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g></svg></svg>