<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1638" onload="init(evt)" viewBox="0 0 1200 1638" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1638" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1621.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1621.00"> </text><g id="frames"><g><title>_make_estimator (sklearn/ensemble/_base.py:149) (1 samples, 0.17%)</title><rect x="10" y="148" width="1" height="15" fill="rgb(226,19,0)"/><text x="13.00" y="158.50"></text></g><g><title>clone (sklearn/base.py:73) (1 samples, 0.17%)</title><rect x="10" y="164" width="1" height="15" fill="rgb(208,76,50)"/><text x="13.00" y="174.50"></text></g><g><title>get_params (sklearn/base.py:191) (1 samples, 0.17%)</title><rect x="10" y="180" width="1" height="15" fill="rgb(241,16,28)"/><text x="13.00" y="190.50"></text></g><g><title>fit (sklearn/ensemble/_forest.py:369) (2 samples, 0.34%)</title><rect x="10" y="116" width="3" height="15" fill="rgb(221,18,41)"/><text x="13.00" y="126.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/ensemble/_forest.py:369) (2 samples, 0.34%)</title><rect x="10" y="132" width="3" height="15" fill="rgb(238,27,54)"/><text x="13.00" y="142.50"></text></g><g><title>_make_estimator (sklearn/ensemble/_base.py:154) (1 samples, 0.17%)</title><rect x="11" y="148" width="2" height="15" fill="rgb(220,130,21)"/><text x="14.00" y="158.50"></text></g><g><title>_set_random_states (sklearn/ensemble/_base.py:77) (1 samples, 0.17%)</title><rect x="11" y="164" width="2" height="15" fill="rgb(225,27,30)"/><text x="14.00" y="174.50"></text></g><g><title>set_params (sklearn/base.py:227) (1 samples, 0.17%)</title><rect x="11" y="180" width="2" height="15" fill="rgb(207,219,12)"/><text x="14.00" y="190.50"></text></g><g><title>get_params (sklearn/base.py:189) (1 samples, 0.17%)</title><rect x="11" y="196" width="2" height="15" fill="rgb(249,15,16)"/><text x="14.00" y="206.50"></text></g><g><title>_get_param_names (sklearn/base.py:158) (1 samples, 0.17%)</title><rect x="11" y="212" width="2" height="15" fill="rgb(241,40,14)"/><text x="14.00" y="222.50"></text></g><g><title>signature (inspect.py:3083) (1 samples, 0.17%)</title><rect x="11" y="228" width="2" height="15" fill="rgb(216,130,42)"/><text x="14.00" y="238.50"></text></g><g><title>from_callable (inspect.py:2833) (1 samples, 0.17%)</title><rect x="11" y="244" width="2" height="15" fill="rgb(220,48,11)"/><text x="14.00" y="254.50"></text></g><g><title>_signature_from_callable (inspect.py:2284) (1 samples, 0.17%)</title><rect x="11" y="260" width="2" height="15" fill="rgb(247,178,53)"/><text x="14.00" y="270.50"></text></g><g><title>_signature_from_function (inspect.py:2157) (1 samples, 0.17%)</title><rect x="11" y="276" width="2" height="15" fill="rgb(231,170,50)"/><text x="14.00" y="286.50"></text></g><g><title>_parallel_build_trees (sklearn/ensemble/_forest.py:154) (1 samples, 0.17%)</title><rect x="13" y="244" width="2" height="15" fill="rgb(211,147,50)"/><text x="16.00" y="254.50"></text></g><g><title>_generate_sample_indices (sklearn/ensemble/_forest.py:120) (1 samples, 0.17%)</title><rect x="13" y="260" width="2" height="15" fill="rgb(238,35,5)"/><text x="16.00" y="270.50"></text></g><g><title>randint (mtrand.c:6007) (1 samples, 0.17%)</title><rect x="13" y="276" width="2" height="15" fill="rgb(229,176,13)"/><text x="16.00" y="286.50"></text></g><g><title>randint (mtrand.c:6250) (1 samples, 0.17%)</title><rect x="13" y="292" width="2" height="15" fill="rgb(235,150,5)"/><text x="16.00" y="302.50"></text></g><g><title>bounded_integers__rand_int64 (bounded_integers.c:16267) (1 samples, 0.17%)</title><rect x="13" y="308" width="2" height="15" fill="rgb(212,196,49)"/><text x="16.00" y="318.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:6) (1 samples, 0.17%)</title><rect x="13" y="324" width="2" height="15" fill="rgb(225,199,29)"/><text x="16.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (1 samples, 0.17%)</title><rect x="13" y="340" width="2" height="15" fill="rgb(215,23,54)"/><text x="16.00" y="350.50"></text></g><g><title>prod (numpy/core/fromnumeric.py:2911) (1 samples, 0.17%)</title><rect x="13" y="356" width="2" height="15" fill="rgb(249,139,45)"/><text x="16.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:79) (1 samples, 0.17%)</title><rect x="13" y="372" width="2" height="15" fill="rgb(237,37,49)"/><text x="16.00" y="382.50"></text></g><g><title>MT19937___init__ (mt19937.c:2455) (1 samples, 0.17%)</title><rect x="15" y="372" width="2" height="15" fill="rgb(225,189,14)"/><text x="18.00" y="382.50"></text></g><g><title>__init__ (bit_generator.c:6998) (1 samples, 0.17%)</title><rect x="15" y="388" width="2" height="15" fill="rgb(234,92,41)"/><text x="18.00" y="398.50"></text></g><g><title>BitGenerator___init__ (bit_generator.c:7160) (1 samples, 0.17%)</title><rect x="15" y="404" width="2" height="15" fill="rgb(215,178,0)"/><text x="18.00" y="414.50"></text></g><g><title>__Pyx__PyObject_CallOneArg (bit_generator.c:14242) (1 samples, 0.17%)</title><rect x="15" y="420" width="2" height="15" fill="rgb(236,83,2)"/><text x="18.00" y="430.50"></text></g><g><title>__init__ (bit_generator.c:4349) (1 samples, 0.17%)</title><rect x="15" y="436" width="2" height="15" fill="rgb(231,110,19)"/><text x="18.00" y="446.50"></text></g><g><title>SeedSequence___init__ (bit_generator.c:4691) (1 samples, 0.17%)</title><rect x="15" y="452" width="2" height="15" fill="rgb(220,218,10)"/><text x="18.00" y="462.50"></text></g><g><title>SeedSequence_get_assembled_entropy (bit_generator.c:5666) (1 samples, 0.17%)</title><rect x="15" y="468" width="2" height="15" fill="rgb(239,103,17)"/><text x="18.00" y="478.50"></text></g><g><title>MT19937___init__ (mt19937.c:2558) (1 samples, 0.17%)</title><rect x="17" y="372" width="2" height="15" fill="rgb(208,189,30)"/><text x="20.00" y="382.50"></text></g><g><title>__Pyx_GetItemInt_Fast (mt19937.c:8049) (1 samples, 0.17%)</title><rect x="17" y="388" width="2" height="15" fill="rgb(206,160,37)"/><text x="20.00" y="398.50"></text></g><g><title>array_item (mapping.c:1386) (1 samples, 0.17%)</title><rect x="17" y="404" width="2" height="15" fill="rgb(238,35,36)"/><text x="20.00" y="414.50"></text></g><g><title>PyArray_Scalar (scalarapi.c:693) (1 samples, 0.17%)</title><rect x="17" y="420" width="2" height="15" fill="rgb(205,188,28)"/><text x="20.00" y="430.50"></text></g><g><title>gentype_alloc (scalartypes.c.src:130) (1 samples, 0.17%)</title><rect x="17" y="436" width="2" height="15" fill="rgb(254,181,52)"/><text x="20.00" y="446.50"></text></g><g><title>0x7f949137114a (libc-2.29.so) (1 samples, 0.17%)</title><rect x="17" y="452" width="2" height="15" fill="rgb(209,146,7)"/><text x="20.00" y="462.50"></text></g><g><title>fit (sklearn/tree/_classes.py:143) (3 samples, 0.51%)</title><rect x="15" y="276" width="6" height="15" fill="rgb(231,181,6)"/><text x="18.00" y="286.50"></text></g><g><title>check_random_state (sklearn/utils/validation.py:798) (3 samples, 0.51%)</title><rect x="15" y="292" width="6" height="15" fill="rgb(223,150,41)"/><text x="18.00" y="302.50"></text></g><g><title>__init__ (mtrand.c:3210) (3 samples, 0.51%)</title><rect x="15" y="308" width="6" height="15" fill="rgb(209,153,44)"/><text x="18.00" y="318.50"></text></g><g><title>RandomState___init__ (mtrand.c:3309) (3 samples, 0.51%)</title><rect x="15" y="324" width="6" height="15" fill="rgb(240,102,28)"/><text x="18.00" y="334.50"></text></g><g><title>__Pyx_PyObject_CallNoArg (mtrand.c:25718) (3 samples, 0.51%)</title><rect x="15" y="340" width="6" height="15" fill="rgb(240,77,37)"/><text x="18.00" y="350.50"></text></g><g><title>__init__ (mt19937.c:2381) (3 samples, 0.51%)</title><rect x="15" y="356" width="6" height="15" fill="rgb(206,167,46)"/><text x="18.00" y="366.50"></text></g><g><title>MT19937___init__ (mt19937.c:2561) (1 samples, 0.17%)</title><rect x="19" y="372" width="2" height="15" fill="rgb(217,20,48)"/><text x="22.00" y="382.50"></text></g><g><title>gentype_dealloc (scalartypes.c.src:143) (1 samples, 0.17%)</title><rect x="19" y="388" width="2" height="15" fill="rgb(225,49,34)"/><text x="22.00" y="398.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:939) (1 samples, 0.17%)</title><rect x="19" y="404" width="2" height="15" fill="rgb(221,37,22)"/><text x="22.00" y="414.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:31) (7 samples, 1.18%)</title><rect x="10" y="52" width="13" height="15" fill="rgb(238,103,2)"/><text x="13.00" y="62.50"></text></g><g><title>start (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:11) (7 samples, 1.18%)</title><rect x="10" y="68" width="13" height="15" fill="rgb(249,184,23)"/><text x="13.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:39) (7 samples, 1.18%)</title><rect x="10" y="84" width="13" height="15" fill="rgb(215,85,38)"/><text x="13.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py:151) (7 samples, 1.18%)</title><rect x="10" y="100" width="13" height="15" fill="rgb(248,212,29)"/><text x="13.00" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_forest.py:383) (5 samples, 0.84%)</title><rect x="13" y="116" width="10" height="15" fill="rgb(219,112,54)"/><text x="16.00" y="126.50"></text></g><g><title>__call__ (joblib/parallel.py:1006) (5 samples, 0.84%)</title><rect x="13" y="132" width="10" height="15" fill="rgb(243,111,15)"/><text x="16.00" y="142.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (5 samples, 0.84%)</title><rect x="13" y="148" width="10" height="15" fill="rgb(214,90,6)"/><text x="16.00" y="158.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (5 samples, 0.84%)</title><rect x="13" y="164" width="10" height="15" fill="rgb(235,173,11)"/><text x="16.00" y="174.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (5 samples, 0.84%)</title><rect x="13" y="180" width="10" height="15" fill="rgb(225,83,44)"/><text x="16.00" y="190.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (5 samples, 0.84%)</title><rect x="13" y="196" width="10" height="15" fill="rgb(205,74,1)"/><text x="16.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (5 samples, 0.84%)</title><rect x="13" y="212" width="10" height="15" fill="rgb(227,126,3)"/><text x="16.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (5 samples, 0.84%)</title><rect x="13" y="228" width="10" height="15" fill="rgb(237,151,54)"/><text x="16.00" y="238.50"></text></g><g><title>_parallel_build_trees (sklearn/ensemble/_forest.py:165) (4 samples, 0.68%)</title><rect x="15" y="244" width="8" height="15" fill="rgb(209,73,23)"/><text x="18.00" y="254.50"></text></g><g><title>fit (sklearn/tree/_classes.py:876) (4 samples, 0.68%)</title><rect x="15" y="260" width="8" height="15" fill="rgb(234,127,27)"/><text x="18.00" y="270.50"></text></g><g><title>fit (sklearn/tree/_classes.py:367) (1 samples, 0.17%)</title><rect x="21" y="276" width="2" height="15" fill="rgb(222,111,27)"/><text x="24.00" y="286.50"></text></g><g><title>0x7f946ad88b11 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="21" y="292" width="2" height="15" fill="rgb(239,7,25)"/><text x="24.00" y="302.50"></text></g><g><title>0x7f946adba28d (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="21" y="308" width="2" height="15" fill="rgb(244,128,45)"/><text x="24.00" y="318.50"></text></g><g><title>0x7f946afe6640 (sklearn/tree/_splitter.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="21" y="324" width="2" height="15" fill="rgb(219,157,7)"/><text x="24.00" y="334.50"></text></g><g><title>0x7f946b222a14 (sklearn/tree/_criterion.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="21" y="340" width="2" height="15" fill="rgb(241,219,34)"/><text x="24.00" y="350.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (1 samples, 0.17%)</title><rect x="23" y="164" width="2" height="15" fill="rgb(222,214,23)"/><text x="26.00" y="174.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (1 samples, 0.17%)</title><rect x="23" y="180" width="2" height="15" fill="rgb(228,170,2)"/><text x="26.00" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (1 samples, 0.17%)</title><rect x="23" y="196" width="2" height="15" fill="rgb(243,187,47)"/><text x="26.00" y="206.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (1 samples, 0.17%)</title><rect x="23" y="212" width="2" height="15" fill="rgb(221,227,23)"/><text x="26.00" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (1 samples, 0.17%)</title><rect x="23" y="228" width="2" height="15" fill="rgb(207,187,43)"/><text x="26.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (1 samples, 0.17%)</title><rect x="23" y="244" width="2" height="15" fill="rgb(222,129,26)"/><text x="26.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (1 samples, 0.17%)</title><rect x="23" y="260" width="2" height="15" fill="rgb(242,146,32)"/><text x="26.00" y="270.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:449) (1 samples, 0.17%)</title><rect x="23" y="276" width="2" height="15" fill="rgb(243,69,11)"/><text x="26.00" y="286.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:911) (1 samples, 0.17%)</title><rect x="23" y="292" width="2" height="15" fill="rgb(234,167,18)"/><text x="26.00" y="302.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.17%)</title><rect x="23" y="308" width="2" height="15" fill="rgb(233,0,7)"/><text x="26.00" y="318.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.17%)</title><rect x="23" y="324" width="2" height="15" fill="rgb(217,46,51)"/><text x="26.00" y="334.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (1 samples, 0.17%)</title><rect x="23" y="340" width="2" height="15" fill="rgb(244,2,29)"/><text x="26.00" y="350.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:783) (2 samples, 0.34%)</title><rect x="25" y="180" width="4" height="15" fill="rgb(210,199,38)"/><text x="28.00" y="190.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:796) (2 samples, 0.34%)</title><rect x="29" y="180" width="4" height="15" fill="rgb(222,164,0)"/><text x="32.00" y="190.50"></text></g><g><title>get (queue.py:182) (2 samples, 0.34%)</title><rect x="29" y="196" width="4" height="15" fill="rgb(238,25,32)"/><text x="32.00" y="206.50"></text></g><g><title>__exit__ (threading.py:244) (1 samples, 0.17%)</title><rect x="31" y="212" width="2" height="15" fill="rgb(215,19,24)"/><text x="34.00" y="222.50"></text></g><g><title>delayed (joblib/parallel.py:305) (1 samples, 0.17%)</title><rect x="35" y="212" width="2" height="15" fill="rgb(216,217,54)"/><text x="38.00" y="222.50"></text></g><g><title>update_wrapper (functools.py:52) (1 samples, 0.17%)</title><rect x="41" y="228" width="2" height="15" fill="rgb(224,6,36)"/><text x="44.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:807) (7 samples, 1.18%)</title><rect x="33" y="180" width="14" height="15" fill="rgb(231,4,10)"/><text x="36.00" y="190.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py:669) (7 samples, 1.18%)</title><rect x="33" y="196" width="14" height="15" fill="rgb(208,207,23)"/><text x="36.00" y="206.50"></text></g><g><title>delayed (joblib/parallel.py:308) (5 samples, 0.84%)</title><rect x="37" y="212" width="10" height="15" fill="rgb(214,30,52)"/><text x="40.00" y="222.50"></text></g><g><title>update_wrapper (functools.py:54) (2 samples, 0.34%)</title><rect x="43" y="228" width="4" height="15" fill="rgb(232,134,29)"/><text x="46.00" y="238.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (2 samples, 0.34%)</title><rect x="51" y="212" width="4" height="15" fill="rgb(226,41,54)"/><text x="54.00" y="222.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:208) (5 samples, 0.84%)</title><rect x="47" y="196" width="10" height="15" fill="rgb(253,35,1)"/><text x="50.00" y="206.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.17%)</title><rect x="55" y="212" width="2" height="15" fill="rgb(238,131,6)"/><text x="58.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py:116) (2 samples, 0.34%)</title><rect x="57" y="212" width="4" height="15" fill="rgb(253,54,24)"/><text x="60.00" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:276) (1 samples, 0.17%)</title><rect x="59" y="228" width="2" height="15" fill="rgb(220,60,18)"/><text x="62.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:824) (9 samples, 1.52%)</title><rect x="47" y="180" width="18" height="15" fill="rgb(225,215,19)"/><text x="50.00" y="190.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:212) (4 samples, 0.68%)</title><rect x="57" y="196" width="8" height="15" fill="rgb(254,86,27)"/><text x="60.00" y="206.50"></text></g><g><title>get_active_backend (joblib/parallel.py:94) (2 samples, 0.34%)</title><rect x="61" y="212" width="4" height="15" fill="rgb(233,205,3)"/><text x="64.00" y="222.50"></text></g><g><title>__init__ (joblib/parallel.py:241) (1 samples, 0.17%)</title><rect x="65" y="196" width="2" height="15" fill="rgb(249,98,36)"/><text x="68.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:825) (2 samples, 0.34%)</title><rect x="65" y="180" width="4" height="15" fill="rgb(206,17,44)"/><text x="68.00" y="190.50"></text></g><g><title>__init__ (joblib/parallel.py:243) (1 samples, 0.17%)</title><rect x="67" y="196" width="2" height="15" fill="rgb(251,202,18)"/><text x="70.00" y="206.50"></text></g><g><title>put (queue.py:149) (1 samples, 0.17%)</title><rect x="69" y="196" width="2" height="15" fill="rgb(243,142,31)"/><text x="72.00" y="206.50"></text></g><g><title>put (queue.py:150) (1 samples, 0.17%)</title><rect x="71" y="196" width="2" height="15" fill="rgb(230,22,22)"/><text x="74.00" y="206.50"></text></g><g><title>__exit__ (threading.py:244) (1 samples, 0.17%)</title><rect x="75" y="212" width="2" height="15" fill="rgb(239,180,23)"/><text x="78.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:826) (5 samples, 0.84%)</title><rect x="69" y="180" width="10" height="15" fill="rgb(210,161,21)"/><text x="72.00" y="190.50"></text></g><g><title>put (queue.py:151) (3 samples, 0.51%)</title><rect x="73" y="196" width="6" height="15" fill="rgb(247,10,0)"/><text x="76.00" y="206.50"></text></g><g><title>notify (threading.py:345) (1 samples, 0.17%)</title><rect x="77" y="212" width="2" height="15" fill="rgb(223,65,19)"/><text x="80.00" y="222.50"></text></g><g><title>_is_owned (threading.py:258) (1 samples, 0.17%)</title><rect x="77" y="228" width="2" height="15" fill="rgb(241,117,46)"/><text x="80.00" y="238.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (1 samples, 0.17%)</title><rect x="77" y="244" width="2" height="15" fill="rgb(253,16,20)"/><text x="80.00" y="254.50"></text></g><g><title>notify (threading.py:345) (1 samples, 0.17%)</title><rect x="81" y="212" width="2" height="15" fill="rgb(214,14,15)"/><text x="84.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:829) (3 samples, 0.51%)</title><rect x="79" y="180" width="6" height="15" fill="rgb(251,93,25)"/><text x="82.00" y="190.50"></text></g><g><title>get (queue.py:181) (2 samples, 0.34%)</title><rect x="81" y="196" width="4" height="15" fill="rgb(225,191,32)"/><text x="84.00" y="206.50"></text></g><g><title>notify (threading.py:348) (1 samples, 0.17%)</title><rect x="83" y="212" width="2" height="15" fill="rgb(209,109,41)"/><text x="86.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:830) (3 samples, 0.51%)</title><rect x="85" y="180" width="6" height="15" fill="rgb(238,166,2)"/><text x="88.00" y="190.50"></text></g><g><title>__len__ (joblib/parallel.py:259) (1 samples, 0.17%)</title><rect x="89" y="196" width="2" height="15" fill="rgb(238,69,53)"/><text x="92.00" y="206.50"></text></g><g><title>_dispatch (joblib/parallel.py:750) (1 samples, 0.17%)</title><rect x="93" y="196" width="2" height="15" fill="rgb(228,196,13)"/><text x="96.00" y="206.50"></text></g><g><title>__init__ (joblib/parallel.py:327) (1 samples, 0.17%)</title><rect x="93" y="212" width="2" height="15" fill="rgb(205,108,28)"/><text x="96.00" y="222.50"></text></g><g><title>_dispatch (joblib/parallel.py:751) (1 samples, 0.17%)</title><rect x="95" y="196" width="2" height="15" fill="rgb(214,105,50)"/><text x="98.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:254) (3 samples, 0.51%)</title><rect x="97" y="244" width="6" height="15" fill="rgb(207,131,37)"/><text x="100.00" y="254.50"></text></g><g><title>__init__ (joblib/parallel.py:197) (1 samples, 0.17%)</title><rect x="101" y="260" width="2" height="15" fill="rgb(232,7,39)"/><text x="104.00" y="270.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:442) (1 samples, 0.17%)</title><rect x="103" y="276" width="2" height="15" fill="rgb(208,19,38)"/><text x="106.00" y="286.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:938) (1 samples, 0.17%)</title><rect x="105" y="308" width="2" height="15" fill="rgb(227,127,46)"/><text x="108.00" y="318.50"></text></g><g><title>isclass (inspect.py:78) (1 samples, 0.17%)</title><rect x="105" y="324" width="2" height="15" fill="rgb(223,34,45)"/><text x="108.00" y="334.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (6 samples, 1.01%)</title><rect x="109" y="324" width="12" height="15" fill="rgb(244,67,11)"/><text x="112.00" y="334.50"></text></g><g><title>unicode_endswith (python3.7) (2 samples, 0.34%)</title><rect x="117" y="340" width="4" height="15" fill="rgb(243,180,54)"/><text x="120.00" y="350.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:906) (9 samples, 1.52%)</title><rect x="105" y="292" width="18" height="15" fill="rgb(251,142,32)"/><text x="108.00" y="302.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (8 samples, 1.35%)</title><rect x="107" y="308" width="16" height="15" fill="rgb(214,139,31)"/><text x="110.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:949) (1 samples, 0.17%)</title><rect x="121" y="324" width="2" height="15" fill="rgb(251,189,8)"/><text x="124.00" y="334.50"></text></g><g><title>unicode_startswith (python3.7) (1 samples, 0.17%)</title><rect x="121" y="340" width="2" height="15" fill="rgb(233,63,29)"/><text x="124.00" y="350.50"></text></g><g><title>0x7f946ada22df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="125" y="356" width="2" height="15" fill="rgb(225,99,15)"/><text x="128.00" y="366.50"></text></g><g><title>0x7f946ad86d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="125" y="372" width="2" height="15" fill="rgb(240,140,15)"/><text x="128.00" y="382.50"></text></g><g><title>0x7f946ad86666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="125" y="388" width="2" height="15" fill="rgb(248,121,36)"/><text x="128.00" y="398.50"></text></g><g><title>0x7f946ad7c277 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="125" y="404" width="2" height="15" fill="rgb(219,191,7)"/><text x="128.00" y="414.50"></text></g><g><title>0x7f946ada22fb (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="127" y="356" width="2" height="15" fill="rgb(221,197,11)"/><text x="130.00" y="366.50"></text></g><g><title>0x7f946ada2592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.68%)</title><rect x="129" y="356" width="8" height="15" fill="rgb(247,73,50)"/><text x="132.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c:1973) (3 samples, 0.51%)</title><rect x="131" y="372" width="6" height="15" fill="rgb(226,63,19)"/><text x="134.00" y="382.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (1 samples, 0.17%)</title><rect x="135" y="388" width="2" height="15" fill="rgb(234,207,38)"/><text x="138.00" y="398.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c:954) (1 samples, 0.17%)</title><rect x="135" y="404" width="2" height="15" fill="rgb(209,112,8)"/><text x="138.00" y="414.50"></text></g><g><title>0x7f946ada26a5 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="137" y="356" width="2" height="15" fill="rgb(247,44,40)"/><text x="140.00" y="366.50"></text></g><g><title>0x7f946ada26aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.68%)</title><rect x="139" y="356" width="8" height="15" fill="rgb(225,130,10)"/><text x="142.00" y="366.50"></text></g><g><title>0x7f946ada26ad (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="147" y="356" width="2" height="15" fill="rgb(213,69,9)"/><text x="150.00" y="366.50"></text></g><g><title>0x7f946ada26b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="149" y="356" width="2" height="15" fill="rgb(243,50,50)"/><text x="152.00" y="366.50"></text></g><g><title>0x7f946ada26cf (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="151" y="356" width="2" height="15" fill="rgb(251,183,42)"/><text x="154.00" y="366.50"></text></g><g><title>0x7f946ada26d7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="153" y="356" width="2" height="15" fill="rgb(236,195,30)"/><text x="156.00" y="366.50"></text></g><g><title>0x7f946ada27b6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="155" y="356" width="2" height="15" fill="rgb(229,199,3)"/><text x="158.00" y="366.50"></text></g><g><title>0x7f946ad93fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (17 samples, 2.87%)</title><rect x="125" y="324" width="34" height="15" fill="rgb(226,101,48)"/><text x="128.00" y="334.50">0x..</text></g><g><title>0x7f946ada3405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (17 samples, 2.87%)</title><rect x="125" y="340" width="34" height="15" fill="rgb(234,212,19)"/><text x="128.00" y="350.50">0x..</text></g><g><title>0x7f946ada2c27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="157" y="356" width="2" height="15" fill="rgb(233,149,6)"/><text x="160.00" y="366.50"></text></g><g><title>0x7f946ad7a529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="157" y="372" width="2" height="15" fill="rgb(239,151,14)"/><text x="160.00" y="382.50"></text></g><g><title>array_getbuffer (buffer.c:782) (1 samples, 0.17%)</title><rect x="157" y="388" width="2" height="15" fill="rgb(208,39,31)"/><text x="160.00" y="398.50"></text></g><g><title>_buffer_get_info (buffer.c:653) (1 samples, 0.17%)</title><rect x="157" y="404" width="2" height="15" fill="rgb(215,51,45)"/><text x="160.00" y="414.50"></text></g><g><title>_buffer_info_new (buffer.c:584) (1 samples, 0.17%)</title><rect x="157" y="420" width="2" height="15" fill="rgb(237,20,7)"/><text x="160.00" y="430.50"></text></g><g><title>_buffer_format_string (buffer.c:406) (1 samples, 0.17%)</title><rect x="157" y="436" width="2" height="15" fill="rgb(217,82,9)"/><text x="160.00" y="446.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3896) (1 samples, 0.17%)</title><rect x="159" y="372" width="2" height="15" fill="rgb(236,5,33)"/><text x="162.00" y="382.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3956) (2 samples, 0.34%)</title><rect x="161" y="372" width="4" height="15" fill="rgb(252,123,47)"/><text x="164.00" y="382.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3960) (1 samples, 0.17%)</title><rect x="165" y="372" width="2" height="15" fill="rgb(253,192,45)"/><text x="168.00" y="382.50"></text></g><g><title>0x7f946ad9405a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.84%)</title><rect x="159" y="324" width="10" height="15" fill="rgb(237,164,20)"/><text x="162.00" y="334.50"></text></g><g><title>array_take (methods.c:145) (5 samples, 0.84%)</title><rect x="159" y="340" width="10" height="15" fill="rgb(249,148,38)"/><text x="162.00" y="350.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:234) (5 samples, 0.84%)</title><rect x="159" y="356" width="10" height="15" fill="rgb(239,201,30)"/><text x="162.00" y="366.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3961) (1 samples, 0.17%)</title><rect x="167" y="372" width="2" height="15" fill="rgb(212,42,5)"/><text x="170.00" y="382.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:908) (24 samples, 4.05%)</title><rect x="123" y="292" width="48" height="15" fill="rgb(226,45,51)"/><text x="126.00" y="302.50">pred..</text></g><g><title>0x7f946ad94d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (23 samples, 3.89%)</title><rect x="125" y="308" width="46" height="15" fill="rgb(228,3,8)"/><text x="128.00" y="318.50">0x7f..</text></g><g><title>0x7f946ad94328 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="169" y="324" width="2" height="15" fill="rgb(219,140,42)"/><text x="172.00" y="334.50"></text></g><g><title>array_reshape (methods.c:210) (1 samples, 0.17%)</title><rect x="169" y="340" width="2" height="15" fill="rgb(238,62,4)"/><text x="172.00" y="350.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (1 samples, 0.17%)</title><rect x="169" y="356" width="2" height="15" fill="rgb(218,167,49)"/><text x="172.00" y="366.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (1 samples, 0.17%)</title><rect x="169" y="372" width="2" height="15" fill="rgb(234,162,17)"/><text x="172.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1051) (1 samples, 0.17%)</title><rect x="169" y="388" width="2" height="15" fill="rgb(234,0,18)"/><text x="172.00" y="398.50"></text></g><g><title>memcpy (libc-2.29.so) (1 samples, 0.17%)</title><rect x="169" y="404" width="2" height="15" fill="rgb(232,60,49)"/><text x="172.00" y="414.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:911) (1 samples, 0.17%)</title><rect x="171" y="292" width="2" height="15" fill="rgb(229,204,8)"/><text x="174.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (2 samples, 0.34%)</title><rect x="173" y="372" width="4" height="15" fill="rgb(238,155,24)"/><text x="176.00" y="382.50"></text></g><g><title>allocate_reduce_result (reduction.c:41) (1 samples, 0.17%)</title><rect x="177" y="436" width="2" height="15" fill="rgb(241,165,51)"/><text x="180.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (2 samples, 0.34%)</title><rect x="177" y="404" width="4" height="15" fill="rgb(221,148,49)"/><text x="180.00" y="414.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (2 samples, 0.34%)</title><rect x="177" y="420" width="4" height="15" fill="rgb(209,83,15)"/><text x="180.00" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (1 samples, 0.17%)</title><rect x="179" y="436" width="2" height="15" fill="rgb(227,36,24)"/><text x="182.00" y="446.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.17%)</title><rect x="179" y="452" width="2" height="15" fill="rgb(225,56,2)"/><text x="182.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:183) (1 samples, 0.17%)</title><rect x="181" y="420" width="2" height="15" fill="rgb(222,229,11)"/><text x="184.00" y="430.50"></text></g><g><title>npyiter_check_global_flags (nditer_constr.c:785) (1 samples, 0.17%)</title><rect x="181" y="436" width="2" height="15" fill="rgb(247,5,39)"/><text x="184.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (1 samples, 0.17%)</title><rect x="183" y="420" width="2" height="15" fill="rgb(207,119,14)"/><text x="186.00" y="430.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c:1432) (1 samples, 0.17%)</title><rect x="183" y="436" width="2" height="15" fill="rgb(229,118,6)"/><text x="186.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:390) (1 samples, 0.17%)</title><rect x="185" y="420" width="2" height="15" fill="rgb(231,104,2)"/><text x="188.00" y="430.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c:1285) (1 samples, 0.17%)</title><rect x="185" y="436" width="2" height="15" fill="rgb(244,216,44)"/><text x="188.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (1 samples, 0.17%)</title><rect x="187" y="420" width="2" height="15" fill="rgb(230,87,7)"/><text x="190.00" y="430.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (5 samples, 0.84%)</title><rect x="181" y="404" width="10" height="15" fill="rgb(251,80,18)"/><text x="184.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (1 samples, 0.17%)</title><rect x="189" y="420" width="2" height="15" fill="rgb(244,118,25)"/><text x="192.00" y="430.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2278) (1 samples, 0.17%)</title><rect x="189" y="436" width="2" height="15" fill="rgb(239,79,27)"/><text x="192.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:550) (1 samples, 0.17%)</title><rect x="191" y="404" width="2" height="15" fill="rgb(222,19,20)"/><text x="194.00" y="414.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (1 samples, 0.17%)</title><rect x="191" y="420" width="2" height="15" fill="rgb(240,222,6)"/><text x="194.00" y="430.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (1 samples, 0.17%)</title><rect x="191" y="436" width="2" height="15" fill="rgb(251,182,8)"/><text x="194.00" y="446.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.17%)</title><rect x="191" y="452" width="2" height="15" fill="rgb(254,193,36)"/><text x="194.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:563) (1 samples, 0.17%)</title><rect x="193" y="404" width="2" height="15" fill="rgb(242,63,17)"/><text x="196.00" y="414.50"></text></g><g><title>NpyIter_GetInnerStrideArray (nditer_api.c:1218) (1 samples, 0.17%)</title><rect x="193" y="420" width="2" height="15" fill="rgb(229,47,32)"/><text x="196.00" y="430.50"></text></g><g><title>reduce_loop (ufunc_object.c:3534) (2 samples, 0.34%)</title><rect x="195" y="420" width="4" height="15" fill="rgb(211,79,38)"/><text x="198.00" y="430.50"></text></g><g><title>reduce_loop (ufunc_object.c:3535) (1 samples, 0.17%)</title><rect x="199" y="420" width="2" height="15" fill="rgb(248,58,27)"/><text x="202.00" y="430.50"></text></g><g><title>reduce_loop (ufunc_object.c:3538) (1 samples, 0.17%)</title><rect x="201" y="420" width="2" height="15" fill="rgb(248,20,4)"/><text x="204.00" y="430.50"></text></g><g><title>reduce_loop (ufunc_object.c:3541) (2 samples, 0.34%)</title><rect x="203" y="420" width="4" height="15" fill="rgb(215,69,54)"/><text x="206.00" y="430.50"></text></g><g><title>DOUBLE_add (loops.c.src:1741) (2 samples, 0.34%)</title><rect x="209" y="436" width="4" height="15" fill="rgb(217,83,39)"/><text x="212.00" y="446.50"></text></g><g><title>DOUBLE_add (loops.c.src:1742) (1 samples, 0.17%)</title><rect x="213" y="436" width="2" height="15" fill="rgb(230,79,25)"/><text x="216.00" y="446.50"></text></g><g><title>DOUBLE_add (loops.c.src:1747) (5 samples, 0.84%)</title><rect x="215" y="436" width="10" height="15" fill="rgb(209,189,37)"/><text x="218.00" y="446.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1667) (2 samples, 0.34%)</title><rect x="221" y="452" width="4" height="15" fill="rgb(226,35,24)"/><text x="224.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:229) (1 samples, 0.17%)</title><rect x="225" y="436" width="2" height="15" fill="rgb(220,103,5)"/><text x="228.00" y="446.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:239) (1 samples, 0.17%)</title><rect x="227" y="436" width="2" height="15" fill="rgb(230,202,19)"/><text x="230.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (12 samples, 2.03%)</title><rect x="207" y="420" width="24" height="15" fill="rgb(215,21,52)"/><text x="210.00" y="430.50">r..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (1 samples, 0.17%)</title><rect x="229" y="436" width="2" height="15" fill="rgb(249,5,29)"/><text x="232.00" y="446.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:912) (30 samples, 5.07%)</title><rect x="173" y="292" width="60" height="15" fill="rgb(206,133,39)"/><text x="176.00" y="302.50">predic..</text></g><g><title>array_sum (methods.c:2215) (30 samples, 5.07%)</title><rect x="173" y="308" width="60" height="15" fill="rgb(227,82,28)"/><text x="176.00" y="318.50">array_..</text></g><g><title>forward_ndarray_method (methods.c:108) (30 samples, 5.07%)</title><rect x="173" y="324" width="60" height="15" fill="rgb(207,39,12)"/><text x="176.00" y="334.50">forwar..</text></g><g><title>_sum (numpy/core/_methods.py:38) (30 samples, 5.07%)</title><rect x="173" y="340" width="60" height="15" fill="rgb(222,168,31)"/><text x="176.00" y="350.50">_sum (..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (30 samples, 5.07%)</title><rect x="173" y="356" width="60" height="15" fill="rgb(211,159,42)"/><text x="176.00" y="366.50">ufunc_..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (28 samples, 4.73%)</title><rect x="177" y="372" width="56" height="15" fill="rgb(211,3,35)"/><text x="180.00" y="382.50">PyUFu..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (28 samples, 4.73%)</title><rect x="177" y="388" width="56" height="15" fill="rgb(232,2,46)"/><text x="180.00" y="398.50">PyUFu..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (19 samples, 3.21%)</title><rect x="195" y="404" width="38" height="15" fill="rgb(213,7,39)"/><text x="198.00" y="414.50">PyU..</text></g><g><title>reduce_loop (ufunc_object.c:3574) (1 samples, 0.17%)</title><rect x="231" y="420" width="2" height="15" fill="rgb(243,69,20)"/><text x="234.00" y="430.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.17%)</title><rect x="231" y="436" width="2" height="15" fill="rgb(213,151,32)"/><text x="234.00" y="446.50"></text></g><g><title>array_assign_subscript (mapping.c:1850) (1 samples, 0.17%)</title><rect x="233" y="308" width="2" height="15" fill="rgb(237,183,11)"/><text x="236.00" y="318.50"></text></g><g><title>PyArray_FromAny (ctors.c:1933) (1 samples, 0.17%)</title><rect x="233" y="324" width="2" height="15" fill="rgb(229,80,24)"/><text x="236.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (1 samples, 0.17%)</title><rect x="233" y="340" width="2" height="15" fill="rgb(238,104,19)"/><text x="236.00" y="350.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c:89) (1 samples, 0.17%)</title><rect x="233" y="356" width="2" height="15" fill="rgb(239,35,47)"/><text x="236.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1699) (1 samples, 0.17%)</title><rect x="235" y="356" width="2" height="15" fill="rgb(253,148,53)"/><text x="238.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (1 samples, 0.17%)</title><rect x="235" y="372" width="2" height="15" fill="rgb(232,205,43)"/><text x="238.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1084) (1 samples, 0.17%)</title><rect x="235" y="388" width="2" height="15" fill="rgb(248,84,32)"/><text x="238.00" y="398.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1371) (1 samples, 0.17%)</title><rect x="237" y="372" width="2" height="15" fill="rgb(220,82,10)"/><text x="240.00" y="382.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c:152) (1 samples, 0.17%)</title><rect x="237" y="388" width="2" height="15" fill="rgb(206,130,35)"/><text x="240.00" y="398.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:913) (4 samples, 0.68%)</title><rect x="233" y="292" width="8" height="15" fill="rgb(247,103,39)"/><text x="236.00" y="302.50"></text></g><g><title>array_richcompare (arrayobject.c:1445) (3 samples, 0.51%)</title><rect x="235" y="308" width="6" height="15" fill="rgb(250,58,16)"/><text x="238.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.51%)</title><rect x="235" y="324" width="6" height="15" fill="rgb(233,29,34)"/><text x="238.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.51%)</title><rect x="235" y="340" width="6" height="15" fill="rgb(212,198,47)"/><text x="238.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (2 samples, 0.34%)</title><rect x="237" y="356" width="4" height="15" fill="rgb(220,201,9)"/><text x="240.00" y="366.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (1 samples, 0.17%)</title><rect x="239" y="372" width="2" height="15" fill="rgb(215,209,38)"/><text x="242.00" y="382.50"></text></g><g><title>DOUBLE_equal (loops.c.src:1773) (1 samples, 0.17%)</title><rect x="239" y="388" width="2" height="15" fill="rgb(244,203,32)"/><text x="242.00" y="398.50"></text></g><g><title>run_binary_simd_equal_DOUBLE (simd.inc.src:295) (1 samples, 0.17%)</title><rect x="239" y="404" width="2" height="15" fill="rgb(247,148,34)"/><text x="242.00" y="414.50"></text></g><g><title>sse2_binary_scalar2_equal_DOUBLE (simd.inc.src:985) (1 samples, 0.17%)</title><rect x="239" y="420" width="2" height="15" fill="rgb(241,22,19)"/><text x="242.00" y="430.50"></text></g><g><title>sse2_compress4_to_byte_DOUBLE (simd.inc.src:799) (1 samples, 0.17%)</title><rect x="239" y="436" width="2" height="15" fill="rgb(231,96,35)"/><text x="242.00" y="446.50"></text></g><g><title>_mm_and_si128 (emmintrin.h:1232) (1 samples, 0.17%)</title><rect x="239" y="452" width="2" height="15" fill="rgb(221,137,14)"/><text x="242.00" y="462.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3171) (1 samples, 0.17%)</title><rect x="243" y="324" width="2" height="15" fill="rgb(208,124,30)"/><text x="246.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (1 samples, 0.17%)</title><rect x="245" y="324" width="2" height="15" fill="rgb(231,159,34)"/><text x="248.00" y="334.50"></text></g><g><title>_find_array_prepare (ufunc_object.c:303) (1 samples, 0.17%)</title><rect x="245" y="340" width="2" height="15" fill="rgb(236,79,45)"/><text x="248.00" y="350.50"></text></g><g><title>_get_output_array_method (ufunc_object.c:229) (1 samples, 0.17%)</title><rect x="245" y="356" width="2" height="15" fill="rgb(213,185,43)"/><text x="248.00" y="366.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2246) (1 samples, 0.17%)</title><rect x="247" y="388" width="2" height="15" fill="rgb(229,114,46)"/><text x="250.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1013) (1 samples, 0.17%)</title><rect x="249" y="404" width="2" height="15" fill="rgb(217,37,4)"/><text x="252.00" y="414.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (2 samples, 0.34%)</title><rect x="251" y="404" width="4" height="15" fill="rgb(250,15,10)"/><text x="254.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:212) (1 samples, 0.17%)</title><rect x="255" y="420" width="2" height="15" fill="rgb(216,135,7)"/><text x="258.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (7 samples, 1.18%)</title><rect x="247" y="356" width="14" height="15" fill="rgb(215,96,1)"/><text x="250.00" y="366.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (7 samples, 1.18%)</title><rect x="247" y="372" width="14" height="15" fill="rgb(226,80,43)"/><text x="250.00" y="382.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (6 samples, 1.01%)</title><rect x="249" y="388" width="12" height="15" fill="rgb(209,58,47)"/><text x="252.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (3 samples, 0.51%)</title><rect x="255" y="404" width="6" height="15" fill="rgb(250,82,38)"/><text x="258.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:234) (2 samples, 0.34%)</title><rect x="257" y="420" width="4" height="15" fill="rgb(236,51,18)"/><text x="260.00" y="430.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (14 samples, 2.36%)</title><rect x="243" y="308" width="28" height="15" fill="rgb(248,223,50)"/><text x="246.00" y="318.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (12 samples, 2.03%)</title><rect x="247" y="324" width="24" height="15" fill="rgb(209,221,34)"/><text x="250.00" y="334.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (12 samples, 2.03%)</title><rect x="247" y="340" width="24" height="15" fill="rgb(215,192,49)"/><text x="250.00" y="350.50">e..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (5 samples, 0.84%)</title><rect x="261" y="356" width="10" height="15" fill="rgb(248,67,25)"/><text x="264.00" y="366.50"></text></g><g><title>DOUBLE_divide (loops.c.src:1755) (5 samples, 0.84%)</title><rect x="261" y="372" width="10" height="15" fill="rgb(215,71,38)"/><text x="264.00" y="382.50"></text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src:250) (5 samples, 0.84%)</title><rect x="261" y="388" width="10" height="15" fill="rgb(208,78,40)"/><text x="264.00" y="398.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:604) (5 samples, 0.84%)</title><rect x="261" y="404" width="10" height="15" fill="rgb(243,10,11)"/><text x="264.00" y="414.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (5 samples, 0.84%)</title><rect x="261" y="420" width="10" height="15" fill="rgb(237,82,1)"/><text x="264.00" y="430.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:449) (84 samples, 14.19%)</title><rect x="105" y="276" width="168" height="15" fill="rgb(228,162,16)"/><text x="108.00" y="286.50">_accumulate_predictio..</text></g><g><title>predict_proba (sklearn/tree/_classes.py:914) (16 samples, 2.70%)</title><rect x="241" y="292" width="32" height="15" fill="rgb(249,197,22)"/><text x="244.00" y="302.50">pr..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4751) (1 samples, 0.17%)</title><rect x="271" y="308" width="2" height="15" fill="rgb(230,66,48)"/><text x="274.00" y="318.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c:1950) (1 samples, 0.17%)</title><rect x="271" y="324" width="2" height="15" fill="rgb(222,224,3)"/><text x="274.00" y="334.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:450) (2 samples, 0.34%)</title><rect x="273" y="276" width="4" height="15" fill="rgb(240,33,47)"/><text x="276.00" y="286.50"></text></g><g><title>lock_PyThread_acquire_lock (python3.7) (1 samples, 0.17%)</title><rect x="275" y="292" width="2" height="15" fill="rgb(210,141,10)"/><text x="278.00" y="302.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:451) (2 samples, 0.34%)</title><rect x="277" y="276" width="4" height="15" fill="rgb(253,11,54)"/><text x="280.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1717) (1 samples, 0.17%)</title><rect x="283" y="324" width="2" height="15" fill="rgb(230,147,22)"/><text x="286.00" y="334.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h:721) (1 samples, 0.17%)</title><rect x="283" y="340" width="2" height="15" fill="rgb(209,168,32)"/><text x="286.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c:835) (1 samples, 0.17%)</title><rect x="283" y="356" width="2" height="15" fill="rgb(243,197,28)"/><text x="286.00" y="366.50"></text></g><g><title>solve_diophantine (mem_overlap.c:555) (1 samples, 0.17%)</title><rect x="283" y="372" width="2" height="15" fill="rgb(226,137,43)"/><text x="286.00" y="382.50"></text></g><g><title>diophantine_dfs (mem_overlap.c:372) (1 samples, 0.17%)</title><rect x="283" y="388" width="2" height="15" fill="rgb(226,189,0)"/><text x="286.00" y="398.50"></text></g><g><title>ceildiv_128_64 (npy_extint128.h:311) (1 samples, 0.17%)</title><rect x="283" y="404" width="2" height="15" fill="rgb(219,113,46)"/><text x="286.00" y="414.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (95 samples, 16.05%)</title><rect x="97" y="212" width="190" height="15" fill="rgb(244,90,42)"/><text x="100.00" y="222.50">apply_async (joblib/_par..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (95 samples, 16.05%)</title><rect x="97" y="228" width="190" height="15" fill="rgb(245,140,30)"/><text x="100.00" y="238.50">__init__ (joblib/_parall..</text></g><g><title>__call__ (joblib/parallel.py:256) (92 samples, 15.54%)</title><rect x="103" y="244" width="184" height="15" fill="rgb(237,209,18)"/><text x="106.00" y="254.50">__call__ (joblib/parall..</text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (92 samples, 15.54%)</title><rect x="103" y="260" width="184" height="15" fill="rgb(229,94,40)"/><text x="106.00" y="270.50">&lt;listcomp&gt; (joblib/para..</text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:452) (3 samples, 0.51%)</title><rect x="281" y="276" width="6" height="15" fill="rgb(234,199,15)"/><text x="284.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (2 samples, 0.34%)</title><rect x="283" y="292" width="4" height="15" fill="rgb(246,168,1)"/><text x="286.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (2 samples, 0.34%)</title><rect x="283" y="308" width="4" height="15" fill="rgb(213,67,42)"/><text x="286.00" y="318.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1731) (1 samples, 0.17%)</title><rect x="285" y="324" width="2" height="15" fill="rgb(214,203,11)"/><text x="288.00" y="334.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c:1385) (1 samples, 0.17%)</title><rect x="285" y="340" width="2" height="15" fill="rgb(215,108,43)"/><text x="288.00" y="350.50"></text></g><g><title>DOUBLE_add (loops.c.src:1755) (1 samples, 0.17%)</title><rect x="285" y="356" width="2" height="15" fill="rgb(251,120,16)"/><text x="288.00" y="366.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src:250) (1 samples, 0.17%)</title><rect x="285" y="372" width="2" height="15" fill="rgb(213,202,54)"/><text x="288.00" y="382.50"></text></g><g><title>sse2_binary_add_DOUBLE (simd.inc.src:604) (1 samples, 0.17%)</title><rect x="285" y="388" width="2" height="15" fill="rgb(231,104,47)"/><text x="288.00" y="398.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (1 samples, 0.17%)</title><rect x="285" y="404" width="2" height="15" fill="rgb(224,43,40)"/><text x="288.00" y="414.50"></text></g><g><title>__call__ (joblib/parallel.py:332) (1 samples, 0.17%)</title><rect x="289" y="228" width="2" height="15" fill="rgb(212,117,51)"/><text x="292.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:333) (1 samples, 0.17%)</title><rect x="291" y="228" width="2" height="15" fill="rgb(238,60,29)"/><text x="294.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:336) (1 samples, 0.17%)</title><rect x="293" y="228" width="2" height="15" fill="rgb(237,135,3)"/><text x="296.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:338) (1 samples, 0.17%)</title><rect x="295" y="228" width="2" height="15" fill="rgb(238,217,27)"/><text x="298.00" y="238.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (101 samples, 17.06%)</title><rect x="97" y="196" width="202" height="15" fill="rgb(253,142,49)"/><text x="100.00" y="206.50">_dispatch (joblib/parallel..</text></g><g><title>apply_async (joblib/_parallel_backends.py:203) (6 samples, 1.01%)</title><rect x="287" y="212" width="12" height="15" fill="rgb(236,113,50)"/><text x="290.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py:340) (1 samples, 0.17%)</title><rect x="297" y="228" width="2" height="15" fill="rgb(216,123,43)"/><text x="300.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:1006) (139 samples, 23.48%)</title><rect x="25" y="164" width="278" height="15" fill="rgb(235,141,52)"/><text x="28.00" y="174.50">__call__ (joblib/parallel.py:1006)</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (106 samples, 17.91%)</title><rect x="91" y="180" width="212" height="15" fill="rgb(249,80,39)"/><text x="94.00" y="190.50">dispatch_one_batch (joblib/..</text></g><g><title>_dispatch (joblib/parallel.py:758) (2 samples, 0.34%)</title><rect x="299" y="196" width="4" height="15" fill="rgb(254,65,12)"/><text x="302.00" y="206.50"></text></g><g><title>retrieve (joblib/parallel.py:907) (1 samples, 0.17%)</title><rect x="303" y="180" width="2" height="15" fill="rgb(230,210,42)"/><text x="306.00" y="190.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:18) (142 samples, 23.99%)</title><rect x="23" y="100" width="283" height="15" fill="rgb(230,49,47)"/><text x="26.00" y="110.50">profile (bench_RandomForestClassifier..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (142 samples, 23.99%)</title><rect x="23" y="116" width="283" height="15" fill="rgb(206,166,18)"/><text x="26.00" y="126.50">time_predict (mlprodict/asv_benchmark..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (142 samples, 23.99%)</title><rect x="23" y="132" width="283" height="15" fill="rgb(210,56,14)"/><text x="26.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/com..</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:669) (142 samples, 23.99%)</title><rect x="23" y="148" width="283" height="15" fill="rgb(220,123,41)"/><text x="26.00" y="158.50">predict_proba (sklearn/ensemble/_fore..</text></g><g><title>__call__ (joblib/parallel.py:1016) (2 samples, 0.34%)</title><rect x="303" y="164" width="3" height="15" fill="rgb(243,169,6)"/><text x="306.00" y="174.50"></text></g><g><title>retrieve (joblib/parallel.py:910) (1 samples, 0.17%)</title><rect x="305" y="180" width="1" height="15" fill="rgb(244,35,3)"/><text x="308.00" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:750) (1 samples, 0.17%)</title><rect x="306" y="196" width="2" height="15" fill="rgb(236,13,12)"/><text x="309.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (2 samples, 0.34%)</title><rect x="306" y="164" width="4" height="15" fill="rgb(251,10,40)"/><text x="309.00" y="174.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (2 samples, 0.34%)</title><rect x="306" y="180" width="4" height="15" fill="rgb(209,217,52)"/><text x="309.00" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (1 samples, 0.17%)</title><rect x="308" y="196" width="2" height="15" fill="rgb(230,156,33)"/><text x="311.00" y="206.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (1 samples, 0.17%)</title><rect x="308" y="212" width="2" height="15" fill="rgb(213,41,44)"/><text x="311.00" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (1 samples, 0.17%)</title><rect x="308" y="228" width="2" height="15" fill="rgb(227,99,2)"/><text x="311.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (1 samples, 0.17%)</title><rect x="308" y="244" width="2" height="15" fill="rgb(253,42,46)"/><text x="311.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (1 samples, 0.17%)</title><rect x="308" y="260" width="2" height="15" fill="rgb(213,10,15)"/><text x="311.00" y="270.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:452) (1 samples, 0.17%)</title><rect x="308" y="276" width="2" height="15" fill="rgb(219,104,52)"/><text x="311.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (1 samples, 0.17%)</title><rect x="308" y="292" width="2" height="15" fill="rgb(208,88,34)"/><text x="311.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (1 samples, 0.17%)</title><rect x="308" y="308" width="2" height="15" fill="rgb(217,98,41)"/><text x="311.00" y="318.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1717) (1 samples, 0.17%)</title><rect x="308" y="324" width="2" height="15" fill="rgb(253,172,18)"/><text x="311.00" y="334.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h:730) (1 samples, 0.17%)</title><rect x="308" y="340" width="2" height="15" fill="rgb(249,209,51)"/><text x="311.00" y="350.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:782) (1 samples, 0.17%)</title><rect x="314" y="180" width="2" height="15" fill="rgb(214,28,6)"/><text x="317.00" y="190.50"></text></g><g><title>get (queue.py:167) (1 samples, 0.17%)</title><rect x="322" y="196" width="2" height="15" fill="rgb(241,136,28)"/><text x="325.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:796) (6 samples, 1.01%)</title><rect x="316" y="180" width="12" height="15" fill="rgb(238,27,45)"/><text x="319.00" y="190.50"></text></g><g><title>get (queue.py:182) (2 samples, 0.34%)</title><rect x="324" y="196" width="4" height="15" fill="rgb(243,113,35)"/><text x="327.00" y="206.50"></text></g><g><title>__exit__ (threading.py:244) (1 samples, 0.17%)</title><rect x="326" y="212" width="2" height="15" fill="rgb(246,63,33)"/><text x="329.00" y="222.50"></text></g><g><title>update_wrapper (functools.py:52) (1 samples, 0.17%)</title><rect x="332" y="228" width="2" height="15" fill="rgb(245,41,4)"/><text x="335.00" y="238.50"></text></g><g><title>update_wrapper (functools.py:58) (1 samples, 0.17%)</title><rect x="334" y="228" width="2" height="15" fill="rgb(224,97,47)"/><text x="337.00" y="238.50"></text></g><g><title>delayed (joblib/parallel.py:308) (3 samples, 0.51%)</title><rect x="332" y="212" width="6" height="15" fill="rgb(216,78,15)"/><text x="335.00" y="222.50"></text></g><g><title>wraps (functools.py:79) (1 samples, 0.17%)</title><rect x="336" y="228" width="2" height="15" fill="rgb(215,157,42)"/><text x="339.00" y="238.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:807) (6 samples, 1.01%)</title><rect x="328" y="180" width="12" height="15" fill="rgb(222,226,20)"/><text x="331.00" y="190.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py:669) (5 samples, 0.84%)</title><rect x="330" y="196" width="10" height="15" fill="rgb(254,181,48)"/><text x="333.00" y="206.50"></text></g><g><title>delayed_function (joblib/parallel.py:306) (1 samples, 0.17%)</title><rect x="338" y="212" width="2" height="15" fill="rgb(247,163,30)"/><text x="341.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:822) (2 samples, 0.34%)</title><rect x="340" y="180" width="4" height="15" fill="rgb(246,10,17)"/><text x="343.00" y="190.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1044) (1 samples, 0.17%)</title><rect x="352" y="212" width="2" height="15" fill="rgb(231,12,4)"/><text x="355.00" y="222.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;:419) (1 samples, 0.17%)</title><rect x="354" y="212" width="2" height="15" fill="rgb(245,65,4)"/><text x="357.00" y="222.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:208) (5 samples, 0.84%)</title><rect x="348" y="196" width="10" height="15" fill="rgb(236,77,40)"/><text x="351.00" y="206.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;:420) (1 samples, 0.17%)</title><rect x="356" y="212" width="2" height="15" fill="rgb(206,179,31)"/><text x="359.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py:116) (3 samples, 0.51%)</title><rect x="358" y="212" width="6" height="15" fill="rgb(227,185,29)"/><text x="361.00" y="222.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:276) (2 samples, 0.34%)</title><rect x="360" y="228" width="4" height="15" fill="rgb(236,1,31)"/><text x="363.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:38) (1 samples, 0.17%)</title><rect x="362" y="244" width="2" height="15" fill="rgb(225,73,51)"/><text x="365.00" y="254.50"></text></g><g><title>get_active_backend (joblib/parallel.py:83) (1 samples, 0.17%)</title><rect x="364" y="212" width="2" height="15" fill="rgb(213,2,26)"/><text x="367.00" y="222.50"></text></g><g><title>get_active_backend (joblib/parallel.py:86) (1 samples, 0.17%)</title><rect x="366" y="212" width="2" height="15" fill="rgb(228,36,23)"/><text x="369.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:824) (14 samples, 2.36%)</title><rect x="344" y="180" width="28" height="15" fill="rgb(250,197,33)"/><text x="347.00" y="190.50">d..</text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:212) (7 samples, 1.18%)</title><rect x="358" y="196" width="14" height="15" fill="rgb(225,146,17)"/><text x="361.00" y="206.50"></text></g><g><title>get_active_backend (joblib/parallel.py:94) (2 samples, 0.34%)</title><rect x="368" y="212" width="4" height="15" fill="rgb(234,99,6)"/><text x="371.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:825) (1 samples, 0.17%)</title><rect x="372" y="180" width="2" height="15" fill="rgb(219,192,54)"/><text x="375.00" y="190.50"></text></g><g><title>put (queue.py:150) (1 samples, 0.17%)</title><rect x="374" y="196" width="2" height="15" fill="rgb(217,12,25)"/><text x="377.00" y="206.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:826) (4 samples, 0.68%)</title><rect x="374" y="180" width="8" height="15" fill="rgb(247,23,54)"/><text x="377.00" y="190.50"></text></g><g><title>put (queue.py:151) (3 samples, 0.51%)</title><rect x="376" y="196" width="6" height="15" fill="rgb(228,136,47)"/><text x="379.00" y="206.50"></text></g><g><title>notify (threading.py:348) (2 samples, 0.34%)</title><rect x="378" y="212" width="4" height="15" fill="rgb(205,67,43)"/><text x="381.00" y="222.50"></text></g><g><title>get (queue.py:164) (1 samples, 0.17%)</title><rect x="382" y="196" width="2" height="15" fill="rgb(217,95,28)"/><text x="385.00" y="206.50"></text></g><g><title>get (queue.py:166) (2 samples, 0.34%)</title><rect x="384" y="196" width="4" height="15" fill="rgb(231,11,19)"/><text x="387.00" y="206.50"></text></g><g><title>_qsize (queue.py:209) (1 samples, 0.17%)</title><rect x="386" y="212" width="2" height="15" fill="rgb(233,56,35)"/><text x="389.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:829) (6 samples, 1.01%)</title><rect x="382" y="180" width="12" height="15" fill="rgb(251,176,33)"/><text x="385.00" y="190.50"></text></g><g><title>get (queue.py:182) (3 samples, 0.51%)</title><rect x="388" y="196" width="6" height="15" fill="rgb(212,175,40)"/><text x="391.00" y="206.50"></text></g><g><title>__exit__ (threading.py:244) (1 samples, 0.17%)</title><rect x="392" y="212" width="2" height="15" fill="rgb(253,205,47)"/><text x="395.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:830) (2 samples, 0.34%)</title><rect x="394" y="180" width="4" height="15" fill="rgb(241,194,9)"/><text x="397.00" y="190.50"></text></g><g><title>_dispatch (joblib/parallel.py:746) (2 samples, 0.34%)</title><rect x="400" y="196" width="4" height="15" fill="rgb(221,145,47)"/><text x="403.00" y="206.50"></text></g><g><title>_dispatch (joblib/parallel.py:749) (2 samples, 0.34%)</title><rect x="404" y="196" width="4" height="15" fill="rgb(226,200,36)"/><text x="407.00" y="206.50"></text></g><g><title>time_time (python3.7) (2 samples, 0.34%)</title><rect x="404" y="212" width="4" height="15" fill="rgb(212,181,3)"/><text x="407.00" y="222.50"></text></g><g><title>__enter__ (joblib/parallel.py:212) (1 samples, 0.17%)</title><rect x="412" y="260" width="2" height="15" fill="rgb(205,37,34)"/><text x="415.00" y="270.50"></text></g><g><title>__init__ (joblib/parallel.py:196) (1 samples, 0.17%)</title><rect x="414" y="260" width="2" height="15" fill="rgb(215,15,33)"/><text x="417.00" y="270.50"></text></g><g><title>__call__ (joblib/parallel.py:254) (4 samples, 0.68%)</title><rect x="410" y="244" width="8" height="15" fill="rgb(247,72,52)"/><text x="413.00" y="254.50"></text></g><g><title>__init__ (joblib/parallel.py:209) (1 samples, 0.17%)</title><rect x="416" y="260" width="2" height="15" fill="rgb(242,123,45)"/><text x="419.00" y="270.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:442) (1 samples, 0.17%)</title><rect x="424" y="276" width="2" height="15" fill="rgb(208,167,43)"/><text x="427.00" y="286.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:944) (1 samples, 0.17%)</title><rect x="428" y="308" width="2" height="15" fill="rgb(249,12,52)"/><text x="431.00" y="318.50"></text></g><g><title>0x7f9491371120 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="440" y="340" width="2" height="15" fill="rgb(254,8,45)"/><text x="443.00" y="350.50"></text></g><g><title>0x7f949137112f (libc-2.29.so) (1 samples, 0.17%)</title><rect x="442" y="340" width="2" height="15" fill="rgb(234,171,41)"/><text x="445.00" y="350.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (8 samples, 1.35%)</title><rect x="430" y="324" width="16" height="15" fill="rgb(247,26,28)"/><text x="433.00" y="334.50"></text></g><g><title>unicode_endswith (python3.7) (1 samples, 0.17%)</title><rect x="444" y="340" width="2" height="15" fill="rgb(254,6,52)"/><text x="447.00" y="350.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:906) (11 samples, 1.86%)</title><rect x="426" y="292" width="22" height="15" fill="rgb(251,35,24)"/><text x="429.00" y="302.50">p..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (9 samples, 1.52%)</title><rect x="430" y="308" width="18" height="15" fill="rgb(218,25,7)"/><text x="433.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:949) (1 samples, 0.17%)</title><rect x="446" y="324" width="2" height="15" fill="rgb(223,67,1)"/><text x="449.00" y="334.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:907) (2 samples, 0.34%)</title><rect x="448" y="292" width="4" height="15" fill="rgb(210,205,37)"/><text x="451.00" y="302.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py:379) (1 samples, 0.17%)</title><rect x="450" y="308" width="2" height="15" fill="rgb(205,106,50)"/><text x="453.00" y="318.50"></text></g><g><title>0x7f946ad93f55 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="452" y="324" width="2" height="15" fill="rgb(236,15,23)"/><text x="455.00" y="334.50"></text></g><g><title>0x7f946ad83d7b (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="452" y="340" width="2" height="15" fill="rgb(246,38,8)"/><text x="455.00" y="350.50"></text></g><g><title>0x7f946ad70b8c (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="452" y="356" width="2" height="15" fill="rgb(253,228,2)"/><text x="455.00" y="366.50"></text></g><g><title>_buffer_format_string (buffer.c:360) (1 samples, 0.17%)</title><rect x="454" y="468" width="2" height="15" fill="rgb(239,218,17)"/><text x="457.00" y="478.50"></text></g><g><title>_buffer_get_info (buffer.c:653) (2 samples, 0.34%)</title><rect x="454" y="436" width="4" height="15" fill="rgb(236,69,6)"/><text x="457.00" y="446.50"></text></g><g><title>_buffer_info_new (buffer.c:584) (2 samples, 0.34%)</title><rect x="454" y="452" width="4" height="15" fill="rgb(221,168,1)"/><text x="457.00" y="462.50"></text></g><g><title>_buffer_format_string (buffer.c:365) (1 samples, 0.17%)</title><rect x="456" y="468" width="2" height="15" fill="rgb(226,7,52)"/><text x="459.00" y="478.50"></text></g><g><title>_is_natively_aligned_at (buffer.c:216) (1 samples, 0.17%)</title><rect x="456" y="484" width="2" height="15" fill="rgb(212,180,7)"/><text x="459.00" y="494.50"></text></g><g><title>_buffer_get_info (buffer.c:665) (1 samples, 0.17%)</title><rect x="458" y="436" width="2" height="15" fill="rgb(220,131,15)"/><text x="461.00" y="446.50"></text></g><g><title>_buffer_get_info (buffer.c:669) (1 samples, 0.17%)</title><rect x="460" y="436" width="2" height="15" fill="rgb(214,138,19)"/><text x="463.00" y="446.50"></text></g><g><title>0x7f946ad7c2fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.84%)</title><rect x="454" y="404" width="10" height="15" fill="rgb(241,28,27)"/><text x="457.00" y="414.50"></text></g><g><title>array_getbuffer (buffer.c:782) (5 samples, 0.84%)</title><rect x="454" y="420" width="10" height="15" fill="rgb(247,91,27)"/><text x="457.00" y="430.50"></text></g><g><title>_buffer_get_info (buffer.c:672) (1 samples, 0.17%)</title><rect x="462" y="436" width="2" height="15" fill="rgb(251,139,0)"/><text x="465.00" y="446.50"></text></g><g><title>_buffer_info_free (buffer.c:632) (1 samples, 0.17%)</title><rect x="462" y="452" width="2" height="15" fill="rgb(252,82,17)"/><text x="465.00" y="462.50"></text></g><g><title>0x7f9491350a33 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="462" y="468" width="2" height="15" fill="rgb(218,150,18)"/><text x="465.00" y="478.50"></text></g><g><title>0x7f946ada22df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 1.01%)</title><rect x="454" y="356" width="12" height="15" fill="rgb(247,59,45)"/><text x="457.00" y="366.50"></text></g><g><title>0x7f946ad86d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 1.01%)</title><rect x="454" y="372" width="12" height="15" fill="rgb(207,20,24)"/><text x="457.00" y="382.50"></text></g><g><title>0x7f946ad86666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 1.01%)</title><rect x="454" y="388" width="12" height="15" fill="rgb(222,80,45)"/><text x="457.00" y="398.50"></text></g><g><title>0x7f946ad7c317 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="464" y="404" width="2" height="15" fill="rgb(242,174,43)"/><text x="467.00" y="414.50"></text></g><g><title>array_zeros (multiarraymodule.c:1965) (1 samples, 0.17%)</title><rect x="466" y="372" width="2" height="15" fill="rgb(237,126,51)"/><text x="469.00" y="382.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:102) (1 samples, 0.17%)</title><rect x="468" y="388" width="2" height="15" fill="rgb(233,8,4)"/><text x="471.00" y="398.50"></text></g><g><title>0x7f9490573020 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="468" y="404" width="2" height="15" fill="rgb(243,36,49)"/><text x="471.00" y="414.50"></text></g><g><title>array_zeros (multiarraymodule.c:1973) (2 samples, 0.34%)</title><rect x="468" y="372" width="4" height="15" fill="rgb(215,1,5)"/><text x="471.00" y="382.50"></text></g><g><title>unicode_eq (python3.7) (1 samples, 0.17%)</title><rect x="470" y="388" width="2" height="15" fill="rgb(225,115,53)"/><text x="473.00" y="398.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c:252) (1 samples, 0.17%)</title><rect x="472" y="452" width="2" height="15" fill="rgb(245,55,39)"/><text x="475.00" y="462.50"></text></g><g><title>__GI___pthread_mutex_unlock (libpthread-2.29.so) (1 samples, 0.17%)</title><rect x="472" y="468" width="2" height="15" fill="rgb(231,115,32)"/><text x="475.00" y="478.50"></text></g><g><title>0x7f946ada2592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (5 samples, 0.84%)</title><rect x="466" y="356" width="10" height="15" fill="rgb(241,149,47)"/><text x="469.00" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c:1996) (2 samples, 0.34%)</title><rect x="472" y="372" width="4" height="15" fill="rgb(228,40,41)"/><text x="475.00" y="382.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (2 samples, 0.34%)</title><rect x="472" y="388" width="4" height="15" fill="rgb(232,64,0)"/><text x="475.00" y="398.50"></text></g><g><title>PyArray_Zeros (ctors.c:3071) (2 samples, 0.34%)</title><rect x="472" y="404" width="4" height="15" fill="rgb(233,63,32)"/><text x="475.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1085) (2 samples, 0.34%)</title><rect x="472" y="420" width="4" height="15" fill="rgb(222,95,46)"/><text x="475.00" y="430.50"></text></g><g><title>npy_alloc_cache_zero (alloc.c:139) (2 samples, 0.34%)</title><rect x="472" y="436" width="4" height="15" fill="rgb(247,6,14)"/><text x="475.00" y="446.50"></text></g><g><title>PyDataMem_NEW_ZEROED (alloc.c:253) (1 samples, 0.17%)</title><rect x="474" y="452" width="2" height="15" fill="rgb(226,18,13)"/><text x="477.00" y="462.50"></text></g><g><title>__libc_calloc (libc-2.29.so) (1 samples, 0.17%)</title><rect x="474" y="468" width="2" height="15" fill="rgb(225,75,36)"/><text x="477.00" y="478.50"></text></g><g><title>0x7f9491371103 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="474" y="484" width="2" height="15" fill="rgb(248,46,5)"/><text x="477.00" y="494.50"></text></g><g><title>0x7f946ada2644 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="476" y="356" width="2" height="15" fill="rgb(234,151,35)"/><text x="479.00" y="366.50"></text></g><g><title>0x7f946ada26aa (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 1.18%)</title><rect x="478" y="356" width="14" height="15" fill="rgb(218,83,43)"/><text x="481.00" y="366.50"></text></g><g><title>0x7f946ada26b1 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (2 samples, 0.34%)</title><rect x="492" y="356" width="4" height="15" fill="rgb(239,138,50)"/><text x="495.00" y="366.50"></text></g><g><title>0x7f946ada26b7 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.51%)</title><rect x="496" y="356" width="6" height="15" fill="rgb(236,32,9)"/><text x="499.00" y="366.50"></text></g><g><title>0x7f946ada26c6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="502" y="356" width="2" height="15" fill="rgb(214,55,2)"/><text x="505.00" y="366.50"></text></g><g><title>0x7f946ada27b3 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="504" y="356" width="2" height="15" fill="rgb(234,154,30)"/><text x="507.00" y="366.50"></text></g><g><title>0x7f946ad93fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (27 samples, 4.56%)</title><rect x="454" y="324" width="54" height="15" fill="rgb(222,29,21)"/><text x="457.00" y="334.50">0x7f9..</text></g><g><title>0x7f946ada3405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (27 samples, 4.56%)</title><rect x="454" y="340" width="54" height="15" fill="rgb(254,157,6)"/><text x="457.00" y="350.50">0x7f9..</text></g><g><title>0x7f946ada2c27 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="506" y="356" width="2" height="15" fill="rgb(225,38,51)"/><text x="509.00" y="366.50"></text></g><g><title>0x7f946ad7a529 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="506" y="372" width="2" height="15" fill="rgb(240,223,39)"/><text x="509.00" y="382.50"></text></g><g><title>array_getbuffer (buffer.c:782) (1 samples, 0.17%)</title><rect x="506" y="388" width="2" height="15" fill="rgb(253,76,34)"/><text x="509.00" y="398.50"></text></g><g><title>_buffer_get_info (buffer.c:653) (1 samples, 0.17%)</title><rect x="506" y="404" width="2" height="15" fill="rgb(252,227,20)"/><text x="509.00" y="414.50"></text></g><g><title>_buffer_info_new (buffer.c:522) (1 samples, 0.17%)</title><rect x="506" y="420" width="2" height="15" fill="rgb(221,125,16)"/><text x="509.00" y="430.50"></text></g><g><title>array_take (methods.c:138) (2 samples, 0.34%)</title><rect x="508" y="340" width="4" height="15" fill="rgb(251,127,31)"/><text x="511.00" y="350.50"></text></g><g><title>0x7f9491366e50 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="510" y="356" width="2" height="15" fill="rgb(242,148,11)"/><text x="513.00" y="366.50"></text></g><g><title>0x7f946ad9405a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.51%)</title><rect x="508" y="324" width="6" height="15" fill="rgb(221,223,4)"/><text x="511.00" y="334.50"></text></g><g><title>array_take (methods.c:145) (1 samples, 0.17%)</title><rect x="512" y="340" width="2" height="15" fill="rgb(224,177,30)"/><text x="515.00" y="350.50"></text></g><g><title>PyArray_TakeFrom (item_selection.c:234) (1 samples, 0.17%)</title><rect x="512" y="356" width="2" height="15" fill="rgb(253,84,26)"/><text x="515.00" y="366.50"></text></g><g><title>DOUBLE_fasttake (arraytypes.c.src:3960) (1 samples, 0.17%)</title><rect x="512" y="372" width="2" height="15" fill="rgb(209,221,28)"/><text x="515.00" y="382.50"></text></g><g><title>0x7f946ad94113 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="514" y="324" width="2" height="15" fill="rgb(206,22,2)"/><text x="517.00" y="334.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:908) (33 samples, 5.57%)</title><rect x="452" y="292" width="66" height="15" fill="rgb(228,133,35)"/><text x="455.00" y="302.50">predict..</text></g><g><title>0x7f946ad94d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (33 samples, 5.57%)</title><rect x="452" y="308" width="66" height="15" fill="rgb(237,229,38)"/><text x="455.00" y="318.50">0x7f946..</text></g><g><title>0x7f946ad9414f (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="516" y="324" width="2" height="15" fill="rgb(249,77,18)"/><text x="519.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.17%)</title><rect x="516" y="340" width="2" height="15" fill="rgb(244,193,20)"/><text x="519.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.17%)</title><rect x="516" y="356" width="2" height="15" fill="rgb(208,27,7)"/><text x="519.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (1 samples, 0.17%)</title><rect x="516" y="372" width="2" height="15" fill="rgb(221,9,26)"/><text x="519.00" y="382.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:910) (1 samples, 0.17%)</title><rect x="518" y="292" width="2" height="15" fill="rgb(228,132,42)"/><text x="521.00" y="302.50"></text></g><g><title>get_array_ufunc_overrides (override.c:51) (1 samples, 0.17%)</title><rect x="522" y="388" width="2" height="15" fill="rgb(213,225,0)"/><text x="525.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:30) (1 samples, 0.17%)</title><rect x="524" y="404" width="2" height="15" fill="rgb(240,87,5)"/><text x="527.00" y="414.50"></text></g><g><title>maybe_get_attr (get_attr_string.h:66) (1 samples, 0.17%)</title><rect x="526" y="436" width="2" height="15" fill="rgb(229,64,33)"/><text x="529.00" y="446.50"></text></g><g><title>maybe_get_attr (get_attr_string.h:76) (2 samples, 0.34%)</title><rect x="528" y="436" width="4" height="15" fill="rgb(243,95,22)"/><text x="531.00" y="446.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (7 samples, 1.18%)</title><rect x="522" y="356" width="14" height="15" fill="rgb(216,141,28)"/><text x="525.00" y="366.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (7 samples, 1.18%)</title><rect x="522" y="372" width="14" height="15" fill="rgb(238,35,45)"/><text x="525.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (6 samples, 1.01%)</title><rect x="524" y="388" width="12" height="15" fill="rgb(221,206,18)"/><text x="527.00" y="398.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c:37) (5 samples, 0.84%)</title><rect x="526" y="404" width="10" height="15" fill="rgb(243,66,52)"/><text x="529.00" y="414.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h:106) (5 samples, 0.84%)</title><rect x="526" y="420" width="10" height="15" fill="rgb(226,74,34)"/><text x="529.00" y="430.50"></text></g><g><title>maybe_get_attr (get_attr_string.h:80) (2 samples, 0.34%)</title><rect x="532" y="436" width="4" height="15" fill="rgb(244,216,18)"/><text x="535.00" y="446.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (1 samples, 0.17%)</title><rect x="536" y="372" width="2" height="15" fill="rgb(208,43,14)"/><text x="539.00" y="382.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3635) (1 samples, 0.17%)</title><rect x="538" y="388" width="2" height="15" fill="rgb(208,178,15)"/><text x="541.00" y="398.50"></text></g><g><title>_get_identity (ufunc_object.c:2464) (1 samples, 0.17%)</title><rect x="538" y="404" width="2" height="15" fill="rgb(231,205,39)"/><text x="541.00" y="414.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (1 samples, 0.17%)</title><rect x="540" y="388" width="2" height="15" fill="rgb(216,211,18)"/><text x="543.00" y="398.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (1 samples, 0.17%)</title><rect x="540" y="404" width="2" height="15" fill="rgb(224,39,29)"/><text x="543.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (1 samples, 0.17%)</title><rect x="540" y="420" width="2" height="15" fill="rgb(207,79,3)"/><text x="543.00" y="430.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2194) (1 samples, 0.17%)</title><rect x="540" y="436" width="2" height="15" fill="rgb(245,203,5)"/><text x="543.00" y="446.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (1 samples, 0.17%)</title><rect x="542" y="436" width="2" height="15" fill="rgb(240,127,49)"/><text x="545.00" y="446.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.17%)</title><rect x="542" y="452" width="2" height="15" fill="rgb(211,108,11)"/><text x="545.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (1 samples, 0.17%)</title><rect x="544" y="468" width="2" height="15" fill="rgb(251,113,24)"/><text x="547.00" y="478.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (1 samples, 0.17%)</title><rect x="544" y="484" width="2" height="15" fill="rgb(238,172,1)"/><text x="547.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1084) (1 samples, 0.17%)</title><rect x="546" y="468" width="2" height="15" fill="rgb(238,111,1)"/><text x="549.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (4 samples, 0.68%)</title><rect x="542" y="404" width="8" height="15" fill="rgb(247,92,29)"/><text x="545.00" y="414.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (4 samples, 0.68%)</title><rect x="542" y="420" width="8" height="15" fill="rgb(227,45,25)"/><text x="545.00" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (3 samples, 0.51%)</title><rect x="544" y="436" width="6" height="15" fill="rgb(251,50,11)"/><text x="547.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (3 samples, 0.51%)</title><rect x="544" y="452" width="6" height="15" fill="rgb(209,186,45)"/><text x="547.00" y="462.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:984) (1 samples, 0.17%)</title><rect x="548" y="468" width="2" height="15" fill="rgb(242,147,8)"/><text x="551.00" y="478.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:255) (1 samples, 0.17%)</title><rect x="550" y="436" width="2" height="15" fill="rgb(231,11,2)"/><text x="553.00" y="446.50"></text></g><g><title>PyArray_CastRawArrays (dtype_transfer.c:3816) (1 samples, 0.17%)</title><rect x="550" y="452" width="2" height="15" fill="rgb(239,117,37)"/><text x="553.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (2 samples, 0.34%)</title><rect x="550" y="404" width="4" height="15" fill="rgb(220,28,42)"/><text x="553.00" y="414.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (2 samples, 0.34%)</title><rect x="550" y="420" width="4" height="15" fill="rgb(224,166,50)"/><text x="553.00" y="430.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (1 samples, 0.17%)</title><rect x="552" y="436" width="2" height="15" fill="rgb(247,179,15)"/><text x="555.00" y="446.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:87) (1 samples, 0.17%)</title><rect x="552" y="452" width="2" height="15" fill="rgb(212,25,7)"/><text x="555.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (1 samples, 0.17%)</title><rect x="554" y="420" width="2" height="15" fill="rgb(246,186,18)"/><text x="557.00" y="430.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c:1443) (1 samples, 0.17%)</title><rect x="554" y="436" width="2" height="15" fill="rgb(237,43,42)"/><text x="557.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (1 samples, 0.17%)</title><rect x="556" y="420" width="2" height="15" fill="rgb(224,186,30)"/><text x="559.00" y="430.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2812) (1 samples, 0.17%)</title><rect x="556" y="436" width="2" height="15" fill="rgb(210,27,27)"/><text x="559.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:471) (1 samples, 0.17%)</title><rect x="558" y="420" width="2" height="15" fill="rgb(234,210,54)"/><text x="561.00" y="430.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1720) (1 samples, 0.17%)</title><rect x="558" y="436" width="2" height="15" fill="rgb(221,17,36)"/><text x="561.00" y="446.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.17%)</title><rect x="558" y="452" width="2" height="15" fill="rgb(234,130,12)"/><text x="561.00" y="462.50"></text></g><g><title>0x7f9491351b12 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="558" y="468" width="2" height="15" fill="rgb(247,52,34)"/><text x="561.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (4 samples, 0.68%)</title><rect x="554" y="404" width="8" height="15" fill="rgb(235,178,54)"/><text x="557.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (1 samples, 0.17%)</title><rect x="560" y="420" width="2" height="15" fill="rgb(251,8,37)"/><text x="563.00" y="430.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2131) (1 samples, 0.17%)</title><rect x="560" y="436" width="2" height="15" fill="rgb(237,188,1)"/><text x="563.00" y="446.50"></text></g><g><title>npyiter_checkreducesize (nditer_api.c:2671) (1 samples, 0.17%)</title><rect x="560" y="452" width="2" height="15" fill="rgb(224,169,17)"/><text x="563.00" y="462.50"></text></g><g><title>reduce_loop (ufunc_object.c:3536) (1 samples, 0.17%)</title><rect x="562" y="420" width="2" height="15" fill="rgb(218,33,8)"/><text x="565.00" y="430.50"></text></g><g><title>DOUBLE_add (loops.c.src:1741) (4 samples, 0.68%)</title><rect x="564" y="436" width="8" height="15" fill="rgb(253,173,34)"/><text x="567.00" y="446.50"></text></g><g><title>DOUBLE_add (loops.c.src:1742) (1 samples, 0.17%)</title><rect x="572" y="436" width="2" height="15" fill="rgb(230,58,39)"/><text x="575.00" y="446.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1662) (3 samples, 0.51%)</title><rect x="576" y="452" width="6" height="15" fill="rgb(239,175,26)"/><text x="579.00" y="462.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1667) (5 samples, 0.84%)</title><rect x="582" y="452" width="10" height="15" fill="rgb(228,177,52)"/><text x="585.00" y="462.50"></text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1668) (1 samples, 0.17%)</title><rect x="592" y="452" width="2" height="15" fill="rgb(212,162,54)"/><text x="595.00" y="462.50"></text></g><g><title>DOUBLE_add (loops.c.src:1747) (12 samples, 2.03%)</title><rect x="574" y="436" width="24" height="15" fill="rgb(235,210,18)"/><text x="577.00" y="446.50">D..</text></g><g><title>pairwise_sum_DOUBLE (loops.c.src:1721) (2 samples, 0.34%)</title><rect x="594" y="452" width="4" height="15" fill="rgb(211,138,42)"/><text x="597.00" y="462.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:194) (2 samples, 0.34%)</title><rect x="598" y="436" width="3" height="15" fill="rgb(252,118,1)"/><text x="601.00" y="446.50"></text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:229) (1 samples, 0.17%)</title><rect x="601" y="436" width="2" height="15" fill="rgb(243,191,32)"/><text x="604.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (22 samples, 3.72%)</title><rect x="562" y="404" width="43" height="15" fill="rgb(241,123,29)"/><text x="565.00" y="414.50">PyUF..</text></g><g><title>reduce_loop (ufunc_object.c:3569) (21 samples, 3.55%)</title><rect x="564" y="420" width="41" height="15" fill="rgb(246,33,32)"/><text x="567.00" y="430.50">red..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src:241) (1 samples, 0.17%)</title><rect x="603" y="436" width="2" height="15" fill="rgb(235,35,54)"/><text x="606.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (1 samples, 0.17%)</title><rect x="605" y="404" width="2" height="15" fill="rgb(232,93,40)"/><text x="608.00" y="414.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (1 samples, 0.17%)</title><rect x="605" y="420" width="2" height="15" fill="rgb(229,162,34)"/><text x="608.00" y="430.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:912) (45 samples, 7.60%)</title><rect x="520" y="292" width="89" height="15" fill="rgb(229,31,9)"/><text x="523.00" y="302.50">predict_pr..</text></g><g><title>array_sum (methods.c:2215) (45 samples, 7.60%)</title><rect x="520" y="308" width="89" height="15" fill="rgb(252,53,49)"/><text x="523.00" y="318.50">array_sum ..</text></g><g><title>forward_ndarray_method (methods.c:108) (45 samples, 7.60%)</title><rect x="520" y="324" width="89" height="15" fill="rgb(211,218,41)"/><text x="523.00" y="334.50">forward_nd..</text></g><g><title>_sum (numpy/core/_methods.py:38) (45 samples, 7.60%)</title><rect x="520" y="340" width="89" height="15" fill="rgb(216,210,17)"/><text x="523.00" y="350.50">_sum (nump..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (37 samples, 6.25%)</title><rect x="536" y="356" width="73" height="15" fill="rgb(214,150,30)"/><text x="539.00" y="366.50">ufunc_re..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (36 samples, 6.08%)</title><rect x="538" y="372" width="71" height="15" fill="rgb(229,53,25)"/><text x="541.00" y="382.50">PyUFunc_..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (34 samples, 5.74%)</title><rect x="542" y="388" width="67" height="15" fill="rgb(246,173,1)"/><text x="545.00" y="398.50">PyUFunc..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:595) (1 samples, 0.17%)</title><rect x="607" y="404" width="2" height="15" fill="rgb(225,65,9)"/><text x="610.00" y="414.50"></text></g><g><title>PyArray_RemoveAxesInPlace (shape.c:1054) (1 samples, 0.17%)</title><rect x="607" y="420" width="2" height="15" fill="rgb(248,128,8)"/><text x="610.00" y="430.50"></text></g><g><title>qsort (libc-2.29.so) (1 samples, 0.17%)</title><rect x="609" y="372" width="2" height="15" fill="rgb(211,151,21)"/><text x="612.00" y="382.50"></text></g><g><title>array_assign_subscript (mapping.c:1859) (2 samples, 0.34%)</title><rect x="609" y="308" width="4" height="15" fill="rgb(243,168,34)"/><text x="612.00" y="318.50"></text></g><g><title>array_assign_boolean_subscript (mapping.c:1191) (2 samples, 0.34%)</title><rect x="609" y="324" width="4" height="15" fill="rgb(218,174,53)"/><text x="612.00" y="334.50"></text></g><g><title>count_boolean_trues (item_selection.c:2036) (2 samples, 0.34%)</title><rect x="609" y="340" width="4" height="15" fill="rgb(227,93,36)"/><text x="612.00" y="350.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c:3869) (2 samples, 0.34%)</title><rect x="609" y="356" width="4" height="15" fill="rgb(241,5,12)"/><text x="612.00" y="366.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.17%)</title><rect x="611" y="372" width="2" height="15" fill="rgb(246,18,18)"/><text x="614.00" y="382.50"></text></g><g><title>array_richcompare (arrayobject.c:1398) (1 samples, 0.17%)</title><rect x="613" y="308" width="2" height="15" fill="rgb(231,108,22)"/><text x="616.00" y="318.50"></text></g><g><title>binop_should_defer (binop_override.h:97) (1 samples, 0.17%)</title><rect x="613" y="324" width="2" height="15" fill="rgb(205,17,35)"/><text x="616.00" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4731) (1 samples, 0.17%)</title><rect x="619" y="324" width="2" height="15" fill="rgb(216,147,42)"/><text x="622.00" y="334.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (1 samples, 0.17%)</title><rect x="619" y="340" width="2" height="15" fill="rgb(209,27,25)"/><text x="622.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (1 samples, 0.17%)</title><rect x="619" y="356" width="2" height="15" fill="rgb(233,165,50)"/><text x="622.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (1 samples, 0.17%)</title><rect x="619" y="372" width="2" height="15" fill="rgb(237,97,39)"/><text x="622.00" y="382.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c:1948) (1 samples, 0.17%)</title><rect x="621" y="340" width="2" height="15" fill="rgb(211,43,14)"/><text x="624.00" y="350.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py:913) (8 samples, 1.35%)</title><rect x="609" y="292" width="16" height="15" fill="rgb(238,15,3)"/><text x="612.00" y="302.50"></text></g><g><title>array_richcompare (arrayobject.c:1445) (5 samples, 0.84%)</title><rect x="615" y="308" width="10" height="15" fill="rgb(221,110,41)"/><text x="618.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4751) (2 samples, 0.34%)</title><rect x="621" y="324" width="4" height="15" fill="rgb(246,183,10)"/><text x="624.00" y="334.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c:1962) (1 samples, 0.17%)</title><rect x="623" y="340" width="2" height="15" fill="rgb(246,218,6)"/><text x="626.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (1 samples, 0.17%)</title><rect x="625" y="324" width="2" height="15" fill="rgb(244,193,11)"/><text x="628.00" y="334.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2007) (1 samples, 0.17%)</title><rect x="625" y="340" width="2" height="15" fill="rgb(217,204,11)"/><text x="628.00" y="350.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (1 samples, 0.17%)</title><rect x="627" y="372" width="2" height="15" fill="rgb(223,177,29)"/><text x="630.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (2 samples, 0.34%)</title><rect x="627" y="356" width="4" height="15" fill="rgb(226,62,51)"/><text x="630.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (1 samples, 0.17%)</title><rect x="629" y="372" width="2" height="15" fill="rgb(212,208,2)"/><text x="632.00" y="382.50"></text></g><g><title>npyiter_allocate_transfer_functions (nditer_constr.c:3168) (1 samples, 0.17%)</title><rect x="629" y="388" width="2" height="15" fill="rgb(237,202,15)"/><text x="632.00" y="398.50"></text></g><g><title>PyArray_GetDTypeTransferFunction (dtype_transfer.c:3506) (1 samples, 0.17%)</title><rect x="629" y="404" width="2" height="15" fill="rgb(206,58,20)"/><text x="632.00" y="414.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:306) (2 samples, 0.34%)</title><rect x="631" y="372" width="4" height="15" fill="rgb(223,89,23)"/><text x="634.00" y="382.50"></text></g><g><title>npyiter_allocate_buffers (nditer_api.c:1720) (2 samples, 0.34%)</title><rect x="631" y="388" width="4" height="15" fill="rgb(209,113,11)"/><text x="634.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.34%)</title><rect x="631" y="404" width="4" height="15" fill="rgb(251,157,20)"/><text x="634.00" y="414.50"></text></g><g><title>0x7f9491352700 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="633" y="420" width="2" height="15" fill="rgb(246,87,43)"/><text x="636.00" y="430.50"></text></g><g><title>0x7f949134faa4 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="633" y="436" width="2" height="15" fill="rgb(207,183,6)"/><text x="636.00" y="446.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:319) (1 samples, 0.17%)</title><rect x="635" y="372" width="2" height="15" fill="rgb(207,3,36)"/><text x="638.00" y="382.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1020) (2 samples, 0.34%)</title><rect x="637" y="404" width="4" height="15" fill="rgb(222,9,8)"/><text x="640.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:226) (3 samples, 0.51%)</title><rect x="645" y="420" width="6" height="15" fill="rgb(207,173,8)"/><text x="648.00" y="430.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (11 samples, 1.86%)</title><rect x="631" y="356" width="22" height="15" fill="rgb(247,91,37)"/><text x="634.00" y="366.50">i..</text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (8 samples, 1.35%)</title><rect x="637" y="372" width="16" height="15" fill="rgb(241,191,54)"/><text x="640.00" y="382.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c:2515) (8 samples, 1.35%)</title><rect x="637" y="388" width="16" height="15" fill="rgb(248,90,49)"/><text x="640.00" y="398.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src:1024) (6 samples, 1.01%)</title><rect x="641" y="404" width="12" height="15" fill="rgb(238,214,34)"/><text x="644.00" y="414.50"></text></g><g><title>_aligned_strided_to_contig_size8_srcstride0 (lowlevel_strided_loops.c.src:234) (1 samples, 0.17%)</title><rect x="651" y="420" width="2" height="15" fill="rgb(223,126,35)"/><text x="654.00" y="430.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:603) (1 samples, 0.17%)</title><rect x="653" y="404" width="2" height="15" fill="rgb(216,117,54)"/><text x="656.00" y="414.50"></text></g><g><title>_mm_div_pd (emmintrin.h:265) (1 samples, 0.17%)</title><rect x="653" y="420" width="2" height="15" fill="rgb(226,102,27)"/><text x="656.00" y="430.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (17 samples, 2.87%)</title><rect x="625" y="308" width="34" height="15" fill="rgb(217,41,0)"/><text x="628.00" y="318.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (16 samples, 2.70%)</title><rect x="627" y="324" width="32" height="15" fill="rgb(212,56,33)"/><text x="630.00" y="334.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (16 samples, 2.70%)</title><rect x="627" y="340" width="32" height="15" fill="rgb(233,174,41)"/><text x="630.00" y="350.50">ex..</text></g><g><title>iterator_loop (ufunc_object.c:1582) (3 samples, 0.51%)</title><rect x="653" y="356" width="6" height="15" fill="rgb(208,228,7)"/><text x="656.00" y="366.50"></text></g><g><title>DOUBLE_divide (loops.c.src:1755) (3 samples, 0.51%)</title><rect x="653" y="372" width="6" height="15" fill="rgb(218,201,25)"/><text x="656.00" y="382.50"></text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src:250) (3 samples, 0.51%)</title><rect x="653" y="388" width="6" height="15" fill="rgb(244,110,4)"/><text x="656.00" y="398.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src:604) (2 samples, 0.34%)</title><rect x="655" y="404" width="4" height="15" fill="rgb(220,9,30)"/><text x="658.00" y="414.50"></text></g><g><title>_mm_store_pd (emmintrin.h:147) (2 samples, 0.34%)</title><rect x="655" y="420" width="4" height="15" fill="rgb(247,93,42)"/><text x="658.00" y="430.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:449) (118 samples, 19.93%)</title><rect x="426" y="276" width="235" height="15" fill="rgb(214,64,38)"/><text x="429.00" y="286.50">_accumulate_prediction (sklearn..</text></g><g><title>predict_proba (sklearn/tree/_classes.py:914) (18 samples, 3.04%)</title><rect x="625" y="292" width="36" height="15" fill="rgb(253,218,26)"/><text x="628.00" y="302.50">pre..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4751) (1 samples, 0.17%)</title><rect x="659" y="308" width="2" height="15" fill="rgb(253,108,54)"/><text x="662.00" y="318.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c:1962) (1 samples, 0.17%)</title><rect x="659" y="324" width="2" height="15" fill="rgb(252,162,31)"/><text x="662.00" y="334.50"></text></g><g><title>0x7f9491371120 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="659" y="340" width="2" height="15" fill="rgb(254,20,42)"/><text x="662.00" y="350.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:450) (2 samples, 0.34%)</title><rect x="661" y="276" width="4" height="15" fill="rgb(244,60,33)"/><text x="664.00" y="286.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:451) (2 samples, 0.34%)</title><rect x="665" y="276" width="4" height="15" fill="rgb(250,101,7)"/><text x="668.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3155) (1 samples, 0.17%)</title><rect x="675" y="308" width="2" height="15" fill="rgb(208,9,53)"/><text x="678.00" y="318.50"></text></g><g><title>0x7f949137114a (libc-2.29.so) (1 samples, 0.17%)</title><rect x="675" y="324" width="2" height="15" fill="rgb(220,124,9)"/><text x="678.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (1 samples, 0.17%)</title><rect x="677" y="308" width="2" height="15" fill="rgb(207,82,42)"/><text x="680.00" y="318.50"></text></g><g><title>PyUFunc_AdditionTypeResolver (ufunc_type_resolution.c:694) (1 samples, 0.17%)</title><rect x="677" y="324" width="2" height="15" fill="rgb(244,164,40)"/><text x="680.00" y="334.50"></text></g><g><title>diophantine_dfs (mem_overlap.c:443) (1 samples, 0.17%)</title><rect x="679" y="388" width="2" height="15" fill="rgb(207,218,11)"/><text x="682.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (2 samples, 0.34%)</title><rect x="679" y="308" width="4" height="15" fill="rgb(222,170,32)"/><text x="682.00" y="318.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1717) (2 samples, 0.34%)</title><rect x="679" y="324" width="4" height="15" fill="rgb(215,107,33)"/><text x="682.00" y="334.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h:721) (2 samples, 0.34%)</title><rect x="679" y="340" width="4" height="15" fill="rgb(231,217,4)"/><text x="682.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c:835) (2 samples, 0.34%)</title><rect x="679" y="356" width="4" height="15" fill="rgb(232,129,44)"/><text x="682.00" y="366.50"></text></g><g><title>solve_diophantine (mem_overlap.c:555) (2 samples, 0.34%)</title><rect x="679" y="372" width="4" height="15" fill="rgb(248,204,8)"/><text x="682.00" y="382.50"></text></g><g><title>diophantine_dfs (mem_overlap.c:454) (1 samples, 0.17%)</title><rect x="681" y="388" width="2" height="15" fill="rgb(222,37,48)"/><text x="684.00" y="398.50"></text></g><g><title>diophantine_dfs (mem_overlap.c:351) (1 samples, 0.17%)</title><rect x="681" y="404" width="2" height="15" fill="rgb(247,28,40)"/><text x="684.00" y="414.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:452) (8 samples, 1.35%)</title><rect x="669" y="276" width="16" height="15" fill="rgb(207,107,24)"/><text x="672.00" y="286.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (5 samples, 0.84%)</title><rect x="675" y="292" width="10" height="15" fill="rgb(233,13,40)"/><text x="678.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (1 samples, 0.17%)</title><rect x="683" y="308" width="2" height="15" fill="rgb(210,155,3)"/><text x="686.00" y="318.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (132 samples, 22.30%)</title><rect x="424" y="260" width="263" height="15" fill="rgb(233,10,16)"/><text x="427.00" y="270.50">&lt;listcomp&gt; (joblib/parallel.py:256)</text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py:455) (1 samples, 0.17%)</title><rect x="685" y="276" width="2" height="15" fill="rgb(246,46,44)"/><text x="688.00" y="286.50"></text></g><g><title>unregister (joblib/parallel.py:218) (1 samples, 0.17%)</title><rect x="689" y="276" width="2" height="15" fill="rgb(207,169,11)"/><text x="692.00" y="286.50"></text></g><g><title>unregister (joblib/parallel.py:219) (2 samples, 0.34%)</title><rect x="691" y="276" width="4" height="15" fill="rgb(249,132,8)"/><text x="694.00" y="286.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (145 samples, 24.49%)</title><rect x="408" y="212" width="289" height="15" fill="rgb(229,206,41)"/><text x="411.00" y="222.50">apply_async (joblib/_parallel_backends..</text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (144 samples, 24.32%)</title><rect x="410" y="228" width="287" height="15" fill="rgb(216,6,29)"/><text x="413.00" y="238.50">__init__ (joblib/_parallel_backends.py..</text></g><g><title>__call__ (joblib/parallel.py:256) (140 samples, 23.65%)</title><rect x="418" y="244" width="279" height="15" fill="rgb(233,152,37)"/><text x="421.00" y="254.50">__call__ (joblib/parallel.py:256)</text></g><g><title>__exit__ (joblib/parallel.py:215) (5 samples, 0.84%)</title><rect x="687" y="260" width="10" height="15" fill="rgb(252,205,6)"/><text x="690.00" y="270.50"></text></g><g><title>unregister (joblib/parallel.py:220) (1 samples, 0.17%)</title><rect x="695" y="276" width="2" height="15" fill="rgb(208,61,16)"/><text x="698.00" y="286.50"></text></g><g><title>__call__ (joblib/parallel.py:332) (1 samples, 0.17%)</title><rect x="699" y="228" width="2" height="15" fill="rgb(250,128,19)"/><text x="702.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:333) (1 samples, 0.17%)</title><rect x="701" y="228" width="2" height="15" fill="rgb(210,221,40)"/><text x="704.00" y="238.50"></text></g><g><title>time_time (python3.7) (1 samples, 0.17%)</title><rect x="701" y="244" width="2" height="15" fill="rgb(213,176,22)"/><text x="704.00" y="254.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (149 samples, 25.17%)</title><rect x="408" y="196" width="297" height="15" fill="rgb(241,65,40)"/><text x="411.00" y="206.50">_dispatch (joblib/parallel.py:753)</text></g><g><title>apply_async (joblib/_parallel_backends.py:203) (4 samples, 0.68%)</title><rect x="697" y="212" width="8" height="15" fill="rgb(234,95,10)"/><text x="700.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py:335) (1 samples, 0.17%)</title><rect x="703" y="228" width="2" height="15" fill="rgb(253,219,38)"/><text x="706.00" y="238.50"></text></g><g><title>__call__ (joblib/parallel.py:1006) (201 samples, 33.95%)</title><rect x="310" y="164" width="401" height="15" fill="rgb(217,145,22)"/><text x="313.00" y="174.50">__call__ (joblib/parallel.py:1006)</text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (157 samples, 26.52%)</title><rect x="398" y="180" width="313" height="15" fill="rgb(248,188,20)"/><text x="401.00" y="190.50">dispatch_one_batch (joblib/parallel.py:834)</text></g><g><title>_dispatch (joblib/parallel.py:758) (3 samples, 0.51%)</title><rect x="705" y="196" width="6" height="15" fill="rgb(242,110,48)"/><text x="708.00" y="206.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:38) (346 samples, 58.45%)</title><rect x="23" y="52" width="690" height="15" fill="rgb(206,43,21)"/><text x="26.00" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:38)</text></g><g><title>profile_skl (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:37) (346 samples, 58.45%)</title><rect x="23" y="68" width="690" height="15" fill="rgb(209,27,6)"/><text x="26.00" y="78.50">profile_skl (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:37)</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:29) (346 samples, 58.45%)</title><rect x="23" y="84" width="690" height="15" fill="rgb(212,0,32)"/><text x="26.00" y="94.50">setup_profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:29)</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:23) (204 samples, 34.46%)</title><rect x="306" y="100" width="407" height="15" fill="rgb(224,115,20)"/><text x="309.00" y="110.50">profile (bench_RandomForestClassifier_default_b_cl_1000..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (204 samples, 34.46%)</title><rect x="306" y="116" width="407" height="15" fill="rgb(222,134,7)"/><text x="309.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (204 samples, 34.46%)</title><rect x="306" y="132" width="407" height="15" fill="rgb(231,73,45)"/><text x="309.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227)</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py:669) (204 samples, 34.46%)</title><rect x="306" y="148" width="407" height="15" fill="rgb(252,118,39)"/><text x="309.00" y="158.50">predict_proba (sklearn/ensemble/_forest.py:669)</text></g><g><title>__call__ (joblib/parallel.py:1016) (1 samples, 0.17%)</title><rect x="711" y="164" width="2" height="15" fill="rgb(243,169,31)"/><text x="714.00" y="174.50"></text></g><g><title>retrieve (joblib/parallel.py:904) (1 samples, 0.17%)</title><rect x="711" y="180" width="2" height="15" fill="rgb(211,222,48)"/><text x="714.00" y="190.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py:142) (1 samples, 0.17%)</title><rect x="713" y="244" width="2" height="15" fill="rgb(254,83,54)"/><text x="716.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.17%)</title><rect x="713" y="260" width="2" height="15" fill="rgb(209,86,22)"/><text x="716.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="713" y="276" width="2" height="15" fill="rgb(213,64,2)"/><text x="716.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="713" y="292" width="2" height="15" fill="rgb(235,108,32)"/><text x="716.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="713" y="308" width="2" height="15" fill="rgb(240,35,10)"/><text x="716.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="713" y="324" width="2" height="15" fill="rgb(239,0,6)"/><text x="716.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="713" y="340" width="2" height="15" fill="rgb(251,129,49)"/><text x="716.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="713" y="356" width="2" height="15" fill="rgb(250,190,47)"/><text x="716.00" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/core/__init__.py:71) (1 samples, 0.17%)</title><rect x="713" y="372" width="2" height="15" fill="rgb(222,130,21)"/><text x="716.00" y="382.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.17%)</title><rect x="713" y="388" width="2" height="15" fill="rgb(206,197,1)"/><text x="716.00" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="713" y="404" width="2" height="15" fill="rgb(205,65,33)"/><text x="716.00" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="713" y="420" width="2" height="15" fill="rgb(236,119,18)"/><text x="716.00" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="713" y="436" width="2" height="15" fill="rgb(245,1,14)"/><text x="716.00" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="713" y="452" width="2" height="15" fill="rgb(218,78,39)"/><text x="716.00" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="713" y="468" width="2" height="15" fill="rgb(238,82,30)"/><text x="716.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="713" y="484" width="2" height="15" fill="rgb(222,198,3)"/><text x="716.00" y="494.50"></text></g><g><title>&lt;module&gt; (numpy/core/numeric.py:2410) (1 samples, 0.17%)</title><rect x="713" y="500" width="2" height="15" fill="rgb(225,169,34)"/><text x="716.00" y="510.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.17%)</title><rect x="713" y="516" width="2" height="15" fill="rgb(216,52,36)"/><text x="716.00" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="713" y="532" width="2" height="15" fill="rgb(254,85,45)"/><text x="716.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="713" y="548" width="2" height="15" fill="rgb(236,7,45)"/><text x="716.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="713" y="564" width="2" height="15" fill="rgb(228,211,50)"/><text x="716.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="713" y="580" width="2" height="15" fill="rgb(232,73,0)"/><text x="716.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:724) (1 samples, 0.17%)</title><rect x="713" y="596" width="2" height="15" fill="rgb(205,204,37)"/><text x="716.00" y="606.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:812) (1 samples, 0.17%)</title><rect x="713" y="612" width="2" height="15" fill="rgb(243,50,15)"/><text x="716.00" y="622.50"></text></g><g><title>path_stats (&lt;frozen importlib._bootstrap_external&gt;:953) (1 samples, 0.17%)</title><rect x="713" y="628" width="2" height="15" fill="rgb(221,115,44)"/><text x="716.00" y="638.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;:81) (1 samples, 0.17%)</title><rect x="713" y="644" width="2" height="15" fill="rgb(206,109,5)"/><text x="716.00" y="654.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:1) (2 samples, 0.34%)</title><rect x="713" y="148" width="4" height="15" fill="rgb(205,73,0)"/><text x="716.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.34%)</title><rect x="713" y="164" width="4" height="15" fill="rgb(231,77,4)"/><text x="716.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.34%)</title><rect x="713" y="180" width="4" height="15" fill="rgb(246,118,36)"/><text x="716.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.34%)</title><rect x="713" y="196" width="4" height="15" fill="rgb(230,207,49)"/><text x="716.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.34%)</title><rect x="713" y="212" width="4" height="15" fill="rgb(251,155,21)"/><text x="716.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.34%)</title><rect x="713" y="228" width="4" height="15" fill="rgb(246,213,20)"/><text x="716.00" y="238.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py:150) (1 samples, 0.17%)</title><rect x="715" y="244" width="2" height="15" fill="rgb(231,14,49)"/><text x="718.00" y="254.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.17%)</title><rect x="715" y="260" width="2" height="15" fill="rgb(251,82,50)"/><text x="718.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="715" y="276" width="2" height="15" fill="rgb(223,57,32)"/><text x="718.00" y="286.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="715" y="292" width="2" height="15" fill="rgb(228,168,13)"/><text x="718.00" y="302.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="715" y="308" width="2" height="15" fill="rgb(226,48,25)"/><text x="718.00" y="318.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="715" y="324" width="2" height="15" fill="rgb(225,10,30)"/><text x="718.00" y="334.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="715" y="340" width="2" height="15" fill="rgb(231,16,48)"/><text x="718.00" y="350.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="715" y="356" width="2" height="15" fill="rgb(250,178,53)"/><text x="718.00" y="366.50"></text></g><g><title>&lt;module&gt; (numpy/random/__init__.py:181) (1 samples, 0.17%)</title><rect x="715" y="372" width="2" height="15" fill="rgb(211,36,8)"/><text x="718.00" y="382.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.17%)</title><rect x="715" y="388" width="2" height="15" fill="rgb(227,113,7)"/><text x="718.00" y="398.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="715" y="404" width="2" height="15" fill="rgb(225,134,21)"/><text x="718.00" y="414.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="715" y="420" width="2" height="15" fill="rgb(221,40,41)"/><text x="718.00" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="715" y="436" width="2" height="15" fill="rgb(207,44,51)"/><text x="718.00" y="446.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="715" y="452" width="2" height="15" fill="rgb(214,80,24)"/><text x="718.00" y="462.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="715" y="468" width="2" height="15" fill="rgb(215,204,13)"/><text x="718.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="715" y="484" width="2" height="15" fill="rgb(211,24,47)"/><text x="718.00" y="494.50"></text></g><g><title>&lt;module&gt; (numpy/random/_pickle.py:2) (1 samples, 0.17%)</title><rect x="715" y="500" width="2" height="15" fill="rgb(222,9,6)"/><text x="718.00" y="510.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="715" y="516" width="2" height="15" fill="rgb(212,6,6)"/><text x="718.00" y="526.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="715" y="532" width="2" height="15" fill="rgb(222,154,9)"/><text x="718.00" y="542.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="715" y="548" width="2" height="15" fill="rgb(242,119,47)"/><text x="718.00" y="558.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.17%)</title><rect x="715" y="564" width="2" height="15" fill="rgb(250,82,26)"/><text x="718.00" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="715" y="580" width="2" height="15" fill="rgb(220,18,28)"/><text x="718.00" y="590.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:2) (1 samples, 0.17%)</title><rect x="717" y="148" width="2" height="15" fill="rgb(252,184,36)"/><text x="720.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="717" y="164" width="2" height="15" fill="rgb(225,42,43)"/><text x="720.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.17%)</title><rect x="717" y="180" width="2" height="15" fill="rgb(225,81,8)"/><text x="720.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="717" y="196" width="2" height="15" fill="rgb(207,140,27)"/><text x="720.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="717" y="212" width="2" height="15" fill="rgb(206,82,7)"/><text x="720.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="717" y="228" width="2" height="15" fill="rgb(207,134,14)"/><text x="720.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="717" y="244" width="2" height="15" fill="rgb(227,36,35)"/><text x="720.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="717" y="260" width="2" height="15" fill="rgb(228,78,44)"/><text x="720.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="717" y="276" width="2" height="15" fill="rgb(246,169,53)"/><text x="720.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (1 samples, 0.17%)</title><rect x="717" y="292" width="2" height="15" fill="rgb(224,184,28)"/><text x="720.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="717" y="308" width="2" height="15" fill="rgb(250,189,23)"/><text x="720.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="717" y="324" width="2" height="15" fill="rgb(218,153,28)"/><text x="720.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="717" y="340" width="2" height="15" fill="rgb(247,63,17)"/><text x="720.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="717" y="356" width="2" height="15" fill="rgb(213,184,12)"/><text x="720.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="717" y="372" width="2" height="15" fill="rgb(233,139,32)"/><text x="720.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (1 samples, 0.17%)</title><rect x="717" y="388" width="2" height="15" fill="rgb(221,121,46)"/><text x="720.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="717" y="404" width="2" height="15" fill="rgb(209,61,16)"/><text x="720.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="717" y="420" width="2" height="15" fill="rgb(253,150,37)"/><text x="720.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="717" y="436" width="2" height="15" fill="rgb(237,169,0)"/><text x="720.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="717" y="452" width="2" height="15" fill="rgb(250,7,2)"/><text x="720.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="717" y="468" width="2" height="15" fill="rgb(208,99,13)"/><text x="720.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (1 samples, 0.17%)</title><rect x="717" y="484" width="2" height="15" fill="rgb(247,54,45)"/><text x="720.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="717" y="500" width="2" height="15" fill="rgb(233,195,41)"/><text x="720.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="717" y="516" width="2" height="15" fill="rgb(237,96,48)"/><text x="720.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="717" y="532" width="2" height="15" fill="rgb(240,120,36)"/><text x="720.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="717" y="548" width="2" height="15" fill="rgb(214,91,11)"/><text x="720.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="717" y="564" width="2" height="15" fill="rgb(231,153,28)"/><text x="720.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (1 samples, 0.17%)</title><rect x="717" y="580" width="2" height="15" fill="rgb(248,116,3)"/><text x="720.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="717" y="596" width="2" height="15" fill="rgb(215,62,16)"/><text x="720.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.17%)</title><rect x="717" y="612" width="2" height="15" fill="rgb(236,21,3)"/><text x="720.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="717" y="628" width="2" height="15" fill="rgb(206,184,39)"/><text x="720.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="717" y="644" width="2" height="15" fill="rgb(220,88,37)"/><text x="720.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="717" y="660" width="2" height="15" fill="rgb(253,144,24)"/><text x="720.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="717" y="676" width="2" height="15" fill="rgb(233,215,15)"/><text x="720.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="717" y="692" width="2" height="15" fill="rgb(252,218,51)"/><text x="720.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="717" y="708" width="2" height="15" fill="rgb(253,144,28)"/><text x="720.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (1 samples, 0.17%)</title><rect x="717" y="724" width="2" height="15" fill="rgb(227,184,14)"/><text x="720.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="717" y="740" width="2" height="15" fill="rgb(205,193,0)"/><text x="720.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="717" y="756" width="2" height="15" fill="rgb(214,54,2)"/><text x="720.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="717" y="772" width="2" height="15" fill="rgb(246,59,42)"/><text x="720.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="717" y="788" width="2" height="15" fill="rgb(247,134,21)"/><text x="720.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="717" y="804" width="2" height="15" fill="rgb(228,137,46)"/><text x="720.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (1 samples, 0.17%)</title><rect x="717" y="820" width="2" height="15" fill="rgb(253,7,4)"/><text x="720.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (1 samples, 0.17%)</title><rect x="717" y="836" width="2" height="15" fill="rgb(243,155,8)"/><text x="720.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3264) (1 samples, 0.17%)</title><rect x="717" y="852" width="2" height="15" fill="rgb(242,191,1)"/><text x="720.00" y="862.50"></text></g><g><title>_build_master (pkg_resources/__init__.py:574) (1 samples, 0.17%)</title><rect x="717" y="868" width="2" height="15" fill="rgb(205,172,12)"/><text x="720.00" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py:567) (1 samples, 0.17%)</title><rect x="717" y="884" width="2" height="15" fill="rgb(228,33,17)"/><text x="720.00" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py:623) (1 samples, 0.17%)</title><rect x="717" y="900" width="2" height="15" fill="rgb(208,170,51)"/><text x="720.00" y="910.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py:2061) (1 samples, 0.17%)</title><rect x="717" y="916" width="2" height="15" fill="rgb(226,18,22)"/><text x="720.00" y="926.50"></text></g><g><title>_by_version_descending (pkg_resources/__init__.py:2034) (1 samples, 0.17%)</title><rect x="717" y="932" width="2" height="15" fill="rgb(233,64,1)"/><text x="720.00" y="942.50"></text></g><g><title>_by_version (pkg_resources/__init__.py:2032) (1 samples, 0.17%)</title><rect x="717" y="948" width="2" height="15" fill="rgb(208,99,18)"/><text x="720.00" y="958.50"></text></g><g><title>&lt;listcomp&gt; (pkg_resources/__init__.py:2032) (1 samples, 0.17%)</title><rect x="717" y="964" width="2" height="15" fill="rgb(251,14,3)"/><text x="720.00" y="974.50"></text></g><g><title>parse (pkg_resources/_vendor/packaging/version.py:33) (1 samples, 0.17%)</title><rect x="717" y="980" width="2" height="15" fill="rgb(251,140,45)"/><text x="720.00" y="990.50"></text></g><g><title>__init__ (pkg_resources/_vendor/packaging/version.py:76) (1 samples, 0.17%)</title><rect x="717" y="996" width="2" height="15" fill="rgb(213,207,11)"/><text x="720.00" y="1006.50"></text></g><g><title>_legacy_cmpkey (pkg_resources/_vendor/packaging/version.py:142) (1 samples, 0.17%)</title><rect x="717" y="1012" width="2" height="15" fill="rgb(218,131,36)"/><text x="720.00" y="1022.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:4) (1 samples, 0.17%)</title><rect x="719" y="148" width="2" height="15" fill="rgb(236,144,3)"/><text x="722.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="164" width="2" height="15" fill="rgb(227,151,50)"/><text x="722.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.17%)</title><rect x="719" y="180" width="2" height="15" fill="rgb(231,147,26)"/><text x="722.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="196" width="2" height="15" fill="rgb(237,100,1)"/><text x="722.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="212" width="2" height="15" fill="rgb(210,149,53)"/><text x="722.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="228" width="2" height="15" fill="rgb(225,37,39)"/><text x="722.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="244" width="2" height="15" fill="rgb(216,117,39)"/><text x="722.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="260" width="2" height="15" fill="rgb(250,227,23)"/><text x="722.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="276" width="2" height="15" fill="rgb(208,34,50)"/><text x="722.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (1 samples, 0.17%)</title><rect x="719" y="292" width="2" height="15" fill="rgb(225,74,41)"/><text x="722.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="308" width="2" height="15" fill="rgb(230,145,31)"/><text x="722.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="324" width="2" height="15" fill="rgb(209,118,52)"/><text x="722.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="340" width="2" height="15" fill="rgb(243,168,7)"/><text x="722.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="356" width="2" height="15" fill="rgb(254,155,30)"/><text x="722.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="372" width="2" height="15" fill="rgb(221,32,37)"/><text x="722.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (1 samples, 0.17%)</title><rect x="719" y="388" width="2" height="15" fill="rgb(237,17,46)"/><text x="722.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="404" width="2" height="15" fill="rgb(207,49,46)"/><text x="722.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="420" width="2" height="15" fill="rgb(217,58,43)"/><text x="722.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="436" width="2" height="15" fill="rgb(213,152,11)"/><text x="722.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="452" width="2" height="15" fill="rgb(212,118,34)"/><text x="722.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="468" width="2" height="15" fill="rgb(243,36,32)"/><text x="722.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:25) (1 samples, 0.17%)</title><rect x="719" y="484" width="2" height="15" fill="rgb(234,88,3)"/><text x="722.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="500" width="2" height="15" fill="rgb(215,188,13)"/><text x="722.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="516" width="2" height="15" fill="rgb(228,202,25)"/><text x="722.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="532" width="2" height="15" fill="rgb(211,39,4)"/><text x="722.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="548" width="2" height="15" fill="rgb(232,24,47)"/><text x="722.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="564" width="2" height="15" fill="rgb(247,209,16)"/><text x="722.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (1 samples, 0.17%)</title><rect x="719" y="580" width="2" height="15" fill="rgb(251,143,38)"/><text x="722.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="596" width="2" height="15" fill="rgb(206,149,54)"/><text x="722.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="612" width="2" height="15" fill="rgb(206,135,45)"/><text x="722.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="628" width="2" height="15" fill="rgb(229,188,33)"/><text x="722.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="644" width="2" height="15" fill="rgb(247,102,6)"/><text x="722.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="660" width="2" height="15" fill="rgb(239,123,29)"/><text x="722.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:379) (1 samples, 0.17%)</title><rect x="719" y="676" width="2" height="15" fill="rgb(252,108,37)"/><text x="722.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="692" width="2" height="15" fill="rgb(240,79,49)"/><text x="722.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="708" width="2" height="15" fill="rgb(253,138,4)"/><text x="722.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="724" width="2" height="15" fill="rgb(254,52,36)"/><text x="722.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="740" width="2" height="15" fill="rgb(222,18,42)"/><text x="722.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="756" width="2" height="15" fill="rgb(215,12,27)"/><text x="722.00" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py:180) (1 samples, 0.17%)</title><rect x="719" y="772" width="2" height="15" fill="rgb(235,111,17)"/><text x="722.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="788" width="2" height="15" fill="rgb(227,14,54)"/><text x="722.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="804" width="2" height="15" fill="rgb(227,15,44)"/><text x="722.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="820" width="2" height="15" fill="rgb(250,203,37)"/><text x="722.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="836" width="2" height="15" fill="rgb(207,215,49)"/><text x="722.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="852" width="2" height="15" fill="rgb(226,5,12)"/><text x="722.00" y="862.50"></text></g><g><title>&lt;module&gt; (scipy/special/__init__.py:643) (1 samples, 0.17%)</title><rect x="719" y="868" width="2" height="15" fill="rgb(249,217,6)"/><text x="722.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="884" width="2" height="15" fill="rgb(213,95,27)"/><text x="722.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="900" width="2" height="15" fill="rgb(228,62,38)"/><text x="722.00" y="910.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="916" width="2" height="15" fill="rgb(248,151,17)"/><text x="722.00" y="926.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="932" width="2" height="15" fill="rgb(239,4,30)"/><text x="722.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="948" width="2" height="15" fill="rgb(251,132,38)"/><text x="722.00" y="958.50"></text></g><g><title>&lt;module&gt; (scipy/special/basic.py:19) (1 samples, 0.17%)</title><rect x="719" y="964" width="2" height="15" fill="rgb(214,21,28)"/><text x="722.00" y="974.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.17%)</title><rect x="719" y="980" width="2" height="15" fill="rgb(216,199,51)"/><text x="722.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="996" width="2" height="15" fill="rgb(224,181,13)"/><text x="722.00" y="1006.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="1012" width="2" height="15" fill="rgb(250,13,39)"/><text x="722.00" y="1022.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="1028" width="2" height="15" fill="rgb(221,69,44)"/><text x="722.00" y="1038.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="1044" width="2" height="15" fill="rgb(221,212,38)"/><text x="722.00" y="1054.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="1060" width="2" height="15" fill="rgb(209,201,25)"/><text x="722.00" y="1070.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="1076" width="2" height="15" fill="rgb(212,120,40)"/><text x="722.00" y="1086.50"></text></g><g><title>&lt;module&gt; (scipy/special/orthogonal.py:83) (1 samples, 0.17%)</title><rect x="719" y="1092" width="2" height="15" fill="rgb(254,85,53)"/><text x="722.00" y="1102.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.17%)</title><rect x="719" y="1108" width="2" height="15" fill="rgb(250,56,48)"/><text x="722.00" y="1118.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="1124" width="2" height="15" fill="rgb(248,33,17)"/><text x="722.00" y="1134.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="1140" width="2" height="15" fill="rgb(215,139,14)"/><text x="722.00" y="1150.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="1156" width="2" height="15" fill="rgb(247,146,52)"/><text x="722.00" y="1166.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="1172" width="2" height="15" fill="rgb(218,179,32)"/><text x="722.00" y="1182.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="1188" width="2" height="15" fill="rgb(233,77,22)"/><text x="722.00" y="1198.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="1204" width="2" height="15" fill="rgb(223,38,32)"/><text x="722.00" y="1214.50"></text></g><g><title>&lt;module&gt; (scipy/linalg/__init__.py:195) (1 samples, 0.17%)</title><rect x="719" y="1220" width="2" height="15" fill="rgb(229,223,5)"/><text x="722.00" y="1230.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="1236" width="2" height="15" fill="rgb(238,141,20)"/><text x="722.00" y="1246.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="1252" width="2" height="15" fill="rgb(210,145,52)"/><text x="722.00" y="1262.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="1268" width="2" height="15" fill="rgb(222,62,9)"/><text x="722.00" y="1278.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="1284" width="2" height="15" fill="rgb(222,55,41)"/><text x="722.00" y="1294.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="1300" width="2" height="15" fill="rgb(250,133,14)"/><text x="722.00" y="1310.50"></text></g><g><title>&lt;module&gt; (scipy/linalg/misc.py:6) (1 samples, 0.17%)</title><rect x="719" y="1316" width="2" height="15" fill="rgb(250,207,16)"/><text x="722.00" y="1326.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="1332" width="2" height="15" fill="rgb(250,191,42)"/><text x="722.00" y="1342.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="1348" width="2" height="15" fill="rgb(228,23,52)"/><text x="722.00" y="1358.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="719" y="1364" width="2" height="15" fill="rgb(237,98,7)"/><text x="722.00" y="1374.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="719" y="1380" width="2" height="15" fill="rgb(214,145,48)"/><text x="722.00" y="1390.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="1396" width="2" height="15" fill="rgb(247,123,39)"/><text x="722.00" y="1406.50"></text></g><g><title>&lt;module&gt; (scipy/linalg/lapack.py:616) (1 samples, 0.17%)</title><rect x="719" y="1412" width="2" height="15" fill="rgb(253,109,49)"/><text x="722.00" y="1422.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (1 samples, 0.17%)</title><rect x="719" y="1428" width="2" height="15" fill="rgb(209,94,23)"/><text x="722.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="1444" width="2" height="15" fill="rgb(244,110,53)"/><text x="722.00" y="1454.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="719" y="1460" width="2" height="15" fill="rgb(235,68,21)"/><text x="722.00" y="1470.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="719" y="1476" width="2" height="15" fill="rgb(235,72,19)"/><text x="722.00" y="1486.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:670) (1 samples, 0.17%)</title><rect x="719" y="1492" width="2" height="15" fill="rgb(238,115,44)"/><text x="722.00" y="1502.50"></text></g><g><title>module_from_spec (&lt;frozen importlib._bootstrap&gt;:583) (1 samples, 0.17%)</title><rect x="719" y="1508" width="2" height="15" fill="rgb(215,95,38)"/><text x="722.00" y="1518.50"></text></g><g><title>create_module (&lt;frozen importlib._bootstrap_external&gt;:1043) (1 samples, 0.17%)</title><rect x="719" y="1524" width="2" height="15" fill="rgb(253,25,0)"/><text x="722.00" y="1534.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="719" y="1540" width="2" height="15" fill="rgb(247,117,11)"/><text x="722.00" y="1550.50"></text></g><g><title>0x7f9472503857 (?) (1 samples, 0.17%)</title><rect x="719" y="1556" width="2" height="15" fill="rgb(236,101,42)"/><text x="722.00" y="1566.50"></text></g><g><title>0x7f94725044f2 (?) (1 samples, 0.17%)</title><rect x="719" y="1572" width="2" height="15" fill="rgb(211,48,38)"/><text x="722.00" y="1582.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:18) (1 samples, 0.17%)</title><rect x="721" y="244" width="2" height="15" fill="rgb(217,128,33)"/><text x="724.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="721" y="260" width="2" height="15" fill="rgb(231,47,14)"/><text x="724.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="721" y="276" width="2" height="15" fill="rgb(214,75,32)"/><text x="724.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="721" y="292" width="2" height="15" fill="rgb(241,19,33)"/><text x="724.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="721" y="308" width="2" height="15" fill="rgb(237,180,44)"/><text x="724.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="721" y="324" width="2" height="15" fill="rgb(206,229,35)"/><text x="724.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/create_asv.py:13) (1 samples, 0.17%)</title><rect x="721" y="340" width="2" height="15" fill="rgb(242,44,10)"/><text x="724.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="721" y="356" width="2" height="15" fill="rgb(222,158,45)"/><text x="724.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (1 samples, 0.17%)</title><rect x="721" y="372" width="2" height="15" fill="rgb(230,187,51)"/><text x="724.00" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="721" y="388" width="2" height="15" fill="rgb(246,161,49)"/><text x="724.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="721" y="404" width="2" height="15" fill="rgb(238,58,33)"/><text x="724.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="721" y="420" width="2" height="15" fill="rgb(236,169,10)"/><text x="724.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="721" y="436" width="2" height="15" fill="rgb(252,2,4)"/><text x="724.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="721" y="452" width="2" height="15" fill="rgb(212,172,11)"/><text x="724.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="721" y="468" width="2" height="15" fill="rgb(246,59,33)"/><text x="724.00" y="478.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/__init__.py:12) (1 samples, 0.17%)</title><rect x="721" y="484" width="2" height="15" fill="rgb(230,158,11)"/><text x="724.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="721" y="500" width="2" height="15" fill="rgb(223,16,19)"/><text x="724.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="721" y="516" width="2" height="15" fill="rgb(248,221,40)"/><text x="724.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="721" y="532" width="2" height="15" fill="rgb(235,212,20)"/><text x="724.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="721" y="548" width="2" height="15" fill="rgb(220,69,25)"/><text x="724.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="721" y="564" width="2" height="15" fill="rgb(211,222,12)"/><text x="724.00" y="574.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/pycode/setup_helper.py:23) (1 samples, 0.17%)</title><rect x="721" y="580" width="2" height="15" fill="rgb(205,2,5)"/><text x="724.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="721" y="596" width="2" height="15" fill="rgb(243,179,3)"/><text x="724.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="721" y="612" width="2" height="15" fill="rgb(235,155,19)"/><text x="724.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="721" y="628" width="2" height="15" fill="rgb(234,60,8)"/><text x="724.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="721" y="644" width="2" height="15" fill="rgb(244,122,35)"/><text x="724.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="721" y="660" width="2" height="15" fill="rgb(248,188,54)"/><text x="724.00" y="670.50"></text></g><g><title>&lt;module&gt; (pyquickhelper/loghelper/history_helper.py:10) (1 samples, 0.17%)</title><rect x="721" y="676" width="2" height="15" fill="rgb(239,114,15)"/><text x="724.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="721" y="692" width="2" height="15" fill="rgb(246,14,45)"/><text x="724.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="721" y="708" width="2" height="15" fill="rgb(228,62,42)"/><text x="724.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="721" y="724" width="2" height="15" fill="rgb(250,92,19)"/><text x="724.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="721" y="740" width="2" height="15" fill="rgb(247,196,21)"/><text x="724.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="721" y="756" width="2" height="15" fill="rgb(231,74,18)"/><text x="724.00" y="766.50"></text></g><g><title>&lt;module&gt; (requests/__init__.py:46) (1 samples, 0.17%)</title><rect x="721" y="772" width="2" height="15" fill="rgb(214,127,35)"/><text x="724.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="721" y="788" width="2" height="15" fill="rgb(237,60,30)"/><text x="724.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="721" y="804" width="2" height="15" fill="rgb(208,116,26)"/><text x="724.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="721" y="820" width="2" height="15" fill="rgb(218,121,25)"/><text x="724.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="721" y="836" width="2" height="15" fill="rgb(242,101,34)"/><text x="724.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="721" y="852" width="2" height="15" fill="rgb(249,146,8)"/><text x="724.00" y="862.50"></text></g><g><title>&lt;module&gt; (requests/exceptions.py:84) (1 samples, 0.17%)</title><rect x="721" y="868" width="2" height="15" fill="rgb(220,117,14)"/><text x="724.00" y="878.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:147) (1 samples, 0.17%)</title><rect x="723" y="628" width="2" height="15" fill="rgb(209,9,18)"/><text x="726.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="723" y="644" width="2" height="15" fill="rgb(254,220,10)"/><text x="726.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="723" y="660" width="2" height="15" fill="rgb(236,196,26)"/><text x="726.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="723" y="676" width="2" height="15" fill="rgb(229,198,54)"/><text x="726.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="723" y="692" width="2" height="15" fill="rgb(219,25,43)"/><text x="726.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="723" y="708" width="2" height="15" fill="rgb(254,228,4)"/><text x="726.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/io/api.py:13) (1 samples, 0.17%)</title><rect x="723" y="724" width="2" height="15" fill="rgb(244,111,37)"/><text x="726.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="723" y="740" width="2" height="15" fill="rgb(244,217,37)"/><text x="726.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="723" y="756" width="2" height="15" fill="rgb(225,137,6)"/><text x="726.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="723" y="772" width="2" height="15" fill="rgb(241,70,27)"/><text x="726.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="723" y="788" width="2" height="15" fill="rgb(247,25,5)"/><text x="726.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="723" y="804" width="2" height="15" fill="rgb(230,25,44)"/><text x="726.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/io/packers.py:91) (1 samples, 0.17%)</title><rect x="723" y="820" width="2" height="15" fill="rgb(208,206,17)"/><text x="726.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="723" y="836" width="2" height="15" fill="rgb(238,180,33)"/><text x="726.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="723" y="852" width="2" height="15" fill="rgb(240,114,37)"/><text x="726.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="723" y="868" width="2" height="15" fill="rgb(211,181,4)"/><text x="726.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="723" y="884" width="2" height="15" fill="rgb(218,171,18)"/><text x="726.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="723" y="900" width="2" height="15" fill="rgb(234,119,42)"/><text x="726.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/io/msgpack/__init__.py:24) (1 samples, 0.17%)</title><rect x="723" y="916" width="2" height="15" fill="rgb(252,97,0)"/><text x="726.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:980) (1 samples, 0.17%)</title><rect x="723" y="932" width="2" height="15" fill="rgb(213,114,16)"/><text x="726.00" y="942.50"></text></g><g><title>__enter__ (&lt;frozen importlib._bootstrap&gt;:147) (1 samples, 0.17%)</title><rect x="723" y="948" width="2" height="15" fill="rgb(209,184,42)"/><text x="726.00" y="958.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:6) (2 samples, 0.34%)</title><rect x="723" y="436" width="4" height="15" fill="rgb(207,93,43)"/><text x="726.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.34%)</title><rect x="723" y="452" width="4" height="15" fill="rgb(249,7,21)"/><text x="726.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.34%)</title><rect x="723" y="468" width="4" height="15" fill="rgb(237,173,28)"/><text x="726.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.34%)</title><rect x="723" y="484" width="4" height="15" fill="rgb(240,225,33)"/><text x="726.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.34%)</title><rect x="723" y="500" width="4" height="15" fill="rgb(243,163,12)"/><text x="726.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.34%)</title><rect x="723" y="516" width="4" height="15" fill="rgb(209,124,41)"/><text x="726.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py:12) (2 samples, 0.34%)</title><rect x="723" y="532" width="4" height="15" fill="rgb(249,198,32)"/><text x="726.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.34%)</title><rect x="723" y="548" width="4" height="15" fill="rgb(241,157,23)"/><text x="726.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.34%)</title><rect x="723" y="564" width="4" height="15" fill="rgb(235,31,48)"/><text x="726.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.34%)</title><rect x="723" y="580" width="4" height="15" fill="rgb(227,19,5)"/><text x="726.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.34%)</title><rect x="723" y="596" width="4" height="15" fill="rgb(213,115,15)"/><text x="726.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.34%)</title><rect x="723" y="612" width="4" height="15" fill="rgb(211,22,21)"/><text x="726.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py:55) (1 samples, 0.17%)</title><rect x="725" y="628" width="2" height="15" fill="rgb(217,163,23)"/><text x="728.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="725" y="644" width="2" height="15" fill="rgb(248,140,44)"/><text x="728.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="725" y="660" width="2" height="15" fill="rgb(225,227,12)"/><text x="728.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="725" y="676" width="2" height="15" fill="rgb(254,196,0)"/><text x="728.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="725" y="692" width="2" height="15" fill="rgb(230,47,30)"/><text x="728.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="725" y="708" width="2" height="15" fill="rgb(249,76,11)"/><text x="728.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py:24) (1 samples, 0.17%)</title><rect x="725" y="724" width="2" height="15" fill="rgb(220,23,6)"/><text x="728.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="725" y="740" width="2" height="15" fill="rgb(250,106,32)"/><text x="728.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="725" y="756" width="2" height="15" fill="rgb(244,104,23)"/><text x="728.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="725" y="772" width="2" height="15" fill="rgb(239,49,13)"/><text x="728.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="725" y="788" width="2" height="15" fill="rgb(253,206,13)"/><text x="728.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="725" y="804" width="2" height="15" fill="rgb(231,92,42)"/><text x="728.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py:1) (1 samples, 0.17%)</title><rect x="725" y="820" width="2" height="15" fill="rgb(242,218,34)"/><text x="728.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="725" y="836" width="2" height="15" fill="rgb(213,126,22)"/><text x="728.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="725" y="852" width="2" height="15" fill="rgb(227,170,25)"/><text x="728.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="725" y="868" width="2" height="15" fill="rgb(251,114,30)"/><text x="728.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="725" y="884" width="2" height="15" fill="rgb(249,194,51)"/><text x="728.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="725" y="900" width="2" height="15" fill="rgb(214,126,49)"/><text x="728.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py:47) (1 samples, 0.17%)</title><rect x="725" y="916" width="2" height="15" fill="rgb(206,215,48)"/><text x="728.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="725" y="932" width="2" height="15" fill="rgb(206,199,27)"/><text x="728.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="725" y="948" width="2" height="15" fill="rgb(236,54,51)"/><text x="728.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="725" y="964" width="2" height="15" fill="rgb(214,131,51)"/><text x="728.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="725" y="980" width="2" height="15" fill="rgb(217,60,29)"/><text x="728.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="725" y="996" width="2" height="15" fill="rgb(248,209,28)"/><text x="728.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/groupby.py:22) (1 samples, 0.17%)</title><rect x="725" y="1012" width="2" height="15" fill="rgb(224,211,10)"/><text x="728.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="725" y="1028" width="2" height="15" fill="rgb(239,85,51)"/><text x="728.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="725" y="1044" width="2" height="15" fill="rgb(220,23,46)"/><text x="728.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="725" y="1060" width="2" height="15" fill="rgb(251,135,0)"/><text x="728.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:1050) (1 samples, 0.17%)</title><rect x="725" y="1076" width="2" height="15" fill="rgb(216,114,41)"/><text x="728.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="725" y="1092" width="2" height="15" fill="rgb(231,201,5)"/><text x="728.00" y="1102.50"></text></g><g><title>0x7f945f79bff0 (pandas/_libs/groupby.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.17%)</title><rect x="725" y="1108" width="2" height="15" fill="rgb(236,185,14)"/><text x="728.00" y="1118.50"></text></g><g><title>root (&lt;template&gt;:123) (1 samples, 0.17%)</title><rect x="727" y="1572" width="2" height="15" fill="rgb(232,136,46)"/><text x="730.00" y="1582.50"></text></g><g><title>call (jinja2/runtime.py:247) (1 samples, 0.17%)</title><rect x="727" y="1588" width="2" height="15" fill="rgb(211,56,43)"/><text x="730.00" y="1598.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py:118) (2 samples, 0.34%)</title><rect x="727" y="1492" width="4" height="15" fill="rgb(213,200,47)"/><text x="730.00" y="1502.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py:235) (2 samples, 0.34%)</title><rect x="727" y="1508" width="4" height="15" fill="rgb(244,85,18)"/><text x="730.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py:76) (2 samples, 0.34%)</title><rect x="727" y="1524" width="4" height="15" fill="rgb(236,218,52)"/><text x="730.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py:1005) (2 samples, 0.34%)</title><rect x="727" y="1540" width="4" height="15" fill="rgb(224,162,50)"/><text x="730.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (2 samples, 0.34%)</title><rect x="727" y="1556" width="4" height="15" fill="rgb(251,190,6)"/><text x="730.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;:124) (1 samples, 0.17%)</title><rect x="729" y="1572" width="2" height="15" fill="rgb(233,142,13)"/><text x="732.00" y="1582.50"></text></g><g><title>getattr (jinja2/environment.py:429) (1 samples, 0.17%)</title><rect x="729" y="1588" width="2" height="15" fill="rgb(242,17,4)"/><text x="732.00" y="1598.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:4) (10 samples, 1.69%)</title><rect x="713" y="52" width="20" height="15" fill="rgb(250,8,4)"/><text x="716.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (10 samples, 1.69%)</title><rect x="713" y="68" width="20" height="15" fill="rgb(252,3,39)"/><text x="716.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (10 samples, 1.69%)</title><rect x="713" y="84" width="20" height="15" fill="rgb(208,70,1)"/><text x="716.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (10 samples, 1.69%)</title><rect x="713" y="100" width="20" height="15" fill="rgb(231,216,28)"/><text x="716.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (10 samples, 1.69%)</title><rect x="713" y="116" width="20" height="15" fill="rgb(222,44,27)"/><text x="716.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 1.69%)</title><rect x="713" y="132" width="20" height="15" fill="rgb(221,165,21)"/><text x="716.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py:7) (6 samples, 1.01%)</title><rect x="721" y="148" width="12" height="15" fill="rgb(249,39,46)"/><text x="724.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.01%)</title><rect x="721" y="164" width="12" height="15" fill="rgb(212,76,21)"/><text x="724.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.01%)</title><rect x="721" y="180" width="12" height="15" fill="rgb(215,122,20)"/><text x="724.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.01%)</title><rect x="721" y="196" width="12" height="15" fill="rgb(243,216,26)"/><text x="724.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.01%)</title><rect x="721" y="212" width="12" height="15" fill="rgb(210,56,32)"/><text x="724.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.01%)</title><rect x="721" y="228" width="12" height="15" fill="rgb(235,175,1)"/><text x="724.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (5 samples, 0.84%)</title><rect x="723" y="244" width="10" height="15" fill="rgb(212,12,15)"/><text x="726.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.84%)</title><rect x="723" y="260" width="10" height="15" fill="rgb(245,203,31)"/><text x="726.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.84%)</title><rect x="723" y="276" width="10" height="15" fill="rgb(238,188,39)"/><text x="726.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.84%)</title><rect x="723" y="292" width="10" height="15" fill="rgb(247,221,26)"/><text x="726.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.84%)</title><rect x="723" y="308" width="10" height="15" fill="rgb(246,138,40)"/><text x="726.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.84%)</title><rect x="723" y="324" width="10" height="15" fill="rgb(209,132,40)"/><text x="726.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (5 samples, 0.84%)</title><rect x="723" y="340" width="10" height="15" fill="rgb(243,10,12)"/><text x="726.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.84%)</title><rect x="723" y="356" width="10" height="15" fill="rgb(241,22,20)"/><text x="726.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.84%)</title><rect x="723" y="372" width="10" height="15" fill="rgb(208,59,22)"/><text x="726.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.84%)</title><rect x="723" y="388" width="10" height="15" fill="rgb(229,51,31)"/><text x="726.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.84%)</title><rect x="723" y="404" width="10" height="15" fill="rgb(213,93,20)"/><text x="726.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.84%)</title><rect x="723" y="420" width="10" height="15" fill="rgb(241,146,34)"/><text x="726.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (3 samples, 0.51%)</title><rect x="727" y="436" width="6" height="15" fill="rgb(206,31,36)"/><text x="730.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.51%)</title><rect x="727" y="452" width="6" height="15" fill="rgb(220,106,28)"/><text x="730.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.51%)</title><rect x="727" y="468" width="6" height="15" fill="rgb(250,6,47)"/><text x="730.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="484" width="6" height="15" fill="rgb(229,32,21)"/><text x="730.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.51%)</title><rect x="727" y="500" width="6" height="15" fill="rgb(227,170,2)"/><text x="730.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.51%)</title><rect x="727" y="516" width="6" height="15" fill="rgb(211,78,21)"/><text x="730.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.51%)</title><rect x="727" y="532" width="6" height="15" fill="rgb(211,103,29)"/><text x="730.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.51%)</title><rect x="727" y="548" width="6" height="15" fill="rgb(249,206,12)"/><text x="730.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="564" width="6" height="15" fill="rgb(234,71,35)"/><text x="730.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (3 samples, 0.51%)</title><rect x="727" y="580" width="6" height="15" fill="rgb(207,103,20)"/><text x="730.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.51%)</title><rect x="727" y="596" width="6" height="15" fill="rgb(244,117,51)"/><text x="730.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.51%)</title><rect x="727" y="612" width="6" height="15" fill="rgb(225,47,33)"/><text x="730.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.51%)</title><rect x="727" y="628" width="6" height="15" fill="rgb(206,136,21)"/><text x="730.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.51%)</title><rect x="727" y="644" width="6" height="15" fill="rgb(226,191,47)"/><text x="730.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="660" width="6" height="15" fill="rgb(228,23,23)"/><text x="730.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (3 samples, 0.51%)</title><rect x="727" y="676" width="6" height="15" fill="rgb(211,183,0)"/><text x="730.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.51%)</title><rect x="727" y="692" width="6" height="15" fill="rgb(254,156,11)"/><text x="730.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.51%)</title><rect x="727" y="708" width="6" height="15" fill="rgb(205,144,40)"/><text x="730.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.51%)</title><rect x="727" y="724" width="6" height="15" fill="rgb(218,11,42)"/><text x="730.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.51%)</title><rect x="727" y="740" width="6" height="15" fill="rgb(215,166,47)"/><text x="730.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="756" width="6" height="15" fill="rgb(249,86,44)"/><text x="730.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (3 samples, 0.51%)</title><rect x="727" y="772" width="6" height="15" fill="rgb(245,161,51)"/><text x="730.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.51%)</title><rect x="727" y="788" width="6" height="15" fill="rgb(242,151,43)"/><text x="730.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.51%)</title><rect x="727" y="804" width="6" height="15" fill="rgb(214,28,12)"/><text x="730.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.51%)</title><rect x="727" y="820" width="6" height="15" fill="rgb(244,209,43)"/><text x="730.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.51%)</title><rect x="727" y="836" width="6" height="15" fill="rgb(208,61,49)"/><text x="730.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="852" width="6" height="15" fill="rgb(213,9,53)"/><text x="730.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (3 samples, 0.51%)</title><rect x="727" y="868" width="6" height="15" fill="rgb(210,214,31)"/><text x="730.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.51%)</title><rect x="727" y="884" width="6" height="15" fill="rgb(225,153,25)"/><text x="730.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.51%)</title><rect x="727" y="900" width="6" height="15" fill="rgb(226,43,13)"/><text x="730.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="916" width="6" height="15" fill="rgb(207,114,27)"/><text x="730.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.51%)</title><rect x="727" y="932" width="6" height="15" fill="rgb(238,178,18)"/><text x="730.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.51%)</title><rect x="727" y="948" width="6" height="15" fill="rgb(206,175,54)"/><text x="730.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.51%)</title><rect x="727" y="964" width="6" height="15" fill="rgb(247,16,23)"/><text x="730.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.51%)</title><rect x="727" y="980" width="6" height="15" fill="rgb(205,17,0)"/><text x="730.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="996" width="6" height="15" fill="rgb(246,89,34)"/><text x="730.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (3 samples, 0.51%)</title><rect x="727" y="1012" width="6" height="15" fill="rgb(214,193,18)"/><text x="730.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.51%)</title><rect x="727" y="1028" width="6" height="15" fill="rgb(237,53,30)"/><text x="730.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.51%)</title><rect x="727" y="1044" width="6" height="15" fill="rgb(215,11,33)"/><text x="730.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.51%)</title><rect x="727" y="1060" width="6" height="15" fill="rgb(207,203,20)"/><text x="730.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.51%)</title><rect x="727" y="1076" width="6" height="15" fill="rgb(239,21,21)"/><text x="730.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="1092" width="6" height="15" fill="rgb(217,16,45)"/><text x="730.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py:15) (3 samples, 0.51%)</title><rect x="727" y="1108" width="6" height="15" fill="rgb(228,179,51)"/><text x="730.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (3 samples, 0.51%)</title><rect x="727" y="1124" width="6" height="15" fill="rgb(241,25,7)"/><text x="730.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="1140" width="6" height="15" fill="rgb(245,228,16)"/><text x="730.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.51%)</title><rect x="727" y="1156" width="6" height="15" fill="rgb(218,102,22)"/><text x="730.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.51%)</title><rect x="727" y="1172" width="6" height="15" fill="rgb(231,8,48)"/><text x="730.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.51%)</title><rect x="727" y="1188" width="6" height="15" fill="rgb(210,76,14)"/><text x="730.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.51%)</title><rect x="727" y="1204" width="6" height="15" fill="rgb(238,157,0)"/><text x="730.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="1220" width="6" height="15" fill="rgb(220,121,17)"/><text x="730.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py:15) (3 samples, 0.51%)</title><rect x="727" y="1236" width="6" height="15" fill="rgb(237,28,37)"/><text x="730.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (3 samples, 0.51%)</title><rect x="727" y="1252" width="6" height="15" fill="rgb(234,160,48)"/><text x="730.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="1268" width="6" height="15" fill="rgb(207,82,4)"/><text x="730.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.51%)</title><rect x="727" y="1284" width="6" height="15" fill="rgb(241,217,10)"/><text x="730.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.51%)</title><rect x="727" y="1300" width="6" height="15" fill="rgb(214,160,53)"/><text x="730.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.51%)</title><rect x="727" y="1316" width="6" height="15" fill="rgb(206,131,25)"/><text x="730.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.51%)</title><rect x="727" y="1332" width="6" height="15" fill="rgb(211,157,43)"/><text x="730.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="1348" width="6" height="15" fill="rgb(207,88,53)"/><text x="730.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py:9) (3 samples, 0.51%)</title><rect x="727" y="1364" width="6" height="15" fill="rgb(214,25,0)"/><text x="730.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.51%)</title><rect x="727" y="1380" width="6" height="15" fill="rgb(227,178,16)"/><text x="730.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.51%)</title><rect x="727" y="1396" width="6" height="15" fill="rgb(217,66,26)"/><text x="730.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.51%)</title><rect x="727" y="1412" width="6" height="15" fill="rgb(206,67,17)"/><text x="730.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.51%)</title><rect x="727" y="1428" width="6" height="15" fill="rgb(248,224,48)"/><text x="730.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.51%)</title><rect x="727" y="1444" width="6" height="15" fill="rgb(205,24,51)"/><text x="730.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py:159) (3 samples, 0.51%)</title><rect x="727" y="1460" width="6" height="15" fill="rgb(245,177,22)"/><text x="730.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py:153) (3 samples, 0.51%)</title><rect x="727" y="1476" width="6" height="15" fill="rgb(252,197,53)"/><text x="730.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py:134) (1 samples, 0.17%)</title><rect x="731" y="1492" width="2" height="15" fill="rgb(209,62,11)"/><text x="734.00" y="1502.50"></text></g><g><title>ClassFactory (skl2onnx/algebra/onnx_ops.py:82) (1 samples, 0.17%)</title><rect x="731" y="1508" width="2" height="15" fill="rgb(239,59,1)"/><text x="734.00" y="1518.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py:83) (1 samples, 0.17%)</title><rect x="733" y="388" width="2" height="15" fill="rgb(230,218,21)"/><text x="736.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (1 samples, 0.17%)</title><rect x="733" y="404" width="2" height="15" fill="rgb(225,67,25)"/><text x="736.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (1 samples, 0.17%)</title><rect x="733" y="420" width="2" height="15" fill="rgb(248,145,10)"/><text x="736.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (1 samples, 0.17%)</title><rect x="733" y="436" width="2" height="15" fill="rgb(212,220,15)"/><text x="736.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (1 samples, 0.17%)</title><rect x="733" y="452" width="2" height="15" fill="rgb(244,78,45)"/><text x="736.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (1 samples, 0.17%)</title><rect x="733" y="468" width="2" height="15" fill="rgb(232,100,19)"/><text x="736.00" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/doc/doc_helper.py:117) (1 samples, 0.17%)</title><rect x="733" y="484" width="2" height="15" fill="rgb(239,52,21)"/><text x="736.00" y="494.50"></text></g><g><title>_get_doc_template (mlprodict/onnxrt/doc/doc_helper.py:114) (1 samples, 0.17%)</title><rect x="733" y="500" width="2" height="15" fill="rgb(243,209,8)"/><text x="736.00" y="510.50"></text></g><g><title>__new__ (jinja2/environment.py:945) (1 samples, 0.17%)</title><rect x="733" y="516" width="2" height="15" fill="rgb(244,96,14)"/><text x="736.00" y="526.50"></text></g><g><title>from_string (jinja2/environment.py:880) (1 samples, 0.17%)</title><rect x="733" y="532" width="2" height="15" fill="rgb(241,123,25)"/><text x="736.00" y="542.50"></text></g><g><title>compile (jinja2/environment.py:581) (1 samples, 0.17%)</title><rect x="733" y="548" width="2" height="15" fill="rgb(228,124,49)"/><text x="736.00" y="558.50"></text></g><g><title>_generate (jinja2/environment.py:543) (1 samples, 0.17%)</title><rect x="733" y="564" width="2" height="15" fill="rgb(238,138,17)"/><text x="736.00" y="574.50"></text></g><g><title>generate (jinja2/compiler.py:82) (1 samples, 0.17%)</title><rect x="733" y="580" width="2" height="15" fill="rgb(237,188,25)"/><text x="736.00" y="590.50"></text></g><g><title>visit (jinja2/visitor.py:38) (1 samples, 0.17%)</title><rect x="733" y="596" width="2" height="15" fill="rgb(251,109,27)"/><text x="736.00" y="606.50"></text></g><g><title>visit_Template (jinja2/compiler.py:713) (1 samples, 0.17%)</title><rect x="733" y="612" width="2" height="15" fill="rgb(236,146,14)"/><text x="736.00" y="622.50"></text></g><g><title>find (jinja2/nodes.py:181) (1 samples, 0.17%)</title><rect x="733" y="628" width="2" height="15" fill="rgb(218,170,49)"/><text x="736.00" y="638.50"></text></g><g><title>find_all (jinja2/nodes.py:191) (1 samples, 0.17%)</title><rect x="733" y="644" width="2" height="15" fill="rgb(211,177,23)"/><text x="736.00" y="654.50"></text></g><g><title>find_all (jinja2/nodes.py:191) (1 samples, 0.17%)</title><rect x="733" y="660" width="2" height="15" fill="rgb(223,105,10)"/><text x="736.00" y="670.50"></text></g><g><title>find_all (jinja2/nodes.py:191) (1 samples, 0.17%)</title><rect x="733" y="676" width="2" height="15" fill="rgb(242,141,25)"/><text x="736.00" y="686.50"></text></g><g><title>find_all (jinja2/nodes.py:191) (1 samples, 0.17%)</title><rect x="733" y="692" width="2" height="15" fill="rgb(232,43,11)"/><text x="736.00" y="702.50"></text></g><g><title>find_all (jinja2/nodes.py:191) (1 samples, 0.17%)</title><rect x="733" y="708" width="2" height="15" fill="rgb(254,131,10)"/><text x="736.00" y="718.50"></text></g><g><title>find_all (jinja2/nodes.py:191) (1 samples, 0.17%)</title><rect x="733" y="724" width="2" height="15" fill="rgb(243,119,5)"/><text x="736.00" y="734.50"></text></g><g><title>find_all (jinja2/nodes.py:188) (1 samples, 0.17%)</title><rect x="733" y="740" width="2" height="15" fill="rgb(240,200,54)"/><text x="736.00" y="750.50"></text></g><g><title>iter_child_nodes (jinja2/nodes.py:174) (1 samples, 0.17%)</title><rect x="733" y="756" width="2" height="15" fill="rgb(230,146,30)"/><text x="736.00" y="766.50"></text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:28) (2 samples, 0.34%)</title><rect x="733" y="84" width="4" height="15" fill="rgb(243,223,38)"/><text x="736.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (2 samples, 0.34%)</title><rect x="733" y="100" width="4" height="15" fill="rgb(222,34,10)"/><text x="736.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:230) (2 samples, 0.34%)</title><rect x="733" y="116" width="4" height="15" fill="rgb(215,73,25)"/><text x="736.00" y="126.50"></text></g><g><title>_create_onnx_inference (mlprodict/asv_benchmark/common_asv_skl.py:114) (2 samples, 0.34%)</title><rect x="733" y="132" width="4" height="15" fill="rgb(241,149,19)"/><text x="736.00" y="142.50"></text></g><g><title>__init__ (mlprodict/onnxrt/onnx_inference.py:62) (2 samples, 0.34%)</title><rect x="733" y="148" width="4" height="15" fill="rgb(234,104,13)"/><text x="736.00" y="158.50"></text></g><g><title>_init (mlprodict/onnxrt/onnx_inference.py:115) (2 samples, 0.34%)</title><rect x="733" y="164" width="4" height="15" fill="rgb(207,203,46)"/><text x="736.00" y="174.50"></text></g><g><title>setup_runtime (mlprodict/onnxrt/onnx_inference_node.py:101) (2 samples, 0.34%)</title><rect x="733" y="180" width="4" height="15" fill="rgb(244,94,18)"/><text x="736.00" y="190.50"></text></g><g><title>load_op (mlprodict/onnxrt/ops.py:28) (2 samples, 0.34%)</title><rect x="733" y="196" width="4" height="15" fill="rgb(234,63,2)"/><text x="736.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.34%)</title><rect x="733" y="212" width="4" height="15" fill="rgb(213,117,8)"/><text x="736.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.34%)</title><rect x="733" y="228" width="4" height="15" fill="rgb(220,18,34)"/><text x="736.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.34%)</title><rect x="733" y="244" width="4" height="15" fill="rgb(249,26,13)"/><text x="736.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.34%)</title><rect x="733" y="260" width="4" height="15" fill="rgb(213,60,14)"/><text x="736.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.34%)</title><rect x="733" y="276" width="4" height="15" fill="rgb(236,74,2)"/><text x="736.00" y="286.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/__init__.py:7) (2 samples, 0.34%)</title><rect x="733" y="292" width="4" height="15" fill="rgb(249,213,21)"/><text x="736.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (2 samples, 0.34%)</title><rect x="733" y="308" width="4" height="15" fill="rgb(217,103,35)"/><text x="736.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (2 samples, 0.34%)</title><rect x="733" y="324" width="4" height="15" fill="rgb(242,131,47)"/><text x="736.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (2 samples, 0.34%)</title><rect x="733" y="340" width="4" height="15" fill="rgb(207,156,14)"/><text x="736.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (2 samples, 0.34%)</title><rect x="733" y="356" width="4" height="15" fill="rgb(246,139,6)"/><text x="736.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (2 samples, 0.34%)</title><rect x="733" y="372" width="4" height="15" fill="rgb(251,14,8)"/><text x="736.00" y="382.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/ops_cpu/_op_list.py:88) (1 samples, 0.17%)</title><rect x="735" y="388" width="2" height="15" fill="rgb(216,225,24)"/><text x="738.00" y="398.50"></text></g><g><title>get_rst_doc (mlprodict/onnxrt/doc/doc_helper.py:268) (1 samples, 0.17%)</title><rect x="735" y="404" width="2" height="15" fill="rgb(244,0,0)"/><text x="738.00" y="414.50"></text></g><g><title>render (jinja2/asyncsupport.py:76) (1 samples, 0.17%)</title><rect x="735" y="420" width="2" height="15" fill="rgb(212,203,7)"/><text x="738.00" y="430.50"></text></g><g><title>render (jinja2/environment.py:1005) (1 samples, 0.17%)</title><rect x="735" y="436" width="2" height="15" fill="rgb(251,196,30)"/><text x="738.00" y="446.50"></text></g><g><title>unicode_join (python3.7) (1 samples, 0.17%)</title><rect x="735" y="452" width="2" height="15" fill="rgb(245,40,50)"/><text x="738.00" y="462.50"></text></g><g><title>root (&lt;template&gt;:117) (1 samples, 0.17%)</title><rect x="735" y="468" width="2" height="15" fill="rgb(254,225,43)"/><text x="738.00" y="478.50"></text></g><g><title>0x7f9451fee422 (?) (1 samples, 0.17%)</title><rect x="737" y="244" width="2" height="15" fill="rgb(244,51,36)"/><text x="740.00" y="254.50"></text></g><g><title>0x7f9451ff489e (?) (1 samples, 0.17%)</title><rect x="737" y="260" width="2" height="15" fill="rgb(216,53,51)"/><text x="740.00" y="270.50"></text></g><g><title>0x7f9451ff474f (?) (1 samples, 0.17%)</title><rect x="737" y="276" width="2" height="15" fill="rgb(208,151,54)"/><text x="740.00" y="286.50"></text></g><g><title>0x7f9451ffaa3a (?) (1 samples, 0.17%)</title><rect x="737" y="292" width="2" height="15" fill="rgb(244,4,34)"/><text x="740.00" y="302.50"></text></g><g><title>0x7f945b30ccff (?) (1 samples, 0.17%)</title><rect x="737" y="308" width="2" height="15" fill="rgb(230,132,14)"/><text x="740.00" y="318.50"></text></g><g><title>0x7f9451ff578c (?) (1 samples, 0.17%)</title><rect x="737" y="324" width="2" height="15" fill="rgb(222,88,7)"/><text x="740.00" y="334.50"></text></g><g><title>0x7f9451fe161e (?) (1 samples, 0.17%)</title><rect x="737" y="340" width="2" height="15" fill="rgb(245,35,42)"/><text x="740.00" y="350.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:525) (4 samples, 0.68%)</title><rect x="739" y="484" width="8" height="15" fill="rgb(216,97,37)"/><text x="742.00" y="494.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:604) (1 samples, 0.17%)</title><rect x="747" y="484" width="2" height="15" fill="rgb(238,73,8)"/><text x="750.00" y="494.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_end (stl_tree.h:681) (1 samples, 0.17%)</title><rect x="749" y="532" width="2" height="15" fill="rgb(242,74,29)"/><text x="752.00" y="542.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:605) (6 samples, 1.01%)</title><rect x="749" y="484" width="12" height="15" fill="rgb(224,137,28)"/><text x="752.00" y="494.50"></text></g><g><title>std::map&lt;long, long, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_map.h:1105) (6 samples, 1.01%)</title><rect x="749" y="500" width="12" height="15" fill="rgb(225,29,11)"/><text x="752.00" y="510.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h:2334) (6 samples, 1.01%)</title><rect x="749" y="516" width="12" height="15" fill="rgb(243,150,38)"/><text x="752.00" y="526.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1670) (5 samples, 0.84%)</title><rect x="751" y="532" width="10" height="15" fill="rgb(242,124,26)"/><text x="754.00" y="542.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:615) (3 samples, 0.51%)</title><rect x="761" y="484" width="6" height="15" fill="rgb(244,124,33)"/><text x="764.00" y="494.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:18) (16 samples, 2.70%)</title><rect x="737" y="100" width="32" height="15" fill="rgb(207,151,9)"/><text x="740.00" y="110.50">pr..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (16 samples, 2.70%)</title><rect x="737" y="116" width="32" height="15" fill="rgb(251,11,17)"/><text x="740.00" y="126.50">ti..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (16 samples, 2.70%)</title><rect x="737" y="132" width="32" height="15" fill="rgb(251,98,7)"/><text x="740.00" y="142.50">&lt;l..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (16 samples, 2.70%)</title><rect x="737" y="148" width="32" height="15" fill="rgb(215,118,3)"/><text x="740.00" y="158.50">ru..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (16 samples, 2.70%)</title><rect x="737" y="164" width="32" height="15" fill="rgb(232,193,54)"/><text x="740.00" y="174.50">_r..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (16 samples, 2.70%)</title><rect x="737" y="180" width="32" height="15" fill="rgb(249,145,29)"/><text x="740.00" y="190.50">ru..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:381) (16 samples, 2.70%)</title><rect x="737" y="196" width="32" height="15" fill="rgb(227,43,45)"/><text x="740.00" y="206.50">ru..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (16 samples, 2.70%)</title><rect x="737" y="212" width="32" height="15" fill="rgb(242,199,43)"/><text x="740.00" y="222.50">ru..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py:59) (16 samples, 2.70%)</title><rect x="737" y="228" width="32" height="15" fill="rgb(233,92,11)"/><text x="740.00" y="238.50">_r..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (15 samples, 2.53%)</title><rect x="739" y="244" width="30" height="15" fill="rgb(213,103,21)"/><text x="742.00" y="254.50">py..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (15 samples, 2.53%)</title><rect x="739" y="260" width="30" height="15" fill="rgb(243,11,23)"/><text x="742.00" y="270.50">vo..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (15 samples, 2.53%)</title><rect x="739" y="276" width="30" height="15" fill="rgb(246,184,0)"/><text x="742.00" y="286.50">vo..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (15 samples, 2.53%)</title><rect x="739" y="292" width="30" height="15" fill="rgb(238,168,14)"/><text x="742.00" y="302.50">py..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (15 samples, 2.53%)</title><rect x="739" y="308" width="30" height="15" fill="rgb(213,181,31)"/><text x="742.00" y="318.50">py..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (15 samples, 2.53%)</title><rect x="739" y="324" width="30" height="15" fill="rgb(216,106,13)"/><text x="742.00" y="334.50">py..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (15 samples, 2.53%)</title><rect x="739" y="340" width="30" height="15" fill="rgb(213,117,45)"/><text x="742.00" y="350.50">py..</text></g><g><title>pybind11::array::~array (numpy.h:538) (15 samples, 2.53%)</title><rect x="739" y="356" width="30" height="15" fill="rgb(221,147,18)"/><text x="742.00" y="366.50">py..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (15 samples, 2.53%)</title><rect x="739" y="372" width="30" height="15" fill="rgb(208,178,45)"/><text x="742.00" y="382.50">py..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (15 samples, 2.53%)</title><rect x="739" y="388" width="30" height="15" fill="rgb(231,117,7)"/><text x="742.00" y="398.50">py..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (15 samples, 2.53%)</title><rect x="739" y="404" width="30" height="15" fill="rgb(224,139,42)"/><text x="742.00" y="414.50">py..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:392) (15 samples, 2.53%)</title><rect x="739" y="420" width="30" height="15" fill="rgb(217,125,4)"/><text x="742.00" y="430.50">Ru..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h:1983) (15 samples, 2.53%)</title><rect x="739" y="436" width="30" height="15" fill="rgb(219,38,26)"/><text x="742.00" y="446.50">py..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (15 samples, 2.53%)</title><rect x="739" y="452" width="30" height="15" fill="rgb(238,191,18)"/><text x="742.00" y="462.50">GO..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:427) (15 samples, 2.53%)</title><rect x="739" y="468" width="30" height="15" fill="rgb(225,85,51)"/><text x="742.00" y="478.50">Ru..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:626) (1 samples, 0.17%)</title><rect x="767" y="484" width="2" height="15" fill="rgb(244,86,24)"/><text x="770.00" y="494.50"></text></g><g><title>std::vector&lt;std::tuple&lt;long, long, long, float&gt;, std::allocator&lt;std::tuple&lt;long, long, long, float&gt; &gt; &gt;::size (stl_vector.h:656) (1 samples, 0.17%)</title><rect x="767" y="500" width="2" height="15" fill="rgb(223,134,22)"/><text x="770.00" y="510.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:424) (1 samples, 0.17%)</title><rect x="769" y="468" width="2" height="15" fill="rgb(239,29,29)"/><text x="772.00" y="478.50"></text></g><g><title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::vector (stl_bvector.h:596) (1 samples, 0.17%)</title><rect x="769" y="484" width="2" height="15" fill="rgb(209,2,9)"/><text x="772.00" y="494.50"></text></g><g><title>std::fill&lt;unsigned long*, int&gt; (stl_algobase.h:731) (1 samples, 0.17%)</title><rect x="769" y="500" width="2" height="15" fill="rgb(207,213,22)"/><text x="772.00" y="510.50"></text></g><g><title>std::__fill_a&lt;unsigned long*, int&gt; (stl_algobase.h:696) (1 samples, 0.17%)</title><rect x="769" y="516" width="2" height="15" fill="rgb(224,58,47)"/><text x="772.00" y="526.50"></text></g><g><title>0x7f9491371120 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="769" y="532" width="2" height="15" fill="rgb(248,0,21)"/><text x="772.00" y="542.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:525) (7 samples, 1.18%)</title><rect x="771" y="484" width="14" height="15" fill="rgb(232,193,15)"/><text x="774.00" y="494.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1669) (4 samples, 0.68%)</title><rect x="785" y="532" width="8" height="15" fill="rgb(246,11,28)"/><text x="788.00" y="542.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1670) (6 samples, 1.01%)</title><rect x="793" y="532" width="12" height="15" fill="rgb(216,112,8)"/><text x="796.00" y="542.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:605) (12 samples, 2.03%)</title><rect x="785" y="484" width="24" height="15" fill="rgb(230,88,43)"/><text x="788.00" y="494.50">R..</text></g><g><title>std::map&lt;long, long, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_map.h:1105) (12 samples, 2.03%)</title><rect x="785" y="500" width="24" height="15" fill="rgb(226,195,35)"/><text x="788.00" y="510.50">s..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find (stl_tree.h:2334) (12 samples, 2.03%)</title><rect x="785" y="516" width="24" height="15" fill="rgb(228,212,14)"/><text x="788.00" y="526.50">s..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, long&gt;, std::_Select1st&lt;std::pair&lt;long const, long&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::_M_lower_bound (stl_tree.h:1671) (2 samples, 0.34%)</title><rect x="805" y="532" width="4" height="15" fill="rgb(230,13,52)"/><text x="808.00" y="542.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:615) (1 samples, 0.17%)</title><rect x="809" y="484" width="2" height="15" fill="rgb(217,34,8)"/><text x="812.00" y="494.50"></text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:427) (22 samples, 3.72%)</title><rect x="771" y="468" width="44" height="15" fill="rgb(208,61,0)"/><text x="774.00" y="478.50">Runt..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:629) (2 samples, 0.34%)</title><rect x="811" y="484" width="4" height="15" fill="rgb(246,36,33)"/><text x="814.00" y="494.50"></text></g><g><title>std::vector&lt;std::tuple&lt;long, long, long, float&gt;, std::allocator&lt;std::tuple&lt;long, long, long, float&gt; &gt; &gt;::operator[] (stl_vector.h:796) (2 samples, 0.34%)</title><rect x="811" y="500" width="4" height="15" fill="rgb(242,182,26)"/><text x="814.00" y="510.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:45) (42 samples, 7.09%)</title><rect x="733" y="52" width="84" height="15" fill="rgb(216,68,42)"/><text x="736.00" y="62.50">&lt;module&gt; ..</text></g><g><title>profile_pyrt (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:44) (42 samples, 7.09%)</title><rect x="733" y="68" width="84" height="15" fill="rgb(240,21,52)"/><text x="736.00" y="78.50">profile_p..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:29) (40 samples, 6.76%)</title><rect x="737" y="84" width="80" height="15" fill="rgb(242,35,18)"/><text x="740.00" y="94.50">setup_pro..</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:23) (24 samples, 4.05%)</title><rect x="769" y="100" width="48" height="15" fill="rgb(234,169,36)"/><text x="772.00" y="110.50">prof..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (24 samples, 4.05%)</title><rect x="769" y="116" width="48" height="15" fill="rgb(238,227,25)"/><text x="772.00" y="126.50">time..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (24 samples, 4.05%)</title><rect x="769" y="132" width="48" height="15" fill="rgb(210,40,5)"/><text x="772.00" y="142.50">&lt;lam..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (24 samples, 4.05%)</title><rect x="769" y="148" width="48" height="15" fill="rgb(240,68,1)"/><text x="772.00" y="158.50">run ..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (24 samples, 4.05%)</title><rect x="769" y="164" width="48" height="15" fill="rgb(208,137,46)"/><text x="772.00" y="174.50">_run..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (24 samples, 4.05%)</title><rect x="769" y="180" width="48" height="15" fill="rgb(242,95,38)"/><text x="772.00" y="190.50">run ..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:381) (24 samples, 4.05%)</title><rect x="769" y="196" width="48" height="15" fill="rgb(229,26,28)"/><text x="772.00" y="206.50">run ..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (24 samples, 4.05%)</title><rect x="769" y="212" width="48" height="15" fill="rgb(247,65,10)"/><text x="772.00" y="222.50">run ..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py:59) (24 samples, 4.05%)</title><rect x="769" y="228" width="48" height="15" fill="rgb(211,5,48)"/><text x="772.00" y="238.50">_run..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h:623) (24 samples, 4.05%)</title><rect x="769" y="244" width="48" height="15" fill="rgb(211,41,28)"/><text x="772.00" y="254.50">pybi..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h:137) (24 samples, 4.05%)</title><rect x="769" y="260" width="48" height="15" fill="rgb(230,204,41)"/><text x="772.00" y="270.50">void..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h:159) (24 samples, 4.05%)</title><rect x="769" y="276" width="48" height="15" fill="rgb(210,9,23)"/><text x="772.00" y="286.50">void..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h:1912) (24 samples, 4.05%)</title><rect x="769" y="292" width="48" height="15" fill="rgb(230,28,50)"/><text x="772.00" y="302.50">pybi..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h:1935) (24 samples, 4.05%)</title><rect x="769" y="308" width="48" height="15" fill="rgb(249,192,8)"/><text x="772.00" y="318.50">pybi..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h:85) (24 samples, 4.05%)</title><rect x="769" y="324" width="48" height="15" fill="rgb(205,7,43)"/><text x="772.00" y="334.50">pybi..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h:831) (24 samples, 4.05%)</title><rect x="769" y="340" width="48" height="15" fill="rgb(240,189,24)"/><text x="772.00" y="350.50">pybi..</text></g><g><title>pybind11::array::~array (numpy.h:538) (24 samples, 4.05%)</title><rect x="769" y="356" width="48" height="15" fill="rgb(229,135,15)"/><text x="772.00" y="366.50">pybi..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h:1311) (24 samples, 4.05%)</title><rect x="769" y="372" width="48" height="15" fill="rgb(221,35,22)"/><text x="772.00" y="382.50">pybi..</text></g><g><title>pybind11::object::~object (pytypes.h:240) (24 samples, 4.05%)</title><rect x="769" y="388" width="48" height="15" fill="rgb(213,82,46)"/><text x="772.00" y="398.50">pybi..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h:197) (24 samples, 4.05%)</title><rect x="769" y="404" width="48" height="15" fill="rgb(254,35,10)"/><text x="772.00" y="414.50">pybi..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:392) (24 samples, 4.05%)</title><rect x="769" y="420" width="48" height="15" fill="rgb(241,40,7)"/><text x="772.00" y="430.50">Runt..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h:1983) (24 samples, 4.05%)</title><rect x="769" y="436" width="48" height="15" fill="rgb(214,115,2)"/><text x="772.00" y="446.50">pybi..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (24 samples, 4.05%)</title><rect x="769" y="452" width="48" height="15" fill="rgb(245,4,23)"/><text x="772.00" y="462.50">GOMP..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute_gil_free [clone ._omp_fn.1] (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp:428) (1 samples, 0.17%)</title><rect x="815" y="468" width="2" height="15" fill="rgb(205,143,46)"/><text x="818.00" y="478.50"></text></g><g><title>_to_bytes_or_false (onnx/helper.py:200) (1 samples, 0.17%)</title><rect x="817" y="308" width="2" height="15" fill="rgb(212,57,51)"/><text x="820.00" y="318.50"></text></g><g><title>make_attribute (skl2onnx/proto/onnx_helper_modified.py:136) (2 samples, 0.34%)</title><rect x="817" y="276" width="4" height="15" fill="rgb(245,40,36)"/><text x="820.00" y="286.50"></text></g><g><title>&lt;listcomp&gt; (skl2onnx/proto/onnx_helper_modified.py:136) (2 samples, 0.34%)</title><rect x="817" y="292" width="4" height="15" fill="rgb(251,25,53)"/><text x="820.00" y="302.50"></text></g><g><title>_to_bytes_or_false (onnx/helper.py:205) (1 samples, 0.17%)</title><rect x="819" y="308" width="2" height="15" fill="rgb(218,54,10)"/><text x="822.00" y="318.50"></text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:28) (4 samples, 0.68%)</title><rect x="817" y="84" width="8" height="15" fill="rgb(224,26,21)"/><text x="820.00" y="94.50"></text></g><g><title>setup (mlprodict/asv_benchmark/common_asv_skl.py:173) (4 samples, 0.68%)</title><rect x="817" y="100" width="8" height="15" fill="rgb(227,57,14)"/><text x="820.00" y="110.50"></text></g><g><title>_create_onnx_and_runtime (mlprodict/asv_benchmark/common_asv_skl.py:222) (4 samples, 0.68%)</title><rect x="817" y="116" width="8" height="15" fill="rgb(222,176,46)"/><text x="820.00" y="126.50"></text></g><g><title>_to_onnx (mlprodict/asv_benchmark/common_asv_skl.py:110) (4 samples, 0.68%)</title><rect x="817" y="132" width="8" height="15" fill="rgb(205,52,15)"/><text x="820.00" y="142.50"></text></g><g><title>to_onnx (mlprodict/onnx_conv/convert.py:346) (4 samples, 0.68%)</title><rect x="817" y="148" width="8" height="15" fill="rgb(205,196,52)"/><text x="820.00" y="158.50"></text></g><g><title>convert_sklearn (skl2onnx/convert.py:139) (4 samples, 0.68%)</title><rect x="817" y="164" width="8" height="15" fill="rgb(241,203,8)"/><text x="820.00" y="174.50"></text></g><g><title>convert_topology (skl2onnx/common/_topology.py:973) (4 samples, 0.68%)</title><rect x="817" y="180" width="8" height="15" fill="rgb(238,99,49)"/><text x="820.00" y="190.50"></text></g><g><title>convert_sklearn_random_forest_classifier (skl2onnx/operator_converters/random_forest.py:65) (4 samples, 0.68%)</title><rect x="817" y="196" width="8" height="15" fill="rgb(253,169,24)"/><text x="820.00" y="206.50"></text></g><g><title>add_node (skl2onnx/common/_container.py:448) (4 samples, 0.68%)</title><rect x="817" y="212" width="8" height="15" fill="rgb(209,186,16)"/><text x="820.00" y="222.50"></text></g><g><title>make_node (skl2onnx/proto/onnx_helper_modified.py:70) (4 samples, 0.68%)</title><rect x="817" y="228" width="8" height="15" fill="rgb(208,223,14)"/><text x="820.00" y="238.50"></text></g><g><title>google::protobuf::python::repeated_composite_container::Extend (protobuf/pyext/_message.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.68%)</title><rect x="817" y="244" width="8" height="15" fill="rgb(231,60,11)"/><text x="820.00" y="254.50"></text></g><g><title>&lt;genexpr&gt; (skl2onnx/proto/onnx_helper_modified.py:70) (4 samples, 0.68%)</title><rect x="817" y="260" width="8" height="15" fill="rgb(213,33,29)"/><text x="820.00" y="270.50"></text></g><g><title>make_attribute (skl2onnx/proto/onnx_helper_modified.py:164) (2 samples, 0.34%)</title><rect x="821" y="276" width="4" height="15" fill="rgb(228,143,14)"/><text x="824.00" y="286.50"></text></g><g><title>&lt;genexpr&gt; (skl2onnx/proto/onnx_helper_modified.py:164) (2 samples, 0.34%)</title><rect x="821" y="292" width="4" height="15" fill="rgb(224,18,13)"/><text x="824.00" y="302.50"></text></g><g><title>__instancecheck__ (abc.py:139) (1 samples, 0.17%)</title><rect x="823" y="308" width="2" height="15" fill="rgb(249,180,39)"/><text x="826.00" y="318.50"></text></g><g><title>__subclasscheck__ (abc.py:143) (1 samples, 0.17%)</title><rect x="823" y="324" width="2" height="15" fill="rgb(232,27,46)"/><text x="826.00" y="334.50"></text></g><g><title>0x7f945130eff9 (?) (1 samples, 0.17%)</title><rect x="825" y="212" width="2" height="15" fill="rgb(217,179,4)"/><text x="828.00" y="222.50"></text></g><g><title>0x7f9451309ef6 (?) (1 samples, 0.17%)</title><rect x="825" y="228" width="2" height="15" fill="rgb(250,88,14)"/><text x="828.00" y="238.50"></text></g><g><title>0x7f94512fe962 (?) (1 samples, 0.17%)</title><rect x="825" y="244" width="2" height="15" fill="rgb(248,165,0)"/><text x="828.00" y="254.50"></text></g><g><title>0x7f94513327a7 (?) (1 samples, 0.17%)</title><rect x="825" y="260" width="2" height="15" fill="rgb(219,49,27)"/><text x="828.00" y="270.50"></text></g><g><title>0x7f9451332379 (?) (1 samples, 0.17%)</title><rect x="825" y="276" width="2" height="15" fill="rgb(235,160,46)"/><text x="828.00" y="286.50"></text></g><g><title>0x7f94517908b8 (?) (1 samples, 0.17%)</title><rect x="825" y="292" width="2" height="15" fill="rgb(252,81,37)"/><text x="828.00" y="302.50"></text></g><g><title>0x7f945178ec7f (?) (1 samples, 0.17%)</title><rect x="825" y="308" width="2" height="15" fill="rgb(253,144,20)"/><text x="828.00" y="318.50"></text></g><g><title>0x7f94517a199c (?) (1 samples, 0.17%)</title><rect x="825" y="324" width="2" height="15" fill="rgb(232,39,36)"/><text x="828.00" y="334.50"></text></g><g><title>0x7f94514bf19e (?) (1 samples, 0.17%)</title><rect x="825" y="340" width="2" height="15" fill="rgb(223,126,51)"/><text x="828.00" y="350.50"></text></g><g><title>0x7f94514bbd7b (?) (1 samples, 0.17%)</title><rect x="825" y="356" width="2" height="15" fill="rgb(207,97,2)"/><text x="828.00" y="366.50"></text></g><g><title>onnxruntime::InferenceSession::ValidateInputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.17%)</title><rect x="827" y="292" width="2" height="15" fill="rgb(216,93,43)"/><text x="830.00" y="302.50"></text></g><g><title>onnxruntime::InferenceSession::CheckShapes (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.17%)</title><rect x="827" y="308" width="2" height="15" fill="rgb(247,108,22)"/><text x="830.00" y="318.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (66 samples, 11.15%)</title><rect x="829" y="356" width="131" height="15" fill="rgb(254,180,8)"/><text x="832.00" y="366.50">onnxruntime::ml:..</text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (67 samples, 11.32%)</title><rect x="829" y="340" width="133" height="15" fill="rgb(230,78,2)"/><text x="832.00" y="350.50">onnxruntime::ml:..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.17%)</title><rect x="960" y="356" width="2" height="15" fill="rgb(206,92,41)"/><text x="963.00" y="366.50"></text></g><g><title>0x7f949135090e (libc-2.29.so) (1 samples, 0.17%)</title><rect x="960" y="372" width="2" height="15" fill="rgb(241,139,38)"/><text x="963.00" y="382.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.17%)</title><rect x="962" y="356" width="2" height="15" fill="rgb(251,226,2)"/><text x="965.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.17%)</title><rect x="962" y="372" width="2" height="15" fill="rgb(222,76,22)"/><text x="965.00" y="382.50"></text></g><g><title>0x7f9491352040 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="962" y="388" width="2" height="15" fill="rgb(248,140,24)"/><text x="965.00" y="398.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (70 samples, 11.82%)</title><rect x="827" y="260" width="139" height="15" fill="rgb(220,43,51)"/><text x="830.00" y="270.50">onnxruntime::Infe..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (70 samples, 11.82%)</title><rect x="827" y="276" width="139" height="15" fill="rgb(235,94,49)"/><text x="830.00" y="286.50">onnxruntime::Infe..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (69 samples, 11.66%)</title><rect x="829" y="292" width="137" height="15" fill="rgb(206,158,41)"/><text x="832.00" y="302.50">onnxruntime::util..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (69 samples, 11.66%)</title><rect x="829" y="308" width="137" height="15" fill="rgb(215,88,14)"/><text x="832.00" y="318.50">onnxruntime::util..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (69 samples, 11.66%)</title><rect x="829" y="324" width="137" height="15" fill="rgb(239,204,28)"/><text x="832.00" y="334.50">onnxruntime::Sequ..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.34%)</title><rect x="962" y="340" width="4" height="15" fill="rgb(217,107,50)"/><text x="965.00" y="350.50"></text></g><g><title>std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.17%)</title><rect x="964" y="356" width="2" height="15" fill="rgb(233,194,0)"/><text x="967.00" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.17%)</title><rect x="964" y="372" width="2" height="15" fill="rgb(254,96,39)"/><text x="967.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.17%)</title><rect x="964" y="388" width="2" height="15" fill="rgb(223,178,6)"/><text x="967.00" y="398.50"></text></g><g><title>0x7f9491352028 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="964" y="404" width="2" height="15" fill="rgb(243,224,10)"/><text x="967.00" y="414.50"></text></g><g><title>0x7f949134fc20 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="964" y="420" width="2" height="15" fill="rgb(224,54,42)"/><text x="967.00" y="430.50"></text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:18) (73 samples, 12.33%)</title><rect x="825" y="100" width="145" height="15" fill="rgb(250,46,36)"/><text x="828.00" y="110.50">profile (bench_Ran..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (73 samples, 12.33%)</title><rect x="825" y="116" width="145" height="15" fill="rgb(207,36,7)"/><text x="828.00" y="126.50">time_predict (mlpr..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (73 samples, 12.33%)</title><rect x="825" y="132" width="145" height="15" fill="rgb(240,114,48)"/><text x="828.00" y="142.50">&lt;lambda&gt; (mlprodic..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (73 samples, 12.33%)</title><rect x="825" y="148" width="145" height="15" fill="rgb(245,109,13)"/><text x="828.00" y="158.50">run (mlprodict/onn..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (73 samples, 12.33%)</title><rect x="825" y="164" width="145" height="15" fill="rgb(251,187,52)"/><text x="828.00" y="174.50">_run_whole_runtime..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (73 samples, 12.33%)</title><rect x="825" y="180" width="145" height="15" fill="rgb(240,164,37)"/><text x="828.00" y="190.50">run (mlprodict/onn..</text></g><g><title>run (onnxruntime/capi/session.py:136) (73 samples, 12.33%)</title><rect x="825" y="196" width="145" height="15" fill="rgb(243,14,27)"/><text x="828.00" y="206.50">run (onnxruntime/c..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (72 samples, 12.16%)</title><rect x="827" y="212" width="143" height="15" fill="rgb(238,123,32)"/><text x="830.00" y="222.50">pybind11::cpp_func..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (72 samples, 12.16%)</title><rect x="827" y="228" width="143" height="15" fill="rgb(241,23,21)"/><text x="830.00" y="238.50">void pybind11::cpp..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (72 samples, 12.16%)</title><rect x="827" y="244" width="143" height="15" fill="rgb(241,21,22)"/><text x="830.00" y="254.50">onnxruntime::pytho..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.34%)</title><rect x="966" y="260" width="4" height="15" fill="rgb(238,57,13)"/><text x="969.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.34%)</title><rect x="966" y="276" width="4" height="15" fill="rgb(254,95,25)"/><text x="969.00" y="286.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (101 samples, 17.06%)</title><rect x="976" y="356" width="202" height="15" fill="rgb(237,51,40)"/><text x="979.00" y="366.50">onnxruntime::ml::TreeEnsem..</text></g><g><title>free (libc-2.29.so) (1 samples, 0.17%)</title><rect x="1178" y="372" width="2" height="15" fill="rgb(227,49,42)"/><text x="1181.00" y="382.50"></text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (106 samples, 17.91%)</title><rect x="970" y="340" width="212" height="15" fill="rgb(232,2,44)"/><text x="973.00" y="350.50">onnxruntime::ml::TreeEnsemb..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.34%)</title><rect x="1178" y="356" width="4" height="15" fill="rgb(251,16,51)"/><text x="1181.00" y="366.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, OrtMemType&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, OrtMemType&gt; &gt; &gt;::_M_erase [clone .localalias.69] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.17%)</title><rect x="1180" y="372" width="2" height="15" fill="rgb(252,25,14)"/><text x="1183.00" y="382.50"></text></g><g><title>0x7f9491350bc0 (libc-2.29.so) (1 samples, 0.17%)</title><rect x="1180" y="388" width="2" height="15" fill="rgb(242,140,17)"/><text x="1183.00" y="398.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (107 samples, 18.07%)</title><rect x="970" y="260" width="214" height="15" fill="rgb(231,46,46)"/><text x="973.00" y="270.50">onnxruntime::InferenceSessio..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (107 samples, 18.07%)</title><rect x="970" y="276" width="214" height="15" fill="rgb(222,43,14)"/><text x="973.00" y="286.50">onnxruntime::InferenceSessio..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (107 samples, 18.07%)</title><rect x="970" y="292" width="214" height="15" fill="rgb(211,166,14)"/><text x="973.00" y="302.50">onnxruntime::utils::ExecuteG..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (107 samples, 18.07%)</title><rect x="970" y="308" width="214" height="15" fill="rgb(238,93,3)"/><text x="973.00" y="318.50">onnxruntime::utils::ExecuteG..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (107 samples, 18.07%)</title><rect x="970" y="324" width="214" height="15" fill="rgb(238,168,49)"/><text x="973.00" y="334.50">onnxruntime::SequentialExecu..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.17%)</title><rect x="1182" y="340" width="2" height="15" fill="rgb(220,223,51)"/><text x="1185.00" y="350.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (libstdc++.so.6.0.28) (1 samples, 0.17%)</title><rect x="1182" y="356" width="2" height="15" fill="rgb(227,126,20)"/><text x="1185.00" y="366.50"></text></g><g><title>all (592 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(228,57,27)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:52) (187 samples, 31.59%)</title><rect x="817" y="52" width="373" height="15" fill="rgb(233,39,33)"/><text x="820.00" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_b_c..</text></g><g><title>profile_ort (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:51) (187 samples, 31.59%)</title><rect x="817" y="68" width="373" height="15" fill="rgb(237,19,43)"/><text x="820.00" y="78.50">profile_ort (bench_RandomForestClassifier_default_..</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:29) (183 samples, 30.91%)</title><rect x="825" y="84" width="365" height="15" fill="rgb(220,12,13)"/><text x="828.00" y="94.50">setup_profile (bench_RandomForestClassifier_defau..</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1000_50_12_float_.py:23) (110 samples, 18.58%)</title><rect x="970" y="100" width="220" height="15" fill="rgb(240,67,0)"/><text x="973.00" y="110.50">profile (bench_RandomForestCl..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (110 samples, 18.58%)</title><rect x="970" y="116" width="220" height="15" fill="rgb(213,41,49)"/><text x="973.00" y="126.50">time_predict (mlprodict/asv_b..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (110 samples, 18.58%)</title><rect x="970" y="132" width="220" height="15" fill="rgb(216,26,50)"/><text x="973.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_bench..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (110 samples, 18.58%)</title><rect x="970" y="148" width="220" height="15" fill="rgb(246,5,18)"/><text x="973.00" y="158.50">run (mlprodict/onnxrt/onnx_in..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (110 samples, 18.58%)</title><rect x="970" y="164" width="220" height="15" fill="rgb(227,40,22)"/><text x="973.00" y="174.50">_run_whole_runtime (mlprodict..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (110 samples, 18.58%)</title><rect x="970" y="180" width="220" height="15" fill="rgb(224,31,20)"/><text x="973.00" y="190.50">run (mlprodict/onnxrt/ops_who..</text></g><g><title>run (onnxruntime/capi/session.py:136) (110 samples, 18.58%)</title><rect x="970" y="196" width="220" height="15" fill="rgb(236,140,11)"/><text x="973.00" y="206.50">run (onnxruntime/capi/session..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (110 samples, 18.58%)</title><rect x="970" y="212" width="220" height="15" fill="rgb(246,178,52)"/><text x="973.00" y="222.50">pybind11::cpp_function::dispa..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (110 samples, 18.58%)</title><rect x="970" y="228" width="220" height="15" fill="rgb(214,218,29)"/><text x="973.00" y="238.50">void pybind11::cpp_function::..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (110 samples, 18.58%)</title><rect x="970" y="244" width="220" height="15" fill="rgb(248,52,47)"/><text x="973.00" y="254.50">onnxruntime::python::addObjec..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; [clone .constprop.360] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.51%)</title><rect x="1184" y="260" width="6" height="15" fill="rgb(223,72,30)"/><text x="1187.00" y="270.50"></text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.17%)</title><rect x="1188" y="276" width="2" height="15" fill="rgb(215,41,29)"/><text x="1191.00" y="286.50"></text></g></g></svg>