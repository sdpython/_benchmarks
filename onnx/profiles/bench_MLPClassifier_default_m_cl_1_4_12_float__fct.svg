<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1894" onload="init(evt)" viewBox="0 0 1200 1894" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1894" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1877.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1877.00"> </text><g id="frames"><g><title>_by_version_descending (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="10" y="900" width="2" height="15" fill="rgb(245,30,53)"/><text x="13.00" y="910.50"></text></g><g><title>__eq__ (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.18%)</title><rect x="10" y="916" width="2" height="15" fill="rgb(232,10,5)"/><text x="13.00" y="926.50"></text></g><g><title>_compare (pkg_resources/_vendor/packaging/version.py) (1 samples, 0.18%)</title><rect x="10" y="932" width="2" height="15" fill="rgb(214,98,0)"/><text x="13.00" y="942.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="196" width="4" height="15" fill="rgb(234,54,41)"/><text x="13.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="212" width="4" height="15" fill="rgb(211,23,50)"/><text x="13.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="228" width="4" height="15" fill="rgb(250,90,37)"/><text x="13.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="244" width="4" height="15" fill="rgb(250,61,36)"/><text x="13.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="10" y="260" width="4" height="15" fill="rgb(227,53,49)"/><text x="13.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="276" width="4" height="15" fill="rgb(244,129,4)"/><text x="13.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="292" width="4" height="15" fill="rgb(245,59,13)"/><text x="13.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="308" width="4" height="15" fill="rgb(247,4,13)"/><text x="13.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="324" width="4" height="15" fill="rgb(224,228,15)"/><text x="13.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="340" width="4" height="15" fill="rgb(252,139,26)"/><text x="13.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="10" y="356" width="4" height="15" fill="rgb(224,202,31)"/><text x="13.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="372" width="4" height="15" fill="rgb(219,17,41)"/><text x="13.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (2 samples, 0.37%)</title><rect x="10" y="388" width="4" height="15" fill="rgb(229,74,25)"/><text x="13.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="404" width="4" height="15" fill="rgb(216,181,9)"/><text x="13.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="420" width="4" height="15" fill="rgb(254,56,52)"/><text x="13.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="436" width="4" height="15" fill="rgb(231,58,43)"/><text x="13.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="10" y="452" width="4" height="15" fill="rgb(212,11,40)"/><text x="13.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="468" width="4" height="15" fill="rgb(235,153,8)"/><text x="13.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (2 samples, 0.37%)</title><rect x="10" y="484" width="4" height="15" fill="rgb(241,33,50)"/><text x="13.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="500" width="4" height="15" fill="rgb(248,138,53)"/><text x="13.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="516" width="4" height="15" fill="rgb(251,193,20)"/><text x="13.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="532" width="4" height="15" fill="rgb(247,45,8)"/><text x="13.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="10" y="548" width="4" height="15" fill="rgb(244,8,6)"/><text x="13.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="564" width="4" height="15" fill="rgb(212,106,52)"/><text x="13.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (2 samples, 0.37%)</title><rect x="10" y="580" width="4" height="15" fill="rgb(219,46,7)"/><text x="13.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="596" width="4" height="15" fill="rgb(227,177,25)"/><text x="13.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="612" width="4" height="15" fill="rgb(218,76,49)"/><text x="13.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="628" width="4" height="15" fill="rgb(245,123,40)"/><text x="13.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="644" width="4" height="15" fill="rgb(240,17,23)"/><text x="13.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="660" width="4" height="15" fill="rgb(254,18,7)"/><text x="13.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="676" width="4" height="15" fill="rgb(211,0,0)"/><text x="13.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="10" y="692" width="4" height="15" fill="rgb(240,39,29)"/><text x="13.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="708" width="4" height="15" fill="rgb(221,196,0)"/><text x="13.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="724" width="4" height="15" fill="rgb(205,132,35)"/><text x="13.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="740" width="4" height="15" fill="rgb(213,90,21)"/><text x="13.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="756" width="4" height="15" fill="rgb(224,76,28)"/><text x="13.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="772" width="4" height="15" fill="rgb(242,156,5)"/><text x="13.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="10" y="788" width="4" height="15" fill="rgb(212,17,23)"/><text x="13.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="10" y="804" width="4" height="15" fill="rgb(227,32,47)"/><text x="13.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="820" width="4" height="15" fill="rgb(226,200,31)"/><text x="13.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="836" width="4" height="15" fill="rgb(252,144,53)"/><text x="13.00" y="846.50"></text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="852" width="4" height="15" fill="rgb(245,189,42)"/><text x="13.00" y="862.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="868" width="4" height="15" fill="rgb(254,74,14)"/><text x="13.00" y="878.50"></text></g><g><title>find_on_path (pkg_resources/__init__.py) (2 samples, 0.37%)</title><rect x="10" y="884" width="4" height="15" fill="rgb(230,205,5)"/><text x="13.00" y="894.50"></text></g><g><title>distributions_from_metadata (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="12" y="900" width="2" height="15" fill="rgb(248,10,26)"/><text x="15.00" y="910.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (1 samples, 0.18%)</title><rect x="12" y="916" width="2" height="15" fill="rgb(235,124,49)"/><text x="15.00" y="926.50"></text></g><g><title>&lt;module&gt; (skl2onnx/_parse.py) (1 samples, 0.18%)</title><rect x="14" y="1204" width="2" height="15" fill="rgb(244,119,38)"/><text x="17.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="14" y="1220" width="2" height="15" fill="rgb(252,100,51)"/><text x="17.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="14" y="1236" width="2" height="15" fill="rgb(210,26,52)"/><text x="17.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="14" y="1252" width="2" height="15" fill="rgb(209,117,37)"/><text x="17.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="14" y="1268" width="2" height="15" fill="rgb(241,168,8)"/><text x="17.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="14" y="1284" width="2" height="15" fill="rgb(234,205,29)"/><text x="17.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/_supported_operators.py) (1 samples, 0.18%)</title><rect x="14" y="1300" width="2" height="15" fill="rgb(225,188,0)"/><text x="17.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="14" y="1316" width="2" height="15" fill="rgb(220,152,31)"/><text x="17.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="14" y="1332" width="2" height="15" fill="rgb(246,155,25)"/><text x="17.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="14" y="1348" width="2" height="15" fill="rgb(234,55,4)"/><text x="17.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="14" y="1364" width="2" height="15" fill="rgb(237,208,40)"/><text x="17.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="14" y="1380" width="2" height="15" fill="rgb(247,104,6)"/><text x="17.00" y="1390.50"></text></g><g><title>&lt;module&gt; (sklearn/discriminant_analysis.py) (1 samples, 0.18%)</title><rect x="14" y="1396" width="2" height="15" fill="rgb(244,47,18)"/><text x="17.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="14" y="1412" width="2" height="15" fill="rgb(236,149,40)"/><text x="17.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="14" y="1428" width="2" height="15" fill="rgb(244,194,3)"/><text x="17.00" y="1438.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="14" y="1444" width="2" height="15" fill="rgb(242,30,5)"/><text x="17.00" y="1454.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="14" y="1460" width="2" height="15" fill="rgb(225,15,41)"/><text x="17.00" y="1470.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="14" y="1476" width="2" height="15" fill="rgb(236,35,1)"/><text x="17.00" y="1486.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="14" y="1492" width="2" height="15" fill="rgb(241,201,24)"/><text x="17.00" y="1502.50"></text></g><g><title>_path_isfile (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="14" y="1508" width="2" height="15" fill="rgb(212,186,46)"/><text x="17.00" y="1518.50"></text></g><g><title>_path_is_mode_type (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="14" y="1524" width="2" height="15" fill="rgb(208,219,2)"/><text x="17.00" y="1534.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="14" y="1540" width="2" height="15" fill="rgb(207,159,3)"/><text x="17.00" y="1550.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.18%)</title><rect x="14" y="1556" width="2" height="15" fill="rgb(209,114,35)"/><text x="17.00" y="1566.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.18%)</title><rect x="14" y="1572" width="2" height="15" fill="rgb(238,167,21)"/><text x="17.00" y="1582.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="14" y="1124" width="4" height="15" fill="rgb(243,26,49)"/><text x="17.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="14" y="1140" width="4" height="15" fill="rgb(234,18,47)"/><text x="17.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="14" y="1156" width="4" height="15" fill="rgb(246,87,21)"/><text x="17.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (2 samples, 0.37%)</title><rect x="14" y="1172" width="4" height="15" fill="rgb(221,41,27)"/><text x="17.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (2 samples, 0.37%)</title><rect x="14" y="1188" width="4" height="15" fill="rgb(241,172,0)"/><text x="17.00" y="1198.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_topology.py) (1 samples, 0.18%)</title><rect x="16" y="1204" width="2" height="15" fill="rgb(251,197,45)"/><text x="19.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="16" y="1220" width="2" height="15" fill="rgb(215,89,32)"/><text x="19.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="16" y="1236" width="2" height="15" fill="rgb(242,124,48)"/><text x="19.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="16" y="1252" width="2" height="15" fill="rgb(237,150,24)"/><text x="19.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="16" y="1268" width="2" height="15" fill="rgb(235,199,5)"/><text x="19.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="16" y="1284" width="2" height="15" fill="rgb(243,16,31)"/><text x="19.00" y="1294.50"></text></g><g><title>&lt;module&gt; (skl2onnx/common/_container.py) (1 samples, 0.18%)</title><rect x="16" y="1300" width="2" height="15" fill="rgb(248,161,17)"/><text x="19.00" y="1310.50"></text></g><g><title>_get_operation_list (skl2onnx/common/_container.py) (1 samples, 0.18%)</title><rect x="16" y="1316" width="2" height="15" fill="rgb(216,120,30)"/><text x="19.00" y="1326.50"></text></g><g><title>getsource (inspect.py) (1 samples, 0.18%)</title><rect x="16" y="1332" width="2" height="15" fill="rgb(240,7,17)"/><text x="19.00" y="1342.50"></text></g><g><title>getsourcelines (inspect.py) (1 samples, 0.18%)</title><rect x="16" y="1348" width="2" height="15" fill="rgb(240,117,20)"/><text x="19.00" y="1358.50"></text></g><g><title>getblock (inspect.py) (1 samples, 0.18%)</title><rect x="16" y="1364" width="2" height="15" fill="rgb(225,63,33)"/><text x="19.00" y="1374.50"></text></g><g><title>_tokenize (tokenize.py) (1 samples, 0.18%)</title><rect x="16" y="1380" width="2" height="15" fill="rgb(250,180,28)"/><text x="19.00" y="1390.50"></text></g><g><title>_sre_SRE_Pattern_match (python3.7) (1 samples, 0.18%)</title><rect x="16" y="1396" width="2" height="15" fill="rgb(214,96,10)"/><text x="19.00" y="1406.50"></text></g><g><title>sre_ucs1_match (python3.7) (1 samples, 0.18%)</title><rect x="16" y="1412" width="2" height="15" fill="rgb(238,211,15)"/><text x="19.00" y="1422.50"></text></g><g><title>0x7f516e9b80e9 (?) (1 samples, 0.18%)</title><rect x="18" y="1508" width="2" height="15" fill="rgb(206,85,28)"/><text x="21.00" y="1518.50"></text></g><g><title>0x7f516e99ec02 (?) (1 samples, 0.18%)</title><rect x="18" y="1524" width="2" height="15" fill="rgb(250,103,11)"/><text x="21.00" y="1534.50"></text></g><g><title>0x7f516e9c4e5e (?) (1 samples, 0.18%)</title><rect x="18" y="1540" width="2" height="15" fill="rgb(246,146,51)"/><text x="21.00" y="1550.50"></text></g><g><title>0x7f516e999d1f (?) (1 samples, 0.18%)</title><rect x="18" y="1556" width="2" height="15" fill="rgb(234,30,46)"/><text x="21.00" y="1566.50"></text></g><g><title>0x7f516e3d86f5 (?) (1 samples, 0.18%)</title><rect x="18" y="1572" width="2" height="15" fill="rgb(214,96,17)"/><text x="21.00" y="1582.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="18" y="1588" width="2" height="15" fill="rgb(245,120,21)"/><text x="21.00" y="1598.50"></text></g><g><title>0x7f517e8fe028 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="18" y="1604" width="2" height="15" fill="rgb(225,45,15)"/><text x="21.00" y="1614.50"></text></g><g><title>0x7f517e8fbc20 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="18" y="1620" width="2" height="15" fill="rgb(217,82,48)"/><text x="21.00" y="1630.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/__init__.py) (3 samples, 0.55%)</title><rect x="18" y="1236" width="7" height="15" fill="rgb(252,40,6)"/><text x="21.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="18" y="1252" width="7" height="15" fill="rgb(227,34,0)"/><text x="21.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="18" y="1268" width="7" height="15" fill="rgb(233,117,40)"/><text x="21.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="18" y="1284" width="7" height="15" fill="rgb(233,60,1)"/><text x="21.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="18" y="1300" width="7" height="15" fill="rgb(225,215,37)"/><text x="21.00" y="1310.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="18" y="1316" width="7" height="15" fill="rgb(248,11,28)"/><text x="21.00" y="1326.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.55%)</title><rect x="18" y="1332" width="7" height="15" fill="rgb(218,107,27)"/><text x="21.00" y="1342.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="18" y="1348" width="7" height="15" fill="rgb(227,172,26)"/><text x="21.00" y="1358.50"></text></g><g><title>&lt;module&gt; (skl2onnx/operator_converters/cross_decomposition.py) (3 samples, 0.55%)</title><rect x="18" y="1364" width="7" height="15" fill="rgb(251,59,12)"/><text x="21.00" y="1374.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="18" y="1380" width="7" height="15" fill="rgb(254,205,29)"/><text x="21.00" y="1390.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="18" y="1396" width="7" height="15" fill="rgb(235,89,32)"/><text x="21.00" y="1406.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="18" y="1412" width="7" height="15" fill="rgb(215,196,11)"/><text x="21.00" y="1422.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 0.55%)</title><rect x="18" y="1428" width="7" height="15" fill="rgb(240,73,19)"/><text x="21.00" y="1438.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="18" y="1444" width="7" height="15" fill="rgb(252,178,35)"/><text x="21.00" y="1454.50"></text></g><g><title>&lt;module&gt; (skl2onnx/algebra/onnx_ops.py) (3 samples, 0.55%)</title><rect x="18" y="1460" width="7" height="15" fill="rgb(249,128,20)"/><text x="21.00" y="1470.50"></text></g><g><title>_update_module (skl2onnx/algebra/onnx_ops.py) (3 samples, 0.55%)</title><rect x="18" y="1476" width="7" height="15" fill="rgb(248,23,13)"/><text x="21.00" y="1486.50"></text></g><g><title>dynamic_class_creation (skl2onnx/algebra/onnx_ops.py) (3 samples, 0.55%)</title><rect x="18" y="1492" width="7" height="15" fill="rgb(246,166,33)"/><text x="21.00" y="1502.50"></text></g><g><title>get_rst_doc (skl2onnx/algebra/automation.py) (2 samples, 0.37%)</title><rect x="20" y="1508" width="5" height="15" fill="rgb(251,190,15)"/><text x="23.00" y="1518.50"></text></g><g><title>render (jinja2/asyncsupport.py) (2 samples, 0.37%)</title><rect x="20" y="1524" width="5" height="15" fill="rgb(231,25,3)"/><text x="23.00" y="1534.50"></text></g><g><title>render (jinja2/environment.py) (2 samples, 0.37%)</title><rect x="20" y="1540" width="5" height="15" fill="rgb(248,37,48)"/><text x="23.00" y="1550.50"></text></g><g><title>unicode_join (python3.7) (2 samples, 0.37%)</title><rect x="20" y="1556" width="5" height="15" fill="rgb(246,52,50)"/><text x="23.00" y="1566.50"></text></g><g><title>root (&lt;template&gt;) (2 samples, 0.37%)</title><rect x="20" y="1572" width="5" height="15" fill="rgb(251,218,23)"/><text x="23.00" y="1582.50"></text></g><g><title>getattr (jinja2/environment.py) (1 samples, 0.18%)</title><rect x="23" y="1588" width="2" height="15" fill="rgb(224,188,35)"/><text x="26.00" y="1598.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="23" y="1604" width="2" height="15" fill="rgb(230,35,44)"/><text x="26.00" y="1614.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, onnx::OpSchema::Attribute, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, onnx::OpSchema::Attribute&gt; &gt; &gt; const&amp;, onnx::OpSchema, , &gt;( const&amp;)::{lambda(onnx::OpSchema const*)#1}, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, onnx::OpSchema::Attribute, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, onnx::OpSchema::Attribute&gt; &gt; &gt; const&amp;, onnx::OpSchema const*, &gt;(pybind11::cpp_function::cpp_function&lt;std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, onnx::OpSchema::Attribute, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, onnx::OpSchema::Attribute&gt; &gt; &gt; const&amp;, onnx::OpSchema, , &gt;( const&amp;)::{lambda(onnx::OpSchema const*)#1}&amp;&amp;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, onnx::OpSchema::Attribute, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, onnx::OpSchema::Attribute&gt; &gt; &gt; const&amp; (*)(onnx::OpSchema const*), const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="23" y="1620" width="2" height="15" fill="rgb(222,140,11)"/><text x="26.00" y="1630.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic [clone .constprop.1345] (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="23" y="1636" width="2" height="15" fill="rgb(211,94,37)"/><text x="26.00" y="1646.50"></text></g><g><title>pybind11::detail::get_type_info (onnx/onnx_cpp2py_export.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="23" y="1652" width="2" height="15" fill="rgb(226,113,45)"/><text x="26.00" y="1662.50"></text></g><g><title>std::_Hash_bytes (libstdc++.so.6.0.28) (1 samples, 0.18%)</title><rect x="23" y="1668" width="2" height="15" fill="rgb(233,68,51)"/><text x="26.00" y="1678.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="484" width="13" height="15" fill="rgb(214,70,21)"/><text x="17.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="500" width="13" height="15" fill="rgb(237,168,21)"/><text x="17.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="516" width="13" height="15" fill="rgb(249,89,6)"/><text x="17.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="532" width="13" height="15" fill="rgb(230,159,10)"/><text x="17.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.10%)</title><rect x="14" y="548" width="13" height="15" fill="rgb(226,213,32)"/><text x="17.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="564" width="13" height="15" fill="rgb(219,107,4)"/><text x="17.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py) (6 samples, 1.10%)</title><rect x="14" y="580" width="13" height="15" fill="rgb(210,161,49)"/><text x="17.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="596" width="13" height="15" fill="rgb(218,206,33)"/><text x="17.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="612" width="13" height="15" fill="rgb(208,77,2)"/><text x="17.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="628" width="13" height="15" fill="rgb(205,146,34)"/><text x="17.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.10%)</title><rect x="14" y="644" width="13" height="15" fill="rgb(243,34,16)"/><text x="17.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="660" width="13" height="15" fill="rgb(228,167,24)"/><text x="17.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py) (6 samples, 1.10%)</title><rect x="14" y="676" width="13" height="15" fill="rgb(213,80,37)"/><text x="17.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="692" width="13" height="15" fill="rgb(248,19,38)"/><text x="17.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="708" width="13" height="15" fill="rgb(245,36,43)"/><text x="17.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="724" width="13" height="15" fill="rgb(232,94,48)"/><text x="17.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.10%)</title><rect x="14" y="740" width="13" height="15" fill="rgb(241,46,34)"/><text x="17.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="756" width="13" height="15" fill="rgb(235,148,50)"/><text x="17.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py) (6 samples, 1.10%)</title><rect x="14" y="772" width="13" height="15" fill="rgb(208,132,26)"/><text x="17.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="788" width="13" height="15" fill="rgb(205,124,8)"/><text x="17.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="804" width="13" height="15" fill="rgb(224,122,3)"/><text x="17.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="820" width="13" height="15" fill="rgb(236,87,17)"/><text x="17.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.10%)</title><rect x="14" y="836" width="13" height="15" fill="rgb(224,141,16)"/><text x="17.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="852" width="13" height="15" fill="rgb(211,122,14)"/><text x="17.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py) (6 samples, 1.10%)</title><rect x="14" y="868" width="13" height="15" fill="rgb(228,115,12)"/><text x="17.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="884" width="13" height="15" fill="rgb(223,105,19)"/><text x="17.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="900" width="13" height="15" fill="rgb(206,142,5)"/><text x="17.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="916" width="13" height="15" fill="rgb(225,174,31)"/><text x="17.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="932" width="13" height="15" fill="rgb(247,135,37)"/><text x="17.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="948" width="13" height="15" fill="rgb(215,138,0)"/><text x="17.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="964" width="13" height="15" fill="rgb(252,174,33)"/><text x="17.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.10%)</title><rect x="14" y="980" width="13" height="15" fill="rgb(241,90,51)"/><text x="17.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="996" width="13" height="15" fill="rgb(233,197,23)"/><text x="17.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py) (6 samples, 1.10%)</title><rect x="14" y="1012" width="13" height="15" fill="rgb(221,34,48)"/><text x="17.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="1028" width="13" height="15" fill="rgb(236,69,12)"/><text x="17.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="1044" width="13" height="15" fill="rgb(250,106,1)"/><text x="17.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="1060" width="13" height="15" fill="rgb(237,25,8)"/><text x="17.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (6 samples, 1.10%)</title><rect x="14" y="1076" width="13" height="15" fill="rgb(235,111,29)"/><text x="17.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (6 samples, 1.10%)</title><rect x="14" y="1092" width="13" height="15" fill="rgb(249,167,23)"/><text x="17.00" y="1102.50"></text></g><g><title>&lt;module&gt; (skl2onnx/convert.py) (6 samples, 1.10%)</title><rect x="14" y="1108" width="13" height="15" fill="rgb(206,16,45)"/><text x="17.00" y="1118.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="18" y="1124" width="9" height="15" fill="rgb(211,210,22)"/><text x="21.00" y="1134.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="18" y="1140" width="9" height="15" fill="rgb(210,15,49)"/><text x="21.00" y="1150.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="18" y="1156" width="9" height="15" fill="rgb(226,61,32)"/><text x="21.00" y="1166.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="18" y="1172" width="9" height="15" fill="rgb(244,184,4)"/><text x="21.00" y="1182.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="18" y="1188" width="9" height="15" fill="rgb(220,167,50)"/><text x="21.00" y="1198.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 0.74%)</title><rect x="18" y="1204" width="9" height="15" fill="rgb(250,50,25)"/><text x="21.00" y="1214.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 0.74%)</title><rect x="18" y="1220" width="9" height="15" fill="rgb(220,91,17)"/><text x="21.00" y="1230.50"></text></g><g><title>&lt;module&gt; (skl2onnx/shape_calculators/__init__.py) (1 samples, 0.18%)</title><rect x="25" y="1236" width="2" height="15" fill="rgb(232,91,21)"/><text x="28.00" y="1246.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="25" y="1252" width="2" height="15" fill="rgb(239,216,5)"/><text x="28.00" y="1262.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="25" y="1268" width="2" height="15" fill="rgb(248,121,8)"/><text x="28.00" y="1278.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="25" y="1284" width="2" height="15" fill="rgb(229,213,32)"/><text x="28.00" y="1294.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="25" y="1300" width="2" height="15" fill="rgb(235,218,39)"/><text x="28.00" y="1310.50"></text></g><g><title>_find_spec (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="25" y="1316" width="2" height="15" fill="rgb(211,33,49)"/><text x="28.00" y="1326.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="25" y="1332" width="2" height="15" fill="rgb(254,88,24)"/><text x="28.00" y="1342.50"></text></g><g><title>_get_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="25" y="1348" width="2" height="15" fill="rgb(241,63,26)"/><text x="28.00" y="1358.50"></text></g><g><title>find_spec (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="25" y="1364" width="2" height="15" fill="rgb(212,59,27)"/><text x="28.00" y="1374.50"></text></g><g><title>_path_stat (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="25" y="1380" width="2" height="15" fill="rgb(217,204,19)"/><text x="28.00" y="1390.50"></text></g><g><title>os_stat (python3.7) (1 samples, 0.18%)</title><rect x="25" y="1396" width="2" height="15" fill="rgb(226,120,5)"/><text x="28.00" y="1406.50"></text></g><g><title>__xstat (libc-2.29.so) (1 samples, 0.18%)</title><rect x="25" y="1412" width="2" height="15" fill="rgb(223,135,11)"/><text x="28.00" y="1422.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (7 samples, 1.29%)</title><rect x="14" y="436" width="15" height="15" fill="rgb(205,3,29)"/><text x="17.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.29%)</title><rect x="14" y="452" width="15" height="15" fill="rgb(247,141,39)"/><text x="17.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 1.29%)</title><rect x="14" y="468" width="15" height="15" fill="rgb(242,113,52)"/><text x="17.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="484" width="2" height="15" fill="rgb(249,162,53)"/><text x="30.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="500" width="2" height="15" fill="rgb(229,115,33)"/><text x="30.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="516" width="2" height="15" fill="rgb(250,17,16)"/><text x="30.00" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.18%)</title><rect x="27" y="532" width="2" height="15" fill="rgb(250,109,28)"/><text x="30.00" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="548" width="2" height="15" fill="rgb(205,9,28)"/><text x="30.00" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="564" width="2" height="15" fill="rgb(239,161,29)"/><text x="30.00" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="580" width="2" height="15" fill="rgb(228,132,4)"/><text x="30.00" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="596" width="2" height="15" fill="rgb(250,79,31)"/><text x="30.00" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="612" width="2" height="15" fill="rgb(205,17,7)"/><text x="30.00" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (1 samples, 0.18%)</title><rect x="27" y="628" width="2" height="15" fill="rgb(251,158,19)"/><text x="30.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="644" width="2" height="15" fill="rgb(205,50,51)"/><text x="30.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="660" width="2" height="15" fill="rgb(208,150,43)"/><text x="30.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="676" width="2" height="15" fill="rgb(230,191,46)"/><text x="30.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="692" width="2" height="15" fill="rgb(206,194,24)"/><text x="30.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="708" width="2" height="15" fill="rgb(230,198,1)"/><text x="30.00" y="718.50"></text></g><g><title>&lt;module&gt; (pandas/core/api.py) (1 samples, 0.18%)</title><rect x="27" y="724" width="2" height="15" fill="rgb(215,74,43)"/><text x="30.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="740" width="2" height="15" fill="rgb(206,211,42)"/><text x="30.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="756" width="2" height="15" fill="rgb(211,44,40)"/><text x="30.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="772" width="2" height="15" fill="rgb(231,207,13)"/><text x="30.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="788" width="2" height="15" fill="rgb(250,1,22)"/><text x="30.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="804" width="2" height="15" fill="rgb(229,217,48)"/><text x="30.00" y="814.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/__init__.py) (1 samples, 0.18%)</title><rect x="27" y="820" width="2" height="15" fill="rgb(248,167,35)"/><text x="30.00" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="836" width="2" height="15" fill="rgb(250,151,13)"/><text x="30.00" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="852" width="2" height="15" fill="rgb(241,89,9)"/><text x="30.00" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="868" width="2" height="15" fill="rgb(229,83,40)"/><text x="30.00" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="884" width="2" height="15" fill="rgb(213,125,10)"/><text x="30.00" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="900" width="2" height="15" fill="rgb(211,213,7)"/><text x="30.00" y="910.50"></text></g><g><title>&lt;module&gt; (pandas/core/groupby/generic.py) (1 samples, 0.18%)</title><rect x="27" y="916" width="2" height="15" fill="rgb(243,5,17)"/><text x="30.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="932" width="2" height="15" fill="rgb(240,123,15)"/><text x="30.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="948" width="2" height="15" fill="rgb(216,111,34)"/><text x="30.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="964" width="2" height="15" fill="rgb(210,58,29)"/><text x="30.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="980" width="2" height="15" fill="rgb(213,37,44)"/><text x="30.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="996" width="2" height="15" fill="rgb(208,49,49)"/><text x="30.00" y="1006.50"></text></g><g><title>&lt;module&gt; (pandas/core/frame.py) (1 samples, 0.18%)</title><rect x="27" y="1012" width="2" height="15" fill="rgb(225,27,28)"/><text x="30.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1028" width="2" height="15" fill="rgb(231,207,29)"/><text x="30.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1044" width="2" height="15" fill="rgb(224,58,2)"/><text x="30.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1060" width="2" height="15" fill="rgb(254,123,38)"/><text x="30.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="1076" width="2" height="15" fill="rgb(243,220,52)"/><text x="30.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1092" width="2" height="15" fill="rgb(228,2,21)"/><text x="30.00" y="1102.50"></text></g><g><title>&lt;module&gt; (pandas/core/series.py) (1 samples, 0.18%)</title><rect x="27" y="1108" width="2" height="15" fill="rgb(221,98,8)"/><text x="30.00" y="1118.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1124" width="2" height="15" fill="rgb(215,148,23)"/><text x="30.00" y="1134.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1140" width="2" height="15" fill="rgb(205,201,1)"/><text x="30.00" y="1150.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1156" width="2" height="15" fill="rgb(224,48,29)"/><text x="30.00" y="1166.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="1172" width="2" height="15" fill="rgb(209,133,37)"/><text x="30.00" y="1182.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1188" width="2" height="15" fill="rgb(251,113,5)"/><text x="30.00" y="1198.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/__init__.py) (1 samples, 0.18%)</title><rect x="27" y="1204" width="2" height="15" fill="rgb(210,209,0)"/><text x="30.00" y="1214.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1220" width="2" height="15" fill="rgb(253,134,27)"/><text x="30.00" y="1230.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1236" width="2" height="15" fill="rgb(217,144,50)"/><text x="30.00" y="1246.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1252" width="2" height="15" fill="rgb(208,66,8)"/><text x="30.00" y="1262.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="1268" width="2" height="15" fill="rgb(243,101,23)"/><text x="30.00" y="1278.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1284" width="2" height="15" fill="rgb(206,192,32)"/><text x="30.00" y="1294.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_core.py) (1 samples, 0.18%)</title><rect x="27" y="1300" width="2" height="15" fill="rgb(224,81,14)"/><text x="30.00" y="1310.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1316" width="2" height="15" fill="rgb(209,203,0)"/><text x="30.00" y="1326.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1332" width="2" height="15" fill="rgb(212,88,25)"/><text x="30.00" y="1342.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1348" width="2" height="15" fill="rgb(211,82,36)"/><text x="30.00" y="1358.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="1364" width="2" height="15" fill="rgb(214,52,6)"/><text x="30.00" y="1374.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1380" width="2" height="15" fill="rgb(220,220,24)"/><text x="30.00" y="1390.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/__init__.py) (1 samples, 0.18%)</title><rect x="27" y="1396" width="2" height="15" fill="rgb(245,180,22)"/><text x="30.00" y="1406.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1412" width="2" height="15" fill="rgb(207,109,0)"/><text x="30.00" y="1422.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1428" width="2" height="15" fill="rgb(225,135,44)"/><text x="30.00" y="1438.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1444" width="2" height="15" fill="rgb(209,6,51)"/><text x="30.00" y="1454.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="1460" width="2" height="15" fill="rgb(252,168,18)"/><text x="30.00" y="1470.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1476" width="2" height="15" fill="rgb(252,90,20)"/><text x="30.00" y="1486.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/boxplot.py) (1 samples, 0.18%)</title><rect x="27" y="1492" width="2" height="15" fill="rgb(212,229,33)"/><text x="30.00" y="1502.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1508" width="2" height="15" fill="rgb(211,207,23)"/><text x="30.00" y="1518.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1524" width="2" height="15" fill="rgb(216,4,19)"/><text x="30.00" y="1534.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1540" width="2" height="15" fill="rgb(233,50,8)"/><text x="30.00" y="1550.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="1556" width="2" height="15" fill="rgb(242,65,32)"/><text x="30.00" y="1566.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1572" width="2" height="15" fill="rgb(207,202,53)"/><text x="30.00" y="1582.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/core.py) (1 samples, 0.18%)</title><rect x="27" y="1588" width="2" height="15" fill="rgb(236,165,41)"/><text x="30.00" y="1598.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1604" width="2" height="15" fill="rgb(209,134,33)"/><text x="30.00" y="1614.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1620" width="2" height="15" fill="rgb(246,199,2)"/><text x="30.00" y="1630.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1636" width="2" height="15" fill="rgb(231,15,25)"/><text x="30.00" y="1646.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="1652" width="2" height="15" fill="rgb(249,28,49)"/><text x="30.00" y="1662.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1668" width="2" height="15" fill="rgb(250,219,13)"/><text x="30.00" y="1678.50"></text></g><g><title>&lt;module&gt; (pandas/plotting/_matplotlib/style.py) (1 samples, 0.18%)</title><rect x="27" y="1684" width="2" height="15" fill="rgb(213,183,25)"/><text x="30.00" y="1694.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1700" width="2" height="15" fill="rgb(217,8,53)"/><text x="30.00" y="1710.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1716" width="2" height="15" fill="rgb(250,62,39)"/><text x="30.00" y="1726.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1732" width="2" height="15" fill="rgb(208,120,14)"/><text x="30.00" y="1742.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="27" y="1748" width="2" height="15" fill="rgb(239,192,31)"/><text x="30.00" y="1758.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="27" y="1764" width="2" height="15" fill="rgb(218,45,49)"/><text x="30.00" y="1774.50"></text></g><g><title>&lt;module&gt; (matplotlib/cm.py) (1 samples, 0.18%)</title><rect x="27" y="1780" width="2" height="15" fill="rgb(223,89,20)"/><text x="30.00" y="1790.50"></text></g><g><title>_generate_cmap (matplotlib/cm.py) (1 samples, 0.18%)</title><rect x="27" y="1796" width="2" height="15" fill="rgb(206,79,25)"/><text x="30.00" y="1806.50"></text></g><g><title>from_list (matplotlib/colors.py) (1 samples, 0.18%)</title><rect x="27" y="1812" width="2" height="15" fill="rgb(240,14,39)"/><text x="30.00" y="1822.50"></text></g><g><title>to_rgba (matplotlib/colors.py) (1 samples, 0.18%)</title><rect x="27" y="1828" width="2" height="15" fill="rgb(211,220,16)"/><text x="30.00" y="1838.50"></text></g><g><title>_to_rgba_no_colorcycle (matplotlib/colors.py) (1 samples, 0.18%)</title><rect x="27" y="1844" width="2" height="15" fill="rgb(252,215,30)"/><text x="30.00" y="1854.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.84%)</title><rect x="10" y="68" width="21" height="15" fill="rgb(243,150,34)"/><text x="13.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.84%)</title><rect x="10" y="84" width="21" height="15" fill="rgb(238,164,44)"/><text x="13.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.84%)</title><rect x="10" y="100" width="21" height="15" fill="rgb(238,159,54)"/><text x="13.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (10 samples, 1.84%)</title><rect x="10" y="116" width="21" height="15" fill="rgb(241,199,16)"/><text x="13.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.84%)</title><rect x="10" y="132" width="21" height="15" fill="rgb(252,76,54)"/><text x="13.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_m_cl.py) (10 samples, 1.84%)</title><rect x="10" y="148" width="21" height="15" fill="rgb(253,145,15)"/><text x="13.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.84%)</title><rect x="10" y="164" width="21" height="15" fill="rgb(242,113,27)"/><text x="13.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.84%)</title><rect x="10" y="180" width="21" height="15" fill="rgb(208,9,47)"/><text x="13.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.47%)</title><rect x="14" y="196" width="17" height="15" fill="rgb(211,138,38)"/><text x="17.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.47%)</title><rect x="14" y="212" width="17" height="15" fill="rgb(236,221,36)"/><text x="17.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.47%)</title><rect x="14" y="228" width="17" height="15" fill="rgb(233,147,44)"/><text x="17.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (8 samples, 1.47%)</title><rect x="14" y="244" width="17" height="15" fill="rgb(233,123,24)"/><text x="17.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.47%)</title><rect x="14" y="260" width="17" height="15" fill="rgb(250,53,38)"/><text x="17.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.47%)</title><rect x="14" y="276" width="17" height="15" fill="rgb(222,13,0)"/><text x="17.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.47%)</title><rect x="14" y="292" width="17" height="15" fill="rgb(233,130,18)"/><text x="17.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.47%)</title><rect x="14" y="308" width="17" height="15" fill="rgb(253,28,26)"/><text x="17.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.47%)</title><rect x="14" y="324" width="17" height="15" fill="rgb(205,152,17)"/><text x="17.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (8 samples, 1.47%)</title><rect x="14" y="340" width="17" height="15" fill="rgb(249,124,17)"/><text x="17.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.47%)</title><rect x="14" y="356" width="17" height="15" fill="rgb(225,2,8)"/><text x="17.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.47%)</title><rect x="14" y="372" width="17" height="15" fill="rgb(214,83,47)"/><text x="17.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.47%)</title><rect x="14" y="388" width="17" height="15" fill="rgb(215,161,14)"/><text x="17.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 1.47%)</title><rect x="14" y="404" width="17" height="15" fill="rgb(210,220,33)"/><text x="17.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 1.47%)</title><rect x="14" y="420" width="17" height="15" fill="rgb(247,0,39)"/><text x="17.00" y="430.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/__init__.py) (1 samples, 0.18%)</title><rect x="29" y="436" width="2" height="15" fill="rgb(231,2,48)"/><text x="32.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="452" width="2" height="15" fill="rgb(246,73,17)"/><text x="32.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="468" width="2" height="15" fill="rgb(241,189,22)"/><text x="32.00" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="484" width="2" height="15" fill="rgb(239,38,22)"/><text x="32.00" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="29" y="500" width="2" height="15" fill="rgb(236,69,19)"/><text x="32.00" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="516" width="2" height="15" fill="rgb(236,149,16)"/><text x="32.00" y="526.50"></text></g><g><title>&lt;module&gt; (sklearn/datasets/_openml.py) (1 samples, 0.18%)</title><rect x="29" y="532" width="2" height="15" fill="rgb(207,33,14)"/><text x="32.00" y="542.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="548" width="2" height="15" fill="rgb(234,166,28)"/><text x="32.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="564" width="2" height="15" fill="rgb(211,202,16)"/><text x="32.00" y="574.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="580" width="2" height="15" fill="rgb(247,187,28)"/><text x="32.00" y="590.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="596" width="2" height="15" fill="rgb(216,6,32)"/><text x="32.00" y="606.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="612" width="2" height="15" fill="rgb(230,89,8)"/><text x="32.00" y="622.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (1 samples, 0.18%)</title><rect x="29" y="628" width="2" height="15" fill="rgb(239,33,45)"/><text x="32.00" y="638.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (1 samples, 0.18%)</title><rect x="29" y="644" width="2" height="15" fill="rgb(215,70,18)"/><text x="32.00" y="654.50"></text></g><g><title>&lt;module&gt; (sklearn/externals/_arff.py) (1 samples, 0.18%)</title><rect x="29" y="660" width="2" height="15" fill="rgb(238,29,33)"/><text x="32.00" y="670.50"></text></g><g><title>_build_re_values (sklearn/externals/_arff.py) (1 samples, 0.18%)</title><rect x="29" y="676" width="2" height="15" fill="rgb(221,46,51)"/><text x="32.00" y="686.50"></text></g><g><title>compile (re.py) (1 samples, 0.18%)</title><rect x="29" y="692" width="2" height="15" fill="rgb(245,184,10)"/><text x="32.00" y="702.50"></text></g><g><title>_compile (re.py) (1 samples, 0.18%)</title><rect x="29" y="708" width="2" height="15" fill="rgb(205,137,2)"/><text x="32.00" y="718.50"></text></g><g><title>compile (sre_compile.py) (1 samples, 0.18%)</title><rect x="29" y="724" width="2" height="15" fill="rgb(234,87,44)"/><text x="32.00" y="734.50"></text></g><g><title>parse (sre_parse.py) (1 samples, 0.18%)</title><rect x="29" y="740" width="2" height="15" fill="rgb(226,1,26)"/><text x="32.00" y="750.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.18%)</title><rect x="29" y="756" width="2" height="15" fill="rgb(221,139,50)"/><text x="32.00" y="766.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.18%)</title><rect x="29" y="772" width="2" height="15" fill="rgb(233,37,45)"/><text x="32.00" y="782.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.18%)</title><rect x="29" y="788" width="2" height="15" fill="rgb(215,126,44)"/><text x="32.00" y="798.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.18%)</title><rect x="29" y="804" width="2" height="15" fill="rgb(215,207,3)"/><text x="32.00" y="814.50"></text></g><g><title>_parse_sub (sre_parse.py) (1 samples, 0.18%)</title><rect x="29" y="820" width="2" height="15" fill="rgb(228,224,32)"/><text x="32.00" y="830.50"></text></g><g><title>_parse (sre_parse.py) (1 samples, 0.18%)</title><rect x="29" y="836" width="2" height="15" fill="rgb(215,228,31)"/><text x="32.00" y="846.50"></text></g><g><title>get (sre_parse.py) (1 samples, 0.18%)</title><rect x="29" y="852" width="2" height="15" fill="rgb(247,166,52)"/><text x="32.00" y="862.50"></text></g><g><title>__next (sre_parse.py) (1 samples, 0.18%)</title><rect x="29" y="868" width="2" height="15" fill="rgb(208,141,10)"/><text x="32.00" y="878.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.37%)</title><rect x="33" y="116" width="5" height="15" fill="rgb(238,160,51)"/><text x="36.00" y="126.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.18%)</title><rect x="36" y="132" width="2" height="15" fill="rgb(240,86,33)"/><text x="39.00" y="142.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (1 samples, 0.18%)</title><rect x="44" y="180" width="2" height="15" fill="rgb(210,82,37)"/><text x="47.00" y="190.50"></text></g><g><title>0x7f513c93fff9 (?) (1 samples, 0.18%)</title><rect x="46" y="212" width="3" height="15" fill="rgb(239,79,3)"/><text x="49.00" y="222.50"></text></g><g><title>0x7f513c93aef6 (?) (1 samples, 0.18%)</title><rect x="46" y="228" width="3" height="15" fill="rgb(219,146,30)"/><text x="49.00" y="238.50"></text></g><g><title>0x7f513c92f458 (?) (1 samples, 0.18%)</title><rect x="46" y="244" width="3" height="15" fill="rgb(235,173,20)"/><text x="49.00" y="254.50"></text></g><g><title>0x7f513c920081 (?) (1 samples, 0.18%)</title><rect x="46" y="260" width="3" height="15" fill="rgb(226,21,23)"/><text x="49.00" y="270.50"></text></g><g><title>0x7f513c91f2a4 (?) (1 samples, 0.18%)</title><rect x="46" y="276" width="3" height="15" fill="rgb(223,120,38)"/><text x="49.00" y="286.50"></text></g><g><title>0x7f517e8fc93b (libc-2.29.so) (1 samples, 0.18%)</title><rect x="46" y="292" width="3" height="15" fill="rgb(217,213,7)"/><text x="49.00" y="302.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.18%)</title><rect x="57" y="244" width="2" height="15" fill="rgb(247,166,25)"/><text x="60.00" y="254.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="57" y="260" width="2" height="15" fill="rgb(244,27,38)"/><text x="60.00" y="270.50"></text></g><g><title>pybind11::detail::argument_loader&lt;onnxruntime::SessionOptions const&amp;&gt;::load_impl_sequence&lt;(unsigned long)0&gt; [clone .isra.1217] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="59" y="260" width="3" height="15" fill="rgb(239,145,12)"/><text x="62.00" y="270.50"></text></g><g><title>pybind11::detail::type_caster_generic::load_impl&lt;pybind11::detail::type_caster_generic&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="59" y="276" width="3" height="15" fill="rgb(223,56,25)"/><text x="62.00" y="286.50"></text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::cast [clone .isra.698] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="62" y="260" width="2" height="15" fill="rgb(227,185,10)"/><text x="65.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (onnxruntime/capi/session.py) (8 samples, 1.47%)</title><rect x="49" y="212" width="17" height="15" fill="rgb(229,49,21)"/><text x="52.00" y="222.50"></text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.74%)</title><rect x="57" y="228" width="9" height="15" fill="rgb(230,185,2)"/><text x="60.00" y="238.50"></text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg const*, &gt;(pybind11::cpp_function::cpp_function&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, onnxruntime::NodeArg, , &gt;( const&amp;)::{lambda(onnxruntime::NodeArg const*)#1}&amp;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp; (*)(onnxruntime::NodeArg const*), const&amp;)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.55%)</title><rect x="59" y="244" width="7" height="15" fill="rgb(252,187,20)"/><text x="62.00" y="254.50"></text></g><g><title>pybind11::detail::type_caster_generic::type_caster_generic [clone .lto_priv.471] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="64" y="260" width="2" height="15" fill="rgb(223,127,46)"/><text x="67.00" y="270.50"></text></g><g><title>pybind11::detail::get_type_info [clone .constprop.384] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="64" y="276" width="2" height="15" fill="rgb(254,180,41)"/><text x="67.00" y="286.50"></text></g><g><title>0x7f517e912e98 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="64" y="292" width="2" height="15" fill="rgb(205,218,10)"/><text x="67.00" y="302.50"></text></g><g><title>pybind11::detail::loader_life_support::~loader_life_support [clone .constprop.289] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="66" y="228" width="2" height="15" fill="rgb(219,224,10)"/><text x="69.00" y="238.50"></text></g><g><title>onnxruntime::FeedsFetchesInfo::SetMLValueIdxs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="70" y="308" width="3" height="15" fill="rgb(208,192,52)"/><text x="73.00" y="318.50"></text></g><g><title>onnxruntime::FeedsFetchesInfo::MapNamesToMLValueIdxs (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="70" y="324" width="3" height="15" fill="rgb(222,47,26)"/><text x="73.00" y="334.50"></text></g><g><title>0x7f517e9dae69 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="70" y="340" width="3" height="15" fill="rgb(250,144,42)"/><text x="73.00" y="350.50"></text></g><g><title>onnxruntime::FeedsFetchesInfo::FeedsFetchesInfo (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="70" y="292" width="5" height="15" fill="rgb(253,125,16)"/><text x="73.00" y="302.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="73" y="308" width="2" height="15" fill="rgb(239,16,3)"/><text x="76.00" y="318.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (1 samples, 0.18%)</title><rect x="73" y="324" width="2" height="15" fill="rgb(224,227,19)"/><text x="76.00" y="334.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="73" y="340" width="2" height="15" fill="rgb(208,214,54)"/><text x="76.00" y="350.50"></text></g><g><title>onnxruntime::InferenceSession::ValidateInputs (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="75" y="292" width="4" height="15" fill="rgb(236,10,33)"/><text x="78.00" y="302.50"></text></g><g><title>onnxruntime::InferenceSession::CheckShapes (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="77" y="308" width="2" height="15" fill="rgb(224,219,20)"/><text x="80.00" y="318.50"></text></g><g><title>onnxruntime::ArgMax&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="79" y="340" width="4" height="15" fill="rgb(212,162,28)"/><text x="82.00" y="350.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="79" y="356" width="4" height="15" fill="rgb(240,153,26)"/><text x="82.00" y="366.50"></text></g><g><title>onnxruntime::Cast&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="83" y="340" width="3" height="15" fill="rgb(229,4,27)"/><text x="86.00" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="83" y="356" width="3" height="15" fill="rgb(243,221,41)"/><text x="86.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="83" y="372" width="3" height="15" fill="rgb(244,119,17)"/><text x="86.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="83" y="388" width="3" height="15" fill="rgb(249,22,18)"/><text x="86.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="83" y="404" width="3" height="15" fill="rgb(254,143,3)"/><text x="86.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="83" y="420" width="3" height="15" fill="rgb(209,215,49)"/><text x="86.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="83" y="436" width="3" height="15" fill="rgb(244,134,20)"/><text x="86.00" y="446.50"></text></g><g><title>onnxruntime::Cast&lt;long&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="86" y="340" width="4" height="15" fill="rgb(213,2,21)"/><text x="89.00" y="350.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="88" y="356" width="2" height="15" fill="rgb(251,22,23)"/><text x="91.00" y="366.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="88" y="372" width="2" height="15" fill="rgb(215,150,19)"/><text x="91.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="88" y="388" width="2" height="15" fill="rgb(251,188,43)"/><text x="91.00" y="398.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="88" y="404" width="2" height="15" fill="rgb(246,65,11)"/><text x="91.00" y="414.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="88" y="420" width="2" height="15" fill="rgb(230,70,50)"/><text x="91.00" y="430.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="88" y="436" width="2" height="15" fill="rgb(207,52,47)"/><text x="91.00" y="446.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="88" y="452" width="2" height="15" fill="rgb(213,221,34)"/><text x="91.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="88" y="468" width="2" height="15" fill="rgb(207,24,7)"/><text x="91.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="88" y="484" width="2" height="15" fill="rgb(250,60,25)"/><text x="91.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkIterFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="88" y="500" width="2" height="15" fill="rgb(212,29,42)"/><text x="91.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="90" y="340" width="4" height="15" fill="rgb(250,29,25)"/><text x="93.00" y="350.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="92" y="356" width="2" height="15" fill="rgb(206,20,32)"/><text x="95.00" y="366.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="92" y="372" width="2" height="15" fill="rgb(226,97,41)"/><text x="95.00" y="382.50"></text></g><g><title>onnxruntime::IExecutionProvider::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="92" y="388" width="2" height="15" fill="rgb(232,174,31)"/><text x="95.00" y="398.50"></text></g><g><title>0x7f517e8fcd07 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="94" y="356" width="2" height="15" fill="rgb(217,48,17)"/><text x="97.00" y="366.50"></text></g><g><title>mkl_blas_xsgemv (onnxruntime/capi/libmklml_intel.so) (2 samples, 0.37%)</title><rect x="96" y="436" width="5" height="15" fill="rgb(212,224,20)"/><text x="99.00" y="446.50"></text></g><g><title>mkl_blas_avx_xsgemv (onnxruntime/capi/libmklml_intel.so) (2 samples, 0.37%)</title><rect x="96" y="452" width="5" height="15" fill="rgb(215,203,12)"/><text x="99.00" y="462.50"></text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.74%)</title><rect x="94" y="340" width="9" height="15" fill="rgb(254,34,38)"/><text x="97.00" y="350.50"></text></g><g><title>onnxruntime::math::Gemm&lt;float, onnxruntime::concurrency::ThreadPool&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.55%)</title><rect x="96" y="356" width="7" height="15" fill="rgb(223,60,50)"/><text x="99.00" y="366.50"></text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (3 samples, 0.55%)</title><rect x="96" y="372" width="7" height="15" fill="rgb(254,154,19)"/><text x="99.00" y="382.50"></text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (3 samples, 0.55%)</title><rect x="96" y="388" width="7" height="15" fill="rgb(217,107,12)"/><text x="99.00" y="398.50"></text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (3 samples, 0.55%)</title><rect x="96" y="404" width="7" height="15" fill="rgb(205,56,6)"/><text x="99.00" y="414.50"></text></g><g><title>mkl_blas_sgemv (onnxruntime/capi/libmklml_intel.so) (3 samples, 0.55%)</title><rect x="96" y="420" width="7" height="15" fill="rgb(231,8,16)"/><text x="99.00" y="430.50"></text></g><g><title>mkl_serv_cpu_detect (onnxruntime/capi/libmklml_intel.so) (1 samples, 0.18%)</title><rect x="101" y="436" width="2" height="15" fill="rgb(235,113,32)"/><text x="104.00" y="446.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="103" y="340" width="2" height="15" fill="rgb(218,106,41)"/><text x="106.00" y="350.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="103" y="356" width="2" height="15" fill="rgb(237,124,16)"/><text x="106.00" y="366.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="103" y="372" width="2" height="15" fill="rgb(245,212,38)"/><text x="106.00" y="382.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="103" y="388" width="2" height="15" fill="rgb(249,125,50)"/><text x="106.00" y="398.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="103" y="404" width="2" height="15" fill="rgb(248,4,9)"/><text x="106.00" y="414.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="105" y="340" width="2" height="15" fill="rgb(224,40,29)"/><text x="108.00" y="350.50"></text></g><g><title>onnxruntime::Relu&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="107" y="340" width="2" height="15" fill="rgb(226,20,41)"/><text x="110.00" y="350.50"></text></g><g><title>onnxruntime::Reshape::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="109" y="340" width="3" height="15" fill="rgb(224,228,5)"/><text x="112.00" y="350.50"></text></g><g><title>Eigen::internal::TensorExecutor&lt;Eigen::TensorEvalToOp&lt;Eigen::TensorReductionOp&lt;Eigen::internal::MaxReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice, true, false&gt;::run (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="114" y="372" width="2" height="15" fill="rgb(235,34,9)"/><text x="117.00" y="382.50"></text></g><g><title>std::_Function_base::_Base_manager&lt;Eigen::internal::TensorExecutor&lt;Eigen::TensorEvalToOp&lt;Eigen::TensorReductionOp&lt;Eigen::internal::MaxReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice, true, false&gt;::run(Eigen::TensorEvalToOp&lt;Eigen::TensorReductionOp&lt;Eigen::internal::MaxReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float const, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const&amp;, Eigen::ThreadPoolDevice const&amp;)::{lambda(long, long)#1}&gt;::_M_manager (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="114" y="388" width="2" height="15" fill="rgb(207,17,45)"/><text x="117.00" y="398.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="116" y="388" width="2" height="15" fill="rgb(206,128,19)"/><text x="119.00" y="398.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="116" y="404" width="2" height="15" fill="rgb(251,26,37)"/><text x="119.00" y="414.50"></text></g><g><title>_ZNSt17_Function_handlerIFvllEZN5Eigen8internal14TensorExecutorIKNS1_14TensorAssignOpINS1_9TensorMapINS1_6TensorIfLi2ELi1ElEELi16ENS1_11MakePointerEEEKNS1_19TensorCwiseBinaryOpINS2_17scalar_product_opIffEEKS9_KNS1_20TensorBroadcastingOpIKNS1_9IndexListINS1_10type2indexILl1EEEJiEEEKNS1_17TensorReshapingOpIKNSF_IiJSH_EEEKNS1_18TensorForcedEvalOpIKNS1_18TensorCwiseUnaryOpINS2_17scalar_inverse_opIfEEKNS1_17TensorReductionOpINS2_10SumReducerIfEEKNSF_ISH_JEEESD_S8_EEEEEEEEEEEEEENS1_16ThreadPoolDeviceELb1ELb1EE3runERS19_RKS1A_EUlllE_E9_M_invokeERKSt9_Any_dataOlS1K_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="116" y="420" width="2" height="15" fill="rgb(251,11,26)"/><text x="119.00" y="430.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_19TensorCwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEEKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNSC_IiJSE_EEEKNS_18TensorForcedEvalOpIKNS_18TensorCwiseUnaryOpINS2_17scalar_inverse_opIfEEKNS_17TensorReductionOpINS2_10SumReducerIfEEKNSC_ISE_JEEESA_S8_EEEEEEEEEEEENS_16ThreadPoolDeviceEE5blockEPNS2_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="116" y="436" width="2" height="15" fill="rgb(220,141,33)"/><text x="119.00" y="446.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNS2_IiJS4_EEEKNS_18TensorForcedEvalOpIKNS_18TensorCwiseUnaryOpINS_8internal17scalar_inverse_opIfEEKNS_17TensorReductionOpINSC_10SumReducerIfEEKNS2_IS4_JEEEKNS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEESN_EEEEEEEEEENS_16ThreadPoolDeviceEE5blockEPNSC_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="116" y="452" width="2" height="15" fill="rgb(225,29,24)"/><text x="119.00" y="462.50"></text></g><g><title>_ZN5Eigen8internal14TensorExecutorIKNS_14TensorAssignOpINS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEEKNS_19TensorCwiseBinaryOpINS0_17scalar_product_opIffEEKS7_KNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNSD_IiJSF_EEEKNS_18TensorForcedEvalOpIKNS_18TensorCwiseUnaryOpINS0_17scalar_inverse_opIfEEKNS_17TensorReductionOpINS0_10SumReducerIfEEKNSD_ISF_JEEESB_S6_EEEEEEEEEEEEEENS_16ThreadPoolDeviceELb1ELb1EE3runERS17_RKS18_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="116" y="372" width="4" height="15" fill="rgb(210,61,28)"/><text x="119.00" y="382.50"></text></g><g><title>Eigen::internal::TensorExecutor&lt;Eigen::TensorEvalToOp&lt;Eigen::TensorCwiseUnaryOp&lt;Eigen::internal::scalar_inverse_op&lt;float&gt;, Eigen::TensorReductionOp&lt;Eigen::internal::SumReducer&lt;float&gt;, Eigen::IndexList&lt;Eigen::type2index&lt;(long)1&gt;, &gt; const, Eigen::TensorMap&lt;Eigen::Tensor&lt;float, 2, 1, long&gt;, 16, Eigen::MakePointer&gt; const, Eigen::MakePointer&gt; const&gt; const, Eigen::MakePointer&gt; const, Eigen::ThreadPoolDevice, true, false&gt;::run (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="118" y="388" width="2" height="15" fill="rgb(222,100,32)"/><text x="121.00" y="398.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="118" y="404" width="2" height="15" fill="rgb(224,138,7)"/><text x="121.00" y="414.50"></text></g><g><title>_ZNSt17_Function_handlerIFvllEZN5Eigen8internal14TensorExecutorIKNS1_14TensorEvalToOpIKNS1_18TensorCwiseUnaryOpINS2_17scalar_inverse_opIfEEKNS1_17TensorReductionOpINS2_10SumReducerIfEEKNS1_9IndexListINS1_10type2indexILl1EEEJEEEKNS1_9TensorMapINS1_6TensorIfLi2ELi1ElEELi16ENS1_11MakePointerEEESJ_EEEESJ_EENS1_16ThreadPoolDeviceELb1ELb0EE3runERSR_RKSS_EUlllE_E9_M_invokeERKSt9_Any_dataOlS12_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="118" y="420" width="2" height="15" fill="rgb(234,91,46)"/><text x="121.00" y="430.50"></text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (24 samples, 4.42%)</title><rect x="70" y="260" width="53" height="15" fill="rgb(246,134,40)"/><text x="73.00" y="270.50">onnxr..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (24 samples, 4.42%)</title><rect x="70" y="276" width="53" height="15" fill="rgb(214,169,39)"/><text x="73.00" y="286.50">onnxr..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 3.68%)</title><rect x="79" y="292" width="44" height="15" fill="rgb(222,227,14)"/><text x="82.00" y="302.50">onnx..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 3.68%)</title><rect x="79" y="308" width="44" height="15" fill="rgb(214,91,5)"/><text x="82.00" y="318.50">onnx..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 3.68%)</title><rect x="79" y="324" width="44" height="15" fill="rgb(252,48,15)"/><text x="82.00" y="334.50">onnx..</text></g><g><title>onnxruntime::Softmax&lt;float, false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.92%)</title><rect x="112" y="340" width="11" height="15" fill="rgb(233,201,16)"/><text x="115.00" y="350.50"></text></g><g><title>onnxruntime::ComputeSoftMax&lt;Eigen::ThreadPoolDevice, float&gt; [clone .constprop.656] (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.92%)</title><rect x="112" y="356" width="11" height="15" fill="rgb(241,9,7)"/><text x="115.00" y="366.50"></text></g><g><title>_ZN5Eigen8internal30GetTensorExecutorTilingContextINS_15TensorEvaluatorIKNS_14TensorAssignOpINS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEEKNS_18TensorCwiseUnaryOpINS0_13scalar_exp_opIfEEKNS_19TensorCwiseBinaryOpINS0_20scalar_difference_opIKfSE_EEKNS4_INS5_ISE_Li2ELi1ElEELi16ES7_EEKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNSK_IiJSM_EEEKNS_18TensorForcedEvalOpIKNS_17TensorReductionOpINS0_10MaxReducerIfEEKNSK_ISM_JEEESI_S7_EEEEEEEEEEEEEENS_16ThreadPoolDeviceEEENS0_17TensorBlockMapperIflLi2ELi1EEELb1EEENS0_27TensorExecutorTilingContextIT0_EERKS1C_RKT_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="120" y="372" width="3" height="15" fill="rgb(218,92,31)"/><text x="123.00" y="382.50"></text></g><g><title>Eigen::internal::aligned_malloc (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="120" y="388" width="3" height="15" fill="rgb(208,146,15)"/><text x="123.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="120" y="404" width="3" height="15" fill="rgb(249,47,51)"/><text x="123.00" y="414.50"></text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (26 samples, 4.79%)</title><rect x="68" y="244" width="57" height="15" fill="rgb(242,13,24)"/><text x="71.00" y="254.50">onnxru..</text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::~vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="123" y="260" width="2" height="15" fill="rgb(240,215,26)"/><text x="126.00" y="270.50"></text></g><g><title>onnxruntime::Delete&lt;onnxruntime::Tensor&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="123" y="276" width="2" height="15" fill="rgb(251,225,29)"/><text x="126.00" y="286.50"></text></g><g><title>onnxruntime::Tensor::~Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="123" y="292" width="2" height="15" fill="rgb(249,176,35)"/><text x="126.00" y="302.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="123" y="308" width="2" height="15" fill="rgb(212,95,35)"/><text x="126.00" y="318.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="123" y="324" width="2" height="15" fill="rgb(227,194,15)"/><text x="126.00" y="334.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="123" y="340" width="2" height="15" fill="rgb(241,26,34)"/><text x="126.00" y="350.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="123" y="356" width="2" height="15" fill="rgb(221,40,19)"/><text x="126.00" y="366.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="123" y="372" width="2" height="15" fill="rgb(217,74,44)"/><text x="126.00" y="382.50"></text></g><g><title>pybind11::detail::list_caster&lt;std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::load (onnxruntime/capi/onnxruntime_pybind11_state.so) (2 samples, 0.37%)</title><rect x="125" y="244" width="4" height="15" fill="rgb(248,171,23)"/><text x="128.00" y="254.50"></text></g><g><title>pybind11::detail::string_caster&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, false&gt;::load [clone .constprop.387] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="127" y="260" width="2" height="15" fill="rgb(229,201,6)"/><text x="130.00" y="270.50"></text></g><g><title>run (onnxruntime/capi/session.py) (39 samples, 7.18%)</title><rect x="46" y="196" width="85" height="15" fill="rgb(236,138,19)"/><text x="49.00" y="206.50">run (onnxr..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (30 samples, 5.52%)</title><rect x="66" y="212" width="65" height="15" fill="rgb(227,10,25)"/><text x="69.00" y="222.50">pybind1..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (29 samples, 5.34%)</title><rect x="68" y="228" width="63" height="15" fill="rgb(234,173,53)"/><text x="71.00" y="238.50">void p..</text></g><g><title>std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;::~vector [clone .lto_priv.576] (onnxruntime/capi/onnxruntime_pybind11_state.so) (1 samples, 0.18%)</title><rect x="129" y="244" width="2" height="15" fill="rgb(254,58,44)"/><text x="132.00" y="254.50"></text></g><g><title>profile_ort (bench_MLPClassifier_default_m_cl_1_4_12_float_.py) (47 samples, 8.66%)</title><rect x="31" y="68" width="102" height="15" fill="rgb(243,15,44)"/><text x="34.00" y="78.50">profile_ort ..</text></g><g><title>setup_profile (bench_MLPClassifier_default_m_cl_1_4_12_float_.py) (47 samples, 8.66%)</title><rect x="31" y="84" width="102" height="15" fill="rgb(213,41,26)"/><text x="34.00" y="94.50">setup_profil..</text></g><g><title>profile (bench_MLPClassifier_default_m_cl_1_4_12_float_.py) (47 samples, 8.66%)</title><rect x="31" y="100" width="102" height="15" fill="rgb(211,197,36)"/><text x="34.00" y="110.50">profile (ben..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (44 samples, 8.10%)</title><rect x="38" y="116" width="95" height="15" fill="rgb(246,131,31)"/><text x="41.00" y="126.50">time_predic..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (44 samples, 8.10%)</title><rect x="38" y="132" width="95" height="15" fill="rgb(225,77,8)"/><text x="41.00" y="142.50">&lt;lambda&gt; (m..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (44 samples, 8.10%)</title><rect x="38" y="148" width="95" height="15" fill="rgb(222,167,49)"/><text x="41.00" y="158.50">run (mlprod..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (44 samples, 8.10%)</title><rect x="38" y="164" width="95" height="15" fill="rgb(214,73,47)"/><text x="41.00" y="174.50">_run_whole_..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (40 samples, 7.37%)</title><rect x="46" y="180" width="87" height="15" fill="rgb(208,122,11)"/><text x="49.00" y="190.50">run (mlpro..</text></g><g><title>unicode_dealloc (python3.7) (1 samples, 0.18%)</title><rect x="131" y="196" width="2" height="15" fill="rgb(235,3,1)"/><text x="134.00" y="206.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py) (2 samples, 0.37%)</title><rect x="168" y="180" width="4" height="15" fill="rgb(242,180,49)"/><text x="171.00" y="190.50"></text></g><g><title>unicode_eq (python3.7) (2 samples, 0.37%)</title><rect x="168" y="196" width="4" height="15" fill="rgb(221,213,54)"/><text x="171.00" y="206.50"></text></g><g><title>0x7f517e91d12b (libc-2.29.so) (1 samples, 0.18%)</title><rect x="301" y="196" width="2" height="15" fill="rgb(253,40,41)"/><text x="304.00" y="206.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py) (7 samples, 1.29%)</title><rect x="303" y="196" width="15" height="15" fill="rgb(239,30,13)"/><text x="306.00" y="206.50"></text></g><g><title>array_ravel (methods.c) (1 samples, 0.18%)</title><rect x="338" y="228" width="2" height="15" fill="rgb(243,199,6)"/><text x="341.00" y="238.50"></text></g><g><title>PyArray_Ravel (shape.c) (1 samples, 0.18%)</title><rect x="338" y="244" width="2" height="15" fill="rgb(206,32,35)"/><text x="341.00" y="254.50"></text></g><g><title>PyArray_Newshape (shape.c) (1 samples, 0.18%)</title><rect x="338" y="260" width="2" height="15" fill="rgb(241,122,8)"/><text x="341.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.18%)</title><rect x="338" y="276" width="2" height="15" fill="rgb(251,30,18)"/><text x="341.00" y="286.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.18%)</title><rect x="338" y="292" width="2" height="15" fill="rgb(218,185,24)"/><text x="341.00" y="302.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="338" y="308" width="2" height="15" fill="rgb(226,42,41)"/><text x="341.00" y="318.50"></text></g><g><title>array_reshape (methods.c) (1 samples, 0.18%)</title><rect x="340" y="228" width="2" height="15" fill="rgb(226,3,24)"/><text x="343.00" y="238.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.18%)</title><rect x="351" y="292" width="2" height="15" fill="rgb(245,87,28)"/><text x="354.00" y="302.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c) (2 samples, 0.37%)</title><rect x="353" y="292" width="4" height="15" fill="rgb(212,130,29)"/><text x="356.00" y="302.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (2 samples, 0.37%)</title><rect x="353" y="308" width="4" height="15" fill="rgb(218,164,43)"/><text x="356.00" y="318.50"></text></g><g><title>PyArray_MapIterNew (mapping.c) (8 samples, 1.47%)</title><rect x="342" y="244" width="17" height="15" fill="rgb(221,209,15)"/><text x="345.00" y="254.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c) (7 samples, 1.29%)</title><rect x="344" y="260" width="15" height="15" fill="rgb(239,6,40)"/><text x="347.00" y="270.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (7 samples, 1.29%)</title><rect x="344" y="276" width="15" height="15" fill="rgb(234,219,29)"/><text x="347.00" y="286.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.18%)</title><rect x="357" y="292" width="2" height="15" fill="rgb(207,204,17)"/><text x="360.00" y="302.50"></text></g><g><title>arraymapiter_dealloc (mapping.c) (1 samples, 0.18%)</title><rect x="359" y="244" width="3" height="15" fill="rgb(241,119,8)"/><text x="362.00" y="254.50"></text></g><g><title>PyArray_ResolveWritebackIfCopy (arrayobject.c) (1 samples, 0.18%)</title><rect x="359" y="260" width="3" height="15" fill="rgb(238,103,44)"/><text x="362.00" y="270.50"></text></g><g><title>PyArray_LookupSpecial_OnInstance (get_attr_string.h) (1 samples, 0.18%)</title><rect x="362" y="324" width="2" height="15" fill="rgb(231,91,28)"/><text x="365.00" y="334.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (2 samples, 0.37%)</title><rect x="362" y="292" width="4" height="15" fill="rgb(246,20,46)"/><text x="365.00" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (2 samples, 0.37%)</title><rect x="362" y="308" width="4" height="15" fill="rgb(231,125,46)"/><text x="365.00" y="318.50"></text></g><g><title>_array_find_python_scalar_type (common.c) (1 samples, 0.18%)</title><rect x="364" y="324" width="2" height="15" fill="rgb(217,142,52)"/><text x="367.00" y="334.50"></text></g><g><title>array_subscript (mapping.c) (12 samples, 2.21%)</title><rect x="342" y="228" width="26" height="15" fill="rgb(217,145,4)"/><text x="345.00" y="238.50">a..</text></g><g><title>prepare_index (mapping.c) (3 samples, 0.55%)</title><rect x="362" y="244" width="6" height="15" fill="rgb(206,212,49)"/><text x="365.00" y="254.50"></text></g><g><title>PyArray_FromAny (ctors.c) (3 samples, 0.55%)</title><rect x="362" y="260" width="6" height="15" fill="rgb(253,43,23)"/><text x="365.00" y="270.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (3 samples, 0.55%)</title><rect x="362" y="276" width="6" height="15" fill="rgb(237,130,2)"/><text x="365.00" y="286.50"></text></g><g><title>discover_dimensions (ctors.c) (1 samples, 0.18%)</title><rect x="366" y="292" width="2" height="15" fill="rgb(240,227,15)"/><text x="369.00" y="302.50"></text></g><g><title>discover_dimensions (ctors.c) (1 samples, 0.18%)</title><rect x="366" y="308" width="2" height="15" fill="rgb(243,130,39)"/><text x="369.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (17 samples, 3.13%)</title><rect x="333" y="212" width="37" height="15" fill="rgb(205,193,4)"/><text x="336.00" y="222.50">_ru..</text></g><g><title>array_tolist (methods.c) (1 samples, 0.18%)</title><rect x="368" y="228" width="2" height="15" fill="rgb(216,101,34)"/><text x="371.00" y="238.50"></text></g><g><title>0x7f517e91d120 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="379" y="292" width="2" height="15" fill="rgb(205,32,54)"/><text x="382.00" y="302.50"></text></g><g><title>__pthread_cond_signal (libpthread-2.29.so) (1 samples, 0.18%)</title><rect x="381" y="292" width="2" height="15" fill="rgb(237,181,49)"/><text x="384.00" y="302.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (4 samples, 0.74%)</title><rect x="377" y="260" width="8" height="15" fill="rgb(211,209,13)"/><text x="380.00" y="270.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (4 samples, 0.74%)</title><rect x="377" y="276" width="8" height="15" fill="rgb(234,48,26)"/><text x="380.00" y="286.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (1 samples, 0.18%)</title><rect x="383" y="292" width="2" height="15" fill="rgb(229,158,38)"/><text x="386.00" y="302.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (1 samples, 0.18%)</title><rect x="383" y="308" width="2" height="15" fill="rgb(230,162,7)"/><text x="386.00" y="318.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (2 samples, 0.37%)</title><rect x="385" y="292" width="5" height="15" fill="rgb(219,72,31)"/><text x="388.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py) (10 samples, 1.84%)</title><rect x="370" y="212" width="22" height="15" fill="rgb(240,89,23)"/><text x="373.00" y="222.50">_..</text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py) (9 samples, 1.66%)</title><rect x="372" y="228" width="20" height="15" fill="rgb(209,7,21)"/><text x="375.00" y="238.50"></text></g><g><title>array_astype (methods.c) (7 samples, 1.29%)</title><rect x="377" y="244" width="15" height="15" fill="rgb(210,217,24)"/><text x="380.00" y="254.50"></text></g><g><title>PyArray_DescrConverter (descriptor.c) (3 samples, 0.55%)</title><rect x="385" y="260" width="7" height="15" fill="rgb(253,176,54)"/><text x="388.00" y="270.50"></text></g><g><title>PyArray_DescrFromTypeObject (scalarapi.c) (3 samples, 0.55%)</title><rect x="385" y="276" width="7" height="15" fill="rgb(240,48,29)"/><text x="388.00" y="286.50"></text></g><g><title>_typenum_fromtypeobj (scalartypes.c.src) (1 samples, 0.18%)</title><rect x="390" y="292" width="2" height="15" fill="rgb(233,203,20)"/><text x="393.00" y="302.50"></text></g><g><title>get_typeobj_idx (scalartypes.c.src) (1 samples, 0.18%)</title><rect x="390" y="308" width="2" height="15" fill="rgb(244,38,37)"/><text x="393.00" y="318.50"></text></g><g><title>array_item (mapping.c) (1 samples, 0.18%)</title><rect x="392" y="276" width="2" height="15" fill="rgb(213,85,2)"/><text x="395.00" y="286.50"></text></g><g><title>PyArray_Scalar (scalarapi.c) (1 samples, 0.18%)</title><rect x="392" y="292" width="2" height="15" fill="rgb(250,104,20)"/><text x="395.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reshape.py) (2 samples, 0.37%)</title><rect x="392" y="212" width="4" height="15" fill="rgb(207,220,33)"/><text x="395.00" y="222.50"></text></g><g><title>array_reshape (methods.c) (2 samples, 0.37%)</title><rect x="392" y="228" width="4" height="15" fill="rgb(239,192,39)"/><text x="395.00" y="238.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (2 samples, 0.37%)</title><rect x="392" y="244" width="4" height="15" fill="rgb(221,103,13)"/><text x="395.00" y="254.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c) (2 samples, 0.37%)</title><rect x="392" y="260" width="4" height="15" fill="rgb(220,17,0)"/><text x="395.00" y="270.50"></text></g><g><title>gentype_dealloc (scalartypes.c.src) (1 samples, 0.18%)</title><rect x="394" y="276" width="2" height="15" fill="rgb(225,227,13)"/><text x="397.00" y="286.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.18%)</title><rect x="394" y="292" width="2" height="15" fill="rgb(205,119,26)"/><text x="397.00" y="302.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.18%)</title><rect x="394" y="308" width="2" height="15" fill="rgb(240,70,35)"/><text x="397.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_zipmap.py) (2 samples, 0.37%)</title><rect x="396" y="212" width="5" height="15" fill="rgb(235,150,43)"/><text x="399.00" y="222.50"></text></g><g><title>__init__ (mlprodict/onnxrt/ops_cpu/op_zipmap.py) (1 samples, 0.18%)</title><rect x="398" y="228" width="3" height="15" fill="rgb(247,61,27)"/><text x="401.00" y="238.50"></text></g><g><title>PyArray_IntTupleFromIntp (conversion_utils.c) (1 samples, 0.18%)</title><rect x="418" y="244" width="2" height="15" fill="rgb(240,191,42)"/><text x="421.00" y="254.50"></text></g><g><title>0x7f517e912e50 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="422" y="308" width="3" height="15" fill="rgb(211,13,19)"/><text x="425.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.37%)</title><rect x="422" y="260" width="5" height="15" fill="rgb(240,145,37)"/><text x="425.00" y="270.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.37%)</title><rect x="422" y="276" width="5" height="15" fill="rgb(223,113,42)"/><text x="425.00" y="286.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (2 samples, 0.37%)</title><rect x="422" y="292" width="5" height="15" fill="rgb(224,202,27)"/><text x="425.00" y="302.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.18%)</title><rect x="425" y="308" width="2" height="15" fill="rgb(210,141,52)"/><text x="428.00" y="318.50"></text></g><g><title>diophantine_simplify (mem_overlap.c) (1 samples, 0.18%)</title><rect x="431" y="324" width="2" height="15" fill="rgb(234,126,4)"/><text x="434.00" y="334.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.18%)</title><rect x="431" y="340" width="2" height="15" fill="rgb(239,18,11)"/><text x="434.00" y="350.50"></text></g><g><title>mul_64_64 (npy_extint128.h) (1 samples, 0.18%)</title><rect x="433" y="356" width="2" height="15" fill="rgb(236,145,11)"/><text x="436.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.55%)</title><rect x="431" y="276" width="7" height="15" fill="rgb(235,61,22)"/><text x="434.00" y="286.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (3 samples, 0.55%)</title><rect x="431" y="292" width="7" height="15" fill="rgb(236,99,42)"/><text x="434.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (3 samples, 0.55%)</title><rect x="431" y="308" width="7" height="15" fill="rgb(244,17,31)"/><text x="434.00" y="318.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (2 samples, 0.37%)</title><rect x="433" y="324" width="5" height="15" fill="rgb(237,5,42)"/><text x="436.00" y="334.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (2 samples, 0.37%)</title><rect x="433" y="340" width="5" height="15" fill="rgb(250,15,26)"/><text x="436.00" y="350.50"></text></g><g><title>sub_128 (npy_extint128.h) (1 samples, 0.18%)</title><rect x="435" y="356" width="3" height="15" fill="rgb(249,219,18)"/><text x="438.00" y="366.50"></text></g><g><title>add_128 (npy_extint128.h) (1 samples, 0.18%)</title><rect x="435" y="372" width="3" height="15" fill="rgb(229,229,27)"/><text x="438.00" y="382.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (2 samples, 0.37%)</title><rect x="438" y="276" width="4" height="15" fill="rgb(222,46,20)"/><text x="441.00" y="286.50"></text></g><g><title>parse_ufunc_keywords (ufunc_object.c) (2 samples, 0.37%)</title><rect x="438" y="292" width="4" height="15" fill="rgb(253,157,54)"/><text x="441.00" y="302.50"></text></g><g><title>0x7f517db1e5b0 (numpy/core/_multiarray_umath.cpython-37m-x86_64-linux-gnu.so) (1 samples, 0.18%)</title><rect x="440" y="308" width="2" height="15" fill="rgb(239,36,26)"/><text x="443.00" y="318.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.18%)</title><rect x="442" y="276" width="2" height="15" fill="rgb(244,147,9)"/><text x="445.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (9 samples, 1.66%)</title><rect x="427" y="260" width="19" height="15" fill="rgb(214,37,35)"/><text x="430.00" y="270.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.18%)</title><rect x="444" y="276" width="2" height="15" fill="rgb(239,53,28)"/><text x="447.00" y="286.50"></text></g><g><title>_apply_array_wrap (ufunc_object.c) (1 samples, 0.18%)</title><rect x="446" y="260" width="2" height="15" fill="rgb(214,154,12)"/><text x="449.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (18 samples, 3.31%)</title><rect x="412" y="228" width="39" height="15" fill="rgb(215,74,6)"/><text x="415.00" y="238.50">_ru..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (14 samples, 2.58%)</title><rect x="420" y="244" width="31" height="15" fill="rgb(233,114,19)"/><text x="423.00" y="254.50">uf..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.18%)</title><rect x="448" y="260" width="3" height="15" fill="rgb(230,194,6)"/><text x="451.00" y="270.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;) (6 samples, 1.10%)</title><rect x="451" y="276" width="13" height="15" fill="rgb(218,191,10)"/><text x="454.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 1.10%)</title><rect x="451" y="292" width="13" height="15" fill="rgb(214,137,42)"/><text x="454.00" y="302.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py) (6 samples, 1.10%)</title><rect x="451" y="308" width="13" height="15" fill="rgb(226,118,31)"/><text x="454.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (5 samples, 0.92%)</title><rect x="453" y="324" width="11" height="15" fill="rgb(211,211,51)"/><text x="456.00" y="334.50"></text></g><g><title>array_argmax (methods.c) (4 samples, 0.74%)</title><rect x="455" y="340" width="9" height="15" fill="rgb(242,188,25)"/><text x="458.00" y="350.50"></text></g><g><title>PyArray_ArgMax (calculation.c) (2 samples, 0.37%)</title><rect x="459" y="356" width="5" height="15" fill="rgb(216,7,35)"/><text x="462.00" y="366.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.18%)</title><rect x="462" y="372" width="2" height="15" fill="rgb(211,156,24)"/><text x="465.00" y="382.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.37%)</title><rect x="464" y="292" width="4" height="15" fill="rgb(207,208,19)"/><text x="467.00" y="302.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.37%)</title><rect x="464" y="308" width="4" height="15" fill="rgb(237,208,13)"/><text x="467.00" y="318.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (2 samples, 0.37%)</title><rect x="464" y="324" width="4" height="15" fill="rgb(246,204,23)"/><text x="467.00" y="334.50"></text></g><g><title>qsort_r (libc-2.29.so) (2 samples, 0.37%)</title><rect x="464" y="340" width="4" height="15" fill="rgb(221,71,36)"/><text x="467.00" y="350.50"></text></g><g><title>0x7f517e91cd50 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="466" y="356" width="2" height="15" fill="rgb(210,101,18)"/><text x="469.00" y="366.50"></text></g><g><title>array_astype (methods.c) (4 samples, 0.74%)</title><rect x="464" y="276" width="8" height="15" fill="rgb(254,122,18)"/><text x="467.00" y="286.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (2 samples, 0.37%)</title><rect x="468" y="292" width="4" height="15" fill="rgb(229,29,50)"/><text x="471.00" y="302.50"></text></g><g><title>PyArray_DIMS (ndarraytypes.h) (1 samples, 0.18%)</title><rect x="470" y="308" width="2" height="15" fill="rgb(242,193,45)"/><text x="473.00" y="318.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py) (16 samples, 2.95%)</title><rect x="451" y="260" width="34" height="15" fill="rgb(222,23,52)"/><text x="454.00" y="270.50">_a..</text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;) (6 samples, 1.10%)</title><rect x="472" y="276" width="13" height="15" fill="rgb(222,131,19)"/><text x="475.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (6 samples, 1.10%)</title><rect x="472" y="292" width="13" height="15" fill="rgb(254,52,30)"/><text x="475.00" y="302.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py) (5 samples, 0.92%)</title><rect x="475" y="308" width="10" height="15" fill="rgb(211,151,15)"/><text x="478.00" y="318.50"></text></g><g><title>array_reshape (methods.c) (2 samples, 0.37%)</title><rect x="481" y="324" width="4" height="15" fill="rgb(250,119,42)"/><text x="484.00" y="334.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h) (2 samples, 0.37%)</title><rect x="481" y="340" width="4" height="15" fill="rgb(232,58,0)"/><text x="484.00" y="350.50"></text></g><g><title>PyArray_Newshape (shape.c) (2 samples, 0.37%)</title><rect x="481" y="356" width="4" height="15" fill="rgb(213,217,30)"/><text x="484.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.18%)</title><rect x="483" y="372" width="2" height="15" fill="rgb(225,71,24)"/><text x="486.00" y="382.50"></text></g><g><title>npy_mul_with_overflow_intp (templ_common.h.src) (1 samples, 0.18%)</title><rect x="483" y="388" width="2" height="15" fill="rgb(212,199,25)"/><text x="486.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (17 samples, 3.13%)</title><rect x="451" y="228" width="37" height="15" fill="rgb(206,105,52)"/><text x="454.00" y="238.50">_ru..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (17 samples, 3.13%)</title><rect x="451" y="244" width="37" height="15" fill="rgb(247,221,5)"/><text x="454.00" y="254.50">_ru..</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="485" y="260" width="3" height="15" fill="rgb(212,130,42)"/><text x="488.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py) (1 samples, 0.18%)</title><rect x="488" y="228" width="2" height="15" fill="rgb(211,28,12)"/><text x="491.00" y="238.50"></text></g><g><title>array_subscript (mapping.c) (1 samples, 0.18%)</title><rect x="516" y="260" width="2" height="15" fill="rgb(206,15,33)"/><text x="519.00" y="270.50"></text></g><g><title>get_view_from_index (mapping.c) (1 samples, 0.18%)</title><rect x="516" y="276" width="2" height="15" fill="rgb(222,25,16)"/><text x="519.00" y="286.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.18%)</title><rect x="516" y="292" width="2" height="15" fill="rgb(224,9,4)"/><text x="519.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.18%)</title><rect x="516" y="308" width="2" height="15" fill="rgb(247,9,42)"/><text x="519.00" y="318.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c) (1 samples, 0.18%)</title><rect x="516" y="324" width="2" height="15" fill="rgb(234,201,50)"/><text x="519.00" y="334.50"></text></g><g><title>IsAligned (array_assign.c) (1 samples, 0.18%)</title><rect x="516" y="340" width="2" height="15" fill="rgb(238,39,22)"/><text x="519.00" y="350.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.18%)</title><rect x="522" y="324" width="3" height="15" fill="rgb(245,199,47)"/><text x="525.00" y="334.50"></text></g><g><title>PyArray_ObjectType (convert_datatype.c) (1 samples, 0.18%)</title><rect x="525" y="324" width="2" height="15" fill="rgb(236,124,36)"/><text x="528.00" y="334.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (1 samples, 0.18%)</title><rect x="525" y="340" width="2" height="15" fill="rgb(210,97,52)"/><text x="528.00" y="350.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (1 samples, 0.18%)</title><rect x="527" y="340" width="2" height="15" fill="rgb(224,41,48)"/><text x="530.00" y="350.50"></text></g><g><title>_bad_strides (cblasfuncs.c) (1 samples, 0.18%)</title><rect x="529" y="340" width="2" height="15" fill="rgb(227,24,24)"/><text x="532.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="531" y="340" width="2" height="15" fill="rgb(217,4,15)"/><text x="534.00" y="350.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.18%)</title><rect x="531" y="356" width="2" height="15" fill="rgb(248,142,23)"/><text x="534.00" y="366.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.18%)</title><rect x="531" y="372" width="2" height="15" fill="rgb(211,182,41)"/><text x="534.00" y="382.50"></text></g><g><title>gemv (cblasfuncs.c) (4 samples, 0.74%)</title><rect x="533" y="340" width="9" height="15" fill="rgb(229,72,36)"/><text x="536.00" y="350.50"></text></g><g><title>cblas_sgemv (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.74%)</title><rect x="533" y="356" width="9" height="15" fill="rgb(240,38,41)"/><text x="536.00" y="366.50"></text></g><g><title>sgemv_n_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (4 samples, 0.74%)</title><rect x="533" y="372" width="9" height="15" fill="rgb(253,164,2)"/><text x="536.00" y="382.50"></text></g><g><title>sgemv_kernel_4x4 (libopenblasp-r0-34a18dc3.3.7.so) (2 samples, 0.37%)</title><rect x="538" y="388" width="4" height="15" fill="rgb(249,13,47)"/><text x="541.00" y="398.50"></text></g><g><title>PyArray_New (ctors.c) (1 samples, 0.18%)</title><rect x="542" y="356" width="2" height="15" fill="rgb(248,86,5)"/><text x="545.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.18%)</title><rect x="542" y="372" width="2" height="15" fill="rgb(253,7,39)"/><text x="545.00" y="382.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="542" y="388" width="2" height="15" fill="rgb(215,228,29)"/><text x="545.00" y="398.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="542" y="404" width="2" height="15" fill="rgb(222,157,6)"/><text x="545.00" y="414.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c) (1 samples, 0.18%)</title><rect x="544" y="356" width="2" height="15" fill="rgb(245,64,42)"/><text x="547.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.18%)</title><rect x="544" y="372" width="2" height="15" fill="rgb(246,178,46)"/><text x="547.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.18%)</title><rect x="544" y="388" width="2" height="15" fill="rgb(240,126,23)"/><text x="547.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.18%)</title><rect x="544" y="404" width="2" height="15" fill="rgb(254,173,50)"/><text x="547.00" y="414.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="544" y="420" width="2" height="15" fill="rgb(219,176,14)"/><text x="547.00" y="430.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="544" y="436" width="2" height="15" fill="rgb(240,99,6)"/><text x="547.00" y="446.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (1 samples, 0.18%)</title><rect x="546" y="388" width="2" height="15" fill="rgb(211,69,40)"/><text x="549.00" y="398.50"></text></g><g><title>array_matrixproduct (multiarraymodule.c) (13 samples, 2.39%)</title><rect x="522" y="292" width="29" height="15" fill="rgb(223,120,21)"/><text x="525.00" y="302.50">ar..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c) (13 samples, 2.39%)</title><rect x="522" y="308" width="29" height="15" fill="rgb(242,169,19)"/><text x="525.00" y="318.50">Py..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c) (11 samples, 2.03%)</title><rect x="527" y="324" width="24" height="15" fill="rgb(250,119,46)"/><text x="530.00" y="334.50">c..</text></g><g><title>new_array_for_sum (common.c) (4 samples, 0.74%)</title><rect x="542" y="340" width="9" height="15" fill="rgb(229,43,40)"/><text x="545.00" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (2 samples, 0.37%)</title><rect x="546" y="356" width="5" height="15" fill="rgb(229,66,9)"/><text x="549.00" y="366.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (2 samples, 0.37%)</title><rect x="546" y="372" width="5" height="15" fill="rgb(221,214,28)"/><text x="549.00" y="382.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="548" y="388" width="3" height="15" fill="rgb(212,109,1)"/><text x="551.00" y="398.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py) (29 samples, 5.34%)</title><rect x="490" y="228" width="63" height="15" fill="rgb(238,160,18)"/><text x="493.00" y="238.50">_run (..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py) (29 samples, 5.34%)</title><rect x="490" y="244" width="63" height="15" fill="rgb(214,107,28)"/><text x="493.00" y="254.50">numpy_..</text></g><g><title>dot (&lt;__array_function__ internals&gt;) (16 samples, 2.95%)</title><rect x="518" y="260" width="35" height="15" fill="rgb(233,81,44)"/><text x="521.00" y="270.50">do..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (14 samples, 2.58%)</title><rect x="522" y="276" width="31" height="15" fill="rgb(248,51,3)"/><text x="525.00" y="286.50">ar..</text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (1 samples, 0.18%)</title><rect x="551" y="292" width="2" height="15" fill="rgb(211,109,17)"/><text x="554.00" y="302.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="555" y="276" width="2" height="15" fill="rgb(253,66,44)"/><text x="558.00" y="286.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="555" y="292" width="2" height="15" fill="rgb(225,165,36)"/><text x="558.00" y="302.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (1 samples, 0.18%)</title><rect x="555" y="308" width="2" height="15" fill="rgb(220,40,54)"/><text x="558.00" y="318.50"></text></g><g><title>can_cast_scalar_to (convert_datatype.c) (1 samples, 0.18%)</title><rect x="555" y="324" width="2" height="15" fill="rgb(248,57,36)"/><text x="558.00" y="334.50"></text></g><g><title>LONG_copyswap (arraytypes.c.src) (1 samples, 0.18%)</title><rect x="555" y="340" width="2" height="15" fill="rgb(214,68,10)"/><text x="558.00" y="350.50"></text></g><g><title>_basic_copy (arraytypes.c.src) (1 samples, 0.18%)</title><rect x="555" y="356" width="2" height="15" fill="rgb(242,157,53)"/><text x="558.00" y="366.50"></text></g><g><title>_ufunc_setup_flags (ufunc_object.c) (1 samples, 0.18%)</title><rect x="557" y="276" width="2" height="15" fill="rgb(253,22,53)"/><text x="560.00" y="286.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (1 samples, 0.18%)</title><rect x="559" y="292" width="2" height="15" fill="rgb(220,151,3)"/><text x="562.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.18%)</title><rect x="559" y="308" width="2" height="15" fill="rgb(231,8,23)"/><text x="562.00" y="318.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (1 samples, 0.18%)</title><rect x="559" y="324" width="2" height="15" fill="rgb(230,68,15)"/><text x="562.00" y="334.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (1 samples, 0.18%)</title><rect x="559" y="340" width="2" height="15" fill="rgb(221,177,23)"/><text x="562.00" y="350.50"></text></g><g><title>ceildiv_128_64 (npy_extint128.h) (1 samples, 0.18%)</title><rect x="559" y="356" width="2" height="15" fill="rgb(248,0,44)"/><text x="562.00" y="366.50"></text></g><g><title>divmod_128_64 (npy_extint128.h) (1 samples, 0.18%)</title><rect x="559" y="372" width="2" height="15" fill="rgb(250,154,20)"/><text x="562.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.37%)</title><rect x="559" y="276" width="5" height="15" fill="rgb(225,15,41)"/><text x="562.00" y="286.50"></text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (1 samples, 0.18%)</title><rect x="561" y="292" width="3" height="15" fill="rgb(212,194,51)"/><text x="564.00" y="302.50"></text></g><g><title>FLOAT_maximum (loops.c.src) (1 samples, 0.18%)</title><rect x="561" y="308" width="3" height="15" fill="rgb(218,78,33)"/><text x="564.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py) (6 samples, 1.10%)</title><rect x="553" y="228" width="13" height="15" fill="rgb(239,94,19)"/><text x="556.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (5 samples, 0.92%)</title><rect x="555" y="244" width="11" height="15" fill="rgb(216,91,30)"/><text x="558.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.92%)</title><rect x="555" y="260" width="11" height="15" fill="rgb(252,180,22)"/><text x="558.00" y="270.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.18%)</title><rect x="564" y="276" width="2" height="15" fill="rgb(224,191,35)"/><text x="567.00" y="286.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.18%)</title><rect x="564" y="292" width="2" height="15" fill="rgb(226,117,41)"/><text x="567.00" y="302.50"></text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (1 samples, 0.18%)</title><rect x="564" y="308" width="2" height="15" fill="rgb(217,185,46)"/><text x="567.00" y="318.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="579" y="244" width="2" height="15" fill="rgb(250,223,35)"/><text x="582.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.18%)</title><rect x="579" y="260" width="2" height="15" fill="rgb(227,8,14)"/><text x="582.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.18%)</title><rect x="579" y="276" width="2" height="15" fill="rgb(206,18,45)"/><text x="582.00" y="286.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (3 samples, 0.55%)</title><rect x="585" y="308" width="7" height="15" fill="rgb(216,211,6)"/><text x="588.00" y="318.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (3 samples, 0.55%)</title><rect x="585" y="324" width="7" height="15" fill="rgb(229,146,3)"/><text x="588.00" y="334.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (3 samples, 0.55%)</title><rect x="585" y="340" width="7" height="15" fill="rgb(215,15,18)"/><text x="588.00" y="350.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (3 samples, 0.55%)</title><rect x="585" y="356" width="7" height="15" fill="rgb(234,21,22)"/><text x="588.00" y="366.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (3 samples, 0.55%)</title><rect x="585" y="372" width="7" height="15" fill="rgb(232,6,34)"/><text x="588.00" y="382.50"></text></g><g><title>PyArray_DescrFromType (arraytypes.c.src) (1 samples, 0.18%)</title><rect x="592" y="324" width="2" height="15" fill="rgb(216,95,51)"/><text x="595.00" y="334.50"></text></g><g><title>PyArray_Return (scalarapi.c) (1 samples, 0.18%)</title><rect x="594" y="324" width="2" height="15" fill="rgb(211,74,43)"/><text x="597.00" y="334.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (1 samples, 0.18%)</title><rect x="596" y="372" width="2" height="15" fill="rgb(249,159,10)"/><text x="599.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.37%)</title><rect x="596" y="356" width="5" height="15" fill="rgb(216,51,48)"/><text x="599.00" y="366.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (1 samples, 0.18%)</title><rect x="598" y="372" width="3" height="15" fill="rgb(240,215,30)"/><text x="601.00" y="382.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (1 samples, 0.18%)</title><rect x="601" y="356" width="2" height="15" fill="rgb(220,182,27)"/><text x="604.00" y="366.50"></text></g><g><title>allocate_reduce_result (reduction.c) (1 samples, 0.18%)</title><rect x="601" y="372" width="2" height="15" fill="rgb(234,163,53)"/><text x="604.00" y="382.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.18%)</title><rect x="601" y="388" width="2" height="15" fill="rgb(214,137,19)"/><text x="604.00" y="398.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.18%)</title><rect x="603" y="404" width="2" height="15" fill="rgb(209,143,14)"/><text x="606.00" y="414.50"></text></g><g><title>PyArray_InitializeReduceResult (reduction.c) (2 samples, 0.37%)</title><rect x="603" y="356" width="4" height="15" fill="rgb(242,204,42)"/><text x="606.00" y="366.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (2 samples, 0.37%)</title><rect x="603" y="372" width="4" height="15" fill="rgb(222,56,11)"/><text x="606.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.37%)</title><rect x="603" y="388" width="4" height="15" fill="rgb(226,86,50)"/><text x="606.00" y="398.50"></text></g><g><title>copycast_isaligned (array_assign_array.c) (1 samples, 0.18%)</title><rect x="605" y="404" width="2" height="15" fill="rgb(249,114,13)"/><text x="608.00" y="414.50"></text></g><g><title>npy_uint_alignment (common.h) (1 samples, 0.18%)</title><rect x="605" y="420" width="2" height="15" fill="rgb(234,22,27)"/><text x="608.00" y="430.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (6 samples, 1.10%)</title><rect x="596" y="340" width="13" height="15" fill="rgb(243,25,39)"/><text x="599.00" y="350.50"></text></g><g><title>reduce_loop (ufunc_object.c) (1 samples, 0.18%)</title><rect x="607" y="356" width="2" height="15" fill="rgb(237,68,8)"/><text x="610.00" y="366.50"></text></g><g><title>FLOAT_maximum (loops.c.src) (1 samples, 0.18%)</title><rect x="607" y="372" width="2" height="15" fill="rgb(207,188,47)"/><text x="610.00" y="382.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.18%)</title><rect x="607" y="388" width="2" height="15" fill="rgb(207,199,7)"/><text x="610.00" y="398.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.18%)</title><rect x="607" y="404" width="2" height="15" fill="rgb(246,132,16)"/><text x="610.00" y="414.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.18%)</title><rect x="607" y="420" width="2" height="15" fill="rgb(246,34,23)"/><text x="610.00" y="430.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (7 samples, 1.29%)</title><rect x="596" y="324" width="15" height="15" fill="rgb(244,29,53)"/><text x="599.00" y="334.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (1 samples, 0.18%)</title><rect x="609" y="340" width="2" height="15" fill="rgb(210,8,25)"/><text x="612.00" y="350.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="609" y="356" width="2" height="15" fill="rgb(210,191,46)"/><text x="612.00" y="366.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="609" y="372" width="2" height="15" fill="rgb(242,23,11)"/><text x="612.00" y="382.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="609" y="388" width="2" height="15" fill="rgb(208,115,53)"/><text x="612.00" y="398.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c) (1 samples, 0.18%)</title><rect x="609" y="404" width="2" height="15" fill="rgb(222,8,52)"/><text x="612.00" y="414.50"></text></g><g><title>array_max (methods.c) (15 samples, 2.76%)</title><rect x="581" y="244" width="33" height="15" fill="rgb(247,160,46)"/><text x="584.00" y="254.50">ar..</text></g><g><title>forward_ndarray_method (methods.c) (15 samples, 2.76%)</title><rect x="581" y="260" width="33" height="15" fill="rgb(234,225,34)"/><text x="584.00" y="270.50">fo..</text></g><g><title>_amax (numpy/core/_methods.py) (14 samples, 2.58%)</title><rect x="583" y="276" width="31" height="15" fill="rgb(247,155,11)"/><text x="586.00" y="286.50">_a..</text></g><g><title>ufunc_reduce (ufunc_object.c) (14 samples, 2.58%)</title><rect x="583" y="292" width="31" height="15" fill="rgb(220,128,36)"/><text x="586.00" y="302.50">uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (10 samples, 1.84%)</title><rect x="592" y="308" width="22" height="15" fill="rgb(212,221,24)"/><text x="595.00" y="318.50">P..</text></g><g><title>_wheremask_converter (ufunc_object.c) (1 samples, 0.18%)</title><rect x="611" y="324" width="3" height="15" fill="rgb(253,187,24)"/><text x="614.00" y="334.50"></text></g><g><title>get_view_from_index (mapping.c) (1 samples, 0.18%)</title><rect x="614" y="260" width="2" height="15" fill="rgb(220,134,22)"/><text x="617.00" y="270.50"></text></g><g><title>array_subscript (mapping.c) (2 samples, 0.37%)</title><rect x="614" y="244" width="4" height="15" fill="rgb(237,112,30)"/><text x="617.00" y="254.50"></text></g><g><title>prepare_index (mapping.c) (1 samples, 0.18%)</title><rect x="616" y="260" width="2" height="15" fill="rgb(239,29,49)"/><text x="619.00" y="270.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.18%)</title><rect x="624" y="308" width="3" height="15" fill="rgb(227,138,45)"/><text x="627.00" y="318.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.18%)</title><rect x="624" y="324" width="3" height="15" fill="rgb(241,121,21)"/><text x="627.00" y="334.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.18%)</title><rect x="624" y="340" width="3" height="15" fill="rgb(243,83,14)"/><text x="627.00" y="350.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.18%)</title><rect x="624" y="356" width="3" height="15" fill="rgb(232,168,9)"/><text x="627.00" y="366.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.18%)</title><rect x="624" y="372" width="3" height="15" fill="rgb(212,190,5)"/><text x="627.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.18%)</title><rect x="627" y="356" width="2" height="15" fill="rgb(250,101,30)"/><text x="630.00" y="366.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.18%)</title><rect x="627" y="372" width="2" height="15" fill="rgb(234,13,4)"/><text x="630.00" y="382.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (1 samples, 0.18%)</title><rect x="629" y="356" width="2" height="15" fill="rgb(229,7,24)"/><text x="632.00" y="366.50"></text></g><g><title>allocate_reduce_result (reduction.c) (1 samples, 0.18%)</title><rect x="629" y="372" width="2" height="15" fill="rgb(225,113,18)"/><text x="632.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.18%)</title><rect x="629" y="388" width="2" height="15" fill="rgb(237,103,44)"/><text x="632.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.18%)</title><rect x="629" y="404" width="2" height="15" fill="rgb(205,73,50)"/><text x="632.00" y="414.50"></text></g><g><title>PyArray_FillWithScalar (convert.c) (3 samples, 0.55%)</title><rect x="631" y="356" width="7" height="15" fill="rgb(212,155,22)"/><text x="634.00" y="366.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (3 samples, 0.55%)</title><rect x="631" y="372" width="7" height="15" fill="rgb(238,192,48)"/><text x="634.00" y="382.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (3 samples, 0.55%)</title><rect x="631" y="388" width="7" height="15" fill="rgb(231,44,29)"/><text x="634.00" y="398.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c) (3 samples, 0.55%)</title><rect x="631" y="404" width="7" height="15" fill="rgb(216,137,10)"/><text x="634.00" y="414.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src) (3 samples, 0.55%)</title><rect x="631" y="420" width="7" height="15" fill="rgb(216,116,50)"/><text x="634.00" y="430.50"></text></g><g><title>array_sum (methods.c) (10 samples, 1.84%)</title><rect x="618" y="244" width="22" height="15" fill="rgb(227,37,38)"/><text x="621.00" y="254.50">a..</text></g><g><title>forward_ndarray_method (methods.c) (10 samples, 1.84%)</title><rect x="618" y="260" width="22" height="15" fill="rgb(248,75,31)"/><text x="621.00" y="270.50">f..</text></g><g><title>_sum (numpy/core/_methods.py) (8 samples, 1.47%)</title><rect x="622" y="276" width="18" height="15" fill="rgb(235,20,21)"/><text x="625.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (7 samples, 1.29%)</title><rect x="624" y="292" width="16" height="15" fill="rgb(238,118,44)"/><text x="627.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (6 samples, 1.10%)</title><rect x="627" y="308" width="13" height="15" fill="rgb(253,139,28)"/><text x="630.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (6 samples, 1.10%)</title><rect x="627" y="324" width="13" height="15" fill="rgb(216,153,36)"/><text x="630.00" y="334.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (6 samples, 1.10%)</title><rect x="627" y="340" width="13" height="15" fill="rgb(251,152,43)"/><text x="630.00" y="350.50"></text></g><g><title>_check_ufunc_fperr (extobj.c) (1 samples, 0.18%)</title><rect x="638" y="356" width="2" height="15" fill="rgb(217,148,39)"/><text x="641.00" y="366.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (2 samples, 0.37%)</title><rect x="640" y="260" width="4" height="15" fill="rgb(241,224,42)"/><text x="643.00" y="270.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (2 samples, 0.37%)</title><rect x="640" y="276" width="4" height="15" fill="rgb(214,55,26)"/><text x="643.00" y="286.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c) (2 samples, 0.37%)</title><rect x="640" y="292" width="4" height="15" fill="rgb(229,148,34)"/><text x="643.00" y="302.50"></text></g><g><title>unicode_hash (python3.7) (1 samples, 0.18%)</title><rect x="642" y="308" width="2" height="15" fill="rgb(250,176,19)"/><text x="645.00" y="318.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (1 samples, 0.18%)</title><rect x="646" y="292" width="2" height="15" fill="rgb(233,12,39)"/><text x="649.00" y="302.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (1 samples, 0.18%)</title><rect x="646" y="308" width="2" height="15" fill="rgb(221,62,16)"/><text x="649.00" y="318.50"></text></g><g><title>solve_diophantine (mem_overlap.c) (1 samples, 0.18%)</title><rect x="646" y="324" width="2" height="15" fill="rgb(207,53,20)"/><text x="649.00" y="334.50"></text></g><g><title>diophantine_dfs (mem_overlap.c) (1 samples, 0.18%)</title><rect x="646" y="340" width="2" height="15" fill="rgb(223,0,28)"/><text x="649.00" y="350.50"></text></g><g><title>to_128 (npy_extint128.h) (1 samples, 0.18%)</title><rect x="646" y="356" width="2" height="15" fill="rgb(235,207,45)"/><text x="649.00" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (2 samples, 0.37%)</title><rect x="646" y="276" width="5" height="15" fill="rgb(216,56,41)"/><text x="649.00" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c) (1 samples, 0.18%)</title><rect x="648" y="292" width="3" height="15" fill="rgb(239,128,28)"/><text x="651.00" y="302.50"></text></g><g><title>NpyIter_GetInnerLoopSizePtr (nditer_api.c) (1 samples, 0.18%)</title><rect x="648" y="308" width="3" height="15" fill="rgb(218,194,11)"/><text x="651.00" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (4 samples, 0.74%)</title><rect x="644" y="260" width="9" height="15" fill="rgb(227,219,16)"/><text x="647.00" y="270.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (1 samples, 0.18%)</title><rect x="651" y="276" width="2" height="15" fill="rgb(207,223,52)"/><text x="654.00" y="286.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py) (237 samples, 43.65%)</title><rect x="140" y="164" width="515" height="15" fill="rgb(238,68,30)"/><text x="143.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py) (222 samples, 40.88%)</title><rect x="172" y="180" width="483" height="15" fill="rgb(208,116,10)"/><text x="175.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (155 samples, 28.55%)</title><rect x="318" y="196" width="337" height="15" fill="rgb(243,56,26)"/><text x="321.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py) (117 samples, 21.55%)</title><rect x="401" y="212" width="254" height="15" fill="rgb(229,58,51)"/><text x="404.00" y="222.50">run (mlprodict/onnxrt/ops_cpu/_op..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py) (41 samples, 7.55%)</title><rect x="566" y="228" width="89" height="15" fill="rgb(238,207,36)"/><text x="569.00" y="238.50">_run (mlpr..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (7 samples, 1.29%)</title><rect x="640" y="244" width="15" height="15" fill="rgb(231,182,49)"/><text x="643.00" y="254.50"></text></g><g><title>_find_array_wrap (ufunc_object.c) (1 samples, 0.18%)</title><rect x="653" y="260" width="2" height="15" fill="rgb(250,100,31)"/><text x="656.00" y="270.50"></text></g><g><title>profile_pyrt (bench_MLPClassifier_default_m_cl_1_4_12_float_.py) (241 samples, 44.38%)</title><rect x="133" y="68" width="524" height="15" fill="rgb(210,203,5)"/><text x="136.00" y="78.50">profile_pyrt (bench_MLPClassifier_default_m_cl_1_4_12_float_.py)</text></g><g><title>setup_profile (bench_MLPClassifier_default_m_cl_1_4_12_float_.py) (241 samples, 44.38%)</title><rect x="133" y="84" width="524" height="15" fill="rgb(230,197,5)"/><text x="136.00" y="94.50">setup_profile (bench_MLPClassifier_default_m_cl_1_4_12_float_.py)</text></g><g><title>profile (bench_MLPClassifier_default_m_cl_1_4_12_float_.py) (241 samples, 44.38%)</title><rect x="133" y="100" width="524" height="15" fill="rgb(243,134,41)"/><text x="136.00" y="110.50">profile (bench_MLPClassifier_default_m_cl_1_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (241 samples, 44.38%)</title><rect x="133" y="116" width="524" height="15" fill="rgb(244,128,44)"/><text x="136.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (240 samples, 44.20%)</title><rect x="136" y="132" width="521" height="15" fill="rgb(208,142,38)"/><text x="139.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (240 samples, 44.20%)</title><rect x="136" y="148" width="521" height="15" fill="rgb(214,215,32)"/><text x="139.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="655" y="164" width="2" height="15" fill="rgb(245,113,11)"/><text x="658.00" y="174.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c) (1 samples, 0.18%)</title><rect x="655" y="180" width="2" height="15" fill="rgb(236,154,35)"/><text x="658.00" y="190.50"></text></g><g><title>0x7f517e91d120 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="683" y="196" width="2" height="15" fill="rgb(231,225,35)"/><text x="686.00" y="206.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="685" y="196" width="3" height="15" fill="rgb(234,196,45)"/><text x="688.00" y="206.50"></text></g><g><title>__new__ (numpy/core/getlimits.py) (3 samples, 0.55%)</title><rect x="701" y="212" width="6" height="15" fill="rgb(228,198,1)"/><text x="704.00" y="222.50"></text></g><g><title>arraydescr_new (descriptor.c) (1 samples, 0.18%)</title><rect x="705" y="228" width="2" height="15" fill="rgb(245,214,46)"/><text x="708.00" y="238.50"></text></g><g><title>0x7f517e9daff0 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="720" y="260" width="2" height="15" fill="rgb(215,221,32)"/><text x="723.00" y="270.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c) (2 samples, 0.37%)</title><rect x="727" y="372" width="4" height="15" fill="rgb(216,2,35)"/><text x="730.00" y="382.50"></text></g><g><title>PyArray_CastToType (convert_datatype.c) (1 samples, 0.18%)</title><rect x="729" y="388" width="2" height="15" fill="rgb(251,107,4)"/><text x="732.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.18%)</title><rect x="729" y="404" width="2" height="15" fill="rgb(249,185,10)"/><text x="732.00" y="414.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c) (1 samples, 0.18%)</title><rect x="729" y="420" width="2" height="15" fill="rgb(246,184,28)"/><text x="732.00" y="430.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c) (1 samples, 0.18%)</title><rect x="729" y="436" width="2" height="15" fill="rgb(216,85,39)"/><text x="732.00" y="446.50"></text></g><g><title>PyArray_PrepareOneRawArrayIter (dtype_transfer.c) (1 samples, 0.18%)</title><rect x="729" y="452" width="2" height="15" fill="rgb(211,85,7)"/><text x="732.00" y="462.50"></text></g><g><title>npyiter_flip_negative_strides (nditer_constr.c) (1 samples, 0.18%)</title><rect x="731" y="420" width="2" height="15" fill="rgb(240,58,45)"/><text x="734.00" y="430.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.37%)</title><rect x="731" y="404" width="4" height="15" fill="rgb(230,58,35)"/><text x="734.00" y="414.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.18%)</title><rect x="733" y="420" width="2" height="15" fill="rgb(250,113,20)"/><text x="736.00" y="430.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c) (1 samples, 0.18%)</title><rect x="733" y="436" width="2" height="15" fill="rgb(227,155,24)"/><text x="736.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.55%)</title><rect x="731" y="372" width="6" height="15" fill="rgb(216,109,22)"/><text x="734.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.55%)</title><rect x="731" y="388" width="6" height="15" fill="rgb(211,78,2)"/><text x="734.00" y="398.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (1 samples, 0.18%)</title><rect x="735" y="404" width="2" height="15" fill="rgb(250,65,40)"/><text x="738.00" y="414.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.18%)</title><rect x="735" y="420" width="2" height="15" fill="rgb(234,138,8)"/><text x="738.00" y="430.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.18%)</title><rect x="737" y="388" width="3" height="15" fill="rgb(227,51,54)"/><text x="740.00" y="398.50"></text></g><g><title>PyArray_FromScalar (scalarapi.c) (1 samples, 0.18%)</title><rect x="737" y="404" width="3" height="15" fill="rgb(235,71,37)"/><text x="740.00" y="414.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (2 samples, 0.37%)</title><rect x="737" y="372" width="5" height="15" fill="rgb(226,212,37)"/><text x="740.00" y="382.50"></text></g><g><title>PyArray_FromArray (ctors.c) (1 samples, 0.18%)</title><rect x="740" y="388" width="2" height="15" fill="rgb(242,20,23)"/><text x="743.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (8 samples, 1.47%)</title><rect x="727" y="356" width="17" height="15" fill="rgb(215,201,1)"/><text x="730.00" y="366.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.18%)</title><rect x="742" y="372" width="2" height="15" fill="rgb(246,37,53)"/><text x="745.00" y="382.50"></text></g><g><title>0x7f517e91d1d6 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="742" y="388" width="2" height="15" fill="rgb(216,177,50)"/><text x="745.00" y="398.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (9 samples, 1.66%)</title><rect x="727" y="324" width="19" height="15" fill="rgb(239,190,3)"/><text x="730.00" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (9 samples, 1.66%)</title><rect x="727" y="340" width="19" height="15" fill="rgb(251,50,0)"/><text x="730.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="744" y="356" width="2" height="15" fill="rgb(217,130,8)"/><text x="747.00" y="366.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.18%)</title><rect x="744" y="372" width="2" height="15" fill="rgb(244,106,14)"/><text x="747.00" y="382.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.18%)</title><rect x="744" y="388" width="2" height="15" fill="rgb(213,97,4)"/><text x="747.00" y="398.50"></text></g><g><title>_clip_dep_is_byte_swapped (numpy/core/_methods.py) (1 samples, 0.18%)</title><rect x="746" y="324" width="2" height="15" fill="rgb(226,61,22)"/><text x="749.00" y="334.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (5 samples, 0.92%)</title><rect x="764" y="340" width="10" height="15" fill="rgb(211,79,6)"/><text x="767.00" y="350.50"></text></g><g><title>0x7f517e912e60 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="772" y="356" width="2" height="15" fill="rgb(224,81,49)"/><text x="775.00" y="366.50"></text></g><g><title>_ndim_dispatcher (numpy/core/fromnumeric.py) (1 samples, 0.18%)</title><rect x="779" y="356" width="2" height="15" fill="rgb(226,56,54)"/><text x="782.00" y="366.50"></text></g><g><title>0x7f517e912730 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="796" y="420" width="2" height="15" fill="rgb(215,210,23)"/><text x="799.00" y="430.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;) (12 samples, 2.21%)</title><rect x="774" y="340" width="27" height="15" fill="rgb(233,68,5)"/><text x="777.00" y="350.50">n..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (9 samples, 1.66%)</title><rect x="781" y="356" width="20" height="15" fill="rgb(246,47,40)"/><text x="784.00" y="366.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py) (9 samples, 1.66%)</title><rect x="781" y="372" width="20" height="15" fill="rgb(246,100,44)"/><text x="784.00" y="382.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (3 samples, 0.55%)</title><rect x="794" y="388" width="7" height="15" fill="rgb(226,185,13)"/><text x="797.00" y="398.50"></text></g><g><title>_array_fromobject (multiarraymodule.c) (2 samples, 0.37%)</title><rect x="796" y="404" width="5" height="15" fill="rgb(223,120,19)"/><text x="799.00" y="414.50"></text></g><g><title>PyArray_CheckFromAny (ctors.c) (1 samples, 0.18%)</title><rect x="798" y="420" width="3" height="15" fill="rgb(222,120,46)"/><text x="801.00" y="430.50"></text></g><g><title>PyArray_FromAny (ctors.c) (1 samples, 0.18%)</title><rect x="798" y="436" width="3" height="15" fill="rgb(218,147,23)"/><text x="801.00" y="446.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.18%)</title><rect x="798" y="452" width="3" height="15" fill="rgb(233,108,50)"/><text x="801.00" y="462.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="798" y="468" width="3" height="15" fill="rgb(238,58,48)"/><text x="801.00" y="478.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="798" y="484" width="3" height="15" fill="rgb(247,28,22)"/><text x="801.00" y="494.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.18%)</title><rect x="801" y="356" width="2" height="15" fill="rgb(228,69,23)"/><text x="804.00" y="366.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.18%)</title><rect x="801" y="372" width="2" height="15" fill="rgb(221,102,44)"/><text x="804.00" y="382.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (1 samples, 0.18%)</title><rect x="801" y="388" width="2" height="15" fill="rgb(224,190,16)"/><text x="804.00" y="398.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (1 samples, 0.18%)</title><rect x="801" y="404" width="2" height="15" fill="rgb(222,52,13)"/><text x="804.00" y="414.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (1 samples, 0.18%)</title><rect x="801" y="420" width="2" height="15" fill="rgb(213,229,46)"/><text x="804.00" y="430.50"></text></g><g><title>clip (numpy/core/fromnumeric.py) (45 samples, 8.29%)</title><rect x="707" y="244" width="98" height="15" fill="rgb(222,201,27)"/><text x="710.00" y="254.50">clip (numpy..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (38 samples, 7.00%)</title><rect x="722" y="260" width="83" height="15" fill="rgb(220,17,38)"/><text x="725.00" y="270.50">_wrapfunc..</text></g><g><title>array_clip (methods.c) (38 samples, 7.00%)</title><rect x="722" y="276" width="83" height="15" fill="rgb(248,57,20)"/><text x="725.00" y="286.50">array_cli..</text></g><g><title>forward_ndarray_method (methods.c) (38 samples, 7.00%)</title><rect x="722" y="292" width="83" height="15" fill="rgb(243,226,19)"/><text x="725.00" y="302.50">forward_n..</text></g><g><title>_clip (numpy/core/_methods.py) (37 samples, 6.81%)</title><rect x="724" y="308" width="81" height="15" fill="rgb(243,197,3)"/><text x="727.00" y="318.50">_clip (nu..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (26 samples, 4.79%)</title><rect x="748" y="324" width="57" height="15" fill="rgb(253,0,40)"/><text x="751.00" y="334.50">_clip_..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (2 samples, 0.37%)</title><rect x="801" y="340" width="4" height="15" fill="rgb(248,102,3)"/><text x="804.00" y="350.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="803" y="356" width="2" height="15" fill="rgb(213,141,25)"/><text x="806.00" y="366.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.18%)</title><rect x="803" y="372" width="2" height="15" fill="rgb(232,158,25)"/><text x="806.00" y="382.50"></text></g><g><title>relu (sklearn/neural_network/_base.py) (57 samples, 10.50%)</title><rect x="688" y="196" width="123" height="15" fill="rgb(208,191,28)"/><text x="691.00" y="206.50">relu (sklearn/n..</text></g><g><title>clip (&lt;__array_function__ internals&gt;) (48 samples, 8.84%)</title><rect x="707" y="212" width="104" height="15" fill="rgb(211,204,11)"/><text x="710.00" y="222.50">clip (&lt;__arr..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (48 samples, 8.84%)</title><rect x="707" y="228" width="104" height="15" fill="rgb(241,204,2)"/><text x="710.00" y="238.50">array_implem..</text></g><g><title>get_implementing_args_and_methods (arrayfunction_override.c) (3 samples, 0.55%)</title><rect x="805" y="244" width="6" height="15" fill="rgb(213,20,19)"/><text x="808.00" y="254.50"></text></g><g><title>get_array_function (arrayfunction_override.c) (3 samples, 0.55%)</title><rect x="805" y="260" width="6" height="15" fill="rgb(209,152,49)"/><text x="808.00" y="270.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (3 samples, 0.55%)</title><rect x="805" y="276" width="6" height="15" fill="rgb(227,71,50)"/><text x="808.00" y="286.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (3 samples, 0.55%)</title><rect x="805" y="292" width="6" height="15" fill="rgb(215,9,51)"/><text x="808.00" y="302.50"></text></g><g><title>dgemv_n_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.18%)</title><rect x="816" y="212" width="2" height="15" fill="rgb(239,146,53)"/><text x="819.00" y="222.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.18%)</title><rect x="818" y="212" width="2" height="15" fill="rgb(251,191,20)"/><text x="821.00" y="222.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.18%)</title><rect x="831" y="308" width="2" height="15" fill="rgb(216,117,41)"/><text x="834.00" y="318.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c) (1 samples, 0.18%)</title><rect x="833" y="324" width="2" height="15" fill="rgb(215,77,21)"/><text x="836.00" y="334.50"></text></g><g><title>qsort_r (libc-2.29.so) (1 samples, 0.18%)</title><rect x="833" y="340" width="2" height="15" fill="rgb(238,27,47)"/><text x="836.00" y="350.50"></text></g><g><title>0x7f517e8b4a19 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="833" y="356" width="2" height="15" fill="rgb(233,0,5)"/><text x="836.00" y="366.50"></text></g><g><title>_npy_stride_sort_item_comparator (shape.c) (1 samples, 0.18%)</title><rect x="833" y="372" width="2" height="15" fill="rgb(212,167,7)"/><text x="836.00" y="382.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (5 samples, 0.92%)</title><rect x="827" y="276" width="10" height="15" fill="rgb(234,106,22)"/><text x="830.00" y="286.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (3 samples, 0.55%)</title><rect x="831" y="292" width="6" height="15" fill="rgb(244,187,36)"/><text x="834.00" y="302.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (2 samples, 0.37%)</title><rect x="833" y="308" width="4" height="15" fill="rgb(246,216,54)"/><text x="836.00" y="318.50"></text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src) (1 samples, 0.18%)</title><rect x="835" y="324" width="2" height="15" fill="rgb(226,62,6)"/><text x="838.00" y="334.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (6 samples, 1.10%)</title><rect x="827" y="260" width="13" height="15" fill="rgb(250,42,39)"/><text x="830.00" y="270.50"></text></g><g><title>npyiter_check_casting (nditer_constr.c) (1 samples, 0.18%)</title><rect x="837" y="276" width="3" height="15" fill="rgb(230,113,41)"/><text x="840.00" y="286.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c) (1 samples, 0.18%)</title><rect x="837" y="292" width="3" height="15" fill="rgb(215,16,23)"/><text x="840.00" y="302.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c) (3 samples, 0.55%)</title><rect x="840" y="260" width="6" height="15" fill="rgb(248,15,5)"/><text x="843.00" y="270.50"></text></g><g><title>array_dealloc (arrayobject.c) (2 samples, 0.37%)</title><rect x="842" y="276" width="4" height="15" fill="rgb(239,196,33)"/><text x="845.00" y="286.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.18%)</title><rect x="844" y="292" width="2" height="15" fill="rgb(212,40,22)"/><text x="847.00" y="302.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.18%)</title><rect x="844" y="308" width="2" height="15" fill="rgb(231,34,53)"/><text x="847.00" y="318.50"></text></g><g><title>NpyIter_EnableExternalLoop (nditer_api.c) (1 samples, 0.18%)</title><rect x="846" y="260" width="2" height="15" fill="rgb(230,166,44)"/><text x="849.00" y="270.50"></text></g><g><title>NpyIter_Reset (nditer_api.c) (1 samples, 0.18%)</title><rect x="846" y="276" width="2" height="15" fill="rgb(236,182,49)"/><text x="849.00" y="286.50"></text></g><g><title>npyiter_goto_iterindex (nditer_api.c) (1 samples, 0.18%)</title><rect x="846" y="292" width="2" height="15" fill="rgb(241,6,15)"/><text x="849.00" y="302.50"></text></g><g><title>NpyIter_RemoveAxis (nditer_api.c) (2 samples, 0.37%)</title><rect x="848" y="260" width="5" height="15" fill="rgb(224,7,7)"/><text x="851.00" y="270.50"></text></g><g><title>npyiter_goto_iterindex (nditer_api.c) (1 samples, 0.18%)</title><rect x="850" y="276" width="3" height="15" fill="rgb(211,90,22)"/><text x="853.00" y="286.50"></text></g><g><title>NpyIter_RemoveMultiIndex (nditer_api.c) (1 samples, 0.18%)</title><rect x="853" y="260" width="2" height="15" fill="rgb(205,105,54)"/><text x="856.00" y="270.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c) (1 samples, 0.18%)</title><rect x="853" y="276" width="2" height="15" fill="rgb(224,98,23)"/><text x="856.00" y="286.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (2 samples, 0.37%)</title><rect x="855" y="260" width="4" height="15" fill="rgb(226,84,9)"/><text x="858.00" y="270.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (2 samples, 0.37%)</title><rect x="855" y="276" width="4" height="15" fill="rgb(245,101,14)"/><text x="858.00" y="286.50"></text></g><g><title>_get_coredim_sizes (ufunc_object.c) (1 samples, 0.18%)</title><rect x="859" y="260" width="2" height="15" fill="rgb(254,132,47)"/><text x="862.00" y="270.50"></text></g><g><title>PyArray_DIM (ndarraytypes.h) (1 samples, 0.18%)</title><rect x="859" y="276" width="2" height="15" fill="rgb(238,203,4)"/><text x="862.00" y="286.50"></text></g><g><title>_initialize_variable_parts (ufunc_object.c) (1 samples, 0.18%)</title><rect x="861" y="260" width="3" height="15" fill="rgb(250,21,38)"/><text x="864.00" y="270.50"></text></g><g><title>0x7f517e91cd97 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="861" y="276" width="3" height="15" fill="rgb(210,24,8)"/><text x="864.00" y="286.50"></text></g><g><title>free (libc-2.29.so) (1 samples, 0.18%)</title><rect x="864" y="260" width="2" height="15" fill="rgb(243,74,14)"/><text x="867.00" y="270.50"></text></g><g><title>malloc (libc-2.29.so) (2 samples, 0.37%)</title><rect x="866" y="260" width="4" height="15" fill="rgb(236,76,28)"/><text x="869.00" y="270.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (28 samples, 5.16%)</title><rect x="811" y="196" width="61" height="15" fill="rgb(225,118,6)"/><text x="814.00" y="206.50">safe_s..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (24 samples, 4.42%)</title><rect x="820" y="212" width="52" height="15" fill="rgb(205,98,21)"/><text x="823.00" y="222.50">ufunc..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (24 samples, 4.42%)</title><rect x="820" y="228" width="52" height="15" fill="rgb(219,123,8)"/><text x="823.00" y="238.50">PyUFu..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (24 samples, 4.42%)</title><rect x="820" y="244" width="52" height="15" fill="rgb(223,74,43)"/><text x="823.00" y="254.50">PyUFu..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.18%)</title><rect x="870" y="260" width="2" height="15" fill="rgb(249,204,12)"/><text x="873.00" y="270.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.18%)</title><rect x="870" y="276" width="2" height="15" fill="rgb(216,158,50)"/><text x="873.00" y="286.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.18%)</title><rect x="870" y="292" width="2" height="15" fill="rgb(214,84,39)"/><text x="873.00" y="302.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="885" y="212" width="2" height="15" fill="rgb(253,179,3)"/><text x="888.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="885" y="228" width="2" height="15" fill="rgb(238,76,1)"/><text x="888.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.18%)</title><rect x="885" y="244" width="2" height="15" fill="rgb(230,18,44)"/><text x="888.00" y="254.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (4 samples, 0.74%)</title><rect x="887" y="276" width="9" height="15" fill="rgb(251,42,20)"/><text x="890.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (4 samples, 0.74%)</title><rect x="887" y="292" width="9" height="15" fill="rgb(230,149,36)"/><text x="890.00" y="302.50"></text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (3 samples, 0.55%)</title><rect x="890" y="308" width="6" height="15" fill="rgb(207,173,49)"/><text x="893.00" y="318.50"></text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (3 samples, 0.55%)</title><rect x="890" y="324" width="6" height="15" fill="rgb(235,81,51)"/><text x="893.00" y="334.50"></text></g><g><title>maybe_get_attr (get_attr_string.h) (3 samples, 0.55%)</title><rect x="890" y="340" width="6" height="15" fill="rgb(244,225,18)"/><text x="893.00" y="350.50"></text></g><g><title>0x7f517e912e6d (libc-2.29.so) (1 samples, 0.18%)</title><rect x="894" y="356" width="2" height="15" fill="rgb(214,194,14)"/><text x="897.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.18%)</title><rect x="898" y="324" width="2" height="15" fill="rgb(207,194,11)"/><text x="901.00" y="334.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="900" y="388" width="3" height="15" fill="rgb(234,75,18)"/><text x="903.00" y="398.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="900" y="404" width="3" height="15" fill="rgb(216,126,53)"/><text x="903.00" y="414.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (2 samples, 0.37%)</title><rect x="900" y="324" width="5" height="15" fill="rgb(246,209,4)"/><text x="903.00" y="334.50"></text></g><g><title>allocate_reduce_result (reduction.c) (2 samples, 0.37%)</title><rect x="900" y="340" width="5" height="15" fill="rgb(224,204,28)"/><text x="903.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (2 samples, 0.37%)</title><rect x="900" y="356" width="5" height="15" fill="rgb(225,128,45)"/><text x="903.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (2 samples, 0.37%)</title><rect x="900" y="372" width="5" height="15" fill="rgb(222,108,27)"/><text x="903.00" y="382.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c) (1 samples, 0.18%)</title><rect x="903" y="388" width="2" height="15" fill="rgb(232,44,14)"/><text x="906.00" y="398.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="903" y="404" width="2" height="15" fill="rgb(249,76,14)"/><text x="906.00" y="414.50"></text></g><g><title>PyArray_InitializeReduceResult (reduction.c) (1 samples, 0.18%)</title><rect x="905" y="324" width="2" height="15" fill="rgb(210,68,26)"/><text x="908.00" y="334.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (1 samples, 0.18%)</title><rect x="905" y="340" width="2" height="15" fill="rgb(248,33,38)"/><text x="908.00" y="350.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c) (1 samples, 0.18%)</title><rect x="905" y="356" width="2" height="15" fill="rgb(246,194,16)"/><text x="908.00" y="366.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (1 samples, 0.18%)</title><rect x="905" y="372" width="2" height="15" fill="rgb(252,151,44)"/><text x="908.00" y="382.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (5 samples, 0.92%)</title><rect x="898" y="308" width="11" height="15" fill="rgb(206,145,51)"/><text x="901.00" y="318.50"></text></g><g><title>array_dealloc (arrayobject.c) (1 samples, 0.18%)</title><rect x="907" y="324" width="2" height="15" fill="rgb(245,154,8)"/><text x="910.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c) (1 samples, 0.18%)</title><rect x="907" y="340" width="2" height="15" fill="rgb(226,130,27)"/><text x="910.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c) (1 samples, 0.18%)</title><rect x="907" y="356" width="2" height="15" fill="rgb(241,125,11)"/><text x="910.00" y="366.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (7 samples, 1.29%)</title><rect x="898" y="292" width="16" height="15" fill="rgb(247,84,18)"/><text x="901.00" y="302.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c) (2 samples, 0.37%)</title><rect x="909" y="308" width="5" height="15" fill="rgb(225,224,45)"/><text x="912.00" y="318.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="911" y="324" width="3" height="15" fill="rgb(235,9,6)"/><text x="914.00" y="334.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="911" y="340" width="3" height="15" fill="rgb(254,170,31)"/><text x="914.00" y="350.50"></text></g><g><title>should_use_min_scalar (convert_datatype.c) (1 samples, 0.18%)</title><rect x="911" y="356" width="3" height="15" fill="rgb(217,191,19)"/><text x="914.00" y="366.50"></text></g><g><title>array_max (methods.c) (13 samples, 2.39%)</title><rect x="887" y="212" width="29" height="15" fill="rgb(241,189,8)"/><text x="890.00" y="222.50">ar..</text></g><g><title>forward_ndarray_method (methods.c) (13 samples, 2.39%)</title><rect x="887" y="228" width="29" height="15" fill="rgb(246,75,17)"/><text x="890.00" y="238.50">fo..</text></g><g><title>_amax (numpy/core/_methods.py) (13 samples, 2.39%)</title><rect x="887" y="244" width="29" height="15" fill="rgb(241,99,20)"/><text x="890.00" y="254.50">_a..</text></g><g><title>ufunc_reduce (ufunc_object.c) (13 samples, 2.39%)</title><rect x="887" y="260" width="29" height="15" fill="rgb(220,186,21)"/><text x="890.00" y="270.50">uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (9 samples, 1.66%)</title><rect x="896" y="276" width="20" height="15" fill="rgb(212,72,34)"/><text x="899.00" y="286.50"></text></g><g><title>_apply_array_wrap (ufunc_object.c) (1 samples, 0.18%)</title><rect x="914" y="292" width="2" height="15" fill="rgb(220,38,12)"/><text x="917.00" y="302.50"></text></g><g><title>array_subscript (mapping.c) (1 samples, 0.18%)</title><rect x="916" y="212" width="2" height="15" fill="rgb(224,13,11)"/><text x="919.00" y="222.50"></text></g><g><title>get_view_from_index (mapping.c) (1 samples, 0.18%)</title><rect x="916" y="228" width="2" height="15" fill="rgb(251,49,14)"/><text x="919.00" y="238.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c) (1 samples, 0.18%)</title><rect x="916" y="244" width="2" height="15" fill="rgb(240,93,20)"/><text x="919.00" y="254.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="918" y="260" width="2" height="15" fill="rgb(238,202,14)"/><text x="921.00" y="270.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="918" y="276" width="2" height="15" fill="rgb(250,207,21)"/><text x="921.00" y="286.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.18%)</title><rect x="918" y="292" width="2" height="15" fill="rgb(221,164,29)"/><text x="921.00" y="302.50"></text></g><g><title>DOUBLE_subtract (loops.c.src) (1 samples, 0.18%)</title><rect x="920" y="292" width="2" height="15" fill="rgb(221,121,17)"/><text x="923.00" y="302.50"></text></g><g><title>run_binary_simd_subtract_DOUBLE (simd.inc.src) (1 samples, 0.18%)</title><rect x="920" y="308" width="2" height="15" fill="rgb(230,222,39)"/><text x="923.00" y="318.50"></text></g><g><title>sse2_binary_scalar2_subtract_DOUBLE (simd.inc.src) (1 samples, 0.18%)</title><rect x="920" y="324" width="2" height="15" fill="rgb(217,120,18)"/><text x="923.00" y="334.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (1 samples, 0.18%)</title><rect x="922" y="292" width="2" height="15" fill="rgb(216,178,33)"/><text x="925.00" y="302.50"></text></g><g><title>npyiter_check_global_flags (nditer_constr.c) (1 samples, 0.18%)</title><rect x="922" y="308" width="2" height="15" fill="rgb(223,171,24)"/><text x="925.00" y="318.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 0.55%)</title><rect x="920" y="260" width="7" height="15" fill="rgb(217,188,13)"/><text x="923.00" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.55%)</title><rect x="920" y="276" width="7" height="15" fill="rgb(239,207,12)"/><text x="923.00" y="286.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src) (1 samples, 0.18%)</title><rect x="924" y="292" width="3" height="15" fill="rgb(223,77,4)"/><text x="927.00" y="302.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (5 samples, 0.92%)</title><rect x="918" y="244" width="11" height="15" fill="rgb(227,96,14)"/><text x="921.00" y="254.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src) (1 samples, 0.18%)</title><rect x="927" y="260" width="2" height="15" fill="rgb(227,71,46)"/><text x="930.00" y="270.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src) (1 samples, 0.18%)</title><rect x="927" y="276" width="2" height="15" fill="rgb(227,149,37)"/><text x="930.00" y="286.50"></text></g><g><title>fetestexcept (libm-2.29.so) (1 samples, 0.18%)</title><rect x="927" y="292" width="2" height="15" fill="rgb(245,173,25)"/><text x="930.00" y="302.50"></text></g><g><title>array_subtract (number.c) (6 samples, 1.10%)</title><rect x="918" y="212" width="13" height="15" fill="rgb(213,22,21)"/><text x="921.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 1.10%)</title><rect x="918" y="228" width="13" height="15" fill="rgb(245,218,17)"/><text x="921.00" y="238.50"></text></g><g><title>_find_array_wrap (ufunc_object.c) (1 samples, 0.18%)</title><rect x="929" y="244" width="2" height="15" fill="rgb(243,136,46)"/><text x="932.00" y="254.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (1 samples, 0.18%)</title><rect x="933" y="276" width="2" height="15" fill="rgb(227,18,8)"/><text x="936.00" y="286.50"></text></g><g><title>get_array_ufunc_overrides (override.c) (1 samples, 0.18%)</title><rect x="933" y="292" width="2" height="15" fill="rgb(230,218,23)"/><text x="936.00" y="302.50"></text></g><g><title>0x7f517e912730 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="935" y="292" width="2" height="15" fill="rgb(233,137,54)"/><text x="938.00" y="302.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c) (1 samples, 0.18%)</title><rect x="937" y="292" width="3" height="15" fill="rgb(230,148,17)"/><text x="940.00" y="302.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c) (1 samples, 0.18%)</title><rect x="937" y="308" width="3" height="15" fill="rgb(215,23,30)"/><text x="940.00" y="318.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c) (1 samples, 0.18%)</title><rect x="937" y="324" width="3" height="15" fill="rgb(229,75,38)"/><text x="940.00" y="334.50"></text></g><g><title>array_sum (methods.c) (5 samples, 0.92%)</title><rect x="931" y="212" width="11" height="15" fill="rgb(217,85,54)"/><text x="934.00" y="222.50"></text></g><g><title>forward_ndarray_method (methods.c) (5 samples, 0.92%)</title><rect x="931" y="228" width="11" height="15" fill="rgb(233,135,39)"/><text x="934.00" y="238.50"></text></g><g><title>_sum (numpy/core/_methods.py) (4 samples, 0.74%)</title><rect x="933" y="244" width="9" height="15" fill="rgb(212,92,51)"/><text x="936.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c) (4 samples, 0.74%)</title><rect x="933" y="260" width="9" height="15" fill="rgb(206,184,50)"/><text x="936.00" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (3 samples, 0.55%)</title><rect x="935" y="276" width="7" height="15" fill="rgb(243,92,17)"/><text x="938.00" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (1 samples, 0.18%)</title><rect x="940" y="292" width="2" height="15" fill="rgb(217,119,41)"/><text x="943.00" y="302.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (1 samples, 0.18%)</title><rect x="940" y="308" width="2" height="15" fill="rgb(222,199,50)"/><text x="943.00" y="318.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (1 samples, 0.18%)</title><rect x="940" y="324" width="2" height="15" fill="rgb(208,53,36)"/><text x="943.00" y="334.50"></text></g><g><title>allocate_reduce_result (reduction.c) (1 samples, 0.18%)</title><rect x="940" y="340" width="2" height="15" fill="rgb(233,99,46)"/><text x="943.00" y="350.50"></text></g><g><title>PyArray_CreateSortedStridePerm (shape.c) (1 samples, 0.18%)</title><rect x="940" y="356" width="2" height="15" fill="rgb(236,71,42)"/><text x="943.00" y="366.50"></text></g><g><title>PyUFunc_DefaultTypeResolver (ufunc_type_resolution.c) (1 samples, 0.18%)</title><rect x="942" y="244" width="2" height="15" fill="rgb(251,57,49)"/><text x="945.00" y="254.50"></text></g><g><title>_ufunc_setup_flags (ufunc_object.c) (2 samples, 0.37%)</title><rect x="944" y="244" width="4" height="15" fill="rgb(244,30,24)"/><text x="947.00" y="254.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.18%)</title><rect x="948" y="292" width="2" height="15" fill="rgb(234,86,2)"/><text x="951.00" y="302.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (2 samples, 0.37%)</title><rect x="948" y="276" width="5" height="15" fill="rgb(223,218,53)"/><text x="951.00" y="286.50"></text></g><g><title>npyiter_find_best_axis_ordering (nditer_constr.c) (1 samples, 0.18%)</title><rect x="950" y="292" width="3" height="15" fill="rgb(238,80,16)"/><text x="953.00" y="302.50"></text></g><g><title>iterator_loop (ufunc_object.c) (3 samples, 0.55%)</title><rect x="948" y="260" width="7" height="15" fill="rgb(238,6,24)"/><text x="951.00" y="270.50"></text></g><g><title>sse2_binary_scalar2_divide_DOUBLE (simd.inc.src) (1 samples, 0.18%)</title><rect x="953" y="276" width="2" height="15" fill="rgb(228,59,4)"/><text x="956.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (5 samples, 0.92%)</title><rect x="948" y="244" width="11" height="15" fill="rgb(247,229,11)"/><text x="951.00" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (2 samples, 0.37%)</title><rect x="955" y="260" width="4" height="15" fill="rgb(225,0,44)"/><text x="958.00" y="270.50"></text></g><g><title>PyUFunc_d_d (loops.c.src) (2 samples, 0.37%)</title><rect x="955" y="276" width="4" height="15" fill="rgb(248,11,20)"/><text x="958.00" y="286.50"></text></g><g><title>exp (libm-2.29.so) (2 samples, 0.37%)</title><rect x="955" y="292" width="4" height="15" fill="rgb(221,127,46)"/><text x="958.00" y="302.50"></text></g><g><title>0x7f517eaceba5 (libm-2.29.so) (1 samples, 0.18%)</title><rect x="957" y="308" width="2" height="15" fill="rgb(226,37,39)"/><text x="960.00" y="318.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c) (3 samples, 0.55%)</title><rect x="959" y="244" width="7" height="15" fill="rgb(232,31,5)"/><text x="962.00" y="254.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c) (2 samples, 0.37%)</title><rect x="966" y="244" width="4" height="15" fill="rgb(213,213,12)"/><text x="969.00" y="254.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py) (47 samples, 8.66%)</title><rect x="872" y="196" width="102" height="15" fill="rgb(229,33,17)"/><text x="875.00" y="206.50">softmax (skl..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (15 samples, 2.76%)</title><rect x="942" y="212" width="32" height="15" fill="rgb(236,210,16)"/><text x="945.00" y="222.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (15 samples, 2.76%)</title><rect x="942" y="228" width="32" height="15" fill="rgb(246,54,48)"/><text x="945.00" y="238.50">Py..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (2 samples, 0.37%)</title><rect x="970" y="244" width="4" height="15" fill="rgb(248,100,44)"/><text x="973.00" y="254.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (1 samples, 0.18%)</title><rect x="979" y="244" width="2" height="15" fill="rgb(243,153,14)"/><text x="982.00" y="254.50"></text></g><g><title>promote_types (convert_datatype.c) (1 samples, 0.18%)</title><rect x="979" y="260" width="2" height="15" fill="rgb(235,44,2)"/><text x="982.00" y="270.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c) (1 samples, 0.18%)</title><rect x="979" y="276" width="2" height="15" fill="rgb(216,105,23)"/><text x="982.00" y="286.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (3 samples, 0.55%)</title><rect x="979" y="228" width="6" height="15" fill="rgb(211,220,10)"/><text x="982.00" y="238.50"></text></g><g><title>PyUFunc_ValidateCasting (ufunc_type_resolution.c) (2 samples, 0.37%)</title><rect x="981" y="244" width="4" height="15" fill="rgb(250,62,5)"/><text x="984.00" y="254.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c) (1 samples, 0.18%)</title><rect x="983" y="260" width="2" height="15" fill="rgb(206,38,43)"/><text x="986.00" y="270.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (1 samples, 0.18%)</title><rect x="987" y="276" width="3" height="15" fill="rgb(238,121,43)"/><text x="990.00" y="286.50"></text></g><g><title>npyiter_fill_axisdata (nditer_constr.c) (3 samples, 0.55%)</title><rect x="990" y="276" width="6" height="15" fill="rgb(253,12,29)"/><text x="993.00" y="286.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (10 samples, 1.84%)</title><rect x="977" y="212" width="21" height="15" fill="rgb(252,155,46)"/><text x="980.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (6 samples, 1.10%)</title><rect x="985" y="228" width="13" height="15" fill="rgb(249,199,20)"/><text x="988.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (6 samples, 1.10%)</title><rect x="985" y="244" width="13" height="15" fill="rgb(251,147,46)"/><text x="988.00" y="254.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (6 samples, 1.10%)</title><rect x="985" y="260" width="13" height="15" fill="rgb(214,191,13)"/><text x="988.00" y="270.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c) (1 samples, 0.18%)</title><rect x="996" y="276" width="2" height="15" fill="rgb(246,209,46)"/><text x="999.00" y="286.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py) (154 samples, 28.36%)</title><rect x="666" y="180" width="334" height="15" fill="rgb(254,110,26)"/><text x="669.00" y="190.50">_forward_pass (sklearn/neural_network/_multil..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (12 samples, 2.21%)</title><rect x="974" y="196" width="26" height="15" fill="rgb(243,181,38)"/><text x="977.00" y="206.50">u..</text></g><g><title>make_full_arg_tuple (ufunc_object.c) (1 samples, 0.18%)</title><rect x="998" y="212" width="2" height="15" fill="rgb(227,151,0)"/><text x="1001.00" y="222.50"></text></g><g><title>0x7f517e91d124 (libc-2.29.so) (1 samples, 0.18%)</title><rect x="998" y="228" width="2" height="15" fill="rgb(251,41,2)"/><text x="1001.00" y="238.50"></text></g><g><title>array_empty (multiarraymodule.c) (2 samples, 0.37%)</title><rect x="1000" y="180" width="5" height="15" fill="rgb(217,49,49)"/><text x="1003.00" y="190.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c) (2 samples, 0.37%)</title><rect x="1000" y="196" width="5" height="15" fill="rgb(226,25,48)"/><text x="1003.00" y="206.50"></text></g><g><title>__enter__ (warnings.py) (2 samples, 0.37%)</title><rect x="1048" y="196" width="5" height="15" fill="rgb(238,185,23)"/><text x="1051.00" y="206.50"></text></g><g><title>__exit__ (warnings.py) (1 samples, 0.18%)</title><rect x="1053" y="196" width="2" height="15" fill="rgb(244,80,19)"/><text x="1056.00" y="206.50"></text></g><g><title>__init__ (warnings.py) (3 samples, 0.55%)</title><rect x="1055" y="196" width="6" height="15" fill="rgb(253,68,30)"/><text x="1058.00" y="206.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="1070" y="212" width="6" height="15" fill="rgb(228,165,5)"/><text x="1073.00" y="222.50"></text></g><g><title>parent (&lt;frozen importlib._bootstrap&gt;) (3 samples, 0.55%)</title><rect x="1076" y="212" width="7" height="15" fill="rgb(229,118,6)"/><text x="1079.00" y="222.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py) (11 samples, 2.03%)</title><rect x="1061" y="196" width="24" height="15" fill="rgb(236,176,4)"/><text x="1064.00" y="206.50">_..</text></g><g><title>unicode_dealloc (python3.7) (1 samples, 0.18%)</title><rect x="1083" y="212" width="2" height="15" fill="rgb(215,5,23)"/><text x="1086.00" y="222.50"></text></g><g><title>_ensure_no_complex_data (sklearn/utils/validation.py) (3 samples, 0.55%)</title><rect x="1085" y="196" width="7" height="15" fill="rgb(245,144,25)"/><text x="1088.00" y="206.50"></text></g><g><title>_num_samples (sklearn/utils/validation.py) (7 samples, 1.29%)</title><rect x="1092" y="196" width="15" height="15" fill="rgb(236,162,19)"/><text x="1095.00" y="206.50"></text></g><g><title>__instancecheck__ (abc.py) (3 samples, 0.55%)</title><rect x="1100" y="212" width="7" height="15" fill="rgb(238,46,25)"/><text x="1103.00" y="222.50"></text></g><g><title>__subclasscheck__ (abc.py) (2 samples, 0.37%)</title><rect x="1103" y="228" width="4" height="15" fill="rgb(214,65,42)"/><text x="1106.00" y="238.50"></text></g><g><title>asarray (numpy/core/_asarray.py) (1 samples, 0.18%)</title><rect x="1107" y="196" width="2" height="15" fill="rgb(235,219,52)"/><text x="1110.00" y="206.50"></text></g><g><title>isspmatrix (scipy/sparse/base.py) (1 samples, 0.18%)</title><rect x="1109" y="196" width="2" height="15" fill="rgb(210,30,42)"/><text x="1112.00" y="206.50"></text></g><g><title>issubdtype (numpy/core/numerictypes.py) (1 samples, 0.18%)</title><rect x="1111" y="196" width="2" height="15" fill="rgb(237,176,0)"/><text x="1114.00" y="206.50"></text></g><g><title>issubclass_ (numpy/core/numerictypes.py) (1 samples, 0.18%)</title><rect x="1111" y="212" width="2" height="15" fill="rgb(246,189,38)"/><text x="1114.00" y="222.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py) (211 samples, 38.86%)</title><rect x="661" y="164" width="459" height="15" fill="rgb(231,189,43)"/><text x="664.00" y="174.50">_predict (sklearn/neural_network/_multilayer_perceptron.py)</text></g><g><title>check_array (sklearn/utils/validation.py) (53 samples, 9.76%)</title><rect x="1005" y="180" width="115" height="15" fill="rgb(205,57,25)"/><text x="1008.00" y="190.50">check_array (s..</text></g><g><title>simplefilter (warnings.py) (3 samples, 0.55%)</title><rect x="1113" y="196" width="7" height="15" fill="rgb(213,39,48)"/><text x="1116.00" y="206.50"></text></g><g><title>_add_filter (warnings.py) (3 samples, 0.55%)</title><rect x="1113" y="212" width="7" height="15" fill="rgb(250,65,6)"/><text x="1116.00" y="222.50"></text></g><g><title>unicode_endswith (python3.7) (4 samples, 0.74%)</title><rect x="1153" y="196" width="8" height="15" fill="rgb(249,128,27)"/><text x="1156.00" y="206.50"></text></g><g><title>profile_skl (bench_MLPClassifier_default_m_cl_1_4_12_float_.py) (240 samples, 44.20%)</title><rect x="657" y="68" width="522" height="15" fill="rgb(223,40,4)"/><text x="660.00" y="78.50">profile_skl (bench_MLPClassifier_default_m_cl_1_4_12_float_.py)</text></g><g><title>setup_profile (bench_MLPClassifier_default_m_cl_1_4_12_float_.py) (240 samples, 44.20%)</title><rect x="657" y="84" width="522" height="15" fill="rgb(212,179,54)"/><text x="660.00" y="94.50">setup_profile (bench_MLPClassifier_default_m_cl_1_4_12_float_.py)</text></g><g><title>profile (bench_MLPClassifier_default_m_cl_1_4_12_float_.py) (240 samples, 44.20%)</title><rect x="657" y="100" width="522" height="15" fill="rgb(229,109,48)"/><text x="660.00" y="110.50">profile (bench_MLPClassifier_default_m_cl_1_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (240 samples, 44.20%)</title><rect x="657" y="116" width="522" height="15" fill="rgb(243,156,13)"/><text x="660.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (240 samples, 44.20%)</title><rect x="657" y="132" width="522" height="15" fill="rgb(209,114,40)"/><text x="660.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py) (239 samples, 44.01%)</title><rect x="659" y="148" width="520" height="15" fill="rgb(254,197,47)"/><text x="662.00" y="158.50">predict_proba (sklearn/neural_network/_multilayer_perceptron.py)</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (27 samples, 4.97%)</title><rect x="1120" y="164" width="59" height="15" fill="rgb(247,99,36)"/><text x="1123.00" y="174.50">check_..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (26 samples, 4.79%)</title><rect x="1122" y="180" width="57" height="15" fill="rgb(219,188,28)"/><text x="1125.00" y="190.50">&lt;listc..</text></g><g><title>unicode_startswith (python3.7) (8 samples, 1.47%)</title><rect x="1161" y="196" width="18" height="15" fill="rgb(240,152,12)"/><text x="1164.00" y="206.50"></text></g><g><title>_get_dataset (mlprodict/asv_benchmark/common_asv_skl.py) (1 samples, 0.18%)</title><rect x="1179" y="116" width="2" height="15" fill="rgb(239,13,25)"/><text x="1182.00" y="126.50"></text></g><g><title>_modify_dimension (mlprodict/onnxrt/validate/validate_problems.py) (1 samples, 0.18%)</title><rect x="1179" y="132" width="2" height="15" fill="rgb(231,206,15)"/><text x="1182.00" y="142.50"></text></g><g><title>array_subscript (mapping.c) (1 samples, 0.18%)</title><rect x="1179" y="148" width="2" height="15" fill="rgb(240,213,50)"/><text x="1182.00" y="158.50"></text></g><g><title>prepare_index (mapping.c) (1 samples, 0.18%)</title><rect x="1179" y="164" width="2" height="15" fill="rgb(236,140,15)"/><text x="1182.00" y="174.50"></text></g><g><title>unpack_indices (mapping.c) (1 samples, 0.18%)</title><rect x="1179" y="180" width="2" height="15" fill="rgb(229,145,50)"/><text x="1182.00" y="190.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (1 samples, 0.18%)</title><rect x="1181" y="196" width="2" height="15" fill="rgb(245,145,17)"/><text x="1184.00" y="206.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (1 samples, 0.18%)</title><rect x="1181" y="212" width="2" height="15" fill="rgb(237,227,45)"/><text x="1184.00" y="222.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py) (1 samples, 0.18%)</title><rect x="1183" y="196" width="2" height="15" fill="rgb(227,204,22)"/><text x="1186.00" y="206.50"></text></g><g><title>_backprop (sklearn/neural_network/_multilayer_perceptron.py) (3 samples, 0.55%)</title><rect x="1181" y="164" width="6" height="15" fill="rgb(210,13,5)"/><text x="1184.00" y="174.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py) (3 samples, 0.55%)</title><rect x="1181" y="180" width="6" height="15" fill="rgb(237,106,17)"/><text x="1184.00" y="190.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.18%)</title><rect x="1185" y="196" width="2" height="15" fill="rgb(220,67,11)"/><text x="1188.00" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.18%)</title><rect x="1185" y="212" width="2" height="15" fill="rgb(219,84,9)"/><text x="1188.00" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.18%)</title><rect x="1185" y="228" width="2" height="15" fill="rgb(219,128,23)"/><text x="1188.00" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (1 samples, 0.18%)</title><rect x="1185" y="244" width="2" height="15" fill="rgb(208,201,50)"/><text x="1188.00" y="254.50"></text></g><g><title>DOUBLE_add (loops.c.src) (1 samples, 0.18%)</title><rect x="1185" y="260" width="2" height="15" fill="rgb(222,131,2)"/><text x="1188.00" y="270.50"></text></g><g><title>run_binary_simd_add_DOUBLE (simd.inc.src) (1 samples, 0.18%)</title><rect x="1185" y="276" width="2" height="15" fill="rgb(226,158,2)"/><text x="1188.00" y="286.50"></text></g><g><title>abs_ptrdiff (simd.inc.src) (1 samples, 0.18%)</title><rect x="1185" y="292" width="2" height="15" fill="rgb(246,118,32)"/><text x="1188.00" y="302.50"></text></g><g><title>all (543 samples, 100%)</title><rect x="10" y="36" width="1179" height="15" fill="rgb(235,6,25)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_m_cl_1_4_12_float_.py) (543 samples, 100.00%)</title><rect x="10" y="52" width="1179" height="15" fill="rgb(217,213,26)"/><text x="13.00" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_m_cl_1_4_12_float_.py)</text></g><g><title>start (bench_MLPClassifier_default_m_cl_1_4_12_float_.py) (5 samples, 0.92%)</title><rect x="1179" y="68" width="10" height="15" fill="rgb(225,172,36)"/><text x="1182.00" y="78.50"></text></g><g><title>setup_cache (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_m_cl.py) (5 samples, 0.92%)</title><rect x="1179" y="84" width="10" height="15" fill="rgb(250,181,15)"/><text x="1182.00" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (5 samples, 0.92%)</title><rect x="1179" y="100" width="10" height="15" fill="rgb(244,63,31)"/><text x="1182.00" y="110.50"></text></g><g><title>fit (sklearn/neural_network/_multilayer_perceptron.py) (4 samples, 0.74%)</title><rect x="1181" y="116" width="8" height="15" fill="rgb(254,182,7)"/><text x="1184.00" y="126.50"></text></g><g><title>_fit (sklearn/neural_network/_multilayer_perceptron.py) (4 samples, 0.74%)</title><rect x="1181" y="132" width="8" height="15" fill="rgb(245,120,52)"/><text x="1184.00" y="142.50"></text></g><g><title>_fit_stochastic (sklearn/neural_network/_multilayer_perceptron.py) (4 samples, 0.74%)</title><rect x="1181" y="148" width="8" height="15" fill="rgb(228,94,15)"/><text x="1184.00" y="158.50"></text></g><g><title>update_params (sklearn/neural_network/_stochastic_optimizers.py) (1 samples, 0.18%)</title><rect x="1187" y="164" width="2" height="15" fill="rgb(215,38,30)"/><text x="1190.00" y="174.50"></text></g><g><title>_get_updates (sklearn/neural_network/_stochastic_optimizers.py) (1 samples, 0.18%)</title><rect x="1187" y="180" width="2" height="15" fill="rgb(240,173,48)"/><text x="1190.00" y="190.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/neural_network/_stochastic_optimizers.py) (1 samples, 0.18%)</title><rect x="1187" y="196" width="2" height="15" fill="rgb(232,2,34)"/><text x="1190.00" y="206.50"></text></g><g><title>double_multiply (scalarmath.c.src) (1 samples, 0.18%)</title><rect x="1187" y="212" width="2" height="15" fill="rgb(233,106,18)"/><text x="1190.00" y="222.50"></text></g><g><title>array_multiply (number.c) (1 samples, 0.18%)</title><rect x="1187" y="228" width="2" height="15" fill="rgb(216,112,34)"/><text x="1190.00" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (1 samples, 0.18%)</title><rect x="1187" y="244" width="2" height="15" fill="rgb(209,107,29)"/><text x="1190.00" y="254.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (1 samples, 0.18%)</title><rect x="1187" y="260" width="2" height="15" fill="rgb(205,129,11)"/><text x="1190.00" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (1 samples, 0.18%)</title><rect x="1187" y="276" width="2" height="15" fill="rgb(226,220,12)"/><text x="1190.00" y="286.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c) (1 samples, 0.18%)</title><rect x="1187" y="292" width="2" height="15" fill="rgb(210,224,39)"/><text x="1190.00" y="302.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c) (1 samples, 0.18%)</title><rect x="1187" y="308" width="2" height="15" fill="rgb(208,116,29)"/><text x="1190.00" y="318.50"></text></g><g><title>npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="1187" y="324" width="2" height="15" fill="rgb(235,185,1)"/><text x="1190.00" y="334.50"></text></g><g><title>_npy_alloc_cache (alloc.c) (1 samples, 0.18%)</title><rect x="1187" y="340" width="2" height="15" fill="rgb(248,51,5)"/><text x="1190.00" y="350.50"></text></g><g><title>PyDataMem_NEW (alloc.c) (1 samples, 0.18%)</title><rect x="1187" y="356" width="2" height="15" fill="rgb(246,126,14)"/><text x="1190.00" y="366.50"></text></g><g><title>malloc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="1187" y="372" width="2" height="15" fill="rgb(249,165,37)"/><text x="1190.00" y="382.50"></text></g><g><title>0x7f517e8fe1dc (libc-2.29.so) (1 samples, 0.18%)</title><rect x="1187" y="388" width="2" height="15" fill="rgb(220,214,8)"/><text x="1190.00" y="398.50"></text></g></g></svg>