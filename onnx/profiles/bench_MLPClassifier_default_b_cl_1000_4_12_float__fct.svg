<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.39%)</title><rect x="0.0000%" y="68" width="1.3857%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.39%)</title><rect x="0.0000%" y="84" width="1.3857%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.39%)</title><rect x="0.0000%" y="100" width="1.3857%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (12 samples, 1.39%)</title><rect x="0.0000%" y="116" width="1.3857%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.39%)</title><rect x="0.0000%" y="132" width="1.3857%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py) (12 samples, 1.39%)</title><rect x="0.0000%" y="148" width="1.3857%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.39%)</title><rect x="0.0000%" y="164" width="1.3857%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.39%)</title><rect x="0.0000%" y="180" width="1.3857%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="190.50"></text></g><g><title>mkl_blas_avx_sgemm_kernel_0 (onnxruntime/capi/libmklml_intel.so) (15 samples, 1.73%)</title><rect x="6.1201%" y="212" width="1.7321%" height="15" fill="rgb(218,30,26)"/><text x="6.3701%" y="222.50"></text></g><g><title>dnnl_primitive_execute (onnxruntime/capi/libdnnl.so.1) (40 samples, 4.62%)</title><rect x="9.4688%" y="372" width="4.6189%" height="15" fill="rgb(220,122,19)"/><text x="9.7188%" y="382.50">dnnl_..</text></g><g><title>dnnl_primitive::execute (onnxruntime/capi/libdnnl.so.1) (39 samples, 4.50%)</title><rect x="9.5843%" y="388" width="4.5035%" height="15" fill="rgb(250,228,42)"/><text x="9.8343%" y="398.50">dnnl_..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute (onnxruntime/capi/libdnnl.so.1) (39 samples, 4.50%)</title><rect x="9.5843%" y="404" width="4.5035%" height="15" fill="rgb(240,193,28)"/><text x="9.8343%" y="414.50">dnnl:..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute_forward (onnxruntime/capi/libdnnl.so.1) (39 samples, 4.50%)</title><rect x="9.5843%" y="420" width="4.5035%" height="15" fill="rgb(216,20,37)"/><text x="9.8343%" y="430.50">dnnl:..</text></g><g><title>GOMP_parallel@GOMP_4.0 (libiomp5.so) (39 samples, 4.50%)</title><rect x="9.5843%" y="436" width="4.5035%" height="15" fill="rgb(206,188,39)"/><text x="9.8343%" y="446.50">GOMP_..</text></g><g><title>__kmp_join_call (libiomp5.so) (38 samples, 4.39%)</title><rect x="9.6998%" y="452" width="4.3880%" height="15" fill="rgb(217,207,13)"/><text x="9.9498%" y="462.50">__kmp..</text></g><g><title>__kmp_internal_join (libiomp5.so) (38 samples, 4.39%)</title><rect x="9.6998%" y="468" width="4.3880%" height="15" fill="rgb(231,73,38)"/><text x="9.9498%" y="478.50">__kmp..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (38 samples, 4.39%)</title><rect x="9.6998%" y="484" width="4.3880%" height="15" fill="rgb(225,20,46)"/><text x="9.9498%" y="494.50">__kmp..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (38 samples, 4.39%)</title><rect x="9.6998%" y="500" width="4.3880%" height="15" fill="rgb(210,31,41)"/><text x="9.9498%" y="510.50">_INTE..</text></g><g><title>sched_yield (libc-2.29.so) (11 samples, 1.27%)</title><rect x="12.8176%" y="516" width="1.2702%" height="15" fill="rgb(221,200,47)"/><text x="13.0676%" y="526.50"></text></g><g><title>onnxruntime::FunctionKernel::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (44 samples, 5.08%)</title><rect x="9.2379%" y="324" width="5.0808%" height="15" fill="rgb(226,26,5)"/><text x="9.4879%" y="334.50">onnxru..</text></g><g><title>std::_Function_handler&lt;onnxruntime::common::Status(void*, OrtApi const*, OrtKernelContext*), onnxruntime::DNNLExecutionProvider::Compile(std::vector&lt;onnxruntime::Node*, std::allocator&lt;onnxruntime::Node*&gt; &gt; const&amp;, std::vector&lt;onnxruntime::NodeComputeInfo, std::allocator&lt;onnxruntime::NodeComputeInfo&gt; &gt;&amp;)::{lambda(void*, OrtApi const*, OrtKernelContext*)#3}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (44 samples, 5.08%)</title><rect x="9.2379%" y="340" width="5.0808%" height="15" fill="rgb(249,33,26)"/><text x="9.4879%" y="350.50">std::_..</text></g><g><title>onnxruntime::ort_dnnl::DnnlFuncKernel&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (44 samples, 5.08%)</title><rect x="9.2379%" y="356" width="5.0808%" height="15" fill="rgb(235,183,28)"/><text x="9.4879%" y="366.50">onnxru..</text></g><g><title>mkl_blas_avx_sgemm_pst (onnxruntime/capi/libmklml_intel.so) (33 samples, 3.81%)</title><rect x="15.7044%" y="452" width="3.8106%" height="15" fill="rgb(221,5,38)"/><text x="15.9544%" y="462.50">mkl_..</text></g><g><title>mkl_blas_xsgemm (onnxruntime/capi/libmklml_intel.so) (36 samples, 4.16%)</title><rect x="15.7044%" y="420" width="4.1570%" height="15" fill="rgb(247,18,42)"/><text x="15.9544%" y="430.50">mkl_b..</text></g><g><title>mkl_blas_avx_xsgemm (onnxruntime/capi/libmklml_intel.so) (36 samples, 4.16%)</title><rect x="15.7044%" y="436" width="4.1570%" height="15" fill="rgb(241,131,45)"/><text x="15.9544%" y="446.50">mkl_b..</text></g><g><title>onnxruntime::Gemm&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (49 samples, 5.66%)</title><rect x="14.3187%" y="324" width="5.6582%" height="15" fill="rgb(249,31,29)"/><text x="14.5687%" y="334.50">onnxrun..</text></g><g><title>onnxruntime::math::Gemm&lt;float, onnxruntime::concurrency::ThreadPool&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (38 samples, 4.39%)</title><rect x="15.5889%" y="340" width="4.3880%" height="15" fill="rgb(225,111,53)"/><text x="15.8389%" y="350.50">onnxr..</text></g><g><title>cblas_sgemm (onnxruntime/capi/libmklml_intel.so) (38 samples, 4.39%)</title><rect x="15.5889%" y="356" width="4.3880%" height="15" fill="rgb(238,160,17)"/><text x="15.8389%" y="366.50">cblas..</text></g><g><title>sgemm_ (onnxruntime/capi/libmklml_intel.so) (38 samples, 4.39%)</title><rect x="15.5889%" y="372" width="4.3880%" height="15" fill="rgb(214,148,48)"/><text x="15.8389%" y="382.50">sgemm..</text></g><g><title>mkl_blas_sgemm (onnxruntime/capi/libmklml_intel.so) (38 samples, 4.39%)</title><rect x="15.5889%" y="388" width="4.3880%" height="15" fill="rgb(232,36,49)"/><text x="15.8389%" y="398.50">mkl_b..</text></g><g><title>mkl_blas_sgemm_omp_driver_v1 (onnxruntime/capi/libmklml_intel.so) (37 samples, 4.27%)</title><rect x="15.7044%" y="404" width="4.2725%" height="15" fill="rgb(209,103,24)"/><text x="15.9544%" y="414.50">mkl_b..</text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.04%)</title><rect x="22.0554%" y="372" width="1.0393%" height="15" fill="rgb(229,88,8)"/><text x="22.3054%" y="382.50"></text></g><g><title>Eigen::ThreadPoolDevice::parallelFor (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.04%)</title><rect x="22.0554%" y="388" width="1.0393%" height="15" fill="rgb(213,181,19)"/><text x="22.3054%" y="398.50"></text></g><g><title>_ZNSt17_Function_handlerIFvllEZN5Eigen8internal14TensorExecutorIKNS1_14TensorAssignOpINS1_9TensorMapINS1_6TensorIfLi2ELi1ElEELi16ENS1_11MakePointerEEEKNS1_19TensorCwiseBinaryOpINS2_17scalar_product_opIffEEKS9_KNS1_20TensorBroadcastingOpIKNS1_9IndexListINS1_10type2indexILl1EEEJiEEEKNS1_17TensorReshapingOpIKNSF_IiJSH_EEEKNS1_18TensorForcedEvalOpIKNS1_18TensorCwiseUnaryOpINS2_17scalar_inverse_opIfEEKNS1_17TensorReductionOpINS2_10SumReducerIfEEKNSF_ISH_JEEESD_S8_EEEEEEEEEEEEEENS1_16ThreadPoolDeviceELb1ELb1EE3runERS19_RKS1A_EUlllE_E9_M_invokeERKSt9_Any_dataOlS1K_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.04%)</title><rect x="22.0554%" y="404" width="1.0393%" height="15" fill="rgb(254,191,54)"/><text x="22.3054%" y="414.50"></text></g><g><title>_ZNK5Eigen15TensorEvaluatorIKNS_19TensorCwiseBinaryOpINS_8internal17scalar_product_opIffEEKNS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEEKNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNSC_IiJSE_EEEKNS_18TensorForcedEvalOpIKNS_18TensorCwiseUnaryOpINS2_17scalar_inverse_opIfEEKNS_17TensorReductionOpINS2_10SumReducerIfEEKNSC_ISE_JEEESA_S8_EEEEEEEEEEEENS_16ThreadPoolDeviceEE5blockEPNS2_11TensorBlockIflLi2ELi1EEE (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.04%)</title><rect x="22.0554%" y="420" width="1.0393%" height="15" fill="rgb(241,83,37)"/><text x="22.3054%" y="430.50"></text></g><g><title>_ZN5Eigen8internal14TensorExecutorIKNS_14TensorAssignOpINS_9TensorMapINS_6TensorIfLi2ELi1ElEELi16ENS_11MakePointerEEEKNS_19TensorCwiseBinaryOpINS0_17scalar_product_opIffEEKS7_KNS_20TensorBroadcastingOpIKNS_9IndexListINS_10type2indexILl1EEEJiEEEKNS_17TensorReshapingOpIKNSD_IiJSF_EEEKNS_18TensorForcedEvalOpIKNS_18TensorCwiseUnaryOpINS0_17scalar_inverse_opIfEEKNS_17TensorReductionOpINS0_10SumReducerIfEEKNSD_ISF_JEEESB_S6_EEEEEEEEEEEEEENS_16ThreadPoolDeviceELb1ELb1EE3runERS17_RKS18_ (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 1.50%)</title><rect x="21.9400%" y="356" width="1.5012%" height="15" fill="rgb(233,36,39)"/><text x="22.1900%" y="366.50"></text></g><g><title>onnxruntime::ComputeSoftMax&lt;Eigen::ThreadPoolDevice, float&gt; [clone .constprop.656] (onnxruntime/capi/onnxruntime_pybind11_state.so) (31 samples, 3.58%)</title><rect x="19.9769%" y="340" width="3.5797%" height="15" fill="rgb(226,3,54)"/><text x="20.2269%" y="350.50">onnx..</text></g><g><title>onnxruntime::Softmax&lt;float, false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (32 samples, 3.70%)</title><rect x="19.9769%" y="324" width="3.6952%" height="15" fill="rgb(245,192,40)"/><text x="20.2269%" y="334.50">onnx..</text></g><g><title>operator new (libstdc++.so.6.0.28) (34 samples, 3.93%)</title><rect x="24.4804%" y="340" width="3.9261%" height="15" fill="rgb(238,167,29)"/><text x="24.7304%" y="350.50">oper..</text></g><g><title>malloc (libc-2.29.so) (33 samples, 3.81%)</title><rect x="24.5958%" y="356" width="3.8106%" height="15" fill="rgb(232,182,51)"/><text x="24.8458%" y="366.50">mall..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (186 samples, 21.48%)</title><rect x="8.1986%" y="292" width="21.4781%" height="15" fill="rgb(231,60,39)"/><text x="8.4486%" y="302.50">onnxruntime::utils::ExecuteGraphIm..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (186 samples, 21.48%)</title><rect x="8.1986%" y="308" width="21.4781%" height="15" fill="rgb(208,69,12)"/><text x="8.4486%" y="318.50">onnxruntime::SequentialExecutor::E..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (52 samples, 6.00%)</title><rect x="23.6721%" y="324" width="6.0046%" height="15" fill="rgb(235,93,37)"/><text x="23.9221%" y="334.50">onnxrunt..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (188 samples, 21.71%)</title><rect x="8.1986%" y="244" width="21.7090%" height="15" fill="rgb(213,116,39)"/><text x="8.4486%" y="254.50">onnxruntime::InferenceSession::Run..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (188 samples, 21.71%)</title><rect x="8.1986%" y="260" width="21.7090%" height="15" fill="rgb(222,207,29)"/><text x="8.4486%" y="270.50">onnxruntime::InferenceSession::Run..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (188 samples, 21.71%)</title><rect x="8.1986%" y="276" width="21.7090%" height="15" fill="rgb(206,96,30)"/><text x="8.4486%" y="286.50">onnxruntime::utils::ExecuteGraph (..</text></g><g><title>0x7f5de0656d17 (libc-2.29.so) (11 samples, 1.27%)</title><rect x="30.3695%" y="260" width="1.2702%" height="15" fill="rgb(218,138,4)"/><text x="30.6195%" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 2.31%)</title><rect x="29.9076%" y="244" width="2.3095%" height="15" fill="rgb(250,191,14)"/><text x="30.1576%" y="254.50">o..</text></g><g><title>onnxruntime::python::AddNonTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (59 samples, 6.81%)</title><rect x="32.2171%" y="244" width="6.8129%" height="15" fill="rgb(239,60,40)"/><text x="32.4671%" y="254.50">onnxrunti..</text></g><g><title>onnxruntime::python::AddNonTensor&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (58 samples, 6.70%)</title><rect x="32.3326%" y="260" width="6.6975%" height="15" fill="rgb(206,27,48)"/><text x="32.5826%" y="270.50">onnxrunti..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (58 samples, 6.70%)</title><rect x="32.3326%" y="276" width="6.6975%" height="15" fill="rgb(225,35,8)"/><text x="32.5826%" y="286.50">pybind11:..</text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 1.73%)</title><rect x="37.2979%" y="292" width="1.7321%" height="15" fill="rgb(250,213,24)"/><text x="37.5479%" y="302.50"></text></g><g><title>profile_ort (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py) (329 samples, 37.99%)</title><rect x="1.3857%" y="68" width="37.9908%" height="15" fill="rgb(247,123,22)"/><text x="1.6357%" y="78.50">profile_ort (bench_MLPClassifier_default_b_cl_1000_4_12_float_..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py) (329 samples, 37.99%)</title><rect x="1.3857%" y="84" width="37.9908%" height="15" fill="rgb(231,138,38)"/><text x="1.6357%" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_floa..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py) (329 samples, 37.99%)</title><rect x="1.3857%" y="100" width="37.9908%" height="15" fill="rgb(231,145,46)"/><text x="1.6357%" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (299 samples, 34.53%)</title><rect x="4.8499%" y="116" width="34.5266%" height="15" fill="rgb(251,118,11)"/><text x="5.0999%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (297 samples, 34.30%)</title><rect x="5.0808%" y="132" width="34.2956%" height="15" fill="rgb(217,147,25)"/><text x="5.3308%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (295 samples, 34.06%)</title><rect x="5.3118%" y="148" width="34.0647%" height="15" fill="rgb(247,81,37)"/><text x="5.5618%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (295 samples, 34.06%)</title><rect x="5.3118%" y="164" width="34.0647%" height="15" fill="rgb(209,12,38)"/><text x="5.5618%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (294 samples, 33.95%)</title><rect x="5.4273%" y="180" width="33.9492%" height="15" fill="rgb(227,1,9)"/><text x="5.6773%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (294 samples, 33.95%)</title><rect x="5.4273%" y="196" width="33.9492%" height="15" fill="rgb(248,47,43)"/><text x="5.6773%" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (273 samples, 31.52%)</title><rect x="7.8522%" y="212" width="31.5242%" height="15" fill="rgb(221,10,30)"/><text x="8.1022%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/cap..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (273 samples, 31.52%)</title><rect x="7.8522%" y="228" width="31.5242%" height="15" fill="rgb(210,229,1)"/><text x="8.1022%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime..</text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py) (10 samples, 1.15%)</title><rect x="40.3002%" y="228" width="1.1547%" height="15" fill="rgb(222,148,37)"/><text x="40.5502%" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (11 samples, 1.27%)</title><rect x="40.3002%" y="196" width="1.2702%" height="15" fill="rgb(234,67,33)"/><text x="40.5502%" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py) (11 samples, 1.27%)</title><rect x="40.3002%" y="212" width="1.2702%" height="15" fill="rgb(247,98,35)"/><text x="40.5502%" y="222.50"></text></g><g><title>PyArray_ToList (convert.c) (9 samples, 1.04%)</title><rect x="41.9169%" y="228" width="1.0393%" height="15" fill="rgb(247,138,52)"/><text x="42.1669%" y="238.50"></text></g><g><title>recursive_tolist (convert.c) (9 samples, 1.04%)</title><rect x="41.9169%" y="244" width="1.0393%" height="15" fill="rgb(213,79,30)"/><text x="42.1669%" y="254.50"></text></g><g><title>PyArray_AssignFromSequence (ctors.c) (10 samples, 1.15%)</title><rect x="43.6490%" y="276" width="1.1547%" height="15" fill="rgb(246,177,23)"/><text x="43.8990%" y="286.50"></text></g><g><title>setArrayFromSequence (ctors.c) (10 samples, 1.15%)</title><rect x="43.6490%" y="292" width="1.1547%" height="15" fill="rgb(230,62,27)"/><text x="43.8990%" y="302.50"></text></g><g><title>PyArray_DTypeFromObject (common.c) (13 samples, 1.50%)</title><rect x="44.8037%" y="292" width="1.5012%" height="15" fill="rgb(216,154,8)"/><text x="45.0537%" y="302.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (13 samples, 1.50%)</title><rect x="44.8037%" y="308" width="1.5012%" height="15" fill="rgb(244,35,45)"/><text x="45.0537%" y="318.50"></text></g><g><title>PyArray_DTypeFromObjectHelper (common.c) (13 samples, 1.50%)</title><rect x="44.8037%" y="324" width="1.5012%" height="15" fill="rgb(251,115,12)"/><text x="45.0537%" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (48 samples, 5.54%)</title><rect x="41.5704%" y="196" width="5.5427%" height="15" fill="rgb(240,54,50)"/><text x="41.8204%" y="206.50">_run (m..</text></g><g><title>_array_feature_extrator (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py) (47 samples, 5.43%)</title><rect x="41.6859%" y="212" width="5.4273%" height="15" fill="rgb(233,84,52)"/><text x="41.9359%" y="222.50">_array_..</text></g><g><title>array_subscript (mapping.c) (36 samples, 4.16%)</title><rect x="42.9561%" y="228" width="4.1570%" height="15" fill="rgb(207,117,47)"/><text x="43.2061%" y="238.50">array..</text></g><g><title>prepare_index (mapping.c) (30 samples, 3.46%)</title><rect x="43.6490%" y="244" width="3.4642%" height="15" fill="rgb(249,43,39)"/><text x="43.8990%" y="254.50">pre..</text></g><g><title>PyArray_FromAny (ctors.c) (30 samples, 3.46%)</title><rect x="43.6490%" y="260" width="3.4642%" height="15" fill="rgb(209,38,44)"/><text x="43.8990%" y="270.50">PyA..</text></g><g><title>PyArray_GetArrayParamsFromObject (ctors.c) (20 samples, 2.31%)</title><rect x="44.8037%" y="276" width="2.3095%" height="15" fill="rgb(236,212,23)"/><text x="45.0537%" y="286.50">P..</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (34 samples, 3.93%)</title><rect x="48.1524%" y="388" width="3.9261%" height="15" fill="rgb(242,79,21)"/><text x="48.4024%" y="398.50">exec..</text></g><g><title>sched_yield (libc-2.29.so) (34 samples, 3.93%)</title><rect x="48.1524%" y="404" width="3.9261%" height="15" fill="rgb(211,96,35)"/><text x="48.4024%" y="414.50">sche..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (39 samples, 4.50%)</title><rect x="47.6905%" y="244" width="4.5035%" height="15" fill="rgb(253,215,40)"/><text x="47.9405%" y="254.50">array..</text></g><g><title>array_matrixproduct (multiarraymodule.c) (39 samples, 4.50%)</title><rect x="47.6905%" y="260" width="4.5035%" height="15" fill="rgb(211,81,21)"/><text x="47.9405%" y="270.50">array..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c) (39 samples, 4.50%)</title><rect x="47.6905%" y="276" width="4.5035%" height="15" fill="rgb(208,190,38)"/><text x="47.9405%" y="286.50">PyArr..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c) (38 samples, 4.39%)</title><rect x="47.8060%" y="292" width="4.3880%" height="15" fill="rgb(235,213,38)"/><text x="48.0560%" y="302.50">cblas..</text></g><g><title>gemm (cblasfuncs.c) (37 samples, 4.27%)</title><rect x="47.9215%" y="308" width="4.2725%" height="15" fill="rgb(237,122,38)"/><text x="48.1715%" y="318.50">gemm ..</text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (37 samples, 4.27%)</title><rect x="47.9215%" y="324" width="4.2725%" height="15" fill="rgb(244,218,35)"/><text x="48.1715%" y="334.50">cblas..</text></g><g><title>sgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (37 samples, 4.27%)</title><rect x="47.9215%" y="340" width="4.2725%" height="15" fill="rgb(240,68,47)"/><text x="48.1715%" y="350.50">sgemm..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (37 samples, 4.27%)</title><rect x="47.9215%" y="356" width="4.2725%" height="15" fill="rgb(210,16,53)"/><text x="48.1715%" y="366.50">gemm_..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (37 samples, 4.27%)</title><rect x="47.9215%" y="372" width="4.2725%" height="15" fill="rgb(235,124,12)"/><text x="48.1715%" y="382.50">exec_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py) (72 samples, 8.31%)</title><rect x="47.5751%" y="196" width="8.3141%" height="15" fill="rgb(224,169,11)"/><text x="47.8251%" y="206.50">_run (mlprod..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py) (72 samples, 8.31%)</title><rect x="47.5751%" y="212" width="8.3141%" height="15" fill="rgb(250,166,2)"/><text x="47.8251%" y="222.50">numpy_dot_in..</text></g><g><title>dot (&lt;__array_function__ internals&gt;) (71 samples, 8.20%)</title><rect x="47.6905%" y="228" width="8.1986%" height="15" fill="rgb(242,216,29)"/><text x="47.9405%" y="238.50">dot (&lt;__arr..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (26 samples, 3.00%)</title><rect x="52.8868%" y="244" width="3.0023%" height="15" fill="rgb(230,116,27)"/><text x="53.1368%" y="254.50">sge..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (70 samples, 8.08%)</title><rect x="56.0046%" y="244" width="8.0831%" height="15" fill="rgb(228,99,48)"/><text x="56.2546%" y="254.50">execute_leg..</text></g><g><title>trivial_three_operand_loop (ufunc_object.c) (69 samples, 7.97%)</title><rect x="56.1201%" y="260" width="7.9677%" height="15" fill="rgb(253,11,6)"/><text x="56.3701%" y="270.50">trivial_thr..</text></g><g><title>FLOAT_maximum (loops.c.src) (69 samples, 7.97%)</title><rect x="56.1201%" y="276" width="7.9677%" height="15" fill="rgb(247,143,39)"/><text x="56.3701%" y="286.50">FLOAT_maxim..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py) (73 samples, 8.43%)</title><rect x="55.8891%" y="196" width="8.4296%" height="15" fill="rgb(236,97,10)"/><text x="56.1391%" y="206.50">_run (mlprod..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (73 samples, 8.43%)</title><rect x="55.8891%" y="212" width="8.4296%" height="15" fill="rgb(233,208,19)"/><text x="56.1391%" y="222.50">ufunc_generi..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (73 samples, 8.43%)</title><rect x="55.8891%" y="228" width="8.4296%" height="15" fill="rgb(216,164,2)"/><text x="56.1391%" y="238.50">PyUFunc_Gene..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (11 samples, 1.27%)</title><rect x="67.0901%" y="244" width="1.2702%" height="15" fill="rgb(220,129,5)"/><text x="67.3401%" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py) (35 samples, 4.04%)</title><rect x="64.4342%" y="196" width="4.0416%" height="15" fill="rgb(242,17,10)"/><text x="64.6842%" y="206.50">_run..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (13 samples, 1.50%)</title><rect x="66.9746%" y="212" width="1.5012%" height="15" fill="rgb(242,107,0)"/><text x="67.2246%" y="222.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (13 samples, 1.50%)</title><rect x="66.9746%" y="228" width="1.5012%" height="15" fill="rgb(251,28,31)"/><text x="67.2246%" y="238.50"></text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py) (253 samples, 29.21%)</title><rect x="39.3764%" y="100" width="29.2148%" height="15" fill="rgb(233,223,10)"/><text x="39.6264%" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (253 samples, 29.21%)</title><rect x="39.3764%" y="116" width="29.2148%" height="15" fill="rgb(215,21,27)"/><text x="39.6264%" y="126.50">time_predict (mlprodict/asv_benchmark/common_as..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (252 samples, 29.10%)</title><rect x="39.4919%" y="132" width="29.0993%" height="15" fill="rgb(232,23,21)"/><text x="39.7419%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_sk..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (252 samples, 29.10%)</title><rect x="39.4919%" y="148" width="29.0993%" height="15" fill="rgb(244,5,23)"/><text x="39.7419%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py) (251 samples, 28.98%)</title><rect x="39.6074%" y="164" width="28.9838%" height="15" fill="rgb(226,81,46)"/><text x="39.8574%" y="174.50">_run_sequence_runtime_compiled (mlprodict/onnxr..</text></g><g><title>compiled_run (&lt;string&gt;) (249 samples, 28.75%)</title><rect x="39.8383%" y="180" width="28.7529%" height="15" fill="rgb(247,70,30)"/><text x="40.0883%" y="190.50">compiled_run (&lt;string&gt;)</text></g><g><title>profile_pyrtc (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py) (254 samples, 29.33%)</title><rect x="39.3764%" y="68" width="29.3303%" height="15" fill="rgb(212,68,19)"/><text x="39.6264%" y="78.50">profile_pyrtc (bench_MLPClassifier_default_b_cl..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py) (254 samples, 29.33%)</title><rect x="39.3764%" y="84" width="29.3303%" height="15" fill="rgb(240,187,13)"/><text x="39.6264%" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl..</text></g><g><title>DOUBLE_clip (clip.c.src) (57 samples, 6.58%)</title><rect x="69.8614%" y="404" width="6.5820%" height="15" fill="rgb(223,113,26)"/><text x="70.1114%" y="414.50">DOUBLE_cl..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (59 samples, 6.81%)</title><rect x="69.8614%" y="372" width="6.8129%" height="15" fill="rgb(206,192,2)"/><text x="70.1114%" y="382.50">execute_l..</text></g><g><title>iterator_loop (ufunc_object.c) (59 samples, 6.81%)</title><rect x="69.8614%" y="388" width="6.8129%" height="15" fill="rgb(241,108,4)"/><text x="70.1114%" y="398.50">iterator_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (62 samples, 7.16%)</title><rect x="69.7460%" y="356" width="7.1594%" height="15" fill="rgb(247,173,49)"/><text x="69.9960%" y="366.50">PyUFunc_Ge..</text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (63 samples, 7.27%)</title><rect x="69.7460%" y="324" width="7.2748%" height="15" fill="rgb(224,114,35)"/><text x="69.9960%" y="334.50">_clip_dep_..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (63 samples, 7.27%)</title><rect x="69.7460%" y="340" width="7.2748%" height="15" fill="rgb(245,159,27)"/><text x="69.9960%" y="350.50">ufunc_gene..</text></g><g><title>clip (numpy/core/fromnumeric.py) (73 samples, 8.43%)</title><rect x="69.5150%" y="244" width="8.4296%" height="15" fill="rgb(245,172,44)"/><text x="69.7650%" y="254.50">clip (numpy/..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (73 samples, 8.43%)</title><rect x="69.5150%" y="260" width="8.4296%" height="15" fill="rgb(236,23,11)"/><text x="69.7650%" y="270.50">_wrapfunc (n..</text></g><g><title>array_clip (methods.c) (72 samples, 8.31%)</title><rect x="69.6305%" y="276" width="8.3141%" height="15" fill="rgb(205,117,38)"/><text x="69.8805%" y="286.50">array_clip (..</text></g><g><title>forward_ndarray_method (methods.c) (72 samples, 8.31%)</title><rect x="69.6305%" y="292" width="8.3141%" height="15" fill="rgb(237,72,25)"/><text x="69.8805%" y="302.50">forward_ndar..</text></g><g><title>_clip (numpy/core/_methods.py) (72 samples, 8.31%)</title><rect x="69.6305%" y="308" width="8.3141%" height="15" fill="rgb(244,70,9)"/><text x="69.8805%" y="318.50">_clip (numpy..</text></g><g><title>relu (sklearn/neural_network/_base.py) (76 samples, 8.78%)</title><rect x="69.2841%" y="196" width="8.7760%" height="15" fill="rgb(217,125,39)"/><text x="69.5341%" y="206.50">relu (sklear..</text></g><g><title>clip (&lt;__array_function__ internals&gt;) (76 samples, 8.78%)</title><rect x="69.2841%" y="212" width="8.7760%" height="15" fill="rgb(235,36,10)"/><text x="69.5341%" y="222.50">clip (&lt;__arr..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (74 samples, 8.55%)</title><rect x="69.5150%" y="228" width="8.5450%" height="15" fill="rgb(251,123,47)"/><text x="69.7650%" y="238.50">array_implem..</text></g><g><title>dgemm_beta_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (13 samples, 1.50%)</title><rect x="78.0600%" y="212" width="1.5012%" height="15" fill="rgb(221,13,13)"/><text x="78.3100%" y="222.50"></text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (22 samples, 2.54%)</title><rect x="79.5612%" y="212" width="2.5404%" height="15" fill="rgb(238,131,9)"/><text x="79.8112%" y="222.50">dg..</text></g><g><title>exec_blas_async_wait (libopenblasp-r0-34a18dc3.3.7.so) (50 samples, 5.77%)</title><rect x="82.4480%" y="340" width="5.7737%" height="15" fill="rgb(211,50,8)"/><text x="82.6980%" y="350.50">exec_bl..</text></g><g><title>sched_yield (libc-2.29.so) (50 samples, 5.77%)</title><rect x="82.4480%" y="356" width="5.7737%" height="15" fill="rgb(245,182,24)"/><text x="82.6980%" y="366.50">sched_y..</text></g><g><title>DOUBLE_matmul (matmul.c.src) (62 samples, 7.16%)</title><rect x="82.1016%" y="260" width="7.1594%" height="15" fill="rgb(242,14,37)"/><text x="82.3516%" y="270.50">DOUBLE_mat..</text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (62 samples, 7.16%)</title><rect x="82.1016%" y="276" width="7.1594%" height="15" fill="rgb(246,228,12)"/><text x="82.3516%" y="286.50">cblas_dgem..</text></g><g><title>dgemm_thread_nn (libopenblasp-r0-34a18dc3.3.7.so) (62 samples, 7.16%)</title><rect x="82.1016%" y="292" width="7.1594%" height="15" fill="rgb(213,55,15)"/><text x="82.3516%" y="302.50">dgemm_thre..</text></g><g><title>gemm_driver (libopenblasp-r0-34a18dc3.3.7.so) (62 samples, 7.16%)</title><rect x="82.1016%" y="308" width="7.1594%" height="15" fill="rgb(209,9,3)"/><text x="82.3516%" y="318.50">gemm_drive..</text></g><g><title>exec_blas (libopenblasp-r0-34a18dc3.3.7.so) (62 samples, 7.16%)</title><rect x="82.1016%" y="324" width="7.1594%" height="15" fill="rgb(230,59,30)"/><text x="82.3516%" y="334.50">exec_blas ..</text></g><g><title>inner_thread (libopenblasp-r0-34a18dc3.3.7.so) (9 samples, 1.04%)</title><rect x="88.2217%" y="340" width="1.0393%" height="15" fill="rgb(209,121,21)"/><text x="88.4717%" y="350.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (104 samples, 12.01%)</title><rect x="78.0600%" y="196" width="12.0092%" height="15" fill="rgb(220,109,13)"/><text x="78.3100%" y="206.50">safe_sparse_dot (s..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (69 samples, 7.97%)</title><rect x="82.1016%" y="212" width="7.9677%" height="15" fill="rgb(232,18,1)"/><text x="82.3516%" y="222.50">ufunc_gener..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (69 samples, 7.97%)</title><rect x="82.1016%" y="228" width="7.9677%" height="15" fill="rgb(215,41,42)"/><text x="82.3516%" y="238.50">PyUFunc_Gen..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (69 samples, 7.97%)</title><rect x="82.1016%" y="244" width="7.9677%" height="15" fill="rgb(224,123,36)"/><text x="82.3516%" y="254.50">PyUFunc_Gen..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (9 samples, 1.04%)</title><rect x="91.3395%" y="244" width="1.0393%" height="15" fill="rgb(240,125,3)"/><text x="91.5895%" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (9 samples, 1.04%)</title><rect x="91.3395%" y="260" width="1.0393%" height="15" fill="rgb(205,98,50)"/><text x="91.5895%" y="270.50"></text></g><g><title>iterator_loop (ufunc_object.c) (9 samples, 1.04%)</title><rect x="91.3395%" y="276" width="1.0393%" height="15" fill="rgb(205,185,37)"/><text x="91.5895%" y="286.50"></text></g><g><title>array_subtract (number.c) (10 samples, 1.15%)</title><rect x="91.3395%" y="212" width="1.1547%" height="15" fill="rgb(238,207,15)"/><text x="91.5895%" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (10 samples, 1.15%)</title><rect x="91.3395%" y="228" width="1.1547%" height="15" fill="rgb(213,199,42)"/><text x="91.5895%" y="238.50"></text></g><g><title>array_sum (methods.c) (9 samples, 1.04%)</title><rect x="92.4942%" y="212" width="1.0393%" height="15" fill="rgb(235,201,11)"/><text x="92.7442%" y="222.50"></text></g><g><title>forward_ndarray_method (methods.c) (9 samples, 1.04%)</title><rect x="92.4942%" y="228" width="1.0393%" height="15" fill="rgb(207,46,11)"/><text x="92.7442%" y="238.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (15 samples, 1.73%)</title><rect x="93.7644%" y="244" width="1.7321%" height="15" fill="rgb(241,35,35)"/><text x="94.0144%" y="254.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (11 samples, 1.27%)</title><rect x="94.2263%" y="260" width="1.2702%" height="15" fill="rgb(243,32,47)"/><text x="94.4763%" y="270.50"></text></g><g><title>PyUFunc_d_d (loops.c.src) (10 samples, 1.15%)</title><rect x="94.3418%" y="276" width="1.1547%" height="15" fill="rgb(247,202,23)"/><text x="94.5918%" y="286.50"></text></g><g><title>exp (libm-2.29.so) (10 samples, 1.15%)</title><rect x="94.3418%" y="292" width="1.1547%" height="15" fill="rgb(219,102,11)"/><text x="94.5918%" y="302.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py) (48 samples, 5.54%)</title><rect x="90.0693%" y="196" width="5.5427%" height="15" fill="rgb(243,110,44)"/><text x="90.3193%" y="206.50">softmax..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (18 samples, 2.08%)</title><rect x="93.5335%" y="212" width="2.0785%" height="15" fill="rgb(222,74,54)"/><text x="93.7835%" y="222.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (16 samples, 1.85%)</title><rect x="93.7644%" y="228" width="1.8476%" height="15" fill="rgb(216,99,12)"/><text x="94.0144%" y="238.50">P..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py) (242 samples, 27.94%)</title><rect x="69.1686%" y="180" width="27.9446%" height="15" fill="rgb(226,22,26)"/><text x="69.4186%" y="190.50">_forward_pass (sklearn/neural_network/_multil..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (13 samples, 1.50%)</title><rect x="95.6120%" y="196" width="1.5012%" height="15" fill="rgb(217,163,10)"/><text x="95.8620%" y="206.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (13 samples, 1.50%)</title><rect x="95.6120%" y="212" width="1.5012%" height="15" fill="rgb(213,25,53)"/><text x="95.8620%" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (13 samples, 1.50%)</title><rect x="95.6120%" y="228" width="1.5012%" height="15" fill="rgb(252,105,26)"/><text x="95.8620%" y="238.50"></text></g><g><title>iterator_loop (ufunc_object.c) (13 samples, 1.50%)</title><rect x="95.6120%" y="244" width="1.5012%" height="15" fill="rgb(220,39,43)"/><text x="95.8620%" y="254.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py) (256 samples, 29.56%)</title><rect x="68.8222%" y="164" width="29.5612%" height="15" fill="rgb(229,68,48)"/><text x="69.0722%" y="174.50">_predict (sklearn/neural_network/_multilayer_per..</text></g><g><title>check_array (sklearn/utils/validation.py) (10 samples, 1.15%)</title><rect x="97.2286%" y="180" width="1.1547%" height="15" fill="rgb(252,8,32)"/><text x="97.4786%" y="190.50"></text></g><g><title>profile_skl (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py) (263 samples, 30.37%)</title><rect x="68.7067%" y="68" width="30.3695%" height="15" fill="rgb(223,20,43)"/><text x="68.9567%" y="78.50">profile_skl (bench_MLPClassifier_default_b_cl_100..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py) (263 samples, 30.37%)</title><rect x="68.7067%" y="84" width="30.3695%" height="15" fill="rgb(229,81,49)"/><text x="68.9567%" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py) (263 samples, 30.37%)</title><rect x="68.7067%" y="100" width="30.3695%" height="15" fill="rgb(236,28,36)"/><text x="68.9567%" y="110.50">profile (bench_MLPClassifier_default_b_cl_1000_4_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (262 samples, 30.25%)</title><rect x="68.8222%" y="116" width="30.2540%" height="15" fill="rgb(249,185,26)"/><text x="69.0722%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (262 samples, 30.25%)</title><rect x="68.8222%" y="132" width="30.2540%" height="15" fill="rgb(249,174,33)"/><text x="69.0722%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl...</text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py) (262 samples, 30.25%)</title><rect x="68.8222%" y="148" width="30.2540%" height="15" fill="rgb(233,201,37)"/><text x="69.0722%" y="158.50">predict_proba (sklearn/neural_network/_multilayer..</text></g><g><title>all (866 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py) (866 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1000_4_12_float_.py)</text></g></svg></svg>