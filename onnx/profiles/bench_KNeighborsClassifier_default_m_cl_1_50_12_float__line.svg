<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1142" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1125.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1125.00"> </text><g id="frames"><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (3 samples, 0.09%)</title><rect x="10" y="148" width="1" height="15" fill="rgb(239,26,30)"/><text x="13.00" y="158.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:18) (4 samples, 0.13%)</title><rect x="10" y="100" width="1" height="15" fill="rgb(221,96,21)"/><text x="13.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (4 samples, 0.13%)</title><rect x="10" y="116" width="1" height="15" fill="rgb(220,148,30)"/><text x="13.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (4 samples, 0.13%)</title><rect x="10" y="132" width="1" height="15" fill="rgb(239,108,4)"/><text x="13.00" y="142.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:215) (11 samples, 0.34%)</title><rect x="11" y="148" width="4" height="15" fill="rgb(254,88,43)"/><text x="14.00" y="158.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (3 samples, 0.09%)</title><rect x="17" y="196" width="1" height="15" fill="rgb(236,129,44)"/><text x="20.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:583) (6 samples, 0.19%)</title><rect x="16" y="164" width="2" height="15" fill="rgb(226,87,22)"/><text x="19.00" y="174.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (4 samples, 0.13%)</title><rect x="17" y="180" width="1" height="15" fill="rgb(244,216,52)"/><text x="20.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (4 samples, 0.13%)</title><rect x="21" y="180" width="1" height="15" fill="rgb(215,187,15)"/><text x="24.00" y="190.50"></text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (3 samples, 0.09%)</title><rect x="21" y="196" width="1" height="15" fill="rgb(249,71,53)"/><text x="24.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (13 samples, 0.41%)</title><rect x="18" y="164" width="5" height="15" fill="rgb(214,134,20)"/><text x="21.00" y="174.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:620) (3 samples, 0.09%)</title><rect x="23" y="164" width="1" height="15" fill="rgb(226,144,48)"/><text x="26.00" y="174.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py:388) (3 samples, 0.09%)</title><rect x="23" y="180" width="1" height="15" fill="rgb(245,58,38)"/><text x="26.00" y="190.50"></text></g><g><title>__init__ (distutils/version.py:304) (4 samples, 0.13%)</title><rect x="25" y="180" width="1" height="15" fill="rgb(243,52,47)"/><text x="28.00" y="190.50"></text></g><g><title>parse (distutils/version.py:312) (3 samples, 0.09%)</title><rect x="25" y="196" width="1" height="15" fill="rgb(235,227,10)"/><text x="28.00" y="206.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:650) (6 samples, 0.19%)</title><rect x="24" y="164" width="2" height="15" fill="rgb(205,205,25)"/><text x="27.00" y="174.50"></text></g><g><title>__init__ (joblib/parallel.py:634) (5 samples, 0.16%)</title><rect x="29" y="180" width="2" height="15" fill="rgb(206,182,48)"/><text x="32.00" y="190.50"></text></g><g><title>__init__ (joblib/parallel.py:637) (4 samples, 0.13%)</title><rect x="31" y="180" width="1" height="15" fill="rgb(228,167,49)"/><text x="34.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:660) (18 samples, 0.56%)</title><rect x="27" y="164" width="7" height="15" fill="rgb(224,141,48)"/><text x="30.00" y="174.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:796) (3 samples, 0.09%)</title><rect x="34" y="196" width="1" height="15" fill="rgb(219,202,24)"/><text x="37.00" y="206.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:208) (5 samples, 0.16%)</title><rect x="35" y="212" width="2" height="15" fill="rgb(216,34,36)"/><text x="38.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:824) (8 samples, 0.25%)</title><rect x="35" y="196" width="3" height="15" fill="rgb(222,212,33)"/><text x="38.00" y="206.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py:212) (3 samples, 0.09%)</title><rect x="37" y="212" width="1" height="15" fill="rgb(242,206,27)"/><text x="40.00" y="222.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:829) (3 samples, 0.09%)</title><rect x="39" y="196" width="2" height="15" fill="rgb(223,122,41)"/><text x="42.00" y="206.50"></text></g><g><title>0x7f71cb5e132c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.34%)</title><rect x="43" y="324" width="5" height="15" fill="rgb(216,227,35)"/><text x="46.00" y="334.50"></text></g><g><title>0x7f71cb5ac5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (11 samples, 0.34%)</title><rect x="43" y="340" width="5" height="15" fill="rgb(247,224,49)"/><text x="46.00" y="350.50"></text></g><g><title>0x7f71cb5e1680 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.09%)</title><rect x="48" y="324" width="1" height="15" fill="rgb(224,223,54)"/><text x="51.00" y="334.50"></text></g><g><title>0x7f71cb5dc877 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.13%)</title><rect x="49" y="356" width="1" height="15" fill="rgb(248,72,23)"/><text x="52.00" y="366.50"></text></g><g><title>0x7f71cb5e1708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.25%)</title><rect x="49" y="324" width="3" height="15" fill="rgb(223,125,54)"/><text x="52.00" y="334.50"></text></g><g><title>0x7f71cb5ac5cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 0.25%)</title><rect x="49" y="340" width="3" height="15" fill="rgb(225,31,38)"/><text x="52.00" y="350.50"></text></g><g><title>0x7f71cb5dd73a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.13%)</title><rect x="50" y="356" width="2" height="15" fill="rgb(242,58,20)"/><text x="53.00" y="366.50"></text></g><g><title>0x7f71cb5dcdb0 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 0.09%)</title><rect x="51" y="372" width="1" height="15" fill="rgb(238,54,16)"/><text x="54.00" y="382.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (31 samples, 0.97%)</title><rect x="43" y="228" width="11" height="15" fill="rgb(219,98,37)"/><text x="46.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (31 samples, 0.97%)</title><rect x="43" y="244" width="11" height="15" fill="rgb(241,51,40)"/><text x="46.00" y="254.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (29 samples, 0.91%)</title><rect x="43" y="260" width="11" height="15" fill="rgb(208,222,3)"/><text x="46.00" y="270.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (29 samples, 0.91%)</title><rect x="43" y="276" width="11" height="15" fill="rgb(250,80,8)"/><text x="46.00" y="286.50"></text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (29 samples, 0.91%)</title><rect x="43" y="292" width="11" height="15" fill="rgb(209,42,26)"/><text x="46.00" y="302.50"></text></g><g><title>0x7f71cb5e5e14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (29 samples, 0.91%)</title><rect x="43" y="308" width="11" height="15" fill="rgb(241,171,53)"/><text x="46.00" y="318.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (56 samples, 1.75%)</title><rect x="34" y="180" width="21" height="15" fill="rgb(233,187,44)"/><text x="37.00" y="190.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (38 samples, 1.19%)</title><rect x="41" y="196" width="14" height="15" fill="rgb(205,7,21)"/><text x="44.00" y="206.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (32 samples, 1.00%)</title><rect x="43" y="212" width="12" height="15" fill="rgb(234,16,26)"/><text x="46.00" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py:949) (4 samples, 0.13%)</title><rect x="58" y="180" width="1" height="15" fill="rgb(210,3,26)"/><text x="61.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (71 samples, 2.22%)</title><rect x="34" y="164" width="26" height="15" fill="rgb(240,92,17)"/><text x="37.00" y="174.50">k..</text></g><g><title>vstack (numpy/core/shape_base.py:279) (4 samples, 0.13%)</title><rect x="60" y="212" width="2" height="15" fill="rgb(253,79,46)"/><text x="63.00" y="222.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (3 samples, 0.09%)</title><rect x="60" y="228" width="2" height="15" fill="rgb(227,50,44)"/><text x="63.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.09%)</title><rect x="60" y="244" width="2" height="15" fill="rgb(233,144,1)"/><text x="63.00" y="254.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (127 samples, 3.98%)</title><rect x="15" y="148" width="47" height="15" fill="rgb(236,203,37)"/><text x="18.00" y="158.50">pred..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:671) (6 samples, 0.19%)</title><rect x="60" y="164" width="2" height="15" fill="rgb(226,103,1)"/><text x="63.00" y="174.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (6 samples, 0.19%)</title><rect x="60" y="180" width="2" height="15" fill="rgb(240,122,53)"/><text x="63.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (6 samples, 0.19%)</title><rect x="60" y="196" width="2" height="15" fill="rgb(253,23,8)"/><text x="63.00" y="206.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:238) (4 samples, 0.13%)</title><rect x="65" y="148" width="1" height="15" fill="rgb(226,225,40)"/><text x="68.00" y="158.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (3 samples, 0.09%)</title><rect x="69" y="180" width="1" height="15" fill="rgb(232,122,37)"/><text x="72.00" y="190.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.09%)</title><rect x="71" y="180" width="1" height="15" fill="rgb(230,76,39)"/><text x="74.00" y="190.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 0.09%)</title><rect x="71" y="196" width="1" height="15" fill="rgb(219,194,51)"/><text x="74.00" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 0.25%)</title><rect x="69" y="164" width="3" height="15" fill="rgb(232,28,46)"/><text x="72.00" y="174.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:239) (18 samples, 0.56%)</title><rect x="66" y="148" width="7" height="15" fill="rgb(232,134,10)"/><text x="69.00" y="158.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:242) (6 samples, 0.19%)</title><rect x="73" y="148" width="2" height="15" fill="rgb(227,8,39)"/><text x="76.00" y="158.50"></text></g><g><title>array_sum (methods.c:2215) (5 samples, 0.16%)</title><rect x="73" y="164" width="2" height="15" fill="rgb(239,176,54)"/><text x="76.00" y="174.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (5 samples, 0.16%)</title><rect x="73" y="180" width="2" height="15" fill="rgb(234,100,0)"/><text x="76.00" y="190.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (4 samples, 0.13%)</title><rect x="73" y="196" width="2" height="15" fill="rgb(217,7,16)"/><text x="76.00" y="206.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (3 samples, 0.09%)</title><rect x="74" y="212" width="1" height="15" fill="rgb(247,13,23)"/><text x="77.00" y="222.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (3 samples, 0.09%)</title><rect x="74" y="228" width="1" height="15" fill="rgb(242,124,27)"/><text x="77.00" y="238.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:38) (180 samples, 5.64%)</title><rect x="10" y="52" width="66" height="15" fill="rgb(236,226,27)"/><text x="13.00" y="62.50">&lt;module..</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:37) (180 samples, 5.64%)</title><rect x="10" y="68" width="66" height="15" fill="rgb(226,45,46)"/><text x="13.00" y="78.50">profile..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:29) (180 samples, 5.64%)</title><rect x="10" y="84" width="66" height="15" fill="rgb(249,205,41)"/><text x="13.00" y="94.50">setup_p..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:23) (176 samples, 5.51%)</title><rect x="11" y="100" width="65" height="15" fill="rgb(248,30,54)"/><text x="14.00" y="110.50">profile..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (176 samples, 5.51%)</title><rect x="11" y="116" width="65" height="15" fill="rgb(210,214,22)"/><text x="14.00" y="126.50">time_pr..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (176 samples, 5.51%)</title><rect x="11" y="132" width="65" height="15" fill="rgb(230,61,4)"/><text x="14.00" y="142.50">&lt;lambda..</text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:244) (3 samples, 0.09%)</title><rect x="75" y="148" width="1" height="15" fill="rgb(247,113,30)"/><text x="78.00" y="158.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py:2) (3 samples, 0.09%)</title><rect x="76" y="148" width="1" height="15" fill="rgb(237,197,53)"/><text x="79.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="76" y="164" width="1" height="15" fill="rgb(227,81,8)"/><text x="79.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.09%)</title><rect x="76" y="180" width="1" height="15" fill="rgb(219,79,51)"/><text x="79.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="76" y="196" width="1" height="15" fill="rgb(209,207,46)"/><text x="79.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="76" y="212" width="1" height="15" fill="rgb(250,219,51)"/><text x="79.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="76" y="228" width="1" height="15" fill="rgb(219,218,23)"/><text x="79.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="76" y="244" width="1" height="15" fill="rgb(210,88,12)"/><text x="79.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="76" y="260" width="1" height="15" fill="rgb(213,167,11)"/><text x="79.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="76" y="276" width="1" height="15" fill="rgb(250,142,51)"/><text x="79.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (3 samples, 0.09%)</title><rect x="76" y="292" width="1" height="15" fill="rgb(229,211,41)"/><text x="79.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="76" y="308" width="1" height="15" fill="rgb(229,224,25)"/><text x="79.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="76" y="324" width="1" height="15" fill="rgb(234,6,46)"/><text x="79.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="76" y="340" width="1" height="15" fill="rgb(252,18,25)"/><text x="79.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="76" y="356" width="1" height="15" fill="rgb(214,124,18)"/><text x="79.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="76" y="372" width="1" height="15" fill="rgb(231,145,18)"/><text x="79.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (3 samples, 0.09%)</title><rect x="76" y="388" width="1" height="15" fill="rgb(240,72,48)"/><text x="79.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="76" y="404" width="1" height="15" fill="rgb(233,55,34)"/><text x="79.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="76" y="420" width="1" height="15" fill="rgb(252,161,33)"/><text x="79.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="76" y="436" width="1" height="15" fill="rgb(227,13,22)"/><text x="79.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="76" y="452" width="1" height="15" fill="rgb(236,81,2)"/><text x="79.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="76" y="468" width="1" height="15" fill="rgb(207,157,32)"/><text x="79.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (3 samples, 0.09%)</title><rect x="76" y="484" width="1" height="15" fill="rgb(213,171,43)"/><text x="79.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="76" y="500" width="1" height="15" fill="rgb(223,81,51)"/><text x="79.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="76" y="516" width="1" height="15" fill="rgb(246,153,44)"/><text x="79.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="76" y="532" width="1" height="15" fill="rgb(207,175,34)"/><text x="79.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="76" y="548" width="1" height="15" fill="rgb(251,93,13)"/><text x="79.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="76" y="564" width="1" height="15" fill="rgb(224,73,39)"/><text x="79.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (3 samples, 0.09%)</title><rect x="76" y="580" width="1" height="15" fill="rgb(236,119,43)"/><text x="79.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="76" y="596" width="1" height="15" fill="rgb(229,101,38)"/><text x="79.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.09%)</title><rect x="76" y="612" width="1" height="15" fill="rgb(237,216,24)"/><text x="79.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="76" y="628" width="1" height="15" fill="rgb(247,131,28)"/><text x="79.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="76" y="644" width="1" height="15" fill="rgb(205,82,29)"/><text x="79.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="76" y="660" width="1" height="15" fill="rgb(248,3,8)"/><text x="79.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="76" y="676" width="1" height="15" fill="rgb(233,198,22)"/><text x="79.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="76" y="692" width="1" height="15" fill="rgb(254,6,42)"/><text x="79.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="76" y="708" width="1" height="15" fill="rgb(238,69,52)"/><text x="79.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (3 samples, 0.09%)</title><rect x="76" y="724" width="1" height="15" fill="rgb(251,39,49)"/><text x="79.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="76" y="740" width="1" height="15" fill="rgb(209,54,27)"/><text x="79.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="76" y="756" width="1" height="15" fill="rgb(245,154,51)"/><text x="79.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="76" y="772" width="1" height="15" fill="rgb(228,30,37)"/><text x="79.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="76" y="788" width="1" height="15" fill="rgb(211,75,43)"/><text x="79.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="76" y="804" width="1" height="15" fill="rgb(213,211,17)"/><text x="79.00" y="814.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py:4) (3 samples, 0.09%)</title><rect x="77" y="148" width="1" height="15" fill="rgb(237,23,11)"/><text x="80.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="77" y="164" width="1" height="15" fill="rgb(243,182,13)"/><text x="80.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.09%)</title><rect x="77" y="180" width="1" height="15" fill="rgb(254,35,35)"/><text x="80.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="77" y="196" width="1" height="15" fill="rgb(247,76,47)"/><text x="80.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="77" y="212" width="1" height="15" fill="rgb(242,91,8)"/><text x="80.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="77" y="228" width="1" height="15" fill="rgb(245,90,11)"/><text x="80.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="77" y="244" width="1" height="15" fill="rgb(230,9,35)"/><text x="80.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="77" y="260" width="1" height="15" fill="rgb(248,16,17)"/><text x="80.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="77" y="276" width="1" height="15" fill="rgb(215,129,10)"/><text x="80.00" y="286.50"></text></g><g><title>&lt;module&gt; (sklearn/__init__.py:74) (3 samples, 0.09%)</title><rect x="77" y="292" width="1" height="15" fill="rgb(253,215,45)"/><text x="80.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="77" y="308" width="1" height="15" fill="rgb(208,52,31)"/><text x="80.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="77" y="324" width="1" height="15" fill="rgb(230,108,43)"/><text x="80.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="77" y="340" width="1" height="15" fill="rgb(229,180,50)"/><text x="80.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="77" y="356" width="1" height="15" fill="rgb(217,179,36)"/><text x="80.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="77" y="372" width="1" height="15" fill="rgb(211,79,6)"/><text x="80.00" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py:20) (3 samples, 0.09%)</title><rect x="77" y="388" width="1" height="15" fill="rgb(251,3,33)"/><text x="80.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="77" y="404" width="1" height="15" fill="rgb(231,48,42)"/><text x="80.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="77" y="420" width="1" height="15" fill="rgb(220,190,15)"/><text x="80.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="77" y="436" width="1" height="15" fill="rgb(230,74,28)"/><text x="80.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="77" y="452" width="1" height="15" fill="rgb(214,50,1)"/><text x="80.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="77" y="468" width="1" height="15" fill="rgb(236,13,48)"/><text x="80.00" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py:25) (3 samples, 0.09%)</title><rect x="77" y="484" width="1" height="15" fill="rgb(240,228,33)"/><text x="80.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="77" y="500" width="1" height="15" fill="rgb(214,163,30)"/><text x="80.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="77" y="516" width="1" height="15" fill="rgb(252,80,43)"/><text x="80.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="77" y="532" width="1" height="15" fill="rgb(249,33,33)"/><text x="80.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="77" y="548" width="1" height="15" fill="rgb(234,60,20)"/><text x="80.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="77" y="564" width="1" height="15" fill="rgb(212,212,42)"/><text x="80.00" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py:18) (3 samples, 0.09%)</title><rect x="77" y="580" width="1" height="15" fill="rgb(219,69,3)"/><text x="80.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="77" y="596" width="1" height="15" fill="rgb(241,18,44)"/><text x="80.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="77" y="612" width="1" height="15" fill="rgb(206,167,37)"/><text x="80.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="77" y="628" width="1" height="15" fill="rgb(237,66,31)"/><text x="80.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="77" y="644" width="1" height="15" fill="rgb(246,59,23)"/><text x="80.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="77" y="660" width="1" height="15" fill="rgb(219,217,4)"/><text x="80.00" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py:379) (3 samples, 0.09%)</title><rect x="77" y="676" width="1" height="15" fill="rgb(219,175,54)"/><text x="80.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="77" y="692" width="1" height="15" fill="rgb(231,218,2)"/><text x="80.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="77" y="708" width="1" height="15" fill="rgb(223,39,0)"/><text x="80.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="77" y="724" width="1" height="15" fill="rgb(205,203,14)"/><text x="80.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="77" y="740" width="1" height="15" fill="rgb(213,99,20)"/><text x="80.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="77" y="756" width="1" height="15" fill="rgb(209,147,40)"/><text x="80.00" y="766.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:4) (11 samples, 0.34%)</title><rect x="76" y="52" width="4" height="15" fill="rgb(223,72,23)"/><text x="79.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.34%)</title><rect x="76" y="68" width="4" height="15" fill="rgb(211,52,39)"/><text x="79.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 0.34%)</title><rect x="76" y="84" width="4" height="15" fill="rgb(231,100,47)"/><text x="79.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 0.34%)</title><rect x="76" y="100" width="4" height="15" fill="rgb(247,75,9)"/><text x="79.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 0.34%)</title><rect x="76" y="116" width="4" height="15" fill="rgb(246,14,27)"/><text x="79.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.34%)</title><rect x="76" y="132" width="4" height="15" fill="rgb(208,155,22)"/><text x="79.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_m_cl.py:7) (5 samples, 0.16%)</title><rect x="78" y="148" width="2" height="15" fill="rgb(241,36,30)"/><text x="81.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.16%)</title><rect x="78" y="164" width="2" height="15" fill="rgb(207,201,51)"/><text x="81.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.16%)</title><rect x="78" y="180" width="2" height="15" fill="rgb(254,71,30)"/><text x="81.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.16%)</title><rect x="78" y="196" width="2" height="15" fill="rgb(249,159,22)"/><text x="81.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.16%)</title><rect x="78" y="212" width="2" height="15" fill="rgb(235,182,31)"/><text x="81.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.16%)</title><rect x="78" y="228" width="2" height="15" fill="rgb(221,182,33)"/><text x="81.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (4 samples, 0.13%)</title><rect x="79" y="244" width="1" height="15" fill="rgb(215,208,48)"/><text x="82.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.13%)</title><rect x="79" y="260" width="1" height="15" fill="rgb(207,194,2)"/><text x="82.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.13%)</title><rect x="79" y="276" width="1" height="15" fill="rgb(228,110,5)"/><text x="82.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.13%)</title><rect x="79" y="292" width="1" height="15" fill="rgb(247,93,45)"/><text x="82.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.13%)</title><rect x="79" y="308" width="1" height="15" fill="rgb(226,77,25)"/><text x="82.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.13%)</title><rect x="79" y="324" width="1" height="15" fill="rgb(210,84,52)"/><text x="82.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (4 samples, 0.13%)</title><rect x="79" y="340" width="1" height="15" fill="rgb(212,76,3)"/><text x="82.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.13%)</title><rect x="79" y="356" width="1" height="15" fill="rgb(212,221,21)"/><text x="82.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.13%)</title><rect x="79" y="372" width="1" height="15" fill="rgb(225,208,35)"/><text x="82.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.13%)</title><rect x="79" y="388" width="1" height="15" fill="rgb(244,220,7)"/><text x="82.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.13%)</title><rect x="79" y="404" width="1" height="15" fill="rgb(230,160,46)"/><text x="82.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.13%)</title><rect x="79" y="420" width="1" height="15" fill="rgb(251,26,51)"/><text x="82.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (3 samples, 0.09%)</title><rect x="79" y="436" width="1" height="15" fill="rgb(245,4,42)"/><text x="82.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="452" width="1" height="15" fill="rgb(228,26,43)"/><text x="82.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.09%)</title><rect x="79" y="468" width="1" height="15" fill="rgb(209,152,38)"/><text x="82.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="484" width="1" height="15" fill="rgb(228,121,41)"/><text x="82.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="500" width="1" height="15" fill="rgb(249,19,48)"/><text x="82.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="516" width="1" height="15" fill="rgb(244,136,51)"/><text x="82.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="532" width="1" height="15" fill="rgb(206,181,29)"/><text x="82.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="548" width="1" height="15" fill="rgb(224,71,12)"/><text x="82.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="564" width="1" height="15" fill="rgb(244,128,19)"/><text x="82.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (3 samples, 0.09%)</title><rect x="79" y="580" width="1" height="15" fill="rgb(225,75,33)"/><text x="82.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="596" width="1" height="15" fill="rgb(220,55,31)"/><text x="82.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="612" width="1" height="15" fill="rgb(213,147,53)"/><text x="82.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="628" width="1" height="15" fill="rgb(240,156,14)"/><text x="82.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="644" width="1" height="15" fill="rgb(237,103,44)"/><text x="82.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="660" width="1" height="15" fill="rgb(235,109,26)"/><text x="82.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (3 samples, 0.09%)</title><rect x="79" y="676" width="1" height="15" fill="rgb(209,31,36)"/><text x="82.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="692" width="1" height="15" fill="rgb(212,92,51)"/><text x="82.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="708" width="1" height="15" fill="rgb(231,30,24)"/><text x="82.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="724" width="1" height="15" fill="rgb(207,206,36)"/><text x="82.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="740" width="1" height="15" fill="rgb(218,203,31)"/><text x="82.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="756" width="1" height="15" fill="rgb(219,90,47)"/><text x="82.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (3 samples, 0.09%)</title><rect x="79" y="772" width="1" height="15" fill="rgb(226,15,22)"/><text x="82.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="788" width="1" height="15" fill="rgb(241,140,1)"/><text x="82.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="804" width="1" height="15" fill="rgb(221,228,54)"/><text x="82.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="820" width="1" height="15" fill="rgb(232,192,9)"/><text x="82.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="836" width="1" height="15" fill="rgb(253,92,36)"/><text x="82.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="852" width="1" height="15" fill="rgb(212,18,29)"/><text x="82.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (3 samples, 0.09%)</title><rect x="79" y="868" width="1" height="15" fill="rgb(238,83,14)"/><text x="82.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="884" width="1" height="15" fill="rgb(228,45,33)"/><text x="82.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.09%)</title><rect x="79" y="900" width="1" height="15" fill="rgb(230,223,38)"/><text x="82.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="916" width="1" height="15" fill="rgb(241,27,27)"/><text x="82.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="932" width="1" height="15" fill="rgb(251,3,38)"/><text x="82.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="948" width="1" height="15" fill="rgb(227,13,31)"/><text x="82.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="964" width="1" height="15" fill="rgb(246,226,36)"/><text x="82.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="980" width="1" height="15" fill="rgb(231,212,10)"/><text x="82.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="996" width="1" height="15" fill="rgb(217,46,21)"/><text x="82.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (3 samples, 0.09%)</title><rect x="79" y="1012" width="1" height="15" fill="rgb(209,82,3)"/><text x="82.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="1028" width="1" height="15" fill="rgb(254,105,40)"/><text x="82.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="1044" width="1" height="15" fill="rgb(218,76,12)"/><text x="82.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="1060" width="1" height="15" fill="rgb(211,62,31)"/><text x="82.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="1076" width="1" height="15" fill="rgb(215,0,15)"/><text x="82.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="1092" width="1" height="15" fill="rgb(225,173,0)"/><text x="82.00" y="1102.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (3 samples, 0.09%)</title><rect x="85" y="260" width="1" height="15" fill="rgb(247,33,43)"/><text x="88.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (5 samples, 0.16%)</title><rect x="87" y="308" width="2" height="15" fill="rgb(248,180,20)"/><text x="90.00" y="318.50"></text></g><g><title>array_copy (methods.c:1133) (4 samples, 0.13%)</title><rect x="87" y="324" width="2" height="15" fill="rgb(224,120,25)"/><text x="90.00" y="334.50"></text></g><g><title>PyArray_NewCopy (convert.c:560) (3 samples, 0.09%)</title><rect x="88" y="340" width="1" height="15" fill="rgb(218,15,51)"/><text x="91.00" y="350.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (19 samples, 0.60%)</title><rect x="87" y="276" width="7" height="15" fill="rgb(207,62,35)"/><text x="90.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (19 samples, 0.60%)</title><rect x="87" y="292" width="7" height="15" fill="rgb(220,97,10)"/><text x="90.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (12 samples, 0.38%)</title><rect x="89" y="308" width="5" height="15" fill="rgb(236,21,41)"/><text x="92.00" y="318.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (11 samples, 0.34%)</title><rect x="90" y="324" width="4" height="15" fill="rgb(241,51,19)"/><text x="93.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (10 samples, 0.31%)</title><rect x="90" y="340" width="4" height="15" fill="rgb(231,97,19)"/><text x="93.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (7 samples, 0.22%)</title><rect x="91" y="356" width="3" height="15" fill="rgb(239,178,48)"/><text x="94.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (4 samples, 0.13%)</title><rect x="92" y="372" width="2" height="15" fill="rgb(215,85,29)"/><text x="95.00" y="382.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (3 samples, 0.09%)</title><rect x="93" y="388" width="1" height="15" fill="rgb(243,195,1)"/><text x="96.00" y="398.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (5 samples, 0.16%)</title><rect x="94" y="276" width="2" height="15" fill="rgb(240,34,7)"/><text x="97.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (5 samples, 0.16%)</title><rect x="94" y="292" width="2" height="15" fill="rgb(235,187,33)"/><text x="97.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (4 samples, 0.13%)</title><rect x="94" y="308" width="2" height="15" fill="rgb(249,101,24)"/><text x="97.00" y="318.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (4 samples, 0.13%)</title><rect x="94" y="324" width="2" height="15" fill="rgb(208,217,46)"/><text x="97.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (4 samples, 0.13%)</title><rect x="94" y="340" width="2" height="15" fill="rgb(212,89,20)"/><text x="97.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (4 samples, 0.13%)</title><rect x="94" y="356" width="2" height="15" fill="rgb(225,188,49)"/><text x="97.00" y="366.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (4 samples, 0.13%)</title><rect x="94" y="372" width="2" height="15" fill="rgb(244,207,53)"/><text x="97.00" y="382.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (28 samples, 0.88%)</title><rect x="86" y="260" width="10" height="15" fill="rgb(234,56,38)"/><text x="89.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (3 samples, 0.09%)</title><rect x="96" y="260" width="1" height="15" fill="rgb(232,140,32)"/><text x="99.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (5 samples, 0.16%)</title><rect x="98" y="260" width="2" height="15" fill="rgb(243,76,46)"/><text x="101.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (46 samples, 1.44%)</title><rect x="83" y="244" width="17" height="15" fill="rgb(240,44,30)"/><text x="86.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (56 samples, 1.75%)</title><rect x="81" y="212" width="21" height="15" fill="rgb(228,135,47)"/><text x="84.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (52 samples, 1.63%)</title><rect x="82" y="228" width="20" height="15" fill="rgb(254,197,35)"/><text x="85.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.13%)</title><rect x="102" y="244" width="1" height="15" fill="rgb(234,147,43)"/><text x="105.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (5 samples, 0.16%)</title><rect x="102" y="212" width="2" height="15" fill="rgb(244,202,46)"/><text x="105.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (5 samples, 0.16%)</title><rect x="102" y="228" width="2" height="15" fill="rgb(237,223,20)"/><text x="105.00" y="238.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:18) (66 samples, 2.07%)</title><rect x="80" y="100" width="24" height="15" fill="rgb(245,117,0)"/><text x="83.00" y="110.50">p..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (66 samples, 2.07%)</title><rect x="80" y="116" width="24" height="15" fill="rgb(229,72,8)"/><text x="83.00" y="126.50">t..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (66 samples, 2.07%)</title><rect x="80" y="132" width="24" height="15" fill="rgb(245,152,50)"/><text x="83.00" y="142.50">&lt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (66 samples, 2.07%)</title><rect x="80" y="148" width="24" height="15" fill="rgb(216,23,1)"/><text x="83.00" y="158.50">r..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (66 samples, 2.07%)</title><rect x="80" y="164" width="24" height="15" fill="rgb(223,207,37)"/><text x="83.00" y="174.50">_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (66 samples, 2.07%)</title><rect x="80" y="180" width="24" height="15" fill="rgb(239,227,51)"/><text x="83.00" y="190.50">r..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (65 samples, 2.04%)</title><rect x="80" y="196" width="24" height="15" fill="rgb(208,19,47)"/><text x="83.00" y="206.50">r..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (3 samples, 0.09%)</title><rect x="113" y="196" width="1" height="15" fill="rgb(242,93,52)"/><text x="116.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (17 samples, 0.53%)</title><rect x="109" y="180" width="7" height="15" fill="rgb(233,168,5)"/><text x="112.00" y="190.50"></text></g><g><title>array_subscript (mapping.c:1539) (3 samples, 0.09%)</title><rect x="122" y="228" width="1" height="15" fill="rgb(214,103,43)"/><text x="125.00" y="238.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2823) (3 samples, 0.09%)</title><rect x="124" y="244" width="2" height="15" fill="rgb(248,73,15)"/><text x="127.00" y="254.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c:517) (3 samples, 0.09%)</title><rect x="124" y="260" width="2" height="15" fill="rgb(225,179,6)"/><text x="127.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (10 samples, 0.31%)</title><rect x="122" y="212" width="4" height="15" fill="rgb(251,164,23)"/><text x="125.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1656) (7 samples, 0.22%)</title><rect x="123" y="228" width="3" height="15" fill="rgb(208,65,41)"/><text x="126.00" y="238.50"></text></g><g><title>array_astype (methods.c:799) (5 samples, 0.16%)</title><rect x="127" y="244" width="2" height="15" fill="rgb(207,14,13)"/><text x="130.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_cast.py:37) (9 samples, 0.28%)</title><rect x="127" y="212" width="3" height="15" fill="rgb(223,31,24)"/><text x="130.00" y="222.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/onnxrt/ops_cpu/op_cast.py:34) (9 samples, 0.28%)</title><rect x="127" y="228" width="3" height="15" fill="rgb(237,137,39)"/><text x="130.00" y="238.50"></text></g><g><title>array_astype (methods.c:845) (3 samples, 0.09%)</title><rect x="129" y="244" width="1" height="15" fill="rgb(225,153,10)"/><text x="132.00" y="254.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (3 samples, 0.09%)</title><rect x="129" y="260" width="1" height="15" fill="rgb(246,115,33)"/><text x="132.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_concat.py:30) (3 samples, 0.09%)</title><rect x="130" y="212" width="1" height="15" fill="rgb(215,183,32)"/><text x="133.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:79) (9 samples, 0.28%)</title><rect x="131" y="212" width="4" height="15" fill="rgb(217,75,7)"/><text x="134.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:82) (3 samples, 0.09%)</title><rect x="135" y="212" width="1" height="15" fill="rgb(231,153,24)"/><text x="138.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:939) (3 samples, 0.09%)</title><rect x="140" y="244" width="1" height="15" fill="rgb(225,131,18)"/><text x="143.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (4 samples, 0.13%)</title><rect x="141" y="244" width="2" height="15" fill="rgb(215,114,50)"/><text x="144.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (9 samples, 0.28%)</title><rect x="140" y="228" width="4" height="15" fill="rgb(226,57,30)"/><text x="143.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (24 samples, 0.75%)</title><rect x="137" y="212" width="8" height="15" fill="rgb(243,134,46)"/><text x="140.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:538) (3 samples, 0.09%)</title><rect x="144" y="228" width="1" height="15" fill="rgb(224,208,50)"/><text x="147.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (30 samples, 0.94%)</title><rect x="145" y="212" width="12" height="15" fill="rgb(212,149,1)"/><text x="148.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (9 samples, 0.28%)</title><rect x="157" y="212" width="4" height="15" fill="rgb(249,41,18)"/><text x="160.00" y="222.50"></text></g><g><title>prepare_index (mapping.c:491) (4 samples, 0.13%)</title><rect x="164" y="244" width="1" height="15" fill="rgb(220,93,15)"/><text x="167.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1539) (10 samples, 0.31%)</title><rect x="162" y="228" width="4" height="15" fill="rgb(217,170,44)"/><text x="165.00" y="238.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.09%)</title><rect x="167" y="276" width="1" height="15" fill="rgb(212,152,15)"/><text x="170.00" y="286.50"></text></g><g><title>array_subscript (mapping.c:1584) (13 samples, 0.41%)</title><rect x="166" y="228" width="5" height="15" fill="rgb(218,85,4)"/><text x="169.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (10 samples, 0.31%)</title><rect x="167" y="244" width="4" height="15" fill="rgb(220,35,15)"/><text x="170.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (9 samples, 0.28%)</title><rect x="167" y="260" width="4" height="15" fill="rgb(221,224,12)"/><text x="170.00" y="270.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1141) (3 samples, 0.09%)</title><rect x="170" y="276" width="1" height="15" fill="rgb(251,22,1)"/><text x="173.00" y="286.50"></text></g><g><title>PyArray_SetBaseObject (arrayobject.c:196) (3 samples, 0.09%)</title><rect x="170" y="292" width="1" height="15" fill="rgb(213,115,48)"/><text x="173.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (28 samples, 0.88%)</title><rect x="161" y="212" width="10" height="15" fill="rgb(237,185,12)"/><text x="164.00" y="222.50"></text></g><g><title>__munmap (libc-2.29.so) (15 samples, 0.47%)</title><rect x="183" y="228" width="6" height="15" fill="rgb(245,98,29)"/><text x="186.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:392) (22 samples, 0.69%)</title><rect x="189" y="228" width="8" height="15" fill="rgb(210,3,24)"/><text x="192.00" y="238.50"></text></g><g><title>mmap64 (libc-2.29.so) (6 samples, 0.19%)</title><rect x="195" y="244" width="2" height="15" fill="rgb(232,108,14)"/><text x="198.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (13 samples, 0.41%)</title><rect x="197" y="228" width="5" height="15" fill="rgb(209,149,15)"/><text x="200.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:401) (4 samples, 0.13%)</title><rect x="202" y="228" width="2" height="15" fill="rgb(245,116,50)"/><text x="205.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:423) (4 samples, 0.13%)</title><rect x="213" y="244" width="2" height="15" fill="rgb(233,4,41)"/><text x="216.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:426) (6 samples, 0.19%)</title><rect x="215" y="244" width="2" height="15" fill="rgb(206,179,26)"/><text x="218.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (6 samples, 0.19%)</title><rect x="217" y="244" width="2" height="15" fill="rgb(215,195,13)"/><text x="220.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (22 samples, 0.69%)</title><rect x="219" y="244" width="8" height="15" fill="rgb(243,220,10)"/><text x="222.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (18 samples, 0.56%)</title><rect x="227" y="244" width="7" height="15" fill="rgb(218,104,27)"/><text x="230.00" y="254.50"></text></g><g><title>unicode_eq (python3.7) (5 samples, 0.16%)</title><rect x="232" y="260" width="2" height="15" fill="rgb(210,70,51)"/><text x="235.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:447) (5 samples, 0.16%)</title><rect x="234" y="244" width="2" height="15" fill="rgb(244,13,16)"/><text x="237.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (8 samples, 0.25%)</title><rect x="236" y="244" width="3" height="15" fill="rgb(229,150,25)"/><text x="239.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (16 samples, 0.50%)</title><rect x="272" y="260" width="5" height="15" fill="rgb(229,141,47)"/><text x="275.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (232 samples, 7.27%)</title><rect x="277" y="260" width="86" height="15" fill="rgb(230,179,37)"/><text x="280.00" y="270.50">run (mlpro..</text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (33 samples, 1.03%)</title><rect x="351" y="276" width="12" height="15" fill="rgb(223,57,6)"/><text x="354.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:268) (8 samples, 0.25%)</title><rect x="404" y="292" width="3" height="15" fill="rgb(248,21,24)"/><text x="407.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (16 samples, 0.50%)</title><rect x="422" y="308" width="6" height="15" fill="rgb(229,102,53)"/><text x="425.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:18) (3 samples, 0.09%)</title><rect x="428" y="308" width="1" height="15" fill="rgb(243,204,28)"/><text x="431.00" y="318.50"></text></g><g><title>array_copy (methods.c:1127) (6 samples, 0.19%)</title><rect x="433" y="324" width="2" height="15" fill="rgb(240,158,46)"/><text x="436.00" y="334.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (4 samples, 0.13%)</title><rect x="438" y="404" width="1" height="15" fill="rgb(228,164,18)"/><text x="441.00" y="414.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (4 samples, 0.13%)</title><rect x="438" y="420" width="1" height="15" fill="rgb(236,131,20)"/><text x="441.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (3 samples, 0.09%)</title><rect x="440" y="404" width="2" height="15" fill="rgb(244,175,49)"/><text x="443.00" y="414.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (18 samples, 0.56%)</title><rect x="436" y="340" width="7" height="15" fill="rgb(236,18,37)"/><text x="439.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (13 samples, 0.41%)</title><rect x="438" y="356" width="5" height="15" fill="rgb(253,60,35)"/><text x="441.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (13 samples, 0.41%)</title><rect x="438" y="372" width="5" height="15" fill="rgb(217,156,18)"/><text x="441.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (13 samples, 0.41%)</title><rect x="438" y="388" width="5" height="15" fill="rgb(244,212,40)"/><text x="441.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:370) (3 samples, 0.09%)</title><rect x="444" y="356" width="1" height="15" fill="rgb(220,107,12)"/><text x="447.00" y="366.50"></text></g><g><title>broadcast_strides (array_assign.c:34) (3 samples, 0.09%)</title><rect x="444" y="372" width="1" height="15" fill="rgb(245,185,47)"/><text x="447.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:120) (4 samples, 0.13%)</title><rect x="446" y="372" width="1" height="15" fill="rgb(210,114,21)"/><text x="449.00" y="382.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (4 samples, 0.13%)</title><rect x="450" y="388" width="1" height="15" fill="rgb(213,162,13)"/><text x="453.00" y="398.50"></text></g><g><title>__GI___pthread_mutex_unlock (libpthread-2.29.so) (4 samples, 0.13%)</title><rect x="451" y="388" width="2" height="15" fill="rgb(214,55,35)"/><text x="454.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (18 samples, 0.56%)</title><rect x="447" y="372" width="7" height="15" fill="rgb(251,187,36)"/><text x="450.00" y="382.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (libpthread-2.29.so) (3 samples, 0.09%)</title><rect x="453" y="388" width="1" height="15" fill="rgb(205,166,42)"/><text x="456.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (3 samples, 0.09%)</title><rect x="455" y="372" width="1" height="15" fill="rgb(227,0,51)"/><text x="458.00" y="382.50"></text></g><g><title>__errno_location (libpthread-2.29.so) (5 samples, 0.16%)</title><rect x="457" y="388" width="2" height="15" fill="rgb(242,126,49)"/><text x="460.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (9 samples, 0.28%)</title><rect x="456" y="372" width="3" height="15" fill="rgb(216,114,29)"/><text x="459.00" y="382.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (10 samples, 0.31%)</title><rect x="461" y="388" width="4" height="15" fill="rgb(205,3,18)"/><text x="464.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (8 samples, 0.25%)</title><rect x="462" y="404" width="3" height="15" fill="rgb(249,116,7)"/><text x="465.00" y="414.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (56 samples, 1.75%)</title><rect x="446" y="356" width="20" height="15" fill="rgb(238,102,27)"/><text x="449.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (15 samples, 0.47%)</title><rect x="461" y="372" width="5" height="15" fill="rgb(253,55,35)"/><text x="464.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (102 samples, 3.19%)</title><rect x="429" y="308" width="38" height="15" fill="rgb(211,99,10)"/><text x="432.00" y="318.50">_ru..</text></g><g><title>array_copy (methods.c:1133) (85 samples, 2.66%)</title><rect x="435" y="324" width="32" height="15" fill="rgb(206,149,18)"/><text x="438.00" y="334.50">ar..</text></g><g><title>PyArray_NewCopy (convert.c:560) (65 samples, 2.04%)</title><rect x="443" y="340" width="24" height="15" fill="rgb(230,41,17)"/><text x="446.00" y="350.50">P..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (5 samples, 0.16%)</title><rect x="476" y="340" width="2" height="15" fill="rgb(253,183,54)"/><text x="479.00" y="350.50"></text></g><g><title>get_ufunc_arguments (ufunc_object.c:1102) (4 samples, 0.13%)</title><rect x="477" y="356" width="1" height="15" fill="rgb(254,31,20)"/><text x="480.00" y="366.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2002) (4 samples, 0.13%)</title><rect x="480" y="356" width="1" height="15" fill="rgb(241,224,14)"/><text x="483.00" y="366.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2006) (3 samples, 0.09%)</title><rect x="481" y="356" width="2" height="15" fill="rgb(242,27,14)"/><text x="484.00" y="366.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:965) (3 samples, 0.09%)</title><rect x="485" y="388" width="2" height="15" fill="rgb(217,9,17)"/><text x="488.00" y="398.50"></text></g><g><title>PyArray_EquivTypenums (multiarraymodule.c:1520) (3 samples, 0.09%)</title><rect x="488" y="420" width="1" height="15" fill="rgb(241,106,30)"/><text x="491.00" y="430.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:757) (7 samples, 0.22%)</title><rect x="488" y="404" width="2" height="15" fill="rgb(217,88,6)"/><text x="491.00" y="414.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (15 samples, 0.47%)</title><rect x="485" y="372" width="6" height="15" fill="rgb(237,38,33)"/><text x="488.00" y="382.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (12 samples, 0.38%)</title><rect x="487" y="388" width="4" height="15" fill="rgb(241,33,18)"/><text x="490.00" y="398.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (25 samples, 0.78%)</title><rect x="483" y="356" width="9" height="15" fill="rgb(220,6,45)"/><text x="486.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (38 samples, 1.19%)</title><rect x="478" y="340" width="15" height="15" fill="rgb(245,170,46)"/><text x="481.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3215) (3 samples, 0.09%)</title><rect x="493" y="340" width="1" height="15" fill="rgb(248,69,8)"/><text x="496.00" y="350.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (4 samples, 0.13%)</title><rect x="497" y="404" width="1" height="15" fill="rgb(251,43,17)"/><text x="500.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (6 samples, 0.19%)</title><rect x="497" y="388" width="2" height="15" fill="rgb(239,134,52)"/><text x="500.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (17 samples, 0.53%)</title><rect x="499" y="388" width="6" height="15" fill="rgb(248,146,34)"/><text x="502.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (16 samples, 0.50%)</title><rect x="499" y="404" width="6" height="15" fill="rgb(248,94,18)"/><text x="502.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (16 samples, 0.50%)</title><rect x="499" y="420" width="6" height="15" fill="rgb(254,119,37)"/><text x="502.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (15 samples, 0.47%)</title><rect x="500" y="436" width="5" height="15" fill="rgb(236,14,18)"/><text x="503.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (33 samples, 1.03%)</title><rect x="496" y="356" width="12" height="15" fill="rgb(209,76,15)"/><text x="499.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (32 samples, 1.00%)</title><rect x="496" y="372" width="12" height="15" fill="rgb(238,155,16)"/><text x="499.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (47 samples, 1.47%)</title><rect x="495" y="340" width="17" height="15" fill="rgb(241,102,29)"/><text x="498.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (11 samples, 0.34%)</title><rect x="508" y="356" width="4" height="15" fill="rgb(230,38,51)"/><text x="511.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1355) (10 samples, 0.31%)</title><rect x="509" y="372" width="3" height="15" fill="rgb(216,44,44)"/><text x="512.00" y="382.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (105 samples, 3.29%)</title><rect x="475" y="324" width="39" height="15" fill="rgb(218,208,5)"/><text x="478.00" y="334.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (4 samples, 0.13%)</title><rect x="512" y="340" width="2" height="15" fill="rgb(226,194,31)"/><text x="515.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (131 samples, 4.10%)</title><rect x="467" y="308" width="48" height="15" fill="rgb(241,95,41)"/><text x="470.00" y="318.50">_run..</text></g><g><title>_buffer_clear_info (buffer.c:724) (6 samples, 0.19%)</title><rect x="529" y="356" width="3" height="15" fill="rgb(251,22,42)"/><text x="532.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (12 samples, 0.38%)</title><rect x="528" y="324" width="4" height="15" fill="rgb(230,156,33)"/><text x="531.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (9 samples, 0.28%)</title><rect x="529" y="340" width="3" height="15" fill="rgb(227,169,22)"/><text x="532.00" y="350.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (23 samples, 0.72%)</title><rect x="533" y="324" width="9" height="15" fill="rgb(217,116,39)"/><text x="536.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py:2042) (5 samples, 0.16%)</title><rect x="540" y="340" width="2" height="15" fill="rgb(237,127,32)"/><text x="543.00" y="350.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:5) (4 samples, 0.13%)</title><rect x="542" y="324" width="1" height="15" fill="rgb(245,77,26)"/><text x="545.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:234) (4 samples, 0.13%)</title><rect x="545" y="340" width="2" height="15" fill="rgb(220,38,29)"/><text x="548.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (9 samples, 0.28%)</title><rect x="552" y="356" width="4" height="15" fill="rgb(222,131,34)"/><text x="555.00" y="366.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (7 samples, 0.22%)</title><rect x="556" y="356" width="2" height="15" fill="rgb(245,51,3)"/><text x="559.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (17 samples, 0.53%)</title><rect x="582" y="388" width="6" height="15" fill="rgb(253,144,6)"/><text x="585.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (59 samples, 1.85%)</title><rect x="570" y="372" width="22" height="15" fill="rgb(215,192,28)"/><text x="573.00" y="382.50">_..</text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (11 samples, 0.34%)</title><rect x="588" y="388" width="4" height="15" fill="rgb(222,75,12)"/><text x="591.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (21 samples, 0.66%)</title><rect x="592" y="372" width="8" height="15" fill="rgb(217,206,41)"/><text x="595.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (19 samples, 0.60%)</title><rect x="607" y="420" width="7" height="15" fill="rgb(209,134,44)"/><text x="610.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (17 samples, 0.53%)</title><rect x="608" y="436" width="6" height="15" fill="rgb(216,147,17)"/><text x="611.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (8 samples, 0.25%)</title><rect x="612" y="452" width="2" height="15" fill="rgb(210,210,12)"/><text x="615.00" y="462.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (21 samples, 0.66%)</title><rect x="607" y="388" width="8" height="15" fill="rgb(229,47,11)"/><text x="610.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (21 samples, 0.66%)</title><rect x="607" y="404" width="8" height="15" fill="rgb(230,157,15)"/><text x="610.00" y="414.50"></text></g><g><title>unicode_eq (python3.7) (3 samples, 0.09%)</title><rect x="627" y="420" width="1" height="15" fill="rgb(239,138,50)"/><text x="630.00" y="430.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (33 samples, 1.03%)</title><rect x="617" y="404" width="12" height="15" fill="rgb(252,169,19)"/><text x="620.00" y="414.50"></text></g><g><title>unicode_hash (python3.7) (4 samples, 0.13%)</title><rect x="628" y="420" width="1" height="15" fill="rgb(241,19,11)"/><text x="631.00" y="430.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4519) (3 samples, 0.09%)</title><rect x="629" y="404" width="1" height="15" fill="rgb(237,146,0)"/><text x="632.00" y="414.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (4 samples, 0.13%)</title><rect x="631" y="452" width="2" height="15" fill="rgb(236,8,15)"/><text x="634.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4564) (8 samples, 0.25%)</title><rect x="631" y="404" width="3" height="15" fill="rgb(240,133,9)"/><text x="634.00" y="414.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (6 samples, 0.19%)</title><rect x="631" y="420" width="3" height="15" fill="rgb(212,167,27)"/><text x="634.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (6 samples, 0.19%)</title><rect x="631" y="436" width="3" height="15" fill="rgb(230,145,42)"/><text x="634.00" y="446.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3635) (3 samples, 0.09%)</title><rect x="636" y="420" width="1" height="15" fill="rgb(227,19,52)"/><text x="639.00" y="430.50"></text></g><g><title>_get_identity (ufunc_object.c:2464) (3 samples, 0.09%)</title><rect x="636" y="436" width="1" height="15" fill="rgb(215,196,22)"/><text x="639.00" y="446.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (19 samples, 0.60%)</title><rect x="637" y="420" width="7" height="15" fill="rgb(231,118,15)"/><text x="640.00" y="430.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (17 samples, 0.53%)</title><rect x="637" y="436" width="7" height="15" fill="rgb(233,174,42)"/><text x="640.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (10 samples, 0.31%)</title><rect x="640" y="452" width="4" height="15" fill="rgb(226,222,37)"/><text x="643.00" y="462.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2215) (3 samples, 0.09%)</title><rect x="643" y="468" width="1" height="15" fill="rgb(246,42,40)"/><text x="646.00" y="478.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (12 samples, 0.38%)</title><rect x="645" y="468" width="4" height="15" fill="rgb(228,227,2)"/><text x="648.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (10 samples, 0.31%)</title><rect x="646" y="484" width="3" height="15" fill="rgb(238,100,41)"/><text x="649.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.09%)</title><rect x="650" y="500" width="1" height="15" fill="rgb(230,137,4)"/><text x="653.00" y="510.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (8 samples, 0.25%)</title><rect x="652" y="500" width="3" height="15" fill="rgb(238,166,34)"/><text x="655.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (8 samples, 0.25%)</title><rect x="652" y="516" width="3" height="15" fill="rgb(217,19,14)"/><text x="655.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (7 samples, 0.22%)</title><rect x="652" y="532" width="3" height="15" fill="rgb(209,3,36)"/><text x="655.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.19%)</title><rect x="653" y="548" width="2" height="15" fill="rgb(213,131,48)"/><text x="656.00" y="558.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (4 samples, 0.13%)</title><rect x="655" y="532" width="1" height="15" fill="rgb(227,52,8)"/><text x="658.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (4 samples, 0.13%)</title><rect x="655" y="548" width="1" height="15" fill="rgb(205,198,47)"/><text x="658.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.13%)</title><rect x="655" y="564" width="1" height="15" fill="rgb(248,153,48)"/><text x="658.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (6 samples, 0.19%)</title><rect x="655" y="500" width="2" height="15" fill="rgb(212,94,21)"/><text x="658.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (6 samples, 0.19%)</title><rect x="655" y="516" width="2" height="15" fill="rgb(205,221,6)"/><text x="658.00" y="526.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c:66) (3 samples, 0.09%)</title><rect x="657" y="516" width="1" height="15" fill="rgb(252,195,3)"/><text x="660.00" y="526.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1139) (7 samples, 0.22%)</title><rect x="657" y="500" width="3" height="15" fill="rgb(242,168,54)"/><text x="660.00" y="510.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c:69) (4 samples, 0.13%)</title><rect x="658" y="516" width="2" height="15" fill="rgb(220,144,50)"/><text x="661.00" y="526.50"></text></g><g><title>IsAligned (array_assign.c:140) (3 samples, 0.09%)</title><rect x="658" y="532" width="2" height="15" fill="rgb(209,20,30)"/><text x="661.00" y="542.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (43 samples, 1.35%)</title><rect x="644" y="436" width="16" height="15" fill="rgb(237,161,45)"/><text x="647.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (43 samples, 1.35%)</title><rect x="644" y="452" width="16" height="15" fill="rgb(218,0,37)"/><text x="647.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (27 samples, 0.85%)</title><rect x="650" y="468" width="10" height="15" fill="rgb(218,96,12)"/><text x="653.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (26 samples, 0.81%)</title><rect x="650" y="484" width="10" height="15" fill="rgb(236,216,2)"/><text x="653.00" y="494.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:415) (4 samples, 0.13%)</title><rect x="660" y="452" width="2" height="15" fill="rgb(242,23,40)"/><text x="663.00" y="462.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (12 samples, 0.38%)</title><rect x="665" y="484" width="5" height="15" fill="rgb(222,204,39)"/><text x="668.00" y="494.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c:741) (9 samples, 0.28%)</title><rect x="667" y="500" width="3" height="15" fill="rgb(222,225,6)"/><text x="670.00" y="510.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src:955) (5 samples, 0.16%)</title><rect x="668" y="516" width="2" height="15" fill="rgb(219,42,50)"/><text x="671.00" y="526.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (29 samples, 0.91%)</title><rect x="660" y="436" width="11" height="15" fill="rgb(231,162,17)"/><text x="663.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (23 samples, 0.72%)</title><rect x="662" y="452" width="9" height="15" fill="rgb(253,33,2)"/><text x="665.00" y="462.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (21 samples, 0.66%)</title><rect x="663" y="468" width="8" height="15" fill="rgb(216,74,52)"/><text x="666.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (7 samples, 0.22%)</title><rect x="672" y="452" width="2" height="15" fill="rgb(205,84,20)"/><text x="675.00" y="462.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (4 samples, 0.13%)</title><rect x="675" y="468" width="2" height="15" fill="rgb(253,130,15)"/><text x="678.00" y="478.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (7 samples, 0.22%)</title><rect x="674" y="452" width="3" height="15" fill="rgb(212,58,16)"/><text x="677.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (8 samples, 0.25%)</title><rect x="678" y="452" width="3" height="15" fill="rgb(211,117,30)"/><text x="681.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:319) (4 samples, 0.13%)</title><rect x="681" y="452" width="2" height="15" fill="rgb(219,67,37)"/><text x="684.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (6 samples, 0.19%)</title><rect x="683" y="452" width="2" height="15" fill="rgb(238,60,33)"/><text x="686.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (3 samples, 0.09%)</title><rect x="685" y="452" width="2" height="15" fill="rgb(254,103,12)"/><text x="688.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (6 samples, 0.19%)</title><rect x="687" y="452" width="2" height="15" fill="rgb(246,39,9)"/><text x="690.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (51 samples, 1.60%)</title><rect x="671" y="436" width="19" height="15" fill="rgb(221,136,6)"/><text x="674.00" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:550) (3 samples, 0.09%)</title><rect x="690" y="436" width="1" height="15" fill="rgb(213,149,11)"/><text x="693.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3486) (5 samples, 0.16%)</title><rect x="692" y="452" width="2" height="15" fill="rgb(209,106,7)"/><text x="695.00" y="462.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (ufunc_type_resolution.c:1473) (3 samples, 0.09%)</title><rect x="693" y="468" width="1" height="15" fill="rgb(218,100,25)"/><text x="696.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (11 samples, 0.34%)</title><rect x="692" y="436" width="5" height="15" fill="rgb(234,28,44)"/><text x="695.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (6 samples, 0.19%)</title><rect x="694" y="452" width="3" height="15" fill="rgb(220,75,34)"/><text x="697.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (5 samples, 0.16%)</title><rect x="695" y="468" width="2" height="15" fill="rgb(234,215,17)"/><text x="698.00" y="478.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (3 samples, 0.09%)</title><rect x="697" y="452" width="1" height="15" fill="rgb(205,168,8)"/><text x="700.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (8 samples, 0.25%)</title><rect x="697" y="436" width="3" height="15" fill="rgb(252,48,4)"/><text x="700.00" y="446.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (4 samples, 0.13%)</title><rect x="699" y="452" width="1" height="15" fill="rgb(234,11,40)"/><text x="702.00" y="462.50"></text></g><g><title>PyArray_RemoveAxesInPlace (shape.c:1054) (3 samples, 0.09%)</title><rect x="700" y="452" width="1" height="15" fill="rgb(252,215,52)"/><text x="703.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (183 samples, 5.73%)</title><rect x="634" y="404" width="68" height="15" fill="rgb(220,203,4)"/><text x="637.00" y="414.50">PyUFunc..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (157 samples, 4.92%)</title><rect x="644" y="420" width="58" height="15" fill="rgb(235,74,6)"/><text x="647.00" y="430.50">PyUFun..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:595) (4 samples, 0.13%)</title><rect x="700" y="436" width="2" height="15" fill="rgb(250,191,44)"/><text x="703.00" y="446.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (419 samples, 13.12%)</title><rect x="548" y="340" width="154" height="15" fill="rgb(236,218,28)"/><text x="551.00" y="350.50">array_implement_arr..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (390 samples, 12.21%)</title><rect x="558" y="356" width="144" height="15" fill="rgb(217,134,14)"/><text x="561.00" y="366.50">sum (numpy/core/fr..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (277 samples, 8.68%)</title><rect x="600" y="372" width="102" height="15" fill="rgb(243,179,35)"/><text x="603.00" y="382.50">_wrapreducti..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (236 samples, 7.39%)</title><rect x="615" y="388" width="87" height="15" fill="rgb(211,131,38)"/><text x="618.00" y="398.50">ufunc_redu..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (800 samples, 25.05%)</title><rect x="407" y="292" width="296" height="15" fill="rgb(220,169,10)"/><text x="410.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py:26..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (508 samples, 15.91%)</title><rect x="515" y="308" width="188" height="15" fill="rgb(220,216,7)"/><text x="518.00" y="318.50">_run (mlprodict/onnxrt/o..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (432 samples, 13.53%)</title><rect x="543" y="324" width="160" height="15" fill="rgb(239,49,54)"/><text x="546.00" y="334.50">sum (&lt;__array_functi..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (839 samples, 26.28%)</title><rect x="393" y="276" width="311" height="15" fill="rgb(218,96,9)"/><text x="396.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py:348)</text></g><g><title>arraydescr_richcompare (descriptor.c:3210) (3 samples, 0.09%)</title><rect x="715" y="292" width="1" height="15" fill="rgb(254,104,53)"/><text x="718.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (39 samples, 1.22%)</title><rect x="704" y="276" width="14" height="15" fill="rgb(244,128,37)"/><text x="707.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (12 samples, 0.38%)</title><rect x="721" y="292" width="4" height="15" fill="rgb(210,46,0)"/><text x="724.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:519) (7 samples, 0.22%)</title><rect x="729" y="308" width="3" height="15" fill="rgb(221,4,26)"/><text x="732.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:527) (6 samples, 0.19%)</title><rect x="732" y="308" width="2" height="15" fill="rgb(244,170,32)"/><text x="735.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (3 samples, 0.09%)</title><rect x="739" y="340" width="1" height="15" fill="rgb(214,121,29)"/><text x="742.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (4 samples, 0.13%)</title><rect x="739" y="324" width="1" height="15" fill="rgb(221,93,18)"/><text x="742.00" y="334.50"></text></g><g><title>PyArray_PromoteTypes (convert_datatype.c:1070) (3 samples, 0.09%)</title><rect x="745" y="420" width="1" height="15" fill="rgb(229,109,48)"/><text x="748.00" y="430.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c:1905) (6 samples, 0.19%)</title><rect x="744" y="388" width="2" height="15" fill="rgb(226,169,34)"/><text x="747.00" y="398.50"></text></g><g><title>promote_types (convert_datatype.c:1043) (6 samples, 0.19%)</title><rect x="744" y="404" width="2" height="15" fill="rgb(205,155,26)"/><text x="747.00" y="414.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (13 samples, 0.41%)</title><rect x="742" y="372" width="5" height="15" fill="rgb(230,37,8)"/><text x="745.00" y="382.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (17 samples, 0.53%)</title><rect x="742" y="356" width="6" height="15" fill="rgb(219,5,24)"/><text x="745.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:563) (3 samples, 0.09%)</title><rect x="747" y="372" width="1" height="15" fill="rgb(252,52,24)"/><text x="750.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (18 samples, 0.56%)</title><rect x="742" y="340" width="7" height="15" fill="rgb(209,145,8)"/><text x="745.00" y="350.50"></text></g><g><title>_ufunc_setup_flags (ufunc_object.c:365) (3 samples, 0.09%)</title><rect x="749" y="356" width="1" height="15" fill="rgb(232,35,38)"/><text x="752.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3196) (5 samples, 0.16%)</title><rect x="749" y="340" width="1" height="15" fill="rgb(207,154,52)"/><text x="752.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (5 samples, 0.16%)</title><rect x="751" y="340" width="2" height="15" fill="rgb(251,4,26)"/><text x="754.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1610) (3 samples, 0.09%)</title><rect x="754" y="356" width="1" height="15" fill="rgb(224,151,9)"/><text x="757.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:130) (3 samples, 0.09%)</title><rect x="755" y="388" width="1" height="15" fill="rgb(219,211,33)"/><text x="758.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:183) (3 samples, 0.09%)</title><rect x="757" y="388" width="1" height="15" fill="rgb(230,210,16)"/><text x="760.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (4 samples, 0.13%)</title><rect x="758" y="388" width="1" height="15" fill="rgb(242,113,46)"/><text x="761.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1182) (4 samples, 0.13%)</title><rect x="760" y="404" width="2" height="15" fill="rgb(218,56,39)"/><text x="763.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (12 samples, 0.38%)</title><rect x="760" y="388" width="4" height="15" fill="rgb(246,73,21)"/><text x="763.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (6 samples, 0.19%)</title><rect x="762" y="404" width="2" height="15" fill="rgb(216,125,25)"/><text x="765.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (9 samples, 0.28%)</title><rect x="764" y="388" width="3" height="15" fill="rgb(209,227,38)"/><text x="767.00" y="398.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (12 samples, 0.38%)</title><rect x="770" y="404" width="5" height="15" fill="rgb(223,213,25)"/><text x="773.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (10 samples, 0.31%)</title><rect x="771" y="420" width="4" height="15" fill="rgb(250,5,35)"/><text x="774.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (8 samples, 0.25%)</title><rect x="772" y="436" width="3" height="15" fill="rgb(251,71,19)"/><text x="775.00" y="446.50"></text></g><g><title>npy_uint_alignment (common.h:216) (3 samples, 0.09%)</title><rect x="776" y="436" width="1" height="15" fill="rgb(206,22,51)"/><text x="779.00" y="446.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2995) (4 samples, 0.13%)</title><rect x="776" y="404" width="1" height="15" fill="rgb(219,103,16)"/><text x="779.00" y="414.50"></text></g><g><title>IsUintAligned (array_assign.c:148) (4 samples, 0.13%)</title><rect x="776" y="420" width="1" height="15" fill="rgb(254,99,20)"/><text x="779.00" y="430.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (27 samples, 0.85%)</title><rect x="769" y="388" width="10" height="15" fill="rgb(211,191,8)"/><text x="772.00" y="398.50"></text></g><g><title>npyiter_coalesce_axes (nditer_api.c:1623) (3 samples, 0.09%)</title><rect x="779" y="404" width="1" height="15" fill="rgb(249,188,32)"/><text x="782.00" y="414.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (4 samples, 0.13%)</title><rect x="779" y="388" width="1" height="15" fill="rgb(232,92,45)"/><text x="782.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (4 samples, 0.13%)</title><rect x="780" y="388" width="2" height="15" fill="rgb(246,19,34)"/><text x="783.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (72 samples, 2.25%)</title><rect x="755" y="372" width="27" height="15" fill="rgb(243,218,34)"/><text x="758.00" y="382.50">i..</text></g><g><title>iterator_loop (ufunc_object.c:1556) (3 samples, 0.09%)</title><rect x="782" y="372" width="1" height="15" fill="rgb(219,193,1)"/><text x="785.00" y="382.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (8 samples, 0.25%)</title><rect x="783" y="372" width="3" height="15" fill="rgb(207,224,10)"/><text x="786.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (6 samples, 0.19%)</title><rect x="784" y="388" width="2" height="15" fill="rgb(232,229,49)"/><text x="787.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1576) (4 samples, 0.13%)</title><rect x="787" y="372" width="1" height="15" fill="rgb(229,223,33)"/><text x="790.00" y="382.50"></text></g><g><title>FLOAT_subtract (loops.c.src:1755) (6 samples, 0.19%)</title><rect x="789" y="388" width="2" height="15" fill="rgb(230,12,50)"/><text x="792.00" y="398.50"></text></g><g><title>run_binary_simd_subtract_FLOAT (simd.inc.src:250) (4 samples, 0.13%)</title><rect x="789" y="404" width="2" height="15" fill="rgb(209,0,11)"/><text x="792.00" y="414.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (10 samples, 0.31%)</title><rect x="788" y="372" width="4" height="15" fill="rgb(231,94,54)"/><text x="791.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (3 samples, 0.09%)</title><rect x="792" y="388" width="1" height="15" fill="rgb(217,92,4)"/><text x="795.00" y="398.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (109 samples, 3.41%)</title><rect x="755" y="356" width="41" height="15" fill="rgb(239,87,52)"/><text x="758.00" y="366.50">exe..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (10 samples, 0.31%)</title><rect x="792" y="372" width="4" height="15" fill="rgb(236,139,11)"/><text x="795.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (5 samples, 0.16%)</title><rect x="794" y="388" width="2" height="15" fill="rgb(219,79,9)"/><text x="797.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (118 samples, 3.70%)</title><rect x="754" y="340" width="43" height="15" fill="rgb(230,70,41)"/><text x="757.00" y="350.50">PyUF..</text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (4 samples, 0.13%)</title><rect x="796" y="356" width="1" height="15" fill="rgb(216,47,35)"/><text x="799.00" y="366.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (3 samples, 0.09%)</title><rect x="796" y="372" width="1" height="15" fill="rgb(245,128,18)"/><text x="799.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3271) (3 samples, 0.09%)</title><rect x="797" y="340" width="2" height="15" fill="rgb(215,218,19)"/><text x="800.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (159 samples, 4.98%)</title><rect x="740" y="324" width="59" height="15" fill="rgb(211,133,36)"/><text x="743.00" y="334.50">ufunc_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4768) (5 samples, 0.16%)</title><rect x="801" y="324" width="2" height="15" fill="rgb(236,172,52)"/><text x="804.00" y="334.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (231 samples, 7.23%)</title><rect x="718" y="276" width="85" height="15" fill="rgb(208,69,47)"/><text x="721.00" y="286.50">run (mlpro..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (210 samples, 6.58%)</title><rect x="726" y="292" width="77" height="15" fill="rgb(225,186,30)"/><text x="729.00" y="302.50">run (mlp..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (187 samples, 5.86%)</title><rect x="734" y="308" width="69" height="15" fill="rgb(228,45,40)"/><text x="737.00" y="318.50">_run (m..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (16 samples, 0.50%)</title><rect x="803" y="276" width="6" height="15" fill="rgb(209,25,54)"/><text x="806.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,208 samples, 37.83%)</title><rect x="363" y="260" width="447" height="15" fill="rgb(245,65,33)"/><text x="366.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (38 samples, 1.19%)</title><rect x="810" y="260" width="14" height="15" fill="rgb(252,120,27)"/><text x="813.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (46 samples, 1.44%)</title><rect x="824" y="260" width="17" height="15" fill="rgb(219,106,44)"/><text x="827.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (15 samples, 0.47%)</title><rect x="841" y="260" width="5" height="15" fill="rgb(232,22,38)"/><text x="844.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (119 samples, 3.73%)</title><rect x="846" y="260" width="44" height="15" fill="rgb(248,139,45)"/><text x="849.00" y="270.50">run ..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (1,797 samples, 56.28%)</title><rect x="239" y="244" width="664" height="15" fill="rgb(225,36,13)"/><text x="242.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (35 samples, 1.10%)</title><rect x="890" y="260" width="13" height="15" fill="rgb(215,196,43)"/><text x="893.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (61 samples, 1.91%)</title><rect x="904" y="244" width="23" height="15" fill="rgb(221,26,40)"/><text x="907.00" y="254.50">_..</text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (26 samples, 0.81%)</title><rect x="917" y="260" width="10" height="15" fill="rgb(233,199,39)"/><text x="920.00" y="270.50"></text></g><g><title>unicode_eq (python3.7) (3 samples, 0.09%)</title><rect x="926" y="276" width="1" height="15" fill="rgb(210,139,45)"/><text x="929.00" y="286.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:546) (5 samples, 0.16%)</title><rect x="927" y="244" width="2" height="15" fill="rgb(244,40,7)"/><text x="930.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:939) (3 samples, 0.09%)</title><rect x="929" y="260" width="1" height="15" fill="rgb(242,220,36)"/><text x="932.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (3 samples, 0.09%)</title><rect x="930" y="276" width="1" height="15" fill="rgb(241,229,38)"/><text x="933.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (8 samples, 0.25%)</title><rect x="929" y="244" width="3" height="15" fill="rgb(228,206,36)"/><text x="932.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (5 samples, 0.16%)</title><rect x="930" y="260" width="2" height="15" fill="rgb(210,32,5)"/><text x="933.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (2,061 samples, 64.55%)</title><rect x="171" y="212" width="762" height="15" fill="rgb(205,89,49)"/><text x="174.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (1,973 samples, 61.79%)</title><rect x="204" y="228" width="729" height="15" fill="rgb(209,64,0)"/><text x="207.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>array_dealloc (arrayobject.c:537) (3 samples, 0.09%)</title><rect x="932" y="244" width="1" height="15" fill="rgb(239,195,17)"/><text x="935.00" y="254.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (16 samples, 0.50%)</title><rect x="940" y="228" width="6" height="15" fill="rgb(242,197,47)"/><text x="943.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (44 samples, 1.38%)</title><rect x="933" y="212" width="16" height="15" fill="rgb(235,0,21)"/><text x="936.00" y="222.50"></text></g><g><title>mmap64 (libc-2.29.so) (6 samples, 0.19%)</title><rect x="947" y="228" width="2" height="15" fill="rgb(226,208,32)"/><text x="950.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (29 samples, 0.91%)</title><rect x="949" y="212" width="11" height="15" fill="rgb(234,57,15)"/><text x="952.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (9 samples, 0.28%)</title><rect x="975" y="228" width="3" height="15" fill="rgb(253,174,32)"/><text x="978.00" y="238.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (14 samples, 0.44%)</title><rect x="987" y="260" width="5" height="15" fill="rgb(220,115,50)"/><text x="990.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (28 samples, 0.88%)</title><rect x="992" y="260" width="10" height="15" fill="rgb(221,31,11)"/><text x="995.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (21 samples, 0.66%)</title><rect x="994" y="276" width="8" height="15" fill="rgb(254,11,35)"/><text x="997.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:576) (7 samples, 0.22%)</title><rect x="1002" y="260" width="3" height="15" fill="rgb(206,40,40)"/><text x="1005.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (14 samples, 0.44%)</title><rect x="1005" y="260" width="5" height="15" fill="rgb(242,217,46)"/><text x="1008.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:583) (4 samples, 0.13%)</title><rect x="1010" y="260" width="1" height="15" fill="rgb(229,213,49)"/><text x="1013.00" y="270.50"></text></g><g><title>0x7f71f11e3734 (libc-2.29.so) (3 samples, 0.09%)</title><rect x="1028" y="308" width="1" height="15" fill="rgb(215,76,15)"/><text x="1031.00" y="318.50"></text></g><g><title>array_reshape (methods.c:186) (19 samples, 0.60%)</title><rect x="1023" y="276" width="7" height="15" fill="rgb(218,139,23)"/><text x="1026.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:53) (17 samples, 0.53%)</title><rect x="1024" y="292" width="6" height="15" fill="rgb(212,191,22)"/><text x="1027.00" y="302.50"></text></g><g><title>PyArray_IntpFromIndexSequence (conversion_utils.c:954) (3 samples, 0.09%)</title><rect x="1036" y="308" width="1" height="15" fill="rgb(230,112,40)"/><text x="1039.00" y="318.50"></text></g><g><title>PyArray_IntpConverter (conversion_utils.c:132) (6 samples, 0.19%)</title><rect x="1035" y="292" width="3" height="15" fill="rgb(224,157,29)"/><text x="1038.00" y="302.50"></text></g><g><title>array_reshape (methods.c:195) (21 samples, 0.66%)</title><rect x="1030" y="276" width="8" height="15" fill="rgb(225,182,19)"/><text x="1033.00" y="286.50"></text></g><g><title>PyArray_Newshape (shape.c:230) (3 samples, 0.09%)</title><rect x="1039" y="308" width="1" height="15" fill="rgb(231,182,48)"/><text x="1042.00" y="318.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (175 samples, 5.48%)</title><rect x="978" y="228" width="65" height="15" fill="rgb(236,219,53)"/><text x="981.00" y="238.50">expand_..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (159 samples, 4.98%)</title><rect x="984" y="244" width="59" height="15" fill="rgb(219,186,15)"/><text x="987.00" y="254.50">array_..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (86 samples, 2.69%)</title><rect x="1011" y="260" width="32" height="15" fill="rgb(231,126,25)"/><text x="1014.00" y="270.50">ex..</text></g><g><title>array_reshape (methods.c:210) (14 samples, 0.44%)</title><rect x="1038" y="276" width="5" height="15" fill="rgb(229,142,17)"/><text x="1041.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (14 samples, 0.44%)</title><rect x="1038" y="292" width="5" height="15" fill="rgb(218,213,12)"/><text x="1041.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (5 samples, 0.16%)</title><rect x="1041" y="308" width="2" height="15" fill="rgb(230,63,8)"/><text x="1044.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (228 samples, 7.14%)</title><rect x="960" y="212" width="84" height="15" fill="rgb(250,172,17)"/><text x="963.00" y="222.50">_run (mlp..</text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (16 samples, 0.50%)</title><rect x="1045" y="308" width="6" height="15" fill="rgb(251,72,3)"/><text x="1048.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (13 samples, 0.41%)</title><rect x="1046" y="324" width="5" height="15" fill="rgb(254,124,37)"/><text x="1049.00" y="334.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:123) (3 samples, 0.09%)</title><rect x="1051" y="308" width="1" height="15" fill="rgb(241,27,27)"/><text x="1054.00" y="318.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:125) (4 samples, 0.13%)</title><rect x="1052" y="308" width="2" height="15" fill="rgb(227,139,11)"/><text x="1055.00" y="318.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (29 samples, 0.91%)</title><rect x="1044" y="260" width="11" height="15" fill="rgb(212,4,8)"/><text x="1047.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (29 samples, 0.91%)</title><rect x="1044" y="276" width="11" height="15" fill="rgb(247,220,52)"/><text x="1047.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (29 samples, 0.91%)</title><rect x="1044" y="292" width="11" height="15" fill="rgb(254,216,36)"/><text x="1047.00" y="302.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:129) (4 samples, 0.13%)</title><rect x="1054" y="308" width="1" height="15" fill="rgb(242,100,38)"/><text x="1057.00" y="318.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:120) (4 samples, 0.13%)</title><rect x="1058" y="372" width="1" height="15" fill="rgb(248,111,37)"/><text x="1061.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (3 samples, 0.09%)</title><rect x="1059" y="372" width="1" height="15" fill="rgb(253,137,1)"/><text x="1062.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (5 samples, 0.16%)</title><rect x="1060" y="372" width="2" height="15" fill="rgb(250,180,17)"/><text x="1063.00" y="382.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (19 samples, 0.60%)</title><rect x="1056" y="340" width="7" height="15" fill="rgb(235,208,52)"/><text x="1059.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (17 samples, 0.53%)</title><rect x="1057" y="356" width="6" height="15" fill="rgb(234,225,21)"/><text x="1060.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (3 samples, 0.09%)</title><rect x="1062" y="372" width="1" height="15" fill="rgb(210,144,39)"/><text x="1065.00" y="382.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (3 samples, 0.09%)</title><rect x="1062" y="388" width="1" height="15" fill="rgb(205,35,16)"/><text x="1065.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (3 samples, 0.09%)</title><rect x="1062" y="404" width="1" height="15" fill="rgb(214,129,25)"/><text x="1065.00" y="414.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (53 samples, 1.66%)</title><rect x="1044" y="212" width="20" height="15" fill="rgb(230,203,40)"/><text x="1047.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (53 samples, 1.66%)</title><rect x="1044" y="228" width="20" height="15" fill="rgb(233,154,33)"/><text x="1047.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (53 samples, 1.66%)</title><rect x="1044" y="244" width="20" height="15" fill="rgb(241,206,48)"/><text x="1047.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (24 samples, 0.75%)</title><rect x="1055" y="260" width="9" height="15" fill="rgb(236,133,26)"/><text x="1058.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (22 samples, 0.69%)</title><rect x="1056" y="276" width="8" height="15" fill="rgb(229,95,42)"/><text x="1059.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (21 samples, 0.66%)</title><rect x="1056" y="292" width="8" height="15" fill="rgb(241,13,18)"/><text x="1059.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (21 samples, 0.66%)</title><rect x="1056" y="308" width="8" height="15" fill="rgb(229,223,35)"/><text x="1059.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (21 samples, 0.66%)</title><rect x="1056" y="324" width="8" height="15" fill="rgb(217,101,42)"/><text x="1059.00" y="334.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (7 samples, 0.22%)</title><rect x="1065" y="244" width="3" height="15" fill="rgb(220,225,30)"/><text x="1068.00" y="254.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (7 samples, 0.22%)</title><rect x="1065" y="260" width="3" height="15" fill="rgb(206,54,8)"/><text x="1068.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.22%)</title><rect x="1065" y="276" width="3" height="15" fill="rgb(238,157,26)"/><text x="1068.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (7 samples, 0.22%)</title><rect x="1065" y="292" width="3" height="15" fill="rgb(224,209,11)"/><text x="1068.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (6 samples, 0.19%)</title><rect x="1065" y="308" width="3" height="15" fill="rgb(236,48,16)"/><text x="1068.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (5 samples, 0.16%)</title><rect x="1066" y="324" width="2" height="15" fill="rgb(249,228,28)"/><text x="1069.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (5 samples, 0.16%)</title><rect x="1066" y="340" width="2" height="15" fill="rgb(214,208,0)"/><text x="1069.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:997) (4 samples, 0.13%)</title><rect x="1066" y="356" width="2" height="15" fill="rgb(210,95,31)"/><text x="1069.00" y="366.50"></text></g><g><title>PyArray_IterAllButAxis (iterators.c:288) (4 samples, 0.13%)</title><rect x="1066" y="372" width="2" height="15" fill="rgb(248,98,30)"/><text x="1069.00" y="382.50"></text></g><g><title>PyArray_IterNew (iterators.c:183) (4 samples, 0.13%)</title><rect x="1066" y="388" width="2" height="15" fill="rgb(242,118,52)"/><text x="1069.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.13%)</title><rect x="1066" y="404" width="2" height="15" fill="rgb(209,80,32)"/><text x="1069.00" y="414.50"></text></g><g><title>0x7f71f11cf028 (libc-2.29.so) (3 samples, 0.09%)</title><rect x="1066" y="420" width="2" height="15" fill="rgb(243,121,51)"/><text x="1069.00" y="430.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (6 samples, 0.19%)</title><rect x="1068" y="244" width="2" height="15" fill="rgb(233,162,23)"/><text x="1071.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (16 samples, 0.50%)</title><rect x="1064" y="212" width="6" height="15" fill="rgb(242,213,33)"/><text x="1067.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (15 samples, 0.47%)</title><rect x="1065" y="228" width="5" height="15" fill="rgb(229,199,12)"/><text x="1068.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (2,577 samples, 80.71%)</title><rect x="120" y="196" width="952" height="15" fill="rgb(206,227,15)"/><text x="123.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>array_dealloc (arrayobject.c:520) (3 samples, 0.09%)</title><rect x="1071" y="212" width="1" height="15" fill="rgb(233,192,11)"/><text x="1074.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (3 samples, 0.09%)</title><rect x="1071" y="228" width="1" height="15" fill="rgb(224,95,18)"/><text x="1074.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (3 samples, 0.09%)</title><rect x="1071" y="244" width="1" height="15" fill="rgb(212,6,41)"/><text x="1074.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (15 samples, 0.47%)</title><rect x="1072" y="196" width="6" height="15" fill="rgb(246,30,23)"/><text x="1075.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py:24) (14 samples, 0.44%)</title><rect x="1073" y="212" width="5" height="15" fill="rgb(244,228,14)"/><text x="1076.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:6) (10 samples, 0.31%)</title><rect x="1074" y="228" width="4" height="15" fill="rgb(226,32,37)"/><text x="1077.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (10 samples, 0.31%)</title><rect x="1074" y="244" width="4" height="15" fill="rgb(241,0,11)"/><text x="1077.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py:2911) (10 samples, 0.31%)</title><rect x="1074" y="260" width="4" height="15" fill="rgb(237,180,3)"/><text x="1077.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (6 samples, 0.19%)</title><rect x="1076" y="276" width="2" height="15" fill="rgb(221,80,47)"/><text x="1079.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (5 samples, 0.16%)</title><rect x="1076" y="292" width="2" height="15" fill="rgb(209,223,22)"/><text x="1079.00" y="302.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (4 samples, 0.13%)</title><rect x="1076" y="308" width="2" height="15" fill="rgb(209,145,52)"/><text x="1079.00" y="318.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (3 samples, 0.09%)</title><rect x="1077" y="324" width="1" height="15" fill="rgb(250,121,1)"/><text x="1080.00" y="334.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:13) (3 samples, 0.09%)</title><rect x="1078" y="260" width="1" height="15" fill="rgb(207,32,29)"/><text x="1081.00" y="270.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (3 samples, 0.09%)</title><rect x="1078" y="276" width="1" height="15" fill="rgb(236,17,24)"/><text x="1081.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.09%)</title><rect x="1078" y="292" width="1" height="15" fill="rgb(215,109,14)"/><text x="1081.00" y="302.50"></text></g><g><title>argmax (numpy/core/fromnumeric.py:1153) (3 samples, 0.09%)</title><rect x="1078" y="308" width="1" height="15" fill="rgb(239,68,1)"/><text x="1081.00" y="318.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.09%)</title><rect x="1078" y="324" width="1" height="15" fill="rgb(246,46,3)"/><text x="1081.00" y="334.50"></text></g><g><title>array_argmax (methods.c:302) (3 samples, 0.09%)</title><rect x="1078" y="340" width="1" height="15" fill="rgb(217,195,34)"/><text x="1081.00" y="350.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:312) (6 samples, 0.19%)</title><rect x="1078" y="196" width="2" height="15" fill="rgb(251,211,37)"/><text x="1081.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (5 samples, 0.16%)</title><rect x="1078" y="212" width="2" height="15" fill="rgb(239,218,52)"/><text x="1081.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (5 samples, 0.16%)</title><rect x="1078" y="228" width="2" height="15" fill="rgb(254,75,49)"/><text x="1081.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (5 samples, 0.16%)</title><rect x="1078" y="244" width="2" height="15" fill="rgb(240,109,43)"/><text x="1081.00" y="254.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (3 samples, 0.09%)</title><rect x="1084" y="308" width="1" height="15" fill="rgb(250,168,53)"/><text x="1087.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (3 samples, 0.09%)</title><rect x="1084" y="324" width="1" height="15" fill="rgb(240,164,34)"/><text x="1087.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (18 samples, 0.56%)</title><rect x="1081" y="228" width="7" height="15" fill="rgb(226,142,39)"/><text x="1084.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (17 samples, 0.53%)</title><rect x="1082" y="244" width="6" height="15" fill="rgb(220,37,0)"/><text x="1085.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (16 samples, 0.50%)</title><rect x="1082" y="260" width="6" height="15" fill="rgb(216,138,22)"/><text x="1085.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (15 samples, 0.47%)</title><rect x="1082" y="276" width="6" height="15" fill="rgb(206,68,40)"/><text x="1085.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (11 samples, 0.34%)</title><rect x="1084" y="292" width="4" height="15" fill="rgb(234,46,17)"/><text x="1087.00" y="302.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (8 samples, 0.25%)</title><rect x="1085" y="308" width="3" height="15" fill="rgb(216,194,51)"/><text x="1088.00" y="318.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (7 samples, 0.22%)</title><rect x="1085" y="324" width="3" height="15" fill="rgb(212,167,14)"/><text x="1088.00" y="334.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (7 samples, 0.22%)</title><rect x="1085" y="340" width="3" height="15" fill="rgb(248,130,1)"/><text x="1088.00" y="350.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_sqrt.py:19) (6 samples, 0.19%)</title><rect x="1088" y="228" width="2" height="15" fill="rgb(228,118,14)"/><text x="1091.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (33 samples, 1.03%)</title><rect x="1080" y="196" width="12" height="15" fill="rgb(207,50,44)"/><text x="1083.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (32 samples, 1.00%)</title><rect x="1080" y="212" width="12" height="15" fill="rgb(213,164,32)"/><text x="1083.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_transpose.py:25) (5 samples, 0.16%)</title><rect x="1090" y="228" width="2" height="15" fill="rgb(217,20,29)"/><text x="1093.00" y="238.50"></text></g><g><title>transpose (&lt;__array_function__ internals&gt;:6) (5 samples, 0.16%)</title><rect x="1090" y="244" width="2" height="15" fill="rgb(246,198,37)"/><text x="1093.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.16%)</title><rect x="1090" y="260" width="2" height="15" fill="rgb(229,207,6)"/><text x="1093.00" y="270.50"></text></g><g><title>transpose (numpy/core/fromnumeric.py:650) (5 samples, 0.16%)</title><rect x="1090" y="276" width="2" height="15" fill="rgb(223,219,52)"/><text x="1093.00" y="286.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.09%)</title><rect x="1091" y="292" width="1" height="15" fill="rgb(239,213,32)"/><text x="1094.00" y="302.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (6 samples, 0.19%)</title><rect x="1095" y="276" width="2" height="15" fill="rgb(205,32,45)"/><text x="1098.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (11 samples, 0.34%)</title><rect x="1093" y="196" width="4" height="15" fill="rgb(236,227,40)"/><text x="1096.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_equal.py:17) (10 samples, 0.31%)</title><rect x="1094" y="212" width="3" height="15" fill="rgb(248,226,27)"/><text x="1097.00" y="222.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (10 samples, 0.31%)</title><rect x="1094" y="228" width="3" height="15" fill="rgb(222,0,3)"/><text x="1097.00" y="238.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (7 samples, 0.22%)</title><rect x="1095" y="244" width="2" height="15" fill="rgb(249,23,28)"/><text x="1098.00" y="254.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (7 samples, 0.22%)</title><rect x="1095" y="260" width="2" height="15" fill="rgb(214,179,5)"/><text x="1098.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (2,660 samples, 83.31%)</title><rect x="116" y="180" width="983" height="15" fill="rgb(245,194,17)"/><text x="119.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (3 samples, 0.09%)</title><rect x="1097" y="196" width="2" height="15" fill="rgb(226,214,12)"/><text x="1100.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (3 samples, 0.09%)</title><rect x="1097" y="212" width="2" height="15" fill="rgb(235,127,3)"/><text x="1100.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (3 samples, 0.09%)</title><rect x="1099" y="180" width="1" height="15" fill="rgb(242,29,31)"/><text x="1102.00" y="190.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (7 samples, 0.22%)</title><rect x="1101" y="180" width="2" height="15" fill="rgb(243,13,21)"/><text x="1104.00" y="190.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (2,697 samples, 84.47%)</title><rect x="107" y="164" width="997" height="15" fill="rgb(215,166,8)"/><text x="110.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:45) (2,772 samples, 86.81%)</title><rect x="80" y="52" width="1025" height="15" fill="rgb(213,152,48)"/><text x="83.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:45)</text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:44) (2,772 samples, 86.81%)</title><rect x="80" y="68" width="1025" height="15" fill="rgb(235,157,0)"/><text x="83.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:44)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:29) (2,772 samples, 86.81%)</title><rect x="80" y="84" width="1025" height="15" fill="rgb(211,94,24)"/><text x="83.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:29)</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:23) (2,706 samples, 84.75%)</title><rect x="104" y="100" width="1001" height="15" fill="rgb(238,178,6)"/><text x="107.00" y="110.50">profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:23)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (2,703 samples, 84.65%)</title><rect x="106" y="116" width="999" height="15" fill="rgb(226,41,41)"/><text x="109.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (2,703 samples, 84.65%)</title><rect x="106" y="132" width="999" height="15" fill="rgb(224,59,17)"/><text x="109.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,702 samples, 84.62%)</title><rect x="106" y="148" width="999" height="15" fill="rgb(215,167,23)"/><text x="109.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:18) (4 samples, 0.13%)</title><rect x="1105" y="100" width="1" height="15" fill="rgb(230,194,33)"/><text x="1108.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (4 samples, 0.13%)</title><rect x="1105" y="116" width="1" height="15" fill="rgb(211,190,46)"/><text x="1108.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (4 samples, 0.13%)</title><rect x="1105" y="132" width="1" height="15" fill="rgb(242,216,18)"/><text x="1108.00" y="142.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (4 samples, 0.13%)</title><rect x="1105" y="148" width="1" height="15" fill="rgb(239,148,1)"/><text x="1108.00" y="158.50"></text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (4 samples, 0.13%)</title><rect x="1105" y="164" width="1" height="15" fill="rgb(251,211,51)"/><text x="1108.00" y="174.50"></text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (4 samples, 0.13%)</title><rect x="1105" y="180" width="1" height="15" fill="rgb(206,118,26)"/><text x="1108.00" y="190.50"></text></g><g><title>run (onnxruntime/capi/session.py:136) (3 samples, 0.09%)</title><rect x="1105" y="196" width="1" height="15" fill="rgb(246,10,51)"/><text x="1108.00" y="206.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1112" y="388" width="2" height="15" fill="rgb(243,109,39)"/><text x="1115.00" y="398.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1114" y="388" width="2" height="15" fill="rgb(232,43,38)"/><text x="1117.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1114" y="404" width="2" height="15" fill="rgb(231,76,35)"/><text x="1117.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1124" y="468" width="2" height="15" fill="rgb(238,123,26)"/><text x="1127.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::RemoveFreeChunkIterFromBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1125" y="484" width="1" height="15" fill="rgb(244,59,0)"/><text x="1128.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.25%)</title><rect x="1123" y="452" width="3" height="15" fill="rgb(216,34,5)"/><text x="1126.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.16%)</title><rect x="1128" y="468" width="2" height="15" fill="rgb(238,179,0)"/><text x="1131.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="1127" y="452" width="3" height="15" fill="rgb(234,229,29)"/><text x="1130.00" y="462.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (34 samples, 1.06%)</title><rect x="1119" y="436" width="12" height="15" fill="rgb(234,188,33)"/><text x="1122.00" y="446.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.22%)</title><rect x="1133" y="484" width="3" height="15" fill="rgb(215,110,16)"/><text x="1136.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.19%)</title><rect x="1133" y="500" width="3" height="15" fill="rgb(240,110,14)"/><text x="1136.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.38%)</title><rect x="1131" y="436" width="5" height="15" fill="rgb(226,121,0)"/><text x="1134.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.31%)</title><rect x="1132" y="452" width="4" height="15" fill="rgb(242,185,47)"/><text x="1135.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="1133" y="468" width="3" height="15" fill="rgb(247,11,1)"/><text x="1136.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1137" y="436" width="2" height="15" fill="rgb(241,169,17)"/><text x="1140.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1137" y="452" width="2" height="15" fill="rgb(206,63,8)"/><text x="1140.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1137" y="468" width="2" height="15" fill="rgb(230,165,26)"/><text x="1140.00" y="478.50"></text></g><g><title>onnxruntime::IExecutionFrame::~IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1139" y="436" width="1" height="15" fill="rgb(218,199,45)"/><text x="1142.00" y="446.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.22%)</title><rect x="1140" y="436" width="3" height="15" fill="rgb(228,10,45)"/><text x="1143.00" y="446.50"></text></g><g><title>onnxruntime::Tensor::Tensor (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1167" y="580" width="1" height="15" fill="rgb(236,142,5)"/><text x="1170.00" y="590.50"></text></g><g><title>onnxruntime::Tensor::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1167" y="596" width="1" height="15" fill="rgb(251,185,11)"/><text x="1170.00" y="606.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1167" y="564" width="1" height="15" fill="rgb(242,40,19)"/><text x="1170.00" y="574.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.34%)</title><rect x="1164" y="468" width="4" height="15" fill="rgb(253,47,0)"/><text x="1167.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.34%)</title><rect x="1164" y="484" width="4" height="15" fill="rgb(246,13,7)"/><text x="1167.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.31%)</title><rect x="1165" y="500" width="3" height="15" fill="rgb(251,148,35)"/><text x="1168.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.25%)</title><rect x="1165" y="516" width="3" height="15" fill="rgb(239,220,25)"/><text x="1168.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.25%)</title><rect x="1165" y="532" width="3" height="15" fill="rgb(223,81,19)"/><text x="1168.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.25%)</title><rect x="1165" y="548" width="3" height="15" fill="rgb(254,188,23)"/><text x="1168.00" y="558.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.09%)</title><rect x="1169" y="468" width="1" height="15" fill="rgb(241,125,11)"/><text x="1172.00" y="478.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.09%)</title><rect x="1169" y="484" width="1" height="15" fill="rgb(245,155,51)"/><text x="1172.00" y="494.50"></text></g><g><title>std::vector&lt;float, std::allocator&lt;float&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1170" y="468" width="1" height="15" fill="rgb(233,224,50)"/><text x="1173.00" y="478.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_emplace_back_aux&lt;long&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1171" y="468" width="1" height="15" fill="rgb(216,135,5)"/><text x="1174.00" y="478.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (79 samples, 2.47%)</title><rect x="1143" y="436" width="30" height="15" fill="rgb(246,144,49)"/><text x="1146.00" y="446.50">on..</text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (74 samples, 2.32%)</title><rect x="1145" y="452" width="28" height="15" fill="rgb(239,107,23)"/><text x="1148.00" y="462.50">o..</text></g><g><title>onnxruntime::Broadcaster::~Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1175" y="468" width="1" height="15" fill="rgb(218,26,31)"/><text x="1178.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; [clone .constprop.2248] (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1176" y="468" width="1" height="15" fill="rgb(245,93,25)"/><text x="1179.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.31%)</title><rect x="1177" y="468" width="4" height="15" fill="rgb(234,147,41)"/><text x="1180.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.31%)</title><rect x="1177" y="484" width="4" height="15" fill="rgb(222,59,53)"/><text x="1180.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="1178" y="500" width="3" height="15" fill="rgb(236,210,49)"/><text x="1181.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="1178" y="516" width="3" height="15" fill="rgb(249,21,48)"/><text x="1181.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="1178" y="532" width="3" height="15" fill="rgb(229,88,35)"/><text x="1181.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.28%)</title><rect x="1178" y="548" width="3" height="15" fill="rgb(225,176,28)"/><text x="1181.00" y="558.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1180" y="564" width="1" height="15" fill="rgb(219,17,54)"/><text x="1183.00" y="574.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1180" y="580" width="1" height="15" fill="rgb(240,114,31)"/><text x="1183.00" y="590.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (7 samples, 0.22%)</title><rect x="1182" y="500" width="3" height="15" fill="rgb(250,90,27)"/><text x="1185.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.13%)</title><rect x="1183" y="516" width="2" height="15" fill="rgb(249,20,22)"/><text x="1186.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.13%)</title><rect x="1183" y="532" width="2" height="15" fill="rgb(208,1,49)"/><text x="1186.00" y="542.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 0.44%)</title><rect x="1181" y="484" width="5" height="15" fill="rgb(216,151,13)"/><text x="1184.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.13%)</title><rect x="1185" y="500" width="1" height="15" fill="rgb(229,12,47)"/><text x="1188.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.09%)</title><rect x="1185" y="516" width="1" height="15" fill="rgb(248,42,2)"/><text x="1188.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.09%)</title><rect x="1185" y="532" width="1" height="15" fill="rgb(252,176,25)"/><text x="1188.00" y="542.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (15 samples, 0.47%)</title><rect x="1181" y="468" width="6" height="15" fill="rgb(222,114,13)"/><text x="1184.00" y="478.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (190 samples, 5.95%)</title><rect x="1117" y="420" width="70" height="15" fill="rgb(225,200,6)"/><text x="1120.00" y="430.50">onnxrun..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (40 samples, 1.25%)</title><rect x="1173" y="436" width="14" height="15" fill="rgb(222,50,41)"/><text x="1176.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (39 samples, 1.22%)</title><rect x="1173" y="452" width="14" height="15" fill="rgb(241,34,15)"/><text x="1176.00" y="462.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (216 samples, 6.76%)</title><rect x="1108" y="356" width="80" height="15" fill="rgb(240,171,31)"/><text x="1111.00" y="366.50">onnxrunti..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (216 samples, 6.76%)</title><rect x="1108" y="372" width="80" height="15" fill="rgb(254,75,40)"/><text x="1111.00" y="382.50">onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (196 samples, 6.14%)</title><rect x="1116" y="388" width="72" height="15" fill="rgb(245,169,12)"/><text x="1119.00" y="398.50">onnxrunt..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (196 samples, 6.14%)</title><rect x="1116" y="404" width="72" height="15" fill="rgb(222,113,11)"/><text x="1119.00" y="414.50">onnxrunt..</text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (218 samples, 6.83%)</title><rect x="1108" y="340" width="81" height="15" fill="rgb(227,118,41)"/><text x="1111.00" y="350.50">onnxrunti..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (223 samples, 6.98%)</title><rect x="1107" y="164" width="82" height="15" fill="rgb(207,64,42)"/><text x="1110.00" y="174.50">_run_whol..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (223 samples, 6.98%)</title><rect x="1107" y="180" width="82" height="15" fill="rgb(226,187,19)"/><text x="1110.00" y="190.50">run (mlpr..</text></g><g><title>run (onnxruntime/capi/session.py:136) (223 samples, 6.98%)</title><rect x="1107" y="196" width="82" height="15" fill="rgb(243,206,5)"/><text x="1110.00" y="206.50">run (onnx..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (223 samples, 6.98%)</title><rect x="1107" y="212" width="82" height="15" fill="rgb(242,165,5)"/><text x="1110.00" y="222.50">pybind11:..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (223 samples, 6.98%)</title><rect x="1107" y="228" width="82" height="15" fill="rgb(238,127,47)"/><text x="1110.00" y="238.50">void pybi..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (223 samples, 6.98%)</title><rect x="1107" y="244" width="82" height="15" fill="rgb(253,168,0)"/><text x="1110.00" y="254.50">onnxrunti..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (223 samples, 6.98%)</title><rect x="1107" y="260" width="82" height="15" fill="rgb(212,122,3)"/><text x="1110.00" y="270.50">onnxrunti..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (223 samples, 6.98%)</title><rect x="1107" y="276" width="82" height="15" fill="rgb(238,176,3)"/><text x="1110.00" y="286.50">onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (223 samples, 6.98%)</title><rect x="1107" y="292" width="82" height="15" fill="rgb(242,26,12)"/><text x="1110.00" y="302.50">onnxrunti..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (223 samples, 6.98%)</title><rect x="1107" y="308" width="82" height="15" fill="rgb(249,95,43)"/><text x="1110.00" y="318.50">onnxrunti..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (223 samples, 6.98%)</title><rect x="1107" y="324" width="82" height="15" fill="rgb(205,227,46)"/><text x="1110.00" y="334.50">onnxrunti..</text></g><g><title>all (3,193 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(245,28,15)"/><text x="13.00" y="46.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:52) (230 samples, 7.20%)</title><rect x="1105" y="52" width="85" height="15" fill="rgb(217,146,11)"/><text x="1108.00" y="62.50">&lt;module&gt; (..</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:51) (230 samples, 7.20%)</title><rect x="1105" y="68" width="85" height="15" fill="rgb(249,60,32)"/><text x="1108.00" y="78.50">profile_or..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:29) (230 samples, 7.20%)</title><rect x="1105" y="84" width="85" height="15" fill="rgb(215,160,4)"/><text x="1108.00" y="94.50">setup_prof..</text></g><g><title>profile (bench_KNeighborsClassifier_default_m_cl_1_50_12_float_.py:23) (226 samples, 7.08%)</title><rect x="1106" y="100" width="84" height="15" fill="rgb(234,46,26)"/><text x="1109.00" y="110.50">profile (..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (226 samples, 7.08%)</title><rect x="1106" y="116" width="84" height="15" fill="rgb(206,162,52)"/><text x="1109.00" y="126.50">time_pred..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (225 samples, 7.05%)</title><rect x="1106" y="132" width="84" height="15" fill="rgb(209,45,14)"/><text x="1109.00" y="142.50">&lt;lambda&gt; ..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (224 samples, 7.02%)</title><rect x="1107" y="148" width="83" height="15" fill="rgb(221,212,23)"/><text x="1110.00" y="158.50">run (mlpr..</text></g></g></svg>