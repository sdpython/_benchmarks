<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="869.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="869.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (7 samples, 1.68%)</title><rect x="0.2398%" y="820" width="1.6787%" height="15" fill="rgb(227,0,7)"/><text x="0.4898%" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (7 samples, 1.68%)</title><rect x="0.2398%" y="836" width="1.6787%" height="15" fill="rgb(217,0,24)"/><text x="0.4898%" y="846.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:2) (9 samples, 2.16%)</title><rect x="0.2398%" y="148" width="2.1583%" height="15" fill="rgb(221,193,54)"/><text x="0.4898%" y="158.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 2.16%)</title><rect x="0.2398%" y="164" width="2.1583%" height="15" fill="rgb(248,212,6)"/><text x="0.4898%" y="174.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (9 samples, 2.16%)</title><rect x="0.2398%" y="180" width="2.1583%" height="15" fill="rgb(208,68,35)"/><text x="0.4898%" y="190.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 2.16%)</title><rect x="0.2398%" y="196" width="2.1583%" height="15" fill="rgb(232,128,0)"/><text x="0.4898%" y="206.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 2.16%)</title><rect x="0.2398%" y="212" width="2.1583%" height="15" fill="rgb(207,160,47)"/><text x="0.4898%" y="222.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 2.16%)</title><rect x="0.2398%" y="228" width="2.1583%" height="15" fill="rgb(228,23,34)"/><text x="0.4898%" y="238.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 2.16%)</title><rect x="0.2398%" y="244" width="2.1583%" height="15" fill="rgb(218,30,26)"/><text x="0.4898%" y="254.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 2.16%)</title><rect x="0.2398%" y="260" width="2.1583%" height="15" fill="rgb(220,122,19)"/><text x="0.4898%" y="270.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 2.16%)</title><rect x="0.2398%" y="276" width="2.1583%" height="15" fill="rgb(250,228,42)"/><text x="0.4898%" y="286.50">_..</text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (9 samples, 2.16%)</title><rect x="0.2398%" y="292" width="2.1583%" height="15" fill="rgb(240,193,28)"/><text x="0.4898%" y="302.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 2.16%)</title><rect x="0.2398%" y="308" width="2.1583%" height="15" fill="rgb(216,20,37)"/><text x="0.4898%" y="318.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 2.16%)</title><rect x="0.2398%" y="324" width="2.1583%" height="15" fill="rgb(206,188,39)"/><text x="0.4898%" y="334.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 2.16%)</title><rect x="0.2398%" y="340" width="2.1583%" height="15" fill="rgb(217,207,13)"/><text x="0.4898%" y="350.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 2.16%)</title><rect x="0.2398%" y="356" width="2.1583%" height="15" fill="rgb(231,73,38)"/><text x="0.4898%" y="366.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 2.16%)</title><rect x="0.2398%" y="372" width="2.1583%" height="15" fill="rgb(225,20,46)"/><text x="0.4898%" y="382.50">_..</text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (9 samples, 2.16%)</title><rect x="0.2398%" y="388" width="2.1583%" height="15" fill="rgb(210,31,41)"/><text x="0.4898%" y="398.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 2.16%)</title><rect x="0.2398%" y="404" width="2.1583%" height="15" fill="rgb(221,200,47)"/><text x="0.4898%" y="414.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 2.16%)</title><rect x="0.2398%" y="420" width="2.1583%" height="15" fill="rgb(226,26,5)"/><text x="0.4898%" y="430.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 2.16%)</title><rect x="0.2398%" y="436" width="2.1583%" height="15" fill="rgb(249,33,26)"/><text x="0.4898%" y="446.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 2.16%)</title><rect x="0.2398%" y="452" width="2.1583%" height="15" fill="rgb(235,183,28)"/><text x="0.4898%" y="462.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 2.16%)</title><rect x="0.2398%" y="468" width="2.1583%" height="15" fill="rgb(221,5,38)"/><text x="0.4898%" y="478.50">_..</text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (9 samples, 2.16%)</title><rect x="0.2398%" y="484" width="2.1583%" height="15" fill="rgb(247,18,42)"/><text x="0.4898%" y="494.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 2.16%)</title><rect x="0.2398%" y="500" width="2.1583%" height="15" fill="rgb(241,131,45)"/><text x="0.4898%" y="510.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 2.16%)</title><rect x="0.2398%" y="516" width="2.1583%" height="15" fill="rgb(249,31,29)"/><text x="0.4898%" y="526.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 2.16%)</title><rect x="0.2398%" y="532" width="2.1583%" height="15" fill="rgb(225,111,53)"/><text x="0.4898%" y="542.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 2.16%)</title><rect x="0.2398%" y="548" width="2.1583%" height="15" fill="rgb(238,160,17)"/><text x="0.4898%" y="558.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 2.16%)</title><rect x="0.2398%" y="564" width="2.1583%" height="15" fill="rgb(214,148,48)"/><text x="0.4898%" y="574.50">_..</text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (9 samples, 2.16%)</title><rect x="0.2398%" y="580" width="2.1583%" height="15" fill="rgb(232,36,49)"/><text x="0.4898%" y="590.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 2.16%)</title><rect x="0.2398%" y="596" width="2.1583%" height="15" fill="rgb(209,103,24)"/><text x="0.4898%" y="606.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (9 samples, 2.16%)</title><rect x="0.2398%" y="612" width="2.1583%" height="15" fill="rgb(229,88,8)"/><text x="0.4898%" y="622.50">_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 2.16%)</title><rect x="0.2398%" y="628" width="2.1583%" height="15" fill="rgb(213,181,19)"/><text x="0.4898%" y="638.50">_..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 2.16%)</title><rect x="0.2398%" y="644" width="2.1583%" height="15" fill="rgb(254,191,54)"/><text x="0.4898%" y="654.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 2.16%)</title><rect x="0.2398%" y="660" width="2.1583%" height="15" fill="rgb(241,83,37)"/><text x="0.4898%" y="670.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 2.16%)</title><rect x="0.2398%" y="676" width="2.1583%" height="15" fill="rgb(233,36,39)"/><text x="0.4898%" y="686.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 2.16%)</title><rect x="0.2398%" y="692" width="2.1583%" height="15" fill="rgb(226,3,54)"/><text x="0.4898%" y="702.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 2.16%)</title><rect x="0.2398%" y="708" width="2.1583%" height="15" fill="rgb(245,192,40)"/><text x="0.4898%" y="718.50">_..</text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (9 samples, 2.16%)</title><rect x="0.2398%" y="724" width="2.1583%" height="15" fill="rgb(238,167,29)"/><text x="0.4898%" y="734.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 2.16%)</title><rect x="0.2398%" y="740" width="2.1583%" height="15" fill="rgb(232,182,51)"/><text x="0.4898%" y="750.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (9 samples, 2.16%)</title><rect x="0.2398%" y="756" width="2.1583%" height="15" fill="rgb(231,60,39)"/><text x="0.4898%" y="766.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (9 samples, 2.16%)</title><rect x="0.2398%" y="772" width="2.1583%" height="15" fill="rgb(208,69,12)"/><text x="0.4898%" y="782.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (9 samples, 2.16%)</title><rect x="0.2398%" y="788" width="2.1583%" height="15" fill="rgb(235,93,37)"/><text x="0.4898%" y="798.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 2.16%)</title><rect x="0.2398%" y="804" width="2.1583%" height="15" fill="rgb(213,116,39)"/><text x="0.4898%" y="814.50">_..</text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:4) (18 samples, 4.32%)</title><rect x="0.0000%" y="52" width="4.3165%" height="15" fill="rgb(222,207,29)"/><text x="0.2500%" y="62.50">&lt;modu..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (18 samples, 4.32%)</title><rect x="0.0000%" y="68" width="4.3165%" height="15" fill="rgb(206,96,30)"/><text x="0.2500%" y="78.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (18 samples, 4.32%)</title><rect x="0.0000%" y="84" width="4.3165%" height="15" fill="rgb(218,138,4)"/><text x="0.2500%" y="94.50">_find..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (18 samples, 4.32%)</title><rect x="0.0000%" y="100" width="4.3165%" height="15" fill="rgb(250,191,14)"/><text x="0.2500%" y="110.50">_load..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (18 samples, 4.32%)</title><rect x="0.0000%" y="116" width="4.3165%" height="15" fill="rgb(239,60,40)"/><text x="0.2500%" y="126.50">exec_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (18 samples, 4.32%)</title><rect x="0.0000%" y="132" width="4.3165%" height="15" fill="rgb(206,27,48)"/><text x="0.2500%" y="142.50">_call..</text></g><g><title>&lt;module&gt; (profiles/benches/neural_network/MLPClassifier/bench_MLPClassifier_default_b_cl.py:7) (6 samples, 1.44%)</title><rect x="2.8777%" y="148" width="1.4388%" height="15" fill="rgb(225,35,8)"/><text x="3.1277%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 1.44%)</title><rect x="2.8777%" y="164" width="1.4388%" height="15" fill="rgb(250,213,24)"/><text x="3.1277%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (6 samples, 1.44%)</title><rect x="2.8777%" y="180" width="1.4388%" height="15" fill="rgb(247,123,22)"/><text x="3.1277%" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (6 samples, 1.44%)</title><rect x="2.8777%" y="196" width="1.4388%" height="15" fill="rgb(231,138,38)"/><text x="3.1277%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (6 samples, 1.44%)</title><rect x="2.8777%" y="212" width="1.4388%" height="15" fill="rgb(231,145,46)"/><text x="3.1277%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 1.44%)</title><rect x="2.8777%" y="228" width="1.4388%" height="15" fill="rgb(251,118,11)"/><text x="3.1277%" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (5 samples, 1.20%)</title><rect x="3.1175%" y="244" width="1.1990%" height="15" fill="rgb(217,147,25)"/><text x="3.3675%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.20%)</title><rect x="3.1175%" y="260" width="1.1990%" height="15" fill="rgb(247,81,37)"/><text x="3.3675%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.20%)</title><rect x="3.1175%" y="276" width="1.1990%" height="15" fill="rgb(209,12,38)"/><text x="3.3675%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.20%)</title><rect x="3.1175%" y="292" width="1.1990%" height="15" fill="rgb(227,1,9)"/><text x="3.3675%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.20%)</title><rect x="3.1175%" y="308" width="1.1990%" height="15" fill="rgb(248,47,43)"/><text x="3.3675%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.20%)</title><rect x="3.1175%" y="324" width="1.1990%" height="15" fill="rgb(221,10,30)"/><text x="3.3675%" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (5 samples, 1.20%)</title><rect x="3.1175%" y="340" width="1.1990%" height="15" fill="rgb(210,229,1)"/><text x="3.3675%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 1.20%)</title><rect x="3.1175%" y="356" width="1.1990%" height="15" fill="rgb(222,148,37)"/><text x="3.3675%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 1.20%)</title><rect x="3.1175%" y="372" width="1.1990%" height="15" fill="rgb(234,67,33)"/><text x="3.3675%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 1.20%)</title><rect x="3.1175%" y="388" width="1.1990%" height="15" fill="rgb(247,98,35)"/><text x="3.3675%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 1.20%)</title><rect x="3.1175%" y="404" width="1.1990%" height="15" fill="rgb(247,138,52)"/><text x="3.3675%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 1.20%)</title><rect x="3.1175%" y="420" width="1.1990%" height="15" fill="rgb(213,79,30)"/><text x="3.3675%" y="430.50"></text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py:948) (10 samples, 2.40%)</title><rect x="6.7146%" y="180" width="2.3981%" height="15" fill="rgb(246,177,23)"/><text x="6.9646%" y="190.50">&lt;l..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (17 samples, 4.08%)</title><rect x="5.2758%" y="164" width="4.0767%" height="15" fill="rgb(230,62,27)"/><text x="5.5258%" y="174.50">chec..</text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1071) (18 samples, 4.32%)</title><rect x="5.2758%" y="148" width="4.3165%" height="15" fill="rgb(216,154,8)"/><text x="5.5258%" y="158.50">predi..</text></g><g><title>_assert_all_finite (sklearn/utils/validation.py:40) (5 samples, 1.20%)</title><rect x="15.8273%" y="196" width="1.1990%" height="15" fill="rgb(244,35,45)"/><text x="16.0773%" y="206.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (6 samples, 1.44%)</title><rect x="15.8273%" y="180" width="1.4388%" height="15" fill="rgb(251,115,12)"/><text x="16.0773%" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (9 samples, 2.16%)</title><rect x="17.2662%" y="180" width="2.1583%" height="15" fill="rgb(240,54,50)"/><text x="17.5162%" y="190.50">c..</text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:667) (41 samples, 9.83%)</title><rect x="9.8321%" y="164" width="9.8321%" height="15" fill="rgb(233,84,52)"/><text x="10.0821%" y="174.50">_predict (skle..</text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:683) (5 samples, 1.20%)</title><rect x="21.3429%" y="164" width="1.1990%" height="15" fill="rgb(207,117,47)"/><text x="21.5929%" y="174.50"></text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c:2871) (9 samples, 2.16%)</title><rect x="26.3789%" y="244" width="2.1583%" height="15" fill="rgb(249,43,39)"/><text x="26.6289%" y="254.50">P..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (6 samples, 1.44%)</title><rect x="27.0983%" y="260" width="1.4388%" height="15" fill="rgb(209,38,44)"/><text x="27.3483%" y="270.50"></text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py:151) (25 samples, 6.00%)</title><rect x="23.7410%" y="196" width="5.9952%" height="15" fill="rgb(236,212,23)"/><text x="23.9910%" y="206.50">safe_spa..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (19 samples, 4.56%)</title><rect x="25.1799%" y="212" width="4.5564%" height="15" fill="rgb(242,79,21)"/><text x="25.4299%" y="222.50">ufunc..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3142) (19 samples, 4.56%)</title><rect x="25.1799%" y="228" width="4.5564%" height="15" fill="rgb(211,96,35)"/><text x="25.4299%" y="238.50">PyUFu..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:104) (32 samples, 7.67%)</title><rect x="22.7818%" y="180" width="7.6739%" height="15" fill="rgb(253,215,40)"/><text x="23.0318%" y="190.50">_forward_pa..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:105) (11 samples, 2.64%)</title><rect x="30.4556%" y="180" width="2.6379%" height="15" fill="rgb(211,81,21)"/><text x="30.7056%" y="190.50">_f..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (11 samples, 2.64%)</title><rect x="30.4556%" y="196" width="2.6379%" height="15" fill="rgb(208,190,38)"/><text x="30.7056%" y="206.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (5 samples, 1.20%)</title><rect x="31.8945%" y="212" width="1.1990%" height="15" fill="rgb(235,213,38)"/><text x="32.1445%" y="222.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 1.20%)</title><rect x="31.8945%" y="228" width="1.1990%" height="15" fill="rgb(237,122,38)"/><text x="32.1445%" y="238.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:66) (5 samples, 1.20%)</title><rect x="35.9712%" y="324" width="1.1990%" height="15" fill="rgb(244,218,35)"/><text x="36.2212%" y="334.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;:6) (5 samples, 1.20%)</title><rect x="35.9712%" y="340" width="1.1990%" height="15" fill="rgb(240,68,47)"/><text x="36.2212%" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 1.20%)</title><rect x="35.9712%" y="356" width="1.1990%" height="15" fill="rgb(210,16,53)"/><text x="36.2212%" y="366.50"></text></g><g><title>_clip (numpy/core/_methods.py:106) (12 samples, 2.88%)</title><rect x="35.0120%" y="308" width="2.8777%" height="15" fill="rgb(235,124,12)"/><text x="35.2620%" y="318.50">_c..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 1.44%)</title><rect x="38.6091%" y="340" width="1.4388%" height="15" fill="rgb(224,169,11)"/><text x="38.8591%" y="350.50"></text></g><g><title>_clip (numpy/core/_methods.py:109) (10 samples, 2.40%)</title><rect x="37.8897%" y="308" width="2.3981%" height="15" fill="rgb(250,166,2)"/><text x="38.1397%" y="318.50">_c..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:69) (7 samples, 1.68%)</title><rect x="38.6091%" y="324" width="1.6787%" height="15" fill="rgb(242,216,29)"/><text x="38.8591%" y="334.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 1.92%)</title><rect x="41.4868%" y="340" width="1.9185%" height="15" fill="rgb(230,116,27)"/><text x="41.7368%" y="350.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 1.44%)</title><rect x="41.9664%" y="356" width="1.4388%" height="15" fill="rgb(228,99,48)"/><text x="42.2164%" y="366.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 1.20%)</title><rect x="42.2062%" y="372" width="1.1990%" height="15" fill="rgb(253,11,6)"/><text x="42.4562%" y="382.50"></text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:109) (44 samples, 10.55%)</title><rect x="33.3333%" y="180" width="10.5516%" height="15" fill="rgb(247,143,39)"/><text x="33.5833%" y="190.50">_forward_pass (..</text></g><g><title>relu (sklearn/neural_network/_base.py:75) (43 samples, 10.31%)</title><rect x="33.5731%" y="196" width="10.3118%" height="15" fill="rgb(236,97,10)"/><text x="33.8231%" y="206.50">relu (sklearn/n..</text></g><g><title>clip (&lt;__array_function__ internals&gt;:6) (39 samples, 9.35%)</title><rect x="34.5324%" y="212" width="9.3525%" height="15" fill="rgb(233,208,19)"/><text x="34.7824%" y="222.50">clip (&lt;__arra..</text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (38 samples, 9.11%)</title><rect x="34.7722%" y="228" width="9.1127%" height="15" fill="rgb(216,164,2)"/><text x="35.0222%" y="238.50">array_impleme..</text></g><g><title>clip (numpy/core/fromnumeric.py:2037) (38 samples, 9.11%)</title><rect x="34.7722%" y="244" width="9.1127%" height="15" fill="rgb(220,129,5)"/><text x="35.0222%" y="254.50">clip (numpy/c..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (38 samples, 9.11%)</title><rect x="34.7722%" y="260" width="9.1127%" height="15" fill="rgb(242,17,10)"/><text x="35.0222%" y="270.50">_wrapfunc (nu..</text></g><g><title>array_clip (methods.c:2381) (38 samples, 9.11%)</title><rect x="34.7722%" y="276" width="9.1127%" height="15" fill="rgb(242,107,0)"/><text x="35.0222%" y="286.50">array_clip (m..</text></g><g><title>forward_ndarray_method (methods.c:108) (38 samples, 9.11%)</title><rect x="34.7722%" y="292" width="9.1127%" height="15" fill="rgb(251,28,31)"/><text x="35.0222%" y="302.50">forward_ndarr..</text></g><g><title>_clip (numpy/core/_methods.py:132) (13 samples, 3.12%)</title><rect x="40.7674%" y="308" width="3.1175%" height="15" fill="rgb(233,223,10)"/><text x="41.0174%" y="318.50">_cl..</text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:85) (11 samples, 2.64%)</title><rect x="41.2470%" y="324" width="2.6379%" height="15" fill="rgb(215,21,27)"/><text x="41.4970%" y="334.50">_c..</text></g><g><title>array_max (methods.c:323) (10 samples, 2.40%)</title><rect x="44.8441%" y="212" width="2.3981%" height="15" fill="rgb(232,23,21)"/><text x="45.0941%" y="222.50">ar..</text></g><g><title>forward_ndarray_method (methods.c:108) (10 samples, 2.40%)</title><rect x="44.8441%" y="228" width="2.3981%" height="15" fill="rgb(244,5,23)"/><text x="45.0941%" y="238.50">fo..</text></g><g><title>_amax (numpy/core/_methods.py:30) (10 samples, 2.40%)</title><rect x="44.8441%" y="244" width="2.3981%" height="15" fill="rgb(226,81,46)"/><text x="45.0941%" y="254.50">_a..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (7 samples, 1.68%)</title><rect x="45.5635%" y="260" width="1.6787%" height="15" fill="rgb(247,70,30)"/><text x="45.8135%" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (6 samples, 1.44%)</title><rect x="45.8034%" y="276" width="1.4388%" height="15" fill="rgb(212,68,19)"/><text x="46.0534%" y="286.50"></text></g><g><title>softmax (sklearn/neural_network/_base.py:92) (18 samples, 4.32%)</title><rect x="44.3645%" y="196" width="4.3165%" height="15" fill="rgb(240,187,13)"/><text x="44.6145%" y="206.50">softm..</text></g><g><title>softmax (sklearn/neural_network/_base.py:93) (5 samples, 1.20%)</title><rect x="48.6811%" y="196" width="1.1990%" height="15" fill="rgb(223,113,26)"/><text x="48.9311%" y="206.50"></text></g><g><title>array_sum (methods.c:2215) (8 samples, 1.92%)</title><rect x="50.5995%" y="212" width="1.9185%" height="15" fill="rgb(206,192,2)"/><text x="50.8495%" y="222.50">a..</text></g><g><title>forward_ndarray_method (methods.c:108) (8 samples, 1.92%)</title><rect x="50.5995%" y="228" width="1.9185%" height="15" fill="rgb(241,108,4)"/><text x="50.8495%" y="238.50">f..</text></g><g><title>_sum (numpy/core/_methods.py:38) (8 samples, 1.92%)</title><rect x="50.5995%" y="244" width="1.9185%" height="15" fill="rgb(247,173,49)"/><text x="50.8495%" y="254.50">_..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (5 samples, 1.20%)</title><rect x="51.3189%" y="260" width="1.1990%" height="15" fill="rgb(224,114,35)"/><text x="51.5689%" y="270.50"></text></g><g><title>_predict (sklearn/neural_network/_multilayer_perceptron.py:685) (129 samples, 30.94%)</title><rect x="22.5420%" y="164" width="30.9353%" height="15" fill="rgb(245,159,27)"/><text x="22.7920%" y="174.50">_predict (sklearn/neural_network/_multilayer_perce..</text></g><g><title>_forward_pass (sklearn/neural_network/_multilayer_perceptron.py:113) (38 samples, 9.11%)</title><rect x="44.3645%" y="180" width="9.1127%" height="15" fill="rgb(245,172,44)"/><text x="44.6145%" y="190.50">_forward_pass..</text></g><g><title>softmax (sklearn/neural_network/_base.py:94) (15 samples, 3.60%)</title><rect x="49.8801%" y="196" width="3.5971%" height="15" fill="rgb(236,23,11)"/><text x="50.1301%" y="206.50">soft..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229) (203 samples, 48.68%)</title><rect x="5.2758%" y="132" width="48.6811%" height="15" fill="rgb(205,117,38)"/><text x="5.5258%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:229)</text></g><g><title>predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1072) (185 samples, 44.36%)</title><rect x="9.5923%" y="148" width="44.3645%" height="15" fill="rgb(237,72,25)"/><text x="9.8423%" y="158.50">predict_proba (sklearn/neural_network/_multilayer_perceptron.py:1072)</text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:54) (205 samples, 49.16%)</title><rect x="5.0360%" y="52" width="49.1607%" height="15" fill="rgb(244,70,9)"/><text x="5.2860%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:54)</text></g><g><title>profile_skl (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:53) (205 samples, 49.16%)</title><rect x="5.0360%" y="68" width="49.1607%" height="15" fill="rgb(217,125,39)"/><text x="5.2860%" y="78.50">profile_skl (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:53)</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:37) (205 samples, 49.16%)</title><rect x="5.0360%" y="84" width="49.1607%" height="15" fill="rgb(235,36,10)"/><text x="5.2860%" y="94.50">setup_profile (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:37)</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:31) (205 samples, 49.16%)</title><rect x="5.0360%" y="100" width="49.1607%" height="15" fill="rgb(251,123,47)"/><text x="5.2860%" y="110.50">profile (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:31)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (204 samples, 48.92%)</title><rect x="5.2758%" y="116" width="48.9209%" height="15" fill="rgb(221,13,13)"/><text x="5.5258%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183)</text></g><g><title>compiled_run (&lt;string&gt;:10) (5 samples, 1.20%)</title><rect x="55.6355%" y="180" width="1.1990%" height="15" fill="rgb(238,131,9)"/><text x="55.8855%" y="190.50"></text></g><g><title>compiled_run (&lt;string&gt;:13) (8 samples, 1.92%)</title><rect x="58.5132%" y="180" width="1.9185%" height="15" fill="rgb(211,50,8)"/><text x="58.7632%" y="190.50">c..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_relu.py:20) (8 samples, 1.92%)</title><rect x="58.5132%" y="196" width="1.9185%" height="15" fill="rgb(245,182,24)"/><text x="58.7632%" y="206.50">_..</text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (6 samples, 1.44%)</title><rect x="58.9928%" y="212" width="1.4388%" height="15" fill="rgb(242,14,37)"/><text x="59.2428%" y="222.50"></text></g><g><title>compiled_run (&lt;string&gt;:14) (10 samples, 2.40%)</title><rect x="60.4317%" y="180" width="2.3981%" height="15" fill="rgb(246,228,12)"/><text x="60.6817%" y="190.50">co..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_matmul.py:17) (10 samples, 2.40%)</title><rect x="60.4317%" y="196" width="2.3981%" height="15" fill="rgb(213,55,15)"/><text x="60.6817%" y="206.50">_r..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py:16) (7 samples, 1.68%)</title><rect x="61.1511%" y="212" width="1.6787%" height="15" fill="rgb(209,9,3)"/><text x="61.4011%" y="222.50"></text></g><g><title>array_max (methods.c:323) (12 samples, 2.88%)</title><rect x="63.5492%" y="212" width="2.8777%" height="15" fill="rgb(230,59,30)"/><text x="63.7992%" y="222.50">ar..</text></g><g><title>forward_ndarray_method (methods.c:108) (12 samples, 2.88%)</title><rect x="63.5492%" y="228" width="2.8777%" height="15" fill="rgb(209,121,21)"/><text x="63.7992%" y="238.50">fo..</text></g><g><title>_amax (numpy/core/_methods.py:30) (12 samples, 2.88%)</title><rect x="63.5492%" y="244" width="2.8777%" height="15" fill="rgb(220,109,13)"/><text x="63.7992%" y="254.50">_a..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (8 samples, 1.92%)</title><rect x="64.5084%" y="260" width="1.9185%" height="15" fill="rgb(232,18,1)"/><text x="64.7584%" y="270.50">u..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (7 samples, 1.68%)</title><rect x="64.7482%" y="276" width="1.6787%" height="15" fill="rgb(215,41,42)"/><text x="64.9982%" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (6 samples, 1.44%)</title><rect x="64.9880%" y="292" width="1.4388%" height="15" fill="rgb(224,123,36)"/><text x="65.2380%" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:23) (17 samples, 4.08%)</title><rect x="63.5492%" y="196" width="4.0767%" height="15" fill="rgb(240,125,3)"/><text x="63.7992%" y="206.50">_run..</text></g><g><title>array_sum (methods.c:2215) (9 samples, 2.16%)</title><rect x="68.5851%" y="212" width="2.1583%" height="15" fill="rgb(205,98,50)"/><text x="68.8351%" y="222.50">a..</text></g><g><title>forward_ndarray_method (methods.c:108) (9 samples, 2.16%)</title><rect x="68.5851%" y="228" width="2.1583%" height="15" fill="rgb(205,185,37)"/><text x="68.8351%" y="238.50">f..</text></g><g><title>_sum (numpy/core/_methods.py:38) (9 samples, 2.16%)</title><rect x="68.5851%" y="244" width="2.1583%" height="15" fill="rgb(238,207,15)"/><text x="68.8351%" y="254.50">_..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (6 samples, 1.44%)</title><rect x="69.3046%" y="260" width="1.4388%" height="15" fill="rgb(213,199,42)"/><text x="69.5546%" y="270.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (5 samples, 1.20%)</title><rect x="69.5444%" y="276" width="1.1990%" height="15" fill="rgb(235,201,11)"/><text x="69.7944%" y="286.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (5 samples, 1.20%)</title><rect x="69.5444%" y="292" width="1.1990%" height="15" fill="rgb(207,46,11)"/><text x="69.7944%" y="302.50"></text></g><g><title>compiled_run (&lt;string&gt;:16) (33 samples, 7.91%)</title><rect x="63.5492%" y="180" width="7.9137%" height="15" fill="rgb(241,35,35)"/><text x="63.7992%" y="190.50">compiled_ru..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_softmax.py:25) (15 samples, 3.60%)</title><rect x="67.8657%" y="196" width="3.5971%" height="15" fill="rgb(243,32,47)"/><text x="68.1157%" y="206.50">_run..</text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:13) (6 samples, 1.44%)</title><rect x="72.6619%" y="228" width="1.4388%" height="15" fill="rgb(247,202,23)"/><text x="72.9119%" y="238.50"></text></g><g><title>argmax (&lt;__array_function__ internals&gt;:6) (5 samples, 1.20%)</title><rect x="72.9017%" y="244" width="1.1990%" height="15" fill="rgb(219,102,11)"/><text x="73.1517%" y="254.50"></text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:15) (6 samples, 1.44%)</title><rect x="74.3405%" y="228" width="1.4388%" height="15" fill="rgb(243,110,44)"/><text x="74.5905%" y="238.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (5 samples, 1.20%)</title><rect x="74.5803%" y="244" width="1.1990%" height="15" fill="rgb(222,74,54)"/><text x="74.8303%" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 1.20%)</title><rect x="74.5803%" y="260" width="1.1990%" height="15" fill="rgb(216,99,12)"/><text x="74.8303%" y="270.50"></text></g><g><title>compiled_run (&lt;string&gt;:18) (19 samples, 4.56%)</title><rect x="72.4221%" y="180" width="4.5564%" height="15" fill="rgb(226,22,26)"/><text x="72.6721%" y="190.50">compi..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:66) (19 samples, 4.56%)</title><rect x="72.4221%" y="196" width="4.5564%" height="15" fill="rgb(217,163,10)"/><text x="72.6721%" y="206.50">_run ..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_argmax.py:38) (19 samples, 4.56%)</title><rect x="72.4221%" y="212" width="4.5564%" height="15" fill="rgb(213,25,53)"/><text x="72.6721%" y="222.50">_run ..</text></g><g><title>_argmax (mlprodict/onnxrt/ops_cpu/op_argmax.py:16) (5 samples, 1.20%)</title><rect x="75.7794%" y="228" width="1.1990%" height="15" fill="rgb(252,105,26)"/><text x="76.0294%" y="238.50"></text></g><g><title>array_subscript (mapping.c:1656) (5 samples, 1.20%)</title><rect x="77.9376%" y="212" width="1.1990%" height="15" fill="rgb(220,39,43)"/><text x="78.1876%" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_array_feature_extractor.py:44) (10 samples, 2.40%)</title><rect x="77.2182%" y="196" width="2.3981%" height="15" fill="rgb(229,68,48)"/><text x="77.4682%" y="206.50">_r..</text></g><g><title>compiled_run (&lt;string&gt;:19) (15 samples, 3.60%)</title><rect x="76.9784%" y="180" width="3.5971%" height="15" fill="rgb(252,8,32)"/><text x="77.2284%" y="190.50">comp..</text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:61) (119 samples, 28.54%)</title><rect x="54.1966%" y="52" width="28.5372%" height="15" fill="rgb(223,20,43)"/><text x="54.4466%" y="62.50">&lt;module&gt; (bench_MLPClassifier_default_b_cl_1_4..</text></g><g><title>profile_pyrtc (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:60) (119 samples, 28.54%)</title><rect x="54.1966%" y="68" width="28.5372%" height="15" fill="rgb(229,81,49)"/><text x="54.4466%" y="78.50">profile_pyrtc (bench_MLPClassifier_default_b_c..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:37) (119 samples, 28.54%)</title><rect x="54.1966%" y="84" width="28.5372%" height="15" fill="rgb(236,28,36)"/><text x="54.4466%" y="94.50">setup_profile (bench_MLPClassifier_default_b_c..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:31) (118 samples, 28.30%)</title><rect x="54.4365%" y="100" width="28.2974%" height="15" fill="rgb(249,185,26)"/><text x="54.6865%" y="110.50">profile (bench_MLPClassifier_default_b_cl_1_4..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (118 samples, 28.30%)</title><rect x="54.4365%" y="116" width="28.2974%" height="15" fill="rgb(249,174,33)"/><text x="54.6865%" y="126.50">time_predict (mlprodict/asv_benchmark/common_..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (115 samples, 27.58%)</title><rect x="55.1559%" y="132" width="27.5779%" height="15" fill="rgb(233,201,37)"/><text x="55.4059%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (115 samples, 27.58%)</title><rect x="55.1559%" y="148" width="27.5779%" height="15" fill="rgb(221,78,26)"/><text x="55.4059%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:442)</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py:160) (114 samples, 27.34%)</title><rect x="55.3957%" y="164" width="27.3381%" height="15" fill="rgb(250,127,30)"/><text x="55.6457%" y="174.50">_run_sequence_runtime_compiled (mlprodict/on..</text></g><g><title>all (417 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:68) (72 samples, 17.27%)</title><rect x="82.7338%" y="52" width="17.2662%" height="15" fill="rgb(229,67,23)"/><text x="82.9838%" y="62.50">&lt;module&gt; (bench_MLPClassifi..</text></g><g><title>profile_ort (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:67) (72 samples, 17.27%)</title><rect x="82.7338%" y="68" width="17.2662%" height="15" fill="rgb(249,83,47)"/><text x="82.9838%" y="78.50">profile_ort (bench_MLPClass..</text></g><g><title>setup_profile (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:37) (72 samples, 17.27%)</title><rect x="82.7338%" y="84" width="17.2662%" height="15" fill="rgb(215,43,3)"/><text x="82.9838%" y="94.50">setup_profile (bench_MLPCla..</text></g><g><title>profile (bench_MLPClassifier_default_b_cl_1_4_12_float_.py:31) (72 samples, 17.27%)</title><rect x="82.7338%" y="100" width="17.2662%" height="15" fill="rgb(238,154,13)"/><text x="82.9838%" y="110.50">profile (bench_MLPClassifie..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:183) (71 samples, 17.03%)</title><rect x="82.9736%" y="116" width="17.0264%" height="15" fill="rgb(219,56,2)"/><text x="83.2236%" y="126.50">time_predict (mlprodict/as..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:233) (71 samples, 17.03%)</title><rect x="82.9736%" y="132" width="17.0264%" height="15" fill="rgb(233,0,4)"/><text x="83.2236%" y="142.50">&lt;lambda&gt; (mlprodict/asv_be..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:442) (70 samples, 16.79%)</title><rect x="83.2134%" y="148" width="16.7866%" height="15" fill="rgb(235,30,7)"/><text x="83.4634%" y="158.50">run (mlprodict/onnxrt/onnx..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:650) (70 samples, 16.79%)</title><rect x="83.2134%" y="164" width="16.7866%" height="15" fill="rgb(250,79,13)"/><text x="83.4634%" y="174.50">_run_whole_runtime (mlprod..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (69 samples, 16.55%)</title><rect x="83.4532%" y="180" width="16.5468%" height="15" fill="rgb(211,146,34)"/><text x="83.7032%" y="190.50">run (mlprodict/onnxrt/ops_..</text></g><g><title>run (onnxruntime/capi/session.py:140) (69 samples, 16.55%)</title><rect x="83.4532%" y="196" width="16.5468%" height="15" fill="rgb(228,22,38)"/><text x="83.7032%" y="206.50">run (onnxruntime/capi/sess..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 16.31%)</title><rect x="83.6930%" y="212" width="16.3070%" height="15" fill="rgb(235,168,5)"/><text x="83.9430%" y="222.50">pybind11::cpp_function::d..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 16.31%)</title><rect x="83.6930%" y="228" width="16.3070%" height="15" fill="rgb(221,155,16)"/><text x="83.9430%" y="238.50">void pybind11::cpp_functi..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 16.31%)</title><rect x="83.6930%" y="244" width="16.3070%" height="15" fill="rgb(215,215,53)"/><text x="83.9430%" y="254.50">onnxruntime::InferenceSes..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (68 samples, 16.31%)</title><rect x="83.6930%" y="260" width="16.3070%" height="15" fill="rgb(223,4,10)"/><text x="83.9430%" y="270.50">onnxruntime::InferenceSes..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (67 samples, 16.07%)</title><rect x="83.9329%" y="276" width="16.0671%" height="15" fill="rgb(234,103,6)"/><text x="84.1829%" y="286.50">onnxruntime::utils::Execu..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (67 samples, 16.07%)</title><rect x="83.9329%" y="292" width="16.0671%" height="15" fill="rgb(227,97,0)"/><text x="84.1829%" y="302.50">onnxruntime::utils::Execu..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (67 samples, 16.07%)</title><rect x="83.9329%" y="308" width="16.0671%" height="15" fill="rgb(234,150,53)"/><text x="84.1829%" y="318.50">onnxruntime::SequentialEx..</text></g><g><title>onnxruntime::FunctionKernel::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (67 samples, 16.07%)</title><rect x="83.9329%" y="324" width="16.0671%" height="15" fill="rgb(228,201,54)"/><text x="84.1829%" y="334.50">onnxruntime::FunctionKern..</text></g><g><title>std::_Function_handler&lt;onnxruntime::common::Status(void*, OrtApi const*, OrtKernelContext*), onnxruntime::DNNLExecutionProvider::Compile(std::vector&lt;onnxruntime::Node*, std::allocator&lt;onnxruntime::Node*&gt; &gt; const&amp;, std::vector&lt;onnxruntime::NodeComputeInfo, std::allocator&lt;onnxruntime::NodeComputeInfo&gt; &gt;&amp;)::{lambda(void*, OrtApi const*, OrtKernelContext*)#3}&gt;::_M_invoke (onnxruntime/capi/onnxruntime_pybind11_state.so) (67 samples, 16.07%)</title><rect x="83.9329%" y="340" width="16.0671%" height="15" fill="rgb(222,22,37)"/><text x="84.1829%" y="350.50">std::_Function_handler&lt;on..</text></g><g><title>onnxruntime::ort_dnnl::DnnlFuncKernel&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (67 samples, 16.07%)</title><rect x="83.9329%" y="356" width="16.0671%" height="15" fill="rgb(237,53,32)"/><text x="84.1829%" y="366.50">onnxruntime::ort_dnnl::Dn..</text></g><g><title>dnnl_primitive_execute (onnxruntime/capi/libdnnl.so.1) (67 samples, 16.07%)</title><rect x="83.9329%" y="372" width="16.0671%" height="15" fill="rgb(233,25,53)"/><text x="84.1829%" y="382.50">dnnl_primitive_execute (o..</text></g><g><title>dnnl_primitive::execute (onnxruntime/capi/libdnnl.so.1) (67 samples, 16.07%)</title><rect x="83.9329%" y="388" width="16.0671%" height="15" fill="rgb(210,40,34)"/><text x="84.1829%" y="398.50">dnnl_primitive::execute (..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute (onnxruntime/capi/libdnnl.so.1) (67 samples, 16.07%)</title><rect x="83.9329%" y="404" width="16.0671%" height="15" fill="rgb(241,220,44)"/><text x="84.1829%" y="414.50">dnnl::impl::cpu::jit_uni_..</text></g><g><title>dnnl::impl::cpu::jit_uni_eltwise_fwd_t&lt;(dnnl::impl::cpu::cpu_isa_t)1, (dnnl_data_type_t)3&gt;::execute_forward (onnxruntime/capi/libdnnl.so.1) (67 samples, 16.07%)</title><rect x="83.9329%" y="420" width="16.0671%" height="15" fill="rgb(235,28,35)"/><text x="84.1829%" y="430.50">dnnl::impl::cpu::jit_uni_..</text></g><g><title>GOMP_parallel@GOMP_4.0 (libiomp5.so) (67 samples, 16.07%)</title><rect x="83.9329%" y="436" width="16.0671%" height="15" fill="rgb(210,56,17)"/><text x="84.1829%" y="446.50">GOMP_parallel@GOMP_4.0 (l..</text></g><g><title>__kmp_join_call (libiomp5.so) (66 samples, 15.83%)</title><rect x="84.1727%" y="452" width="15.8273%" height="15" fill="rgb(224,130,29)"/><text x="84.4227%" y="462.50">__kmp_join_call (libiomp..</text></g><g><title>__kmp_internal_join (libiomp5.so) (66 samples, 15.83%)</title><rect x="84.1727%" y="468" width="15.8273%" height="15" fill="rgb(235,212,8)"/><text x="84.4227%" y="478.50">__kmp_internal_join (lib..</text></g><g><title>__kmp_join_barrier (libiomp5.so) (66 samples, 15.83%)</title><rect x="84.1727%" y="484" width="15.8273%" height="15" fill="rgb(223,33,50)"/><text x="84.4227%" y="494.50">__kmp_join_barrier (libi..</text></g><g><title>_INTERNAL_25_______src_kmp_barrier_cpp_50ae66a0::__kmp_hyper_barrier_gather (libiomp5.so) (66 samples, 15.83%)</title><rect x="84.1727%" y="500" width="15.8273%" height="15" fill="rgb(219,149,13)"/><text x="84.4227%" y="510.50">_INTERNAL_25_______src_k..</text></g><g><title>sched_yield (libc-2.29.so) (11 samples, 2.64%)</title><rect x="97.3621%" y="516" width="2.6379%" height="15" fill="rgb(250,156,29)"/><text x="97.6121%" y="526.50">sc..</text></g></svg></svg>