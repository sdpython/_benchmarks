<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="965.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="965.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py) (3 samples, 1.09%)</title><rect x="0.0000%" y="868" width="1.0949%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py) (3 samples, 1.09%)</title><rect x="0.0000%" y="884" width="1.0949%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py) (3 samples, 1.09%)</title><rect x="0.0000%" y="900" width="1.0949%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py) (3 samples, 1.09%)</title><rect x="0.0000%" y="916" width="1.0949%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.09%)</title><rect x="0.0000%" y="932" width="1.0949%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="942.50"></text></g><g><title>_build_master (pkg_resources/__init__.py) (3 samples, 1.09%)</title><rect x="1.0949%" y="868" width="1.0949%" height="15" fill="rgb(232,128,0)"/><text x="1.3449%" y="878.50"></text></g><g><title>__init__ (pkg_resources/__init__.py) (3 samples, 1.09%)</title><rect x="1.0949%" y="884" width="1.0949%" height="15" fill="rgb(207,160,47)"/><text x="1.3449%" y="894.50"></text></g><g><title>add_entry (pkg_resources/__init__.py) (3 samples, 1.09%)</title><rect x="1.0949%" y="900" width="1.0949%" height="15" fill="rgb(228,23,34)"/><text x="1.3449%" y="910.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py) (7 samples, 2.55%)</title><rect x="0.0000%" y="836" width="2.5547%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="846.50">_c..</text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py) (7 samples, 2.55%)</title><rect x="0.0000%" y="852" width="2.5547%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="862.50">_i..</text></g><g><title>&lt;module&gt; (onnx/__init__.py) (8 samples, 2.92%)</title><rect x="0.0000%" y="292" width="2.9197%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="302.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="308" width="2.9197%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="318.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="324" width="2.9197%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="334.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="340" width="2.9197%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="350.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="356" width="2.9197%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="366.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="372" width="2.9197%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="382.50">_c..</text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py) (8 samples, 2.92%)</title><rect x="0.0000%" y="388" width="2.9197%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="398.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="404" width="2.9197%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="414.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="420" width="2.9197%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="430.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="436" width="2.9197%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="446.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="452" width="2.9197%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="462.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="468" width="2.9197%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="478.50">_c..</text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py) (8 samples, 2.92%)</title><rect x="0.0000%" y="484" width="2.9197%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="494.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="500" width="2.9197%" height="15" fill="rgb(247,18,42)"/><text x="0.2500%" y="510.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="516" width="2.9197%" height="15" fill="rgb(241,131,45)"/><text x="0.2500%" y="526.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="532" width="2.9197%" height="15" fill="rgb(249,31,29)"/><text x="0.2500%" y="542.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="548" width="2.9197%" height="15" fill="rgb(225,111,53)"/><text x="0.2500%" y="558.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="564" width="2.9197%" height="15" fill="rgb(238,160,17)"/><text x="0.2500%" y="574.50">_c..</text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py) (8 samples, 2.92%)</title><rect x="0.0000%" y="580" width="2.9197%" height="15" fill="rgb(214,148,48)"/><text x="0.2500%" y="590.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="596" width="2.9197%" height="15" fill="rgb(232,36,49)"/><text x="0.2500%" y="606.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="612" width="2.9197%" height="15" fill="rgb(209,103,24)"/><text x="0.2500%" y="622.50">_f..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="628" width="2.9197%" height="15" fill="rgb(229,88,8)"/><text x="0.2500%" y="638.50">_c..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="644" width="2.9197%" height="15" fill="rgb(213,181,19)"/><text x="0.2500%" y="654.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="660" width="2.9197%" height="15" fill="rgb(254,191,54)"/><text x="0.2500%" y="670.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="676" width="2.9197%" height="15" fill="rgb(241,83,37)"/><text x="0.2500%" y="686.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="692" width="2.9197%" height="15" fill="rgb(233,36,39)"/><text x="0.2500%" y="702.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="708" width="2.9197%" height="15" fill="rgb(226,3,54)"/><text x="0.2500%" y="718.50">_c..</text></g><g><title>&lt;module&gt; (protobuf/__init__.py) (8 samples, 2.92%)</title><rect x="0.0000%" y="724" width="2.9197%" height="15" fill="rgb(245,192,40)"/><text x="0.2500%" y="734.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="740" width="2.9197%" height="15" fill="rgb(238,167,29)"/><text x="0.2500%" y="750.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="756" width="2.9197%" height="15" fill="rgb(232,182,51)"/><text x="0.2500%" y="766.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="772" width="2.9197%" height="15" fill="rgb(231,60,39)"/><text x="0.2500%" y="782.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="788" width="2.9197%" height="15" fill="rgb(208,69,12)"/><text x="0.2500%" y="798.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="0.0000%" y="804" width="2.9197%" height="15" fill="rgb(235,93,37)"/><text x="0.2500%" y="814.50">_c..</text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py) (8 samples, 2.92%)</title><rect x="0.0000%" y="820" width="2.9197%" height="15" fill="rgb(213,116,39)"/><text x="0.2500%" y="830.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="500" width="1.0949%" height="15" fill="rgb(222,207,29)"/><text x="3.1697%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="516" width="1.0949%" height="15" fill="rgb(206,96,30)"/><text x="3.1697%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="532" width="1.0949%" height="15" fill="rgb(218,138,4)"/><text x="3.1697%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="548" width="1.0949%" height="15" fill="rgb(250,191,14)"/><text x="3.1697%" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="564" width="1.0949%" height="15" fill="rgb(239,60,40)"/><text x="3.1697%" y="574.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/fixes.py) (3 samples, 1.09%)</title><rect x="2.9197%" y="580" width="1.0949%" height="15" fill="rgb(206,27,48)"/><text x="3.1697%" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="596" width="1.0949%" height="15" fill="rgb(225,35,8)"/><text x="3.1697%" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="612" width="1.0949%" height="15" fill="rgb(250,213,24)"/><text x="3.1697%" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="628" width="1.0949%" height="15" fill="rgb(247,123,22)"/><text x="3.1697%" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="644" width="1.0949%" height="15" fill="rgb(231,138,38)"/><text x="3.1697%" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="660" width="1.0949%" height="15" fill="rgb(231,145,46)"/><text x="3.1697%" y="670.50"></text></g><g><title>&lt;module&gt; (scipy/stats/__init__.py) (3 samples, 1.09%)</title><rect x="2.9197%" y="676" width="1.0949%" height="15" fill="rgb(251,118,11)"/><text x="3.1697%" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="692" width="1.0949%" height="15" fill="rgb(217,147,25)"/><text x="3.1697%" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="708" width="1.0949%" height="15" fill="rgb(247,81,37)"/><text x="3.1697%" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="724" width="1.0949%" height="15" fill="rgb(209,12,38)"/><text x="3.1697%" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="740" width="1.0949%" height="15" fill="rgb(227,1,9)"/><text x="3.1697%" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (3 samples, 1.09%)</title><rect x="2.9197%" y="756" width="1.0949%" height="15" fill="rgb(248,47,43)"/><text x="3.1697%" y="766.50"></text></g><g><title>&lt;module&gt; (scipy/stats/stats.py) (3 samples, 1.09%)</title><rect x="2.9197%" y="772" width="1.0949%" height="15" fill="rgb(221,10,30)"/><text x="3.1697%" y="782.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 4.38%)</title><rect x="0.0000%" y="196" width="4.3796%" height="15" fill="rgb(210,229,1)"/><text x="0.2500%" y="206.50">_call..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 4.38%)</title><rect x="0.0000%" y="212" width="4.3796%" height="15" fill="rgb(222,148,37)"/><text x="0.2500%" y="222.50">_find..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 4.38%)</title><rect x="0.0000%" y="228" width="4.3796%" height="15" fill="rgb(234,67,33)"/><text x="0.2500%" y="238.50">_find..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 4.38%)</title><rect x="0.0000%" y="244" width="4.3796%" height="15" fill="rgb(247,98,35)"/><text x="0.2500%" y="254.50">_load..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (12 samples, 4.38%)</title><rect x="0.0000%" y="260" width="4.3796%" height="15" fill="rgb(247,138,52)"/><text x="0.2500%" y="270.50">exec_..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 4.38%)</title><rect x="0.0000%" y="276" width="4.3796%" height="15" fill="rgb(213,79,30)"/><text x="0.2500%" y="286.50">_call..</text></g><g><title>&lt;module&gt; (sklearn/__init__.py) (4 samples, 1.46%)</title><rect x="2.9197%" y="292" width="1.4599%" height="15" fill="rgb(246,177,23)"/><text x="3.1697%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="2.9197%" y="308" width="1.4599%" height="15" fill="rgb(230,62,27)"/><text x="3.1697%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="2.9197%" y="324" width="1.4599%" height="15" fill="rgb(216,154,8)"/><text x="3.1697%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="2.9197%" y="340" width="1.4599%" height="15" fill="rgb(244,35,45)"/><text x="3.1697%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.46%)</title><rect x="2.9197%" y="356" width="1.4599%" height="15" fill="rgb(251,115,12)"/><text x="3.1697%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="2.9197%" y="372" width="1.4599%" height="15" fill="rgb(240,54,50)"/><text x="3.1697%" y="382.50"></text></g><g><title>&lt;module&gt; (sklearn/base.py) (4 samples, 1.46%)</title><rect x="2.9197%" y="388" width="1.4599%" height="15" fill="rgb(233,84,52)"/><text x="3.1697%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="2.9197%" y="404" width="1.4599%" height="15" fill="rgb(207,117,47)"/><text x="3.1697%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="2.9197%" y="420" width="1.4599%" height="15" fill="rgb(249,43,39)"/><text x="3.1697%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="2.9197%" y="436" width="1.4599%" height="15" fill="rgb(209,38,44)"/><text x="3.1697%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.46%)</title><rect x="2.9197%" y="452" width="1.4599%" height="15" fill="rgb(236,212,23)"/><text x="3.1697%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="2.9197%" y="468" width="1.4599%" height="15" fill="rgb(242,79,21)"/><text x="3.1697%" y="478.50"></text></g><g><title>&lt;module&gt; (sklearn/utils/__init__.py) (4 samples, 1.46%)</title><rect x="2.9197%" y="484" width="1.4599%" height="15" fill="rgb(211,96,35)"/><text x="3.1697%" y="494.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (5 samples, 1.82%)</title><rect x="4.3796%" y="340" width="1.8248%" height="15" fill="rgb(253,215,40)"/><text x="4.6296%" y="350.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.82%)</title><rect x="4.3796%" y="356" width="1.8248%" height="15" fill="rgb(211,81,21)"/><text x="4.6296%" y="366.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.82%)</title><rect x="4.3796%" y="372" width="1.8248%" height="15" fill="rgb(208,190,38)"/><text x="4.6296%" y="382.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.82%)</title><rect x="4.3796%" y="388" width="1.8248%" height="15" fill="rgb(235,213,38)"/><text x="4.6296%" y="398.50">_..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (5 samples, 1.82%)</title><rect x="4.3796%" y="404" width="1.8248%" height="15" fill="rgb(237,122,38)"/><text x="4.6296%" y="414.50">e..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.82%)</title><rect x="4.3796%" y="420" width="1.8248%" height="15" fill="rgb(244,218,35)"/><text x="4.6296%" y="430.50">_..</text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (5 samples, 1.82%)</title><rect x="4.3796%" y="436" width="1.8248%" height="15" fill="rgb(240,68,47)"/><text x="4.6296%" y="446.50">&lt;..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.82%)</title><rect x="4.3796%" y="452" width="1.8248%" height="15" fill="rgb(210,16,53)"/><text x="4.6296%" y="462.50">_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (5 samples, 1.82%)</title><rect x="4.3796%" y="468" width="1.8248%" height="15" fill="rgb(235,124,12)"/><text x="4.6296%" y="478.50">_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="484" width="1.4599%" height="15" fill="rgb(224,169,11)"/><text x="4.9945%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="500" width="1.4599%" height="15" fill="rgb(250,166,2)"/><text x="4.9945%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="516" width="1.4599%" height="15" fill="rgb(242,216,29)"/><text x="4.9945%" y="526.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/onnx_inference.py) (4 samples, 1.46%)</title><rect x="4.7445%" y="532" width="1.4599%" height="15" fill="rgb(230,116,27)"/><text x="4.9945%" y="542.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="548" width="1.4599%" height="15" fill="rgb(228,99,48)"/><text x="4.9945%" y="558.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="564" width="1.4599%" height="15" fill="rgb(253,11,6)"/><text x="4.9945%" y="574.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="580" width="1.4599%" height="15" fill="rgb(247,143,39)"/><text x="4.9945%" y="590.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="596" width="1.4599%" height="15" fill="rgb(236,97,10)"/><text x="4.9945%" y="606.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="612" width="1.4599%" height="15" fill="rgb(233,208,19)"/><text x="4.9945%" y="622.50"></text></g><g><title>&lt;module&gt; (pandas/__init__.py) (4 samples, 1.46%)</title><rect x="4.7445%" y="628" width="1.4599%" height="15" fill="rgb(216,164,2)"/><text x="4.9945%" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="644" width="1.4599%" height="15" fill="rgb(220,129,5)"/><text x="4.9945%" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="660" width="1.4599%" height="15" fill="rgb(242,17,10)"/><text x="4.9945%" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="676" width="1.4599%" height="15" fill="rgb(242,107,0)"/><text x="4.9945%" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="692" width="1.4599%" height="15" fill="rgb(251,28,31)"/><text x="4.9945%" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (4 samples, 1.46%)</title><rect x="4.7445%" y="708" width="1.4599%" height="15" fill="rgb(233,223,10)"/><text x="4.9945%" y="718.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (7 samples, 2.55%)</title><rect x="4.3796%" y="244" width="2.5547%" height="15" fill="rgb(215,21,27)"/><text x="4.6296%" y="254.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (7 samples, 2.55%)</title><rect x="4.3796%" y="260" width="2.5547%" height="15" fill="rgb(232,23,21)"/><text x="4.6296%" y="270.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 2.55%)</title><rect x="4.3796%" y="276" width="2.5547%" height="15" fill="rgb(244,5,23)"/><text x="4.6296%" y="286.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (7 samples, 2.55%)</title><rect x="4.3796%" y="292" width="2.5547%" height="15" fill="rgb(226,81,46)"/><text x="4.6296%" y="302.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (7 samples, 2.55%)</title><rect x="4.3796%" y="308" width="2.5547%" height="15" fill="rgb(247,70,30)"/><text x="4.6296%" y="318.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (7 samples, 2.55%)</title><rect x="4.3796%" y="324" width="2.5547%" height="15" fill="rgb(212,68,19)"/><text x="4.6296%" y="334.50">_c..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (20 samples, 7.30%)</title><rect x="0.0000%" y="68" width="7.2993%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="78.50">_find_and_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (20 samples, 7.30%)</title><rect x="0.0000%" y="84" width="7.2993%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="94.50">_find_and_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (20 samples, 7.30%)</title><rect x="0.0000%" y="100" width="7.2993%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="110.50">_load_unlo..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (20 samples, 7.30%)</title><rect x="0.0000%" y="116" width="7.2993%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="126.50">exec_modul..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (20 samples, 7.30%)</title><rect x="0.0000%" y="132" width="7.2993%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="142.50">_call_with..</text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py) (20 samples, 7.30%)</title><rect x="0.0000%" y="148" width="7.2993%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="158.50">&lt;module&gt; (..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (20 samples, 7.30%)</title><rect x="0.0000%" y="164" width="7.2993%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="174.50">_find_and_..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (20 samples, 7.30%)</title><rect x="0.0000%" y="180" width="7.2993%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="190.50">_find_and_..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="4.3796%" y="196" width="2.9197%" height="15" fill="rgb(236,23,11)"/><text x="4.6296%" y="206.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (8 samples, 2.92%)</title><rect x="4.3796%" y="212" width="2.9197%" height="15" fill="rgb(205,117,38)"/><text x="4.6296%" y="222.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (8 samples, 2.92%)</title><rect x="4.3796%" y="228" width="2.9197%" height="15" fill="rgb(237,72,25)"/><text x="4.6296%" y="238.50">_c..</text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (4 samples, 1.46%)</title><rect x="7.6642%" y="260" width="1.4599%" height="15" fill="rgb(244,70,9)"/><text x="7.9142%" y="270.50"></text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py) (4 samples, 1.46%)</title><rect x="7.6642%" y="276" width="1.4599%" height="15" fill="rgb(217,125,39)"/><text x="7.9142%" y="286.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py) (4 samples, 1.46%)</title><rect x="7.6642%" y="292" width="1.4599%" height="15" fill="rgb(235,36,10)"/><text x="7.9142%" y="302.50"></text></g><g><title>_dispatch (joblib/parallel.py) (5 samples, 1.82%)</title><rect x="7.6642%" y="196" width="1.8248%" height="15" fill="rgb(251,123,47)"/><text x="7.9142%" y="206.50">_..</text></g><g><title>apply_async (joblib/_parallel_backends.py) (5 samples, 1.82%)</title><rect x="7.6642%" y="212" width="1.8248%" height="15" fill="rgb(221,13,13)"/><text x="7.9142%" y="222.50">a..</text></g><g><title>__init__ (joblib/_parallel_backends.py) (5 samples, 1.82%)</title><rect x="7.6642%" y="228" width="1.8248%" height="15" fill="rgb(238,131,9)"/><text x="7.9142%" y="238.50">_..</text></g><g><title>__call__ (joblib/parallel.py) (5 samples, 1.82%)</title><rect x="7.6642%" y="244" width="1.8248%" height="15" fill="rgb(211,50,8)"/><text x="7.9142%" y="254.50">_..</text></g><g><title>profile0_skl (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py) (8 samples, 2.92%)</title><rect x="7.2993%" y="68" width="2.9197%" height="15" fill="rgb(245,182,24)"/><text x="7.5493%" y="78.50">pr..</text></g><g><title>setup_profile0 (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py) (8 samples, 2.92%)</title><rect x="7.2993%" y="84" width="2.9197%" height="15" fill="rgb(242,14,37)"/><text x="7.5493%" y="94.50">se..</text></g><g><title>profile0 (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py) (8 samples, 2.92%)</title><rect x="7.2993%" y="100" width="2.9197%" height="15" fill="rgb(246,228,12)"/><text x="7.5493%" y="110.50">pr..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (8 samples, 2.92%)</title><rect x="7.2993%" y="116" width="2.9197%" height="15" fill="rgb(213,55,15)"/><text x="7.5493%" y="126.50">ti..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (8 samples, 2.92%)</title><rect x="7.2993%" y="132" width="2.9197%" height="15" fill="rgb(209,9,3)"/><text x="7.5493%" y="142.50">&lt;l..</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py) (8 samples, 2.92%)</title><rect x="7.2993%" y="148" width="2.9197%" height="15" fill="rgb(230,59,30)"/><text x="7.5493%" y="158.50">pr..</text></g><g><title>__call__ (joblib/parallel.py) (8 samples, 2.92%)</title><rect x="7.2993%" y="164" width="2.9197%" height="15" fill="rgb(209,121,21)"/><text x="7.5493%" y="174.50">__..</text></g><g><title>dispatch_one_batch (joblib/parallel.py) (8 samples, 2.92%)</title><rect x="7.2993%" y="180" width="2.9197%" height="15" fill="rgb(220,109,13)"/><text x="7.5493%" y="190.50">di..</text></g><g><title>update_wrapper (functools.py) (5 samples, 1.82%)</title><rect x="19.3431%" y="228" width="1.8248%" height="15" fill="rgb(232,18,1)"/><text x="19.5931%" y="238.50">u..</text></g><g><title>delayed (joblib/parallel.py) (10 samples, 3.65%)</title><rect x="18.2482%" y="212" width="3.6496%" height="15" fill="rgb(215,41,42)"/><text x="18.4982%" y="222.50">dela..</text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_forest.py) (13 samples, 4.74%)</title><rect x="17.5182%" y="196" width="4.7445%" height="15" fill="rgb(224,123,36)"/><text x="17.7682%" y="206.50">&lt;genex..</text></g><g><title>__init__ (joblib/parallel.py) (5 samples, 1.82%)</title><rect x="22.2628%" y="196" width="1.8248%" height="15" fill="rgb(240,125,3)"/><text x="22.5128%" y="206.50">_..</text></g><g><title>__call__ (joblib/parallel.py) (5 samples, 1.82%)</title><rect x="26.6423%" y="228" width="1.8248%" height="15" fill="rgb(205,98,50)"/><text x="26.8923%" y="238.50">_..</text></g><g><title>0x7f6f7cfcb2fd (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (7 samples, 2.55%)</title><rect x="36.4964%" y="404" width="2.5547%" height="15" fill="rgb(205,185,37)"/><text x="36.7464%" y="414.50">0x..</text></g><g><title>array_getbuffer (buffer.c) (7 samples, 2.55%)</title><rect x="36.4964%" y="420" width="2.5547%" height="15" fill="rgb(238,207,15)"/><text x="36.7464%" y="430.50">ar..</text></g><g><title>_buffer_get_info (buffer.c) (7 samples, 2.55%)</title><rect x="36.4964%" y="436" width="2.5547%" height="15" fill="rgb(213,199,42)"/><text x="36.7464%" y="446.50">_b..</text></g><g><title>_buffer_info_new (buffer.c) (5 samples, 1.82%)</title><rect x="37.2263%" y="452" width="1.8248%" height="15" fill="rgb(235,201,11)"/><text x="37.4763%" y="462.50">_..</text></g><g><title>0x7f6f7cfd5666 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (8 samples, 2.92%)</title><rect x="36.4964%" y="388" width="2.9197%" height="15" fill="rgb(207,46,11)"/><text x="36.7464%" y="398.50">0x..</text></g><g><title>0x7f6f7cfd5d04 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (9 samples, 3.28%)</title><rect x="36.4964%" y="372" width="3.2847%" height="15" fill="rgb(241,35,35)"/><text x="36.7464%" y="382.50">0x7..</text></g><g><title>0x7f6f7cff12df (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 4.38%)</title><rect x="36.4964%" y="356" width="4.3796%" height="15" fill="rgb(243,32,47)"/><text x="36.7464%" y="366.50">0x7f6..</text></g><g><title>0x7f6f7cff1592 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (3 samples, 1.09%)</title><rect x="40.8759%" y="356" width="1.0949%" height="15" fill="rgb(247,202,23)"/><text x="41.1259%" y="366.50"></text></g><g><title>array_zeros (multiarraymodule.c) (3 samples, 1.09%)</title><rect x="40.8759%" y="372" width="1.0949%" height="15" fill="rgb(219,102,11)"/><text x="41.1259%" y="382.50"></text></g><g><title>0x7f6f7cff2405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (19 samples, 6.93%)</title><rect x="35.7664%" y="340" width="6.9343%" height="15" fill="rgb(243,110,44)"/><text x="36.0164%" y="350.50">0x7f6f7cf..</text></g><g><title>0x7f6f7cfe2fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (21 samples, 7.66%)</title><rect x="35.7664%" y="324" width="7.6642%" height="15" fill="rgb(222,74,54)"/><text x="36.0164%" y="334.50">0x7f6f7cfe..</text></g><g><title>PyArray_ClipmodeConverter (conversion_utils.c) (3 samples, 1.09%)</title><rect x="44.5255%" y="356" width="1.0949%" height="15" fill="rgb(216,99,12)"/><text x="44.7755%" y="366.50"></text></g><g><title>0x7f6f7cfe305a (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (6 samples, 2.19%)</title><rect x="43.7956%" y="324" width="2.1898%" height="15" fill="rgb(226,22,26)"/><text x="44.0456%" y="334.50">0..</text></g><g><title>array_take (methods.c) (5 samples, 1.82%)</title><rect x="44.1606%" y="340" width="1.8248%" height="15" fill="rgb(217,163,10)"/><text x="44.4106%" y="350.50">a..</text></g><g><title>0x7f6f7cfe3d2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (37 samples, 13.50%)</title><rect x="34.6715%" y="308" width="13.5036%" height="15" fill="rgb(213,25,53)"/><text x="34.9215%" y="318.50">0x7f6f7cfe3d2e (skle..</text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (4 samples, 1.46%)</title><rect x="48.1752%" y="308" width="1.4599%" height="15" fill="rgb(252,105,26)"/><text x="48.4252%" y="318.50"></text></g><g><title>array_assign_subscript (mapping.c) (4 samples, 1.46%)</title><rect x="49.6350%" y="308" width="1.4599%" height="15" fill="rgb(220,39,43)"/><text x="49.8850%" y="318.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (8 samples, 2.92%)</title><rect x="51.8248%" y="340" width="2.9197%" height="15" fill="rgb(229,68,48)"/><text x="52.0748%" y="350.50">Py..</text></g><g><title>get_ufunc_arguments (ufunc_object.c) (5 samples, 1.82%)</title><rect x="52.9197%" y="356" width="1.8248%" height="15" fill="rgb(252,8,32)"/><text x="53.1697%" y="366.50">g..</text></g><g><title>PyArray_FromAny (ctors.c) (5 samples, 1.82%)</title><rect x="52.9197%" y="372" width="1.8248%" height="15" fill="rgb(223,20,43)"/><text x="53.1697%" y="382.50">P..</text></g><g><title>array_richcompare (arrayobject.c) (11 samples, 4.01%)</title><rect x="51.4599%" y="308" width="4.0146%" height="15" fill="rgb(229,81,49)"/><text x="51.7099%" y="318.50">arra..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (10 samples, 3.65%)</title><rect x="51.8248%" y="324" width="3.6496%" height="15" fill="rgb(236,28,36)"/><text x="52.0748%" y="334.50">ufun..</text></g><g><title>array_subscript (mapping.c) (5 samples, 1.82%)</title><rect x="55.4745%" y="308" width="1.8248%" height="15" fill="rgb(249,185,26)"/><text x="55.7245%" y="318.50">a..</text></g><g><title>get_view_from_index (mapping.c) (3 samples, 1.09%)</title><rect x="56.2044%" y="324" width="1.0949%" height="15" fill="rgb(249,174,33)"/><text x="56.4544%" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c) (5 samples, 1.82%)</title><rect x="58.3942%" y="372" width="1.8248%" height="15" fill="rgb(233,201,37)"/><text x="58.6442%" y="382.50">P..</text></g><g><title>get_array_ufunc_overrides (override.c) (5 samples, 1.82%)</title><rect x="58.3942%" y="388" width="1.8248%" height="15" fill="rgb(221,78,26)"/><text x="58.6442%" y="398.50">g..</text></g><g><title>PyUFuncOverride_GetNonDefaultArrayUfunc (ufunc_override.c) (5 samples, 1.82%)</title><rect x="58.3942%" y="404" width="1.8248%" height="15" fill="rgb(250,127,30)"/><text x="58.6442%" y="414.50">P..</text></g><g><title>PyArray_LookupSpecial (get_attr_string.h) (5 samples, 1.82%)</title><rect x="58.3942%" y="420" width="1.8248%" height="15" fill="rgb(230,49,44)"/><text x="58.6442%" y="430.50">P..</text></g><g><title>maybe_get_attr (get_attr_string.h) (5 samples, 1.82%)</title><rect x="58.3942%" y="436" width="1.8248%" height="15" fill="rgb(229,67,23)"/><text x="58.6442%" y="446.50">m..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (3 samples, 1.09%)</title><rect x="60.9489%" y="420" width="1.0949%" height="15" fill="rgb(249,83,47)"/><text x="61.1989%" y="430.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c) (4 samples, 1.46%)</title><rect x="62.0438%" y="420" width="1.4599%" height="15" fill="rgb(215,43,3)"/><text x="62.2938%" y="430.50"></text></g><g><title>allocate_reduce_result (reduction.c) (3 samples, 1.09%)</title><rect x="62.4088%" y="436" width="1.0949%" height="15" fill="rgb(238,154,13)"/><text x="62.6588%" y="446.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (11 samples, 4.01%)</title><rect x="60.5839%" y="404" width="4.0146%" height="15" fill="rgb(219,56,2)"/><text x="60.8339%" y="414.50">PyUF..</text></g><g><title>array_sum (methods.c) (21 samples, 7.66%)</title><rect x="57.2993%" y="308" width="7.6642%" height="15" fill="rgb(233,0,4)"/><text x="57.5493%" y="318.50">array_sum ..</text></g><g><title>forward_ndarray_method (methods.c) (21 samples, 7.66%)</title><rect x="57.2993%" y="324" width="7.6642%" height="15" fill="rgb(235,30,7)"/><text x="57.5493%" y="334.50">forward_nd..</text></g><g><title>_sum (numpy/core/_methods.py) (20 samples, 7.30%)</title><rect x="57.6642%" y="340" width="7.2993%" height="15" fill="rgb(250,79,13)"/><text x="57.9142%" y="350.50">_sum (nump..</text></g><g><title>ufunc_reduce (ufunc_object.c) (18 samples, 6.57%)</title><rect x="58.3942%" y="356" width="6.5693%" height="15" fill="rgb(211,146,34)"/><text x="58.6442%" y="366.50">ufunc_red..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (13 samples, 4.74%)</title><rect x="60.2190%" y="372" width="4.7445%" height="15" fill="rgb(228,22,38)"/><text x="60.4690%" y="382.50">PyUFun..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (12 samples, 4.38%)</title><rect x="60.5839%" y="388" width="4.3796%" height="15" fill="rgb(235,168,5)"/><text x="60.8339%" y="398.50">PyUFu..</text></g><g><title>&lt;listcomp&gt; (sklearn/utils/validation.py) (13 samples, 4.74%)</title><rect x="67.5182%" y="324" width="4.7445%" height="15" fill="rgb(221,155,16)"/><text x="67.7682%" y="334.50">&lt;listc..</text></g><g><title>unicode_endswith (python3.7) (6 samples, 2.19%)</title><rect x="70.0730%" y="340" width="2.1898%" height="15" fill="rgb(215,215,53)"/><text x="70.3230%" y="350.50">u..</text></g><g><title>check_is_fitted (sklearn/utils/validation.py) (21 samples, 7.66%)</title><rect x="64.9635%" y="308" width="7.6642%" height="15" fill="rgb(223,4,10)"/><text x="65.2135%" y="318.50">check_is_f..</text></g><g><title>predict_proba (sklearn/tree/_classes.py) (114 samples, 41.61%)</title><rect x="31.7518%" y="292" width="41.6058%" height="15" fill="rgb(234,103,6)"/><text x="32.0018%" y="302.50">predict_proba (sklearn/tree/_classes.py)</text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c) (3 samples, 1.09%)</title><rect x="73.3577%" y="324" width="1.0949%" height="15" fill="rgb(227,97,0)"/><text x="73.6077%" y="334.50"></text></g><g><title>PyArray_ResultType (convert_datatype.c) (3 samples, 1.09%)</title><rect x="73.3577%" y="340" width="1.0949%" height="15" fill="rgb(234,150,53)"/><text x="73.6077%" y="350.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py) (123 samples, 44.89%)</title><rect x="30.6569%" y="260" width="44.8905%" height="15" fill="rgb(228,201,54)"/><text x="30.9069%" y="270.50">&lt;listcomp&gt; (joblib/parallel.py)</text></g><g><title>_accumulate_prediction (sklearn/ensemble/_forest.py) (122 samples, 44.53%)</title><rect x="31.0219%" y="276" width="44.5255%" height="15" fill="rgb(222,22,37)"/><text x="31.2719%" y="286.50">_accumulate_prediction (sklearn/ensemble/_forest.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (6 samples, 2.19%)</title><rect x="73.3577%" y="292" width="2.1898%" height="15" fill="rgb(237,53,32)"/><text x="73.6077%" y="302.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (6 samples, 2.19%)</title><rect x="73.3577%" y="308" width="2.1898%" height="15" fill="rgb(233,25,53)"/><text x="73.6077%" y="318.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (3 samples, 1.09%)</title><rect x="74.4526%" y="324" width="1.0949%" height="15" fill="rgb(210,40,34)"/><text x="74.7026%" y="334.50"></text></g><g><title>PyArray_EQUIVALENTLY_ITERABLE_OVERLAP_OK (lowlevel_strided_loops.h) (3 samples, 1.09%)</title><rect x="74.4526%" y="340" width="1.0949%" height="15" fill="rgb(241,220,44)"/><text x="74.7026%" y="350.50"></text></g><g><title>solve_may_share_memory (mem_overlap.c) (3 samples, 1.09%)</title><rect x="74.4526%" y="356" width="1.0949%" height="15" fill="rgb(235,28,35)"/><text x="74.7026%" y="366.50"></text></g><g><title>__exit__ (joblib/parallel.py) (7 samples, 2.55%)</title><rect x="75.5474%" y="260" width="2.5547%" height="15" fill="rgb(210,56,17)"/><text x="75.7974%" y="270.50">__..</text></g><g><title>unregister (joblib/parallel.py) (5 samples, 1.82%)</title><rect x="76.2774%" y="276" width="1.8248%" height="15" fill="rgb(224,130,29)"/><text x="76.5274%" y="286.50">u..</text></g><g><title>_dispatch (joblib/parallel.py) (150 samples, 54.74%)</title><rect x="24.0876%" y="196" width="54.7445%" height="15" fill="rgb(235,212,8)"/><text x="24.3376%" y="206.50">_dispatch (joblib/parallel.py)</text></g><g><title>apply_async (joblib/_parallel_backends.py) (144 samples, 52.55%)</title><rect x="26.2774%" y="212" width="52.5547%" height="15" fill="rgb(223,33,50)"/><text x="26.5274%" y="222.50">apply_async (joblib/_parallel_backends.py)</text></g><g><title>__init__ (joblib/_parallel_backends.py) (138 samples, 50.36%)</title><rect x="28.4672%" y="228" width="50.3650%" height="15" fill="rgb(219,149,13)"/><text x="28.7172%" y="238.50">__init__ (joblib/_parallel_backends.py)</text></g><g><title>__call__ (joblib/parallel.py) (134 samples, 48.91%)</title><rect x="29.9270%" y="244" width="48.9051%" height="15" fill="rgb(250,156,29)"/><text x="30.1770%" y="254.50">__call__ (joblib/parallel.py)</text></g><g><title>get (queue.py) (7 samples, 2.55%)</title><rect x="79.1971%" y="196" width="2.5547%" height="15" fill="rgb(216,193,19)"/><text x="79.4471%" y="206.50">ge..</text></g><g><title>get_active_backend (joblib/parallel.py) (13 samples, 4.74%)</title><rect x="86.1314%" y="212" width="4.7445%" height="15" fill="rgb(216,135,14)"/><text x="86.3814%" y="222.50">get_ac..</text></g><g><title>__init__ (joblib/_parallel_backends.py) (4 samples, 1.46%)</title><rect x="89.4161%" y="228" width="1.4599%" height="15" fill="rgb(241,47,5)"/><text x="89.6661%" y="238.50"></text></g><g><title>get_nested_backend (joblib/_parallel_backends.py) (26 samples, 9.49%)</title><rect x="81.7518%" y="196" width="9.4891%" height="15" fill="rgb(233,42,35)"/><text x="82.0018%" y="206.50">get_nested_bac..</text></g><g><title>dispatch_one_batch (joblib/parallel.py) (228 samples, 83.21%)</title><rect x="10.9489%" y="180" width="83.2117%" height="15" fill="rgb(231,13,6)"/><text x="11.1989%" y="190.50">dispatch_one_batch (joblib/parallel.py)</text></g><g><title>put (queue.py) (8 samples, 2.92%)</title><rect x="91.2409%" y="196" width="2.9197%" height="15" fill="rgb(207,181,40)"/><text x="91.4909%" y="206.50">pu..</text></g><g><title>notify (threading.py) (4 samples, 1.46%)</title><rect x="92.7007%" y="212" width="1.4599%" height="15" fill="rgb(254,173,49)"/><text x="92.9507%" y="222.50"></text></g><g><title>__call__ (joblib/parallel.py) (231 samples, 84.31%)</title><rect x="10.9489%" y="164" width="84.3066%" height="15" fill="rgb(221,1,38)"/><text x="11.1989%" y="174.50">__call__ (joblib/parallel.py)</text></g><g><title>retrieve (joblib/parallel.py) (3 samples, 1.09%)</title><rect x="94.1606%" y="180" width="1.0949%" height="15" fill="rgb(206,124,46)"/><text x="94.4106%" y="190.50"></text></g><g><title>_joblib_parallel_args (sklearn/utils/fixes.py) (3 samples, 1.09%)</title><rect x="95.6204%" y="164" width="1.0949%" height="15" fill="rgb(249,21,11)"/><text x="95.8704%" y="174.50"></text></g><g><title>__init__ (distutils/version.py) (3 samples, 1.09%)</title><rect x="95.6204%" y="180" width="1.0949%" height="15" fill="rgb(222,201,40)"/><text x="95.8704%" y="190.50"></text></g><g><title>parse (distutils/version.py) (3 samples, 1.09%)</title><rect x="95.6204%" y="196" width="1.0949%" height="15" fill="rgb(235,61,29)"/><text x="95.8704%" y="206.50"></text></g><g><title>_partition_estimators (sklearn/ensemble/_base.py) (3 samples, 1.09%)</title><rect x="96.7153%" y="164" width="1.0949%" height="15" fill="rgb(219,207,3)"/><text x="96.9653%" y="174.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (239 samples, 87.23%)</title><rect x="10.9489%" y="132" width="87.2263%" height="15" fill="rgb(222,56,46)"/><text x="11.1989%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/ensemble/_forest.py) (239 samples, 87.23%)</title><rect x="10.9489%" y="148" width="87.2263%" height="15" fill="rgb(239,76,54)"/><text x="11.1989%" y="158.50">predict_proba (sklearn/ensemble/_forest.py)</text></g><g><title>profile_skl (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py) (240 samples, 87.59%)</title><rect x="10.9489%" y="68" width="87.5912%" height="15" fill="rgb(231,124,27)"/><text x="11.1989%" y="78.50">profile_skl (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>setup_profile (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py) (240 samples, 87.59%)</title><rect x="10.9489%" y="84" width="87.5912%" height="15" fill="rgb(249,195,6)"/><text x="11.1989%" y="94.50">setup_profile (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>profile (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py) (240 samples, 87.59%)</title><rect x="10.9489%" y="100" width="87.5912%" height="15" fill="rgb(237,174,47)"/><text x="11.1989%" y="110.50">profile (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (240 samples, 87.59%)</title><rect x="10.9489%" y="116" width="87.5912%" height="15" fill="rgb(206,201,31)"/><text x="11.1989%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>all (274 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(231,57,52)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py) (274 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(248,177,22)"/><text x="0.2500%" y="62.50">&lt;module&gt; (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py)</text></g><g><title>start (bench_RandomForestClassifier_default_b_cl_1_50_12_float_.py) (4 samples, 1.46%)</title><rect x="98.5401%" y="68" width="1.4599%" height="15" fill="rgb(215,211,37)"/><text x="98.7901%" y="78.50"></text></g><g><title>setup_cache (profiles/benches/ensemble/RandomForestClassifier/bench_RandomForestClassifier_default_b_cl.py) (4 samples, 1.46%)</title><rect x="98.5401%" y="84" width="1.4599%" height="15" fill="rgb(241,128,51)"/><text x="98.7901%" y="94.50"></text></g><g><title>setup_cache (mlprodict/asv_benchmark/common_asv_skl.py) (4 samples, 1.46%)</title><rect x="98.5401%" y="100" width="1.4599%" height="15" fill="rgb(227,165,31)"/><text x="98.7901%" y="110.50"></text></g><g><title>fit (sklearn/ensemble/_forest.py) (4 samples, 1.46%)</title><rect x="98.5401%" y="116" width="1.4599%" height="15" fill="rgb(228,167,24)"/><text x="98.7901%" y="126.50"></text></g></svg></svg>