<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180"><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.53%)</title><rect x="0.0000%" y="68" width="1.5280%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.53%)</title><rect x="0.0000%" y="84" width="1.5280%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.53%)</title><rect x="0.0000%" y="100" width="1.5280%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (9 samples, 1.53%)</title><rect x="0.0000%" y="116" width="1.5280%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.53%)</title><rect x="0.0000%" y="132" width="1.5280%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/ensemble/AdaBoostClassifier/bench_AdaBoostClassifier_default_m_cl.py) (9 samples, 1.53%)</title><rect x="0.0000%" y="148" width="1.5280%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.53%)</title><rect x="0.0000%" y="164" width="1.5280%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.53%)</title><rect x="0.0000%" y="180" width="1.5280%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="190.50"></text></g><g><title>profile0_skl (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (8 samples, 1.36%)</title><rect x="1.5280%" y="68" width="1.3582%" height="15" fill="rgb(218,30,26)"/><text x="1.7780%" y="78.50"></text></g><g><title>setup_profile0 (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (8 samples, 1.36%)</title><rect x="1.5280%" y="84" width="1.3582%" height="15" fill="rgb(220,122,19)"/><text x="1.7780%" y="94.50"></text></g><g><title>profile0 (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (8 samples, 1.36%)</title><rect x="1.5280%" y="100" width="1.3582%" height="15" fill="rgb(250,228,42)"/><text x="1.7780%" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (8 samples, 1.36%)</title><rect x="1.5280%" y="116" width="1.3582%" height="15" fill="rgb(240,193,28)"/><text x="1.7780%" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (8 samples, 1.36%)</title><rect x="1.5280%" y="132" width="1.3582%" height="15" fill="rgb(216,20,37)"/><text x="1.7780%" y="142.50"></text></g><g><title>predict_proba (sklearn/ensemble/_weight_boosting.py) (8 samples, 1.36%)</title><rect x="1.5280%" y="148" width="1.3582%" height="15" fill="rgb(206,188,39)"/><text x="1.7780%" y="158.50"></text></g><g><title>decision_function (sklearn/ensemble/_weight_boosting.py) (8 samples, 1.36%)</title><rect x="1.5280%" y="164" width="1.3582%" height="15" fill="rgb(217,207,13)"/><text x="1.7780%" y="174.50"></text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_weight_boosting.py) (8 samples, 1.36%)</title><rect x="1.5280%" y="180" width="1.3582%" height="15" fill="rgb(231,73,38)"/><text x="1.7780%" y="190.50"></text></g><g><title>_samme_proba (sklearn/ensemble/_weight_boosting.py) (8 samples, 1.36%)</title><rect x="1.5280%" y="196" width="1.3582%" height="15" fill="rgb(225,20,46)"/><text x="1.7780%" y="206.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py) (6 samples, 1.02%)</title><rect x="1.8676%" y="212" width="1.0187%" height="15" fill="rgb(210,31,41)"/><text x="2.1176%" y="222.50"></text></g><g><title>onnxruntime::Log&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 1.02%)</title><rect x="4.2445%" y="324" width="1.0187%" height="15" fill="rgb(221,200,47)"/><text x="4.4945%" y="334.50"></text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 1.36%)</title><rect x="5.4329%" y="356" width="1.3582%" height="15" fill="rgb(226,26,5)"/><text x="5.6829%" y="366.50"></text></g><g><title>onnxruntime::Mul&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 1.70%)</title><rect x="5.2632%" y="324" width="1.6978%" height="15" fill="rgb(249,33,26)"/><text x="5.5132%" y="334.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Mul&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 1.70%)</title><rect x="5.2632%" y="340" width="1.6978%" height="15" fill="rgb(235,183,28)"/><text x="5.5132%" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (24 samples, 4.07%)</title><rect x="20.3735%" y="372" width="4.0747%" height="15" fill="rgb(221,5,38)"/><text x="20.6235%" y="382.50">oper..</text></g><g><title>malloc (libc-2.29.so) (20 samples, 3.40%)</title><rect x="21.0526%" y="388" width="3.3956%" height="15" fill="rgb(247,18,42)"/><text x="21.3026%" y="398.50">mal..</text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::ProcessTreeNode (onnxruntime/capi/onnxruntime_pybind11_state.so) (84 samples, 14.26%)</title><rect x="11.5450%" y="340" width="14.2615%" height="15" fill="rgb(241,131,45)"/><text x="11.7950%" y="350.50">onnxruntime::ml::TreeE..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;long, float&gt;&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (45 samples, 7.64%)</title><rect x="18.1664%" y="356" width="7.6401%" height="15" fill="rgb(249,31,29)"/><text x="18.4164%" y="366.50">std::_Rb_t..</text></g><g><title>std::_Rb_tree_insert_and_rebalance (libstdc++.so.6.0.28) (8 samples, 1.36%)</title><rect x="24.4482%" y="372" width="1.3582%" height="15" fill="rgb(225,111,53)"/><text x="24.6982%" y="382.50"></text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 4.58%)</title><rect x="26.6553%" y="340" width="4.5840%" height="15" fill="rgb(238,160,17)"/><text x="26.9053%" y="350.50">std::..</text></g><g><title>onnxruntime::ml::TreeEnsembleClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (137 samples, 23.26%)</title><rect x="8.3192%" y="324" width="23.2598%" height="15" fill="rgb(214,148,48)"/><text x="8.5692%" y="334.50">onnxruntime::ml::TreeEnsembleClassifi..</text></g><g><title>profile (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (170 samples, 28.86%)</title><rect x="2.8862%" y="100" width="28.8625%" height="15" fill="rgb(232,36,49)"/><text x="3.1362%" y="110.50">profile (bench_AdaBoostClassifier_default_m_cl..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (170 samples, 28.86%)</title><rect x="2.8862%" y="116" width="28.8625%" height="15" fill="rgb(209,103,24)"/><text x="3.1362%" y="126.50">time_predict (mlprodict/asv_benchmark/common_a..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (170 samples, 28.86%)</title><rect x="2.8862%" y="132" width="28.8625%" height="15" fill="rgb(229,88,8)"/><text x="3.1362%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_s..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (170 samples, 28.86%)</title><rect x="2.8862%" y="148" width="28.8625%" height="15" fill="rgb(213,181,19)"/><text x="3.1362%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (170 samples, 28.86%)</title><rect x="2.8862%" y="164" width="28.8625%" height="15" fill="rgb(254,191,54)"/><text x="3.1362%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_infe..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (169 samples, 28.69%)</title><rect x="3.0560%" y="180" width="28.6927%" height="15" fill="rgb(241,83,37)"/><text x="3.3060%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (169 samples, 28.69%)</title><rect x="3.0560%" y="196" width="28.6927%" height="15" fill="rgb(233,36,39)"/><text x="3.3060%" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 28.52%)</title><rect x="3.2258%" y="212" width="28.5229%" height="15" fill="rgb(226,3,54)"/><text x="3.4758%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntim..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 28.52%)</title><rect x="3.2258%" y="228" width="28.5229%" height="15" fill="rgb(245,192,40)"/><text x="3.4758%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxru..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 28.52%)</title><rect x="3.2258%" y="244" width="28.5229%" height="15" fill="rgb(238,167,29)"/><text x="3.4758%" y="254.50">onnxruntime::InferenceSession::Run (onnxruntim..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 28.52%)</title><rect x="3.2258%" y="260" width="28.5229%" height="15" fill="rgb(232,182,51)"/><text x="3.4758%" y="270.50">onnxruntime::InferenceSession::Run (onnxruntim..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 28.52%)</title><rect x="3.2258%" y="276" width="28.5229%" height="15" fill="rgb(231,60,39)"/><text x="3.4758%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxruntime/..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 28.52%)</title><rect x="3.2258%" y="292" width="28.5229%" height="15" fill="rgb(208,69,12)"/><text x="3.4758%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (onnxrunt..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (168 samples, 28.52%)</title><rect x="3.2258%" y="308" width="28.5229%" height="15" fill="rgb(235,93,37)"/><text x="3.4758%" y="318.50">onnxruntime::SequentialExecutor::Execute (onnx..</text></g><g><title>profile_ort (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (172 samples, 29.20%)</title><rect x="2.8862%" y="68" width="29.2020%" height="15" fill="rgb(213,116,39)"/><text x="3.1362%" y="78.50">profile_ort (bench_AdaBoostClassifier_default_m..</text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (172 samples, 29.20%)</title><rect x="2.8862%" y="84" width="29.2020%" height="15" fill="rgb(222,207,29)"/><text x="3.1362%" y="94.50">setup_profile (bench_AdaBoostClassifier_default..</text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (7 samples, 1.19%)</title><rect x="35.1443%" y="276" width="1.1885%" height="15" fill="rgb(206,96,30)"/><text x="35.3943%" y="286.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (6 samples, 1.02%)</title><rect x="35.3141%" y="292" width="1.0187%" height="15" fill="rgb(218,138,4)"/><text x="35.5641%" y="302.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (6 samples, 1.02%)</title><rect x="35.3141%" y="308" width="1.0187%" height="15" fill="rgb(250,191,14)"/><text x="35.5641%" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py) (19 samples, 3.23%)</title><rect x="33.4465%" y="196" width="3.2258%" height="15" fill="rgb(239,60,40)"/><text x="33.6965%" y="206.50">_ru..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (16 samples, 2.72%)</title><rect x="33.9559%" y="212" width="2.7165%" height="15" fill="rgb(206,27,48)"/><text x="34.2059%" y="222.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (15 samples, 2.55%)</title><rect x="34.1256%" y="228" width="2.5467%" height="15" fill="rgb(225,35,8)"/><text x="34.3756%" y="238.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (14 samples, 2.38%)</title><rect x="34.2954%" y="244" width="2.3769%" height="15" fill="rgb(250,213,24)"/><text x="34.5454%" y="254.50">ex..</text></g><g><title>iterator_loop (ufunc_object.c) (14 samples, 2.38%)</title><rect x="34.2954%" y="260" width="2.3769%" height="15" fill="rgb(247,123,22)"/><text x="34.5454%" y="270.50">it..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (6 samples, 1.02%)</title><rect x="39.8981%" y="404" width="1.0187%" height="15" fill="rgb(231,138,38)"/><text x="40.1481%" y="414.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (13 samples, 2.21%)</title><rect x="40.9168%" y="404" width="2.2071%" height="15" fill="rgb(231,145,46)"/><text x="41.1668%" y="414.50">N..</text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (11 samples, 1.87%)</title><rect x="41.2564%" y="420" width="1.8676%" height="15" fill="rgb(251,118,11)"/><text x="41.5064%" y="430.50">n..</text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (11 samples, 1.87%)</title><rect x="41.2564%" y="436" width="1.8676%" height="15" fill="rgb(217,147,25)"/><text x="41.5064%" y="446.50">P..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (25 samples, 4.24%)</title><rect x="39.2190%" y="356" width="4.2445%" height="15" fill="rgb(247,81,37)"/><text x="39.4690%" y="366.50">PyUFu..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (25 samples, 4.24%)</title><rect x="39.2190%" y="372" width="4.2445%" height="15" fill="rgb(209,12,38)"/><text x="39.4690%" y="382.50">execu..</text></g><g><title>iterator_loop (ufunc_object.c) (25 samples, 4.24%)</title><rect x="39.2190%" y="388" width="4.2445%" height="15" fill="rgb(227,1,9)"/><text x="39.4690%" y="398.50">itera..</text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py) (29 samples, 4.92%)</title><rect x="38.7097%" y="324" width="4.9236%" height="15" fill="rgb(248,47,43)"/><text x="38.9597%" y="334.50">_clip_..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (27 samples, 4.58%)</title><rect x="39.0492%" y="340" width="4.5840%" height="15" fill="rgb(221,10,30)"/><text x="39.2992%" y="350.50">ufunc..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_clip.py) (50 samples, 8.49%)</title><rect x="37.1817%" y="196" width="8.4890%" height="15" fill="rgb(210,229,1)"/><text x="37.4317%" y="206.50">_run (mlprod..</text></g><g><title>clip (&lt;__array_function__ internals&gt;) (47 samples, 7.98%)</title><rect x="37.6910%" y="212" width="7.9796%" height="15" fill="rgb(222,148,37)"/><text x="37.9410%" y="222.50">clip (&lt;__ar..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (46 samples, 7.81%)</title><rect x="37.8608%" y="228" width="7.8098%" height="15" fill="rgb(234,67,33)"/><text x="38.1108%" y="238.50">array_imple..</text></g><g><title>clip (numpy/core/fromnumeric.py) (46 samples, 7.81%)</title><rect x="37.8608%" y="244" width="7.8098%" height="15" fill="rgb(247,98,35)"/><text x="38.1108%" y="254.50">clip (numpy..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (45 samples, 7.64%)</title><rect x="38.0306%" y="260" width="7.6401%" height="15" fill="rgb(247,138,52)"/><text x="38.2806%" y="270.50">_wrapfunc ..</text></g><g><title>array_clip (methods.c) (45 samples, 7.64%)</title><rect x="38.0306%" y="276" width="7.6401%" height="15" fill="rgb(213,79,30)"/><text x="38.2806%" y="286.50">array_clip..</text></g><g><title>forward_ndarray_method (methods.c) (45 samples, 7.64%)</title><rect x="38.0306%" y="292" width="7.6401%" height="15" fill="rgb(246,177,23)"/><text x="38.2806%" y="302.50">forward_nd..</text></g><g><title>_clip (numpy/core/_methods.py) (45 samples, 7.64%)</title><rect x="38.0306%" y="308" width="7.6401%" height="15" fill="rgb(230,62,27)"/><text x="38.2806%" y="318.50">_clip (num..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (12 samples, 2.04%)</title><rect x="43.6333%" y="324" width="2.0374%" height="15" fill="rgb(216,154,8)"/><text x="43.8833%" y="334.50">_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_log.py) (23 samples, 3.90%)</title><rect x="45.8404%" y="196" width="3.9049%" height="15" fill="rgb(244,35,45)"/><text x="46.0904%" y="206.50">_run..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (22 samples, 3.74%)</title><rect x="46.0102%" y="212" width="3.7351%" height="15" fill="rgb(251,115,12)"/><text x="46.2602%" y="222.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (22 samples, 3.74%)</title><rect x="46.0102%" y="228" width="3.7351%" height="15" fill="rgb(240,54,50)"/><text x="46.2602%" y="238.50">PyUF..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (22 samples, 3.74%)</title><rect x="46.0102%" y="244" width="3.7351%" height="15" fill="rgb(233,84,52)"/><text x="46.2602%" y="254.50">exec..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (20 samples, 3.40%)</title><rect x="46.3497%" y="260" width="3.3956%" height="15" fill="rgb(207,117,47)"/><text x="46.5997%" y="270.50">tri..</text></g><g><title>FLOAT_log (loops.c.src) (20 samples, 3.40%)</title><rect x="46.3497%" y="276" width="3.3956%" height="15" fill="rgb(249,43,39)"/><text x="46.5997%" y="286.50">FLO..</text></g><g><title>FLOAT_add (loops.c.src) (8 samples, 1.36%)</title><rect x="52.1222%" y="356" width="1.3582%" height="15" fill="rgb(209,38,44)"/><text x="52.3722%" y="366.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py) (30 samples, 5.09%)</title><rect x="49.7453%" y="196" width="5.0934%" height="15" fill="rgb(236,212,23)"/><text x="49.9953%" y="206.50">_run (..</text></g><g><title>sum (&lt;__array_function__ internals&gt;) (27 samples, 4.58%)</title><rect x="50.2547%" y="212" width="4.5840%" height="15" fill="rgb(242,79,21)"/><text x="50.5047%" y="222.50">sum (..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (26 samples, 4.41%)</title><rect x="50.4244%" y="228" width="4.4143%" height="15" fill="rgb(211,96,35)"/><text x="50.6744%" y="238.50">array..</text></g><g><title>sum (numpy/core/fromnumeric.py) (25 samples, 4.24%)</title><rect x="50.5942%" y="244" width="4.2445%" height="15" fill="rgb(253,215,40)"/><text x="50.8442%" y="254.50">sum (..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py) (25 samples, 4.24%)</title><rect x="50.5942%" y="260" width="4.2445%" height="15" fill="rgb(211,81,21)"/><text x="50.8442%" y="270.50">_wrap..</text></g><g><title>ufunc_reduce (ufunc_object.c) (23 samples, 3.90%)</title><rect x="50.9338%" y="276" width="3.9049%" height="15" fill="rgb(208,190,38)"/><text x="51.1838%" y="286.50">ufun..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (22 samples, 3.74%)</title><rect x="51.1036%" y="292" width="3.7351%" height="15" fill="rgb(235,213,38)"/><text x="51.3536%" y="302.50">PyUF..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (21 samples, 3.57%)</title><rect x="51.2733%" y="308" width="3.5654%" height="15" fill="rgb(237,122,38)"/><text x="51.5233%" y="318.50">PyUF..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (21 samples, 3.57%)</title><rect x="51.2733%" y="324" width="3.5654%" height="15" fill="rgb(244,218,35)"/><text x="51.5233%" y="334.50">PyUF..</text></g><g><title>reduce_loop (ufunc_object.c) (18 samples, 3.06%)</title><rect x="51.7827%" y="340" width="3.0560%" height="15" fill="rgb(240,68,47)"/><text x="52.0327%" y="350.50">red..</text></g><g><title>npyiter_buffered_reduce_iternext_iters2 (nditer_templ.c.src) (7 samples, 1.19%)</title><rect x="53.6503%" y="356" width="1.1885%" height="15" fill="rgb(210,16,53)"/><text x="53.9003%" y="366.50"></text></g><g><title>0x7fe369d1bea9 (libgomp.so.1.0.0) (12 samples, 2.04%)</title><rect x="56.0272%" y="436" width="2.0374%" height="15" fill="rgb(235,124,12)"/><text x="56.2772%" y="446.50">0..</text></g><g><title>0x7fe369d1beab (libgomp.so.1.0.0) (14 samples, 2.38%)</title><rect x="58.0645%" y="436" width="2.3769%" height="15" fill="rgb(224,169,11)"/><text x="58.3145%" y="446.50">0x..</text></g><g><title>0x7fe369d1aab9 (libgomp.so.1.0.0) (35 samples, 5.94%)</title><rect x="55.8574%" y="420" width="5.9423%" height="15" fill="rgb(250,166,2)"/><text x="56.1074%" y="430.50">0x7fe369..</text></g><g><title>0x7fe369d1bead (libgomp.so.1.0.0) (8 samples, 1.36%)</title><rect x="60.4414%" y="436" width="1.3582%" height="15" fill="rgb(242,216,29)"/><text x="60.6914%" y="446.50"></text></g><g><title>0x7fe369d1bcf9 (libgomp.so.1.0.0) (7 samples, 1.19%)</title><rect x="61.7997%" y="452" width="1.1885%" height="15" fill="rgb(230,116,27)"/><text x="62.0497%" y="462.50"></text></g><g><title>profile (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (188 samples, 31.92%)</title><rect x="32.0883%" y="100" width="31.9185%" height="15" fill="rgb(228,99,48)"/><text x="32.3383%" y="110.50">profile (bench_AdaBoostClassifier_default_m_cl_1000_..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (187 samples, 31.75%)</title><rect x="32.2581%" y="116" width="31.7487%" height="15" fill="rgb(253,11,6)"/><text x="32.5081%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_sk..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (187 samples, 31.75%)</title><rect x="32.2581%" y="132" width="31.7487%" height="15" fill="rgb(247,143,39)"/><text x="32.5081%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (187 samples, 31.75%)</title><rect x="32.2581%" y="148" width="31.7487%" height="15" fill="rgb(236,97,10)"/><text x="32.5081%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py) (187 samples, 31.75%)</title><rect x="32.2581%" y="164" width="31.7487%" height="15" fill="rgb(233,208,19)"/><text x="32.5081%" y="174.50">_run_sequence_runtime_compiled (mlprodict/onnxrt/on..</text></g><g><title>compiled_run (&lt;string&gt;) (183 samples, 31.07%)</title><rect x="32.9372%" y="180" width="31.0696%" height="15" fill="rgb(216,164,2)"/><text x="33.1872%" y="190.50">compiled_run (&lt;string&gt;)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier.py) (50 samples, 8.49%)</title><rect x="55.5178%" y="196" width="8.4890%" height="15" fill="rgb(220,129,5)"/><text x="55.7678%" y="206.50">_run (mlprod..</text></g><g><title>pybind11::cpp_function::dispatcher (pybind11.h) (49 samples, 8.32%)</title><rect x="55.6876%" y="212" width="8.3192%" height="15" fill="rgb(242,17,10)"/><text x="55.9376%" y="222.50">pybind11::cp..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (pybind11.h) (49 samples, 8.32%)</title><rect x="55.6876%" y="228" width="8.3192%" height="15" fill="rgb(242,107,0)"/><text x="55.9376%" y="238.50">void pybind1..</text></g><g><title>void pybind11::cpp_function::initialize&lt;pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}, pybind11::tuple, RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;&amp;)#1}, pybind11::tuple (*)(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(pybind11::detail::function_call&amp;)#3}::operator() const (pybind11.h) (49 samples, 8.32%)</title><rect x="55.6876%" y="244" width="8.3192%" height="15" fill="rgb(251,28,31)"/><text x="55.9376%" y="254.50">void pybind1..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call&lt;pybind11::tuple, pybind11::detail::void_type, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}&gt; &amp;&amp; (cast.h) (49 samples, 8.32%)</title><rect x="55.6876%" y="260" width="8.3192%" height="15" fill="rgb(233,223,10)"/><text x="55.9376%" y="270.50">pybind11::de..</text></g><g><title>pybind11::detail::argument_loader&lt;RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt; &gt;::call_impl&lt;pybind11::tuple, pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;&amp;)#1}, (unsigned long)0, (unsigned long)1, pybind11::detail::void_type&gt; (cast.h) (49 samples, 8.32%)</title><rect x="55.6876%" y="276" width="8.3192%" height="15" fill="rgb(215,21,27)"/><text x="55.9376%" y="286.50">pybind11::de..</text></g><g><title>pybind11::cpp_function::cpp_function&lt;pybind11::tuple, RuntimeTreeEnsembleClassifierFloat, pybind11::array_t&lt;float, 16&gt;, pybind11::name, pybind11::is_method, pybind11::sibling, char [48]&gt;(pybind11::name const, pybind11::is_method&amp;, pybind11::sibling, char [48])::{lambda(RuntimeTreeEnsembleClassifierFloat const*, pybind11::array_t&lt;float, 16&gt;)#1}::operator() const (pybind11.h) (49 samples, 8.32%)</title><rect x="55.6876%" y="292" width="8.3192%" height="15" fill="rgb(232,23,21)"/><text x="55.9376%" y="302.50">pybind11::cp..</text></g><g><title>pybind11::array_t&lt;float, 16&gt;::~array_t (numpy.h) (49 samples, 8.32%)</title><rect x="55.6876%" y="308" width="8.3192%" height="15" fill="rgb(244,5,23)"/><text x="55.9376%" y="318.50">pybind11::ar..</text></g><g><title>pybind11::array::~array (numpy.h) (49 samples, 8.32%)</title><rect x="55.6876%" y="324" width="8.3192%" height="15" fill="rgb(226,81,46)"/><text x="55.9376%" y="334.50">pybind11::ar..</text></g><g><title>pybind11::buffer::~buffer (pytypes.h) (49 samples, 8.32%)</title><rect x="55.6876%" y="340" width="8.3192%" height="15" fill="rgb(247,70,30)"/><text x="55.9376%" y="350.50">pybind11::bu..</text></g><g><title>pybind11::object::~object (pytypes.h) (49 samples, 8.32%)</title><rect x="55.6876%" y="356" width="8.3192%" height="15" fill="rgb(212,68,19)"/><text x="55.9376%" y="366.50">pybind11::ob..</text></g><g><title>pybind11::handle::dec_ref &amp; (pytypes.h) (49 samples, 8.32%)</title><rect x="55.6876%" y="372" width="8.3192%" height="15" fill="rgb(240,187,13)"/><text x="55.9376%" y="382.50">pybind11::ha..</text></g><g><title>RuntimeTreeEnsembleClassifier&lt;float&gt;::compute (mlprodict/onnxrt/ops_cpu/op_tree_ensemble_classifier_.cpp) (49 samples, 8.32%)</title><rect x="55.6876%" y="388" width="8.3192%" height="15" fill="rgb(223,113,26)"/><text x="55.9376%" y="398.50">RuntimeTreeE..</text></g><g><title>pybind11::gil_scoped_release::~gil_scoped_release (pybind11.h) (48 samples, 8.15%)</title><rect x="55.8574%" y="404" width="8.1494%" height="15" fill="rgb(206,192,2)"/><text x="56.1074%" y="414.50">pybind11::g..</text></g><g><title>GOMP_parallel (libgomp.so.1.0.0) (13 samples, 2.21%)</title><rect x="61.7997%" y="420" width="2.2071%" height="15" fill="rgb(241,108,4)"/><text x="62.0497%" y="430.50">G..</text></g><g><title>0x7fe369d19daa (libgomp.so.1.0.0) (13 samples, 2.21%)</title><rect x="61.7997%" y="436" width="2.2071%" height="15" fill="rgb(247,173,49)"/><text x="62.0497%" y="446.50">0..</text></g><g><title>profile_pyrtc (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (191 samples, 32.43%)</title><rect x="32.0883%" y="68" width="32.4278%" height="15" fill="rgb(224,114,35)"/><text x="32.3383%" y="78.50">profile_pyrtc (bench_AdaBoostClassifier_default_m_cl..</text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (191 samples, 32.43%)</title><rect x="32.0883%" y="84" width="32.4278%" height="15" fill="rgb(245,159,27)"/><text x="32.3383%" y="94.50">setup_profile (bench_AdaBoostClassifier_default_m_cl..</text></g><g><title>array_multiply (number.c) (8 samples, 1.36%)</title><rect x="66.2139%" y="212" width="1.3582%" height="15" fill="rgb(245,172,44)"/><text x="66.4639%" y="222.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (6 samples, 1.02%)</title><rect x="68.2513%" y="292" width="1.0187%" height="15" fill="rgb(236,23,11)"/><text x="68.5013%" y="302.50"></text></g><g><title>array_subtract (number.c) (11 samples, 1.87%)</title><rect x="67.7419%" y="212" width="1.8676%" height="15" fill="rgb(205,117,38)"/><text x="67.9919%" y="222.50">a..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (11 samples, 1.87%)</title><rect x="67.7419%" y="228" width="1.8676%" height="15" fill="rgb(237,72,25)"/><text x="67.9919%" y="238.50">u..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (11 samples, 1.87%)</title><rect x="67.7419%" y="244" width="1.8676%" height="15" fill="rgb(244,70,9)"/><text x="67.9919%" y="254.50">P..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (11 samples, 1.87%)</title><rect x="67.7419%" y="260" width="1.8676%" height="15" fill="rgb(217,125,39)"/><text x="67.9919%" y="270.50">e..</text></g><g><title>iterator_loop (ufunc_object.c) (11 samples, 1.87%)</title><rect x="67.7419%" y="276" width="1.8676%" height="15" fill="rgb(235,36,10)"/><text x="67.9919%" y="286.50">i..</text></g><g><title>DOUBLE_add (loops.c.src) (9 samples, 1.53%)</title><rect x="70.7980%" y="340" width="1.5280%" height="15" fill="rgb(251,123,47)"/><text x="71.0480%" y="350.50"></text></g><g><title>array_sum (methods.c) (17 samples, 2.89%)</title><rect x="69.6095%" y="212" width="2.8862%" height="15" fill="rgb(221,13,13)"/><text x="69.8595%" y="222.50">ar..</text></g><g><title>forward_ndarray_method (methods.c) (17 samples, 2.89%)</title><rect x="69.6095%" y="228" width="2.8862%" height="15" fill="rgb(238,131,9)"/><text x="69.8595%" y="238.50">fo..</text></g><g><title>_sum (numpy/core/_methods.py) (17 samples, 2.89%)</title><rect x="69.6095%" y="244" width="2.8862%" height="15" fill="rgb(211,50,8)"/><text x="69.8595%" y="254.50">_s..</text></g><g><title>ufunc_reduce (ufunc_object.c) (17 samples, 2.89%)</title><rect x="69.6095%" y="260" width="2.8862%" height="15" fill="rgb(245,182,24)"/><text x="69.8595%" y="270.50">uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (16 samples, 2.72%)</title><rect x="69.7793%" y="276" width="2.7165%" height="15" fill="rgb(242,14,37)"/><text x="70.0293%" y="286.50">Py..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (15 samples, 2.55%)</title><rect x="69.9491%" y="292" width="2.5467%" height="15" fill="rgb(246,228,12)"/><text x="70.1991%" y="302.50">Py..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (15 samples, 2.55%)</title><rect x="69.9491%" y="308" width="2.5467%" height="15" fill="rgb(213,55,15)"/><text x="70.1991%" y="318.50">Py..</text></g><g><title>reduce_loop (ufunc_object.c) (13 samples, 2.21%)</title><rect x="70.2886%" y="324" width="2.2071%" height="15" fill="rgb(209,9,3)"/><text x="70.5386%" y="334.50">r..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (7 samples, 1.19%)</title><rect x="75.7216%" y="356" width="1.1885%" height="15" fill="rgb(230,59,30)"/><text x="75.9716%" y="366.50"></text></g><g><title>clip (numpy/core/fromnumeric.py) (25 samples, 4.24%)</title><rect x="72.8353%" y="244" width="4.2445%" height="15" fill="rgb(209,121,21)"/><text x="73.0853%" y="254.50">clip ..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py) (25 samples, 4.24%)</title><rect x="72.8353%" y="260" width="4.2445%" height="15" fill="rgb(220,109,13)"/><text x="73.0853%" y="270.50">_wrap..</text></g><g><title>array_clip (methods.c) (25 samples, 4.24%)</title><rect x="72.8353%" y="276" width="4.2445%" height="15" fill="rgb(232,18,1)"/><text x="73.0853%" y="286.50">array..</text></g><g><title>forward_ndarray_method (methods.c) (25 samples, 4.24%)</title><rect x="72.8353%" y="292" width="4.2445%" height="15" fill="rgb(215,41,42)"/><text x="73.0853%" y="302.50">forwa..</text></g><g><title>_clip (numpy/core/_methods.py) (25 samples, 4.24%)</title><rect x="72.8353%" y="308" width="4.2445%" height="15" fill="rgb(224,123,36)"/><text x="73.0853%" y="318.50">_clip..</text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py) (15 samples, 2.55%)</title><rect x="74.5331%" y="324" width="2.5467%" height="15" fill="rgb(240,125,3)"/><text x="74.7831%" y="334.50">_c..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (10 samples, 1.70%)</title><rect x="75.3820%" y="340" width="1.6978%" height="15" fill="rgb(205,98,50)"/><text x="75.6320%" y="350.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;) (28 samples, 4.75%)</title><rect x="72.4958%" y="212" width="4.7538%" height="15" fill="rgb(205,185,37)"/><text x="72.7458%" y="222.50">clip (..</text></g><g><title>array_implement_array_function (arrayfunction_override.c) (26 samples, 4.41%)</title><rect x="72.8353%" y="228" width="4.4143%" height="15" fill="rgb(238,207,15)"/><text x="73.0853%" y="238.50">array..</text></g><g><title>0x7fe37a919fa6 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 2.21%)</title><rect x="77.5891%" y="244" width="2.2071%" height="15" fill="rgb(213,199,42)"/><text x="77.8391%" y="254.50">0..</text></g><g><title>0x7fe37a929405 (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (13 samples, 2.21%)</title><rect x="77.5891%" y="260" width="2.2071%" height="15" fill="rgb(235,201,11)"/><text x="77.8391%" y="270.50">0..</text></g><g><title>0x7fe37a91ad2e (sklearn/tree/_tree.cpython-37m-x86_64-linux-gnu.so) (19 samples, 3.23%)</title><rect x="77.5891%" y="228" width="3.2258%" height="15" fill="rgb(207,46,11)"/><text x="77.8391%" y="238.50">0x7..</text></g><g><title>__enter__ (warnings.py) (6 samples, 1.02%)</title><rect x="82.5127%" y="260" width="1.0187%" height="15" fill="rgb(241,35,35)"/><text x="82.7627%" y="270.50"></text></g><g><title>_validate_X_predict (sklearn/tree/_classes.py) (30 samples, 5.09%)</title><rect x="80.9847%" y="228" width="5.0934%" height="15" fill="rgb(243,32,47)"/><text x="81.2347%" y="238.50">_valid..</text></g><g><title>check_array (sklearn/utils/validation.py) (28 samples, 4.75%)</title><rect x="81.3243%" y="244" width="4.7538%" height="15" fill="rgb(247,202,23)"/><text x="81.5743%" y="254.50">check_..</text></g><g><title>DOUBLE_add (loops.c.src) (6 samples, 1.02%)</title><rect x="88.7946%" y="356" width="1.0187%" height="15" fill="rgb(219,102,11)"/><text x="89.0446%" y="366.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (17 samples, 2.89%)</title><rect x="87.0968%" y="324" width="2.8862%" height="15" fill="rgb(243,110,44)"/><text x="87.3468%" y="334.50">Py..</text></g><g><title>reduce_loop (ufunc_object.c) (9 samples, 1.53%)</title><rect x="88.4550%" y="340" width="1.5280%" height="15" fill="rgb(222,74,54)"/><text x="88.7050%" y="350.50"></text></g><g><title>array_sum (methods.c) (22 samples, 3.74%)</title><rect x="86.5874%" y="228" width="3.7351%" height="15" fill="rgb(216,99,12)"/><text x="86.8374%" y="238.50">arra..</text></g><g><title>forward_ndarray_method (methods.c) (22 samples, 3.74%)</title><rect x="86.5874%" y="244" width="3.7351%" height="15" fill="rgb(226,22,26)"/><text x="86.8374%" y="254.50">forw..</text></g><g><title>_sum (numpy/core/_methods.py) (21 samples, 3.57%)</title><rect x="86.7572%" y="260" width="3.5654%" height="15" fill="rgb(217,163,10)"/><text x="87.0072%" y="270.50">_sum..</text></g><g><title>ufunc_reduce (ufunc_object.c) (21 samples, 3.57%)</title><rect x="86.7572%" y="276" width="3.5654%" height="15" fill="rgb(213,25,53)"/><text x="87.0072%" y="286.50">ufun..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (20 samples, 3.40%)</title><rect x="86.9270%" y="292" width="3.3956%" height="15" fill="rgb(252,105,26)"/><text x="87.1770%" y="302.50">PyU..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (19 samples, 3.23%)</title><rect x="87.0968%" y="308" width="3.2258%" height="15" fill="rgb(220,39,43)"/><text x="87.3468%" y="318.50">PyU..</text></g><g><title>DOUBLE_divide (loops.c.src) (8 samples, 1.36%)</title><rect x="91.1715%" y="292" width="1.3582%" height="15" fill="rgb(229,68,48)"/><text x="91.4215%" y="302.50"></text></g><g><title>run_binary_simd_divide_DOUBLE (simd.inc.src) (8 samples, 1.36%)</title><rect x="91.1715%" y="308" width="1.3582%" height="15" fill="rgb(252,8,32)"/><text x="91.4215%" y="318.50"></text></g><g><title>sse2_binary_divide_DOUBLE (simd.inc.src) (8 samples, 1.36%)</title><rect x="91.1715%" y="324" width="1.3582%" height="15" fill="rgb(223,20,43)"/><text x="91.4215%" y="334.50"></text></g><g><title>_mm_store_pd (emmintrin.h) (8 samples, 1.36%)</title><rect x="91.1715%" y="340" width="1.3582%" height="15" fill="rgb(229,81,49)"/><text x="91.4215%" y="350.50"></text></g><g><title>predict_proba (sklearn/tree/_classes.py) (103 samples, 17.49%)</title><rect x="77.2496%" y="212" width="17.4873%" height="15" fill="rgb(236,28,36)"/><text x="77.4996%" y="222.50">predict_proba (sklearn/tree..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (21 samples, 3.57%)</title><rect x="91.1715%" y="228" width="3.5654%" height="15" fill="rgb(249,185,26)"/><text x="91.4215%" y="238.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (21 samples, 3.57%)</title><rect x="91.1715%" y="244" width="3.5654%" height="15" fill="rgb(249,174,33)"/><text x="91.4215%" y="254.50">PyUF..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (21 samples, 3.57%)</title><rect x="91.1715%" y="260" width="3.5654%" height="15" fill="rgb(233,201,37)"/><text x="91.4215%" y="270.50">exec..</text></g><g><title>iterator_loop (ufunc_object.c) (21 samples, 3.57%)</title><rect x="91.1715%" y="276" width="3.5654%" height="15" fill="rgb(221,78,26)"/><text x="91.4215%" y="286.50">iter..</text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c) (8 samples, 1.36%)</title><rect x="93.3786%" y="292" width="1.3582%" height="15" fill="rgb(250,127,30)"/><text x="93.6286%" y="302.50"></text></g><g><title>npyiter_copy_to_buffers (nditer_api.c) (8 samples, 1.36%)</title><rect x="93.3786%" y="308" width="1.3582%" height="15" fill="rgb(230,49,44)"/><text x="93.6286%" y="318.50"></text></g><g><title>PyArray_TransferNDimToStrided (lowlevel_strided_loops.c.src) (6 samples, 1.02%)</title><rect x="93.7182%" y="324" width="1.0187%" height="15" fill="rgb(229,67,23)"/><text x="93.9682%" y="334.50"></text></g><g><title>_samme_proba (sklearn/ensemble/_weight_boosting.py) (194 samples, 32.94%)</title><rect x="65.5348%" y="196" width="32.9372%" height="15" fill="rgb(249,83,47)"/><text x="65.7848%" y="206.50">_samme_proba (sklearn/ensemble/_weight_boosting.py)</text></g><g><title>ufunc_generic_call (ufunc_object.c) (22 samples, 3.74%)</title><rect x="94.7368%" y="212" width="3.7351%" height="15" fill="rgb(215,43,3)"/><text x="94.9868%" y="222.50">ufun..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (22 samples, 3.74%)</title><rect x="94.7368%" y="228" width="3.7351%" height="15" fill="rgb(238,154,13)"/><text x="94.9868%" y="238.50">PyUF..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (22 samples, 3.74%)</title><rect x="94.7368%" y="244" width="3.7351%" height="15" fill="rgb(219,56,2)"/><text x="94.9868%" y="254.50">exec..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (22 samples, 3.74%)</title><rect x="94.7368%" y="260" width="3.7351%" height="15" fill="rgb(233,0,4)"/><text x="94.9868%" y="270.50">triv..</text></g><g><title>PyUFunc_d_d (loops.c.src) (22 samples, 3.74%)</title><rect x="94.7368%" y="276" width="3.7351%" height="15" fill="rgb(235,30,7)"/><text x="94.9868%" y="286.50">PyUF..</text></g><g><title>&lt;genexpr&gt; (sklearn/ensemble/_weight_boosting.py) (195 samples, 33.11%)</title><rect x="65.5348%" y="180" width="33.1070%" height="15" fill="rgb(250,79,13)"/><text x="65.7848%" y="190.50">&lt;genexpr&gt; (sklearn/ensemble/_weight_boosting.py)</text></g><g><title>profile_skl (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (206 samples, 34.97%)</title><rect x="64.5161%" y="68" width="34.9745%" height="15" fill="rgb(211,146,34)"/><text x="64.7661%" y="78.50">profile_skl (bench_AdaBoostClassifier_default_m_cl_1000_5..</text></g><g><title>setup_profile (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (206 samples, 34.97%)</title><rect x="64.5161%" y="84" width="34.9745%" height="15" fill="rgb(228,22,38)"/><text x="64.7661%" y="94.50">setup_profile (bench_AdaBoostClassifier_default_m_cl_1000..</text></g><g><title>profile (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (206 samples, 34.97%)</title><rect x="64.5161%" y="100" width="34.9745%" height="15" fill="rgb(235,168,5)"/><text x="64.7661%" y="110.50">profile (bench_AdaBoostClassifier_default_m_cl_1000_50_12..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (206 samples, 34.97%)</title><rect x="64.5161%" y="116" width="34.9745%" height="15" fill="rgb(221,155,16)"/><text x="64.7661%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (206 samples, 34.97%)</title><rect x="64.5161%" y="132" width="34.9745%" height="15" fill="rgb(215,215,53)"/><text x="64.7661%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>predict_proba (sklearn/ensemble/_weight_boosting.py) (206 samples, 34.97%)</title><rect x="64.5161%" y="148" width="34.9745%" height="15" fill="rgb(223,4,10)"/><text x="64.7661%" y="158.50">predict_proba (sklearn/ensemble/_weight_boosting.py)</text></g><g><title>decision_function (sklearn/ensemble/_weight_boosting.py) (200 samples, 33.96%)</title><rect x="65.5348%" y="164" width="33.9559%" height="15" fill="rgb(234,103,6)"/><text x="65.7848%" y="174.50">decision_function (sklearn/ensemble/_weight_boosting.py)</text></g><g><title>all (589 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py) (589 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="62.50">&lt;module&gt; (bench_AdaBoostClassifier_default_m_cl_1000_50_12_float_.py)</text></g></svg></svg>