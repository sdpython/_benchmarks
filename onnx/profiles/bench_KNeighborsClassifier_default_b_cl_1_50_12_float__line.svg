<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    searching = 0;
}

window.addEventListener("click", function(e) {
	var target = find_group(e.target);
	if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);
    }
    else if (e.target.id == "unzoom") unzoom();
    else if (e.target.id == "search") search_prompt();
}, false)

// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
	var target = find_group(e.target);
	if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function find_child(node, selector) {
	var children = node.querySelectorAll(selector);
	if (children.length) return children[0];
	return;
}
function find_group(node) {
	var parent = node.parentElement;
	if (!parent) return;
	if (parent.id == "frames") return node;
	return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) -3;
    var txt = find_child(e, "title").textContent.replace(/\\([^(]*\\)\$/,"");
    t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - xpad) * ratio + xpad;
            if(e.tagName == "text")
                e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x - xpad, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = xpad;
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = parseInt(svg.width.baseVal.value) - (xpad*2);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = parseFloat(xmin + width);
    var ymin = parseFloat(attr.y.value);
    var ratio = (svg.width.baseVal.value - 2 * xpad) / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.0001;
    unzoombtn.classList.remove("hide");
    var el = document.getElementById("frames").children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = document.getElementById("frames").children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = document.getElementById("frames").children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;	// JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
]]></script><rect x="0" y="0" width="1200" height="1142" fill="url(#background)"/><text id="title" x="600.00" y="24.00">py-spy</text><text id="details" x="10.00" y="1125.00"> </text><text id="unzoom" class="hide" x="10.00" y="24.00">Reset Zoom</text><text id="search" x="1090.00" y="24.00">Search</text><text id="matched" x="1090.00" y="1125.00"> </text><g id="frames"><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (5 samples, 0.15%)</title><rect x="10" y="148" width="1" height="15" fill="rgb(230,226,18)"/><text x="13.00" y="158.50"></text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:18) (8 samples, 0.24%)</title><rect x="10" y="100" width="2" height="15" fill="rgb(208,47,51)"/><text x="13.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (8 samples, 0.24%)</title><rect x="10" y="116" width="2" height="15" fill="rgb(208,9,47)"/><text x="13.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (8 samples, 0.24%)</title><rect x="10" y="132" width="2" height="15" fill="rgb(212,108,38)"/><text x="13.00" y="142.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:239) (3 samples, 0.09%)</title><rect x="11" y="148" width="1" height="15" fill="rgb(236,176,46)"/><text x="14.00" y="158.50"></text></g><g><title>check_array (sklearn/utils/validation.py:502) (4 samples, 0.12%)</title><rect x="13" y="164" width="1" height="15" fill="rgb(221,76,47)"/><text x="16.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:543) (3 samples, 0.09%)</title><rect x="15" y="164" width="1" height="15" fill="rgb(214,6,24)"/><text x="18.00" y="174.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:215) (13 samples, 0.39%)</title><rect x="13" y="148" width="5" height="15" fill="rgb(225,17,30)"/><text x="16.00" y="158.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:583) (4 samples, 0.12%)</title><rect x="18" y="164" width="1" height="15" fill="rgb(237,122,30)"/><text x="21.00" y="174.50"></text></g><g><title>check_is_fitted (sklearn/utils/validation.py:947) (4 samples, 0.12%)</title><rect x="18" y="180" width="1" height="15" fill="rgb(227,147,8)"/><text x="21.00" y="190.50"></text></g><g><title>check_array (sklearn/utils/validation.py:502) (3 samples, 0.09%)</title><rect x="20" y="180" width="1" height="15" fill="rgb(234,207,50)"/><text x="23.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:604) (10 samples, 0.30%)</title><rect x="19" y="164" width="4" height="15" fill="rgb(234,147,9)"/><text x="22.00" y="174.50"></text></g><g><title>effective_n_jobs (joblib/parallel.py:388) (3 samples, 0.09%)</title><rect x="23" y="180" width="1" height="15" fill="rgb(221,58,41)"/><text x="26.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:620) (5 samples, 0.15%)</title><rect x="23" y="164" width="2" height="15" fill="rgb(205,179,37)"/><text x="26.00" y="174.50"></text></g><g><title>parse (distutils/version.py:312) (5 samples, 0.15%)</title><rect x="25" y="196" width="2" height="15" fill="rgb(209,88,51)"/><text x="28.00" y="206.50"></text></g><g><title>__init__ (distutils/version.py:304) (7 samples, 0.21%)</title><rect x="25" y="180" width="3" height="15" fill="rgb(225,172,41)"/><text x="28.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:650) (11 samples, 0.33%)</title><rect x="25" y="164" width="4" height="15" fill="rgb(220,64,23)"/><text x="28.00" y="174.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:660) (7 samples, 0.21%)</title><rect x="30" y="164" width="2" height="15" fill="rgb(230,162,36)"/><text x="33.00" y="174.50"></text></g><g><title>check_array (sklearn/utils/validation.py:515) (4 samples, 0.12%)</title><rect x="36" y="356" width="1" height="15" fill="rgb(214,159,40)"/><text x="39.00" y="366.50"></text></g><g><title>asarray (numpy/core/_asarray.py:85) (4 samples, 0.12%)</title><rect x="36" y="372" width="1" height="15" fill="rgb(224,154,4)"/><text x="39.00" y="382.50"></text></g><g><title>check_array (sklearn/utils/validation.py:562) (3 samples, 0.09%)</title><rect x="38" y="356" width="1" height="15" fill="rgb(214,148,42)"/><text x="41.00" y="366.50"></text></g><g><title>0x7f2ea4a9632c (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (14 samples, 0.42%)</title><rect x="35" y="324" width="5" height="15" fill="rgb(253,123,51)"/><text x="38.00" y="334.50"></text></g><g><title>0x7f2ea4a615cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (14 samples, 0.42%)</title><rect x="35" y="340" width="5" height="15" fill="rgb(237,119,24)"/><text x="38.00" y="350.50"></text></g><g><title>check_array (sklearn/utils/validation.py:565) (3 samples, 0.09%)</title><rect x="39" y="356" width="1" height="15" fill="rgb(220,200,51)"/><text x="42.00" y="366.50"></text></g><g><title>0x7f2ea4a91ab9 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.12%)</title><rect x="41" y="372" width="2" height="15" fill="rgb(236,80,14)"/><text x="44.00" y="382.50"></text></g><g><title>full (numpy/core/numeric.py:333) (3 samples, 0.09%)</title><rect x="42" y="388" width="1" height="15" fill="rgb(231,78,16)"/><text x="45.00" y="398.50"></text></g><g><title>0x7f2ea4a96708 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 0.36%)</title><rect x="41" y="324" width="4" height="15" fill="rgb(244,32,37)"/><text x="44.00" y="334.50"></text></g><g><title>0x7f2ea4a615cf (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (12 samples, 0.36%)</title><rect x="41" y="340" width="4" height="15" fill="rgb(210,77,43)"/><text x="44.00" y="350.50"></text></g><g><title>0x7f2ea4a9273a (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (10 samples, 0.30%)</title><rect x="41" y="356" width="4" height="15" fill="rgb(218,115,47)"/><text x="44.00" y="366.50"></text></g><g><title>0x7f2ea4a98100 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (4 samples, 0.12%)</title><rect x="45" y="324" width="2" height="15" fill="rgb(212,99,8)"/><text x="48.00" y="334.50"></text></g><g><title>&lt;listcomp&gt; (joblib/parallel.py:256) (38 samples, 1.14%)</title><rect x="35" y="276" width="13" height="15" fill="rgb(238,59,13)"/><text x="38.00" y="286.50"></text></g><g><title>_tree_query_parallel_helper (sklearn/neighbors/_base.py:490) (38 samples, 1.14%)</title><rect x="35" y="292" width="13" height="15" fill="rgb(238,208,0)"/><text x="38.00" y="302.50"></text></g><g><title>0x7f2ea4a9ae14 (sklearn/neighbors/_kd_tree.cpython-37m-x86_64-linux-gnu.so) (38 samples, 1.14%)</title><rect x="35" y="308" width="13" height="15" fill="rgb(210,107,25)"/><text x="38.00" y="318.50"></text></g><g><title>__call__ (joblib/parallel.py:1003) (46 samples, 1.37%)</title><rect x="32" y="180" width="17" height="15" fill="rgb(242,23,20)"/><text x="35.00" y="190.50"></text></g><g><title>dispatch_one_batch (joblib/parallel.py:834) (41 samples, 1.22%)</title><rect x="34" y="196" width="15" height="15" fill="rgb(248,191,7)"/><text x="37.00" y="206.50"></text></g><g><title>_dispatch (joblib/parallel.py:753) (40 samples, 1.19%)</title><rect x="35" y="212" width="14" height="15" fill="rgb(228,124,38)"/><text x="38.00" y="222.50"></text></g><g><title>apply_async (joblib/_parallel_backends.py:201) (40 samples, 1.19%)</title><rect x="35" y="228" width="14" height="15" fill="rgb(249,84,25)"/><text x="38.00" y="238.50"></text></g><g><title>__init__ (joblib/_parallel_backends.py:582) (40 samples, 1.19%)</title><rect x="35" y="244" width="14" height="15" fill="rgb(208,221,36)"/><text x="38.00" y="254.50"></text></g><g><title>__call__ (joblib/parallel.py:256) (39 samples, 1.16%)</title><rect x="35" y="260" width="14" height="15" fill="rgb(231,101,38)"/><text x="38.00" y="270.50"></text></g><g><title>__call__ (joblib/parallel.py:1016) (3 samples, 0.09%)</title><rect x="50" y="180" width="1" height="15" fill="rgb(227,216,3)"/><text x="53.00" y="190.50"></text></g><g><title>_initialize_backend (joblib/parallel.py:710) (3 samples, 0.09%)</title><rect x="51" y="196" width="1" height="15" fill="rgb(254,219,3)"/><text x="54.00" y="206.50"></text></g><g><title>__call__ (joblib/parallel.py:949) (5 samples, 0.15%)</title><rect x="51" y="180" width="2" height="15" fill="rgb(215,38,46)"/><text x="54.00" y="190.50"></text></g><g><title>kneighbors (sklearn/neighbors/_base.py:663) (61 samples, 1.82%)</title><rect x="32" y="164" width="22" height="15" fill="rgb(212,73,16)"/><text x="35.00" y="174.50">k..</text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (3 samples, 0.09%)</title><rect x="55" y="292" width="1" height="15" fill="rgb(206,59,3)"/><text x="58.00" y="302.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:217) (111 samples, 3.32%)</title><rect x="18" y="148" width="39" height="15" fill="rgb(227,168,10)"/><text x="21.00" y="158.50">pre..</text></g><g><title>kneighbors (sklearn/neighbors/_base.py:671) (9 samples, 0.27%)</title><rect x="54" y="164" width="3" height="15" fill="rgb(245,183,51)"/><text x="57.00" y="174.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (8 samples, 0.24%)</title><rect x="54" y="180" width="3" height="15" fill="rgb(250,105,21)"/><text x="57.00" y="190.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (8 samples, 0.24%)</title><rect x="54" y="196" width="3" height="15" fill="rgb(212,183,36)"/><text x="57.00" y="206.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (6 samples, 0.18%)</title><rect x="55" y="212" width="2" height="15" fill="rgb(225,98,10)"/><text x="58.00" y="222.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (5 samples, 0.15%)</title><rect x="55" y="228" width="2" height="15" fill="rgb(254,25,52)"/><text x="58.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.15%)</title><rect x="55" y="244" width="2" height="15" fill="rgb(253,52,33)"/><text x="58.00" y="254.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (5 samples, 0.15%)</title><rect x="55" y="260" width="2" height="15" fill="rgb(227,12,35)"/><text x="58.00" y="270.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (5 samples, 0.15%)</title><rect x="55" y="276" width="2" height="15" fill="rgb(237,160,4)"/><text x="58.00" y="286.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:225) (3 samples, 0.09%)</title><rect x="57" y="148" width="1" height="15" fill="rgb(254,54,54)"/><text x="60.00" y="158.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:229) (5 samples, 0.15%)</title><rect x="58" y="148" width="2" height="15" fill="rgb(247,67,50)"/><text x="61.00" y="158.50"></text></g><g><title>ones_like (&lt;__array_function__ internals&gt;:6) (5 samples, 0.15%)</title><rect x="58" y="164" width="2" height="15" fill="rgb(251,111,24)"/><text x="61.00" y="174.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (4 samples, 0.12%)</title><rect x="58" y="180" width="2" height="15" fill="rgb(212,113,53)"/><text x="61.00" y="190.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2937) (3 samples, 0.09%)</title><rect x="63" y="180" width="1" height="15" fill="rgb(219,63,11)"/><text x="66.00" y="190.50"></text></g><g><title>array_assign_subscript (mapping.c:2013) (4 samples, 0.12%)</title><rect x="63" y="164" width="1" height="15" fill="rgb(213,105,38)"/><text x="66.00" y="174.50"></text></g><g><title>array_subscript (mapping.c:1656) (5 samples, 0.15%)</title><rect x="65" y="164" width="2" height="15" fill="rgb(216,131,45)"/><text x="68.00" y="174.50"></text></g><g><title>PyArray_MapIterNew (mapping.c:2942) (4 samples, 0.12%)</title><rect x="65" y="180" width="2" height="15" fill="rgb(246,82,48)"/><text x="68.00" y="190.50"></text></g><g><title>NpyIter_MultiNew (nditer_constr.c:517) (4 samples, 0.12%)</title><rect x="65" y="196" width="2" height="15" fill="rgb(219,201,43)"/><text x="68.00" y="206.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (5 samples, 0.15%)</title><rect x="67" y="196" width="2" height="15" fill="rgb(244,29,31)"/><text x="70.00" y="206.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (8 samples, 0.24%)</title><rect x="67" y="164" width="2" height="15" fill="rgb(245,179,36)"/><text x="70.00" y="174.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (6 samples, 0.18%)</title><rect x="67" y="180" width="2" height="15" fill="rgb(212,152,29)"/><text x="70.00" y="190.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:239) (26 samples, 0.78%)</title><rect x="61" y="148" width="9" height="15" fill="rgb(237,147,45)"/><text x="64.00" y="158.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:242) (6 samples, 0.18%)</title><rect x="70" y="148" width="3" height="15" fill="rgb(227,87,27)"/><text x="73.00" y="158.50"></text></g><g><title>array_sum (methods.c:2215) (3 samples, 0.09%)</title><rect x="72" y="164" width="1" height="15" fill="rgb(220,47,41)"/><text x="75.00" y="174.50"></text></g><g><title>forward_ndarray_method (methods.c:108) (3 samples, 0.09%)</title><rect x="72" y="180" width="1" height="15" fill="rgb(239,91,38)"/><text x="75.00" y="190.50"></text></g><g><title>_sum (numpy/core/_methods.py:38) (3 samples, 0.09%)</title><rect x="72" y="196" width="1" height="15" fill="rgb(221,113,15)"/><text x="75.00" y="206.50"></text></g><g><title>predict_proba (sklearn/neighbors/_classification.py:243) (3 samples, 0.09%)</title><rect x="73" y="148" width="1" height="15" fill="rgb(210,82,4)"/><text x="76.00" y="158.50"></text></g><g><title>array_richcompare (arrayobject.c:1445) (3 samples, 0.09%)</title><rect x="73" y="164" width="1" height="15" fill="rgb(216,137,15)"/><text x="76.00" y="174.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.09%)</title><rect x="73" y="180" width="1" height="15" fill="rgb(210,30,53)"/><text x="76.00" y="190.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:227) (174 samples, 5.20%)</title><rect x="13" y="132" width="61" height="15" fill="rgb(211,19,21)"/><text x="16.00" y="142.50">&lt;lambd..</text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:38) (184 samples, 5.50%)</title><rect x="10" y="52" width="64" height="15" fill="rgb(250,51,2)"/><text x="13.00" y="62.50">&lt;module..</text></g><g><title>profile_skl (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:37) (184 samples, 5.50%)</title><rect x="10" y="68" width="64" height="15" fill="rgb(217,121,50)"/><text x="13.00" y="78.50">profile..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:29) (184 samples, 5.50%)</title><rect x="10" y="84" width="64" height="15" fill="rgb(226,207,27)"/><text x="13.00" y="94.50">setup_p..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:23) (175 samples, 5.23%)</title><rect x="13" y="100" width="61" height="15" fill="rgb(226,81,54)"/><text x="16.00" y="110.50">profil..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (175 samples, 5.23%)</title><rect x="13" y="116" width="61" height="15" fill="rgb(248,193,44)"/><text x="16.00" y="126.50">time_p..</text></g><g><title>_initialize_master_working_set (pkg_resources/__init__.py:3279) (4 samples, 0.12%)</title><rect x="75" y="852" width="2" height="15" fill="rgb(248,176,33)"/><text x="78.00" y="862.50"></text></g><g><title>&lt;genexpr&gt; (pkg_resources/__init__.py:3279) (4 samples, 0.12%)</title><rect x="75" y="868" width="2" height="15" fill="rgb(215,147,21)"/><text x="78.00" y="878.50"></text></g><g><title>activate (pkg_resources/__init__.py:2782) (4 samples, 0.12%)</title><rect x="75" y="884" width="2" height="15" fill="rgb(234,111,34)"/><text x="78.00" y="894.50"></text></g><g><title>fixup_namespace_packages (pkg_resources/__init__.py:2295) (4 samples, 0.12%)</title><rect x="75" y="900" width="2" height="15" fill="rgb(241,115,48)"/><text x="78.00" y="910.50"></text></g><g><title>_handle_ns (pkg_resources/__init__.py:2201) (3 samples, 0.09%)</title><rect x="76" y="916" width="1" height="15" fill="rgb(214,78,11)"/><text x="79.00" y="926.50"></text></g><g><title>_find_module_shim (&lt;frozen importlib._bootstrap_external&gt;:431) (3 samples, 0.09%)</title><rect x="76" y="932" width="1" height="15" fill="rgb(217,86,38)"/><text x="79.00" y="942.50"></text></g><g><title>find_loader (&lt;frozen importlib._bootstrap_external&gt;:1346) (3 samples, 0.09%)</title><rect x="76" y="948" width="1" height="15" fill="rgb(227,167,47)"/><text x="79.00" y="958.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py:2) (7 samples, 0.21%)</title><rect x="75" y="148" width="2" height="15" fill="rgb(240,162,26)"/><text x="78.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.21%)</title><rect x="75" y="164" width="2" height="15" fill="rgb(211,97,2)"/><text x="78.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 0.21%)</title><rect x="75" y="180" width="2" height="15" fill="rgb(251,35,40)"/><text x="78.00" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.21%)</title><rect x="75" y="196" width="2" height="15" fill="rgb(212,42,10)"/><text x="78.00" y="206.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.21%)</title><rect x="75" y="212" width="2" height="15" fill="rgb(207,66,42)"/><text x="78.00" y="222.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.21%)</title><rect x="75" y="228" width="2" height="15" fill="rgb(248,16,34)"/><text x="78.00" y="238.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.21%)</title><rect x="75" y="244" width="2" height="15" fill="rgb(235,136,40)"/><text x="78.00" y="254.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.21%)</title><rect x="75" y="260" width="2" height="15" fill="rgb(240,159,44)"/><text x="78.00" y="270.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.21%)</title><rect x="75" y="276" width="2" height="15" fill="rgb(206,72,18)"/><text x="78.00" y="286.50"></text></g><g><title>&lt;module&gt; (onnx/__init__.py:9) (7 samples, 0.21%)</title><rect x="75" y="292" width="2" height="15" fill="rgb(209,181,32)"/><text x="78.00" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.21%)</title><rect x="75" y="308" width="2" height="15" fill="rgb(234,120,38)"/><text x="78.00" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.21%)</title><rect x="75" y="324" width="2" height="15" fill="rgb(242,25,41)"/><text x="78.00" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.21%)</title><rect x="75" y="340" width="2" height="15" fill="rgb(250,147,18)"/><text x="78.00" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.21%)</title><rect x="75" y="356" width="2" height="15" fill="rgb(222,22,54)"/><text x="78.00" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.21%)</title><rect x="75" y="372" width="2" height="15" fill="rgb(219,80,23)"/><text x="78.00" y="382.50"></text></g><g><title>&lt;module&gt; (onnx/external_data_helper.py:10) (7 samples, 0.21%)</title><rect x="75" y="388" width="2" height="15" fill="rgb(232,185,51)"/><text x="78.00" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.21%)</title><rect x="75" y="404" width="2" height="15" fill="rgb(214,82,52)"/><text x="78.00" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.21%)</title><rect x="75" y="420" width="2" height="15" fill="rgb(211,40,50)"/><text x="78.00" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.21%)</title><rect x="75" y="436" width="2" height="15" fill="rgb(215,91,49)"/><text x="78.00" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.21%)</title><rect x="75" y="452" width="2" height="15" fill="rgb(251,200,1)"/><text x="78.00" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.21%)</title><rect x="75" y="468" width="2" height="15" fill="rgb(208,143,39)"/><text x="78.00" y="478.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_pb.py:8) (7 samples, 0.21%)</title><rect x="75" y="484" width="2" height="15" fill="rgb(243,1,17)"/><text x="78.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.21%)</title><rect x="75" y="500" width="2" height="15" fill="rgb(215,85,0)"/><text x="78.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.21%)</title><rect x="75" y="516" width="2" height="15" fill="rgb(234,88,54)"/><text x="78.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.21%)</title><rect x="75" y="532" width="2" height="15" fill="rgb(246,191,30)"/><text x="78.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.21%)</title><rect x="75" y="548" width="2" height="15" fill="rgb(252,44,50)"/><text x="78.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.21%)</title><rect x="75" y="564" width="2" height="15" fill="rgb(247,106,37)"/><text x="78.00" y="574.50"></text></g><g><title>&lt;module&gt; (onnx/onnx_ml_pb2.py:6) (7 samples, 0.21%)</title><rect x="75" y="580" width="2" height="15" fill="rgb(216,167,53)"/><text x="78.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.21%)</title><rect x="75" y="596" width="2" height="15" fill="rgb(253,152,26)"/><text x="78.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 0.21%)</title><rect x="75" y="612" width="2" height="15" fill="rgb(251,57,5)"/><text x="78.00" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.21%)</title><rect x="75" y="628" width="2" height="15" fill="rgb(233,203,43)"/><text x="78.00" y="638.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.21%)</title><rect x="75" y="644" width="2" height="15" fill="rgb(236,26,25)"/><text x="78.00" y="654.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.21%)</title><rect x="75" y="660" width="2" height="15" fill="rgb(229,13,41)"/><text x="78.00" y="670.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.21%)</title><rect x="75" y="676" width="2" height="15" fill="rgb(237,106,21)"/><text x="78.00" y="686.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.21%)</title><rect x="75" y="692" width="2" height="15" fill="rgb(241,179,32)"/><text x="78.00" y="702.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.21%)</title><rect x="75" y="708" width="2" height="15" fill="rgb(253,147,10)"/><text x="78.00" y="718.50"></text></g><g><title>&lt;module&gt; (protobuf/__init__.py:37) (7 samples, 0.21%)</title><rect x="75" y="724" width="2" height="15" fill="rgb(251,11,49)"/><text x="78.00" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.21%)</title><rect x="75" y="740" width="2" height="15" fill="rgb(240,158,4)"/><text x="78.00" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.21%)</title><rect x="75" y="756" width="2" height="15" fill="rgb(219,203,18)"/><text x="78.00" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.21%)</title><rect x="75" y="772" width="2" height="15" fill="rgb(220,23,42)"/><text x="78.00" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.21%)</title><rect x="75" y="788" width="2" height="15" fill="rgb(248,216,10)"/><text x="78.00" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.21%)</title><rect x="75" y="804" width="2" height="15" fill="rgb(218,99,26)"/><text x="78.00" y="814.50"></text></g><g><title>&lt;module&gt; (pkg_resources/__init__.py:3251) (7 samples, 0.21%)</title><rect x="75" y="820" width="2" height="15" fill="rgb(240,81,22)"/><text x="78.00" y="830.50"></text></g><g><title>_call_aside (pkg_resources/__init__.py:3235) (7 samples, 0.21%)</title><rect x="75" y="836" width="2" height="15" fill="rgb(249,121,40)"/><text x="78.00" y="846.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py:4) (3 samples, 0.09%)</title><rect x="77" y="148" width="1" height="15" fill="rgb(237,91,4)"/><text x="80.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="77" y="164" width="1" height="15" fill="rgb(206,32,23)"/><text x="80.00" y="174.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:4) (16 samples, 0.48%)</title><rect x="74" y="52" width="6" height="15" fill="rgb(250,70,28)"/><text x="77.00" y="62.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (16 samples, 0.48%)</title><rect x="74" y="68" width="6" height="15" fill="rgb(246,109,53)"/><text x="77.00" y="78.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (16 samples, 0.48%)</title><rect x="74" y="84" width="6" height="15" fill="rgb(246,11,0)"/><text x="77.00" y="94.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (16 samples, 0.48%)</title><rect x="74" y="100" width="6" height="15" fill="rgb(238,3,52)"/><text x="77.00" y="110.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (16 samples, 0.48%)</title><rect x="74" y="116" width="6" height="15" fill="rgb(231,42,29)"/><text x="77.00" y="126.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (16 samples, 0.48%)</title><rect x="74" y="132" width="6" height="15" fill="rgb(250,99,41)"/><text x="77.00" y="142.50"></text></g><g><title>&lt;module&gt; (profiles/benches/neighbors/KNeighborsClassifier/bench_KNeighborsClassifier_default_b_cl.py:7) (5 samples, 0.15%)</title><rect x="78" y="148" width="2" height="15" fill="rgb(206,8,14)"/><text x="81.00" y="158.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="78" y="164" width="2" height="15" fill="rgb(233,114,46)"/><text x="81.00" y="174.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="78" y="180" width="2" height="15" fill="rgb(248,41,25)"/><text x="81.00" y="190.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="78" y="196" width="2" height="15" fill="rgb(240,32,37)"/><text x="81.00" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="78" y="212" width="2" height="15" fill="rgb(241,104,1)"/><text x="81.00" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="78" y="228" width="2" height="15" fill="rgb(217,1,46)"/><text x="81.00" y="238.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py:7) (5 samples, 0.15%)</title><rect x="78" y="244" width="2" height="15" fill="rgb(231,176,4)"/><text x="81.00" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="78" y="260" width="2" height="15" fill="rgb(247,65,44)"/><text x="81.00" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="78" y="276" width="2" height="15" fill="rgb(207,25,12)"/><text x="81.00" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="78" y="292" width="2" height="15" fill="rgb(222,98,12)"/><text x="81.00" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="78" y="308" width="2" height="15" fill="rgb(236,79,53)"/><text x="81.00" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="78" y="324" width="2" height="15" fill="rgb(254,104,13)"/><text x="81.00" y="334.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py:28) (5 samples, 0.15%)</title><rect x="78" y="340" width="2" height="15" fill="rgb(254,146,29)"/><text x="81.00" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.15%)</title><rect x="78" y="356" width="2" height="15" fill="rgb(250,67,45)"/><text x="81.00" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.15%)</title><rect x="78" y="372" width="2" height="15" fill="rgb(212,84,14)"/><text x="81.00" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.15%)</title><rect x="78" y="388" width="2" height="15" fill="rgb(211,51,28)"/><text x="81.00" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.15%)</title><rect x="78" y="404" width="2" height="15" fill="rgb(226,66,36)"/><text x="81.00" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.15%)</title><rect x="78" y="420" width="2" height="15" fill="rgb(207,201,1)"/><text x="81.00" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py:7) (3 samples, 0.09%)</title><rect x="79" y="436" width="1" height="15" fill="rgb(205,161,38)"/><text x="82.00" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="452" width="1" height="15" fill="rgb(211,53,43)"/><text x="82.00" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.09%)</title><rect x="79" y="468" width="1" height="15" fill="rgb(230,165,36)"/><text x="82.00" y="478.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="484" width="1" height="15" fill="rgb(242,185,51)"/><text x="82.00" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="500" width="1" height="15" fill="rgb(215,169,11)"/><text x="82.00" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="516" width="1" height="15" fill="rgb(213,120,53)"/><text x="82.00" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="532" width="1" height="15" fill="rgb(227,145,10)"/><text x="82.00" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="548" width="1" height="15" fill="rgb(233,10,46)"/><text x="82.00" y="558.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="564" width="1" height="15" fill="rgb(228,30,9)"/><text x="82.00" y="574.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/__init__.py:6) (3 samples, 0.09%)</title><rect x="79" y="580" width="1" height="15" fill="rgb(232,22,7)"/><text x="82.00" y="590.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="596" width="1" height="15" fill="rgb(205,190,44)"/><text x="82.00" y="606.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="612" width="1" height="15" fill="rgb(228,22,21)"/><text x="82.00" y="622.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="628" width="1" height="15" fill="rgb(250,27,53)"/><text x="82.00" y="638.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="644" width="1" height="15" fill="rgb(208,90,10)"/><text x="82.00" y="654.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="660" width="1" height="15" fill="rgb(214,32,14)"/><text x="82.00" y="670.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnxrt/validate/validate.py:15) (3 samples, 0.09%)</title><rect x="79" y="676" width="1" height="15" fill="rgb(216,26,9)"/><text x="82.00" y="686.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="692" width="1" height="15" fill="rgb(254,0,16)"/><text x="82.00" y="702.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="708" width="1" height="15" fill="rgb(207,113,45)"/><text x="82.00" y="718.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="724" width="1" height="15" fill="rgb(235,138,4)"/><text x="82.00" y="734.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="740" width="1" height="15" fill="rgb(246,51,29)"/><text x="82.00" y="750.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="756" width="1" height="15" fill="rgb(232,0,7)"/><text x="82.00" y="766.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/__init__.py:7) (3 samples, 0.09%)</title><rect x="79" y="772" width="1" height="15" fill="rgb(224,85,38)"/><text x="82.00" y="782.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="788" width="1" height="15" fill="rgb(227,138,5)"/><text x="82.00" y="798.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="804" width="1" height="15" fill="rgb(235,190,13)"/><text x="82.00" y="814.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="820" width="1" height="15" fill="rgb(240,215,38)"/><text x="82.00" y="830.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="836" width="1" height="15" fill="rgb(234,119,22)"/><text x="82.00" y="846.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="852" width="1" height="15" fill="rgb(220,102,0)"/><text x="82.00" y="862.50"></text></g><g><title>&lt;module&gt; (mlprodict/onnx_conv/register.py:9) (3 samples, 0.09%)</title><rect x="79" y="868" width="1" height="15" fill="rgb(221,225,47)"/><text x="82.00" y="878.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="884" width="1" height="15" fill="rgb(206,101,53)"/><text x="82.00" y="894.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.09%)</title><rect x="79" y="900" width="1" height="15" fill="rgb(246,108,48)"/><text x="82.00" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="916" width="1" height="15" fill="rgb(236,210,51)"/><text x="82.00" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="932" width="1" height="15" fill="rgb(213,229,20)"/><text x="82.00" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="948" width="1" height="15" fill="rgb(233,212,9)"/><text x="82.00" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="964" width="1" height="15" fill="rgb(214,148,6)"/><text x="82.00" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="980" width="1" height="15" fill="rgb(249,52,25)"/><text x="82.00" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="996" width="1" height="15" fill="rgb(214,167,14)"/><text x="82.00" y="1006.50"></text></g><g><title>&lt;module&gt; (skl2onnx/__init__.py:18) (3 samples, 0.09%)</title><rect x="79" y="1012" width="1" height="15" fill="rgb(243,128,24)"/><text x="82.00" y="1022.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.09%)</title><rect x="79" y="1028" width="1" height="15" fill="rgb(242,133,52)"/><text x="82.00" y="1038.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.09%)</title><rect x="79" y="1044" width="1" height="15" fill="rgb(230,219,20)"/><text x="82.00" y="1054.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.09%)</title><rect x="79" y="1060" width="1" height="15" fill="rgb(239,79,2)"/><text x="82.00" y="1070.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.09%)</title><rect x="79" y="1076" width="1" height="15" fill="rgb(212,141,24)"/><text x="82.00" y="1086.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.09%)</title><rect x="79" y="1092" width="1" height="15" fill="rgb(248,226,8)"/><text x="82.00" y="1102.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (3 samples, 0.09%)</title><rect x="87" y="276" width="1" height="15" fill="rgb(209,58,14)"/><text x="90.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (14 samples, 0.42%)</title><rect x="84" y="260" width="5" height="15" fill="rgb(233,51,28)"/><text x="87.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (3 samples, 0.09%)</title><rect x="91" y="308" width="1" height="15" fill="rgb(232,117,38)"/><text x="94.00" y="318.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (3 samples, 0.09%)</title><rect x="92" y="324" width="1" height="15" fill="rgb(208,83,17)"/><text x="95.00" y="334.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (15 samples, 0.45%)</title><rect x="90" y="276" width="5" height="15" fill="rgb(224,153,53)"/><text x="93.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (14 samples, 0.42%)</title><rect x="90" y="292" width="5" height="15" fill="rgb(221,45,12)"/><text x="93.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (10 samples, 0.30%)</title><rect x="92" y="308" width="3" height="15" fill="rgb(249,92,0)"/><text x="95.00" y="318.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (7 samples, 0.21%)</title><rect x="93" y="324" width="2" height="15" fill="rgb(253,211,43)"/><text x="96.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.15%)</title><rect x="93" y="340" width="2" height="15" fill="rgb(250,166,7)"/><text x="96.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (4 samples, 0.12%)</title><rect x="94" y="356" width="1" height="15" fill="rgb(225,46,22)"/><text x="97.00" y="366.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (3 samples, 0.09%)</title><rect x="94" y="372" width="1" height="15" fill="rgb(224,100,25)"/><text x="97.00" y="382.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (3 samples, 0.09%)</title><rect x="95" y="276" width="1" height="15" fill="rgb(216,205,53)"/><text x="98.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (24 samples, 0.72%)</title><rect x="89" y="260" width="8" height="15" fill="rgb(225,213,44)"/><text x="92.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (3 samples, 0.09%)</title><rect x="96" y="276" width="1" height="15" fill="rgb(209,102,45)"/><text x="99.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (3 samples, 0.09%)</title><rect x="96" y="292" width="1" height="15" fill="rgb(206,92,30)"/><text x="99.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (3 samples, 0.09%)</title><rect x="98" y="260" width="1" height="15" fill="rgb(211,36,17)"/><text x="101.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (48 samples, 1.43%)</title><rect x="83" y="244" width="17" height="15" fill="rgb(225,207,34)"/><text x="86.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (55 samples, 1.64%)</title><rect x="81" y="212" width="19" height="15" fill="rgb(212,120,43)"/><text x="84.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (54 samples, 1.61%)</title><rect x="81" y="228" width="19" height="15" fill="rgb(208,43,54)"/><text x="84.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.15%)</title><rect x="100" y="244" width="2" height="15" fill="rgb(247,78,23)"/><text x="103.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (6 samples, 0.18%)</title><rect x="100" y="212" width="3" height="15" fill="rgb(236,193,33)"/><text x="103.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (6 samples, 0.18%)</title><rect x="100" y="228" width="3" height="15" fill="rgb(250,69,34)"/><text x="103.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (65 samples, 1.94%)</title><rect x="80" y="196" width="23" height="15" fill="rgb(245,117,51)"/><text x="83.00" y="206.50">r..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (68 samples, 2.03%)</title><rect x="80" y="164" width="24" height="15" fill="rgb(241,22,15)"/><text x="83.00" y="174.50">_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (68 samples, 2.03%)</title><rect x="80" y="180" width="24" height="15" fill="rgb(207,51,22)"/><text x="83.00" y="190.50">r..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:18) (69 samples, 2.06%)</title><rect x="80" y="100" width="24" height="15" fill="rgb(243,83,51)"/><text x="83.00" y="110.50">p..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (69 samples, 2.06%)</title><rect x="80" y="116" width="24" height="15" fill="rgb(248,3,40)"/><text x="83.00" y="126.50">t..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (69 samples, 2.06%)</title><rect x="80" y="132" width="24" height="15" fill="rgb(249,47,3)"/><text x="83.00" y="142.50">&lt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (69 samples, 2.06%)</title><rect x="80" y="148" width="24" height="15" fill="rgb(209,179,39)"/><text x="83.00" y="158.50">r..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (9 samples, 0.27%)</title><rect x="107" y="180" width="3" height="15" fill="rgb(205,65,19)"/><text x="110.00" y="190.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:79) (4 samples, 0.12%)</title><rect x="117" y="212" width="1" height="15" fill="rgb(228,203,26)"/><text x="120.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:84) (3 samples, 0.09%)</title><rect x="118" y="212" width="1" height="15" fill="rgb(210,97,22)"/><text x="121.00" y="222.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (9 samples, 0.27%)</title><rect x="122" y="228" width="3" height="15" fill="rgb(234,71,6)"/><text x="125.00" y="238.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (6 samples, 0.18%)</title><rect x="123" y="244" width="2" height="15" fill="rgb(254,159,6)"/><text x="126.00" y="254.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (5 samples, 0.15%)</title><rect x="123" y="260" width="2" height="15" fill="rgb(218,217,46)"/><text x="126.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:85) (19 samples, 0.57%)</title><rect x="119" y="212" width="7" height="15" fill="rgb(206,6,48)"/><text x="122.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:86) (24 samples, 0.72%)</title><rect x="126" y="212" width="9" height="15" fill="rgb(248,181,34)"/><text x="129.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:87) (3 samples, 0.09%)</title><rect x="135" y="212" width="1" height="15" fill="rgb(231,79,20)"/><text x="138.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:88) (17 samples, 0.51%)</title><rect x="136" y="212" width="6" height="15" fill="rgb(236,201,47)"/><text x="139.00" y="222.50"></text></g><g><title>prepare_index (mapping.c:491) (3 samples, 0.09%)</title><rect x="146" y="244" width="1" height="15" fill="rgb(241,21,12)"/><text x="149.00" y="254.50"></text></g><g><title>array_subscript (mapping.c:1539) (12 samples, 0.36%)</title><rect x="144" y="228" width="4" height="15" fill="rgb(236,121,27)"/><text x="147.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:920) (3 samples, 0.09%)</title><rect x="149" y="244" width="1" height="15" fill="rgb(208,181,11)"/><text x="152.00" y="254.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.09%)</title><rect x="150" y="276" width="2" height="15" fill="rgb(250,134,33)"/><text x="153.00" y="286.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:89) (33 samples, 0.99%)</title><rect x="142" y="212" width="11" height="15" fill="rgb(231,194,25)"/><text x="145.00" y="222.50"></text></g><g><title>array_subscript (mapping.c:1584) (15 samples, 0.45%)</title><rect x="148" y="228" width="5" height="15" fill="rgb(214,48,44)"/><text x="151.00" y="238.50"></text></g><g><title>get_view_from_index (mapping.c:988) (9 samples, 0.27%)</title><rect x="150" y="244" width="3" height="15" fill="rgb(226,217,47)"/><text x="153.00" y="254.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1223) (8 samples, 0.24%)</title><rect x="150" y="260" width="3" height="15" fill="rgb(214,50,4)"/><text x="153.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:392) (6 samples, 0.18%)</title><rect x="161" y="228" width="2" height="15" fill="rgb(242,11,1)"/><text x="164.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:397) (20 samples, 0.60%)</title><rect x="163" y="228" width="7" height="15" fill="rgb(228,162,46)"/><text x="166.00" y="238.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:401) (5 samples, 0.15%)</title><rect x="170" y="228" width="2" height="15" fill="rgb(245,141,9)"/><text x="173.00" y="238.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:426) (8 samples, 0.24%)</title><rect x="179" y="244" width="3" height="15" fill="rgb(247,158,47)"/><text x="182.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:427) (12 samples, 0.36%)</title><rect x="182" y="244" width="4" height="15" fill="rgb(224,28,39)"/><text x="185.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:444) (17 samples, 0.51%)</title><rect x="186" y="244" width="6" height="15" fill="rgb(212,85,25)"/><text x="189.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:445) (15 samples, 0.45%)</title><rect x="192" y="244" width="6" height="15" fill="rgb(205,154,44)"/><text x="195.00" y="254.50"></text></g><g><title>unicode_eq (python3.7) (4 samples, 0.12%)</title><rect x="196" y="260" width="2" height="15" fill="rgb(228,139,50)"/><text x="199.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:447) (7 samples, 0.21%)</title><rect x="198" y="244" width="2" height="15" fill="rgb(234,94,13)"/><text x="201.00" y="254.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:457) (18 samples, 0.54%)</title><rect x="201" y="244" width="6" height="15" fill="rgb(215,41,11)"/><text x="204.00" y="254.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:133) (19 samples, 0.57%)</title><rect x="245" y="260" width="6" height="15" fill="rgb(234,0,51)"/><text x="248.00" y="270.50"></text></g><g><title>&lt;genexpr&gt; (mlprodict/onnxrt/onnx_inference_node.py:136) (40 samples, 1.19%)</title><rect x="333" y="276" width="14" height="15" fill="rgb(249,111,19)"/><text x="336.00" y="286.50"></text></g><g><title>__munmap (libc-2.29.so) (79 samples, 2.36%)</title><rect x="347" y="276" width="28" height="15" fill="rgb(221,73,6)"/><text x="350.00" y="286.50">_..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:136) (417 samples, 12.46%)</title><rect x="251" y="260" width="147" height="15" fill="rgb(206,65,48)"/><text x="254.00" y="270.50">run (mlprodict/onn..</text></g><g><title>mmap64 (libc-2.29.so) (67 samples, 2.00%)</title><rect x="375" y="276" width="23" height="15" fill="rgb(208,220,0)"/><text x="378.00" y="286.50">m..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:264) (3 samples, 0.09%)</title><rect x="449" y="292" width="1" height="15" fill="rgb(245,76,45)"/><text x="452.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:268) (4 samples, 0.12%)</title><rect x="450" y="292" width="1" height="15" fill="rgb(242,99,2)"/><text x="453.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:17) (24 samples, 0.72%)</title><rect x="462" y="308" width="8" height="15" fill="rgb(218,94,41)"/><text x="465.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:18) (6 samples, 0.18%)</title><rect x="470" y="308" width="2" height="15" fill="rgb(249,67,9)"/><text x="473.00" y="318.50"></text></g><g><title>array_copy (methods.c:1127) (3 samples, 0.09%)</title><rect x="476" y="324" width="1" height="15" fill="rgb(247,167,39)"/><text x="479.00" y="334.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1259) (3 samples, 0.09%)</title><rect x="478" y="356" width="1" height="15" fill="rgb(244,127,33)"/><text x="481.00" y="366.50"></text></g><g><title>PyArray_DESCR (ndarraytypes.h:1528) (3 samples, 0.09%)</title><rect x="478" y="372" width="1" height="15" fill="rgb(221,139,52)"/><text x="481.00" y="382.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.09%)</title><rect x="480" y="404" width="1" height="15" fill="rgb(244,75,20)"/><text x="483.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1151) (4 samples, 0.12%)</title><rect x="482" y="404" width="1" height="15" fill="rgb(228,25,22)"/><text x="485.00" y="414.50"></text></g><g><title>PyArray_NewCopy (convert.c:556) (19 samples, 0.57%)</title><rect x="477" y="340" width="7" height="15" fill="rgb(240,67,12)"/><text x="480.00" y="350.50"></text></g><g><title>PyArray_NewLikeArrayWithShape (ctors.c:1285) (12 samples, 0.36%)</title><rect x="479" y="356" width="5" height="15" fill="rgb(244,54,18)"/><text x="482.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1205) (11 samples, 0.33%)</title><rect x="480" y="372" width="4" height="15" fill="rgb(250,128,11)"/><text x="483.00" y="382.50"></text></g><g><title>PyArray_NewFromDescrAndBase (ctors.c:1220) (11 samples, 0.33%)</title><rect x="480" y="388" width="4" height="15" fill="rgb(248,113,46)"/><text x="483.00" y="398.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:370) (3 samples, 0.09%)</title><rect x="485" y="356" width="1" height="15" fill="rgb(208,120,3)"/><text x="488.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:120) (5 samples, 0.15%)</title><rect x="486" y="372" width="1" height="15" fill="rgb(223,49,21)"/><text x="489.00" y="382.50"></text></g><g><title>__GI___pthread_mutex_lock (libpthread-2.29.so) (7 samples, 0.21%)</title><rect x="487" y="388" width="3" height="15" fill="rgb(220,121,3)"/><text x="490.00" y="398.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:130) (10 samples, 0.30%)</title><rect x="487" y="372" width="4" height="15" fill="rgb(221,96,25)"/><text x="490.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:137) (3 samples, 0.09%)</title><rect x="491" y="372" width="1" height="15" fill="rgb(247,196,11)"/><text x="494.00" y="382.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:143) (8 samples, 0.24%)</title><rect x="492" y="372" width="3" height="15" fill="rgb(225,120,32)"/><text x="495.00" y="382.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3962) (3 samples, 0.09%)</title><rect x="496" y="388" width="1" height="15" fill="rgb(218,49,34)"/><text x="499.00" y="398.50"></text></g><g><title>PyArray_PrepareTwoRawArrayIter (dtype_transfer.c:3999) (6 samples, 0.18%)</title><rect x="497" y="388" width="2" height="15" fill="rgb(235,223,33)"/><text x="500.00" y="398.50"></text></g><g><title>qsort_r (libc-2.29.so) (5 samples, 0.15%)</title><rect x="497" y="404" width="2" height="15" fill="rgb(243,220,7)"/><text x="500.00" y="414.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (40 samples, 1.19%)</title><rect x="486" y="356" width="14" height="15" fill="rgb(216,131,34)"/><text x="489.00" y="366.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:97) (11 samples, 0.33%)</title><rect x="496" y="372" width="4" height="15" fill="rgb(215,47,44)"/><text x="499.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_identity.py:19) (79 samples, 2.36%)</title><rect x="472" y="308" width="28" height="15" fill="rgb(244,17,13)"/><text x="475.00" y="318.50">_..</text></g><g><title>array_copy (methods.c:1133) (66 samples, 1.97%)</title><rect x="477" y="324" width="23" height="15" fill="rgb(245,189,7)"/><text x="480.00" y="334.50">a..</text></g><g><title>PyArray_NewCopy (convert.c:560) (47 samples, 1.40%)</title><rect x="484" y="340" width="16" height="15" fill="rgb(254,118,14)"/><text x="487.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (3 samples, 0.09%)</title><rect x="509" y="356" width="1" height="15" fill="rgb(227,22,46)"/><text x="512.00" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (6 samples, 0.18%)</title><rect x="508" y="324" width="2" height="15" fill="rgb(246,62,38)"/><text x="511.00" y="334.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (6 samples, 0.18%)</title><rect x="508" y="340" width="2" height="15" fill="rgb(208,148,38)"/><text x="511.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (5 samples, 0.15%)</title><rect x="511" y="340" width="1" height="15" fill="rgb(221,79,37)"/><text x="514.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2006) (5 samples, 0.15%)</title><rect x="514" y="356" width="1" height="15" fill="rgb(213,137,52)"/><text x="517.00" y="366.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1665) (3 samples, 0.09%)</title><rect x="517" y="372" width="1" height="15" fill="rgb(231,57,32)"/><text x="520.00" y="382.50"></text></g><g><title>PyArray_CanCastTypeTo (convert_datatype.c:757) (4 samples, 0.12%)</title><rect x="519" y="404" width="2" height="15" fill="rgb(213,40,13)"/><text x="522.00" y="414.50"></text></g><g><title>PyArray_CanCastArrayTo (convert_datatype.c:974) (7 samples, 0.21%)</title><rect x="519" y="388" width="3" height="15" fill="rgb(225,216,25)"/><text x="522.00" y="398.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (10 samples, 0.30%)</title><rect x="518" y="372" width="4" height="15" fill="rgb(225,51,41)"/><text x="521.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (27 samples, 0.81%)</title><rect x="513" y="340" width="9" height="15" fill="rgb(245,139,32)"/><text x="516.00" y="350.50"></text></g><g><title>linear_search_type_resolver (ufunc_type_resolution.c:2010) (18 samples, 0.54%)</title><rect x="516" y="356" width="6" height="15" fill="rgb(207,125,29)"/><text x="519.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (4 samples, 0.12%)</title><rect x="523" y="340" width="1" height="15" fill="rgb(250,120,54)"/><text x="526.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3254) (5 samples, 0.15%)</title><rect x="524" y="340" width="2" height="15" fill="rgb(253,46,15)"/><text x="527.00" y="350.50"></text></g><g><title>check_for_trivial_loop (ufunc_object.c:1298) (4 samples, 0.12%)</title><rect x="525" y="356" width="1" height="15" fill="rgb(241,145,32)"/><text x="528.00" y="366.50"></text></g><g><title>PyArray_EquivTypes (multiarraymodule.c:1477) (4 samples, 0.12%)</title><rect x="525" y="372" width="1" height="15" fill="rgb(239,16,32)"/><text x="528.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1616) (3 samples, 0.09%)</title><rect x="526" y="356" width="1" height="15" fill="rgb(246,152,49)"/><text x="529.00" y="366.50"></text></g><g><title>array_alloc (arrayobject.c:1765) (3 samples, 0.09%)</title><rect x="527" y="404" width="1" height="15" fill="rgb(216,201,48)"/><text x="530.00" y="414.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (5 samples, 0.15%)</title><rect x="527" y="388" width="2" height="15" fill="rgb(223,184,10)"/><text x="530.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (10 samples, 0.30%)</title><rect x="529" y="388" width="4" height="15" fill="rgb(214,83,41)"/><text x="532.00" y="398.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (8 samples, 0.24%)</title><rect x="530" y="404" width="3" height="15" fill="rgb(228,139,0)"/><text x="533.00" y="414.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (8 samples, 0.24%)</title><rect x="530" y="420" width="3" height="15" fill="rgb(244,117,40)"/><text x="533.00" y="430.50"></text></g><g><title>malloc (libc-2.29.so) (8 samples, 0.24%)</title><rect x="530" y="436" width="3" height="15" fill="rgb(221,199,12)"/><text x="533.00" y="446.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1640) (23 samples, 0.69%)</title><rect x="527" y="356" width="8" height="15" fill="rgb(223,143,27)"/><text x="530.00" y="366.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (23 samples, 0.69%)</title><rect x="527" y="372" width="8" height="15" fill="rgb(223,223,40)"/><text x="530.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1662) (4 samples, 0.12%)</title><rect x="535" y="356" width="2" height="15" fill="rgb(209,53,48)"/><text x="538.00" y="366.50"></text></g><g><title>PyArray_MultiplyList (multiarraymodule.c:151) (3 samples, 0.09%)</title><rect x="537" y="388" width="2" height="15" fill="rgb(234,30,0)"/><text x="540.00" y="398.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1341) (5 samples, 0.15%)</title><rect x="537" y="372" width="2" height="15" fill="rgb(209,209,39)"/><text x="540.00" y="382.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1670) (12 samples, 0.36%)</title><rect x="537" y="356" width="4" height="15" fill="rgb(249,163,43)"/><text x="540.00" y="366.50"></text></g><g><title>trivial_two_operand_loop (ufunc_object.c:1355) (6 samples, 0.18%)</title><rect x="539" y="372" width="2" height="15" fill="rgb(243,98,15)"/><text x="542.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (44 samples, 1.31%)</title><rect x="526" y="340" width="16" height="15" fill="rgb(245,153,25)"/><text x="529.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (92 samples, 2.75%)</title><rect x="510" y="324" width="33" height="15" fill="rgb(207,128,35)"/><text x="513.00" y="334.50">uf..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3308) (3 samples, 0.09%)</title><rect x="542" y="340" width="1" height="15" fill="rgb(242,165,54)"/><text x="545.00" y="350.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4768) (3 samples, 0.09%)</title><rect x="544" y="324" width="1" height="15" fill="rgb(230,185,36)"/><text x="547.00" y="334.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:27) (129 samples, 3.85%)</title><rect x="500" y="308" width="46" height="15" fill="rgb(217,12,33)"/><text x="503.00" y="318.50">_run..</text></g><g><title>_buffer_clear_info (buffer.c:724) (8 samples, 0.24%)</title><rect x="558" y="356" width="2" height="15" fill="rgb(233,1,52)"/><text x="561.00" y="366.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (12 samples, 0.36%)</title><rect x="557" y="324" width="4" height="15" fill="rgb(232,113,27)"/><text x="560.00" y="334.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (12 samples, 0.36%)</title><rect x="557" y="340" width="4" height="15" fill="rgb(249,7,2)"/><text x="560.00" y="350.50"></text></g><g><title>_buffer_clear_info (buffer.c:733) (3 samples, 0.09%)</title><rect x="560" y="356" width="1" height="15" fill="rgb(251,75,3)"/><text x="563.00" y="366.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:4) (25 samples, 0.75%)</title><rect x="563" y="324" width="9" height="15" fill="rgb(231,48,22)"/><text x="566.00" y="334.50"></text></g><g><title>_sum_dispatcher (numpy/core/fromnumeric.py:2042) (5 samples, 0.15%)</title><rect x="570" y="340" width="2" height="15" fill="rgb(228,43,0)"/><text x="573.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:225) (3 samples, 0.09%)</title><rect x="577" y="340" width="1" height="15" fill="rgb(210,139,22)"/><text x="580.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:234) (5 samples, 0.15%)</title><rect x="578" y="340" width="2" height="15" fill="rgb(236,54,13)"/><text x="581.00" y="350.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (3 samples, 0.09%)</title><rect x="580" y="340" width="1" height="15" fill="rgb(215,180,40)"/><text x="583.00" y="350.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2168) (12 samples, 0.36%)</title><rect x="584" y="356" width="5" height="15" fill="rgb(219,113,9)"/><text x="587.00" y="366.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2181) (7 samples, 0.21%)</title><rect x="589" y="356" width="2" height="15" fill="rgb(248,35,24)"/><text x="592.00" y="366.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:74) (15 samples, 0.45%)</title><rect x="618" y="388" width="5" height="15" fill="rgb(224,59,23)"/><text x="621.00" y="398.50"></text></g><g><title>&lt;dictcomp&gt; (numpy/core/fromnumeric.py:75) (21 samples, 0.63%)</title><rect x="623" y="388" width="8" height="15" fill="rgb(211,132,11)"/><text x="626.00" y="398.50"></text></g><g><title>__munmap (libc-2.29.so) (20 samples, 0.60%)</title><rect x="631" y="388" width="7" height="15" fill="rgb(242,120,2)"/><text x="634.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:74) (116 samples, 3.46%)</title><rect x="603" y="372" width="41" height="15" fill="rgb(251,184,25)"/><text x="606.00" y="382.50">_wr..</text></g><g><title>mmap64 (libc-2.29.so) (17 samples, 0.51%)</title><rect x="638" y="388" width="6" height="15" fill="rgb(222,72,46)"/><text x="641.00" y="398.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:77) (15 samples, 0.45%)</title><rect x="644" y="372" width="5" height="15" fill="rgb(206,172,47)"/><text x="647.00" y="382.50"></text></g><g><title>get_array_ufunc_overrides (override.c:41) (16 samples, 0.48%)</title><rect x="659" y="420" width="6" height="15" fill="rgb(244,225,16)"/><text x="662.00" y="430.50"></text></g><g><title>PyUFuncOverride_GetOutObjects (ufunc_override.c:95) (16 samples, 0.48%)</title><rect x="659" y="436" width="6" height="15" fill="rgb(237,136,11)"/><text x="662.00" y="446.50"></text></g><g><title>unicode_hash (python3.7) (5 samples, 0.15%)</title><rect x="663" y="452" width="2" height="15" fill="rgb(233,82,30)"/><text x="666.00" y="462.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5515) (19 samples, 0.57%)</title><rect x="658" y="388" width="7" height="15" fill="rgb(250,136,24)"/><text x="661.00" y="398.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (18 samples, 0.54%)</title><rect x="659" y="404" width="6" height="15" fill="rgb(225,38,31)"/><text x="662.00" y="414.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4501) (24 samples, 0.72%)</title><rect x="665" y="404" width="9" height="15" fill="rgb(247,19,6)"/><text x="668.00" y="414.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:828) (3 samples, 0.09%)</title><rect x="675" y="452" width="1" height="15" fill="rgb(252,105,51)"/><text x="678.00" y="462.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:864) (8 samples, 0.24%)</title><rect x="676" y="452" width="3" height="15" fill="rgb(223,209,28)"/><text x="679.00" y="462.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4564) (15 samples, 0.45%)</title><rect x="675" y="404" width="5" height="15" fill="rgb(225,153,49)"/><text x="678.00" y="414.50"></text></g><g><title>PyArray_PyIntAsInt (conversion_utils.c:810) (15 samples, 0.45%)</title><rect x="675" y="420" width="5" height="15" fill="rgb(249,173,20)"/><text x="678.00" y="430.50"></text></g><g><title>PyArray_PyIntAsInt_ErrMsg (conversion_utils.c:795) (15 samples, 0.45%)</title><rect x="675" y="436" width="5" height="15" fill="rgb(241,138,4)"/><text x="678.00" y="446.50"></text></g><g><title>PyArray_PyIntAsIntp_ErrMsg (conversion_utils.c:872) (3 samples, 0.09%)</title><rect x="679" y="452" width="1" height="15" fill="rgb(219,165,0)"/><text x="682.00" y="462.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3629) (4 samples, 0.12%)</title><rect x="682" y="420" width="1" height="15" fill="rgb(235,116,18)"/><text x="685.00" y="430.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3419) (3 samples, 0.09%)</title><rect x="683" y="436" width="1" height="15" fill="rgb(220,46,29)"/><text x="686.00" y="446.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2194) (5 samples, 0.15%)</title><rect x="686" y="468" width="2" height="15" fill="rgb(246,194,51)"/><text x="689.00" y="478.50"></text></g><g><title>type_tuple_type_resolver (ufunc_type_resolution.c:2215) (4 samples, 0.12%)</title><rect x="688" y="468" width="2" height="15" fill="rgb(254,144,18)"/><text x="691.00" y="478.50"></text></g><g><title>ufunc_loop_matches (ufunc_type_resolution.c:1688) (3 samples, 0.09%)</title><rect x="689" y="484" width="1" height="15" fill="rgb(229,145,4)"/><text x="692.00" y="494.50"></text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3658) (20 samples, 0.60%)</title><rect x="683" y="420" width="7" height="15" fill="rgb(254,90,31)"/><text x="686.00" y="430.50"></text></g><g><title>reduce_type_resolver (ufunc_object.c:3428) (17 samples, 0.51%)</title><rect x="684" y="436" width="6" height="15" fill="rgb(236,41,21)"/><text x="687.00" y="446.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:572) (16 samples, 0.48%)</title><rect x="685" y="452" width="5" height="15" fill="rgb(247,224,45)"/><text x="688.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:57) (10 samples, 0.30%)</title><rect x="691" y="468" width="3" height="15" fill="rgb(209,129,21)"/><text x="694.00" y="478.50"></text></g><g><title>qsort_r (libc-2.29.so) (8 samples, 0.24%)</title><rect x="691" y="484" width="3" height="15" fill="rgb(224,200,44)"/><text x="694.00" y="494.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.09%)</title><rect x="696" y="500" width="1" height="15" fill="rgb(216,215,17)"/><text x="699.00" y="510.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1042) (17 samples, 0.51%)</title><rect x="697" y="500" width="6" height="15" fill="rgb(215,148,38)"/><text x="700.00" y="510.50"></text></g><g><title>npy_alloc_cache_dim (alloc.c:164) (16 samples, 0.48%)</title><rect x="697" y="516" width="6" height="15" fill="rgb(222,216,24)"/><text x="700.00" y="526.50"></text></g><g><title>_npy_alloc_cache (alloc.c:77) (16 samples, 0.48%)</title><rect x="697" y="532" width="6" height="15" fill="rgb(209,161,42)"/><text x="700.00" y="542.50"></text></g><g><title>malloc (libc-2.29.so) (15 samples, 0.45%)</title><rect x="698" y="548" width="5" height="15" fill="rgb(229,135,46)"/><text x="701.00" y="558.50"></text></g><g><title>_npy_alloc_cache (alloc.c:76) (6 samples, 0.18%)</title><rect x="703" y="532" width="3" height="15" fill="rgb(239,159,21)"/><text x="706.00" y="542.50"></text></g><g><title>PyDataMem_NEW (alloc.c:231) (6 samples, 0.18%)</title><rect x="703" y="548" width="3" height="15" fill="rgb(207,102,29)"/><text x="706.00" y="558.50"></text></g><g><title>malloc (libc-2.29.so) (6 samples, 0.18%)</title><rect x="703" y="564" width="3" height="15" fill="rgb(230,166,3)"/><text x="706.00" y="574.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1088) (9 samples, 0.27%)</title><rect x="703" y="500" width="3" height="15" fill="rgb(229,54,51)"/><text x="706.00" y="510.50"></text></g><g><title>npy_alloc_cache (alloc.c:122) (9 samples, 0.27%)</title><rect x="703" y="516" width="3" height="15" fill="rgb(238,16,21)"/><text x="706.00" y="526.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:479) (47 samples, 1.40%)</title><rect x="690" y="436" width="17" height="15" fill="rgb(242,85,19)"/><text x="693.00" y="446.50"></text></g><g><title>PyArray_CreateReduceResult (reduction.c:232) (47 samples, 1.40%)</title><rect x="690" y="452" width="17" height="15" fill="rgb(224,37,48)"/><text x="693.00" y="462.50"></text></g><g><title>allocate_reduce_result (reduction.c:77) (34 samples, 1.02%)</title><rect x="695" y="468" width="12" height="15" fill="rgb(232,148,5)"/><text x="698.00" y="478.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (32 samples, 0.96%)</title><rect x="696" y="484" width="11" height="15" fill="rgb(234,168,1)"/><text x="699.00" y="494.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:57) (6 samples, 0.18%)</title><rect x="715" y="484" width="2" height="15" fill="rgb(248,106,3)"/><text x="718.00" y="494.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src:895) (4 samples, 0.12%)</title><rect x="717" y="516" width="2" height="15" fill="rgb(231,184,51)"/><text x="720.00" y="526.50"></text></g><g><title>PyArray_GetStridedNumericCastFn (lowlevel_strided_loops.c.src:917) (3 samples, 0.09%)</title><rect x="719" y="516" width="1" height="15" fill="rgb(254,79,16)"/><text x="722.00" y="526.50"></text></g><g><title>raw_array_assign_scalar (array_assign_scalar.c:66) (11 samples, 0.33%)</title><rect x="717" y="484" width="4" height="15" fill="rgb(209,92,15)"/><text x="720.00" y="494.50"></text></g><g><title>get_nbo_cast_numeric_transfer_function (dtype_transfer.c:741) (10 samples, 0.30%)</title><rect x="717" y="500" width="4" height="15" fill="rgb(213,102,34)"/><text x="720.00" y="510.50"></text></g><g><title>PyArray_AssignRawScalar (array_assign_scalar.c:269) (28 samples, 0.84%)</title><rect x="712" y="468" width="10" height="15" fill="rgb(218,67,43)"/><text x="715.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:491) (44 samples, 1.31%)</title><rect x="707" y="436" width="16" height="15" fill="rgb(239,225,0)"/><text x="710.00" y="446.50"></text></g><g><title>PyArray_FillWithScalar (convert.c:511) (37 samples, 1.11%)</title><rect x="709" y="452" width="14" height="15" fill="rgb(254,65,40)"/><text x="712.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:110) (4 samples, 0.12%)</title><rect x="723" y="452" width="1" height="15" fill="rgb(218,90,15)"/><text x="726.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (4 samples, 0.12%)</title><rect x="724" y="452" width="1" height="15" fill="rgb(224,66,23)"/><text x="727.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (8 samples, 0.24%)</title><rect x="726" y="452" width="3" height="15" fill="rgb(226,108,17)"/><text x="729.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (8 samples, 0.24%)</title><rect x="730" y="452" width="3" height="15" fill="rgb(214,54,29)"/><text x="733.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (4 samples, 0.12%)</title><rect x="733" y="452" width="1" height="15" fill="rgb(247,159,7)"/><text x="736.00" y="462.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:477) (8 samples, 0.24%)</title><rect x="734" y="452" width="3" height="15" fill="rgb(212,218,36)"/><text x="737.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:543) (44 samples, 1.31%)</title><rect x="723" y="436" width="15" height="15" fill="rgb(247,77,28)"/><text x="726.00" y="446.50"></text></g><g><title>NpyIter_GetIterSize (nditer_api.c:856) (3 samples, 0.09%)</title><rect x="738" y="452" width="1" height="15" fill="rgb(239,10,11)"/><text x="741.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:550) (6 samples, 0.18%)</title><rect x="738" y="436" width="2" height="15" fill="rgb(237,107,25)"/><text x="741.00" y="446.50"></text></g><g><title>npy_clear_floatstatus_barrier (ieee754.c.src:813) (3 samples, 0.09%)</title><rect x="739" y="452" width="1" height="15" fill="rgb(224,13,10)"/><text x="742.00" y="462.50"></text></g><g><title>npy_get_floatstatus_barrier (ieee754.c.src:799) (3 samples, 0.09%)</title><rect x="739" y="468" width="1" height="15" fill="rgb(211,119,8)"/><text x="742.00" y="478.50"></text></g><g><title>fetestexcept (libm-2.29.so) (3 samples, 0.09%)</title><rect x="739" y="484" width="1" height="15" fill="rgb(248,83,1)"/><text x="742.00" y="494.50"></text></g><g><title>reduce_loop (ufunc_object.c:3486) (7 samples, 0.21%)</title><rect x="740" y="452" width="3" height="15" fill="rgb(252,96,41)"/><text x="743.00" y="462.50"></text></g><g><title>FLOAT_add (loops.c.src:1747) (3 samples, 0.09%)</title><rect x="743" y="468" width="1" height="15" fill="rgb(234,100,34)"/><text x="746.00" y="478.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:575) (13 samples, 0.39%)</title><rect x="740" y="436" width="5" height="15" fill="rgb(250,43,14)"/><text x="743.00" y="446.50"></text></g><g><title>reduce_loop (ufunc_object.c:3569) (5 samples, 0.15%)</title><rect x="743" y="452" width="2" height="15" fill="rgb(226,20,33)"/><text x="746.00" y="462.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (3 samples, 0.09%)</title><rect x="745" y="452" width="1" height="15" fill="rgb(210,35,7)"/><text x="748.00" y="462.50"></text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:589) (4 samples, 0.12%)</title><rect x="745" y="436" width="2" height="15" fill="rgb(232,98,15)"/><text x="748.00" y="446.50"></text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4632) (194 samples, 5.79%)</title><rect x="681" y="404" width="68" height="15" fill="rgb(252,95,43)"/><text x="684.00" y="414.50">PyUFunc..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c:3671) (167 samples, 4.99%)</title><rect x="690" y="420" width="59" height="15" fill="rgb(223,71,30)"/><text x="693.00" y="430.50">PyUFun..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c:595) (5 samples, 0.15%)</title><rect x="748" y="436" width="1" height="15" fill="rgb(212,135,54)"/><text x="751.00" y="446.50"></text></g><g><title>PyArray_UpdateFlags (flagsobject.c:66) (3 samples, 0.09%)</title><rect x="748" y="452" width="1" height="15" fill="rgb(211,19,51)"/><text x="751.00" y="462.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (482 samples, 14.40%)</title><rect x="581" y="340" width="170" height="15" fill="rgb(205,156,6)"/><text x="584.00" y="350.50">array_implement_array_..</text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (454 samples, 13.56%)</title><rect x="591" y="356" width="160" height="15" fill="rgb(253,112,50)"/><text x="594.00" y="366.50">sum (numpy/core/from..</text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (289 samples, 8.63%)</title><rect x="649" y="372" width="102" height="15" fill="rgb(247,110,31)"/><text x="652.00" y="382.50">_wrapreducti..</text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (244 samples, 7.29%)</title><rect x="665" y="388" width="86" height="15" fill="rgb(223,115,39)"/><text x="668.00" y="398.50">ufunc_redu..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c:4694) (4 samples, 0.12%)</title><rect x="750" y="404" width="1" height="15" fill="rgb(248,174,40)"/><text x="753.00" y="414.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (852 samples, 25.45%)</title><rect x="451" y="292" width="300" height="15" fill="rgb(209,58,24)"/><text x="454.00" y="302.50">run (mlprodict/onnxrt/ops_cpu/_op.py:269)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum_square.py:28) (584 samples, 17.44%)</title><rect x="546" y="308" width="205" height="15" fill="rgb(230,74,13)"/><text x="549.00" y="318.50">_run (mlprodict/onnxrt/ops..</text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (508 samples, 15.17%)</title><rect x="572" y="324" width="179" height="15" fill="rgb(224,73,14)"/><text x="575.00" y="334.50">sum (&lt;__array_function_..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (893 samples, 26.67%)</title><rect x="438" y="276" width="315" height="15" fill="rgb(238,127,6)"/><text x="441.00" y="286.50">run (mlprodict/onnxrt/ops_cpu/_op.py:348)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:274) (5 samples, 0.15%)</title><rect x="751" y="292" width="2" height="15" fill="rgb(224,91,45)"/><text x="754.00" y="302.50"></text></g><g><title>arraydescr_richcompare (descriptor.c:3210) (4 samples, 0.12%)</title><rect x="765" y="292" width="2" height="15" fill="rgb(205,220,40)"/><text x="768.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:349) (41 samples, 1.22%)</title><rect x="753" y="276" width="15" height="15" fill="rgb(230,211,24)"/><text x="756.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:426) (3 samples, 0.09%)</title><rect x="775" y="292" width="1" height="15" fill="rgb(218,108,2)"/><text x="778.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:519) (10 samples, 0.30%)</title><rect x="780" y="308" width="3" height="15" fill="rgb(222,61,1)"/><text x="783.00" y="318.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:527) (6 samples, 0.18%)</title><rect x="783" y="308" width="2" height="15" fill="rgb(254,16,8)"/><text x="786.00" y="318.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:431) (3 samples, 0.09%)</title><rect x="791" y="340" width="1" height="15" fill="rgb(228,226,15)"/><text x="794.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c:35) (5 samples, 0.15%)</title><rect x="792" y="356" width="2" height="15" fill="rgb(217,172,20)"/><text x="795.00" y="366.50"></text></g><g><title>PyUFunc_CheckOverride (override.c:452) (10 samples, 0.30%)</title><rect x="792" y="340" width="3" height="15" fill="rgb(228,131,22)"/><text x="795.00" y="350.50"></text></g><g><title>get_array_ufunc_overrides (override.c:72) (3 samples, 0.09%)</title><rect x="794" y="356" width="1" height="15" fill="rgb(234,60,13)"/><text x="797.00" y="366.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4717) (15 samples, 0.45%)</title><rect x="791" y="324" width="5" height="15" fill="rgb(221,177,14)"/><text x="794.00" y="334.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3165) (4 samples, 0.12%)</title><rect x="797" y="340" width="1" height="15" fill="rgb(253,137,14)"/><text x="800.00" y="350.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:520) (5 samples, 0.15%)</title><rect x="800" y="372" width="1" height="15" fill="rgb(207,193,15)"/><text x="803.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3180) (13 samples, 0.39%)</title><rect x="798" y="340" width="5" height="15" fill="rgb(221,120,16)"/><text x="801.00" y="350.50"></text></g><g><title>PyUFunc_SubtractionTypeResolver (ufunc_type_resolution.c:878) (12 samples, 0.36%)</title><rect x="799" y="356" width="4" height="15" fill="rgb(223,47,0)"/><text x="802.00" y="366.50"></text></g><g><title>PyUFunc_SimpleUniformOperationTypeResolver (ufunc_type_resolution.c:563) (3 samples, 0.09%)</title><rect x="802" y="372" width="1" height="15" fill="rgb(221,221,2)"/><text x="805.00" y="382.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3196) (3 samples, 0.09%)</title><rect x="803" y="340" width="1" height="15" fill="rgb(209,105,52)"/><text x="806.00" y="350.50"></text></g><g><title>make_full_arg_tuple (ufunc_object.c:1962) (4 samples, 0.12%)</title><rect x="805" y="356" width="1" height="15" fill="rgb(241,111,38)"/><text x="808.00" y="366.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3215) (7 samples, 0.21%)</title><rect x="804" y="340" width="3" height="15" fill="rgb(249,175,15)"/><text x="807.00" y="350.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3222) (3 samples, 0.09%)</title><rect x="807" y="340" width="1" height="15" fill="rgb(225,204,0)"/><text x="810.00" y="350.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1616) (3 samples, 0.09%)</title><rect x="809" y="356" width="1" height="15" fill="rgb(232,39,27)"/><text x="812.00" y="366.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:195) (3 samples, 0.09%)</title><rect x="811" y="388" width="1" height="15" fill="rgb(205,181,10)"/><text x="814.00" y="398.50"></text></g><g><title>npyiter_prepare_operands (nditer_constr.c:1207) (4 samples, 0.12%)</title><rect x="812" y="404" width="1" height="15" fill="rgb(211,226,29)"/><text x="815.00" y="414.50"></text></g><g><title>npyiter_prepare_one_operand (nditer_constr.c:1135) (3 samples, 0.09%)</title><rect x="812" y="420" width="1" height="15" fill="rgb(229,132,44)"/><text x="815.00" y="430.50"></text></g><g><title>IsAligned (array_assign.c:140) (3 samples, 0.09%)</title><rect x="812" y="436" width="1" height="15" fill="rgb(254,196,20)"/><text x="815.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:214) (6 samples, 0.18%)</title><rect x="812" y="388" width="2" height="15" fill="rgb(235,184,24)"/><text x="815.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:241) (4 samples, 0.12%)</title><rect x="814" y="388" width="1" height="15" fill="rgb(217,214,54)"/><text x="817.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:390) (5 samples, 0.15%)</title><rect x="817" y="388" width="1" height="15" fill="rgb(216,223,40)"/><text x="820.00" y="398.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (3 samples, 0.09%)</title><rect x="820" y="452" width="2" height="15" fill="rgb(240,38,8)"/><text x="823.00" y="462.50"></text></g><g><title>npyiter_allocate_arrays (nditer_constr.c:2841) (11 samples, 0.33%)</title><rect x="819" y="404" width="4" height="15" fill="rgb(229,205,27)"/><text x="822.00" y="414.50"></text></g><g><title>npyiter_new_temp_array (nditer_constr.c:2686) (9 samples, 0.27%)</title><rect x="820" y="420" width="3" height="15" fill="rgb(239,183,21)"/><text x="823.00" y="430.50"></text></g><g><title>PyArray_NewFromDescr (ctors.c:1209) (7 samples, 0.21%)</title><rect x="820" y="436" width="3" height="15" fill="rgb(219,205,45)"/><text x="823.00" y="446.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:403) (17 samples, 0.51%)</title><rect x="818" y="388" width="6" height="15" fill="rgb(248,117,27)"/><text x="821.00" y="398.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:421) (4 samples, 0.12%)</title><rect x="824" y="388" width="2" height="15" fill="rgb(238,167,42)"/><text x="827.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1520) (48 samples, 1.43%)</title><rect x="811" y="372" width="17" height="15" fill="rgb(240,132,29)"/><text x="814.00" y="382.50"></text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c:465) (4 samples, 0.12%)</title><rect x="826" y="388" width="2" height="15" fill="rgb(232,202,21)"/><text x="829.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1561) (7 samples, 0.21%)</title><rect x="829" y="372" width="2" height="15" fill="rgb(252,164,8)"/><text x="832.00" y="382.50"></text></g><g><title>NpyIter_ResetBasePointers (nditer_api.c:329) (5 samples, 0.15%)</title><rect x="830" y="388" width="1" height="15" fill="rgb(216,92,39)"/><text x="833.00" y="398.50"></text></g><g><title>iterator_loop (ufunc_object.c:1582) (9 samples, 0.27%)</title><rect x="832" y="372" width="4" height="15" fill="rgb(251,63,9)"/><text x="835.00" y="382.50"></text></g><g><title>npyiter_buffered_iternext (nditer_templ.c.src:309) (5 samples, 0.15%)</title><rect x="834" y="388" width="2" height="15" fill="rgb(224,128,23)"/><text x="837.00" y="398.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:674) (3 samples, 0.09%)</title><rect x="836" y="388" width="1" height="15" fill="rgb(211,137,46)"/><text x="839.00" y="398.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (84 samples, 2.51%)</title><rect x="809" y="340" width="29" height="15" fill="rgb(207,124,24)"/><text x="812.00" y="350.50">Py..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (79 samples, 2.36%)</title><rect x="810" y="356" width="28" height="15" fill="rgb(234,35,3)"/><text x="813.00" y="366.50">e..</text></g><g><title>iterator_loop (ufunc_object.c:1586) (7 samples, 0.21%)</title><rect x="836" y="372" width="2" height="15" fill="rgb(230,59,31)"/><text x="839.00" y="382.50"></text></g><g><title>NpyIter_Deallocate (nditer_constr.c:716) (4 samples, 0.12%)</title><rect x="837" y="388" width="1" height="15" fill="rgb(216,163,39)"/><text x="840.00" y="398.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (122 samples, 3.64%)</title><rect x="796" y="324" width="43" height="15" fill="rgb(236,77,32)"/><text x="799.00" y="334.50">ufun..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (186 samples, 5.56%)</title><rect x="776" y="292" width="66" height="15" fill="rgb(238,125,45)"/><text x="779.00" y="302.50">run (ml..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (161 samples, 4.81%)</title><rect x="785" y="308" width="57" height="15" fill="rgb(250,106,38)"/><text x="788.00" y="318.50">_run (..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (212 samples, 6.33%)</title><rect x="768" y="276" width="75" height="15" fill="rgb(246,194,50)"/><text x="771.00" y="286.50">run (mlp..</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:490) (11 samples, 0.33%)</title><rect x="843" y="276" width="4" height="15" fill="rgb(252,131,36)"/><text x="846.00" y="286.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (1,274 samples, 38.05%)</title><rect x="398" y="260" width="449" height="15" fill="rgb(249,109,29)"/><text x="401.00" y="270.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:140) (54 samples, 1.61%)</title><rect x="847" y="260" width="19" height="15" fill="rgb(247,102,42)"/><text x="850.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:142) (45 samples, 1.34%)</title><rect x="866" y="260" width="16" height="15" fill="rgb(224,17,27)"/><text x="869.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:149) (15 samples, 0.45%)</title><rect x="882" y="260" width="5" height="15" fill="rgb(215,162,11)"/><text x="885.00" y="270.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (106 samples, 3.17%)</title><rect x="887" y="260" width="38" height="15" fill="rgb(228,134,51)"/><text x="890.00" y="270.50">run..</text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (2,063 samples, 61.62%)</title><rect x="207" y="244" width="727" height="15" fill="rgb(246,140,43)"/><text x="210.00" y="254.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (26 samples, 0.78%)</title><rect x="925" y="260" width="9" height="15" fill="rgb(208,11,18)"/><text x="928.00" y="270.50"></text></g><g><title>&lt;dictcomp&gt; (mlprodict/onnxrt/onnx_inference.py:541) (21 samples, 0.63%)</title><rect x="947" y="260" width="8" height="15" fill="rgb(218,125,38)"/><text x="950.00" y="270.50"></text></g><g><title>__munmap (libc-2.29.so) (14 samples, 0.42%)</title><rect x="955" y="260" width="5" height="15" fill="rgb(213,152,41)"/><text x="958.00" y="270.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:541) (88 samples, 2.63%)</title><rect x="935" y="244" width="31" height="15" fill="rgb(231,106,43)"/><text x="938.00" y="254.50">_r..</text></g><g><title>mmap64 (libc-2.29.so) (17 samples, 0.51%)</title><rect x="960" y="260" width="6" height="15" fill="rgb(225,154,26)"/><text x="963.00" y="270.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:932) (3 samples, 0.09%)</title><rect x="967" y="260" width="1" height="15" fill="rgb(234,101,47)"/><text x="970.00" y="270.50"></text></g><g><title>_buffer_clear_info (buffer.c:723) (3 samples, 0.09%)</title><rect x="969" y="276" width="1" height="15" fill="rgb(244,129,39)"/><text x="972.00" y="286.50"></text></g><g><title>_buffer_clear_info (buffer.c:724) (4 samples, 0.12%)</title><rect x="970" y="276" width="1" height="15" fill="rgb(228,131,7)"/><text x="973.00" y="286.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (13 samples, 0.39%)</title><rect x="967" y="244" width="5" height="15" fill="rgb(216,75,31)"/><text x="970.00" y="254.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (9 samples, 0.27%)</title><rect x="969" y="260" width="3" height="15" fill="rgb(253,175,14)"/><text x="972.00" y="270.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91) (2,323 samples, 69.38%)</title><rect x="153" y="212" width="819" height="15" fill="rgb(217,25,27)"/><text x="156.00" y="222.50">_run (mlprodict/onnxrt/ops_cpu/op_scan.py:91)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,270 samples, 67.80%)</title><rect x="172" y="228" width="800" height="15" fill="rgb(216,29,46)"/><text x="175.00" y="238.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (30 samples, 0.90%)</title><rect x="972" y="212" width="11" height="15" fill="rgb(219,170,18)"/><text x="975.00" y="222.50"></text></g><g><title>&lt;listcomp&gt; (mlprodict/onnxrt/ops_cpu/op_scan.py:92) (11 samples, 0.33%)</title><rect x="979" y="228" width="4" height="15" fill="rgb(245,69,3)"/><text x="982.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:93) (26 samples, 0.78%)</title><rect x="983" y="212" width="9" height="15" fill="rgb(240,159,2)"/><text x="986.00" y="222.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:4) (17 samples, 0.51%)</title><rect x="1001" y="228" width="6" height="15" fill="rgb(249,143,14)"/><text x="1004.00" y="238.50"></text></g><g><title>_expand_dims_dispatcher (numpy/lib/shape_base.py:509) (3 samples, 0.09%)</title><rect x="1006" y="244" width="1" height="15" fill="rgb(212,9,45)"/><text x="1009.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:234) (3 samples, 0.09%)</title><rect x="1011" y="244" width="1" height="15" fill="rgb(231,182,12)"/><text x="1014.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:241) (3 samples, 0.09%)</title><rect x="1012" y="244" width="1" height="15" fill="rgb(222,206,8)"/><text x="1015.00" y="254.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:571) (13 samples, 0.39%)</title><rect x="1016" y="260" width="5" height="15" fill="rgb(254,110,31)"/><text x="1019.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:574) (35 samples, 1.05%)</title><rect x="1021" y="260" width="12" height="15" fill="rgb(212,63,6)"/><text x="1024.00" y="270.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (25 samples, 0.75%)</title><rect x="1024" y="276" width="9" height="15" fill="rgb(218,200,33)"/><text x="1027.00" y="286.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:576) (15 samples, 0.45%)</title><rect x="1033" y="260" width="5" height="15" fill="rgb(240,137,2)"/><text x="1036.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:577) (23 samples, 0.69%)</title><rect x="1038" y="260" width="8" height="15" fill="rgb(217,191,46)"/><text x="1041.00" y="270.50"></text></g><g><title>expand_dims (numpy/lib/shape_base.py:583) (4 samples, 0.12%)</title><rect x="1046" y="260" width="2" height="15" fill="rgb(234,81,16)"/><text x="1049.00" y="270.50"></text></g><g><title>array_reshape (methods.c:186) (12 samples, 0.36%)</title><rect x="1059" y="276" width="5" height="15" fill="rgb(251,78,36)"/><text x="1062.00" y="286.50"></text></g><g><title>NpyArg_ParseKeywords (methods.c:53) (8 samples, 0.24%)</title><rect x="1061" y="292" width="3" height="15" fill="rgb(232,131,16)"/><text x="1064.00" y="302.50"></text></g><g><title>array_reshape (methods.c:195) (8 samples, 0.24%)</title><rect x="1064" y="276" width="2" height="15" fill="rgb(253,60,31)"/><text x="1067.00" y="286.50"></text></g><g><title>PyArray_Newshape (shape.c:230) (3 samples, 0.09%)</title><rect x="1067" y="308" width="1" height="15" fill="rgb(242,142,25)"/><text x="1070.00" y="318.50"></text></g><g><title>array_alloc (arrayobject.c:1768) (4 samples, 0.12%)</title><rect x="1069" y="340" width="1" height="15" fill="rgb(227,110,8)"/><text x="1072.00" y="350.50"></text></g><g><title>PyArray_NewFromDescr_int (ctors.c:1016) (5 samples, 0.15%)</title><rect x="1069" y="324" width="1" height="15" fill="rgb(217,48,43)"/><text x="1072.00" y="334.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (170 samples, 5.08%)</title><rect x="1013" y="244" width="60" height="15" fill="rgb(254,179,37)"/><text x="1016.00" y="254.50">array_..</text></g><g><title>expand_dims (numpy/lib/shape_base.py:587) (72 samples, 2.15%)</title><rect x="1048" y="260" width="25" height="15" fill="rgb(232,100,1)"/><text x="1051.00" y="270.50">e..</text></g><g><title>array_reshape (methods.c:210) (19 samples, 0.57%)</title><rect x="1066" y="276" width="7" height="15" fill="rgb(248,68,53)"/><text x="1069.00" y="286.50"></text></g><g><title>npy_free_cache_dim_obj (alloc.h:27) (19 samples, 0.57%)</title><rect x="1066" y="292" width="7" height="15" fill="rgb(248,56,48)"/><text x="1069.00" y="302.50"></text></g><g><title>PyArray_Newshape (shape.c:282) (13 samples, 0.39%)</title><rect x="1069" y="308" width="4" height="15" fill="rgb(228,149,47)"/><text x="1072.00" y="318.50"></text></g><g><title>expand_dims (&lt;__array_function__ internals&gt;:6) (192 samples, 5.73%)</title><rect x="1007" y="228" width="67" height="15" fill="rgb(247,11,53)"/><text x="1010.00" y="238.50">expand_..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:94) (235 samples, 7.02%)</title><rect x="992" y="212" width="83" height="15" fill="rgb(242,21,36)"/><text x="995.00" y="222.50">_run (mlp..</text></g><g><title>atleast_2d (numpy/core/shape_base.py:122) (13 samples, 0.39%)</title><rect x="1075" y="308" width="5" height="15" fill="rgb(229,197,20)"/><text x="1078.00" y="318.50"></text></g><g><title>asanyarray (numpy/core/_asarray.py:138) (8 samples, 0.24%)</title><rect x="1077" y="324" width="3" height="15" fill="rgb(248,225,43)"/><text x="1080.00" y="334.50"></text></g><g><title>atleast_2d (numpy/core/shape_base.py:125) (5 samples, 0.15%)</title><rect x="1080" y="308" width="2" height="15" fill="rgb(206,215,53)"/><text x="1083.00" y="318.50"></text></g><g><title>vstack (numpy/core/shape_base.py:279) (23 samples, 0.69%)</title><rect x="1075" y="260" width="8" height="15" fill="rgb(236,176,33)"/><text x="1078.00" y="270.50"></text></g><g><title>atleast_2d (&lt;__array_function__ internals&gt;:6) (23 samples, 0.69%)</title><rect x="1075" y="276" width="8" height="15" fill="rgb(251,108,2)"/><text x="1078.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (23 samples, 0.69%)</title><rect x="1075" y="292" width="8" height="15" fill="rgb(247,91,14)"/><text x="1078.00" y="302.50"></text></g><g><title>raw_array_assign_array (array_assign_array.c:120) (3 samples, 0.09%)</title><rect x="1086" y="372" width="1" height="15" fill="rgb(226,200,10)"/><text x="1089.00" y="382.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_scan.py:97) (39 samples, 1.16%)</title><rect x="1075" y="212" width="13" height="15" fill="rgb(217,13,53)"/><text x="1078.00" y="222.50"></text></g><g><title>vstack (&lt;__array_function__ internals&gt;:6) (38 samples, 1.14%)</title><rect x="1075" y="228" width="13" height="15" fill="rgb(238,139,16)"/><text x="1078.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (38 samples, 1.14%)</title><rect x="1075" y="244" width="13" height="15" fill="rgb(218,214,24)"/><text x="1078.00" y="254.50"></text></g><g><title>vstack (numpy/core/shape_base.py:282) (15 samples, 0.45%)</title><rect x="1083" y="260" width="5" height="15" fill="rgb(219,100,26)"/><text x="1086.00" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:6) (14 samples, 0.42%)</title><rect x="1083" y="276" width="5" height="15" fill="rgb(254,219,52)"/><text x="1086.00" y="286.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (14 samples, 0.42%)</title><rect x="1083" y="292" width="5" height="15" fill="rgb(205,131,29)"/><text x="1086.00" y="302.50"></text></g><g><title>array_concatenate (multiarraymodule.c:2198) (14 samples, 0.42%)</title><rect x="1083" y="308" width="5" height="15" fill="rgb(234,137,42)"/><text x="1086.00" y="318.50"></text></g><g><title>PyArray_ConcatenateInto (multiarraymodule.c:671) (12 samples, 0.36%)</title><rect x="1084" y="324" width="4" height="15" fill="rgb(230,187,18)"/><text x="1087.00" y="334.50"></text></g><g><title>PyArray_ConcatenateArrays (multiarraymodule.c:510) (9 samples, 0.27%)</title><rect x="1085" y="340" width="3" height="15" fill="rgb(233,160,51)"/><text x="1088.00" y="350.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c:404) (8 samples, 0.24%)</title><rect x="1086" y="356" width="2" height="15" fill="rgb(209,125,30)"/><text x="1089.00" y="366.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:26) (4 samples, 0.12%)</title><rect x="1090" y="244" width="2" height="15" fill="rgb(241,32,29)"/><text x="1093.00" y="254.50"></text></g><g><title>PyArray_IterAllButAxis (iterators.c:288) (4 samples, 0.12%)</title><rect x="1094" y="372" width="2" height="15" fill="rgb(205,9,11)"/><text x="1097.00" y="382.50"></text></g><g><title>PyArray_IterNew (iterators.c:183) (4 samples, 0.12%)</title><rect x="1094" y="388" width="2" height="15" fill="rgb(219,29,1)"/><text x="1097.00" y="398.50"></text></g><g><title>malloc (libc-2.29.so) (4 samples, 0.12%)</title><rect x="1094" y="404" width="2" height="15" fill="rgb(223,101,37)"/><text x="1097.00" y="414.50"></text></g><g><title>0x7f2eca684028 (libc-2.29.so) (4 samples, 0.12%)</title><rect x="1094" y="420" width="2" height="15" fill="rgb(238,30,17)"/><text x="1097.00" y="430.50"></text></g><g><title>argpartition (&lt;__array_function__ internals&gt;:6) (11 samples, 0.33%)</title><rect x="1092" y="260" width="4" height="15" fill="rgb(245,0,44)"/><text x="1095.00" y="270.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (11 samples, 0.33%)</title><rect x="1092" y="276" width="4" height="15" fill="rgb(211,61,49)"/><text x="1095.00" y="286.50"></text></g><g><title>argpartition (numpy/core/fromnumeric.py:819) (11 samples, 0.33%)</title><rect x="1092" y="292" width="4" height="15" fill="rgb(242,200,48)"/><text x="1095.00" y="302.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (10 samples, 0.30%)</title><rect x="1093" y="308" width="3" height="15" fill="rgb(249,63,1)"/><text x="1096.00" y="318.50"></text></g><g><title>array_argpartition (methods.c:1454) (8 samples, 0.24%)</title><rect x="1093" y="324" width="3" height="15" fill="rgb(250,90,0)"/><text x="1096.00" y="334.50"></text></g><g><title>PyArray_ArgPartition (item_selection.c:1373) (6 samples, 0.18%)</title><rect x="1094" y="340" width="2" height="15" fill="rgb(240,52,3)"/><text x="1097.00" y="350.50"></text></g><g><title>_new_argsortlike (item_selection.c:997) (5 samples, 0.15%)</title><rect x="1094" y="356" width="2" height="15" fill="rgb(211,131,24)"/><text x="1097.00" y="366.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:28) (13 samples, 0.39%)</title><rect x="1092" y="244" width="4" height="15" fill="rgb(252,133,26)"/><text x="1095.00" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_topk.py:137) (26 samples, 0.78%)</title><rect x="1089" y="212" width="10" height="15" fill="rgb(209,223,4)"/><text x="1092.00" y="222.50"></text></g><g><title>_common_run (mlprodict/onnxrt/ops_cpu/op_topk.py:75) (23 samples, 0.69%)</title><rect x="1090" y="228" width="9" height="15" fill="rgb(207,202,36)"/><text x="1093.00" y="238.50"></text></g><g><title>topk_sorted_implementation (mlprodict/onnxrt/ops_cpu/op_topk.py:32) (5 samples, 0.15%)</title><rect x="1097" y="244" width="2" height="15" fill="rgb(232,97,8)"/><text x="1100.00" y="254.50"></text></g><g><title>array_dealloc (arrayobject.c:476) (3 samples, 0.09%)</title><rect x="1099" y="212" width="1" height="15" fill="rgb(205,18,38)"/><text x="1102.00" y="222.50"></text></g><g><title>_dealloc_cached_buffer_info (buffer.c:944) (3 samples, 0.09%)</title><rect x="1099" y="228" width="1" height="15" fill="rgb(252,112,6)"/><text x="1102.00" y="238.50"></text></g><g><title>array_dealloc (arrayobject.c:520) (4 samples, 0.12%)</title><rect x="1100" y="212" width="1" height="15" fill="rgb(231,181,3)"/><text x="1103.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:118) (2,806 samples, 83.81%)</title><rect x="113" y="196" width="989" height="15" fill="rgb(240,131,42)"/><text x="116.00" y="206.50">run (mlprodict/onnxrt/ops_cpu/_op.py:118)</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_flatten.py:24) (8 samples, 0.24%)</title><rect x="1102" y="212" width="3" height="15" fill="rgb(253,204,47)"/><text x="1105.00" y="222.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:6) (7 samples, 0.21%)</title><rect x="1102" y="228" width="3" height="15" fill="rgb(242,83,54)"/><text x="1105.00" y="238.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (7 samples, 0.21%)</title><rect x="1102" y="244" width="3" height="15" fill="rgb(233,129,3)"/><text x="1105.00" y="254.50"></text></g><g><title>prod (numpy/core/fromnumeric.py:2911) (7 samples, 0.21%)</title><rect x="1102" y="260" width="3" height="15" fill="rgb(230,124,36)"/><text x="1105.00" y="270.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (4 samples, 0.12%)</title><rect x="1103" y="276" width="2" height="15" fill="rgb(247,54,16)"/><text x="1106.00" y="286.50"></text></g><g><title>ufunc_reduce (ufunc_object.c:5521) (4 samples, 0.12%)</title><rect x="1103" y="292" width="2" height="15" fill="rgb(249,214,12)"/><text x="1106.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (9 samples, 0.27%)</title><rect x="1102" y="196" width="3" height="15" fill="rgb(214,111,19)"/><text x="1105.00" y="206.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_reduce_sum.py:29) (7 samples, 0.21%)</title><rect x="1105" y="228" width="3" height="15" fill="rgb(208,119,3)"/><text x="1108.00" y="238.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:6) (6 samples, 0.18%)</title><rect x="1106" y="244" width="2" height="15" fill="rgb(217,52,16)"/><text x="1109.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (5 samples, 0.15%)</title><rect x="1106" y="260" width="2" height="15" fill="rgb(243,103,2)"/><text x="1109.00" y="270.50"></text></g><g><title>sum (numpy/core/fromnumeric.py:2182) (5 samples, 0.15%)</title><rect x="1106" y="276" width="2" height="15" fill="rgb(219,39,19)"/><text x="1109.00" y="286.50"></text></g><g><title>_wrapreduction (numpy/core/fromnumeric.py:90) (3 samples, 0.09%)</title><rect x="1107" y="292" width="1" height="15" fill="rgb(250,13,0)"/><text x="1110.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:348) (12 samples, 0.36%)</title><rect x="1105" y="196" width="4" height="15" fill="rgb(246,141,6)"/><text x="1108.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:269) (12 samples, 0.36%)</title><rect x="1105" y="212" width="4" height="15" fill="rgb(206,115,31)"/><text x="1108.00" y="222.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_transpose.py:25) (4 samples, 0.12%)</title><rect x="1108" y="228" width="1" height="15" fill="rgb(206,185,54)"/><text x="1111.00" y="238.50"></text></g><g><title>transpose (&lt;__array_function__ internals&gt;:6) (3 samples, 0.09%)</title><rect x="1108" y="244" width="1" height="15" fill="rgb(233,84,47)"/><text x="1111.00" y="254.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c:259) (3 samples, 0.09%)</title><rect x="1108" y="260" width="1" height="15" fill="rgb(209,181,54)"/><text x="1111.00" y="270.50"></text></g><g><title>transpose (numpy/core/fromnumeric.py:650) (3 samples, 0.09%)</title><rect x="1108" y="276" width="1" height="15" fill="rgb(240,70,49)"/><text x="1111.00" y="286.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:61) (3 samples, 0.09%)</title><rect x="1108" y="292" width="1" height="15" fill="rgb(244,224,9)"/><text x="1111.00" y="302.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_div.py:18) (4 samples, 0.12%)</title><rect x="1110" y="228" width="1" height="15" fill="rgb(246,14,3)"/><text x="1113.00" y="238.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/_op.py:535) (4 samples, 0.12%)</title><rect x="1110" y="244" width="1" height="15" fill="rgb(236,167,45)"/><text x="1113.00" y="254.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c:4725) (3 samples, 0.09%)</title><rect x="1110" y="260" width="1" height="15" fill="rgb(246,131,25)"/><text x="1113.00" y="270.50"></text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c:3262) (3 samples, 0.09%)</title><rect x="1110" y="276" width="1" height="15" fill="rgb(237,60,13)"/><text x="1113.00" y="286.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c:1742) (3 samples, 0.09%)</title><rect x="1110" y="292" width="1" height="15" fill="rgb(251,29,28)"/><text x="1113.00" y="302.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:138) (2,842 samples, 84.89%)</title><rect x="110" y="180" width="1002" height="15" fill="rgb(241,162,31)"/><text x="113.00" y="190.50">run (mlprodict/onnxrt/onnx_inference_node.py:138)</text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:489) (5 samples, 0.15%)</title><rect x="1110" y="196" width="2" height="15" fill="rgb(246,97,41)"/><text x="1113.00" y="206.50"></text></g><g><title>run (mlprodict/onnxrt/ops_cpu/_op.py:432) (5 samples, 0.15%)</title><rect x="1110" y="212" width="2" height="15" fill="rgb(236,204,14)"/><text x="1113.00" y="222.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:153) (6 samples, 0.18%)</title><rect x="1113" y="180" width="2" height="15" fill="rgb(240,73,23)"/><text x="1116.00" y="190.50"></text></g><g><title>_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458) (2,869 samples, 85.69%)</title><rect x="105" y="164" width="1012" height="15" fill="rgb(228,189,36)"/><text x="108.00" y="174.50">_run_sequence_runtime (mlprodict/onnxrt/onnx_inference.py:458)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference_node.py:154) (4 samples, 0.12%)</title><rect x="1115" y="180" width="2" height="15" fill="rgb(213,176,42)"/><text x="1118.00" y="190.50"></text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:45) (2,943 samples, 87.90%)</title><rect x="80" y="52" width="1037" height="15" fill="rgb(227,158,25)"/><text x="83.00" y="62.50">&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:45)</text></g><g><title>profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:44) (2,943 samples, 87.90%)</title><rect x="80" y="68" width="1037" height="15" fill="rgb(209,59,54)"/><text x="83.00" y="78.50">profile_pyrt (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:44)</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:29) (2,943 samples, 87.90%)</title><rect x="80" y="84" width="1037" height="15" fill="rgb(216,225,31)"/><text x="83.00" y="94.50">setup_profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:29)</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:23) (2,874 samples, 85.84%)</title><rect x="104" y="100" width="1013" height="15" fill="rgb(207,108,38)"/><text x="107.00" y="110.50">profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:23)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (2,873 samples, 85.81%)</title><rect x="105" y="116" width="1012" height="15" fill="rgb(243,50,12)"/><text x="108.00" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (2,871 samples, 85.75%)</title><rect x="105" y="132" width="1012" height="15" fill="rgb(218,130,32)"/><text x="108.00" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (2,871 samples, 85.75%)</title><rect x="105" y="148" width="1012" height="15" fill="rgb(230,192,4)"/><text x="108.00" y="158.50">run (mlprodict/onnxrt/onnx_inference.py:402)</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:18) (3 samples, 0.09%)</title><rect x="1117" y="100" width="1" height="15" fill="rgb(205,127,29)"/><text x="1120.00" y="110.50"></text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (3 samples, 0.09%)</title><rect x="1117" y="116" width="1" height="15" fill="rgb(223,60,5)"/><text x="1120.00" y="126.50"></text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (3 samples, 0.09%)</title><rect x="1117" y="132" width="1" height="15" fill="rgb(251,173,48)"/><text x="1120.00" y="142.50"></text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (3 samples, 0.09%)</title><rect x="1117" y="148" width="1" height="15" fill="rgb(238,195,36)"/><text x="1120.00" y="158.50"></text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (3 samples, 0.09%)</title><rect x="1117" y="164" width="1" height="15" fill="rgb(218,206,44)"/><text x="1120.00" y="174.50"></text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (3 samples, 0.09%)</title><rect x="1117" y="180" width="1" height="15" fill="rgb(224,3,33)"/><text x="1120.00" y="190.50"></text></g><g><title>run (onnxruntime/capi/session.py:136) (3 samples, 0.09%)</title><rect x="1117" y="196" width="1" height="15" fill="rgb(239,179,53)"/><text x="1120.00" y="206.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1119" y="340" width="1" height="15" fill="rgb(249,86,28)"/><text x="1122.00" y="350.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue const&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1123" y="388" width="1" height="15" fill="rgb(234,65,18)"/><text x="1126.00" y="398.50"></text></g><g><title>onnxruntime::scan::detail::OutputIterator::operator* (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1125" y="388" width="1" height="15" fill="rgb(228,149,35)"/><text x="1128.00" y="398.50"></text></g><g><title>onnxruntime::OrtValueTensorSlicer&lt;OrtValue&gt;::Iterator::MaterializeMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1125" y="404" width="1" height="15" fill="rgb(231,21,4)"/><text x="1128.00" y="414.50"></text></g><g><title>onnxruntime::BFCArena::FindChunkPtr (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1131" y="468" width="1" height="15" fill="rgb(208,90,31)"/><text x="1134.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::AllocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (6 samples, 0.18%)</title><rect x="1130" y="452" width="2" height="15" fill="rgb(253,8,26)"/><text x="1133.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1132" y="452" width="2" height="15" fill="rgb(209,89,5)"/><text x="1135.00" y="462.50"></text></g><g><title>onnxruntime::utils::GetAllocator (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1132" y="468" width="2" height="15" fill="rgb(251,154,12)"/><text x="1135.00" y="478.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, unsigned long&gt; &gt; &gt;::find (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1132" y="484" width="2" height="15" fill="rgb(230,49,45)"/><text x="1135.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::IExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.30%)</title><rect x="1134" y="452" width="3" height="15" fill="rgb(221,30,2)"/><text x="1137.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::Init (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.24%)</title><rect x="1135" y="468" width="2" height="15" fill="rgb(249,122,27)"/><text x="1138.00" y="478.50"></text></g><g><title>std::vector&lt;OrtValue, std::allocator&lt;OrtValue&gt; &gt;::_M_default_append (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1136" y="484" width="1" height="15" fill="rgb(228,135,45)"/><text x="1139.00" y="494.50"></text></g><g><title>onnxruntime::ExecutionFrame::ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (25 samples, 0.75%)</title><rect x="1130" y="436" width="8" height="15" fill="rgb(205,12,34)"/><text x="1133.00" y="446.50"></text></g><g><title>0x7f2e8a5fcae0 (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1138" y="468" width="1" height="15" fill="rgb(215,110,14)"/><text x="1141.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::InsertFreeChunkIntoBin (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1141" y="516" width="1" height="15" fill="rgb(223,174,35)"/><text x="1144.00" y="526.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, onnxruntime::BFCArena::Bin::ChunkComparator, std::allocator&lt;unsigned long&gt; &gt;::_M_insert_unique&lt;unsigned long const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (4 samples, 0.12%)</title><rect x="1141" y="532" width="1" height="15" fill="rgb(229,198,39)"/><text x="1144.00" y="542.50"></text></g><g><title>onnxruntime::BFCArena::Merge (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1142" y="516" width="1" height="15" fill="rgb(205,200,13)"/><text x="1145.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::~ExecutionFrame (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 0.48%)</title><rect x="1138" y="436" width="6" height="15" fill="rgb(217,186,4)"/><text x="1141.00" y="446.50"></text></g><g><title>std::_Rb_tree&lt;OrtMemoryInfo, std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt;, std::_Select1st&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt;, std::less&lt;OrtMemoryInfo&gt;, std::allocator&lt;std::pair&lt;OrtMemoryInfo const, std::unique_ptr&lt;void, onnxruntime::BufferDeleter&gt; &gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 0.48%)</title><rect x="1138" y="452" width="6" height="15" fill="rgb(245,73,24)"/><text x="1141.00" y="462.50"></text></g><g><title>onnxruntime::BFCArena::Free (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.36%)</title><rect x="1140" y="468" width="4" height="15" fill="rgb(252,167,13)"/><text x="1143.00" y="478.50"></text></g><g><title>onnxruntime::BFCArena::DeallocateRawInternal (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.33%)</title><rect x="1140" y="484" width="4" height="15" fill="rgb(231,146,29)"/><text x="1143.00" y="494.50"></text></g><g><title>onnxruntime::BFCArena::FreeAndMaybeCoalesce (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.33%)</title><rect x="1140" y="500" width="4" height="15" fill="rgb(248,24,23)"/><text x="1143.00" y="510.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.27%)</title><rect x="1145" y="436" width="3" height="15" fill="rgb(229,88,44)"/><text x="1148.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.27%)</title><rect x="1145" y="452" width="3" height="15" fill="rgb(248,170,47)"/><text x="1148.00" y="462.50"></text></g><g><title>onnxruntime::IExecutionFrame::ReleaseMLValueImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.24%)</title><rect x="1145" y="468" width="3" height="15" fill="rgb(220,224,10)"/><text x="1148.00" y="478.50"></text></g><g><title>onnxruntime::IdentityOp&lt;false&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1148" y="436" width="2" height="15" fill="rgb(206,122,32)"/><text x="1151.00" y="446.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1168" y="564" width="2" height="15" fill="rgb(237,25,49)"/><text x="1171.00" y="574.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.24%)</title><rect x="1168" y="532" width="3" height="15" fill="rgb(213,128,41)"/><text x="1171.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (8 samples, 0.24%)</title><rect x="1168" y="548" width="3" height="15" fill="rgb(236,32,49)"/><text x="1171.00" y="558.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.36%)</title><rect x="1167" y="468" width="4" height="15" fill="rgb(231,61,52)"/><text x="1170.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (11 samples, 0.33%)</title><rect x="1167" y="484" width="4" height="15" fill="rgb(253,202,41)"/><text x="1170.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.30%)</title><rect x="1168" y="500" width="3" height="15" fill="rgb(248,64,5)"/><text x="1171.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 0.30%)</title><rect x="1168" y="516" width="3" height="15" fill="rgb(240,109,47)"/><text x="1171.00" y="526.50"></text></g><g><title>onnxruntime::PrepareForReduce&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (60 samples, 1.79%)</title><rect x="1152" y="452" width="21" height="15" fill="rgb(223,15,6)"/><text x="1155.00" y="462.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1172" y="468" width="1" height="15" fill="rgb(225,22,27)"/><text x="1175.00" y="478.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.09%)</title><rect x="1172" y="484" width="1" height="15" fill="rgb(206,133,48)"/><text x="1175.00" y="494.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.09%)</title><rect x="1172" y="500" width="1" height="15" fill="rgb(237,2,27)"/><text x="1175.00" y="510.50"></text></g><g><title>onnxruntime::ReduceSumSquare&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (66 samples, 1.97%)</title><rect x="1150" y="436" width="24" height="15" fill="rgb(236,210,49)"/><text x="1153.00" y="446.50">o..</text></g><g><title>onnxruntime::BroadcastLoop&lt;onnxruntime::TBroadcaster&lt;float, float&gt;, onnxruntime::TBroadcastOutput&lt;float&gt;, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1174" y="468" width="2" height="15" fill="rgb(228,61,27)"/><text x="1177.00" y="478.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateTensorWithPreAllocateBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (5 samples, 0.15%)</title><rect x="1179" y="564" width="2" height="15" fill="rgb(213,219,30)"/><text x="1182.00" y="574.50"></text></g><g><title>onnxruntime::OpKernelContext::Output (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 0.48%)</title><rect x="1176" y="468" width="6" height="15" fill="rgb(212,64,0)"/><text x="1179.00" y="478.50"></text></g><g><title>onnxruntime::OpKernelContext::OutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 0.48%)</title><rect x="1176" y="484" width="6" height="15" fill="rgb(221,14,7)"/><text x="1179.00" y="494.50"></text></g><g><title>onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (onnxruntime/capi/onnxruntime_pybind11_state.so) (16 samples, 0.48%)</title><rect x="1176" y="500" width="6" height="15" fill="rgb(220,206,20)"/><text x="1179.00" y="510.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (onnxruntime/capi/onnxruntime_pybind11_state.so) (14 samples, 0.42%)</title><rect x="1177" y="516" width="5" height="15" fill="rgb(210,228,42)"/><text x="1180.00" y="526.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBuffer (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.36%)</title><rect x="1178" y="532" width="4" height="15" fill="rgb(206,140,51)"/><text x="1181.00" y="542.50"></text></g><g><title>onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (onnxruntime/capi/onnxruntime_pybind11_state.so) (12 samples, 0.36%)</title><rect x="1178" y="548" width="4" height="15" fill="rgb(205,222,24)"/><text x="1181.00" y="558.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::_M_fill_insert (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 0.27%)</title><rect x="1182" y="500" width="3" height="15" fill="rgb(237,143,37)"/><text x="1185.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (7 samples, 0.21%)</title><rect x="1183" y="516" width="2" height="15" fill="rgb(252,215,7)"/><text x="1186.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (7 samples, 0.21%)</title><rect x="1183" y="532" width="2" height="15" fill="rgb(212,1,9)"/><text x="1186.00" y="542.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (166 samples, 4.96%)</title><rect x="1128" y="420" width="58" height="15" fill="rgb(209,140,49)"/><text x="1131.00" y="430.50">onnxru..</text></g><g><title>onnxruntime::Sub&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 1.05%)</title><rect x="1174" y="436" width="12" height="15" fill="rgb(210,21,39)"/><text x="1177.00" y="446.50"></text></g><g><title>onnxruntime::BroadcastTwo&lt;float, float, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#1}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, float)#2}, onnxruntime::Sub&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::{lambda(Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt;, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Map&lt;Eigen::Matrix&lt;float, -1, 1, 0, -1, 1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;)#3}&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (35 samples, 1.05%)</title><rect x="1174" y="452" width="12" height="15" fill="rgb(209,9,29)"/><text x="1177.00" y="462.50"></text></g><g><title>onnxruntime::TBroadcaster&lt;float, float&gt;::TBroadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.39%)</title><rect x="1182" y="468" width="4" height="15" fill="rgb(213,176,30)"/><text x="1185.00" y="478.50"></text></g><g><title>onnxruntime::Broadcaster::Broadcaster (onnxruntime/capi/onnxruntime_pybind11_state.so) (13 samples, 0.39%)</title><rect x="1182" y="484" width="4" height="15" fill="rgb(252,102,21)"/><text x="1185.00" y="494.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::reserve (onnxruntime/capi/onnxruntime_pybind11_state.so) (3 samples, 0.09%)</title><rect x="1185" y="500" width="1" height="15" fill="rgb(218,6,36)"/><text x="1188.00" y="510.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (3 samples, 0.09%)</title><rect x="1185" y="516" width="1" height="15" fill="rgb(251,76,20)"/><text x="1188.00" y="526.50"></text></g><g><title>malloc (libc-2.29.so) (3 samples, 0.09%)</title><rect x="1185" y="532" width="1" height="15" fill="rgb(230,208,34)"/><text x="1188.00" y="542.50"></text></g><g><title>onnxruntime::ScanImpl::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (185 samples, 5.53%)</title><rect x="1121" y="356" width="66" height="15" fill="rgb(253,131,42)"/><text x="1124.00" y="366.50">onnxrun..</text></g><g><title>onnxruntime::scan::detail::IterateSequence (onnxruntime/capi/onnxruntime_pybind11_state.so) (185 samples, 5.53%)</title><rect x="1121" y="372" width="66" height="15" fill="rgb(221,216,36)"/><text x="1124.00" y="382.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteSubgraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (169 samples, 5.05%)</title><rect x="1127" y="388" width="60" height="15" fill="rgb(224,120,52)"/><text x="1130.00" y="398.50">onnxru..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (169 samples, 5.05%)</title><rect x="1127" y="404" width="60" height="15" fill="rgb(209,189,53)"/><text x="1130.00" y="414.50">onnxru..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (195 samples, 5.82%)</title><rect x="1119" y="260" width="68" height="15" fill="rgb(236,208,14)"/><text x="1122.00" y="270.50">onnxrun..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (195 samples, 5.82%)</title><rect x="1119" y="276" width="68" height="15" fill="rgb(218,126,19)"/><text x="1122.00" y="286.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (195 samples, 5.82%)</title><rect x="1119" y="292" width="68" height="15" fill="rgb(223,63,41)"/><text x="1122.00" y="302.50">onnxrun..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (195 samples, 5.82%)</title><rect x="1119" y="308" width="68" height="15" fill="rgb(216,168,23)"/><text x="1122.00" y="318.50">onnxrun..</text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (195 samples, 5.82%)</title><rect x="1119" y="324" width="68" height="15" fill="rgb(213,31,34)"/><text x="1122.00" y="334.50">onnxrun..</text></g><g><title>onnxruntime::Scan&lt;9&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (187 samples, 5.59%)</title><rect x="1121" y="340" width="66" height="15" fill="rgb(250,131,18)"/><text x="1124.00" y="350.50">onnxrun..</text></g><g><title>onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}::operator() const [clone .isra.1137] (onnxruntime/capi/onnxruntime_pybind11_state.so) (198 samples, 5.91%)</title><rect x="1119" y="244" width="69" height="15" fill="rgb(205,179,11)"/><text x="1122.00" y="254.50">onnxrun..</text></g><g><title>&lt;module&gt; (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:52) (203 samples, 6.06%)</title><rect x="1117" y="52" width="72" height="15" fill="rgb(237,91,35)"/><text x="1120.00" y="62.50">&lt;module&gt;..</text></g><g><title>profile_ort (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:51) (203 samples, 6.06%)</title><rect x="1117" y="68" width="72" height="15" fill="rgb(245,68,31)"/><text x="1120.00" y="78.50">profile_..</text></g><g><title>setup_profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:29) (203 samples, 6.06%)</title><rect x="1117" y="84" width="72" height="15" fill="rgb(248,82,12)"/><text x="1120.00" y="94.50">setup_pr..</text></g><g><title>profile (bench_KNeighborsClassifier_default_b_cl_1_50_12_float_.py:23) (200 samples, 5.97%)</title><rect x="1118" y="100" width="71" height="15" fill="rgb(241,206,21)"/><text x="1121.00" y="110.50">profile ..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py:181) (200 samples, 5.97%)</title><rect x="1118" y="116" width="71" height="15" fill="rgb(235,109,24)"/><text x="1121.00" y="126.50">time_pre..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py:231) (200 samples, 5.97%)</title><rect x="1118" y="132" width="71" height="15" fill="rgb(251,48,36)"/><text x="1121.00" y="142.50">&lt;lambda&gt;..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py:402) (200 samples, 5.97%)</title><rect x="1118" y="148" width="71" height="15" fill="rgb(231,8,23)"/><text x="1121.00" y="158.50">run (mlp..</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py:610) (200 samples, 5.97%)</title><rect x="1118" y="164" width="71" height="15" fill="rgb(224,107,29)"/><text x="1121.00" y="174.50">_run_who..</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py:64) (200 samples, 5.97%)</title><rect x="1118" y="180" width="71" height="15" fill="rgb(236,121,52)"/><text x="1121.00" y="190.50">run (mlp..</text></g><g><title>run (onnxruntime/capi/session.py:136) (199 samples, 5.94%)</title><rect x="1119" y="196" width="70" height="15" fill="rgb(221,98,14)"/><text x="1122.00" y="206.50">run (on..</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (199 samples, 5.94%)</title><rect x="1119" y="212" width="70" height="15" fill="rgb(246,195,26)"/><text x="1122.00" y="222.50">pybind1..</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN [clone .lto_priv.540] (onnxruntime/capi/onnxruntime_pybind11_state.so) (199 samples, 5.94%)</title><rect x="1119" y="228" width="70" height="15" fill="rgb(219,66,54)"/><text x="1122.00" y="238.50">void py..</text></g><g><title>all (3,348 samples, 100%)</title><rect x="10" y="36" width="1180" height="15" fill="rgb(237,165,52)"/><text x="13.00" y="46.50"></text></g></g></svg>