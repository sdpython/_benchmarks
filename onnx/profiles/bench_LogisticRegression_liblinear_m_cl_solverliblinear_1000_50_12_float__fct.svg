<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    for (var x = txt.length - 2; x > 0; x--) {
        if (t.getSubStringLength(0, x + 2) <= w) {
            t.textContent = txt.substring(0, x) + "..";
            return;
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="501.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="501.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (mlprodict/onnxrt/__init__.py) (9 samples, 1.01%)</title><rect x="0.8999%" y="436" width="1.0124%" height="15" fill="rgb(227,0,7)"/><text x="1.1499%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.01%)</title><rect x="0.8999%" y="452" width="1.0124%" height="15" fill="rgb(217,0,24)"/><text x="1.1499%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (9 samples, 1.01%)</title><rect x="0.8999%" y="468" width="1.0124%" height="15" fill="rgb(221,193,54)"/><text x="1.1499%" y="478.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (10 samples, 1.12%)</title><rect x="0.8999%" y="340" width="1.1249%" height="15" fill="rgb(248,212,6)"/><text x="1.1499%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.12%)</title><rect x="0.8999%" y="356" width="1.1249%" height="15" fill="rgb(208,68,35)"/><text x="1.1499%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.12%)</title><rect x="0.8999%" y="372" width="1.1249%" height="15" fill="rgb(232,128,0)"/><text x="1.1499%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.12%)</title><rect x="0.8999%" y="388" width="1.1249%" height="15" fill="rgb(207,160,47)"/><text x="1.1499%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (10 samples, 1.12%)</title><rect x="0.8999%" y="404" width="1.1249%" height="15" fill="rgb(228,23,34)"/><text x="1.1499%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (10 samples, 1.12%)</title><rect x="0.8999%" y="420" width="1.1249%" height="15" fill="rgb(218,30,26)"/><text x="1.1499%" y="430.50"></text></g><g><title>&lt;module&gt; (mlprodict/asv_benchmark/__init__.py) (12 samples, 1.35%)</title><rect x="0.8999%" y="244" width="1.3498%" height="15" fill="rgb(220,122,19)"/><text x="1.1499%" y="254.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.35%)</title><rect x="0.8999%" y="260" width="1.3498%" height="15" fill="rgb(250,228,42)"/><text x="1.1499%" y="270.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.35%)</title><rect x="0.8999%" y="276" width="1.3498%" height="15" fill="rgb(240,193,28)"/><text x="1.1499%" y="286.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.35%)</title><rect x="0.8999%" y="292" width="1.3498%" height="15" fill="rgb(216,20,37)"/><text x="1.1499%" y="302.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (12 samples, 1.35%)</title><rect x="0.8999%" y="308" width="1.3498%" height="15" fill="rgb(206,188,39)"/><text x="1.1499%" y="318.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (12 samples, 1.35%)</title><rect x="0.8999%" y="324" width="1.3498%" height="15" fill="rgb(217,207,13)"/><text x="1.1499%" y="334.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (21 samples, 2.36%)</title><rect x="0.0000%" y="68" width="2.3622%" height="15" fill="rgb(231,73,38)"/><text x="0.2500%" y="78.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (21 samples, 2.36%)</title><rect x="0.0000%" y="84" width="2.3622%" height="15" fill="rgb(225,20,46)"/><text x="0.2500%" y="94.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (21 samples, 2.36%)</title><rect x="0.0000%" y="100" width="2.3622%" height="15" fill="rgb(210,31,41)"/><text x="0.2500%" y="110.50">_l..</text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (21 samples, 2.36%)</title><rect x="0.0000%" y="116" width="2.3622%" height="15" fill="rgb(221,200,47)"/><text x="0.2500%" y="126.50">ex..</text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (21 samples, 2.36%)</title><rect x="0.0000%" y="132" width="2.3622%" height="15" fill="rgb(226,26,5)"/><text x="0.2500%" y="142.50">_c..</text></g><g><title>&lt;module&gt; (profiles/benches/linear_model/LogisticRegression/bench_LogisticRegression_liblinear_m_cl_solverliblinear.py) (21 samples, 2.36%)</title><rect x="0.0000%" y="148" width="2.3622%" height="15" fill="rgb(249,33,26)"/><text x="0.2500%" y="158.50">&lt;m..</text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;) (21 samples, 2.36%)</title><rect x="0.0000%" y="164" width="2.3622%" height="15" fill="rgb(235,183,28)"/><text x="0.2500%" y="174.50">_f..</text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (21 samples, 2.36%)</title><rect x="0.0000%" y="180" width="2.3622%" height="15" fill="rgb(221,5,38)"/><text x="0.2500%" y="190.50">_f..</text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;) (13 samples, 1.46%)</title><rect x="0.8999%" y="196" width="1.4623%" height="15" fill="rgb(247,18,42)"/><text x="1.1499%" y="206.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;) (13 samples, 1.46%)</title><rect x="0.8999%" y="212" width="1.4623%" height="15" fill="rgb(241,131,45)"/><text x="1.1499%" y="222.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;) (13 samples, 1.46%)</title><rect x="0.8999%" y="228" width="1.4623%" height="15" fill="rgb(249,31,29)"/><text x="1.1499%" y="238.50"></text></g><g><title>0x7f8a4d7fdec0 (libc-2.29.so) (19 samples, 2.14%)</title><rect x="6.0742%" y="116" width="2.1372%" height="15" fill="rgb(225,111,53)"/><text x="6.3242%" y="126.50">0..</text></g><g><title>onnxruntime::ml::LinearClassifier&lt;float&gt;::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (164 samples, 18.45%)</title><rect x="9.7863%" y="324" width="18.4477%" height="15" fill="rgb(238,160,17)"/><text x="10.0363%" y="334.50">onnxruntime::ml::LinearClassi..</text></g><g><title>onnxruntime::ml::write_scores&lt;float&gt; [clone .constprop.182] (onnxruntime/capi/onnxruntime_pybind11_state.so) (33 samples, 3.71%)</title><rect x="24.5219%" y="340" width="3.7120%" height="15" fill="rgb(214,148,48)"/><text x="24.7719%" y="350.50">onnx..</text></g><g><title>onnxruntime::ml::Normalizer::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.01%)</title><rect x="28.2340%" y="324" width="1.0124%" height="15" fill="rgb(232,36,49)"/><text x="28.4840%" y="334.50"></text></g><g><title>onnxruntime::ml::Normalizer::Normalize&lt;float&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (9 samples, 1.01%)</title><rect x="28.2340%" y="340" width="1.0124%" height="15" fill="rgb(209,103,24)"/><text x="28.4840%" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (76 samples, 8.55%)</title><rect x="30.9336%" y="340" width="8.5489%" height="15" fill="rgb(229,88,8)"/><text x="31.1836%" y="350.50">operator new..</text></g><g><title>malloc (libc-2.29.so) (75 samples, 8.44%)</title><rect x="31.0461%" y="356" width="8.4364%" height="15" fill="rgb(213,181,19)"/><text x="31.2961%" y="366.50">malloc (libc..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (onnxruntime/capi/onnxruntime_pybind11_state.so) (10 samples, 1.12%)</title><rect x="40.2700%" y="340" width="1.1249%" height="15" fill="rgb(254,191,54)"/><text x="40.5200%" y="350.50"></text></g><g><title>onnxruntime::SequentialExecutor::Execute (onnxruntime/capi/onnxruntime_pybind11_state.so) (291 samples, 32.73%)</title><rect x="9.4488%" y="308" width="32.7334%" height="15" fill="rgb(241,83,37)"/><text x="9.6988%" y="318.50">onnxruntime::SequentialExecutor::Execute (onnxruntime..</text></g><g><title>onnxruntime::ml::ZipMapOp::Compute (onnxruntime/capi/onnxruntime_pybind11_state.so) (115 samples, 12.94%)</title><rect x="29.2463%" y="324" width="12.9359%" height="15" fill="rgb(233,36,39)"/><text x="29.4963%" y="334.50">onnxruntime::ml::Zi..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (293 samples, 32.96%)</title><rect x="9.3363%" y="244" width="32.9584%" height="15" fill="rgb(226,3,54)"/><text x="9.5863%" y="254.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/..</text></g><g><title>onnxruntime::InferenceSession::Run (onnxruntime/capi/onnxruntime_pybind11_state.so) (292 samples, 32.85%)</title><rect x="9.4488%" y="260" width="32.8459%" height="15" fill="rgb(245,192,40)"/><text x="9.6988%" y="270.50">onnxruntime::InferenceSession::Run (onnxruntime/capi/..</text></g><g><title>onnxruntime::utils::ExecuteGraph (onnxruntime/capi/onnxruntime_pybind11_state.so) (292 samples, 32.85%)</title><rect x="9.4488%" y="276" width="32.8459%" height="15" fill="rgb(238,167,29)"/><text x="9.6988%" y="286.50">onnxruntime::utils::ExecuteGraph (onnxruntime/capi/on..</text></g><g><title>onnxruntime::utils::ExecuteGraphImpl (onnxruntime/capi/onnxruntime_pybind11_state.so) (292 samples, 32.85%)</title><rect x="9.4488%" y="292" width="32.8459%" height="15" fill="rgb(232,182,51)"/><text x="9.6988%" y="302.50">onnxruntime::utils::ExecuteGraphImpl (onnxruntime/cap..</text></g><g><title>0x7f8a4d7fdd17 (libc-2.29.so) (13 samples, 1.46%)</title><rect x="43.5321%" y="260" width="1.4623%" height="15" fill="rgb(231,60,39)"/><text x="43.7821%" y="270.50"></text></g><g><title>onnxruntime::NonTensorType&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt;::Delete (onnxruntime/capi/onnxruntime_pybind11_state.so) (51 samples, 5.74%)</title><rect x="42.2947%" y="244" width="5.7368%" height="15" fill="rgb(208,69,12)"/><text x="42.5447%" y="254.50">onnxrun..</text></g><g><title>std::_Rb_tree&lt;long, std::pair&lt;long const, float&gt;, std::_Select1st&lt;std::pair&lt;long const, float&gt; &gt;, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;::_M_erase (onnxruntime/capi/onnxruntime_pybind11_state.so) (20 samples, 2.25%)</title><rect x="45.7818%" y="260" width="2.2497%" height="15" fill="rgb(235,93,37)"/><text x="46.0318%" y="270.50">s..</text></g><g><title>pybind11::dict::dict (onnxruntime/capi/onnxruntime_pybind11_state.so) (27 samples, 3.04%)</title><rect x="59.0551%" y="292" width="3.0371%" height="15" fill="rgb(213,116,39)"/><text x="59.3051%" y="302.50">pyb..</text></g><g><title>onnxruntime::python::AddNonTensor&lt;std::vector&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, std::allocator&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; &gt; &gt; &gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (129 samples, 14.51%)</title><rect x="48.0315%" y="260" width="14.5107%" height="15" fill="rgb(222,207,29)"/><text x="48.2815%" y="270.50">onnxruntime::python::A..</text></g><g><title>pybind11::detail::map_caster&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt;, long, float&gt;::cast&lt;std::map&lt;long, float, std::less&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, float&gt; &gt; &gt; const&amp;&gt; (onnxruntime/capi/onnxruntime_pybind11_state.so) (128 samples, 14.40%)</title><rect x="48.1440%" y="276" width="14.3982%" height="15" fill="rgb(206,96,30)"/><text x="48.3940%" y="286.50">pybind11::detail::map_..</text></g><g><title>onnxruntime::python::AddNonTensorAsPyObj (onnxruntime/capi/onnxruntime_pybind11_state.so) (130 samples, 14.62%)</title><rect x="48.0315%" y="244" width="14.6232%" height="15" fill="rgb(218,138,4)"/><text x="48.2815%" y="254.50">onnxruntime::python::A..</text></g><g><title>profile_ort (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py) (541 samples, 60.85%)</title><rect x="2.3622%" y="68" width="60.8549%" height="15" fill="rgb(250,191,14)"/><text x="2.6122%" y="78.50">profile_ort (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py)</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py) (541 samples, 60.85%)</title><rect x="2.3622%" y="84" width="60.8549%" height="15" fill="rgb(239,60,40)"/><text x="2.6122%" y="94.50">setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py)</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py) (541 samples, 60.85%)</title><rect x="2.3622%" y="100" width="60.8549%" height="15" fill="rgb(206,27,48)"/><text x="2.6122%" y="110.50">profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py)</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (489 samples, 55.01%)</title><rect x="8.2115%" y="116" width="55.0056%" height="15" fill="rgb(225,35,8)"/><text x="8.4615%" y="126.50">time_predict (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (489 samples, 55.01%)</title><rect x="8.2115%" y="132" width="55.0056%" height="15" fill="rgb(250,213,24)"/><text x="8.4615%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py)</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (488 samples, 54.89%)</title><rect x="8.3240%" y="148" width="54.8931%" height="15" fill="rgb(247,123,22)"/><text x="8.5740%" y="158.50">run (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py) (487 samples, 54.78%)</title><rect x="8.4364%" y="164" width="54.7807%" height="15" fill="rgb(231,138,38)"/><text x="8.6864%" y="174.50">_run_whole_runtime (mlprodict/onnxrt/onnx_inference.py)</text></g><g><title>run (mlprodict/onnxrt/ops_whole/session.py) (486 samples, 54.67%)</title><rect x="8.5489%" y="180" width="54.6682%" height="15" fill="rgb(231,145,46)"/><text x="8.7989%" y="190.50">run (mlprodict/onnxrt/ops_whole/session.py)</text></g><g><title>run (onnxruntime/capi/session.py) (485 samples, 54.56%)</title><rect x="8.6614%" y="196" width="54.5557%" height="15" fill="rgb(251,118,11)"/><text x="8.9114%" y="206.50">run (onnxruntime/capi/session.py)</text></g><g><title>pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so) (479 samples, 53.88%)</title><rect x="9.3363%" y="212" width="53.8808%" height="15" fill="rgb(217,147,25)"/><text x="9.5863%" y="222.50">pybind11::cpp_function::dispatcher (onnxruntime/capi/onnxruntime_pybind11_state.so)</text></g><g><title>void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt;, onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(onnxruntime::python::addObjectMethods(pybind11::module&amp;)::{lambda(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*)#8}&amp;&amp;, std::vector&lt;pybind11::object, std::allocator&lt;pybind11::object&gt; &gt; (*)(onnxruntime::InferenceSession*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, pybind11::object, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, pybind11::object&gt; &gt; &gt;, OrtRunOptions*), pybind11::name const, pybind11::is_method&amp;, pybind11::sibling)::{lambda(pybind11::detail::function_call&amp;)#3}::_FUN (onnxruntime/capi/onnxruntime_pybind11_state.so) (479 samples, 53.88%)</title><rect x="9.3363%" y="228" width="53.8808%" height="15" fill="rgb(247,81,37)"/><text x="9.5863%" y="238.50">void pybind11::cpp_function::initialize&lt;onnxruntime::python::addObjectMethods(pybind11::m..</text></g><g><title>gemm (cblasfuncs.c) (14 samples, 1.57%)</title><rect x="64.7919%" y="308" width="1.5748%" height="15" fill="rgb(209,12,38)"/><text x="65.0419%" y="318.50"></text></g><g><title>cblas_sgemm (libopenblasp-r0-34a18dc3.3.7.so) (14 samples, 1.57%)</title><rect x="64.7919%" y="324" width="1.5748%" height="15" fill="rgb(227,1,9)"/><text x="65.0419%" y="334.50"></text></g><g><title>sgemm_tn (libopenblasp-r0-34a18dc3.3.7.so) (13 samples, 1.46%)</title><rect x="64.9044%" y="340" width="1.4623%" height="15" fill="rgb(248,47,43)"/><text x="65.1544%" y="350.50"></text></g><g><title>sgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (12 samples, 1.35%)</title><rect x="65.0169%" y="356" width="1.3498%" height="15" fill="rgb(221,10,30)"/><text x="65.2669%" y="366.50"></text></g><g><title>array_implement_array_function (arrayfunction_override.c) (17 samples, 1.91%)</title><rect x="64.5669%" y="244" width="1.9123%" height="15" fill="rgb(210,229,1)"/><text x="64.8169%" y="254.50">a..</text></g><g><title>array_matrixproduct (multiarraymodule.c) (17 samples, 1.91%)</title><rect x="64.5669%" y="260" width="1.9123%" height="15" fill="rgb(222,148,37)"/><text x="64.8169%" y="270.50">a..</text></g><g><title>PyArray_MatrixProduct2 (multiarraymodule.c) (17 samples, 1.91%)</title><rect x="64.5669%" y="276" width="1.9123%" height="15" fill="rgb(234,67,33)"/><text x="64.8169%" y="286.50">P..</text></g><g><title>cblas_matrixproduct (cblasfuncs.c) (16 samples, 1.80%)</title><rect x="64.6794%" y="292" width="1.7998%" height="15" fill="rgb(247,98,35)"/><text x="64.9294%" y="302.50">c..</text></g><g><title>numpy_dot_inplace (mlprodict/onnxrt/ops_cpu/_op_numpy_helper.py) (68 samples, 7.65%)</title><rect x="64.3420%" y="212" width="7.6490%" height="15" fill="rgb(247,138,52)"/><text x="64.5920%" y="222.50">numpy_dot_..</text></g><g><title>dot (&lt;__array_function__ internals&gt;) (68 samples, 7.65%)</title><rect x="64.3420%" y="228" width="7.6490%" height="15" fill="rgb(213,79,30)"/><text x="64.5920%" y="238.50">dot (&lt;__ar..</text></g><g><title>sgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (46 samples, 5.17%)</title><rect x="66.8166%" y="244" width="5.1744%" height="15" fill="rgb(246,177,23)"/><text x="67.0666%" y="254.50">sgemm_..</text></g><g><title>0x7f8a35fb41d4 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (13 samples, 1.46%)</title><rect x="73.1159%" y="292" width="1.4623%" height="15" fill="rgb(230,62,27)"/><text x="73.3659%" y="302.50"></text></g><g><title>expf (libm-2.29.so) (13 samples, 1.46%)</title><rect x="73.1159%" y="308" width="1.4623%" height="15" fill="rgb(216,154,8)"/><text x="73.3659%" y="318.50"></text></g><g><title>0x7f8a35f91f9d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (17 samples, 1.91%)</title><rect x="73.1159%" y="276" width="1.9123%" height="15" fill="rgb(244,35,45)"/><text x="73.3659%" y="286.50">0..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (27 samples, 3.04%)</title><rect x="72.2160%" y="244" width="3.0371%" height="15" fill="rgb(251,115,12)"/><text x="72.4660%" y="254.50">exe..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (19 samples, 2.14%)</title><rect x="73.1159%" y="260" width="2.1372%" height="15" fill="rgb(240,54,50)"/><text x="73.3659%" y="270.50">t..</text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_linear_classifier.py) (102 samples, 11.47%)</title><rect x="63.8920%" y="196" width="11.4736%" height="15" fill="rgb(233,84,52)"/><text x="64.1420%" y="206.50">_run (mlprodict/o..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (30 samples, 3.37%)</title><rect x="71.9910%" y="212" width="3.3746%" height="15" fill="rgb(207,117,47)"/><text x="72.2410%" y="222.50">ufu..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (30 samples, 3.37%)</title><rect x="71.9910%" y="228" width="3.3746%" height="15" fill="rgb(249,43,39)"/><text x="72.2410%" y="238.50">PyU..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (17 samples, 1.91%)</title><rect x="76.2655%" y="324" width="1.9123%" height="15" fill="rgb(209,38,44)"/><text x="76.5155%" y="334.50">P..</text></g><g><title>reduce_loop (ufunc_object.c) (12 samples, 1.35%)</title><rect x="76.8279%" y="340" width="1.3498%" height="15" fill="rgb(236,212,23)"/><text x="77.0779%" y="350.50"></text></g><g><title>array_sum (methods.c) (22 samples, 2.47%)</title><rect x="75.9280%" y="228" width="2.4747%" height="15" fill="rgb(242,79,21)"/><text x="76.1780%" y="238.50">ar..</text></g><g><title>forward_ndarray_method (methods.c) (22 samples, 2.47%)</title><rect x="75.9280%" y="244" width="2.4747%" height="15" fill="rgb(211,96,35)"/><text x="76.1780%" y="254.50">fo..</text></g><g><title>_sum (numpy/core/_methods.py) (21 samples, 2.36%)</title><rect x="76.0405%" y="260" width="2.3622%" height="15" fill="rgb(253,215,40)"/><text x="76.2905%" y="270.50">_s..</text></g><g><title>ufunc_reduce (ufunc_object.c) (21 samples, 2.36%)</title><rect x="76.0405%" y="276" width="2.3622%" height="15" fill="rgb(211,81,21)"/><text x="76.2905%" y="286.50">uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (21 samples, 2.36%)</title><rect x="76.0405%" y="292" width="2.3622%" height="15" fill="rgb(208,190,38)"/><text x="76.2905%" y="302.50">Py..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (20 samples, 2.25%)</title><rect x="76.1530%" y="308" width="2.2497%" height="15" fill="rgb(235,213,38)"/><text x="76.4030%" y="318.50">P..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (10 samples, 1.12%)</title><rect x="78.4027%" y="260" width="1.1249%" height="15" fill="rgb(237,122,38)"/><text x="78.6527%" y="270.50"></text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (10 samples, 1.12%)</title><rect x="78.4027%" y="276" width="1.1249%" height="15" fill="rgb(244,218,35)"/><text x="78.6527%" y="286.50"></text></g><g><title>iterator_loop (ufunc_object.c) (10 samples, 1.12%)</title><rect x="78.4027%" y="292" width="1.1249%" height="15" fill="rgb(240,68,47)"/><text x="78.6527%" y="302.50"></text></g><g><title>array_true_divide (number.c) (11 samples, 1.24%)</title><rect x="78.4027%" y="228" width="1.2373%" height="15" fill="rgb(210,16,53)"/><text x="78.6527%" y="238.50"></text></g><g><title>ufunc_generic_call (ufunc_object.c) (11 samples, 1.24%)</title><rect x="78.4027%" y="244" width="1.2373%" height="15" fill="rgb(235,124,12)"/><text x="78.6527%" y="254.50"></text></g><g><title>_run (mlprodict/onnxrt/ops_cpu/op_normalizer.py) (40 samples, 4.50%)</title><rect x="75.3656%" y="196" width="4.4994%" height="15" fill="rgb(224,169,11)"/><text x="75.6156%" y="206.50">_run ..</text></g><g><title>norm_l1 (mlprodict/onnxrt/ops_cpu/op_normalizer.py) (40 samples, 4.50%)</title><rect x="75.3656%" y="212" width="4.4994%" height="15" fill="rgb(250,166,2)"/><text x="75.6156%" y="222.50">norm_..</text></g><g><title>profile_pyrtc (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py) (149 samples, 16.76%)</title><rect x="63.2171%" y="68" width="16.7604%" height="15" fill="rgb(242,216,29)"/><text x="63.4671%" y="78.50">profile_pyrtc (bench_Logis..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py) (149 samples, 16.76%)</title><rect x="63.2171%" y="84" width="16.7604%" height="15" fill="rgb(230,116,27)"/><text x="63.4671%" y="94.50">setup_profile (bench_Logis..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py) (149 samples, 16.76%)</title><rect x="63.2171%" y="100" width="16.7604%" height="15" fill="rgb(228,99,48)"/><text x="63.4671%" y="110.50">profile (bench_LogisticReg..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (149 samples, 16.76%)</title><rect x="63.2171%" y="116" width="16.7604%" height="15" fill="rgb(253,11,6)"/><text x="63.4671%" y="126.50">time_predict (mlprodict/as..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (148 samples, 16.65%)</title><rect x="63.3296%" y="132" width="16.6479%" height="15" fill="rgb(247,143,39)"/><text x="63.5796%" y="142.50">&lt;lambda&gt; (mlprodict/asv_be..</text></g><g><title>run (mlprodict/onnxrt/onnx_inference.py) (147 samples, 16.54%)</title><rect x="63.4421%" y="148" width="16.5354%" height="15" fill="rgb(236,97,10)"/><text x="63.6921%" y="158.50">run (mlprodict/onnxrt/onnx..</text></g><g><title>_run_sequence_runtime_compiled (mlprodict/onnxrt/onnx_inference.py) (146 samples, 16.42%)</title><rect x="63.5546%" y="164" width="16.4229%" height="15" fill="rgb(233,208,19)"/><text x="63.8046%" y="174.50">_run_sequence_runtime_com..</text></g><g><title>compiled_run (&lt;string&gt;) (146 samples, 16.42%)</title><rect x="63.5546%" y="180" width="16.4229%" height="15" fill="rgb(216,164,2)"/><text x="63.8046%" y="190.50">compiled_run (&lt;string&gt;)</text></g><g><title>DOUBLE_add (loops.c.src) (11 samples, 1.24%)</title><rect x="81.8898%" y="308" width="1.2373%" height="15" fill="rgb(220,129,5)"/><text x="82.1398%" y="318.50"></text></g><g><title>array_sum (methods.c) (21 samples, 2.36%)</title><rect x="80.9899%" y="180" width="2.3622%" height="15" fill="rgb(242,17,10)"/><text x="81.2399%" y="190.50">ar..</text></g><g><title>forward_ndarray_method (methods.c) (21 samples, 2.36%)</title><rect x="80.9899%" y="196" width="2.3622%" height="15" fill="rgb(242,107,0)"/><text x="81.2399%" y="206.50">fo..</text></g><g><title>_sum (numpy/core/_methods.py) (21 samples, 2.36%)</title><rect x="80.9899%" y="212" width="2.3622%" height="15" fill="rgb(251,28,31)"/><text x="81.2399%" y="222.50">_s..</text></g><g><title>ufunc_reduce (ufunc_object.c) (21 samples, 2.36%)</title><rect x="80.9899%" y="228" width="2.3622%" height="15" fill="rgb(233,223,10)"/><text x="81.2399%" y="238.50">uf..</text></g><g><title>PyUFunc_GenericReduction (ufunc_object.c) (20 samples, 2.25%)</title><rect x="81.1024%" y="244" width="2.2497%" height="15" fill="rgb(215,21,27)"/><text x="81.3524%" y="254.50">P..</text></g><g><title>PyUFunc_Reduce (ufunc_object.c) (18 samples, 2.02%)</title><rect x="81.3273%" y="260" width="2.0247%" height="15" fill="rgb(232,23,21)"/><text x="81.5773%" y="270.50">P..</text></g><g><title>PyUFunc_ReduceWrapper (reduction.c) (18 samples, 2.02%)</title><rect x="81.3273%" y="276" width="2.0247%" height="15" fill="rgb(244,5,23)"/><text x="81.5773%" y="286.50">P..</text></g><g><title>reduce_loop (ufunc_object.c) (14 samples, 1.57%)</title><rect x="81.7773%" y="292" width="1.5748%" height="15" fill="rgb(226,81,46)"/><text x="82.0273%" y="302.50"></text></g><g><title>check_array (sklearn/utils/validation.py) (26 samples, 2.92%)</title><rect x="84.3645%" y="196" width="2.9246%" height="15" fill="rgb(247,70,30)"/><text x="84.6145%" y="206.50">ch..</text></g><g><title>dgemm_kernel_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (20 samples, 2.25%)</title><rect x="87.8515%" y="212" width="2.2497%" height="15" fill="rgb(212,68,19)"/><text x="88.1015%" y="222.50">d..</text></g><g><title>DOUBLE_matmul (matmul.c.src) (15 samples, 1.69%)</title><rect x="90.2137%" y="260" width="1.6873%" height="15" fill="rgb(240,187,13)"/><text x="90.4637%" y="270.50"></text></g><g><title>cblas_dgemm (libopenblasp-r0-34a18dc3.3.7.so) (14 samples, 1.57%)</title><rect x="90.3262%" y="276" width="1.5748%" height="15" fill="rgb(223,113,26)"/><text x="90.5762%" y="286.50"></text></g><g><title>dgemm_nn (libopenblasp-r0-34a18dc3.3.7.so) (14 samples, 1.57%)</title><rect x="90.3262%" y="292" width="1.5748%" height="15" fill="rgb(206,192,2)"/><text x="90.5762%" y="302.50"></text></g><g><title>dgemm_oncopy_SANDYBRIDGE (libopenblasp-r0-34a18dc3.3.7.so) (14 samples, 1.57%)</title><rect x="90.3262%" y="308" width="1.5748%" height="15" fill="rgb(241,108,4)"/><text x="90.5762%" y="318.50"></text></g><g><title>PyArray_AssignArray (array_assign_array.c) (23 samples, 2.59%)</title><rect x="91.9010%" y="292" width="2.5872%" height="15" fill="rgb(247,173,49)"/><text x="92.1510%" y="302.50">Py..</text></g><g><title>raw_array_assign_array (array_assign_array.c) (23 samples, 2.59%)</title><rect x="91.9010%" y="308" width="2.5872%" height="15" fill="rgb(224,114,35)"/><text x="92.1510%" y="318.50">ra..</text></g><g><title>_aligned_contig_cast_float_to_double (lowlevel_strided_loops.c.src) (23 samples, 2.59%)</title><rect x="91.9010%" y="324" width="2.5872%" height="15" fill="rgb(245,159,27)"/><text x="92.1510%" y="334.50">_a..</text></g><g><title>NpyIter_AdvancedNew (nditer_constr.c) (25 samples, 2.81%)</title><rect x="91.9010%" y="260" width="2.8121%" height="15" fill="rgb(245,172,44)"/><text x="92.1510%" y="270.50">Np..</text></g><g><title>npyiter_allocate_arrays (nditer_constr.c) (25 samples, 2.81%)</title><rect x="91.9010%" y="276" width="2.8121%" height="15" fill="rgb(236,23,11)"/><text x="92.1510%" y="286.50">np..</text></g><g><title>decision_function (sklearn/linear_model/_base.py) (104 samples, 11.70%)</title><rect x="83.3521%" y="180" width="11.6985%" height="15" fill="rgb(205,117,38)"/><text x="83.6021%" y="190.50">decision_function..</text></g><g><title>safe_sparse_dot (sklearn/utils/extmath.py) (64 samples, 7.20%)</title><rect x="87.8515%" y="196" width="7.1991%" height="15" fill="rgb(237,72,25)"/><text x="88.1015%" y="206.50">safe_spars..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (44 samples, 4.95%)</title><rect x="90.1012%" y="212" width="4.9494%" height="15" fill="rgb(244,70,9)"/><text x="90.3512%" y="222.50">ufunc_..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (44 samples, 4.95%)</title><rect x="90.1012%" y="228" width="4.9494%" height="15" fill="rgb(217,125,39)"/><text x="90.3512%" y="238.50">PyUFun..</text></g><g><title>PyUFunc_GeneralizedFunction (ufunc_object.c) (44 samples, 4.95%)</title><rect x="90.1012%" y="244" width="4.9494%" height="15" fill="rgb(235,36,10)"/><text x="90.3512%" y="254.50">PyUFun..</text></g><g><title>0x7f8a35fb4225 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (19 samples, 2.14%)</title><rect x="96.1755%" y="260" width="2.1372%" height="15" fill="rgb(251,123,47)"/><text x="96.4255%" y="270.50">0..</text></g><g><title>exp (libm-2.29.so) (17 samples, 1.91%)</title><rect x="96.4004%" y="276" width="1.9123%" height="15" fill="rgb(221,13,13)"/><text x="96.6504%" y="286.50">e..</text></g><g><title>0x7f8a35f9363d (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (30 samples, 3.37%)</title><rect x="96.1755%" y="244" width="3.3746%" height="15" fill="rgb(238,131,9)"/><text x="96.4255%" y="254.50">0x7..</text></g><g><title>0x7f8a35fb4239 (scipy/special/_ufuncs.cpython-37m-x86_64-linux-gnu.so) (10 samples, 1.12%)</title><rect x="98.4252%" y="260" width="1.1249%" height="15" fill="rgb(211,50,8)"/><text x="98.6752%" y="270.50"></text></g><g><title>_predict_proba_lr (sklearn/linear_model/_base.py) (171 samples, 19.24%)</title><rect x="80.4274%" y="164" width="19.2351%" height="15" fill="rgb(245,182,24)"/><text x="80.6774%" y="174.50">_predict_proba_lr (sklearn/lin..</text></g><g><title>ufunc_generic_call (ufunc_object.c) (41 samples, 4.61%)</title><rect x="95.0506%" y="180" width="4.6119%" height="15" fill="rgb(242,14,37)"/><text x="95.3006%" y="190.50">ufunc..</text></g><g><title>PyUFunc_GenericFunction (ufunc_object.c) (40 samples, 4.50%)</title><rect x="95.1631%" y="196" width="4.4994%" height="15" fill="rgb(246,228,12)"/><text x="95.4131%" y="206.50">PyUFu..</text></g><g><title>execute_legacy_ufunc_loop (ufunc_object.c) (39 samples, 4.39%)</title><rect x="95.2756%" y="212" width="4.3870%" height="15" fill="rgb(213,55,15)"/><text x="95.5256%" y="222.50">execu..</text></g><g><title>trivial_two_operand_loop (ufunc_object.c) (33 samples, 3.71%)</title><rect x="95.9505%" y="228" width="3.7120%" height="15" fill="rgb(209,9,3)"/><text x="96.2005%" y="238.50">triv..</text></g><g><title>all (889 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py) (889 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="62.50">&lt;module&gt; (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py)</text></g><g><title>profile_skl (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py) (178 samples, 20.02%)</title><rect x="79.9775%" y="68" width="20.0225%" height="15" fill="rgb(220,109,13)"/><text x="80.2275%" y="78.50">profile_skl (bench_LogisticRegr..</text></g><g><title>setup_profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py) (178 samples, 20.02%)</title><rect x="79.9775%" y="84" width="20.0225%" height="15" fill="rgb(232,18,1)"/><text x="80.2275%" y="94.50">setup_profile (bench_LogisticRe..</text></g><g><title>profile (bench_LogisticRegression_liblinear_m_cl_solverliblinear_1000_50_12_float_.py) (178 samples, 20.02%)</title><rect x="79.9775%" y="100" width="20.0225%" height="15" fill="rgb(215,41,42)"/><text x="80.2275%" y="110.50">profile (bench_LogisticRegressi..</text></g><g><title>time_predict (mlprodict/asv_benchmark/common_asv_skl.py) (178 samples, 20.02%)</title><rect x="79.9775%" y="116" width="20.0225%" height="15" fill="rgb(224,123,36)"/><text x="80.2275%" y="126.50">time_predict (mlprodict/asv_ben..</text></g><g><title>&lt;lambda&gt; (mlprodict/asv_benchmark/common_asv_skl.py) (177 samples, 19.91%)</title><rect x="80.0900%" y="132" width="19.9100%" height="15" fill="rgb(240,125,3)"/><text x="80.3400%" y="142.50">&lt;lambda&gt; (mlprodict/asv_benchma..</text></g><g><title>predict_proba (sklearn/linear_model/_logistic.py) (176 samples, 19.80%)</title><rect x="80.2025%" y="148" width="19.7975%" height="15" fill="rgb(205,98,50)"/><text x="80.4525%" y="158.50">predict_proba (sklearn/linear_m..</text></g></svg></svg>